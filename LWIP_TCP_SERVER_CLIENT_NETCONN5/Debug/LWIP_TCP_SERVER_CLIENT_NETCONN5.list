
LWIP_TCP_SERVER_CLIENT_NETCONN5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017658  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003a28  08017808  08017808  00018808  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801b230  0801b230  0001d08c  2**0
                  CONTENTS
  4 .ARM          00000008  0801b230  0801b230  0001c230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801b238  0801b238  0001d08c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801b238  0801b238  0001c238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801b23c  0801b23c  0001c23c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000008c  20000000  0801b240  0001d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0001d08c  2**0
                  CONTENTS
 10 .bss          0000ef60  2000008c  2000008c  0001d08c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000efec  2000efec  0001d08c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0001d08c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00031e47  00000000  00000000  0001d0bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00007f67  00000000  00000000  0004ef03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000023d0  00000000  00000000  00056e70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001c5a  00000000  00000000  00059240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000366b8  00000000  00000000  0005ae9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003a349  00000000  00000000  00091552  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00101488  00000000  00000000  000cb89b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001ccd23  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00009cb8  00000000  00000000  001ccd68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007b  00000000  00000000  001d6a20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080177f0 	.word	0x080177f0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000090 	.word	0x20000090
 80001ec:	080177f0 	.word	0x080177f0

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96a 	b.w	800058c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	460c      	mov	r4, r1
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d14e      	bne.n	800037a <__udivmoddi4+0xaa>
 80002dc:	4694      	mov	ip, r2
 80002de:	458c      	cmp	ip, r1
 80002e0:	4686      	mov	lr, r0
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	d962      	bls.n	80003ae <__udivmoddi4+0xde>
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0320 	rsb	r3, r2, #32
 80002ee:	4091      	lsls	r1, r2
 80002f0:	fa20 f303 	lsr.w	r3, r0, r3
 80002f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002f8:	4319      	orrs	r1, r3
 80002fa:	fa00 fe02 	lsl.w	lr, r0, r2
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f f68c 	uxth.w	r6, ip
 8000306:	fbb1 f4f7 	udiv	r4, r1, r7
 800030a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030e:	fb07 1114 	mls	r1, r7, r4, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb04 f106 	mul.w	r1, r4, r6
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f104 30ff 	add.w	r0, r4, #4294967295
 8000326:	f080 8112 	bcs.w	800054e <__udivmoddi4+0x27e>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 810f 	bls.w	800054e <__udivmoddi4+0x27e>
 8000330:	3c02      	subs	r4, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	fa1f f38e 	uxth.w	r3, lr
 800033a:	fbb1 f0f7 	udiv	r0, r1, r7
 800033e:	fb07 1110 	mls	r1, r7, r0, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb00 f606 	mul.w	r6, r0, r6
 800034a:	429e      	cmp	r6, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x94>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f100 31ff 	add.w	r1, r0, #4294967295
 8000356:	f080 80fc 	bcs.w	8000552 <__udivmoddi4+0x282>
 800035a:	429e      	cmp	r6, r3
 800035c:	f240 80f9 	bls.w	8000552 <__udivmoddi4+0x282>
 8000360:	4463      	add	r3, ip
 8000362:	3802      	subs	r0, #2
 8000364:	1b9b      	subs	r3, r3, r6
 8000366:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800036a:	2100      	movs	r1, #0
 800036c:	b11d      	cbz	r5, 8000376 <__udivmoddi4+0xa6>
 800036e:	40d3      	lsrs	r3, r2
 8000370:	2200      	movs	r2, #0
 8000372:	e9c5 3200 	strd	r3, r2, [r5]
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d905      	bls.n	800038a <__udivmoddi4+0xba>
 800037e:	b10d      	cbz	r5, 8000384 <__udivmoddi4+0xb4>
 8000380:	e9c5 0100 	strd	r0, r1, [r5]
 8000384:	2100      	movs	r1, #0
 8000386:	4608      	mov	r0, r1
 8000388:	e7f5      	b.n	8000376 <__udivmoddi4+0xa6>
 800038a:	fab3 f183 	clz	r1, r3
 800038e:	2900      	cmp	r1, #0
 8000390:	d146      	bne.n	8000420 <__udivmoddi4+0x150>
 8000392:	42a3      	cmp	r3, r4
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xcc>
 8000396:	4290      	cmp	r0, r2
 8000398:	f0c0 80f0 	bcc.w	800057c <__udivmoddi4+0x2ac>
 800039c:	1a86      	subs	r6, r0, r2
 800039e:	eb64 0303 	sbc.w	r3, r4, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	2d00      	cmp	r5, #0
 80003a6:	d0e6      	beq.n	8000376 <__udivmoddi4+0xa6>
 80003a8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ac:	e7e3      	b.n	8000376 <__udivmoddi4+0xa6>
 80003ae:	2a00      	cmp	r2, #0
 80003b0:	f040 8090 	bne.w	80004d4 <__udivmoddi4+0x204>
 80003b4:	eba1 040c 	sub.w	r4, r1, ip
 80003b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003bc:	fa1f f78c 	uxth.w	r7, ip
 80003c0:	2101      	movs	r1, #1
 80003c2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003c6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ca:	fb08 4416 	mls	r4, r8, r6, r4
 80003ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003d2:	fb07 f006 	mul.w	r0, r7, r6
 80003d6:	4298      	cmp	r0, r3
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x11c>
 80003da:	eb1c 0303 	adds.w	r3, ip, r3
 80003de:	f106 34ff 	add.w	r4, r6, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x11a>
 80003e4:	4298      	cmp	r0, r3
 80003e6:	f200 80cd 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003ea:	4626      	mov	r6, r4
 80003ec:	1a1c      	subs	r4, r3, r0
 80003ee:	fa1f f38e 	uxth.w	r3, lr
 80003f2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003f6:	fb08 4410 	mls	r4, r8, r0, r4
 80003fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003fe:	fb00 f707 	mul.w	r7, r0, r7
 8000402:	429f      	cmp	r7, r3
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x148>
 8000406:	eb1c 0303 	adds.w	r3, ip, r3
 800040a:	f100 34ff 	add.w	r4, r0, #4294967295
 800040e:	d202      	bcs.n	8000416 <__udivmoddi4+0x146>
 8000410:	429f      	cmp	r7, r3
 8000412:	f200 80b0 	bhi.w	8000576 <__udivmoddi4+0x2a6>
 8000416:	4620      	mov	r0, r4
 8000418:	1bdb      	subs	r3, r3, r7
 800041a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800041e:	e7a5      	b.n	800036c <__udivmoddi4+0x9c>
 8000420:	f1c1 0620 	rsb	r6, r1, #32
 8000424:	408b      	lsls	r3, r1
 8000426:	fa22 f706 	lsr.w	r7, r2, r6
 800042a:	431f      	orrs	r7, r3
 800042c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000430:	fa04 f301 	lsl.w	r3, r4, r1
 8000434:	ea43 030c 	orr.w	r3, r3, ip
 8000438:	40f4      	lsrs	r4, r6
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	0c38      	lsrs	r0, r7, #16
 8000440:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000444:	fbb4 fef0 	udiv	lr, r4, r0
 8000448:	fa1f fc87 	uxth.w	ip, r7
 800044c:	fb00 441e 	mls	r4, r0, lr, r4
 8000450:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000454:	fb0e f90c 	mul.w	r9, lr, ip
 8000458:	45a1      	cmp	r9, r4
 800045a:	fa02 f201 	lsl.w	r2, r2, r1
 800045e:	d90a      	bls.n	8000476 <__udivmoddi4+0x1a6>
 8000460:	193c      	adds	r4, r7, r4
 8000462:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000466:	f080 8084 	bcs.w	8000572 <__udivmoddi4+0x2a2>
 800046a:	45a1      	cmp	r9, r4
 800046c:	f240 8081 	bls.w	8000572 <__udivmoddi4+0x2a2>
 8000470:	f1ae 0e02 	sub.w	lr, lr, #2
 8000474:	443c      	add	r4, r7
 8000476:	eba4 0409 	sub.w	r4, r4, r9
 800047a:	fa1f f983 	uxth.w	r9, r3
 800047e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000482:	fb00 4413 	mls	r4, r0, r3, r4
 8000486:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048a:	fb03 fc0c 	mul.w	ip, r3, ip
 800048e:	45a4      	cmp	ip, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x1d2>
 8000492:	193c      	adds	r4, r7, r4
 8000494:	f103 30ff 	add.w	r0, r3, #4294967295
 8000498:	d267      	bcs.n	800056a <__udivmoddi4+0x29a>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d965      	bls.n	800056a <__udivmoddi4+0x29a>
 800049e:	3b02      	subs	r3, #2
 80004a0:	443c      	add	r4, r7
 80004a2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004a6:	fba0 9302 	umull	r9, r3, r0, r2
 80004aa:	eba4 040c 	sub.w	r4, r4, ip
 80004ae:	429c      	cmp	r4, r3
 80004b0:	46ce      	mov	lr, r9
 80004b2:	469c      	mov	ip, r3
 80004b4:	d351      	bcc.n	800055a <__udivmoddi4+0x28a>
 80004b6:	d04e      	beq.n	8000556 <__udivmoddi4+0x286>
 80004b8:	b155      	cbz	r5, 80004d0 <__udivmoddi4+0x200>
 80004ba:	ebb8 030e 	subs.w	r3, r8, lr
 80004be:	eb64 040c 	sbc.w	r4, r4, ip
 80004c2:	fa04 f606 	lsl.w	r6, r4, r6
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431e      	orrs	r6, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	e9c5 6400 	strd	r6, r4, [r5]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e750      	b.n	8000376 <__udivmoddi4+0xa6>
 80004d4:	f1c2 0320 	rsb	r3, r2, #32
 80004d8:	fa20 f103 	lsr.w	r1, r0, r3
 80004dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e0:	fa24 f303 	lsr.w	r3, r4, r3
 80004e4:	4094      	lsls	r4, r2
 80004e6:	430c      	orrs	r4, r1
 80004e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ec:	fa00 fe02 	lsl.w	lr, r0, r2
 80004f0:	fa1f f78c 	uxth.w	r7, ip
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3110 	mls	r1, r8, r0, r3
 80004fc:	0c23      	lsrs	r3, r4, #16
 80004fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000502:	fb00 f107 	mul.w	r1, r0, r7
 8000506:	4299      	cmp	r1, r3
 8000508:	d908      	bls.n	800051c <__udivmoddi4+0x24c>
 800050a:	eb1c 0303 	adds.w	r3, ip, r3
 800050e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000512:	d22c      	bcs.n	800056e <__udivmoddi4+0x29e>
 8000514:	4299      	cmp	r1, r3
 8000516:	d92a      	bls.n	800056e <__udivmoddi4+0x29e>
 8000518:	3802      	subs	r0, #2
 800051a:	4463      	add	r3, ip
 800051c:	1a5b      	subs	r3, r3, r1
 800051e:	b2a4      	uxth	r4, r4
 8000520:	fbb3 f1f8 	udiv	r1, r3, r8
 8000524:	fb08 3311 	mls	r3, r8, r1, r3
 8000528:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800052c:	fb01 f307 	mul.w	r3, r1, r7
 8000530:	42a3      	cmp	r3, r4
 8000532:	d908      	bls.n	8000546 <__udivmoddi4+0x276>
 8000534:	eb1c 0404 	adds.w	r4, ip, r4
 8000538:	f101 36ff 	add.w	r6, r1, #4294967295
 800053c:	d213      	bcs.n	8000566 <__udivmoddi4+0x296>
 800053e:	42a3      	cmp	r3, r4
 8000540:	d911      	bls.n	8000566 <__udivmoddi4+0x296>
 8000542:	3902      	subs	r1, #2
 8000544:	4464      	add	r4, ip
 8000546:	1ae4      	subs	r4, r4, r3
 8000548:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800054c:	e739      	b.n	80003c2 <__udivmoddi4+0xf2>
 800054e:	4604      	mov	r4, r0
 8000550:	e6f0      	b.n	8000334 <__udivmoddi4+0x64>
 8000552:	4608      	mov	r0, r1
 8000554:	e706      	b.n	8000364 <__udivmoddi4+0x94>
 8000556:	45c8      	cmp	r8, r9
 8000558:	d2ae      	bcs.n	80004b8 <__udivmoddi4+0x1e8>
 800055a:	ebb9 0e02 	subs.w	lr, r9, r2
 800055e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000562:	3801      	subs	r0, #1
 8000564:	e7a8      	b.n	80004b8 <__udivmoddi4+0x1e8>
 8000566:	4631      	mov	r1, r6
 8000568:	e7ed      	b.n	8000546 <__udivmoddi4+0x276>
 800056a:	4603      	mov	r3, r0
 800056c:	e799      	b.n	80004a2 <__udivmoddi4+0x1d2>
 800056e:	4630      	mov	r0, r6
 8000570:	e7d4      	b.n	800051c <__udivmoddi4+0x24c>
 8000572:	46d6      	mov	lr, sl
 8000574:	e77f      	b.n	8000476 <__udivmoddi4+0x1a6>
 8000576:	4463      	add	r3, ip
 8000578:	3802      	subs	r0, #2
 800057a:	e74d      	b.n	8000418 <__udivmoddi4+0x148>
 800057c:	4606      	mov	r6, r0
 800057e:	4623      	mov	r3, r4
 8000580:	4608      	mov	r0, r1
 8000582:	e70f      	b.n	80003a4 <__udivmoddi4+0xd4>
 8000584:	3e02      	subs	r6, #2
 8000586:	4463      	add	r3, ip
 8000588:	e730      	b.n	80003ec <__udivmoddi4+0x11c>
 800058a:	bf00      	nop

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <inputOutputControl>:
// Estado de las entradas discretas en hardware
static uint8_t in_discrete_status[MB_DISCRETE_Q];



void inputOutputControl(void){
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0

	//in_discrete_status[0] = 1 ;

	ReadGPIO();
 8000594:	f000 f852 	bl	800063c <ReadGPIO>

	osMutexWait(discreteMutexHandle, osWaitForever);
 8000598:	4b16      	ldr	r3, [pc, #88]	@ (80005f4 <inputOutputControl+0x64>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	f04f 31ff 	mov.w	r1, #4294967295
 80005a0:	4618      	mov	r0, r3
 80005a2:	f005 fc29 	bl	8005df8 <osMutexWait>

	memcpy(discrete_status, in_discrete_status, HD_DISCRETE_Q * sizeof(uint8_t));
 80005a6:	4b14      	ldr	r3, [pc, #80]	@ (80005f8 <inputOutputControl+0x68>)
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	4a14      	ldr	r2, [pc, #80]	@ (80005fc <inputOutputControl+0x6c>)
 80005ac:	6013      	str	r3, [r2, #0]

	osMutexRelease(discreteMutexHandle);
 80005ae:	4b11      	ldr	r3, [pc, #68]	@ (80005f4 <inputOutputControl+0x64>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	4618      	mov	r0, r3
 80005b4:	f005 fc6e 	bl	8005e94 <osMutexRelease>

	osMutexWait(coilMutexHandle, osWaitForever);
 80005b8:	4b11      	ldr	r3, [pc, #68]	@ (8000600 <inputOutputControl+0x70>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	f04f 31ff 	mov.w	r1, #4294967295
 80005c0:	4618      	mov	r0, r3
 80005c2:	f005 fc19 	bl	8005df8 <osMutexWait>

	memcpy(out_coil_status, coil_status, HD_COILS_Q * sizeof(uint8_t));
 80005c6:	2214      	movs	r2, #20
 80005c8:	490e      	ldr	r1, [pc, #56]	@ (8000604 <inputOutputControl+0x74>)
 80005ca:	480f      	ldr	r0, [pc, #60]	@ (8000608 <inputOutputControl+0x78>)
 80005cc:	f016 f953 	bl	8016876 <memcpy>

	osMutexRelease(coilMutexHandle);
 80005d0:	4b0b      	ldr	r3, [pc, #44]	@ (8000600 <inputOutputControl+0x70>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	4618      	mov	r0, r3
 80005d6:	f005 fc5d 	bl	8005e94 <osMutexRelease>

	if (out_coil_status[0] == 1)
 80005da:	4b0b      	ldr	r3, [pc, #44]	@ (8000608 <inputOutputControl+0x78>)
 80005dc:	781b      	ldrb	r3, [r3, #0]
 80005de:	2b01      	cmp	r3, #1
 80005e0:	d102      	bne.n	80005e8 <inputOutputControl+0x58>
		TurnOnRedLED();
 80005e2:	f000 f813 	bl	800060c <TurnOnRedLED>
 80005e6:	e001      	b.n	80005ec <inputOutputControl+0x5c>
	else
		TurnOffRedLED();
 80005e8:	f000 f81c 	bl	8000624 <TurnOffRedLED>

	WriteGPIO();
 80005ec:	f000 f86c 	bl	80006c8 <WriteGPIO>

}
 80005f0:	bf00      	nop
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	200005a0 	.word	0x200005a0
 80005f8:	200001a8 	.word	0x200001a8
 80005fc:	200006a4 	.word	0x200006a4
 8000600:	2000059c 	.word	0x2000059c
 8000604:	200005a4 	.word	0x200005a4
 8000608:	200000a8 	.word	0x200000a8

0800060c <TurnOnRedLED>:

void TurnOnRedLED(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET); // Encender el LED rojo
 8000610:	2201      	movs	r2, #1
 8000612:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000616:	4802      	ldr	r0, [pc, #8]	@ (8000620 <TurnOnRedLED+0x14>)
 8000618:	f003 f984 	bl	8003924 <HAL_GPIO_WritePin>
    //HAL_GPIO_WritePin(output_01_GPIO_Port, output_01_Pin, GPIO_PIN_SET);
}
 800061c:	bf00      	nop
 800061e:	bd80      	pop	{r7, pc}
 8000620:	40020400 	.word	0x40020400

08000624 <TurnOffRedLED>:

void TurnOffRedLED(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET); // apagar el LED rojo
 8000628:	2200      	movs	r2, #0
 800062a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800062e:	4802      	ldr	r0, [pc, #8]	@ (8000638 <TurnOffRedLED+0x14>)
 8000630:	f003 f978 	bl	8003924 <HAL_GPIO_WritePin>
    //HAL_GPIO_WritePin(output_01_GPIO_Port, output_01_Pin, GPIO_PIN_RESET);
}
 8000634:	bf00      	nop
 8000636:	bd80      	pop	{r7, pc}
 8000638:	40020400 	.word	0x40020400

0800063c <ReadGPIO>:

void ReadGPIO(void){
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0

	//llave no presionada input en 1 por pull up vía software
	if(READ_INPUT_01()){
 8000640:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000644:	481d      	ldr	r0, [pc, #116]	@ (80006bc <ReadGPIO+0x80>)
 8000646:	f003 f955 	bl	80038f4 <HAL_GPIO_ReadPin>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d003      	beq.n	8000658 <ReadGPIO+0x1c>
		HD_INPUT01 = HD_OFF;
 8000650:	4b1b      	ldr	r3, [pc, #108]	@ (80006c0 <ReadGPIO+0x84>)
 8000652:	2200      	movs	r2, #0
 8000654:	701a      	strb	r2, [r3, #0]
 8000656:	e002      	b.n	800065e <ReadGPIO+0x22>
	}
	else{
		HD_INPUT01 = HD_ON;
 8000658:	4b19      	ldr	r3, [pc, #100]	@ (80006c0 <ReadGPIO+0x84>)
 800065a:	2201      	movs	r2, #1
 800065c:	701a      	strb	r2, [r3, #0]
	}

	if(READ_INPUT_02()){
 800065e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000662:	4818      	ldr	r0, [pc, #96]	@ (80006c4 <ReadGPIO+0x88>)
 8000664:	f003 f946 	bl	80038f4 <HAL_GPIO_ReadPin>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d003      	beq.n	8000676 <ReadGPIO+0x3a>
		HD_INPUT02 = HD_OFF;
 800066e:	4b14      	ldr	r3, [pc, #80]	@ (80006c0 <ReadGPIO+0x84>)
 8000670:	2200      	movs	r2, #0
 8000672:	705a      	strb	r2, [r3, #1]
 8000674:	e002      	b.n	800067c <ReadGPIO+0x40>
	}
	else{
		HD_INPUT02 = HD_ON;
 8000676:	4b12      	ldr	r3, [pc, #72]	@ (80006c0 <ReadGPIO+0x84>)
 8000678:	2201      	movs	r2, #1
 800067a:	705a      	strb	r2, [r3, #1]
	}

	if(READ_INPUT_03()){
 800067c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000680:	4810      	ldr	r0, [pc, #64]	@ (80006c4 <ReadGPIO+0x88>)
 8000682:	f003 f937 	bl	80038f4 <HAL_GPIO_ReadPin>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d003      	beq.n	8000694 <ReadGPIO+0x58>
		HD_INPUT03 = HD_OFF;
 800068c:	4b0c      	ldr	r3, [pc, #48]	@ (80006c0 <ReadGPIO+0x84>)
 800068e:	2200      	movs	r2, #0
 8000690:	709a      	strb	r2, [r3, #2]
 8000692:	e002      	b.n	800069a <ReadGPIO+0x5e>
	}
	else{
		HD_INPUT03 = HD_ON;
 8000694:	4b0a      	ldr	r3, [pc, #40]	@ (80006c0 <ReadGPIO+0x84>)
 8000696:	2201      	movs	r2, #1
 8000698:	709a      	strb	r2, [r3, #2]
	}

	if(READ_INPUT_04()){
 800069a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800069e:	4809      	ldr	r0, [pc, #36]	@ (80006c4 <ReadGPIO+0x88>)
 80006a0:	f003 f928 	bl	80038f4 <HAL_GPIO_ReadPin>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d003      	beq.n	80006b2 <ReadGPIO+0x76>
		HD_INPUT04 = HD_OFF;
 80006aa:	4b05      	ldr	r3, [pc, #20]	@ (80006c0 <ReadGPIO+0x84>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	70da      	strb	r2, [r3, #3]
		HD_INPUT04 = HD_ON;
	}



}
 80006b0:	e002      	b.n	80006b8 <ReadGPIO+0x7c>
		HD_INPUT04 = HD_ON;
 80006b2:	4b03      	ldr	r3, [pc, #12]	@ (80006c0 <ReadGPIO+0x84>)
 80006b4:	2201      	movs	r2, #1
 80006b6:	70da      	strb	r2, [r3, #3]
}
 80006b8:	bf00      	nop
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	40020c00 	.word	0x40020c00
 80006c0:	200001a8 	.word	0x200001a8
 80006c4:	40021000 	.word	0x40021000

080006c8 <WriteGPIO>:

void WriteGPIO(void){
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0

	if (HD_OUTPUT01 == MB_ON){
 80006cc:	4b32      	ldr	r3, [pc, #200]	@ (8000798 <WriteGPIO+0xd0>)
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	2b01      	cmp	r3, #1
 80006d2:	d106      	bne.n	80006e2 <WriteGPIO+0x1a>
		SET_OUTPUT_01(GPIO_PIN_SET);
 80006d4:	2201      	movs	r2, #1
 80006d6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80006da:	4830      	ldr	r0, [pc, #192]	@ (800079c <WriteGPIO+0xd4>)
 80006dc:	f003 f922 	bl	8003924 <HAL_GPIO_WritePin>
 80006e0:	e005      	b.n	80006ee <WriteGPIO+0x26>
	}
	else{
		SET_OUTPUT_01(GPIO_PIN_RESET);
 80006e2:	2200      	movs	r2, #0
 80006e4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80006e8:	482c      	ldr	r0, [pc, #176]	@ (800079c <WriteGPIO+0xd4>)
 80006ea:	f003 f91b 	bl	8003924 <HAL_GPIO_WritePin>
	}
	if (HD_OUTPUT02 == MB_ON){
 80006ee:	4b2a      	ldr	r3, [pc, #168]	@ (8000798 <WriteGPIO+0xd0>)
 80006f0:	785b      	ldrb	r3, [r3, #1]
 80006f2:	2b01      	cmp	r3, #1
 80006f4:	d106      	bne.n	8000704 <WriteGPIO+0x3c>
		SET_OUTPUT_02(GPIO_PIN_SET);
 80006f6:	2201      	movs	r2, #1
 80006f8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80006fc:	4827      	ldr	r0, [pc, #156]	@ (800079c <WriteGPIO+0xd4>)
 80006fe:	f003 f911 	bl	8003924 <HAL_GPIO_WritePin>
 8000702:	e005      	b.n	8000710 <WriteGPIO+0x48>
	}
	else{
		SET_OUTPUT_02(GPIO_PIN_RESET);
 8000704:	2200      	movs	r2, #0
 8000706:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800070a:	4824      	ldr	r0, [pc, #144]	@ (800079c <WriteGPIO+0xd4>)
 800070c:	f003 f90a 	bl	8003924 <HAL_GPIO_WritePin>
	}
	if (HD_OUTPUT03 == MB_ON){
 8000710:	4b21      	ldr	r3, [pc, #132]	@ (8000798 <WriteGPIO+0xd0>)
 8000712:	789b      	ldrb	r3, [r3, #2]
 8000714:	2b01      	cmp	r3, #1
 8000716:	d106      	bne.n	8000726 <WriteGPIO+0x5e>
		SET_OUTPUT_03(GPIO_PIN_SET);
 8000718:	2201      	movs	r2, #1
 800071a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800071e:	481f      	ldr	r0, [pc, #124]	@ (800079c <WriteGPIO+0xd4>)
 8000720:	f003 f900 	bl	8003924 <HAL_GPIO_WritePin>
 8000724:	e005      	b.n	8000732 <WriteGPIO+0x6a>
	}
	else{
		SET_OUTPUT_03(GPIO_PIN_RESET);
 8000726:	2200      	movs	r2, #0
 8000728:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800072c:	481b      	ldr	r0, [pc, #108]	@ (800079c <WriteGPIO+0xd4>)
 800072e:	f003 f8f9 	bl	8003924 <HAL_GPIO_WritePin>
	}
	if (HD_OUTPUT04 == MB_ON){
 8000732:	4b19      	ldr	r3, [pc, #100]	@ (8000798 <WriteGPIO+0xd0>)
 8000734:	78db      	ldrb	r3, [r3, #3]
 8000736:	2b01      	cmp	r3, #1
 8000738:	d106      	bne.n	8000748 <WriteGPIO+0x80>
		SET_OUTPUT_04(GPIO_PIN_SET);
 800073a:	2201      	movs	r2, #1
 800073c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000740:	4816      	ldr	r0, [pc, #88]	@ (800079c <WriteGPIO+0xd4>)
 8000742:	f003 f8ef 	bl	8003924 <HAL_GPIO_WritePin>
 8000746:	e005      	b.n	8000754 <WriteGPIO+0x8c>
	}
	else{
		SET_OUTPUT_04(GPIO_PIN_RESET);
 8000748:	2200      	movs	r2, #0
 800074a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800074e:	4813      	ldr	r0, [pc, #76]	@ (800079c <WriteGPIO+0xd4>)
 8000750:	f003 f8e8 	bl	8003924 <HAL_GPIO_WritePin>
	}
/*------------------Auxiliar Outputs --------------------------*/

	if (HD_OUTPUT_STATUS == MB_ON){
 8000754:	4b10      	ldr	r3, [pc, #64]	@ (8000798 <WriteGPIO+0xd0>)
 8000756:	7a9b      	ldrb	r3, [r3, #10]
 8000758:	2b01      	cmp	r3, #1
 800075a:	d106      	bne.n	800076a <WriteGPIO+0xa2>
		SET_OUTPUT_STATUS(GPIO_PIN_SET);
 800075c:	2201      	movs	r2, #1
 800075e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000762:	480f      	ldr	r0, [pc, #60]	@ (80007a0 <WriteGPIO+0xd8>)
 8000764:	f003 f8de 	bl	8003924 <HAL_GPIO_WritePin>
 8000768:	e005      	b.n	8000776 <WriteGPIO+0xae>
	}
	else{
		SET_OUTPUT_STATUS(GPIO_PIN_RESET);
 800076a:	2200      	movs	r2, #0
 800076c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000770:	480b      	ldr	r0, [pc, #44]	@ (80007a0 <WriteGPIO+0xd8>)
 8000772:	f003 f8d7 	bl	8003924 <HAL_GPIO_WritePin>
	}
	if (HD_OUTPUT_LED_BLUE == MB_ON){
 8000776:	4b08      	ldr	r3, [pc, #32]	@ (8000798 <WriteGPIO+0xd0>)
 8000778:	7adb      	ldrb	r3, [r3, #11]
 800077a:	2b01      	cmp	r3, #1
 800077c:	d105      	bne.n	800078a <WriteGPIO+0xc2>
		SET_OUTPUT_LED_BLUE(GPIO_PIN_SET);
 800077e:	2201      	movs	r2, #1
 8000780:	2180      	movs	r1, #128	@ 0x80
 8000782:	4808      	ldr	r0, [pc, #32]	@ (80007a4 <WriteGPIO+0xdc>)
 8000784:	f003 f8ce 	bl	8003924 <HAL_GPIO_WritePin>
	}
	else{
		SET_OUTPUT_LED_BLUE(GPIO_PIN_RESET);
	}

}
 8000788:	e004      	b.n	8000794 <WriteGPIO+0xcc>
		SET_OUTPUT_LED_BLUE(GPIO_PIN_RESET);
 800078a:	2200      	movs	r2, #0
 800078c:	2180      	movs	r1, #128	@ 0x80
 800078e:	4805      	ldr	r0, [pc, #20]	@ (80007a4 <WriteGPIO+0xdc>)
 8000790:	f003 f8c8 	bl	8003924 <HAL_GPIO_WritePin>
}
 8000794:	bf00      	nop
 8000796:	bd80      	pop	{r7, pc}
 8000798:	200000a8 	.word	0x200000a8
 800079c:	40021400 	.word	0x40021400
 80007a0:	40020c00 	.word	0x40020c00
 80007a4:	40020400 	.word	0x40020400

080007a8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80007a8:	b480      	push	{r7}
 80007aa:	b085      	sub	sp, #20
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	60f8      	str	r0, [r7, #12]
 80007b0:	60b9      	str	r1, [r7, #8]
 80007b2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80007b4:	68fb      	ldr	r3, [r7, #12]
 80007b6:	4a07      	ldr	r2, [pc, #28]	@ (80007d4 <vApplicationGetIdleTaskMemory+0x2c>)
 80007b8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80007ba:	68bb      	ldr	r3, [r7, #8]
 80007bc:	4a06      	ldr	r2, [pc, #24]	@ (80007d8 <vApplicationGetIdleTaskMemory+0x30>)
 80007be:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	2280      	movs	r2, #128	@ 0x80
 80007c4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80007c6:	bf00      	nop
 80007c8:	3714      	adds	r7, #20
 80007ca:	46bd      	mov	sp, r7
 80007cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d0:	4770      	bx	lr
 80007d2:	bf00      	nop
 80007d4:	200002a8 	.word	0x200002a8
 80007d8:	20000348 	.word	0x20000348

080007dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007dc:	b5b0      	push	{r4, r5, r7, lr}
 80007de:	b094      	sub	sp, #80	@ 0x50
 80007e0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007e2:	f001 fb37 	bl	8001e54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007e6:	f000 f85f 	bl	80008a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007ea:	f000 f8f1 	bl	80009d0 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80007ee:	f000 f8c5 	bl	800097c <MX_USART3_UART_Init>

  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of uartMutex */
  osMutexDef(uartMutex);
 80007f2:	2300      	movs	r3, #0
 80007f4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80007f6:	2300      	movs	r3, #0
 80007f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uartMutexHandle = osMutexCreate(osMutex(uartMutex));
 80007fa:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80007fe:	4618      	mov	r0, r3
 8000800:	f005 fae2 	bl	8005dc8 <osMutexCreate>
 8000804:	4603      	mov	r3, r0
 8000806:	4a21      	ldr	r2, [pc, #132]	@ (800088c <main+0xb0>)
 8000808:	6013      	str	r3, [r2, #0]

  /* definition and creation of coilMutex */
  osMutexDef(coilMutex);
 800080a:	2300      	movs	r3, #0
 800080c:	643b      	str	r3, [r7, #64]	@ 0x40
 800080e:	2300      	movs	r3, #0
 8000810:	647b      	str	r3, [r7, #68]	@ 0x44
  coilMutexHandle = osMutexCreate(osMutex(coilMutex));
 8000812:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000816:	4618      	mov	r0, r3
 8000818:	f005 fad6 	bl	8005dc8 <osMutexCreate>
 800081c:	4603      	mov	r3, r0
 800081e:	4a1c      	ldr	r2, [pc, #112]	@ (8000890 <main+0xb4>)
 8000820:	6013      	str	r3, [r2, #0]

  /* definition and creation of discreteMutex */
  osMutexDef(discreteMutex);
 8000822:	2300      	movs	r3, #0
 8000824:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000826:	2300      	movs	r3, #0
 8000828:	63fb      	str	r3, [r7, #60]	@ 0x3c
  discreteMutexHandle = osMutexCreate(osMutex(discreteMutex));
 800082a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800082e:	4618      	mov	r0, r3
 8000830:	f005 faca 	bl	8005dc8 <osMutexCreate>
 8000834:	4603      	mov	r3, r0
 8000836:	4a17      	ldr	r2, [pc, #92]	@ (8000894 <main+0xb8>)
 8000838:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 512);
 800083a:	4b17      	ldr	r3, [pc, #92]	@ (8000898 <main+0xbc>)
 800083c:	f107 041c 	add.w	r4, r7, #28
 8000840:	461d      	mov	r5, r3
 8000842:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000844:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000846:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800084a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800084e:	f107 031c 	add.w	r3, r7, #28
 8000852:	2100      	movs	r1, #0
 8000854:	4618      	mov	r0, r3
 8000856:	f005 fa57 	bl	8005d08 <osThreadCreate>
 800085a:	4603      	mov	r3, r0
 800085c:	4a0f      	ldr	r2, [pc, #60]	@ (800089c <main+0xc0>)
 800085e:	6013      	str	r3, [r2, #0]

  /* definition and creation of DriverTask */
  osThreadDef(DriverTask, StartDriverTask, osPriorityNormal, 0, 128);
 8000860:	4b0f      	ldr	r3, [pc, #60]	@ (80008a0 <main+0xc4>)
 8000862:	463c      	mov	r4, r7
 8000864:	461d      	mov	r5, r3
 8000866:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000868:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800086a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800086e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  DriverTaskHandle = osThreadCreate(osThread(DriverTask), NULL);
 8000872:	463b      	mov	r3, r7
 8000874:	2100      	movs	r1, #0
 8000876:	4618      	mov	r0, r3
 8000878:	f005 fa46 	bl	8005d08 <osThreadCreate>
 800087c:	4603      	mov	r3, r0
 800087e:	4a09      	ldr	r2, [pc, #36]	@ (80008a4 <main+0xc8>)
 8000880:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000882:	f005 fa2a 	bl	8005cda <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000886:	bf00      	nop
 8000888:	e7fd      	b.n	8000886 <main+0xaa>
 800088a:	bf00      	nop
 800088c:	20000598 	.word	0x20000598
 8000890:	2000059c 	.word	0x2000059c
 8000894:	200005a0 	.word	0x200005a0
 8000898:	08017814 	.word	0x08017814
 800089c:	20000590 	.word	0x20000590
 80008a0:	0801783c 	.word	0x0801783c
 80008a4:	20000594 	.word	0x20000594

080008a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b094      	sub	sp, #80	@ 0x50
 80008ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008ae:	f107 0320 	add.w	r3, r7, #32
 80008b2:	2230      	movs	r2, #48	@ 0x30
 80008b4:	2100      	movs	r1, #0
 80008b6:	4618      	mov	r0, r3
 80008b8:	f015 ff11 	bl	80166de <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008bc:	f107 030c 	add.w	r3, r7, #12
 80008c0:	2200      	movs	r2, #0
 80008c2:	601a      	str	r2, [r3, #0]
 80008c4:	605a      	str	r2, [r3, #4]
 80008c6:	609a      	str	r2, [r3, #8]
 80008c8:	60da      	str	r2, [r3, #12]
 80008ca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008cc:	2300      	movs	r3, #0
 80008ce:	60bb      	str	r3, [r7, #8]
 80008d0:	4b28      	ldr	r3, [pc, #160]	@ (8000974 <SystemClock_Config+0xcc>)
 80008d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008d4:	4a27      	ldr	r2, [pc, #156]	@ (8000974 <SystemClock_Config+0xcc>)
 80008d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008da:	6413      	str	r3, [r2, #64]	@ 0x40
 80008dc:	4b25      	ldr	r3, [pc, #148]	@ (8000974 <SystemClock_Config+0xcc>)
 80008de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008e4:	60bb      	str	r3, [r7, #8]
 80008e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008e8:	2300      	movs	r3, #0
 80008ea:	607b      	str	r3, [r7, #4]
 80008ec:	4b22      	ldr	r3, [pc, #136]	@ (8000978 <SystemClock_Config+0xd0>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	4a21      	ldr	r2, [pc, #132]	@ (8000978 <SystemClock_Config+0xd0>)
 80008f2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80008f6:	6013      	str	r3, [r2, #0]
 80008f8:	4b1f      	ldr	r3, [pc, #124]	@ (8000978 <SystemClock_Config+0xd0>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000900:	607b      	str	r3, [r7, #4]
 8000902:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000904:	2301      	movs	r3, #1
 8000906:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000908:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800090c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800090e:	2302      	movs	r3, #2
 8000910:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000912:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000916:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000918:	2304      	movs	r3, #4
 800091a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800091c:	23a8      	movs	r3, #168	@ 0xa8
 800091e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000920:	2302      	movs	r3, #2
 8000922:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000924:	2307      	movs	r3, #7
 8000926:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000928:	f107 0320 	add.w	r3, r7, #32
 800092c:	4618      	mov	r0, r3
 800092e:	f003 f813 	bl	8003958 <HAL_RCC_OscConfig>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000938:	f000 f9f2 	bl	8000d20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800093c:	230f      	movs	r3, #15
 800093e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000940:	2302      	movs	r3, #2
 8000942:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000944:	2300      	movs	r3, #0
 8000946:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000948:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800094c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800094e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000952:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000954:	f107 030c 	add.w	r3, r7, #12
 8000958:	2105      	movs	r1, #5
 800095a:	4618      	mov	r0, r3
 800095c:	f003 fa74 	bl	8003e48 <HAL_RCC_ClockConfig>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000966:	f000 f9db 	bl	8000d20 <Error_Handler>
  }
}
 800096a:	bf00      	nop
 800096c:	3750      	adds	r7, #80	@ 0x50
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	40023800 	.word	0x40023800
 8000978:	40007000 	.word	0x40007000

0800097c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000980:	4b11      	ldr	r3, [pc, #68]	@ (80009c8 <MX_USART3_UART_Init+0x4c>)
 8000982:	4a12      	ldr	r2, [pc, #72]	@ (80009cc <MX_USART3_UART_Init+0x50>)
 8000984:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000986:	4b10      	ldr	r3, [pc, #64]	@ (80009c8 <MX_USART3_UART_Init+0x4c>)
 8000988:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800098c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800098e:	4b0e      	ldr	r3, [pc, #56]	@ (80009c8 <MX_USART3_UART_Init+0x4c>)
 8000990:	2200      	movs	r2, #0
 8000992:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000994:	4b0c      	ldr	r3, [pc, #48]	@ (80009c8 <MX_USART3_UART_Init+0x4c>)
 8000996:	2200      	movs	r2, #0
 8000998:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800099a:	4b0b      	ldr	r3, [pc, #44]	@ (80009c8 <MX_USART3_UART_Init+0x4c>)
 800099c:	2200      	movs	r2, #0
 800099e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80009a0:	4b09      	ldr	r3, [pc, #36]	@ (80009c8 <MX_USART3_UART_Init+0x4c>)
 80009a2:	220c      	movs	r2, #12
 80009a4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009a6:	4b08      	ldr	r3, [pc, #32]	@ (80009c8 <MX_USART3_UART_Init+0x4c>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80009ac:	4b06      	ldr	r3, [pc, #24]	@ (80009c8 <MX_USART3_UART_Init+0x4c>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80009b2:	4805      	ldr	r0, [pc, #20]	@ (80009c8 <MX_USART3_UART_Init+0x4c>)
 80009b4:	f003 ff3c 	bl	8004830 <HAL_UART_Init>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80009be:	f000 f9af 	bl	8000d20 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80009c2:	bf00      	nop
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	20000548 	.word	0x20000548
 80009cc:	40004800 	.word	0x40004800

080009d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b08e      	sub	sp, #56	@ 0x38
 80009d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009da:	2200      	movs	r2, #0
 80009dc:	601a      	str	r2, [r3, #0]
 80009de:	605a      	str	r2, [r3, #4]
 80009e0:	609a      	str	r2, [r3, #8]
 80009e2:	60da      	str	r2, [r3, #12]
 80009e4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009e6:	2300      	movs	r3, #0
 80009e8:	623b      	str	r3, [r7, #32]
 80009ea:	4b8b      	ldr	r3, [pc, #556]	@ (8000c18 <MX_GPIO_Init+0x248>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ee:	4a8a      	ldr	r2, [pc, #552]	@ (8000c18 <MX_GPIO_Init+0x248>)
 80009f0:	f043 0304 	orr.w	r3, r3, #4
 80009f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80009f6:	4b88      	ldr	r3, [pc, #544]	@ (8000c18 <MX_GPIO_Init+0x248>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009fa:	f003 0304 	and.w	r3, r3, #4
 80009fe:	623b      	str	r3, [r7, #32]
 8000a00:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a02:	2300      	movs	r3, #0
 8000a04:	61fb      	str	r3, [r7, #28]
 8000a06:	4b84      	ldr	r3, [pc, #528]	@ (8000c18 <MX_GPIO_Init+0x248>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a0a:	4a83      	ldr	r2, [pc, #524]	@ (8000c18 <MX_GPIO_Init+0x248>)
 8000a0c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a10:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a12:	4b81      	ldr	r3, [pc, #516]	@ (8000c18 <MX_GPIO_Init+0x248>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a1a:	61fb      	str	r3, [r7, #28]
 8000a1c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a1e:	2300      	movs	r3, #0
 8000a20:	61bb      	str	r3, [r7, #24]
 8000a22:	4b7d      	ldr	r3, [pc, #500]	@ (8000c18 <MX_GPIO_Init+0x248>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a26:	4a7c      	ldr	r2, [pc, #496]	@ (8000c18 <MX_GPIO_Init+0x248>)
 8000a28:	f043 0301 	orr.w	r3, r3, #1
 8000a2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a2e:	4b7a      	ldr	r3, [pc, #488]	@ (8000c18 <MX_GPIO_Init+0x248>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a32:	f003 0301 	and.w	r3, r3, #1
 8000a36:	61bb      	str	r3, [r7, #24]
 8000a38:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	617b      	str	r3, [r7, #20]
 8000a3e:	4b76      	ldr	r3, [pc, #472]	@ (8000c18 <MX_GPIO_Init+0x248>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a42:	4a75      	ldr	r2, [pc, #468]	@ (8000c18 <MX_GPIO_Init+0x248>)
 8000a44:	f043 0320 	orr.w	r3, r3, #32
 8000a48:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a4a:	4b73      	ldr	r3, [pc, #460]	@ (8000c18 <MX_GPIO_Init+0x248>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a4e:	f003 0320 	and.w	r3, r3, #32
 8000a52:	617b      	str	r3, [r7, #20]
 8000a54:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a56:	2300      	movs	r3, #0
 8000a58:	613b      	str	r3, [r7, #16]
 8000a5a:	4b6f      	ldr	r3, [pc, #444]	@ (8000c18 <MX_GPIO_Init+0x248>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a5e:	4a6e      	ldr	r2, [pc, #440]	@ (8000c18 <MX_GPIO_Init+0x248>)
 8000a60:	f043 0310 	orr.w	r3, r3, #16
 8000a64:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a66:	4b6c      	ldr	r3, [pc, #432]	@ (8000c18 <MX_GPIO_Init+0x248>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a6a:	f003 0310 	and.w	r3, r3, #16
 8000a6e:	613b      	str	r3, [r7, #16]
 8000a70:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a72:	2300      	movs	r3, #0
 8000a74:	60fb      	str	r3, [r7, #12]
 8000a76:	4b68      	ldr	r3, [pc, #416]	@ (8000c18 <MX_GPIO_Init+0x248>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a7a:	4a67      	ldr	r2, [pc, #412]	@ (8000c18 <MX_GPIO_Init+0x248>)
 8000a7c:	f043 0302 	orr.w	r3, r3, #2
 8000a80:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a82:	4b65      	ldr	r3, [pc, #404]	@ (8000c18 <MX_GPIO_Init+0x248>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a86:	f003 0302 	and.w	r3, r3, #2
 8000a8a:	60fb      	str	r3, [r7, #12]
 8000a8c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a8e:	2300      	movs	r3, #0
 8000a90:	60bb      	str	r3, [r7, #8]
 8000a92:	4b61      	ldr	r3, [pc, #388]	@ (8000c18 <MX_GPIO_Init+0x248>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a96:	4a60      	ldr	r2, [pc, #384]	@ (8000c18 <MX_GPIO_Init+0x248>)
 8000a98:	f043 0308 	orr.w	r3, r3, #8
 8000a9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a9e:	4b5e      	ldr	r3, [pc, #376]	@ (8000c18 <MX_GPIO_Init+0x248>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aa2:	f003 0308 	and.w	r3, r3, #8
 8000aa6:	60bb      	str	r3, [r7, #8]
 8000aa8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000aaa:	2300      	movs	r3, #0
 8000aac:	607b      	str	r3, [r7, #4]
 8000aae:	4b5a      	ldr	r3, [pc, #360]	@ (8000c18 <MX_GPIO_Init+0x248>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ab2:	4a59      	ldr	r2, [pc, #356]	@ (8000c18 <MX_GPIO_Init+0x248>)
 8000ab4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000ab8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aba:	4b57      	ldr	r3, [pc, #348]	@ (8000c18 <MX_GPIO_Init+0x248>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000abe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000ac2:	607b      	str	r3, [r7, #4]
 8000ac4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, output_01_Pin|output_02_Pin|output_03_Pin|output_04_Pin, GPIO_PIN_RESET);
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8000acc:	4853      	ldr	r0, [pc, #332]	@ (8000c1c <MX_GPIO_Init+0x24c>)
 8000ace:	f002 ff29 	bl	8003924 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	f44f 4181 	mov.w	r1, #16512	@ 0x4080
 8000ad8:	4851      	ldr	r0, [pc, #324]	@ (8000c20 <MX_GPIO_Init+0x250>)
 8000ada:	f002 ff23 	bl	8003924 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(output_status_GPIO_Port, output_status_Pin, GPIO_PIN_RESET);
 8000ade:	2200      	movs	r2, #0
 8000ae0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000ae4:	484f      	ldr	r0, [pc, #316]	@ (8000c24 <MX_GPIO_Init+0x254>)
 8000ae6:	f002 ff1d 	bl	8003924 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000aea:	2200      	movs	r2, #0
 8000aec:	2140      	movs	r1, #64	@ 0x40
 8000aee:	484e      	ldr	r0, [pc, #312]	@ (8000c28 <MX_GPIO_Init+0x258>)
 8000af0:	f002 ff18 	bl	8003924 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000af4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000af8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000afa:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000afe:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b00:	2300      	movs	r3, #0
 8000b02:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000b04:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b08:	4619      	mov	r1, r3
 8000b0a:	4848      	ldr	r0, [pc, #288]	@ (8000c2c <MX_GPIO_Init+0x25c>)
 8000b0c:	f002 fd46 	bl	800359c <HAL_GPIO_Init>

  /*Configure GPIO pins : output_01_Pin output_02_Pin output_03_Pin output_04_Pin */
  GPIO_InitStruct.Pin = output_01_Pin|output_02_Pin|output_03_Pin|output_04_Pin;
 8000b10:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8000b14:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b16:	2301      	movs	r3, #1
 8000b18:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000b22:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b26:	4619      	mov	r1, r3
 8000b28:	483c      	ldr	r0, [pc, #240]	@ (8000c1c <MX_GPIO_Init+0x24c>)
 8000b2a:	f002 fd37 	bl	800359c <HAL_GPIO_Init>

  /*Configure GPIO pins : input_02_Pin input_03_Pin input_04_Pin */
  GPIO_InitStruct.Pin = input_02_Pin|input_03_Pin|input_04_Pin;
 8000b2e:	f44f 5328 	mov.w	r3, #10752	@ 0x2a00
 8000b32:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b34:	2300      	movs	r3, #0
 8000b36:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b38:	2301      	movs	r3, #1
 8000b3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b3c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b40:	4619      	mov	r1, r3
 8000b42:	483b      	ldr	r0, [pc, #236]	@ (8000c30 <MX_GPIO_Init+0x260>)
 8000b44:	f002 fd2a 	bl	800359c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8000b48:	f44f 4381 	mov.w	r3, #16512	@ 0x4080
 8000b4c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b4e:	2301      	movs	r3, #1
 8000b50:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b52:	2300      	movs	r3, #0
 8000b54:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b56:	2300      	movs	r3, #0
 8000b58:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b5a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b5e:	4619      	mov	r1, r3
 8000b60:	482f      	ldr	r0, [pc, #188]	@ (8000c20 <MX_GPIO_Init+0x250>)
 8000b62:	f002 fd1b 	bl	800359c <HAL_GPIO_Init>

  /*Configure GPIO pin : output_status_Pin */
  GPIO_InitStruct.Pin = output_status_Pin;
 8000b66:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000b6a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b70:	2300      	movs	r3, #0
 8000b72:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b74:	2300      	movs	r3, #0
 8000b76:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(output_status_GPIO_Port, &GPIO_InitStruct);
 8000b78:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	4829      	ldr	r0, [pc, #164]	@ (8000c24 <MX_GPIO_Init+0x254>)
 8000b80:	f002 fd0c 	bl	800359c <HAL_GPIO_Init>

  /*Configure GPIO pin : input_01_Pin */
  GPIO_InitStruct.Pin = input_01_Pin;
 8000b84:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000b88:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b8e:	2301      	movs	r3, #1
 8000b90:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(input_01_GPIO_Port, &GPIO_InitStruct);
 8000b92:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b96:	4619      	mov	r1, r3
 8000b98:	4822      	ldr	r0, [pc, #136]	@ (8000c24 <MX_GPIO_Init+0x254>)
 8000b9a:	f002 fcff 	bl	800359c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000b9e:	2340      	movs	r3, #64	@ 0x40
 8000ba0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000baa:	2300      	movs	r3, #0
 8000bac:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000bae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	481c      	ldr	r0, [pc, #112]	@ (8000c28 <MX_GPIO_Init+0x258>)
 8000bb6:	f002 fcf1 	bl	800359c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000bba:	2380      	movs	r3, #128	@ 0x80
 8000bbc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000bc6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bca:	4619      	mov	r1, r3
 8000bcc:	4816      	ldr	r0, [pc, #88]	@ (8000c28 <MX_GPIO_Init+0x258>)
 8000bce:	f002 fce5 	bl	800359c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000bd2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000bd6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000be0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000be4:	4619      	mov	r1, r3
 8000be6:	4813      	ldr	r0, [pc, #76]	@ (8000c34 <MX_GPIO_Init+0x264>)
 8000be8:	f002 fcd8 	bl	800359c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000bec:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000bf0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf2:	2302      	movs	r3, #2
 8000bf4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bfa:	2303      	movs	r3, #3
 8000bfc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000bfe:	230a      	movs	r3, #10
 8000c00:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c02:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c06:	4619      	mov	r1, r3
 8000c08:	480a      	ldr	r0, [pc, #40]	@ (8000c34 <MX_GPIO_Init+0x264>)
 8000c0a:	f002 fcc7 	bl	800359c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c0e:	bf00      	nop
 8000c10:	3738      	adds	r7, #56	@ 0x38
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	40023800 	.word	0x40023800
 8000c1c:	40021400 	.word	0x40021400
 8000c20:	40020400 	.word	0x40020400
 8000c24:	40020c00 	.word	0x40020c00
 8000c28:	40021800 	.word	0x40021800
 8000c2c:	40020800 	.word	0x40020800
 8000c30:	40021000 	.word	0x40021000
 8000c34:	40020000 	.word	0x40020000

08000c38 <SendString>:

/* USER CODE BEGIN 4 */


void SendString(const char *str) {
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
    // Toma el mutex antes de transmitir
    if (osMutexWait(uartMutexHandle, osWaitForever) == osOK) {
 8000c40:	4b0e      	ldr	r3, [pc, #56]	@ (8000c7c <SendString+0x44>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	f04f 31ff 	mov.w	r1, #4294967295
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f005 f8d5 	bl	8005df8 <osMutexWait>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d10f      	bne.n	8000c74 <SendString+0x3c>
        HAL_UART_Transmit(&huart3, (uint8_t *)str, strlen(str), HAL_MAX_DELAY);
 8000c54:	6878      	ldr	r0, [r7, #4]
 8000c56:	f7ff facb 	bl	80001f0 <strlen>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	b29a      	uxth	r2, r3
 8000c5e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c62:	6879      	ldr	r1, [r7, #4]
 8000c64:	4806      	ldr	r0, [pc, #24]	@ (8000c80 <SendString+0x48>)
 8000c66:	f003 fe33 	bl	80048d0 <HAL_UART_Transmit>
        // Libera el mutex después de transmitir
        osMutexRelease(uartMutexHandle);
 8000c6a:	4b04      	ldr	r3, [pc, #16]	@ (8000c7c <SendString+0x44>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f005 f910 	bl	8005e94 <osMutexRelease>
    } else {
        // Manejo de error si no se puede tomar el mutex
        // Esto debería ser raro si usas osWaitForever
    }
}
 8000c74:	bf00      	nop
 8000c76:	3708      	adds	r7, #8
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	20000598 	.word	0x20000598
 8000c80:	20000548 	.word	0x20000548

08000c84 <SendNumber>:

void SendNumber(int16_t number) {
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b088      	sub	sp, #32
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	80fb      	strh	r3, [r7, #6]
    char buffer[20];  // Buffer para almacenar el número como cadena
    sprintf(buffer, "%d", number);  // Convierte el número a cadena
 8000c8e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000c92:	f107 030c 	add.w	r3, r7, #12
 8000c96:	4906      	ldr	r1, [pc, #24]	@ (8000cb0 <SendNumber+0x2c>)
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f015 fc93 	bl	80165c4 <siprintf>
    SendString(buffer);  // Envia la cadena por UART
 8000c9e:	f107 030c 	add.w	r3, r7, #12
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f7ff ffc8 	bl	8000c38 <SendString>
}
 8000ca8:	bf00      	nop
 8000caa:	3720      	adds	r7, #32
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	08017858 	.word	0x08017858

08000cb4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b084      	sub	sp, #16
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000cbc:	f004 f9c4 	bl	8005048 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  tcpserver_init();
 8000cc0:	f000 fe2e 	bl	8001920 <tcpserver_init>


  //const char *mensaje = "I'm alive!!!\n";
  const char *mensaje_bienvenida = "inicio Modbus TCP Remoto en modo Servidor\r";
 8000cc4:	4b06      	ldr	r3, [pc, #24]	@ (8000ce0 <StartDefaultTask+0x2c>)
 8000cc6:	60fb      	str	r3, [r7, #12]

  SendString(mensaje_bienvenida);
 8000cc8:	68f8      	ldr	r0, [r7, #12]
 8000cca:	f7ff ffb5 	bl	8000c38 <SendString>

  /* Infinite loop */
  for(;;)
  {
	  //SendString(mensaje);
	  osDelay(500);
 8000cce:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000cd2:	f005 f865 	bl	8005da0 <osDelay>

	  osDelay(1);
 8000cd6:	2001      	movs	r0, #1
 8000cd8:	f005 f862 	bl	8005da0 <osDelay>
	  osDelay(500);
 8000cdc:	bf00      	nop
 8000cde:	e7f6      	b.n	8000cce <StartDefaultTask+0x1a>
 8000ce0:	0801785c 	.word	0x0801785c

08000ce4 <StartDriverTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDriverTask */
void StartDriverTask(void const * argument)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDriverTask */
  /* Infinite loop */
  for(;;)
  {
	  inputOutputControl();
 8000cec:	f7ff fc50 	bl	8000590 <inputOutputControl>
	  osDelay(20);
 8000cf0:	2014      	movs	r0, #20
 8000cf2:	f005 f855 	bl	8005da0 <osDelay>
	  inputOutputControl();
 8000cf6:	bf00      	nop
 8000cf8:	e7f8      	b.n	8000cec <StartDriverTask+0x8>
	...

08000cfc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4a04      	ldr	r2, [pc, #16]	@ (8000d1c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d0a:	4293      	cmp	r3, r2
 8000d0c:	d101      	bne.n	8000d12 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d0e:	f001 f8c3 	bl	8001e98 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d12:	bf00      	nop
 8000d14:	3708      	adds	r7, #8
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	40001000 	.word	0x40001000

08000d20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d24:	b672      	cpsid	i
}
 8000d26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d28:	bf00      	nop
 8000d2a:	e7fd      	b.n	8000d28 <Error_Handler+0x8>

08000d2c <mb_process>:
static uint8_t mb_process_val(uint16_t fn, uint16_t val);

static void mb_mbap_copy(uint8_t *mb_repl_buf, uint8_t *mb_req_buf);
static uint16_t mb_pdu_calculate_N(uint16_t fn, uint16_t quantity);

uint16_t mb_process(uint8_t *mb_repl_buf, uint8_t *mb_req_buf, uint16_t req_buf_len) {
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b086      	sub	sp, #24
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	60f8      	str	r0, [r7, #12]
 8000d34:	60b9      	str	r1, [r7, #8]
 8000d36:	4613      	mov	r3, r2
 8000d38:	80fb      	strh	r3, [r7, #6]
	memset(mb_repl_buf, '\0', MB_ADU_MAXSIZE);  // clear the buffer
 8000d3a:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000d3e:	2100      	movs	r1, #0
 8000d40:	68f8      	ldr	r0, [r7, #12]
 8000d42:	f015 fccc 	bl	80166de <memset>
	mb_mbap_copy(mb_repl_buf, mb_req_buf);
 8000d46:	68b9      	ldr	r1, [r7, #8]
 8000d48:	68f8      	ldr	r0, [r7, #12]
 8000d4a:	f000 f934 	bl	8000fb6 <mb_mbap_copy>
	uint16_t pduLen = 0;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	82fb      	strh	r3, [r7, #22]

	uint8_t fn = mb_req_buf[MB_PDU_FN];
 8000d52:	68bb      	ldr	r3, [r7, #8]
 8000d54:	79db      	ldrb	r3, [r3, #7]
 8000d56:	757b      	strb	r3, [r7, #21]
	switch (fn) {
 8000d58:	7d7b      	ldrb	r3, [r7, #21]
 8000d5a:	2b10      	cmp	r3, #16
 8000d5c:	dc1c      	bgt.n	8000d98 <mb_process+0x6c>
 8000d5e:	2b0f      	cmp	r3, #15
 8000d60:	da23      	bge.n	8000daa <mb_process+0x7e>
 8000d62:	2b04      	cmp	r3, #4
 8000d64:	dc02      	bgt.n	8000d6c <mb_process+0x40>
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	dc04      	bgt.n	8000d74 <mb_process+0x48>
 8000d6a:	e015      	b.n	8000d98 <mb_process+0x6c>
 8000d6c:	3b05      	subs	r3, #5
 8000d6e:	2b01      	cmp	r3, #1
 8000d70:	d812      	bhi.n	8000d98 <mb_process+0x6c>
 8000d72:	e008      	b.n	8000d86 <mb_process+0x5a>
	case MB_FN_READ_COILS:
	case MB_FN_READ_DISCRETE:
	case MB_FN_READ_HOLDING:
	case MB_FN_READ_INPUT:
		pduLen = mb_process_pdu_read_fn(mb_repl_buf, mb_req_buf, req_buf_len);
 8000d74:	88fb      	ldrh	r3, [r7, #6]
 8000d76:	461a      	mov	r2, r3
 8000d78:	68b9      	ldr	r1, [r7, #8]
 8000d7a:	68f8      	ldr	r0, [r7, #12]
 8000d7c:	f000 f82c 	bl	8000dd8 <mb_process_pdu_read_fn>
 8000d80:	4603      	mov	r3, r0
 8000d82:	82fb      	strh	r3, [r7, #22]
		break;
 8000d84:	e012      	b.n	8000dac <mb_process+0x80>
	case MB_FN_WRITE_S_COIL:
	case MB_FN_WRITE_S_HOLDING:
		pduLen = mb_process_pdu_write_single_fn(mb_repl_buf, mb_req_buf, req_buf_len);
 8000d86:	88fb      	ldrh	r3, [r7, #6]
 8000d88:	461a      	mov	r2, r3
 8000d8a:	68b9      	ldr	r1, [r7, #8]
 8000d8c:	68f8      	ldr	r0, [r7, #12]
 8000d8e:	f000 f89f 	bl	8000ed0 <mb_process_pdu_write_single_fn>
 8000d92:	4603      	mov	r3, r0
 8000d94:	82fb      	strh	r3, [r7, #22]
		break;
 8000d96:	e009      	b.n	8000dac <mb_process+0x80>
	case MB_FN_WRITE_M_COIL:
	case MB_FN_WRITE_M_HOLDING:
		//mb_process_write_fn(mb_repl_buf, mb_req_buf, req_buf_len);
		break;
	default:
		pduLen = mb_process_err(mb_repl_buf, fn, MB_EXCEPTION_FN_UNSUPPORTED);
 8000d98:	7d7b      	ldrb	r3, [r7, #21]
 8000d9a:	2201      	movs	r2, #1
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	68f8      	ldr	r0, [r7, #12]
 8000da0:	f000 f9aa 	bl	80010f8 <mb_process_err>
 8000da4:	4603      	mov	r3, r0
 8000da6:	82fb      	strh	r3, [r7, #22]
		break;
 8000da8:	e000      	b.n	8000dac <mb_process+0x80>
		break;
 8000daa:	bf00      	nop
	}

	mb_repl_buf[MB_MBAP_LEN_H] = (pduLen + 1) >> 8;
 8000dac:	8afb      	ldrh	r3, [r7, #22]
 8000dae:	3301      	adds	r3, #1
 8000db0:	121a      	asrs	r2, r3, #8
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	3304      	adds	r3, #4
 8000db6:	b2d2      	uxtb	r2, r2
 8000db8:	701a      	strb	r2, [r3, #0]
	mb_repl_buf[MB_MBAP_LEN_L] = (pduLen + 1) & 0xff;
 8000dba:	8afb      	ldrh	r3, [r7, #22]
 8000dbc:	b2da      	uxtb	r2, r3
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	3305      	adds	r3, #5
 8000dc2:	3201      	adds	r2, #1
 8000dc4:	b2d2      	uxtb	r2, r2
 8000dc6:	701a      	strb	r2, [r3, #0]

	return (pduLen + MB_MBAP_SIZE);
 8000dc8:	8afb      	ldrh	r3, [r7, #22]
 8000dca:	3307      	adds	r3, #7
 8000dcc:	b29b      	uxth	r3, r3
}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	3718      	adds	r7, #24
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
	...

08000dd8 <mb_process_pdu_read_fn>:

static uint16_t mb_process_pdu_read_fn(uint8_t *mb_repl_buf, uint8_t *mb_req_buf, uint16_t req_buf_len) {
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b086      	sub	sp, #24
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	60f8      	str	r0, [r7, #12]
 8000de0:	60b9      	str	r1, [r7, #8]
 8000de2:	4613      	mov	r3, r2
 8000de4:	80fb      	strh	r3, [r7, #6]
	uint8_t fn = mb_req_buf[MB_PDU_FN];
 8000de6:	68bb      	ldr	r3, [r7, #8]
 8000de8:	79db      	ldrb	r3, [r3, #7]
 8000dea:	75fb      	strb	r3, [r7, #23]
	uint16_t start_address = mb_req_buf[MB_PDU_R_ST_ADDR_L] + (mb_req_buf[MB_PDU_R_ST_ADDR_H] << 8);
 8000dec:	68bb      	ldr	r3, [r7, #8]
 8000dee:	3309      	adds	r3, #9
 8000df0:	781b      	ldrb	r3, [r3, #0]
 8000df2:	461a      	mov	r2, r3
 8000df4:	68bb      	ldr	r3, [r7, #8]
 8000df6:	3308      	adds	r3, #8
 8000df8:	781b      	ldrb	r3, [r3, #0]
 8000dfa:	021b      	lsls	r3, r3, #8
 8000dfc:	b29b      	uxth	r3, r3
 8000dfe:	4413      	add	r3, r2
 8000e00:	82bb      	strh	r3, [r7, #20]
	uint16_t quantity = mb_req_buf[MB_PDU_R_QUANTITY_L] + (mb_req_buf[MB_PDU_R_QUANTITY_H] << 8);
 8000e02:	68bb      	ldr	r3, [r7, #8]
 8000e04:	330b      	adds	r3, #11
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	461a      	mov	r2, r3
 8000e0a:	68bb      	ldr	r3, [r7, #8]
 8000e0c:	330a      	adds	r3, #10
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	021b      	lsls	r3, r3, #8
 8000e12:	b29b      	uxth	r3, r3
 8000e14:	4413      	add	r3, r2
 8000e16:	827b      	strh	r3, [r7, #18]

	if (mb_process_start_address(fn, start_address, quantity) != MB_EXCEPTION_OK) {
 8000e18:	7dfb      	ldrb	r3, [r7, #23]
 8000e1a:	b29b      	uxth	r3, r3
 8000e1c:	8a7a      	ldrh	r2, [r7, #18]
 8000e1e:	8ab9      	ldrh	r1, [r7, #20]
 8000e20:	4618      	mov	r0, r3
 8000e22:	f000 f8eb 	bl	8000ffc <mb_process_start_address>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d007      	beq.n	8000e3c <mb_process_pdu_read_fn+0x64>
		return mb_process_err(mb_repl_buf, fn, MB_EXCEPTION_DATA_ADDR);
 8000e2c:	7dfb      	ldrb	r3, [r7, #23]
 8000e2e:	2202      	movs	r2, #2
 8000e30:	4619      	mov	r1, r3
 8000e32:	68f8      	ldr	r0, [r7, #12]
 8000e34:	f000 f960 	bl	80010f8 <mb_process_err>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	e045      	b.n	8000ec8 <mb_process_pdu_read_fn+0xf0>
	} else { // form PDU content
		mb_repl_buf[MB_PDU_FN] = fn;
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	3307      	adds	r3, #7
 8000e40:	7dfa      	ldrb	r2, [r7, #23]
 8000e42:	701a      	strb	r2, [r3, #0]
		mb_repl_buf[MB_PDU_REPL_N] = mb_pdu_calculate_N(fn, quantity);
 8000e44:	7dfb      	ldrb	r3, [r7, #23]
 8000e46:	b29b      	uxth	r3, r3
 8000e48:	8a7a      	ldrh	r2, [r7, #18]
 8000e4a:	4611      	mov	r1, r2
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f000 f96e 	bl	800112e <mb_pdu_calculate_N>
 8000e52:	4603      	mov	r3, r0
 8000e54:	461a      	mov	r2, r3
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	3308      	adds	r3, #8
 8000e5a:	b2d2      	uxtb	r2, r2
 8000e5c:	701a      	strb	r2, [r3, #0]

		switch (fn) {
 8000e5e:	7dfb      	ldrb	r3, [r7, #23]
 8000e60:	3b01      	subs	r3, #1
 8000e62:	2b03      	cmp	r3, #3
 8000e64:	d826      	bhi.n	8000eb4 <mb_process_pdu_read_fn+0xdc>
 8000e66:	a201      	add	r2, pc, #4	@ (adr r2, 8000e6c <mb_process_pdu_read_fn+0x94>)
 8000e68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e6c:	08000e7d 	.word	0x08000e7d
 8000e70:	08000e8b 	.word	0x08000e8b
 8000e74:	08000e99 	.word	0x08000e99
 8000e78:	08000ea7 	.word	0x08000ea7
		case MB_FN_READ_COILS:
			read_coils(mb_repl_buf, start_address, quantity);
 8000e7c:	8a7a      	ldrh	r2, [r7, #18]
 8000e7e:	8abb      	ldrh	r3, [r7, #20]
 8000e80:	4619      	mov	r1, r3
 8000e82:	68f8      	ldr	r0, [r7, #12]
 8000e84:	f000 f980 	bl	8001188 <read_coils>
			break;
 8000e88:	e014      	b.n	8000eb4 <mb_process_pdu_read_fn+0xdc>
		case MB_FN_READ_DISCRETE:
			read_discrete(mb_repl_buf, start_address, quantity);
 8000e8a:	8a7a      	ldrh	r2, [r7, #18]
 8000e8c:	8abb      	ldrh	r3, [r7, #20]
 8000e8e:	4619      	mov	r1, r3
 8000e90:	68f8      	ldr	r0, [r7, #12]
 8000e92:	f000 f9c7 	bl	8001224 <read_discrete>
			break;
 8000e96:	e00d      	b.n	8000eb4 <mb_process_pdu_read_fn+0xdc>
		case MB_FN_READ_HOLDING:
			read_holding(mb_repl_buf, start_address, quantity);
 8000e98:	8a7a      	ldrh	r2, [r7, #18]
 8000e9a:	8abb      	ldrh	r3, [r7, #20]
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	68f8      	ldr	r0, [r7, #12]
 8000ea0:	f000 fa50 	bl	8001344 <read_holding>
			break;
 8000ea4:	e006      	b.n	8000eb4 <mb_process_pdu_read_fn+0xdc>
		case MB_FN_READ_INPUT:
			read_inputs(mb_repl_buf, start_address, quantity);
 8000ea6:	8a7a      	ldrh	r2, [r7, #18]
 8000ea8:	8abb      	ldrh	r3, [r7, #20]
 8000eaa:	4619      	mov	r1, r3
 8000eac:	68f8      	ldr	r0, [r7, #12]
 8000eae:	f000 f9f9 	bl	80012a4 <read_inputs>
			break;
 8000eb2:	bf00      	nop
		}

	}
	return mb_pdu_calculate_N(fn, quantity) + 2; // returns PDU size where +2 are N and fn
 8000eb4:	7dfb      	ldrb	r3, [r7, #23]
 8000eb6:	b29b      	uxth	r3, r3
 8000eb8:	8a7a      	ldrh	r2, [r7, #18]
 8000eba:	4611      	mov	r1, r2
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f000 f936 	bl	800112e <mb_pdu_calculate_N>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	3302      	adds	r3, #2
 8000ec6:	b29b      	uxth	r3, r3
}
 8000ec8:	4618      	mov	r0, r3
 8000eca:	3718      	adds	r7, #24
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}

08000ed0 <mb_process_pdu_write_single_fn>:

static uint16_t mb_process_pdu_write_single_fn(uint8_t *mb_repl_buf, uint8_t *mb_req_buf, uint16_t req_buf_len) {
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b086      	sub	sp, #24
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	60f8      	str	r0, [r7, #12]
 8000ed8:	60b9      	str	r1, [r7, #8]
 8000eda:	4613      	mov	r3, r2
 8000edc:	80fb      	strh	r3, [r7, #6]
	uint8_t fn = mb_req_buf[MB_PDU_FN];
 8000ede:	68bb      	ldr	r3, [r7, #8]
 8000ee0:	79db      	ldrb	r3, [r3, #7]
 8000ee2:	75fb      	strb	r3, [r7, #23]
	uint16_t address = mb_req_buf[MB_PDU_W_REG_ADDR_L] + (mb_req_buf[MB_PDU_W_REG_ADDR_H] << 8);
 8000ee4:	68bb      	ldr	r3, [r7, #8]
 8000ee6:	3309      	adds	r3, #9
 8000ee8:	781b      	ldrb	r3, [r3, #0]
 8000eea:	461a      	mov	r2, r3
 8000eec:	68bb      	ldr	r3, [r7, #8]
 8000eee:	3308      	adds	r3, #8
 8000ef0:	781b      	ldrb	r3, [r3, #0]
 8000ef2:	021b      	lsls	r3, r3, #8
 8000ef4:	b29b      	uxth	r3, r3
 8000ef6:	4413      	add	r3, r2
 8000ef8:	82bb      	strh	r3, [r7, #20]
	uint16_t valToWrite = mb_req_buf[MB_PDU_W_REG_VAL_L] + (mb_req_buf[MB_PDU_W_REG_VAL_H] << 8);
 8000efa:	68bb      	ldr	r3, [r7, #8]
 8000efc:	330b      	adds	r3, #11
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	461a      	mov	r2, r3
 8000f02:	68bb      	ldr	r3, [r7, #8]
 8000f04:	330a      	adds	r3, #10
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	021b      	lsls	r3, r3, #8
 8000f0a:	b29b      	uxth	r3, r3
 8000f0c:	4413      	add	r3, r2
 8000f0e:	827b      	strh	r3, [r7, #18]

	if (mb_process_start_address(fn, address, 1) != MB_EXCEPTION_OK) {
 8000f10:	7dfb      	ldrb	r3, [r7, #23]
 8000f12:	b29b      	uxth	r3, r3
 8000f14:	8ab9      	ldrh	r1, [r7, #20]
 8000f16:	2201      	movs	r2, #1
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f000 f86f 	bl	8000ffc <mb_process_start_address>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d007      	beq.n	8000f34 <mb_process_pdu_write_single_fn+0x64>
		return mb_process_err(mb_repl_buf, fn, MB_EXCEPTION_DATA_ADDR);
 8000f24:	7dfb      	ldrb	r3, [r7, #23]
 8000f26:	2202      	movs	r2, #2
 8000f28:	4619      	mov	r1, r3
 8000f2a:	68f8      	ldr	r0, [r7, #12]
 8000f2c:	f000 f8e4 	bl	80010f8 <mb_process_err>
 8000f30:	4603      	mov	r3, r0
 8000f32:	e03c      	b.n	8000fae <mb_process_pdu_write_single_fn+0xde>
	} else if (mb_process_val(fn, valToWrite) != MB_EXCEPTION_OK) {
 8000f34:	7dfb      	ldrb	r3, [r7, #23]
 8000f36:	b29b      	uxth	r3, r3
 8000f38:	8a7a      	ldrh	r2, [r7, #18]
 8000f3a:	4611      	mov	r1, r2
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f000 f8bd 	bl	80010bc <mb_process_val>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d007      	beq.n	8000f58 <mb_process_pdu_write_single_fn+0x88>
		return mb_process_err(mb_repl_buf, fn, MB_EXCEPTION_DATA_VAL);
 8000f48:	7dfb      	ldrb	r3, [r7, #23]
 8000f4a:	2203      	movs	r2, #3
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	68f8      	ldr	r0, [r7, #12]
 8000f50:	f000 f8d2 	bl	80010f8 <mb_process_err>
 8000f54:	4603      	mov	r3, r0
 8000f56:	e02a      	b.n	8000fae <mb_process_pdu_write_single_fn+0xde>
	} else { // form PDU content
		mb_repl_buf[MB_PDU_FN] = fn;
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	3307      	adds	r3, #7
 8000f5c:	7dfa      	ldrb	r2, [r7, #23]
 8000f5e:	701a      	strb	r2, [r3, #0]
		mb_repl_buf[MB_PDU_W_REG_ADDR_H] = mb_req_buf[MB_PDU_W_REG_ADDR_H];
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	3308      	adds	r3, #8
 8000f64:	68ba      	ldr	r2, [r7, #8]
 8000f66:	7a12      	ldrb	r2, [r2, #8]
 8000f68:	701a      	strb	r2, [r3, #0]
		mb_repl_buf[MB_PDU_W_REG_ADDR_L] = mb_req_buf[MB_PDU_W_REG_ADDR_L];
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	3309      	adds	r3, #9
 8000f6e:	68ba      	ldr	r2, [r7, #8]
 8000f70:	7a52      	ldrb	r2, [r2, #9]
 8000f72:	701a      	strb	r2, [r3, #0]
		mb_repl_buf[MB_PDU_W_REG_VAL_H] = mb_req_buf[MB_PDU_W_REG_VAL_H];
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	330a      	adds	r3, #10
 8000f78:	68ba      	ldr	r2, [r7, #8]
 8000f7a:	7a92      	ldrb	r2, [r2, #10]
 8000f7c:	701a      	strb	r2, [r3, #0]
		mb_repl_buf[MB_PDU_W_REG_VAL_L] = mb_req_buf[MB_PDU_W_REG_VAL_L];
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	330b      	adds	r3, #11
 8000f82:	68ba      	ldr	r2, [r7, #8]
 8000f84:	7ad2      	ldrb	r2, [r2, #11]
 8000f86:	701a      	strb	r2, [r3, #0]

		if(fn == MB_FN_WRITE_S_COIL) write_single_coil(address, valToWrite);
 8000f88:	7dfb      	ldrb	r3, [r7, #23]
 8000f8a:	2b05      	cmp	r3, #5
 8000f8c:	d105      	bne.n	8000f9a <mb_process_pdu_write_single_fn+0xca>
 8000f8e:	8a7a      	ldrh	r2, [r7, #18]
 8000f90:	8abb      	ldrh	r3, [r7, #20]
 8000f92:	4611      	mov	r1, r2
 8000f94:	4618      	mov	r0, r3
 8000f96:	f000 fa17 	bl	80013c8 <write_single_coil>
		if(fn == MB_FN_WRITE_S_HOLDING) write_single_holding(address, valToWrite);
 8000f9a:	7dfb      	ldrb	r3, [r7, #23]
 8000f9c:	2b06      	cmp	r3, #6
 8000f9e:	d105      	bne.n	8000fac <mb_process_pdu_write_single_fn+0xdc>
 8000fa0:	8a7a      	ldrh	r2, [r7, #18]
 8000fa2:	8abb      	ldrh	r3, [r7, #20]
 8000fa4:	4611      	mov	r1, r2
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f000 fa4c 	bl	8001444 <write_single_holding>
	}
	return 5; // PDU size for write single XXX command
 8000fac:	2305      	movs	r3, #5
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	3718      	adds	r7, #24
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}

08000fb6 <mb_mbap_copy>:

static void mb_mbap_copy(uint8_t *mb_repl_buf, uint8_t *mb_req_buf) {
 8000fb6:	b480      	push	{r7}
 8000fb8:	b083      	sub	sp, #12
 8000fba:	af00      	add	r7, sp, #0
 8000fbc:	6078      	str	r0, [r7, #4]
 8000fbe:	6039      	str	r1, [r7, #0]
	mb_repl_buf[MB_MBAP_TRANSACTION_ID_H] = mb_req_buf[MB_MBAP_TRANSACTION_ID_H];
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	781a      	ldrb	r2, [r3, #0]
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	701a      	strb	r2, [r3, #0]
	mb_repl_buf[MB_MBAP_TRANSACTION_ID_L] = mb_req_buf[MB_MBAP_TRANSACTION_ID_L];
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	3301      	adds	r3, #1
 8000fcc:	683a      	ldr	r2, [r7, #0]
 8000fce:	7852      	ldrb	r2, [r2, #1]
 8000fd0:	701a      	strb	r2, [r3, #0]
	mb_repl_buf[MB_MBAP_PROTOCOL_ID_H] = mb_req_buf[MB_MBAP_PROTOCOL_ID_H];
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	3302      	adds	r3, #2
 8000fd6:	683a      	ldr	r2, [r7, #0]
 8000fd8:	7892      	ldrb	r2, [r2, #2]
 8000fda:	701a      	strb	r2, [r3, #0]
	mb_repl_buf[MB_MBAP_PROTOCOL_ID_L] = mb_req_buf[MB_MBAP_PROTOCOL_ID_L];
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	3303      	adds	r3, #3
 8000fe0:	683a      	ldr	r2, [r7, #0]
 8000fe2:	78d2      	ldrb	r2, [r2, #3]
 8000fe4:	701a      	strb	r2, [r3, #0]
	mb_repl_buf[MB_MBAP_CLIENT_ID] = mb_req_buf[MB_MBAP_CLIENT_ID];
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	3306      	adds	r3, #6
 8000fea:	683a      	ldr	r2, [r7, #0]
 8000fec:	7992      	ldrb	r2, [r2, #6]
 8000fee:	701a      	strb	r2, [r3, #0]
}
 8000ff0:	bf00      	nop
 8000ff2:	370c      	adds	r7, #12
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffa:	4770      	bx	lr

08000ffc <mb_process_start_address>:

static uint8_t mb_process_start_address(uint16_t fn, uint16_t start_address, uint16_t quantity) {
 8000ffc:	b480      	push	{r7}
 8000ffe:	b085      	sub	sp, #20
 8001000:	af00      	add	r7, sp, #0
 8001002:	4603      	mov	r3, r0
 8001004:	80fb      	strh	r3, [r7, #6]
 8001006:	460b      	mov	r3, r1
 8001008:	80bb      	strh	r3, [r7, #4]
 800100a:	4613      	mov	r3, r2
 800100c:	807b      	strh	r3, [r7, #2]
	uint8_t exception_code = MB_EXCEPTION_OK;
 800100e:	2300      	movs	r3, #0
 8001010:	73fb      	strb	r3, [r7, #15]
	switch (fn) {
 8001012:	88fb      	ldrh	r3, [r7, #6]
 8001014:	3b01      	subs	r3, #1
 8001016:	2b05      	cmp	r3, #5
 8001018:	d849      	bhi.n	80010ae <mb_process_start_address+0xb2>
 800101a:	a201      	add	r2, pc, #4	@ (adr r2, 8001020 <mb_process_start_address+0x24>)
 800101c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001020:	08001039 	.word	0x08001039
 8001024:	08001049 	.word	0x08001049
 8001028:	08001059 	.word	0x08001059
 800102c:	08001069 	.word	0x08001069
 8001030:	08001079 	.word	0x08001079
 8001034:	08001089 	.word	0x08001089
	case MB_FN_READ_COILS:
		if ((start_address + quantity) > MB_COILS_Q)
 8001038:	88ba      	ldrh	r2, [r7, #4]
 800103a:	887b      	ldrh	r3, [r7, #2]
 800103c:	4413      	add	r3, r2
 800103e:	2bff      	cmp	r3, #255	@ 0xff
 8001040:	dd2a      	ble.n	8001098 <mb_process_start_address+0x9c>
			exception_code = 2;
 8001042:	2302      	movs	r3, #2
 8001044:	73fb      	strb	r3, [r7, #15]
		break;
 8001046:	e027      	b.n	8001098 <mb_process_start_address+0x9c>
	case MB_FN_READ_DISCRETE:
		if ((start_address + quantity) > MB_DISCRETE_Q)
 8001048:	88ba      	ldrh	r2, [r7, #4]
 800104a:	887b      	ldrh	r3, [r7, #2]
 800104c:	4413      	add	r3, r2
 800104e:	2bff      	cmp	r3, #255	@ 0xff
 8001050:	dd24      	ble.n	800109c <mb_process_start_address+0xa0>
			exception_code = 2;
 8001052:	2302      	movs	r3, #2
 8001054:	73fb      	strb	r3, [r7, #15]
		break;
 8001056:	e021      	b.n	800109c <mb_process_start_address+0xa0>
	case MB_FN_READ_HOLDING:
		if ((start_address + quantity) > MB_HOLDING_Q)
 8001058:	88ba      	ldrh	r2, [r7, #4]
 800105a:	887b      	ldrh	r3, [r7, #2]
 800105c:	4413      	add	r3, r2
 800105e:	2b08      	cmp	r3, #8
 8001060:	dd1e      	ble.n	80010a0 <mb_process_start_address+0xa4>
			exception_code = 2;
 8001062:	2302      	movs	r3, #2
 8001064:	73fb      	strb	r3, [r7, #15]
		break;
 8001066:	e01b      	b.n	80010a0 <mb_process_start_address+0xa4>
	case MB_FN_READ_INPUT:
		if ((start_address + quantity) > MB_INPUT_Q)
 8001068:	88ba      	ldrh	r2, [r7, #4]
 800106a:	887b      	ldrh	r3, [r7, #2]
 800106c:	4413      	add	r3, r2
 800106e:	2b08      	cmp	r3, #8
 8001070:	dd18      	ble.n	80010a4 <mb_process_start_address+0xa8>
			exception_code = 2;
 8001072:	2302      	movs	r3, #2
 8001074:	73fb      	strb	r3, [r7, #15]
		break;
 8001076:	e015      	b.n	80010a4 <mb_process_start_address+0xa8>

	case MB_FN_WRITE_S_COIL:
		if ((start_address + quantity) > MB_COILS_Q)
 8001078:	88ba      	ldrh	r2, [r7, #4]
 800107a:	887b      	ldrh	r3, [r7, #2]
 800107c:	4413      	add	r3, r2
 800107e:	2bff      	cmp	r3, #255	@ 0xff
 8001080:	dd12      	ble.n	80010a8 <mb_process_start_address+0xac>
			exception_code = 2;
 8001082:	2302      	movs	r3, #2
 8001084:	73fb      	strb	r3, [r7, #15]
		break;
 8001086:	e00f      	b.n	80010a8 <mb_process_start_address+0xac>
	case MB_FN_WRITE_S_HOLDING:
		if ((start_address + quantity) > MB_HOLDING_Q)
 8001088:	88ba      	ldrh	r2, [r7, #4]
 800108a:	887b      	ldrh	r3, [r7, #2]
 800108c:	4413      	add	r3, r2
 800108e:	2b08      	cmp	r3, #8
 8001090:	dd0c      	ble.n	80010ac <mb_process_start_address+0xb0>
			exception_code = 2;
 8001092:	2302      	movs	r3, #2
 8001094:	73fb      	strb	r3, [r7, #15]
		break;
 8001096:	e009      	b.n	80010ac <mb_process_start_address+0xb0>
		break;
 8001098:	bf00      	nop
 800109a:	e008      	b.n	80010ae <mb_process_start_address+0xb2>
		break;
 800109c:	bf00      	nop
 800109e:	e006      	b.n	80010ae <mb_process_start_address+0xb2>
		break;
 80010a0:	bf00      	nop
 80010a2:	e004      	b.n	80010ae <mb_process_start_address+0xb2>
		break;
 80010a4:	bf00      	nop
 80010a6:	e002      	b.n	80010ae <mb_process_start_address+0xb2>
		break;
 80010a8:	bf00      	nop
 80010aa:	e000      	b.n	80010ae <mb_process_start_address+0xb2>
		break;
 80010ac:	bf00      	nop
	}
	return exception_code;
 80010ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	3714      	adds	r7, #20
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr

080010bc <mb_process_val>:

static uint8_t mb_process_val(uint16_t fn, uint16_t val) {
 80010bc:	b480      	push	{r7}
 80010be:	b085      	sub	sp, #20
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	4603      	mov	r3, r0
 80010c4:	460a      	mov	r2, r1
 80010c6:	80fb      	strh	r3, [r7, #6]
 80010c8:	4613      	mov	r3, r2
 80010ca:	80bb      	strh	r3, [r7, #4]
	uint8_t exception_code = MB_EXCEPTION_OK;
 80010cc:	2300      	movs	r3, #0
 80010ce:	73fb      	strb	r3, [r7, #15]
	switch (fn) {
 80010d0:	88fb      	ldrh	r3, [r7, #6]
 80010d2:	2b05      	cmp	r3, #5
 80010d4:	d109      	bne.n	80010ea <mb_process_val+0x2e>
	case MB_FN_WRITE_S_COIL:
		if ((val != 0xFF00) && (val != 0x0000))
 80010d6:	88bb      	ldrh	r3, [r7, #4]
 80010d8:	f5b3 4f7f 	cmp.w	r3, #65280	@ 0xff00
 80010dc:	d004      	beq.n	80010e8 <mb_process_val+0x2c>
 80010de:	88bb      	ldrh	r3, [r7, #4]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d001      	beq.n	80010e8 <mb_process_val+0x2c>
			exception_code = 3;
 80010e4:	2303      	movs	r3, #3
 80010e6:	73fb      	strb	r3, [r7, #15]
		break;
 80010e8:	bf00      	nop
	}
	return exception_code;
 80010ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	3714      	adds	r7, #20
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr

080010f8 <mb_process_err>:

static uint16_t mb_process_err(uint8_t *mb_repl_buf, uint8_t fn, uint16_t exceptionCode) {
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
 8001100:	460b      	mov	r3, r1
 8001102:	70fb      	strb	r3, [r7, #3]
 8001104:	4613      	mov	r3, r2
 8001106:	803b      	strh	r3, [r7, #0]
	mb_repl_buf[MB_PDU_FN] = fn | 0x80;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	3307      	adds	r3, #7
 800110c:	78fa      	ldrb	r2, [r7, #3]
 800110e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8001112:	b2d2      	uxtb	r2, r2
 8001114:	701a      	strb	r2, [r3, #0]
	mb_repl_buf[MB_PDU_EXCEPTION_CODE] = exceptionCode;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	3308      	adds	r3, #8
 800111a:	883a      	ldrh	r2, [r7, #0]
 800111c:	b2d2      	uxtb	r2, r2
 800111e:	701a      	strb	r2, [r3, #0]
	return 2;
 8001120:	2302      	movs	r3, #2
}
 8001122:	4618      	mov	r0, r3
 8001124:	370c      	adds	r7, #12
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr

0800112e <mb_pdu_calculate_N>:

static uint16_t mb_pdu_calculate_N(uint16_t fn, uint16_t quantity) {
 800112e:	b480      	push	{r7}
 8001130:	b083      	sub	sp, #12
 8001132:	af00      	add	r7, sp, #0
 8001134:	4603      	mov	r3, r0
 8001136:	460a      	mov	r2, r1
 8001138:	80fb      	strh	r3, [r7, #6]
 800113a:	4613      	mov	r3, r2
 800113c:	80bb      	strh	r3, [r7, #4]
	switch (fn) {
 800113e:	88fb      	ldrh	r3, [r7, #6]
 8001140:	2b02      	cmp	r3, #2
 8001142:	dc02      	bgt.n	800114a <mb_pdu_calculate_N+0x1c>
 8001144:	2b00      	cmp	r3, #0
 8001146:	dc04      	bgt.n	8001152 <mb_pdu_calculate_N+0x24>
 8001148:	e017      	b.n	800117a <mb_pdu_calculate_N+0x4c>
 800114a:	3b03      	subs	r3, #3
 800114c:	2b01      	cmp	r3, #1
 800114e:	d814      	bhi.n	800117a <mb_pdu_calculate_N+0x4c>
 8001150:	e00f      	b.n	8001172 <mb_pdu_calculate_N+0x44>
	case MB_FN_READ_COILS:
	case MB_FN_READ_DISCRETE:
		if (quantity % 8 != 0)
 8001152:	88bb      	ldrh	r3, [r7, #4]
 8001154:	f003 0307 	and.w	r3, r3, #7
 8001158:	b29b      	uxth	r3, r3
 800115a:	2b00      	cmp	r3, #0
 800115c:	d005      	beq.n	800116a <mb_pdu_calculate_N+0x3c>
			return ((quantity / 8) + 1);
 800115e:	88bb      	ldrh	r3, [r7, #4]
 8001160:	08db      	lsrs	r3, r3, #3
 8001162:	b29b      	uxth	r3, r3
 8001164:	3301      	adds	r3, #1
 8001166:	b29b      	uxth	r3, r3
 8001168:	e008      	b.n	800117c <mb_pdu_calculate_N+0x4e>
		else
			return (quantity / 8);
 800116a:	88bb      	ldrh	r3, [r7, #4]
 800116c:	08db      	lsrs	r3, r3, #3
 800116e:	b29b      	uxth	r3, r3
 8001170:	e004      	b.n	800117c <mb_pdu_calculate_N+0x4e>
		break;
	case MB_FN_READ_HOLDING:
	case MB_FN_READ_INPUT:
		return quantity * 2;
 8001172:	88bb      	ldrh	r3, [r7, #4]
 8001174:	005b      	lsls	r3, r3, #1
 8001176:	b29b      	uxth	r3, r3
 8001178:	e000      	b.n	800117c <mb_pdu_calculate_N+0x4e>
		break;
	default:
		return 0;
 800117a:	2300      	movs	r3, #0
	}
}
 800117c:	4618      	mov	r0, r3
 800117e:	370c      	adds	r7, #12
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr

08001188 <read_coils>:

void read_coils(uint8_t *repl_buf, uint16_t address, uint16_t quantity){
 8001188:	b580      	push	{r7, lr}
 800118a:	b084      	sub	sp, #16
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
 8001190:	460b      	mov	r3, r1
 8001192:	807b      	strh	r3, [r7, #2]
 8001194:	4613      	mov	r3, r2
 8001196:	803b      	strh	r3, [r7, #0]
    //uint16_t byte_count = (quantity + 7) / 8;  // Cantidad de bytes necesarios
    //memset(response_buffer, 0, 256);            // Inicializar TODO el buffer de respuesta a 0
    //memset(response_buffer, 0, byte_count);    // Inicializar el buffer de respuesta a 0
	SendString("leo coils coils \r");
 8001198:	481f      	ldr	r0, [pc, #124]	@ (8001218 <read_coils+0x90>)
 800119a:	f7ff fd4d 	bl	8000c38 <SendString>
    for (uint16_t i = 0; i < quantity; i++) {
 800119e:	2300      	movs	r3, #0
 80011a0:	81fb      	strh	r3, [r7, #14]
 80011a2:	e02f      	b.n	8001204 <read_coils+0x7c>
        uint16_t coil_index = address + i;
 80011a4:	887a      	ldrh	r2, [r7, #2]
 80011a6:	89fb      	ldrh	r3, [r7, #14]
 80011a8:	4413      	add	r3, r2
 80011aa:	81bb      	strh	r3, [r7, #12]
        osMutexWait(coilMutexHandle, osWaitForever);
 80011ac:	4b1b      	ldr	r3, [pc, #108]	@ (800121c <read_coils+0x94>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f04f 31ff 	mov.w	r1, #4294967295
 80011b4:	4618      	mov	r0, r3
 80011b6:	f004 fe1f 	bl	8005df8 <osMutexWait>
        if (coil_status[coil_index]) {
 80011ba:	89bb      	ldrh	r3, [r7, #12]
 80011bc:	4a18      	ldr	r2, [pc, #96]	@ (8001220 <read_coils+0x98>)
 80011be:	5cd3      	ldrb	r3, [r2, r3]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d017      	beq.n	80011f4 <read_coils+0x6c>
            repl_buf[(i / 8) +9 ] |= (1 << (i % 8));  // Establecer el bit correspondiente si la coil está ON
 80011c4:	89fb      	ldrh	r3, [r7, #14]
 80011c6:	08db      	lsrs	r3, r3, #3
 80011c8:	b298      	uxth	r0, r3
 80011ca:	4603      	mov	r3, r0
 80011cc:	3309      	adds	r3, #9
 80011ce:	687a      	ldr	r2, [r7, #4]
 80011d0:	4413      	add	r3, r2
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	b25a      	sxtb	r2, r3
 80011d6:	89fb      	ldrh	r3, [r7, #14]
 80011d8:	f003 0307 	and.w	r3, r3, #7
 80011dc:	2101      	movs	r1, #1
 80011de:	fa01 f303 	lsl.w	r3, r1, r3
 80011e2:	b25b      	sxtb	r3, r3
 80011e4:	4313      	orrs	r3, r2
 80011e6:	b259      	sxtb	r1, r3
 80011e8:	4603      	mov	r3, r0
 80011ea:	3309      	adds	r3, #9
 80011ec:	687a      	ldr	r2, [r7, #4]
 80011ee:	4413      	add	r3, r2
 80011f0:	b2ca      	uxtb	r2, r1
 80011f2:	701a      	strb	r2, [r3, #0]
													//y es mas 9 para dar lugar a fn y cantidad de bytes en
													//[7] y [8]
        }
        osMutexRelease(coilMutexHandle);
 80011f4:	4b09      	ldr	r3, [pc, #36]	@ (800121c <read_coils+0x94>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4618      	mov	r0, r3
 80011fa:	f004 fe4b 	bl	8005e94 <osMutexRelease>
    for (uint16_t i = 0; i < quantity; i++) {
 80011fe:	89fb      	ldrh	r3, [r7, #14]
 8001200:	3301      	adds	r3, #1
 8001202:	81fb      	strh	r3, [r7, #14]
 8001204:	89fa      	ldrh	r2, [r7, #14]
 8001206:	883b      	ldrh	r3, [r7, #0]
 8001208:	429a      	cmp	r2, r3
 800120a:	d3cb      	bcc.n	80011a4 <read_coils+0x1c>
    }
}
 800120c:	bf00      	nop
 800120e:	bf00      	nop
 8001210:	3710      	adds	r7, #16
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	08017888 	.word	0x08017888
 800121c:	2000059c 	.word	0x2000059c
 8001220:	200005a4 	.word	0x200005a4

08001224 <read_discrete>:

void read_discrete(uint8_t *repl_buf, uint16_t address, uint16_t quantity){
 8001224:	b580      	push	{r7, lr}
 8001226:	b084      	sub	sp, #16
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
 800122c:	460b      	mov	r3, r1
 800122e:	807b      	strh	r3, [r7, #2]
 8001230:	4613      	mov	r3, r2
 8001232:	803b      	strh	r3, [r7, #0]
    // NO USADO uint16_t byte_count = (quantity + 7) / 8;  // Cantidad de bytes necesarios
    //memset(response_buffer, 0, 256);            // Inicializar TODO el buffer de respuesta a 0
    //memset(response_buffer, 0, byte_count);    // Inicializar el buffer de respuesta a 0
	SendString("leo discrete \r");
 8001234:	4819      	ldr	r0, [pc, #100]	@ (800129c <read_discrete+0x78>)
 8001236:	f7ff fcff 	bl	8000c38 <SendString>
    for (uint16_t i = 0; i < quantity; i++) {
 800123a:	2300      	movs	r3, #0
 800123c:	81fb      	strh	r3, [r7, #14]
 800123e:	e023      	b.n	8001288 <read_discrete+0x64>
        uint16_t discrete_index = address + i;
 8001240:	887a      	ldrh	r2, [r7, #2]
 8001242:	89fb      	ldrh	r3, [r7, #14]
 8001244:	4413      	add	r3, r2
 8001246:	81bb      	strh	r3, [r7, #12]
        if (discrete_status[discrete_index]) {
 8001248:	89bb      	ldrh	r3, [r7, #12]
 800124a:	4a15      	ldr	r2, [pc, #84]	@ (80012a0 <read_discrete+0x7c>)
 800124c:	5cd3      	ldrb	r3, [r2, r3]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d017      	beq.n	8001282 <read_discrete+0x5e>
            repl_buf[(i / 8) +9 ] |= (1 << (i % 8));  // Establecer el bit correspondiente si la coil está ON
 8001252:	89fb      	ldrh	r3, [r7, #14]
 8001254:	08db      	lsrs	r3, r3, #3
 8001256:	b298      	uxth	r0, r3
 8001258:	4603      	mov	r3, r0
 800125a:	3309      	adds	r3, #9
 800125c:	687a      	ldr	r2, [r7, #4]
 800125e:	4413      	add	r3, r2
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	b25a      	sxtb	r2, r3
 8001264:	89fb      	ldrh	r3, [r7, #14]
 8001266:	f003 0307 	and.w	r3, r3, #7
 800126a:	2101      	movs	r1, #1
 800126c:	fa01 f303 	lsl.w	r3, r1, r3
 8001270:	b25b      	sxtb	r3, r3
 8001272:	4313      	orrs	r3, r2
 8001274:	b259      	sxtb	r1, r3
 8001276:	4603      	mov	r3, r0
 8001278:	3309      	adds	r3, #9
 800127a:	687a      	ldr	r2, [r7, #4]
 800127c:	4413      	add	r3, r2
 800127e:	b2ca      	uxtb	r2, r1
 8001280:	701a      	strb	r2, [r3, #0]
    for (uint16_t i = 0; i < quantity; i++) {
 8001282:	89fb      	ldrh	r3, [r7, #14]
 8001284:	3301      	adds	r3, #1
 8001286:	81fb      	strh	r3, [r7, #14]
 8001288:	89fa      	ldrh	r2, [r7, #14]
 800128a:	883b      	ldrh	r3, [r7, #0]
 800128c:	429a      	cmp	r2, r3
 800128e:	d3d7      	bcc.n	8001240 <read_discrete+0x1c>
													//y es mas 9 para dar lugar a fn y cantidad de bytes en
													//[7] y [8]
        }
    }

}
 8001290:	bf00      	nop
 8001292:	bf00      	nop
 8001294:	3710      	adds	r7, #16
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	0801789c 	.word	0x0801789c
 80012a0:	200006a4 	.word	0x200006a4

080012a4 <read_inputs>:

//Lectura de input
void read_inputs(uint8_t *repl_buf, uint16_t address, uint16_t quantity) {
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b084      	sub	sp, #16
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
 80012ac:	460b      	mov	r3, r1
 80012ae:	807b      	strh	r3, [r7, #2]
 80012b0:	4613      	mov	r3, r2
 80012b2:	803b      	strh	r3, [r7, #0]
	SendString("leo inputs \r");
 80012b4:	4820      	ldr	r0, [pc, #128]	@ (8001338 <read_inputs+0x94>)
 80012b6:	f7ff fcbf 	bl	8000c38 <SendString>
    // Cantidad de bytes necesarios: cada registro holding es de 2 bytes (16 bits)
    uint16_t byte_count = quantity * 2;
 80012ba:	883b      	ldrh	r3, [r7, #0]
 80012bc:	005b      	lsls	r3, r3, #1
 80012be:	81bb      	strh	r3, [r7, #12]

    // Coloca la cantidad de bytes en el byte [8] del buffer de respuesta (luego de la cabecera)
    repl_buf[8] = byte_count;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	3308      	adds	r3, #8
 80012c4:	89ba      	ldrh	r2, [r7, #12]
 80012c6:	b2d2      	uxtb	r2, r2
 80012c8:	701a      	strb	r2, [r3, #0]

    // Copiar los valores de los registros holding solicitados
    for (uint16_t i = 0; i < quantity; i++) {
 80012ca:	2300      	movs	r3, #0
 80012cc:	81fb      	strh	r3, [r7, #14]
 80012ce:	e02a      	b.n	8001326 <read_inputs+0x82>
        uint16_t inputs_index = address + i;
 80012d0:	887a      	ldrh	r2, [r7, #2]
 80012d2:	89fb      	ldrh	r3, [r7, #14]
 80012d4:	4413      	add	r3, r2
 80012d6:	817b      	strh	r3, [r7, #10]

        osMutexWait(discreteMutexHandle, osWaitForever);
 80012d8:	4b18      	ldr	r3, [pc, #96]	@ (800133c <read_inputs+0x98>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f04f 31ff 	mov.w	r1, #4294967295
 80012e0:	4618      	mov	r0, r3
 80012e2:	f004 fd89 	bl	8005df8 <osMutexWait>
        uint16_t inputs_value = input_status[inputs_index];  // Valor del registro holding
 80012e6:	897b      	ldrh	r3, [r7, #10]
 80012e8:	4a15      	ldr	r2, [pc, #84]	@ (8001340 <read_inputs+0x9c>)
 80012ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80012ee:	813b      	strh	r3, [r7, #8]
        osMutexRelease(discreteMutexHandle);
 80012f0:	4b12      	ldr	r3, [pc, #72]	@ (800133c <read_inputs+0x98>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4618      	mov	r0, r3
 80012f6:	f004 fdcd 	bl	8005e94 <osMutexRelease>

        // Poner los 2 bytes del registro holding en el buffer de respuesta
        repl_buf[9 + (i * 2)]     = (inputs_value >> 8) & 0xFF;  // Byte alto
 80012fa:	893b      	ldrh	r3, [r7, #8]
 80012fc:	0a1b      	lsrs	r3, r3, #8
 80012fe:	b29a      	uxth	r2, r3
 8001300:	89fb      	ldrh	r3, [r7, #14]
 8001302:	005b      	lsls	r3, r3, #1
 8001304:	3309      	adds	r3, #9
 8001306:	4619      	mov	r1, r3
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	440b      	add	r3, r1
 800130c:	b2d2      	uxtb	r2, r2
 800130e:	701a      	strb	r2, [r3, #0]
        repl_buf[9 + (i * 2) + 1] = inputs_value & 0xFF;         // Byte bajo
 8001310:	89fb      	ldrh	r3, [r7, #14]
 8001312:	005b      	lsls	r3, r3, #1
 8001314:	330a      	adds	r3, #10
 8001316:	687a      	ldr	r2, [r7, #4]
 8001318:	4413      	add	r3, r2
 800131a:	893a      	ldrh	r2, [r7, #8]
 800131c:	b2d2      	uxtb	r2, r2
 800131e:	701a      	strb	r2, [r3, #0]
    for (uint16_t i = 0; i < quantity; i++) {
 8001320:	89fb      	ldrh	r3, [r7, #14]
 8001322:	3301      	adds	r3, #1
 8001324:	81fb      	strh	r3, [r7, #14]
 8001326:	89fa      	ldrh	r2, [r7, #14]
 8001328:	883b      	ldrh	r3, [r7, #0]
 800132a:	429a      	cmp	r2, r3
 800132c:	d3d0      	bcc.n	80012d0 <read_inputs+0x2c>
    }
}
 800132e:	bf00      	nop
 8001330:	bf00      	nop
 8001332:	3710      	adds	r7, #16
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	080178ac 	.word	0x080178ac
 800133c:	200005a0 	.word	0x200005a0
 8001340:	200007a4 	.word	0x200007a4

08001344 <read_holding>:

//Lectura de holdings
void read_holding(uint8_t *repl_buf, uint16_t address, uint16_t quantity) {
 8001344:	b580      	push	{r7, lr}
 8001346:	b084      	sub	sp, #16
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
 800134c:	460b      	mov	r3, r1
 800134e:	807b      	strh	r3, [r7, #2]
 8001350:	4613      	mov	r3, r2
 8001352:	803b      	strh	r3, [r7, #0]
	SendString("leo holding \r");
 8001354:	481a      	ldr	r0, [pc, #104]	@ (80013c0 <read_holding+0x7c>)
 8001356:	f7ff fc6f 	bl	8000c38 <SendString>
    // Cantidad de bytes necesarios: cada registro holding es de 2 bytes (16 bits)
    uint16_t byte_count = quantity * 2;
 800135a:	883b      	ldrh	r3, [r7, #0]
 800135c:	005b      	lsls	r3, r3, #1
 800135e:	81bb      	strh	r3, [r7, #12]

    // Coloca la cantidad de bytes en el byte [8] del buffer de respuesta (luego de la cabecera)
    repl_buf[8] = byte_count;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	3308      	adds	r3, #8
 8001364:	89ba      	ldrh	r2, [r7, #12]
 8001366:	b2d2      	uxtb	r2, r2
 8001368:	701a      	strb	r2, [r3, #0]

    // Copiar los valores de los registros holding solicitados
    for (uint16_t i = 0; i < quantity; i++) {
 800136a:	2300      	movs	r3, #0
 800136c:	81fb      	strh	r3, [r7, #14]
 800136e:	e01e      	b.n	80013ae <read_holding+0x6a>
        uint16_t reg_index = address + i;
 8001370:	887a      	ldrh	r2, [r7, #2]
 8001372:	89fb      	ldrh	r3, [r7, #14]
 8001374:	4413      	add	r3, r2
 8001376:	817b      	strh	r3, [r7, #10]
        uint16_t holding_value = holding_registers[reg_index];  // Valor del registro holding
 8001378:	897b      	ldrh	r3, [r7, #10]
 800137a:	4a12      	ldr	r2, [pc, #72]	@ (80013c4 <read_holding+0x80>)
 800137c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001380:	813b      	strh	r3, [r7, #8]

        // Poner los 2 bytes del registro holding en el buffer de respuesta
        repl_buf[9 + (i * 2)]     = (holding_value >> 8) & 0xFF;  // Byte alto
 8001382:	893b      	ldrh	r3, [r7, #8]
 8001384:	0a1b      	lsrs	r3, r3, #8
 8001386:	b29a      	uxth	r2, r3
 8001388:	89fb      	ldrh	r3, [r7, #14]
 800138a:	005b      	lsls	r3, r3, #1
 800138c:	3309      	adds	r3, #9
 800138e:	4619      	mov	r1, r3
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	440b      	add	r3, r1
 8001394:	b2d2      	uxtb	r2, r2
 8001396:	701a      	strb	r2, [r3, #0]
        repl_buf[9 + (i * 2) + 1] = holding_value & 0xFF;         // Byte bajo
 8001398:	89fb      	ldrh	r3, [r7, #14]
 800139a:	005b      	lsls	r3, r3, #1
 800139c:	330a      	adds	r3, #10
 800139e:	687a      	ldr	r2, [r7, #4]
 80013a0:	4413      	add	r3, r2
 80013a2:	893a      	ldrh	r2, [r7, #8]
 80013a4:	b2d2      	uxtb	r2, r2
 80013a6:	701a      	strb	r2, [r3, #0]
    for (uint16_t i = 0; i < quantity; i++) {
 80013a8:	89fb      	ldrh	r3, [r7, #14]
 80013aa:	3301      	adds	r3, #1
 80013ac:	81fb      	strh	r3, [r7, #14]
 80013ae:	89fa      	ldrh	r2, [r7, #14]
 80013b0:	883b      	ldrh	r3, [r7, #0]
 80013b2:	429a      	cmp	r2, r3
 80013b4:	d3dc      	bcc.n	8001370 <read_holding+0x2c>
    }
}
 80013b6:	bf00      	nop
 80013b8:	bf00      	nop
 80013ba:	3710      	adds	r7, #16
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	080178bc 	.word	0x080178bc
 80013c4:	200007b4 	.word	0x200007b4

080013c8 <write_single_coil>:

void write_single_coil(uint16_t address, uint16_t val) {
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	4603      	mov	r3, r0
 80013d0:	460a      	mov	r2, r1
 80013d2:	80fb      	strh	r3, [r7, #6]
 80013d4:	4613      	mov	r3, r2
 80013d6:	80bb      	strh	r3, [r7, #4]
	SendString("escribo coils \r");
 80013d8:	4817      	ldr	r0, [pc, #92]	@ (8001438 <write_single_coil+0x70>)
 80013da:	f7ff fc2d 	bl	8000c38 <SendString>
    // Verificar si el valor es válido para una coil (0xFF00 para ON, 0x0000 para OFF)
    if (val == 0xFF00) {
 80013de:	88bb      	ldrh	r3, [r7, #4]
 80013e0:	f5b3 4f7f 	cmp.w	r3, #65280	@ 0xff00
 80013e4:	d110      	bne.n	8001408 <write_single_coil+0x40>
        // Establecer la coil en ON (1)
    	osMutexWait(coilMutexHandle, osWaitForever);
 80013e6:	4b15      	ldr	r3, [pc, #84]	@ (800143c <write_single_coil+0x74>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f04f 31ff 	mov.w	r1, #4294967295
 80013ee:	4618      	mov	r0, r3
 80013f0:	f004 fd02 	bl	8005df8 <osMutexWait>
        coil_status[address] = 1;
 80013f4:	88fb      	ldrh	r3, [r7, #6]
 80013f6:	4a12      	ldr	r2, [pc, #72]	@ (8001440 <write_single_coil+0x78>)
 80013f8:	2101      	movs	r1, #1
 80013fa:	54d1      	strb	r1, [r2, r3]
        osMutexRelease(coilMutexHandle);
 80013fc:	4b0f      	ldr	r3, [pc, #60]	@ (800143c <write_single_coil+0x74>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4618      	mov	r0, r3
 8001402:	f004 fd47 	bl	8005e94 <osMutexRelease>
 8001406:	e014      	b.n	8001432 <write_single_coil+0x6a>
    } else if (val == 0x0000) {
 8001408:	88bb      	ldrh	r3, [r7, #4]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d110      	bne.n	8001430 <write_single_coil+0x68>
        // Establecer la coil en OFF (0)
    	osMutexWait(coilMutexHandle, osWaitForever);
 800140e:	4b0b      	ldr	r3, [pc, #44]	@ (800143c <write_single_coil+0x74>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f04f 31ff 	mov.w	r1, #4294967295
 8001416:	4618      	mov	r0, r3
 8001418:	f004 fcee 	bl	8005df8 <osMutexWait>
        coil_status[address] = 0;
 800141c:	88fb      	ldrh	r3, [r7, #6]
 800141e:	4a08      	ldr	r2, [pc, #32]	@ (8001440 <write_single_coil+0x78>)
 8001420:	2100      	movs	r1, #0
 8001422:	54d1      	strb	r1, [r2, r3]
        osMutexRelease(coilMutexHandle);
 8001424:	4b05      	ldr	r3, [pc, #20]	@ (800143c <write_single_coil+0x74>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4618      	mov	r0, r3
 800142a:	f004 fd33 	bl	8005e94 <osMutexRelease>
 800142e:	e000      	b.n	8001432 <write_single_coil+0x6a>
    } else {
        // Valor inválido, manejar error según el protocolo Modbus
        return;
 8001430:	bf00      	nop
    }

    // Opcional: aquí podrías generar una respuesta Modbus o hacer algo con los cambios.
}
 8001432:	3708      	adds	r7, #8
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	080178cc 	.word	0x080178cc
 800143c:	2000059c 	.word	0x2000059c
 8001440:	200005a4 	.word	0x200005a4

08001444 <write_single_holding>:

void write_single_holding(uint16_t address, uint16_t val) {
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0
 800144a:	4603      	mov	r3, r0
 800144c:	460a      	mov	r2, r1
 800144e:	80fb      	strh	r3, [r7, #6]
 8001450:	4613      	mov	r3, r2
 8001452:	80bb      	strh	r3, [r7, #4]
	SendString("escribo holding \r");
 8001454:	4805      	ldr	r0, [pc, #20]	@ (800146c <write_single_holding+0x28>)
 8001456:	f7ff fbef 	bl	8000c38 <SendString>
    // Escribir el valor directamente en el holding register correspondiente
    holding_registers[address] = val;
 800145a:	88fb      	ldrh	r3, [r7, #6]
 800145c:	4904      	ldr	r1, [pc, #16]	@ (8001470 <write_single_holding+0x2c>)
 800145e:	88ba      	ldrh	r2, [r7, #4]
 8001460:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 8001464:	bf00      	nop
 8001466:	3708      	adds	r7, #8
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	080178dc 	.word	0x080178dc
 8001470:	200007b4 	.word	0x200007b4

08001474 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800147a:	2300      	movs	r3, #0
 800147c:	607b      	str	r3, [r7, #4]
 800147e:	4b12      	ldr	r3, [pc, #72]	@ (80014c8 <HAL_MspInit+0x54>)
 8001480:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001482:	4a11      	ldr	r2, [pc, #68]	@ (80014c8 <HAL_MspInit+0x54>)
 8001484:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001488:	6453      	str	r3, [r2, #68]	@ 0x44
 800148a:	4b0f      	ldr	r3, [pc, #60]	@ (80014c8 <HAL_MspInit+0x54>)
 800148c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800148e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001492:	607b      	str	r3, [r7, #4]
 8001494:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001496:	2300      	movs	r3, #0
 8001498:	603b      	str	r3, [r7, #0]
 800149a:	4b0b      	ldr	r3, [pc, #44]	@ (80014c8 <HAL_MspInit+0x54>)
 800149c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800149e:	4a0a      	ldr	r2, [pc, #40]	@ (80014c8 <HAL_MspInit+0x54>)
 80014a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80014a6:	4b08      	ldr	r3, [pc, #32]	@ (80014c8 <HAL_MspInit+0x54>)
 80014a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014ae:	603b      	str	r3, [r7, #0]
 80014b0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80014b2:	2200      	movs	r2, #0
 80014b4:	210f      	movs	r1, #15
 80014b6:	f06f 0001 	mvn.w	r0, #1
 80014ba:	f000 fde9 	bl	8002090 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014be:	bf00      	nop
 80014c0:	3708      	adds	r7, #8
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	40023800 	.word	0x40023800

080014cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b08a      	sub	sp, #40	@ 0x28
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d4:	f107 0314 	add.w	r3, r7, #20
 80014d8:	2200      	movs	r2, #0
 80014da:	601a      	str	r2, [r3, #0]
 80014dc:	605a      	str	r2, [r3, #4]
 80014de:	609a      	str	r2, [r3, #8]
 80014e0:	60da      	str	r2, [r3, #12]
 80014e2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a19      	ldr	r2, [pc, #100]	@ (8001550 <HAL_UART_MspInit+0x84>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d12c      	bne.n	8001548 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80014ee:	2300      	movs	r3, #0
 80014f0:	613b      	str	r3, [r7, #16]
 80014f2:	4b18      	ldr	r3, [pc, #96]	@ (8001554 <HAL_UART_MspInit+0x88>)
 80014f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014f6:	4a17      	ldr	r2, [pc, #92]	@ (8001554 <HAL_UART_MspInit+0x88>)
 80014f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80014fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80014fe:	4b15      	ldr	r3, [pc, #84]	@ (8001554 <HAL_UART_MspInit+0x88>)
 8001500:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001502:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001506:	613b      	str	r3, [r7, #16]
 8001508:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800150a:	2300      	movs	r3, #0
 800150c:	60fb      	str	r3, [r7, #12]
 800150e:	4b11      	ldr	r3, [pc, #68]	@ (8001554 <HAL_UART_MspInit+0x88>)
 8001510:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001512:	4a10      	ldr	r2, [pc, #64]	@ (8001554 <HAL_UART_MspInit+0x88>)
 8001514:	f043 0308 	orr.w	r3, r3, #8
 8001518:	6313      	str	r3, [r2, #48]	@ 0x30
 800151a:	4b0e      	ldr	r3, [pc, #56]	@ (8001554 <HAL_UART_MspInit+0x88>)
 800151c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800151e:	f003 0308 	and.w	r3, r3, #8
 8001522:	60fb      	str	r3, [r7, #12]
 8001524:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001526:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800152a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800152c:	2302      	movs	r3, #2
 800152e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001530:	2300      	movs	r3, #0
 8001532:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001534:	2303      	movs	r3, #3
 8001536:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001538:	2307      	movs	r3, #7
 800153a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800153c:	f107 0314 	add.w	r3, r7, #20
 8001540:	4619      	mov	r1, r3
 8001542:	4805      	ldr	r0, [pc, #20]	@ (8001558 <HAL_UART_MspInit+0x8c>)
 8001544:	f002 f82a 	bl	800359c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001548:	bf00      	nop
 800154a:	3728      	adds	r7, #40	@ 0x28
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}
 8001550:	40004800 	.word	0x40004800
 8001554:	40023800 	.word	0x40023800
 8001558:	40020c00 	.word	0x40020c00

0800155c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b08e      	sub	sp, #56	@ 0x38
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001564:	2300      	movs	r3, #0
 8001566:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001568:	2300      	movs	r3, #0
 800156a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800156c:	2300      	movs	r3, #0
 800156e:	60fb      	str	r3, [r7, #12]
 8001570:	4b33      	ldr	r3, [pc, #204]	@ (8001640 <HAL_InitTick+0xe4>)
 8001572:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001574:	4a32      	ldr	r2, [pc, #200]	@ (8001640 <HAL_InitTick+0xe4>)
 8001576:	f043 0310 	orr.w	r3, r3, #16
 800157a:	6413      	str	r3, [r2, #64]	@ 0x40
 800157c:	4b30      	ldr	r3, [pc, #192]	@ (8001640 <HAL_InitTick+0xe4>)
 800157e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001580:	f003 0310 	and.w	r3, r3, #16
 8001584:	60fb      	str	r3, [r7, #12]
 8001586:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001588:	f107 0210 	add.w	r2, r7, #16
 800158c:	f107 0314 	add.w	r3, r7, #20
 8001590:	4611      	mov	r1, r2
 8001592:	4618      	mov	r0, r3
 8001594:	f002 fe78 	bl	8004288 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001598:	6a3b      	ldr	r3, [r7, #32]
 800159a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800159c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d103      	bne.n	80015aa <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80015a2:	f002 fe49 	bl	8004238 <HAL_RCC_GetPCLK1Freq>
 80015a6:	6378      	str	r0, [r7, #52]	@ 0x34
 80015a8:	e004      	b.n	80015b4 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80015aa:	f002 fe45 	bl	8004238 <HAL_RCC_GetPCLK1Freq>
 80015ae:	4603      	mov	r3, r0
 80015b0:	005b      	lsls	r3, r3, #1
 80015b2:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80015b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80015b6:	4a23      	ldr	r2, [pc, #140]	@ (8001644 <HAL_InitTick+0xe8>)
 80015b8:	fba2 2303 	umull	r2, r3, r2, r3
 80015bc:	0c9b      	lsrs	r3, r3, #18
 80015be:	3b01      	subs	r3, #1
 80015c0:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80015c2:	4b21      	ldr	r3, [pc, #132]	@ (8001648 <HAL_InitTick+0xec>)
 80015c4:	4a21      	ldr	r2, [pc, #132]	@ (800164c <HAL_InitTick+0xf0>)
 80015c6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80015c8:	4b1f      	ldr	r3, [pc, #124]	@ (8001648 <HAL_InitTick+0xec>)
 80015ca:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80015ce:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80015d0:	4a1d      	ldr	r2, [pc, #116]	@ (8001648 <HAL_InitTick+0xec>)
 80015d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015d4:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80015d6:	4b1c      	ldr	r3, [pc, #112]	@ (8001648 <HAL_InitTick+0xec>)
 80015d8:	2200      	movs	r2, #0
 80015da:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015dc:	4b1a      	ldr	r3, [pc, #104]	@ (8001648 <HAL_InitTick+0xec>)
 80015de:	2200      	movs	r2, #0
 80015e0:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015e2:	4b19      	ldr	r3, [pc, #100]	@ (8001648 <HAL_InitTick+0xec>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80015e8:	4817      	ldr	r0, [pc, #92]	@ (8001648 <HAL_InitTick+0xec>)
 80015ea:	f002 fe7f 	bl	80042ec <HAL_TIM_Base_Init>
 80015ee:	4603      	mov	r3, r0
 80015f0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80015f4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d11b      	bne.n	8001634 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80015fc:	4812      	ldr	r0, [pc, #72]	@ (8001648 <HAL_InitTick+0xec>)
 80015fe:	f002 fecf 	bl	80043a0 <HAL_TIM_Base_Start_IT>
 8001602:	4603      	mov	r3, r0
 8001604:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001608:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800160c:	2b00      	cmp	r3, #0
 800160e:	d111      	bne.n	8001634 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001610:	2036      	movs	r0, #54	@ 0x36
 8001612:	f000 fd59 	bl	80020c8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2b0f      	cmp	r3, #15
 800161a:	d808      	bhi.n	800162e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800161c:	2200      	movs	r2, #0
 800161e:	6879      	ldr	r1, [r7, #4]
 8001620:	2036      	movs	r0, #54	@ 0x36
 8001622:	f000 fd35 	bl	8002090 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001626:	4a0a      	ldr	r2, [pc, #40]	@ (8001650 <HAL_InitTick+0xf4>)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6013      	str	r3, [r2, #0]
 800162c:	e002      	b.n	8001634 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800162e:	2301      	movs	r3, #1
 8001630:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001634:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001638:	4618      	mov	r0, r3
 800163a:	3738      	adds	r7, #56	@ 0x38
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}
 8001640:	40023800 	.word	0x40023800
 8001644:	431bde83 	.word	0x431bde83
 8001648:	200007c4 	.word	0x200007c4
 800164c:	40001000 	.word	0x40001000
 8001650:	20000004 	.word	0x20000004

08001654 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001658:	bf00      	nop
 800165a:	e7fd      	b.n	8001658 <NMI_Handler+0x4>

0800165c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001660:	bf00      	nop
 8001662:	e7fd      	b.n	8001660 <HardFault_Handler+0x4>

08001664 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001668:	bf00      	nop
 800166a:	e7fd      	b.n	8001668 <MemManage_Handler+0x4>

0800166c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001670:	bf00      	nop
 8001672:	e7fd      	b.n	8001670 <BusFault_Handler+0x4>

08001674 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001678:	bf00      	nop
 800167a:	e7fd      	b.n	8001678 <UsageFault_Handler+0x4>

0800167c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001680:	bf00      	nop
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr
	...

0800168c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001690:	4802      	ldr	r0, [pc, #8]	@ (800169c <TIM6_DAC_IRQHandler+0x10>)
 8001692:	f002 fef5 	bl	8004480 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001696:	bf00      	nop
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	200007c4 	.word	0x200007c4

080016a0 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 80016a4:	4802      	ldr	r0, [pc, #8]	@ (80016b0 <ETH_IRQHandler+0x10>)
 80016a6:	f001 f8a3 	bl	80027f0 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 80016aa:	bf00      	nop
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	20005548 	.word	0x20005548

080016b4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0
  return 1;
 80016b8:	2301      	movs	r3, #1
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr

080016c4 <_kill>:

int _kill(int pid, int sig)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b083      	sub	sp, #12
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
 80016cc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80016ce:	4b05      	ldr	r3, [pc, #20]	@ (80016e4 <_kill+0x20>)
 80016d0:	2216      	movs	r2, #22
 80016d2:	601a      	str	r2, [r3, #0]
  return -1;
 80016d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016d8:	4618      	mov	r0, r3
 80016da:	370c      	adds	r7, #12
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr
 80016e4:	2000efdc 	.word	0x2000efdc

080016e8 <_exit>:

void _exit (int status)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b082      	sub	sp, #8
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80016f0:	f04f 31ff 	mov.w	r1, #4294967295
 80016f4:	6878      	ldr	r0, [r7, #4]
 80016f6:	f7ff ffe5 	bl	80016c4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80016fa:	bf00      	nop
 80016fc:	e7fd      	b.n	80016fa <_exit+0x12>

080016fe <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016fe:	b580      	push	{r7, lr}
 8001700:	b086      	sub	sp, #24
 8001702:	af00      	add	r7, sp, #0
 8001704:	60f8      	str	r0, [r7, #12]
 8001706:	60b9      	str	r1, [r7, #8]
 8001708:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800170a:	2300      	movs	r3, #0
 800170c:	617b      	str	r3, [r7, #20]
 800170e:	e00a      	b.n	8001726 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001710:	f3af 8000 	nop.w
 8001714:	4601      	mov	r1, r0
 8001716:	68bb      	ldr	r3, [r7, #8]
 8001718:	1c5a      	adds	r2, r3, #1
 800171a:	60ba      	str	r2, [r7, #8]
 800171c:	b2ca      	uxtb	r2, r1
 800171e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	3301      	adds	r3, #1
 8001724:	617b      	str	r3, [r7, #20]
 8001726:	697a      	ldr	r2, [r7, #20]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	429a      	cmp	r2, r3
 800172c:	dbf0      	blt.n	8001710 <_read+0x12>
  }

  return len;
 800172e:	687b      	ldr	r3, [r7, #4]
}
 8001730:	4618      	mov	r0, r3
 8001732:	3718      	adds	r7, #24
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}

08001738 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b086      	sub	sp, #24
 800173c:	af00      	add	r7, sp, #0
 800173e:	60f8      	str	r0, [r7, #12]
 8001740:	60b9      	str	r1, [r7, #8]
 8001742:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001744:	2300      	movs	r3, #0
 8001746:	617b      	str	r3, [r7, #20]
 8001748:	e009      	b.n	800175e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800174a:	68bb      	ldr	r3, [r7, #8]
 800174c:	1c5a      	adds	r2, r3, #1
 800174e:	60ba      	str	r2, [r7, #8]
 8001750:	781b      	ldrb	r3, [r3, #0]
 8001752:	4618      	mov	r0, r3
 8001754:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	3301      	adds	r3, #1
 800175c:	617b      	str	r3, [r7, #20]
 800175e:	697a      	ldr	r2, [r7, #20]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	429a      	cmp	r2, r3
 8001764:	dbf1      	blt.n	800174a <_write+0x12>
  }
  return len;
 8001766:	687b      	ldr	r3, [r7, #4]
}
 8001768:	4618      	mov	r0, r3
 800176a:	3718      	adds	r7, #24
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}

08001770 <_close>:

int _close(int file)
{
 8001770:	b480      	push	{r7}
 8001772:	b083      	sub	sp, #12
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001778:	f04f 33ff 	mov.w	r3, #4294967295
}
 800177c:	4618      	mov	r0, r3
 800177e:	370c      	adds	r7, #12
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr

08001788 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001788:	b480      	push	{r7}
 800178a:	b083      	sub	sp, #12
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
 8001790:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001798:	605a      	str	r2, [r3, #4]
  return 0;
 800179a:	2300      	movs	r3, #0
}
 800179c:	4618      	mov	r0, r3
 800179e:	370c      	adds	r7, #12
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr

080017a8 <_isatty>:

int _isatty(int file)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b083      	sub	sp, #12
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80017b0:	2301      	movs	r3, #1
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	370c      	adds	r7, #12
 80017b6:	46bd      	mov	sp, r7
 80017b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017bc:	4770      	bx	lr

080017be <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80017be:	b480      	push	{r7}
 80017c0:	b085      	sub	sp, #20
 80017c2:	af00      	add	r7, sp, #0
 80017c4:	60f8      	str	r0, [r7, #12]
 80017c6:	60b9      	str	r1, [r7, #8]
 80017c8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80017ca:	2300      	movs	r3, #0
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	3714      	adds	r7, #20
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr

080017d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017d8:	b480      	push	{r7}
 80017da:	b087      	sub	sp, #28
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017e0:	4a14      	ldr	r2, [pc, #80]	@ (8001834 <_sbrk+0x5c>)
 80017e2:	4b15      	ldr	r3, [pc, #84]	@ (8001838 <_sbrk+0x60>)
 80017e4:	1ad3      	subs	r3, r2, r3
 80017e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017ec:	4b13      	ldr	r3, [pc, #76]	@ (800183c <_sbrk+0x64>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d102      	bne.n	80017fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017f4:	4b11      	ldr	r3, [pc, #68]	@ (800183c <_sbrk+0x64>)
 80017f6:	4a12      	ldr	r2, [pc, #72]	@ (8001840 <_sbrk+0x68>)
 80017f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017fa:	4b10      	ldr	r3, [pc, #64]	@ (800183c <_sbrk+0x64>)
 80017fc:	681a      	ldr	r2, [r3, #0]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	4413      	add	r3, r2
 8001802:	693a      	ldr	r2, [r7, #16]
 8001804:	429a      	cmp	r2, r3
 8001806:	d205      	bcs.n	8001814 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001808:	4b0e      	ldr	r3, [pc, #56]	@ (8001844 <_sbrk+0x6c>)
 800180a:	220c      	movs	r2, #12
 800180c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800180e:	f04f 33ff 	mov.w	r3, #4294967295
 8001812:	e009      	b.n	8001828 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001814:	4b09      	ldr	r3, [pc, #36]	@ (800183c <_sbrk+0x64>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800181a:	4b08      	ldr	r3, [pc, #32]	@ (800183c <_sbrk+0x64>)
 800181c:	681a      	ldr	r2, [r3, #0]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	4413      	add	r3, r2
 8001822:	4a06      	ldr	r2, [pc, #24]	@ (800183c <_sbrk+0x64>)
 8001824:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001826:	68fb      	ldr	r3, [r7, #12]
}
 8001828:	4618      	mov	r0, r3
 800182a:	371c      	adds	r7, #28
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr
 8001834:	20030000 	.word	0x20030000
 8001838:	00000400 	.word	0x00000400
 800183c:	2000080c 	.word	0x2000080c
 8001840:	2000eff0 	.word	0x2000eff0
 8001844:	2000efdc 	.word	0x2000efdc

08001848 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800184c:	4b06      	ldr	r3, [pc, #24]	@ (8001868 <SystemInit+0x20>)
 800184e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001852:	4a05      	ldr	r2, [pc, #20]	@ (8001868 <SystemInit+0x20>)
 8001854:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001858:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800185c:	bf00      	nop
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr
 8001866:	bf00      	nop
 8001868:	e000ed00 	.word	0xe000ed00

0800186c <tcp_thread>:
static void process_client_connection(struct netconn *client_conn);
static err_t initialize_server();


// Función principal del hilo TCP
static void tcp_thread(void *arg) {
 800186c:	b580      	push	{r7, lr}
 800186e:	b084      	sub	sp, #16
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
    err_t server_err, accept_err;

    SendString("Estoy en thread principal***********************************\r");
 8001874:	4822      	ldr	r0, [pc, #136]	@ (8001900 <tcp_thread+0x94>)
 8001876:	f7ff f9df 	bl	8000c38 <SendString>

    while (1) {
        // Inicializar el servidor
        server_err = initialize_server();
 800187a:	f000 f8d7 	bl	8001a2c <initialize_server>
 800187e:	4603      	mov	r3, r0
 8001880:	73fb      	strb	r3, [r7, #15]
        if (server_err != ERR_OK) {
 8001882:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d007      	beq.n	800189a <tcp_thread+0x2e>
            //printf("Error: Reintentando iniciar el servidor en %d ms...\n", RETRY_DELAY_MS);
        	SendString("Error: Reintentando iniciar el servidor");
 800188a:	481e      	ldr	r0, [pc, #120]	@ (8001904 <tcp_thread+0x98>)
 800188c:	f7ff f9d4 	bl	8000c38 <SendString>
            sys_msleep(RETRY_DELAY_MS); // Esperar antes de reintentar (un sleep de la propia librería lwip)
 8001890:	f241 3088 	movw	r0, #5000	@ 0x1388
 8001894:	f00b fbb2 	bl	800cffc <sys_msleep>
            continue;
 8001898:	e030      	b.n	80018fc <tcp_thread+0x90>
        }

        // Aceptar conexiones entrantes
        while (1) {
            accept_err = netconn_accept(conn, &newconn);
 800189a:	4b1b      	ldr	r3, [pc, #108]	@ (8001908 <tcp_thread+0x9c>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	491b      	ldr	r1, [pc, #108]	@ (800190c <tcp_thread+0xa0>)
 80018a0:	4618      	mov	r0, r3
 80018a2:	f007 fb65 	bl	8008f70 <netconn_accept>
 80018a6:	4603      	mov	r3, r0
 80018a8:	73bb      	strb	r3, [r7, #14]
            if (accept_err == ERR_OK) {
 80018aa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d108      	bne.n	80018c4 <tcp_thread+0x58>
                //printf("Cliente conectado.\n");
            	SendString("Cliente conectado...\r");
 80018b2:	4817      	ldr	r0, [pc, #92]	@ (8001910 <tcp_thread+0xa4>)
 80018b4:	f7ff f9c0 	bl	8000c38 <SendString>
                process_client_connection(newconn); // Procesar conexión del cliente
 80018b8:	4b14      	ldr	r3, [pc, #80]	@ (800190c <tcp_thread+0xa0>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4618      	mov	r0, r3
 80018be:	f000 f863 	bl	8001988 <process_client_connection>
 80018c2:	e7ea      	b.n	800189a <tcp_thread+0x2e>
            } else {
                //printf("Error al aceptar conexión (Error: %d). Reintentando...\n", accept_err);
            	SendString("Error al aceptar conexión Reintentando...\n");
 80018c4:	4813      	ldr	r0, [pc, #76]	@ (8001914 <tcp_thread+0xa8>)
 80018c6:	f7ff f9b7 	bl	8000c38 <SendString>
                break; // Salir al detectar un error en el servidor
 80018ca:	bf00      	nop
            }
        }

        // Liberar recursos del servidor en caso de error
        //printf("Cerrando servidor...\n");
        SendString("Cerrando servidor...\n");
 80018cc:	4812      	ldr	r0, [pc, #72]	@ (8001918 <tcp_thread+0xac>)
 80018ce:	f7ff f9b3 	bl	8000c38 <SendString>
        netconn_close(conn);
 80018d2:	4b0d      	ldr	r3, [pc, #52]	@ (8001908 <tcp_thread+0x9c>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4618      	mov	r0, r3
 80018d8:	f007 feea 	bl	80096b0 <netconn_close>
        netconn_delete(conn);
 80018dc:	4b0a      	ldr	r3, [pc, #40]	@ (8001908 <tcp_thread+0x9c>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4618      	mov	r0, r3
 80018e2:	f007 fac5 	bl	8008e70 <netconn_delete>
        conn = NULL;
 80018e6:	4b08      	ldr	r3, [pc, #32]	@ (8001908 <tcp_thread+0x9c>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	601a      	str	r2, [r3, #0]

        // Reintentar después de un tiempo
        //printf("Reiniciando servidor en %d ms...\n", RETRY_DELAY_MS);
        SendString("Reiniciando servidor en ms...\n");
 80018ec:	480b      	ldr	r0, [pc, #44]	@ (800191c <tcp_thread+0xb0>)
 80018ee:	f7ff f9a3 	bl	8000c38 <SendString>
        sys_msleep(RETRY_DELAY_MS);  //un sleep de la propia librería lwip
 80018f2:	f241 3088 	movw	r0, #5000	@ 0x1388
 80018f6:	f00b fb81 	bl	800cffc <sys_msleep>
 80018fa:	e7be      	b.n	800187a <tcp_thread+0xe>
        server_err = initialize_server();
 80018fc:	e7bd      	b.n	800187a <tcp_thread+0xe>
 80018fe:	bf00      	nop
 8001900:	080178f0 	.word	0x080178f0
 8001904:	08017930 	.word	0x08017930
 8001908:	20000810 	.word	0x20000810
 800190c:	20000814 	.word	0x20000814
 8001910:	08017958 	.word	0x08017958
 8001914:	08017970 	.word	0x08017970
 8001918:	0801799c 	.word	0x0801799c
 800191c:	080179b4 	.word	0x080179b4

08001920 <tcpserver_init>:





void tcpserver_init(void) {
 8001920:	b580      	push	{r7, lr}
 8001922:	b082      	sub	sp, #8
 8001924:	af02      	add	r7, sp, #8
	sys_thread_new("tcp_thread", tcp_thread, NULL, DEFAULT_THREAD_STACKSIZE,
 8001926:	2300      	movs	r3, #0
 8001928:	9300      	str	r3, [sp, #0]
 800192a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800192e:	2200      	movs	r2, #0
 8001930:	4903      	ldr	r1, [pc, #12]	@ (8001940 <tcpserver_init+0x20>)
 8001932:	4804      	ldr	r0, [pc, #16]	@ (8001944 <tcpserver_init+0x24>)
 8001934:	f014 fcf0 	bl	8016318 <sys_thread_new>
			osPriorityNormal);
}
 8001938:	bf00      	nop
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	0800186d 	.word	0x0800186d
 8001944:	080179d4 	.word	0x080179d4

08001948 <copyString>:

static void copyString(uint8_t* dest, uint8_t* src, unsigned num){
 8001948:	b480      	push	{r7}
 800194a:	b087      	sub	sp, #28
 800194c:	af00      	add	r7, sp, #0
 800194e:	60f8      	str	r0, [r7, #12]
 8001950:	60b9      	str	r1, [r7, #8]
 8001952:	607a      	str	r2, [r7, #4]
	for(unsigned i = 0; i != num; ++i){
 8001954:	2300      	movs	r3, #0
 8001956:	617b      	str	r3, [r7, #20]
 8001958:	e00a      	b.n	8001970 <copyString+0x28>
		dest[i] = src[i];
 800195a:	68ba      	ldr	r2, [r7, #8]
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	441a      	add	r2, r3
 8001960:	68f9      	ldr	r1, [r7, #12]
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	440b      	add	r3, r1
 8001966:	7812      	ldrb	r2, [r2, #0]
 8001968:	701a      	strb	r2, [r3, #0]
	for(unsigned i = 0; i != num; ++i){
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	3301      	adds	r3, #1
 800196e:	617b      	str	r3, [r7, #20]
 8001970:	697a      	ldr	r2, [r7, #20]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	429a      	cmp	r2, r3
 8001976:	d1f0      	bne.n	800195a <copyString+0x12>
	}
}
 8001978:	bf00      	nop
 800197a:	bf00      	nop
 800197c:	371c      	adds	r7, #28
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr
	...

08001988 <process_client_connection>:


/************************************************************************/
// Función para procesar una conexión de cliente
static void process_client_connection(struct netconn *client_conn) {
 8001988:	b580      	push	{r7, lr}
 800198a:	b086      	sub	sp, #24
 800198c:	af02      	add	r7, sp, #8
 800198e:	6078      	str	r0, [r7, #4]
    err_t recv_err;

    // Configurar timeout para evitar bloqueos indefinidos
    //netconn_set_recvtimeout(client_conn, 5000); // Timeout de 5 segundos

    while ((recv_err = netconn_recv(client_conn, &netbuf)) == ERR_OK) {
 8001990:	e02d      	b.n	80019ee <process_client_connection+0x66>
        do {
            copyString(mb_req_buf, netbuf->p->payload, netbuf->p->len); // Obtener mensaje del cliente
 8001992:	4b22      	ldr	r3, [pc, #136]	@ (8001a1c <process_client_connection+0x94>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	6859      	ldr	r1, [r3, #4]
 800199a:	4b20      	ldr	r3, [pc, #128]	@ (8001a1c <process_client_connection+0x94>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	895b      	ldrh	r3, [r3, #10]
 80019a2:	461a      	mov	r2, r3
 80019a4:	481e      	ldr	r0, [pc, #120]	@ (8001a20 <process_client_connection+0x98>)
 80019a6:	f7ff ffcf 	bl	8001948 <copyString>
            uint16_t buf_len = netbuf->p->len;
 80019aa:	4b1c      	ldr	r3, [pc, #112]	@ (8001a1c <process_client_connection+0x94>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	895b      	ldrh	r3, [r3, #10]
 80019b2:	81bb      	strh	r3, [r7, #12]
            buf_len = mb_process(mb_repl_buf, mb_req_buf, buf_len);    // Procesar datos
 80019b4:	89bb      	ldrh	r3, [r7, #12]
 80019b6:	461a      	mov	r2, r3
 80019b8:	4919      	ldr	r1, [pc, #100]	@ (8001a20 <process_client_connection+0x98>)
 80019ba:	481a      	ldr	r0, [pc, #104]	@ (8001a24 <process_client_connection+0x9c>)
 80019bc:	f7ff f9b6 	bl	8000d2c <mb_process>
 80019c0:	4603      	mov	r3, r0
 80019c2:	81bb      	strh	r3, [r7, #12]
            netconn_write(client_conn, mb_repl_buf, buf_len, NETCONN_COPY); // Responder al cliente
 80019c4:	89ba      	ldrh	r2, [r7, #12]
 80019c6:	2300      	movs	r3, #0
 80019c8:	9300      	str	r3, [sp, #0]
 80019ca:	2301      	movs	r3, #1
 80019cc:	4915      	ldr	r1, [pc, #84]	@ (8001a24 <process_client_connection+0x9c>)
 80019ce:	6878      	ldr	r0, [r7, #4]
 80019d0:	f007 fd6c 	bl	80094ac <netconn_write_partly>
        } while (netbuf_next(netbuf) > 0);
 80019d4:	4b11      	ldr	r3, [pc, #68]	@ (8001a1c <process_client_connection+0x94>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4618      	mov	r0, r3
 80019da:	f009 fa9b 	bl	800af14 <netbuf_next>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	dcd6      	bgt.n	8001992 <process_client_connection+0xa>

        netbuf_delete(netbuf); // Liberar el buffer después de procesarlo
 80019e4:	4b0d      	ldr	r3, [pc, #52]	@ (8001a1c <process_client_connection+0x94>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4618      	mov	r0, r3
 80019ea:	f009 fa73 	bl	800aed4 <netbuf_delete>
    while ((recv_err = netconn_recv(client_conn, &netbuf)) == ERR_OK) {
 80019ee:	490b      	ldr	r1, [pc, #44]	@ (8001a1c <process_client_connection+0x94>)
 80019f0:	6878      	ldr	r0, [r7, #4]
 80019f2:	f007 fce1 	bl	80093b8 <netconn_recv>
 80019f6:	4603      	mov	r3, r0
 80019f8:	73fb      	strb	r3, [r7, #15]
 80019fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d0c7      	beq.n	8001992 <process_client_connection+0xa>
    }

    // Cerrar y liberar la conexión del cliente
    netconn_close(client_conn);
 8001a02:	6878      	ldr	r0, [r7, #4]
 8001a04:	f007 fe54 	bl	80096b0 <netconn_close>
    netconn_delete(client_conn);
 8001a08:	6878      	ldr	r0, [r7, #4]
 8001a0a:	f007 fa31 	bl	8008e70 <netconn_delete>
    SendString("Desconecto...\r");
 8001a0e:	4806      	ldr	r0, [pc, #24]	@ (8001a28 <process_client_connection+0xa0>)
 8001a10:	f7ff f912 	bl	8000c38 <SendString>
}
 8001a14:	bf00      	nop
 8001a16:	3710      	adds	r7, #16
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	20000818 	.word	0x20000818
 8001a20:	2000081c 	.word	0x2000081c
 8001a24:	20000920 	.word	0x20000920
 8001a28:	080179e0 	.word	0x080179e0

08001a2c <initialize_server>:

// Función para inicializar la conexión TCP
static err_t initialize_server() {
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b082      	sub	sp, #8
 8001a30:	af00      	add	r7, sp, #0
    conn = netconn_new(NETCONN_TCP);
 8001a32:	2200      	movs	r2, #0
 8001a34:	2100      	movs	r1, #0
 8001a36:	2010      	movs	r0, #16
 8001a38:	f007 f97c 	bl	8008d34 <netconn_new_with_proto_and_callback>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	4a24      	ldr	r2, [pc, #144]	@ (8001ad0 <initialize_server+0xa4>)
 8001a40:	6013      	str	r3, [r2, #0]
    if (conn == NULL) {
 8001a42:	4b23      	ldr	r3, [pc, #140]	@ (8001ad0 <initialize_server+0xa4>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d105      	bne.n	8001a56 <initialize_server+0x2a>
        //printf("Error: No se pudo crear la conexión.\n");
    	SendString("Error: No se pudo crear la conexión.\n");
 8001a4a:	4822      	ldr	r0, [pc, #136]	@ (8001ad4 <initialize_server+0xa8>)
 8001a4c:	f7ff f8f4 	bl	8000c38 <SendString>
        return ERR_MEM;
 8001a50:	f04f 33ff 	mov.w	r3, #4294967295
 8001a54:	e038      	b.n	8001ac8 <initialize_server+0x9c>
    }


    err_t err = netconn_bind(conn, IP_ADDR_ANY, MB_TCP_PORT);
 8001a56:	4b1e      	ldr	r3, [pc, #120]	@ (8001ad0 <initialize_server+0xa4>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f44f 72fb 	mov.w	r2, #502	@ 0x1f6
 8001a5e:	491e      	ldr	r1, [pc, #120]	@ (8001ad8 <initialize_server+0xac>)
 8001a60:	4618      	mov	r0, r3
 8001a62:	f007 fa21 	bl	8008ea8 <netconn_bind>
 8001a66:	4603      	mov	r3, r0
 8001a68:	71fb      	strb	r3, [r7, #7]
    if (err != ERR_OK) {
 8001a6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d00d      	beq.n	8001a8e <initialize_server+0x62>
        //printf("Error: No se pudo enlazar al puerto %d (Error: %d).\n", MB_TCP_PORT, err);
    	SendString("Error: No se pudo enlazar al puerto\n");
 8001a72:	481a      	ldr	r0, [pc, #104]	@ (8001adc <initialize_server+0xb0>)
 8001a74:	f7ff f8e0 	bl	8000c38 <SendString>
        netconn_delete(conn);
 8001a78:	4b15      	ldr	r3, [pc, #84]	@ (8001ad0 <initialize_server+0xa4>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f007 f9f7 	bl	8008e70 <netconn_delete>
        conn = NULL;
 8001a82:	4b13      	ldr	r3, [pc, #76]	@ (8001ad0 <initialize_server+0xa4>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	601a      	str	r2, [r3, #0]
        return err;
 8001a88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a8c:	e01c      	b.n	8001ac8 <initialize_server+0x9c>
    }

    osDelay(1000);
 8001a8e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001a92:	f004 f985 	bl	8005da0 <osDelay>
    SendString("Activando Keep-Alive...\r");
 8001a96:	4812      	ldr	r0, [pc, #72]	@ (8001ae0 <initialize_server+0xb4>)
 8001a98:	f7ff f8ce 	bl	8000c38 <SendString>


    //netconn_set_keepalive(newconn, 1);
    enable_keepalive(conn);
 8001a9c:	4b0c      	ldr	r3, [pc, #48]	@ (8001ad0 <initialize_server+0xa4>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f000 f823 	bl	8001aec <enable_keepalive>

    netconn_listen(conn); // Escuchar conexiones entrantes
 8001aa6:	4b0a      	ldr	r3, [pc, #40]	@ (8001ad0 <initialize_server+0xa4>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	21ff      	movs	r1, #255	@ 0xff
 8001aac:	4618      	mov	r0, r3
 8001aae:	f007 fa33 	bl	8008f18 <netconn_listen_with_backlog>
    //printf("Servidor TCP escuchando en el puerto %d.\n", MB_TCP_PORT);
    SendString("Servidor TCP escuchando en el puerto: ");
 8001ab2:	480c      	ldr	r0, [pc, #48]	@ (8001ae4 <initialize_server+0xb8>)
 8001ab4:	f7ff f8c0 	bl	8000c38 <SendString>
    SendNumber(MB_TCP_PORT);
 8001ab8:	f44f 70fb 	mov.w	r0, #502	@ 0x1f6
 8001abc:	f7ff f8e2 	bl	8000c84 <SendNumber>
    SendString("\r");
 8001ac0:	4809      	ldr	r0, [pc, #36]	@ (8001ae8 <initialize_server+0xbc>)
 8001ac2:	f7ff f8b9 	bl	8000c38 <SendString>
    return ERR_OK;
 8001ac6:	2300      	movs	r3, #0
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	3708      	adds	r7, #8
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	20000810 	.word	0x20000810
 8001ad4:	080179f0 	.word	0x080179f0
 8001ad8:	0801b134 	.word	0x0801b134
 8001adc:	08017a18 	.word	0x08017a18
 8001ae0:	08017a40 	.word	0x08017a40
 8001ae4:	08017a5c 	.word	0x08017a5c
 8001ae8:	08017a84 	.word	0x08017a84

08001aec <enable_keepalive>:

void enable_keepalive(struct netconn *conn) {
 8001aec:	b480      	push	{r7}
 8001aee:	b085      	sub	sp, #20
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
    if (conn != NULL && conn->pcb.tcp != NULL) {
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d01b      	beq.n	8001b32 <enable_keepalive+0x46>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d017      	beq.n	8001b32 <enable_keepalive+0x46>
        struct tcp_pcb *pcb = conn->pcb.tcp;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	60fb      	str	r3, [r7, #12]

        // Activar opción KEEPALIVE
        pcb->so_options |= SOF_KEEPALIVE;
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	7a5b      	ldrb	r3, [r3, #9]
 8001b0c:	f043 0308 	orr.w	r3, r3, #8
 8001b10:	b2da      	uxtb	r2, r3
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	725a      	strb	r2, [r3, #9]

        // Configurar parámetros de Keep-Alive
        pcb->keep_idle = TCP_KEEPIDLE_DEFAULT;     // Tiempo en ms antes del primer paquete
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	f242 7210 	movw	r2, #10000	@ 0x2710
 8001b1c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;   // Intervalo entre intentos en ms
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001b26:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        pcb->keep_cnt = TCP_KEEPCNT_DEFAULT;       // Número máximo de intentos
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	2203      	movs	r2, #3
 8001b2e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }
}
 8001b32:	bf00      	nop
 8001b34:	3714      	adds	r7, #20
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr
	...

08001b40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001b40:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001b78 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001b44:	f7ff fe80 	bl	8001848 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b48:	480c      	ldr	r0, [pc, #48]	@ (8001b7c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b4a:	490d      	ldr	r1, [pc, #52]	@ (8001b80 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b4c:	4a0d      	ldr	r2, [pc, #52]	@ (8001b84 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b50:	e002      	b.n	8001b58 <LoopCopyDataInit>

08001b52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b56:	3304      	adds	r3, #4

08001b58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b5c:	d3f9      	bcc.n	8001b52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b5e:	4a0a      	ldr	r2, [pc, #40]	@ (8001b88 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b60:	4c0a      	ldr	r4, [pc, #40]	@ (8001b8c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b64:	e001      	b.n	8001b6a <LoopFillZerobss>

08001b66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b68:	3204      	adds	r2, #4

08001b6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b6c:	d3fb      	bcc.n	8001b66 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001b6e:	f014 fe5b 	bl	8016828 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b72:	f7fe fe33 	bl	80007dc <main>
  bx  lr    
 8001b76:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001b78:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001b7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b80:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8001b84:	0801b240 	.word	0x0801b240
  ldr r2, =_sbss
 8001b88:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8001b8c:	2000efec 	.word	0x2000efec

08001b90 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b90:	e7fe      	b.n	8001b90 <ADC_IRQHandler>

08001b92 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8001b92:	b480      	push	{r7}
 8001b94:	b083      	sub	sp, #12
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	6078      	str	r0, [r7, #4]
 8001b9a:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d00b      	beq.n	8001bba <LAN8742_RegisterBusIO+0x28>
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	68db      	ldr	r3, [r3, #12]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d007      	beq.n	8001bba <LAN8742_RegisterBusIO+0x28>
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d003      	beq.n	8001bba <LAN8742_RegisterBusIO+0x28>
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	691b      	ldr	r3, [r3, #16]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d102      	bne.n	8001bc0 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8001bba:	f04f 33ff 	mov.w	r3, #4294967295
 8001bbe:	e014      	b.n	8001bea <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	685a      	ldr	r2, [r3, #4]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	68da      	ldr	r2, [r3, #12]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	689a      	ldr	r2, [r3, #8]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	691a      	ldr	r2, [r3, #16]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 8001be8:	2300      	movs	r3, #0
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	370c      	adds	r7, #12
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr

08001bf6 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8001bf6:	b580      	push	{r7, lr}
 8001bf8:	b086      	sub	sp, #24
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	60fb      	str	r3, [r7, #12]
 8001c02:	2300      	movs	r3, #0
 8001c04:	60bb      	str	r3, [r7, #8]
 8001c06:	2300      	movs	r3, #0
 8001c08:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d17c      	bne.n	8001d10 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d002      	beq.n	8001c24 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	689b      	ldr	r3, [r3, #8]
 8001c22:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2220      	movs	r2, #32
 8001c28:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	617b      	str	r3, [r7, #20]
 8001c2e:	e01c      	b.n	8001c6a <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	695b      	ldr	r3, [r3, #20]
 8001c34:	f107 0208 	add.w	r2, r7, #8
 8001c38:	2112      	movs	r1, #18
 8001c3a:	6978      	ldr	r0, [r7, #20]
 8001c3c:	4798      	blx	r3
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	da03      	bge.n	8001c4c <LAN8742_Init+0x56>
       {
         status = LAN8742_STATUS_READ_ERROR;
 8001c44:	f06f 0304 	mvn.w	r3, #4
 8001c48:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 8001c4a:	e00b      	b.n	8001c64 <LAN8742_Init+0x6e>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	f003 031f 	and.w	r3, r3, #31
 8001c52:	697a      	ldr	r2, [r7, #20]
 8001c54:	429a      	cmp	r2, r3
 8001c56:	d105      	bne.n	8001c64 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	697a      	ldr	r2, [r7, #20]
 8001c5c:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	613b      	str	r3, [r7, #16]
         break;
 8001c62:	e005      	b.n	8001c70 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	3301      	adds	r3, #1
 8001c68:	617b      	str	r3, [r7, #20]
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	2b1f      	cmp	r3, #31
 8001c6e:	d9df      	bls.n	8001c30 <LAN8742_Init+0x3a>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	2b1f      	cmp	r3, #31
 8001c76:	d902      	bls.n	8001c7e <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8001c78:	f06f 0302 	mvn.w	r3, #2
 8001c7c:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d145      	bne.n	8001d10 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	691b      	ldr	r3, [r3, #16]
 8001c88:	687a      	ldr	r2, [r7, #4]
 8001c8a:	6810      	ldr	r0, [r2, #0]
 8001c8c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001c90:	2100      	movs	r1, #0
 8001c92:	4798      	blx	r3
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	db37      	blt.n	8001d0a <LAN8742_Init+0x114>
       {
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	695b      	ldr	r3, [r3, #20]
 8001c9e:	687a      	ldr	r2, [r7, #4]
 8001ca0:	6810      	ldr	r0, [r2, #0]
 8001ca2:	f107 0208 	add.w	r2, r7, #8
 8001ca6:	2100      	movs	r1, #0
 8001ca8:	4798      	blx	r3
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	db28      	blt.n	8001d02 <LAN8742_Init+0x10c>
         {
           tickstart = pObj->IO.GetTick();
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	699b      	ldr	r3, [r3, #24]
 8001cb4:	4798      	blx	r3
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	60fb      	str	r3, [r7, #12]

           /* wait until software reset is done or timeout occurred */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8001cba:	e01c      	b.n	8001cf6 <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	699b      	ldr	r3, [r3, #24]
 8001cc0:	4798      	blx	r3
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	461a      	mov	r2, r3
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	1ad3      	subs	r3, r2, r3
 8001cca:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001cce:	d80e      	bhi.n	8001cee <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	695b      	ldr	r3, [r3, #20]
 8001cd4:	687a      	ldr	r2, [r7, #4]
 8001cd6:	6810      	ldr	r0, [r2, #0]
 8001cd8:	f107 0208 	add.w	r2, r7, #8
 8001cdc:	2100      	movs	r1, #0
 8001cde:	4798      	blx	r3
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	da07      	bge.n	8001cf6 <LAN8742_Init+0x100>
               {
                 status = LAN8742_STATUS_READ_ERROR;
 8001ce6:	f06f 0304 	mvn.w	r3, #4
 8001cea:	613b      	str	r3, [r7, #16]
                 break;
 8001cec:	e010      	b.n	8001d10 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8001cee:	f06f 0301 	mvn.w	r3, #1
 8001cf2:	613b      	str	r3, [r7, #16]
               break;
 8001cf4:	e00c      	b.n	8001d10 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8001cf6:	68bb      	ldr	r3, [r7, #8]
 8001cf8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d1dd      	bne.n	8001cbc <LAN8742_Init+0xc6>
 8001d00:	e006      	b.n	8001d10 <LAN8742_Init+0x11a>
             }
           }
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 8001d02:	f06f 0304 	mvn.w	r3, #4
 8001d06:	613b      	str	r3, [r7, #16]
 8001d08:	e002      	b.n	8001d10 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8001d0a:	f06f 0303 	mvn.w	r3, #3
 8001d0e:	613b      	str	r3, [r7, #16]
       }
     }
   }

   if(status == LAN8742_STATUS_OK)
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d112      	bne.n	8001d3c <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	699b      	ldr	r3, [r3, #24]
 8001d1a:	4798      	blx	r3
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	60fb      	str	r3, [r7, #12]

     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8001d20:	bf00      	nop
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	699b      	ldr	r3, [r3, #24]
 8001d26:	4798      	blx	r3
 8001d28:	4603      	mov	r3, r0
 8001d2a:	461a      	mov	r2, r3
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	1ad3      	subs	r3, r2, r3
 8001d30:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001d34:	d9f5      	bls.n	8001d22 <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2201      	movs	r2, #1
 8001d3a:	605a      	str	r2, [r3, #4]
   }

   return status;
 8001d3c:	693b      	ldr	r3, [r7, #16]
 }
 8001d3e:	4618      	mov	r0, r3
 8001d40:	3718      	adds	r7, #24
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}

08001d46 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8001d46:	b580      	push	{r7, lr}
 8001d48:	b084      	sub	sp, #16
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	695b      	ldr	r3, [r3, #20]
 8001d56:	687a      	ldr	r2, [r7, #4]
 8001d58:	6810      	ldr	r0, [r2, #0]
 8001d5a:	f107 020c 	add.w	r2, r7, #12
 8001d5e:	2101      	movs	r1, #1
 8001d60:	4798      	blx	r3
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	da02      	bge.n	8001d6e <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001d68:	f06f 0304 	mvn.w	r3, #4
 8001d6c:	e06e      	b.n	8001e4c <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	695b      	ldr	r3, [r3, #20]
 8001d72:	687a      	ldr	r2, [r7, #4]
 8001d74:	6810      	ldr	r0, [r2, #0]
 8001d76:	f107 020c 	add.w	r2, r7, #12
 8001d7a:	2101      	movs	r1, #1
 8001d7c:	4798      	blx	r3
 8001d7e:	4603      	mov	r3, r0
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	da02      	bge.n	8001d8a <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001d84:	f06f 0304 	mvn.w	r3, #4
 8001d88:	e060      	b.n	8001e4c <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	f003 0304 	and.w	r3, r3, #4
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d101      	bne.n	8001d98 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 8001d94:	2301      	movs	r3, #1
 8001d96:	e059      	b.n	8001e4c <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	695b      	ldr	r3, [r3, #20]
 8001d9c:	687a      	ldr	r2, [r7, #4]
 8001d9e:	6810      	ldr	r0, [r2, #0]
 8001da0:	f107 020c 	add.w	r2, r7, #12
 8001da4:	2100      	movs	r1, #0
 8001da6:	4798      	blx	r3
 8001da8:	4603      	mov	r3, r0
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	da02      	bge.n	8001db4 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001dae:	f06f 0304 	mvn.w	r3, #4
 8001db2:	e04b      	b.n	8001e4c <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d11b      	bne.n	8001df6 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d006      	beq.n	8001dd6 <LAN8742_GetLinkState+0x90>
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d001      	beq.n	8001dd6 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001dd2:	2302      	movs	r3, #2
 8001dd4:	e03a      	b.n	8001e4c <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d001      	beq.n	8001de4 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001de0:	2303      	movs	r3, #3
 8001de2:	e033      	b.n	8001e4c <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d001      	beq.n	8001df2 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001dee:	2304      	movs	r3, #4
 8001df0:	e02c      	b.n	8001e4c <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001df2:	2305      	movs	r3, #5
 8001df4:	e02a      	b.n	8001e4c <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	695b      	ldr	r3, [r3, #20]
 8001dfa:	687a      	ldr	r2, [r7, #4]
 8001dfc:	6810      	ldr	r0, [r2, #0]
 8001dfe:	f107 020c 	add.w	r2, r7, #12
 8001e02:	211f      	movs	r1, #31
 8001e04:	4798      	blx	r3
 8001e06:	4603      	mov	r3, r0
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	da02      	bge.n	8001e12 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8001e0c:	f06f 0304 	mvn.w	r3, #4
 8001e10:	e01c      	b.n	8001e4c <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d101      	bne.n	8001e20 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8001e1c:	2306      	movs	r3, #6
 8001e1e:	e015      	b.n	8001e4c <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	f003 031c 	and.w	r3, r3, #28
 8001e26:	2b18      	cmp	r3, #24
 8001e28:	d101      	bne.n	8001e2e <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001e2a:	2302      	movs	r3, #2
 8001e2c:	e00e      	b.n	8001e4c <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	f003 031c 	and.w	r3, r3, #28
 8001e34:	2b08      	cmp	r3, #8
 8001e36:	d101      	bne.n	8001e3c <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001e38:	2303      	movs	r3, #3
 8001e3a:	e007      	b.n	8001e4c <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	f003 031c 	and.w	r3, r3, #28
 8001e42:	2b14      	cmp	r3, #20
 8001e44:	d101      	bne.n	8001e4a <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001e46:	2304      	movs	r3, #4
 8001e48:	e000      	b.n	8001e4c <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001e4a:	2305      	movs	r3, #5
    }
  }
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	3710      	adds	r7, #16
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}

08001e54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e58:	4b0e      	ldr	r3, [pc, #56]	@ (8001e94 <HAL_Init+0x40>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a0d      	ldr	r2, [pc, #52]	@ (8001e94 <HAL_Init+0x40>)
 8001e5e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001e62:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e64:	4b0b      	ldr	r3, [pc, #44]	@ (8001e94 <HAL_Init+0x40>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a0a      	ldr	r2, [pc, #40]	@ (8001e94 <HAL_Init+0x40>)
 8001e6a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001e6e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e70:	4b08      	ldr	r3, [pc, #32]	@ (8001e94 <HAL_Init+0x40>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a07      	ldr	r2, [pc, #28]	@ (8001e94 <HAL_Init+0x40>)
 8001e76:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e7a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e7c:	2003      	movs	r0, #3
 8001e7e:	f000 f8fc 	bl	800207a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e82:	200f      	movs	r0, #15
 8001e84:	f7ff fb6a 	bl	800155c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e88:	f7ff faf4 	bl	8001474 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e8c:	2300      	movs	r3, #0
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	40023c00 	.word	0x40023c00

08001e98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e9c:	4b06      	ldr	r3, [pc, #24]	@ (8001eb8 <HAL_IncTick+0x20>)
 8001e9e:	781b      	ldrb	r3, [r3, #0]
 8001ea0:	461a      	mov	r2, r3
 8001ea2:	4b06      	ldr	r3, [pc, #24]	@ (8001ebc <HAL_IncTick+0x24>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4413      	add	r3, r2
 8001ea8:	4a04      	ldr	r2, [pc, #16]	@ (8001ebc <HAL_IncTick+0x24>)
 8001eaa:	6013      	str	r3, [r2, #0]
}
 8001eac:	bf00      	nop
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr
 8001eb6:	bf00      	nop
 8001eb8:	20000008 	.word	0x20000008
 8001ebc:	20000a24 	.word	0x20000a24

08001ec0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ec4:	4b03      	ldr	r3, [pc, #12]	@ (8001ed4 <HAL_GetTick+0x14>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr
 8001ed2:	bf00      	nop
 8001ed4:	20000a24 	.word	0x20000a24

08001ed8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b084      	sub	sp, #16
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ee0:	f7ff ffee 	bl	8001ec0 <HAL_GetTick>
 8001ee4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ef0:	d005      	beq.n	8001efe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ef2:	4b0a      	ldr	r3, [pc, #40]	@ (8001f1c <HAL_Delay+0x44>)
 8001ef4:	781b      	ldrb	r3, [r3, #0]
 8001ef6:	461a      	mov	r2, r3
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	4413      	add	r3, r2
 8001efc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001efe:	bf00      	nop
 8001f00:	f7ff ffde 	bl	8001ec0 <HAL_GetTick>
 8001f04:	4602      	mov	r2, r0
 8001f06:	68bb      	ldr	r3, [r7, #8]
 8001f08:	1ad3      	subs	r3, r2, r3
 8001f0a:	68fa      	ldr	r2, [r7, #12]
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	d8f7      	bhi.n	8001f00 <HAL_Delay+0x28>
  {
  }
}
 8001f10:	bf00      	nop
 8001f12:	bf00      	nop
 8001f14:	3710      	adds	r7, #16
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	20000008 	.word	0x20000008

08001f20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b085      	sub	sp, #20
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	f003 0307 	and.w	r3, r3, #7
 8001f2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f30:	4b0c      	ldr	r3, [pc, #48]	@ (8001f64 <__NVIC_SetPriorityGrouping+0x44>)
 8001f32:	68db      	ldr	r3, [r3, #12]
 8001f34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f36:	68ba      	ldr	r2, [r7, #8]
 8001f38:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f48:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001f4c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f52:	4a04      	ldr	r2, [pc, #16]	@ (8001f64 <__NVIC_SetPriorityGrouping+0x44>)
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	60d3      	str	r3, [r2, #12]
}
 8001f58:	bf00      	nop
 8001f5a:	3714      	adds	r7, #20
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr
 8001f64:	e000ed00 	.word	0xe000ed00

08001f68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f6c:	4b04      	ldr	r3, [pc, #16]	@ (8001f80 <__NVIC_GetPriorityGrouping+0x18>)
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	0a1b      	lsrs	r3, r3, #8
 8001f72:	f003 0307 	and.w	r3, r3, #7
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7e:	4770      	bx	lr
 8001f80:	e000ed00 	.word	0xe000ed00

08001f84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b083      	sub	sp, #12
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	db0b      	blt.n	8001fae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f96:	79fb      	ldrb	r3, [r7, #7]
 8001f98:	f003 021f 	and.w	r2, r3, #31
 8001f9c:	4907      	ldr	r1, [pc, #28]	@ (8001fbc <__NVIC_EnableIRQ+0x38>)
 8001f9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fa2:	095b      	lsrs	r3, r3, #5
 8001fa4:	2001      	movs	r0, #1
 8001fa6:	fa00 f202 	lsl.w	r2, r0, r2
 8001faa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001fae:	bf00      	nop
 8001fb0:	370c      	adds	r7, #12
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr
 8001fba:	bf00      	nop
 8001fbc:	e000e100 	.word	0xe000e100

08001fc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b083      	sub	sp, #12
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	6039      	str	r1, [r7, #0]
 8001fca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	db0a      	blt.n	8001fea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	b2da      	uxtb	r2, r3
 8001fd8:	490c      	ldr	r1, [pc, #48]	@ (800200c <__NVIC_SetPriority+0x4c>)
 8001fda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fde:	0112      	lsls	r2, r2, #4
 8001fe0:	b2d2      	uxtb	r2, r2
 8001fe2:	440b      	add	r3, r1
 8001fe4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fe8:	e00a      	b.n	8002000 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	b2da      	uxtb	r2, r3
 8001fee:	4908      	ldr	r1, [pc, #32]	@ (8002010 <__NVIC_SetPriority+0x50>)
 8001ff0:	79fb      	ldrb	r3, [r7, #7]
 8001ff2:	f003 030f 	and.w	r3, r3, #15
 8001ff6:	3b04      	subs	r3, #4
 8001ff8:	0112      	lsls	r2, r2, #4
 8001ffa:	b2d2      	uxtb	r2, r2
 8001ffc:	440b      	add	r3, r1
 8001ffe:	761a      	strb	r2, [r3, #24]
}
 8002000:	bf00      	nop
 8002002:	370c      	adds	r7, #12
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr
 800200c:	e000e100 	.word	0xe000e100
 8002010:	e000ed00 	.word	0xe000ed00

08002014 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002014:	b480      	push	{r7}
 8002016:	b089      	sub	sp, #36	@ 0x24
 8002018:	af00      	add	r7, sp, #0
 800201a:	60f8      	str	r0, [r7, #12]
 800201c:	60b9      	str	r1, [r7, #8]
 800201e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	f003 0307 	and.w	r3, r3, #7
 8002026:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002028:	69fb      	ldr	r3, [r7, #28]
 800202a:	f1c3 0307 	rsb	r3, r3, #7
 800202e:	2b04      	cmp	r3, #4
 8002030:	bf28      	it	cs
 8002032:	2304      	movcs	r3, #4
 8002034:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002036:	69fb      	ldr	r3, [r7, #28]
 8002038:	3304      	adds	r3, #4
 800203a:	2b06      	cmp	r3, #6
 800203c:	d902      	bls.n	8002044 <NVIC_EncodePriority+0x30>
 800203e:	69fb      	ldr	r3, [r7, #28]
 8002040:	3b03      	subs	r3, #3
 8002042:	e000      	b.n	8002046 <NVIC_EncodePriority+0x32>
 8002044:	2300      	movs	r3, #0
 8002046:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002048:	f04f 32ff 	mov.w	r2, #4294967295
 800204c:	69bb      	ldr	r3, [r7, #24]
 800204e:	fa02 f303 	lsl.w	r3, r2, r3
 8002052:	43da      	mvns	r2, r3
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	401a      	ands	r2, r3
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800205c:	f04f 31ff 	mov.w	r1, #4294967295
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	fa01 f303 	lsl.w	r3, r1, r3
 8002066:	43d9      	mvns	r1, r3
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800206c:	4313      	orrs	r3, r2
         );
}
 800206e:	4618      	mov	r0, r3
 8002070:	3724      	adds	r7, #36	@ 0x24
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr

0800207a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800207a:	b580      	push	{r7, lr}
 800207c:	b082      	sub	sp, #8
 800207e:	af00      	add	r7, sp, #0
 8002080:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002082:	6878      	ldr	r0, [r7, #4]
 8002084:	f7ff ff4c 	bl	8001f20 <__NVIC_SetPriorityGrouping>
}
 8002088:	bf00      	nop
 800208a:	3708      	adds	r7, #8
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}

08002090 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002090:	b580      	push	{r7, lr}
 8002092:	b086      	sub	sp, #24
 8002094:	af00      	add	r7, sp, #0
 8002096:	4603      	mov	r3, r0
 8002098:	60b9      	str	r1, [r7, #8]
 800209a:	607a      	str	r2, [r7, #4]
 800209c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800209e:	2300      	movs	r3, #0
 80020a0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020a2:	f7ff ff61 	bl	8001f68 <__NVIC_GetPriorityGrouping>
 80020a6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020a8:	687a      	ldr	r2, [r7, #4]
 80020aa:	68b9      	ldr	r1, [r7, #8]
 80020ac:	6978      	ldr	r0, [r7, #20]
 80020ae:	f7ff ffb1 	bl	8002014 <NVIC_EncodePriority>
 80020b2:	4602      	mov	r2, r0
 80020b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020b8:	4611      	mov	r1, r2
 80020ba:	4618      	mov	r0, r3
 80020bc:	f7ff ff80 	bl	8001fc0 <__NVIC_SetPriority>
}
 80020c0:	bf00      	nop
 80020c2:	3718      	adds	r7, #24
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}

080020c8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b082      	sub	sp, #8
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	4603      	mov	r3, r0
 80020d0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020d6:	4618      	mov	r0, r3
 80020d8:	f7ff ff54 	bl	8001f84 <__NVIC_EnableIRQ>
}
 80020dc:	bf00      	nop
 80020de:	3708      	adds	r7, #8
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}

080020e4 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b084      	sub	sp, #16
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d101      	bne.n	80020f6 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	e06c      	b.n	80021d0 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d106      	bne.n	800210e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2223      	movs	r2, #35	@ 0x23
 8002104:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002108:	6878      	ldr	r0, [r7, #4]
 800210a:	f003 fb97 	bl	800583c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800210e:	2300      	movs	r3, #0
 8002110:	60bb      	str	r3, [r7, #8]
 8002112:	4b31      	ldr	r3, [pc, #196]	@ (80021d8 <HAL_ETH_Init+0xf4>)
 8002114:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002116:	4a30      	ldr	r2, [pc, #192]	@ (80021d8 <HAL_ETH_Init+0xf4>)
 8002118:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800211c:	6453      	str	r3, [r2, #68]	@ 0x44
 800211e:	4b2e      	ldr	r3, [pc, #184]	@ (80021d8 <HAL_ETH_Init+0xf4>)
 8002120:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002122:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002126:	60bb      	str	r3, [r7, #8]
 8002128:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800212a:	4b2c      	ldr	r3, [pc, #176]	@ (80021dc <HAL_ETH_Init+0xf8>)
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	4a2b      	ldr	r2, [pc, #172]	@ (80021dc <HAL_ETH_Init+0xf8>)
 8002130:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002134:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002136:	4b29      	ldr	r3, [pc, #164]	@ (80021dc <HAL_ETH_Init+0xf8>)
 8002138:	685a      	ldr	r2, [r3, #4]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	4927      	ldr	r1, [pc, #156]	@ (80021dc <HAL_ETH_Init+0xf8>)
 8002140:	4313      	orrs	r3, r2
 8002142:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8002144:	4b25      	ldr	r3, [pc, #148]	@ (80021dc <HAL_ETH_Init+0xf8>)
 8002146:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	687a      	ldr	r2, [r7, #4]
 8002154:	6812      	ldr	r2, [r2, #0]
 8002156:	f043 0301 	orr.w	r3, r3, #1
 800215a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800215e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002160:	f7ff feae 	bl	8001ec0 <HAL_GetTick>
 8002164:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002166:	e011      	b.n	800218c <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002168:	f7ff feaa 	bl	8001ec0 <HAL_GetTick>
 800216c:	4602      	mov	r2, r0
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	1ad3      	subs	r3, r2, r3
 8002172:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002176:	d909      	bls.n	800218c <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2204      	movs	r2, #4
 800217c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	22e0      	movs	r2, #224	@ 0xe0
 8002184:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8002188:	2301      	movs	r3, #1
 800218a:	e021      	b.n	80021d0 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f003 0301 	and.w	r3, r3, #1
 800219a:	2b00      	cmp	r3, #0
 800219c:	d1e4      	bne.n	8002168 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800219e:	6878      	ldr	r0, [r7, #4]
 80021a0:	f000 ff56 	bl	8003050 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80021a4:	6878      	ldr	r0, [r7, #4]
 80021a6:	f000 fffd 	bl	80031a4 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80021aa:	6878      	ldr	r0, [r7, #4]
 80021ac:	f001 f853 	bl	8003256 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	461a      	mov	r2, r3
 80021b6:	2100      	movs	r1, #0
 80021b8:	6878      	ldr	r0, [r7, #4]
 80021ba:	f000 ffbb 	bl	8003134 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2200      	movs	r2, #0
 80021c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2210      	movs	r2, #16
 80021ca:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80021ce:	2300      	movs	r3, #0
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	3710      	adds	r7, #16
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}
 80021d8:	40023800 	.word	0x40023800
 80021dc:	40013800 	.word	0x40013800

080021e0 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b084      	sub	sp, #16
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80021ee:	2b10      	cmp	r3, #16
 80021f0:	d17f      	bne.n	80022f2 <HAL_ETH_Start_IT+0x112>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2223      	movs	r2, #35	@ 0x23
 80021f6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2201      	movs	r2, #1
 80021fe:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Disable MMC Interrupts */
    SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 800220e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable Rx MMC Interrupts */
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 8002218:	687a      	ldr	r2, [r7, #4]
 800221a:	6812      	ldr	r2, [r2, #0]
 800221c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002220:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002224:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
            ETH_MMCRIMR_RFCEM);

    /* Disable Tx MMC Interrupts */
    SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 8002238:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
            ETH_MMCTIMR_TGFSCM);

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2204      	movs	r2, #4
 8002240:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8002242:	6878      	ldr	r0, [r7, #4]
 8002244:	f000 f9f8 	bl	8002638 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	681a      	ldr	r2, [r3, #0]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f042 0208 	orr.w	r2, r2, #8
 8002256:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002260:	2001      	movs	r0, #1
 8002262:	f7ff fe39 	bl	8001ed8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	68fa      	ldr	r2, [r7, #12]
 800226c:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	681a      	ldr	r2, [r3, #0]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f042 0204 	orr.w	r2, r2, #4
 800227c:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002286:	2001      	movs	r0, #1
 8002288:	f7ff fe26 	bl	8001ed8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	68fa      	ldr	r2, [r7, #12]
 8002292:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8002294:	6878      	ldr	r0, [r7, #4]
 8002296:	f000 fd7c 	bl	8002d92 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80022a2:	699b      	ldr	r3, [r3, #24]
 80022a4:	687a      	ldr	r2, [r7, #4]
 80022a6:	6812      	ldr	r2, [r2, #0]
 80022a8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80022ac:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80022b0:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80022ba:	699b      	ldr	r3, [r3, #24]
 80022bc:	687a      	ldr	r2, [r7, #4]
 80022be:	6812      	ldr	r2, [r2, #0]
 80022c0:	f043 0302 	orr.w	r3, r3, #2
 80022c4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80022c8:	6193      	str	r3, [r2, #24]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80022d2:	69db      	ldr	r3, [r3, #28]
 80022d4:	687a      	ldr	r2, [r7, #4]
 80022d6:	6812      	ldr	r2, [r2, #0]
 80022d8:	f443 33d0 	orr.w	r3, r3, #106496	@ 0x1a000
 80022dc:	f043 03c1 	orr.w	r3, r3, #193	@ 0xc1
 80022e0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80022e4:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2223      	movs	r2, #35	@ 0x23
 80022ea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    return HAL_OK;
 80022ee:	2300      	movs	r3, #0
 80022f0:	e000      	b.n	80022f4 <HAL_ETH_Start_IT+0x114>
  }
  else
  {
    return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
  }
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	3710      	adds	r7, #16
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}

080022fc <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b086      	sub	sp, #24
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800230a:	2b23      	cmp	r3, #35	@ 0x23
 800230c:	d170      	bne.n	80023f0 <HAL_ETH_Stop_IT+0xf4>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2223      	movs	r2, #35	@ 0x23
 8002312:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800231e:	69db      	ldr	r3, [r3, #28]
 8002320:	687a      	ldr	r2, [r7, #4]
 8002322:	6812      	ldr	r2, [r2, #0]
 8002324:	f423 33d0 	bic.w	r3, r3, #106496	@ 0x1a000
 8002328:	f023 03c1 	bic.w	r3, r3, #193	@ 0xc1
 800232c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002330:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800233a:	699b      	ldr	r3, [r3, #24]
 800233c:	687a      	ldr	r2, [r7, #4]
 800233e:	6812      	ldr	r2, [r2, #0]
 8002340:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002344:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002348:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002352:	699b      	ldr	r3, [r3, #24]
 8002354:	687a      	ldr	r2, [r7, #4]
 8002356:	6812      	ldr	r2, [r2, #0]
 8002358:	f023 0302 	bic.w	r3, r3, #2
 800235c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002360:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	681a      	ldr	r2, [r3, #0]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f022 0204 	bic.w	r2, r2, #4
 8002370:	601a      	str	r2, [r3, #0]


    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800237a:	2001      	movs	r0, #1
 800237c:	f7ff fdac 	bl	8001ed8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	693a      	ldr	r2, [r7, #16]
 8002386:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8002388:	6878      	ldr	r0, [r7, #4]
 800238a:	f000 fd02 	bl	8002d92 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	681a      	ldr	r2, [r3, #0]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f022 0208 	bic.w	r2, r2, #8
 800239c:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80023a6:	2001      	movs	r0, #1
 80023a8:	f7ff fd96 	bl	8001ed8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	693a      	ldr	r2, [r7, #16]
 80023b2:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 80023b4:	2300      	movs	r3, #0
 80023b6:	617b      	str	r3, [r7, #20]
 80023b8:	e00e      	b.n	80023d8 <HAL_ETH_Stop_IT+0xdc>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	697a      	ldr	r2, [r7, #20]
 80023be:	3212      	adds	r2, #18
 80023c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023c4:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	3301      	adds	r3, #1
 80023d6:	617b      	str	r3, [r7, #20]
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	2b03      	cmp	r3, #3
 80023dc:	d9ed      	bls.n	80023ba <HAL_ETH_Stop_IT+0xbe>
    }

    heth->RxDescList.ItMode = 0U;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2200      	movs	r2, #0
 80023e2:	659a      	str	r2, [r3, #88]	@ 0x58

    heth->gState = HAL_ETH_STATE_READY;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2210      	movs	r2, #16
 80023e8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 80023ec:	2300      	movs	r3, #0
 80023ee:	e000      	b.n	80023f2 <HAL_ETH_Stop_IT+0xf6>
  }
  else
  {
    return HAL_ERROR;
 80023f0:	2301      	movs	r3, #1
  }
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	3718      	adds	r7, #24
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}

080023fa <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig)
{
 80023fa:	b580      	push	{r7, lr}
 80023fc:	b082      	sub	sp, #8
 80023fe:	af00      	add	r7, sp, #0
 8002400:	6078      	str	r0, [r7, #4]
 8002402:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d109      	bne.n	800241e <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002410:	f043 0201 	orr.w	r2, r3, #1
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e045      	b.n	80024aa <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002424:	2b23      	cmp	r3, #35	@ 0x23
 8002426:	d13f      	bne.n	80024a8 <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8002430:	2201      	movs	r2, #1
 8002432:	6839      	ldr	r1, [r7, #0]
 8002434:	6878      	ldr	r0, [r7, #4]
 8002436:	f000 ff7b 	bl	8003330 <ETH_Prepare_Tx_Descriptors>
 800243a:	4603      	mov	r3, r0
 800243c:	2b00      	cmp	r3, #0
 800243e:	d009      	beq.n	8002454 <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002446:	f043 0202 	orr.w	r2, r3, #2
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	e02a      	b.n	80024aa <HAL_ETH_Transmit_IT+0xb0>
  __ASM volatile ("dsb 0xF":::"memory");
 8002454:	f3bf 8f4f 	dsb	sy
}
 8002458:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800245e:	1c5a      	adds	r2, r3, #1
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	629a      	str	r2, [r3, #40]	@ 0x28
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002468:	2b03      	cmp	r3, #3
 800246a:	d904      	bls.n	8002476 <HAL_ETH_Transmit_IT+0x7c>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002470:	1f1a      	subs	r2, r3, #4
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800247e:	695b      	ldr	r3, [r3, #20]
 8002480:	f003 0304 	and.w	r3, r3, #4
 8002484:	2b00      	cmp	r3, #0
 8002486:	d00d      	beq.n	80024a4 <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002490:	461a      	mov	r2, r3
 8002492:	2304      	movs	r3, #4
 8002494:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800249e:	461a      	mov	r2, r3
 80024a0:	2300      	movs	r3, #0
 80024a2:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 80024a4:	2300      	movs	r3, #0
 80024a6:	e000      	b.n	80024aa <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 80024a8:	2301      	movs	r3, #1
  }
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	3708      	adds	r7, #8
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}

080024b2 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 80024b2:	b580      	push	{r7, lr}
 80024b4:	b088      	sub	sp, #32
 80024b6:	af00      	add	r7, sp, #0
 80024b8:	6078      	str	r0, [r7, #4]
 80024ba:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 80024bc:	2300      	movs	r3, #0
 80024be:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 80024c0:	2300      	movs	r3, #0
 80024c2:	73fb      	strb	r3, [r7, #15]

  if (pAppBuff == NULL)
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d109      	bne.n	80024de <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024d0:	f043 0201 	orr.w	r2, r3, #1
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	e0a8      	b.n	8002630 <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80024e4:	2b23      	cmp	r3, #35	@ 0x23
 80024e6:	d001      	beq.n	80024ec <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 80024e8:	2301      	movs	r3, #1
 80024ea:	e0a1      	b.n	8002630 <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024f0:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	69fa      	ldr	r2, [r7, #28]
 80024f6:	3212      	adds	r2, #18
 80024f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024fc:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002502:	f1c3 0304 	rsb	r3, r3, #4
 8002506:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8002508:	e06a      	b.n	80025e0 <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 800250a:	69bb      	ldr	r3, [r7, #24]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002512:	2b00      	cmp	r3, #0
 8002514:	d007      	beq.n	8002526 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 8002516:	69bb      	ldr	r3, [r7, #24]
 8002518:	69da      	ldr	r2, [r3, #28]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 800251e:	69bb      	ldr	r3, [r7, #24]
 8002520:	699a      	ldr	r2, [r3, #24]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8002526:	69bb      	ldr	r3, [r7, #24]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800252e:	2b00      	cmp	r3, #0
 8002530:	d103      	bne.n	800253a <HAL_ETH_ReadData+0x88>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002536:	2b00      	cmp	r3, #0
 8002538:	d040      	beq.n	80025bc <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 800253a:	69bb      	ldr	r3, [r7, #24]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002542:	2b00      	cmp	r3, #0
 8002544:	d005      	beq.n	8002552 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2200      	movs	r2, #0
 800254a:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2200      	movs	r2, #0
 8002550:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	695b      	ldr	r3, [r3, #20]
 8002556:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8002558:	69bb      	ldr	r3, [r7, #24]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002560:	2b00      	cmp	r3, #0
 8002562:	d00c      	beq.n	800257e <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8002564:	69bb      	ldr	r3, [r7, #24]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	0c1b      	lsrs	r3, r3, #16
 800256a:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800256e:	3b04      	subs	r3, #4
 8002570:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8002572:	69bb      	ldr	r3, [r7, #24]
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 800257a:	2301      	movs	r3, #1
 800257c:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 800257e:	69bb      	ldr	r3, [r7, #24]
 8002580:	689a      	ldr	r2, [r3, #8]
 8002582:	69bb      	ldr	r3, [r7, #24]
 8002584:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8002592:	69bb      	ldr	r3, [r7, #24]
 8002594:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8002596:	461a      	mov	r2, r3
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	b29b      	uxth	r3, r3
 800259c:	f003 fb28 	bl	8005bf0 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025a4:	1c5a      	adds	r2, r3, #1
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	441a      	add	r2, r3
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 80025b6:	69bb      	ldr	r3, [r7, #24]
 80025b8:	2200      	movs	r2, #0
 80025ba:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 80025bc:	69fb      	ldr	r3, [r7, #28]
 80025be:	3301      	adds	r3, #1
 80025c0:	61fb      	str	r3, [r7, #28]
 80025c2:	69fb      	ldr	r3, [r7, #28]
 80025c4:	2b03      	cmp	r3, #3
 80025c6:	d902      	bls.n	80025ce <HAL_ETH_ReadData+0x11c>
 80025c8:	69fb      	ldr	r3, [r7, #28]
 80025ca:	3b04      	subs	r3, #4
 80025cc:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	69fa      	ldr	r2, [r7, #28]
 80025d2:	3212      	adds	r2, #18
 80025d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025d8:	61bb      	str	r3, [r7, #24]
    desccnt++;
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	3301      	adds	r3, #1
 80025de:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80025e0:	69bb      	ldr	r3, [r7, #24]
 80025e2:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	db06      	blt.n	80025f6 <HAL_ETH_ReadData+0x144>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80025e8:	697a      	ldr	r2, [r7, #20]
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	429a      	cmp	r2, r3
 80025ee:	d202      	bcs.n	80025f6 <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 80025f0:	7bfb      	ldrb	r3, [r7, #15]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d089      	beq.n	800250a <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	441a      	add	r2, r3
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002606:	2b00      	cmp	r3, #0
 8002608:	d002      	beq.n	8002610 <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 800260a:	6878      	ldr	r0, [r7, #4]
 800260c:	f000 f814 	bl	8002638 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	69fa      	ldr	r2, [r7, #28]
 8002614:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 8002616:	7bfb      	ldrb	r3, [r7, #15]
 8002618:	2b01      	cmp	r3, #1
 800261a:	d108      	bne.n	800262e <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2200      	movs	r2, #0
 8002628:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800262a:	2300      	movs	r3, #0
 800262c:	e000      	b.n	8002630 <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 800262e:	2301      	movs	r3, #1
}
 8002630:	4618      	mov	r0, r3
 8002632:	3720      	adds	r7, #32
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}

08002638 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b088      	sub	sp, #32
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  uint32_t tailidx;
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8002640:	2300      	movs	r3, #0
 8002642:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 8002644:	2301      	movs	r3, #1
 8002646:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800264c:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	69fa      	ldr	r2, [r7, #28]
 8002652:	3212      	adds	r2, #18
 8002654:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002658:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800265e:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8002660:	e03d      	b.n	80026de <ETH_UpdateDescriptor+0xa6>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	6a1b      	ldr	r3, [r3, #32]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d112      	bne.n	8002690 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 800266a:	f107 0308 	add.w	r3, r7, #8
 800266e:	4618      	mov	r0, r3
 8002670:	f003 fa8e 	bl	8005b90 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d102      	bne.n	8002680 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 800267a:	2300      	movs	r3, #0
 800267c:	74fb      	strb	r3, [r7, #19]
 800267e:	e007      	b.n	8002690 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	461a      	mov	r2, r3
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	461a      	mov	r2, r3
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8002690:	7cfb      	ldrb	r3, [r7, #19]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d023      	beq.n	80026de <ETH_UpdateDescriptor+0xa6>
    {
      if (heth->RxDescList.ItMode == 0U)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800269a:	2b00      	cmp	r3, #0
 800269c:	d103      	bne.n	80026a6 <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 800269e:	697b      	ldr	r3, [r7, #20]
 80026a0:	4a24      	ldr	r2, [pc, #144]	@ (8002734 <ETH_UpdateDescriptor+0xfc>)
 80026a2:	605a      	str	r2, [r3, #4]
 80026a4:	e003      	b.n	80026ae <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	f44f 428c 	mov.w	r2, #17920	@ 0x4600
 80026ac:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80026ba:	69fb      	ldr	r3, [r7, #28]
 80026bc:	3301      	adds	r3, #1
 80026be:	61fb      	str	r3, [r7, #28]
 80026c0:	69fb      	ldr	r3, [r7, #28]
 80026c2:	2b03      	cmp	r3, #3
 80026c4:	d902      	bls.n	80026cc <ETH_UpdateDescriptor+0x94>
 80026c6:	69fb      	ldr	r3, [r7, #28]
 80026c8:	3b04      	subs	r3, #4
 80026ca:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	69fa      	ldr	r2, [r7, #28]
 80026d0:	3212      	adds	r2, #18
 80026d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026d6:	617b      	str	r3, [r7, #20]
      desccount--;
 80026d8:	69bb      	ldr	r3, [r7, #24]
 80026da:	3b01      	subs	r3, #1
 80026dc:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 80026de:	69bb      	ldr	r3, [r7, #24]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d002      	beq.n	80026ea <ETH_UpdateDescriptor+0xb2>
 80026e4:	7cfb      	ldrb	r3, [r7, #19]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d1bb      	bne.n	8002662 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80026ee:	69ba      	ldr	r2, [r7, #24]
 80026f0:	429a      	cmp	r2, r3
 80026f2:	d01a      	beq.n	800272a <ETH_UpdateDescriptor+0xf2>
  {
    /* Set the tail pointer index */
    tailidx = (descidx + 1U) % ETH_RX_DESC_CNT;
 80026f4:	69fb      	ldr	r3, [r7, #28]
 80026f6:	3301      	adds	r3, #1
 80026f8:	f003 0303 	and.w	r3, r3, #3
 80026fc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 80026fe:	f3bf 8f5f 	dmb	sy
}
 8002702:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6919      	ldr	r1, [r3, #16]
 8002708:	68fa      	ldr	r2, [r7, #12]
 800270a:	4613      	mov	r3, r2
 800270c:	009b      	lsls	r3, r3, #2
 800270e:	4413      	add	r3, r2
 8002710:	00db      	lsls	r3, r3, #3
 8002712:	18ca      	adds	r2, r1, r3
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800271c:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	69fa      	ldr	r2, [r7, #28]
 8002722:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	69ba      	ldr	r2, [r7, #24]
 8002728:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 800272a:	bf00      	nop
 800272c:	3720      	adds	r7, #32
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}
 8002732:	bf00      	nop
 8002734:	80004600 	.word	0x80004600

08002738 <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b086      	sub	sp, #24
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	3318      	adds	r3, #24
 8002744:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800274a:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002750:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 8002752:	2301      	movs	r3, #1
 8002754:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8002756:	e03f      	b.n	80027d8 <HAL_ETH_ReleaseTxPacket+0xa0>
  {
    pktInUse = 1U;
 8002758:	2301      	movs	r3, #1
 800275a:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	3b01      	subs	r3, #1
 8002760:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8002762:	68ba      	ldr	r2, [r7, #8]
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	3304      	adds	r3, #4
 8002768:	009b      	lsls	r3, r3, #2
 800276a:	4413      	add	r3, r2
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d106      	bne.n	8002780 <HAL_ETH_ReleaseTxPacket+0x48>
    {
      /* No packet in use, skip to next.  */
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	3301      	adds	r3, #1
 8002776:	f003 0303 	and.w	r3, r3, #3
 800277a:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 800277c:	2300      	movs	r3, #0
 800277e:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8002780:	7bbb      	ldrb	r3, [r7, #14]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d028      	beq.n	80027d8 <HAL_ETH_ReleaseTxPacket+0xa0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	68d9      	ldr	r1, [r3, #12]
 800278a:	693a      	ldr	r2, [r7, #16]
 800278c:	4613      	mov	r3, r2
 800278e:	009b      	lsls	r3, r3, #2
 8002790:	4413      	add	r3, r2
 8002792:	00db      	lsls	r3, r3, #3
 8002794:	440b      	add	r3, r1
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	2b00      	cmp	r3, #0
 800279a:	db1b      	blt.n	80027d4 <HAL_ETH_ReleaseTxPacket+0x9c>
#ifdef HAL_ETH_USE_PTP
        /* Handle Ptp  */
        HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 800279c:	68ba      	ldr	r2, [r7, #8]
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	3304      	adds	r3, #4
 80027a2:	009b      	lsls	r3, r3, #2
 80027a4:	4413      	add	r3, r2
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	4618      	mov	r0, r3
 80027aa:	f003 fa61 	bl	8005c70 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 80027ae:	68ba      	ldr	r2, [r7, #8]
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	3304      	adds	r3, #4
 80027b4:	009b      	lsls	r3, r3, #2
 80027b6:	4413      	add	r3, r2
 80027b8:	2200      	movs	r2, #0
 80027ba:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 80027bc:	693b      	ldr	r3, [r7, #16]
 80027be:	3301      	adds	r3, #1
 80027c0:	f003 0303 	and.w	r3, r3, #3
 80027c4:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 80027c6:	68bb      	ldr	r3, [r7, #8]
 80027c8:	697a      	ldr	r2, [r7, #20]
 80027ca:	629a      	str	r2, [r3, #40]	@ 0x28
        dmatxdesclist->releaseIndex = idx;
 80027cc:	68bb      	ldr	r3, [r7, #8]
 80027ce:	693a      	ldr	r2, [r7, #16]
 80027d0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80027d2:	e001      	b.n	80027d8 <HAL_ETH_ReleaseTxPacket+0xa0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 80027d4:	2300      	movs	r3, #0
 80027d6:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d002      	beq.n	80027e4 <HAL_ETH_ReleaseTxPacket+0xac>
 80027de:	7bfb      	ldrb	r3, [r7, #15]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d1b9      	bne.n	8002758 <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 80027e4:	2300      	movs	r3, #0
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	3718      	adds	r7, #24
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}
	...

080027f0 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b082      	sub	sp, #8
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002800:	695b      	ldr	r3, [r3, #20]
 8002802:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002806:	2b40      	cmp	r3, #64	@ 0x40
 8002808:	d112      	bne.n	8002830 <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002812:	69db      	ldr	r3, [r3, #28]
 8002814:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002818:	2b40      	cmp	r3, #64	@ 0x40
 800281a:	d109      	bne.n	8002830 <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002824:	461a      	mov	r2, r3
 8002826:	4b50      	ldr	r3, [pc, #320]	@ (8002968 <HAL_ETH_IRQHandler+0x178>)
 8002828:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 800282a:	6878      	ldr	r0, [r7, #4]
 800282c:	f002 fd4e 	bl	80052cc <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002838:	695b      	ldr	r3, [r3, #20]
 800283a:	f003 0301 	and.w	r3, r3, #1
 800283e:	2b01      	cmp	r3, #1
 8002840:	d113      	bne.n	800286a <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800284a:	69db      	ldr	r3, [r3, #28]
 800284c:	f003 0301 	and.w	r3, r3, #1
 8002850:	2b01      	cmp	r3, #1
 8002852:	d10a      	bne.n	800286a <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800285c:	461a      	mov	r2, r3
 800285e:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 8002862:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8002864:	6878      	ldr	r0, [r7, #4]
 8002866:	f002 fd41 	bl	80052ec <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002872:	695b      	ldr	r3, [r3, #20]
 8002874:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002878:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800287c:	d14c      	bne.n	8002918 <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002886:	69db      	ldr	r3, [r3, #28]
 8002888:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800288c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002890:	d142      	bne.n	8002918 <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002898:	f043 0208 	orr.w	r2, r3, #8
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80028aa:	695b      	ldr	r3, [r3, #20]
 80028ac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80028b0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80028b4:	d11a      	bne.n	80028ec <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80028be:	695a      	ldr	r2, [r3, #20]
 80028c0:	4b2a      	ldr	r3, [pc, #168]	@ (800296c <HAL_ETH_IRQHandler+0x17c>)
 80028c2:	4013      	ands	r3, r2
 80028c4:	687a      	ldr	r2, [r7, #4]
 80028c6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80028d2:	69db      	ldr	r3, [r3, #28]
 80028d4:	687a      	ldr	r2, [r7, #4]
 80028d6:	6812      	ldr	r2, [r2, #0]
 80028d8:	f423 33c0 	bic.w	r3, r3, #98304	@ 0x18000
 80028dc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80028e0:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	22e0      	movs	r2, #224	@ 0xe0
 80028e6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 80028ea:	e012      	b.n	8002912 <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80028f4:	695a      	ldr	r2, [r3, #20]
 80028f6:	f248 6380 	movw	r3, #34432	@ 0x8680
 80028fa:	4013      	ands	r3, r2
 80028fc:	687a      	ldr	r2, [r7, #4]
 80028fe:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800290a:	461a      	mov	r2, r3
 800290c:	f248 6380 	movw	r3, #34432	@ 0x8680
 8002910:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 8002912:	6878      	ldr	r0, [r7, #4]
 8002914:	f002 fcfa 	bl	800530c <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800291e:	f003 0308 	and.w	r3, r3, #8
 8002922:	2b08      	cmp	r3, #8
 8002924:	d10e      	bne.n	8002944 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800292c:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8002936:	6878      	ldr	r0, [r7, #4]
 8002938:	f000 f81c 	bl	8002974 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2200      	movs	r2, #0
 8002940:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8002944:	4b0a      	ldr	r3, [pc, #40]	@ (8002970 <HAL_ETH_IRQHandler+0x180>)
 8002946:	695b      	ldr	r3, [r3, #20]
 8002948:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800294c:	2b00      	cmp	r3, #0
 800294e:	d006      	beq.n	800295e <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8002950:	4b07      	ldr	r3, [pc, #28]	@ (8002970 <HAL_ETH_IRQHandler+0x180>)
 8002952:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8002956:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8002958:	6878      	ldr	r0, [r7, #4]
 800295a:	f000 f815 	bl	8002988 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 800295e:	bf00      	nop
 8002960:	3708      	adds	r7, #8
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}
 8002966:	bf00      	nop
 8002968:	00010040 	.word	0x00010040
 800296c:	007e2000 	.word	0x007e2000
 8002970:	40013c00 	.word	0x40013c00

08002974 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8002974:	b480      	push	{r7}
 8002976:	b083      	sub	sp, #12
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 800297c:	bf00      	nop
 800297e:	370c      	adds	r7, #12
 8002980:	46bd      	mov	sp, r7
 8002982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002986:	4770      	bx	lr

08002988 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8002988:	b480      	push	{r7}
 800298a:	b083      	sub	sp, #12
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8002990:	bf00      	nop
 8002992:	370c      	adds	r7, #12
 8002994:	46bd      	mov	sp, r7
 8002996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299a:	4770      	bx	lr

0800299c <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b086      	sub	sp, #24
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	60f8      	str	r0, [r7, #12]
 80029a4:	60b9      	str	r1, [r7, #8]
 80029a6:	607a      	str	r2, [r7, #4]
 80029a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	691b      	ldr	r3, [r3, #16]
 80029b0:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	f003 031c 	and.w	r3, r3, #28
 80029b8:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	02db      	lsls	r3, r3, #11
 80029be:	b29b      	uxth	r3, r3
 80029c0:	697a      	ldr	r2, [r7, #20]
 80029c2:	4313      	orrs	r3, r2
 80029c4:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	019b      	lsls	r3, r3, #6
 80029ca:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 80029ce:	697a      	ldr	r2, [r7, #20]
 80029d0:	4313      	orrs	r3, r2
 80029d2:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	f023 0302 	bic.w	r3, r3, #2
 80029da:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	f043 0301 	orr.w	r3, r3, #1
 80029e2:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	697a      	ldr	r2, [r7, #20]
 80029ea:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 80029ec:	f7ff fa68 	bl	8001ec0 <HAL_GetTick>
 80029f0:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80029f2:	e00d      	b.n	8002a10 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 80029f4:	f7ff fa64 	bl	8001ec0 <HAL_GetTick>
 80029f8:	4602      	mov	r2, r0
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	1ad3      	subs	r3, r2, r3
 80029fe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a02:	d301      	bcc.n	8002a08 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8002a04:	2301      	movs	r3, #1
 8002a06:	e010      	b.n	8002a2a <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	691b      	ldr	r3, [r3, #16]
 8002a0e:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	f003 0301 	and.w	r3, r3, #1
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d1ec      	bne.n	80029f4 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	695b      	ldr	r3, [r3, #20]
 8002a20:	b29b      	uxth	r3, r3
 8002a22:	461a      	mov	r2, r3
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002a28:	2300      	movs	r3, #0
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	3718      	adds	r7, #24
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}

08002a32 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8002a32:	b580      	push	{r7, lr}
 8002a34:	b086      	sub	sp, #24
 8002a36:	af00      	add	r7, sp, #0
 8002a38:	60f8      	str	r0, [r7, #12]
 8002a3a:	60b9      	str	r1, [r7, #8]
 8002a3c:	607a      	str	r2, [r7, #4]
 8002a3e:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	691b      	ldr	r3, [r3, #16]
 8002a46:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	f003 031c 	and.w	r3, r3, #28
 8002a4e:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	02db      	lsls	r3, r3, #11
 8002a54:	b29b      	uxth	r3, r3
 8002a56:	697a      	ldr	r2, [r7, #20]
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	019b      	lsls	r3, r3, #6
 8002a60:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8002a64:	697a      	ldr	r2, [r7, #20]
 8002a66:	4313      	orrs	r3, r2
 8002a68:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	f043 0302 	orr.w	r3, r3, #2
 8002a70:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	f043 0301 	orr.w	r3, r3, #1
 8002a78:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	b29a      	uxth	r2, r3
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	697a      	ldr	r2, [r7, #20]
 8002a8a:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002a8c:	f7ff fa18 	bl	8001ec0 <HAL_GetTick>
 8002a90:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002a92:	e00d      	b.n	8002ab0 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8002a94:	f7ff fa14 	bl	8001ec0 <HAL_GetTick>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	1ad3      	subs	r3, r2, r3
 8002a9e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002aa2:	d301      	bcc.n	8002aa8 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	e009      	b.n	8002abc <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	691b      	ldr	r3, [r3, #16]
 8002aae:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	f003 0301 	and.w	r3, r3, #1
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d1ec      	bne.n	8002a94 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8002aba:	2300      	movs	r3, #0
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	3718      	adds	r7, #24
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}

08002ac4 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b083      	sub	sp, #12
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
 8002acc:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d101      	bne.n	8002ad8 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	e0d9      	b.n	8002c8c <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f003 0310 	and.w	r3, r3, #16
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	bf14      	ite	ne
 8002ae6:	2301      	movne	r3, #1
 8002ae8:	2300      	moveq	r3, #0
 8002aea:	b2db      	uxtb	r3, r3
 8002aec:	461a      	mov	r2, r3
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	bf0c      	ite	eq
 8002b10:	2301      	moveq	r3, #1
 8002b12:	2300      	movne	r3, #0
 8002b14:	b2db      	uxtb	r3, r3
 8002b16:	461a      	mov	r2, r3
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
                                        ? ENABLE : DISABLE;
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	bf14      	ite	ne
 8002b2c:	2301      	movne	r3, #1
 8002b2e:	2300      	moveq	r3, #0
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	bf0c      	ite	eq
 8002b46:	2301      	moveq	r3, #1
 8002b48:	2300      	movne	r3, #0
 8002b4a:	b2db      	uxtb	r3, r3
 8002b4c:	461a      	mov	r2, r3
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	bf14      	ite	ne
 8002b60:	2301      	movne	r3, #1
 8002b62:	2300      	moveq	r3, #0
 8002b64:	b2db      	uxtb	r3, r3
 8002b66:	461a      	mov	r2, r3
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	bf0c      	ite	eq
 8002b96:	2301      	moveq	r3, #1
 8002b98:	2300      	movne	r3, #0
 8002b9a:	b2db      	uxtb	r3, r3
 8002b9c:	461a      	mov	r2, r3
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	bf0c      	ite	eq
 8002bb0:	2301      	moveq	r3, #1
 8002bb2:	2300      	movne	r3, #0
 8002bb4:	b2db      	uxtb	r3, r3
 8002bb6:	461a      	mov	r2, r3
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	bf14      	ite	ne
 8002bca:	2301      	movne	r3, #1
 8002bcc:	2300      	moveq	r3, #0
 8002bce:	b2db      	uxtb	r3, r3
 8002bd0:	461a      	mov	r2, r3
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f403 2260 	and.w	r2, r3, #917504	@ 0xe0000
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	bf14      	ite	ne
 8002bf2:	2301      	movne	r3, #1
 8002bf4:	2300      	moveq	r3, #0
 8002bf6:	b2db      	uxtb	r3, r3
 8002bf8:	461a      	mov	r2, r3
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	699b      	ldr	r3, [r3, #24]
 8002c04:	f003 0302 	and.w	r3, r3, #2
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	bf14      	ite	ne
 8002c0c:	2301      	movne	r3, #1
 8002c0e:	2300      	moveq	r3, #0
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	461a      	mov	r2, r3
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	699b      	ldr	r3, [r3, #24]
 8002c20:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	bf0c      	ite	eq
 8002c28:	2301      	moveq	r3, #1
 8002c2a:	2300      	movne	r3, #0
 8002c2c:	b2db      	uxtb	r3, r3
 8002c2e:	461a      	mov	r2, r3
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	699b      	ldr	r3, [r3, #24]
 8002c3c:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	699b      	ldr	r3, [r3, #24]
 8002c4a:	0c1b      	lsrs	r3, r3, #16
 8002c4c:	b29a      	uxth	r2, r3
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	699b      	ldr	r3, [r3, #24]
 8002c58:	f003 0304 	and.w	r3, r3, #4
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	bf14      	ite	ne
 8002c60:	2301      	movne	r3, #1
 8002c62:	2300      	moveq	r3, #0
 8002c64:	b2db      	uxtb	r3, r3
 8002c66:	461a      	mov	r2, r3
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	699b      	ldr	r3, [r3, #24]
 8002c74:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	bf14      	ite	ne
 8002c7c:	2301      	movne	r3, #1
 8002c7e:	2300      	moveq	r3, #0
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  return HAL_OK;
 8002c8a:	2300      	movs	r3, #0
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	370c      	adds	r7, #12
 8002c90:	46bd      	mov	sp, r7
 8002c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c96:	4770      	bx	lr

08002c98 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b082      	sub	sp, #8
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
 8002ca0:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d101      	bne.n	8002cac <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	e00b      	b.n	8002cc4 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002cb2:	2b10      	cmp	r3, #16
 8002cb4:	d105      	bne.n	8002cc2 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8002cb6:	6839      	ldr	r1, [r7, #0]
 8002cb8:	6878      	ldr	r0, [r7, #4]
 8002cba:	f000 f88f 	bl	8002ddc <ETH_SetMACConfig>

    return HAL_OK;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	e000      	b.n	8002cc4 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8002cc2:	2301      	movs	r3, #1
  }
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	3708      	adds	r7, #8
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}

08002ccc <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b084      	sub	sp, #16
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	691b      	ldr	r3, [r3, #16]
 8002cda:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	f023 031c 	bic.w	r3, r3, #28
 8002ce2:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002ce4:	f001 fa9c 	bl	8004220 <HAL_RCC_GetHCLKFreq>
 8002ce8:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	4a1d      	ldr	r2, [pc, #116]	@ (8002d64 <HAL_ETH_SetMDIOClockRange+0x98>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d908      	bls.n	8002d04 <HAL_ETH_SetMDIOClockRange+0x38>
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	4a1c      	ldr	r2, [pc, #112]	@ (8002d68 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d804      	bhi.n	8002d04 <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	f043 0308 	orr.w	r3, r3, #8
 8002d00:	60fb      	str	r3, [r7, #12]
 8002d02:	e027      	b.n	8002d54 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	4a18      	ldr	r2, [pc, #96]	@ (8002d68 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d908      	bls.n	8002d1e <HAL_ETH_SetMDIOClockRange+0x52>
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	4a17      	ldr	r2, [pc, #92]	@ (8002d6c <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d204      	bcs.n	8002d1e <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	f043 030c 	orr.w	r3, r3, #12
 8002d1a:	60fb      	str	r3, [r7, #12]
 8002d1c:	e01a      	b.n	8002d54 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	4a12      	ldr	r2, [pc, #72]	@ (8002d6c <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d303      	bcc.n	8002d2e <HAL_ETH_SetMDIOClockRange+0x62>
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	4a11      	ldr	r2, [pc, #68]	@ (8002d70 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d911      	bls.n	8002d52 <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8002d2e:	68bb      	ldr	r3, [r7, #8]
 8002d30:	4a0f      	ldr	r2, [pc, #60]	@ (8002d70 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d908      	bls.n	8002d48 <HAL_ETH_SetMDIOClockRange+0x7c>
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	4a0e      	ldr	r2, [pc, #56]	@ (8002d74 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d804      	bhi.n	8002d48 <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	f043 0304 	orr.w	r3, r3, #4
 8002d44:	60fb      	str	r3, [r7, #12]
 8002d46:	e005      	b.n	8002d54 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	f043 0310 	orr.w	r3, r3, #16
 8002d4e:	60fb      	str	r3, [r7, #12]
 8002d50:	e000      	b.n	8002d54 <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8002d52:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	68fa      	ldr	r2, [r7, #12]
 8002d5a:	611a      	str	r2, [r3, #16]
}
 8002d5c:	bf00      	nop
 8002d5e:	3710      	adds	r7, #16
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}
 8002d64:	01312cff 	.word	0x01312cff
 8002d68:	02160ebf 	.word	0x02160ebf
 8002d6c:	03938700 	.word	0x03938700
 8002d70:	05f5e0ff 	.word	0x05f5e0ff
 8002d74:	08f0d17f 	.word	0x08f0d17f

08002d78 <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(const ETH_HandleTypeDef *heth)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b083      	sub	sp, #12
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	370c      	adds	r7, #12
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d90:	4770      	bx	lr

08002d92 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8002d92:	b580      	push	{r7, lr}
 8002d94:	b084      	sub	sp, #16
 8002d96:	af00      	add	r7, sp, #0
 8002d98:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002da6:	699b      	ldr	r3, [r3, #24]
 8002da8:	687a      	ldr	r2, [r7, #4]
 8002daa:	6812      	ldr	r2, [r2, #0]
 8002dac:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002db0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002db4:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002dbe:	699b      	ldr	r3, [r3, #24]
 8002dc0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002dc2:	2001      	movs	r0, #1
 8002dc4:	f7ff f888 	bl	8001ed8 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002dd2:	6193      	str	r3, [r2, #24]
}
 8002dd4:	bf00      	nop
 8002dd6:	3710      	adds	r7, #16
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bd80      	pop	{r7, pc}

08002ddc <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b084      	sub	sp, #16
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
 8002de4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002dee:	68fa      	ldr	r2, [r7, #12]
 8002df0:	4b51      	ldr	r3, [pc, #324]	@ (8002f38 <ETH_SetMACConfig+0x15c>)
 8002df2:	4013      	ands	r3, r2
 8002df4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	7c1b      	ldrb	r3, [r3, #16]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d102      	bne.n	8002e04 <ETH_SetMACConfig+0x28>
 8002dfe:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002e02:	e000      	b.n	8002e06 <ETH_SetMACConfig+0x2a>
 8002e04:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	7c5b      	ldrb	r3, [r3, #17]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d102      	bne.n	8002e14 <ETH_SetMACConfig+0x38>
 8002e0e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002e12:	e000      	b.n	8002e16 <ETH_SetMACConfig+0x3a>
 8002e14:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002e16:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002e1c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	7fdb      	ldrb	r3, [r3, #31]
 8002e22:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002e24:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002e2a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002e2c:	683a      	ldr	r2, [r7, #0]
 8002e2e:	7f92      	ldrb	r2, [r2, #30]
 8002e30:	2a00      	cmp	r2, #0
 8002e32:	d102      	bne.n	8002e3a <ETH_SetMACConfig+0x5e>
 8002e34:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002e38:	e000      	b.n	8002e3c <ETH_SetMACConfig+0x60>
 8002e3a:	2200      	movs	r2, #0
                        macconf->Speed |
 8002e3c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	7f1b      	ldrb	r3, [r3, #28]
 8002e42:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002e44:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002e4a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	791b      	ldrb	r3, [r3, #4]
 8002e50:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8002e52:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002e54:	683a      	ldr	r2, [r7, #0]
 8002e56:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002e5a:	2a00      	cmp	r2, #0
 8002e5c:	d102      	bne.n	8002e64 <ETH_SetMACConfig+0x88>
 8002e5e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002e62:	e000      	b.n	8002e66 <ETH_SetMACConfig+0x8a>
 8002e64:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002e66:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	7bdb      	ldrb	r3, [r3, #15]
 8002e6c:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002e6e:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002e74:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002e7c:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	68fa      	ldr	r2, [r7, #12]
 8002e82:	4313      	orrs	r3, r2
 8002e84:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	68fa      	ldr	r2, [r7, #12]
 8002e8c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002e96:	2001      	movs	r0, #1
 8002e98:	f7ff f81e 	bl	8001ed8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	68fa      	ldr	r2, [r7, #12]
 8002ea2:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	699b      	ldr	r3, [r3, #24]
 8002eaa:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002eac:	68fa      	ldr	r2, [r7, #12]
 8002eae:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8002eb2:	4013      	ands	r3, r2
 8002eb4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002eba:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002ebc:	683a      	ldr	r2, [r7, #0]
 8002ebe:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8002ec2:	2a00      	cmp	r2, #0
 8002ec4:	d101      	bne.n	8002eca <ETH_SetMACConfig+0xee>
 8002ec6:	2280      	movs	r2, #128	@ 0x80
 8002ec8:	e000      	b.n	8002ecc <ETH_SetMACConfig+0xf0>
 8002eca:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002ecc:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002ed2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002ed4:	683a      	ldr	r2, [r7, #0]
 8002ed6:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8002eda:	2a01      	cmp	r2, #1
 8002edc:	d101      	bne.n	8002ee2 <ETH_SetMACConfig+0x106>
 8002ede:	2208      	movs	r2, #8
 8002ee0:	e000      	b.n	8002ee4 <ETH_SetMACConfig+0x108>
 8002ee2:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002ee4:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002ee6:	683a      	ldr	r2, [r7, #0]
 8002ee8:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8002eec:	2a01      	cmp	r2, #1
 8002eee:	d101      	bne.n	8002ef4 <ETH_SetMACConfig+0x118>
 8002ef0:	2204      	movs	r2, #4
 8002ef2:	e000      	b.n	8002ef6 <ETH_SetMACConfig+0x11a>
 8002ef4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002ef6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002ef8:	683a      	ldr	r2, [r7, #0]
 8002efa:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8002efe:	2a01      	cmp	r2, #1
 8002f00:	d101      	bne.n	8002f06 <ETH_SetMACConfig+0x12a>
 8002f02:	2202      	movs	r2, #2
 8002f04:	e000      	b.n	8002f08 <ETH_SetMACConfig+0x12c>
 8002f06:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	68fa      	ldr	r2, [r7, #12]
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	68fa      	ldr	r2, [r7, #12]
 8002f16:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	699b      	ldr	r3, [r3, #24]
 8002f1e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002f20:	2001      	movs	r0, #1
 8002f22:	f7fe ffd9 	bl	8001ed8 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	68fa      	ldr	r2, [r7, #12]
 8002f2c:	619a      	str	r2, [r3, #24]
}
 8002f2e:	bf00      	nop
 8002f30:	3710      	adds	r7, #16
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}
 8002f36:	bf00      	nop
 8002f38:	ff20810f 	.word	0xff20810f

08002f3c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b084      	sub	sp, #16
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
 8002f44:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002f4e:	699b      	ldr	r3, [r3, #24]
 8002f50:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002f52:	68fa      	ldr	r2, [r7, #12]
 8002f54:	4b3d      	ldr	r3, [pc, #244]	@ (800304c <ETH_SetDMAConfig+0x110>)
 8002f56:	4013      	ands	r3, r2
 8002f58:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	7b1b      	ldrb	r3, [r3, #12]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d102      	bne.n	8002f68 <ETH_SetDMAConfig+0x2c>
 8002f62:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002f66:	e000      	b.n	8002f6a <ETH_SetDMAConfig+0x2e>
 8002f68:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	7b5b      	ldrb	r3, [r3, #13]
 8002f6e:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002f70:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002f72:	683a      	ldr	r2, [r7, #0]
 8002f74:	7f52      	ldrb	r2, [r2, #29]
 8002f76:	2a00      	cmp	r2, #0
 8002f78:	d102      	bne.n	8002f80 <ETH_SetDMAConfig+0x44>
 8002f7a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002f7e:	e000      	b.n	8002f82 <ETH_SetDMAConfig+0x46>
 8002f80:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002f82:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	7b9b      	ldrb	r3, [r3, #14]
 8002f88:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002f8a:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002f90:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	7f1b      	ldrb	r3, [r3, #28]
 8002f96:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002f98:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	7f9b      	ldrb	r3, [r3, #30]
 8002f9e:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002fa0:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002fa6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002fae:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	68fa      	ldr	r2, [r7, #12]
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002fc0:	461a      	mov	r2, r3
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002fce:	699b      	ldr	r3, [r3, #24]
 8002fd0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002fd2:	2001      	movs	r0, #1
 8002fd4:	f7fe ff80 	bl	8001ed8 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002fe0:	461a      	mov	r2, r3
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	791b      	ldrb	r3, [r3, #4]
 8002fea:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002ff0:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002ff6:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002ffc:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003004:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8003006:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800300c:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800300e:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003014:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003016:	687a      	ldr	r2, [r7, #4]
 8003018:	6812      	ldr	r2, [r2, #0]
 800301a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800301e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003022:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003030:	2001      	movs	r0, #1
 8003032:	f7fe ff51 	bl	8001ed8 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800303e:	461a      	mov	r2, r3
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	6013      	str	r3, [r2, #0]
}
 8003044:	bf00      	nop
 8003046:	3710      	adds	r7, #16
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}
 800304c:	f8de3f23 	.word	0xf8de3f23

08003050 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b0a6      	sub	sp, #152	@ 0x98
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8003058:	2301      	movs	r3, #1
 800305a:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 800305e:	2301      	movs	r3, #1
 8003060:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8003064:	2300      	movs	r3, #0
 8003066:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003068:	2300      	movs	r3, #0
 800306a:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800306e:	2301      	movs	r3, #1
 8003070:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8003074:	2300      	movs	r3, #0
 8003076:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 800307a:	2301      	movs	r3, #1
 800307c:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8003080:	2300      	movs	r3, #0
 8003082:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8003086:	2300      	movs	r3, #0
 8003088:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800308c:	2300      	movs	r3, #0
 800308e:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8003090:	2300      	movs	r3, #0
 8003092:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8003096:	2300      	movs	r3, #0
 8003098:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800309a:	2300      	movs	r3, #0
 800309c:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80030a0:	2300      	movs	r3, #0
 80030a2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80030a6:	2300      	movs	r3, #0
 80030a8:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80030ac:	2300      	movs	r3, #0
 80030ae:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80030b2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80030b6:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80030b8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80030bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80030be:	2300      	movs	r3, #0
 80030c0:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80030c4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80030c8:	4619      	mov	r1, r3
 80030ca:	6878      	ldr	r0, [r7, #4]
 80030cc:	f7ff fe86 	bl	8002ddc <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80030d0:	2301      	movs	r3, #1
 80030d2:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80030d4:	2301      	movs	r3, #1
 80030d6:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80030d8:	2301      	movs	r3, #1
 80030da:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80030de:	2301      	movs	r3, #1
 80030e0:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80030e2:	2300      	movs	r3, #0
 80030e4:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80030e6:	2300      	movs	r3, #0
 80030e8:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80030ec:	2300      	movs	r3, #0
 80030ee:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80030f2:	2300      	movs	r3, #0
 80030f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80030f6:	2301      	movs	r3, #1
 80030f8:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80030fc:	2301      	movs	r3, #1
 80030fe:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8003100:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003104:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003106:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800310a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800310c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003110:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8003112:	2301      	movs	r3, #1
 8003114:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8003118:	2300      	movs	r3, #0
 800311a:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800311c:	2300      	movs	r3, #0
 800311e:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8003120:	f107 0308 	add.w	r3, r7, #8
 8003124:	4619      	mov	r1, r3
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	f7ff ff08 	bl	8002f3c <ETH_SetDMAConfig>
}
 800312c:	bf00      	nop
 800312e:	3798      	adds	r7, #152	@ 0x98
 8003130:	46bd      	mov	sp, r7
 8003132:	bd80      	pop	{r7, pc}

08003134 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8003134:	b480      	push	{r7}
 8003136:	b087      	sub	sp, #28
 8003138:	af00      	add	r7, sp, #0
 800313a:	60f8      	str	r0, [r7, #12]
 800313c:	60b9      	str	r1, [r7, #8]
 800313e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	3305      	adds	r3, #5
 8003144:	781b      	ldrb	r3, [r3, #0]
 8003146:	021b      	lsls	r3, r3, #8
 8003148:	687a      	ldr	r2, [r7, #4]
 800314a:	3204      	adds	r2, #4
 800314c:	7812      	ldrb	r2, [r2, #0]
 800314e:	4313      	orrs	r3, r2
 8003150:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8003152:	68ba      	ldr	r2, [r7, #8]
 8003154:	4b11      	ldr	r3, [pc, #68]	@ (800319c <ETH_MACAddressConfig+0x68>)
 8003156:	4413      	add	r3, r2
 8003158:	461a      	mov	r2, r3
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	3303      	adds	r3, #3
 8003162:	781b      	ldrb	r3, [r3, #0]
 8003164:	061a      	lsls	r2, r3, #24
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	3302      	adds	r3, #2
 800316a:	781b      	ldrb	r3, [r3, #0]
 800316c:	041b      	lsls	r3, r3, #16
 800316e:	431a      	orrs	r2, r3
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	3301      	adds	r3, #1
 8003174:	781b      	ldrb	r3, [r3, #0]
 8003176:	021b      	lsls	r3, r3, #8
 8003178:	4313      	orrs	r3, r2
 800317a:	687a      	ldr	r2, [r7, #4]
 800317c:	7812      	ldrb	r2, [r2, #0]
 800317e:	4313      	orrs	r3, r2
 8003180:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8003182:	68ba      	ldr	r2, [r7, #8]
 8003184:	4b06      	ldr	r3, [pc, #24]	@ (80031a0 <ETH_MACAddressConfig+0x6c>)
 8003186:	4413      	add	r3, r2
 8003188:	461a      	mov	r2, r3
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	6013      	str	r3, [r2, #0]
}
 800318e:	bf00      	nop
 8003190:	371c      	adds	r7, #28
 8003192:	46bd      	mov	sp, r7
 8003194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003198:	4770      	bx	lr
 800319a:	bf00      	nop
 800319c:	40028040 	.word	0x40028040
 80031a0:	40028044 	.word	0x40028044

080031a4 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b085      	sub	sp, #20
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80031ac:	2300      	movs	r3, #0
 80031ae:	60fb      	str	r3, [r7, #12]
 80031b0:	e03e      	b.n	8003230 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	68d9      	ldr	r1, [r3, #12]
 80031b6:	68fa      	ldr	r2, [r7, #12]
 80031b8:	4613      	mov	r3, r2
 80031ba:	009b      	lsls	r3, r3, #2
 80031bc:	4413      	add	r3, r2
 80031be:	00db      	lsls	r3, r3, #3
 80031c0:	440b      	add	r3, r1
 80031c2:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	2200      	movs	r2, #0
 80031c8:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	2200      	movs	r2, #0
 80031ce:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	2200      	movs	r2, #0
 80031d4:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	2200      	movs	r2, #0
 80031da:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80031dc:	68b9      	ldr	r1, [r7, #8]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	68fa      	ldr	r2, [r7, #12]
 80031e2:	3206      	adds	r2, #6
 80031e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	2b02      	cmp	r3, #2
 80031f8:	d80c      	bhi.n	8003214 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	68d9      	ldr	r1, [r3, #12]
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	1c5a      	adds	r2, r3, #1
 8003202:	4613      	mov	r3, r2
 8003204:	009b      	lsls	r3, r3, #2
 8003206:	4413      	add	r3, r2
 8003208:	00db      	lsls	r3, r3, #3
 800320a:	440b      	add	r3, r1
 800320c:	461a      	mov	r2, r3
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	60da      	str	r2, [r3, #12]
 8003212:	e004      	b.n	800321e <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	68db      	ldr	r3, [r3, #12]
 8003218:	461a      	mov	r2, r3
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8003226:	68bb      	ldr	r3, [r7, #8]
 8003228:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	3301      	adds	r3, #1
 800322e:	60fb      	str	r3, [r7, #12]
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	2b03      	cmp	r3, #3
 8003234:	d9bd      	bls.n	80031b2 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2200      	movs	r2, #0
 800323a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	68da      	ldr	r2, [r3, #12]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003248:	611a      	str	r2, [r3, #16]
}
 800324a:	bf00      	nop
 800324c:	3714      	adds	r7, #20
 800324e:	46bd      	mov	sp, r7
 8003250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003254:	4770      	bx	lr

08003256 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8003256:	b480      	push	{r7}
 8003258:	b085      	sub	sp, #20
 800325a:	af00      	add	r7, sp, #0
 800325c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800325e:	2300      	movs	r3, #0
 8003260:	60fb      	str	r3, [r7, #12]
 8003262:	e046      	b.n	80032f2 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6919      	ldr	r1, [r3, #16]
 8003268:	68fa      	ldr	r2, [r7, #12]
 800326a:	4613      	mov	r3, r2
 800326c:	009b      	lsls	r3, r3, #2
 800326e:	4413      	add	r3, r2
 8003270:	00db      	lsls	r3, r3, #3
 8003272:	440b      	add	r3, r1
 8003274:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	2200      	movs	r2, #0
 800327a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	2200      	movs	r2, #0
 8003280:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	2200      	movs	r2, #0
 8003286:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	2200      	movs	r2, #0
 800328c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	2200      	movs	r2, #0
 8003292:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	2200      	movs	r2, #0
 8003298:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80032a0:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	f44f 428c 	mov.w	r2, #17920	@ 0x4600
 80032a8:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80032b6:	68b9      	ldr	r1, [r7, #8]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	68fa      	ldr	r2, [r7, #12]
 80032bc:	3212      	adds	r2, #18
 80032be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2b02      	cmp	r3, #2
 80032c6:	d80c      	bhi.n	80032e2 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6919      	ldr	r1, [r3, #16]
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	1c5a      	adds	r2, r3, #1
 80032d0:	4613      	mov	r3, r2
 80032d2:	009b      	lsls	r3, r3, #2
 80032d4:	4413      	add	r3, r2
 80032d6:	00db      	lsls	r3, r3, #3
 80032d8:	440b      	add	r3, r1
 80032da:	461a      	mov	r2, r3
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	60da      	str	r2, [r3, #12]
 80032e0:	e004      	b.n	80032ec <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	691b      	ldr	r3, [r3, #16]
 80032e6:	461a      	mov	r2, r3
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	3301      	adds	r3, #1
 80032f0:	60fb      	str	r3, [r7, #12]
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	2b03      	cmp	r3, #3
 80032f6:	d9b5      	bls.n	8003264 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2200      	movs	r2, #0
 80032fc:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2200      	movs	r2, #0
 8003302:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2200      	movs	r2, #0
 8003308:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2200      	movs	r2, #0
 800330e:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2200      	movs	r2, #0
 8003314:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	691a      	ldr	r2, [r3, #16]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003322:	60da      	str	r2, [r3, #12]
}
 8003324:	bf00      	nop
 8003326:	3714      	adds	r7, #20
 8003328:	46bd      	mov	sp, r7
 800332a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332e:	4770      	bx	lr

08003330 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8003330:	b480      	push	{r7}
 8003332:	b08d      	sub	sp, #52	@ 0x34
 8003334:	af00      	add	r7, sp, #0
 8003336:	60f8      	str	r0, [r7, #12]
 8003338:	60b9      	str	r1, [r7, #8]
 800333a:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	3318      	adds	r3, #24
 8003340:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8003342:	697b      	ldr	r3, [r7, #20]
 8003344:	691b      	ldr	r3, [r3, #16]
 8003346:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	691b      	ldr	r3, [r3, #16]
 800334c:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 800334e:	2300      	movs	r3, #0
 8003350:	627b      	str	r3, [r7, #36]	@ 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003356:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800335a:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8003362:	2300      	movs	r3, #0
 8003364:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8003366:	6a3b      	ldr	r3, [r7, #32]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800336e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003372:	d007      	beq.n	8003384 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8003374:	697a      	ldr	r2, [r7, #20]
 8003376:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003378:	3304      	adds	r3, #4
 800337a:	009b      	lsls	r3, r3, #2
 800337c:	4413      	add	r3, r2
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d001      	beq.n	8003388 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8003384:	2302      	movs	r3, #2
 8003386:	e103      	b.n	8003590 <ETH_Prepare_Tx_Descriptors+0x260>
  }


  descnbr += 1U;
 8003388:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800338a:	3301      	adds	r3, #1
 800338c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 800338e:	69fb      	ldr	r3, [r7, #28]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	461a      	mov	r2, r3
 8003394:	6a3b      	ldr	r3, [r7, #32]
 8003396:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8003398:	6a3b      	ldr	r3, [r7, #32]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	f423 53ff 	bic.w	r3, r3, #8160	@ 0x1fe0
 80033a0:	f023 031f 	bic.w	r3, r3, #31
 80033a4:	69fa      	ldr	r2, [r7, #28]
 80033a6:	6852      	ldr	r2, [r2, #4]
 80033a8:	431a      	orrs	r2, r3
 80033aa:	6a3b      	ldr	r3, [r7, #32]
 80033ac:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 80033ae:	68bb      	ldr	r3, [r7, #8]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f003 0301 	and.w	r3, r3, #1
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d008      	beq.n	80033cc <ETH_Prepare_Tx_Descriptors+0x9c>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 80033ba:	6a3b      	ldr	r3, [r7, #32]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	695b      	ldr	r3, [r3, #20]
 80033c6:	431a      	orrs	r2, r3
 80033c8:	6a3b      	ldr	r3, [r7, #32]
 80033ca:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f003 0320 	and.w	r3, r3, #32
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d008      	beq.n	80033ea <ETH_Prepare_Tx_Descriptors+0xba>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 80033d8:	6a3b      	ldr	r3, [r7, #32]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	691b      	ldr	r3, [r3, #16]
 80033e4:	431a      	orrs	r2, r3
 80033e6:	6a3b      	ldr	r3, [r7, #32]
 80033e8:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 0304 	and.w	r3, r3, #4
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d005      	beq.n	8003402 <ETH_Prepare_Tx_Descriptors+0xd2>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 80033f6:	6a3b      	ldr	r3, [r7, #32]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80033fe:	6a3b      	ldr	r3, [r7, #32]
 8003400:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8003402:	6a3b      	ldr	r3, [r7, #32]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800340a:	6a3b      	ldr	r3, [r7, #32]
 800340c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 800340e:	f3bf 8f5f 	dmb	sy
}
 8003412:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8003414:	6a3b      	ldr	r3, [r7, #32]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800341c:	6a3b      	ldr	r3, [r7, #32]
 800341e:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8003420:	e084      	b.n	800352c <ETH_Prepare_Tx_Descriptors+0x1fc>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8003422:	6a3b      	ldr	r3, [r7, #32]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800342a:	6a3b      	ldr	r3, [r7, #32]
 800342c:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d006      	beq.n	8003442 <ETH_Prepare_Tx_Descriptors+0x112>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003434:	6a3b      	ldr	r3, [r7, #32]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800343c:	6a3b      	ldr	r3, [r7, #32]
 800343e:	601a      	str	r2, [r3, #0]
 8003440:	e005      	b.n	800344e <ETH_Prepare_Tx_Descriptors+0x11e>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003442:	6a3b      	ldr	r3, [r7, #32]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800344a:	6a3b      	ldr	r3, [r7, #32]
 800344c:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 800344e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003450:	3301      	adds	r3, #1
 8003452:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003454:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003456:	2b03      	cmp	r3, #3
 8003458:	d902      	bls.n	8003460 <ETH_Prepare_Tx_Descriptors+0x130>
 800345a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800345c:	3b04      	subs	r3, #4
 800345e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003464:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003468:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 800346a:	6a3b      	ldr	r3, [r7, #32]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003472:	6a3b      	ldr	r3, [r7, #32]
 8003474:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8003476:	6a3b      	ldr	r3, [r7, #32]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800347e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003482:	d007      	beq.n	8003494 <ETH_Prepare_Tx_Descriptors+0x164>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8003484:	697a      	ldr	r2, [r7, #20]
 8003486:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003488:	3304      	adds	r3, #4
 800348a:	009b      	lsls	r3, r3, #2
 800348c:	4413      	add	r3, r2
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d029      	beq.n	80034e8 <ETH_Prepare_Tx_Descriptors+0x1b8>
    {
      descidx = firstdescidx;
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	62fb      	str	r3, [r7, #44]	@ 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800349c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034a0:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 80034a2:	2300      	movs	r3, #0
 80034a4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80034a6:	e019      	b.n	80034dc <ETH_Prepare_Tx_Descriptors+0x1ac>
  __ASM volatile ("dmb 0xF":::"memory");
 80034a8:	f3bf 8f5f 	dmb	sy
}
 80034ac:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80034ae:	6a3b      	ldr	r3, [r7, #32]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80034b6:	6a3b      	ldr	r3, [r7, #32]
 80034b8:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 80034ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034bc:	3301      	adds	r3, #1
 80034be:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80034c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034c2:	2b03      	cmp	r3, #3
 80034c4:	d902      	bls.n	80034cc <ETH_Prepare_Tx_Descriptors+0x19c>
 80034c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034c8:	3b04      	subs	r3, #4
 80034ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80034d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034d4:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 80034d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034d8:	3301      	adds	r3, #1
 80034da:	62bb      	str	r3, [r7, #40]	@ 0x28
 80034dc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80034de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034e0:	429a      	cmp	r2, r3
 80034e2:	d3e1      	bcc.n	80034a8 <ETH_Prepare_Tx_Descriptors+0x178>
      }

      return HAL_ETH_ERROR_BUSY;
 80034e4:	2302      	movs	r3, #2
 80034e6:	e053      	b.n	8003590 <ETH_Prepare_Tx_Descriptors+0x260>
    }

    descnbr += 1U;
 80034e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034ea:	3301      	adds	r3, #1
 80034ec:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 80034ee:	69fb      	ldr	r3, [r7, #28]
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 80034f4:	69fb      	ldr	r3, [r7, #28]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	461a      	mov	r2, r3
 80034fa:	6a3b      	ldr	r3, [r7, #32]
 80034fc:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80034fe:	6a3b      	ldr	r3, [r7, #32]
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	f423 53ff 	bic.w	r3, r3, #8160	@ 0x1fe0
 8003506:	f023 031f 	bic.w	r3, r3, #31
 800350a:	69fa      	ldr	r2, [r7, #28]
 800350c:	6852      	ldr	r2, [r2, #4]
 800350e:	431a      	orrs	r2, r3
 8003510:	6a3b      	ldr	r3, [r7, #32]
 8003512:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8003514:	69bb      	ldr	r3, [r7, #24]
 8003516:	3301      	adds	r3, #1
 8003518:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 800351a:	f3bf 8f5f 	dmb	sy
}
 800351e:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8003520:	6a3b      	ldr	r3, [r7, #32]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003528:	6a3b      	ldr	r3, [r7, #32]
 800352a:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 800352c:	69fb      	ldr	r3, [r7, #28]
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	2b00      	cmp	r3, #0
 8003532:	f47f af76 	bne.w	8003422 <ETH_Prepare_Tx_Descriptors+0xf2>
  }

  if (ItMode != ((uint32_t)RESET))
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d006      	beq.n	800354a <ETH_Prepare_Tx_Descriptors+0x21a>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800353c:	6a3b      	ldr	r3, [r7, #32]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003544:	6a3b      	ldr	r3, [r7, #32]
 8003546:	601a      	str	r2, [r3, #0]
 8003548:	e005      	b.n	8003556 <ETH_Prepare_Tx_Descriptors+0x226>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800354a:	6a3b      	ldr	r3, [r7, #32]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003552:	6a3b      	ldr	r3, [r7, #32]
 8003554:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8003556:	6a3b      	ldr	r3, [r7, #32]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800355e:	6a3b      	ldr	r3, [r7, #32]
 8003560:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003566:	6979      	ldr	r1, [r7, #20]
 8003568:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800356a:	3304      	adds	r3, #4
 800356c:	009b      	lsls	r3, r3, #2
 800356e:	440b      	add	r3, r1
 8003570:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003576:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8003578:	b672      	cpsid	i
}
 800357a:	bf00      	nop
  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 800357c:	697b      	ldr	r3, [r7, #20]
 800357e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003580:	69bb      	ldr	r3, [r7, #24]
 8003582:	4413      	add	r3, r2
 8003584:	1c5a      	adds	r2, r3, #1
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	629a      	str	r2, [r3, #40]	@ 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 800358a:	b662      	cpsie	i
}
 800358c:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 800358e:	2300      	movs	r3, #0
}
 8003590:	4618      	mov	r0, r3
 8003592:	3734      	adds	r7, #52	@ 0x34
 8003594:	46bd      	mov	sp, r7
 8003596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359a:	4770      	bx	lr

0800359c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800359c:	b480      	push	{r7}
 800359e:	b089      	sub	sp, #36	@ 0x24
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
 80035a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80035a6:	2300      	movs	r3, #0
 80035a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80035aa:	2300      	movs	r3, #0
 80035ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80035ae:	2300      	movs	r3, #0
 80035b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80035b2:	2300      	movs	r3, #0
 80035b4:	61fb      	str	r3, [r7, #28]
 80035b6:	e177      	b.n	80038a8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80035b8:	2201      	movs	r2, #1
 80035ba:	69fb      	ldr	r3, [r7, #28]
 80035bc:	fa02 f303 	lsl.w	r3, r2, r3
 80035c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	697a      	ldr	r2, [r7, #20]
 80035c8:	4013      	ands	r3, r2
 80035ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80035cc:	693a      	ldr	r2, [r7, #16]
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	429a      	cmp	r2, r3
 80035d2:	f040 8166 	bne.w	80038a2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	f003 0303 	and.w	r3, r3, #3
 80035de:	2b01      	cmp	r3, #1
 80035e0:	d005      	beq.n	80035ee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80035ea:	2b02      	cmp	r3, #2
 80035ec:	d130      	bne.n	8003650 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80035f4:	69fb      	ldr	r3, [r7, #28]
 80035f6:	005b      	lsls	r3, r3, #1
 80035f8:	2203      	movs	r2, #3
 80035fa:	fa02 f303 	lsl.w	r3, r2, r3
 80035fe:	43db      	mvns	r3, r3
 8003600:	69ba      	ldr	r2, [r7, #24]
 8003602:	4013      	ands	r3, r2
 8003604:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	68da      	ldr	r2, [r3, #12]
 800360a:	69fb      	ldr	r3, [r7, #28]
 800360c:	005b      	lsls	r3, r3, #1
 800360e:	fa02 f303 	lsl.w	r3, r2, r3
 8003612:	69ba      	ldr	r2, [r7, #24]
 8003614:	4313      	orrs	r3, r2
 8003616:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	69ba      	ldr	r2, [r7, #24]
 800361c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003624:	2201      	movs	r2, #1
 8003626:	69fb      	ldr	r3, [r7, #28]
 8003628:	fa02 f303 	lsl.w	r3, r2, r3
 800362c:	43db      	mvns	r3, r3
 800362e:	69ba      	ldr	r2, [r7, #24]
 8003630:	4013      	ands	r3, r2
 8003632:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	091b      	lsrs	r3, r3, #4
 800363a:	f003 0201 	and.w	r2, r3, #1
 800363e:	69fb      	ldr	r3, [r7, #28]
 8003640:	fa02 f303 	lsl.w	r3, r2, r3
 8003644:	69ba      	ldr	r2, [r7, #24]
 8003646:	4313      	orrs	r3, r2
 8003648:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	69ba      	ldr	r2, [r7, #24]
 800364e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	f003 0303 	and.w	r3, r3, #3
 8003658:	2b03      	cmp	r3, #3
 800365a:	d017      	beq.n	800368c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	68db      	ldr	r3, [r3, #12]
 8003660:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003662:	69fb      	ldr	r3, [r7, #28]
 8003664:	005b      	lsls	r3, r3, #1
 8003666:	2203      	movs	r2, #3
 8003668:	fa02 f303 	lsl.w	r3, r2, r3
 800366c:	43db      	mvns	r3, r3
 800366e:	69ba      	ldr	r2, [r7, #24]
 8003670:	4013      	ands	r3, r2
 8003672:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	689a      	ldr	r2, [r3, #8]
 8003678:	69fb      	ldr	r3, [r7, #28]
 800367a:	005b      	lsls	r3, r3, #1
 800367c:	fa02 f303 	lsl.w	r3, r2, r3
 8003680:	69ba      	ldr	r2, [r7, #24]
 8003682:	4313      	orrs	r3, r2
 8003684:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	69ba      	ldr	r2, [r7, #24]
 800368a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	f003 0303 	and.w	r3, r3, #3
 8003694:	2b02      	cmp	r3, #2
 8003696:	d123      	bne.n	80036e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003698:	69fb      	ldr	r3, [r7, #28]
 800369a:	08da      	lsrs	r2, r3, #3
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	3208      	adds	r2, #8
 80036a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80036a6:	69fb      	ldr	r3, [r7, #28]
 80036a8:	f003 0307 	and.w	r3, r3, #7
 80036ac:	009b      	lsls	r3, r3, #2
 80036ae:	220f      	movs	r2, #15
 80036b0:	fa02 f303 	lsl.w	r3, r2, r3
 80036b4:	43db      	mvns	r3, r3
 80036b6:	69ba      	ldr	r2, [r7, #24]
 80036b8:	4013      	ands	r3, r2
 80036ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	691a      	ldr	r2, [r3, #16]
 80036c0:	69fb      	ldr	r3, [r7, #28]
 80036c2:	f003 0307 	and.w	r3, r3, #7
 80036c6:	009b      	lsls	r3, r3, #2
 80036c8:	fa02 f303 	lsl.w	r3, r2, r3
 80036cc:	69ba      	ldr	r2, [r7, #24]
 80036ce:	4313      	orrs	r3, r2
 80036d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80036d2:	69fb      	ldr	r3, [r7, #28]
 80036d4:	08da      	lsrs	r2, r3, #3
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	3208      	adds	r2, #8
 80036da:	69b9      	ldr	r1, [r7, #24]
 80036dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80036e6:	69fb      	ldr	r3, [r7, #28]
 80036e8:	005b      	lsls	r3, r3, #1
 80036ea:	2203      	movs	r2, #3
 80036ec:	fa02 f303 	lsl.w	r3, r2, r3
 80036f0:	43db      	mvns	r3, r3
 80036f2:	69ba      	ldr	r2, [r7, #24]
 80036f4:	4013      	ands	r3, r2
 80036f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	f003 0203 	and.w	r2, r3, #3
 8003700:	69fb      	ldr	r3, [r7, #28]
 8003702:	005b      	lsls	r3, r3, #1
 8003704:	fa02 f303 	lsl.w	r3, r2, r3
 8003708:	69ba      	ldr	r2, [r7, #24]
 800370a:	4313      	orrs	r3, r2
 800370c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	69ba      	ldr	r2, [r7, #24]
 8003712:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800371c:	2b00      	cmp	r3, #0
 800371e:	f000 80c0 	beq.w	80038a2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003722:	2300      	movs	r3, #0
 8003724:	60fb      	str	r3, [r7, #12]
 8003726:	4b66      	ldr	r3, [pc, #408]	@ (80038c0 <HAL_GPIO_Init+0x324>)
 8003728:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800372a:	4a65      	ldr	r2, [pc, #404]	@ (80038c0 <HAL_GPIO_Init+0x324>)
 800372c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003730:	6453      	str	r3, [r2, #68]	@ 0x44
 8003732:	4b63      	ldr	r3, [pc, #396]	@ (80038c0 <HAL_GPIO_Init+0x324>)
 8003734:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003736:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800373a:	60fb      	str	r3, [r7, #12]
 800373c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800373e:	4a61      	ldr	r2, [pc, #388]	@ (80038c4 <HAL_GPIO_Init+0x328>)
 8003740:	69fb      	ldr	r3, [r7, #28]
 8003742:	089b      	lsrs	r3, r3, #2
 8003744:	3302      	adds	r3, #2
 8003746:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800374a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800374c:	69fb      	ldr	r3, [r7, #28]
 800374e:	f003 0303 	and.w	r3, r3, #3
 8003752:	009b      	lsls	r3, r3, #2
 8003754:	220f      	movs	r2, #15
 8003756:	fa02 f303 	lsl.w	r3, r2, r3
 800375a:	43db      	mvns	r3, r3
 800375c:	69ba      	ldr	r2, [r7, #24]
 800375e:	4013      	ands	r3, r2
 8003760:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	4a58      	ldr	r2, [pc, #352]	@ (80038c8 <HAL_GPIO_Init+0x32c>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d037      	beq.n	80037da <HAL_GPIO_Init+0x23e>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	4a57      	ldr	r2, [pc, #348]	@ (80038cc <HAL_GPIO_Init+0x330>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d031      	beq.n	80037d6 <HAL_GPIO_Init+0x23a>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	4a56      	ldr	r2, [pc, #344]	@ (80038d0 <HAL_GPIO_Init+0x334>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d02b      	beq.n	80037d2 <HAL_GPIO_Init+0x236>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	4a55      	ldr	r2, [pc, #340]	@ (80038d4 <HAL_GPIO_Init+0x338>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d025      	beq.n	80037ce <HAL_GPIO_Init+0x232>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	4a54      	ldr	r2, [pc, #336]	@ (80038d8 <HAL_GPIO_Init+0x33c>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d01f      	beq.n	80037ca <HAL_GPIO_Init+0x22e>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	4a53      	ldr	r2, [pc, #332]	@ (80038dc <HAL_GPIO_Init+0x340>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d019      	beq.n	80037c6 <HAL_GPIO_Init+0x22a>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	4a52      	ldr	r2, [pc, #328]	@ (80038e0 <HAL_GPIO_Init+0x344>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d013      	beq.n	80037c2 <HAL_GPIO_Init+0x226>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	4a51      	ldr	r2, [pc, #324]	@ (80038e4 <HAL_GPIO_Init+0x348>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d00d      	beq.n	80037be <HAL_GPIO_Init+0x222>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	4a50      	ldr	r2, [pc, #320]	@ (80038e8 <HAL_GPIO_Init+0x34c>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d007      	beq.n	80037ba <HAL_GPIO_Init+0x21e>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	4a4f      	ldr	r2, [pc, #316]	@ (80038ec <HAL_GPIO_Init+0x350>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d101      	bne.n	80037b6 <HAL_GPIO_Init+0x21a>
 80037b2:	2309      	movs	r3, #9
 80037b4:	e012      	b.n	80037dc <HAL_GPIO_Init+0x240>
 80037b6:	230a      	movs	r3, #10
 80037b8:	e010      	b.n	80037dc <HAL_GPIO_Init+0x240>
 80037ba:	2308      	movs	r3, #8
 80037bc:	e00e      	b.n	80037dc <HAL_GPIO_Init+0x240>
 80037be:	2307      	movs	r3, #7
 80037c0:	e00c      	b.n	80037dc <HAL_GPIO_Init+0x240>
 80037c2:	2306      	movs	r3, #6
 80037c4:	e00a      	b.n	80037dc <HAL_GPIO_Init+0x240>
 80037c6:	2305      	movs	r3, #5
 80037c8:	e008      	b.n	80037dc <HAL_GPIO_Init+0x240>
 80037ca:	2304      	movs	r3, #4
 80037cc:	e006      	b.n	80037dc <HAL_GPIO_Init+0x240>
 80037ce:	2303      	movs	r3, #3
 80037d0:	e004      	b.n	80037dc <HAL_GPIO_Init+0x240>
 80037d2:	2302      	movs	r3, #2
 80037d4:	e002      	b.n	80037dc <HAL_GPIO_Init+0x240>
 80037d6:	2301      	movs	r3, #1
 80037d8:	e000      	b.n	80037dc <HAL_GPIO_Init+0x240>
 80037da:	2300      	movs	r3, #0
 80037dc:	69fa      	ldr	r2, [r7, #28]
 80037de:	f002 0203 	and.w	r2, r2, #3
 80037e2:	0092      	lsls	r2, r2, #2
 80037e4:	4093      	lsls	r3, r2
 80037e6:	69ba      	ldr	r2, [r7, #24]
 80037e8:	4313      	orrs	r3, r2
 80037ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80037ec:	4935      	ldr	r1, [pc, #212]	@ (80038c4 <HAL_GPIO_Init+0x328>)
 80037ee:	69fb      	ldr	r3, [r7, #28]
 80037f0:	089b      	lsrs	r3, r3, #2
 80037f2:	3302      	adds	r3, #2
 80037f4:	69ba      	ldr	r2, [r7, #24]
 80037f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80037fa:	4b3d      	ldr	r3, [pc, #244]	@ (80038f0 <HAL_GPIO_Init+0x354>)
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003800:	693b      	ldr	r3, [r7, #16]
 8003802:	43db      	mvns	r3, r3
 8003804:	69ba      	ldr	r2, [r7, #24]
 8003806:	4013      	ands	r3, r2
 8003808:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003812:	2b00      	cmp	r3, #0
 8003814:	d003      	beq.n	800381e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003816:	69ba      	ldr	r2, [r7, #24]
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	4313      	orrs	r3, r2
 800381c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800381e:	4a34      	ldr	r2, [pc, #208]	@ (80038f0 <HAL_GPIO_Init+0x354>)
 8003820:	69bb      	ldr	r3, [r7, #24]
 8003822:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003824:	4b32      	ldr	r3, [pc, #200]	@ (80038f0 <HAL_GPIO_Init+0x354>)
 8003826:	68db      	ldr	r3, [r3, #12]
 8003828:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	43db      	mvns	r3, r3
 800382e:	69ba      	ldr	r2, [r7, #24]
 8003830:	4013      	ands	r3, r2
 8003832:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800383c:	2b00      	cmp	r3, #0
 800383e:	d003      	beq.n	8003848 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003840:	69ba      	ldr	r2, [r7, #24]
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	4313      	orrs	r3, r2
 8003846:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003848:	4a29      	ldr	r2, [pc, #164]	@ (80038f0 <HAL_GPIO_Init+0x354>)
 800384a:	69bb      	ldr	r3, [r7, #24]
 800384c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800384e:	4b28      	ldr	r3, [pc, #160]	@ (80038f0 <HAL_GPIO_Init+0x354>)
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003854:	693b      	ldr	r3, [r7, #16]
 8003856:	43db      	mvns	r3, r3
 8003858:	69ba      	ldr	r2, [r7, #24]
 800385a:	4013      	ands	r3, r2
 800385c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003866:	2b00      	cmp	r3, #0
 8003868:	d003      	beq.n	8003872 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800386a:	69ba      	ldr	r2, [r7, #24]
 800386c:	693b      	ldr	r3, [r7, #16]
 800386e:	4313      	orrs	r3, r2
 8003870:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003872:	4a1f      	ldr	r2, [pc, #124]	@ (80038f0 <HAL_GPIO_Init+0x354>)
 8003874:	69bb      	ldr	r3, [r7, #24]
 8003876:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003878:	4b1d      	ldr	r3, [pc, #116]	@ (80038f0 <HAL_GPIO_Init+0x354>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	43db      	mvns	r3, r3
 8003882:	69ba      	ldr	r2, [r7, #24]
 8003884:	4013      	ands	r3, r2
 8003886:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003890:	2b00      	cmp	r3, #0
 8003892:	d003      	beq.n	800389c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003894:	69ba      	ldr	r2, [r7, #24]
 8003896:	693b      	ldr	r3, [r7, #16]
 8003898:	4313      	orrs	r3, r2
 800389a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800389c:	4a14      	ldr	r2, [pc, #80]	@ (80038f0 <HAL_GPIO_Init+0x354>)
 800389e:	69bb      	ldr	r3, [r7, #24]
 80038a0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80038a2:	69fb      	ldr	r3, [r7, #28]
 80038a4:	3301      	adds	r3, #1
 80038a6:	61fb      	str	r3, [r7, #28]
 80038a8:	69fb      	ldr	r3, [r7, #28]
 80038aa:	2b0f      	cmp	r3, #15
 80038ac:	f67f ae84 	bls.w	80035b8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80038b0:	bf00      	nop
 80038b2:	bf00      	nop
 80038b4:	3724      	adds	r7, #36	@ 0x24
 80038b6:	46bd      	mov	sp, r7
 80038b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038bc:	4770      	bx	lr
 80038be:	bf00      	nop
 80038c0:	40023800 	.word	0x40023800
 80038c4:	40013800 	.word	0x40013800
 80038c8:	40020000 	.word	0x40020000
 80038cc:	40020400 	.word	0x40020400
 80038d0:	40020800 	.word	0x40020800
 80038d4:	40020c00 	.word	0x40020c00
 80038d8:	40021000 	.word	0x40021000
 80038dc:	40021400 	.word	0x40021400
 80038e0:	40021800 	.word	0x40021800
 80038e4:	40021c00 	.word	0x40021c00
 80038e8:	40022000 	.word	0x40022000
 80038ec:	40022400 	.word	0x40022400
 80038f0:	40013c00 	.word	0x40013c00

080038f4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b085      	sub	sp, #20
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
 80038fc:	460b      	mov	r3, r1
 80038fe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	691a      	ldr	r2, [r3, #16]
 8003904:	887b      	ldrh	r3, [r7, #2]
 8003906:	4013      	ands	r3, r2
 8003908:	2b00      	cmp	r3, #0
 800390a:	d002      	beq.n	8003912 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800390c:	2301      	movs	r3, #1
 800390e:	73fb      	strb	r3, [r7, #15]
 8003910:	e001      	b.n	8003916 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003912:	2300      	movs	r3, #0
 8003914:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003916:	7bfb      	ldrb	r3, [r7, #15]
}
 8003918:	4618      	mov	r0, r3
 800391a:	3714      	adds	r7, #20
 800391c:	46bd      	mov	sp, r7
 800391e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003922:	4770      	bx	lr

08003924 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003924:	b480      	push	{r7}
 8003926:	b083      	sub	sp, #12
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
 800392c:	460b      	mov	r3, r1
 800392e:	807b      	strh	r3, [r7, #2]
 8003930:	4613      	mov	r3, r2
 8003932:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003934:	787b      	ldrb	r3, [r7, #1]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d003      	beq.n	8003942 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800393a:	887a      	ldrh	r2, [r7, #2]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003940:	e003      	b.n	800394a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003942:	887b      	ldrh	r3, [r7, #2]
 8003944:	041a      	lsls	r2, r3, #16
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	619a      	str	r2, [r3, #24]
}
 800394a:	bf00      	nop
 800394c:	370c      	adds	r7, #12
 800394e:	46bd      	mov	sp, r7
 8003950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003954:	4770      	bx	lr
	...

08003958 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b086      	sub	sp, #24
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d101      	bne.n	800396a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	e267      	b.n	8003e3a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f003 0301 	and.w	r3, r3, #1
 8003972:	2b00      	cmp	r3, #0
 8003974:	d075      	beq.n	8003a62 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003976:	4b88      	ldr	r3, [pc, #544]	@ (8003b98 <HAL_RCC_OscConfig+0x240>)
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	f003 030c 	and.w	r3, r3, #12
 800397e:	2b04      	cmp	r3, #4
 8003980:	d00c      	beq.n	800399c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003982:	4b85      	ldr	r3, [pc, #532]	@ (8003b98 <HAL_RCC_OscConfig+0x240>)
 8003984:	689b      	ldr	r3, [r3, #8]
 8003986:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800398a:	2b08      	cmp	r3, #8
 800398c:	d112      	bne.n	80039b4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800398e:	4b82      	ldr	r3, [pc, #520]	@ (8003b98 <HAL_RCC_OscConfig+0x240>)
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003996:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800399a:	d10b      	bne.n	80039b4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800399c:	4b7e      	ldr	r3, [pc, #504]	@ (8003b98 <HAL_RCC_OscConfig+0x240>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d05b      	beq.n	8003a60 <HAL_RCC_OscConfig+0x108>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d157      	bne.n	8003a60 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80039b0:	2301      	movs	r3, #1
 80039b2:	e242      	b.n	8003e3a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80039bc:	d106      	bne.n	80039cc <HAL_RCC_OscConfig+0x74>
 80039be:	4b76      	ldr	r3, [pc, #472]	@ (8003b98 <HAL_RCC_OscConfig+0x240>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a75      	ldr	r2, [pc, #468]	@ (8003b98 <HAL_RCC_OscConfig+0x240>)
 80039c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039c8:	6013      	str	r3, [r2, #0]
 80039ca:	e01d      	b.n	8003a08 <HAL_RCC_OscConfig+0xb0>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80039d4:	d10c      	bne.n	80039f0 <HAL_RCC_OscConfig+0x98>
 80039d6:	4b70      	ldr	r3, [pc, #448]	@ (8003b98 <HAL_RCC_OscConfig+0x240>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a6f      	ldr	r2, [pc, #444]	@ (8003b98 <HAL_RCC_OscConfig+0x240>)
 80039dc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80039e0:	6013      	str	r3, [r2, #0]
 80039e2:	4b6d      	ldr	r3, [pc, #436]	@ (8003b98 <HAL_RCC_OscConfig+0x240>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a6c      	ldr	r2, [pc, #432]	@ (8003b98 <HAL_RCC_OscConfig+0x240>)
 80039e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039ec:	6013      	str	r3, [r2, #0]
 80039ee:	e00b      	b.n	8003a08 <HAL_RCC_OscConfig+0xb0>
 80039f0:	4b69      	ldr	r3, [pc, #420]	@ (8003b98 <HAL_RCC_OscConfig+0x240>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a68      	ldr	r2, [pc, #416]	@ (8003b98 <HAL_RCC_OscConfig+0x240>)
 80039f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80039fa:	6013      	str	r3, [r2, #0]
 80039fc:	4b66      	ldr	r3, [pc, #408]	@ (8003b98 <HAL_RCC_OscConfig+0x240>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a65      	ldr	r2, [pc, #404]	@ (8003b98 <HAL_RCC_OscConfig+0x240>)
 8003a02:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003a06:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d013      	beq.n	8003a38 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a10:	f7fe fa56 	bl	8001ec0 <HAL_GetTick>
 8003a14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a16:	e008      	b.n	8003a2a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a18:	f7fe fa52 	bl	8001ec0 <HAL_GetTick>
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	1ad3      	subs	r3, r2, r3
 8003a22:	2b64      	cmp	r3, #100	@ 0x64
 8003a24:	d901      	bls.n	8003a2a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003a26:	2303      	movs	r3, #3
 8003a28:	e207      	b.n	8003e3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a2a:	4b5b      	ldr	r3, [pc, #364]	@ (8003b98 <HAL_RCC_OscConfig+0x240>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d0f0      	beq.n	8003a18 <HAL_RCC_OscConfig+0xc0>
 8003a36:	e014      	b.n	8003a62 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a38:	f7fe fa42 	bl	8001ec0 <HAL_GetTick>
 8003a3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a3e:	e008      	b.n	8003a52 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a40:	f7fe fa3e 	bl	8001ec0 <HAL_GetTick>
 8003a44:	4602      	mov	r2, r0
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	1ad3      	subs	r3, r2, r3
 8003a4a:	2b64      	cmp	r3, #100	@ 0x64
 8003a4c:	d901      	bls.n	8003a52 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003a4e:	2303      	movs	r3, #3
 8003a50:	e1f3      	b.n	8003e3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a52:	4b51      	ldr	r3, [pc, #324]	@ (8003b98 <HAL_RCC_OscConfig+0x240>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d1f0      	bne.n	8003a40 <HAL_RCC_OscConfig+0xe8>
 8003a5e:	e000      	b.n	8003a62 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f003 0302 	and.w	r3, r3, #2
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d063      	beq.n	8003b36 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a6e:	4b4a      	ldr	r3, [pc, #296]	@ (8003b98 <HAL_RCC_OscConfig+0x240>)
 8003a70:	689b      	ldr	r3, [r3, #8]
 8003a72:	f003 030c 	and.w	r3, r3, #12
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d00b      	beq.n	8003a92 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a7a:	4b47      	ldr	r3, [pc, #284]	@ (8003b98 <HAL_RCC_OscConfig+0x240>)
 8003a7c:	689b      	ldr	r3, [r3, #8]
 8003a7e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a82:	2b08      	cmp	r3, #8
 8003a84:	d11c      	bne.n	8003ac0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a86:	4b44      	ldr	r3, [pc, #272]	@ (8003b98 <HAL_RCC_OscConfig+0x240>)
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d116      	bne.n	8003ac0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a92:	4b41      	ldr	r3, [pc, #260]	@ (8003b98 <HAL_RCC_OscConfig+0x240>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f003 0302 	and.w	r3, r3, #2
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d005      	beq.n	8003aaa <HAL_RCC_OscConfig+0x152>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	68db      	ldr	r3, [r3, #12]
 8003aa2:	2b01      	cmp	r3, #1
 8003aa4:	d001      	beq.n	8003aaa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e1c7      	b.n	8003e3a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003aaa:	4b3b      	ldr	r3, [pc, #236]	@ (8003b98 <HAL_RCC_OscConfig+0x240>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	691b      	ldr	r3, [r3, #16]
 8003ab6:	00db      	lsls	r3, r3, #3
 8003ab8:	4937      	ldr	r1, [pc, #220]	@ (8003b98 <HAL_RCC_OscConfig+0x240>)
 8003aba:	4313      	orrs	r3, r2
 8003abc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003abe:	e03a      	b.n	8003b36 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	68db      	ldr	r3, [r3, #12]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d020      	beq.n	8003b0a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ac8:	4b34      	ldr	r3, [pc, #208]	@ (8003b9c <HAL_RCC_OscConfig+0x244>)
 8003aca:	2201      	movs	r2, #1
 8003acc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ace:	f7fe f9f7 	bl	8001ec0 <HAL_GetTick>
 8003ad2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ad4:	e008      	b.n	8003ae8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ad6:	f7fe f9f3 	bl	8001ec0 <HAL_GetTick>
 8003ada:	4602      	mov	r2, r0
 8003adc:	693b      	ldr	r3, [r7, #16]
 8003ade:	1ad3      	subs	r3, r2, r3
 8003ae0:	2b02      	cmp	r3, #2
 8003ae2:	d901      	bls.n	8003ae8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003ae4:	2303      	movs	r3, #3
 8003ae6:	e1a8      	b.n	8003e3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ae8:	4b2b      	ldr	r3, [pc, #172]	@ (8003b98 <HAL_RCC_OscConfig+0x240>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f003 0302 	and.w	r3, r3, #2
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d0f0      	beq.n	8003ad6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003af4:	4b28      	ldr	r3, [pc, #160]	@ (8003b98 <HAL_RCC_OscConfig+0x240>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	691b      	ldr	r3, [r3, #16]
 8003b00:	00db      	lsls	r3, r3, #3
 8003b02:	4925      	ldr	r1, [pc, #148]	@ (8003b98 <HAL_RCC_OscConfig+0x240>)
 8003b04:	4313      	orrs	r3, r2
 8003b06:	600b      	str	r3, [r1, #0]
 8003b08:	e015      	b.n	8003b36 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b0a:	4b24      	ldr	r3, [pc, #144]	@ (8003b9c <HAL_RCC_OscConfig+0x244>)
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b10:	f7fe f9d6 	bl	8001ec0 <HAL_GetTick>
 8003b14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b16:	e008      	b.n	8003b2a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b18:	f7fe f9d2 	bl	8001ec0 <HAL_GetTick>
 8003b1c:	4602      	mov	r2, r0
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	1ad3      	subs	r3, r2, r3
 8003b22:	2b02      	cmp	r3, #2
 8003b24:	d901      	bls.n	8003b2a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003b26:	2303      	movs	r3, #3
 8003b28:	e187      	b.n	8003e3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b2a:	4b1b      	ldr	r3, [pc, #108]	@ (8003b98 <HAL_RCC_OscConfig+0x240>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f003 0302 	and.w	r3, r3, #2
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d1f0      	bne.n	8003b18 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f003 0308 	and.w	r3, r3, #8
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d036      	beq.n	8003bb0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	695b      	ldr	r3, [r3, #20]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d016      	beq.n	8003b78 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b4a:	4b15      	ldr	r3, [pc, #84]	@ (8003ba0 <HAL_RCC_OscConfig+0x248>)
 8003b4c:	2201      	movs	r2, #1
 8003b4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b50:	f7fe f9b6 	bl	8001ec0 <HAL_GetTick>
 8003b54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b56:	e008      	b.n	8003b6a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b58:	f7fe f9b2 	bl	8001ec0 <HAL_GetTick>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	1ad3      	subs	r3, r2, r3
 8003b62:	2b02      	cmp	r3, #2
 8003b64:	d901      	bls.n	8003b6a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003b66:	2303      	movs	r3, #3
 8003b68:	e167      	b.n	8003e3a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b6a:	4b0b      	ldr	r3, [pc, #44]	@ (8003b98 <HAL_RCC_OscConfig+0x240>)
 8003b6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b6e:	f003 0302 	and.w	r3, r3, #2
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d0f0      	beq.n	8003b58 <HAL_RCC_OscConfig+0x200>
 8003b76:	e01b      	b.n	8003bb0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b78:	4b09      	ldr	r3, [pc, #36]	@ (8003ba0 <HAL_RCC_OscConfig+0x248>)
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b7e:	f7fe f99f 	bl	8001ec0 <HAL_GetTick>
 8003b82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b84:	e00e      	b.n	8003ba4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b86:	f7fe f99b 	bl	8001ec0 <HAL_GetTick>
 8003b8a:	4602      	mov	r2, r0
 8003b8c:	693b      	ldr	r3, [r7, #16]
 8003b8e:	1ad3      	subs	r3, r2, r3
 8003b90:	2b02      	cmp	r3, #2
 8003b92:	d907      	bls.n	8003ba4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003b94:	2303      	movs	r3, #3
 8003b96:	e150      	b.n	8003e3a <HAL_RCC_OscConfig+0x4e2>
 8003b98:	40023800 	.word	0x40023800
 8003b9c:	42470000 	.word	0x42470000
 8003ba0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ba4:	4b88      	ldr	r3, [pc, #544]	@ (8003dc8 <HAL_RCC_OscConfig+0x470>)
 8003ba6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ba8:	f003 0302 	and.w	r3, r3, #2
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d1ea      	bne.n	8003b86 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f003 0304 	and.w	r3, r3, #4
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	f000 8097 	beq.w	8003cec <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bc2:	4b81      	ldr	r3, [pc, #516]	@ (8003dc8 <HAL_RCC_OscConfig+0x470>)
 8003bc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bc6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d10f      	bne.n	8003bee <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bce:	2300      	movs	r3, #0
 8003bd0:	60bb      	str	r3, [r7, #8]
 8003bd2:	4b7d      	ldr	r3, [pc, #500]	@ (8003dc8 <HAL_RCC_OscConfig+0x470>)
 8003bd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bd6:	4a7c      	ldr	r2, [pc, #496]	@ (8003dc8 <HAL_RCC_OscConfig+0x470>)
 8003bd8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003bdc:	6413      	str	r3, [r2, #64]	@ 0x40
 8003bde:	4b7a      	ldr	r3, [pc, #488]	@ (8003dc8 <HAL_RCC_OscConfig+0x470>)
 8003be0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003be2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003be6:	60bb      	str	r3, [r7, #8]
 8003be8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bea:	2301      	movs	r3, #1
 8003bec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bee:	4b77      	ldr	r3, [pc, #476]	@ (8003dcc <HAL_RCC_OscConfig+0x474>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d118      	bne.n	8003c2c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003bfa:	4b74      	ldr	r3, [pc, #464]	@ (8003dcc <HAL_RCC_OscConfig+0x474>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a73      	ldr	r2, [pc, #460]	@ (8003dcc <HAL_RCC_OscConfig+0x474>)
 8003c00:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c06:	f7fe f95b 	bl	8001ec0 <HAL_GetTick>
 8003c0a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c0c:	e008      	b.n	8003c20 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c0e:	f7fe f957 	bl	8001ec0 <HAL_GetTick>
 8003c12:	4602      	mov	r2, r0
 8003c14:	693b      	ldr	r3, [r7, #16]
 8003c16:	1ad3      	subs	r3, r2, r3
 8003c18:	2b02      	cmp	r3, #2
 8003c1a:	d901      	bls.n	8003c20 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003c1c:	2303      	movs	r3, #3
 8003c1e:	e10c      	b.n	8003e3a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c20:	4b6a      	ldr	r3, [pc, #424]	@ (8003dcc <HAL_RCC_OscConfig+0x474>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d0f0      	beq.n	8003c0e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	689b      	ldr	r3, [r3, #8]
 8003c30:	2b01      	cmp	r3, #1
 8003c32:	d106      	bne.n	8003c42 <HAL_RCC_OscConfig+0x2ea>
 8003c34:	4b64      	ldr	r3, [pc, #400]	@ (8003dc8 <HAL_RCC_OscConfig+0x470>)
 8003c36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c38:	4a63      	ldr	r2, [pc, #396]	@ (8003dc8 <HAL_RCC_OscConfig+0x470>)
 8003c3a:	f043 0301 	orr.w	r3, r3, #1
 8003c3e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c40:	e01c      	b.n	8003c7c <HAL_RCC_OscConfig+0x324>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	2b05      	cmp	r3, #5
 8003c48:	d10c      	bne.n	8003c64 <HAL_RCC_OscConfig+0x30c>
 8003c4a:	4b5f      	ldr	r3, [pc, #380]	@ (8003dc8 <HAL_RCC_OscConfig+0x470>)
 8003c4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c4e:	4a5e      	ldr	r2, [pc, #376]	@ (8003dc8 <HAL_RCC_OscConfig+0x470>)
 8003c50:	f043 0304 	orr.w	r3, r3, #4
 8003c54:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c56:	4b5c      	ldr	r3, [pc, #368]	@ (8003dc8 <HAL_RCC_OscConfig+0x470>)
 8003c58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c5a:	4a5b      	ldr	r2, [pc, #364]	@ (8003dc8 <HAL_RCC_OscConfig+0x470>)
 8003c5c:	f043 0301 	orr.w	r3, r3, #1
 8003c60:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c62:	e00b      	b.n	8003c7c <HAL_RCC_OscConfig+0x324>
 8003c64:	4b58      	ldr	r3, [pc, #352]	@ (8003dc8 <HAL_RCC_OscConfig+0x470>)
 8003c66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c68:	4a57      	ldr	r2, [pc, #348]	@ (8003dc8 <HAL_RCC_OscConfig+0x470>)
 8003c6a:	f023 0301 	bic.w	r3, r3, #1
 8003c6e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c70:	4b55      	ldr	r3, [pc, #340]	@ (8003dc8 <HAL_RCC_OscConfig+0x470>)
 8003c72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c74:	4a54      	ldr	r2, [pc, #336]	@ (8003dc8 <HAL_RCC_OscConfig+0x470>)
 8003c76:	f023 0304 	bic.w	r3, r3, #4
 8003c7a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d015      	beq.n	8003cb0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c84:	f7fe f91c 	bl	8001ec0 <HAL_GetTick>
 8003c88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c8a:	e00a      	b.n	8003ca2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c8c:	f7fe f918 	bl	8001ec0 <HAL_GetTick>
 8003c90:	4602      	mov	r2, r0
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	1ad3      	subs	r3, r2, r3
 8003c96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d901      	bls.n	8003ca2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003c9e:	2303      	movs	r3, #3
 8003ca0:	e0cb      	b.n	8003e3a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ca2:	4b49      	ldr	r3, [pc, #292]	@ (8003dc8 <HAL_RCC_OscConfig+0x470>)
 8003ca4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ca6:	f003 0302 	and.w	r3, r3, #2
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d0ee      	beq.n	8003c8c <HAL_RCC_OscConfig+0x334>
 8003cae:	e014      	b.n	8003cda <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cb0:	f7fe f906 	bl	8001ec0 <HAL_GetTick>
 8003cb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cb6:	e00a      	b.n	8003cce <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003cb8:	f7fe f902 	bl	8001ec0 <HAL_GetTick>
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	1ad3      	subs	r3, r2, r3
 8003cc2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d901      	bls.n	8003cce <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003cca:	2303      	movs	r3, #3
 8003ccc:	e0b5      	b.n	8003e3a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cce:	4b3e      	ldr	r3, [pc, #248]	@ (8003dc8 <HAL_RCC_OscConfig+0x470>)
 8003cd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cd2:	f003 0302 	and.w	r3, r3, #2
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d1ee      	bne.n	8003cb8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003cda:	7dfb      	ldrb	r3, [r7, #23]
 8003cdc:	2b01      	cmp	r3, #1
 8003cde:	d105      	bne.n	8003cec <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ce0:	4b39      	ldr	r3, [pc, #228]	@ (8003dc8 <HAL_RCC_OscConfig+0x470>)
 8003ce2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ce4:	4a38      	ldr	r2, [pc, #224]	@ (8003dc8 <HAL_RCC_OscConfig+0x470>)
 8003ce6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003cea:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	699b      	ldr	r3, [r3, #24]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	f000 80a1 	beq.w	8003e38 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003cf6:	4b34      	ldr	r3, [pc, #208]	@ (8003dc8 <HAL_RCC_OscConfig+0x470>)
 8003cf8:	689b      	ldr	r3, [r3, #8]
 8003cfa:	f003 030c 	and.w	r3, r3, #12
 8003cfe:	2b08      	cmp	r3, #8
 8003d00:	d05c      	beq.n	8003dbc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	699b      	ldr	r3, [r3, #24]
 8003d06:	2b02      	cmp	r3, #2
 8003d08:	d141      	bne.n	8003d8e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d0a:	4b31      	ldr	r3, [pc, #196]	@ (8003dd0 <HAL_RCC_OscConfig+0x478>)
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d10:	f7fe f8d6 	bl	8001ec0 <HAL_GetTick>
 8003d14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d16:	e008      	b.n	8003d2a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d18:	f7fe f8d2 	bl	8001ec0 <HAL_GetTick>
 8003d1c:	4602      	mov	r2, r0
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	1ad3      	subs	r3, r2, r3
 8003d22:	2b02      	cmp	r3, #2
 8003d24:	d901      	bls.n	8003d2a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003d26:	2303      	movs	r3, #3
 8003d28:	e087      	b.n	8003e3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d2a:	4b27      	ldr	r3, [pc, #156]	@ (8003dc8 <HAL_RCC_OscConfig+0x470>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d1f0      	bne.n	8003d18 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	69da      	ldr	r2, [r3, #28]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6a1b      	ldr	r3, [r3, #32]
 8003d3e:	431a      	orrs	r2, r3
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d44:	019b      	lsls	r3, r3, #6
 8003d46:	431a      	orrs	r2, r3
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d4c:	085b      	lsrs	r3, r3, #1
 8003d4e:	3b01      	subs	r3, #1
 8003d50:	041b      	lsls	r3, r3, #16
 8003d52:	431a      	orrs	r2, r3
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d58:	061b      	lsls	r3, r3, #24
 8003d5a:	491b      	ldr	r1, [pc, #108]	@ (8003dc8 <HAL_RCC_OscConfig+0x470>)
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d60:	4b1b      	ldr	r3, [pc, #108]	@ (8003dd0 <HAL_RCC_OscConfig+0x478>)
 8003d62:	2201      	movs	r2, #1
 8003d64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d66:	f7fe f8ab 	bl	8001ec0 <HAL_GetTick>
 8003d6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d6c:	e008      	b.n	8003d80 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d6e:	f7fe f8a7 	bl	8001ec0 <HAL_GetTick>
 8003d72:	4602      	mov	r2, r0
 8003d74:	693b      	ldr	r3, [r7, #16]
 8003d76:	1ad3      	subs	r3, r2, r3
 8003d78:	2b02      	cmp	r3, #2
 8003d7a:	d901      	bls.n	8003d80 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003d7c:	2303      	movs	r3, #3
 8003d7e:	e05c      	b.n	8003e3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d80:	4b11      	ldr	r3, [pc, #68]	@ (8003dc8 <HAL_RCC_OscConfig+0x470>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d0f0      	beq.n	8003d6e <HAL_RCC_OscConfig+0x416>
 8003d8c:	e054      	b.n	8003e38 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d8e:	4b10      	ldr	r3, [pc, #64]	@ (8003dd0 <HAL_RCC_OscConfig+0x478>)
 8003d90:	2200      	movs	r2, #0
 8003d92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d94:	f7fe f894 	bl	8001ec0 <HAL_GetTick>
 8003d98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d9a:	e008      	b.n	8003dae <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d9c:	f7fe f890 	bl	8001ec0 <HAL_GetTick>
 8003da0:	4602      	mov	r2, r0
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	1ad3      	subs	r3, r2, r3
 8003da6:	2b02      	cmp	r3, #2
 8003da8:	d901      	bls.n	8003dae <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003daa:	2303      	movs	r3, #3
 8003dac:	e045      	b.n	8003e3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dae:	4b06      	ldr	r3, [pc, #24]	@ (8003dc8 <HAL_RCC_OscConfig+0x470>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d1f0      	bne.n	8003d9c <HAL_RCC_OscConfig+0x444>
 8003dba:	e03d      	b.n	8003e38 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	699b      	ldr	r3, [r3, #24]
 8003dc0:	2b01      	cmp	r3, #1
 8003dc2:	d107      	bne.n	8003dd4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	e038      	b.n	8003e3a <HAL_RCC_OscConfig+0x4e2>
 8003dc8:	40023800 	.word	0x40023800
 8003dcc:	40007000 	.word	0x40007000
 8003dd0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003dd4:	4b1b      	ldr	r3, [pc, #108]	@ (8003e44 <HAL_RCC_OscConfig+0x4ec>)
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	699b      	ldr	r3, [r3, #24]
 8003dde:	2b01      	cmp	r3, #1
 8003de0:	d028      	beq.n	8003e34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003dec:	429a      	cmp	r2, r3
 8003dee:	d121      	bne.n	8003e34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dfa:	429a      	cmp	r2, r3
 8003dfc:	d11a      	bne.n	8003e34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003dfe:	68fa      	ldr	r2, [r7, #12]
 8003e00:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003e04:	4013      	ands	r3, r2
 8003e06:	687a      	ldr	r2, [r7, #4]
 8003e08:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003e0a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d111      	bne.n	8003e34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e1a:	085b      	lsrs	r3, r3, #1
 8003e1c:	3b01      	subs	r3, #1
 8003e1e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e20:	429a      	cmp	r2, r3
 8003e22:	d107      	bne.n	8003e34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e2e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e30:	429a      	cmp	r2, r3
 8003e32:	d001      	beq.n	8003e38 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003e34:	2301      	movs	r3, #1
 8003e36:	e000      	b.n	8003e3a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003e38:	2300      	movs	r3, #0
}
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	3718      	adds	r7, #24
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}
 8003e42:	bf00      	nop
 8003e44:	40023800 	.word	0x40023800

08003e48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b084      	sub	sp, #16
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
 8003e50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d101      	bne.n	8003e5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	e0cc      	b.n	8003ff6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e5c:	4b68      	ldr	r3, [pc, #416]	@ (8004000 <HAL_RCC_ClockConfig+0x1b8>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f003 030f 	and.w	r3, r3, #15
 8003e64:	683a      	ldr	r2, [r7, #0]
 8003e66:	429a      	cmp	r2, r3
 8003e68:	d90c      	bls.n	8003e84 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e6a:	4b65      	ldr	r3, [pc, #404]	@ (8004000 <HAL_RCC_ClockConfig+0x1b8>)
 8003e6c:	683a      	ldr	r2, [r7, #0]
 8003e6e:	b2d2      	uxtb	r2, r2
 8003e70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e72:	4b63      	ldr	r3, [pc, #396]	@ (8004000 <HAL_RCC_ClockConfig+0x1b8>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f003 030f 	and.w	r3, r3, #15
 8003e7a:	683a      	ldr	r2, [r7, #0]
 8003e7c:	429a      	cmp	r2, r3
 8003e7e:	d001      	beq.n	8003e84 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003e80:	2301      	movs	r3, #1
 8003e82:	e0b8      	b.n	8003ff6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f003 0302 	and.w	r3, r3, #2
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d020      	beq.n	8003ed2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f003 0304 	and.w	r3, r3, #4
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d005      	beq.n	8003ea8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e9c:	4b59      	ldr	r3, [pc, #356]	@ (8004004 <HAL_RCC_ClockConfig+0x1bc>)
 8003e9e:	689b      	ldr	r3, [r3, #8]
 8003ea0:	4a58      	ldr	r2, [pc, #352]	@ (8004004 <HAL_RCC_ClockConfig+0x1bc>)
 8003ea2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003ea6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f003 0308 	and.w	r3, r3, #8
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d005      	beq.n	8003ec0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003eb4:	4b53      	ldr	r3, [pc, #332]	@ (8004004 <HAL_RCC_ClockConfig+0x1bc>)
 8003eb6:	689b      	ldr	r3, [r3, #8]
 8003eb8:	4a52      	ldr	r2, [pc, #328]	@ (8004004 <HAL_RCC_ClockConfig+0x1bc>)
 8003eba:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003ebe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ec0:	4b50      	ldr	r3, [pc, #320]	@ (8004004 <HAL_RCC_ClockConfig+0x1bc>)
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	689b      	ldr	r3, [r3, #8]
 8003ecc:	494d      	ldr	r1, [pc, #308]	@ (8004004 <HAL_RCC_ClockConfig+0x1bc>)
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f003 0301 	and.w	r3, r3, #1
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d044      	beq.n	8003f68 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	2b01      	cmp	r3, #1
 8003ee4:	d107      	bne.n	8003ef6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ee6:	4b47      	ldr	r3, [pc, #284]	@ (8004004 <HAL_RCC_ClockConfig+0x1bc>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d119      	bne.n	8003f26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	e07f      	b.n	8003ff6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	2b02      	cmp	r3, #2
 8003efc:	d003      	beq.n	8003f06 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f02:	2b03      	cmp	r3, #3
 8003f04:	d107      	bne.n	8003f16 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f06:	4b3f      	ldr	r3, [pc, #252]	@ (8004004 <HAL_RCC_ClockConfig+0x1bc>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d109      	bne.n	8003f26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	e06f      	b.n	8003ff6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f16:	4b3b      	ldr	r3, [pc, #236]	@ (8004004 <HAL_RCC_ClockConfig+0x1bc>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f003 0302 	and.w	r3, r3, #2
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d101      	bne.n	8003f26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	e067      	b.n	8003ff6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f26:	4b37      	ldr	r3, [pc, #220]	@ (8004004 <HAL_RCC_ClockConfig+0x1bc>)
 8003f28:	689b      	ldr	r3, [r3, #8]
 8003f2a:	f023 0203 	bic.w	r2, r3, #3
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	4934      	ldr	r1, [pc, #208]	@ (8004004 <HAL_RCC_ClockConfig+0x1bc>)
 8003f34:	4313      	orrs	r3, r2
 8003f36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f38:	f7fd ffc2 	bl	8001ec0 <HAL_GetTick>
 8003f3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f3e:	e00a      	b.n	8003f56 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f40:	f7fd ffbe 	bl	8001ec0 <HAL_GetTick>
 8003f44:	4602      	mov	r2, r0
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	1ad3      	subs	r3, r2, r3
 8003f4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d901      	bls.n	8003f56 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f52:	2303      	movs	r3, #3
 8003f54:	e04f      	b.n	8003ff6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f56:	4b2b      	ldr	r3, [pc, #172]	@ (8004004 <HAL_RCC_ClockConfig+0x1bc>)
 8003f58:	689b      	ldr	r3, [r3, #8]
 8003f5a:	f003 020c 	and.w	r2, r3, #12
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	009b      	lsls	r3, r3, #2
 8003f64:	429a      	cmp	r2, r3
 8003f66:	d1eb      	bne.n	8003f40 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f68:	4b25      	ldr	r3, [pc, #148]	@ (8004000 <HAL_RCC_ClockConfig+0x1b8>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f003 030f 	and.w	r3, r3, #15
 8003f70:	683a      	ldr	r2, [r7, #0]
 8003f72:	429a      	cmp	r2, r3
 8003f74:	d20c      	bcs.n	8003f90 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f76:	4b22      	ldr	r3, [pc, #136]	@ (8004000 <HAL_RCC_ClockConfig+0x1b8>)
 8003f78:	683a      	ldr	r2, [r7, #0]
 8003f7a:	b2d2      	uxtb	r2, r2
 8003f7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f7e:	4b20      	ldr	r3, [pc, #128]	@ (8004000 <HAL_RCC_ClockConfig+0x1b8>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f003 030f 	and.w	r3, r3, #15
 8003f86:	683a      	ldr	r2, [r7, #0]
 8003f88:	429a      	cmp	r2, r3
 8003f8a:	d001      	beq.n	8003f90 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	e032      	b.n	8003ff6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f003 0304 	and.w	r3, r3, #4
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d008      	beq.n	8003fae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f9c:	4b19      	ldr	r3, [pc, #100]	@ (8004004 <HAL_RCC_ClockConfig+0x1bc>)
 8003f9e:	689b      	ldr	r3, [r3, #8]
 8003fa0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	68db      	ldr	r3, [r3, #12]
 8003fa8:	4916      	ldr	r1, [pc, #88]	@ (8004004 <HAL_RCC_ClockConfig+0x1bc>)
 8003faa:	4313      	orrs	r3, r2
 8003fac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f003 0308 	and.w	r3, r3, #8
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d009      	beq.n	8003fce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003fba:	4b12      	ldr	r3, [pc, #72]	@ (8004004 <HAL_RCC_ClockConfig+0x1bc>)
 8003fbc:	689b      	ldr	r3, [r3, #8]
 8003fbe:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	691b      	ldr	r3, [r3, #16]
 8003fc6:	00db      	lsls	r3, r3, #3
 8003fc8:	490e      	ldr	r1, [pc, #56]	@ (8004004 <HAL_RCC_ClockConfig+0x1bc>)
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003fce:	f000 f821 	bl	8004014 <HAL_RCC_GetSysClockFreq>
 8003fd2:	4602      	mov	r2, r0
 8003fd4:	4b0b      	ldr	r3, [pc, #44]	@ (8004004 <HAL_RCC_ClockConfig+0x1bc>)
 8003fd6:	689b      	ldr	r3, [r3, #8]
 8003fd8:	091b      	lsrs	r3, r3, #4
 8003fda:	f003 030f 	and.w	r3, r3, #15
 8003fde:	490a      	ldr	r1, [pc, #40]	@ (8004008 <HAL_RCC_ClockConfig+0x1c0>)
 8003fe0:	5ccb      	ldrb	r3, [r1, r3]
 8003fe2:	fa22 f303 	lsr.w	r3, r2, r3
 8003fe6:	4a09      	ldr	r2, [pc, #36]	@ (800400c <HAL_RCC_ClockConfig+0x1c4>)
 8003fe8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003fea:	4b09      	ldr	r3, [pc, #36]	@ (8004010 <HAL_RCC_ClockConfig+0x1c8>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4618      	mov	r0, r3
 8003ff0:	f7fd fab4 	bl	800155c <HAL_InitTick>

  return HAL_OK;
 8003ff4:	2300      	movs	r3, #0
}
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	3710      	adds	r7, #16
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bd80      	pop	{r7, pc}
 8003ffe:	bf00      	nop
 8004000:	40023c00 	.word	0x40023c00
 8004004:	40023800 	.word	0x40023800
 8004008:	0801affc 	.word	0x0801affc
 800400c:	20000000 	.word	0x20000000
 8004010:	20000004 	.word	0x20000004

08004014 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004014:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004018:	b094      	sub	sp, #80	@ 0x50
 800401a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800401c:	2300      	movs	r3, #0
 800401e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004020:	2300      	movs	r3, #0
 8004022:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004024:	2300      	movs	r3, #0
 8004026:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004028:	2300      	movs	r3, #0
 800402a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800402c:	4b79      	ldr	r3, [pc, #484]	@ (8004214 <HAL_RCC_GetSysClockFreq+0x200>)
 800402e:	689b      	ldr	r3, [r3, #8]
 8004030:	f003 030c 	and.w	r3, r3, #12
 8004034:	2b08      	cmp	r3, #8
 8004036:	d00d      	beq.n	8004054 <HAL_RCC_GetSysClockFreq+0x40>
 8004038:	2b08      	cmp	r3, #8
 800403a:	f200 80e1 	bhi.w	8004200 <HAL_RCC_GetSysClockFreq+0x1ec>
 800403e:	2b00      	cmp	r3, #0
 8004040:	d002      	beq.n	8004048 <HAL_RCC_GetSysClockFreq+0x34>
 8004042:	2b04      	cmp	r3, #4
 8004044:	d003      	beq.n	800404e <HAL_RCC_GetSysClockFreq+0x3a>
 8004046:	e0db      	b.n	8004200 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004048:	4b73      	ldr	r3, [pc, #460]	@ (8004218 <HAL_RCC_GetSysClockFreq+0x204>)
 800404a:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 800404c:	e0db      	b.n	8004206 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800404e:	4b73      	ldr	r3, [pc, #460]	@ (800421c <HAL_RCC_GetSysClockFreq+0x208>)
 8004050:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004052:	e0d8      	b.n	8004206 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004054:	4b6f      	ldr	r3, [pc, #444]	@ (8004214 <HAL_RCC_GetSysClockFreq+0x200>)
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800405c:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800405e:	4b6d      	ldr	r3, [pc, #436]	@ (8004214 <HAL_RCC_GetSysClockFreq+0x200>)
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004066:	2b00      	cmp	r3, #0
 8004068:	d063      	beq.n	8004132 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800406a:	4b6a      	ldr	r3, [pc, #424]	@ (8004214 <HAL_RCC_GetSysClockFreq+0x200>)
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	099b      	lsrs	r3, r3, #6
 8004070:	2200      	movs	r2, #0
 8004072:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004074:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004076:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004078:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800407c:	633b      	str	r3, [r7, #48]	@ 0x30
 800407e:	2300      	movs	r3, #0
 8004080:	637b      	str	r3, [r7, #52]	@ 0x34
 8004082:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004086:	4622      	mov	r2, r4
 8004088:	462b      	mov	r3, r5
 800408a:	f04f 0000 	mov.w	r0, #0
 800408e:	f04f 0100 	mov.w	r1, #0
 8004092:	0159      	lsls	r1, r3, #5
 8004094:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004098:	0150      	lsls	r0, r2, #5
 800409a:	4602      	mov	r2, r0
 800409c:	460b      	mov	r3, r1
 800409e:	4621      	mov	r1, r4
 80040a0:	1a51      	subs	r1, r2, r1
 80040a2:	6139      	str	r1, [r7, #16]
 80040a4:	4629      	mov	r1, r5
 80040a6:	eb63 0301 	sbc.w	r3, r3, r1
 80040aa:	617b      	str	r3, [r7, #20]
 80040ac:	f04f 0200 	mov.w	r2, #0
 80040b0:	f04f 0300 	mov.w	r3, #0
 80040b4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80040b8:	4659      	mov	r1, fp
 80040ba:	018b      	lsls	r3, r1, #6
 80040bc:	4651      	mov	r1, sl
 80040be:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80040c2:	4651      	mov	r1, sl
 80040c4:	018a      	lsls	r2, r1, #6
 80040c6:	4651      	mov	r1, sl
 80040c8:	ebb2 0801 	subs.w	r8, r2, r1
 80040cc:	4659      	mov	r1, fp
 80040ce:	eb63 0901 	sbc.w	r9, r3, r1
 80040d2:	f04f 0200 	mov.w	r2, #0
 80040d6:	f04f 0300 	mov.w	r3, #0
 80040da:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80040de:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80040e2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80040e6:	4690      	mov	r8, r2
 80040e8:	4699      	mov	r9, r3
 80040ea:	4623      	mov	r3, r4
 80040ec:	eb18 0303 	adds.w	r3, r8, r3
 80040f0:	60bb      	str	r3, [r7, #8]
 80040f2:	462b      	mov	r3, r5
 80040f4:	eb49 0303 	adc.w	r3, r9, r3
 80040f8:	60fb      	str	r3, [r7, #12]
 80040fa:	f04f 0200 	mov.w	r2, #0
 80040fe:	f04f 0300 	mov.w	r3, #0
 8004102:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004106:	4629      	mov	r1, r5
 8004108:	024b      	lsls	r3, r1, #9
 800410a:	4621      	mov	r1, r4
 800410c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004110:	4621      	mov	r1, r4
 8004112:	024a      	lsls	r2, r1, #9
 8004114:	4610      	mov	r0, r2
 8004116:	4619      	mov	r1, r3
 8004118:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800411a:	2200      	movs	r2, #0
 800411c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800411e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004120:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004124:	f7fc f8bc 	bl	80002a0 <__aeabi_uldivmod>
 8004128:	4602      	mov	r2, r0
 800412a:	460b      	mov	r3, r1
 800412c:	4613      	mov	r3, r2
 800412e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004130:	e058      	b.n	80041e4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004132:	4b38      	ldr	r3, [pc, #224]	@ (8004214 <HAL_RCC_GetSysClockFreq+0x200>)
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	099b      	lsrs	r3, r3, #6
 8004138:	2200      	movs	r2, #0
 800413a:	4618      	mov	r0, r3
 800413c:	4611      	mov	r1, r2
 800413e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004142:	623b      	str	r3, [r7, #32]
 8004144:	2300      	movs	r3, #0
 8004146:	627b      	str	r3, [r7, #36]	@ 0x24
 8004148:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800414c:	4642      	mov	r2, r8
 800414e:	464b      	mov	r3, r9
 8004150:	f04f 0000 	mov.w	r0, #0
 8004154:	f04f 0100 	mov.w	r1, #0
 8004158:	0159      	lsls	r1, r3, #5
 800415a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800415e:	0150      	lsls	r0, r2, #5
 8004160:	4602      	mov	r2, r0
 8004162:	460b      	mov	r3, r1
 8004164:	4641      	mov	r1, r8
 8004166:	ebb2 0a01 	subs.w	sl, r2, r1
 800416a:	4649      	mov	r1, r9
 800416c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004170:	f04f 0200 	mov.w	r2, #0
 8004174:	f04f 0300 	mov.w	r3, #0
 8004178:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800417c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004180:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004184:	ebb2 040a 	subs.w	r4, r2, sl
 8004188:	eb63 050b 	sbc.w	r5, r3, fp
 800418c:	f04f 0200 	mov.w	r2, #0
 8004190:	f04f 0300 	mov.w	r3, #0
 8004194:	00eb      	lsls	r3, r5, #3
 8004196:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800419a:	00e2      	lsls	r2, r4, #3
 800419c:	4614      	mov	r4, r2
 800419e:	461d      	mov	r5, r3
 80041a0:	4643      	mov	r3, r8
 80041a2:	18e3      	adds	r3, r4, r3
 80041a4:	603b      	str	r3, [r7, #0]
 80041a6:	464b      	mov	r3, r9
 80041a8:	eb45 0303 	adc.w	r3, r5, r3
 80041ac:	607b      	str	r3, [r7, #4]
 80041ae:	f04f 0200 	mov.w	r2, #0
 80041b2:	f04f 0300 	mov.w	r3, #0
 80041b6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80041ba:	4629      	mov	r1, r5
 80041bc:	028b      	lsls	r3, r1, #10
 80041be:	4621      	mov	r1, r4
 80041c0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80041c4:	4621      	mov	r1, r4
 80041c6:	028a      	lsls	r2, r1, #10
 80041c8:	4610      	mov	r0, r2
 80041ca:	4619      	mov	r1, r3
 80041cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80041ce:	2200      	movs	r2, #0
 80041d0:	61bb      	str	r3, [r7, #24]
 80041d2:	61fa      	str	r2, [r7, #28]
 80041d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80041d8:	f7fc f862 	bl	80002a0 <__aeabi_uldivmod>
 80041dc:	4602      	mov	r2, r0
 80041de:	460b      	mov	r3, r1
 80041e0:	4613      	mov	r3, r2
 80041e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80041e4:	4b0b      	ldr	r3, [pc, #44]	@ (8004214 <HAL_RCC_GetSysClockFreq+0x200>)
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	0c1b      	lsrs	r3, r3, #16
 80041ea:	f003 0303 	and.w	r3, r3, #3
 80041ee:	3301      	adds	r3, #1
 80041f0:	005b      	lsls	r3, r3, #1
 80041f2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 80041f4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80041f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80041f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80041fc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80041fe:	e002      	b.n	8004206 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004200:	4b05      	ldr	r3, [pc, #20]	@ (8004218 <HAL_RCC_GetSysClockFreq+0x204>)
 8004202:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004204:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004206:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004208:	4618      	mov	r0, r3
 800420a:	3750      	adds	r7, #80	@ 0x50
 800420c:	46bd      	mov	sp, r7
 800420e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004212:	bf00      	nop
 8004214:	40023800 	.word	0x40023800
 8004218:	00f42400 	.word	0x00f42400
 800421c:	007a1200 	.word	0x007a1200

08004220 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004220:	b480      	push	{r7}
 8004222:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004224:	4b03      	ldr	r3, [pc, #12]	@ (8004234 <HAL_RCC_GetHCLKFreq+0x14>)
 8004226:	681b      	ldr	r3, [r3, #0]
}
 8004228:	4618      	mov	r0, r3
 800422a:	46bd      	mov	sp, r7
 800422c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004230:	4770      	bx	lr
 8004232:	bf00      	nop
 8004234:	20000000 	.word	0x20000000

08004238 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800423c:	f7ff fff0 	bl	8004220 <HAL_RCC_GetHCLKFreq>
 8004240:	4602      	mov	r2, r0
 8004242:	4b05      	ldr	r3, [pc, #20]	@ (8004258 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004244:	689b      	ldr	r3, [r3, #8]
 8004246:	0a9b      	lsrs	r3, r3, #10
 8004248:	f003 0307 	and.w	r3, r3, #7
 800424c:	4903      	ldr	r1, [pc, #12]	@ (800425c <HAL_RCC_GetPCLK1Freq+0x24>)
 800424e:	5ccb      	ldrb	r3, [r1, r3]
 8004250:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004254:	4618      	mov	r0, r3
 8004256:	bd80      	pop	{r7, pc}
 8004258:	40023800 	.word	0x40023800
 800425c:	0801b00c 	.word	0x0801b00c

08004260 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004264:	f7ff ffdc 	bl	8004220 <HAL_RCC_GetHCLKFreq>
 8004268:	4602      	mov	r2, r0
 800426a:	4b05      	ldr	r3, [pc, #20]	@ (8004280 <HAL_RCC_GetPCLK2Freq+0x20>)
 800426c:	689b      	ldr	r3, [r3, #8]
 800426e:	0b5b      	lsrs	r3, r3, #13
 8004270:	f003 0307 	and.w	r3, r3, #7
 8004274:	4903      	ldr	r1, [pc, #12]	@ (8004284 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004276:	5ccb      	ldrb	r3, [r1, r3]
 8004278:	fa22 f303 	lsr.w	r3, r2, r3
}
 800427c:	4618      	mov	r0, r3
 800427e:	bd80      	pop	{r7, pc}
 8004280:	40023800 	.word	0x40023800
 8004284:	0801b00c 	.word	0x0801b00c

08004288 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004288:	b480      	push	{r7}
 800428a:	b083      	sub	sp, #12
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
 8004290:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	220f      	movs	r2, #15
 8004296:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004298:	4b12      	ldr	r3, [pc, #72]	@ (80042e4 <HAL_RCC_GetClockConfig+0x5c>)
 800429a:	689b      	ldr	r3, [r3, #8]
 800429c:	f003 0203 	and.w	r2, r3, #3
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80042a4:	4b0f      	ldr	r3, [pc, #60]	@ (80042e4 <HAL_RCC_GetClockConfig+0x5c>)
 80042a6:	689b      	ldr	r3, [r3, #8]
 80042a8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80042b0:	4b0c      	ldr	r3, [pc, #48]	@ (80042e4 <HAL_RCC_GetClockConfig+0x5c>)
 80042b2:	689b      	ldr	r3, [r3, #8]
 80042b4:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80042bc:	4b09      	ldr	r3, [pc, #36]	@ (80042e4 <HAL_RCC_GetClockConfig+0x5c>)
 80042be:	689b      	ldr	r3, [r3, #8]
 80042c0:	08db      	lsrs	r3, r3, #3
 80042c2:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80042ca:	4b07      	ldr	r3, [pc, #28]	@ (80042e8 <HAL_RCC_GetClockConfig+0x60>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f003 020f 	and.w	r2, r3, #15
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	601a      	str	r2, [r3, #0]
}
 80042d6:	bf00      	nop
 80042d8:	370c      	adds	r7, #12
 80042da:	46bd      	mov	sp, r7
 80042dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e0:	4770      	bx	lr
 80042e2:	bf00      	nop
 80042e4:	40023800 	.word	0x40023800
 80042e8:	40023c00 	.word	0x40023c00

080042ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b082      	sub	sp, #8
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d101      	bne.n	80042fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	e041      	b.n	8004382 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004304:	b2db      	uxtb	r3, r3
 8004306:	2b00      	cmp	r3, #0
 8004308:	d106      	bne.n	8004318 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2200      	movs	r2, #0
 800430e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004312:	6878      	ldr	r0, [r7, #4]
 8004314:	f000 f839 	bl	800438a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2202      	movs	r2, #2
 800431c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681a      	ldr	r2, [r3, #0]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	3304      	adds	r3, #4
 8004328:	4619      	mov	r1, r3
 800432a:	4610      	mov	r0, r2
 800432c:	f000 f9c0 	bl	80046b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2201      	movs	r2, #1
 8004334:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2201      	movs	r2, #1
 800433c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2201      	movs	r2, #1
 8004344:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2201      	movs	r2, #1
 800434c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2201      	movs	r2, #1
 8004354:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2201      	movs	r2, #1
 800435c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2201      	movs	r2, #1
 8004364:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2201      	movs	r2, #1
 800436c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2201      	movs	r2, #1
 8004374:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2201      	movs	r2, #1
 800437c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004380:	2300      	movs	r3, #0
}
 8004382:	4618      	mov	r0, r3
 8004384:	3708      	adds	r7, #8
 8004386:	46bd      	mov	sp, r7
 8004388:	bd80      	pop	{r7, pc}

0800438a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800438a:	b480      	push	{r7}
 800438c:	b083      	sub	sp, #12
 800438e:	af00      	add	r7, sp, #0
 8004390:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004392:	bf00      	nop
 8004394:	370c      	adds	r7, #12
 8004396:	46bd      	mov	sp, r7
 8004398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439c:	4770      	bx	lr
	...

080043a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80043a0:	b480      	push	{r7}
 80043a2:	b085      	sub	sp, #20
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80043ae:	b2db      	uxtb	r3, r3
 80043b0:	2b01      	cmp	r3, #1
 80043b2:	d001      	beq.n	80043b8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80043b4:	2301      	movs	r3, #1
 80043b6:	e04e      	b.n	8004456 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2202      	movs	r2, #2
 80043bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	68da      	ldr	r2, [r3, #12]
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f042 0201 	orr.w	r2, r2, #1
 80043ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a23      	ldr	r2, [pc, #140]	@ (8004464 <HAL_TIM_Base_Start_IT+0xc4>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d022      	beq.n	8004420 <HAL_TIM_Base_Start_IT+0x80>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80043e2:	d01d      	beq.n	8004420 <HAL_TIM_Base_Start_IT+0x80>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a1f      	ldr	r2, [pc, #124]	@ (8004468 <HAL_TIM_Base_Start_IT+0xc8>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d018      	beq.n	8004420 <HAL_TIM_Base_Start_IT+0x80>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a1e      	ldr	r2, [pc, #120]	@ (800446c <HAL_TIM_Base_Start_IT+0xcc>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d013      	beq.n	8004420 <HAL_TIM_Base_Start_IT+0x80>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a1c      	ldr	r2, [pc, #112]	@ (8004470 <HAL_TIM_Base_Start_IT+0xd0>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d00e      	beq.n	8004420 <HAL_TIM_Base_Start_IT+0x80>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a1b      	ldr	r2, [pc, #108]	@ (8004474 <HAL_TIM_Base_Start_IT+0xd4>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d009      	beq.n	8004420 <HAL_TIM_Base_Start_IT+0x80>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a19      	ldr	r2, [pc, #100]	@ (8004478 <HAL_TIM_Base_Start_IT+0xd8>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d004      	beq.n	8004420 <HAL_TIM_Base_Start_IT+0x80>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a18      	ldr	r2, [pc, #96]	@ (800447c <HAL_TIM_Base_Start_IT+0xdc>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d111      	bne.n	8004444 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	689b      	ldr	r3, [r3, #8]
 8004426:	f003 0307 	and.w	r3, r3, #7
 800442a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	2b06      	cmp	r3, #6
 8004430:	d010      	beq.n	8004454 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	681a      	ldr	r2, [r3, #0]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f042 0201 	orr.w	r2, r2, #1
 8004440:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004442:	e007      	b.n	8004454 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	681a      	ldr	r2, [r3, #0]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f042 0201 	orr.w	r2, r2, #1
 8004452:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004454:	2300      	movs	r3, #0
}
 8004456:	4618      	mov	r0, r3
 8004458:	3714      	adds	r7, #20
 800445a:	46bd      	mov	sp, r7
 800445c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004460:	4770      	bx	lr
 8004462:	bf00      	nop
 8004464:	40010000 	.word	0x40010000
 8004468:	40000400 	.word	0x40000400
 800446c:	40000800 	.word	0x40000800
 8004470:	40000c00 	.word	0x40000c00
 8004474:	40010400 	.word	0x40010400
 8004478:	40014000 	.word	0x40014000
 800447c:	40001800 	.word	0x40001800

08004480 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b084      	sub	sp, #16
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	68db      	ldr	r3, [r3, #12]
 800448e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	691b      	ldr	r3, [r3, #16]
 8004496:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	f003 0302 	and.w	r3, r3, #2
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d020      	beq.n	80044e4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	f003 0302 	and.w	r3, r3, #2
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d01b      	beq.n	80044e4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f06f 0202 	mvn.w	r2, #2
 80044b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2201      	movs	r2, #1
 80044ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	699b      	ldr	r3, [r3, #24]
 80044c2:	f003 0303 	and.w	r3, r3, #3
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d003      	beq.n	80044d2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80044ca:	6878      	ldr	r0, [r7, #4]
 80044cc:	f000 f8d2 	bl	8004674 <HAL_TIM_IC_CaptureCallback>
 80044d0:	e005      	b.n	80044de <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80044d2:	6878      	ldr	r0, [r7, #4]
 80044d4:	f000 f8c4 	bl	8004660 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044d8:	6878      	ldr	r0, [r7, #4]
 80044da:	f000 f8d5 	bl	8004688 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2200      	movs	r2, #0
 80044e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	f003 0304 	and.w	r3, r3, #4
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d020      	beq.n	8004530 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	f003 0304 	and.w	r3, r3, #4
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d01b      	beq.n	8004530 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f06f 0204 	mvn.w	r2, #4
 8004500:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2202      	movs	r2, #2
 8004506:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	699b      	ldr	r3, [r3, #24]
 800450e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004512:	2b00      	cmp	r3, #0
 8004514:	d003      	beq.n	800451e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004516:	6878      	ldr	r0, [r7, #4]
 8004518:	f000 f8ac 	bl	8004674 <HAL_TIM_IC_CaptureCallback>
 800451c:	e005      	b.n	800452a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800451e:	6878      	ldr	r0, [r7, #4]
 8004520:	f000 f89e 	bl	8004660 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004524:	6878      	ldr	r0, [r7, #4]
 8004526:	f000 f8af 	bl	8004688 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2200      	movs	r2, #0
 800452e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	f003 0308 	and.w	r3, r3, #8
 8004536:	2b00      	cmp	r3, #0
 8004538:	d020      	beq.n	800457c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	f003 0308 	and.w	r3, r3, #8
 8004540:	2b00      	cmp	r3, #0
 8004542:	d01b      	beq.n	800457c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f06f 0208 	mvn.w	r2, #8
 800454c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2204      	movs	r2, #4
 8004552:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	69db      	ldr	r3, [r3, #28]
 800455a:	f003 0303 	and.w	r3, r3, #3
 800455e:	2b00      	cmp	r3, #0
 8004560:	d003      	beq.n	800456a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004562:	6878      	ldr	r0, [r7, #4]
 8004564:	f000 f886 	bl	8004674 <HAL_TIM_IC_CaptureCallback>
 8004568:	e005      	b.n	8004576 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800456a:	6878      	ldr	r0, [r7, #4]
 800456c:	f000 f878 	bl	8004660 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004570:	6878      	ldr	r0, [r7, #4]
 8004572:	f000 f889 	bl	8004688 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2200      	movs	r2, #0
 800457a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	f003 0310 	and.w	r3, r3, #16
 8004582:	2b00      	cmp	r3, #0
 8004584:	d020      	beq.n	80045c8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	f003 0310 	and.w	r3, r3, #16
 800458c:	2b00      	cmp	r3, #0
 800458e:	d01b      	beq.n	80045c8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f06f 0210 	mvn.w	r2, #16
 8004598:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2208      	movs	r2, #8
 800459e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	69db      	ldr	r3, [r3, #28]
 80045a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d003      	beq.n	80045b6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045ae:	6878      	ldr	r0, [r7, #4]
 80045b0:	f000 f860 	bl	8004674 <HAL_TIM_IC_CaptureCallback>
 80045b4:	e005      	b.n	80045c2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045b6:	6878      	ldr	r0, [r7, #4]
 80045b8:	f000 f852 	bl	8004660 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045bc:	6878      	ldr	r0, [r7, #4]
 80045be:	f000 f863 	bl	8004688 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2200      	movs	r2, #0
 80045c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	f003 0301 	and.w	r3, r3, #1
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d00c      	beq.n	80045ec <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	f003 0301 	and.w	r3, r3, #1
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d007      	beq.n	80045ec <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f06f 0201 	mvn.w	r2, #1
 80045e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80045e6:	6878      	ldr	r0, [r7, #4]
 80045e8:	f7fc fb88 	bl	8000cfc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d00c      	beq.n	8004610 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d007      	beq.n	8004610 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004608:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800460a:	6878      	ldr	r0, [r7, #4]
 800460c:	f000 f906 	bl	800481c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004616:	2b00      	cmp	r3, #0
 8004618:	d00c      	beq.n	8004634 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004620:	2b00      	cmp	r3, #0
 8004622:	d007      	beq.n	8004634 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800462c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800462e:	6878      	ldr	r0, [r7, #4]
 8004630:	f000 f834 	bl	800469c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	f003 0320 	and.w	r3, r3, #32
 800463a:	2b00      	cmp	r3, #0
 800463c:	d00c      	beq.n	8004658 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	f003 0320 	and.w	r3, r3, #32
 8004644:	2b00      	cmp	r3, #0
 8004646:	d007      	beq.n	8004658 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f06f 0220 	mvn.w	r2, #32
 8004650:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004652:	6878      	ldr	r0, [r7, #4]
 8004654:	f000 f8d8 	bl	8004808 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004658:	bf00      	nop
 800465a:	3710      	adds	r7, #16
 800465c:	46bd      	mov	sp, r7
 800465e:	bd80      	pop	{r7, pc}

08004660 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004660:	b480      	push	{r7}
 8004662:	b083      	sub	sp, #12
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004668:	bf00      	nop
 800466a:	370c      	adds	r7, #12
 800466c:	46bd      	mov	sp, r7
 800466e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004672:	4770      	bx	lr

08004674 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004674:	b480      	push	{r7}
 8004676:	b083      	sub	sp, #12
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800467c:	bf00      	nop
 800467e:	370c      	adds	r7, #12
 8004680:	46bd      	mov	sp, r7
 8004682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004686:	4770      	bx	lr

08004688 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004688:	b480      	push	{r7}
 800468a:	b083      	sub	sp, #12
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004690:	bf00      	nop
 8004692:	370c      	adds	r7, #12
 8004694:	46bd      	mov	sp, r7
 8004696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469a:	4770      	bx	lr

0800469c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800469c:	b480      	push	{r7}
 800469e:	b083      	sub	sp, #12
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80046a4:	bf00      	nop
 80046a6:	370c      	adds	r7, #12
 80046a8:	46bd      	mov	sp, r7
 80046aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ae:	4770      	bx	lr

080046b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80046b0:	b480      	push	{r7}
 80046b2:	b085      	sub	sp, #20
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
 80046b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	4a46      	ldr	r2, [pc, #280]	@ (80047dc <TIM_Base_SetConfig+0x12c>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d013      	beq.n	80046f0 <TIM_Base_SetConfig+0x40>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046ce:	d00f      	beq.n	80046f0 <TIM_Base_SetConfig+0x40>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	4a43      	ldr	r2, [pc, #268]	@ (80047e0 <TIM_Base_SetConfig+0x130>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d00b      	beq.n	80046f0 <TIM_Base_SetConfig+0x40>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	4a42      	ldr	r2, [pc, #264]	@ (80047e4 <TIM_Base_SetConfig+0x134>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d007      	beq.n	80046f0 <TIM_Base_SetConfig+0x40>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	4a41      	ldr	r2, [pc, #260]	@ (80047e8 <TIM_Base_SetConfig+0x138>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d003      	beq.n	80046f0 <TIM_Base_SetConfig+0x40>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	4a40      	ldr	r2, [pc, #256]	@ (80047ec <TIM_Base_SetConfig+0x13c>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d108      	bne.n	8004702 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	68fa      	ldr	r2, [r7, #12]
 80046fe:	4313      	orrs	r3, r2
 8004700:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	4a35      	ldr	r2, [pc, #212]	@ (80047dc <TIM_Base_SetConfig+0x12c>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d02b      	beq.n	8004762 <TIM_Base_SetConfig+0xb2>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004710:	d027      	beq.n	8004762 <TIM_Base_SetConfig+0xb2>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	4a32      	ldr	r2, [pc, #200]	@ (80047e0 <TIM_Base_SetConfig+0x130>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d023      	beq.n	8004762 <TIM_Base_SetConfig+0xb2>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	4a31      	ldr	r2, [pc, #196]	@ (80047e4 <TIM_Base_SetConfig+0x134>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d01f      	beq.n	8004762 <TIM_Base_SetConfig+0xb2>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	4a30      	ldr	r2, [pc, #192]	@ (80047e8 <TIM_Base_SetConfig+0x138>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d01b      	beq.n	8004762 <TIM_Base_SetConfig+0xb2>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	4a2f      	ldr	r2, [pc, #188]	@ (80047ec <TIM_Base_SetConfig+0x13c>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d017      	beq.n	8004762 <TIM_Base_SetConfig+0xb2>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	4a2e      	ldr	r2, [pc, #184]	@ (80047f0 <TIM_Base_SetConfig+0x140>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d013      	beq.n	8004762 <TIM_Base_SetConfig+0xb2>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	4a2d      	ldr	r2, [pc, #180]	@ (80047f4 <TIM_Base_SetConfig+0x144>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d00f      	beq.n	8004762 <TIM_Base_SetConfig+0xb2>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	4a2c      	ldr	r2, [pc, #176]	@ (80047f8 <TIM_Base_SetConfig+0x148>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d00b      	beq.n	8004762 <TIM_Base_SetConfig+0xb2>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	4a2b      	ldr	r2, [pc, #172]	@ (80047fc <TIM_Base_SetConfig+0x14c>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d007      	beq.n	8004762 <TIM_Base_SetConfig+0xb2>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	4a2a      	ldr	r2, [pc, #168]	@ (8004800 <TIM_Base_SetConfig+0x150>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d003      	beq.n	8004762 <TIM_Base_SetConfig+0xb2>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	4a29      	ldr	r2, [pc, #164]	@ (8004804 <TIM_Base_SetConfig+0x154>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d108      	bne.n	8004774 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004768:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	68db      	ldr	r3, [r3, #12]
 800476e:	68fa      	ldr	r2, [r7, #12]
 8004770:	4313      	orrs	r3, r2
 8004772:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	695b      	ldr	r3, [r3, #20]
 800477e:	4313      	orrs	r3, r2
 8004780:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	68fa      	ldr	r2, [r7, #12]
 8004786:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	689a      	ldr	r2, [r3, #8]
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	681a      	ldr	r2, [r3, #0]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	4a10      	ldr	r2, [pc, #64]	@ (80047dc <TIM_Base_SetConfig+0x12c>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d003      	beq.n	80047a8 <TIM_Base_SetConfig+0xf8>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	4a12      	ldr	r2, [pc, #72]	@ (80047ec <TIM_Base_SetConfig+0x13c>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d103      	bne.n	80047b0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	691a      	ldr	r2, [r3, #16]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2201      	movs	r2, #1
 80047b4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	691b      	ldr	r3, [r3, #16]
 80047ba:	f003 0301 	and.w	r3, r3, #1
 80047be:	2b01      	cmp	r3, #1
 80047c0:	d105      	bne.n	80047ce <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	691b      	ldr	r3, [r3, #16]
 80047c6:	f023 0201 	bic.w	r2, r3, #1
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	611a      	str	r2, [r3, #16]
  }
}
 80047ce:	bf00      	nop
 80047d0:	3714      	adds	r7, #20
 80047d2:	46bd      	mov	sp, r7
 80047d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d8:	4770      	bx	lr
 80047da:	bf00      	nop
 80047dc:	40010000 	.word	0x40010000
 80047e0:	40000400 	.word	0x40000400
 80047e4:	40000800 	.word	0x40000800
 80047e8:	40000c00 	.word	0x40000c00
 80047ec:	40010400 	.word	0x40010400
 80047f0:	40014000 	.word	0x40014000
 80047f4:	40014400 	.word	0x40014400
 80047f8:	40014800 	.word	0x40014800
 80047fc:	40001800 	.word	0x40001800
 8004800:	40001c00 	.word	0x40001c00
 8004804:	40002000 	.word	0x40002000

08004808 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004808:	b480      	push	{r7}
 800480a:	b083      	sub	sp, #12
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004810:	bf00      	nop
 8004812:	370c      	adds	r7, #12
 8004814:	46bd      	mov	sp, r7
 8004816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481a:	4770      	bx	lr

0800481c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800481c:	b480      	push	{r7}
 800481e:	b083      	sub	sp, #12
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004824:	bf00      	nop
 8004826:	370c      	adds	r7, #12
 8004828:	46bd      	mov	sp, r7
 800482a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482e:	4770      	bx	lr

08004830 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b082      	sub	sp, #8
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d101      	bne.n	8004842 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800483e:	2301      	movs	r3, #1
 8004840:	e042      	b.n	80048c8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004848:	b2db      	uxtb	r3, r3
 800484a:	2b00      	cmp	r3, #0
 800484c:	d106      	bne.n	800485c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2200      	movs	r2, #0
 8004852:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004856:	6878      	ldr	r0, [r7, #4]
 8004858:	f7fc fe38 	bl	80014cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2224      	movs	r2, #36	@ 0x24
 8004860:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	68da      	ldr	r2, [r3, #12]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004872:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004874:	6878      	ldr	r0, [r7, #4]
 8004876:	f000 f973 	bl	8004b60 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	691a      	ldr	r2, [r3, #16]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004888:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	695a      	ldr	r2, [r3, #20]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004898:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	68da      	ldr	r2, [r3, #12]
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80048a8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2200      	movs	r2, #0
 80048ae:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2220      	movs	r2, #32
 80048b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2220      	movs	r2, #32
 80048bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2200      	movs	r2, #0
 80048c4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80048c6:	2300      	movs	r3, #0
}
 80048c8:	4618      	mov	r0, r3
 80048ca:	3708      	adds	r7, #8
 80048cc:	46bd      	mov	sp, r7
 80048ce:	bd80      	pop	{r7, pc}

080048d0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b08a      	sub	sp, #40	@ 0x28
 80048d4:	af02      	add	r7, sp, #8
 80048d6:	60f8      	str	r0, [r7, #12]
 80048d8:	60b9      	str	r1, [r7, #8]
 80048da:	603b      	str	r3, [r7, #0]
 80048dc:	4613      	mov	r3, r2
 80048de:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80048e0:	2300      	movs	r3, #0
 80048e2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80048ea:	b2db      	uxtb	r3, r3
 80048ec:	2b20      	cmp	r3, #32
 80048ee:	d175      	bne.n	80049dc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d002      	beq.n	80048fc <HAL_UART_Transmit+0x2c>
 80048f6:	88fb      	ldrh	r3, [r7, #6]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d101      	bne.n	8004900 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80048fc:	2301      	movs	r3, #1
 80048fe:	e06e      	b.n	80049de <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	2200      	movs	r2, #0
 8004904:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	2221      	movs	r2, #33	@ 0x21
 800490a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800490e:	f7fd fad7 	bl	8001ec0 <HAL_GetTick>
 8004912:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	88fa      	ldrh	r2, [r7, #6]
 8004918:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	88fa      	ldrh	r2, [r7, #6]
 800491e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	689b      	ldr	r3, [r3, #8]
 8004924:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004928:	d108      	bne.n	800493c <HAL_UART_Transmit+0x6c>
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	691b      	ldr	r3, [r3, #16]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d104      	bne.n	800493c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004932:	2300      	movs	r3, #0
 8004934:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004936:	68bb      	ldr	r3, [r7, #8]
 8004938:	61bb      	str	r3, [r7, #24]
 800493a:	e003      	b.n	8004944 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004940:	2300      	movs	r3, #0
 8004942:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004944:	e02e      	b.n	80049a4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	9300      	str	r3, [sp, #0]
 800494a:	697b      	ldr	r3, [r7, #20]
 800494c:	2200      	movs	r2, #0
 800494e:	2180      	movs	r1, #128	@ 0x80
 8004950:	68f8      	ldr	r0, [r7, #12]
 8004952:	f000 f848 	bl	80049e6 <UART_WaitOnFlagUntilTimeout>
 8004956:	4603      	mov	r3, r0
 8004958:	2b00      	cmp	r3, #0
 800495a:	d005      	beq.n	8004968 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	2220      	movs	r2, #32
 8004960:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004964:	2303      	movs	r3, #3
 8004966:	e03a      	b.n	80049de <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004968:	69fb      	ldr	r3, [r7, #28]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d10b      	bne.n	8004986 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800496e:	69bb      	ldr	r3, [r7, #24]
 8004970:	881b      	ldrh	r3, [r3, #0]
 8004972:	461a      	mov	r2, r3
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800497c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800497e:	69bb      	ldr	r3, [r7, #24]
 8004980:	3302      	adds	r3, #2
 8004982:	61bb      	str	r3, [r7, #24]
 8004984:	e007      	b.n	8004996 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004986:	69fb      	ldr	r3, [r7, #28]
 8004988:	781a      	ldrb	r2, [r3, #0]
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004990:	69fb      	ldr	r3, [r7, #28]
 8004992:	3301      	adds	r3, #1
 8004994:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800499a:	b29b      	uxth	r3, r3
 800499c:	3b01      	subs	r3, #1
 800499e:	b29a      	uxth	r2, r3
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80049a8:	b29b      	uxth	r3, r3
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d1cb      	bne.n	8004946 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	9300      	str	r3, [sp, #0]
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	2200      	movs	r2, #0
 80049b6:	2140      	movs	r1, #64	@ 0x40
 80049b8:	68f8      	ldr	r0, [r7, #12]
 80049ba:	f000 f814 	bl	80049e6 <UART_WaitOnFlagUntilTimeout>
 80049be:	4603      	mov	r3, r0
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d005      	beq.n	80049d0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	2220      	movs	r2, #32
 80049c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80049cc:	2303      	movs	r3, #3
 80049ce:	e006      	b.n	80049de <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	2220      	movs	r2, #32
 80049d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80049d8:	2300      	movs	r3, #0
 80049da:	e000      	b.n	80049de <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80049dc:	2302      	movs	r3, #2
  }
}
 80049de:	4618      	mov	r0, r3
 80049e0:	3720      	adds	r7, #32
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bd80      	pop	{r7, pc}

080049e6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80049e6:	b580      	push	{r7, lr}
 80049e8:	b086      	sub	sp, #24
 80049ea:	af00      	add	r7, sp, #0
 80049ec:	60f8      	str	r0, [r7, #12]
 80049ee:	60b9      	str	r1, [r7, #8]
 80049f0:	603b      	str	r3, [r7, #0]
 80049f2:	4613      	mov	r3, r2
 80049f4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049f6:	e03b      	b.n	8004a70 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049f8:	6a3b      	ldr	r3, [r7, #32]
 80049fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049fe:	d037      	beq.n	8004a70 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a00:	f7fd fa5e 	bl	8001ec0 <HAL_GetTick>
 8004a04:	4602      	mov	r2, r0
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	1ad3      	subs	r3, r2, r3
 8004a0a:	6a3a      	ldr	r2, [r7, #32]
 8004a0c:	429a      	cmp	r2, r3
 8004a0e:	d302      	bcc.n	8004a16 <UART_WaitOnFlagUntilTimeout+0x30>
 8004a10:	6a3b      	ldr	r3, [r7, #32]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d101      	bne.n	8004a1a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004a16:	2303      	movs	r3, #3
 8004a18:	e03a      	b.n	8004a90 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	68db      	ldr	r3, [r3, #12]
 8004a20:	f003 0304 	and.w	r3, r3, #4
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d023      	beq.n	8004a70 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	2b80      	cmp	r3, #128	@ 0x80
 8004a2c:	d020      	beq.n	8004a70 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004a2e:	68bb      	ldr	r3, [r7, #8]
 8004a30:	2b40      	cmp	r3, #64	@ 0x40
 8004a32:	d01d      	beq.n	8004a70 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f003 0308 	and.w	r3, r3, #8
 8004a3e:	2b08      	cmp	r3, #8
 8004a40:	d116      	bne.n	8004a70 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004a42:	2300      	movs	r3, #0
 8004a44:	617b      	str	r3, [r7, #20]
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	617b      	str	r3, [r7, #20]
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	617b      	str	r3, [r7, #20]
 8004a56:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004a58:	68f8      	ldr	r0, [r7, #12]
 8004a5a:	f000 f81d 	bl	8004a98 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	2208      	movs	r2, #8
 8004a62:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	2200      	movs	r2, #0
 8004a68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	e00f      	b.n	8004a90 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	681a      	ldr	r2, [r3, #0]
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	4013      	ands	r3, r2
 8004a7a:	68ba      	ldr	r2, [r7, #8]
 8004a7c:	429a      	cmp	r2, r3
 8004a7e:	bf0c      	ite	eq
 8004a80:	2301      	moveq	r3, #1
 8004a82:	2300      	movne	r3, #0
 8004a84:	b2db      	uxtb	r3, r3
 8004a86:	461a      	mov	r2, r3
 8004a88:	79fb      	ldrb	r3, [r7, #7]
 8004a8a:	429a      	cmp	r2, r3
 8004a8c:	d0b4      	beq.n	80049f8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004a8e:	2300      	movs	r3, #0
}
 8004a90:	4618      	mov	r0, r3
 8004a92:	3718      	adds	r7, #24
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bd80      	pop	{r7, pc}

08004a98 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b095      	sub	sp, #84	@ 0x54
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	330c      	adds	r3, #12
 8004aa6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aa8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004aaa:	e853 3f00 	ldrex	r3, [r3]
 8004aae:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004ab0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ab2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004ab6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	330c      	adds	r3, #12
 8004abe:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004ac0:	643a      	str	r2, [r7, #64]	@ 0x40
 8004ac2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ac4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004ac6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004ac8:	e841 2300 	strex	r3, r2, [r1]
 8004acc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004ace:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d1e5      	bne.n	8004aa0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	3314      	adds	r3, #20
 8004ada:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004adc:	6a3b      	ldr	r3, [r7, #32]
 8004ade:	e853 3f00 	ldrex	r3, [r3]
 8004ae2:	61fb      	str	r3, [r7, #28]
   return(result);
 8004ae4:	69fb      	ldr	r3, [r7, #28]
 8004ae6:	f023 0301 	bic.w	r3, r3, #1
 8004aea:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	3314      	adds	r3, #20
 8004af2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004af4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004af6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004af8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004afa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004afc:	e841 2300 	strex	r3, r2, [r1]
 8004b00:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004b02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d1e5      	bne.n	8004ad4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b0c:	2b01      	cmp	r3, #1
 8004b0e:	d119      	bne.n	8004b44 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	330c      	adds	r3, #12
 8004b16:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	e853 3f00 	ldrex	r3, [r3]
 8004b1e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	f023 0310 	bic.w	r3, r3, #16
 8004b26:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	330c      	adds	r3, #12
 8004b2e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004b30:	61ba      	str	r2, [r7, #24]
 8004b32:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b34:	6979      	ldr	r1, [r7, #20]
 8004b36:	69ba      	ldr	r2, [r7, #24]
 8004b38:	e841 2300 	strex	r3, r2, [r1]
 8004b3c:	613b      	str	r3, [r7, #16]
   return(result);
 8004b3e:	693b      	ldr	r3, [r7, #16]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d1e5      	bne.n	8004b10 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2220      	movs	r2, #32
 8004b48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004b52:	bf00      	nop
 8004b54:	3754      	adds	r7, #84	@ 0x54
 8004b56:	46bd      	mov	sp, r7
 8004b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5c:	4770      	bx	lr
	...

08004b60 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b64:	b0c0      	sub	sp, #256	@ 0x100
 8004b66:	af00      	add	r7, sp, #0
 8004b68:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	691b      	ldr	r3, [r3, #16]
 8004b74:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004b78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b7c:	68d9      	ldr	r1, [r3, #12]
 8004b7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b82:	681a      	ldr	r2, [r3, #0]
 8004b84:	ea40 0301 	orr.w	r3, r0, r1
 8004b88:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004b8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b8e:	689a      	ldr	r2, [r3, #8]
 8004b90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b94:	691b      	ldr	r3, [r3, #16]
 8004b96:	431a      	orrs	r2, r3
 8004b98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b9c:	695b      	ldr	r3, [r3, #20]
 8004b9e:	431a      	orrs	r2, r3
 8004ba0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ba4:	69db      	ldr	r3, [r3, #28]
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004bac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	68db      	ldr	r3, [r3, #12]
 8004bb4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004bb8:	f021 010c 	bic.w	r1, r1, #12
 8004bbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bc0:	681a      	ldr	r2, [r3, #0]
 8004bc2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004bc6:	430b      	orrs	r3, r1
 8004bc8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004bca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	695b      	ldr	r3, [r3, #20]
 8004bd2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004bd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bda:	6999      	ldr	r1, [r3, #24]
 8004bdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004be0:	681a      	ldr	r2, [r3, #0]
 8004be2:	ea40 0301 	orr.w	r3, r0, r1
 8004be6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004be8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bec:	681a      	ldr	r2, [r3, #0]
 8004bee:	4b8f      	ldr	r3, [pc, #572]	@ (8004e2c <UART_SetConfig+0x2cc>)
 8004bf0:	429a      	cmp	r2, r3
 8004bf2:	d005      	beq.n	8004c00 <UART_SetConfig+0xa0>
 8004bf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bf8:	681a      	ldr	r2, [r3, #0]
 8004bfa:	4b8d      	ldr	r3, [pc, #564]	@ (8004e30 <UART_SetConfig+0x2d0>)
 8004bfc:	429a      	cmp	r2, r3
 8004bfe:	d104      	bne.n	8004c0a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004c00:	f7ff fb2e 	bl	8004260 <HAL_RCC_GetPCLK2Freq>
 8004c04:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004c08:	e003      	b.n	8004c12 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004c0a:	f7ff fb15 	bl	8004238 <HAL_RCC_GetPCLK1Freq>
 8004c0e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c16:	69db      	ldr	r3, [r3, #28]
 8004c18:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004c1c:	f040 810c 	bne.w	8004e38 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004c20:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004c24:	2200      	movs	r2, #0
 8004c26:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004c2a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004c2e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004c32:	4622      	mov	r2, r4
 8004c34:	462b      	mov	r3, r5
 8004c36:	1891      	adds	r1, r2, r2
 8004c38:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004c3a:	415b      	adcs	r3, r3
 8004c3c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004c3e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004c42:	4621      	mov	r1, r4
 8004c44:	eb12 0801 	adds.w	r8, r2, r1
 8004c48:	4629      	mov	r1, r5
 8004c4a:	eb43 0901 	adc.w	r9, r3, r1
 8004c4e:	f04f 0200 	mov.w	r2, #0
 8004c52:	f04f 0300 	mov.w	r3, #0
 8004c56:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004c5a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004c5e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004c62:	4690      	mov	r8, r2
 8004c64:	4699      	mov	r9, r3
 8004c66:	4623      	mov	r3, r4
 8004c68:	eb18 0303 	adds.w	r3, r8, r3
 8004c6c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004c70:	462b      	mov	r3, r5
 8004c72:	eb49 0303 	adc.w	r3, r9, r3
 8004c76:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004c7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	2200      	movs	r2, #0
 8004c82:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004c86:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004c8a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004c8e:	460b      	mov	r3, r1
 8004c90:	18db      	adds	r3, r3, r3
 8004c92:	653b      	str	r3, [r7, #80]	@ 0x50
 8004c94:	4613      	mov	r3, r2
 8004c96:	eb42 0303 	adc.w	r3, r2, r3
 8004c9a:	657b      	str	r3, [r7, #84]	@ 0x54
 8004c9c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004ca0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004ca4:	f7fb fafc 	bl	80002a0 <__aeabi_uldivmod>
 8004ca8:	4602      	mov	r2, r0
 8004caa:	460b      	mov	r3, r1
 8004cac:	4b61      	ldr	r3, [pc, #388]	@ (8004e34 <UART_SetConfig+0x2d4>)
 8004cae:	fba3 2302 	umull	r2, r3, r3, r2
 8004cb2:	095b      	lsrs	r3, r3, #5
 8004cb4:	011c      	lsls	r4, r3, #4
 8004cb6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004cba:	2200      	movs	r2, #0
 8004cbc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004cc0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004cc4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004cc8:	4642      	mov	r2, r8
 8004cca:	464b      	mov	r3, r9
 8004ccc:	1891      	adds	r1, r2, r2
 8004cce:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004cd0:	415b      	adcs	r3, r3
 8004cd2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004cd4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004cd8:	4641      	mov	r1, r8
 8004cda:	eb12 0a01 	adds.w	sl, r2, r1
 8004cde:	4649      	mov	r1, r9
 8004ce0:	eb43 0b01 	adc.w	fp, r3, r1
 8004ce4:	f04f 0200 	mov.w	r2, #0
 8004ce8:	f04f 0300 	mov.w	r3, #0
 8004cec:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004cf0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004cf4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004cf8:	4692      	mov	sl, r2
 8004cfa:	469b      	mov	fp, r3
 8004cfc:	4643      	mov	r3, r8
 8004cfe:	eb1a 0303 	adds.w	r3, sl, r3
 8004d02:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004d06:	464b      	mov	r3, r9
 8004d08:	eb4b 0303 	adc.w	r3, fp, r3
 8004d0c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004d10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d14:	685b      	ldr	r3, [r3, #4]
 8004d16:	2200      	movs	r2, #0
 8004d18:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004d1c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004d20:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004d24:	460b      	mov	r3, r1
 8004d26:	18db      	adds	r3, r3, r3
 8004d28:	643b      	str	r3, [r7, #64]	@ 0x40
 8004d2a:	4613      	mov	r3, r2
 8004d2c:	eb42 0303 	adc.w	r3, r2, r3
 8004d30:	647b      	str	r3, [r7, #68]	@ 0x44
 8004d32:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004d36:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004d3a:	f7fb fab1 	bl	80002a0 <__aeabi_uldivmod>
 8004d3e:	4602      	mov	r2, r0
 8004d40:	460b      	mov	r3, r1
 8004d42:	4611      	mov	r1, r2
 8004d44:	4b3b      	ldr	r3, [pc, #236]	@ (8004e34 <UART_SetConfig+0x2d4>)
 8004d46:	fba3 2301 	umull	r2, r3, r3, r1
 8004d4a:	095b      	lsrs	r3, r3, #5
 8004d4c:	2264      	movs	r2, #100	@ 0x64
 8004d4e:	fb02 f303 	mul.w	r3, r2, r3
 8004d52:	1acb      	subs	r3, r1, r3
 8004d54:	00db      	lsls	r3, r3, #3
 8004d56:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004d5a:	4b36      	ldr	r3, [pc, #216]	@ (8004e34 <UART_SetConfig+0x2d4>)
 8004d5c:	fba3 2302 	umull	r2, r3, r3, r2
 8004d60:	095b      	lsrs	r3, r3, #5
 8004d62:	005b      	lsls	r3, r3, #1
 8004d64:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004d68:	441c      	add	r4, r3
 8004d6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004d6e:	2200      	movs	r2, #0
 8004d70:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004d74:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004d78:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004d7c:	4642      	mov	r2, r8
 8004d7e:	464b      	mov	r3, r9
 8004d80:	1891      	adds	r1, r2, r2
 8004d82:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004d84:	415b      	adcs	r3, r3
 8004d86:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004d88:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004d8c:	4641      	mov	r1, r8
 8004d8e:	1851      	adds	r1, r2, r1
 8004d90:	6339      	str	r1, [r7, #48]	@ 0x30
 8004d92:	4649      	mov	r1, r9
 8004d94:	414b      	adcs	r3, r1
 8004d96:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d98:	f04f 0200 	mov.w	r2, #0
 8004d9c:	f04f 0300 	mov.w	r3, #0
 8004da0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004da4:	4659      	mov	r1, fp
 8004da6:	00cb      	lsls	r3, r1, #3
 8004da8:	4651      	mov	r1, sl
 8004daa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004dae:	4651      	mov	r1, sl
 8004db0:	00ca      	lsls	r2, r1, #3
 8004db2:	4610      	mov	r0, r2
 8004db4:	4619      	mov	r1, r3
 8004db6:	4603      	mov	r3, r0
 8004db8:	4642      	mov	r2, r8
 8004dba:	189b      	adds	r3, r3, r2
 8004dbc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004dc0:	464b      	mov	r3, r9
 8004dc2:	460a      	mov	r2, r1
 8004dc4:	eb42 0303 	adc.w	r3, r2, r3
 8004dc8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004dcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004dd0:	685b      	ldr	r3, [r3, #4]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004dd8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004ddc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004de0:	460b      	mov	r3, r1
 8004de2:	18db      	adds	r3, r3, r3
 8004de4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004de6:	4613      	mov	r3, r2
 8004de8:	eb42 0303 	adc.w	r3, r2, r3
 8004dec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004dee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004df2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004df6:	f7fb fa53 	bl	80002a0 <__aeabi_uldivmod>
 8004dfa:	4602      	mov	r2, r0
 8004dfc:	460b      	mov	r3, r1
 8004dfe:	4b0d      	ldr	r3, [pc, #52]	@ (8004e34 <UART_SetConfig+0x2d4>)
 8004e00:	fba3 1302 	umull	r1, r3, r3, r2
 8004e04:	095b      	lsrs	r3, r3, #5
 8004e06:	2164      	movs	r1, #100	@ 0x64
 8004e08:	fb01 f303 	mul.w	r3, r1, r3
 8004e0c:	1ad3      	subs	r3, r2, r3
 8004e0e:	00db      	lsls	r3, r3, #3
 8004e10:	3332      	adds	r3, #50	@ 0x32
 8004e12:	4a08      	ldr	r2, [pc, #32]	@ (8004e34 <UART_SetConfig+0x2d4>)
 8004e14:	fba2 2303 	umull	r2, r3, r2, r3
 8004e18:	095b      	lsrs	r3, r3, #5
 8004e1a:	f003 0207 	and.w	r2, r3, #7
 8004e1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4422      	add	r2, r4
 8004e26:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004e28:	e106      	b.n	8005038 <UART_SetConfig+0x4d8>
 8004e2a:	bf00      	nop
 8004e2c:	40011000 	.word	0x40011000
 8004e30:	40011400 	.word	0x40011400
 8004e34:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004e38:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004e42:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004e46:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004e4a:	4642      	mov	r2, r8
 8004e4c:	464b      	mov	r3, r9
 8004e4e:	1891      	adds	r1, r2, r2
 8004e50:	6239      	str	r1, [r7, #32]
 8004e52:	415b      	adcs	r3, r3
 8004e54:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e56:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004e5a:	4641      	mov	r1, r8
 8004e5c:	1854      	adds	r4, r2, r1
 8004e5e:	4649      	mov	r1, r9
 8004e60:	eb43 0501 	adc.w	r5, r3, r1
 8004e64:	f04f 0200 	mov.w	r2, #0
 8004e68:	f04f 0300 	mov.w	r3, #0
 8004e6c:	00eb      	lsls	r3, r5, #3
 8004e6e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004e72:	00e2      	lsls	r2, r4, #3
 8004e74:	4614      	mov	r4, r2
 8004e76:	461d      	mov	r5, r3
 8004e78:	4643      	mov	r3, r8
 8004e7a:	18e3      	adds	r3, r4, r3
 8004e7c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004e80:	464b      	mov	r3, r9
 8004e82:	eb45 0303 	adc.w	r3, r5, r3
 8004e86:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004e8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	2200      	movs	r2, #0
 8004e92:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004e96:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004e9a:	f04f 0200 	mov.w	r2, #0
 8004e9e:	f04f 0300 	mov.w	r3, #0
 8004ea2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004ea6:	4629      	mov	r1, r5
 8004ea8:	008b      	lsls	r3, r1, #2
 8004eaa:	4621      	mov	r1, r4
 8004eac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004eb0:	4621      	mov	r1, r4
 8004eb2:	008a      	lsls	r2, r1, #2
 8004eb4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004eb8:	f7fb f9f2 	bl	80002a0 <__aeabi_uldivmod>
 8004ebc:	4602      	mov	r2, r0
 8004ebe:	460b      	mov	r3, r1
 8004ec0:	4b60      	ldr	r3, [pc, #384]	@ (8005044 <UART_SetConfig+0x4e4>)
 8004ec2:	fba3 2302 	umull	r2, r3, r3, r2
 8004ec6:	095b      	lsrs	r3, r3, #5
 8004ec8:	011c      	lsls	r4, r3, #4
 8004eca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004ece:	2200      	movs	r2, #0
 8004ed0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004ed4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004ed8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004edc:	4642      	mov	r2, r8
 8004ede:	464b      	mov	r3, r9
 8004ee0:	1891      	adds	r1, r2, r2
 8004ee2:	61b9      	str	r1, [r7, #24]
 8004ee4:	415b      	adcs	r3, r3
 8004ee6:	61fb      	str	r3, [r7, #28]
 8004ee8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004eec:	4641      	mov	r1, r8
 8004eee:	1851      	adds	r1, r2, r1
 8004ef0:	6139      	str	r1, [r7, #16]
 8004ef2:	4649      	mov	r1, r9
 8004ef4:	414b      	adcs	r3, r1
 8004ef6:	617b      	str	r3, [r7, #20]
 8004ef8:	f04f 0200 	mov.w	r2, #0
 8004efc:	f04f 0300 	mov.w	r3, #0
 8004f00:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004f04:	4659      	mov	r1, fp
 8004f06:	00cb      	lsls	r3, r1, #3
 8004f08:	4651      	mov	r1, sl
 8004f0a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f0e:	4651      	mov	r1, sl
 8004f10:	00ca      	lsls	r2, r1, #3
 8004f12:	4610      	mov	r0, r2
 8004f14:	4619      	mov	r1, r3
 8004f16:	4603      	mov	r3, r0
 8004f18:	4642      	mov	r2, r8
 8004f1a:	189b      	adds	r3, r3, r2
 8004f1c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004f20:	464b      	mov	r3, r9
 8004f22:	460a      	mov	r2, r1
 8004f24:	eb42 0303 	adc.w	r3, r2, r3
 8004f28:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004f2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	2200      	movs	r2, #0
 8004f34:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004f36:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004f38:	f04f 0200 	mov.w	r2, #0
 8004f3c:	f04f 0300 	mov.w	r3, #0
 8004f40:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004f44:	4649      	mov	r1, r9
 8004f46:	008b      	lsls	r3, r1, #2
 8004f48:	4641      	mov	r1, r8
 8004f4a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f4e:	4641      	mov	r1, r8
 8004f50:	008a      	lsls	r2, r1, #2
 8004f52:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004f56:	f7fb f9a3 	bl	80002a0 <__aeabi_uldivmod>
 8004f5a:	4602      	mov	r2, r0
 8004f5c:	460b      	mov	r3, r1
 8004f5e:	4611      	mov	r1, r2
 8004f60:	4b38      	ldr	r3, [pc, #224]	@ (8005044 <UART_SetConfig+0x4e4>)
 8004f62:	fba3 2301 	umull	r2, r3, r3, r1
 8004f66:	095b      	lsrs	r3, r3, #5
 8004f68:	2264      	movs	r2, #100	@ 0x64
 8004f6a:	fb02 f303 	mul.w	r3, r2, r3
 8004f6e:	1acb      	subs	r3, r1, r3
 8004f70:	011b      	lsls	r3, r3, #4
 8004f72:	3332      	adds	r3, #50	@ 0x32
 8004f74:	4a33      	ldr	r2, [pc, #204]	@ (8005044 <UART_SetConfig+0x4e4>)
 8004f76:	fba2 2303 	umull	r2, r3, r2, r3
 8004f7a:	095b      	lsrs	r3, r3, #5
 8004f7c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004f80:	441c      	add	r4, r3
 8004f82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f86:	2200      	movs	r2, #0
 8004f88:	673b      	str	r3, [r7, #112]	@ 0x70
 8004f8a:	677a      	str	r2, [r7, #116]	@ 0x74
 8004f8c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004f90:	4642      	mov	r2, r8
 8004f92:	464b      	mov	r3, r9
 8004f94:	1891      	adds	r1, r2, r2
 8004f96:	60b9      	str	r1, [r7, #8]
 8004f98:	415b      	adcs	r3, r3
 8004f9a:	60fb      	str	r3, [r7, #12]
 8004f9c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004fa0:	4641      	mov	r1, r8
 8004fa2:	1851      	adds	r1, r2, r1
 8004fa4:	6039      	str	r1, [r7, #0]
 8004fa6:	4649      	mov	r1, r9
 8004fa8:	414b      	adcs	r3, r1
 8004faa:	607b      	str	r3, [r7, #4]
 8004fac:	f04f 0200 	mov.w	r2, #0
 8004fb0:	f04f 0300 	mov.w	r3, #0
 8004fb4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004fb8:	4659      	mov	r1, fp
 8004fba:	00cb      	lsls	r3, r1, #3
 8004fbc:	4651      	mov	r1, sl
 8004fbe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004fc2:	4651      	mov	r1, sl
 8004fc4:	00ca      	lsls	r2, r1, #3
 8004fc6:	4610      	mov	r0, r2
 8004fc8:	4619      	mov	r1, r3
 8004fca:	4603      	mov	r3, r0
 8004fcc:	4642      	mov	r2, r8
 8004fce:	189b      	adds	r3, r3, r2
 8004fd0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004fd2:	464b      	mov	r3, r9
 8004fd4:	460a      	mov	r2, r1
 8004fd6:	eb42 0303 	adc.w	r3, r2, r3
 8004fda:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004fdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fe0:	685b      	ldr	r3, [r3, #4]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	663b      	str	r3, [r7, #96]	@ 0x60
 8004fe6:	667a      	str	r2, [r7, #100]	@ 0x64
 8004fe8:	f04f 0200 	mov.w	r2, #0
 8004fec:	f04f 0300 	mov.w	r3, #0
 8004ff0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004ff4:	4649      	mov	r1, r9
 8004ff6:	008b      	lsls	r3, r1, #2
 8004ff8:	4641      	mov	r1, r8
 8004ffa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ffe:	4641      	mov	r1, r8
 8005000:	008a      	lsls	r2, r1, #2
 8005002:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005006:	f7fb f94b 	bl	80002a0 <__aeabi_uldivmod>
 800500a:	4602      	mov	r2, r0
 800500c:	460b      	mov	r3, r1
 800500e:	4b0d      	ldr	r3, [pc, #52]	@ (8005044 <UART_SetConfig+0x4e4>)
 8005010:	fba3 1302 	umull	r1, r3, r3, r2
 8005014:	095b      	lsrs	r3, r3, #5
 8005016:	2164      	movs	r1, #100	@ 0x64
 8005018:	fb01 f303 	mul.w	r3, r1, r3
 800501c:	1ad3      	subs	r3, r2, r3
 800501e:	011b      	lsls	r3, r3, #4
 8005020:	3332      	adds	r3, #50	@ 0x32
 8005022:	4a08      	ldr	r2, [pc, #32]	@ (8005044 <UART_SetConfig+0x4e4>)
 8005024:	fba2 2303 	umull	r2, r3, r2, r3
 8005028:	095b      	lsrs	r3, r3, #5
 800502a:	f003 020f 	and.w	r2, r3, #15
 800502e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4422      	add	r2, r4
 8005036:	609a      	str	r2, [r3, #8]
}
 8005038:	bf00      	nop
 800503a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800503e:	46bd      	mov	sp, r7
 8005040:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005044:	51eb851f 	.word	0x51eb851f

08005048 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8005048:	b5b0      	push	{r4, r5, r7, lr}
 800504a:	b08c      	sub	sp, #48	@ 0x30
 800504c:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800504e:	4b8f      	ldr	r3, [pc, #572]	@ (800528c <MX_LWIP_Init+0x244>)
 8005050:	22c0      	movs	r2, #192	@ 0xc0
 8005052:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8005054:	4b8d      	ldr	r3, [pc, #564]	@ (800528c <MX_LWIP_Init+0x244>)
 8005056:	22a8      	movs	r2, #168	@ 0xa8
 8005058:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 800505a:	4b8c      	ldr	r3, [pc, #560]	@ (800528c <MX_LWIP_Init+0x244>)
 800505c:	2201      	movs	r2, #1
 800505e:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 130;
 8005060:	4b8a      	ldr	r3, [pc, #552]	@ (800528c <MX_LWIP_Init+0x244>)
 8005062:	2282      	movs	r2, #130	@ 0x82
 8005064:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8005066:	4b8a      	ldr	r3, [pc, #552]	@ (8005290 <MX_LWIP_Init+0x248>)
 8005068:	22ff      	movs	r2, #255	@ 0xff
 800506a:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800506c:	4b88      	ldr	r3, [pc, #544]	@ (8005290 <MX_LWIP_Init+0x248>)
 800506e:	22ff      	movs	r2, #255	@ 0xff
 8005070:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8005072:	4b87      	ldr	r3, [pc, #540]	@ (8005290 <MX_LWIP_Init+0x248>)
 8005074:	22ff      	movs	r2, #255	@ 0xff
 8005076:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8005078:	4b85      	ldr	r3, [pc, #532]	@ (8005290 <MX_LWIP_Init+0x248>)
 800507a:	2200      	movs	r2, #0
 800507c:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 800507e:	4b85      	ldr	r3, [pc, #532]	@ (8005294 <MX_LWIP_Init+0x24c>)
 8005080:	22c0      	movs	r2, #192	@ 0xc0
 8005082:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8005084:	4b83      	ldr	r3, [pc, #524]	@ (8005294 <MX_LWIP_Init+0x24c>)
 8005086:	22a8      	movs	r2, #168	@ 0xa8
 8005088:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 800508a:	4b82      	ldr	r3, [pc, #520]	@ (8005294 <MX_LWIP_Init+0x24c>)
 800508c:	2201      	movs	r2, #1
 800508e:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8005090:	4b80      	ldr	r3, [pc, #512]	@ (8005294 <MX_LWIP_Init+0x24c>)
 8005092:	2201      	movs	r2, #1
 8005094:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8005096:	2100      	movs	r1, #0
 8005098:	2000      	movs	r0, #0
 800509a:	f006 f8d9 	bl	800b250 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800509e:	4b7b      	ldr	r3, [pc, #492]	@ (800528c <MX_LWIP_Init+0x244>)
 80050a0:	781b      	ldrb	r3, [r3, #0]
 80050a2:	061a      	lsls	r2, r3, #24
 80050a4:	4b79      	ldr	r3, [pc, #484]	@ (800528c <MX_LWIP_Init+0x244>)
 80050a6:	785b      	ldrb	r3, [r3, #1]
 80050a8:	041b      	lsls	r3, r3, #16
 80050aa:	431a      	orrs	r2, r3
 80050ac:	4b77      	ldr	r3, [pc, #476]	@ (800528c <MX_LWIP_Init+0x244>)
 80050ae:	789b      	ldrb	r3, [r3, #2]
 80050b0:	021b      	lsls	r3, r3, #8
 80050b2:	4313      	orrs	r3, r2
 80050b4:	4a75      	ldr	r2, [pc, #468]	@ (800528c <MX_LWIP_Init+0x244>)
 80050b6:	78d2      	ldrb	r2, [r2, #3]
 80050b8:	4313      	orrs	r3, r2
 80050ba:	061a      	lsls	r2, r3, #24
 80050bc:	4b73      	ldr	r3, [pc, #460]	@ (800528c <MX_LWIP_Init+0x244>)
 80050be:	781b      	ldrb	r3, [r3, #0]
 80050c0:	0619      	lsls	r1, r3, #24
 80050c2:	4b72      	ldr	r3, [pc, #456]	@ (800528c <MX_LWIP_Init+0x244>)
 80050c4:	785b      	ldrb	r3, [r3, #1]
 80050c6:	041b      	lsls	r3, r3, #16
 80050c8:	4319      	orrs	r1, r3
 80050ca:	4b70      	ldr	r3, [pc, #448]	@ (800528c <MX_LWIP_Init+0x244>)
 80050cc:	789b      	ldrb	r3, [r3, #2]
 80050ce:	021b      	lsls	r3, r3, #8
 80050d0:	430b      	orrs	r3, r1
 80050d2:	496e      	ldr	r1, [pc, #440]	@ (800528c <MX_LWIP_Init+0x244>)
 80050d4:	78c9      	ldrb	r1, [r1, #3]
 80050d6:	430b      	orrs	r3, r1
 80050d8:	021b      	lsls	r3, r3, #8
 80050da:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80050de:	431a      	orrs	r2, r3
 80050e0:	4b6a      	ldr	r3, [pc, #424]	@ (800528c <MX_LWIP_Init+0x244>)
 80050e2:	781b      	ldrb	r3, [r3, #0]
 80050e4:	0619      	lsls	r1, r3, #24
 80050e6:	4b69      	ldr	r3, [pc, #420]	@ (800528c <MX_LWIP_Init+0x244>)
 80050e8:	785b      	ldrb	r3, [r3, #1]
 80050ea:	041b      	lsls	r3, r3, #16
 80050ec:	4319      	orrs	r1, r3
 80050ee:	4b67      	ldr	r3, [pc, #412]	@ (800528c <MX_LWIP_Init+0x244>)
 80050f0:	789b      	ldrb	r3, [r3, #2]
 80050f2:	021b      	lsls	r3, r3, #8
 80050f4:	430b      	orrs	r3, r1
 80050f6:	4965      	ldr	r1, [pc, #404]	@ (800528c <MX_LWIP_Init+0x244>)
 80050f8:	78c9      	ldrb	r1, [r1, #3]
 80050fa:	430b      	orrs	r3, r1
 80050fc:	0a1b      	lsrs	r3, r3, #8
 80050fe:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8005102:	431a      	orrs	r2, r3
 8005104:	4b61      	ldr	r3, [pc, #388]	@ (800528c <MX_LWIP_Init+0x244>)
 8005106:	781b      	ldrb	r3, [r3, #0]
 8005108:	0619      	lsls	r1, r3, #24
 800510a:	4b60      	ldr	r3, [pc, #384]	@ (800528c <MX_LWIP_Init+0x244>)
 800510c:	785b      	ldrb	r3, [r3, #1]
 800510e:	041b      	lsls	r3, r3, #16
 8005110:	4319      	orrs	r1, r3
 8005112:	4b5e      	ldr	r3, [pc, #376]	@ (800528c <MX_LWIP_Init+0x244>)
 8005114:	789b      	ldrb	r3, [r3, #2]
 8005116:	021b      	lsls	r3, r3, #8
 8005118:	430b      	orrs	r3, r1
 800511a:	495c      	ldr	r1, [pc, #368]	@ (800528c <MX_LWIP_Init+0x244>)
 800511c:	78c9      	ldrb	r1, [r1, #3]
 800511e:	430b      	orrs	r3, r1
 8005120:	0e1b      	lsrs	r3, r3, #24
 8005122:	4313      	orrs	r3, r2
 8005124:	4a5c      	ldr	r2, [pc, #368]	@ (8005298 <MX_LWIP_Init+0x250>)
 8005126:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8005128:	4b59      	ldr	r3, [pc, #356]	@ (8005290 <MX_LWIP_Init+0x248>)
 800512a:	781b      	ldrb	r3, [r3, #0]
 800512c:	061a      	lsls	r2, r3, #24
 800512e:	4b58      	ldr	r3, [pc, #352]	@ (8005290 <MX_LWIP_Init+0x248>)
 8005130:	785b      	ldrb	r3, [r3, #1]
 8005132:	041b      	lsls	r3, r3, #16
 8005134:	431a      	orrs	r2, r3
 8005136:	4b56      	ldr	r3, [pc, #344]	@ (8005290 <MX_LWIP_Init+0x248>)
 8005138:	789b      	ldrb	r3, [r3, #2]
 800513a:	021b      	lsls	r3, r3, #8
 800513c:	4313      	orrs	r3, r2
 800513e:	4a54      	ldr	r2, [pc, #336]	@ (8005290 <MX_LWIP_Init+0x248>)
 8005140:	78d2      	ldrb	r2, [r2, #3]
 8005142:	4313      	orrs	r3, r2
 8005144:	061a      	lsls	r2, r3, #24
 8005146:	4b52      	ldr	r3, [pc, #328]	@ (8005290 <MX_LWIP_Init+0x248>)
 8005148:	781b      	ldrb	r3, [r3, #0]
 800514a:	0619      	lsls	r1, r3, #24
 800514c:	4b50      	ldr	r3, [pc, #320]	@ (8005290 <MX_LWIP_Init+0x248>)
 800514e:	785b      	ldrb	r3, [r3, #1]
 8005150:	041b      	lsls	r3, r3, #16
 8005152:	4319      	orrs	r1, r3
 8005154:	4b4e      	ldr	r3, [pc, #312]	@ (8005290 <MX_LWIP_Init+0x248>)
 8005156:	789b      	ldrb	r3, [r3, #2]
 8005158:	021b      	lsls	r3, r3, #8
 800515a:	430b      	orrs	r3, r1
 800515c:	494c      	ldr	r1, [pc, #304]	@ (8005290 <MX_LWIP_Init+0x248>)
 800515e:	78c9      	ldrb	r1, [r1, #3]
 8005160:	430b      	orrs	r3, r1
 8005162:	021b      	lsls	r3, r3, #8
 8005164:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005168:	431a      	orrs	r2, r3
 800516a:	4b49      	ldr	r3, [pc, #292]	@ (8005290 <MX_LWIP_Init+0x248>)
 800516c:	781b      	ldrb	r3, [r3, #0]
 800516e:	0619      	lsls	r1, r3, #24
 8005170:	4b47      	ldr	r3, [pc, #284]	@ (8005290 <MX_LWIP_Init+0x248>)
 8005172:	785b      	ldrb	r3, [r3, #1]
 8005174:	041b      	lsls	r3, r3, #16
 8005176:	4319      	orrs	r1, r3
 8005178:	4b45      	ldr	r3, [pc, #276]	@ (8005290 <MX_LWIP_Init+0x248>)
 800517a:	789b      	ldrb	r3, [r3, #2]
 800517c:	021b      	lsls	r3, r3, #8
 800517e:	430b      	orrs	r3, r1
 8005180:	4943      	ldr	r1, [pc, #268]	@ (8005290 <MX_LWIP_Init+0x248>)
 8005182:	78c9      	ldrb	r1, [r1, #3]
 8005184:	430b      	orrs	r3, r1
 8005186:	0a1b      	lsrs	r3, r3, #8
 8005188:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800518c:	431a      	orrs	r2, r3
 800518e:	4b40      	ldr	r3, [pc, #256]	@ (8005290 <MX_LWIP_Init+0x248>)
 8005190:	781b      	ldrb	r3, [r3, #0]
 8005192:	0619      	lsls	r1, r3, #24
 8005194:	4b3e      	ldr	r3, [pc, #248]	@ (8005290 <MX_LWIP_Init+0x248>)
 8005196:	785b      	ldrb	r3, [r3, #1]
 8005198:	041b      	lsls	r3, r3, #16
 800519a:	4319      	orrs	r1, r3
 800519c:	4b3c      	ldr	r3, [pc, #240]	@ (8005290 <MX_LWIP_Init+0x248>)
 800519e:	789b      	ldrb	r3, [r3, #2]
 80051a0:	021b      	lsls	r3, r3, #8
 80051a2:	430b      	orrs	r3, r1
 80051a4:	493a      	ldr	r1, [pc, #232]	@ (8005290 <MX_LWIP_Init+0x248>)
 80051a6:	78c9      	ldrb	r1, [r1, #3]
 80051a8:	430b      	orrs	r3, r1
 80051aa:	0e1b      	lsrs	r3, r3, #24
 80051ac:	4313      	orrs	r3, r2
 80051ae:	4a3b      	ldr	r2, [pc, #236]	@ (800529c <MX_LWIP_Init+0x254>)
 80051b0:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 80051b2:	4b38      	ldr	r3, [pc, #224]	@ (8005294 <MX_LWIP_Init+0x24c>)
 80051b4:	781b      	ldrb	r3, [r3, #0]
 80051b6:	061a      	lsls	r2, r3, #24
 80051b8:	4b36      	ldr	r3, [pc, #216]	@ (8005294 <MX_LWIP_Init+0x24c>)
 80051ba:	785b      	ldrb	r3, [r3, #1]
 80051bc:	041b      	lsls	r3, r3, #16
 80051be:	431a      	orrs	r2, r3
 80051c0:	4b34      	ldr	r3, [pc, #208]	@ (8005294 <MX_LWIP_Init+0x24c>)
 80051c2:	789b      	ldrb	r3, [r3, #2]
 80051c4:	021b      	lsls	r3, r3, #8
 80051c6:	4313      	orrs	r3, r2
 80051c8:	4a32      	ldr	r2, [pc, #200]	@ (8005294 <MX_LWIP_Init+0x24c>)
 80051ca:	78d2      	ldrb	r2, [r2, #3]
 80051cc:	4313      	orrs	r3, r2
 80051ce:	061a      	lsls	r2, r3, #24
 80051d0:	4b30      	ldr	r3, [pc, #192]	@ (8005294 <MX_LWIP_Init+0x24c>)
 80051d2:	781b      	ldrb	r3, [r3, #0]
 80051d4:	0619      	lsls	r1, r3, #24
 80051d6:	4b2f      	ldr	r3, [pc, #188]	@ (8005294 <MX_LWIP_Init+0x24c>)
 80051d8:	785b      	ldrb	r3, [r3, #1]
 80051da:	041b      	lsls	r3, r3, #16
 80051dc:	4319      	orrs	r1, r3
 80051de:	4b2d      	ldr	r3, [pc, #180]	@ (8005294 <MX_LWIP_Init+0x24c>)
 80051e0:	789b      	ldrb	r3, [r3, #2]
 80051e2:	021b      	lsls	r3, r3, #8
 80051e4:	430b      	orrs	r3, r1
 80051e6:	492b      	ldr	r1, [pc, #172]	@ (8005294 <MX_LWIP_Init+0x24c>)
 80051e8:	78c9      	ldrb	r1, [r1, #3]
 80051ea:	430b      	orrs	r3, r1
 80051ec:	021b      	lsls	r3, r3, #8
 80051ee:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80051f2:	431a      	orrs	r2, r3
 80051f4:	4b27      	ldr	r3, [pc, #156]	@ (8005294 <MX_LWIP_Init+0x24c>)
 80051f6:	781b      	ldrb	r3, [r3, #0]
 80051f8:	0619      	lsls	r1, r3, #24
 80051fa:	4b26      	ldr	r3, [pc, #152]	@ (8005294 <MX_LWIP_Init+0x24c>)
 80051fc:	785b      	ldrb	r3, [r3, #1]
 80051fe:	041b      	lsls	r3, r3, #16
 8005200:	4319      	orrs	r1, r3
 8005202:	4b24      	ldr	r3, [pc, #144]	@ (8005294 <MX_LWIP_Init+0x24c>)
 8005204:	789b      	ldrb	r3, [r3, #2]
 8005206:	021b      	lsls	r3, r3, #8
 8005208:	430b      	orrs	r3, r1
 800520a:	4922      	ldr	r1, [pc, #136]	@ (8005294 <MX_LWIP_Init+0x24c>)
 800520c:	78c9      	ldrb	r1, [r1, #3]
 800520e:	430b      	orrs	r3, r1
 8005210:	0a1b      	lsrs	r3, r3, #8
 8005212:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8005216:	431a      	orrs	r2, r3
 8005218:	4b1e      	ldr	r3, [pc, #120]	@ (8005294 <MX_LWIP_Init+0x24c>)
 800521a:	781b      	ldrb	r3, [r3, #0]
 800521c:	0619      	lsls	r1, r3, #24
 800521e:	4b1d      	ldr	r3, [pc, #116]	@ (8005294 <MX_LWIP_Init+0x24c>)
 8005220:	785b      	ldrb	r3, [r3, #1]
 8005222:	041b      	lsls	r3, r3, #16
 8005224:	4319      	orrs	r1, r3
 8005226:	4b1b      	ldr	r3, [pc, #108]	@ (8005294 <MX_LWIP_Init+0x24c>)
 8005228:	789b      	ldrb	r3, [r3, #2]
 800522a:	021b      	lsls	r3, r3, #8
 800522c:	430b      	orrs	r3, r1
 800522e:	4919      	ldr	r1, [pc, #100]	@ (8005294 <MX_LWIP_Init+0x24c>)
 8005230:	78c9      	ldrb	r1, [r1, #3]
 8005232:	430b      	orrs	r3, r1
 8005234:	0e1b      	lsrs	r3, r3, #24
 8005236:	4313      	orrs	r3, r2
 8005238:	4a19      	ldr	r2, [pc, #100]	@ (80052a0 <MX_LWIP_Init+0x258>)
 800523a:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800523c:	4b19      	ldr	r3, [pc, #100]	@ (80052a4 <MX_LWIP_Init+0x25c>)
 800523e:	9302      	str	r3, [sp, #8]
 8005240:	4b19      	ldr	r3, [pc, #100]	@ (80052a8 <MX_LWIP_Init+0x260>)
 8005242:	9301      	str	r3, [sp, #4]
 8005244:	2300      	movs	r3, #0
 8005246:	9300      	str	r3, [sp, #0]
 8005248:	4b15      	ldr	r3, [pc, #84]	@ (80052a0 <MX_LWIP_Init+0x258>)
 800524a:	4a14      	ldr	r2, [pc, #80]	@ (800529c <MX_LWIP_Init+0x254>)
 800524c:	4912      	ldr	r1, [pc, #72]	@ (8005298 <MX_LWIP_Init+0x250>)
 800524e:	4817      	ldr	r0, [pc, #92]	@ (80052ac <MX_LWIP_Init+0x264>)
 8005250:	f006 fdc8 	bl	800bde4 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8005254:	4815      	ldr	r0, [pc, #84]	@ (80052ac <MX_LWIP_Init+0x264>)
 8005256:	f006 ff77 	bl	800c148 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 800525a:	4814      	ldr	r0, [pc, #80]	@ (80052ac <MX_LWIP_Init+0x264>)
 800525c:	f006 ff84 	bl	800c168 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8005260:	4913      	ldr	r1, [pc, #76]	@ (80052b0 <MX_LWIP_Init+0x268>)
 8005262:	4812      	ldr	r0, [pc, #72]	@ (80052ac <MX_LWIP_Init+0x264>)
 8005264:	f007 f882 	bl	800c36c <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthLink, ethernet_link_thread, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE *2);
 8005268:	4b12      	ldr	r3, [pc, #72]	@ (80052b4 <MX_LWIP_Init+0x26c>)
 800526a:	1d3c      	adds	r4, r7, #4
 800526c:	461d      	mov	r5, r3
 800526e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005270:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005272:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005276:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthLink), &gnetif);
 800527a:	1d3b      	adds	r3, r7, #4
 800527c:	490b      	ldr	r1, [pc, #44]	@ (80052ac <MX_LWIP_Init+0x264>)
 800527e:	4618      	mov	r0, r3
 8005280:	f000 fd42 	bl	8005d08 <osThreadCreate>
/* USER CODE END H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8005284:	bf00      	nop
 8005286:	3720      	adds	r7, #32
 8005288:	46bd      	mov	sp, r7
 800528a:	bdb0      	pop	{r4, r5, r7, pc}
 800528c:	20000a68 	.word	0x20000a68
 8005290:	20000a6c 	.word	0x20000a6c
 8005294:	20000a70 	.word	0x20000a70
 8005298:	20000a5c 	.word	0x20000a5c
 800529c:	20000a60 	.word	0x20000a60
 80052a0:	20000a64 	.word	0x20000a64
 80052a4:	0800b161 	.word	0x0800b161
 80052a8:	08005791 	.word	0x08005791
 80052ac:	20000a28 	.word	0x20000a28
 80052b0:	080052b9 	.word	0x080052b9
 80052b4:	08017a90 	.word	0x08017a90

080052b8 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 80052b8:	b480      	push	{r7}
 80052ba:	b083      	sub	sp, #12
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 80052c0:	bf00      	nop
 80052c2:	370c      	adds	r7, #12
 80052c4:	46bd      	mov	sp, r7
 80052c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ca:	4770      	bx	lr

080052cc <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b082      	sub	sp, #8
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 80052d4:	4b04      	ldr	r3, [pc, #16]	@ (80052e8 <HAL_ETH_RxCpltCallback+0x1c>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4618      	mov	r0, r3
 80052da:	f000 fe91 	bl	8006000 <osSemaphoreRelease>
}
 80052de:	bf00      	nop
 80052e0:	3708      	adds	r7, #8
 80052e2:	46bd      	mov	sp, r7
 80052e4:	bd80      	pop	{r7, pc}
 80052e6:	bf00      	nop
 80052e8:	20005540 	.word	0x20005540

080052ec <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b082      	sub	sp, #8
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 80052f4:	4b04      	ldr	r3, [pc, #16]	@ (8005308 <HAL_ETH_TxCpltCallback+0x1c>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4618      	mov	r0, r3
 80052fa:	f000 fe81 	bl	8006000 <osSemaphoreRelease>
}
 80052fe:	bf00      	nop
 8005300:	3708      	adds	r7, #8
 8005302:	46bd      	mov	sp, r7
 8005304:	bd80      	pop	{r7, pc}
 8005306:	bf00      	nop
 8005308:	20005544 	.word	0x20005544

0800530c <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b082      	sub	sp, #8
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 8005314:	6878      	ldr	r0, [r7, #4]
 8005316:	f7fd fd2f 	bl	8002d78 <HAL_ETH_GetDMAError>
 800531a:	4603      	mov	r3, r0
 800531c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005320:	2b80      	cmp	r3, #128	@ 0x80
 8005322:	d104      	bne.n	800532e <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 8005324:	4b04      	ldr	r3, [pc, #16]	@ (8005338 <HAL_ETH_ErrorCallback+0x2c>)
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4618      	mov	r0, r3
 800532a:	f000 fe69 	bl	8006000 <osSemaphoreRelease>
  }
}
 800532e:	bf00      	nop
 8005330:	3708      	adds	r7, #8
 8005332:	46bd      	mov	sp, r7
 8005334:	bd80      	pop	{r7, pc}
 8005336:	bf00      	nop
 8005338:	20005540 	.word	0x20005540

0800533c <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800533c:	b5b0      	push	{r4, r5, r7, lr}
 800533e:	b0ac      	sub	sp, #176	@ 0xb0
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8005344:	2300      	movs	r3, #0
 8005346:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
  uint32_t duplex, speed = 0;
 800534a:	2300      	movs	r3, #0
 800534c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  int32_t PHYLinkState = 0;
 8005350:	2300      	movs	r3, #0
 8005352:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  ETH_MACConfigTypeDef MACConf = {0};
 8005356:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800535a:	2264      	movs	r2, #100	@ 0x64
 800535c:	2100      	movs	r1, #0
 800535e:	4618      	mov	r0, r3
 8005360:	f011 f9bd 	bl	80166de <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8005364:	4b90      	ldr	r3, [pc, #576]	@ (80055a8 <low_level_init+0x26c>)
 8005366:	4a91      	ldr	r2, [pc, #580]	@ (80055ac <low_level_init+0x270>)
 8005368:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800536a:	2300      	movs	r3, #0
 800536c:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  MACAddr[1] = 0x80;
 8005370:	2380      	movs	r3, #128	@ 0x80
 8005372:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  MACAddr[2] = 0xE1;
 8005376:	23e1      	movs	r3, #225	@ 0xe1
 8005378:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  MACAddr[3] = 0x00;
 800537c:	2300      	movs	r3, #0
 800537e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  MACAddr[4] = 0x00;
 8005382:	2300      	movs	r3, #0
 8005384:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  MACAddr[5] = 0x00;
 8005388:	2300      	movs	r3, #0
 800538a:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  heth.Init.MACAddr = &MACAddr[0];
 800538e:	4a86      	ldr	r2, [pc, #536]	@ (80055a8 <low_level_init+0x26c>)
 8005390:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8005394:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8005396:	4b84      	ldr	r3, [pc, #528]	@ (80055a8 <low_level_init+0x26c>)
 8005398:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800539c:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800539e:	4b82      	ldr	r3, [pc, #520]	@ (80055a8 <low_level_init+0x26c>)
 80053a0:	4a83      	ldr	r2, [pc, #524]	@ (80055b0 <low_level_init+0x274>)
 80053a2:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80053a4:	4b80      	ldr	r3, [pc, #512]	@ (80055a8 <low_level_init+0x26c>)
 80053a6:	4a83      	ldr	r2, [pc, #524]	@ (80055b4 <low_level_init+0x278>)
 80053a8:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 80053aa:	4b7f      	ldr	r3, [pc, #508]	@ (80055a8 <low_level_init+0x26c>)
 80053ac:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 80053b0:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 80053b2:	487d      	ldr	r0, [pc, #500]	@ (80055a8 <low_level_init+0x26c>)
 80053b4:	f7fc fe96 	bl	80020e4 <HAL_ETH_Init>
 80053b8:	4603      	mov	r3, r0
 80053ba:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80053be:	2238      	movs	r2, #56	@ 0x38
 80053c0:	2100      	movs	r1, #0
 80053c2:	487d      	ldr	r0, [pc, #500]	@ (80055b8 <low_level_init+0x27c>)
 80053c4:	f011 f98b 	bl	80166de <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80053c8:	4b7b      	ldr	r3, [pc, #492]	@ (80055b8 <low_level_init+0x27c>)
 80053ca:	2221      	movs	r2, #33	@ 0x21
 80053cc:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80053ce:	4b7a      	ldr	r3, [pc, #488]	@ (80055b8 <low_level_init+0x27c>)
 80053d0:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 80053d4:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80053d6:	4b78      	ldr	r3, [pc, #480]	@ (80055b8 <low_level_init+0x27c>)
 80053d8:	2200      	movs	r2, #0
 80053da:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 80053dc:	4877      	ldr	r0, [pc, #476]	@ (80055bc <low_level_init+0x280>)
 80053de:	f006 fbbb 	bl	800bb58 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2206      	movs	r2, #6
 80053e6:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80053ea:	4b6f      	ldr	r3, [pc, #444]	@ (80055a8 <low_level_init+0x26c>)
 80053ec:	685b      	ldr	r3, [r3, #4]
 80053ee:	781a      	ldrb	r2, [r3, #0]
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 80053f6:	4b6c      	ldr	r3, [pc, #432]	@ (80055a8 <low_level_init+0x26c>)
 80053f8:	685b      	ldr	r3, [r3, #4]
 80053fa:	785a      	ldrb	r2, [r3, #1]
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8005402:	4b69      	ldr	r3, [pc, #420]	@ (80055a8 <low_level_init+0x26c>)
 8005404:	685b      	ldr	r3, [r3, #4]
 8005406:	789a      	ldrb	r2, [r3, #2]
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800540e:	4b66      	ldr	r3, [pc, #408]	@ (80055a8 <low_level_init+0x26c>)
 8005410:	685b      	ldr	r3, [r3, #4]
 8005412:	78da      	ldrb	r2, [r3, #3]
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800541a:	4b63      	ldr	r3, [pc, #396]	@ (80055a8 <low_level_init+0x26c>)
 800541c:	685b      	ldr	r3, [r3, #4]
 800541e:	791a      	ldrb	r2, [r3, #4]
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8005426:	4b60      	ldr	r3, [pc, #384]	@ (80055a8 <low_level_init+0x26c>)
 8005428:	685b      	ldr	r3, [r3, #4]
 800542a:	795a      	ldrb	r2, [r3, #5]
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8005438:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005440:	f043 030a 	orr.w	r3, r3, #10
 8005444:	b2da      	uxtb	r2, r3
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(RxSem);
 800544c:	2300      	movs	r3, #0
 800544e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005450:	2300      	movs	r3, #0
 8005452:	633b      	str	r3, [r7, #48]	@ 0x30
  RxPktSemaphore = osSemaphoreCreate(osSemaphore(RxSem), 1);
 8005454:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8005458:	2101      	movs	r1, #1
 800545a:	4618      	mov	r0, r3
 800545c:	f000 fd50 	bl	8005f00 <osSemaphoreCreate>
 8005460:	4603      	mov	r3, r0
 8005462:	4a57      	ldr	r2, [pc, #348]	@ (80055c0 <low_level_init+0x284>)
 8005464:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  osSemaphoreDef(TxSem);
 8005466:	2300      	movs	r3, #0
 8005468:	627b      	str	r3, [r7, #36]	@ 0x24
 800546a:	2300      	movs	r3, #0
 800546c:	62bb      	str	r3, [r7, #40]	@ 0x28
  TxPktSemaphore = osSemaphoreCreate(osSemaphore(TxSem), 1);
 800546e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005472:	2101      	movs	r1, #1
 8005474:	4618      	mov	r0, r3
 8005476:	f000 fd43 	bl	8005f00 <osSemaphoreCreate>
 800547a:	4603      	mov	r3, r0
 800547c:	4a51      	ldr	r2, [pc, #324]	@ (80055c4 <low_level_init+0x288>)
 800547e:	6013      	str	r3, [r2, #0]

  /* Decrease the semaphore's initial count from 1 to 0 */
  osSemaphoreWait(RxPktSemaphore, 0);
 8005480:	4b4f      	ldr	r3, [pc, #316]	@ (80055c0 <low_level_init+0x284>)
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	2100      	movs	r1, #0
 8005486:	4618      	mov	r0, r3
 8005488:	f000 fd6c 	bl	8005f64 <osSemaphoreWait>
  osSemaphoreWait(TxPktSemaphore, 0);
 800548c:	4b4d      	ldr	r3, [pc, #308]	@ (80055c4 <low_level_init+0x288>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	2100      	movs	r1, #0
 8005492:	4618      	mov	r0, r3
 8005494:	f000 fd66 	bl	8005f64 <osSemaphoreWait>

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8005498:	4b4b      	ldr	r3, [pc, #300]	@ (80055c8 <low_level_init+0x28c>)
 800549a:	f107 0408 	add.w	r4, r7, #8
 800549e:	461d      	mov	r5, r3
 80054a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80054a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80054a4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80054a8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 80054ac:	f107 0308 	add.w	r3, r7, #8
 80054b0:	6879      	ldr	r1, [r7, #4]
 80054b2:	4618      	mov	r0, r3
 80054b4:	f000 fc28 	bl	8005d08 <osThreadCreate>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 80054b8:	4944      	ldr	r1, [pc, #272]	@ (80055cc <low_level_init+0x290>)
 80054ba:	4845      	ldr	r0, [pc, #276]	@ (80055d0 <low_level_init+0x294>)
 80054bc:	f7fc fb69 	bl	8001b92 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 80054c0:	4843      	ldr	r0, [pc, #268]	@ (80055d0 <low_level_init+0x294>)
 80054c2:	f7fc fb98 	bl	8001bf6 <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 80054c6:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d165      	bne.n	800559a <low_level_init+0x25e>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 80054ce:	4840      	ldr	r0, [pc, #256]	@ (80055d0 <low_level_init+0x294>)
 80054d0:	f7fc fc39 	bl	8001d46 <LAN8742_GetLinkState>
 80054d4:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 80054d8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80054dc:	2b01      	cmp	r3, #1
 80054de:	dc06      	bgt.n	80054ee <low_level_init+0x1b2>
    {
      netif_set_link_down(netif);
 80054e0:	6878      	ldr	r0, [r7, #4]
 80054e2:	f006 ff13 	bl	800c30c <netif_set_link_down>
      netif_set_down(netif);
 80054e6:	6878      	ldr	r0, [r7, #4]
 80054e8:	f006 feaa 	bl	800c240 <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 80054ec:	e057      	b.n	800559e <low_level_init+0x262>
      switch (PHYLinkState)
 80054ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80054f2:	3b02      	subs	r3, #2
 80054f4:	2b03      	cmp	r3, #3
 80054f6:	d82b      	bhi.n	8005550 <low_level_init+0x214>
 80054f8:	a201      	add	r2, pc, #4	@ (adr r2, 8005500 <low_level_init+0x1c4>)
 80054fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054fe:	bf00      	nop
 8005500:	08005511 	.word	0x08005511
 8005504:	08005523 	.word	0x08005523
 8005508:	08005533 	.word	0x08005533
 800550c:	08005543 	.word	0x08005543
        duplex = ETH_FULLDUPLEX_MODE;
 8005510:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005514:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
        speed = ETH_SPEED_100M;
 8005518:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800551c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
        break;
 8005520:	e01f      	b.n	8005562 <low_level_init+0x226>
        duplex = ETH_HALFDUPLEX_MODE;
 8005522:	2300      	movs	r3, #0
 8005524:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
        speed = ETH_SPEED_100M;
 8005528:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800552c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
        break;
 8005530:	e017      	b.n	8005562 <low_level_init+0x226>
        duplex = ETH_FULLDUPLEX_MODE;
 8005532:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005536:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
        speed = ETH_SPEED_10M;
 800553a:	2300      	movs	r3, #0
 800553c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
        break;
 8005540:	e00f      	b.n	8005562 <low_level_init+0x226>
        duplex = ETH_HALFDUPLEX_MODE;
 8005542:	2300      	movs	r3, #0
 8005544:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
        speed = ETH_SPEED_10M;
 8005548:	2300      	movs	r3, #0
 800554a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
        break;
 800554e:	e008      	b.n	8005562 <low_level_init+0x226>
        duplex = ETH_FULLDUPLEX_MODE;
 8005550:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005554:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
        speed = ETH_SPEED_100M;
 8005558:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800555c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
        break;
 8005560:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 8005562:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8005566:	4619      	mov	r1, r3
 8005568:	480f      	ldr	r0, [pc, #60]	@ (80055a8 <low_level_init+0x26c>)
 800556a:	f7fd faab 	bl	8002ac4 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 800556e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005572:	657b      	str	r3, [r7, #84]	@ 0x54
    MACConf.Speed = speed;
 8005574:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005578:	653b      	str	r3, [r7, #80]	@ 0x50
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 800557a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800557e:	4619      	mov	r1, r3
 8005580:	4809      	ldr	r0, [pc, #36]	@ (80055a8 <low_level_init+0x26c>)
 8005582:	f7fd fb89 	bl	8002c98 <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 8005586:	4808      	ldr	r0, [pc, #32]	@ (80055a8 <low_level_init+0x26c>)
 8005588:	f7fc fe2a 	bl	80021e0 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 800558c:	6878      	ldr	r0, [r7, #4]
 800558e:	f006 fdeb 	bl	800c168 <netif_set_up>
    netif_set_link_up(netif);
 8005592:	6878      	ldr	r0, [r7, #4]
 8005594:	f006 fe86 	bl	800c2a4 <netif_set_link_up>
}
 8005598:	e001      	b.n	800559e <low_level_init+0x262>
    Error_Handler();
 800559a:	f7fb fbc1 	bl	8000d20 <Error_Handler>
}
 800559e:	bf00      	nop
 80055a0:	37b0      	adds	r7, #176	@ 0xb0
 80055a2:	46bd      	mov	sp, r7
 80055a4:	bdb0      	pop	{r4, r5, r7, pc}
 80055a6:	bf00      	nop
 80055a8:	20005548 	.word	0x20005548
 80055ac:	40028000 	.word	0x40028000
 80055b0:	200054a0 	.word	0x200054a0
 80055b4:	20005400 	.word	0x20005400
 80055b8:	200055f8 	.word	0x200055f8
 80055bc:	0801b014 	.word	0x0801b014
 80055c0:	20005540 	.word	0x20005540
 80055c4:	20005544 	.word	0x20005544
 80055c8:	08017ab4 	.word	0x08017ab4
 80055cc:	2000000c 	.word	0x2000000c
 80055d0:	20005630 	.word	0x20005630

080055d4 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b092      	sub	sp, #72	@ 0x48
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
 80055dc:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 80055de:	2300      	movs	r3, #0
 80055e0:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 80055e2:	2300      	movs	r3, #0
 80055e4:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 80055e6:	2300      	movs	r3, #0
 80055e8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 80055ec:	f107 030c 	add.w	r3, r7, #12
 80055f0:	2230      	movs	r2, #48	@ 0x30
 80055f2:	2100      	movs	r1, #0
 80055f4:	4618      	mov	r0, r3
 80055f6:	f011 f872 	bl	80166de <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 80055fa:	f107 030c 	add.w	r3, r7, #12
 80055fe:	2230      	movs	r2, #48	@ 0x30
 8005600:	2100      	movs	r1, #0
 8005602:	4618      	mov	r0, r3
 8005604:	f011 f86b 	bl	80166de <memset>

  for(q = p; q != NULL; q = q->next)
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	643b      	str	r3, [r7, #64]	@ 0x40
 800560c:	e045      	b.n	800569a <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 800560e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005610:	2b03      	cmp	r3, #3
 8005612:	d902      	bls.n	800561a <low_level_output+0x46>
      return ERR_IF;
 8005614:	f06f 030b 	mvn.w	r3, #11
 8005618:	e06c      	b.n	80056f4 <low_level_output+0x120>

    Txbuffer[i].buffer = q->payload;
 800561a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800561c:	6859      	ldr	r1, [r3, #4]
 800561e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005620:	4613      	mov	r3, r2
 8005622:	005b      	lsls	r3, r3, #1
 8005624:	4413      	add	r3, r2
 8005626:	009b      	lsls	r3, r3, #2
 8005628:	3348      	adds	r3, #72	@ 0x48
 800562a:	443b      	add	r3, r7
 800562c:	3b3c      	subs	r3, #60	@ 0x3c
 800562e:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8005630:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005632:	895b      	ldrh	r3, [r3, #10]
 8005634:	4619      	mov	r1, r3
 8005636:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005638:	4613      	mov	r3, r2
 800563a:	005b      	lsls	r3, r3, #1
 800563c:	4413      	add	r3, r2
 800563e:	009b      	lsls	r3, r3, #2
 8005640:	3348      	adds	r3, #72	@ 0x48
 8005642:	443b      	add	r3, r7
 8005644:	3b38      	subs	r3, #56	@ 0x38
 8005646:	6019      	str	r1, [r3, #0]

    if(i>0)
 8005648:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800564a:	2b00      	cmp	r3, #0
 800564c:	d011      	beq.n	8005672 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800564e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005650:	1e5a      	subs	r2, r3, #1
 8005652:	f107 000c 	add.w	r0, r7, #12
 8005656:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005658:	460b      	mov	r3, r1
 800565a:	005b      	lsls	r3, r3, #1
 800565c:	440b      	add	r3, r1
 800565e:	009b      	lsls	r3, r3, #2
 8005660:	18c1      	adds	r1, r0, r3
 8005662:	4613      	mov	r3, r2
 8005664:	005b      	lsls	r3, r3, #1
 8005666:	4413      	add	r3, r2
 8005668:	009b      	lsls	r3, r3, #2
 800566a:	3348      	adds	r3, #72	@ 0x48
 800566c:	443b      	add	r3, r7
 800566e:	3b34      	subs	r3, #52	@ 0x34
 8005670:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8005672:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d109      	bne.n	800568e <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800567a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800567c:	4613      	mov	r3, r2
 800567e:	005b      	lsls	r3, r3, #1
 8005680:	4413      	add	r3, r2
 8005682:	009b      	lsls	r3, r3, #2
 8005684:	3348      	adds	r3, #72	@ 0x48
 8005686:	443b      	add	r3, r7
 8005688:	3b34      	subs	r3, #52	@ 0x34
 800568a:	2200      	movs	r2, #0
 800568c:	601a      	str	r2, [r3, #0]
    }

    i++;
 800568e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005690:	3301      	adds	r3, #1
 8005692:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 8005694:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	643b      	str	r3, [r7, #64]	@ 0x40
 800569a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800569c:	2b00      	cmp	r3, #0
 800569e:	d1b6      	bne.n	800560e <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	891b      	ldrh	r3, [r3, #8]
 80056a4:	461a      	mov	r2, r3
 80056a6:	4b15      	ldr	r3, [pc, #84]	@ (80056fc <low_level_output+0x128>)
 80056a8:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 80056aa:	4a14      	ldr	r2, [pc, #80]	@ (80056fc <low_level_output+0x128>)
 80056ac:	f107 030c 	add.w	r3, r7, #12
 80056b0:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 80056b2:	4a12      	ldr	r2, [pc, #72]	@ (80056fc <low_level_output+0x128>)
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	6353      	str	r3, [r2, #52]	@ 0x34

  pbuf_ref(p);
 80056b8:	6838      	ldr	r0, [r7, #0]
 80056ba:	f007 faab 	bl	800cc14 <pbuf_ref>

  if (HAL_ETH_Transmit_IT(&heth, &TxConfig) == HAL_OK) {
 80056be:	490f      	ldr	r1, [pc, #60]	@ (80056fc <low_level_output+0x128>)
 80056c0:	480f      	ldr	r0, [pc, #60]	@ (8005700 <low_level_output+0x12c>)
 80056c2:	f7fc fe9a 	bl	80023fa <HAL_ETH_Transmit_IT>
 80056c6:	4603      	mov	r3, r0
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d10e      	bne.n	80056ea <low_level_output+0x116>
    while(osSemaphoreWait(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 80056cc:	bf00      	nop
 80056ce:	4b0d      	ldr	r3, [pc, #52]	@ (8005704 <low_level_output+0x130>)
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f04f 31ff 	mov.w	r1, #4294967295
 80056d6:	4618      	mov	r0, r3
 80056d8:	f000 fc44 	bl	8005f64 <osSemaphoreWait>
 80056dc:	4603      	mov	r3, r0
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d1f5      	bne.n	80056ce <low_level_output+0xfa>

    {
    }

    HAL_ETH_ReleaseTxPacket(&heth);
 80056e2:	4807      	ldr	r0, [pc, #28]	@ (8005700 <low_level_output+0x12c>)
 80056e4:	f7fd f828 	bl	8002738 <HAL_ETH_ReleaseTxPacket>
 80056e8:	e002      	b.n	80056f0 <low_level_output+0x11c>
  } else {
    pbuf_free(p);
 80056ea:	6838      	ldr	r0, [r7, #0]
 80056ec:	f007 f9ec 	bl	800cac8 <pbuf_free>
  }

  return errval;
 80056f0:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 80056f4:	4618      	mov	r0, r3
 80056f6:	3748      	adds	r7, #72	@ 0x48
 80056f8:	46bd      	mov	sp, r7
 80056fa:	bd80      	pop	{r7, pc}
 80056fc:	200055f8 	.word	0x200055f8
 8005700:	20005548 	.word	0x20005548
 8005704:	20005544 	.word	0x20005544

08005708 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b084      	sub	sp, #16
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8005710:	2300      	movs	r3, #0
 8005712:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8005714:	4b07      	ldr	r3, [pc, #28]	@ (8005734 <low_level_input+0x2c>)
 8005716:	781b      	ldrb	r3, [r3, #0]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d105      	bne.n	8005728 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 800571c:	f107 030c 	add.w	r3, r7, #12
 8005720:	4619      	mov	r1, r3
 8005722:	4805      	ldr	r0, [pc, #20]	@ (8005738 <low_level_input+0x30>)
 8005724:	f7fc fec5 	bl	80024b2 <HAL_ETH_ReadData>
  }

  return p;
 8005728:	68fb      	ldr	r3, [r7, #12]
}
 800572a:	4618      	mov	r0, r3
 800572c:	3710      	adds	r7, #16
 800572e:	46bd      	mov	sp, r7
 8005730:	bd80      	pop	{r7, pc}
 8005732:	bf00      	nop
 8005734:	200053fc 	.word	0x200053fc
 8005738:	20005548 	.word	0x20005548

0800573c <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
static void ethernetif_input(void const * argument)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b084      	sub	sp, #16
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8005744:	2300      	movs	r3, #0
 8005746:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800574c:	4b0f      	ldr	r3, [pc, #60]	@ (800578c <ethernetif_input+0x50>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f04f 31ff 	mov.w	r1, #4294967295
 8005754:	4618      	mov	r0, r3
 8005756:	f000 fc05 	bl	8005f64 <osSemaphoreWait>
 800575a:	4603      	mov	r3, r0
 800575c:	2b00      	cmp	r3, #0
 800575e:	d1f5      	bne.n	800574c <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 8005760:	68b8      	ldr	r0, [r7, #8]
 8005762:	f7ff ffd1 	bl	8005708 <low_level_input>
 8005766:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d00a      	beq.n	8005784 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	691b      	ldr	r3, [r3, #16]
 8005772:	68b9      	ldr	r1, [r7, #8]
 8005774:	68f8      	ldr	r0, [r7, #12]
 8005776:	4798      	blx	r3
 8005778:	4603      	mov	r3, r0
 800577a:	2b00      	cmp	r3, #0
 800577c:	d002      	beq.n	8005784 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 800577e:	68f8      	ldr	r0, [r7, #12]
 8005780:	f007 f9a2 	bl	800cac8 <pbuf_free>
          }
        }
      } while(p!=NULL);
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d1ea      	bne.n	8005760 <ethernetif_input+0x24>
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800578a:	e7df      	b.n	800574c <ethernetif_input+0x10>
 800578c:	20005540 	.word	0x20005540

08005790 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b082      	sub	sp, #8
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d106      	bne.n	80057ac <ethernetif_init+0x1c>
 800579e:	4b0e      	ldr	r3, [pc, #56]	@ (80057d8 <ethernetif_init+0x48>)
 80057a0:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 80057a4:	490d      	ldr	r1, [pc, #52]	@ (80057dc <ethernetif_init+0x4c>)
 80057a6:	480e      	ldr	r0, [pc, #56]	@ (80057e0 <ethernetif_init+0x50>)
 80057a8:	f010 fefa 	bl	80165a0 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2273      	movs	r2, #115	@ 0x73
 80057b0:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2274      	movs	r2, #116	@ 0x74
 80057b8:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	4a09      	ldr	r2, [pc, #36]	@ (80057e4 <ethernetif_init+0x54>)
 80057c0:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	4a08      	ldr	r2, [pc, #32]	@ (80057e8 <ethernetif_init+0x58>)
 80057c6:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 80057c8:	6878      	ldr	r0, [r7, #4]
 80057ca:	f7ff fdb7 	bl	800533c <low_level_init>

  return ERR_OK;
 80057ce:	2300      	movs	r3, #0
}
 80057d0:	4618      	mov	r0, r3
 80057d2:	3708      	adds	r7, #8
 80057d4:	46bd      	mov	sp, r7
 80057d6:	bd80      	pop	{r7, pc}
 80057d8:	08017ad0 	.word	0x08017ad0
 80057dc:	08017aec 	.word	0x08017aec
 80057e0:	08017afc 	.word	0x08017afc
 80057e4:	080142e9 	.word	0x080142e9
 80057e8:	080055d5 	.word	0x080055d5

080057ec <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b084      	sub	sp, #16
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 80057f8:	68f9      	ldr	r1, [r7, #12]
 80057fa:	4809      	ldr	r0, [pc, #36]	@ (8005820 <pbuf_free_custom+0x34>)
 80057fc:	f006 fa9c 	bl	800bd38 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8005800:	4b08      	ldr	r3, [pc, #32]	@ (8005824 <pbuf_free_custom+0x38>)
 8005802:	781b      	ldrb	r3, [r3, #0]
 8005804:	2b01      	cmp	r3, #1
 8005806:	d107      	bne.n	8005818 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8005808:	4b06      	ldr	r3, [pc, #24]	@ (8005824 <pbuf_free_custom+0x38>)
 800580a:	2200      	movs	r2, #0
 800580c:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 800580e:	4b06      	ldr	r3, [pc, #24]	@ (8005828 <pbuf_free_custom+0x3c>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	4618      	mov	r0, r3
 8005814:	f000 fbf4 	bl	8006000 <osSemaphoreRelease>
  }
}
 8005818:	bf00      	nop
 800581a:	3710      	adds	r7, #16
 800581c:	46bd      	mov	sp, r7
 800581e:	bd80      	pop	{r7, pc}
 8005820:	0801b014 	.word	0x0801b014
 8005824:	200053fc 	.word	0x200053fc
 8005828:	20005540 	.word	0x20005540

0800582c <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8005830:	f7fc fb46 	bl	8001ec0 <HAL_GetTick>
 8005834:	4603      	mov	r3, r0
}
 8005836:	4618      	mov	r0, r3
 8005838:	bd80      	pop	{r7, pc}
	...

0800583c <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b08e      	sub	sp, #56	@ 0x38
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005844:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005848:	2200      	movs	r2, #0
 800584a:	601a      	str	r2, [r3, #0]
 800584c:	605a      	str	r2, [r3, #4]
 800584e:	609a      	str	r2, [r3, #8]
 8005850:	60da      	str	r2, [r3, #12]
 8005852:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4a59      	ldr	r2, [pc, #356]	@ (80059c0 <HAL_ETH_MspInit+0x184>)
 800585a:	4293      	cmp	r3, r2
 800585c:	f040 80ac 	bne.w	80059b8 <HAL_ETH_MspInit+0x17c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8005860:	2300      	movs	r3, #0
 8005862:	623b      	str	r3, [r7, #32]
 8005864:	4b57      	ldr	r3, [pc, #348]	@ (80059c4 <HAL_ETH_MspInit+0x188>)
 8005866:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005868:	4a56      	ldr	r2, [pc, #344]	@ (80059c4 <HAL_ETH_MspInit+0x188>)
 800586a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800586e:	6313      	str	r3, [r2, #48]	@ 0x30
 8005870:	4b54      	ldr	r3, [pc, #336]	@ (80059c4 <HAL_ETH_MspInit+0x188>)
 8005872:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005874:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005878:	623b      	str	r3, [r7, #32]
 800587a:	6a3b      	ldr	r3, [r7, #32]
 800587c:	2300      	movs	r3, #0
 800587e:	61fb      	str	r3, [r7, #28]
 8005880:	4b50      	ldr	r3, [pc, #320]	@ (80059c4 <HAL_ETH_MspInit+0x188>)
 8005882:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005884:	4a4f      	ldr	r2, [pc, #316]	@ (80059c4 <HAL_ETH_MspInit+0x188>)
 8005886:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800588a:	6313      	str	r3, [r2, #48]	@ 0x30
 800588c:	4b4d      	ldr	r3, [pc, #308]	@ (80059c4 <HAL_ETH_MspInit+0x188>)
 800588e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005890:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005894:	61fb      	str	r3, [r7, #28]
 8005896:	69fb      	ldr	r3, [r7, #28]
 8005898:	2300      	movs	r3, #0
 800589a:	61bb      	str	r3, [r7, #24]
 800589c:	4b49      	ldr	r3, [pc, #292]	@ (80059c4 <HAL_ETH_MspInit+0x188>)
 800589e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058a0:	4a48      	ldr	r2, [pc, #288]	@ (80059c4 <HAL_ETH_MspInit+0x188>)
 80058a2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80058a6:	6313      	str	r3, [r2, #48]	@ 0x30
 80058a8:	4b46      	ldr	r3, [pc, #280]	@ (80059c4 <HAL_ETH_MspInit+0x188>)
 80058aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058ac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80058b0:	61bb      	str	r3, [r7, #24]
 80058b2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80058b4:	2300      	movs	r3, #0
 80058b6:	617b      	str	r3, [r7, #20]
 80058b8:	4b42      	ldr	r3, [pc, #264]	@ (80059c4 <HAL_ETH_MspInit+0x188>)
 80058ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058bc:	4a41      	ldr	r2, [pc, #260]	@ (80059c4 <HAL_ETH_MspInit+0x188>)
 80058be:	f043 0304 	orr.w	r3, r3, #4
 80058c2:	6313      	str	r3, [r2, #48]	@ 0x30
 80058c4:	4b3f      	ldr	r3, [pc, #252]	@ (80059c4 <HAL_ETH_MspInit+0x188>)
 80058c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058c8:	f003 0304 	and.w	r3, r3, #4
 80058cc:	617b      	str	r3, [r7, #20]
 80058ce:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80058d0:	2300      	movs	r3, #0
 80058d2:	613b      	str	r3, [r7, #16]
 80058d4:	4b3b      	ldr	r3, [pc, #236]	@ (80059c4 <HAL_ETH_MspInit+0x188>)
 80058d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058d8:	4a3a      	ldr	r2, [pc, #232]	@ (80059c4 <HAL_ETH_MspInit+0x188>)
 80058da:	f043 0301 	orr.w	r3, r3, #1
 80058de:	6313      	str	r3, [r2, #48]	@ 0x30
 80058e0:	4b38      	ldr	r3, [pc, #224]	@ (80059c4 <HAL_ETH_MspInit+0x188>)
 80058e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058e4:	f003 0301 	and.w	r3, r3, #1
 80058e8:	613b      	str	r3, [r7, #16]
 80058ea:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80058ec:	2300      	movs	r3, #0
 80058ee:	60fb      	str	r3, [r7, #12]
 80058f0:	4b34      	ldr	r3, [pc, #208]	@ (80059c4 <HAL_ETH_MspInit+0x188>)
 80058f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058f4:	4a33      	ldr	r2, [pc, #204]	@ (80059c4 <HAL_ETH_MspInit+0x188>)
 80058f6:	f043 0302 	orr.w	r3, r3, #2
 80058fa:	6313      	str	r3, [r2, #48]	@ 0x30
 80058fc:	4b31      	ldr	r3, [pc, #196]	@ (80059c4 <HAL_ETH_MspInit+0x188>)
 80058fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005900:	f003 0302 	and.w	r3, r3, #2
 8005904:	60fb      	str	r3, [r7, #12]
 8005906:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8005908:	2300      	movs	r3, #0
 800590a:	60bb      	str	r3, [r7, #8]
 800590c:	4b2d      	ldr	r3, [pc, #180]	@ (80059c4 <HAL_ETH_MspInit+0x188>)
 800590e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005910:	4a2c      	ldr	r2, [pc, #176]	@ (80059c4 <HAL_ETH_MspInit+0x188>)
 8005912:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005916:	6313      	str	r3, [r2, #48]	@ 0x30
 8005918:	4b2a      	ldr	r3, [pc, #168]	@ (80059c4 <HAL_ETH_MspInit+0x188>)
 800591a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800591c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005920:	60bb      	str	r3, [r7, #8]
 8005922:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8005924:	2332      	movs	r3, #50	@ 0x32
 8005926:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005928:	2302      	movs	r3, #2
 800592a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800592c:	2300      	movs	r3, #0
 800592e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005930:	2303      	movs	r3, #3
 8005932:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005934:	230b      	movs	r3, #11
 8005936:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005938:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800593c:	4619      	mov	r1, r3
 800593e:	4822      	ldr	r0, [pc, #136]	@ (80059c8 <HAL_ETH_MspInit+0x18c>)
 8005940:	f7fd fe2c 	bl	800359c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8005944:	2386      	movs	r3, #134	@ 0x86
 8005946:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005948:	2302      	movs	r3, #2
 800594a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800594c:	2300      	movs	r3, #0
 800594e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005950:	2303      	movs	r3, #3
 8005952:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005954:	230b      	movs	r3, #11
 8005956:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005958:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800595c:	4619      	mov	r1, r3
 800595e:	481b      	ldr	r0, [pc, #108]	@ (80059cc <HAL_ETH_MspInit+0x190>)
 8005960:	f7fd fe1c 	bl	800359c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8005964:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005968:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800596a:	2302      	movs	r3, #2
 800596c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800596e:	2300      	movs	r3, #0
 8005970:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005972:	2303      	movs	r3, #3
 8005974:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005976:	230b      	movs	r3, #11
 8005978:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800597a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800597e:	4619      	mov	r1, r3
 8005980:	4813      	ldr	r0, [pc, #76]	@ (80059d0 <HAL_ETH_MspInit+0x194>)
 8005982:	f7fd fe0b 	bl	800359c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8005986:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800598a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800598c:	2302      	movs	r3, #2
 800598e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005990:	2300      	movs	r3, #0
 8005992:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005994:	2303      	movs	r3, #3
 8005996:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005998:	230b      	movs	r3, #11
 800599a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800599c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80059a0:	4619      	mov	r1, r3
 80059a2:	480c      	ldr	r0, [pc, #48]	@ (80059d4 <HAL_ETH_MspInit+0x198>)
 80059a4:	f7fd fdfa 	bl	800359c <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 80059a8:	2200      	movs	r2, #0
 80059aa:	2105      	movs	r1, #5
 80059ac:	203d      	movs	r0, #61	@ 0x3d
 80059ae:	f7fc fb6f 	bl	8002090 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 80059b2:	203d      	movs	r0, #61	@ 0x3d
 80059b4:	f7fc fb88 	bl	80020c8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80059b8:	bf00      	nop
 80059ba:	3738      	adds	r7, #56	@ 0x38
 80059bc:	46bd      	mov	sp, r7
 80059be:	bd80      	pop	{r7, pc}
 80059c0:	40028000 	.word	0x40028000
 80059c4:	40023800 	.word	0x40023800
 80059c8:	40020800 	.word	0x40020800
 80059cc:	40020000 	.word	0x40020000
 80059d0:	40020400 	.word	0x40020400
 80059d4:	40021800 	.word	0x40021800

080059d8 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 80059dc:	4802      	ldr	r0, [pc, #8]	@ (80059e8 <ETH_PHY_IO_Init+0x10>)
 80059de:	f7fd f975 	bl	8002ccc <HAL_ETH_SetMDIOClockRange>

  return 0;
 80059e2:	2300      	movs	r3, #0
}
 80059e4:	4618      	mov	r0, r3
 80059e6:	bd80      	pop	{r7, pc}
 80059e8:	20005548 	.word	0x20005548

080059ec <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 80059ec:	b480      	push	{r7}
 80059ee:	af00      	add	r7, sp, #0
  return 0;
 80059f0:	2300      	movs	r3, #0
}
 80059f2:	4618      	mov	r0, r3
 80059f4:	46bd      	mov	sp, r7
 80059f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fa:	4770      	bx	lr

080059fc <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b084      	sub	sp, #16
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	60f8      	str	r0, [r7, #12]
 8005a04:	60b9      	str	r1, [r7, #8]
 8005a06:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	68ba      	ldr	r2, [r7, #8]
 8005a0c:	68f9      	ldr	r1, [r7, #12]
 8005a0e:	4807      	ldr	r0, [pc, #28]	@ (8005a2c <ETH_PHY_IO_ReadReg+0x30>)
 8005a10:	f7fc ffc4 	bl	800299c <HAL_ETH_ReadPHYRegister>
 8005a14:	4603      	mov	r3, r0
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d002      	beq.n	8005a20 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8005a1a:	f04f 33ff 	mov.w	r3, #4294967295
 8005a1e:	e000      	b.n	8005a22 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8005a20:	2300      	movs	r3, #0
}
 8005a22:	4618      	mov	r0, r3
 8005a24:	3710      	adds	r7, #16
 8005a26:	46bd      	mov	sp, r7
 8005a28:	bd80      	pop	{r7, pc}
 8005a2a:	bf00      	nop
 8005a2c:	20005548 	.word	0x20005548

08005a30 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b084      	sub	sp, #16
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	60f8      	str	r0, [r7, #12]
 8005a38:	60b9      	str	r1, [r7, #8]
 8005a3a:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	68ba      	ldr	r2, [r7, #8]
 8005a40:	68f9      	ldr	r1, [r7, #12]
 8005a42:	4807      	ldr	r0, [pc, #28]	@ (8005a60 <ETH_PHY_IO_WriteReg+0x30>)
 8005a44:	f7fc fff5 	bl	8002a32 <HAL_ETH_WritePHYRegister>
 8005a48:	4603      	mov	r3, r0
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d002      	beq.n	8005a54 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8005a4e:	f04f 33ff 	mov.w	r3, #4294967295
 8005a52:	e000      	b.n	8005a56 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8005a54:	2300      	movs	r3, #0
}
 8005a56:	4618      	mov	r0, r3
 8005a58:	3710      	adds	r7, #16
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	bd80      	pop	{r7, pc}
 8005a5e:	bf00      	nop
 8005a60:	20005548 	.word	0x20005548

08005a64 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8005a68:	f7fc fa2a 	bl	8001ec0 <HAL_GetTick>
 8005a6c:	4603      	mov	r3, r0
}
 8005a6e:	4618      	mov	r0, r3
 8005a70:	bd80      	pop	{r7, pc}
	...

08005a74 <ethernet_link_thread>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */

void ethernet_link_thread(void const * argument)
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b0a0      	sub	sp, #128	@ 0x80
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8005a7c:	f107 0308 	add.w	r3, r7, #8
 8005a80:	2264      	movs	r2, #100	@ 0x64
 8005a82:	2100      	movs	r1, #0
 8005a84:	4618      	mov	r0, r3
 8005a86:	f010 fe2a 	bl	80166de <memset>
  int32_t PHYLinkState = 0;
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8005a8e:	2300      	movs	r3, #0
 8005a90:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005a92:	2300      	movs	r3, #0
 8005a94:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005a96:	2300      	movs	r3, #0
 8005a98:	677b      	str	r3, [r7, #116]	@ 0x74

  struct netif *netif = (struct netif *) argument;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	66fb      	str	r3, [r7, #108]	@ 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8005a9e:	483a      	ldr	r0, [pc, #232]	@ (8005b88 <ethernet_link_thread+0x114>)
 8005aa0:	f7fc f951 	bl	8001d46 <LAN8742_GetLinkState>
 8005aa4:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8005aa6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005aa8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005aac:	089b      	lsrs	r3, r3, #2
 8005aae:	f003 0301 	and.w	r3, r3, #1
 8005ab2:	b2db      	uxtb	r3, r3
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d00c      	beq.n	8005ad2 <ethernet_link_thread+0x5e>
 8005ab8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005aba:	2b01      	cmp	r3, #1
 8005abc:	dc09      	bgt.n	8005ad2 <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 8005abe:	4833      	ldr	r0, [pc, #204]	@ (8005b8c <ethernet_link_thread+0x118>)
 8005ac0:	f7fc fc1c 	bl	80022fc <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 8005ac4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005ac6:	f006 fbbb 	bl	800c240 <netif_set_down>
    netif_set_link_down(netif);
 8005aca:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005acc:	f006 fc1e 	bl	800c30c <netif_set_link_down>
 8005ad0:	e055      	b.n	8005b7e <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8005ad2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005ad4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005ad8:	f003 0304 	and.w	r3, r3, #4
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d14e      	bne.n	8005b7e <ethernet_link_thread+0x10a>
 8005ae0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005ae2:	2b01      	cmp	r3, #1
 8005ae4:	dd4b      	ble.n	8005b7e <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 8005ae6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005ae8:	3b02      	subs	r3, #2
 8005aea:	2b03      	cmp	r3, #3
 8005aec:	d82a      	bhi.n	8005b44 <ethernet_link_thread+0xd0>
 8005aee:	a201      	add	r2, pc, #4	@ (adr r2, 8005af4 <ethernet_link_thread+0x80>)
 8005af0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005af4:	08005b05 	.word	0x08005b05
 8005af8:	08005b17 	.word	0x08005b17
 8005afc:	08005b27 	.word	0x08005b27
 8005b00:	08005b37 	.word	0x08005b37
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8005b04:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005b08:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 8005b0a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005b0e:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8005b10:	2301      	movs	r3, #1
 8005b12:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8005b14:	e017      	b.n	8005b46 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8005b16:	2300      	movs	r3, #0
 8005b18:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 8005b1a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005b1e:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8005b20:	2301      	movs	r3, #1
 8005b22:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8005b24:	e00f      	b.n	8005b46 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8005b26:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005b2a:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8005b30:	2301      	movs	r3, #1
 8005b32:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8005b34:	e007      	b.n	8005b46 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8005b36:	2300      	movs	r3, #0
 8005b38:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8005b3e:	2301      	movs	r3, #1
 8005b40:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8005b42:	e000      	b.n	8005b46 <ethernet_link_thread+0xd2>
    default:
      break;
 8005b44:	bf00      	nop
    }

    if(linkchanged)
 8005b46:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d018      	beq.n	8005b7e <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8005b4c:	f107 0308 	add.w	r3, r7, #8
 8005b50:	4619      	mov	r1, r3
 8005b52:	480e      	ldr	r0, [pc, #56]	@ (8005b8c <ethernet_link_thread+0x118>)
 8005b54:	f7fc ffb6 	bl	8002ac4 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8005b58:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005b5a:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 8005b5c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005b5e:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8005b60:	f107 0308 	add.w	r3, r7, #8
 8005b64:	4619      	mov	r1, r3
 8005b66:	4809      	ldr	r0, [pc, #36]	@ (8005b8c <ethernet_link_thread+0x118>)
 8005b68:	f7fd f896 	bl	8002c98 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 8005b6c:	4807      	ldr	r0, [pc, #28]	@ (8005b8c <ethernet_link_thread+0x118>)
 8005b6e:	f7fc fb37 	bl	80021e0 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 8005b72:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005b74:	f006 faf8 	bl	800c168 <netif_set_up>
      netif_set_link_up(netif);
 8005b78:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005b7a:	f006 fb93 	bl	800c2a4 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 8005b7e:	2064      	movs	r0, #100	@ 0x64
 8005b80:	f000 f90e 	bl	8005da0 <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8005b84:	e78b      	b.n	8005a9e <ethernet_link_thread+0x2a>
 8005b86:	bf00      	nop
 8005b88:	20005630 	.word	0x20005630
 8005b8c:	20005548 	.word	0x20005548

08005b90 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b086      	sub	sp, #24
 8005b94:	af02      	add	r7, sp, #8
 8005b96:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8005b98:	4812      	ldr	r0, [pc, #72]	@ (8005be4 <HAL_ETH_RxAllocateCallback+0x54>)
 8005b9a:	f006 f859 	bl	800bc50 <memp_malloc_pool>
 8005b9e:	60f8      	str	r0, [r7, #12]
  if (p)
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d014      	beq.n	8005bd0 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	f103 0220 	add.w	r2, r3, #32
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	4a0d      	ldr	r2, [pc, #52]	@ (8005be8 <HAL_ETH_RxAllocateCallback+0x58>)
 8005bb4:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8005bbe:	9201      	str	r2, [sp, #4]
 8005bc0:	9300      	str	r3, [sp, #0]
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	2241      	movs	r2, #65	@ 0x41
 8005bc6:	2100      	movs	r1, #0
 8005bc8:	2000      	movs	r0, #0
 8005bca:	f006 fdc3 	bl	800c754 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8005bce:	e005      	b.n	8005bdc <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8005bd0:	4b06      	ldr	r3, [pc, #24]	@ (8005bec <HAL_ETH_RxAllocateCallback+0x5c>)
 8005bd2:	2201      	movs	r2, #1
 8005bd4:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2200      	movs	r2, #0
 8005bda:	601a      	str	r2, [r3, #0]
}
 8005bdc:	bf00      	nop
 8005bde:	3710      	adds	r7, #16
 8005be0:	46bd      	mov	sp, r7
 8005be2:	bd80      	pop	{r7, pc}
 8005be4:	0801b014 	.word	0x0801b014
 8005be8:	080057ed 	.word	0x080057ed
 8005bec:	200053fc 	.word	0x200053fc

08005bf0 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8005bf0:	b480      	push	{r7}
 8005bf2:	b089      	sub	sp, #36	@ 0x24
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	60f8      	str	r0, [r7, #12]
 8005bf8:	60b9      	str	r1, [r7, #8]
 8005bfa:	607a      	str	r2, [r7, #4]
 8005bfc:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 8005c02:	68bb      	ldr	r3, [r7, #8]
 8005c04:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8005c06:	2300      	movs	r3, #0
 8005c08:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	3b20      	subs	r3, #32
 8005c0e:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8005c10:	69fb      	ldr	r3, [r7, #28]
 8005c12:	2200      	movs	r2, #0
 8005c14:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8005c16:	69fb      	ldr	r3, [r7, #28]
 8005c18:	2200      	movs	r2, #0
 8005c1a:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8005c1c:	69fb      	ldr	r3, [r7, #28]
 8005c1e:	887a      	ldrh	r2, [r7, #2]
 8005c20:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 8005c22:	69bb      	ldr	r3, [r7, #24]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d103      	bne.n	8005c32 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8005c2a:	69bb      	ldr	r3, [r7, #24]
 8005c2c:	69fa      	ldr	r2, [r7, #28]
 8005c2e:	601a      	str	r2, [r3, #0]
 8005c30:	e003      	b.n	8005c3a <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8005c32:	697b      	ldr	r3, [r7, #20]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	69fa      	ldr	r2, [r7, #28]
 8005c38:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8005c3a:	697b      	ldr	r3, [r7, #20]
 8005c3c:	69fa      	ldr	r2, [r7, #28]
 8005c3e:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8005c40:	69bb      	ldr	r3, [r7, #24]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	61fb      	str	r3, [r7, #28]
 8005c46:	e009      	b.n	8005c5c <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8005c48:	69fb      	ldr	r3, [r7, #28]
 8005c4a:	891a      	ldrh	r2, [r3, #8]
 8005c4c:	887b      	ldrh	r3, [r7, #2]
 8005c4e:	4413      	add	r3, r2
 8005c50:	b29a      	uxth	r2, r3
 8005c52:	69fb      	ldr	r3, [r7, #28]
 8005c54:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8005c56:	69fb      	ldr	r3, [r7, #28]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	61fb      	str	r3, [r7, #28]
 8005c5c:	69fb      	ldr	r3, [r7, #28]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d1f2      	bne.n	8005c48 <HAL_ETH_RxLinkCallback+0x58>
  }

/* USER CODE END HAL ETH RxLinkCallback */
}
 8005c62:	bf00      	nop
 8005c64:	bf00      	nop
 8005c66:	3724      	adds	r7, #36	@ 0x24
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6e:	4770      	bx	lr

08005c70 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b082      	sub	sp, #8
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 8005c78:	6878      	ldr	r0, [r7, #4]
 8005c7a:	f006 ff25 	bl	800cac8 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 8005c7e:	bf00      	nop
 8005c80:	3708      	adds	r7, #8
 8005c82:	46bd      	mov	sp, r7
 8005c84:	bd80      	pop	{r7, pc}

08005c86 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005c86:	b480      	push	{r7}
 8005c88:	b085      	sub	sp, #20
 8005c8a:	af00      	add	r7, sp, #0
 8005c8c:	4603      	mov	r3, r0
 8005c8e:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005c90:	2300      	movs	r3, #0
 8005c92:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005c94:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005c98:	2b84      	cmp	r3, #132	@ 0x84
 8005c9a:	d005      	beq.n	8005ca8 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005c9c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	4413      	add	r3, r2
 8005ca4:	3303      	adds	r3, #3
 8005ca6:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
}
 8005caa:	4618      	mov	r0, r3
 8005cac:	3714      	adds	r7, #20
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb4:	4770      	bx	lr

08005cb6 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8005cb6:	b480      	push	{r7}
 8005cb8:	b083      	sub	sp, #12
 8005cba:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005cbc:	f3ef 8305 	mrs	r3, IPSR
 8005cc0:	607b      	str	r3, [r7, #4]
  return(result);
 8005cc2:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	bf14      	ite	ne
 8005cc8:	2301      	movne	r3, #1
 8005cca:	2300      	moveq	r3, #0
 8005ccc:	b2db      	uxtb	r3, r3
}
 8005cce:	4618      	mov	r0, r3
 8005cd0:	370c      	adds	r7, #12
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd8:	4770      	bx	lr

08005cda <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005cda:	b580      	push	{r7, lr}
 8005cdc:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005cde:	f001 fd5f 	bl	80077a0 <vTaskStartScheduler>
  
  return osOK;
 8005ce2:	2300      	movs	r3, #0
}
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	bd80      	pop	{r7, pc}

08005ce8 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8005cec:	f7ff ffe3 	bl	8005cb6 <inHandlerMode>
 8005cf0:	4603      	mov	r3, r0
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d003      	beq.n	8005cfe <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8005cf6:	f001 fe79 	bl	80079ec <xTaskGetTickCountFromISR>
 8005cfa:	4603      	mov	r3, r0
 8005cfc:	e002      	b.n	8005d04 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8005cfe:	f001 fe65 	bl	80079cc <xTaskGetTickCount>
 8005d02:	4603      	mov	r3, r0
  }
}
 8005d04:	4618      	mov	r0, r3
 8005d06:	bd80      	pop	{r7, pc}

08005d08 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005d08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d0a:	b089      	sub	sp, #36	@ 0x24
 8005d0c:	af04      	add	r7, sp, #16
 8005d0e:	6078      	str	r0, [r7, #4]
 8005d10:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	695b      	ldr	r3, [r3, #20]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d020      	beq.n	8005d5c <osThreadCreate+0x54>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	699b      	ldr	r3, [r3, #24]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d01c      	beq.n	8005d5c <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	685c      	ldr	r4, [r3, #4]
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	691e      	ldr	r6, [r3, #16]
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005d34:	4618      	mov	r0, r3
 8005d36:	f7ff ffa6 	bl	8005c86 <makeFreeRtosPriority>
 8005d3a:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	695b      	ldr	r3, [r3, #20]
 8005d40:	687a      	ldr	r2, [r7, #4]
 8005d42:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005d44:	9202      	str	r2, [sp, #8]
 8005d46:	9301      	str	r3, [sp, #4]
 8005d48:	9100      	str	r1, [sp, #0]
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	4632      	mov	r2, r6
 8005d4e:	4629      	mov	r1, r5
 8005d50:	4620      	mov	r0, r4
 8005d52:	f001 fb3f 	bl	80073d4 <xTaskCreateStatic>
 8005d56:	4603      	mov	r3, r0
 8005d58:	60fb      	str	r3, [r7, #12]
 8005d5a:	e01c      	b.n	8005d96 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	685c      	ldr	r4, [r3, #4]
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005d68:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005d70:	4618      	mov	r0, r3
 8005d72:	f7ff ff88 	bl	8005c86 <makeFreeRtosPriority>
 8005d76:	4602      	mov	r2, r0
 8005d78:	f107 030c 	add.w	r3, r7, #12
 8005d7c:	9301      	str	r3, [sp, #4]
 8005d7e:	9200      	str	r2, [sp, #0]
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	4632      	mov	r2, r6
 8005d84:	4629      	mov	r1, r5
 8005d86:	4620      	mov	r0, r4
 8005d88:	f001 fb84 	bl	8007494 <xTaskCreate>
 8005d8c:	4603      	mov	r3, r0
 8005d8e:	2b01      	cmp	r3, #1
 8005d90:	d001      	beq.n	8005d96 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005d92:	2300      	movs	r3, #0
 8005d94:	e000      	b.n	8005d98 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005d96:	68fb      	ldr	r3, [r7, #12]
}
 8005d98:	4618      	mov	r0, r3
 8005d9a:	3714      	adds	r7, #20
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005da0 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b084      	sub	sp, #16
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d001      	beq.n	8005db6 <osDelay+0x16>
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	e000      	b.n	8005db8 <osDelay+0x18>
 8005db6:	2301      	movs	r3, #1
 8005db8:	4618      	mov	r0, r3
 8005dba:	f001 fcbb 	bl	8007734 <vTaskDelay>
  
  return osOK;
 8005dbe:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	3710      	adds	r7, #16
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	bd80      	pop	{r7, pc}

08005dc8 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b082      	sub	sp, #8
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	685b      	ldr	r3, [r3, #4]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d007      	beq.n	8005de8 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	685b      	ldr	r3, [r3, #4]
 8005ddc:	4619      	mov	r1, r3
 8005dde:	2001      	movs	r0, #1
 8005de0:	f000 fc85 	bl	80066ee <xQueueCreateMutexStatic>
 8005de4:	4603      	mov	r3, r0
 8005de6:	e003      	b.n	8005df0 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8005de8:	2001      	movs	r0, #1
 8005dea:	f000 fc68 	bl	80066be <xQueueCreateMutex>
 8005dee:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8005df0:	4618      	mov	r0, r3
 8005df2:	3708      	adds	r7, #8
 8005df4:	46bd      	mov	sp, r7
 8005df6:	bd80      	pop	{r7, pc}

08005df8 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b084      	sub	sp, #16
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
 8005e00:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8005e02:	2300      	movs	r3, #0
 8005e04:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d101      	bne.n	8005e10 <osMutexWait+0x18>
    return osErrorParameter;
 8005e0c:	2380      	movs	r3, #128	@ 0x80
 8005e0e:	e03a      	b.n	8005e86 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8005e10:	2300      	movs	r3, #0
 8005e12:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e1a:	d103      	bne.n	8005e24 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8005e1c:	f04f 33ff 	mov.w	r3, #4294967295
 8005e20:	60fb      	str	r3, [r7, #12]
 8005e22:	e009      	b.n	8005e38 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d006      	beq.n	8005e38 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d101      	bne.n	8005e38 <osMutexWait+0x40>
      ticks = 1;
 8005e34:	2301      	movs	r3, #1
 8005e36:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8005e38:	f7ff ff3d 	bl	8005cb6 <inHandlerMode>
 8005e3c:	4603      	mov	r3, r0
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d017      	beq.n	8005e72 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8005e42:	f107 0308 	add.w	r3, r7, #8
 8005e46:	461a      	mov	r2, r3
 8005e48:	2100      	movs	r1, #0
 8005e4a:	6878      	ldr	r0, [r7, #4]
 8005e4c:	f001 f88c 	bl	8006f68 <xQueueReceiveFromISR>
 8005e50:	4603      	mov	r3, r0
 8005e52:	2b01      	cmp	r3, #1
 8005e54:	d001      	beq.n	8005e5a <osMutexWait+0x62>
      return osErrorOS;
 8005e56:	23ff      	movs	r3, #255	@ 0xff
 8005e58:	e015      	b.n	8005e86 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d011      	beq.n	8005e84 <osMutexWait+0x8c>
 8005e60:	4b0b      	ldr	r3, [pc, #44]	@ (8005e90 <osMutexWait+0x98>)
 8005e62:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005e66:	601a      	str	r2, [r3, #0]
 8005e68:	f3bf 8f4f 	dsb	sy
 8005e6c:	f3bf 8f6f 	isb	sy
 8005e70:	e008      	b.n	8005e84 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8005e72:	68f9      	ldr	r1, [r7, #12]
 8005e74:	6878      	ldr	r0, [r7, #4]
 8005e76:	f000 ff67 	bl	8006d48 <xQueueSemaphoreTake>
 8005e7a:	4603      	mov	r3, r0
 8005e7c:	2b01      	cmp	r3, #1
 8005e7e:	d001      	beq.n	8005e84 <osMutexWait+0x8c>
    return osErrorOS;
 8005e80:	23ff      	movs	r3, #255	@ 0xff
 8005e82:	e000      	b.n	8005e86 <osMutexWait+0x8e>
  }
  
  return osOK;
 8005e84:	2300      	movs	r3, #0
}
 8005e86:	4618      	mov	r0, r3
 8005e88:	3710      	adds	r7, #16
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	bd80      	pop	{r7, pc}
 8005e8e:	bf00      	nop
 8005e90:	e000ed04 	.word	0xe000ed04

08005e94 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b084      	sub	sp, #16
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8005ea4:	f7ff ff07 	bl	8005cb6 <inHandlerMode>
 8005ea8:	4603      	mov	r3, r0
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d016      	beq.n	8005edc <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8005eae:	f107 0308 	add.w	r3, r7, #8
 8005eb2:	4619      	mov	r1, r3
 8005eb4:	6878      	ldr	r0, [r7, #4]
 8005eb6:	f000 fdd5 	bl	8006a64 <xQueueGiveFromISR>
 8005eba:	4603      	mov	r3, r0
 8005ebc:	2b01      	cmp	r3, #1
 8005ebe:	d001      	beq.n	8005ec4 <osMutexRelease+0x30>
      return osErrorOS;
 8005ec0:	23ff      	movs	r3, #255	@ 0xff
 8005ec2:	e017      	b.n	8005ef4 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d013      	beq.n	8005ef2 <osMutexRelease+0x5e>
 8005eca:	4b0c      	ldr	r3, [pc, #48]	@ (8005efc <osMutexRelease+0x68>)
 8005ecc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005ed0:	601a      	str	r2, [r3, #0]
 8005ed2:	f3bf 8f4f 	dsb	sy
 8005ed6:	f3bf 8f6f 	isb	sy
 8005eda:	e00a      	b.n	8005ef2 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8005edc:	2300      	movs	r3, #0
 8005ede:	2200      	movs	r2, #0
 8005ee0:	2100      	movs	r1, #0
 8005ee2:	6878      	ldr	r0, [r7, #4]
 8005ee4:	f000 fc1e 	bl	8006724 <xQueueGenericSend>
 8005ee8:	4603      	mov	r3, r0
 8005eea:	2b01      	cmp	r3, #1
 8005eec:	d001      	beq.n	8005ef2 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8005eee:	23ff      	movs	r3, #255	@ 0xff
 8005ef0:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
}
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	3710      	adds	r7, #16
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	bd80      	pop	{r7, pc}
 8005efc:	e000ed04 	.word	0xe000ed04

08005f00 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b086      	sub	sp, #24
 8005f04:	af02      	add	r7, sp, #8
 8005f06:	6078      	str	r0, [r7, #4]
 8005f08:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	685b      	ldr	r3, [r3, #4]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d00f      	beq.n	8005f32 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	2b01      	cmp	r3, #1
 8005f16:	d10a      	bne.n	8005f2e <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	685b      	ldr	r3, [r3, #4]
 8005f1c:	2203      	movs	r2, #3
 8005f1e:	9200      	str	r2, [sp, #0]
 8005f20:	2200      	movs	r2, #0
 8005f22:	2100      	movs	r1, #0
 8005f24:	2001      	movs	r0, #1
 8005f26:	f000 fad9 	bl	80064dc <xQueueGenericCreateStatic>
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	e016      	b.n	8005f5c <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8005f2e:	2300      	movs	r3, #0
 8005f30:	e014      	b.n	8005f5c <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	2b01      	cmp	r3, #1
 8005f36:	d110      	bne.n	8005f5a <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8005f38:	2203      	movs	r2, #3
 8005f3a:	2100      	movs	r1, #0
 8005f3c:	2001      	movs	r0, #1
 8005f3e:	f000 fb4a 	bl	80065d6 <xQueueGenericCreate>
 8005f42:	60f8      	str	r0, [r7, #12]
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d005      	beq.n	8005f56 <osSemaphoreCreate+0x56>
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	2100      	movs	r1, #0
 8005f50:	68f8      	ldr	r0, [r7, #12]
 8005f52:	f000 fbe7 	bl	8006724 <xQueueGenericSend>
      return sema;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	e000      	b.n	8005f5c <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8005f5a:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	3710      	adds	r7, #16
 8005f60:	46bd      	mov	sp, r7
 8005f62:	bd80      	pop	{r7, pc}

08005f64 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b084      	sub	sp, #16
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
 8005f6c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8005f6e:	2300      	movs	r3, #0
 8005f70:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d101      	bne.n	8005f7c <osSemaphoreWait+0x18>
    return osErrorParameter;
 8005f78:	2380      	movs	r3, #128	@ 0x80
 8005f7a:	e03a      	b.n	8005ff2 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f86:	d103      	bne.n	8005f90 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8005f88:	f04f 33ff 	mov.w	r3, #4294967295
 8005f8c:	60fb      	str	r3, [r7, #12]
 8005f8e:	e009      	b.n	8005fa4 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d006      	beq.n	8005fa4 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d101      	bne.n	8005fa4 <osSemaphoreWait+0x40>
      ticks = 1;
 8005fa0:	2301      	movs	r3, #1
 8005fa2:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8005fa4:	f7ff fe87 	bl	8005cb6 <inHandlerMode>
 8005fa8:	4603      	mov	r3, r0
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d017      	beq.n	8005fde <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8005fae:	f107 0308 	add.w	r3, r7, #8
 8005fb2:	461a      	mov	r2, r3
 8005fb4:	2100      	movs	r1, #0
 8005fb6:	6878      	ldr	r0, [r7, #4]
 8005fb8:	f000 ffd6 	bl	8006f68 <xQueueReceiveFromISR>
 8005fbc:	4603      	mov	r3, r0
 8005fbe:	2b01      	cmp	r3, #1
 8005fc0:	d001      	beq.n	8005fc6 <osSemaphoreWait+0x62>
      return osErrorOS;
 8005fc2:	23ff      	movs	r3, #255	@ 0xff
 8005fc4:	e015      	b.n	8005ff2 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8005fc6:	68bb      	ldr	r3, [r7, #8]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d011      	beq.n	8005ff0 <osSemaphoreWait+0x8c>
 8005fcc:	4b0b      	ldr	r3, [pc, #44]	@ (8005ffc <osSemaphoreWait+0x98>)
 8005fce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005fd2:	601a      	str	r2, [r3, #0]
 8005fd4:	f3bf 8f4f 	dsb	sy
 8005fd8:	f3bf 8f6f 	isb	sy
 8005fdc:	e008      	b.n	8005ff0 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8005fde:	68f9      	ldr	r1, [r7, #12]
 8005fe0:	6878      	ldr	r0, [r7, #4]
 8005fe2:	f000 feb1 	bl	8006d48 <xQueueSemaphoreTake>
 8005fe6:	4603      	mov	r3, r0
 8005fe8:	2b01      	cmp	r3, #1
 8005fea:	d001      	beq.n	8005ff0 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8005fec:	23ff      	movs	r3, #255	@ 0xff
 8005fee:	e000      	b.n	8005ff2 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8005ff0:	2300      	movs	r3, #0
}
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	3710      	adds	r7, #16
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	bd80      	pop	{r7, pc}
 8005ffa:	bf00      	nop
 8005ffc:	e000ed04 	.word	0xe000ed04

08006000 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b084      	sub	sp, #16
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8006008:	2300      	movs	r3, #0
 800600a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800600c:	2300      	movs	r3, #0
 800600e:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8006010:	f7ff fe51 	bl	8005cb6 <inHandlerMode>
 8006014:	4603      	mov	r3, r0
 8006016:	2b00      	cmp	r3, #0
 8006018:	d016      	beq.n	8006048 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800601a:	f107 0308 	add.w	r3, r7, #8
 800601e:	4619      	mov	r1, r3
 8006020:	6878      	ldr	r0, [r7, #4]
 8006022:	f000 fd1f 	bl	8006a64 <xQueueGiveFromISR>
 8006026:	4603      	mov	r3, r0
 8006028:	2b01      	cmp	r3, #1
 800602a:	d001      	beq.n	8006030 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800602c:	23ff      	movs	r3, #255	@ 0xff
 800602e:	e017      	b.n	8006060 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d013      	beq.n	800605e <osSemaphoreRelease+0x5e>
 8006036:	4b0c      	ldr	r3, [pc, #48]	@ (8006068 <osSemaphoreRelease+0x68>)
 8006038:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800603c:	601a      	str	r2, [r3, #0]
 800603e:	f3bf 8f4f 	dsb	sy
 8006042:	f3bf 8f6f 	isb	sy
 8006046:	e00a      	b.n	800605e <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8006048:	2300      	movs	r3, #0
 800604a:	2200      	movs	r2, #0
 800604c:	2100      	movs	r1, #0
 800604e:	6878      	ldr	r0, [r7, #4]
 8006050:	f000 fb68 	bl	8006724 <xQueueGenericSend>
 8006054:	4603      	mov	r3, r0
 8006056:	2b01      	cmp	r3, #1
 8006058:	d001      	beq.n	800605e <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800605a:	23ff      	movs	r3, #255	@ 0xff
 800605c:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800605e:	68fb      	ldr	r3, [r7, #12]
}
 8006060:	4618      	mov	r0, r3
 8006062:	3710      	adds	r7, #16
 8006064:	46bd      	mov	sp, r7
 8006066:	bd80      	pop	{r7, pc}
 8006068:	e000ed04 	.word	0xe000ed04

0800606c <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b082      	sub	sp, #8
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8006074:	f7ff fe1f 	bl	8005cb6 <inHandlerMode>
 8006078:	4603      	mov	r3, r0
 800607a:	2b00      	cmp	r3, #0
 800607c:	d001      	beq.n	8006082 <osSemaphoreDelete+0x16>
    return osErrorISR;
 800607e:	2382      	movs	r3, #130	@ 0x82
 8006080:	e003      	b.n	800608a <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 8006082:	6878      	ldr	r0, [r7, #4]
 8006084:	f001 f830 	bl	80070e8 <vQueueDelete>

  return osOK; 
 8006088:	2300      	movs	r3, #0
}
 800608a:	4618      	mov	r0, r3
 800608c:	3708      	adds	r7, #8
 800608e:	46bd      	mov	sp, r7
 8006090:	bd80      	pop	{r7, pc}

08006092 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8006092:	b590      	push	{r4, r7, lr}
 8006094:	b085      	sub	sp, #20
 8006096:	af02      	add	r7, sp, #8
 8006098:	6078      	str	r0, [r7, #4]
 800609a:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	689b      	ldr	r3, [r3, #8]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d011      	beq.n	80060c8 <osMessageCreate+0x36>
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	68db      	ldr	r3, [r3, #12]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d00d      	beq.n	80060c8 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	6818      	ldr	r0, [r3, #0]
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	6859      	ldr	r1, [r3, #4]
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	689a      	ldr	r2, [r3, #8]
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	68db      	ldr	r3, [r3, #12]
 80060bc:	2400      	movs	r4, #0
 80060be:	9400      	str	r4, [sp, #0]
 80060c0:	f000 fa0c 	bl	80064dc <xQueueGenericCreateStatic>
 80060c4:	4603      	mov	r3, r0
 80060c6:	e008      	b.n	80060da <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6818      	ldr	r0, [r3, #0]
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	685b      	ldr	r3, [r3, #4]
 80060d0:	2200      	movs	r2, #0
 80060d2:	4619      	mov	r1, r3
 80060d4:	f000 fa7f 	bl	80065d6 <xQueueGenericCreate>
 80060d8:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80060da:	4618      	mov	r0, r3
 80060dc:	370c      	adds	r7, #12
 80060de:	46bd      	mov	sp, r7
 80060e0:	bd90      	pop	{r4, r7, pc}
	...

080060e4 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b086      	sub	sp, #24
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	60f8      	str	r0, [r7, #12]
 80060ec:	60b9      	str	r1, [r7, #8]
 80060ee:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80060f0:	2300      	movs	r3, #0
 80060f2:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 80060f8:	697b      	ldr	r3, [r7, #20]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d101      	bne.n	8006102 <osMessagePut+0x1e>
    ticks = 1;
 80060fe:	2301      	movs	r3, #1
 8006100:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8006102:	f7ff fdd8 	bl	8005cb6 <inHandlerMode>
 8006106:	4603      	mov	r3, r0
 8006108:	2b00      	cmp	r3, #0
 800610a:	d018      	beq.n	800613e <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800610c:	f107 0210 	add.w	r2, r7, #16
 8006110:	f107 0108 	add.w	r1, r7, #8
 8006114:	2300      	movs	r3, #0
 8006116:	68f8      	ldr	r0, [r7, #12]
 8006118:	f000 fc06 	bl	8006928 <xQueueGenericSendFromISR>
 800611c:	4603      	mov	r3, r0
 800611e:	2b01      	cmp	r3, #1
 8006120:	d001      	beq.n	8006126 <osMessagePut+0x42>
      return osErrorOS;
 8006122:	23ff      	movs	r3, #255	@ 0xff
 8006124:	e018      	b.n	8006158 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006126:	693b      	ldr	r3, [r7, #16]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d014      	beq.n	8006156 <osMessagePut+0x72>
 800612c:	4b0c      	ldr	r3, [pc, #48]	@ (8006160 <osMessagePut+0x7c>)
 800612e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006132:	601a      	str	r2, [r3, #0]
 8006134:	f3bf 8f4f 	dsb	sy
 8006138:	f3bf 8f6f 	isb	sy
 800613c:	e00b      	b.n	8006156 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800613e:	f107 0108 	add.w	r1, r7, #8
 8006142:	2300      	movs	r3, #0
 8006144:	697a      	ldr	r2, [r7, #20]
 8006146:	68f8      	ldr	r0, [r7, #12]
 8006148:	f000 faec 	bl	8006724 <xQueueGenericSend>
 800614c:	4603      	mov	r3, r0
 800614e:	2b01      	cmp	r3, #1
 8006150:	d001      	beq.n	8006156 <osMessagePut+0x72>
      return osErrorOS;
 8006152:	23ff      	movs	r3, #255	@ 0xff
 8006154:	e000      	b.n	8006158 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8006156:	2300      	movs	r3, #0
}
 8006158:	4618      	mov	r0, r3
 800615a:	3718      	adds	r7, #24
 800615c:	46bd      	mov	sp, r7
 800615e:	bd80      	pop	{r7, pc}
 8006160:	e000ed04 	.word	0xe000ed04

08006164 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8006164:	b590      	push	{r4, r7, lr}
 8006166:	b08b      	sub	sp, #44	@ 0x2c
 8006168:	af00      	add	r7, sp, #0
 800616a:	60f8      	str	r0, [r7, #12]
 800616c:	60b9      	str	r1, [r7, #8]
 800616e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8006170:	68bb      	ldr	r3, [r7, #8]
 8006172:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8006174:	2300      	movs	r3, #0
 8006176:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8006178:	68bb      	ldr	r3, [r7, #8]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d10a      	bne.n	8006194 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800617e:	2380      	movs	r3, #128	@ 0x80
 8006180:	617b      	str	r3, [r7, #20]
    return event;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	461c      	mov	r4, r3
 8006186:	f107 0314 	add.w	r3, r7, #20
 800618a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800618e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006192:	e054      	b.n	800623e <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8006194:	2300      	movs	r3, #0
 8006196:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8006198:	2300      	movs	r3, #0
 800619a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061a2:	d103      	bne.n	80061ac <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 80061a4:	f04f 33ff 	mov.w	r3, #4294967295
 80061a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80061aa:	e009      	b.n	80061c0 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d006      	beq.n	80061c0 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 80061b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d101      	bne.n	80061c0 <osMessageGet+0x5c>
      ticks = 1;
 80061bc:	2301      	movs	r3, #1
 80061be:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 80061c0:	f7ff fd79 	bl	8005cb6 <inHandlerMode>
 80061c4:	4603      	mov	r3, r0
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d01c      	beq.n	8006204 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 80061ca:	f107 0220 	add.w	r2, r7, #32
 80061ce:	f107 0314 	add.w	r3, r7, #20
 80061d2:	3304      	adds	r3, #4
 80061d4:	4619      	mov	r1, r3
 80061d6:	68b8      	ldr	r0, [r7, #8]
 80061d8:	f000 fec6 	bl	8006f68 <xQueueReceiveFromISR>
 80061dc:	4603      	mov	r3, r0
 80061de:	2b01      	cmp	r3, #1
 80061e0:	d102      	bne.n	80061e8 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 80061e2:	2310      	movs	r3, #16
 80061e4:	617b      	str	r3, [r7, #20]
 80061e6:	e001      	b.n	80061ec <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 80061e8:	2300      	movs	r3, #0
 80061ea:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 80061ec:	6a3b      	ldr	r3, [r7, #32]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d01d      	beq.n	800622e <osMessageGet+0xca>
 80061f2:	4b15      	ldr	r3, [pc, #84]	@ (8006248 <osMessageGet+0xe4>)
 80061f4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80061f8:	601a      	str	r2, [r3, #0]
 80061fa:	f3bf 8f4f 	dsb	sy
 80061fe:	f3bf 8f6f 	isb	sy
 8006202:	e014      	b.n	800622e <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8006204:	f107 0314 	add.w	r3, r7, #20
 8006208:	3304      	adds	r3, #4
 800620a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800620c:	4619      	mov	r1, r3
 800620e:	68b8      	ldr	r0, [r7, #8]
 8006210:	f000 fcb8 	bl	8006b84 <xQueueReceive>
 8006214:	4603      	mov	r3, r0
 8006216:	2b01      	cmp	r3, #1
 8006218:	d102      	bne.n	8006220 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800621a:	2310      	movs	r3, #16
 800621c:	617b      	str	r3, [r7, #20]
 800621e:	e006      	b.n	800622e <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8006220:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006222:	2b00      	cmp	r3, #0
 8006224:	d101      	bne.n	800622a <osMessageGet+0xc6>
 8006226:	2300      	movs	r3, #0
 8006228:	e000      	b.n	800622c <osMessageGet+0xc8>
 800622a:	2340      	movs	r3, #64	@ 0x40
 800622c:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	461c      	mov	r4, r3
 8006232:	f107 0314 	add.w	r3, r7, #20
 8006236:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800623a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800623e:	68f8      	ldr	r0, [r7, #12]
 8006240:	372c      	adds	r7, #44	@ 0x2c
 8006242:	46bd      	mov	sp, r7
 8006244:	bd90      	pop	{r4, r7, pc}
 8006246:	bf00      	nop
 8006248:	e000ed04 	.word	0xe000ed04

0800624c <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 800624c:	b580      	push	{r7, lr}
 800624e:	b082      	sub	sp, #8
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8006254:	f7ff fd2f 	bl	8005cb6 <inHandlerMode>
 8006258:	4603      	mov	r3, r0
 800625a:	2b00      	cmp	r3, #0
 800625c:	d004      	beq.n	8006268 <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 800625e:	6878      	ldr	r0, [r7, #4]
 8006260:	f000 ff23 	bl	80070aa <uxQueueMessagesWaitingFromISR>
 8006264:	4603      	mov	r3, r0
 8006266:	e003      	b.n	8006270 <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 8006268:	6878      	ldr	r0, [r7, #4]
 800626a:	f000 feff 	bl	800706c <uxQueueMessagesWaiting>
 800626e:	4603      	mov	r3, r0
  }
}
 8006270:	4618      	mov	r0, r3
 8006272:	3708      	adds	r7, #8
 8006274:	46bd      	mov	sp, r7
 8006276:	bd80      	pop	{r7, pc}

08006278 <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b082      	sub	sp, #8
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8006280:	f7ff fd19 	bl	8005cb6 <inHandlerMode>
 8006284:	4603      	mov	r3, r0
 8006286:	2b00      	cmp	r3, #0
 8006288:	d001      	beq.n	800628e <osMessageDelete+0x16>
    return osErrorISR;
 800628a:	2382      	movs	r3, #130	@ 0x82
 800628c:	e003      	b.n	8006296 <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 800628e:	6878      	ldr	r0, [r7, #4]
 8006290:	f000 ff2a 	bl	80070e8 <vQueueDelete>

  return osOK; 
 8006294:	2300      	movs	r3, #0
}
 8006296:	4618      	mov	r0, r3
 8006298:	3708      	adds	r7, #8
 800629a:	46bd      	mov	sp, r7
 800629c:	bd80      	pop	{r7, pc}

0800629e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800629e:	b480      	push	{r7}
 80062a0:	b083      	sub	sp, #12
 80062a2:	af00      	add	r7, sp, #0
 80062a4:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	f103 0208 	add.w	r2, r3, #8
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	f04f 32ff 	mov.w	r2, #4294967295
 80062b6:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	f103 0208 	add.w	r2, r3, #8
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	f103 0208 	add.w	r2, r3, #8
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2200      	movs	r2, #0
 80062d0:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80062d2:	bf00      	nop
 80062d4:	370c      	adds	r7, #12
 80062d6:	46bd      	mov	sp, r7
 80062d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062dc:	4770      	bx	lr

080062de <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80062de:	b480      	push	{r7}
 80062e0:	b083      	sub	sp, #12
 80062e2:	af00      	add	r7, sp, #0
 80062e4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2200      	movs	r2, #0
 80062ea:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80062ec:	bf00      	nop
 80062ee:	370c      	adds	r7, #12
 80062f0:	46bd      	mov	sp, r7
 80062f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f6:	4770      	bx	lr

080062f8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80062f8:	b480      	push	{r7}
 80062fa:	b085      	sub	sp, #20
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
 8006300:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	685b      	ldr	r3, [r3, #4]
 8006306:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	68fa      	ldr	r2, [r7, #12]
 800630c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	689a      	ldr	r2, [r3, #8]
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	689b      	ldr	r3, [r3, #8]
 800631a:	683a      	ldr	r2, [r7, #0]
 800631c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	683a      	ldr	r2, [r7, #0]
 8006322:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	687a      	ldr	r2, [r7, #4]
 8006328:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	1c5a      	adds	r2, r3, #1
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	601a      	str	r2, [r3, #0]
}
 8006334:	bf00      	nop
 8006336:	3714      	adds	r7, #20
 8006338:	46bd      	mov	sp, r7
 800633a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633e:	4770      	bx	lr

08006340 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006340:	b480      	push	{r7}
 8006342:	b085      	sub	sp, #20
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
 8006348:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006350:	68bb      	ldr	r3, [r7, #8]
 8006352:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006356:	d103      	bne.n	8006360 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	691b      	ldr	r3, [r3, #16]
 800635c:	60fb      	str	r3, [r7, #12]
 800635e:	e00c      	b.n	800637a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	3308      	adds	r3, #8
 8006364:	60fb      	str	r3, [r7, #12]
 8006366:	e002      	b.n	800636e <vListInsert+0x2e>
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	685b      	ldr	r3, [r3, #4]
 800636c:	60fb      	str	r3, [r7, #12]
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	685b      	ldr	r3, [r3, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	68ba      	ldr	r2, [r7, #8]
 8006376:	429a      	cmp	r2, r3
 8006378:	d2f6      	bcs.n	8006368 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	685a      	ldr	r2, [r3, #4]
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	685b      	ldr	r3, [r3, #4]
 8006386:	683a      	ldr	r2, [r7, #0]
 8006388:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	68fa      	ldr	r2, [r7, #12]
 800638e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	683a      	ldr	r2, [r7, #0]
 8006394:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	687a      	ldr	r2, [r7, #4]
 800639a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	1c5a      	adds	r2, r3, #1
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	601a      	str	r2, [r3, #0]
}
 80063a6:	bf00      	nop
 80063a8:	3714      	adds	r7, #20
 80063aa:	46bd      	mov	sp, r7
 80063ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b0:	4770      	bx	lr

080063b2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80063b2:	b480      	push	{r7}
 80063b4:	b085      	sub	sp, #20
 80063b6:	af00      	add	r7, sp, #0
 80063b8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	691b      	ldr	r3, [r3, #16]
 80063be:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	685b      	ldr	r3, [r3, #4]
 80063c4:	687a      	ldr	r2, [r7, #4]
 80063c6:	6892      	ldr	r2, [r2, #8]
 80063c8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	689b      	ldr	r3, [r3, #8]
 80063ce:	687a      	ldr	r2, [r7, #4]
 80063d0:	6852      	ldr	r2, [r2, #4]
 80063d2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	685b      	ldr	r3, [r3, #4]
 80063d8:	687a      	ldr	r2, [r7, #4]
 80063da:	429a      	cmp	r2, r3
 80063dc:	d103      	bne.n	80063e6 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	689a      	ldr	r2, [r3, #8]
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	2200      	movs	r2, #0
 80063ea:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	1e5a      	subs	r2, r3, #1
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	681b      	ldr	r3, [r3, #0]
}
 80063fa:	4618      	mov	r0, r3
 80063fc:	3714      	adds	r7, #20
 80063fe:	46bd      	mov	sp, r7
 8006400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006404:	4770      	bx	lr
	...

08006408 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006408:	b580      	push	{r7, lr}
 800640a:	b084      	sub	sp, #16
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
 8006410:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d10b      	bne.n	8006434 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800641c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006420:	f383 8811 	msr	BASEPRI, r3
 8006424:	f3bf 8f6f 	isb	sy
 8006428:	f3bf 8f4f 	dsb	sy
 800642c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800642e:	bf00      	nop
 8006430:	bf00      	nop
 8006432:	e7fd      	b.n	8006430 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006434:	f002 f950 	bl	80086d8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	681a      	ldr	r2, [r3, #0]
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006440:	68f9      	ldr	r1, [r7, #12]
 8006442:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006444:	fb01 f303 	mul.w	r3, r1, r3
 8006448:	441a      	add	r2, r3
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	2200      	movs	r2, #0
 8006452:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681a      	ldr	r2, [r3, #0]
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681a      	ldr	r2, [r3, #0]
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006464:	3b01      	subs	r3, #1
 8006466:	68f9      	ldr	r1, [r7, #12]
 8006468:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800646a:	fb01 f303 	mul.w	r3, r1, r3
 800646e:	441a      	add	r2, r3
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	22ff      	movs	r2, #255	@ 0xff
 8006478:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	22ff      	movs	r2, #255	@ 0xff
 8006480:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d114      	bne.n	80064b4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	691b      	ldr	r3, [r3, #16]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d01a      	beq.n	80064c8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	3310      	adds	r3, #16
 8006496:	4618      	mov	r0, r3
 8006498:	f001 fbfe 	bl	8007c98 <xTaskRemoveFromEventList>
 800649c:	4603      	mov	r3, r0
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d012      	beq.n	80064c8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80064a2:	4b0d      	ldr	r3, [pc, #52]	@ (80064d8 <xQueueGenericReset+0xd0>)
 80064a4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80064a8:	601a      	str	r2, [r3, #0]
 80064aa:	f3bf 8f4f 	dsb	sy
 80064ae:	f3bf 8f6f 	isb	sy
 80064b2:	e009      	b.n	80064c8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	3310      	adds	r3, #16
 80064b8:	4618      	mov	r0, r3
 80064ba:	f7ff fef0 	bl	800629e <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	3324      	adds	r3, #36	@ 0x24
 80064c2:	4618      	mov	r0, r3
 80064c4:	f7ff feeb 	bl	800629e <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80064c8:	f002 f938 	bl	800873c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80064cc:	2301      	movs	r3, #1
}
 80064ce:	4618      	mov	r0, r3
 80064d0:	3710      	adds	r7, #16
 80064d2:	46bd      	mov	sp, r7
 80064d4:	bd80      	pop	{r7, pc}
 80064d6:	bf00      	nop
 80064d8:	e000ed04 	.word	0xe000ed04

080064dc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80064dc:	b580      	push	{r7, lr}
 80064de:	b08e      	sub	sp, #56	@ 0x38
 80064e0:	af02      	add	r7, sp, #8
 80064e2:	60f8      	str	r0, [r7, #12]
 80064e4:	60b9      	str	r1, [r7, #8]
 80064e6:	607a      	str	r2, [r7, #4]
 80064e8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d10b      	bne.n	8006508 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80064f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064f4:	f383 8811 	msr	BASEPRI, r3
 80064f8:	f3bf 8f6f 	isb	sy
 80064fc:	f3bf 8f4f 	dsb	sy
 8006500:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006502:	bf00      	nop
 8006504:	bf00      	nop
 8006506:	e7fd      	b.n	8006504 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d10b      	bne.n	8006526 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800650e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006512:	f383 8811 	msr	BASEPRI, r3
 8006516:	f3bf 8f6f 	isb	sy
 800651a:	f3bf 8f4f 	dsb	sy
 800651e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006520:	bf00      	nop
 8006522:	bf00      	nop
 8006524:	e7fd      	b.n	8006522 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d002      	beq.n	8006532 <xQueueGenericCreateStatic+0x56>
 800652c:	68bb      	ldr	r3, [r7, #8]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d001      	beq.n	8006536 <xQueueGenericCreateStatic+0x5a>
 8006532:	2301      	movs	r3, #1
 8006534:	e000      	b.n	8006538 <xQueueGenericCreateStatic+0x5c>
 8006536:	2300      	movs	r3, #0
 8006538:	2b00      	cmp	r3, #0
 800653a:	d10b      	bne.n	8006554 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800653c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006540:	f383 8811 	msr	BASEPRI, r3
 8006544:	f3bf 8f6f 	isb	sy
 8006548:	f3bf 8f4f 	dsb	sy
 800654c:	623b      	str	r3, [r7, #32]
}
 800654e:	bf00      	nop
 8006550:	bf00      	nop
 8006552:	e7fd      	b.n	8006550 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d102      	bne.n	8006560 <xQueueGenericCreateStatic+0x84>
 800655a:	68bb      	ldr	r3, [r7, #8]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d101      	bne.n	8006564 <xQueueGenericCreateStatic+0x88>
 8006560:	2301      	movs	r3, #1
 8006562:	e000      	b.n	8006566 <xQueueGenericCreateStatic+0x8a>
 8006564:	2300      	movs	r3, #0
 8006566:	2b00      	cmp	r3, #0
 8006568:	d10b      	bne.n	8006582 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800656a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800656e:	f383 8811 	msr	BASEPRI, r3
 8006572:	f3bf 8f6f 	isb	sy
 8006576:	f3bf 8f4f 	dsb	sy
 800657a:	61fb      	str	r3, [r7, #28]
}
 800657c:	bf00      	nop
 800657e:	bf00      	nop
 8006580:	e7fd      	b.n	800657e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006582:	2348      	movs	r3, #72	@ 0x48
 8006584:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006586:	697b      	ldr	r3, [r7, #20]
 8006588:	2b48      	cmp	r3, #72	@ 0x48
 800658a:	d00b      	beq.n	80065a4 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800658c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006590:	f383 8811 	msr	BASEPRI, r3
 8006594:	f3bf 8f6f 	isb	sy
 8006598:	f3bf 8f4f 	dsb	sy
 800659c:	61bb      	str	r3, [r7, #24]
}
 800659e:	bf00      	nop
 80065a0:	bf00      	nop
 80065a2:	e7fd      	b.n	80065a0 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80065a4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80065aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d00d      	beq.n	80065cc <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80065b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065b2:	2201      	movs	r2, #1
 80065b4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80065b8:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80065bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065be:	9300      	str	r3, [sp, #0]
 80065c0:	4613      	mov	r3, r2
 80065c2:	687a      	ldr	r2, [r7, #4]
 80065c4:	68b9      	ldr	r1, [r7, #8]
 80065c6:	68f8      	ldr	r0, [r7, #12]
 80065c8:	f000 f840 	bl	800664c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80065cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80065ce:	4618      	mov	r0, r3
 80065d0:	3730      	adds	r7, #48	@ 0x30
 80065d2:	46bd      	mov	sp, r7
 80065d4:	bd80      	pop	{r7, pc}

080065d6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80065d6:	b580      	push	{r7, lr}
 80065d8:	b08a      	sub	sp, #40	@ 0x28
 80065da:	af02      	add	r7, sp, #8
 80065dc:	60f8      	str	r0, [r7, #12]
 80065de:	60b9      	str	r1, [r7, #8]
 80065e0:	4613      	mov	r3, r2
 80065e2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d10b      	bne.n	8006602 <xQueueGenericCreate+0x2c>
	__asm volatile
 80065ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065ee:	f383 8811 	msr	BASEPRI, r3
 80065f2:	f3bf 8f6f 	isb	sy
 80065f6:	f3bf 8f4f 	dsb	sy
 80065fa:	613b      	str	r3, [r7, #16]
}
 80065fc:	bf00      	nop
 80065fe:	bf00      	nop
 8006600:	e7fd      	b.n	80065fe <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	68ba      	ldr	r2, [r7, #8]
 8006606:	fb02 f303 	mul.w	r3, r2, r3
 800660a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800660c:	69fb      	ldr	r3, [r7, #28]
 800660e:	3348      	adds	r3, #72	@ 0x48
 8006610:	4618      	mov	r0, r3
 8006612:	f002 f983 	bl	800891c <pvPortMalloc>
 8006616:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006618:	69bb      	ldr	r3, [r7, #24]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d011      	beq.n	8006642 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800661e:	69bb      	ldr	r3, [r7, #24]
 8006620:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006622:	697b      	ldr	r3, [r7, #20]
 8006624:	3348      	adds	r3, #72	@ 0x48
 8006626:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006628:	69bb      	ldr	r3, [r7, #24]
 800662a:	2200      	movs	r2, #0
 800662c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006630:	79fa      	ldrb	r2, [r7, #7]
 8006632:	69bb      	ldr	r3, [r7, #24]
 8006634:	9300      	str	r3, [sp, #0]
 8006636:	4613      	mov	r3, r2
 8006638:	697a      	ldr	r2, [r7, #20]
 800663a:	68b9      	ldr	r1, [r7, #8]
 800663c:	68f8      	ldr	r0, [r7, #12]
 800663e:	f000 f805 	bl	800664c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006642:	69bb      	ldr	r3, [r7, #24]
	}
 8006644:	4618      	mov	r0, r3
 8006646:	3720      	adds	r7, #32
 8006648:	46bd      	mov	sp, r7
 800664a:	bd80      	pop	{r7, pc}

0800664c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b084      	sub	sp, #16
 8006650:	af00      	add	r7, sp, #0
 8006652:	60f8      	str	r0, [r7, #12]
 8006654:	60b9      	str	r1, [r7, #8]
 8006656:	607a      	str	r2, [r7, #4]
 8006658:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800665a:	68bb      	ldr	r3, [r7, #8]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d103      	bne.n	8006668 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006660:	69bb      	ldr	r3, [r7, #24]
 8006662:	69ba      	ldr	r2, [r7, #24]
 8006664:	601a      	str	r2, [r3, #0]
 8006666:	e002      	b.n	800666e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006668:	69bb      	ldr	r3, [r7, #24]
 800666a:	687a      	ldr	r2, [r7, #4]
 800666c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800666e:	69bb      	ldr	r3, [r7, #24]
 8006670:	68fa      	ldr	r2, [r7, #12]
 8006672:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006674:	69bb      	ldr	r3, [r7, #24]
 8006676:	68ba      	ldr	r2, [r7, #8]
 8006678:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800667a:	2101      	movs	r1, #1
 800667c:	69b8      	ldr	r0, [r7, #24]
 800667e:	f7ff fec3 	bl	8006408 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006682:	bf00      	nop
 8006684:	3710      	adds	r7, #16
 8006686:	46bd      	mov	sp, r7
 8006688:	bd80      	pop	{r7, pc}

0800668a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800668a:	b580      	push	{r7, lr}
 800668c:	b082      	sub	sp, #8
 800668e:	af00      	add	r7, sp, #0
 8006690:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d00e      	beq.n	80066b6 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2200      	movs	r2, #0
 800669c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	2200      	movs	r2, #0
 80066a2:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2200      	movs	r2, #0
 80066a8:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80066aa:	2300      	movs	r3, #0
 80066ac:	2200      	movs	r2, #0
 80066ae:	2100      	movs	r1, #0
 80066b0:	6878      	ldr	r0, [r7, #4]
 80066b2:	f000 f837 	bl	8006724 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80066b6:	bf00      	nop
 80066b8:	3708      	adds	r7, #8
 80066ba:	46bd      	mov	sp, r7
 80066bc:	bd80      	pop	{r7, pc}

080066be <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80066be:	b580      	push	{r7, lr}
 80066c0:	b086      	sub	sp, #24
 80066c2:	af00      	add	r7, sp, #0
 80066c4:	4603      	mov	r3, r0
 80066c6:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80066c8:	2301      	movs	r3, #1
 80066ca:	617b      	str	r3, [r7, #20]
 80066cc:	2300      	movs	r3, #0
 80066ce:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80066d0:	79fb      	ldrb	r3, [r7, #7]
 80066d2:	461a      	mov	r2, r3
 80066d4:	6939      	ldr	r1, [r7, #16]
 80066d6:	6978      	ldr	r0, [r7, #20]
 80066d8:	f7ff ff7d 	bl	80065d6 <xQueueGenericCreate>
 80066dc:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80066de:	68f8      	ldr	r0, [r7, #12]
 80066e0:	f7ff ffd3 	bl	800668a <prvInitialiseMutex>

		return xNewQueue;
 80066e4:	68fb      	ldr	r3, [r7, #12]
	}
 80066e6:	4618      	mov	r0, r3
 80066e8:	3718      	adds	r7, #24
 80066ea:	46bd      	mov	sp, r7
 80066ec:	bd80      	pop	{r7, pc}

080066ee <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80066ee:	b580      	push	{r7, lr}
 80066f0:	b088      	sub	sp, #32
 80066f2:	af02      	add	r7, sp, #8
 80066f4:	4603      	mov	r3, r0
 80066f6:	6039      	str	r1, [r7, #0]
 80066f8:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80066fa:	2301      	movs	r3, #1
 80066fc:	617b      	str	r3, [r7, #20]
 80066fe:	2300      	movs	r3, #0
 8006700:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8006702:	79fb      	ldrb	r3, [r7, #7]
 8006704:	9300      	str	r3, [sp, #0]
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	2200      	movs	r2, #0
 800670a:	6939      	ldr	r1, [r7, #16]
 800670c:	6978      	ldr	r0, [r7, #20]
 800670e:	f7ff fee5 	bl	80064dc <xQueueGenericCreateStatic>
 8006712:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006714:	68f8      	ldr	r0, [r7, #12]
 8006716:	f7ff ffb8 	bl	800668a <prvInitialiseMutex>

		return xNewQueue;
 800671a:	68fb      	ldr	r3, [r7, #12]
	}
 800671c:	4618      	mov	r0, r3
 800671e:	3718      	adds	r7, #24
 8006720:	46bd      	mov	sp, r7
 8006722:	bd80      	pop	{r7, pc}

08006724 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b08e      	sub	sp, #56	@ 0x38
 8006728:	af00      	add	r7, sp, #0
 800672a:	60f8      	str	r0, [r7, #12]
 800672c:	60b9      	str	r1, [r7, #8]
 800672e:	607a      	str	r2, [r7, #4]
 8006730:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006732:	2300      	movs	r3, #0
 8006734:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800673a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800673c:	2b00      	cmp	r3, #0
 800673e:	d10b      	bne.n	8006758 <xQueueGenericSend+0x34>
	__asm volatile
 8006740:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006744:	f383 8811 	msr	BASEPRI, r3
 8006748:	f3bf 8f6f 	isb	sy
 800674c:	f3bf 8f4f 	dsb	sy
 8006750:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006752:	bf00      	nop
 8006754:	bf00      	nop
 8006756:	e7fd      	b.n	8006754 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006758:	68bb      	ldr	r3, [r7, #8]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d103      	bne.n	8006766 <xQueueGenericSend+0x42>
 800675e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006760:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006762:	2b00      	cmp	r3, #0
 8006764:	d101      	bne.n	800676a <xQueueGenericSend+0x46>
 8006766:	2301      	movs	r3, #1
 8006768:	e000      	b.n	800676c <xQueueGenericSend+0x48>
 800676a:	2300      	movs	r3, #0
 800676c:	2b00      	cmp	r3, #0
 800676e:	d10b      	bne.n	8006788 <xQueueGenericSend+0x64>
	__asm volatile
 8006770:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006774:	f383 8811 	msr	BASEPRI, r3
 8006778:	f3bf 8f6f 	isb	sy
 800677c:	f3bf 8f4f 	dsb	sy
 8006780:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006782:	bf00      	nop
 8006784:	bf00      	nop
 8006786:	e7fd      	b.n	8006784 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	2b02      	cmp	r3, #2
 800678c:	d103      	bne.n	8006796 <xQueueGenericSend+0x72>
 800678e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006790:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006792:	2b01      	cmp	r3, #1
 8006794:	d101      	bne.n	800679a <xQueueGenericSend+0x76>
 8006796:	2301      	movs	r3, #1
 8006798:	e000      	b.n	800679c <xQueueGenericSend+0x78>
 800679a:	2300      	movs	r3, #0
 800679c:	2b00      	cmp	r3, #0
 800679e:	d10b      	bne.n	80067b8 <xQueueGenericSend+0x94>
	__asm volatile
 80067a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067a4:	f383 8811 	msr	BASEPRI, r3
 80067a8:	f3bf 8f6f 	isb	sy
 80067ac:	f3bf 8f4f 	dsb	sy
 80067b0:	623b      	str	r3, [r7, #32]
}
 80067b2:	bf00      	nop
 80067b4:	bf00      	nop
 80067b6:	e7fd      	b.n	80067b4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80067b8:	f001 fc34 	bl	8008024 <xTaskGetSchedulerState>
 80067bc:	4603      	mov	r3, r0
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d102      	bne.n	80067c8 <xQueueGenericSend+0xa4>
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d101      	bne.n	80067cc <xQueueGenericSend+0xa8>
 80067c8:	2301      	movs	r3, #1
 80067ca:	e000      	b.n	80067ce <xQueueGenericSend+0xaa>
 80067cc:	2300      	movs	r3, #0
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d10b      	bne.n	80067ea <xQueueGenericSend+0xc6>
	__asm volatile
 80067d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067d6:	f383 8811 	msr	BASEPRI, r3
 80067da:	f3bf 8f6f 	isb	sy
 80067de:	f3bf 8f4f 	dsb	sy
 80067e2:	61fb      	str	r3, [r7, #28]
}
 80067e4:	bf00      	nop
 80067e6:	bf00      	nop
 80067e8:	e7fd      	b.n	80067e6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80067ea:	f001 ff75 	bl	80086d8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80067ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067f0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80067f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067f6:	429a      	cmp	r2, r3
 80067f8:	d302      	bcc.n	8006800 <xQueueGenericSend+0xdc>
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	2b02      	cmp	r3, #2
 80067fe:	d129      	bne.n	8006854 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006800:	683a      	ldr	r2, [r7, #0]
 8006802:	68b9      	ldr	r1, [r7, #8]
 8006804:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006806:	f000 fcab 	bl	8007160 <prvCopyDataToQueue>
 800680a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800680c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800680e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006810:	2b00      	cmp	r3, #0
 8006812:	d010      	beq.n	8006836 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006814:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006816:	3324      	adds	r3, #36	@ 0x24
 8006818:	4618      	mov	r0, r3
 800681a:	f001 fa3d 	bl	8007c98 <xTaskRemoveFromEventList>
 800681e:	4603      	mov	r3, r0
 8006820:	2b00      	cmp	r3, #0
 8006822:	d013      	beq.n	800684c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006824:	4b3f      	ldr	r3, [pc, #252]	@ (8006924 <xQueueGenericSend+0x200>)
 8006826:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800682a:	601a      	str	r2, [r3, #0]
 800682c:	f3bf 8f4f 	dsb	sy
 8006830:	f3bf 8f6f 	isb	sy
 8006834:	e00a      	b.n	800684c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006836:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006838:	2b00      	cmp	r3, #0
 800683a:	d007      	beq.n	800684c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800683c:	4b39      	ldr	r3, [pc, #228]	@ (8006924 <xQueueGenericSend+0x200>)
 800683e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006842:	601a      	str	r2, [r3, #0]
 8006844:	f3bf 8f4f 	dsb	sy
 8006848:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800684c:	f001 ff76 	bl	800873c <vPortExitCritical>
				return pdPASS;
 8006850:	2301      	movs	r3, #1
 8006852:	e063      	b.n	800691c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d103      	bne.n	8006862 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800685a:	f001 ff6f 	bl	800873c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800685e:	2300      	movs	r3, #0
 8006860:	e05c      	b.n	800691c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006862:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006864:	2b00      	cmp	r3, #0
 8006866:	d106      	bne.n	8006876 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006868:	f107 0314 	add.w	r3, r7, #20
 800686c:	4618      	mov	r0, r3
 800686e:	f001 fa77 	bl	8007d60 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006872:	2301      	movs	r3, #1
 8006874:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006876:	f001 ff61 	bl	800873c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800687a:	f000 fffb 	bl	8007874 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800687e:	f001 ff2b 	bl	80086d8 <vPortEnterCritical>
 8006882:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006884:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006888:	b25b      	sxtb	r3, r3
 800688a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800688e:	d103      	bne.n	8006898 <xQueueGenericSend+0x174>
 8006890:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006892:	2200      	movs	r2, #0
 8006894:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006898:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800689a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800689e:	b25b      	sxtb	r3, r3
 80068a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068a4:	d103      	bne.n	80068ae <xQueueGenericSend+0x18a>
 80068a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068a8:	2200      	movs	r2, #0
 80068aa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80068ae:	f001 ff45 	bl	800873c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80068b2:	1d3a      	adds	r2, r7, #4
 80068b4:	f107 0314 	add.w	r3, r7, #20
 80068b8:	4611      	mov	r1, r2
 80068ba:	4618      	mov	r0, r3
 80068bc:	f001 fa66 	bl	8007d8c <xTaskCheckForTimeOut>
 80068c0:	4603      	mov	r3, r0
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d124      	bne.n	8006910 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80068c6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80068c8:	f000 fd42 	bl	8007350 <prvIsQueueFull>
 80068cc:	4603      	mov	r3, r0
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d018      	beq.n	8006904 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80068d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068d4:	3310      	adds	r3, #16
 80068d6:	687a      	ldr	r2, [r7, #4]
 80068d8:	4611      	mov	r1, r2
 80068da:	4618      	mov	r0, r3
 80068dc:	f001 f9b6 	bl	8007c4c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80068e0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80068e2:	f000 fccd 	bl	8007280 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80068e6:	f000 ffd3 	bl	8007890 <xTaskResumeAll>
 80068ea:	4603      	mov	r3, r0
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	f47f af7c 	bne.w	80067ea <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80068f2:	4b0c      	ldr	r3, [pc, #48]	@ (8006924 <xQueueGenericSend+0x200>)
 80068f4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80068f8:	601a      	str	r2, [r3, #0]
 80068fa:	f3bf 8f4f 	dsb	sy
 80068fe:	f3bf 8f6f 	isb	sy
 8006902:	e772      	b.n	80067ea <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006904:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006906:	f000 fcbb 	bl	8007280 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800690a:	f000 ffc1 	bl	8007890 <xTaskResumeAll>
 800690e:	e76c      	b.n	80067ea <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006910:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006912:	f000 fcb5 	bl	8007280 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006916:	f000 ffbb 	bl	8007890 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800691a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800691c:	4618      	mov	r0, r3
 800691e:	3738      	adds	r7, #56	@ 0x38
 8006920:	46bd      	mov	sp, r7
 8006922:	bd80      	pop	{r7, pc}
 8006924:	e000ed04 	.word	0xe000ed04

08006928 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006928:	b580      	push	{r7, lr}
 800692a:	b090      	sub	sp, #64	@ 0x40
 800692c:	af00      	add	r7, sp, #0
 800692e:	60f8      	str	r0, [r7, #12]
 8006930:	60b9      	str	r1, [r7, #8]
 8006932:	607a      	str	r2, [r7, #4]
 8006934:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800693a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800693c:	2b00      	cmp	r3, #0
 800693e:	d10b      	bne.n	8006958 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8006940:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006944:	f383 8811 	msr	BASEPRI, r3
 8006948:	f3bf 8f6f 	isb	sy
 800694c:	f3bf 8f4f 	dsb	sy
 8006950:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006952:	bf00      	nop
 8006954:	bf00      	nop
 8006956:	e7fd      	b.n	8006954 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006958:	68bb      	ldr	r3, [r7, #8]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d103      	bne.n	8006966 <xQueueGenericSendFromISR+0x3e>
 800695e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006960:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006962:	2b00      	cmp	r3, #0
 8006964:	d101      	bne.n	800696a <xQueueGenericSendFromISR+0x42>
 8006966:	2301      	movs	r3, #1
 8006968:	e000      	b.n	800696c <xQueueGenericSendFromISR+0x44>
 800696a:	2300      	movs	r3, #0
 800696c:	2b00      	cmp	r3, #0
 800696e:	d10b      	bne.n	8006988 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8006970:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006974:	f383 8811 	msr	BASEPRI, r3
 8006978:	f3bf 8f6f 	isb	sy
 800697c:	f3bf 8f4f 	dsb	sy
 8006980:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006982:	bf00      	nop
 8006984:	bf00      	nop
 8006986:	e7fd      	b.n	8006984 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	2b02      	cmp	r3, #2
 800698c:	d103      	bne.n	8006996 <xQueueGenericSendFromISR+0x6e>
 800698e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006990:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006992:	2b01      	cmp	r3, #1
 8006994:	d101      	bne.n	800699a <xQueueGenericSendFromISR+0x72>
 8006996:	2301      	movs	r3, #1
 8006998:	e000      	b.n	800699c <xQueueGenericSendFromISR+0x74>
 800699a:	2300      	movs	r3, #0
 800699c:	2b00      	cmp	r3, #0
 800699e:	d10b      	bne.n	80069b8 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80069a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069a4:	f383 8811 	msr	BASEPRI, r3
 80069a8:	f3bf 8f6f 	isb	sy
 80069ac:	f3bf 8f4f 	dsb	sy
 80069b0:	623b      	str	r3, [r7, #32]
}
 80069b2:	bf00      	nop
 80069b4:	bf00      	nop
 80069b6:	e7fd      	b.n	80069b4 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80069b8:	f001 ff6e 	bl	8008898 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80069bc:	f3ef 8211 	mrs	r2, BASEPRI
 80069c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069c4:	f383 8811 	msr	BASEPRI, r3
 80069c8:	f3bf 8f6f 	isb	sy
 80069cc:	f3bf 8f4f 	dsb	sy
 80069d0:	61fa      	str	r2, [r7, #28]
 80069d2:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80069d4:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80069d6:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80069d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069da:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80069dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069e0:	429a      	cmp	r2, r3
 80069e2:	d302      	bcc.n	80069ea <xQueueGenericSendFromISR+0xc2>
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	2b02      	cmp	r3, #2
 80069e8:	d12f      	bne.n	8006a4a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80069ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069ec:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80069f0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80069f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80069fa:	683a      	ldr	r2, [r7, #0]
 80069fc:	68b9      	ldr	r1, [r7, #8]
 80069fe:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006a00:	f000 fbae 	bl	8007160 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006a04:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8006a08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a0c:	d112      	bne.n	8006a34 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006a0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d016      	beq.n	8006a44 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006a16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a18:	3324      	adds	r3, #36	@ 0x24
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	f001 f93c 	bl	8007c98 <xTaskRemoveFromEventList>
 8006a20:	4603      	mov	r3, r0
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d00e      	beq.n	8006a44 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d00b      	beq.n	8006a44 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2201      	movs	r2, #1
 8006a30:	601a      	str	r2, [r3, #0]
 8006a32:	e007      	b.n	8006a44 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006a34:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8006a38:	3301      	adds	r3, #1
 8006a3a:	b2db      	uxtb	r3, r3
 8006a3c:	b25a      	sxtb	r2, r3
 8006a3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a40:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8006a44:	2301      	movs	r3, #1
 8006a46:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8006a48:	e001      	b.n	8006a4e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006a4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a50:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006a52:	697b      	ldr	r3, [r7, #20]
 8006a54:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006a58:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006a5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	3740      	adds	r7, #64	@ 0x40
 8006a60:	46bd      	mov	sp, r7
 8006a62:	bd80      	pop	{r7, pc}

08006a64 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b08e      	sub	sp, #56	@ 0x38
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
 8006a6c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8006a72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d10b      	bne.n	8006a90 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8006a78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a7c:	f383 8811 	msr	BASEPRI, r3
 8006a80:	f3bf 8f6f 	isb	sy
 8006a84:	f3bf 8f4f 	dsb	sy
 8006a88:	623b      	str	r3, [r7, #32]
}
 8006a8a:	bf00      	nop
 8006a8c:	bf00      	nop
 8006a8e:	e7fd      	b.n	8006a8c <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006a90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d00b      	beq.n	8006ab0 <xQueueGiveFromISR+0x4c>
	__asm volatile
 8006a98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a9c:	f383 8811 	msr	BASEPRI, r3
 8006aa0:	f3bf 8f6f 	isb	sy
 8006aa4:	f3bf 8f4f 	dsb	sy
 8006aa8:	61fb      	str	r3, [r7, #28]
}
 8006aaa:	bf00      	nop
 8006aac:	bf00      	nop
 8006aae:	e7fd      	b.n	8006aac <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8006ab0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d103      	bne.n	8006ac0 <xQueueGiveFromISR+0x5c>
 8006ab8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006aba:	689b      	ldr	r3, [r3, #8]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d101      	bne.n	8006ac4 <xQueueGiveFromISR+0x60>
 8006ac0:	2301      	movs	r3, #1
 8006ac2:	e000      	b.n	8006ac6 <xQueueGiveFromISR+0x62>
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d10b      	bne.n	8006ae2 <xQueueGiveFromISR+0x7e>
	__asm volatile
 8006aca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ace:	f383 8811 	msr	BASEPRI, r3
 8006ad2:	f3bf 8f6f 	isb	sy
 8006ad6:	f3bf 8f4f 	dsb	sy
 8006ada:	61bb      	str	r3, [r7, #24]
}
 8006adc:	bf00      	nop
 8006ade:	bf00      	nop
 8006ae0:	e7fd      	b.n	8006ade <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006ae2:	f001 fed9 	bl	8008898 <vPortValidateInterruptPriority>
	__asm volatile
 8006ae6:	f3ef 8211 	mrs	r2, BASEPRI
 8006aea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006aee:	f383 8811 	msr	BASEPRI, r3
 8006af2:	f3bf 8f6f 	isb	sy
 8006af6:	f3bf 8f4f 	dsb	sy
 8006afa:	617a      	str	r2, [r7, #20]
 8006afc:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8006afe:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006b00:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006b02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b06:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8006b08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b0c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006b0e:	429a      	cmp	r2, r3
 8006b10:	d22b      	bcs.n	8006b6a <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006b12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b14:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006b18:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006b1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b1e:	1c5a      	adds	r2, r3, #1
 8006b20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b22:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006b24:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006b28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b2c:	d112      	bne.n	8006b54 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006b2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d016      	beq.n	8006b64 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006b36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b38:	3324      	adds	r3, #36	@ 0x24
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	f001 f8ac 	bl	8007c98 <xTaskRemoveFromEventList>
 8006b40:	4603      	mov	r3, r0
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d00e      	beq.n	8006b64 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d00b      	beq.n	8006b64 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	2201      	movs	r2, #1
 8006b50:	601a      	str	r2, [r3, #0]
 8006b52:	e007      	b.n	8006b64 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006b54:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006b58:	3301      	adds	r3, #1
 8006b5a:	b2db      	uxtb	r3, r3
 8006b5c:	b25a      	sxtb	r2, r3
 8006b5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b60:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8006b64:	2301      	movs	r3, #1
 8006b66:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b68:	e001      	b.n	8006b6e <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b70:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	f383 8811 	msr	BASEPRI, r3
}
 8006b78:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006b7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	3738      	adds	r7, #56	@ 0x38
 8006b80:	46bd      	mov	sp, r7
 8006b82:	bd80      	pop	{r7, pc}

08006b84 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b08c      	sub	sp, #48	@ 0x30
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	60f8      	str	r0, [r7, #12]
 8006b8c:	60b9      	str	r1, [r7, #8]
 8006b8e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006b90:	2300      	movs	r3, #0
 8006b92:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006b98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d10b      	bne.n	8006bb6 <xQueueReceive+0x32>
	__asm volatile
 8006b9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ba2:	f383 8811 	msr	BASEPRI, r3
 8006ba6:	f3bf 8f6f 	isb	sy
 8006baa:	f3bf 8f4f 	dsb	sy
 8006bae:	623b      	str	r3, [r7, #32]
}
 8006bb0:	bf00      	nop
 8006bb2:	bf00      	nop
 8006bb4:	e7fd      	b.n	8006bb2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006bb6:	68bb      	ldr	r3, [r7, #8]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d103      	bne.n	8006bc4 <xQueueReceive+0x40>
 8006bbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d101      	bne.n	8006bc8 <xQueueReceive+0x44>
 8006bc4:	2301      	movs	r3, #1
 8006bc6:	e000      	b.n	8006bca <xQueueReceive+0x46>
 8006bc8:	2300      	movs	r3, #0
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d10b      	bne.n	8006be6 <xQueueReceive+0x62>
	__asm volatile
 8006bce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bd2:	f383 8811 	msr	BASEPRI, r3
 8006bd6:	f3bf 8f6f 	isb	sy
 8006bda:	f3bf 8f4f 	dsb	sy
 8006bde:	61fb      	str	r3, [r7, #28]
}
 8006be0:	bf00      	nop
 8006be2:	bf00      	nop
 8006be4:	e7fd      	b.n	8006be2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006be6:	f001 fa1d 	bl	8008024 <xTaskGetSchedulerState>
 8006bea:	4603      	mov	r3, r0
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d102      	bne.n	8006bf6 <xQueueReceive+0x72>
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d101      	bne.n	8006bfa <xQueueReceive+0x76>
 8006bf6:	2301      	movs	r3, #1
 8006bf8:	e000      	b.n	8006bfc <xQueueReceive+0x78>
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d10b      	bne.n	8006c18 <xQueueReceive+0x94>
	__asm volatile
 8006c00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c04:	f383 8811 	msr	BASEPRI, r3
 8006c08:	f3bf 8f6f 	isb	sy
 8006c0c:	f3bf 8f4f 	dsb	sy
 8006c10:	61bb      	str	r3, [r7, #24]
}
 8006c12:	bf00      	nop
 8006c14:	bf00      	nop
 8006c16:	e7fd      	b.n	8006c14 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006c18:	f001 fd5e 	bl	80086d8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006c1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c20:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006c22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d01f      	beq.n	8006c68 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006c28:	68b9      	ldr	r1, [r7, #8]
 8006c2a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006c2c:	f000 fb02 	bl	8007234 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006c30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c32:	1e5a      	subs	r2, r3, #1
 8006c34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c36:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006c38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c3a:	691b      	ldr	r3, [r3, #16]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d00f      	beq.n	8006c60 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006c40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c42:	3310      	adds	r3, #16
 8006c44:	4618      	mov	r0, r3
 8006c46:	f001 f827 	bl	8007c98 <xTaskRemoveFromEventList>
 8006c4a:	4603      	mov	r3, r0
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d007      	beq.n	8006c60 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006c50:	4b3c      	ldr	r3, [pc, #240]	@ (8006d44 <xQueueReceive+0x1c0>)
 8006c52:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006c56:	601a      	str	r2, [r3, #0]
 8006c58:	f3bf 8f4f 	dsb	sy
 8006c5c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006c60:	f001 fd6c 	bl	800873c <vPortExitCritical>
				return pdPASS;
 8006c64:	2301      	movs	r3, #1
 8006c66:	e069      	b.n	8006d3c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d103      	bne.n	8006c76 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006c6e:	f001 fd65 	bl	800873c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006c72:	2300      	movs	r3, #0
 8006c74:	e062      	b.n	8006d3c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006c76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d106      	bne.n	8006c8a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006c7c:	f107 0310 	add.w	r3, r7, #16
 8006c80:	4618      	mov	r0, r3
 8006c82:	f001 f86d 	bl	8007d60 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006c86:	2301      	movs	r3, #1
 8006c88:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006c8a:	f001 fd57 	bl	800873c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006c8e:	f000 fdf1 	bl	8007874 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006c92:	f001 fd21 	bl	80086d8 <vPortEnterCritical>
 8006c96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c98:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006c9c:	b25b      	sxtb	r3, r3
 8006c9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ca2:	d103      	bne.n	8006cac <xQueueReceive+0x128>
 8006ca4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006cac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cae:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006cb2:	b25b      	sxtb	r3, r3
 8006cb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cb8:	d103      	bne.n	8006cc2 <xQueueReceive+0x13e>
 8006cba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006cc2:	f001 fd3b 	bl	800873c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006cc6:	1d3a      	adds	r2, r7, #4
 8006cc8:	f107 0310 	add.w	r3, r7, #16
 8006ccc:	4611      	mov	r1, r2
 8006cce:	4618      	mov	r0, r3
 8006cd0:	f001 f85c 	bl	8007d8c <xTaskCheckForTimeOut>
 8006cd4:	4603      	mov	r3, r0
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d123      	bne.n	8006d22 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006cda:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006cdc:	f000 fb22 	bl	8007324 <prvIsQueueEmpty>
 8006ce0:	4603      	mov	r3, r0
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d017      	beq.n	8006d16 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006ce6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ce8:	3324      	adds	r3, #36	@ 0x24
 8006cea:	687a      	ldr	r2, [r7, #4]
 8006cec:	4611      	mov	r1, r2
 8006cee:	4618      	mov	r0, r3
 8006cf0:	f000 ffac 	bl	8007c4c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006cf4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006cf6:	f000 fac3 	bl	8007280 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006cfa:	f000 fdc9 	bl	8007890 <xTaskResumeAll>
 8006cfe:	4603      	mov	r3, r0
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d189      	bne.n	8006c18 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8006d04:	4b0f      	ldr	r3, [pc, #60]	@ (8006d44 <xQueueReceive+0x1c0>)
 8006d06:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006d0a:	601a      	str	r2, [r3, #0]
 8006d0c:	f3bf 8f4f 	dsb	sy
 8006d10:	f3bf 8f6f 	isb	sy
 8006d14:	e780      	b.n	8006c18 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006d16:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006d18:	f000 fab2 	bl	8007280 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006d1c:	f000 fdb8 	bl	8007890 <xTaskResumeAll>
 8006d20:	e77a      	b.n	8006c18 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006d22:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006d24:	f000 faac 	bl	8007280 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006d28:	f000 fdb2 	bl	8007890 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006d2c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006d2e:	f000 faf9 	bl	8007324 <prvIsQueueEmpty>
 8006d32:	4603      	mov	r3, r0
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	f43f af6f 	beq.w	8006c18 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006d3a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	3730      	adds	r7, #48	@ 0x30
 8006d40:	46bd      	mov	sp, r7
 8006d42:	bd80      	pop	{r7, pc}
 8006d44:	e000ed04 	.word	0xe000ed04

08006d48 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b08e      	sub	sp, #56	@ 0x38
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
 8006d50:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006d52:	2300      	movs	r3, #0
 8006d54:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006d5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d10b      	bne.n	8006d7c <xQueueSemaphoreTake+0x34>
	__asm volatile
 8006d64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d68:	f383 8811 	msr	BASEPRI, r3
 8006d6c:	f3bf 8f6f 	isb	sy
 8006d70:	f3bf 8f4f 	dsb	sy
 8006d74:	623b      	str	r3, [r7, #32]
}
 8006d76:	bf00      	nop
 8006d78:	bf00      	nop
 8006d7a:	e7fd      	b.n	8006d78 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006d7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d00b      	beq.n	8006d9c <xQueueSemaphoreTake+0x54>
	__asm volatile
 8006d84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d88:	f383 8811 	msr	BASEPRI, r3
 8006d8c:	f3bf 8f6f 	isb	sy
 8006d90:	f3bf 8f4f 	dsb	sy
 8006d94:	61fb      	str	r3, [r7, #28]
}
 8006d96:	bf00      	nop
 8006d98:	bf00      	nop
 8006d9a:	e7fd      	b.n	8006d98 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006d9c:	f001 f942 	bl	8008024 <xTaskGetSchedulerState>
 8006da0:	4603      	mov	r3, r0
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d102      	bne.n	8006dac <xQueueSemaphoreTake+0x64>
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d101      	bne.n	8006db0 <xQueueSemaphoreTake+0x68>
 8006dac:	2301      	movs	r3, #1
 8006dae:	e000      	b.n	8006db2 <xQueueSemaphoreTake+0x6a>
 8006db0:	2300      	movs	r3, #0
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d10b      	bne.n	8006dce <xQueueSemaphoreTake+0x86>
	__asm volatile
 8006db6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dba:	f383 8811 	msr	BASEPRI, r3
 8006dbe:	f3bf 8f6f 	isb	sy
 8006dc2:	f3bf 8f4f 	dsb	sy
 8006dc6:	61bb      	str	r3, [r7, #24]
}
 8006dc8:	bf00      	nop
 8006dca:	bf00      	nop
 8006dcc:	e7fd      	b.n	8006dca <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006dce:	f001 fc83 	bl	80086d8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006dd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006dd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dd6:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006dd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d024      	beq.n	8006e28 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006dde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006de0:	1e5a      	subs	r2, r3, #1
 8006de2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006de4:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006de6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d104      	bne.n	8006df8 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006dee:	f001 fac5 	bl	800837c <pvTaskIncrementMutexHeldCount>
 8006df2:	4602      	mov	r2, r0
 8006df4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006df6:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006df8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006dfa:	691b      	ldr	r3, [r3, #16]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d00f      	beq.n	8006e20 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006e00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e02:	3310      	adds	r3, #16
 8006e04:	4618      	mov	r0, r3
 8006e06:	f000 ff47 	bl	8007c98 <xTaskRemoveFromEventList>
 8006e0a:	4603      	mov	r3, r0
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d007      	beq.n	8006e20 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006e10:	4b54      	ldr	r3, [pc, #336]	@ (8006f64 <xQueueSemaphoreTake+0x21c>)
 8006e12:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006e16:	601a      	str	r2, [r3, #0]
 8006e18:	f3bf 8f4f 	dsb	sy
 8006e1c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006e20:	f001 fc8c 	bl	800873c <vPortExitCritical>
				return pdPASS;
 8006e24:	2301      	movs	r3, #1
 8006e26:	e098      	b.n	8006f5a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d112      	bne.n	8006e54 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006e2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d00b      	beq.n	8006e4c <xQueueSemaphoreTake+0x104>
	__asm volatile
 8006e34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e38:	f383 8811 	msr	BASEPRI, r3
 8006e3c:	f3bf 8f6f 	isb	sy
 8006e40:	f3bf 8f4f 	dsb	sy
 8006e44:	617b      	str	r3, [r7, #20]
}
 8006e46:	bf00      	nop
 8006e48:	bf00      	nop
 8006e4a:	e7fd      	b.n	8006e48 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006e4c:	f001 fc76 	bl	800873c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006e50:	2300      	movs	r3, #0
 8006e52:	e082      	b.n	8006f5a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006e54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d106      	bne.n	8006e68 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006e5a:	f107 030c 	add.w	r3, r7, #12
 8006e5e:	4618      	mov	r0, r3
 8006e60:	f000 ff7e 	bl	8007d60 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006e64:	2301      	movs	r3, #1
 8006e66:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006e68:	f001 fc68 	bl	800873c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006e6c:	f000 fd02 	bl	8007874 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006e70:	f001 fc32 	bl	80086d8 <vPortEnterCritical>
 8006e74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e76:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006e7a:	b25b      	sxtb	r3, r3
 8006e7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e80:	d103      	bne.n	8006e8a <xQueueSemaphoreTake+0x142>
 8006e82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e84:	2200      	movs	r2, #0
 8006e86:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006e8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e8c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006e90:	b25b      	sxtb	r3, r3
 8006e92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e96:	d103      	bne.n	8006ea0 <xQueueSemaphoreTake+0x158>
 8006e98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006ea0:	f001 fc4c 	bl	800873c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006ea4:	463a      	mov	r2, r7
 8006ea6:	f107 030c 	add.w	r3, r7, #12
 8006eaa:	4611      	mov	r1, r2
 8006eac:	4618      	mov	r0, r3
 8006eae:	f000 ff6d 	bl	8007d8c <xTaskCheckForTimeOut>
 8006eb2:	4603      	mov	r3, r0
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d132      	bne.n	8006f1e <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006eb8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006eba:	f000 fa33 	bl	8007324 <prvIsQueueEmpty>
 8006ebe:	4603      	mov	r3, r0
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d026      	beq.n	8006f12 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006ec4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d109      	bne.n	8006ee0 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8006ecc:	f001 fc04 	bl	80086d8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006ed0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ed2:	689b      	ldr	r3, [r3, #8]
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	f001 f8c3 	bl	8008060 <xTaskPriorityInherit>
 8006eda:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8006edc:	f001 fc2e 	bl	800873c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006ee0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ee2:	3324      	adds	r3, #36	@ 0x24
 8006ee4:	683a      	ldr	r2, [r7, #0]
 8006ee6:	4611      	mov	r1, r2
 8006ee8:	4618      	mov	r0, r3
 8006eea:	f000 feaf 	bl	8007c4c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006eee:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006ef0:	f000 f9c6 	bl	8007280 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006ef4:	f000 fccc 	bl	8007890 <xTaskResumeAll>
 8006ef8:	4603      	mov	r3, r0
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	f47f af67 	bne.w	8006dce <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8006f00:	4b18      	ldr	r3, [pc, #96]	@ (8006f64 <xQueueSemaphoreTake+0x21c>)
 8006f02:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006f06:	601a      	str	r2, [r3, #0]
 8006f08:	f3bf 8f4f 	dsb	sy
 8006f0c:	f3bf 8f6f 	isb	sy
 8006f10:	e75d      	b.n	8006dce <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006f12:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006f14:	f000 f9b4 	bl	8007280 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006f18:	f000 fcba 	bl	8007890 <xTaskResumeAll>
 8006f1c:	e757      	b.n	8006dce <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006f1e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006f20:	f000 f9ae 	bl	8007280 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006f24:	f000 fcb4 	bl	8007890 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006f28:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006f2a:	f000 f9fb 	bl	8007324 <prvIsQueueEmpty>
 8006f2e:	4603      	mov	r3, r0
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	f43f af4c 	beq.w	8006dce <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006f36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d00d      	beq.n	8006f58 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8006f3c:	f001 fbcc 	bl	80086d8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006f40:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006f42:	f000 f8f5 	bl	8007130 <prvGetDisinheritPriorityAfterTimeout>
 8006f46:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006f48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f4a:	689b      	ldr	r3, [r3, #8]
 8006f4c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006f4e:	4618      	mov	r0, r3
 8006f50:	f001 f984 	bl	800825c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006f54:	f001 fbf2 	bl	800873c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006f58:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	3738      	adds	r7, #56	@ 0x38
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	bd80      	pop	{r7, pc}
 8006f62:	bf00      	nop
 8006f64:	e000ed04 	.word	0xe000ed04

08006f68 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b08e      	sub	sp, #56	@ 0x38
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	60f8      	str	r0, [r7, #12]
 8006f70:	60b9      	str	r1, [r7, #8]
 8006f72:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006f78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d10b      	bne.n	8006f96 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8006f7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f82:	f383 8811 	msr	BASEPRI, r3
 8006f86:	f3bf 8f6f 	isb	sy
 8006f8a:	f3bf 8f4f 	dsb	sy
 8006f8e:	623b      	str	r3, [r7, #32]
}
 8006f90:	bf00      	nop
 8006f92:	bf00      	nop
 8006f94:	e7fd      	b.n	8006f92 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006f96:	68bb      	ldr	r3, [r7, #8]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d103      	bne.n	8006fa4 <xQueueReceiveFromISR+0x3c>
 8006f9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d101      	bne.n	8006fa8 <xQueueReceiveFromISR+0x40>
 8006fa4:	2301      	movs	r3, #1
 8006fa6:	e000      	b.n	8006faa <xQueueReceiveFromISR+0x42>
 8006fa8:	2300      	movs	r3, #0
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d10b      	bne.n	8006fc6 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8006fae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fb2:	f383 8811 	msr	BASEPRI, r3
 8006fb6:	f3bf 8f6f 	isb	sy
 8006fba:	f3bf 8f4f 	dsb	sy
 8006fbe:	61fb      	str	r3, [r7, #28]
}
 8006fc0:	bf00      	nop
 8006fc2:	bf00      	nop
 8006fc4:	e7fd      	b.n	8006fc2 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006fc6:	f001 fc67 	bl	8008898 <vPortValidateInterruptPriority>
	__asm volatile
 8006fca:	f3ef 8211 	mrs	r2, BASEPRI
 8006fce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fd2:	f383 8811 	msr	BASEPRI, r3
 8006fd6:	f3bf 8f6f 	isb	sy
 8006fda:	f3bf 8f4f 	dsb	sy
 8006fde:	61ba      	str	r2, [r7, #24]
 8006fe0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006fe2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006fe4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006fe6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fe8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fea:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006fec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d02f      	beq.n	8007052 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006ff2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ff4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006ff8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006ffc:	68b9      	ldr	r1, [r7, #8]
 8006ffe:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007000:	f000 f918 	bl	8007234 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007004:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007006:	1e5a      	subs	r2, r3, #1
 8007008:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800700a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800700c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8007010:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007014:	d112      	bne.n	800703c <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007016:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007018:	691b      	ldr	r3, [r3, #16]
 800701a:	2b00      	cmp	r3, #0
 800701c:	d016      	beq.n	800704c <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800701e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007020:	3310      	adds	r3, #16
 8007022:	4618      	mov	r0, r3
 8007024:	f000 fe38 	bl	8007c98 <xTaskRemoveFromEventList>
 8007028:	4603      	mov	r3, r0
 800702a:	2b00      	cmp	r3, #0
 800702c:	d00e      	beq.n	800704c <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d00b      	beq.n	800704c <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2201      	movs	r2, #1
 8007038:	601a      	str	r2, [r3, #0]
 800703a:	e007      	b.n	800704c <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800703c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007040:	3301      	adds	r3, #1
 8007042:	b2db      	uxtb	r3, r3
 8007044:	b25a      	sxtb	r2, r3
 8007046:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007048:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800704c:	2301      	movs	r3, #1
 800704e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007050:	e001      	b.n	8007056 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8007052:	2300      	movs	r3, #0
 8007054:	637b      	str	r3, [r7, #52]	@ 0x34
 8007056:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007058:	613b      	str	r3, [r7, #16]
	__asm volatile
 800705a:	693b      	ldr	r3, [r7, #16]
 800705c:	f383 8811 	msr	BASEPRI, r3
}
 8007060:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007062:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8007064:	4618      	mov	r0, r3
 8007066:	3738      	adds	r7, #56	@ 0x38
 8007068:	46bd      	mov	sp, r7
 800706a:	bd80      	pop	{r7, pc}

0800706c <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b084      	sub	sp, #16
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d10b      	bne.n	8007092 <uxQueueMessagesWaiting+0x26>
	__asm volatile
 800707a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800707e:	f383 8811 	msr	BASEPRI, r3
 8007082:	f3bf 8f6f 	isb	sy
 8007086:	f3bf 8f4f 	dsb	sy
 800708a:	60bb      	str	r3, [r7, #8]
}
 800708c:	bf00      	nop
 800708e:	bf00      	nop
 8007090:	e7fd      	b.n	800708e <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8007092:	f001 fb21 	bl	80086d8 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800709a:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800709c:	f001 fb4e 	bl	800873c <vPortExitCritical>

	return uxReturn;
 80070a0:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80070a2:	4618      	mov	r0, r3
 80070a4:	3710      	adds	r7, #16
 80070a6:	46bd      	mov	sp, r7
 80070a8:	bd80      	pop	{r7, pc}

080070aa <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 80070aa:	b480      	push	{r7}
 80070ac:	b087      	sub	sp, #28
 80070ae:	af00      	add	r7, sp, #0
 80070b0:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 80070b6:	697b      	ldr	r3, [r7, #20]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d10b      	bne.n	80070d4 <uxQueueMessagesWaitingFromISR+0x2a>
	__asm volatile
 80070bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070c0:	f383 8811 	msr	BASEPRI, r3
 80070c4:	f3bf 8f6f 	isb	sy
 80070c8:	f3bf 8f4f 	dsb	sy
 80070cc:	60fb      	str	r3, [r7, #12]
}
 80070ce:	bf00      	nop
 80070d0:	bf00      	nop
 80070d2:	e7fd      	b.n	80070d0 <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 80070d4:	697b      	ldr	r3, [r7, #20]
 80070d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070d8:	613b      	str	r3, [r7, #16]

	return uxReturn;
 80070da:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80070dc:	4618      	mov	r0, r3
 80070de:	371c      	adds	r7, #28
 80070e0:	46bd      	mov	sp, r7
 80070e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e6:	4770      	bx	lr

080070e8 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b084      	sub	sp, #16
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d10b      	bne.n	8007112 <vQueueDelete+0x2a>
	__asm volatile
 80070fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070fe:	f383 8811 	msr	BASEPRI, r3
 8007102:	f3bf 8f6f 	isb	sy
 8007106:	f3bf 8f4f 	dsb	sy
 800710a:	60bb      	str	r3, [r7, #8]
}
 800710c:	bf00      	nop
 800710e:	bf00      	nop
 8007110:	e7fd      	b.n	800710e <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8007112:	68f8      	ldr	r0, [r7, #12]
 8007114:	f000 f934 	bl	8007380 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800711e:	2b00      	cmp	r3, #0
 8007120:	d102      	bne.n	8007128 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 8007122:	68f8      	ldr	r0, [r7, #12]
 8007124:	f001 fcc8 	bl	8008ab8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8007128:	bf00      	nop
 800712a:	3710      	adds	r7, #16
 800712c:	46bd      	mov	sp, r7
 800712e:	bd80      	pop	{r7, pc}

08007130 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007130:	b480      	push	{r7}
 8007132:	b085      	sub	sp, #20
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800713c:	2b00      	cmp	r3, #0
 800713e:	d006      	beq.n	800714e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	f1c3 0307 	rsb	r3, r3, #7
 800714a:	60fb      	str	r3, [r7, #12]
 800714c:	e001      	b.n	8007152 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800714e:	2300      	movs	r3, #0
 8007150:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8007152:	68fb      	ldr	r3, [r7, #12]
	}
 8007154:	4618      	mov	r0, r3
 8007156:	3714      	adds	r7, #20
 8007158:	46bd      	mov	sp, r7
 800715a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715e:	4770      	bx	lr

08007160 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007160:	b580      	push	{r7, lr}
 8007162:	b086      	sub	sp, #24
 8007164:	af00      	add	r7, sp, #0
 8007166:	60f8      	str	r0, [r7, #12]
 8007168:	60b9      	str	r1, [r7, #8]
 800716a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800716c:	2300      	movs	r3, #0
 800716e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007174:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800717a:	2b00      	cmp	r3, #0
 800717c:	d10d      	bne.n	800719a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	2b00      	cmp	r3, #0
 8007184:	d14d      	bne.n	8007222 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	689b      	ldr	r3, [r3, #8]
 800718a:	4618      	mov	r0, r3
 800718c:	f000 ffde 	bl	800814c <xTaskPriorityDisinherit>
 8007190:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	2200      	movs	r2, #0
 8007196:	609a      	str	r2, [r3, #8]
 8007198:	e043      	b.n	8007222 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d119      	bne.n	80071d4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	6858      	ldr	r0, [r3, #4]
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071a8:	461a      	mov	r2, r3
 80071aa:	68b9      	ldr	r1, [r7, #8]
 80071ac:	f00f fb63 	bl	8016876 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	685a      	ldr	r2, [r3, #4]
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071b8:	441a      	add	r2, r3
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	685a      	ldr	r2, [r3, #4]
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	689b      	ldr	r3, [r3, #8]
 80071c6:	429a      	cmp	r2, r3
 80071c8:	d32b      	bcc.n	8007222 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	681a      	ldr	r2, [r3, #0]
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	605a      	str	r2, [r3, #4]
 80071d2:	e026      	b.n	8007222 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	68d8      	ldr	r0, [r3, #12]
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071dc:	461a      	mov	r2, r3
 80071de:	68b9      	ldr	r1, [r7, #8]
 80071e0:	f00f fb49 	bl	8016876 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	68da      	ldr	r2, [r3, #12]
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071ec:	425b      	negs	r3, r3
 80071ee:	441a      	add	r2, r3
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	68da      	ldr	r2, [r3, #12]
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	429a      	cmp	r2, r3
 80071fe:	d207      	bcs.n	8007210 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	689a      	ldr	r2, [r3, #8]
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007208:	425b      	negs	r3, r3
 800720a:	441a      	add	r2, r3
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2b02      	cmp	r3, #2
 8007214:	d105      	bne.n	8007222 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007216:	693b      	ldr	r3, [r7, #16]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d002      	beq.n	8007222 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800721c:	693b      	ldr	r3, [r7, #16]
 800721e:	3b01      	subs	r3, #1
 8007220:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007222:	693b      	ldr	r3, [r7, #16]
 8007224:	1c5a      	adds	r2, r3, #1
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800722a:	697b      	ldr	r3, [r7, #20]
}
 800722c:	4618      	mov	r0, r3
 800722e:	3718      	adds	r7, #24
 8007230:	46bd      	mov	sp, r7
 8007232:	bd80      	pop	{r7, pc}

08007234 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007234:	b580      	push	{r7, lr}
 8007236:	b082      	sub	sp, #8
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
 800723c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007242:	2b00      	cmp	r3, #0
 8007244:	d018      	beq.n	8007278 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	68da      	ldr	r2, [r3, #12]
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800724e:	441a      	add	r2, r3
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	68da      	ldr	r2, [r3, #12]
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	689b      	ldr	r3, [r3, #8]
 800725c:	429a      	cmp	r2, r3
 800725e:	d303      	bcc.n	8007268 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681a      	ldr	r2, [r3, #0]
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	68d9      	ldr	r1, [r3, #12]
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007270:	461a      	mov	r2, r3
 8007272:	6838      	ldr	r0, [r7, #0]
 8007274:	f00f faff 	bl	8016876 <memcpy>
	}
}
 8007278:	bf00      	nop
 800727a:	3708      	adds	r7, #8
 800727c:	46bd      	mov	sp, r7
 800727e:	bd80      	pop	{r7, pc}

08007280 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007280:	b580      	push	{r7, lr}
 8007282:	b084      	sub	sp, #16
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007288:	f001 fa26 	bl	80086d8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007292:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007294:	e011      	b.n	80072ba <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800729a:	2b00      	cmp	r3, #0
 800729c:	d012      	beq.n	80072c4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	3324      	adds	r3, #36	@ 0x24
 80072a2:	4618      	mov	r0, r3
 80072a4:	f000 fcf8 	bl	8007c98 <xTaskRemoveFromEventList>
 80072a8:	4603      	mov	r3, r0
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d001      	beq.n	80072b2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80072ae:	f000 fdd1 	bl	8007e54 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80072b2:	7bfb      	ldrb	r3, [r7, #15]
 80072b4:	3b01      	subs	r3, #1
 80072b6:	b2db      	uxtb	r3, r3
 80072b8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80072ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	dce9      	bgt.n	8007296 <prvUnlockQueue+0x16>
 80072c2:	e000      	b.n	80072c6 <prvUnlockQueue+0x46>
					break;
 80072c4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	22ff      	movs	r2, #255	@ 0xff
 80072ca:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80072ce:	f001 fa35 	bl	800873c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80072d2:	f001 fa01 	bl	80086d8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80072dc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80072de:	e011      	b.n	8007304 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	691b      	ldr	r3, [r3, #16]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d012      	beq.n	800730e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	3310      	adds	r3, #16
 80072ec:	4618      	mov	r0, r3
 80072ee:	f000 fcd3 	bl	8007c98 <xTaskRemoveFromEventList>
 80072f2:	4603      	mov	r3, r0
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d001      	beq.n	80072fc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80072f8:	f000 fdac 	bl	8007e54 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80072fc:	7bbb      	ldrb	r3, [r7, #14]
 80072fe:	3b01      	subs	r3, #1
 8007300:	b2db      	uxtb	r3, r3
 8007302:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007304:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007308:	2b00      	cmp	r3, #0
 800730a:	dce9      	bgt.n	80072e0 <prvUnlockQueue+0x60>
 800730c:	e000      	b.n	8007310 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800730e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	22ff      	movs	r2, #255	@ 0xff
 8007314:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8007318:	f001 fa10 	bl	800873c <vPortExitCritical>
}
 800731c:	bf00      	nop
 800731e:	3710      	adds	r7, #16
 8007320:	46bd      	mov	sp, r7
 8007322:	bd80      	pop	{r7, pc}

08007324 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007324:	b580      	push	{r7, lr}
 8007326:	b084      	sub	sp, #16
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800732c:	f001 f9d4 	bl	80086d8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007334:	2b00      	cmp	r3, #0
 8007336:	d102      	bne.n	800733e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007338:	2301      	movs	r3, #1
 800733a:	60fb      	str	r3, [r7, #12]
 800733c:	e001      	b.n	8007342 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800733e:	2300      	movs	r3, #0
 8007340:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007342:	f001 f9fb 	bl	800873c <vPortExitCritical>

	return xReturn;
 8007346:	68fb      	ldr	r3, [r7, #12]
}
 8007348:	4618      	mov	r0, r3
 800734a:	3710      	adds	r7, #16
 800734c:	46bd      	mov	sp, r7
 800734e:	bd80      	pop	{r7, pc}

08007350 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007350:	b580      	push	{r7, lr}
 8007352:	b084      	sub	sp, #16
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007358:	f001 f9be 	bl	80086d8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007364:	429a      	cmp	r2, r3
 8007366:	d102      	bne.n	800736e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007368:	2301      	movs	r3, #1
 800736a:	60fb      	str	r3, [r7, #12]
 800736c:	e001      	b.n	8007372 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800736e:	2300      	movs	r3, #0
 8007370:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007372:	f001 f9e3 	bl	800873c <vPortExitCritical>

	return xReturn;
 8007376:	68fb      	ldr	r3, [r7, #12]
}
 8007378:	4618      	mov	r0, r3
 800737a:	3710      	adds	r7, #16
 800737c:	46bd      	mov	sp, r7
 800737e:	bd80      	pop	{r7, pc}

08007380 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8007380:	b480      	push	{r7}
 8007382:	b085      	sub	sp, #20
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007388:	2300      	movs	r3, #0
 800738a:	60fb      	str	r3, [r7, #12]
 800738c:	e016      	b.n	80073bc <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800738e:	4a10      	ldr	r2, [pc, #64]	@ (80073d0 <vQueueUnregisterQueue+0x50>)
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	00db      	lsls	r3, r3, #3
 8007394:	4413      	add	r3, r2
 8007396:	685b      	ldr	r3, [r3, #4]
 8007398:	687a      	ldr	r2, [r7, #4]
 800739a:	429a      	cmp	r2, r3
 800739c:	d10b      	bne.n	80073b6 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800739e:	4a0c      	ldr	r2, [pc, #48]	@ (80073d0 <vQueueUnregisterQueue+0x50>)
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	2100      	movs	r1, #0
 80073a4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80073a8:	4a09      	ldr	r2, [pc, #36]	@ (80073d0 <vQueueUnregisterQueue+0x50>)
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	00db      	lsls	r3, r3, #3
 80073ae:	4413      	add	r3, r2
 80073b0:	2200      	movs	r2, #0
 80073b2:	605a      	str	r2, [r3, #4]
				break;
 80073b4:	e006      	b.n	80073c4 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	3301      	adds	r3, #1
 80073ba:	60fb      	str	r3, [r7, #12]
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	2b07      	cmp	r3, #7
 80073c0:	d9e5      	bls.n	800738e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80073c2:	bf00      	nop
 80073c4:	bf00      	nop
 80073c6:	3714      	adds	r7, #20
 80073c8:	46bd      	mov	sp, r7
 80073ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ce:	4770      	bx	lr
 80073d0:	20005650 	.word	0x20005650

080073d4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b08e      	sub	sp, #56	@ 0x38
 80073d8:	af04      	add	r7, sp, #16
 80073da:	60f8      	str	r0, [r7, #12]
 80073dc:	60b9      	str	r1, [r7, #8]
 80073de:	607a      	str	r2, [r7, #4]
 80073e0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80073e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d10b      	bne.n	8007400 <xTaskCreateStatic+0x2c>
	__asm volatile
 80073e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073ec:	f383 8811 	msr	BASEPRI, r3
 80073f0:	f3bf 8f6f 	isb	sy
 80073f4:	f3bf 8f4f 	dsb	sy
 80073f8:	623b      	str	r3, [r7, #32]
}
 80073fa:	bf00      	nop
 80073fc:	bf00      	nop
 80073fe:	e7fd      	b.n	80073fc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007400:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007402:	2b00      	cmp	r3, #0
 8007404:	d10b      	bne.n	800741e <xTaskCreateStatic+0x4a>
	__asm volatile
 8007406:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800740a:	f383 8811 	msr	BASEPRI, r3
 800740e:	f3bf 8f6f 	isb	sy
 8007412:	f3bf 8f4f 	dsb	sy
 8007416:	61fb      	str	r3, [r7, #28]
}
 8007418:	bf00      	nop
 800741a:	bf00      	nop
 800741c:	e7fd      	b.n	800741a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800741e:	23a0      	movs	r3, #160	@ 0xa0
 8007420:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007422:	693b      	ldr	r3, [r7, #16]
 8007424:	2ba0      	cmp	r3, #160	@ 0xa0
 8007426:	d00b      	beq.n	8007440 <xTaskCreateStatic+0x6c>
	__asm volatile
 8007428:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800742c:	f383 8811 	msr	BASEPRI, r3
 8007430:	f3bf 8f6f 	isb	sy
 8007434:	f3bf 8f4f 	dsb	sy
 8007438:	61bb      	str	r3, [r7, #24]
}
 800743a:	bf00      	nop
 800743c:	bf00      	nop
 800743e:	e7fd      	b.n	800743c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007440:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007442:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007444:	2b00      	cmp	r3, #0
 8007446:	d01e      	beq.n	8007486 <xTaskCreateStatic+0xb2>
 8007448:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800744a:	2b00      	cmp	r3, #0
 800744c:	d01b      	beq.n	8007486 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800744e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007450:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007454:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007456:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007458:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800745a:	2202      	movs	r2, #2
 800745c:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007460:	2300      	movs	r3, #0
 8007462:	9303      	str	r3, [sp, #12]
 8007464:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007466:	9302      	str	r3, [sp, #8]
 8007468:	f107 0314 	add.w	r3, r7, #20
 800746c:	9301      	str	r3, [sp, #4]
 800746e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007470:	9300      	str	r3, [sp, #0]
 8007472:	683b      	ldr	r3, [r7, #0]
 8007474:	687a      	ldr	r2, [r7, #4]
 8007476:	68b9      	ldr	r1, [r7, #8]
 8007478:	68f8      	ldr	r0, [r7, #12]
 800747a:	f000 f851 	bl	8007520 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800747e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007480:	f000 f8ee 	bl	8007660 <prvAddNewTaskToReadyList>
 8007484:	e001      	b.n	800748a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8007486:	2300      	movs	r3, #0
 8007488:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800748a:	697b      	ldr	r3, [r7, #20]
	}
 800748c:	4618      	mov	r0, r3
 800748e:	3728      	adds	r7, #40	@ 0x28
 8007490:	46bd      	mov	sp, r7
 8007492:	bd80      	pop	{r7, pc}

08007494 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007494:	b580      	push	{r7, lr}
 8007496:	b08c      	sub	sp, #48	@ 0x30
 8007498:	af04      	add	r7, sp, #16
 800749a:	60f8      	str	r0, [r7, #12]
 800749c:	60b9      	str	r1, [r7, #8]
 800749e:	603b      	str	r3, [r7, #0]
 80074a0:	4613      	mov	r3, r2
 80074a2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80074a4:	88fb      	ldrh	r3, [r7, #6]
 80074a6:	009b      	lsls	r3, r3, #2
 80074a8:	4618      	mov	r0, r3
 80074aa:	f001 fa37 	bl	800891c <pvPortMalloc>
 80074ae:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80074b0:	697b      	ldr	r3, [r7, #20]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d00e      	beq.n	80074d4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80074b6:	20a0      	movs	r0, #160	@ 0xa0
 80074b8:	f001 fa30 	bl	800891c <pvPortMalloc>
 80074bc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80074be:	69fb      	ldr	r3, [r7, #28]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d003      	beq.n	80074cc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80074c4:	69fb      	ldr	r3, [r7, #28]
 80074c6:	697a      	ldr	r2, [r7, #20]
 80074c8:	631a      	str	r2, [r3, #48]	@ 0x30
 80074ca:	e005      	b.n	80074d8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80074cc:	6978      	ldr	r0, [r7, #20]
 80074ce:	f001 faf3 	bl	8008ab8 <vPortFree>
 80074d2:	e001      	b.n	80074d8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80074d4:	2300      	movs	r3, #0
 80074d6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80074d8:	69fb      	ldr	r3, [r7, #28]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d017      	beq.n	800750e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80074de:	69fb      	ldr	r3, [r7, #28]
 80074e0:	2200      	movs	r2, #0
 80074e2:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80074e6:	88fa      	ldrh	r2, [r7, #6]
 80074e8:	2300      	movs	r3, #0
 80074ea:	9303      	str	r3, [sp, #12]
 80074ec:	69fb      	ldr	r3, [r7, #28]
 80074ee:	9302      	str	r3, [sp, #8]
 80074f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074f2:	9301      	str	r3, [sp, #4]
 80074f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074f6:	9300      	str	r3, [sp, #0]
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	68b9      	ldr	r1, [r7, #8]
 80074fc:	68f8      	ldr	r0, [r7, #12]
 80074fe:	f000 f80f 	bl	8007520 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007502:	69f8      	ldr	r0, [r7, #28]
 8007504:	f000 f8ac 	bl	8007660 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007508:	2301      	movs	r3, #1
 800750a:	61bb      	str	r3, [r7, #24]
 800750c:	e002      	b.n	8007514 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800750e:	f04f 33ff 	mov.w	r3, #4294967295
 8007512:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007514:	69bb      	ldr	r3, [r7, #24]
	}
 8007516:	4618      	mov	r0, r3
 8007518:	3720      	adds	r7, #32
 800751a:	46bd      	mov	sp, r7
 800751c:	bd80      	pop	{r7, pc}
	...

08007520 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007520:	b580      	push	{r7, lr}
 8007522:	b088      	sub	sp, #32
 8007524:	af00      	add	r7, sp, #0
 8007526:	60f8      	str	r0, [r7, #12]
 8007528:	60b9      	str	r1, [r7, #8]
 800752a:	607a      	str	r2, [r7, #4]
 800752c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800752e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007530:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007538:	3b01      	subs	r3, #1
 800753a:	009b      	lsls	r3, r3, #2
 800753c:	4413      	add	r3, r2
 800753e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007540:	69bb      	ldr	r3, [r7, #24]
 8007542:	f023 0307 	bic.w	r3, r3, #7
 8007546:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007548:	69bb      	ldr	r3, [r7, #24]
 800754a:	f003 0307 	and.w	r3, r3, #7
 800754e:	2b00      	cmp	r3, #0
 8007550:	d00b      	beq.n	800756a <prvInitialiseNewTask+0x4a>
	__asm volatile
 8007552:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007556:	f383 8811 	msr	BASEPRI, r3
 800755a:	f3bf 8f6f 	isb	sy
 800755e:	f3bf 8f4f 	dsb	sy
 8007562:	617b      	str	r3, [r7, #20]
}
 8007564:	bf00      	nop
 8007566:	bf00      	nop
 8007568:	e7fd      	b.n	8007566 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800756a:	68bb      	ldr	r3, [r7, #8]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d01f      	beq.n	80075b0 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007570:	2300      	movs	r3, #0
 8007572:	61fb      	str	r3, [r7, #28]
 8007574:	e012      	b.n	800759c <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007576:	68ba      	ldr	r2, [r7, #8]
 8007578:	69fb      	ldr	r3, [r7, #28]
 800757a:	4413      	add	r3, r2
 800757c:	7819      	ldrb	r1, [r3, #0]
 800757e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007580:	69fb      	ldr	r3, [r7, #28]
 8007582:	4413      	add	r3, r2
 8007584:	3334      	adds	r3, #52	@ 0x34
 8007586:	460a      	mov	r2, r1
 8007588:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800758a:	68ba      	ldr	r2, [r7, #8]
 800758c:	69fb      	ldr	r3, [r7, #28]
 800758e:	4413      	add	r3, r2
 8007590:	781b      	ldrb	r3, [r3, #0]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d006      	beq.n	80075a4 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007596:	69fb      	ldr	r3, [r7, #28]
 8007598:	3301      	adds	r3, #1
 800759a:	61fb      	str	r3, [r7, #28]
 800759c:	69fb      	ldr	r3, [r7, #28]
 800759e:	2b0f      	cmp	r3, #15
 80075a0:	d9e9      	bls.n	8007576 <prvInitialiseNewTask+0x56>
 80075a2:	e000      	b.n	80075a6 <prvInitialiseNewTask+0x86>
			{
				break;
 80075a4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80075a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075a8:	2200      	movs	r2, #0
 80075aa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80075ae:	e003      	b.n	80075b8 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80075b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075b2:	2200      	movs	r2, #0
 80075b4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80075b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075ba:	2b06      	cmp	r3, #6
 80075bc:	d901      	bls.n	80075c2 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80075be:	2306      	movs	r3, #6
 80075c0:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80075c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075c4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80075c6:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80075c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075ca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80075cc:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80075ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075d0:	2200      	movs	r2, #0
 80075d2:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80075d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075d6:	3304      	adds	r3, #4
 80075d8:	4618      	mov	r0, r3
 80075da:	f7fe fe80 	bl	80062de <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80075de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075e0:	3318      	adds	r3, #24
 80075e2:	4618      	mov	r0, r3
 80075e4:	f7fe fe7b 	bl	80062de <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80075e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80075ec:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80075ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075f0:	f1c3 0207 	rsb	r2, r3, #7
 80075f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075f6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80075f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80075fc:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80075fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007600:	2200      	movs	r2, #0
 8007602:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007606:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007608:	2200      	movs	r2, #0
 800760a:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800760e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007610:	334c      	adds	r3, #76	@ 0x4c
 8007612:	224c      	movs	r2, #76	@ 0x4c
 8007614:	2100      	movs	r1, #0
 8007616:	4618      	mov	r0, r3
 8007618:	f00f f861 	bl	80166de <memset>
 800761c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800761e:	4a0d      	ldr	r2, [pc, #52]	@ (8007654 <prvInitialiseNewTask+0x134>)
 8007620:	651a      	str	r2, [r3, #80]	@ 0x50
 8007622:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007624:	4a0c      	ldr	r2, [pc, #48]	@ (8007658 <prvInitialiseNewTask+0x138>)
 8007626:	655a      	str	r2, [r3, #84]	@ 0x54
 8007628:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800762a:	4a0c      	ldr	r2, [pc, #48]	@ (800765c <prvInitialiseNewTask+0x13c>)
 800762c:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800762e:	683a      	ldr	r2, [r7, #0]
 8007630:	68f9      	ldr	r1, [r7, #12]
 8007632:	69b8      	ldr	r0, [r7, #24]
 8007634:	f000 ff1c 	bl	8008470 <pxPortInitialiseStack>
 8007638:	4602      	mov	r2, r0
 800763a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800763c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800763e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007640:	2b00      	cmp	r3, #0
 8007642:	d002      	beq.n	800764a <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007644:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007646:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007648:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800764a:	bf00      	nop
 800764c:	3720      	adds	r7, #32
 800764e:	46bd      	mov	sp, r7
 8007650:	bd80      	pop	{r7, pc}
 8007652:	bf00      	nop
 8007654:	2000eea0 	.word	0x2000eea0
 8007658:	2000ef08 	.word	0x2000ef08
 800765c:	2000ef70 	.word	0x2000ef70

08007660 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007660:	b580      	push	{r7, lr}
 8007662:	b082      	sub	sp, #8
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007668:	f001 f836 	bl	80086d8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800766c:	4b2a      	ldr	r3, [pc, #168]	@ (8007718 <prvAddNewTaskToReadyList+0xb8>)
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	3301      	adds	r3, #1
 8007672:	4a29      	ldr	r2, [pc, #164]	@ (8007718 <prvAddNewTaskToReadyList+0xb8>)
 8007674:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007676:	4b29      	ldr	r3, [pc, #164]	@ (800771c <prvAddNewTaskToReadyList+0xbc>)
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d109      	bne.n	8007692 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800767e:	4a27      	ldr	r2, [pc, #156]	@ (800771c <prvAddNewTaskToReadyList+0xbc>)
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007684:	4b24      	ldr	r3, [pc, #144]	@ (8007718 <prvAddNewTaskToReadyList+0xb8>)
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	2b01      	cmp	r3, #1
 800768a:	d110      	bne.n	80076ae <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800768c:	f000 fc06 	bl	8007e9c <prvInitialiseTaskLists>
 8007690:	e00d      	b.n	80076ae <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007692:	4b23      	ldr	r3, [pc, #140]	@ (8007720 <prvAddNewTaskToReadyList+0xc0>)
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d109      	bne.n	80076ae <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800769a:	4b20      	ldr	r3, [pc, #128]	@ (800771c <prvAddNewTaskToReadyList+0xbc>)
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076a4:	429a      	cmp	r2, r3
 80076a6:	d802      	bhi.n	80076ae <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80076a8:	4a1c      	ldr	r2, [pc, #112]	@ (800771c <prvAddNewTaskToReadyList+0xbc>)
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80076ae:	4b1d      	ldr	r3, [pc, #116]	@ (8007724 <prvAddNewTaskToReadyList+0xc4>)
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	3301      	adds	r3, #1
 80076b4:	4a1b      	ldr	r2, [pc, #108]	@ (8007724 <prvAddNewTaskToReadyList+0xc4>)
 80076b6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076bc:	2201      	movs	r2, #1
 80076be:	409a      	lsls	r2, r3
 80076c0:	4b19      	ldr	r3, [pc, #100]	@ (8007728 <prvAddNewTaskToReadyList+0xc8>)
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	4313      	orrs	r3, r2
 80076c6:	4a18      	ldr	r2, [pc, #96]	@ (8007728 <prvAddNewTaskToReadyList+0xc8>)
 80076c8:	6013      	str	r3, [r2, #0]
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80076ce:	4613      	mov	r3, r2
 80076d0:	009b      	lsls	r3, r3, #2
 80076d2:	4413      	add	r3, r2
 80076d4:	009b      	lsls	r3, r3, #2
 80076d6:	4a15      	ldr	r2, [pc, #84]	@ (800772c <prvAddNewTaskToReadyList+0xcc>)
 80076d8:	441a      	add	r2, r3
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	3304      	adds	r3, #4
 80076de:	4619      	mov	r1, r3
 80076e0:	4610      	mov	r0, r2
 80076e2:	f7fe fe09 	bl	80062f8 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80076e6:	f001 f829 	bl	800873c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80076ea:	4b0d      	ldr	r3, [pc, #52]	@ (8007720 <prvAddNewTaskToReadyList+0xc0>)
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d00e      	beq.n	8007710 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80076f2:	4b0a      	ldr	r3, [pc, #40]	@ (800771c <prvAddNewTaskToReadyList+0xbc>)
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076fc:	429a      	cmp	r2, r3
 80076fe:	d207      	bcs.n	8007710 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007700:	4b0b      	ldr	r3, [pc, #44]	@ (8007730 <prvAddNewTaskToReadyList+0xd0>)
 8007702:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007706:	601a      	str	r2, [r3, #0]
 8007708:	f3bf 8f4f 	dsb	sy
 800770c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007710:	bf00      	nop
 8007712:	3708      	adds	r7, #8
 8007714:	46bd      	mov	sp, r7
 8007716:	bd80      	pop	{r7, pc}
 8007718:	20005790 	.word	0x20005790
 800771c:	20005690 	.word	0x20005690
 8007720:	2000579c 	.word	0x2000579c
 8007724:	200057ac 	.word	0x200057ac
 8007728:	20005798 	.word	0x20005798
 800772c:	20005694 	.word	0x20005694
 8007730:	e000ed04 	.word	0xe000ed04

08007734 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007734:	b580      	push	{r7, lr}
 8007736:	b084      	sub	sp, #16
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800773c:	2300      	movs	r3, #0
 800773e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d018      	beq.n	8007778 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007746:	4b14      	ldr	r3, [pc, #80]	@ (8007798 <vTaskDelay+0x64>)
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d00b      	beq.n	8007766 <vTaskDelay+0x32>
	__asm volatile
 800774e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007752:	f383 8811 	msr	BASEPRI, r3
 8007756:	f3bf 8f6f 	isb	sy
 800775a:	f3bf 8f4f 	dsb	sy
 800775e:	60bb      	str	r3, [r7, #8]
}
 8007760:	bf00      	nop
 8007762:	bf00      	nop
 8007764:	e7fd      	b.n	8007762 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007766:	f000 f885 	bl	8007874 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800776a:	2100      	movs	r1, #0
 800776c:	6878      	ldr	r0, [r7, #4]
 800776e:	f000 fe19 	bl	80083a4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007772:	f000 f88d 	bl	8007890 <xTaskResumeAll>
 8007776:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d107      	bne.n	800778e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800777e:	4b07      	ldr	r3, [pc, #28]	@ (800779c <vTaskDelay+0x68>)
 8007780:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007784:	601a      	str	r2, [r3, #0]
 8007786:	f3bf 8f4f 	dsb	sy
 800778a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800778e:	bf00      	nop
 8007790:	3710      	adds	r7, #16
 8007792:	46bd      	mov	sp, r7
 8007794:	bd80      	pop	{r7, pc}
 8007796:	bf00      	nop
 8007798:	200057b8 	.word	0x200057b8
 800779c:	e000ed04 	.word	0xe000ed04

080077a0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80077a0:	b580      	push	{r7, lr}
 80077a2:	b08a      	sub	sp, #40	@ 0x28
 80077a4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80077a6:	2300      	movs	r3, #0
 80077a8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80077aa:	2300      	movs	r3, #0
 80077ac:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80077ae:	463a      	mov	r2, r7
 80077b0:	1d39      	adds	r1, r7, #4
 80077b2:	f107 0308 	add.w	r3, r7, #8
 80077b6:	4618      	mov	r0, r3
 80077b8:	f7f8 fff6 	bl	80007a8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80077bc:	6839      	ldr	r1, [r7, #0]
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	68ba      	ldr	r2, [r7, #8]
 80077c2:	9202      	str	r2, [sp, #8]
 80077c4:	9301      	str	r3, [sp, #4]
 80077c6:	2300      	movs	r3, #0
 80077c8:	9300      	str	r3, [sp, #0]
 80077ca:	2300      	movs	r3, #0
 80077cc:	460a      	mov	r2, r1
 80077ce:	4921      	ldr	r1, [pc, #132]	@ (8007854 <vTaskStartScheduler+0xb4>)
 80077d0:	4821      	ldr	r0, [pc, #132]	@ (8007858 <vTaskStartScheduler+0xb8>)
 80077d2:	f7ff fdff 	bl	80073d4 <xTaskCreateStatic>
 80077d6:	4603      	mov	r3, r0
 80077d8:	4a20      	ldr	r2, [pc, #128]	@ (800785c <vTaskStartScheduler+0xbc>)
 80077da:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80077dc:	4b1f      	ldr	r3, [pc, #124]	@ (800785c <vTaskStartScheduler+0xbc>)
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d002      	beq.n	80077ea <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80077e4:	2301      	movs	r3, #1
 80077e6:	617b      	str	r3, [r7, #20]
 80077e8:	e001      	b.n	80077ee <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80077ea:	2300      	movs	r3, #0
 80077ec:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80077ee:	697b      	ldr	r3, [r7, #20]
 80077f0:	2b01      	cmp	r3, #1
 80077f2:	d11b      	bne.n	800782c <vTaskStartScheduler+0x8c>
	__asm volatile
 80077f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077f8:	f383 8811 	msr	BASEPRI, r3
 80077fc:	f3bf 8f6f 	isb	sy
 8007800:	f3bf 8f4f 	dsb	sy
 8007804:	613b      	str	r3, [r7, #16]
}
 8007806:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007808:	4b15      	ldr	r3, [pc, #84]	@ (8007860 <vTaskStartScheduler+0xc0>)
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	334c      	adds	r3, #76	@ 0x4c
 800780e:	4a15      	ldr	r2, [pc, #84]	@ (8007864 <vTaskStartScheduler+0xc4>)
 8007810:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007812:	4b15      	ldr	r3, [pc, #84]	@ (8007868 <vTaskStartScheduler+0xc8>)
 8007814:	f04f 32ff 	mov.w	r2, #4294967295
 8007818:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800781a:	4b14      	ldr	r3, [pc, #80]	@ (800786c <vTaskStartScheduler+0xcc>)
 800781c:	2201      	movs	r2, #1
 800781e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007820:	4b13      	ldr	r3, [pc, #76]	@ (8007870 <vTaskStartScheduler+0xd0>)
 8007822:	2200      	movs	r2, #0
 8007824:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007826:	f000 feb3 	bl	8008590 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800782a:	e00f      	b.n	800784c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800782c:	697b      	ldr	r3, [r7, #20]
 800782e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007832:	d10b      	bne.n	800784c <vTaskStartScheduler+0xac>
	__asm volatile
 8007834:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007838:	f383 8811 	msr	BASEPRI, r3
 800783c:	f3bf 8f6f 	isb	sy
 8007840:	f3bf 8f4f 	dsb	sy
 8007844:	60fb      	str	r3, [r7, #12]
}
 8007846:	bf00      	nop
 8007848:	bf00      	nop
 800784a:	e7fd      	b.n	8007848 <vTaskStartScheduler+0xa8>
}
 800784c:	bf00      	nop
 800784e:	3718      	adds	r7, #24
 8007850:	46bd      	mov	sp, r7
 8007852:	bd80      	pop	{r7, pc}
 8007854:	08017b24 	.word	0x08017b24
 8007858:	08007e6d 	.word	0x08007e6d
 800785c:	200057b4 	.word	0x200057b4
 8007860:	20005690 	.word	0x20005690
 8007864:	2000003c 	.word	0x2000003c
 8007868:	200057b0 	.word	0x200057b0
 800786c:	2000579c 	.word	0x2000579c
 8007870:	20005794 	.word	0x20005794

08007874 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007874:	b480      	push	{r7}
 8007876:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007878:	4b04      	ldr	r3, [pc, #16]	@ (800788c <vTaskSuspendAll+0x18>)
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	3301      	adds	r3, #1
 800787e:	4a03      	ldr	r2, [pc, #12]	@ (800788c <vTaskSuspendAll+0x18>)
 8007880:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007882:	bf00      	nop
 8007884:	46bd      	mov	sp, r7
 8007886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788a:	4770      	bx	lr
 800788c:	200057b8 	.word	0x200057b8

08007890 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007890:	b580      	push	{r7, lr}
 8007892:	b084      	sub	sp, #16
 8007894:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007896:	2300      	movs	r3, #0
 8007898:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800789a:	2300      	movs	r3, #0
 800789c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800789e:	4b42      	ldr	r3, [pc, #264]	@ (80079a8 <xTaskResumeAll+0x118>)
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d10b      	bne.n	80078be <xTaskResumeAll+0x2e>
	__asm volatile
 80078a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078aa:	f383 8811 	msr	BASEPRI, r3
 80078ae:	f3bf 8f6f 	isb	sy
 80078b2:	f3bf 8f4f 	dsb	sy
 80078b6:	603b      	str	r3, [r7, #0]
}
 80078b8:	bf00      	nop
 80078ba:	bf00      	nop
 80078bc:	e7fd      	b.n	80078ba <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80078be:	f000 ff0b 	bl	80086d8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80078c2:	4b39      	ldr	r3, [pc, #228]	@ (80079a8 <xTaskResumeAll+0x118>)
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	3b01      	subs	r3, #1
 80078c8:	4a37      	ldr	r2, [pc, #220]	@ (80079a8 <xTaskResumeAll+0x118>)
 80078ca:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80078cc:	4b36      	ldr	r3, [pc, #216]	@ (80079a8 <xTaskResumeAll+0x118>)
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d161      	bne.n	8007998 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80078d4:	4b35      	ldr	r3, [pc, #212]	@ (80079ac <xTaskResumeAll+0x11c>)
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d05d      	beq.n	8007998 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80078dc:	e02e      	b.n	800793c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80078de:	4b34      	ldr	r3, [pc, #208]	@ (80079b0 <xTaskResumeAll+0x120>)
 80078e0:	68db      	ldr	r3, [r3, #12]
 80078e2:	68db      	ldr	r3, [r3, #12]
 80078e4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	3318      	adds	r3, #24
 80078ea:	4618      	mov	r0, r3
 80078ec:	f7fe fd61 	bl	80063b2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	3304      	adds	r3, #4
 80078f4:	4618      	mov	r0, r3
 80078f6:	f7fe fd5c 	bl	80063b2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078fe:	2201      	movs	r2, #1
 8007900:	409a      	lsls	r2, r3
 8007902:	4b2c      	ldr	r3, [pc, #176]	@ (80079b4 <xTaskResumeAll+0x124>)
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	4313      	orrs	r3, r2
 8007908:	4a2a      	ldr	r2, [pc, #168]	@ (80079b4 <xTaskResumeAll+0x124>)
 800790a:	6013      	str	r3, [r2, #0]
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007910:	4613      	mov	r3, r2
 8007912:	009b      	lsls	r3, r3, #2
 8007914:	4413      	add	r3, r2
 8007916:	009b      	lsls	r3, r3, #2
 8007918:	4a27      	ldr	r2, [pc, #156]	@ (80079b8 <xTaskResumeAll+0x128>)
 800791a:	441a      	add	r2, r3
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	3304      	adds	r3, #4
 8007920:	4619      	mov	r1, r3
 8007922:	4610      	mov	r0, r2
 8007924:	f7fe fce8 	bl	80062f8 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800792c:	4b23      	ldr	r3, [pc, #140]	@ (80079bc <xTaskResumeAll+0x12c>)
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007932:	429a      	cmp	r2, r3
 8007934:	d302      	bcc.n	800793c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007936:	4b22      	ldr	r3, [pc, #136]	@ (80079c0 <xTaskResumeAll+0x130>)
 8007938:	2201      	movs	r2, #1
 800793a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800793c:	4b1c      	ldr	r3, [pc, #112]	@ (80079b0 <xTaskResumeAll+0x120>)
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d1cc      	bne.n	80078de <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d001      	beq.n	800794e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800794a:	f000 fb4b 	bl	8007fe4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800794e:	4b1d      	ldr	r3, [pc, #116]	@ (80079c4 <xTaskResumeAll+0x134>)
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d010      	beq.n	800797c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800795a:	f000 f859 	bl	8007a10 <xTaskIncrementTick>
 800795e:	4603      	mov	r3, r0
 8007960:	2b00      	cmp	r3, #0
 8007962:	d002      	beq.n	800796a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007964:	4b16      	ldr	r3, [pc, #88]	@ (80079c0 <xTaskResumeAll+0x130>)
 8007966:	2201      	movs	r2, #1
 8007968:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	3b01      	subs	r3, #1
 800796e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2b00      	cmp	r3, #0
 8007974:	d1f1      	bne.n	800795a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8007976:	4b13      	ldr	r3, [pc, #76]	@ (80079c4 <xTaskResumeAll+0x134>)
 8007978:	2200      	movs	r2, #0
 800797a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800797c:	4b10      	ldr	r3, [pc, #64]	@ (80079c0 <xTaskResumeAll+0x130>)
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d009      	beq.n	8007998 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007984:	2301      	movs	r3, #1
 8007986:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007988:	4b0f      	ldr	r3, [pc, #60]	@ (80079c8 <xTaskResumeAll+0x138>)
 800798a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800798e:	601a      	str	r2, [r3, #0]
 8007990:	f3bf 8f4f 	dsb	sy
 8007994:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007998:	f000 fed0 	bl	800873c <vPortExitCritical>

	return xAlreadyYielded;
 800799c:	68bb      	ldr	r3, [r7, #8]
}
 800799e:	4618      	mov	r0, r3
 80079a0:	3710      	adds	r7, #16
 80079a2:	46bd      	mov	sp, r7
 80079a4:	bd80      	pop	{r7, pc}
 80079a6:	bf00      	nop
 80079a8:	200057b8 	.word	0x200057b8
 80079ac:	20005790 	.word	0x20005790
 80079b0:	20005750 	.word	0x20005750
 80079b4:	20005798 	.word	0x20005798
 80079b8:	20005694 	.word	0x20005694
 80079bc:	20005690 	.word	0x20005690
 80079c0:	200057a4 	.word	0x200057a4
 80079c4:	200057a0 	.word	0x200057a0
 80079c8:	e000ed04 	.word	0xe000ed04

080079cc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80079cc:	b480      	push	{r7}
 80079ce:	b083      	sub	sp, #12
 80079d0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80079d2:	4b05      	ldr	r3, [pc, #20]	@ (80079e8 <xTaskGetTickCount+0x1c>)
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80079d8:	687b      	ldr	r3, [r7, #4]
}
 80079da:	4618      	mov	r0, r3
 80079dc:	370c      	adds	r7, #12
 80079de:	46bd      	mov	sp, r7
 80079e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e4:	4770      	bx	lr
 80079e6:	bf00      	nop
 80079e8:	20005794 	.word	0x20005794

080079ec <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b082      	sub	sp, #8
 80079f0:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80079f2:	f000 ff51 	bl	8008898 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80079f6:	2300      	movs	r3, #0
 80079f8:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80079fa:	4b04      	ldr	r3, [pc, #16]	@ (8007a0c <xTaskGetTickCountFromISR+0x20>)
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007a00:	683b      	ldr	r3, [r7, #0]
}
 8007a02:	4618      	mov	r0, r3
 8007a04:	3708      	adds	r7, #8
 8007a06:	46bd      	mov	sp, r7
 8007a08:	bd80      	pop	{r7, pc}
 8007a0a:	bf00      	nop
 8007a0c:	20005794 	.word	0x20005794

08007a10 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b086      	sub	sp, #24
 8007a14:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007a16:	2300      	movs	r3, #0
 8007a18:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007a1a:	4b4f      	ldr	r3, [pc, #316]	@ (8007b58 <xTaskIncrementTick+0x148>)
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	f040 808f 	bne.w	8007b42 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007a24:	4b4d      	ldr	r3, [pc, #308]	@ (8007b5c <xTaskIncrementTick+0x14c>)
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	3301      	adds	r3, #1
 8007a2a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007a2c:	4a4b      	ldr	r2, [pc, #300]	@ (8007b5c <xTaskIncrementTick+0x14c>)
 8007a2e:	693b      	ldr	r3, [r7, #16]
 8007a30:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007a32:	693b      	ldr	r3, [r7, #16]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d121      	bne.n	8007a7c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8007a38:	4b49      	ldr	r3, [pc, #292]	@ (8007b60 <xTaskIncrementTick+0x150>)
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d00b      	beq.n	8007a5a <xTaskIncrementTick+0x4a>
	__asm volatile
 8007a42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a46:	f383 8811 	msr	BASEPRI, r3
 8007a4a:	f3bf 8f6f 	isb	sy
 8007a4e:	f3bf 8f4f 	dsb	sy
 8007a52:	603b      	str	r3, [r7, #0]
}
 8007a54:	bf00      	nop
 8007a56:	bf00      	nop
 8007a58:	e7fd      	b.n	8007a56 <xTaskIncrementTick+0x46>
 8007a5a:	4b41      	ldr	r3, [pc, #260]	@ (8007b60 <xTaskIncrementTick+0x150>)
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	60fb      	str	r3, [r7, #12]
 8007a60:	4b40      	ldr	r3, [pc, #256]	@ (8007b64 <xTaskIncrementTick+0x154>)
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	4a3e      	ldr	r2, [pc, #248]	@ (8007b60 <xTaskIncrementTick+0x150>)
 8007a66:	6013      	str	r3, [r2, #0]
 8007a68:	4a3e      	ldr	r2, [pc, #248]	@ (8007b64 <xTaskIncrementTick+0x154>)
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	6013      	str	r3, [r2, #0]
 8007a6e:	4b3e      	ldr	r3, [pc, #248]	@ (8007b68 <xTaskIncrementTick+0x158>)
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	3301      	adds	r3, #1
 8007a74:	4a3c      	ldr	r2, [pc, #240]	@ (8007b68 <xTaskIncrementTick+0x158>)
 8007a76:	6013      	str	r3, [r2, #0]
 8007a78:	f000 fab4 	bl	8007fe4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007a7c:	4b3b      	ldr	r3, [pc, #236]	@ (8007b6c <xTaskIncrementTick+0x15c>)
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	693a      	ldr	r2, [r7, #16]
 8007a82:	429a      	cmp	r2, r3
 8007a84:	d348      	bcc.n	8007b18 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007a86:	4b36      	ldr	r3, [pc, #216]	@ (8007b60 <xTaskIncrementTick+0x150>)
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d104      	bne.n	8007a9a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a90:	4b36      	ldr	r3, [pc, #216]	@ (8007b6c <xTaskIncrementTick+0x15c>)
 8007a92:	f04f 32ff 	mov.w	r2, #4294967295
 8007a96:	601a      	str	r2, [r3, #0]
					break;
 8007a98:	e03e      	b.n	8007b18 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a9a:	4b31      	ldr	r3, [pc, #196]	@ (8007b60 <xTaskIncrementTick+0x150>)
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	68db      	ldr	r3, [r3, #12]
 8007aa0:	68db      	ldr	r3, [r3, #12]
 8007aa2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007aa4:	68bb      	ldr	r3, [r7, #8]
 8007aa6:	685b      	ldr	r3, [r3, #4]
 8007aa8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007aaa:	693a      	ldr	r2, [r7, #16]
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	429a      	cmp	r2, r3
 8007ab0:	d203      	bcs.n	8007aba <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007ab2:	4a2e      	ldr	r2, [pc, #184]	@ (8007b6c <xTaskIncrementTick+0x15c>)
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007ab8:	e02e      	b.n	8007b18 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007aba:	68bb      	ldr	r3, [r7, #8]
 8007abc:	3304      	adds	r3, #4
 8007abe:	4618      	mov	r0, r3
 8007ac0:	f7fe fc77 	bl	80063b2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007ac4:	68bb      	ldr	r3, [r7, #8]
 8007ac6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d004      	beq.n	8007ad6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007acc:	68bb      	ldr	r3, [r7, #8]
 8007ace:	3318      	adds	r3, #24
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	f7fe fc6e 	bl	80063b2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007ad6:	68bb      	ldr	r3, [r7, #8]
 8007ad8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ada:	2201      	movs	r2, #1
 8007adc:	409a      	lsls	r2, r3
 8007ade:	4b24      	ldr	r3, [pc, #144]	@ (8007b70 <xTaskIncrementTick+0x160>)
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	4313      	orrs	r3, r2
 8007ae4:	4a22      	ldr	r2, [pc, #136]	@ (8007b70 <xTaskIncrementTick+0x160>)
 8007ae6:	6013      	str	r3, [r2, #0]
 8007ae8:	68bb      	ldr	r3, [r7, #8]
 8007aea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007aec:	4613      	mov	r3, r2
 8007aee:	009b      	lsls	r3, r3, #2
 8007af0:	4413      	add	r3, r2
 8007af2:	009b      	lsls	r3, r3, #2
 8007af4:	4a1f      	ldr	r2, [pc, #124]	@ (8007b74 <xTaskIncrementTick+0x164>)
 8007af6:	441a      	add	r2, r3
 8007af8:	68bb      	ldr	r3, [r7, #8]
 8007afa:	3304      	adds	r3, #4
 8007afc:	4619      	mov	r1, r3
 8007afe:	4610      	mov	r0, r2
 8007b00:	f7fe fbfa 	bl	80062f8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007b04:	68bb      	ldr	r3, [r7, #8]
 8007b06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b08:	4b1b      	ldr	r3, [pc, #108]	@ (8007b78 <xTaskIncrementTick+0x168>)
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b0e:	429a      	cmp	r2, r3
 8007b10:	d3b9      	bcc.n	8007a86 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8007b12:	2301      	movs	r3, #1
 8007b14:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007b16:	e7b6      	b.n	8007a86 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007b18:	4b17      	ldr	r3, [pc, #92]	@ (8007b78 <xTaskIncrementTick+0x168>)
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b1e:	4915      	ldr	r1, [pc, #84]	@ (8007b74 <xTaskIncrementTick+0x164>)
 8007b20:	4613      	mov	r3, r2
 8007b22:	009b      	lsls	r3, r3, #2
 8007b24:	4413      	add	r3, r2
 8007b26:	009b      	lsls	r3, r3, #2
 8007b28:	440b      	add	r3, r1
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	2b01      	cmp	r3, #1
 8007b2e:	d901      	bls.n	8007b34 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8007b30:	2301      	movs	r3, #1
 8007b32:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007b34:	4b11      	ldr	r3, [pc, #68]	@ (8007b7c <xTaskIncrementTick+0x16c>)
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d007      	beq.n	8007b4c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8007b3c:	2301      	movs	r3, #1
 8007b3e:	617b      	str	r3, [r7, #20]
 8007b40:	e004      	b.n	8007b4c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007b42:	4b0f      	ldr	r3, [pc, #60]	@ (8007b80 <xTaskIncrementTick+0x170>)
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	3301      	adds	r3, #1
 8007b48:	4a0d      	ldr	r2, [pc, #52]	@ (8007b80 <xTaskIncrementTick+0x170>)
 8007b4a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007b4c:	697b      	ldr	r3, [r7, #20]
}
 8007b4e:	4618      	mov	r0, r3
 8007b50:	3718      	adds	r7, #24
 8007b52:	46bd      	mov	sp, r7
 8007b54:	bd80      	pop	{r7, pc}
 8007b56:	bf00      	nop
 8007b58:	200057b8 	.word	0x200057b8
 8007b5c:	20005794 	.word	0x20005794
 8007b60:	20005748 	.word	0x20005748
 8007b64:	2000574c 	.word	0x2000574c
 8007b68:	200057a8 	.word	0x200057a8
 8007b6c:	200057b0 	.word	0x200057b0
 8007b70:	20005798 	.word	0x20005798
 8007b74:	20005694 	.word	0x20005694
 8007b78:	20005690 	.word	0x20005690
 8007b7c:	200057a4 	.word	0x200057a4
 8007b80:	200057a0 	.word	0x200057a0

08007b84 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007b84:	b480      	push	{r7}
 8007b86:	b087      	sub	sp, #28
 8007b88:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007b8a:	4b2a      	ldr	r3, [pc, #168]	@ (8007c34 <vTaskSwitchContext+0xb0>)
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d003      	beq.n	8007b9a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007b92:	4b29      	ldr	r3, [pc, #164]	@ (8007c38 <vTaskSwitchContext+0xb4>)
 8007b94:	2201      	movs	r2, #1
 8007b96:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007b98:	e045      	b.n	8007c26 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8007b9a:	4b27      	ldr	r3, [pc, #156]	@ (8007c38 <vTaskSwitchContext+0xb4>)
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ba0:	4b26      	ldr	r3, [pc, #152]	@ (8007c3c <vTaskSwitchContext+0xb8>)
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	fab3 f383 	clz	r3, r3
 8007bac:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007bae:	7afb      	ldrb	r3, [r7, #11]
 8007bb0:	f1c3 031f 	rsb	r3, r3, #31
 8007bb4:	617b      	str	r3, [r7, #20]
 8007bb6:	4922      	ldr	r1, [pc, #136]	@ (8007c40 <vTaskSwitchContext+0xbc>)
 8007bb8:	697a      	ldr	r2, [r7, #20]
 8007bba:	4613      	mov	r3, r2
 8007bbc:	009b      	lsls	r3, r3, #2
 8007bbe:	4413      	add	r3, r2
 8007bc0:	009b      	lsls	r3, r3, #2
 8007bc2:	440b      	add	r3, r1
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d10b      	bne.n	8007be2 <vTaskSwitchContext+0x5e>
	__asm volatile
 8007bca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bce:	f383 8811 	msr	BASEPRI, r3
 8007bd2:	f3bf 8f6f 	isb	sy
 8007bd6:	f3bf 8f4f 	dsb	sy
 8007bda:	607b      	str	r3, [r7, #4]
}
 8007bdc:	bf00      	nop
 8007bde:	bf00      	nop
 8007be0:	e7fd      	b.n	8007bde <vTaskSwitchContext+0x5a>
 8007be2:	697a      	ldr	r2, [r7, #20]
 8007be4:	4613      	mov	r3, r2
 8007be6:	009b      	lsls	r3, r3, #2
 8007be8:	4413      	add	r3, r2
 8007bea:	009b      	lsls	r3, r3, #2
 8007bec:	4a14      	ldr	r2, [pc, #80]	@ (8007c40 <vTaskSwitchContext+0xbc>)
 8007bee:	4413      	add	r3, r2
 8007bf0:	613b      	str	r3, [r7, #16]
 8007bf2:	693b      	ldr	r3, [r7, #16]
 8007bf4:	685b      	ldr	r3, [r3, #4]
 8007bf6:	685a      	ldr	r2, [r3, #4]
 8007bf8:	693b      	ldr	r3, [r7, #16]
 8007bfa:	605a      	str	r2, [r3, #4]
 8007bfc:	693b      	ldr	r3, [r7, #16]
 8007bfe:	685a      	ldr	r2, [r3, #4]
 8007c00:	693b      	ldr	r3, [r7, #16]
 8007c02:	3308      	adds	r3, #8
 8007c04:	429a      	cmp	r2, r3
 8007c06:	d104      	bne.n	8007c12 <vTaskSwitchContext+0x8e>
 8007c08:	693b      	ldr	r3, [r7, #16]
 8007c0a:	685b      	ldr	r3, [r3, #4]
 8007c0c:	685a      	ldr	r2, [r3, #4]
 8007c0e:	693b      	ldr	r3, [r7, #16]
 8007c10:	605a      	str	r2, [r3, #4]
 8007c12:	693b      	ldr	r3, [r7, #16]
 8007c14:	685b      	ldr	r3, [r3, #4]
 8007c16:	68db      	ldr	r3, [r3, #12]
 8007c18:	4a0a      	ldr	r2, [pc, #40]	@ (8007c44 <vTaskSwitchContext+0xc0>)
 8007c1a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007c1c:	4b09      	ldr	r3, [pc, #36]	@ (8007c44 <vTaskSwitchContext+0xc0>)
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	334c      	adds	r3, #76	@ 0x4c
 8007c22:	4a09      	ldr	r2, [pc, #36]	@ (8007c48 <vTaskSwitchContext+0xc4>)
 8007c24:	6013      	str	r3, [r2, #0]
}
 8007c26:	bf00      	nop
 8007c28:	371c      	adds	r7, #28
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c30:	4770      	bx	lr
 8007c32:	bf00      	nop
 8007c34:	200057b8 	.word	0x200057b8
 8007c38:	200057a4 	.word	0x200057a4
 8007c3c:	20005798 	.word	0x20005798
 8007c40:	20005694 	.word	0x20005694
 8007c44:	20005690 	.word	0x20005690
 8007c48:	2000003c 	.word	0x2000003c

08007c4c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	b084      	sub	sp, #16
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
 8007c54:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d10b      	bne.n	8007c74 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8007c5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c60:	f383 8811 	msr	BASEPRI, r3
 8007c64:	f3bf 8f6f 	isb	sy
 8007c68:	f3bf 8f4f 	dsb	sy
 8007c6c:	60fb      	str	r3, [r7, #12]
}
 8007c6e:	bf00      	nop
 8007c70:	bf00      	nop
 8007c72:	e7fd      	b.n	8007c70 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007c74:	4b07      	ldr	r3, [pc, #28]	@ (8007c94 <vTaskPlaceOnEventList+0x48>)
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	3318      	adds	r3, #24
 8007c7a:	4619      	mov	r1, r3
 8007c7c:	6878      	ldr	r0, [r7, #4]
 8007c7e:	f7fe fb5f 	bl	8006340 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007c82:	2101      	movs	r1, #1
 8007c84:	6838      	ldr	r0, [r7, #0]
 8007c86:	f000 fb8d 	bl	80083a4 <prvAddCurrentTaskToDelayedList>
}
 8007c8a:	bf00      	nop
 8007c8c:	3710      	adds	r7, #16
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	bd80      	pop	{r7, pc}
 8007c92:	bf00      	nop
 8007c94:	20005690 	.word	0x20005690

08007c98 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b086      	sub	sp, #24
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	68db      	ldr	r3, [r3, #12]
 8007ca4:	68db      	ldr	r3, [r3, #12]
 8007ca6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007ca8:	693b      	ldr	r3, [r7, #16]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d10b      	bne.n	8007cc6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8007cae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cb2:	f383 8811 	msr	BASEPRI, r3
 8007cb6:	f3bf 8f6f 	isb	sy
 8007cba:	f3bf 8f4f 	dsb	sy
 8007cbe:	60fb      	str	r3, [r7, #12]
}
 8007cc0:	bf00      	nop
 8007cc2:	bf00      	nop
 8007cc4:	e7fd      	b.n	8007cc2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007cc6:	693b      	ldr	r3, [r7, #16]
 8007cc8:	3318      	adds	r3, #24
 8007cca:	4618      	mov	r0, r3
 8007ccc:	f7fe fb71 	bl	80063b2 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007cd0:	4b1d      	ldr	r3, [pc, #116]	@ (8007d48 <xTaskRemoveFromEventList+0xb0>)
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d11c      	bne.n	8007d12 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007cd8:	693b      	ldr	r3, [r7, #16]
 8007cda:	3304      	adds	r3, #4
 8007cdc:	4618      	mov	r0, r3
 8007cde:	f7fe fb68 	bl	80063b2 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007ce2:	693b      	ldr	r3, [r7, #16]
 8007ce4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ce6:	2201      	movs	r2, #1
 8007ce8:	409a      	lsls	r2, r3
 8007cea:	4b18      	ldr	r3, [pc, #96]	@ (8007d4c <xTaskRemoveFromEventList+0xb4>)
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	4313      	orrs	r3, r2
 8007cf0:	4a16      	ldr	r2, [pc, #88]	@ (8007d4c <xTaskRemoveFromEventList+0xb4>)
 8007cf2:	6013      	str	r3, [r2, #0]
 8007cf4:	693b      	ldr	r3, [r7, #16]
 8007cf6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007cf8:	4613      	mov	r3, r2
 8007cfa:	009b      	lsls	r3, r3, #2
 8007cfc:	4413      	add	r3, r2
 8007cfe:	009b      	lsls	r3, r3, #2
 8007d00:	4a13      	ldr	r2, [pc, #76]	@ (8007d50 <xTaskRemoveFromEventList+0xb8>)
 8007d02:	441a      	add	r2, r3
 8007d04:	693b      	ldr	r3, [r7, #16]
 8007d06:	3304      	adds	r3, #4
 8007d08:	4619      	mov	r1, r3
 8007d0a:	4610      	mov	r0, r2
 8007d0c:	f7fe faf4 	bl	80062f8 <vListInsertEnd>
 8007d10:	e005      	b.n	8007d1e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007d12:	693b      	ldr	r3, [r7, #16]
 8007d14:	3318      	adds	r3, #24
 8007d16:	4619      	mov	r1, r3
 8007d18:	480e      	ldr	r0, [pc, #56]	@ (8007d54 <xTaskRemoveFromEventList+0xbc>)
 8007d1a:	f7fe faed 	bl	80062f8 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007d1e:	693b      	ldr	r3, [r7, #16]
 8007d20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d22:	4b0d      	ldr	r3, [pc, #52]	@ (8007d58 <xTaskRemoveFromEventList+0xc0>)
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d28:	429a      	cmp	r2, r3
 8007d2a:	d905      	bls.n	8007d38 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007d2c:	2301      	movs	r3, #1
 8007d2e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007d30:	4b0a      	ldr	r3, [pc, #40]	@ (8007d5c <xTaskRemoveFromEventList+0xc4>)
 8007d32:	2201      	movs	r2, #1
 8007d34:	601a      	str	r2, [r3, #0]
 8007d36:	e001      	b.n	8007d3c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007d38:	2300      	movs	r3, #0
 8007d3a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007d3c:	697b      	ldr	r3, [r7, #20]
}
 8007d3e:	4618      	mov	r0, r3
 8007d40:	3718      	adds	r7, #24
 8007d42:	46bd      	mov	sp, r7
 8007d44:	bd80      	pop	{r7, pc}
 8007d46:	bf00      	nop
 8007d48:	200057b8 	.word	0x200057b8
 8007d4c:	20005798 	.word	0x20005798
 8007d50:	20005694 	.word	0x20005694
 8007d54:	20005750 	.word	0x20005750
 8007d58:	20005690 	.word	0x20005690
 8007d5c:	200057a4 	.word	0x200057a4

08007d60 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007d60:	b480      	push	{r7}
 8007d62:	b083      	sub	sp, #12
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007d68:	4b06      	ldr	r3, [pc, #24]	@ (8007d84 <vTaskInternalSetTimeOutState+0x24>)
 8007d6a:	681a      	ldr	r2, [r3, #0]
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007d70:	4b05      	ldr	r3, [pc, #20]	@ (8007d88 <vTaskInternalSetTimeOutState+0x28>)
 8007d72:	681a      	ldr	r2, [r3, #0]
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	605a      	str	r2, [r3, #4]
}
 8007d78:	bf00      	nop
 8007d7a:	370c      	adds	r7, #12
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d82:	4770      	bx	lr
 8007d84:	200057a8 	.word	0x200057a8
 8007d88:	20005794 	.word	0x20005794

08007d8c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	b088      	sub	sp, #32
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
 8007d94:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d10b      	bne.n	8007db4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8007d9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007da0:	f383 8811 	msr	BASEPRI, r3
 8007da4:	f3bf 8f6f 	isb	sy
 8007da8:	f3bf 8f4f 	dsb	sy
 8007dac:	613b      	str	r3, [r7, #16]
}
 8007dae:	bf00      	nop
 8007db0:	bf00      	nop
 8007db2:	e7fd      	b.n	8007db0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007db4:	683b      	ldr	r3, [r7, #0]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d10b      	bne.n	8007dd2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8007dba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dbe:	f383 8811 	msr	BASEPRI, r3
 8007dc2:	f3bf 8f6f 	isb	sy
 8007dc6:	f3bf 8f4f 	dsb	sy
 8007dca:	60fb      	str	r3, [r7, #12]
}
 8007dcc:	bf00      	nop
 8007dce:	bf00      	nop
 8007dd0:	e7fd      	b.n	8007dce <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8007dd2:	f000 fc81 	bl	80086d8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007dd6:	4b1d      	ldr	r3, [pc, #116]	@ (8007e4c <xTaskCheckForTimeOut+0xc0>)
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	685b      	ldr	r3, [r3, #4]
 8007de0:	69ba      	ldr	r2, [r7, #24]
 8007de2:	1ad3      	subs	r3, r2, r3
 8007de4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007de6:	683b      	ldr	r3, [r7, #0]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dee:	d102      	bne.n	8007df6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007df0:	2300      	movs	r3, #0
 8007df2:	61fb      	str	r3, [r7, #28]
 8007df4:	e023      	b.n	8007e3e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681a      	ldr	r2, [r3, #0]
 8007dfa:	4b15      	ldr	r3, [pc, #84]	@ (8007e50 <xTaskCheckForTimeOut+0xc4>)
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	429a      	cmp	r2, r3
 8007e00:	d007      	beq.n	8007e12 <xTaskCheckForTimeOut+0x86>
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	685b      	ldr	r3, [r3, #4]
 8007e06:	69ba      	ldr	r2, [r7, #24]
 8007e08:	429a      	cmp	r2, r3
 8007e0a:	d302      	bcc.n	8007e12 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007e0c:	2301      	movs	r3, #1
 8007e0e:	61fb      	str	r3, [r7, #28]
 8007e10:	e015      	b.n	8007e3e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007e12:	683b      	ldr	r3, [r7, #0]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	697a      	ldr	r2, [r7, #20]
 8007e18:	429a      	cmp	r2, r3
 8007e1a:	d20b      	bcs.n	8007e34 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	681a      	ldr	r2, [r3, #0]
 8007e20:	697b      	ldr	r3, [r7, #20]
 8007e22:	1ad2      	subs	r2, r2, r3
 8007e24:	683b      	ldr	r3, [r7, #0]
 8007e26:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007e28:	6878      	ldr	r0, [r7, #4]
 8007e2a:	f7ff ff99 	bl	8007d60 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007e2e:	2300      	movs	r3, #0
 8007e30:	61fb      	str	r3, [r7, #28]
 8007e32:	e004      	b.n	8007e3e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8007e34:	683b      	ldr	r3, [r7, #0]
 8007e36:	2200      	movs	r2, #0
 8007e38:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007e3a:	2301      	movs	r3, #1
 8007e3c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007e3e:	f000 fc7d 	bl	800873c <vPortExitCritical>

	return xReturn;
 8007e42:	69fb      	ldr	r3, [r7, #28]
}
 8007e44:	4618      	mov	r0, r3
 8007e46:	3720      	adds	r7, #32
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	bd80      	pop	{r7, pc}
 8007e4c:	20005794 	.word	0x20005794
 8007e50:	200057a8 	.word	0x200057a8

08007e54 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007e54:	b480      	push	{r7}
 8007e56:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007e58:	4b03      	ldr	r3, [pc, #12]	@ (8007e68 <vTaskMissedYield+0x14>)
 8007e5a:	2201      	movs	r2, #1
 8007e5c:	601a      	str	r2, [r3, #0]
}
 8007e5e:	bf00      	nop
 8007e60:	46bd      	mov	sp, r7
 8007e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e66:	4770      	bx	lr
 8007e68:	200057a4 	.word	0x200057a4

08007e6c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	b082      	sub	sp, #8
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007e74:	f000 f852 	bl	8007f1c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007e78:	4b06      	ldr	r3, [pc, #24]	@ (8007e94 <prvIdleTask+0x28>)
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	2b01      	cmp	r3, #1
 8007e7e:	d9f9      	bls.n	8007e74 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007e80:	4b05      	ldr	r3, [pc, #20]	@ (8007e98 <prvIdleTask+0x2c>)
 8007e82:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007e86:	601a      	str	r2, [r3, #0]
 8007e88:	f3bf 8f4f 	dsb	sy
 8007e8c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007e90:	e7f0      	b.n	8007e74 <prvIdleTask+0x8>
 8007e92:	bf00      	nop
 8007e94:	20005694 	.word	0x20005694
 8007e98:	e000ed04 	.word	0xe000ed04

08007e9c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	b082      	sub	sp, #8
 8007ea0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	607b      	str	r3, [r7, #4]
 8007ea6:	e00c      	b.n	8007ec2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007ea8:	687a      	ldr	r2, [r7, #4]
 8007eaa:	4613      	mov	r3, r2
 8007eac:	009b      	lsls	r3, r3, #2
 8007eae:	4413      	add	r3, r2
 8007eb0:	009b      	lsls	r3, r3, #2
 8007eb2:	4a12      	ldr	r2, [pc, #72]	@ (8007efc <prvInitialiseTaskLists+0x60>)
 8007eb4:	4413      	add	r3, r2
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	f7fe f9f1 	bl	800629e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	3301      	adds	r3, #1
 8007ec0:	607b      	str	r3, [r7, #4]
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	2b06      	cmp	r3, #6
 8007ec6:	d9ef      	bls.n	8007ea8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007ec8:	480d      	ldr	r0, [pc, #52]	@ (8007f00 <prvInitialiseTaskLists+0x64>)
 8007eca:	f7fe f9e8 	bl	800629e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007ece:	480d      	ldr	r0, [pc, #52]	@ (8007f04 <prvInitialiseTaskLists+0x68>)
 8007ed0:	f7fe f9e5 	bl	800629e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007ed4:	480c      	ldr	r0, [pc, #48]	@ (8007f08 <prvInitialiseTaskLists+0x6c>)
 8007ed6:	f7fe f9e2 	bl	800629e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007eda:	480c      	ldr	r0, [pc, #48]	@ (8007f0c <prvInitialiseTaskLists+0x70>)
 8007edc:	f7fe f9df 	bl	800629e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007ee0:	480b      	ldr	r0, [pc, #44]	@ (8007f10 <prvInitialiseTaskLists+0x74>)
 8007ee2:	f7fe f9dc 	bl	800629e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007ee6:	4b0b      	ldr	r3, [pc, #44]	@ (8007f14 <prvInitialiseTaskLists+0x78>)
 8007ee8:	4a05      	ldr	r2, [pc, #20]	@ (8007f00 <prvInitialiseTaskLists+0x64>)
 8007eea:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007eec:	4b0a      	ldr	r3, [pc, #40]	@ (8007f18 <prvInitialiseTaskLists+0x7c>)
 8007eee:	4a05      	ldr	r2, [pc, #20]	@ (8007f04 <prvInitialiseTaskLists+0x68>)
 8007ef0:	601a      	str	r2, [r3, #0]
}
 8007ef2:	bf00      	nop
 8007ef4:	3708      	adds	r7, #8
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	bd80      	pop	{r7, pc}
 8007efa:	bf00      	nop
 8007efc:	20005694 	.word	0x20005694
 8007f00:	20005720 	.word	0x20005720
 8007f04:	20005734 	.word	0x20005734
 8007f08:	20005750 	.word	0x20005750
 8007f0c:	20005764 	.word	0x20005764
 8007f10:	2000577c 	.word	0x2000577c
 8007f14:	20005748 	.word	0x20005748
 8007f18:	2000574c 	.word	0x2000574c

08007f1c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007f1c:	b580      	push	{r7, lr}
 8007f1e:	b082      	sub	sp, #8
 8007f20:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007f22:	e019      	b.n	8007f58 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007f24:	f000 fbd8 	bl	80086d8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f28:	4b10      	ldr	r3, [pc, #64]	@ (8007f6c <prvCheckTasksWaitingTermination+0x50>)
 8007f2a:	68db      	ldr	r3, [r3, #12]
 8007f2c:	68db      	ldr	r3, [r3, #12]
 8007f2e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	3304      	adds	r3, #4
 8007f34:	4618      	mov	r0, r3
 8007f36:	f7fe fa3c 	bl	80063b2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007f3a:	4b0d      	ldr	r3, [pc, #52]	@ (8007f70 <prvCheckTasksWaitingTermination+0x54>)
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	3b01      	subs	r3, #1
 8007f40:	4a0b      	ldr	r2, [pc, #44]	@ (8007f70 <prvCheckTasksWaitingTermination+0x54>)
 8007f42:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007f44:	4b0b      	ldr	r3, [pc, #44]	@ (8007f74 <prvCheckTasksWaitingTermination+0x58>)
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	3b01      	subs	r3, #1
 8007f4a:	4a0a      	ldr	r2, [pc, #40]	@ (8007f74 <prvCheckTasksWaitingTermination+0x58>)
 8007f4c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007f4e:	f000 fbf5 	bl	800873c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007f52:	6878      	ldr	r0, [r7, #4]
 8007f54:	f000 f810 	bl	8007f78 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007f58:	4b06      	ldr	r3, [pc, #24]	@ (8007f74 <prvCheckTasksWaitingTermination+0x58>)
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d1e1      	bne.n	8007f24 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007f60:	bf00      	nop
 8007f62:	bf00      	nop
 8007f64:	3708      	adds	r7, #8
 8007f66:	46bd      	mov	sp, r7
 8007f68:	bd80      	pop	{r7, pc}
 8007f6a:	bf00      	nop
 8007f6c:	20005764 	.word	0x20005764
 8007f70:	20005790 	.word	0x20005790
 8007f74:	20005778 	.word	0x20005778

08007f78 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b084      	sub	sp, #16
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	334c      	adds	r3, #76	@ 0x4c
 8007f84:	4618      	mov	r0, r3
 8007f86:	f00e fbc3 	bl	8016710 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d108      	bne.n	8007fa6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f98:	4618      	mov	r0, r3
 8007f9a:	f000 fd8d 	bl	8008ab8 <vPortFree>
				vPortFree( pxTCB );
 8007f9e:	6878      	ldr	r0, [r7, #4]
 8007fa0:	f000 fd8a 	bl	8008ab8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007fa4:	e019      	b.n	8007fda <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8007fac:	2b01      	cmp	r3, #1
 8007fae:	d103      	bne.n	8007fb8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007fb0:	6878      	ldr	r0, [r7, #4]
 8007fb2:	f000 fd81 	bl	8008ab8 <vPortFree>
	}
 8007fb6:	e010      	b.n	8007fda <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8007fbe:	2b02      	cmp	r3, #2
 8007fc0:	d00b      	beq.n	8007fda <prvDeleteTCB+0x62>
	__asm volatile
 8007fc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fc6:	f383 8811 	msr	BASEPRI, r3
 8007fca:	f3bf 8f6f 	isb	sy
 8007fce:	f3bf 8f4f 	dsb	sy
 8007fd2:	60fb      	str	r3, [r7, #12]
}
 8007fd4:	bf00      	nop
 8007fd6:	bf00      	nop
 8007fd8:	e7fd      	b.n	8007fd6 <prvDeleteTCB+0x5e>
	}
 8007fda:	bf00      	nop
 8007fdc:	3710      	adds	r7, #16
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	bd80      	pop	{r7, pc}
	...

08007fe4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007fe4:	b480      	push	{r7}
 8007fe6:	b083      	sub	sp, #12
 8007fe8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007fea:	4b0c      	ldr	r3, [pc, #48]	@ (800801c <prvResetNextTaskUnblockTime+0x38>)
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d104      	bne.n	8007ffe <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007ff4:	4b0a      	ldr	r3, [pc, #40]	@ (8008020 <prvResetNextTaskUnblockTime+0x3c>)
 8007ff6:	f04f 32ff 	mov.w	r2, #4294967295
 8007ffa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007ffc:	e008      	b.n	8008010 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ffe:	4b07      	ldr	r3, [pc, #28]	@ (800801c <prvResetNextTaskUnblockTime+0x38>)
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	68db      	ldr	r3, [r3, #12]
 8008004:	68db      	ldr	r3, [r3, #12]
 8008006:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	685b      	ldr	r3, [r3, #4]
 800800c:	4a04      	ldr	r2, [pc, #16]	@ (8008020 <prvResetNextTaskUnblockTime+0x3c>)
 800800e:	6013      	str	r3, [r2, #0]
}
 8008010:	bf00      	nop
 8008012:	370c      	adds	r7, #12
 8008014:	46bd      	mov	sp, r7
 8008016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801a:	4770      	bx	lr
 800801c:	20005748 	.word	0x20005748
 8008020:	200057b0 	.word	0x200057b0

08008024 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008024:	b480      	push	{r7}
 8008026:	b083      	sub	sp, #12
 8008028:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800802a:	4b0b      	ldr	r3, [pc, #44]	@ (8008058 <xTaskGetSchedulerState+0x34>)
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	2b00      	cmp	r3, #0
 8008030:	d102      	bne.n	8008038 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008032:	2301      	movs	r3, #1
 8008034:	607b      	str	r3, [r7, #4]
 8008036:	e008      	b.n	800804a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008038:	4b08      	ldr	r3, [pc, #32]	@ (800805c <xTaskGetSchedulerState+0x38>)
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	2b00      	cmp	r3, #0
 800803e:	d102      	bne.n	8008046 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008040:	2302      	movs	r3, #2
 8008042:	607b      	str	r3, [r7, #4]
 8008044:	e001      	b.n	800804a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008046:	2300      	movs	r3, #0
 8008048:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800804a:	687b      	ldr	r3, [r7, #4]
	}
 800804c:	4618      	mov	r0, r3
 800804e:	370c      	adds	r7, #12
 8008050:	46bd      	mov	sp, r7
 8008052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008056:	4770      	bx	lr
 8008058:	2000579c 	.word	0x2000579c
 800805c:	200057b8 	.word	0x200057b8

08008060 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008060:	b580      	push	{r7, lr}
 8008062:	b084      	sub	sp, #16
 8008064:	af00      	add	r7, sp, #0
 8008066:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800806c:	2300      	movs	r3, #0
 800806e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	2b00      	cmp	r3, #0
 8008074:	d05e      	beq.n	8008134 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008076:	68bb      	ldr	r3, [r7, #8]
 8008078:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800807a:	4b31      	ldr	r3, [pc, #196]	@ (8008140 <xTaskPriorityInherit+0xe0>)
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008080:	429a      	cmp	r2, r3
 8008082:	d24e      	bcs.n	8008122 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008084:	68bb      	ldr	r3, [r7, #8]
 8008086:	699b      	ldr	r3, [r3, #24]
 8008088:	2b00      	cmp	r3, #0
 800808a:	db06      	blt.n	800809a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800808c:	4b2c      	ldr	r3, [pc, #176]	@ (8008140 <xTaskPriorityInherit+0xe0>)
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008092:	f1c3 0207 	rsb	r2, r3, #7
 8008096:	68bb      	ldr	r3, [r7, #8]
 8008098:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800809a:	68bb      	ldr	r3, [r7, #8]
 800809c:	6959      	ldr	r1, [r3, #20]
 800809e:	68bb      	ldr	r3, [r7, #8]
 80080a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80080a2:	4613      	mov	r3, r2
 80080a4:	009b      	lsls	r3, r3, #2
 80080a6:	4413      	add	r3, r2
 80080a8:	009b      	lsls	r3, r3, #2
 80080aa:	4a26      	ldr	r2, [pc, #152]	@ (8008144 <xTaskPriorityInherit+0xe4>)
 80080ac:	4413      	add	r3, r2
 80080ae:	4299      	cmp	r1, r3
 80080b0:	d12f      	bne.n	8008112 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80080b2:	68bb      	ldr	r3, [r7, #8]
 80080b4:	3304      	adds	r3, #4
 80080b6:	4618      	mov	r0, r3
 80080b8:	f7fe f97b 	bl	80063b2 <uxListRemove>
 80080bc:	4603      	mov	r3, r0
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d10a      	bne.n	80080d8 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 80080c2:	68bb      	ldr	r3, [r7, #8]
 80080c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080c6:	2201      	movs	r2, #1
 80080c8:	fa02 f303 	lsl.w	r3, r2, r3
 80080cc:	43da      	mvns	r2, r3
 80080ce:	4b1e      	ldr	r3, [pc, #120]	@ (8008148 <xTaskPriorityInherit+0xe8>)
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	4013      	ands	r3, r2
 80080d4:	4a1c      	ldr	r2, [pc, #112]	@ (8008148 <xTaskPriorityInherit+0xe8>)
 80080d6:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80080d8:	4b19      	ldr	r3, [pc, #100]	@ (8008140 <xTaskPriorityInherit+0xe0>)
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80080de:	68bb      	ldr	r3, [r7, #8]
 80080e0:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80080e2:	68bb      	ldr	r3, [r7, #8]
 80080e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080e6:	2201      	movs	r2, #1
 80080e8:	409a      	lsls	r2, r3
 80080ea:	4b17      	ldr	r3, [pc, #92]	@ (8008148 <xTaskPriorityInherit+0xe8>)
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	4313      	orrs	r3, r2
 80080f0:	4a15      	ldr	r2, [pc, #84]	@ (8008148 <xTaskPriorityInherit+0xe8>)
 80080f2:	6013      	str	r3, [r2, #0]
 80080f4:	68bb      	ldr	r3, [r7, #8]
 80080f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80080f8:	4613      	mov	r3, r2
 80080fa:	009b      	lsls	r3, r3, #2
 80080fc:	4413      	add	r3, r2
 80080fe:	009b      	lsls	r3, r3, #2
 8008100:	4a10      	ldr	r2, [pc, #64]	@ (8008144 <xTaskPriorityInherit+0xe4>)
 8008102:	441a      	add	r2, r3
 8008104:	68bb      	ldr	r3, [r7, #8]
 8008106:	3304      	adds	r3, #4
 8008108:	4619      	mov	r1, r3
 800810a:	4610      	mov	r0, r2
 800810c:	f7fe f8f4 	bl	80062f8 <vListInsertEnd>
 8008110:	e004      	b.n	800811c <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008112:	4b0b      	ldr	r3, [pc, #44]	@ (8008140 <xTaskPriorityInherit+0xe0>)
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008118:	68bb      	ldr	r3, [r7, #8]
 800811a:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800811c:	2301      	movs	r3, #1
 800811e:	60fb      	str	r3, [r7, #12]
 8008120:	e008      	b.n	8008134 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008122:	68bb      	ldr	r3, [r7, #8]
 8008124:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008126:	4b06      	ldr	r3, [pc, #24]	@ (8008140 <xTaskPriorityInherit+0xe0>)
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800812c:	429a      	cmp	r2, r3
 800812e:	d201      	bcs.n	8008134 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8008130:	2301      	movs	r3, #1
 8008132:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008134:	68fb      	ldr	r3, [r7, #12]
	}
 8008136:	4618      	mov	r0, r3
 8008138:	3710      	adds	r7, #16
 800813a:	46bd      	mov	sp, r7
 800813c:	bd80      	pop	{r7, pc}
 800813e:	bf00      	nop
 8008140:	20005690 	.word	0x20005690
 8008144:	20005694 	.word	0x20005694
 8008148:	20005798 	.word	0x20005798

0800814c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800814c:	b580      	push	{r7, lr}
 800814e:	b086      	sub	sp, #24
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008158:	2300      	movs	r3, #0
 800815a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	2b00      	cmp	r3, #0
 8008160:	d070      	beq.n	8008244 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008162:	4b3b      	ldr	r3, [pc, #236]	@ (8008250 <xTaskPriorityDisinherit+0x104>)
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	693a      	ldr	r2, [r7, #16]
 8008168:	429a      	cmp	r2, r3
 800816a:	d00b      	beq.n	8008184 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800816c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008170:	f383 8811 	msr	BASEPRI, r3
 8008174:	f3bf 8f6f 	isb	sy
 8008178:	f3bf 8f4f 	dsb	sy
 800817c:	60fb      	str	r3, [r7, #12]
}
 800817e:	bf00      	nop
 8008180:	bf00      	nop
 8008182:	e7fd      	b.n	8008180 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008184:	693b      	ldr	r3, [r7, #16]
 8008186:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008188:	2b00      	cmp	r3, #0
 800818a:	d10b      	bne.n	80081a4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800818c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008190:	f383 8811 	msr	BASEPRI, r3
 8008194:	f3bf 8f6f 	isb	sy
 8008198:	f3bf 8f4f 	dsb	sy
 800819c:	60bb      	str	r3, [r7, #8]
}
 800819e:	bf00      	nop
 80081a0:	bf00      	nop
 80081a2:	e7fd      	b.n	80081a0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80081a4:	693b      	ldr	r3, [r7, #16]
 80081a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80081a8:	1e5a      	subs	r2, r3, #1
 80081aa:	693b      	ldr	r3, [r7, #16]
 80081ac:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80081ae:	693b      	ldr	r3, [r7, #16]
 80081b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80081b2:	693b      	ldr	r3, [r7, #16]
 80081b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80081b6:	429a      	cmp	r2, r3
 80081b8:	d044      	beq.n	8008244 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80081ba:	693b      	ldr	r3, [r7, #16]
 80081bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d140      	bne.n	8008244 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80081c2:	693b      	ldr	r3, [r7, #16]
 80081c4:	3304      	adds	r3, #4
 80081c6:	4618      	mov	r0, r3
 80081c8:	f7fe f8f3 	bl	80063b2 <uxListRemove>
 80081cc:	4603      	mov	r3, r0
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d115      	bne.n	80081fe <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80081d2:	693b      	ldr	r3, [r7, #16]
 80081d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80081d6:	491f      	ldr	r1, [pc, #124]	@ (8008254 <xTaskPriorityDisinherit+0x108>)
 80081d8:	4613      	mov	r3, r2
 80081da:	009b      	lsls	r3, r3, #2
 80081dc:	4413      	add	r3, r2
 80081de:	009b      	lsls	r3, r3, #2
 80081e0:	440b      	add	r3, r1
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d10a      	bne.n	80081fe <xTaskPriorityDisinherit+0xb2>
 80081e8:	693b      	ldr	r3, [r7, #16]
 80081ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081ec:	2201      	movs	r2, #1
 80081ee:	fa02 f303 	lsl.w	r3, r2, r3
 80081f2:	43da      	mvns	r2, r3
 80081f4:	4b18      	ldr	r3, [pc, #96]	@ (8008258 <xTaskPriorityDisinherit+0x10c>)
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	4013      	ands	r3, r2
 80081fa:	4a17      	ldr	r2, [pc, #92]	@ (8008258 <xTaskPriorityDisinherit+0x10c>)
 80081fc:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80081fe:	693b      	ldr	r3, [r7, #16]
 8008200:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008202:	693b      	ldr	r3, [r7, #16]
 8008204:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008206:	693b      	ldr	r3, [r7, #16]
 8008208:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800820a:	f1c3 0207 	rsb	r2, r3, #7
 800820e:	693b      	ldr	r3, [r7, #16]
 8008210:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008212:	693b      	ldr	r3, [r7, #16]
 8008214:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008216:	2201      	movs	r2, #1
 8008218:	409a      	lsls	r2, r3
 800821a:	4b0f      	ldr	r3, [pc, #60]	@ (8008258 <xTaskPriorityDisinherit+0x10c>)
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	4313      	orrs	r3, r2
 8008220:	4a0d      	ldr	r2, [pc, #52]	@ (8008258 <xTaskPriorityDisinherit+0x10c>)
 8008222:	6013      	str	r3, [r2, #0]
 8008224:	693b      	ldr	r3, [r7, #16]
 8008226:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008228:	4613      	mov	r3, r2
 800822a:	009b      	lsls	r3, r3, #2
 800822c:	4413      	add	r3, r2
 800822e:	009b      	lsls	r3, r3, #2
 8008230:	4a08      	ldr	r2, [pc, #32]	@ (8008254 <xTaskPriorityDisinherit+0x108>)
 8008232:	441a      	add	r2, r3
 8008234:	693b      	ldr	r3, [r7, #16]
 8008236:	3304      	adds	r3, #4
 8008238:	4619      	mov	r1, r3
 800823a:	4610      	mov	r0, r2
 800823c:	f7fe f85c 	bl	80062f8 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008240:	2301      	movs	r3, #1
 8008242:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008244:	697b      	ldr	r3, [r7, #20]
	}
 8008246:	4618      	mov	r0, r3
 8008248:	3718      	adds	r7, #24
 800824a:	46bd      	mov	sp, r7
 800824c:	bd80      	pop	{r7, pc}
 800824e:	bf00      	nop
 8008250:	20005690 	.word	0x20005690
 8008254:	20005694 	.word	0x20005694
 8008258:	20005798 	.word	0x20005798

0800825c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800825c:	b580      	push	{r7, lr}
 800825e:	b088      	sub	sp, #32
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
 8008264:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800826a:	2301      	movs	r3, #1
 800826c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	2b00      	cmp	r3, #0
 8008272:	d079      	beq.n	8008368 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008274:	69bb      	ldr	r3, [r7, #24]
 8008276:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008278:	2b00      	cmp	r3, #0
 800827a:	d10b      	bne.n	8008294 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800827c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008280:	f383 8811 	msr	BASEPRI, r3
 8008284:	f3bf 8f6f 	isb	sy
 8008288:	f3bf 8f4f 	dsb	sy
 800828c:	60fb      	str	r3, [r7, #12]
}
 800828e:	bf00      	nop
 8008290:	bf00      	nop
 8008292:	e7fd      	b.n	8008290 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008294:	69bb      	ldr	r3, [r7, #24]
 8008296:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008298:	683a      	ldr	r2, [r7, #0]
 800829a:	429a      	cmp	r2, r3
 800829c:	d902      	bls.n	80082a4 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	61fb      	str	r3, [r7, #28]
 80082a2:	e002      	b.n	80082aa <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80082a4:	69bb      	ldr	r3, [r7, #24]
 80082a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80082a8:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80082aa:	69bb      	ldr	r3, [r7, #24]
 80082ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082ae:	69fa      	ldr	r2, [r7, #28]
 80082b0:	429a      	cmp	r2, r3
 80082b2:	d059      	beq.n	8008368 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80082b4:	69bb      	ldr	r3, [r7, #24]
 80082b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80082b8:	697a      	ldr	r2, [r7, #20]
 80082ba:	429a      	cmp	r2, r3
 80082bc:	d154      	bne.n	8008368 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80082be:	4b2c      	ldr	r3, [pc, #176]	@ (8008370 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	69ba      	ldr	r2, [r7, #24]
 80082c4:	429a      	cmp	r2, r3
 80082c6:	d10b      	bne.n	80082e0 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 80082c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082cc:	f383 8811 	msr	BASEPRI, r3
 80082d0:	f3bf 8f6f 	isb	sy
 80082d4:	f3bf 8f4f 	dsb	sy
 80082d8:	60bb      	str	r3, [r7, #8]
}
 80082da:	bf00      	nop
 80082dc:	bf00      	nop
 80082de:	e7fd      	b.n	80082dc <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80082e0:	69bb      	ldr	r3, [r7, #24]
 80082e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082e4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80082e6:	69bb      	ldr	r3, [r7, #24]
 80082e8:	69fa      	ldr	r2, [r7, #28]
 80082ea:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80082ec:	69bb      	ldr	r3, [r7, #24]
 80082ee:	699b      	ldr	r3, [r3, #24]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	db04      	blt.n	80082fe <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80082f4:	69fb      	ldr	r3, [r7, #28]
 80082f6:	f1c3 0207 	rsb	r2, r3, #7
 80082fa:	69bb      	ldr	r3, [r7, #24]
 80082fc:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80082fe:	69bb      	ldr	r3, [r7, #24]
 8008300:	6959      	ldr	r1, [r3, #20]
 8008302:	693a      	ldr	r2, [r7, #16]
 8008304:	4613      	mov	r3, r2
 8008306:	009b      	lsls	r3, r3, #2
 8008308:	4413      	add	r3, r2
 800830a:	009b      	lsls	r3, r3, #2
 800830c:	4a19      	ldr	r2, [pc, #100]	@ (8008374 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800830e:	4413      	add	r3, r2
 8008310:	4299      	cmp	r1, r3
 8008312:	d129      	bne.n	8008368 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008314:	69bb      	ldr	r3, [r7, #24]
 8008316:	3304      	adds	r3, #4
 8008318:	4618      	mov	r0, r3
 800831a:	f7fe f84a 	bl	80063b2 <uxListRemove>
 800831e:	4603      	mov	r3, r0
 8008320:	2b00      	cmp	r3, #0
 8008322:	d10a      	bne.n	800833a <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8008324:	69bb      	ldr	r3, [r7, #24]
 8008326:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008328:	2201      	movs	r2, #1
 800832a:	fa02 f303 	lsl.w	r3, r2, r3
 800832e:	43da      	mvns	r2, r3
 8008330:	4b11      	ldr	r3, [pc, #68]	@ (8008378 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	4013      	ands	r3, r2
 8008336:	4a10      	ldr	r2, [pc, #64]	@ (8008378 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8008338:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800833a:	69bb      	ldr	r3, [r7, #24]
 800833c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800833e:	2201      	movs	r2, #1
 8008340:	409a      	lsls	r2, r3
 8008342:	4b0d      	ldr	r3, [pc, #52]	@ (8008378 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	4313      	orrs	r3, r2
 8008348:	4a0b      	ldr	r2, [pc, #44]	@ (8008378 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800834a:	6013      	str	r3, [r2, #0]
 800834c:	69bb      	ldr	r3, [r7, #24]
 800834e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008350:	4613      	mov	r3, r2
 8008352:	009b      	lsls	r3, r3, #2
 8008354:	4413      	add	r3, r2
 8008356:	009b      	lsls	r3, r3, #2
 8008358:	4a06      	ldr	r2, [pc, #24]	@ (8008374 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800835a:	441a      	add	r2, r3
 800835c:	69bb      	ldr	r3, [r7, #24]
 800835e:	3304      	adds	r3, #4
 8008360:	4619      	mov	r1, r3
 8008362:	4610      	mov	r0, r2
 8008364:	f7fd ffc8 	bl	80062f8 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008368:	bf00      	nop
 800836a:	3720      	adds	r7, #32
 800836c:	46bd      	mov	sp, r7
 800836e:	bd80      	pop	{r7, pc}
 8008370:	20005690 	.word	0x20005690
 8008374:	20005694 	.word	0x20005694
 8008378:	20005798 	.word	0x20005798

0800837c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800837c:	b480      	push	{r7}
 800837e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008380:	4b07      	ldr	r3, [pc, #28]	@ (80083a0 <pvTaskIncrementMutexHeldCount+0x24>)
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	2b00      	cmp	r3, #0
 8008386:	d004      	beq.n	8008392 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008388:	4b05      	ldr	r3, [pc, #20]	@ (80083a0 <pvTaskIncrementMutexHeldCount+0x24>)
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800838e:	3201      	adds	r2, #1
 8008390:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 8008392:	4b03      	ldr	r3, [pc, #12]	@ (80083a0 <pvTaskIncrementMutexHeldCount+0x24>)
 8008394:	681b      	ldr	r3, [r3, #0]
	}
 8008396:	4618      	mov	r0, r3
 8008398:	46bd      	mov	sp, r7
 800839a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839e:	4770      	bx	lr
 80083a0:	20005690 	.word	0x20005690

080083a4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80083a4:	b580      	push	{r7, lr}
 80083a6:	b084      	sub	sp, #16
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	6078      	str	r0, [r7, #4]
 80083ac:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80083ae:	4b29      	ldr	r3, [pc, #164]	@ (8008454 <prvAddCurrentTaskToDelayedList+0xb0>)
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80083b4:	4b28      	ldr	r3, [pc, #160]	@ (8008458 <prvAddCurrentTaskToDelayedList+0xb4>)
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	3304      	adds	r3, #4
 80083ba:	4618      	mov	r0, r3
 80083bc:	f7fd fff9 	bl	80063b2 <uxListRemove>
 80083c0:	4603      	mov	r3, r0
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d10b      	bne.n	80083de <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80083c6:	4b24      	ldr	r3, [pc, #144]	@ (8008458 <prvAddCurrentTaskToDelayedList+0xb4>)
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083cc:	2201      	movs	r2, #1
 80083ce:	fa02 f303 	lsl.w	r3, r2, r3
 80083d2:	43da      	mvns	r2, r3
 80083d4:	4b21      	ldr	r3, [pc, #132]	@ (800845c <prvAddCurrentTaskToDelayedList+0xb8>)
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	4013      	ands	r3, r2
 80083da:	4a20      	ldr	r2, [pc, #128]	@ (800845c <prvAddCurrentTaskToDelayedList+0xb8>)
 80083dc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083e4:	d10a      	bne.n	80083fc <prvAddCurrentTaskToDelayedList+0x58>
 80083e6:	683b      	ldr	r3, [r7, #0]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d007      	beq.n	80083fc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80083ec:	4b1a      	ldr	r3, [pc, #104]	@ (8008458 <prvAddCurrentTaskToDelayedList+0xb4>)
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	3304      	adds	r3, #4
 80083f2:	4619      	mov	r1, r3
 80083f4:	481a      	ldr	r0, [pc, #104]	@ (8008460 <prvAddCurrentTaskToDelayedList+0xbc>)
 80083f6:	f7fd ff7f 	bl	80062f8 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80083fa:	e026      	b.n	800844a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80083fc:	68fa      	ldr	r2, [r7, #12]
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	4413      	add	r3, r2
 8008402:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008404:	4b14      	ldr	r3, [pc, #80]	@ (8008458 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	68ba      	ldr	r2, [r7, #8]
 800840a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800840c:	68ba      	ldr	r2, [r7, #8]
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	429a      	cmp	r2, r3
 8008412:	d209      	bcs.n	8008428 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008414:	4b13      	ldr	r3, [pc, #76]	@ (8008464 <prvAddCurrentTaskToDelayedList+0xc0>)
 8008416:	681a      	ldr	r2, [r3, #0]
 8008418:	4b0f      	ldr	r3, [pc, #60]	@ (8008458 <prvAddCurrentTaskToDelayedList+0xb4>)
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	3304      	adds	r3, #4
 800841e:	4619      	mov	r1, r3
 8008420:	4610      	mov	r0, r2
 8008422:	f7fd ff8d 	bl	8006340 <vListInsert>
}
 8008426:	e010      	b.n	800844a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008428:	4b0f      	ldr	r3, [pc, #60]	@ (8008468 <prvAddCurrentTaskToDelayedList+0xc4>)
 800842a:	681a      	ldr	r2, [r3, #0]
 800842c:	4b0a      	ldr	r3, [pc, #40]	@ (8008458 <prvAddCurrentTaskToDelayedList+0xb4>)
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	3304      	adds	r3, #4
 8008432:	4619      	mov	r1, r3
 8008434:	4610      	mov	r0, r2
 8008436:	f7fd ff83 	bl	8006340 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800843a:	4b0c      	ldr	r3, [pc, #48]	@ (800846c <prvAddCurrentTaskToDelayedList+0xc8>)
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	68ba      	ldr	r2, [r7, #8]
 8008440:	429a      	cmp	r2, r3
 8008442:	d202      	bcs.n	800844a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8008444:	4a09      	ldr	r2, [pc, #36]	@ (800846c <prvAddCurrentTaskToDelayedList+0xc8>)
 8008446:	68bb      	ldr	r3, [r7, #8]
 8008448:	6013      	str	r3, [r2, #0]
}
 800844a:	bf00      	nop
 800844c:	3710      	adds	r7, #16
 800844e:	46bd      	mov	sp, r7
 8008450:	bd80      	pop	{r7, pc}
 8008452:	bf00      	nop
 8008454:	20005794 	.word	0x20005794
 8008458:	20005690 	.word	0x20005690
 800845c:	20005798 	.word	0x20005798
 8008460:	2000577c 	.word	0x2000577c
 8008464:	2000574c 	.word	0x2000574c
 8008468:	20005748 	.word	0x20005748
 800846c:	200057b0 	.word	0x200057b0

08008470 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008470:	b480      	push	{r7}
 8008472:	b085      	sub	sp, #20
 8008474:	af00      	add	r7, sp, #0
 8008476:	60f8      	str	r0, [r7, #12]
 8008478:	60b9      	str	r1, [r7, #8]
 800847a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	3b04      	subs	r3, #4
 8008480:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8008488:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	3b04      	subs	r3, #4
 800848e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008490:	68bb      	ldr	r3, [r7, #8]
 8008492:	f023 0201 	bic.w	r2, r3, #1
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	3b04      	subs	r3, #4
 800849e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80084a0:	4a0c      	ldr	r2, [pc, #48]	@ (80084d4 <pxPortInitialiseStack+0x64>)
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	3b14      	subs	r3, #20
 80084aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80084ac:	687a      	ldr	r2, [r7, #4]
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	3b04      	subs	r3, #4
 80084b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	f06f 0202 	mvn.w	r2, #2
 80084be:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	3b20      	subs	r3, #32
 80084c4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80084c6:	68fb      	ldr	r3, [r7, #12]
}
 80084c8:	4618      	mov	r0, r3
 80084ca:	3714      	adds	r7, #20
 80084cc:	46bd      	mov	sp, r7
 80084ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d2:	4770      	bx	lr
 80084d4:	080084d9 	.word	0x080084d9

080084d8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80084d8:	b480      	push	{r7}
 80084da:	b085      	sub	sp, #20
 80084dc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80084de:	2300      	movs	r3, #0
 80084e0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80084e2:	4b13      	ldr	r3, [pc, #76]	@ (8008530 <prvTaskExitError+0x58>)
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084ea:	d00b      	beq.n	8008504 <prvTaskExitError+0x2c>
	__asm volatile
 80084ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084f0:	f383 8811 	msr	BASEPRI, r3
 80084f4:	f3bf 8f6f 	isb	sy
 80084f8:	f3bf 8f4f 	dsb	sy
 80084fc:	60fb      	str	r3, [r7, #12]
}
 80084fe:	bf00      	nop
 8008500:	bf00      	nop
 8008502:	e7fd      	b.n	8008500 <prvTaskExitError+0x28>
	__asm volatile
 8008504:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008508:	f383 8811 	msr	BASEPRI, r3
 800850c:	f3bf 8f6f 	isb	sy
 8008510:	f3bf 8f4f 	dsb	sy
 8008514:	60bb      	str	r3, [r7, #8]
}
 8008516:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008518:	bf00      	nop
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	2b00      	cmp	r3, #0
 800851e:	d0fc      	beq.n	800851a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008520:	bf00      	nop
 8008522:	bf00      	nop
 8008524:	3714      	adds	r7, #20
 8008526:	46bd      	mov	sp, r7
 8008528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852c:	4770      	bx	lr
 800852e:	bf00      	nop
 8008530:	20000020 	.word	0x20000020
	...

08008540 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008540:	4b07      	ldr	r3, [pc, #28]	@ (8008560 <pxCurrentTCBConst2>)
 8008542:	6819      	ldr	r1, [r3, #0]
 8008544:	6808      	ldr	r0, [r1, #0]
 8008546:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800854a:	f380 8809 	msr	PSP, r0
 800854e:	f3bf 8f6f 	isb	sy
 8008552:	f04f 0000 	mov.w	r0, #0
 8008556:	f380 8811 	msr	BASEPRI, r0
 800855a:	4770      	bx	lr
 800855c:	f3af 8000 	nop.w

08008560 <pxCurrentTCBConst2>:
 8008560:	20005690 	.word	0x20005690
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008564:	bf00      	nop
 8008566:	bf00      	nop

08008568 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008568:	4808      	ldr	r0, [pc, #32]	@ (800858c <prvPortStartFirstTask+0x24>)
 800856a:	6800      	ldr	r0, [r0, #0]
 800856c:	6800      	ldr	r0, [r0, #0]
 800856e:	f380 8808 	msr	MSP, r0
 8008572:	f04f 0000 	mov.w	r0, #0
 8008576:	f380 8814 	msr	CONTROL, r0
 800857a:	b662      	cpsie	i
 800857c:	b661      	cpsie	f
 800857e:	f3bf 8f4f 	dsb	sy
 8008582:	f3bf 8f6f 	isb	sy
 8008586:	df00      	svc	0
 8008588:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800858a:	bf00      	nop
 800858c:	e000ed08 	.word	0xe000ed08

08008590 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008590:	b580      	push	{r7, lr}
 8008592:	b086      	sub	sp, #24
 8008594:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008596:	4b47      	ldr	r3, [pc, #284]	@ (80086b4 <xPortStartScheduler+0x124>)
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	4a47      	ldr	r2, [pc, #284]	@ (80086b8 <xPortStartScheduler+0x128>)
 800859c:	4293      	cmp	r3, r2
 800859e:	d10b      	bne.n	80085b8 <xPortStartScheduler+0x28>
	__asm volatile
 80085a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085a4:	f383 8811 	msr	BASEPRI, r3
 80085a8:	f3bf 8f6f 	isb	sy
 80085ac:	f3bf 8f4f 	dsb	sy
 80085b0:	613b      	str	r3, [r7, #16]
}
 80085b2:	bf00      	nop
 80085b4:	bf00      	nop
 80085b6:	e7fd      	b.n	80085b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80085b8:	4b3e      	ldr	r3, [pc, #248]	@ (80086b4 <xPortStartScheduler+0x124>)
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	4a3f      	ldr	r2, [pc, #252]	@ (80086bc <xPortStartScheduler+0x12c>)
 80085be:	4293      	cmp	r3, r2
 80085c0:	d10b      	bne.n	80085da <xPortStartScheduler+0x4a>
	__asm volatile
 80085c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085c6:	f383 8811 	msr	BASEPRI, r3
 80085ca:	f3bf 8f6f 	isb	sy
 80085ce:	f3bf 8f4f 	dsb	sy
 80085d2:	60fb      	str	r3, [r7, #12]
}
 80085d4:	bf00      	nop
 80085d6:	bf00      	nop
 80085d8:	e7fd      	b.n	80085d6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80085da:	4b39      	ldr	r3, [pc, #228]	@ (80086c0 <xPortStartScheduler+0x130>)
 80085dc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80085de:	697b      	ldr	r3, [r7, #20]
 80085e0:	781b      	ldrb	r3, [r3, #0]
 80085e2:	b2db      	uxtb	r3, r3
 80085e4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80085e6:	697b      	ldr	r3, [r7, #20]
 80085e8:	22ff      	movs	r2, #255	@ 0xff
 80085ea:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80085ec:	697b      	ldr	r3, [r7, #20]
 80085ee:	781b      	ldrb	r3, [r3, #0]
 80085f0:	b2db      	uxtb	r3, r3
 80085f2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80085f4:	78fb      	ldrb	r3, [r7, #3]
 80085f6:	b2db      	uxtb	r3, r3
 80085f8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80085fc:	b2da      	uxtb	r2, r3
 80085fe:	4b31      	ldr	r3, [pc, #196]	@ (80086c4 <xPortStartScheduler+0x134>)
 8008600:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008602:	4b31      	ldr	r3, [pc, #196]	@ (80086c8 <xPortStartScheduler+0x138>)
 8008604:	2207      	movs	r2, #7
 8008606:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008608:	e009      	b.n	800861e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800860a:	4b2f      	ldr	r3, [pc, #188]	@ (80086c8 <xPortStartScheduler+0x138>)
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	3b01      	subs	r3, #1
 8008610:	4a2d      	ldr	r2, [pc, #180]	@ (80086c8 <xPortStartScheduler+0x138>)
 8008612:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008614:	78fb      	ldrb	r3, [r7, #3]
 8008616:	b2db      	uxtb	r3, r3
 8008618:	005b      	lsls	r3, r3, #1
 800861a:	b2db      	uxtb	r3, r3
 800861c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800861e:	78fb      	ldrb	r3, [r7, #3]
 8008620:	b2db      	uxtb	r3, r3
 8008622:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008626:	2b80      	cmp	r3, #128	@ 0x80
 8008628:	d0ef      	beq.n	800860a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800862a:	4b27      	ldr	r3, [pc, #156]	@ (80086c8 <xPortStartScheduler+0x138>)
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	f1c3 0307 	rsb	r3, r3, #7
 8008632:	2b04      	cmp	r3, #4
 8008634:	d00b      	beq.n	800864e <xPortStartScheduler+0xbe>
	__asm volatile
 8008636:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800863a:	f383 8811 	msr	BASEPRI, r3
 800863e:	f3bf 8f6f 	isb	sy
 8008642:	f3bf 8f4f 	dsb	sy
 8008646:	60bb      	str	r3, [r7, #8]
}
 8008648:	bf00      	nop
 800864a:	bf00      	nop
 800864c:	e7fd      	b.n	800864a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800864e:	4b1e      	ldr	r3, [pc, #120]	@ (80086c8 <xPortStartScheduler+0x138>)
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	021b      	lsls	r3, r3, #8
 8008654:	4a1c      	ldr	r2, [pc, #112]	@ (80086c8 <xPortStartScheduler+0x138>)
 8008656:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008658:	4b1b      	ldr	r3, [pc, #108]	@ (80086c8 <xPortStartScheduler+0x138>)
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008660:	4a19      	ldr	r2, [pc, #100]	@ (80086c8 <xPortStartScheduler+0x138>)
 8008662:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	b2da      	uxtb	r2, r3
 8008668:	697b      	ldr	r3, [r7, #20]
 800866a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800866c:	4b17      	ldr	r3, [pc, #92]	@ (80086cc <xPortStartScheduler+0x13c>)
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	4a16      	ldr	r2, [pc, #88]	@ (80086cc <xPortStartScheduler+0x13c>)
 8008672:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008676:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008678:	4b14      	ldr	r3, [pc, #80]	@ (80086cc <xPortStartScheduler+0x13c>)
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	4a13      	ldr	r2, [pc, #76]	@ (80086cc <xPortStartScheduler+0x13c>)
 800867e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008682:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008684:	f000 f8da 	bl	800883c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008688:	4b11      	ldr	r3, [pc, #68]	@ (80086d0 <xPortStartScheduler+0x140>)
 800868a:	2200      	movs	r2, #0
 800868c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800868e:	f000 f8f9 	bl	8008884 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008692:	4b10      	ldr	r3, [pc, #64]	@ (80086d4 <xPortStartScheduler+0x144>)
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	4a0f      	ldr	r2, [pc, #60]	@ (80086d4 <xPortStartScheduler+0x144>)
 8008698:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800869c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800869e:	f7ff ff63 	bl	8008568 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80086a2:	f7ff fa6f 	bl	8007b84 <vTaskSwitchContext>
	prvTaskExitError();
 80086a6:	f7ff ff17 	bl	80084d8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80086aa:	2300      	movs	r3, #0
}
 80086ac:	4618      	mov	r0, r3
 80086ae:	3718      	adds	r7, #24
 80086b0:	46bd      	mov	sp, r7
 80086b2:	bd80      	pop	{r7, pc}
 80086b4:	e000ed00 	.word	0xe000ed00
 80086b8:	410fc271 	.word	0x410fc271
 80086bc:	410fc270 	.word	0x410fc270
 80086c0:	e000e400 	.word	0xe000e400
 80086c4:	200057bc 	.word	0x200057bc
 80086c8:	200057c0 	.word	0x200057c0
 80086cc:	e000ed20 	.word	0xe000ed20
 80086d0:	20000020 	.word	0x20000020
 80086d4:	e000ef34 	.word	0xe000ef34

080086d8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80086d8:	b480      	push	{r7}
 80086da:	b083      	sub	sp, #12
 80086dc:	af00      	add	r7, sp, #0
	__asm volatile
 80086de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086e2:	f383 8811 	msr	BASEPRI, r3
 80086e6:	f3bf 8f6f 	isb	sy
 80086ea:	f3bf 8f4f 	dsb	sy
 80086ee:	607b      	str	r3, [r7, #4]
}
 80086f0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80086f2:	4b10      	ldr	r3, [pc, #64]	@ (8008734 <vPortEnterCritical+0x5c>)
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	3301      	adds	r3, #1
 80086f8:	4a0e      	ldr	r2, [pc, #56]	@ (8008734 <vPortEnterCritical+0x5c>)
 80086fa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80086fc:	4b0d      	ldr	r3, [pc, #52]	@ (8008734 <vPortEnterCritical+0x5c>)
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	2b01      	cmp	r3, #1
 8008702:	d110      	bne.n	8008726 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008704:	4b0c      	ldr	r3, [pc, #48]	@ (8008738 <vPortEnterCritical+0x60>)
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	b2db      	uxtb	r3, r3
 800870a:	2b00      	cmp	r3, #0
 800870c:	d00b      	beq.n	8008726 <vPortEnterCritical+0x4e>
	__asm volatile
 800870e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008712:	f383 8811 	msr	BASEPRI, r3
 8008716:	f3bf 8f6f 	isb	sy
 800871a:	f3bf 8f4f 	dsb	sy
 800871e:	603b      	str	r3, [r7, #0]
}
 8008720:	bf00      	nop
 8008722:	bf00      	nop
 8008724:	e7fd      	b.n	8008722 <vPortEnterCritical+0x4a>
	}
}
 8008726:	bf00      	nop
 8008728:	370c      	adds	r7, #12
 800872a:	46bd      	mov	sp, r7
 800872c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008730:	4770      	bx	lr
 8008732:	bf00      	nop
 8008734:	20000020 	.word	0x20000020
 8008738:	e000ed04 	.word	0xe000ed04

0800873c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800873c:	b480      	push	{r7}
 800873e:	b083      	sub	sp, #12
 8008740:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008742:	4b12      	ldr	r3, [pc, #72]	@ (800878c <vPortExitCritical+0x50>)
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	2b00      	cmp	r3, #0
 8008748:	d10b      	bne.n	8008762 <vPortExitCritical+0x26>
	__asm volatile
 800874a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800874e:	f383 8811 	msr	BASEPRI, r3
 8008752:	f3bf 8f6f 	isb	sy
 8008756:	f3bf 8f4f 	dsb	sy
 800875a:	607b      	str	r3, [r7, #4]
}
 800875c:	bf00      	nop
 800875e:	bf00      	nop
 8008760:	e7fd      	b.n	800875e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008762:	4b0a      	ldr	r3, [pc, #40]	@ (800878c <vPortExitCritical+0x50>)
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	3b01      	subs	r3, #1
 8008768:	4a08      	ldr	r2, [pc, #32]	@ (800878c <vPortExitCritical+0x50>)
 800876a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800876c:	4b07      	ldr	r3, [pc, #28]	@ (800878c <vPortExitCritical+0x50>)
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	2b00      	cmp	r3, #0
 8008772:	d105      	bne.n	8008780 <vPortExitCritical+0x44>
 8008774:	2300      	movs	r3, #0
 8008776:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008778:	683b      	ldr	r3, [r7, #0]
 800877a:	f383 8811 	msr	BASEPRI, r3
}
 800877e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008780:	bf00      	nop
 8008782:	370c      	adds	r7, #12
 8008784:	46bd      	mov	sp, r7
 8008786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878a:	4770      	bx	lr
 800878c:	20000020 	.word	0x20000020

08008790 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008790:	f3ef 8009 	mrs	r0, PSP
 8008794:	f3bf 8f6f 	isb	sy
 8008798:	4b15      	ldr	r3, [pc, #84]	@ (80087f0 <pxCurrentTCBConst>)
 800879a:	681a      	ldr	r2, [r3, #0]
 800879c:	f01e 0f10 	tst.w	lr, #16
 80087a0:	bf08      	it	eq
 80087a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80087a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087aa:	6010      	str	r0, [r2, #0]
 80087ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80087b0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80087b4:	f380 8811 	msr	BASEPRI, r0
 80087b8:	f3bf 8f4f 	dsb	sy
 80087bc:	f3bf 8f6f 	isb	sy
 80087c0:	f7ff f9e0 	bl	8007b84 <vTaskSwitchContext>
 80087c4:	f04f 0000 	mov.w	r0, #0
 80087c8:	f380 8811 	msr	BASEPRI, r0
 80087cc:	bc09      	pop	{r0, r3}
 80087ce:	6819      	ldr	r1, [r3, #0]
 80087d0:	6808      	ldr	r0, [r1, #0]
 80087d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087d6:	f01e 0f10 	tst.w	lr, #16
 80087da:	bf08      	it	eq
 80087dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80087e0:	f380 8809 	msr	PSP, r0
 80087e4:	f3bf 8f6f 	isb	sy
 80087e8:	4770      	bx	lr
 80087ea:	bf00      	nop
 80087ec:	f3af 8000 	nop.w

080087f0 <pxCurrentTCBConst>:
 80087f0:	20005690 	.word	0x20005690
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80087f4:	bf00      	nop
 80087f6:	bf00      	nop

080087f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80087f8:	b580      	push	{r7, lr}
 80087fa:	b082      	sub	sp, #8
 80087fc:	af00      	add	r7, sp, #0
	__asm volatile
 80087fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008802:	f383 8811 	msr	BASEPRI, r3
 8008806:	f3bf 8f6f 	isb	sy
 800880a:	f3bf 8f4f 	dsb	sy
 800880e:	607b      	str	r3, [r7, #4]
}
 8008810:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008812:	f7ff f8fd 	bl	8007a10 <xTaskIncrementTick>
 8008816:	4603      	mov	r3, r0
 8008818:	2b00      	cmp	r3, #0
 800881a:	d003      	beq.n	8008824 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800881c:	4b06      	ldr	r3, [pc, #24]	@ (8008838 <SysTick_Handler+0x40>)
 800881e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008822:	601a      	str	r2, [r3, #0]
 8008824:	2300      	movs	r3, #0
 8008826:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008828:	683b      	ldr	r3, [r7, #0]
 800882a:	f383 8811 	msr	BASEPRI, r3
}
 800882e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008830:	bf00      	nop
 8008832:	3708      	adds	r7, #8
 8008834:	46bd      	mov	sp, r7
 8008836:	bd80      	pop	{r7, pc}
 8008838:	e000ed04 	.word	0xe000ed04

0800883c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800883c:	b480      	push	{r7}
 800883e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008840:	4b0b      	ldr	r3, [pc, #44]	@ (8008870 <vPortSetupTimerInterrupt+0x34>)
 8008842:	2200      	movs	r2, #0
 8008844:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008846:	4b0b      	ldr	r3, [pc, #44]	@ (8008874 <vPortSetupTimerInterrupt+0x38>)
 8008848:	2200      	movs	r2, #0
 800884a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800884c:	4b0a      	ldr	r3, [pc, #40]	@ (8008878 <vPortSetupTimerInterrupt+0x3c>)
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	4a0a      	ldr	r2, [pc, #40]	@ (800887c <vPortSetupTimerInterrupt+0x40>)
 8008852:	fba2 2303 	umull	r2, r3, r2, r3
 8008856:	099b      	lsrs	r3, r3, #6
 8008858:	4a09      	ldr	r2, [pc, #36]	@ (8008880 <vPortSetupTimerInterrupt+0x44>)
 800885a:	3b01      	subs	r3, #1
 800885c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800885e:	4b04      	ldr	r3, [pc, #16]	@ (8008870 <vPortSetupTimerInterrupt+0x34>)
 8008860:	2207      	movs	r2, #7
 8008862:	601a      	str	r2, [r3, #0]
}
 8008864:	bf00      	nop
 8008866:	46bd      	mov	sp, r7
 8008868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886c:	4770      	bx	lr
 800886e:	bf00      	nop
 8008870:	e000e010 	.word	0xe000e010
 8008874:	e000e018 	.word	0xe000e018
 8008878:	20000000 	.word	0x20000000
 800887c:	10624dd3 	.word	0x10624dd3
 8008880:	e000e014 	.word	0xe000e014

08008884 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008884:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008894 <vPortEnableVFP+0x10>
 8008888:	6801      	ldr	r1, [r0, #0]
 800888a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800888e:	6001      	str	r1, [r0, #0]
 8008890:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008892:	bf00      	nop
 8008894:	e000ed88 	.word	0xe000ed88

08008898 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008898:	b480      	push	{r7}
 800889a:	b085      	sub	sp, #20
 800889c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800889e:	f3ef 8305 	mrs	r3, IPSR
 80088a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	2b0f      	cmp	r3, #15
 80088a8:	d915      	bls.n	80088d6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80088aa:	4a18      	ldr	r2, [pc, #96]	@ (800890c <vPortValidateInterruptPriority+0x74>)
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	4413      	add	r3, r2
 80088b0:	781b      	ldrb	r3, [r3, #0]
 80088b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80088b4:	4b16      	ldr	r3, [pc, #88]	@ (8008910 <vPortValidateInterruptPriority+0x78>)
 80088b6:	781b      	ldrb	r3, [r3, #0]
 80088b8:	7afa      	ldrb	r2, [r7, #11]
 80088ba:	429a      	cmp	r2, r3
 80088bc:	d20b      	bcs.n	80088d6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80088be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088c2:	f383 8811 	msr	BASEPRI, r3
 80088c6:	f3bf 8f6f 	isb	sy
 80088ca:	f3bf 8f4f 	dsb	sy
 80088ce:	607b      	str	r3, [r7, #4]
}
 80088d0:	bf00      	nop
 80088d2:	bf00      	nop
 80088d4:	e7fd      	b.n	80088d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80088d6:	4b0f      	ldr	r3, [pc, #60]	@ (8008914 <vPortValidateInterruptPriority+0x7c>)
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80088de:	4b0e      	ldr	r3, [pc, #56]	@ (8008918 <vPortValidateInterruptPriority+0x80>)
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	429a      	cmp	r2, r3
 80088e4:	d90b      	bls.n	80088fe <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80088e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088ea:	f383 8811 	msr	BASEPRI, r3
 80088ee:	f3bf 8f6f 	isb	sy
 80088f2:	f3bf 8f4f 	dsb	sy
 80088f6:	603b      	str	r3, [r7, #0]
}
 80088f8:	bf00      	nop
 80088fa:	bf00      	nop
 80088fc:	e7fd      	b.n	80088fa <vPortValidateInterruptPriority+0x62>
	}
 80088fe:	bf00      	nop
 8008900:	3714      	adds	r7, #20
 8008902:	46bd      	mov	sp, r7
 8008904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008908:	4770      	bx	lr
 800890a:	bf00      	nop
 800890c:	e000e3f0 	.word	0xe000e3f0
 8008910:	200057bc 	.word	0x200057bc
 8008914:	e000ed0c 	.word	0xe000ed0c
 8008918:	200057c0 	.word	0x200057c0

0800891c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800891c:	b580      	push	{r7, lr}
 800891e:	b08a      	sub	sp, #40	@ 0x28
 8008920:	af00      	add	r7, sp, #0
 8008922:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008924:	2300      	movs	r3, #0
 8008926:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008928:	f7fe ffa4 	bl	8007874 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800892c:	4b5c      	ldr	r3, [pc, #368]	@ (8008aa0 <pvPortMalloc+0x184>)
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	2b00      	cmp	r3, #0
 8008932:	d101      	bne.n	8008938 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008934:	f000 f924 	bl	8008b80 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008938:	4b5a      	ldr	r3, [pc, #360]	@ (8008aa4 <pvPortMalloc+0x188>)
 800893a:	681a      	ldr	r2, [r3, #0]
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	4013      	ands	r3, r2
 8008940:	2b00      	cmp	r3, #0
 8008942:	f040 8095 	bne.w	8008a70 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	2b00      	cmp	r3, #0
 800894a:	d01e      	beq.n	800898a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800894c:	2208      	movs	r2, #8
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	4413      	add	r3, r2
 8008952:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	f003 0307 	and.w	r3, r3, #7
 800895a:	2b00      	cmp	r3, #0
 800895c:	d015      	beq.n	800898a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	f023 0307 	bic.w	r3, r3, #7
 8008964:	3308      	adds	r3, #8
 8008966:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	f003 0307 	and.w	r3, r3, #7
 800896e:	2b00      	cmp	r3, #0
 8008970:	d00b      	beq.n	800898a <pvPortMalloc+0x6e>
	__asm volatile
 8008972:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008976:	f383 8811 	msr	BASEPRI, r3
 800897a:	f3bf 8f6f 	isb	sy
 800897e:	f3bf 8f4f 	dsb	sy
 8008982:	617b      	str	r3, [r7, #20]
}
 8008984:	bf00      	nop
 8008986:	bf00      	nop
 8008988:	e7fd      	b.n	8008986 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	2b00      	cmp	r3, #0
 800898e:	d06f      	beq.n	8008a70 <pvPortMalloc+0x154>
 8008990:	4b45      	ldr	r3, [pc, #276]	@ (8008aa8 <pvPortMalloc+0x18c>)
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	687a      	ldr	r2, [r7, #4]
 8008996:	429a      	cmp	r2, r3
 8008998:	d86a      	bhi.n	8008a70 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800899a:	4b44      	ldr	r3, [pc, #272]	@ (8008aac <pvPortMalloc+0x190>)
 800899c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800899e:	4b43      	ldr	r3, [pc, #268]	@ (8008aac <pvPortMalloc+0x190>)
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80089a4:	e004      	b.n	80089b0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80089a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089a8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80089aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80089b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089b2:	685b      	ldr	r3, [r3, #4]
 80089b4:	687a      	ldr	r2, [r7, #4]
 80089b6:	429a      	cmp	r2, r3
 80089b8:	d903      	bls.n	80089c2 <pvPortMalloc+0xa6>
 80089ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d1f1      	bne.n	80089a6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80089c2:	4b37      	ldr	r3, [pc, #220]	@ (8008aa0 <pvPortMalloc+0x184>)
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80089c8:	429a      	cmp	r2, r3
 80089ca:	d051      	beq.n	8008a70 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80089cc:	6a3b      	ldr	r3, [r7, #32]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	2208      	movs	r2, #8
 80089d2:	4413      	add	r3, r2
 80089d4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80089d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089d8:	681a      	ldr	r2, [r3, #0]
 80089da:	6a3b      	ldr	r3, [r7, #32]
 80089dc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80089de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089e0:	685a      	ldr	r2, [r3, #4]
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	1ad2      	subs	r2, r2, r3
 80089e6:	2308      	movs	r3, #8
 80089e8:	005b      	lsls	r3, r3, #1
 80089ea:	429a      	cmp	r2, r3
 80089ec:	d920      	bls.n	8008a30 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80089ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	4413      	add	r3, r2
 80089f4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80089f6:	69bb      	ldr	r3, [r7, #24]
 80089f8:	f003 0307 	and.w	r3, r3, #7
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d00b      	beq.n	8008a18 <pvPortMalloc+0xfc>
	__asm volatile
 8008a00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a04:	f383 8811 	msr	BASEPRI, r3
 8008a08:	f3bf 8f6f 	isb	sy
 8008a0c:	f3bf 8f4f 	dsb	sy
 8008a10:	613b      	str	r3, [r7, #16]
}
 8008a12:	bf00      	nop
 8008a14:	bf00      	nop
 8008a16:	e7fd      	b.n	8008a14 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008a18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a1a:	685a      	ldr	r2, [r3, #4]
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	1ad2      	subs	r2, r2, r3
 8008a20:	69bb      	ldr	r3, [r7, #24]
 8008a22:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008a24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a26:	687a      	ldr	r2, [r7, #4]
 8008a28:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008a2a:	69b8      	ldr	r0, [r7, #24]
 8008a2c:	f000 f90a 	bl	8008c44 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008a30:	4b1d      	ldr	r3, [pc, #116]	@ (8008aa8 <pvPortMalloc+0x18c>)
 8008a32:	681a      	ldr	r2, [r3, #0]
 8008a34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a36:	685b      	ldr	r3, [r3, #4]
 8008a38:	1ad3      	subs	r3, r2, r3
 8008a3a:	4a1b      	ldr	r2, [pc, #108]	@ (8008aa8 <pvPortMalloc+0x18c>)
 8008a3c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008a3e:	4b1a      	ldr	r3, [pc, #104]	@ (8008aa8 <pvPortMalloc+0x18c>)
 8008a40:	681a      	ldr	r2, [r3, #0]
 8008a42:	4b1b      	ldr	r3, [pc, #108]	@ (8008ab0 <pvPortMalloc+0x194>)
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	429a      	cmp	r2, r3
 8008a48:	d203      	bcs.n	8008a52 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008a4a:	4b17      	ldr	r3, [pc, #92]	@ (8008aa8 <pvPortMalloc+0x18c>)
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	4a18      	ldr	r2, [pc, #96]	@ (8008ab0 <pvPortMalloc+0x194>)
 8008a50:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008a52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a54:	685a      	ldr	r2, [r3, #4]
 8008a56:	4b13      	ldr	r3, [pc, #76]	@ (8008aa4 <pvPortMalloc+0x188>)
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	431a      	orrs	r2, r3
 8008a5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a5e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008a60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a62:	2200      	movs	r2, #0
 8008a64:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008a66:	4b13      	ldr	r3, [pc, #76]	@ (8008ab4 <pvPortMalloc+0x198>)
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	3301      	adds	r3, #1
 8008a6c:	4a11      	ldr	r2, [pc, #68]	@ (8008ab4 <pvPortMalloc+0x198>)
 8008a6e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008a70:	f7fe ff0e 	bl	8007890 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008a74:	69fb      	ldr	r3, [r7, #28]
 8008a76:	f003 0307 	and.w	r3, r3, #7
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d00b      	beq.n	8008a96 <pvPortMalloc+0x17a>
	__asm volatile
 8008a7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a82:	f383 8811 	msr	BASEPRI, r3
 8008a86:	f3bf 8f6f 	isb	sy
 8008a8a:	f3bf 8f4f 	dsb	sy
 8008a8e:	60fb      	str	r3, [r7, #12]
}
 8008a90:	bf00      	nop
 8008a92:	bf00      	nop
 8008a94:	e7fd      	b.n	8008a92 <pvPortMalloc+0x176>
	return pvReturn;
 8008a96:	69fb      	ldr	r3, [r7, #28]
}
 8008a98:	4618      	mov	r0, r3
 8008a9a:	3728      	adds	r7, #40	@ 0x28
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	bd80      	pop	{r7, pc}
 8008aa0:	200093cc 	.word	0x200093cc
 8008aa4:	200093e0 	.word	0x200093e0
 8008aa8:	200093d0 	.word	0x200093d0
 8008aac:	200093c4 	.word	0x200093c4
 8008ab0:	200093d4 	.word	0x200093d4
 8008ab4:	200093d8 	.word	0x200093d8

08008ab8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008ab8:	b580      	push	{r7, lr}
 8008aba:	b086      	sub	sp, #24
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d04f      	beq.n	8008b6a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008aca:	2308      	movs	r3, #8
 8008acc:	425b      	negs	r3, r3
 8008ace:	697a      	ldr	r2, [r7, #20]
 8008ad0:	4413      	add	r3, r2
 8008ad2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008ad4:	697b      	ldr	r3, [r7, #20]
 8008ad6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008ad8:	693b      	ldr	r3, [r7, #16]
 8008ada:	685a      	ldr	r2, [r3, #4]
 8008adc:	4b25      	ldr	r3, [pc, #148]	@ (8008b74 <vPortFree+0xbc>)
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	4013      	ands	r3, r2
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d10b      	bne.n	8008afe <vPortFree+0x46>
	__asm volatile
 8008ae6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008aea:	f383 8811 	msr	BASEPRI, r3
 8008aee:	f3bf 8f6f 	isb	sy
 8008af2:	f3bf 8f4f 	dsb	sy
 8008af6:	60fb      	str	r3, [r7, #12]
}
 8008af8:	bf00      	nop
 8008afa:	bf00      	nop
 8008afc:	e7fd      	b.n	8008afa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008afe:	693b      	ldr	r3, [r7, #16]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d00b      	beq.n	8008b1e <vPortFree+0x66>
	__asm volatile
 8008b06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b0a:	f383 8811 	msr	BASEPRI, r3
 8008b0e:	f3bf 8f6f 	isb	sy
 8008b12:	f3bf 8f4f 	dsb	sy
 8008b16:	60bb      	str	r3, [r7, #8]
}
 8008b18:	bf00      	nop
 8008b1a:	bf00      	nop
 8008b1c:	e7fd      	b.n	8008b1a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008b1e:	693b      	ldr	r3, [r7, #16]
 8008b20:	685a      	ldr	r2, [r3, #4]
 8008b22:	4b14      	ldr	r3, [pc, #80]	@ (8008b74 <vPortFree+0xbc>)
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	4013      	ands	r3, r2
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d01e      	beq.n	8008b6a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008b2c:	693b      	ldr	r3, [r7, #16]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d11a      	bne.n	8008b6a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008b34:	693b      	ldr	r3, [r7, #16]
 8008b36:	685a      	ldr	r2, [r3, #4]
 8008b38:	4b0e      	ldr	r3, [pc, #56]	@ (8008b74 <vPortFree+0xbc>)
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	43db      	mvns	r3, r3
 8008b3e:	401a      	ands	r2, r3
 8008b40:	693b      	ldr	r3, [r7, #16]
 8008b42:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008b44:	f7fe fe96 	bl	8007874 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008b48:	693b      	ldr	r3, [r7, #16]
 8008b4a:	685a      	ldr	r2, [r3, #4]
 8008b4c:	4b0a      	ldr	r3, [pc, #40]	@ (8008b78 <vPortFree+0xc0>)
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	4413      	add	r3, r2
 8008b52:	4a09      	ldr	r2, [pc, #36]	@ (8008b78 <vPortFree+0xc0>)
 8008b54:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008b56:	6938      	ldr	r0, [r7, #16]
 8008b58:	f000 f874 	bl	8008c44 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008b5c:	4b07      	ldr	r3, [pc, #28]	@ (8008b7c <vPortFree+0xc4>)
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	3301      	adds	r3, #1
 8008b62:	4a06      	ldr	r2, [pc, #24]	@ (8008b7c <vPortFree+0xc4>)
 8008b64:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008b66:	f7fe fe93 	bl	8007890 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008b6a:	bf00      	nop
 8008b6c:	3718      	adds	r7, #24
 8008b6e:	46bd      	mov	sp, r7
 8008b70:	bd80      	pop	{r7, pc}
 8008b72:	bf00      	nop
 8008b74:	200093e0 	.word	0x200093e0
 8008b78:	200093d0 	.word	0x200093d0
 8008b7c:	200093dc 	.word	0x200093dc

08008b80 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008b80:	b480      	push	{r7}
 8008b82:	b085      	sub	sp, #20
 8008b84:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008b86:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8008b8a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008b8c:	4b27      	ldr	r3, [pc, #156]	@ (8008c2c <prvHeapInit+0xac>)
 8008b8e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	f003 0307 	and.w	r3, r3, #7
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d00c      	beq.n	8008bb4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	3307      	adds	r3, #7
 8008b9e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	f023 0307 	bic.w	r3, r3, #7
 8008ba6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008ba8:	68ba      	ldr	r2, [r7, #8]
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	1ad3      	subs	r3, r2, r3
 8008bae:	4a1f      	ldr	r2, [pc, #124]	@ (8008c2c <prvHeapInit+0xac>)
 8008bb0:	4413      	add	r3, r2
 8008bb2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008bb8:	4a1d      	ldr	r2, [pc, #116]	@ (8008c30 <prvHeapInit+0xb0>)
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008bbe:	4b1c      	ldr	r3, [pc, #112]	@ (8008c30 <prvHeapInit+0xb0>)
 8008bc0:	2200      	movs	r2, #0
 8008bc2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	68ba      	ldr	r2, [r7, #8]
 8008bc8:	4413      	add	r3, r2
 8008bca:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008bcc:	2208      	movs	r2, #8
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	1a9b      	subs	r3, r3, r2
 8008bd2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	f023 0307 	bic.w	r3, r3, #7
 8008bda:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	4a15      	ldr	r2, [pc, #84]	@ (8008c34 <prvHeapInit+0xb4>)
 8008be0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008be2:	4b14      	ldr	r3, [pc, #80]	@ (8008c34 <prvHeapInit+0xb4>)
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	2200      	movs	r2, #0
 8008be8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008bea:	4b12      	ldr	r3, [pc, #72]	@ (8008c34 <prvHeapInit+0xb4>)
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	2200      	movs	r2, #0
 8008bf0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008bf6:	683b      	ldr	r3, [r7, #0]
 8008bf8:	68fa      	ldr	r2, [r7, #12]
 8008bfa:	1ad2      	subs	r2, r2, r3
 8008bfc:	683b      	ldr	r3, [r7, #0]
 8008bfe:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008c00:	4b0c      	ldr	r3, [pc, #48]	@ (8008c34 <prvHeapInit+0xb4>)
 8008c02:	681a      	ldr	r2, [r3, #0]
 8008c04:	683b      	ldr	r3, [r7, #0]
 8008c06:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008c08:	683b      	ldr	r3, [r7, #0]
 8008c0a:	685b      	ldr	r3, [r3, #4]
 8008c0c:	4a0a      	ldr	r2, [pc, #40]	@ (8008c38 <prvHeapInit+0xb8>)
 8008c0e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008c10:	683b      	ldr	r3, [r7, #0]
 8008c12:	685b      	ldr	r3, [r3, #4]
 8008c14:	4a09      	ldr	r2, [pc, #36]	@ (8008c3c <prvHeapInit+0xbc>)
 8008c16:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008c18:	4b09      	ldr	r3, [pc, #36]	@ (8008c40 <prvHeapInit+0xc0>)
 8008c1a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8008c1e:	601a      	str	r2, [r3, #0]
}
 8008c20:	bf00      	nop
 8008c22:	3714      	adds	r7, #20
 8008c24:	46bd      	mov	sp, r7
 8008c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2a:	4770      	bx	lr
 8008c2c:	200057c4 	.word	0x200057c4
 8008c30:	200093c4 	.word	0x200093c4
 8008c34:	200093cc 	.word	0x200093cc
 8008c38:	200093d4 	.word	0x200093d4
 8008c3c:	200093d0 	.word	0x200093d0
 8008c40:	200093e0 	.word	0x200093e0

08008c44 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008c44:	b480      	push	{r7}
 8008c46:	b085      	sub	sp, #20
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008c4c:	4b28      	ldr	r3, [pc, #160]	@ (8008cf0 <prvInsertBlockIntoFreeList+0xac>)
 8008c4e:	60fb      	str	r3, [r7, #12]
 8008c50:	e002      	b.n	8008c58 <prvInsertBlockIntoFreeList+0x14>
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	60fb      	str	r3, [r7, #12]
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	687a      	ldr	r2, [r7, #4]
 8008c5e:	429a      	cmp	r2, r3
 8008c60:	d8f7      	bhi.n	8008c52 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	685b      	ldr	r3, [r3, #4]
 8008c6a:	68ba      	ldr	r2, [r7, #8]
 8008c6c:	4413      	add	r3, r2
 8008c6e:	687a      	ldr	r2, [r7, #4]
 8008c70:	429a      	cmp	r2, r3
 8008c72:	d108      	bne.n	8008c86 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	685a      	ldr	r2, [r3, #4]
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	685b      	ldr	r3, [r3, #4]
 8008c7c:	441a      	add	r2, r3
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	685b      	ldr	r3, [r3, #4]
 8008c8e:	68ba      	ldr	r2, [r7, #8]
 8008c90:	441a      	add	r2, r3
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	429a      	cmp	r2, r3
 8008c98:	d118      	bne.n	8008ccc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	681a      	ldr	r2, [r3, #0]
 8008c9e:	4b15      	ldr	r3, [pc, #84]	@ (8008cf4 <prvInsertBlockIntoFreeList+0xb0>)
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	429a      	cmp	r2, r3
 8008ca4:	d00d      	beq.n	8008cc2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	685a      	ldr	r2, [r3, #4]
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	685b      	ldr	r3, [r3, #4]
 8008cb0:	441a      	add	r2, r3
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	681a      	ldr	r2, [r3, #0]
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	601a      	str	r2, [r3, #0]
 8008cc0:	e008      	b.n	8008cd4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008cc2:	4b0c      	ldr	r3, [pc, #48]	@ (8008cf4 <prvInsertBlockIntoFreeList+0xb0>)
 8008cc4:	681a      	ldr	r2, [r3, #0]
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	601a      	str	r2, [r3, #0]
 8008cca:	e003      	b.n	8008cd4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	681a      	ldr	r2, [r3, #0]
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008cd4:	68fa      	ldr	r2, [r7, #12]
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	429a      	cmp	r2, r3
 8008cda:	d002      	beq.n	8008ce2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	687a      	ldr	r2, [r7, #4]
 8008ce0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008ce2:	bf00      	nop
 8008ce4:	3714      	adds	r7, #20
 8008ce6:	46bd      	mov	sp, r7
 8008ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cec:	4770      	bx	lr
 8008cee:	bf00      	nop
 8008cf0:	200093c4 	.word	0x200093c4
 8008cf4:	200093cc 	.word	0x200093cc

08008cf8 <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 8008cf8:	b580      	push	{r7, lr}
 8008cfa:	b084      	sub	sp, #16
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	6078      	str	r0, [r7, #4]
 8008d00:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8008d02:	683b      	ldr	r3, [r7, #0]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	330c      	adds	r3, #12
 8008d08:	461a      	mov	r2, r3
 8008d0a:	6839      	ldr	r1, [r7, #0]
 8008d0c:	6878      	ldr	r0, [r7, #4]
 8008d0e:	f002 fa89 	bl	800b224 <tcpip_send_msg_wait_sem>
 8008d12:	4603      	mov	r3, r0
 8008d14:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8008d16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d103      	bne.n	8008d26 <netconn_apimsg+0x2e>
    return apimsg->err;
 8008d1e:	683b      	ldr	r3, [r7, #0]
 8008d20:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8008d24:	e001      	b.n	8008d2a <netconn_apimsg+0x32>
  }
  return err;
 8008d26:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008d2a:	4618      	mov	r0, r3
 8008d2c:	3710      	adds	r7, #16
 8008d2e:	46bd      	mov	sp, r7
 8008d30:	bd80      	pop	{r7, pc}
	...

08008d34 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 8008d34:	b580      	push	{r7, lr}
 8008d36:	b08c      	sub	sp, #48	@ 0x30
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	4603      	mov	r3, r0
 8008d3c:	603a      	str	r2, [r7, #0]
 8008d3e:	71fb      	strb	r3, [r7, #7]
 8008d40:	460b      	mov	r3, r1
 8008d42:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 8008d44:	79fb      	ldrb	r3, [r7, #7]
 8008d46:	6839      	ldr	r1, [r7, #0]
 8008d48:	4618      	mov	r0, r3
 8008d4a:	f001 f949 	bl	8009fe0 <netconn_alloc>
 8008d4e:	62f8      	str	r0, [r7, #44]	@ 0x2c
  if (conn != NULL) {
 8008d50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d054      	beq.n	8008e00 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 8008d56:	79bb      	ldrb	r3, [r7, #6]
 8008d58:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 8008d5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d5c:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 8008d5e:	f107 0308 	add.w	r3, r7, #8
 8008d62:	4619      	mov	r1, r3
 8008d64:	4829      	ldr	r0, [pc, #164]	@ (8008e0c <netconn_new_with_proto_and_callback+0xd8>)
 8008d66:	f7ff ffc7 	bl	8008cf8 <netconn_apimsg>
 8008d6a:	4603      	mov	r3, r0
 8008d6c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    if (err != ERR_OK) {
 8008d70:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d043      	beq.n	8008e00 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 8008d78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d7a:	685b      	ldr	r3, [r3, #4]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d005      	beq.n	8008d8c <netconn_new_with_proto_and_callback+0x58>
 8008d80:	4b23      	ldr	r3, [pc, #140]	@ (8008e10 <netconn_new_with_proto_and_callback+0xdc>)
 8008d82:	22a3      	movs	r2, #163	@ 0xa3
 8008d84:	4923      	ldr	r1, [pc, #140]	@ (8008e14 <netconn_new_with_proto_and_callback+0xe0>)
 8008d86:	4824      	ldr	r0, [pc, #144]	@ (8008e18 <netconn_new_with_proto_and_callback+0xe4>)
 8008d88:	f00d fc0a 	bl	80165a0 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 8008d8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d8e:	3310      	adds	r3, #16
 8008d90:	4618      	mov	r0, r3
 8008d92:	f00d f9cc 	bl	801612e <sys_mbox_valid>
 8008d96:	4603      	mov	r3, r0
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d105      	bne.n	8008da8 <netconn_new_with_proto_and_callback+0x74>
 8008d9c:	4b1c      	ldr	r3, [pc, #112]	@ (8008e10 <netconn_new_with_proto_and_callback+0xdc>)
 8008d9e:	22a4      	movs	r2, #164	@ 0xa4
 8008da0:	491e      	ldr	r1, [pc, #120]	@ (8008e1c <netconn_new_with_proto_and_callback+0xe8>)
 8008da2:	481d      	ldr	r0, [pc, #116]	@ (8008e18 <netconn_new_with_proto_and_callback+0xe4>)
 8008da4:	f00d fbfc 	bl	80165a0 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 8008da8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008daa:	3314      	adds	r3, #20
 8008dac:	4618      	mov	r0, r3
 8008dae:	f00d f9be 	bl	801612e <sys_mbox_valid>
 8008db2:	4603      	mov	r3, r0
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d005      	beq.n	8008dc4 <netconn_new_with_proto_and_callback+0x90>
 8008db8:	4b15      	ldr	r3, [pc, #84]	@ (8008e10 <netconn_new_with_proto_and_callback+0xdc>)
 8008dba:	22a6      	movs	r2, #166	@ 0xa6
 8008dbc:	4918      	ldr	r1, [pc, #96]	@ (8008e20 <netconn_new_with_proto_and_callback+0xec>)
 8008dbe:	4816      	ldr	r0, [pc, #88]	@ (8008e18 <netconn_new_with_proto_and_callback+0xe4>)
 8008dc0:	f00d fbee 	bl	80165a0 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 8008dc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008dc6:	330c      	adds	r3, #12
 8008dc8:	4618      	mov	r0, r3
 8008dca:	f00d fa41 	bl	8016250 <sys_sem_valid>
 8008dce:	4603      	mov	r3, r0
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d105      	bne.n	8008de0 <netconn_new_with_proto_and_callback+0xac>
 8008dd4:	4b0e      	ldr	r3, [pc, #56]	@ (8008e10 <netconn_new_with_proto_and_callback+0xdc>)
 8008dd6:	22a9      	movs	r2, #169	@ 0xa9
 8008dd8:	4912      	ldr	r1, [pc, #72]	@ (8008e24 <netconn_new_with_proto_and_callback+0xf0>)
 8008dda:	480f      	ldr	r0, [pc, #60]	@ (8008e18 <netconn_new_with_proto_and_callback+0xe4>)
 8008ddc:	f00d fbe0 	bl	80165a0 <iprintf>
      sys_sem_free(&conn->op_completed);
 8008de0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008de2:	330c      	adds	r3, #12
 8008de4:	4618      	mov	r0, r3
 8008de6:	f00d fa26 	bl	8016236 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 8008dea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008dec:	3310      	adds	r3, #16
 8008dee:	4618      	mov	r0, r3
 8008df0:	f00d f916 	bl	8016020 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 8008df4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008df6:	2007      	movs	r0, #7
 8008df8:	f002 ffc2 	bl	800bd80 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 8008dfc:	2300      	movs	r3, #0
 8008dfe:	e000      	b.n	8008e02 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 8008e00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8008e02:	4618      	mov	r0, r3
 8008e04:	3730      	adds	r7, #48	@ 0x30
 8008e06:	46bd      	mov	sp, r7
 8008e08:	bd80      	pop	{r7, pc}
 8008e0a:	bf00      	nop
 8008e0c:	08009fb5 	.word	0x08009fb5
 8008e10:	08017b2c 	.word	0x08017b2c
 8008e14:	08017b60 	.word	0x08017b60
 8008e18:	08017b84 	.word	0x08017b84
 8008e1c:	08017bac 	.word	0x08017bac
 8008e20:	08017bc4 	.word	0x08017bc4
 8008e24:	08017be8 	.word	0x08017be8

08008e28 <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 8008e28:	b580      	push	{r7, lr}
 8008e2a:	b08c      	sub	sp, #48	@ 0x30
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d101      	bne.n	8008e3a <netconn_prepare_delete+0x12>
    return ERR_OK;
 8008e36:	2300      	movs	r3, #0
 8008e38:	e014      	b.n	8008e64 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8008e3e:	2329      	movs	r3, #41	@ 0x29
 8008e40:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 8008e42:	f107 030c 	add.w	r3, r7, #12
 8008e46:	4619      	mov	r1, r3
 8008e48:	4808      	ldr	r0, [pc, #32]	@ (8008e6c <netconn_prepare_delete+0x44>)
 8008e4a:	f7ff ff55 	bl	8008cf8 <netconn_apimsg>
 8008e4e:	4603      	mov	r3, r0
 8008e50:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 8008e54:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d002      	beq.n	8008e62 <netconn_prepare_delete+0x3a>
    return err;
 8008e5c:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8008e60:	e000      	b.n	8008e64 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 8008e62:	2300      	movs	r3, #0
}
 8008e64:	4618      	mov	r0, r3
 8008e66:	3730      	adds	r7, #48	@ 0x30
 8008e68:	46bd      	mov	sp, r7
 8008e6a:	bd80      	pop	{r7, pc}
 8008e6c:	0800a529 	.word	0x0800a529

08008e70 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 8008e70:	b580      	push	{r7, lr}
 8008e72:	b084      	sub	sp, #16
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d101      	bne.n	8008e82 <netconn_delete+0x12>
    return ERR_OK;
 8008e7e:	2300      	movs	r3, #0
 8008e80:	e00d      	b.n	8008e9e <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 8008e82:	6878      	ldr	r0, [r7, #4]
 8008e84:	f7ff ffd0 	bl	8008e28 <netconn_prepare_delete>
 8008e88:	4603      	mov	r3, r0
 8008e8a:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 8008e8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d102      	bne.n	8008e9a <netconn_delete+0x2a>
    netconn_free(conn);
 8008e94:	6878      	ldr	r0, [r7, #4]
 8008e96:	f001 f915 	bl	800a0c4 <netconn_free>
  }
  return err;
 8008e9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	3710      	adds	r7, #16
 8008ea2:	46bd      	mov	sp, r7
 8008ea4:	bd80      	pop	{r7, pc}
	...

08008ea8 <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 8008ea8:	b580      	push	{r7, lr}
 8008eaa:	b08e      	sub	sp, #56	@ 0x38
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	60f8      	str	r0, [r7, #12]
 8008eb0:	60b9      	str	r1, [r7, #8]
 8008eb2:	4613      	mov	r3, r2
 8008eb4:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d109      	bne.n	8008ed0 <netconn_bind+0x28>
 8008ebc:	4b11      	ldr	r3, [pc, #68]	@ (8008f04 <netconn_bind+0x5c>)
 8008ebe:	f44f 729c 	mov.w	r2, #312	@ 0x138
 8008ec2:	4911      	ldr	r1, [pc, #68]	@ (8008f08 <netconn_bind+0x60>)
 8008ec4:	4811      	ldr	r0, [pc, #68]	@ (8008f0c <netconn_bind+0x64>)
 8008ec6:	f00d fb6b 	bl	80165a0 <iprintf>
 8008eca:	f06f 030f 	mvn.w	r3, #15
 8008ece:	e015      	b.n	8008efc <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 8008ed0:	68bb      	ldr	r3, [r7, #8]
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d101      	bne.n	8008eda <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 8008ed6:	4b0e      	ldr	r3, [pc, #56]	@ (8008f10 <netconn_bind+0x68>)
 8008ed8:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 8008ede:	68bb      	ldr	r3, [r7, #8]
 8008ee0:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8008ee2:	88fb      	ldrh	r3, [r7, #6]
 8008ee4:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 8008ee6:	f107 0314 	add.w	r3, r7, #20
 8008eea:	4619      	mov	r1, r3
 8008eec:	4809      	ldr	r0, [pc, #36]	@ (8008f14 <netconn_bind+0x6c>)
 8008eee:	f7ff ff03 	bl	8008cf8 <netconn_apimsg>
 8008ef2:	4603      	mov	r3, r0
 8008ef4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 8008ef8:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 8008efc:	4618      	mov	r0, r3
 8008efe:	3738      	adds	r7, #56	@ 0x38
 8008f00:	46bd      	mov	sp, r7
 8008f02:	bd80      	pop	{r7, pc}
 8008f04:	08017b2c 	.word	0x08017b2c
 8008f08:	08017c64 	.word	0x08017c64
 8008f0c:	08017b84 	.word	0x08017b84
 8008f10:	0801b134 	.word	0x0801b134
 8008f14:	0800a6f5 	.word	0x0800a6f5

08008f18 <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	b08c      	sub	sp, #48	@ 0x30
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	6078      	str	r0, [r7, #4]
 8008f20:	460b      	mov	r3, r1
 8008f22:	70fb      	strb	r3, [r7, #3]
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d109      	bne.n	8008f3e <netconn_listen_with_backlog+0x26>
 8008f2a:	4b0d      	ldr	r3, [pc, #52]	@ (8008f60 <netconn_listen_with_backlog+0x48>)
 8008f2c:	f240 12bb 	movw	r2, #443	@ 0x1bb
 8008f30:	490c      	ldr	r1, [pc, #48]	@ (8008f64 <netconn_listen_with_backlog+0x4c>)
 8008f32:	480d      	ldr	r0, [pc, #52]	@ (8008f68 <netconn_listen_with_backlog+0x50>)
 8008f34:	f00d fb34 	bl	80165a0 <iprintf>
 8008f38:	f06f 030f 	mvn.w	r3, #15
 8008f3c:	e00c      	b.n	8008f58 <netconn_listen_with_backlog+0x40>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	60fb      	str	r3, [r7, #12]
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 8008f42:	f107 030c 	add.w	r3, r7, #12
 8008f46:	4619      	mov	r1, r3
 8008f48:	4808      	ldr	r0, [pc, #32]	@ (8008f6c <netconn_listen_with_backlog+0x54>)
 8008f4a:	f7ff fed5 	bl	8008cf8 <netconn_apimsg>
 8008f4e:	4603      	mov	r3, r0
 8008f50:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8008f54:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 8008f58:	4618      	mov	r0, r3
 8008f5a:	3730      	adds	r7, #48	@ 0x30
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	bd80      	pop	{r7, pc}
 8008f60:	08017b2c 	.word	0x08017b2c
 8008f64:	08017ce4 	.word	0x08017ce4
 8008f68:	08017b84 	.word	0x08017b84
 8008f6c:	0800a769 	.word	0x0800a769

08008f70 <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
 8008f70:	b580      	push	{r7, lr}
 8008f72:	b086      	sub	sp, #24
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	6078      	str	r0, [r7, #4]
 8008f78:	6039      	str	r1, [r7, #0]
  struct netconn *newconn;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 8008f7a:	683b      	ldr	r3, [r7, #0]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d109      	bne.n	8008f94 <netconn_accept+0x24>
 8008f80:	4b42      	ldr	r3, [pc, #264]	@ (800908c <netconn_accept+0x11c>)
 8008f82:	f240 12e1 	movw	r2, #481	@ 0x1e1
 8008f86:	4942      	ldr	r1, [pc, #264]	@ (8009090 <netconn_accept+0x120>)
 8008f88:	4842      	ldr	r0, [pc, #264]	@ (8009094 <netconn_accept+0x124>)
 8008f8a:	f00d fb09 	bl	80165a0 <iprintf>
 8008f8e:	f06f 030f 	mvn.w	r3, #15
 8008f92:	e077      	b.n	8009084 <netconn_accept+0x114>
  *new_conn = NULL;
 8008f94:	683b      	ldr	r3, [r7, #0]
 8008f96:	2200      	movs	r2, #0
 8008f98:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d109      	bne.n	8008fb4 <netconn_accept+0x44>
 8008fa0:	4b3a      	ldr	r3, [pc, #232]	@ (800908c <netconn_accept+0x11c>)
 8008fa2:	f240 12e3 	movw	r2, #483	@ 0x1e3
 8008fa6:	493c      	ldr	r1, [pc, #240]	@ (8009098 <netconn_accept+0x128>)
 8008fa8:	483a      	ldr	r0, [pc, #232]	@ (8009094 <netconn_accept+0x124>)
 8008faa:	f00d faf9 	bl	80165a0 <iprintf>
 8008fae:	f06f 030f 	mvn.w	r3, #15
 8008fb2:	e067      	b.n	8009084 <netconn_accept+0x114>

  /* NOTE: Although the opengroup spec says a pending error shall be returned to
           send/recv/getsockopt(SO_ERROR) only, we return it for listening
           connections also, to handle embedded-system errors */
  err = netconn_err(conn);
 8008fb4:	6878      	ldr	r0, [r7, #4]
 8008fb6:	f000 fb88 	bl	80096ca <netconn_err>
 8008fba:	4603      	mov	r3, r0
 8008fbc:	74fb      	strb	r3, [r7, #19]
  if (err != ERR_OK) {
 8008fbe:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d002      	beq.n	8008fcc <netconn_accept+0x5c>
    /* return pending error */
    return err;
 8008fc6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008fca:	e05b      	b.n	8009084 <netconn_accept+0x114>
  }
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	3314      	adds	r3, #20
 8008fd0:	4618      	mov	r0, r3
 8008fd2:	f00d f8ac 	bl	801612e <sys_mbox_valid>
 8008fd6:	4603      	mov	r3, r0
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d006      	beq.n	8008fea <netconn_accept+0x7a>
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008fe2:	f003 0301 	and.w	r3, r3, #1
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d002      	beq.n	8008ff0 <netconn_accept+0x80>
    /* don't accept if closed: this might block the application task
       waiting on acceptmbox forever! */
    return ERR_CLSD;
 8008fea:	f06f 030e 	mvn.w	r3, #14
 8008fee:	e049      	b.n	8009084 <netconn_accept+0x114>
  }

  API_MSG_VAR_ALLOC_ACCEPT(msg);

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn)) {
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008ff6:	f003 0302 	and.w	r3, r3, #2
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d00e      	beq.n	800901c <netconn_accept+0xac>
    if (sys_arch_mbox_tryfetch(&conn->acceptmbox, &accept_ptr) == SYS_ARCH_TIMEOUT) {
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	3314      	adds	r3, #20
 8009002:	f107 020c 	add.w	r2, r7, #12
 8009006:	4611      	mov	r1, r2
 8009008:	4618      	mov	r0, r3
 800900a:	f00d f874 	bl	80160f6 <sys_arch_mbox_tryfetch>
 800900e:	4603      	mov	r3, r0
 8009010:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009014:	d113      	bne.n	800903e <netconn_accept+0xce>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_WOULDBLOCK;
 8009016:	f06f 0306 	mvn.w	r3, #6
 800901a:	e033      	b.n	8009084 <netconn_accept+0x114>
    }
  } else {
#if LWIP_SO_RCVTIMEO
    if (sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	f103 0014 	add.w	r0, r3, #20
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	69da      	ldr	r2, [r3, #28]
 8009026:	f107 030c 	add.w	r3, r7, #12
 800902a:	4619      	mov	r1, r3
 800902c:	f00d f824 	bl	8016078 <sys_arch_mbox_fetch>
 8009030:	4603      	mov	r3, r0
 8009032:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009036:	d102      	bne.n	800903e <netconn_accept+0xce>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
 8009038:	f06f 0302 	mvn.w	r3, #2
 800903c:	e022      	b.n	8009084 <netconn_accept+0x114>
    }
  }
#endif

  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009042:	2b00      	cmp	r3, #0
 8009044:	d005      	beq.n	8009052 <netconn_accept+0xe2>
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800904a:	2200      	movs	r2, #0
 800904c:	2101      	movs	r1, #1
 800904e:	6878      	ldr	r0, [r7, #4]
 8009050:	4798      	blx	r3

  if (lwip_netconn_is_err_msg(accept_ptr, &err)) {
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	f107 0213 	add.w	r2, r7, #19
 8009058:	4611      	mov	r1, r2
 800905a:	4618      	mov	r0, r3
 800905c:	f000 fb86 	bl	800976c <lwip_netconn_is_err_msg>
 8009060:	4603      	mov	r3, r0
 8009062:	2b00      	cmp	r3, #0
 8009064:	d002      	beq.n	800906c <netconn_accept+0xfc>
    /* a connection has been aborted: e.g. out of pcbs or out of netconns during accept */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return err;
 8009066:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800906a:	e00b      	b.n	8009084 <netconn_accept+0x114>
  }
  if (accept_ptr == NULL) {
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	2b00      	cmp	r3, #0
 8009070:	d102      	bne.n	8009078 <netconn_accept+0x108>
    /* connection has been aborted */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return ERR_CLSD;
 8009072:	f06f 030e 	mvn.w	r3, #14
 8009076:	e005      	b.n	8009084 <netconn_accept+0x114>
  }
  newconn = (struct netconn *)accept_ptr;
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	617b      	str	r3, [r7, #20]
  /* don't care for the return value of lwip_netconn_do_recv */
  netconn_apimsg(lwip_netconn_do_accepted, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
 800907c:	683b      	ldr	r3, [r7, #0]
 800907e:	697a      	ldr	r2, [r7, #20]
 8009080:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 8009082:	2300      	movs	r3, #0
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 8009084:	4618      	mov	r0, r3
 8009086:	3718      	adds	r7, #24
 8009088:	46bd      	mov	sp, r7
 800908a:	bd80      	pop	{r7, pc}
 800908c:	08017b2c 	.word	0x08017b2c
 8009090:	08017d04 	.word	0x08017d04
 8009094:	08017b84 	.word	0x08017b84
 8009098:	08017d24 	.word	0x08017d24

0800909c <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 800909c:	b580      	push	{r7, lr}
 800909e:	b088      	sub	sp, #32
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	60f8      	str	r0, [r7, #12]
 80090a4:	60b9      	str	r1, [r7, #8]
 80090a6:	4613      	mov	r3, r2
 80090a8:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 80090aa:	2300      	movs	r3, #0
 80090ac:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 80090ae:	68bb      	ldr	r3, [r7, #8]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d109      	bne.n	80090c8 <netconn_recv_data+0x2c>
 80090b4:	4b5e      	ldr	r3, [pc, #376]	@ (8009230 <netconn_recv_data+0x194>)
 80090b6:	f44f 7212 	mov.w	r2, #584	@ 0x248
 80090ba:	495e      	ldr	r1, [pc, #376]	@ (8009234 <netconn_recv_data+0x198>)
 80090bc:	485e      	ldr	r0, [pc, #376]	@ (8009238 <netconn_recv_data+0x19c>)
 80090be:	f00d fa6f 	bl	80165a0 <iprintf>
 80090c2:	f06f 030f 	mvn.w	r3, #15
 80090c6:	e0ae      	b.n	8009226 <netconn_recv_data+0x18a>
  *new_buf = NULL;
 80090c8:	68bb      	ldr	r3, [r7, #8]
 80090ca:	2200      	movs	r2, #0
 80090cc:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d109      	bne.n	80090e8 <netconn_recv_data+0x4c>
 80090d4:	4b56      	ldr	r3, [pc, #344]	@ (8009230 <netconn_recv_data+0x194>)
 80090d6:	f240 224a 	movw	r2, #586	@ 0x24a
 80090da:	4958      	ldr	r1, [pc, #352]	@ (800923c <netconn_recv_data+0x1a0>)
 80090dc:	4856      	ldr	r0, [pc, #344]	@ (8009238 <netconn_recv_data+0x19c>)
 80090de:	f00d fa5f 	bl	80165a0 <iprintf>
 80090e2:	f06f 030f 	mvn.w	r3, #15
 80090e6:	e09e      	b.n	8009226 <netconn_recv_data+0x18a>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	3310      	adds	r3, #16
 80090ec:	4618      	mov	r0, r3
 80090ee:	f00d f81e 	bl	801612e <sys_mbox_valid>
 80090f2:	4603      	mov	r3, r0
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d10e      	bne.n	8009116 <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 80090f8:	68f8      	ldr	r0, [r7, #12]
 80090fa:	f000 fae6 	bl	80096ca <netconn_err>
 80090fe:	4603      	mov	r3, r0
 8009100:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 8009102:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8009106:	2b00      	cmp	r3, #0
 8009108:	d002      	beq.n	8009110 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 800910a:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800910e:	e08a      	b.n	8009226 <netconn_recv_data+0x18a>
    }
    return ERR_CONN;
 8009110:	f06f 030a 	mvn.w	r3, #10
 8009114:	e087      	b.n	8009226 <netconn_recv_data+0x18a>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	f893 3020 	ldrb.w	r3, [r3, #32]
 800911c:	f003 0302 	and.w	r3, r3, #2
 8009120:	2b00      	cmp	r3, #0
 8009122:	d110      	bne.n	8009146 <netconn_recv_data+0xaa>
 8009124:	79fb      	ldrb	r3, [r7, #7]
 8009126:	f003 0304 	and.w	r3, r3, #4
 800912a:	2b00      	cmp	r3, #0
 800912c:	d10b      	bne.n	8009146 <netconn_recv_data+0xaa>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009134:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8009138:	2b00      	cmp	r3, #0
 800913a:	d104      	bne.n	8009146 <netconn_recv_data+0xaa>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8009142:	2b00      	cmp	r3, #0
 8009144:	d024      	beq.n	8009190 <netconn_recv_data+0xf4>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	3310      	adds	r3, #16
 800914a:	f107 0218 	add.w	r2, r7, #24
 800914e:	4611      	mov	r1, r2
 8009150:	4618      	mov	r0, r3
 8009152:	f00c ffd0 	bl	80160f6 <sys_arch_mbox_tryfetch>
 8009156:	4603      	mov	r3, r0
 8009158:	f1b3 3fff 	cmp.w	r3, #4294967295
 800915c:	d129      	bne.n	80091b2 <netconn_recv_data+0x116>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 800915e:	68f8      	ldr	r0, [r7, #12]
 8009160:	f000 fab3 	bl	80096ca <netconn_err>
 8009164:	4603      	mov	r3, r0
 8009166:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 8009168:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800916c:	2b00      	cmp	r3, #0
 800916e:	d002      	beq.n	8009176 <netconn_recv_data+0xda>
        /* return pending error */
        return err;
 8009170:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8009174:	e057      	b.n	8009226 <netconn_recv_data+0x18a>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	f893 3020 	ldrb.w	r3, [r3, #32]
 800917c:	f003 0301 	and.w	r3, r3, #1
 8009180:	2b00      	cmp	r3, #0
 8009182:	d002      	beq.n	800918a <netconn_recv_data+0xee>
        return ERR_CONN;
 8009184:	f06f 030a 	mvn.w	r3, #10
 8009188:	e04d      	b.n	8009226 <netconn_recv_data+0x18a>
      }
      return ERR_WOULDBLOCK;
 800918a:	f06f 0306 	mvn.w	r3, #6
 800918e:	e04a      	b.n	8009226 <netconn_recv_data+0x18a>
    }
  } else {
#if LWIP_SO_RCVTIMEO
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	f103 0010 	add.w	r0, r3, #16
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	69da      	ldr	r2, [r3, #28]
 800919a:	f107 0318 	add.w	r3, r7, #24
 800919e:	4619      	mov	r1, r3
 80091a0:	f00c ff6a 	bl	8016078 <sys_arch_mbox_fetch>
 80091a4:	4603      	mov	r3, r0
 80091a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091aa:	d102      	bne.n	80091b2 <netconn_recv_data+0x116>
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
 80091ac:	f06f 0302 	mvn.w	r3, #2
 80091b0:	e039      	b.n	8009226 <netconn_recv_data+0x18a>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	781b      	ldrb	r3, [r3, #0]
 80091b6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80091ba:	2b10      	cmp	r3, #16
 80091bc:	d117      	bne.n	80091ee <netconn_recv_data+0x152>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 80091be:	69bb      	ldr	r3, [r7, #24]
 80091c0:	f107 0217 	add.w	r2, r7, #23
 80091c4:	4611      	mov	r1, r2
 80091c6:	4618      	mov	r0, r3
 80091c8:	f000 fad0 	bl	800976c <lwip_netconn_is_err_msg>
 80091cc:	4603      	mov	r3, r0
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d009      	beq.n	80091e6 <netconn_recv_data+0x14a>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 80091d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80091d6:	f113 0f0f 	cmn.w	r3, #15
 80091da:	d101      	bne.n	80091e0 <netconn_recv_data+0x144>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 80091dc:	2300      	movs	r3, #0
 80091de:	e022      	b.n	8009226 <netconn_recv_data+0x18a>
      }
      return err;
 80091e0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80091e4:	e01f      	b.n	8009226 <netconn_recv_data+0x18a>
    }
    len = ((struct pbuf *)buf)->tot_len;
 80091e6:	69bb      	ldr	r3, [r7, #24]
 80091e8:	891b      	ldrh	r3, [r3, #8]
 80091ea:	83fb      	strh	r3, [r7, #30]
 80091ec:	e00d      	b.n	800920a <netconn_recv_data+0x16e>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 80091ee:	69bb      	ldr	r3, [r7, #24]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d106      	bne.n	8009202 <netconn_recv_data+0x166>
 80091f4:	4b0e      	ldr	r3, [pc, #56]	@ (8009230 <netconn_recv_data+0x194>)
 80091f6:	f240 2291 	movw	r2, #657	@ 0x291
 80091fa:	4911      	ldr	r1, [pc, #68]	@ (8009240 <netconn_recv_data+0x1a4>)
 80091fc:	480e      	ldr	r0, [pc, #56]	@ (8009238 <netconn_recv_data+0x19c>)
 80091fe:	f00d f9cf 	bl	80165a0 <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 8009202:	69bb      	ldr	r3, [r7, #24]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	891b      	ldrh	r3, [r3, #8]
 8009208:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800920e:	2b00      	cmp	r3, #0
 8009210:	d005      	beq.n	800921e <netconn_recv_data+0x182>
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009216:	8bfa      	ldrh	r2, [r7, #30]
 8009218:	2101      	movs	r1, #1
 800921a:	68f8      	ldr	r0, [r7, #12]
 800921c:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 800921e:	69ba      	ldr	r2, [r7, #24]
 8009220:	68bb      	ldr	r3, [r7, #8]
 8009222:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 8009224:	2300      	movs	r3, #0
}
 8009226:	4618      	mov	r0, r3
 8009228:	3720      	adds	r7, #32
 800922a:	46bd      	mov	sp, r7
 800922c:	bd80      	pop	{r7, pc}
 800922e:	bf00      	nop
 8009230:	08017b2c 	.word	0x08017b2c
 8009234:	08017d44 	.word	0x08017d44
 8009238:	08017b84 	.word	0x08017b84
 800923c:	08017d64 	.word	0x08017d64
 8009240:	08017d80 	.word	0x08017d80

08009244 <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 8009244:	b580      	push	{r7, lr}
 8009246:	b084      	sub	sp, #16
 8009248:	af00      	add	r7, sp, #0
 800924a:	60f8      	str	r0, [r7, #12]
 800924c:	60b9      	str	r1, [r7, #8]
 800924e:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	2b00      	cmp	r3, #0
 8009254:	d005      	beq.n	8009262 <netconn_tcp_recvd_msg+0x1e>
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	781b      	ldrb	r3, [r3, #0]
 800925a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800925e:	2b10      	cmp	r3, #16
 8009260:	d009      	beq.n	8009276 <netconn_tcp_recvd_msg+0x32>
 8009262:	4b0c      	ldr	r3, [pc, #48]	@ (8009294 <netconn_tcp_recvd_msg+0x50>)
 8009264:	f240 22a7 	movw	r2, #679	@ 0x2a7
 8009268:	490b      	ldr	r1, [pc, #44]	@ (8009298 <netconn_tcp_recvd_msg+0x54>)
 800926a:	480c      	ldr	r0, [pc, #48]	@ (800929c <netconn_tcp_recvd_msg+0x58>)
 800926c:	f00d f998 	bl	80165a0 <iprintf>
 8009270:	f06f 030f 	mvn.w	r3, #15
 8009274:	e00a      	b.n	800928c <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	68fa      	ldr	r2, [r7, #12]
 800927a:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	68ba      	ldr	r2, [r7, #8]
 8009280:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 8009282:	6879      	ldr	r1, [r7, #4]
 8009284:	4806      	ldr	r0, [pc, #24]	@ (80092a0 <netconn_tcp_recvd_msg+0x5c>)
 8009286:	f7ff fd37 	bl	8008cf8 <netconn_apimsg>
 800928a:	4603      	mov	r3, r0
}
 800928c:	4618      	mov	r0, r3
 800928e:	3710      	adds	r7, #16
 8009290:	46bd      	mov	sp, r7
 8009292:	bd80      	pop	{r7, pc}
 8009294:	08017b2c 	.word	0x08017b2c
 8009298:	08017d8c 	.word	0x08017d8c
 800929c:	08017b84 	.word	0x08017b84
 80092a0:	0800a899 	.word	0x0800a899

080092a4 <netconn_recv_data_tcp>:
  return err;
}

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 80092a4:	b580      	push	{r7, lr}
 80092a6:	b090      	sub	sp, #64	@ 0x40
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	60f8      	str	r0, [r7, #12]
 80092ac:	60b9      	str	r1, [r7, #8]
 80092ae:	4613      	mov	r3, r2
 80092b0:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	3310      	adds	r3, #16
 80092b6:	4618      	mov	r0, r3
 80092b8:	f00c ff39 	bl	801612e <sys_mbox_valid>
 80092bc:	4603      	mov	r3, r0
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d102      	bne.n	80092c8 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 80092c2:	f06f 030a 	mvn.w	r3, #10
 80092c6:	e072      	b.n	80093ae <netconn_recv_data_tcp+0x10a>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	f893 3020 	ldrb.w	r3, [r3, #32]
 80092ce:	b25b      	sxtb	r3, r3
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	da09      	bge.n	80092e8 <netconn_recv_data_tcp+0x44>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80092da:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80092de:	b2da      	uxtb	r2, r3
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	f883 2020 	strb.w	r2, [r3, #32]
    goto handle_fin;
 80092e6:	e03b      	b.n	8009360 <netconn_recv_data_tcp+0xbc>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 80092e8:	79fb      	ldrb	r3, [r7, #7]
 80092ea:	461a      	mov	r2, r3
 80092ec:	68b9      	ldr	r1, [r7, #8]
 80092ee:	68f8      	ldr	r0, [r7, #12]
 80092f0:	f7ff fed4 	bl	800909c <netconn_recv_data>
 80092f4:	4603      	mov	r3, r0
 80092f6:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  if (err != ERR_OK) {
 80092fa:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d002      	beq.n	8009308 <netconn_recv_data_tcp+0x64>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 8009302:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8009306:	e052      	b.n	80093ae <netconn_recv_data_tcp+0x10a>
  }
  buf = *new_buf;
 8009308:	68bb      	ldr	r3, [r7, #8]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 800930e:	79fb      	ldrb	r3, [r7, #7]
 8009310:	f003 0308 	and.w	r3, r3, #8
 8009314:	2b00      	cmp	r3, #0
 8009316:	d10e      	bne.n	8009336 <netconn_recv_data_tcp+0x92>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 8009318:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800931a:	2b00      	cmp	r3, #0
 800931c:	d002      	beq.n	8009324 <netconn_recv_data_tcp+0x80>
 800931e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009320:	891b      	ldrh	r3, [r3, #8]
 8009322:	e000      	b.n	8009326 <netconn_recv_data_tcp+0x82>
 8009324:	2301      	movs	r3, #1
 8009326:	86fb      	strh	r3, [r7, #54]	@ 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 8009328:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800932a:	f107 0214 	add.w	r2, r7, #20
 800932e:	4619      	mov	r1, r3
 8009330:	68f8      	ldr	r0, [r7, #12]
 8009332:	f7ff ff87 	bl	8009244 <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 8009336:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009338:	2b00      	cmp	r3, #0
 800933a:	d136      	bne.n	80093aa <netconn_recv_data_tcp+0x106>
    if (apiflags & NETCONN_NOFIN) {
 800933c:	79fb      	ldrb	r3, [r7, #7]
 800933e:	f003 0310 	and.w	r3, r3, #16
 8009342:	2b00      	cmp	r3, #0
 8009344:	d00b      	beq.n	800935e <netconn_recv_data_tcp+0xba>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	f893 3020 	ldrb.w	r3, [r3, #32]
 800934c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009350:	b2da      	uxtb	r2, r3
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	f883 2020 	strb.w	r2, [r3, #32]
      return ERR_WOULDBLOCK;
 8009358:	f06f 0306 	mvn.w	r3, #6
 800935c:	e027      	b.n	80093ae <netconn_recv_data_tcp+0x10a>
    } else {
handle_fin:
 800935e:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009364:	2b00      	cmp	r3, #0
 8009366:	d005      	beq.n	8009374 <netconn_recv_data_tcp+0xd0>
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800936c:	2200      	movs	r2, #0
 800936e:	2101      	movs	r1, #1
 8009370:	68f8      	ldr	r0, [r7, #12]
 8009372:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	685b      	ldr	r3, [r3, #4]
 8009378:	2b00      	cmp	r3, #0
 800937a:	d10f      	bne.n	800939c <netconn_recv_data_tcp+0xf8>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 800937c:	68f8      	ldr	r0, [r7, #12]
 800937e:	f000 f9a4 	bl	80096ca <netconn_err>
 8009382:	4603      	mov	r3, r0
 8009384:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        if (err != ERR_OK) {
 8009388:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800938c:	2b00      	cmp	r3, #0
 800938e:	d002      	beq.n	8009396 <netconn_recv_data_tcp+0xf2>
          return err;
 8009390:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8009394:	e00b      	b.n	80093ae <netconn_recv_data_tcp+0x10a>
        }
        return ERR_RST;
 8009396:	f06f 030d 	mvn.w	r3, #13
 800939a:	e008      	b.n	80093ae <netconn_recv_data_tcp+0x10a>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 800939c:	2101      	movs	r1, #1
 800939e:	68f8      	ldr	r0, [r7, #12]
 80093a0:	f000 f956 	bl	8009650 <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 80093a4:	f06f 030e 	mvn.w	r3, #14
 80093a8:	e001      	b.n	80093ae <netconn_recv_data_tcp+0x10a>
    }
  }
  return err;
 80093aa:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 80093ae:	4618      	mov	r0, r3
 80093b0:	3740      	adds	r7, #64	@ 0x40
 80093b2:	46bd      	mov	sp, r7
 80093b4:	bd80      	pop	{r7, pc}
	...

080093b8 <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 80093b8:	b580      	push	{r7, lr}
 80093ba:	b086      	sub	sp, #24
 80093bc:	af00      	add	r7, sp, #0
 80093be:	6078      	str	r0, [r7, #4]
 80093c0:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 80093c2:	2300      	movs	r3, #0
 80093c4:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 80093c6:	683b      	ldr	r3, [r7, #0]
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d109      	bne.n	80093e0 <netconn_recv+0x28>
 80093cc:	4b32      	ldr	r3, [pc, #200]	@ (8009498 <netconn_recv+0xe0>)
 80093ce:	f240 3263 	movw	r2, #867	@ 0x363
 80093d2:	4932      	ldr	r1, [pc, #200]	@ (800949c <netconn_recv+0xe4>)
 80093d4:	4832      	ldr	r0, [pc, #200]	@ (80094a0 <netconn_recv+0xe8>)
 80093d6:	f00d f8e3 	bl	80165a0 <iprintf>
 80093da:	f06f 030f 	mvn.w	r3, #15
 80093de:	e056      	b.n	800948e <netconn_recv+0xd6>
  *new_buf = NULL;
 80093e0:	683b      	ldr	r3, [r7, #0]
 80093e2:	2200      	movs	r2, #0
 80093e4:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d109      	bne.n	8009400 <netconn_recv+0x48>
 80093ec:	4b2a      	ldr	r3, [pc, #168]	@ (8009498 <netconn_recv+0xe0>)
 80093ee:	f240 3265 	movw	r2, #869	@ 0x365
 80093f2:	492c      	ldr	r1, [pc, #176]	@ (80094a4 <netconn_recv+0xec>)
 80093f4:	482a      	ldr	r0, [pc, #168]	@ (80094a0 <netconn_recv+0xe8>)
 80093f6:	f00d f8d3 	bl	80165a0 <iprintf>
 80093fa:	f06f 030f 	mvn.w	r3, #15
 80093fe:	e046      	b.n	800948e <netconn_recv+0xd6>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	781b      	ldrb	r3, [r3, #0]
 8009404:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009408:	2b10      	cmp	r3, #16
 800940a:	d13a      	bne.n	8009482 <netconn_recv+0xca>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 800940c:	2300      	movs	r3, #0
 800940e:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8009410:	2006      	movs	r0, #6
 8009412:	f002 fc3f 	bl	800bc94 <memp_malloc>
 8009416:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 8009418:	697b      	ldr	r3, [r7, #20]
 800941a:	2b00      	cmp	r3, #0
 800941c:	d102      	bne.n	8009424 <netconn_recv+0x6c>
      return ERR_MEM;
 800941e:	f04f 33ff 	mov.w	r3, #4294967295
 8009422:	e034      	b.n	800948e <netconn_recv+0xd6>
    }

    err = netconn_recv_data_tcp(conn, &p, 0);
 8009424:	f107 030c 	add.w	r3, r7, #12
 8009428:	2200      	movs	r2, #0
 800942a:	4619      	mov	r1, r3
 800942c:	6878      	ldr	r0, [r7, #4]
 800942e:	f7ff ff39 	bl	80092a4 <netconn_recv_data_tcp>
 8009432:	4603      	mov	r3, r0
 8009434:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8009436:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800943a:	2b00      	cmp	r3, #0
 800943c:	d006      	beq.n	800944c <netconn_recv+0x94>
      memp_free(MEMP_NETBUF, buf);
 800943e:	6979      	ldr	r1, [r7, #20]
 8009440:	2006      	movs	r0, #6
 8009442:	f002 fc9d 	bl	800bd80 <memp_free>
      return err;
 8009446:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800944a:	e020      	b.n	800948e <netconn_recv+0xd6>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	2b00      	cmp	r3, #0
 8009450:	d106      	bne.n	8009460 <netconn_recv+0xa8>
 8009452:	4b11      	ldr	r3, [pc, #68]	@ (8009498 <netconn_recv+0xe0>)
 8009454:	f240 3279 	movw	r2, #889	@ 0x379
 8009458:	4913      	ldr	r1, [pc, #76]	@ (80094a8 <netconn_recv+0xf0>)
 800945a:	4811      	ldr	r0, [pc, #68]	@ (80094a0 <netconn_recv+0xe8>)
 800945c:	f00d f8a0 	bl	80165a0 <iprintf>

    buf->p = p;
 8009460:	68fa      	ldr	r2, [r7, #12]
 8009462:	697b      	ldr	r3, [r7, #20]
 8009464:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 8009466:	68fa      	ldr	r2, [r7, #12]
 8009468:	697b      	ldr	r3, [r7, #20]
 800946a:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 800946c:	697b      	ldr	r3, [r7, #20]
 800946e:	2200      	movs	r2, #0
 8009470:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 8009472:	697b      	ldr	r3, [r7, #20]
 8009474:	2200      	movs	r2, #0
 8009476:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 8009478:	683b      	ldr	r3, [r7, #0]
 800947a:	697a      	ldr	r2, [r7, #20]
 800947c:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 800947e:	2300      	movs	r3, #0
 8009480:	e005      	b.n	800948e <netconn_recv+0xd6>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf, 0);
 8009482:	2200      	movs	r2, #0
 8009484:	6839      	ldr	r1, [r7, #0]
 8009486:	6878      	ldr	r0, [r7, #4]
 8009488:	f7ff fe08 	bl	800909c <netconn_recv_data>
 800948c:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 800948e:	4618      	mov	r0, r3
 8009490:	3718      	adds	r7, #24
 8009492:	46bd      	mov	sp, r7
 8009494:	bd80      	pop	{r7, pc}
 8009496:	bf00      	nop
 8009498:	08017b2c 	.word	0x08017b2c
 800949c:	08017d44 	.word	0x08017d44
 80094a0:	08017b84 	.word	0x08017b84
 80094a4:	08017d64 	.word	0x08017d64
 80094a8:	08017ddc 	.word	0x08017ddc

080094ac <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 80094ac:	b580      	push	{r7, lr}
 80094ae:	b088      	sub	sp, #32
 80094b0:	af02      	add	r7, sp, #8
 80094b2:	60f8      	str	r0, [r7, #12]
 80094b4:	60b9      	str	r1, [r7, #8]
 80094b6:	607a      	str	r2, [r7, #4]
 80094b8:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 80094ba:	68bb      	ldr	r3, [r7, #8]
 80094bc:	613b      	str	r3, [r7, #16]
  vector.len = size;
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 80094c2:	78fa      	ldrb	r2, [r7, #3]
 80094c4:	f107 0110 	add.w	r1, r7, #16
 80094c8:	6a3b      	ldr	r3, [r7, #32]
 80094ca:	9300      	str	r3, [sp, #0]
 80094cc:	4613      	mov	r3, r2
 80094ce:	2201      	movs	r2, #1
 80094d0:	68f8      	ldr	r0, [r7, #12]
 80094d2:	f000 f805 	bl	80094e0 <netconn_write_vectors_partly>
 80094d6:	4603      	mov	r3, r0
}
 80094d8:	4618      	mov	r0, r3
 80094da:	3718      	adds	r7, #24
 80094dc:	46bd      	mov	sp, r7
 80094de:	bd80      	pop	{r7, pc}

080094e0 <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 80094e0:	b580      	push	{r7, lr}
 80094e2:	b092      	sub	sp, #72	@ 0x48
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	60f8      	str	r0, [r7, #12]
 80094e8:	60b9      	str	r1, [r7, #8]
 80094ea:	4611      	mov	r1, r2
 80094ec:	461a      	mov	r2, r3
 80094ee:	460b      	mov	r3, r1
 80094f0:	80fb      	strh	r3, [r7, #6]
 80094f2:	4613      	mov	r3, r2
 80094f4:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d109      	bne.n	8009510 <netconn_write_vectors_partly+0x30>
 80094fc:	4b4e      	ldr	r3, [pc, #312]	@ (8009638 <netconn_write_vectors_partly+0x158>)
 80094fe:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 8009502:	494e      	ldr	r1, [pc, #312]	@ (800963c <netconn_write_vectors_partly+0x15c>)
 8009504:	484e      	ldr	r0, [pc, #312]	@ (8009640 <netconn_write_vectors_partly+0x160>)
 8009506:	f00d f84b 	bl	80165a0 <iprintf>
 800950a:	f06f 030f 	mvn.w	r3, #15
 800950e:	e08f      	b.n	8009630 <netconn_write_vectors_partly+0x150>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	781b      	ldrb	r3, [r3, #0]
 8009514:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009518:	2b10      	cmp	r3, #16
 800951a:	d009      	beq.n	8009530 <netconn_write_vectors_partly+0x50>
 800951c:	4b46      	ldr	r3, [pc, #280]	@ (8009638 <netconn_write_vectors_partly+0x158>)
 800951e:	f240 32ef 	movw	r2, #1007	@ 0x3ef
 8009522:	4948      	ldr	r1, [pc, #288]	@ (8009644 <netconn_write_vectors_partly+0x164>)
 8009524:	4846      	ldr	r0, [pc, #280]	@ (8009640 <netconn_write_vectors_partly+0x160>)
 8009526:	f00d f83b 	bl	80165a0 <iprintf>
 800952a:	f06f 0305 	mvn.w	r3, #5
 800952e:	e07f      	b.n	8009630 <netconn_write_vectors_partly+0x150>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009536:	f003 0302 	and.w	r3, r3, #2
 800953a:	2b00      	cmp	r3, #0
 800953c:	d104      	bne.n	8009548 <netconn_write_vectors_partly+0x68>
 800953e:	797b      	ldrb	r3, [r7, #5]
 8009540:	f003 0304 	and.w	r3, r3, #4
 8009544:	2b00      	cmp	r3, #0
 8009546:	d001      	beq.n	800954c <netconn_write_vectors_partly+0x6c>
 8009548:	2301      	movs	r3, #1
 800954a:	e000      	b.n	800954e <netconn_write_vectors_partly+0x6e>
 800954c:	2300      	movs	r3, #0
 800954e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 8009552:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8009556:	2b00      	cmp	r3, #0
 8009558:	d005      	beq.n	8009566 <netconn_write_vectors_partly+0x86>
 800955a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800955c:	2b00      	cmp	r3, #0
 800955e:	d102      	bne.n	8009566 <netconn_write_vectors_partly+0x86>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 8009560:	f06f 0305 	mvn.w	r3, #5
 8009564:	e064      	b.n	8009630 <netconn_write_vectors_partly+0x150>
  }

  /* sum up the total size */
  size = 0;
 8009566:	2300      	movs	r3, #0
 8009568:	647b      	str	r3, [r7, #68]	@ 0x44
  for (i = 0; i < vectorcnt; i++) {
 800956a:	2300      	movs	r3, #0
 800956c:	643b      	str	r3, [r7, #64]	@ 0x40
 800956e:	e015      	b.n	800959c <netconn_write_vectors_partly+0xbc>
    size += vectors[i].len;
 8009570:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009572:	00db      	lsls	r3, r3, #3
 8009574:	68ba      	ldr	r2, [r7, #8]
 8009576:	4413      	add	r3, r2
 8009578:	685b      	ldr	r3, [r3, #4]
 800957a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800957c:	4413      	add	r3, r2
 800957e:	647b      	str	r3, [r7, #68]	@ 0x44
    if (size < vectors[i].len) {
 8009580:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009582:	00db      	lsls	r3, r3, #3
 8009584:	68ba      	ldr	r2, [r7, #8]
 8009586:	4413      	add	r3, r2
 8009588:	685b      	ldr	r3, [r3, #4]
 800958a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800958c:	429a      	cmp	r2, r3
 800958e:	d202      	bcs.n	8009596 <netconn_write_vectors_partly+0xb6>
      /* overflow */
      return ERR_VAL;
 8009590:	f06f 0305 	mvn.w	r3, #5
 8009594:	e04c      	b.n	8009630 <netconn_write_vectors_partly+0x150>
  for (i = 0; i < vectorcnt; i++) {
 8009596:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009598:	3301      	adds	r3, #1
 800959a:	643b      	str	r3, [r7, #64]	@ 0x40
 800959c:	88fb      	ldrh	r3, [r7, #6]
 800959e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80095a0:	429a      	cmp	r2, r3
 80095a2:	dbe5      	blt.n	8009570 <netconn_write_vectors_partly+0x90>
    }
  }
  if (size == 0) {
 80095a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d101      	bne.n	80095ae <netconn_write_vectors_partly+0xce>
    return ERR_OK;
 80095aa:	2300      	movs	r3, #0
 80095ac:	e040      	b.n	8009630 <netconn_write_vectors_partly+0x150>
  } else if (size > SSIZE_MAX) {
 80095ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	da0a      	bge.n	80095ca <netconn_write_vectors_partly+0xea>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 80095b4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d102      	bne.n	80095c0 <netconn_write_vectors_partly+0xe0>
      return ERR_VAL;
 80095ba:	f06f 0305 	mvn.w	r3, #5
 80095be:	e037      	b.n	8009630 <netconn_write_vectors_partly+0x150>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 80095c0:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80095c4:	63bb      	str	r3, [r7, #56]	@ 0x38
    size = (size_t)limited;
 80095c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095c8:	647b      	str	r3, [r7, #68]	@ 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 80095ce:	68bb      	ldr	r3, [r7, #8]
 80095d0:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 80095d2:	88fb      	ldrh	r3, [r7, #6]
 80095d4:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 80095d6:	2300      	movs	r3, #0
 80095d8:	627b      	str	r3, [r7, #36]	@ 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 80095da:	797b      	ldrb	r3, [r7, #5]
 80095dc:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 80095e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80095e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 80095e4:	2300      	movs	r3, #0
 80095e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 80095e8:	f107 0314 	add.w	r3, r7, #20
 80095ec:	4619      	mov	r1, r3
 80095ee:	4816      	ldr	r0, [pc, #88]	@ (8009648 <netconn_write_vectors_partly+0x168>)
 80095f0:	f7ff fb82 	bl	8008cf8 <netconn_apimsg>
 80095f4:	4603      	mov	r3, r0
 80095f6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  if (err == ERR_OK) {
 80095fa:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d114      	bne.n	800962c <netconn_write_vectors_partly+0x14c>
    if (bytes_written != NULL) {
 8009602:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009604:	2b00      	cmp	r3, #0
 8009606:	d002      	beq.n	800960e <netconn_write_vectors_partly+0x12e>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 8009608:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800960a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800960c:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 800960e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8009612:	2b00      	cmp	r3, #0
 8009614:	d10a      	bne.n	800962c <netconn_write_vectors_partly+0x14c>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 8009616:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009618:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800961a:	429a      	cmp	r2, r3
 800961c:	d006      	beq.n	800962c <netconn_write_vectors_partly+0x14c>
 800961e:	4b06      	ldr	r3, [pc, #24]	@ (8009638 <netconn_write_vectors_partly+0x158>)
 8009620:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 8009624:	4909      	ldr	r1, [pc, #36]	@ (800964c <netconn_write_vectors_partly+0x16c>)
 8009626:	4806      	ldr	r0, [pc, #24]	@ (8009640 <netconn_write_vectors_partly+0x160>)
 8009628:	f00c ffba 	bl	80165a0 <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 800962c:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 8009630:	4618      	mov	r0, r3
 8009632:	3748      	adds	r7, #72	@ 0x48
 8009634:	46bd      	mov	sp, r7
 8009636:	bd80      	pop	{r7, pc}
 8009638:	08017b2c 	.word	0x08017b2c
 800963c:	08017e04 	.word	0x08017e04
 8009640:	08017b84 	.word	0x08017b84
 8009644:	08017e20 	.word	0x08017e20
 8009648:	0800aca5 	.word	0x0800aca5
 800964c:	08017e44 	.word	0x08017e44

08009650 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 8009650:	b580      	push	{r7, lr}
 8009652:	b08c      	sub	sp, #48	@ 0x30
 8009654:	af00      	add	r7, sp, #0
 8009656:	6078      	str	r0, [r7, #4]
 8009658:	460b      	mov	r3, r1
 800965a:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	2b00      	cmp	r3, #0
 8009660:	d109      	bne.n	8009676 <netconn_close_shutdown+0x26>
 8009662:	4b0f      	ldr	r3, [pc, #60]	@ (80096a0 <netconn_close_shutdown+0x50>)
 8009664:	f240 4247 	movw	r2, #1095	@ 0x447
 8009668:	490e      	ldr	r1, [pc, #56]	@ (80096a4 <netconn_close_shutdown+0x54>)
 800966a:	480f      	ldr	r0, [pc, #60]	@ (80096a8 <netconn_close_shutdown+0x58>)
 800966c:	f00c ff98 	bl	80165a0 <iprintf>
 8009670:	f06f 030f 	mvn.w	r3, #15
 8009674:	e010      	b.n	8009698 <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 800967a:	78fb      	ldrb	r3, [r7, #3]
 800967c:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800967e:	2329      	movs	r3, #41	@ 0x29
 8009680:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 8009682:	f107 030c 	add.w	r3, r7, #12
 8009686:	4619      	mov	r1, r3
 8009688:	4808      	ldr	r0, [pc, #32]	@ (80096ac <netconn_close_shutdown+0x5c>)
 800968a:	f7ff fb35 	bl	8008cf8 <netconn_apimsg>
 800968e:	4603      	mov	r3, r0
 8009690:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8009694:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 8009698:	4618      	mov	r0, r3
 800969a:	3730      	adds	r7, #48	@ 0x30
 800969c:	46bd      	mov	sp, r7
 800969e:	bd80      	pop	{r7, pc}
 80096a0:	08017b2c 	.word	0x08017b2c
 80096a4:	08017e68 	.word	0x08017e68
 80096a8:	08017b84 	.word	0x08017b84
 80096ac:	0800adbd 	.word	0x0800adbd

080096b0 <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
 80096b0:	b580      	push	{r7, lr}
 80096b2:	b082      	sub	sp, #8
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	6078      	str	r0, [r7, #4]
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 80096b8:	2103      	movs	r1, #3
 80096ba:	6878      	ldr	r0, [r7, #4]
 80096bc:	f7ff ffc8 	bl	8009650 <netconn_close_shutdown>
 80096c0:	4603      	mov	r3, r0
}
 80096c2:	4618      	mov	r0, r3
 80096c4:	3708      	adds	r7, #8
 80096c6:	46bd      	mov	sp, r7
 80096c8:	bd80      	pop	{r7, pc}

080096ca <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 80096ca:	b580      	push	{r7, lr}
 80096cc:	b084      	sub	sp, #16
 80096ce:	af00      	add	r7, sp, #0
 80096d0:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d101      	bne.n	80096dc <netconn_err+0x12>
    return ERR_OK;
 80096d8:	2300      	movs	r3, #0
 80096da:	e00d      	b.n	80096f8 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 80096dc:	f00c fe42 	bl	8016364 <sys_arch_protect>
 80096e0:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	7a1b      	ldrb	r3, [r3, #8]
 80096e6:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	2200      	movs	r2, #0
 80096ec:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 80096ee:	68f8      	ldr	r0, [r7, #12]
 80096f0:	f00c fe46 	bl	8016380 <sys_arch_unprotect>
  return err;
 80096f4:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80096f8:	4618      	mov	r0, r3
 80096fa:	3710      	adds	r7, #16
 80096fc:	46bd      	mov	sp, r7
 80096fe:	bd80      	pop	{r7, pc}

08009700 <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 8009700:	b580      	push	{r7, lr}
 8009702:	b082      	sub	sp, #8
 8009704:	af00      	add	r7, sp, #0
 8009706:	4603      	mov	r3, r0
 8009708:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 800970a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800970e:	f113 0f0d 	cmn.w	r3, #13
 8009712:	d009      	beq.n	8009728 <lwip_netconn_err_to_msg+0x28>
 8009714:	f113 0f0d 	cmn.w	r3, #13
 8009718:	dc0c      	bgt.n	8009734 <lwip_netconn_err_to_msg+0x34>
 800971a:	f113 0f0f 	cmn.w	r3, #15
 800971e:	d007      	beq.n	8009730 <lwip_netconn_err_to_msg+0x30>
 8009720:	f113 0f0e 	cmn.w	r3, #14
 8009724:	d002      	beq.n	800972c <lwip_netconn_err_to_msg+0x2c>
 8009726:	e005      	b.n	8009734 <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 8009728:	4b0a      	ldr	r3, [pc, #40]	@ (8009754 <lwip_netconn_err_to_msg+0x54>)
 800972a:	e00e      	b.n	800974a <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 800972c:	4b0a      	ldr	r3, [pc, #40]	@ (8009758 <lwip_netconn_err_to_msg+0x58>)
 800972e:	e00c      	b.n	800974a <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 8009730:	4b0a      	ldr	r3, [pc, #40]	@ (800975c <lwip_netconn_err_to_msg+0x5c>)
 8009732:	e00a      	b.n	800974a <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 8009734:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009738:	2b00      	cmp	r3, #0
 800973a:	d005      	beq.n	8009748 <lwip_netconn_err_to_msg+0x48>
 800973c:	4b08      	ldr	r3, [pc, #32]	@ (8009760 <lwip_netconn_err_to_msg+0x60>)
 800973e:	227d      	movs	r2, #125	@ 0x7d
 8009740:	4908      	ldr	r1, [pc, #32]	@ (8009764 <lwip_netconn_err_to_msg+0x64>)
 8009742:	4809      	ldr	r0, [pc, #36]	@ (8009768 <lwip_netconn_err_to_msg+0x68>)
 8009744:	f00c ff2c 	bl	80165a0 <iprintf>
      return NULL;
 8009748:	2300      	movs	r3, #0
  }
}
 800974a:	4618      	mov	r0, r3
 800974c:	3708      	adds	r7, #8
 800974e:	46bd      	mov	sp, r7
 8009750:	bd80      	pop	{r7, pc}
 8009752:	bf00      	nop
 8009754:	0801b020 	.word	0x0801b020
 8009758:	0801b021 	.word	0x0801b021
 800975c:	0801b022 	.word	0x0801b022
 8009760:	08017e84 	.word	0x08017e84
 8009764:	08017eb8 	.word	0x08017eb8
 8009768:	08017ec8 	.word	0x08017ec8

0800976c <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 800976c:	b580      	push	{r7, lr}
 800976e:	b082      	sub	sp, #8
 8009770:	af00      	add	r7, sp, #0
 8009772:	6078      	str	r0, [r7, #4]
 8009774:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 8009776:	683b      	ldr	r3, [r7, #0]
 8009778:	2b00      	cmp	r3, #0
 800977a:	d105      	bne.n	8009788 <lwip_netconn_is_err_msg+0x1c>
 800977c:	4b12      	ldr	r3, [pc, #72]	@ (80097c8 <lwip_netconn_is_err_msg+0x5c>)
 800977e:	2285      	movs	r2, #133	@ 0x85
 8009780:	4912      	ldr	r1, [pc, #72]	@ (80097cc <lwip_netconn_is_err_msg+0x60>)
 8009782:	4813      	ldr	r0, [pc, #76]	@ (80097d0 <lwip_netconn_is_err_msg+0x64>)
 8009784:	f00c ff0c 	bl	80165a0 <iprintf>

  if (msg == &netconn_aborted) {
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	4a12      	ldr	r2, [pc, #72]	@ (80097d4 <lwip_netconn_is_err_msg+0x68>)
 800978c:	4293      	cmp	r3, r2
 800978e:	d104      	bne.n	800979a <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 8009790:	683b      	ldr	r3, [r7, #0]
 8009792:	22f3      	movs	r2, #243	@ 0xf3
 8009794:	701a      	strb	r2, [r3, #0]
    return 1;
 8009796:	2301      	movs	r3, #1
 8009798:	e012      	b.n	80097c0 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	4a0e      	ldr	r2, [pc, #56]	@ (80097d8 <lwip_netconn_is_err_msg+0x6c>)
 800979e:	4293      	cmp	r3, r2
 80097a0:	d104      	bne.n	80097ac <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 80097a2:	683b      	ldr	r3, [r7, #0]
 80097a4:	22f2      	movs	r2, #242	@ 0xf2
 80097a6:	701a      	strb	r2, [r3, #0]
    return 1;
 80097a8:	2301      	movs	r3, #1
 80097aa:	e009      	b.n	80097c0 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	4a0b      	ldr	r2, [pc, #44]	@ (80097dc <lwip_netconn_is_err_msg+0x70>)
 80097b0:	4293      	cmp	r3, r2
 80097b2:	d104      	bne.n	80097be <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 80097b4:	683b      	ldr	r3, [r7, #0]
 80097b6:	22f1      	movs	r2, #241	@ 0xf1
 80097b8:	701a      	strb	r2, [r3, #0]
    return 1;
 80097ba:	2301      	movs	r3, #1
 80097bc:	e000      	b.n	80097c0 <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 80097be:	2300      	movs	r3, #0
}
 80097c0:	4618      	mov	r0, r3
 80097c2:	3708      	adds	r7, #8
 80097c4:	46bd      	mov	sp, r7
 80097c6:	bd80      	pop	{r7, pc}
 80097c8:	08017e84 	.word	0x08017e84
 80097cc:	08017ef0 	.word	0x08017ef0
 80097d0:	08017ec8 	.word	0x08017ec8
 80097d4:	0801b020 	.word	0x0801b020
 80097d8:	0801b021 	.word	0x0801b021
 80097dc:	0801b022 	.word	0x0801b022

080097e0 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 80097e0:	b580      	push	{r7, lr}
 80097e2:	b088      	sub	sp, #32
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	60f8      	str	r0, [r7, #12]
 80097e8:	60b9      	str	r1, [r7, #8]
 80097ea:	607a      	str	r2, [r7, #4]
 80097ec:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 80097ee:	68bb      	ldr	r3, [r7, #8]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d105      	bne.n	8009800 <recv_udp+0x20>
 80097f4:	4b34      	ldr	r3, [pc, #208]	@ (80098c8 <recv_udp+0xe8>)
 80097f6:	22e5      	movs	r2, #229	@ 0xe5
 80097f8:	4934      	ldr	r1, [pc, #208]	@ (80098cc <recv_udp+0xec>)
 80097fa:	4835      	ldr	r0, [pc, #212]	@ (80098d0 <recv_udp+0xf0>)
 80097fc:	f00c fed0 	bl	80165a0 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	2b00      	cmp	r3, #0
 8009804:	d105      	bne.n	8009812 <recv_udp+0x32>
 8009806:	4b30      	ldr	r3, [pc, #192]	@ (80098c8 <recv_udp+0xe8>)
 8009808:	22e6      	movs	r2, #230	@ 0xe6
 800980a:	4932      	ldr	r1, [pc, #200]	@ (80098d4 <recv_udp+0xf4>)
 800980c:	4830      	ldr	r0, [pc, #192]	@ (80098d0 <recv_udp+0xf0>)
 800980e:	f00c fec7 	bl	80165a0 <iprintf>
  conn = (struct netconn *)arg;
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 8009816:	69fb      	ldr	r3, [r7, #28]
 8009818:	2b00      	cmp	r3, #0
 800981a:	d103      	bne.n	8009824 <recv_udp+0x44>
    pbuf_free(p);
 800981c:	6878      	ldr	r0, [r7, #4]
 800981e:	f003 f953 	bl	800cac8 <pbuf_free>
    return;
 8009822:	e04d      	b.n	80098c0 <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 8009824:	69fb      	ldr	r3, [r7, #28]
 8009826:	685b      	ldr	r3, [r3, #4]
 8009828:	68ba      	ldr	r2, [r7, #8]
 800982a:	429a      	cmp	r2, r3
 800982c:	d005      	beq.n	800983a <recv_udp+0x5a>
 800982e:	4b26      	ldr	r3, [pc, #152]	@ (80098c8 <recv_udp+0xe8>)
 8009830:	22ee      	movs	r2, #238	@ 0xee
 8009832:	4929      	ldr	r1, [pc, #164]	@ (80098d8 <recv_udp+0xf8>)
 8009834:	4826      	ldr	r0, [pc, #152]	@ (80098d0 <recv_udp+0xf0>)
 8009836:	f00c feb3 	bl	80165a0 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800983a:	69fb      	ldr	r3, [r7, #28]
 800983c:	3310      	adds	r3, #16
 800983e:	4618      	mov	r0, r3
 8009840:	f00c fc75 	bl	801612e <sys_mbox_valid>
 8009844:	4603      	mov	r3, r0
 8009846:	2b00      	cmp	r3, #0
 8009848:	d103      	bne.n	8009852 <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 800984a:	6878      	ldr	r0, [r7, #4]
 800984c:	f003 f93c 	bl	800cac8 <pbuf_free>
    return;
 8009850:	e036      	b.n	80098c0 <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8009852:	2006      	movs	r0, #6
 8009854:	f002 fa1e 	bl	800bc94 <memp_malloc>
 8009858:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 800985a:	69bb      	ldr	r3, [r7, #24]
 800985c:	2b00      	cmp	r3, #0
 800985e:	d103      	bne.n	8009868 <recv_udp+0x88>
    pbuf_free(p);
 8009860:	6878      	ldr	r0, [r7, #4]
 8009862:	f003 f931 	bl	800cac8 <pbuf_free>
    return;
 8009866:	e02b      	b.n	80098c0 <recv_udp+0xe0>
  } else {
    buf->p = p;
 8009868:	69bb      	ldr	r3, [r7, #24]
 800986a:	687a      	ldr	r2, [r7, #4]
 800986c:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800986e:	69bb      	ldr	r3, [r7, #24]
 8009870:	687a      	ldr	r2, [r7, #4]
 8009872:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 8009874:	683b      	ldr	r3, [r7, #0]
 8009876:	2b00      	cmp	r3, #0
 8009878:	d002      	beq.n	8009880 <recv_udp+0xa0>
 800987a:	683b      	ldr	r3, [r7, #0]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	e000      	b.n	8009882 <recv_udp+0xa2>
 8009880:	2300      	movs	r3, #0
 8009882:	69ba      	ldr	r2, [r7, #24]
 8009884:	6093      	str	r3, [r2, #8]
    buf->port = port;
 8009886:	69bb      	ldr	r3, [r7, #24]
 8009888:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800988a:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	891b      	ldrh	r3, [r3, #8]
 8009890:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 8009892:	69fb      	ldr	r3, [r7, #28]
 8009894:	3310      	adds	r3, #16
 8009896:	69b9      	ldr	r1, [r7, #24]
 8009898:	4618      	mov	r0, r3
 800989a:	f00c fbd3 	bl	8016044 <sys_mbox_trypost>
 800989e:	4603      	mov	r3, r0
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d003      	beq.n	80098ac <recv_udp+0xcc>
    netbuf_delete(buf);
 80098a4:	69b8      	ldr	r0, [r7, #24]
 80098a6:	f001 fb15 	bl	800aed4 <netbuf_delete>
    return;
 80098aa:	e009      	b.n	80098c0 <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 80098ac:	69fb      	ldr	r3, [r7, #28]
 80098ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d005      	beq.n	80098c0 <recv_udp+0xe0>
 80098b4:	69fb      	ldr	r3, [r7, #28]
 80098b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098b8:	8afa      	ldrh	r2, [r7, #22]
 80098ba:	2100      	movs	r1, #0
 80098bc:	69f8      	ldr	r0, [r7, #28]
 80098be:	4798      	blx	r3
  }
}
 80098c0:	3720      	adds	r7, #32
 80098c2:	46bd      	mov	sp, r7
 80098c4:	bd80      	pop	{r7, pc}
 80098c6:	bf00      	nop
 80098c8:	08017e84 	.word	0x08017e84
 80098cc:	08017efc 	.word	0x08017efc
 80098d0:	08017ec8 	.word	0x08017ec8
 80098d4:	08017f20 	.word	0x08017f20
 80098d8:	08017f40 	.word	0x08017f40

080098dc <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80098dc:	b580      	push	{r7, lr}
 80098de:	b088      	sub	sp, #32
 80098e0:	af00      	add	r7, sp, #0
 80098e2:	60f8      	str	r0, [r7, #12]
 80098e4:	60b9      	str	r1, [r7, #8]
 80098e6:	607a      	str	r2, [r7, #4]
 80098e8:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 80098ea:	68bb      	ldr	r3, [r7, #8]
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d106      	bne.n	80098fe <recv_tcp+0x22>
 80098f0:	4b36      	ldr	r3, [pc, #216]	@ (80099cc <recv_tcp+0xf0>)
 80098f2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80098f6:	4936      	ldr	r1, [pc, #216]	@ (80099d0 <recv_tcp+0xf4>)
 80098f8:	4836      	ldr	r0, [pc, #216]	@ (80099d4 <recv_tcp+0xf8>)
 80098fa:	f00c fe51 	bl	80165a0 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	2b00      	cmp	r3, #0
 8009902:	d106      	bne.n	8009912 <recv_tcp+0x36>
 8009904:	4b31      	ldr	r3, [pc, #196]	@ (80099cc <recv_tcp+0xf0>)
 8009906:	f240 122d 	movw	r2, #301	@ 0x12d
 800990a:	4933      	ldr	r1, [pc, #204]	@ (80099d8 <recv_tcp+0xfc>)
 800990c:	4831      	ldr	r0, [pc, #196]	@ (80099d4 <recv_tcp+0xf8>)
 800990e:	f00c fe47 	bl	80165a0 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 8009912:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009916:	2b00      	cmp	r3, #0
 8009918:	d006      	beq.n	8009928 <recv_tcp+0x4c>
 800991a:	4b2c      	ldr	r3, [pc, #176]	@ (80099cc <recv_tcp+0xf0>)
 800991c:	f44f 7297 	mov.w	r2, #302	@ 0x12e
 8009920:	492e      	ldr	r1, [pc, #184]	@ (80099dc <recv_tcp+0x100>)
 8009922:	482c      	ldr	r0, [pc, #176]	@ (80099d4 <recv_tcp+0xf8>)
 8009924:	f00c fe3c 	bl	80165a0 <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 800992c:	697b      	ldr	r3, [r7, #20]
 800992e:	2b00      	cmp	r3, #0
 8009930:	d102      	bne.n	8009938 <recv_tcp+0x5c>
    return ERR_VAL;
 8009932:	f06f 0305 	mvn.w	r3, #5
 8009936:	e045      	b.n	80099c4 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 8009938:	697b      	ldr	r3, [r7, #20]
 800993a:	685b      	ldr	r3, [r3, #4]
 800993c:	68ba      	ldr	r2, [r7, #8]
 800993e:	429a      	cmp	r2, r3
 8009940:	d006      	beq.n	8009950 <recv_tcp+0x74>
 8009942:	4b22      	ldr	r3, [pc, #136]	@ (80099cc <recv_tcp+0xf0>)
 8009944:	f240 1235 	movw	r2, #309	@ 0x135
 8009948:	4925      	ldr	r1, [pc, #148]	@ (80099e0 <recv_tcp+0x104>)
 800994a:	4822      	ldr	r0, [pc, #136]	@ (80099d4 <recv_tcp+0xf8>)
 800994c:	f00c fe28 	bl	80165a0 <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8009950:	697b      	ldr	r3, [r7, #20]
 8009952:	3310      	adds	r3, #16
 8009954:	4618      	mov	r0, r3
 8009956:	f00c fbea 	bl	801612e <sys_mbox_valid>
 800995a:	4603      	mov	r3, r0
 800995c:	2b00      	cmp	r3, #0
 800995e:	d10d      	bne.n	800997c <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	2b00      	cmp	r3, #0
 8009964:	d008      	beq.n	8009978 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	891b      	ldrh	r3, [r3, #8]
 800996a:	4619      	mov	r1, r3
 800996c:	68b8      	ldr	r0, [r7, #8]
 800996e:	f004 f885 	bl	800da7c <tcp_recved>
      pbuf_free(p);
 8009972:	6878      	ldr	r0, [r7, #4]
 8009974:	f003 f8a8 	bl	800cac8 <pbuf_free>
    }
    return ERR_OK;
 8009978:	2300      	movs	r3, #0
 800997a:	e023      	b.n	80099c4 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	2b00      	cmp	r3, #0
 8009980:	d005      	beq.n	800998e <recv_tcp+0xb2>
    msg = p;
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	891b      	ldrh	r3, [r3, #8]
 800998a:	83fb      	strh	r3, [r7, #30]
 800998c:	e003      	b.n	8009996 <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 800998e:	4b15      	ldr	r3, [pc, #84]	@ (80099e4 <recv_tcp+0x108>)
 8009990:	61bb      	str	r3, [r7, #24]
    len = 0;
 8009992:	2300      	movs	r3, #0
 8009994:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 8009996:	697b      	ldr	r3, [r7, #20]
 8009998:	3310      	adds	r3, #16
 800999a:	69b9      	ldr	r1, [r7, #24]
 800999c:	4618      	mov	r0, r3
 800999e:	f00c fb51 	bl	8016044 <sys_mbox_trypost>
 80099a2:	4603      	mov	r3, r0
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d002      	beq.n	80099ae <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 80099a8:	f04f 33ff 	mov.w	r3, #4294967295
 80099ac:	e00a      	b.n	80099c4 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 80099ae:	697b      	ldr	r3, [r7, #20]
 80099b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d005      	beq.n	80099c2 <recv_tcp+0xe6>
 80099b6:	697b      	ldr	r3, [r7, #20]
 80099b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099ba:	8bfa      	ldrh	r2, [r7, #30]
 80099bc:	2100      	movs	r1, #0
 80099be:	6978      	ldr	r0, [r7, #20]
 80099c0:	4798      	blx	r3
  }

  return ERR_OK;
 80099c2:	2300      	movs	r3, #0
}
 80099c4:	4618      	mov	r0, r3
 80099c6:	3720      	adds	r7, #32
 80099c8:	46bd      	mov	sp, r7
 80099ca:	bd80      	pop	{r7, pc}
 80099cc:	08017e84 	.word	0x08017e84
 80099d0:	08017f60 	.word	0x08017f60
 80099d4:	08017ec8 	.word	0x08017ec8
 80099d8:	08017f84 	.word	0x08017f84
 80099dc:	08017fa4 	.word	0x08017fa4
 80099e0:	08017fbc 	.word	0x08017fbc
 80099e4:	0801b022 	.word	0x0801b022

080099e8 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 80099e8:	b580      	push	{r7, lr}
 80099ea:	b084      	sub	sp, #16
 80099ec:	af00      	add	r7, sp, #0
 80099ee:	6078      	str	r0, [r7, #4]
 80099f0:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d106      	bne.n	8009a0a <poll_tcp+0x22>
 80099fc:	4b2b      	ldr	r3, [pc, #172]	@ (8009aac <poll_tcp+0xc4>)
 80099fe:	f44f 72b5 	mov.w	r2, #362	@ 0x16a
 8009a02:	492b      	ldr	r1, [pc, #172]	@ (8009ab0 <poll_tcp+0xc8>)
 8009a04:	482b      	ldr	r0, [pc, #172]	@ (8009ab4 <poll_tcp+0xcc>)
 8009a06:	f00c fdcb 	bl	80165a0 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	785b      	ldrb	r3, [r3, #1]
 8009a0e:	2b01      	cmp	r3, #1
 8009a10:	d104      	bne.n	8009a1c <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8009a12:	2101      	movs	r1, #1
 8009a14:	68f8      	ldr	r0, [r7, #12]
 8009a16:	f000 ff75 	bl	800a904 <lwip_netconn_do_writemore>
 8009a1a:	e016      	b.n	8009a4a <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	785b      	ldrb	r3, [r3, #1]
 8009a20:	2b04      	cmp	r3, #4
 8009a22:	d112      	bne.n	8009a4a <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d00a      	beq.n	8009a42 <poll_tcp+0x5a>
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a30:	7a5b      	ldrb	r3, [r3, #9]
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d005      	beq.n	8009a42 <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a3a:	7a5a      	ldrb	r2, [r3, #9]
 8009a3c:	3a01      	subs	r2, #1
 8009a3e:	b2d2      	uxtb	r2, r2
 8009a40:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8009a42:	2101      	movs	r1, #1
 8009a44:	68f8      	ldr	r0, [r7, #12]
 8009a46:	f000 fc05 	bl	800a254 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009a50:	f003 0310 	and.w	r3, r3, #16
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d023      	beq.n	8009aa0 <poll_tcp+0xb8>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	685b      	ldr	r3, [r3, #4]
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d01f      	beq.n	8009aa0 <poll_tcp+0xb8>
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	685b      	ldr	r3, [r3, #4]
 8009a64:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8009a68:	f5b3 6f86 	cmp.w	r3, #1072	@ 0x430
 8009a6c:	d318      	bcc.n	8009aa0 <poll_tcp+0xb8>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	685b      	ldr	r3, [r3, #4]
 8009a72:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8009a76:	2b04      	cmp	r3, #4
 8009a78:	d812      	bhi.n	8009aa0 <poll_tcp+0xb8>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009a80:	f023 0310 	bic.w	r3, r3, #16
 8009a84:	b2da      	uxtb	r2, r3
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	f883 2020 	strb.w	r2, [r3, #32]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d005      	beq.n	8009aa0 <poll_tcp+0xb8>
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a98:	2200      	movs	r2, #0
 8009a9a:	2102      	movs	r1, #2
 8009a9c:	68f8      	ldr	r0, [r7, #12]
 8009a9e:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8009aa0:	2300      	movs	r3, #0
}
 8009aa2:	4618      	mov	r0, r3
 8009aa4:	3710      	adds	r7, #16
 8009aa6:	46bd      	mov	sp, r7
 8009aa8:	bd80      	pop	{r7, pc}
 8009aaa:	bf00      	nop
 8009aac:	08017e84 	.word	0x08017e84
 8009ab0:	08017fdc 	.word	0x08017fdc
 8009ab4:	08017ec8 	.word	0x08017ec8

08009ab8 <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 8009ab8:	b580      	push	{r7, lr}
 8009aba:	b086      	sub	sp, #24
 8009abc:	af00      	add	r7, sp, #0
 8009abe:	60f8      	str	r0, [r7, #12]
 8009ac0:	60b9      	str	r1, [r7, #8]
 8009ac2:	4613      	mov	r3, r2
 8009ac4:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8009aca:	697b      	ldr	r3, [r7, #20]
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d106      	bne.n	8009ade <sent_tcp+0x26>
 8009ad0:	4b21      	ldr	r3, [pc, #132]	@ (8009b58 <sent_tcp+0xa0>)
 8009ad2:	f240 1293 	movw	r2, #403	@ 0x193
 8009ad6:	4921      	ldr	r1, [pc, #132]	@ (8009b5c <sent_tcp+0xa4>)
 8009ad8:	4821      	ldr	r0, [pc, #132]	@ (8009b60 <sent_tcp+0xa8>)
 8009ada:	f00c fd61 	bl	80165a0 <iprintf>

  if (conn) {
 8009ade:	697b      	ldr	r3, [r7, #20]
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d034      	beq.n	8009b4e <sent_tcp+0x96>
    if (conn->state == NETCONN_WRITE) {
 8009ae4:	697b      	ldr	r3, [r7, #20]
 8009ae6:	785b      	ldrb	r3, [r3, #1]
 8009ae8:	2b01      	cmp	r3, #1
 8009aea:	d104      	bne.n	8009af6 <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8009aec:	2101      	movs	r1, #1
 8009aee:	6978      	ldr	r0, [r7, #20]
 8009af0:	f000 ff08 	bl	800a904 <lwip_netconn_do_writemore>
 8009af4:	e007      	b.n	8009b06 <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 8009af6:	697b      	ldr	r3, [r7, #20]
 8009af8:	785b      	ldrb	r3, [r3, #1]
 8009afa:	2b04      	cmp	r3, #4
 8009afc:	d103      	bne.n	8009b06 <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8009afe:	2101      	movs	r1, #1
 8009b00:	6978      	ldr	r0, [r7, #20]
 8009b02:	f000 fba7 	bl	800a254 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8009b06:	697b      	ldr	r3, [r7, #20]
 8009b08:	685b      	ldr	r3, [r3, #4]
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d01f      	beq.n	8009b4e <sent_tcp+0x96>
 8009b0e:	697b      	ldr	r3, [r7, #20]
 8009b10:	685b      	ldr	r3, [r3, #4]
 8009b12:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8009b16:	f5b3 6f86 	cmp.w	r3, #1072	@ 0x430
 8009b1a:	d318      	bcc.n	8009b4e <sent_tcp+0x96>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8009b1c:	697b      	ldr	r3, [r7, #20]
 8009b1e:	685b      	ldr	r3, [r3, #4]
 8009b20:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8009b24:	2b04      	cmp	r3, #4
 8009b26:	d812      	bhi.n	8009b4e <sent_tcp+0x96>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8009b28:	697b      	ldr	r3, [r7, #20]
 8009b2a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009b2e:	f023 0310 	bic.w	r3, r3, #16
 8009b32:	b2da      	uxtb	r2, r3
 8009b34:	697b      	ldr	r3, [r7, #20]
 8009b36:	f883 2020 	strb.w	r2, [r3, #32]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 8009b3a:	697b      	ldr	r3, [r7, #20]
 8009b3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d005      	beq.n	8009b4e <sent_tcp+0x96>
 8009b42:	697b      	ldr	r3, [r7, #20]
 8009b44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b46:	88fa      	ldrh	r2, [r7, #6]
 8009b48:	2102      	movs	r1, #2
 8009b4a:	6978      	ldr	r0, [r7, #20]
 8009b4c:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8009b4e:	2300      	movs	r3, #0
}
 8009b50:	4618      	mov	r0, r3
 8009b52:	3718      	adds	r7, #24
 8009b54:	46bd      	mov	sp, r7
 8009b56:	bd80      	pop	{r7, pc}
 8009b58:	08017e84 	.word	0x08017e84
 8009b5c:	08017fdc 	.word	0x08017fdc
 8009b60:	08017ec8 	.word	0x08017ec8

08009b64 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 8009b64:	b580      	push	{r7, lr}
 8009b66:	b088      	sub	sp, #32
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	6078      	str	r0, [r7, #4]
 8009b6c:	460b      	mov	r3, r1
 8009b6e:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8009b74:	69fb      	ldr	r3, [r7, #28]
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d106      	bne.n	8009b88 <err_tcp+0x24>
 8009b7a:	4b61      	ldr	r3, [pc, #388]	@ (8009d00 <err_tcp+0x19c>)
 8009b7c:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 8009b80:	4960      	ldr	r1, [pc, #384]	@ (8009d04 <err_tcp+0x1a0>)
 8009b82:	4861      	ldr	r0, [pc, #388]	@ (8009d08 <err_tcp+0x1a4>)
 8009b84:	f00c fd0c 	bl	80165a0 <iprintf>

  SYS_ARCH_PROTECT(lev);
 8009b88:	f00c fbec 	bl	8016364 <sys_arch_protect>
 8009b8c:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 8009b8e:	69fb      	ldr	r3, [r7, #28]
 8009b90:	2200      	movs	r2, #0
 8009b92:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 8009b94:	69fb      	ldr	r3, [r7, #28]
 8009b96:	78fa      	ldrb	r2, [r7, #3]
 8009b98:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 8009b9a:	69fb      	ldr	r3, [r7, #28]
 8009b9c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009ba0:	f043 0301 	orr.w	r3, r3, #1
 8009ba4:	b2da      	uxtb	r2, r3
 8009ba6:	69fb      	ldr	r3, [r7, #28]
 8009ba8:	f883 2020 	strb.w	r2, [r3, #32]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 8009bac:	69fb      	ldr	r3, [r7, #28]
 8009bae:	785b      	ldrb	r3, [r3, #1]
 8009bb0:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 8009bb2:	69fb      	ldr	r3, [r7, #28]
 8009bb4:	2200      	movs	r2, #0
 8009bb6:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 8009bb8:	69b8      	ldr	r0, [r7, #24]
 8009bba:	f00c fbe1 	bl	8016380 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8009bbe:	69fb      	ldr	r3, [r7, #28]
 8009bc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d005      	beq.n	8009bd2 <err_tcp+0x6e>
 8009bc6:	69fb      	ldr	r3, [r7, #28]
 8009bc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009bca:	2200      	movs	r2, #0
 8009bcc:	2104      	movs	r1, #4
 8009bce:	69f8      	ldr	r0, [r7, #28]
 8009bd0:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8009bd2:	69fb      	ldr	r3, [r7, #28]
 8009bd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d005      	beq.n	8009be6 <err_tcp+0x82>
 8009bda:	69fb      	ldr	r3, [r7, #28]
 8009bdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009bde:	2200      	movs	r2, #0
 8009be0:	2100      	movs	r1, #0
 8009be2:	69f8      	ldr	r0, [r7, #28]
 8009be4:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8009be6:	69fb      	ldr	r3, [r7, #28]
 8009be8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d005      	beq.n	8009bfa <err_tcp+0x96>
 8009bee:	69fb      	ldr	r3, [r7, #28]
 8009bf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009bf2:	2200      	movs	r2, #0
 8009bf4:	2102      	movs	r1, #2
 8009bf6:	69f8      	ldr	r0, [r7, #28]
 8009bf8:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 8009bfa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009bfe:	4618      	mov	r0, r3
 8009c00:	f7ff fd7e 	bl	8009700 <lwip_netconn_err_to_msg>
 8009c04:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8009c06:	69fb      	ldr	r3, [r7, #28]
 8009c08:	3310      	adds	r3, #16
 8009c0a:	4618      	mov	r0, r3
 8009c0c:	f00c fa8f 	bl	801612e <sys_mbox_valid>
 8009c10:	4603      	mov	r3, r0
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d005      	beq.n	8009c22 <err_tcp+0xbe>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 8009c16:	69fb      	ldr	r3, [r7, #28]
 8009c18:	3310      	adds	r3, #16
 8009c1a:	6939      	ldr	r1, [r7, #16]
 8009c1c:	4618      	mov	r0, r3
 8009c1e:	f00c fa11 	bl	8016044 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 8009c22:	69fb      	ldr	r3, [r7, #28]
 8009c24:	3314      	adds	r3, #20
 8009c26:	4618      	mov	r0, r3
 8009c28:	f00c fa81 	bl	801612e <sys_mbox_valid>
 8009c2c:	4603      	mov	r3, r0
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d005      	beq.n	8009c3e <err_tcp+0xda>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 8009c32:	69fb      	ldr	r3, [r7, #28]
 8009c34:	3314      	adds	r3, #20
 8009c36:	6939      	ldr	r1, [r7, #16]
 8009c38:	4618      	mov	r0, r3
 8009c3a:	f00c fa03 	bl	8016044 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 8009c3e:	7dfb      	ldrb	r3, [r7, #23]
 8009c40:	2b01      	cmp	r3, #1
 8009c42:	d005      	beq.n	8009c50 <err_tcp+0xec>
 8009c44:	7dfb      	ldrb	r3, [r7, #23]
 8009c46:	2b04      	cmp	r3, #4
 8009c48:	d002      	beq.n	8009c50 <err_tcp+0xec>
 8009c4a:	7dfb      	ldrb	r3, [r7, #23]
 8009c4c:	2b03      	cmp	r3, #3
 8009c4e:	d146      	bne.n	8009cde <err_tcp+0x17a>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 8009c50:	69fb      	ldr	r3, [r7, #28]
 8009c52:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009c56:	f003 0304 	and.w	r3, r3, #4
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	bf14      	ite	ne
 8009c5e:	2301      	movne	r3, #1
 8009c60:	2300      	moveq	r3, #0
 8009c62:	b2db      	uxtb	r3, r3
 8009c64:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 8009c66:	69fb      	ldr	r3, [r7, #28]
 8009c68:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009c6c:	f023 0304 	bic.w	r3, r3, #4
 8009c70:	b2da      	uxtb	r2, r3
 8009c72:	69fb      	ldr	r3, [r7, #28]
 8009c74:	f883 2020 	strb.w	r2, [r3, #32]

    if (!was_nonblocking_connect) {
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d13b      	bne.n	8009cf6 <err_tcp+0x192>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8009c7e:	69fb      	ldr	r3, [r7, #28]
 8009c80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d106      	bne.n	8009c94 <err_tcp+0x130>
 8009c86:	4b1e      	ldr	r3, [pc, #120]	@ (8009d00 <err_tcp+0x19c>)
 8009c88:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 8009c8c:	491f      	ldr	r1, [pc, #124]	@ (8009d0c <err_tcp+0x1a8>)
 8009c8e:	481e      	ldr	r0, [pc, #120]	@ (8009d08 <err_tcp+0x1a4>)
 8009c90:	f00c fc86 	bl	80165a0 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 8009c94:	7dfb      	ldrb	r3, [r7, #23]
 8009c96:	2b04      	cmp	r3, #4
 8009c98:	d104      	bne.n	8009ca4 <err_tcp+0x140>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 8009c9a:	69fb      	ldr	r3, [r7, #28]
 8009c9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c9e:	2200      	movs	r2, #0
 8009ca0:	711a      	strb	r2, [r3, #4]
 8009ca2:	e003      	b.n	8009cac <err_tcp+0x148>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 8009ca4:	69fb      	ldr	r3, [r7, #28]
 8009ca6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ca8:	78fa      	ldrb	r2, [r7, #3]
 8009caa:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8009cac:	69fb      	ldr	r3, [r7, #28]
 8009cae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	330c      	adds	r3, #12
 8009cb4:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 8009cb6:	68b8      	ldr	r0, [r7, #8]
 8009cb8:	f00c faca 	bl	8016250 <sys_sem_valid>
 8009cbc:	4603      	mov	r3, r0
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d106      	bne.n	8009cd0 <err_tcp+0x16c>
 8009cc2:	4b0f      	ldr	r3, [pc, #60]	@ (8009d00 <err_tcp+0x19c>)
 8009cc4:	f240 12ef 	movw	r2, #495	@ 0x1ef
 8009cc8:	4911      	ldr	r1, [pc, #68]	@ (8009d10 <err_tcp+0x1ac>)
 8009cca:	480f      	ldr	r0, [pc, #60]	@ (8009d08 <err_tcp+0x1a4>)
 8009ccc:	f00c fc68 	bl	80165a0 <iprintf>
      conn->current_msg = NULL;
 8009cd0:	69fb      	ldr	r3, [r7, #28]
 8009cd2:	2200      	movs	r2, #0
 8009cd4:	625a      	str	r2, [r3, #36]	@ 0x24
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 8009cd6:	68b8      	ldr	r0, [r7, #8]
 8009cd8:	f00c faa0 	bl	801621c <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 8009cdc:	e00b      	b.n	8009cf6 <err_tcp+0x192>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 8009cde:	69fb      	ldr	r3, [r7, #28]
 8009ce0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d008      	beq.n	8009cf8 <err_tcp+0x194>
 8009ce6:	4b06      	ldr	r3, [pc, #24]	@ (8009d00 <err_tcp+0x19c>)
 8009ce8:	f240 12f7 	movw	r2, #503	@ 0x1f7
 8009cec:	4909      	ldr	r1, [pc, #36]	@ (8009d14 <err_tcp+0x1b0>)
 8009cee:	4806      	ldr	r0, [pc, #24]	@ (8009d08 <err_tcp+0x1a4>)
 8009cf0:	f00c fc56 	bl	80165a0 <iprintf>
  }
}
 8009cf4:	e000      	b.n	8009cf8 <err_tcp+0x194>
      (old_state == NETCONN_CONNECT)) {
 8009cf6:	bf00      	nop
}
 8009cf8:	bf00      	nop
 8009cfa:	3720      	adds	r7, #32
 8009cfc:	46bd      	mov	sp, r7
 8009cfe:	bd80      	pop	{r7, pc}
 8009d00:	08017e84 	.word	0x08017e84
 8009d04:	08017fdc 	.word	0x08017fdc
 8009d08:	08017ec8 	.word	0x08017ec8
 8009d0c:	08017fec 	.word	0x08017fec
 8009d10:	08018008 	.word	0x08018008
 8009d14:	08018024 	.word	0x08018024

08009d18 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 8009d18:	b580      	push	{r7, lr}
 8009d1a:	b084      	sub	sp, #16
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	685b      	ldr	r3, [r3, #4]
 8009d24:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 8009d26:	6879      	ldr	r1, [r7, #4]
 8009d28:	68f8      	ldr	r0, [r7, #12]
 8009d2a:	f004 fd7b 	bl	800e824 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 8009d2e:	490a      	ldr	r1, [pc, #40]	@ (8009d58 <setup_tcp+0x40>)
 8009d30:	68f8      	ldr	r0, [r7, #12]
 8009d32:	f004 fd89 	bl	800e848 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 8009d36:	4909      	ldr	r1, [pc, #36]	@ (8009d5c <setup_tcp+0x44>)
 8009d38:	68f8      	ldr	r0, [r7, #12]
 8009d3a:	f004 fda7 	bl	800e88c <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 8009d3e:	2202      	movs	r2, #2
 8009d40:	4907      	ldr	r1, [pc, #28]	@ (8009d60 <setup_tcp+0x48>)
 8009d42:	68f8      	ldr	r0, [r7, #12]
 8009d44:	f004 fdfe 	bl	800e944 <tcp_poll>
  tcp_err(pcb, err_tcp);
 8009d48:	4906      	ldr	r1, [pc, #24]	@ (8009d64 <setup_tcp+0x4c>)
 8009d4a:	68f8      	ldr	r0, [r7, #12]
 8009d4c:	f004 fdc0 	bl	800e8d0 <tcp_err>
}
 8009d50:	bf00      	nop
 8009d52:	3710      	adds	r7, #16
 8009d54:	46bd      	mov	sp, r7
 8009d56:	bd80      	pop	{r7, pc}
 8009d58:	080098dd 	.word	0x080098dd
 8009d5c:	08009ab9 	.word	0x08009ab9
 8009d60:	080099e9 	.word	0x080099e9
 8009d64:	08009b65 	.word	0x08009b65

08009d68 <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 8009d68:	b590      	push	{r4, r7, lr}
 8009d6a:	b089      	sub	sp, #36	@ 0x24
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	60f8      	str	r0, [r7, #12]
 8009d70:	60b9      	str	r1, [r7, #8]
 8009d72:	4613      	mov	r3, r2
 8009d74:	71fb      	strb	r3, [r7, #7]
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 8009d7a:	69fb      	ldr	r3, [r7, #28]
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d102      	bne.n	8009d86 <accept_function+0x1e>
    return ERR_VAL;
 8009d80:	f06f 0305 	mvn.w	r3, #5
 8009d84:	e0a1      	b.n	8009eca <accept_function+0x162>
  }
  if (!NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 8009d86:	69fb      	ldr	r3, [r7, #28]
 8009d88:	3314      	adds	r3, #20
 8009d8a:	4618      	mov	r0, r3
 8009d8c:	f00c f9cf 	bl	801612e <sys_mbox_valid>
 8009d90:	4603      	mov	r3, r0
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d102      	bne.n	8009d9c <accept_function+0x34>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
 8009d96:	f06f 0305 	mvn.w	r3, #5
 8009d9a:	e096      	b.n	8009eca <accept_function+0x162>
  }

  if (newpcb == NULL) {
 8009d9c:	68bb      	ldr	r3, [r7, #8]
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d11b      	bne.n	8009dda <accept_function+0x72>
    /* out-of-pcbs during connect: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 8009da2:	69fb      	ldr	r3, [r7, #28]
 8009da4:	f103 0414 	add.w	r4, r3, #20
 8009da8:	f06f 000c 	mvn.w	r0, #12
 8009dac:	f7ff fca8 	bl	8009700 <lwip_netconn_err_to_msg>
 8009db0:	4603      	mov	r3, r0
 8009db2:	4619      	mov	r1, r3
 8009db4:	4620      	mov	r0, r4
 8009db6:	f00c f945 	bl	8016044 <sys_mbox_trypost>
 8009dba:	4603      	mov	r3, r0
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d109      	bne.n	8009dd4 <accept_function+0x6c>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8009dc0:	69fb      	ldr	r3, [r7, #28]
 8009dc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d005      	beq.n	8009dd4 <accept_function+0x6c>
 8009dc8:	69fb      	ldr	r3, [r7, #28]
 8009dca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009dcc:	2200      	movs	r2, #0
 8009dce:	2100      	movs	r1, #0
 8009dd0:	69f8      	ldr	r0, [r7, #28]
 8009dd2:	4798      	blx	r3
    }
    return ERR_VAL;
 8009dd4:	f06f 0305 	mvn.w	r3, #5
 8009dd8:	e077      	b.n	8009eca <accept_function+0x162>
  }
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 8009dda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d006      	beq.n	8009df0 <accept_function+0x88>
 8009de2:	4b3c      	ldr	r3, [pc, #240]	@ (8009ed4 <accept_function+0x16c>)
 8009de4:	f240 222a 	movw	r2, #554	@ 0x22a
 8009de8:	493b      	ldr	r1, [pc, #236]	@ (8009ed8 <accept_function+0x170>)
 8009dea:	483c      	ldr	r0, [pc, #240]	@ (8009edc <accept_function+0x174>)
 8009dec:	f00c fbd8 	bl	80165a0 <iprintf>

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->state: %s\n", tcp_debug_state_str(newpcb->state)));

  /* We have to set the callback here even though
   * the new socket is unknown. newconn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
 8009df0:	69fb      	ldr	r3, [r7, #28]
 8009df2:	781a      	ldrb	r2, [r3, #0]
 8009df4:	69fb      	ldr	r3, [r7, #28]
 8009df6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009df8:	4619      	mov	r1, r3
 8009dfa:	4610      	mov	r0, r2
 8009dfc:	f000 f8f0 	bl	8009fe0 <netconn_alloc>
 8009e00:	61b8      	str	r0, [r7, #24]
  if (newconn == NULL) {
 8009e02:	69bb      	ldr	r3, [r7, #24]
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d11b      	bne.n	8009e40 <accept_function+0xd8>
    /* outof netconns: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 8009e08:	69fb      	ldr	r3, [r7, #28]
 8009e0a:	f103 0414 	add.w	r4, r3, #20
 8009e0e:	f06f 000c 	mvn.w	r0, #12
 8009e12:	f7ff fc75 	bl	8009700 <lwip_netconn_err_to_msg>
 8009e16:	4603      	mov	r3, r0
 8009e18:	4619      	mov	r1, r3
 8009e1a:	4620      	mov	r0, r4
 8009e1c:	f00c f912 	bl	8016044 <sys_mbox_trypost>
 8009e20:	4603      	mov	r3, r0
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d109      	bne.n	8009e3a <accept_function+0xd2>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8009e26:	69fb      	ldr	r3, [r7, #28]
 8009e28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d005      	beq.n	8009e3a <accept_function+0xd2>
 8009e2e:	69fb      	ldr	r3, [r7, #28]
 8009e30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e32:	2200      	movs	r2, #0
 8009e34:	2100      	movs	r1, #0
 8009e36:	69f8      	ldr	r0, [r7, #28]
 8009e38:	4798      	blx	r3
    }
    return ERR_MEM;
 8009e3a:	f04f 33ff 	mov.w	r3, #4294967295
 8009e3e:	e044      	b.n	8009eca <accept_function+0x162>
  }
  newconn->pcb.tcp = newpcb;
 8009e40:	69bb      	ldr	r3, [r7, #24]
 8009e42:	68ba      	ldr	r2, [r7, #8]
 8009e44:	605a      	str	r2, [r3, #4]
  setup_tcp(newconn);
 8009e46:	69b8      	ldr	r0, [r7, #24]
 8009e48:	f7ff ff66 	bl	8009d18 <setup_tcp>

  /* handle backlog counter */
  tcp_backlog_delayed(newpcb);

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 8009e4c:	69fb      	ldr	r3, [r7, #28]
 8009e4e:	3314      	adds	r3, #20
 8009e50:	69b9      	ldr	r1, [r7, #24]
 8009e52:	4618      	mov	r0, r3
 8009e54:	f00c f8f6 	bl	8016044 <sys_mbox_trypost>
 8009e58:	4603      	mov	r3, r0
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d02a      	beq.n	8009eb4 <accept_function+0x14c>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb *pcb = newconn->pcb.tcp;
 8009e5e:	69bb      	ldr	r3, [r7, #24]
 8009e60:	685b      	ldr	r3, [r3, #4]
 8009e62:	617b      	str	r3, [r7, #20]
    tcp_arg(pcb, NULL);
 8009e64:	2100      	movs	r1, #0
 8009e66:	6978      	ldr	r0, [r7, #20]
 8009e68:	f004 fcdc 	bl	800e824 <tcp_arg>
    tcp_recv(pcb, NULL);
 8009e6c:	2100      	movs	r1, #0
 8009e6e:	6978      	ldr	r0, [r7, #20]
 8009e70:	f004 fcea 	bl	800e848 <tcp_recv>
    tcp_sent(pcb, NULL);
 8009e74:	2100      	movs	r1, #0
 8009e76:	6978      	ldr	r0, [r7, #20]
 8009e78:	f004 fd08 	bl	800e88c <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 8009e7c:	2200      	movs	r2, #0
 8009e7e:	2100      	movs	r1, #0
 8009e80:	6978      	ldr	r0, [r7, #20]
 8009e82:	f004 fd5f 	bl	800e944 <tcp_poll>
    tcp_err(pcb, NULL);
 8009e86:	2100      	movs	r1, #0
 8009e88:	6978      	ldr	r0, [r7, #20]
 8009e8a:	f004 fd21 	bl	800e8d0 <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
 8009e8e:	69bb      	ldr	r3, [r7, #24]
 8009e90:	2200      	movs	r2, #0
 8009e92:	605a      	str	r2, [r3, #4]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
 8009e94:	69bb      	ldr	r3, [r7, #24]
 8009e96:	3310      	adds	r3, #16
 8009e98:	4618      	mov	r0, r3
 8009e9a:	f00c f8c1 	bl	8016020 <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 8009e9e:	69bb      	ldr	r3, [r7, #24]
 8009ea0:	3310      	adds	r3, #16
 8009ea2:	4618      	mov	r0, r3
 8009ea4:	f00c f954 	bl	8016150 <sys_mbox_set_invalid>
    netconn_free(newconn);
 8009ea8:	69b8      	ldr	r0, [r7, #24]
 8009eaa:	f000 f90b 	bl	800a0c4 <netconn_free>
    return ERR_MEM;
 8009eae:	f04f 33ff 	mov.w	r3, #4294967295
 8009eb2:	e00a      	b.n	8009eca <accept_function+0x162>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8009eb4:	69fb      	ldr	r3, [r7, #28]
 8009eb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d005      	beq.n	8009ec8 <accept_function+0x160>
 8009ebc:	69fb      	ldr	r3, [r7, #28]
 8009ebe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ec0:	2200      	movs	r2, #0
 8009ec2:	2100      	movs	r1, #0
 8009ec4:	69f8      	ldr	r0, [r7, #28]
 8009ec6:	4798      	blx	r3
  }

  return ERR_OK;
 8009ec8:	2300      	movs	r3, #0
}
 8009eca:	4618      	mov	r0, r3
 8009ecc:	3724      	adds	r7, #36	@ 0x24
 8009ece:	46bd      	mov	sp, r7
 8009ed0:	bd90      	pop	{r4, r7, pc}
 8009ed2:	bf00      	nop
 8009ed4:	08017e84 	.word	0x08017e84
 8009ed8:	08018040 	.word	0x08018040
 8009edc:	08017ec8 	.word	0x08017ec8

08009ee0 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 8009ee0:	b590      	push	{r4, r7, lr}
 8009ee2:	b085      	sub	sp, #20
 8009ee4:	af00      	add	r7, sp, #0
 8009ee6:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 8009ee8:	2300      	movs	r3, #0
 8009eea:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	685b      	ldr	r3, [r3, #4]
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d006      	beq.n	8009f04 <pcb_new+0x24>
 8009ef6:	4b2b      	ldr	r3, [pc, #172]	@ (8009fa4 <pcb_new+0xc4>)
 8009ef8:	f240 2265 	movw	r2, #613	@ 0x265
 8009efc:	492a      	ldr	r1, [pc, #168]	@ (8009fa8 <pcb_new+0xc8>)
 8009efe:	482b      	ldr	r0, [pc, #172]	@ (8009fac <pcb_new+0xcc>)
 8009f00:	f00c fb4e 	bl	80165a0 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	781b      	ldrb	r3, [r3, #0]
 8009f0a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009f0e:	2b10      	cmp	r3, #16
 8009f10:	d022      	beq.n	8009f58 <pcb_new+0x78>
 8009f12:	2b20      	cmp	r3, #32
 8009f14:	d133      	bne.n	8009f7e <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	681c      	ldr	r4, [r3, #0]
 8009f1a:	7bfb      	ldrb	r3, [r7, #15]
 8009f1c:	4618      	mov	r0, r3
 8009f1e:	f009 fd5a 	bl	80139d6 <udp_new_ip_type>
 8009f22:	4603      	mov	r3, r0
 8009f24:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	685b      	ldr	r3, [r3, #4]
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d02a      	beq.n	8009f86 <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	781b      	ldrb	r3, [r3, #0]
 8009f36:	2b22      	cmp	r3, #34	@ 0x22
 8009f38:	d104      	bne.n	8009f44 <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	685b      	ldr	r3, [r3, #4]
 8009f40:	2201      	movs	r2, #1
 8009f42:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	6858      	ldr	r0, [r3, #4]
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	461a      	mov	r2, r3
 8009f50:	4917      	ldr	r1, [pc, #92]	@ (8009fb0 <pcb_new+0xd0>)
 8009f52:	f009 fcc7 	bl	80138e4 <udp_recv>
      }
      break;
 8009f56:	e016      	b.n	8009f86 <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	681c      	ldr	r4, [r3, #0]
 8009f5c:	7bfb      	ldrb	r3, [r7, #15]
 8009f5e:	4618      	mov	r0, r3
 8009f60:	f004 fc52 	bl	800e808 <tcp_new_ip_type>
 8009f64:	4603      	mov	r3, r0
 8009f66:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	685b      	ldr	r3, [r3, #4]
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d00b      	beq.n	8009f8a <pcb_new+0xaa>
        setup_tcp(msg->conn);
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	4618      	mov	r0, r3
 8009f78:	f7ff fece 	bl	8009d18 <setup_tcp>
      }
      break;
 8009f7c:	e005      	b.n	8009f8a <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	22fa      	movs	r2, #250	@ 0xfa
 8009f82:	711a      	strb	r2, [r3, #4]
      return;
 8009f84:	e00a      	b.n	8009f9c <pcb_new+0xbc>
      break;
 8009f86:	bf00      	nop
 8009f88:	e000      	b.n	8009f8c <pcb_new+0xac>
      break;
 8009f8a:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	685b      	ldr	r3, [r3, #4]
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d102      	bne.n	8009f9c <pcb_new+0xbc>
    msg->err = ERR_MEM;
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	22ff      	movs	r2, #255	@ 0xff
 8009f9a:	711a      	strb	r2, [r3, #4]
  }
}
 8009f9c:	3714      	adds	r7, #20
 8009f9e:	46bd      	mov	sp, r7
 8009fa0:	bd90      	pop	{r4, r7, pc}
 8009fa2:	bf00      	nop
 8009fa4:	08017e84 	.word	0x08017e84
 8009fa8:	08018068 	.word	0x08018068
 8009fac:	08017ec8 	.word	0x08017ec8
 8009fb0:	080097e1 	.word	0x080097e1

08009fb4 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 8009fb4:	b580      	push	{r7, lr}
 8009fb6:	b084      	sub	sp, #16
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	2200      	movs	r2, #0
 8009fc4:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	685b      	ldr	r3, [r3, #4]
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d102      	bne.n	8009fd6 <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 8009fd0:	68f8      	ldr	r0, [r7, #12]
 8009fd2:	f7ff ff85 	bl	8009ee0 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 8009fd6:	bf00      	nop
 8009fd8:	3710      	adds	r7, #16
 8009fda:	46bd      	mov	sp, r7
 8009fdc:	bd80      	pop	{r7, pc}
	...

08009fe0 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 8009fe0:	b580      	push	{r7, lr}
 8009fe2:	b086      	sub	sp, #24
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	4603      	mov	r3, r0
 8009fe8:	6039      	str	r1, [r7, #0]
 8009fea:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 8009fec:	2300      	movs	r3, #0
 8009fee:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 8009ff0:	2007      	movs	r0, #7
 8009ff2:	f001 fe4f 	bl	800bc94 <memp_malloc>
 8009ff6:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d101      	bne.n	800a002 <netconn_alloc+0x22>
    return NULL;
 8009ffe:	2300      	movs	r3, #0
 800a000:	e056      	b.n	800a0b0 <netconn_alloc+0xd0>
  }

  conn->pending_err = ERR_OK;
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	2200      	movs	r2, #0
 800a006:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	79fa      	ldrb	r2, [r7, #7]
 800a00c:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	2200      	movs	r2, #0
 800a012:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 800a014:	79fb      	ldrb	r3, [r7, #7]
 800a016:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a01a:	2b10      	cmp	r3, #16
 800a01c:	d004      	beq.n	800a028 <netconn_alloc+0x48>
 800a01e:	2b20      	cmp	r3, #32
 800a020:	d105      	bne.n	800a02e <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 800a022:	2306      	movs	r3, #6
 800a024:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 800a026:	e00a      	b.n	800a03e <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 800a028:	2306      	movs	r3, #6
 800a02a:	617b      	str	r3, [r7, #20]
      break;
 800a02c:	e007      	b.n	800a03e <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 800a02e:	4b22      	ldr	r3, [pc, #136]	@ (800a0b8 <netconn_alloc+0xd8>)
 800a030:	f240 22e5 	movw	r2, #741	@ 0x2e5
 800a034:	4921      	ldr	r1, [pc, #132]	@ (800a0bc <netconn_alloc+0xdc>)
 800a036:	4822      	ldr	r0, [pc, #136]	@ (800a0c0 <netconn_alloc+0xe0>)
 800a038:	f00c fab2 	bl	80165a0 <iprintf>
      goto free_and_return;
 800a03c:	e033      	b.n	800a0a6 <netconn_alloc+0xc6>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	3310      	adds	r3, #16
 800a042:	6979      	ldr	r1, [r7, #20]
 800a044:	4618      	mov	r0, r3
 800a046:	f00b ffc9 	bl	8015fdc <sys_mbox_new>
 800a04a:	4603      	mov	r3, r0
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d129      	bne.n	800a0a4 <netconn_alloc+0xc4>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	330c      	adds	r3, #12
 800a054:	2100      	movs	r1, #0
 800a056:	4618      	mov	r0, r3
 800a058:	f00c f887 	bl	801616a <sys_sem_new>
 800a05c:	4603      	mov	r3, r0
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d005      	beq.n	800a06e <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	3310      	adds	r3, #16
 800a066:	4618      	mov	r0, r3
 800a068:	f00b ffda 	bl	8016020 <sys_mbox_free>
    goto free_and_return;
 800a06c:	e01b      	b.n	800a0a6 <netconn_alloc+0xc6>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	3314      	adds	r3, #20
 800a072:	4618      	mov	r0, r3
 800a074:	f00c f86c 	bl	8016150 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	2200      	movs	r2, #0
 800a07c:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	f04f 32ff 	mov.w	r2, #4294967295
 800a084:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	683a      	ldr	r2, [r7, #0]
 800a08a:	629a      	str	r2, [r3, #40]	@ 0x28
#if LWIP_TCP
  conn->current_msg  = NULL;
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	2200      	movs	r2, #0
 800a090:	625a      	str	r2, [r3, #36]	@ 0x24
#endif /* LWIP_TCP */
#if LWIP_SO_SNDTIMEO
  conn->send_timeout = 0;
#endif /* LWIP_SO_SNDTIMEO */
#if LWIP_SO_RCVTIMEO
  conn->recv_timeout = 0;
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	2200      	movs	r2, #0
 800a096:	61da      	str	r2, [r3, #28]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	7cfa      	ldrb	r2, [r7, #19]
 800a09c:	f883 2020 	strb.w	r2, [r3, #32]
  return conn;
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	e005      	b.n	800a0b0 <netconn_alloc+0xd0>
    goto free_and_return;
 800a0a4:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 800a0a6:	68f9      	ldr	r1, [r7, #12]
 800a0a8:	2007      	movs	r0, #7
 800a0aa:	f001 fe69 	bl	800bd80 <memp_free>
  return NULL;
 800a0ae:	2300      	movs	r3, #0
}
 800a0b0:	4618      	mov	r0, r3
 800a0b2:	3718      	adds	r7, #24
 800a0b4:	46bd      	mov	sp, r7
 800a0b6:	bd80      	pop	{r7, pc}
 800a0b8:	08017e84 	.word	0x08017e84
 800a0bc:	08018088 	.word	0x08018088
 800a0c0:	08017ec8 	.word	0x08017ec8

0800a0c4 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 800a0c4:	b580      	push	{r7, lr}
 800a0c6:	b082      	sub	sp, #8
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	685b      	ldr	r3, [r3, #4]
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d006      	beq.n	800a0e2 <netconn_free+0x1e>
 800a0d4:	4b1b      	ldr	r3, [pc, #108]	@ (800a144 <netconn_free+0x80>)
 800a0d6:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 800a0da:	491b      	ldr	r1, [pc, #108]	@ (800a148 <netconn_free+0x84>)
 800a0dc:	481b      	ldr	r0, [pc, #108]	@ (800a14c <netconn_free+0x88>)
 800a0de:	f00c fa5f 	bl	80165a0 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	3310      	adds	r3, #16
 800a0e6:	4618      	mov	r0, r3
 800a0e8:	f00c f821 	bl	801612e <sys_mbox_valid>
 800a0ec:	4603      	mov	r3, r0
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d006      	beq.n	800a100 <netconn_free+0x3c>
 800a0f2:	4b14      	ldr	r3, [pc, #80]	@ (800a144 <netconn_free+0x80>)
 800a0f4:	f240 3223 	movw	r2, #803	@ 0x323
 800a0f8:	4915      	ldr	r1, [pc, #84]	@ (800a150 <netconn_free+0x8c>)
 800a0fa:	4814      	ldr	r0, [pc, #80]	@ (800a14c <netconn_free+0x88>)
 800a0fc:	f00c fa50 	bl	80165a0 <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	3314      	adds	r3, #20
 800a104:	4618      	mov	r0, r3
 800a106:	f00c f812 	bl	801612e <sys_mbox_valid>
 800a10a:	4603      	mov	r3, r0
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d006      	beq.n	800a11e <netconn_free+0x5a>
 800a110:	4b0c      	ldr	r3, [pc, #48]	@ (800a144 <netconn_free+0x80>)
 800a112:	f240 3226 	movw	r2, #806	@ 0x326
 800a116:	490f      	ldr	r1, [pc, #60]	@ (800a154 <netconn_free+0x90>)
 800a118:	480c      	ldr	r0, [pc, #48]	@ (800a14c <netconn_free+0x88>)
 800a11a:	f00c fa41 	bl	80165a0 <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	330c      	adds	r3, #12
 800a122:	4618      	mov	r0, r3
 800a124:	f00c f887 	bl	8016236 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	330c      	adds	r3, #12
 800a12c:	4618      	mov	r0, r3
 800a12e:	f00c f8a0 	bl	8016272 <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 800a132:	6879      	ldr	r1, [r7, #4]
 800a134:	2007      	movs	r0, #7
 800a136:	f001 fe23 	bl	800bd80 <memp_free>
}
 800a13a:	bf00      	nop
 800a13c:	3708      	adds	r7, #8
 800a13e:	46bd      	mov	sp, r7
 800a140:	bd80      	pop	{r7, pc}
 800a142:	bf00      	nop
 800a144:	08017e84 	.word	0x08017e84
 800a148:	080180b0 	.word	0x080180b0
 800a14c:	08017ec8 	.word	0x08017ec8
 800a150:	080180e0 	.word	0x080180e0
 800a154:	0801811c 	.word	0x0801811c

0800a158 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 800a158:	b580      	push	{r7, lr}
 800a15a:	b086      	sub	sp, #24
 800a15c:	af00      	add	r7, sp, #0
 800a15e:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	3310      	adds	r3, #16
 800a164:	4618      	mov	r0, r3
 800a166:	f00b ffe2 	bl	801612e <sys_mbox_valid>
 800a16a:	4603      	mov	r3, r0
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d02f      	beq.n	800a1d0 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800a170:	e018      	b.n	800a1a4 <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	781b      	ldrb	r3, [r3, #0]
 800a176:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a17a:	2b10      	cmp	r3, #16
 800a17c:	d10e      	bne.n	800a19c <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 800a17e:	693b      	ldr	r3, [r7, #16]
 800a180:	f107 020f 	add.w	r2, r7, #15
 800a184:	4611      	mov	r1, r2
 800a186:	4618      	mov	r0, r3
 800a188:	f7ff faf0 	bl	800976c <lwip_netconn_is_err_msg>
 800a18c:	4603      	mov	r3, r0
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d108      	bne.n	800a1a4 <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 800a192:	693b      	ldr	r3, [r7, #16]
 800a194:	4618      	mov	r0, r3
 800a196:	f002 fc97 	bl	800cac8 <pbuf_free>
 800a19a:	e003      	b.n	800a1a4 <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 800a19c:	693b      	ldr	r3, [r7, #16]
 800a19e:	4618      	mov	r0, r3
 800a1a0:	f000 fe98 	bl	800aed4 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	3310      	adds	r3, #16
 800a1a8:	f107 0210 	add.w	r2, r7, #16
 800a1ac:	4611      	mov	r1, r2
 800a1ae:	4618      	mov	r0, r3
 800a1b0:	f00b ffa1 	bl	80160f6 <sys_arch_mbox_tryfetch>
 800a1b4:	4603      	mov	r3, r0
 800a1b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1ba:	d1da      	bne.n	800a172 <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	3310      	adds	r3, #16
 800a1c0:	4618      	mov	r0, r3
 800a1c2:	f00b ff2d 	bl	8016020 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	3310      	adds	r3, #16
 800a1ca:	4618      	mov	r0, r3
 800a1cc:	f00b ffc0 	bl	8016150 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	3314      	adds	r3, #20
 800a1d4:	4618      	mov	r0, r3
 800a1d6:	f00b ffaa 	bl	801612e <sys_mbox_valid>
 800a1da:	4603      	mov	r3, r0
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d034      	beq.n	800a24a <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800a1e0:	e01d      	b.n	800a21e <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 800a1e2:	693b      	ldr	r3, [r7, #16]
 800a1e4:	f107 020e 	add.w	r2, r7, #14
 800a1e8:	4611      	mov	r1, r2
 800a1ea:	4618      	mov	r0, r3
 800a1ec:	f7ff fabe 	bl	800976c <lwip_netconn_is_err_msg>
 800a1f0:	4603      	mov	r3, r0
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d113      	bne.n	800a21e <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 800a1f6:	693b      	ldr	r3, [r7, #16]
 800a1f8:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 800a1fa:	6978      	ldr	r0, [r7, #20]
 800a1fc:	f7ff ffac 	bl	800a158 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 800a200:	697b      	ldr	r3, [r7, #20]
 800a202:	685b      	ldr	r3, [r3, #4]
 800a204:	2b00      	cmp	r3, #0
 800a206:	d007      	beq.n	800a218 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 800a208:	697b      	ldr	r3, [r7, #20]
 800a20a:	685b      	ldr	r3, [r3, #4]
 800a20c:	4618      	mov	r0, r3
 800a20e:	f003 fa6d 	bl	800d6ec <tcp_abort>
            newconn->pcb.tcp = NULL;
 800a212:	697b      	ldr	r3, [r7, #20]
 800a214:	2200      	movs	r2, #0
 800a216:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 800a218:	6978      	ldr	r0, [r7, #20]
 800a21a:	f7ff ff53 	bl	800a0c4 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	3314      	adds	r3, #20
 800a222:	f107 0210 	add.w	r2, r7, #16
 800a226:	4611      	mov	r1, r2
 800a228:	4618      	mov	r0, r3
 800a22a:	f00b ff64 	bl	80160f6 <sys_arch_mbox_tryfetch>
 800a22e:	4603      	mov	r3, r0
 800a230:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a234:	d1d5      	bne.n	800a1e2 <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	3314      	adds	r3, #20
 800a23a:	4618      	mov	r0, r3
 800a23c:	f00b fef0 	bl	8016020 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	3314      	adds	r3, #20
 800a244:	4618      	mov	r0, r3
 800a246:	f00b ff83 	bl	8016150 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 800a24a:	bf00      	nop
 800a24c:	3718      	adds	r7, #24
 800a24e:	46bd      	mov	sp, r7
 800a250:	bd80      	pop	{r7, pc}
	...

0800a254 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800a254:	b580      	push	{r7, lr}
 800a256:	b086      	sub	sp, #24
 800a258:	af00      	add	r7, sp, #0
 800a25a:	6078      	str	r0, [r7, #4]
 800a25c:	460b      	mov	r3, r1
 800a25e:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 800a260:	2300      	movs	r3, #0
 800a262:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	2b00      	cmp	r3, #0
 800a268:	d106      	bne.n	800a278 <lwip_netconn_do_close_internal+0x24>
 800a26a:	4b87      	ldr	r3, [pc, #540]	@ (800a488 <lwip_netconn_do_close_internal+0x234>)
 800a26c:	f240 32a2 	movw	r2, #930	@ 0x3a2
 800a270:	4986      	ldr	r1, [pc, #536]	@ (800a48c <lwip_netconn_do_close_internal+0x238>)
 800a272:	4887      	ldr	r0, [pc, #540]	@ (800a490 <lwip_netconn_do_close_internal+0x23c>)
 800a274:	f00c f994 	bl	80165a0 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	781b      	ldrb	r3, [r3, #0]
 800a27c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a280:	2b10      	cmp	r3, #16
 800a282:	d006      	beq.n	800a292 <lwip_netconn_do_close_internal+0x3e>
 800a284:	4b80      	ldr	r3, [pc, #512]	@ (800a488 <lwip_netconn_do_close_internal+0x234>)
 800a286:	f240 32a3 	movw	r2, #931	@ 0x3a3
 800a28a:	4982      	ldr	r1, [pc, #520]	@ (800a494 <lwip_netconn_do_close_internal+0x240>)
 800a28c:	4880      	ldr	r0, [pc, #512]	@ (800a490 <lwip_netconn_do_close_internal+0x23c>)
 800a28e:	f00c f987 	bl	80165a0 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	785b      	ldrb	r3, [r3, #1]
 800a296:	2b04      	cmp	r3, #4
 800a298:	d006      	beq.n	800a2a8 <lwip_netconn_do_close_internal+0x54>
 800a29a:	4b7b      	ldr	r3, [pc, #492]	@ (800a488 <lwip_netconn_do_close_internal+0x234>)
 800a29c:	f44f 7269 	mov.w	r2, #932	@ 0x3a4
 800a2a0:	497d      	ldr	r1, [pc, #500]	@ (800a498 <lwip_netconn_do_close_internal+0x244>)
 800a2a2:	487b      	ldr	r0, [pc, #492]	@ (800a490 <lwip_netconn_do_close_internal+0x23c>)
 800a2a4:	f00c f97c 	bl	80165a0 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	685b      	ldr	r3, [r3, #4]
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d106      	bne.n	800a2be <lwip_netconn_do_close_internal+0x6a>
 800a2b0:	4b75      	ldr	r3, [pc, #468]	@ (800a488 <lwip_netconn_do_close_internal+0x234>)
 800a2b2:	f240 32a5 	movw	r2, #933	@ 0x3a5
 800a2b6:	4979      	ldr	r1, [pc, #484]	@ (800a49c <lwip_netconn_do_close_internal+0x248>)
 800a2b8:	4875      	ldr	r0, [pc, #468]	@ (800a490 <lwip_netconn_do_close_internal+0x23c>)
 800a2ba:	f00c f971 	bl	80165a0 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d106      	bne.n	800a2d4 <lwip_netconn_do_close_internal+0x80>
 800a2c6:	4b70      	ldr	r3, [pc, #448]	@ (800a488 <lwip_netconn_do_close_internal+0x234>)
 800a2c8:	f240 32a6 	movw	r2, #934	@ 0x3a6
 800a2cc:	4974      	ldr	r1, [pc, #464]	@ (800a4a0 <lwip_netconn_do_close_internal+0x24c>)
 800a2ce:	4870      	ldr	r0, [pc, #448]	@ (800a490 <lwip_netconn_do_close_internal+0x23c>)
 800a2d0:	f00c f966 	bl	80165a0 <iprintf>

  tpcb = conn->pcb.tcp;
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	685b      	ldr	r3, [r3, #4]
 800a2d8:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a2de:	7a1b      	ldrb	r3, [r3, #8]
 800a2e0:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 800a2e2:	7bfb      	ldrb	r3, [r7, #15]
 800a2e4:	f003 0301 	and.w	r3, r3, #1
 800a2e8:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 800a2ea:	7bfb      	ldrb	r3, [r7, #15]
 800a2ec:	f003 0302 	and.w	r3, r3, #2
 800a2f0:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 800a2f2:	7bfb      	ldrb	r3, [r7, #15]
 800a2f4:	2b03      	cmp	r3, #3
 800a2f6:	d102      	bne.n	800a2fe <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 800a2f8:	2301      	movs	r3, #1
 800a2fa:	75bb      	strb	r3, [r7, #22]
 800a2fc:	e01f      	b.n	800a33e <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 800a2fe:	7bbb      	ldrb	r3, [r7, #14]
 800a300:	2b00      	cmp	r3, #0
 800a302:	d00e      	beq.n	800a322 <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 800a304:	693b      	ldr	r3, [r7, #16]
 800a306:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 800a308:	2b05      	cmp	r3, #5
 800a30a:	d007      	beq.n	800a31c <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 800a30c:	693b      	ldr	r3, [r7, #16]
 800a30e:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 800a310:	2b06      	cmp	r3, #6
 800a312:	d003      	beq.n	800a31c <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 800a314:	693b      	ldr	r3, [r7, #16]
 800a316:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 800a318:	2b08      	cmp	r3, #8
 800a31a:	d102      	bne.n	800a322 <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 800a31c:	2301      	movs	r3, #1
 800a31e:	75bb      	strb	r3, [r7, #22]
 800a320:	e00d      	b.n	800a33e <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 800a322:	7b7b      	ldrb	r3, [r7, #13]
 800a324:	2b00      	cmp	r3, #0
 800a326:	d008      	beq.n	800a33a <lwip_netconn_do_close_internal+0xe6>
 800a328:	693b      	ldr	r3, [r7, #16]
 800a32a:	8b5b      	ldrh	r3, [r3, #26]
 800a32c:	f003 0310 	and.w	r3, r3, #16
 800a330:	2b00      	cmp	r3, #0
 800a332:	d002      	beq.n	800a33a <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 800a334:	2301      	movs	r3, #1
 800a336:	75bb      	strb	r3, [r7, #22]
 800a338:	e001      	b.n	800a33e <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 800a33a:	2300      	movs	r3, #0
 800a33c:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 800a33e:	7dbb      	ldrb	r3, [r7, #22]
 800a340:	2b00      	cmp	r3, #0
 800a342:	d003      	beq.n	800a34c <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 800a344:	2100      	movs	r1, #0
 800a346:	6938      	ldr	r0, [r7, #16]
 800a348:	f004 fa6c 	bl	800e824 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 800a34c:	693b      	ldr	r3, [r7, #16]
 800a34e:	7d1b      	ldrb	r3, [r3, #20]
 800a350:	2b01      	cmp	r3, #1
 800a352:	d104      	bne.n	800a35e <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 800a354:	2100      	movs	r1, #0
 800a356:	6938      	ldr	r0, [r7, #16]
 800a358:	f004 fadc 	bl	800e914 <tcp_accept>
 800a35c:	e01d      	b.n	800a39a <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 800a35e:	7bbb      	ldrb	r3, [r7, #14]
 800a360:	2b00      	cmp	r3, #0
 800a362:	d007      	beq.n	800a374 <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 800a364:	2100      	movs	r1, #0
 800a366:	6938      	ldr	r0, [r7, #16]
 800a368:	f004 fa6e 	bl	800e848 <tcp_recv>
      tcp_accept(tpcb, NULL);
 800a36c:	2100      	movs	r1, #0
 800a36e:	6938      	ldr	r0, [r7, #16]
 800a370:	f004 fad0 	bl	800e914 <tcp_accept>
    }
    if (shut_tx) {
 800a374:	7b7b      	ldrb	r3, [r7, #13]
 800a376:	2b00      	cmp	r3, #0
 800a378:	d003      	beq.n	800a382 <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 800a37a:	2100      	movs	r1, #0
 800a37c:	6938      	ldr	r0, [r7, #16]
 800a37e:	f004 fa85 	bl	800e88c <tcp_sent>
    }
    if (shut_close) {
 800a382:	7dbb      	ldrb	r3, [r7, #22]
 800a384:	2b00      	cmp	r3, #0
 800a386:	d008      	beq.n	800a39a <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 800a388:	2200      	movs	r2, #0
 800a38a:	2100      	movs	r1, #0
 800a38c:	6938      	ldr	r0, [r7, #16]
 800a38e:	f004 fad9 	bl	800e944 <tcp_poll>
      tcp_err(tpcb, NULL);
 800a392:	2100      	movs	r1, #0
 800a394:	6938      	ldr	r0, [r7, #16]
 800a396:	f004 fa9b 	bl	800e8d0 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 800a39a:	7dbb      	ldrb	r3, [r7, #22]
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d005      	beq.n	800a3ac <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 800a3a0:	6938      	ldr	r0, [r7, #16]
 800a3a2:	f003 f85d 	bl	800d460 <tcp_close>
 800a3a6:	4603      	mov	r3, r0
 800a3a8:	75fb      	strb	r3, [r7, #23]
 800a3aa:	e007      	b.n	800a3bc <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 800a3ac:	7bbb      	ldrb	r3, [r7, #14]
 800a3ae:	7b7a      	ldrb	r2, [r7, #13]
 800a3b0:	4619      	mov	r1, r3
 800a3b2:	6938      	ldr	r0, [r7, #16]
 800a3b4:	f003 f880 	bl	800d4b8 <tcp_shutdown>
 800a3b8:	4603      	mov	r3, r0
 800a3ba:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 800a3bc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d102      	bne.n	800a3ca <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 800a3c4:	2301      	movs	r3, #1
 800a3c6:	757b      	strb	r3, [r7, #21]
 800a3c8:	e016      	b.n	800a3f8 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 800a3ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a3ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3d2:	d10f      	bne.n	800a3f4 <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a3d8:	7a5b      	ldrb	r3, [r3, #9]
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d10c      	bne.n	800a3f8 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 800a3de:	2301      	movs	r3, #1
 800a3e0:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 800a3e2:	7dbb      	ldrb	r3, [r7, #22]
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d007      	beq.n	800a3f8 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 800a3e8:	6938      	ldr	r0, [r7, #16]
 800a3ea:	f003 f97f 	bl	800d6ec <tcp_abort>
          err = ERR_OK;
 800a3ee:	2300      	movs	r3, #0
 800a3f0:	75fb      	strb	r3, [r7, #23]
 800a3f2:	e001      	b.n	800a3f8 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 800a3f4:	2301      	movs	r3, #1
 800a3f6:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 800a3f8:	7d7b      	ldrb	r3, [r7, #21]
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d052      	beq.n	800a4a4 <lwip_netconn_do_close_internal+0x250>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	330c      	adds	r3, #12
 800a406:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a40c:	7dfa      	ldrb	r2, [r7, #23]
 800a40e:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	2200      	movs	r2, #0
 800a414:	625a      	str	r2, [r3, #36]	@ 0x24
    conn->state = NETCONN_NONE;
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	2200      	movs	r2, #0
 800a41a:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 800a41c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a420:	2b00      	cmp	r3, #0
 800a422:	d129      	bne.n	800a478 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 800a424:	7dbb      	ldrb	r3, [r7, #22]
 800a426:	2b00      	cmp	r3, #0
 800a428:	d00c      	beq.n	800a444 <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	2200      	movs	r2, #0
 800a42e:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a434:	2b00      	cmp	r3, #0
 800a436:	d005      	beq.n	800a444 <lwip_netconn_do_close_internal+0x1f0>
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a43c:	2200      	movs	r2, #0
 800a43e:	2104      	movs	r1, #4
 800a440:	6878      	ldr	r0, [r7, #4]
 800a442:	4798      	blx	r3
      }
      if (shut_rx) {
 800a444:	7bbb      	ldrb	r3, [r7, #14]
 800a446:	2b00      	cmp	r3, #0
 800a448:	d009      	beq.n	800a45e <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d005      	beq.n	800a45e <lwip_netconn_do_close_internal+0x20a>
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a456:	2200      	movs	r2, #0
 800a458:	2100      	movs	r1, #0
 800a45a:	6878      	ldr	r0, [r7, #4]
 800a45c:	4798      	blx	r3
      }
      if (shut_tx) {
 800a45e:	7b7b      	ldrb	r3, [r7, #13]
 800a460:	2b00      	cmp	r3, #0
 800a462:	d009      	beq.n	800a478 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d005      	beq.n	800a478 <lwip_netconn_do_close_internal+0x224>
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a470:	2200      	movs	r2, #0
 800a472:	2102      	movs	r1, #2
 800a474:	6878      	ldr	r0, [r7, #4]
 800a476:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800a478:	78fb      	ldrb	r3, [r7, #3]
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d002      	beq.n	800a484 <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 800a47e:	68b8      	ldr	r0, [r7, #8]
 800a480:	f00b fecc 	bl	801621c <sys_sem_signal>
    }
    return ERR_OK;
 800a484:	2300      	movs	r3, #0
 800a486:	e03c      	b.n	800a502 <lwip_netconn_do_close_internal+0x2ae>
 800a488:	08017e84 	.word	0x08017e84
 800a48c:	08018158 	.word	0x08018158
 800a490:	08017ec8 	.word	0x08017ec8
 800a494:	08018168 	.word	0x08018168
 800a498:	08018188 	.word	0x08018188
 800a49c:	080181ac 	.word	0x080181ac
 800a4a0:	08017fec 	.word	0x08017fec
  }
  if (!close_finished) {
 800a4a4:	7d7b      	ldrb	r3, [r7, #21]
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d11e      	bne.n	800a4e8 <lwip_netconn_do_close_internal+0x294>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 800a4aa:	693b      	ldr	r3, [r7, #16]
 800a4ac:	7d1b      	ldrb	r3, [r3, #20]
 800a4ae:	2b01      	cmp	r3, #1
 800a4b0:	d106      	bne.n	800a4c0 <lwip_netconn_do_close_internal+0x26c>
 800a4b2:	4b16      	ldr	r3, [pc, #88]	@ (800a50c <lwip_netconn_do_close_internal+0x2b8>)
 800a4b4:	f240 4241 	movw	r2, #1089	@ 0x441
 800a4b8:	4915      	ldr	r1, [pc, #84]	@ (800a510 <lwip_netconn_do_close_internal+0x2bc>)
 800a4ba:	4816      	ldr	r0, [pc, #88]	@ (800a514 <lwip_netconn_do_close_internal+0x2c0>)
 800a4bc:	f00c f870 	bl	80165a0 <iprintf>
    if (shut_tx) {
 800a4c0:	7b7b      	ldrb	r3, [r7, #13]
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d003      	beq.n	800a4ce <lwip_netconn_do_close_internal+0x27a>
      tcp_sent(tpcb, sent_tcp);
 800a4c6:	4914      	ldr	r1, [pc, #80]	@ (800a518 <lwip_netconn_do_close_internal+0x2c4>)
 800a4c8:	6938      	ldr	r0, [r7, #16]
 800a4ca:	f004 f9df 	bl	800e88c <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 800a4ce:	2201      	movs	r2, #1
 800a4d0:	4912      	ldr	r1, [pc, #72]	@ (800a51c <lwip_netconn_do_close_internal+0x2c8>)
 800a4d2:	6938      	ldr	r0, [r7, #16]
 800a4d4:	f004 fa36 	bl	800e944 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 800a4d8:	4911      	ldr	r1, [pc, #68]	@ (800a520 <lwip_netconn_do_close_internal+0x2cc>)
 800a4da:	6938      	ldr	r0, [r7, #16]
 800a4dc:	f004 f9f8 	bl	800e8d0 <tcp_err>
    tcp_arg(tpcb, conn);
 800a4e0:	6879      	ldr	r1, [r7, #4]
 800a4e2:	6938      	ldr	r0, [r7, #16]
 800a4e4:	f004 f99e 	bl	800e824 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 800a4e8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d106      	bne.n	800a4fe <lwip_netconn_do_close_internal+0x2aa>
 800a4f0:	4b06      	ldr	r3, [pc, #24]	@ (800a50c <lwip_netconn_do_close_internal+0x2b8>)
 800a4f2:	f240 424d 	movw	r2, #1101	@ 0x44d
 800a4f6:	490b      	ldr	r1, [pc, #44]	@ (800a524 <lwip_netconn_do_close_internal+0x2d0>)
 800a4f8:	4806      	ldr	r0, [pc, #24]	@ (800a514 <lwip_netconn_do_close_internal+0x2c0>)
 800a4fa:	f00c f851 	bl	80165a0 <iprintf>
  return err;
 800a4fe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a502:	4618      	mov	r0, r3
 800a504:	3718      	adds	r7, #24
 800a506:	46bd      	mov	sp, r7
 800a508:	bd80      	pop	{r7, pc}
 800a50a:	bf00      	nop
 800a50c:	08017e84 	.word	0x08017e84
 800a510:	080181c0 	.word	0x080181c0
 800a514:	08017ec8 	.word	0x08017ec8
 800a518:	08009ab9 	.word	0x08009ab9
 800a51c:	080099e9 	.word	0x080099e9
 800a520:	08009b65 	.word	0x08009b65
 800a524:	080181e4 	.word	0x080181e4

0800a528 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 800a528:	b580      	push	{r7, lr}
 800a52a:	b084      	sub	sp, #16
 800a52c:	af00      	add	r7, sp, #0
 800a52e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	785b      	ldrb	r3, [r3, #1]
 800a53a:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 800a53c:	7afb      	ldrb	r3, [r7, #11]
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d00d      	beq.n	800a55e <lwip_netconn_do_delconn+0x36>
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	781b      	ldrb	r3, [r3, #0]
 800a548:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a54c:	2b10      	cmp	r3, #16
 800a54e:	d006      	beq.n	800a55e <lwip_netconn_do_delconn+0x36>
 800a550:	4b61      	ldr	r3, [pc, #388]	@ (800a6d8 <lwip_netconn_do_delconn+0x1b0>)
 800a552:	f240 425e 	movw	r2, #1118	@ 0x45e
 800a556:	4961      	ldr	r1, [pc, #388]	@ (800a6dc <lwip_netconn_do_delconn+0x1b4>)
 800a558:	4861      	ldr	r0, [pc, #388]	@ (800a6e0 <lwip_netconn_do_delconn+0x1b8>)
 800a55a:	f00c f821 	bl	80165a0 <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 800a55e:	7afb      	ldrb	r3, [r7, #11]
 800a560:	2b00      	cmp	r3, #0
 800a562:	d005      	beq.n	800a570 <lwip_netconn_do_delconn+0x48>
 800a564:	7afb      	ldrb	r3, [r7, #11]
 800a566:	2b02      	cmp	r3, #2
 800a568:	d002      	beq.n	800a570 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 800a56a:	7afb      	ldrb	r3, [r7, #11]
 800a56c:	2b03      	cmp	r3, #3
 800a56e:	d10a      	bne.n	800a586 <lwip_netconn_do_delconn+0x5e>
       (state != NETCONN_CONNECT)) ||
 800a570:	7afb      	ldrb	r3, [r7, #11]
 800a572:	2b03      	cmp	r3, #3
 800a574:	d10b      	bne.n	800a58e <lwip_netconn_do_delconn+0x66>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a57e:	f003 0304 	and.w	r3, r3, #4
 800a582:	2b00      	cmp	r3, #0
 800a584:	d103      	bne.n	800a58e <lwip_netconn_do_delconn+0x66>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	22fb      	movs	r2, #251	@ 0xfb
 800a58a:	711a      	strb	r2, [r3, #4]
 800a58c:	e098      	b.n	800a6c0 <lwip_netconn_do_delconn+0x198>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 800a58e:	7afb      	ldrb	r3, [r7, #11]
 800a590:	2b03      	cmp	r3, #3
 800a592:	d10e      	bne.n	800a5b2 <lwip_netconn_do_delconn+0x8a>
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a59c:	f003 0304 	and.w	r3, r3, #4
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d106      	bne.n	800a5b2 <lwip_netconn_do_delconn+0x8a>
 800a5a4:	4b4c      	ldr	r3, [pc, #304]	@ (800a6d8 <lwip_netconn_do_delconn+0x1b0>)
 800a5a6:	f240 427a 	movw	r2, #1146	@ 0x47a
 800a5aa:	494e      	ldr	r1, [pc, #312]	@ (800a6e4 <lwip_netconn_do_delconn+0x1bc>)
 800a5ac:	484c      	ldr	r0, [pc, #304]	@ (800a6e0 <lwip_netconn_do_delconn+0x1b8>)
 800a5ae:	f00b fff7 	bl	80165a0 <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	2200      	movs	r2, #0
 800a5b6:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	4618      	mov	r0, r3
 800a5be:	f7ff fdcb 	bl	800a158 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	685b      	ldr	r3, [r3, #4]
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d05f      	beq.n	800a68c <lwip_netconn_do_delconn+0x164>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	781b      	ldrb	r3, [r3, #0]
 800a5d2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a5d6:	2b10      	cmp	r3, #16
 800a5d8:	d00d      	beq.n	800a5f6 <lwip_netconn_do_delconn+0xce>
 800a5da:	2b20      	cmp	r3, #32
 800a5dc:	d151      	bne.n	800a682 <lwip_netconn_do_delconn+0x15a>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	685b      	ldr	r3, [r3, #4]
 800a5e4:	2200      	movs	r2, #0
 800a5e6:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	685b      	ldr	r3, [r3, #4]
 800a5ee:	4618      	mov	r0, r3
 800a5f0:	f009 f998 	bl	8013924 <udp_remove>
          break;
 800a5f4:	e046      	b.n	800a684 <lwip_netconn_do_delconn+0x15c>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d006      	beq.n	800a60e <lwip_netconn_do_delconn+0xe6>
 800a600:	4b35      	ldr	r3, [pc, #212]	@ (800a6d8 <lwip_netconn_do_delconn+0x1b0>)
 800a602:	f240 4294 	movw	r2, #1172	@ 0x494
 800a606:	4938      	ldr	r1, [pc, #224]	@ (800a6e8 <lwip_netconn_do_delconn+0x1c0>)
 800a608:	4835      	ldr	r0, [pc, #212]	@ (800a6e0 <lwip_netconn_do_delconn+0x1b8>)
 800a60a:	f00b ffc9 	bl	80165a0 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	2204      	movs	r2, #4
 800a614:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	2203      	movs	r2, #3
 800a61a:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	68fa      	ldr	r2, [r7, #12]
 800a622:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	2100      	movs	r1, #0
 800a62a:	4618      	mov	r0, r3
 800a62c:	f7ff fe12 	bl	800a254 <lwip_netconn_do_close_internal>
 800a630:	4603      	mov	r3, r0
 800a632:	2b00      	cmp	r3, #0
 800a634:	d04b      	beq.n	800a6ce <lwip_netconn_do_delconn+0x1a6>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	785b      	ldrb	r3, [r3, #1]
 800a63c:	2b04      	cmp	r3, #4
 800a63e:	d006      	beq.n	800a64e <lwip_netconn_do_delconn+0x126>
 800a640:	4b25      	ldr	r3, [pc, #148]	@ (800a6d8 <lwip_netconn_do_delconn+0x1b0>)
 800a642:	f240 429a 	movw	r2, #1178	@ 0x49a
 800a646:	4929      	ldr	r1, [pc, #164]	@ (800a6ec <lwip_netconn_do_delconn+0x1c4>)
 800a648:	4825      	ldr	r0, [pc, #148]	@ (800a6e0 <lwip_netconn_do_delconn+0x1b8>)
 800a64a:	f00b ffa9 	bl	80165a0 <iprintf>
            UNLOCK_TCPIP_CORE();
 800a64e:	4828      	ldr	r0, [pc, #160]	@ (800a6f0 <lwip_netconn_do_delconn+0x1c8>)
 800a650:	f00b fe55 	bl	80162fe <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	330c      	adds	r3, #12
 800a65a:	2100      	movs	r1, #0
 800a65c:	4618      	mov	r0, r3
 800a65e:	f00b fdac 	bl	80161ba <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 800a662:	4823      	ldr	r0, [pc, #140]	@ (800a6f0 <lwip_netconn_do_delconn+0x1c8>)
 800a664:	f00b fe3c 	bl	80162e0 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	785b      	ldrb	r3, [r3, #1]
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d02d      	beq.n	800a6ce <lwip_netconn_do_delconn+0x1a6>
 800a672:	4b19      	ldr	r3, [pc, #100]	@ (800a6d8 <lwip_netconn_do_delconn+0x1b0>)
 800a674:	f240 429e 	movw	r2, #1182	@ 0x49e
 800a678:	491c      	ldr	r1, [pc, #112]	@ (800a6ec <lwip_netconn_do_delconn+0x1c4>)
 800a67a:	4819      	ldr	r0, [pc, #100]	@ (800a6e0 <lwip_netconn_do_delconn+0x1b8>)
 800a67c:	f00b ff90 	bl	80165a0 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 800a680:	e025      	b.n	800a6ce <lwip_netconn_do_delconn+0x1a6>
#endif /* LWIP_TCP */
        default:
          break;
 800a682:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	2200      	movs	r2, #0
 800a68a:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a692:	2b00      	cmp	r3, #0
 800a694:	d007      	beq.n	800a6a6 <lwip_netconn_do_delconn+0x17e>
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a69c:	68fa      	ldr	r2, [r7, #12]
 800a69e:	6810      	ldr	r0, [r2, #0]
 800a6a0:	2200      	movs	r2, #0
 800a6a2:	2100      	movs	r1, #0
 800a6a4:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d007      	beq.n	800a6c0 <lwip_netconn_do_delconn+0x198>
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a6b6:	68fa      	ldr	r2, [r7, #12]
 800a6b8:	6810      	ldr	r0, [r2, #0]
 800a6ba:	2200      	movs	r2, #0
 800a6bc:	2102      	movs	r1, #2
 800a6be:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	330c      	adds	r3, #12
 800a6c6:	4618      	mov	r0, r3
 800a6c8:	f00b fdc2 	bl	8016250 <sys_sem_valid>
 800a6cc:	e000      	b.n	800a6d0 <lwip_netconn_do_delconn+0x1a8>
          return;
 800a6ce:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 800a6d0:	3710      	adds	r7, #16
 800a6d2:	46bd      	mov	sp, r7
 800a6d4:	bd80      	pop	{r7, pc}
 800a6d6:	bf00      	nop
 800a6d8:	08017e84 	.word	0x08017e84
 800a6dc:	080181f4 	.word	0x080181f4
 800a6e0:	08017ec8 	.word	0x08017ec8
 800a6e4:	08018208 	.word	0x08018208
 800a6e8:	08018228 	.word	0x08018228
 800a6ec:	08018244 	.word	0x08018244
 800a6f0:	200093f0 	.word	0x200093f0

0800a6f4 <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 800a6f4:	b580      	push	{r7, lr}
 800a6f6:	b084      	sub	sp, #16
 800a6f8:	af00      	add	r7, sp, #0
 800a6fa:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800a700:	68bb      	ldr	r3, [r7, #8]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	685b      	ldr	r3, [r3, #4]
 800a706:	2b00      	cmp	r3, #0
 800a708:	d025      	beq.n	800a756 <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800a70a:	68bb      	ldr	r3, [r7, #8]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	781b      	ldrb	r3, [r3, #0]
 800a710:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a714:	2b10      	cmp	r3, #16
 800a716:	d00e      	beq.n	800a736 <lwip_netconn_do_bind+0x42>
 800a718:	2b20      	cmp	r3, #32
 800a71a:	d119      	bne.n	800a750 <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800a71c:	68bb      	ldr	r3, [r7, #8]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	6858      	ldr	r0, [r3, #4]
 800a722:	68bb      	ldr	r3, [r7, #8]
 800a724:	6899      	ldr	r1, [r3, #8]
 800a726:	68bb      	ldr	r3, [r7, #8]
 800a728:	899b      	ldrh	r3, [r3, #12]
 800a72a:	461a      	mov	r2, r3
 800a72c:	f009 f852 	bl	80137d4 <udp_bind>
 800a730:	4603      	mov	r3, r0
 800a732:	73fb      	strb	r3, [r7, #15]
        break;
 800a734:	e011      	b.n	800a75a <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800a736:	68bb      	ldr	r3, [r7, #8]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	6858      	ldr	r0, [r3, #4]
 800a73c:	68bb      	ldr	r3, [r7, #8]
 800a73e:	6899      	ldr	r1, [r3, #8]
 800a740:	68bb      	ldr	r3, [r7, #8]
 800a742:	899b      	ldrh	r3, [r3, #12]
 800a744:	461a      	mov	r2, r3
 800a746:	f002 ffdd 	bl	800d704 <tcp_bind>
 800a74a:	4603      	mov	r3, r0
 800a74c:	73fb      	strb	r3, [r7, #15]
        break;
 800a74e:	e004      	b.n	800a75a <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 800a750:	23fa      	movs	r3, #250	@ 0xfa
 800a752:	73fb      	strb	r3, [r7, #15]
        break;
 800a754:	e001      	b.n	800a75a <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
 800a756:	23fa      	movs	r3, #250	@ 0xfa
 800a758:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 800a75a:	68bb      	ldr	r3, [r7, #8]
 800a75c:	7bfa      	ldrb	r2, [r7, #15]
 800a75e:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800a760:	bf00      	nop
 800a762:	3710      	adds	r7, #16
 800a764:	46bd      	mov	sp, r7
 800a766:	bd80      	pop	{r7, pc}

0800a768 <lwip_netconn_do_listen>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_listen(void *m)
{
 800a768:	b580      	push	{r7, lr}
 800a76a:	b086      	sub	sp, #24
 800a76c:	af00      	add	r7, sp, #0
 800a76e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	617b      	str	r3, [r7, #20]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800a774:	697b      	ldr	r3, [r7, #20]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	685b      	ldr	r3, [r3, #4]
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d07f      	beq.n	800a87e <lwip_netconn_do_listen+0x116>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800a77e:	697b      	ldr	r3, [r7, #20]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	781b      	ldrb	r3, [r3, #0]
 800a784:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a788:	2b10      	cmp	r3, #16
 800a78a:	d175      	bne.n	800a878 <lwip_netconn_do_listen+0x110>
      if (msg->conn->state == NETCONN_NONE) {
 800a78c:	697b      	ldr	r3, [r7, #20]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	785b      	ldrb	r3, [r3, #1]
 800a792:	2b00      	cmp	r3, #0
 800a794:	d165      	bne.n	800a862 <lwip_netconn_do_listen+0xfa>
        struct tcp_pcb *lpcb;
        if (msg->conn->pcb.tcp->state != CLOSED) {
 800a796:	697b      	ldr	r3, [r7, #20]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	685b      	ldr	r3, [r3, #4]
 800a79c:	7d1b      	ldrb	r3, [r3, #20]
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d002      	beq.n	800a7a8 <lwip_netconn_do_listen+0x40>
          /* connection is not closed, cannot listen */
          err = ERR_VAL;
 800a7a2:	23fa      	movs	r3, #250	@ 0xfa
 800a7a4:	72fb      	strb	r3, [r7, #11]
 800a7a6:	e06c      	b.n	800a882 <lwip_netconn_do_listen+0x11a>
        } else {
          u8_t backlog;
#if TCP_LISTEN_BACKLOG
          backlog = msg->msg.lb.backlog;
#else  /* TCP_LISTEN_BACKLOG */
          backlog = TCP_DEFAULT_LISTEN_BACKLOG;
 800a7a8:	23ff      	movs	r3, #255	@ 0xff
 800a7aa:	74fb      	strb	r3, [r7, #19]
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->local_ip,  IPADDR_TYPE_ANY);
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->remote_ip, IPADDR_TYPE_ANY);
          }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

          lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 800a7ac:	697b      	ldr	r3, [r7, #20]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	685b      	ldr	r3, [r3, #4]
 800a7b2:	f107 020b 	add.w	r2, r7, #11
 800a7b6:	7cf9      	ldrb	r1, [r7, #19]
 800a7b8:	4618      	mov	r0, r3
 800a7ba:	f003 f85b 	bl	800d874 <tcp_listen_with_backlog_and_err>
 800a7be:	60f8      	str	r0, [r7, #12]

          if (lpcb == NULL) {
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d05d      	beq.n	800a882 <lwip_netconn_do_listen+0x11a>
            /* in this case, the old pcb is still allocated */
          } else {
            /* delete the recvmbox and allocate the acceptmbox */
            if (sys_mbox_valid(&msg->conn->recvmbox)) {
 800a7c6:	697b      	ldr	r3, [r7, #20]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	3310      	adds	r3, #16
 800a7cc:	4618      	mov	r0, r3
 800a7ce:	f00b fcae 	bl	801612e <sys_mbox_valid>
 800a7d2:	4603      	mov	r3, r0
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d00b      	beq.n	800a7f0 <lwip_netconn_do_listen+0x88>
              /** @todo: should we drain the recvmbox here? */
              sys_mbox_free(&msg->conn->recvmbox);
 800a7d8:	697b      	ldr	r3, [r7, #20]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	3310      	adds	r3, #16
 800a7de:	4618      	mov	r0, r3
 800a7e0:	f00b fc1e 	bl	8016020 <sys_mbox_free>
              sys_mbox_set_invalid(&msg->conn->recvmbox);
 800a7e4:	697b      	ldr	r3, [r7, #20]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	3310      	adds	r3, #16
 800a7ea:	4618      	mov	r0, r3
 800a7ec:	f00b fcb0 	bl	8016150 <sys_mbox_set_invalid>
            }
            err = ERR_OK;
 800a7f0:	2300      	movs	r3, #0
 800a7f2:	72fb      	strb	r3, [r7, #11]
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 800a7f4:	697b      	ldr	r3, [r7, #20]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	3314      	adds	r3, #20
 800a7fa:	4618      	mov	r0, r3
 800a7fc:	f00b fc97 	bl	801612e <sys_mbox_valid>
 800a800:	4603      	mov	r3, r0
 800a802:	2b00      	cmp	r3, #0
 800a804:	d108      	bne.n	800a818 <lwip_netconn_do_listen+0xb0>
              err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 800a806:	697b      	ldr	r3, [r7, #20]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	3314      	adds	r3, #20
 800a80c:	2106      	movs	r1, #6
 800a80e:	4618      	mov	r0, r3
 800a810:	f00b fbe4 	bl	8015fdc <sys_mbox_new>
 800a814:	4603      	mov	r3, r0
 800a816:	72fb      	strb	r3, [r7, #11]
            }
            if (err == ERR_OK) {
 800a818:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d118      	bne.n	800a852 <lwip_netconn_do_listen+0xea>
              msg->conn->state = NETCONN_LISTEN;
 800a820:	697b      	ldr	r3, [r7, #20]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	2202      	movs	r2, #2
 800a826:	705a      	strb	r2, [r3, #1]
              msg->conn->pcb.tcp = lpcb;
 800a828:	697b      	ldr	r3, [r7, #20]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	68fa      	ldr	r2, [r7, #12]
 800a82e:	605a      	str	r2, [r3, #4]
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 800a830:	697b      	ldr	r3, [r7, #20]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	685a      	ldr	r2, [r3, #4]
 800a836:	697b      	ldr	r3, [r7, #20]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	4619      	mov	r1, r3
 800a83c:	4610      	mov	r0, r2
 800a83e:	f003 fff1 	bl	800e824 <tcp_arg>
              tcp_accept(msg->conn->pcb.tcp, accept_function);
 800a842:	697b      	ldr	r3, [r7, #20]
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	685b      	ldr	r3, [r3, #4]
 800a848:	4912      	ldr	r1, [pc, #72]	@ (800a894 <lwip_netconn_do_listen+0x12c>)
 800a84a:	4618      	mov	r0, r3
 800a84c:	f004 f862 	bl	800e914 <tcp_accept>
 800a850:	e017      	b.n	800a882 <lwip_netconn_do_listen+0x11a>
            } else {
              /* since the old pcb is already deallocated, free lpcb now */
              tcp_close(lpcb);
 800a852:	68f8      	ldr	r0, [r7, #12]
 800a854:	f002 fe04 	bl	800d460 <tcp_close>
              msg->conn->pcb.tcp = NULL;
 800a858:	697b      	ldr	r3, [r7, #20]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	2200      	movs	r2, #0
 800a85e:	605a      	str	r2, [r3, #4]
 800a860:	e00f      	b.n	800a882 <lwip_netconn_do_listen+0x11a>
            }
          }
        }
      } else if (msg->conn->state == NETCONN_LISTEN) {
 800a862:	697b      	ldr	r3, [r7, #20]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	785b      	ldrb	r3, [r3, #1]
 800a868:	2b02      	cmp	r3, #2
 800a86a:	d102      	bne.n	800a872 <lwip_netconn_do_listen+0x10a>
        /* already listening, allow updating of the backlog */
        err = ERR_OK;
 800a86c:	2300      	movs	r3, #0
 800a86e:	72fb      	strb	r3, [r7, #11]
 800a870:	e007      	b.n	800a882 <lwip_netconn_do_listen+0x11a>
        tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
      } else {
        err = ERR_CONN;
 800a872:	23f5      	movs	r3, #245	@ 0xf5
 800a874:	72fb      	strb	r3, [r7, #11]
 800a876:	e004      	b.n	800a882 <lwip_netconn_do_listen+0x11a>
      }
    } else {
      err = ERR_ARG;
 800a878:	23f0      	movs	r3, #240	@ 0xf0
 800a87a:	72fb      	strb	r3, [r7, #11]
 800a87c:	e001      	b.n	800a882 <lwip_netconn_do_listen+0x11a>
    }
  } else {
    err = ERR_CONN;
 800a87e:	23f5      	movs	r3, #245	@ 0xf5
 800a880:	72fb      	strb	r3, [r7, #11]
  }
  msg->err = err;
 800a882:	f997 200b 	ldrsb.w	r2, [r7, #11]
 800a886:	697b      	ldr	r3, [r7, #20]
 800a888:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800a88a:	bf00      	nop
 800a88c:	3718      	adds	r7, #24
 800a88e:	46bd      	mov	sp, r7
 800a890:	bd80      	pop	{r7, pc}
 800a892:	bf00      	nop
 800a894:	08009d69 	.word	0x08009d69

0800a898 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 800a898:	b580      	push	{r7, lr}
 800a89a:	b086      	sub	sp, #24
 800a89c:	af00      	add	r7, sp, #0
 800a89e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 800a8a4:	693b      	ldr	r3, [r7, #16]
 800a8a6:	2200      	movs	r2, #0
 800a8a8:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 800a8aa:	693b      	ldr	r3, [r7, #16]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	685b      	ldr	r3, [r3, #4]
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d022      	beq.n	800a8fa <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800a8b4:	693b      	ldr	r3, [r7, #16]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	781b      	ldrb	r3, [r3, #0]
 800a8ba:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a8be:	2b10      	cmp	r3, #16
 800a8c0:	d11b      	bne.n	800a8fa <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 800a8c2:	693b      	ldr	r3, [r7, #16]
 800a8c4:	689b      	ldr	r3, [r3, #8]
 800a8c6:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 800a8c8:	697b      	ldr	r3, [r7, #20]
 800a8ca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a8ce:	d202      	bcs.n	800a8d6 <lwip_netconn_do_recv+0x3e>
 800a8d0:	697b      	ldr	r3, [r7, #20]
 800a8d2:	b29b      	uxth	r3, r3
 800a8d4:	e001      	b.n	800a8da <lwip_netconn_do_recv+0x42>
 800a8d6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a8da:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 800a8dc:	693b      	ldr	r3, [r7, #16]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	685b      	ldr	r3, [r3, #4]
 800a8e2:	89fa      	ldrh	r2, [r7, #14]
 800a8e4:	4611      	mov	r1, r2
 800a8e6:	4618      	mov	r0, r3
 800a8e8:	f003 f8c8 	bl	800da7c <tcp_recved>
        remaining -= recved;
 800a8ec:	89fb      	ldrh	r3, [r7, #14]
 800a8ee:	697a      	ldr	r2, [r7, #20]
 800a8f0:	1ad3      	subs	r3, r2, r3
 800a8f2:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 800a8f4:	697b      	ldr	r3, [r7, #20]
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d1e6      	bne.n	800a8c8 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 800a8fa:	bf00      	nop
 800a8fc:	3718      	adds	r7, #24
 800a8fe:	46bd      	mov	sp, r7
 800a900:	bd80      	pop	{r7, pc}
	...

0800a904 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800a904:	b580      	push	{r7, lr}
 800a906:	b088      	sub	sp, #32
 800a908:	af00      	add	r7, sp, #0
 800a90a:	6078      	str	r0, [r7, #4]
 800a90c:	460b      	mov	r3, r1
 800a90e:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 800a910:	2300      	movs	r3, #0
 800a912:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	2b00      	cmp	r3, #0
 800a918:	d106      	bne.n	800a928 <lwip_netconn_do_writemore+0x24>
 800a91a:	4b61      	ldr	r3, [pc, #388]	@ (800aaa0 <lwip_netconn_do_writemore+0x19c>)
 800a91c:	f240 6273 	movw	r2, #1651	@ 0x673
 800a920:	4960      	ldr	r1, [pc, #384]	@ (800aaa4 <lwip_netconn_do_writemore+0x1a0>)
 800a922:	4861      	ldr	r0, [pc, #388]	@ (800aaa8 <lwip_netconn_do_writemore+0x1a4>)
 800a924:	f00b fe3c 	bl	80165a0 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	785b      	ldrb	r3, [r3, #1]
 800a92c:	2b01      	cmp	r3, #1
 800a92e:	d006      	beq.n	800a93e <lwip_netconn_do_writemore+0x3a>
 800a930:	4b5b      	ldr	r3, [pc, #364]	@ (800aaa0 <lwip_netconn_do_writemore+0x19c>)
 800a932:	f240 6274 	movw	r2, #1652	@ 0x674
 800a936:	495d      	ldr	r1, [pc, #372]	@ (800aaac <lwip_netconn_do_writemore+0x1a8>)
 800a938:	485b      	ldr	r0, [pc, #364]	@ (800aaa8 <lwip_netconn_do_writemore+0x1a4>)
 800a93a:	f00b fe31 	bl	80165a0 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a942:	2b00      	cmp	r3, #0
 800a944:	d106      	bne.n	800a954 <lwip_netconn_do_writemore+0x50>
 800a946:	4b56      	ldr	r3, [pc, #344]	@ (800aaa0 <lwip_netconn_do_writemore+0x19c>)
 800a948:	f240 6275 	movw	r2, #1653	@ 0x675
 800a94c:	4958      	ldr	r1, [pc, #352]	@ (800aab0 <lwip_netconn_do_writemore+0x1ac>)
 800a94e:	4856      	ldr	r0, [pc, #344]	@ (800aaa8 <lwip_netconn_do_writemore+0x1a4>)
 800a950:	f00b fe26 	bl	80165a0 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	685b      	ldr	r3, [r3, #4]
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d106      	bne.n	800a96a <lwip_netconn_do_writemore+0x66>
 800a95c:	4b50      	ldr	r3, [pc, #320]	@ (800aaa0 <lwip_netconn_do_writemore+0x19c>)
 800a95e:	f240 6276 	movw	r2, #1654	@ 0x676
 800a962:	4954      	ldr	r1, [pc, #336]	@ (800aab4 <lwip_netconn_do_writemore+0x1b0>)
 800a964:	4850      	ldr	r0, [pc, #320]	@ (800aaa8 <lwip_netconn_do_writemore+0x1a4>)
 800a966:	f00b fe1b 	bl	80165a0 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a96e:	699a      	ldr	r2, [r3, #24]
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a974:	695b      	ldr	r3, [r3, #20]
 800a976:	429a      	cmp	r2, r3
 800a978:	d306      	bcc.n	800a988 <lwip_netconn_do_writemore+0x84>
 800a97a:	4b49      	ldr	r3, [pc, #292]	@ (800aaa0 <lwip_netconn_do_writemore+0x19c>)
 800a97c:	f240 6277 	movw	r2, #1655	@ 0x677
 800a980:	494d      	ldr	r1, [pc, #308]	@ (800aab8 <lwip_netconn_do_writemore+0x1b4>)
 800a982:	4849      	ldr	r0, [pc, #292]	@ (800aaa8 <lwip_netconn_do_writemore+0x1a4>)
 800a984:	f00b fe0c 	bl	80165a0 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a98c:	899b      	ldrh	r3, [r3, #12]
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d106      	bne.n	800a9a0 <lwip_netconn_do_writemore+0x9c>
 800a992:	4b43      	ldr	r3, [pc, #268]	@ (800aaa0 <lwip_netconn_do_writemore+0x19c>)
 800a994:	f240 6279 	movw	r2, #1657	@ 0x679
 800a998:	4948      	ldr	r1, [pc, #288]	@ (800aabc <lwip_netconn_do_writemore+0x1b8>)
 800a99a:	4843      	ldr	r0, [pc, #268]	@ (800aaa8 <lwip_netconn_do_writemore+0x1a4>)
 800a99c:	f00b fe00 	bl	80165a0 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9a4:	7f1b      	ldrb	r3, [r3, #28]
 800a9a6:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a9ae:	f003 0302 	and.w	r3, r3, #2
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d104      	bne.n	800a9c0 <lwip_netconn_do_writemore+0xbc>
 800a9b6:	7ebb      	ldrb	r3, [r7, #26]
 800a9b8:	f003 0304 	and.w	r3, r3, #4
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d001      	beq.n	800a9c4 <lwip_netconn_do_writemore+0xc0>
 800a9c0:	2301      	movs	r3, #1
 800a9c2:	e000      	b.n	800a9c6 <lwip_netconn_do_writemore+0xc2>
 800a9c4:	2300      	movs	r3, #0
 800a9c6:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9cc:	689b      	ldr	r3, [r3, #8]
 800a9ce:	681a      	ldr	r2, [r3, #0]
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9d4:	691b      	ldr	r3, [r3, #16]
 800a9d6:	4413      	add	r3, r2
 800a9d8:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9de:	689b      	ldr	r3, [r3, #8]
 800a9e0:	685a      	ldr	r2, [r3, #4]
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9e6:	691b      	ldr	r3, [r3, #16]
 800a9e8:	1ad3      	subs	r3, r2, r3
 800a9ea:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 800a9ec:	693b      	ldr	r3, [r7, #16]
 800a9ee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a9f2:	d307      	bcc.n	800aa04 <lwip_netconn_do_writemore+0x100>
        len = 0xffff;
 800a9f4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a9f8:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800a9fa:	7ebb      	ldrb	r3, [r7, #26]
 800a9fc:	f043 0302 	orr.w	r3, r3, #2
 800aa00:	76bb      	strb	r3, [r7, #26]
 800aa02:	e001      	b.n	800aa08 <lwip_netconn_do_writemore+0x104>
      } else {
        len = (u16_t)diff;
 800aa04:	693b      	ldr	r3, [r7, #16]
 800aa06:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	685b      	ldr	r3, [r3, #4]
 800aa0c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800aa10:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 800aa12:	89fa      	ldrh	r2, [r7, #14]
 800aa14:	8bbb      	ldrh	r3, [r7, #28]
 800aa16:	429a      	cmp	r2, r3
 800aa18:	d216      	bcs.n	800aa48 <lwip_netconn_do_writemore+0x144>
        /* don't try to write more than sendbuf */
        len = available;
 800aa1a:	89fb      	ldrh	r3, [r7, #14]
 800aa1c:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 800aa1e:	7e3b      	ldrb	r3, [r7, #24]
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d00d      	beq.n	800aa40 <lwip_netconn_do_writemore+0x13c>
          if (!len) {
 800aa24:	8bbb      	ldrh	r3, [r7, #28]
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d10e      	bne.n	800aa48 <lwip_netconn_do_writemore+0x144>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa2e:	699b      	ldr	r3, [r3, #24]
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d102      	bne.n	800aa3a <lwip_netconn_do_writemore+0x136>
 800aa34:	f06f 0306 	mvn.w	r3, #6
 800aa38:	e000      	b.n	800aa3c <lwip_netconn_do_writemore+0x138>
 800aa3a:	2300      	movs	r3, #0
 800aa3c:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 800aa3e:	e08f      	b.n	800ab60 <lwip_netconn_do_writemore+0x25c>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 800aa40:	7ebb      	ldrb	r3, [r7, #26]
 800aa42:	f043 0302 	orr.w	r3, r3, #2
 800aa46:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa4c:	691a      	ldr	r2, [r3, #16]
 800aa4e:	8bbb      	ldrh	r3, [r7, #28]
 800aa50:	441a      	add	r2, r3
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa56:	689b      	ldr	r3, [r3, #8]
 800aa58:	685b      	ldr	r3, [r3, #4]
 800aa5a:	429a      	cmp	r2, r3
 800aa5c:	d906      	bls.n	800aa6c <lwip_netconn_do_writemore+0x168>
 800aa5e:	4b10      	ldr	r3, [pc, #64]	@ (800aaa0 <lwip_netconn_do_writemore+0x19c>)
 800aa60:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 800aa64:	4916      	ldr	r1, [pc, #88]	@ (800aac0 <lwip_netconn_do_writemore+0x1bc>)
 800aa66:	4810      	ldr	r0, [pc, #64]	@ (800aaa8 <lwip_netconn_do_writemore+0x1a4>)
 800aa68:	f00b fd9a 	bl	80165a0 <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 800aa6c:	8bbb      	ldrh	r3, [r7, #28]
 800aa6e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800aa72:	4293      	cmp	r3, r2
 800aa74:	d103      	bne.n	800aa7e <lwip_netconn_do_writemore+0x17a>
 800aa76:	693b      	ldr	r3, [r7, #16]
 800aa78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800aa7c:	d209      	bcs.n	800aa92 <lwip_netconn_do_writemore+0x18e>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800aa7e:	693b      	ldr	r3, [r7, #16]
 800aa80:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 800aa82:	8bba      	ldrh	r2, [r7, #28]
 800aa84:	429a      	cmp	r2, r3
 800aa86:	d11d      	bne.n	800aac4 <lwip_netconn_do_writemore+0x1c0>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa8c:	899b      	ldrh	r3, [r3, #12]
 800aa8e:	2b01      	cmp	r3, #1
 800aa90:	d918      	bls.n	800aac4 <lwip_netconn_do_writemore+0x1c0>
        write_more = 1;
 800aa92:	2301      	movs	r3, #1
 800aa94:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800aa96:	7ebb      	ldrb	r3, [r7, #26]
 800aa98:	f043 0302 	orr.w	r3, r3, #2
 800aa9c:	76bb      	strb	r3, [r7, #26]
 800aa9e:	e013      	b.n	800aac8 <lwip_netconn_do_writemore+0x1c4>
 800aaa0:	08017e84 	.word	0x08017e84
 800aaa4:	08017fdc 	.word	0x08017fdc
 800aaa8:	08017ec8 	.word	0x08017ec8
 800aaac:	080182e4 	.word	0x080182e4
 800aab0:	08017fec 	.word	0x08017fec
 800aab4:	08018304 	.word	0x08018304
 800aab8:	0801831c 	.word	0x0801831c
 800aabc:	0801835c 	.word	0x0801835c
 800aac0:	08018384 	.word	0x08018384
      } else {
        write_more = 0;
 800aac4:	2300      	movs	r3, #0
 800aac6:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	6858      	ldr	r0, [r3, #4]
 800aacc:	7ebb      	ldrb	r3, [r7, #26]
 800aace:	8bba      	ldrh	r2, [r7, #28]
 800aad0:	6979      	ldr	r1, [r7, #20]
 800aad2:	f006 fde3 	bl	801169c <tcp_write>
 800aad6:	4603      	mov	r3, r0
 800aad8:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 800aada:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d12c      	bne.n	800ab3c <lwip_netconn_do_writemore+0x238>
        conn->current_msg->msg.w.offset += len;
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aae6:	6999      	ldr	r1, [r3, #24]
 800aae8:	8bba      	ldrh	r2, [r7, #28]
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aaee:	440a      	add	r2, r1
 800aaf0:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aaf6:	6919      	ldr	r1, [r3, #16]
 800aaf8:	8bba      	ldrh	r2, [r7, #28]
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aafe:	440a      	add	r2, r1
 800ab00:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab06:	691a      	ldr	r2, [r3, #16]
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab0c:	689b      	ldr	r3, [r3, #8]
 800ab0e:	685b      	ldr	r3, [r3, #4]
 800ab10:	429a      	cmp	r2, r3
 800ab12:	d113      	bne.n	800ab3c <lwip_netconn_do_writemore+0x238>
          conn->current_msg->msg.w.vector_cnt--;
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab18:	899a      	ldrh	r2, [r3, #12]
 800ab1a:	3a01      	subs	r2, #1
 800ab1c:	b292      	uxth	r2, r2
 800ab1e:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab24:	899b      	ldrh	r3, [r3, #12]
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d008      	beq.n	800ab3c <lwip_netconn_do_writemore+0x238>
            conn->current_msg->msg.w.vector++;
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab2e:	689a      	ldr	r2, [r3, #8]
 800ab30:	3208      	adds	r2, #8
 800ab32:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab38:	2200      	movs	r2, #0
 800ab3a:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 800ab3c:	7e7b      	ldrb	r3, [r7, #25]
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d004      	beq.n	800ab4c <lwip_netconn_do_writemore+0x248>
 800ab42:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	f43f af3e 	beq.w	800a9c8 <lwip_netconn_do_writemore+0xc4>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 800ab4c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d004      	beq.n	800ab5e <lwip_netconn_do_writemore+0x25a>
 800ab54:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ab58:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab5c:	d136      	bne.n	800abcc <lwip_netconn_do_writemore+0x2c8>
err_mem:
 800ab5e:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 800ab60:	7e3b      	ldrb	r3, [r7, #24]
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d01b      	beq.n	800ab9e <lwip_netconn_do_writemore+0x29a>
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab6a:	699a      	ldr	r2, [r3, #24]
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab70:	695b      	ldr	r3, [r3, #20]
 800ab72:	429a      	cmp	r2, r3
 800ab74:	d213      	bcs.n	800ab9e <lwip_netconn_do_writemore+0x29a>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d005      	beq.n	800ab8a <lwip_netconn_do_writemore+0x286>
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab82:	2200      	movs	r2, #0
 800ab84:	2103      	movs	r1, #3
 800ab86:	6878      	ldr	r0, [r7, #4]
 800ab88:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ab90:	f043 0310 	orr.w	r3, r3, #16
 800ab94:	b2da      	uxtb	r2, r3
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	f883 2020 	strb.w	r2, [r3, #32]
 800ab9c:	e016      	b.n	800abcc <lwip_netconn_do_writemore+0x2c8>
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	685b      	ldr	r3, [r3, #4]
 800aba2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800aba6:	f5b3 6f86 	cmp.w	r3, #1072	@ 0x430
 800abaa:	d305      	bcc.n	800abb8 <lwip_netconn_do_writemore+0x2b4>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	685b      	ldr	r3, [r3, #4]
 800abb0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800abb4:	2b04      	cmp	r3, #4
 800abb6:	d909      	bls.n	800abcc <lwip_netconn_do_writemore+0x2c8>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d005      	beq.n	800abcc <lwip_netconn_do_writemore+0x2c8>
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800abc4:	2200      	movs	r2, #0
 800abc6:	2103      	movs	r1, #3
 800abc8:	6878      	ldr	r0, [r7, #4]
 800abca:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 800abcc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d11d      	bne.n	800ac10 <lwip_netconn_do_writemore+0x30c>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800abd8:	699a      	ldr	r2, [r3, #24]
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800abde:	695b      	ldr	r3, [r3, #20]
 800abe0:	429a      	cmp	r2, r3
 800abe2:	d002      	beq.n	800abea <lwip_netconn_do_writemore+0x2e6>
 800abe4:	7e3b      	ldrb	r3, [r7, #24]
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d001      	beq.n	800abee <lwip_netconn_do_writemore+0x2ea>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 800abea:	2301      	movs	r3, #1
 800abec:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	685b      	ldr	r3, [r3, #4]
 800abf2:	4618      	mov	r0, r3
 800abf4:	f007 fb3c 	bl	8012270 <tcp_output>
 800abf8:	4603      	mov	r3, r0
 800abfa:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 800abfc:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800ac00:	f113 0f04 	cmn.w	r3, #4
 800ac04:	d12c      	bne.n	800ac60 <lwip_netconn_do_writemore+0x35c>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800ac06:	7b3b      	ldrb	r3, [r7, #12]
 800ac08:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800ac0a:	2301      	movs	r3, #1
 800ac0c:	76fb      	strb	r3, [r7, #27]
 800ac0e:	e027      	b.n	800ac60 <lwip_netconn_do_writemore+0x35c>
      }
    } else if (err == ERR_MEM) {
 800ac10:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ac14:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac18:	d120      	bne.n	800ac5c <lwip_netconn_do_writemore+0x358>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	685b      	ldr	r3, [r3, #4]
 800ac1e:	4618      	mov	r0, r3
 800ac20:	f007 fb26 	bl	8012270 <tcp_output>
 800ac24:	4603      	mov	r3, r0
 800ac26:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 800ac28:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800ac2c:	f113 0f04 	cmn.w	r3, #4
 800ac30:	d104      	bne.n	800ac3c <lwip_netconn_do_writemore+0x338>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800ac32:	7b7b      	ldrb	r3, [r7, #13]
 800ac34:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800ac36:	2301      	movs	r3, #1
 800ac38:	76fb      	strb	r3, [r7, #27]
 800ac3a:	e011      	b.n	800ac60 <lwip_netconn_do_writemore+0x35c>
      } else if (dontblock) {
 800ac3c:	7e3b      	ldrb	r3, [r7, #24]
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d00e      	beq.n	800ac60 <lwip_netconn_do_writemore+0x35c>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac46:	699b      	ldr	r3, [r3, #24]
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d102      	bne.n	800ac52 <lwip_netconn_do_writemore+0x34e>
 800ac4c:	f06f 0306 	mvn.w	r3, #6
 800ac50:	e000      	b.n	800ac54 <lwip_netconn_do_writemore+0x350>
 800ac52:	2300      	movs	r3, #0
 800ac54:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800ac56:	2301      	movs	r3, #1
 800ac58:	76fb      	strb	r3, [r7, #27]
 800ac5a:	e001      	b.n	800ac60 <lwip_netconn_do_writemore+0x35c>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 800ac5c:	2301      	movs	r3, #1
 800ac5e:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 800ac60:	7efb      	ldrb	r3, [r7, #27]
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d015      	beq.n	800ac92 <lwip_netconn_do_writemore+0x38e>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	330c      	adds	r3, #12
 800ac6e:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac74:	7ffa      	ldrb	r2, [r7, #31]
 800ac76:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	2200      	movs	r2, #0
 800ac7c:	625a      	str	r2, [r3, #36]	@ 0x24
    conn->state = NETCONN_NONE;
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	2200      	movs	r2, #0
 800ac82:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800ac84:	78fb      	ldrb	r3, [r7, #3]
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d006      	beq.n	800ac98 <lwip_netconn_do_writemore+0x394>
#endif
    {
      sys_sem_signal(op_completed_sem);
 800ac8a:	68b8      	ldr	r0, [r7, #8]
 800ac8c:	f00b fac6 	bl	801621c <sys_sem_signal>
 800ac90:	e002      	b.n	800ac98 <lwip_netconn_do_writemore+0x394>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 800ac92:	f04f 33ff 	mov.w	r3, #4294967295
 800ac96:	e000      	b.n	800ac9a <lwip_netconn_do_writemore+0x396>
  }
#endif
  return ERR_OK;
 800ac98:	2300      	movs	r3, #0
}
 800ac9a:	4618      	mov	r0, r3
 800ac9c:	3720      	adds	r7, #32
 800ac9e:	46bd      	mov	sp, r7
 800aca0:	bd80      	pop	{r7, pc}
 800aca2:	bf00      	nop

0800aca4 <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 800aca4:	b580      	push	{r7, lr}
 800aca6:	b084      	sub	sp, #16
 800aca8:	af00      	add	r7, sp, #0
 800acaa:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 800acb0:	68bb      	ldr	r3, [r7, #8]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	4618      	mov	r0, r3
 800acb6:	f7fe fd08 	bl	80096ca <netconn_err>
 800acba:	4603      	mov	r3, r0
 800acbc:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800acbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d166      	bne.n	800ad94 <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800acc6:	68bb      	ldr	r3, [r7, #8]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	781b      	ldrb	r3, [r3, #0]
 800accc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800acd0:	2b10      	cmp	r3, #16
 800acd2:	d15d      	bne.n	800ad90 <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 800acd4:	68bb      	ldr	r3, [r7, #8]
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	785b      	ldrb	r3, [r3, #1]
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d002      	beq.n	800ace4 <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 800acde:	23fb      	movs	r3, #251	@ 0xfb
 800ace0:	73fb      	strb	r3, [r7, #15]
 800ace2:	e057      	b.n	800ad94 <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 800ace4:	68bb      	ldr	r3, [r7, #8]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	685b      	ldr	r3, [r3, #4]
 800acea:	2b00      	cmp	r3, #0
 800acec:	d04d      	beq.n	800ad8a <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 800acee:	68bb      	ldr	r3, [r7, #8]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	2201      	movs	r2, #1
 800acf4:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800acf6:	68bb      	ldr	r3, [r7, #8]
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d006      	beq.n	800ad0e <lwip_netconn_do_write+0x6a>
 800ad00:	4b28      	ldr	r3, [pc, #160]	@ (800ada4 <lwip_netconn_do_write+0x100>)
 800ad02:	f240 7223 	movw	r2, #1827	@ 0x723
 800ad06:	4928      	ldr	r1, [pc, #160]	@ (800ada8 <lwip_netconn_do_write+0x104>)
 800ad08:	4828      	ldr	r0, [pc, #160]	@ (800adac <lwip_netconn_do_write+0x108>)
 800ad0a:	f00b fc49 	bl	80165a0 <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 800ad0e:	68bb      	ldr	r3, [r7, #8]
 800ad10:	695b      	ldr	r3, [r3, #20]
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d106      	bne.n	800ad24 <lwip_netconn_do_write+0x80>
 800ad16:	4b23      	ldr	r3, [pc, #140]	@ (800ada4 <lwip_netconn_do_write+0x100>)
 800ad18:	f240 7224 	movw	r2, #1828	@ 0x724
 800ad1c:	4924      	ldr	r1, [pc, #144]	@ (800adb0 <lwip_netconn_do_write+0x10c>)
 800ad1e:	4823      	ldr	r0, [pc, #140]	@ (800adac <lwip_netconn_do_write+0x108>)
 800ad20:	f00b fc3e 	bl	80165a0 <iprintf>
        msg->conn->current_msg = msg;
 800ad24:	68bb      	ldr	r3, [r7, #8]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	68ba      	ldr	r2, [r7, #8]
 800ad2a:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 800ad2c:	68bb      	ldr	r3, [r7, #8]
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	2100      	movs	r1, #0
 800ad32:	4618      	mov	r0, r3
 800ad34:	f7ff fde6 	bl	800a904 <lwip_netconn_do_writemore>
 800ad38:	4603      	mov	r3, r0
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d02e      	beq.n	800ad9c <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 800ad3e:	68bb      	ldr	r3, [r7, #8]
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	785b      	ldrb	r3, [r3, #1]
 800ad44:	2b01      	cmp	r3, #1
 800ad46:	d006      	beq.n	800ad56 <lwip_netconn_do_write+0xb2>
 800ad48:	4b16      	ldr	r3, [pc, #88]	@ (800ada4 <lwip_netconn_do_write+0x100>)
 800ad4a:	f44f 62e5 	mov.w	r2, #1832	@ 0x728
 800ad4e:	4919      	ldr	r1, [pc, #100]	@ (800adb4 <lwip_netconn_do_write+0x110>)
 800ad50:	4816      	ldr	r0, [pc, #88]	@ (800adac <lwip_netconn_do_write+0x108>)
 800ad52:	f00b fc25 	bl	80165a0 <iprintf>
          UNLOCK_TCPIP_CORE();
 800ad56:	4818      	ldr	r0, [pc, #96]	@ (800adb8 <lwip_netconn_do_write+0x114>)
 800ad58:	f00b fad1 	bl	80162fe <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800ad5c:	68bb      	ldr	r3, [r7, #8]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	330c      	adds	r3, #12
 800ad62:	2100      	movs	r1, #0
 800ad64:	4618      	mov	r0, r3
 800ad66:	f00b fa28 	bl	80161ba <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 800ad6a:	4813      	ldr	r0, [pc, #76]	@ (800adb8 <lwip_netconn_do_write+0x114>)
 800ad6c:	f00b fab8 	bl	80162e0 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 800ad70:	68bb      	ldr	r3, [r7, #8]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	785b      	ldrb	r3, [r3, #1]
 800ad76:	2b01      	cmp	r3, #1
 800ad78:	d110      	bne.n	800ad9c <lwip_netconn_do_write+0xf8>
 800ad7a:	4b0a      	ldr	r3, [pc, #40]	@ (800ada4 <lwip_netconn_do_write+0x100>)
 800ad7c:	f240 722c 	movw	r2, #1836	@ 0x72c
 800ad80:	490c      	ldr	r1, [pc, #48]	@ (800adb4 <lwip_netconn_do_write+0x110>)
 800ad82:	480a      	ldr	r0, [pc, #40]	@ (800adac <lwip_netconn_do_write+0x108>)
 800ad84:	f00b fc0c 	bl	80165a0 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 800ad88:	e008      	b.n	800ad9c <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 800ad8a:	23f5      	movs	r3, #245	@ 0xf5
 800ad8c:	73fb      	strb	r3, [r7, #15]
 800ad8e:	e001      	b.n	800ad94 <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 800ad90:	23fa      	movs	r3, #250	@ 0xfa
 800ad92:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 800ad94:	68bb      	ldr	r3, [r7, #8]
 800ad96:	7bfa      	ldrb	r2, [r7, #15]
 800ad98:	711a      	strb	r2, [r3, #4]
 800ad9a:	e000      	b.n	800ad9e <lwip_netconn_do_write+0xfa>
        return;
 800ad9c:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 800ad9e:	3710      	adds	r7, #16
 800ada0:	46bd      	mov	sp, r7
 800ada2:	bd80      	pop	{r7, pc}
 800ada4:	08017e84 	.word	0x08017e84
 800ada8:	08018228 	.word	0x08018228
 800adac:	08017ec8 	.word	0x08017ec8
 800adb0:	080183b0 	.word	0x080183b0
 800adb4:	08018244 	.word	0x08018244
 800adb8:	200093f0 	.word	0x200093f0

0800adbc <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 800adbc:	b580      	push	{r7, lr}
 800adbe:	b084      	sub	sp, #16
 800adc0:	af00      	add	r7, sp, #0
 800adc2:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	785b      	ldrb	r3, [r3, #1]
 800adce:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	685b      	ldr	r3, [r3, #4]
 800add6:	2b00      	cmp	r3, #0
 800add8:	d069      	beq.n	800aeae <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	781b      	ldrb	r3, [r3, #0]
 800ade0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 800ade4:	2b10      	cmp	r3, #16
 800ade6:	d162      	bne.n	800aeae <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800adec:	2b03      	cmp	r3, #3
 800adee:	d002      	beq.n	800adf6 <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800adf0:	7afb      	ldrb	r3, [r7, #11]
 800adf2:	2b02      	cmp	r3, #2
 800adf4:	d05b      	beq.n	800aeae <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 800adf6:	7afb      	ldrb	r3, [r7, #11]
 800adf8:	2b03      	cmp	r3, #3
 800adfa:	d103      	bne.n	800ae04 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	22f5      	movs	r2, #245	@ 0xf5
 800ae00:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800ae02:	e059      	b.n	800aeb8 <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 800ae04:	7afb      	ldrb	r3, [r7, #11]
 800ae06:	2b01      	cmp	r3, #1
 800ae08:	d103      	bne.n	800ae12 <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	22fb      	movs	r2, #251	@ 0xfb
 800ae0e:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800ae10:	e052      	b.n	800aeb8 <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	7a1b      	ldrb	r3, [r3, #8]
 800ae16:	f003 0301 	and.w	r3, r3, #1
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d004      	beq.n	800ae28 <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	4618      	mov	r0, r3
 800ae24:	f7ff f998 	bl	800a158 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d006      	beq.n	800ae40 <lwip_netconn_do_close+0x84>
 800ae32:	4b23      	ldr	r3, [pc, #140]	@ (800aec0 <lwip_netconn_do_close+0x104>)
 800ae34:	f240 72bd 	movw	r2, #1981	@ 0x7bd
 800ae38:	4922      	ldr	r1, [pc, #136]	@ (800aec4 <lwip_netconn_do_close+0x108>)
 800ae3a:	4823      	ldr	r0, [pc, #140]	@ (800aec8 <lwip_netconn_do_close+0x10c>)
 800ae3c:	f00b fbb0 	bl	80165a0 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	2204      	movs	r2, #4
 800ae46:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	68fa      	ldr	r2, [r7, #12]
 800ae4e:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	2100      	movs	r1, #0
 800ae56:	4618      	mov	r0, r3
 800ae58:	f7ff f9fc 	bl	800a254 <lwip_netconn_do_close_internal>
 800ae5c:	4603      	mov	r3, r0
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d029      	beq.n	800aeb6 <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	785b      	ldrb	r3, [r3, #1]
 800ae68:	2b04      	cmp	r3, #4
 800ae6a:	d006      	beq.n	800ae7a <lwip_netconn_do_close+0xbe>
 800ae6c:	4b14      	ldr	r3, [pc, #80]	@ (800aec0 <lwip_netconn_do_close+0x104>)
 800ae6e:	f240 72c2 	movw	r2, #1986	@ 0x7c2
 800ae72:	4916      	ldr	r1, [pc, #88]	@ (800aecc <lwip_netconn_do_close+0x110>)
 800ae74:	4814      	ldr	r0, [pc, #80]	@ (800aec8 <lwip_netconn_do_close+0x10c>)
 800ae76:	f00b fb93 	bl	80165a0 <iprintf>
        UNLOCK_TCPIP_CORE();
 800ae7a:	4815      	ldr	r0, [pc, #84]	@ (800aed0 <lwip_netconn_do_close+0x114>)
 800ae7c:	f00b fa3f 	bl	80162fe <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	330c      	adds	r3, #12
 800ae86:	2100      	movs	r1, #0
 800ae88:	4618      	mov	r0, r3
 800ae8a:	f00b f996 	bl	80161ba <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 800ae8e:	4810      	ldr	r0, [pc, #64]	@ (800aed0 <lwip_netconn_do_close+0x114>)
 800ae90:	f00b fa26 	bl	80162e0 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	785b      	ldrb	r3, [r3, #1]
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d00b      	beq.n	800aeb6 <lwip_netconn_do_close+0xfa>
 800ae9e:	4b08      	ldr	r3, [pc, #32]	@ (800aec0 <lwip_netconn_do_close+0x104>)
 800aea0:	f240 72c6 	movw	r2, #1990	@ 0x7c6
 800aea4:	4909      	ldr	r1, [pc, #36]	@ (800aecc <lwip_netconn_do_close+0x110>)
 800aea6:	4808      	ldr	r0, [pc, #32]	@ (800aec8 <lwip_netconn_do_close+0x10c>)
 800aea8:	f00b fb7a 	bl	80165a0 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 800aeac:	e003      	b.n	800aeb6 <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	22f5      	movs	r2, #245	@ 0xf5
 800aeb2:	711a      	strb	r2, [r3, #4]
 800aeb4:	e000      	b.n	800aeb8 <lwip_netconn_do_close+0xfc>
      return;
 800aeb6:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 800aeb8:	3710      	adds	r7, #16
 800aeba:	46bd      	mov	sp, r7
 800aebc:	bd80      	pop	{r7, pc}
 800aebe:	bf00      	nop
 800aec0:	08017e84 	.word	0x08017e84
 800aec4:	08018228 	.word	0x08018228
 800aec8:	08017ec8 	.word	0x08017ec8
 800aecc:	08018244 	.word	0x08018244
 800aed0:	200093f0 	.word	0x200093f0

0800aed4 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 800aed4:	b580      	push	{r7, lr}
 800aed6:	b082      	sub	sp, #8
 800aed8:	af00      	add	r7, sp, #0
 800aeda:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d013      	beq.n	800af0a <netbuf_delete+0x36>
    if (buf->p != NULL) {
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d00b      	beq.n	800af02 <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	4618      	mov	r0, r3
 800aef0:	f001 fdea 	bl	800cac8 <pbuf_free>
      buf->p = buf->ptr = NULL;
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	2200      	movs	r2, #0
 800aef8:	605a      	str	r2, [r3, #4]
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	685a      	ldr	r2, [r3, #4]
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 800af02:	6879      	ldr	r1, [r7, #4]
 800af04:	2006      	movs	r0, #6
 800af06:	f000 ff3b 	bl	800bd80 <memp_free>
  }
}
 800af0a:	bf00      	nop
 800af0c:	3708      	adds	r7, #8
 800af0e:	46bd      	mov	sp, r7
 800af10:	bd80      	pop	{r7, pc}
	...

0800af14 <netbuf_next>:
 *         1  if moved to the next part but now there is no next part
 *         0  if moved to the next part and there are still more parts
 */
s8_t
netbuf_next(struct netbuf *buf)
{
 800af14:	b580      	push	{r7, lr}
 800af16:	b082      	sub	sp, #8
 800af18:	af00      	add	r7, sp, #0
 800af1a:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_next: invalid buf", (buf != NULL), return -1;);
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d108      	bne.n	800af34 <netbuf_next+0x20>
 800af22:	4b11      	ldr	r3, [pc, #68]	@ (800af68 <netbuf_next+0x54>)
 800af24:	22e0      	movs	r2, #224	@ 0xe0
 800af26:	4911      	ldr	r1, [pc, #68]	@ (800af6c <netbuf_next+0x58>)
 800af28:	4811      	ldr	r0, [pc, #68]	@ (800af70 <netbuf_next+0x5c>)
 800af2a:	f00b fb39 	bl	80165a0 <iprintf>
 800af2e:	f04f 33ff 	mov.w	r3, #4294967295
 800af32:	e014      	b.n	800af5e <netbuf_next+0x4a>
  if (buf->ptr->next == NULL) {
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	685b      	ldr	r3, [r3, #4]
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d102      	bne.n	800af44 <netbuf_next+0x30>
    return -1;
 800af3e:	f04f 33ff 	mov.w	r3, #4294967295
 800af42:	e00c      	b.n	800af5e <netbuf_next+0x4a>
  }
  buf->ptr = buf->ptr->next;
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	685b      	ldr	r3, [r3, #4]
 800af48:	681a      	ldr	r2, [r3, #0]
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	605a      	str	r2, [r3, #4]
  if (buf->ptr->next == NULL) {
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	685b      	ldr	r3, [r3, #4]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	2b00      	cmp	r3, #0
 800af56:	d101      	bne.n	800af5c <netbuf_next+0x48>
    return 1;
 800af58:	2301      	movs	r3, #1
 800af5a:	e000      	b.n	800af5e <netbuf_next+0x4a>
  }
  return 0;
 800af5c:	2300      	movs	r3, #0
}
 800af5e:	4618      	mov	r0, r3
 800af60:	3708      	adds	r7, #8
 800af62:	46bd      	mov	sp, r7
 800af64:	bd80      	pop	{r7, pc}
 800af66:	bf00      	nop
 800af68:	080183dc 	.word	0x080183dc
 800af6c:	0801853c 	.word	0x0801853c
 800af70:	0801842c 	.word	0x0801842c

0800af74 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800af74:	b580      	push	{r7, lr}
 800af76:	b084      	sub	sp, #16
 800af78:	af00      	add	r7, sp, #0
 800af7a:	6078      	str	r0, [r7, #4]
 800af7c:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800af7e:	f008 fa2f 	bl	80133e0 <sys_timeouts_sleeptime>
 800af82:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af8a:	d10b      	bne.n	800afa4 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800af8c:	4813      	ldr	r0, [pc, #76]	@ (800afdc <tcpip_timeouts_mbox_fetch+0x68>)
 800af8e:	f00b f9b6 	bl	80162fe <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800af92:	2200      	movs	r2, #0
 800af94:	6839      	ldr	r1, [r7, #0]
 800af96:	6878      	ldr	r0, [r7, #4]
 800af98:	f00b f86e 	bl	8016078 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800af9c:	480f      	ldr	r0, [pc, #60]	@ (800afdc <tcpip_timeouts_mbox_fetch+0x68>)
 800af9e:	f00b f99f 	bl	80162e0 <sys_mutex_lock>
    return;
 800afa2:	e018      	b.n	800afd6 <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d102      	bne.n	800afb0 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800afaa:	f008 f9df 	bl	801336c <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800afae:	e7e6      	b.n	800af7e <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800afb0:	480a      	ldr	r0, [pc, #40]	@ (800afdc <tcpip_timeouts_mbox_fetch+0x68>)
 800afb2:	f00b f9a4 	bl	80162fe <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800afb6:	68fa      	ldr	r2, [r7, #12]
 800afb8:	6839      	ldr	r1, [r7, #0]
 800afba:	6878      	ldr	r0, [r7, #4]
 800afbc:	f00b f85c 	bl	8016078 <sys_arch_mbox_fetch>
 800afc0:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800afc2:	4806      	ldr	r0, [pc, #24]	@ (800afdc <tcpip_timeouts_mbox_fetch+0x68>)
 800afc4:	f00b f98c 	bl	80162e0 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800afc8:	68bb      	ldr	r3, [r7, #8]
 800afca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afce:	d102      	bne.n	800afd6 <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800afd0:	f008 f9cc 	bl	801336c <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800afd4:	e7d3      	b.n	800af7e <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800afd6:	3710      	adds	r7, #16
 800afd8:	46bd      	mov	sp, r7
 800afda:	bd80      	pop	{r7, pc}
 800afdc:	200093f0 	.word	0x200093f0

0800afe0 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800afe0:	b580      	push	{r7, lr}
 800afe2:	b084      	sub	sp, #16
 800afe4:	af00      	add	r7, sp, #0
 800afe6:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800afe8:	4810      	ldr	r0, [pc, #64]	@ (800b02c <tcpip_thread+0x4c>)
 800afea:	f00b f979 	bl	80162e0 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800afee:	4b10      	ldr	r3, [pc, #64]	@ (800b030 <tcpip_thread+0x50>)
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d005      	beq.n	800b002 <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800aff6:	4b0e      	ldr	r3, [pc, #56]	@ (800b030 <tcpip_thread+0x50>)
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	4a0e      	ldr	r2, [pc, #56]	@ (800b034 <tcpip_thread+0x54>)
 800affc:	6812      	ldr	r2, [r2, #0]
 800affe:	4610      	mov	r0, r2
 800b000:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800b002:	f107 030c 	add.w	r3, r7, #12
 800b006:	4619      	mov	r1, r3
 800b008:	480b      	ldr	r0, [pc, #44]	@ (800b038 <tcpip_thread+0x58>)
 800b00a:	f7ff ffb3 	bl	800af74 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	2b00      	cmp	r3, #0
 800b012:	d106      	bne.n	800b022 <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800b014:	4b09      	ldr	r3, [pc, #36]	@ (800b03c <tcpip_thread+0x5c>)
 800b016:	2291      	movs	r2, #145	@ 0x91
 800b018:	4909      	ldr	r1, [pc, #36]	@ (800b040 <tcpip_thread+0x60>)
 800b01a:	480a      	ldr	r0, [pc, #40]	@ (800b044 <tcpip_thread+0x64>)
 800b01c:	f00b fac0 	bl	80165a0 <iprintf>
      continue;
 800b020:	e003      	b.n	800b02a <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	4618      	mov	r0, r3
 800b026:	f000 f80f 	bl	800b048 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800b02a:	e7ea      	b.n	800b002 <tcpip_thread+0x22>
 800b02c:	200093f0 	.word	0x200093f0
 800b030:	200093e4 	.word	0x200093e4
 800b034:	200093e8 	.word	0x200093e8
 800b038:	200093ec 	.word	0x200093ec
 800b03c:	08018574 	.word	0x08018574
 800b040:	080185a4 	.word	0x080185a4
 800b044:	080185c4 	.word	0x080185c4

0800b048 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800b048:	b580      	push	{r7, lr}
 800b04a:	b082      	sub	sp, #8
 800b04c:	af00      	add	r7, sp, #0
 800b04e:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	781b      	ldrb	r3, [r3, #0]
 800b054:	2b02      	cmp	r3, #2
 800b056:	d026      	beq.n	800b0a6 <tcpip_thread_handle_msg+0x5e>
 800b058:	2b02      	cmp	r3, #2
 800b05a:	dc2b      	bgt.n	800b0b4 <tcpip_thread_handle_msg+0x6c>
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d002      	beq.n	800b066 <tcpip_thread_handle_msg+0x1e>
 800b060:	2b01      	cmp	r3, #1
 800b062:	d015      	beq.n	800b090 <tcpip_thread_handle_msg+0x48>
 800b064:	e026      	b.n	800b0b4 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	68db      	ldr	r3, [r3, #12]
 800b06a:	687a      	ldr	r2, [r7, #4]
 800b06c:	6850      	ldr	r0, [r2, #4]
 800b06e:	687a      	ldr	r2, [r7, #4]
 800b070:	6892      	ldr	r2, [r2, #8]
 800b072:	4611      	mov	r1, r2
 800b074:	4798      	blx	r3
 800b076:	4603      	mov	r3, r0
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d004      	beq.n	800b086 <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	685b      	ldr	r3, [r3, #4]
 800b080:	4618      	mov	r0, r3
 800b082:	f001 fd21 	bl	800cac8 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800b086:	6879      	ldr	r1, [r7, #4]
 800b088:	2009      	movs	r0, #9
 800b08a:	f000 fe79 	bl	800bd80 <memp_free>
      break;
 800b08e:	e018      	b.n	800b0c2 <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	685b      	ldr	r3, [r3, #4]
 800b094:	687a      	ldr	r2, [r7, #4]
 800b096:	6892      	ldr	r2, [r2, #8]
 800b098:	4610      	mov	r0, r2
 800b09a:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800b09c:	6879      	ldr	r1, [r7, #4]
 800b09e:	2008      	movs	r0, #8
 800b0a0:	f000 fe6e 	bl	800bd80 <memp_free>
      break;
 800b0a4:	e00d      	b.n	800b0c2 <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	685b      	ldr	r3, [r3, #4]
 800b0aa:	687a      	ldr	r2, [r7, #4]
 800b0ac:	6892      	ldr	r2, [r2, #8]
 800b0ae:	4610      	mov	r0, r2
 800b0b0:	4798      	blx	r3
      break;
 800b0b2:	e006      	b.n	800b0c2 <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800b0b4:	4b05      	ldr	r3, [pc, #20]	@ (800b0cc <tcpip_thread_handle_msg+0x84>)
 800b0b6:	22cf      	movs	r2, #207	@ 0xcf
 800b0b8:	4905      	ldr	r1, [pc, #20]	@ (800b0d0 <tcpip_thread_handle_msg+0x88>)
 800b0ba:	4806      	ldr	r0, [pc, #24]	@ (800b0d4 <tcpip_thread_handle_msg+0x8c>)
 800b0bc:	f00b fa70 	bl	80165a0 <iprintf>
      break;
 800b0c0:	bf00      	nop
  }
}
 800b0c2:	bf00      	nop
 800b0c4:	3708      	adds	r7, #8
 800b0c6:	46bd      	mov	sp, r7
 800b0c8:	bd80      	pop	{r7, pc}
 800b0ca:	bf00      	nop
 800b0cc:	08018574 	.word	0x08018574
 800b0d0:	080185a4 	.word	0x080185a4
 800b0d4:	080185c4 	.word	0x080185c4

0800b0d8 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800b0d8:	b580      	push	{r7, lr}
 800b0da:	b086      	sub	sp, #24
 800b0dc:	af00      	add	r7, sp, #0
 800b0de:	60f8      	str	r0, [r7, #12]
 800b0e0:	60b9      	str	r1, [r7, #8]
 800b0e2:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800b0e4:	481a      	ldr	r0, [pc, #104]	@ (800b150 <tcpip_inpkt+0x78>)
 800b0e6:	f00b f822 	bl	801612e <sys_mbox_valid>
 800b0ea:	4603      	mov	r3, r0
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d105      	bne.n	800b0fc <tcpip_inpkt+0x24>
 800b0f0:	4b18      	ldr	r3, [pc, #96]	@ (800b154 <tcpip_inpkt+0x7c>)
 800b0f2:	22fc      	movs	r2, #252	@ 0xfc
 800b0f4:	4918      	ldr	r1, [pc, #96]	@ (800b158 <tcpip_inpkt+0x80>)
 800b0f6:	4819      	ldr	r0, [pc, #100]	@ (800b15c <tcpip_inpkt+0x84>)
 800b0f8:	f00b fa52 	bl	80165a0 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800b0fc:	2009      	movs	r0, #9
 800b0fe:	f000 fdc9 	bl	800bc94 <memp_malloc>
 800b102:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800b104:	697b      	ldr	r3, [r7, #20]
 800b106:	2b00      	cmp	r3, #0
 800b108:	d102      	bne.n	800b110 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800b10a:	f04f 33ff 	mov.w	r3, #4294967295
 800b10e:	e01a      	b.n	800b146 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800b110:	697b      	ldr	r3, [r7, #20]
 800b112:	2200      	movs	r2, #0
 800b114:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800b116:	697b      	ldr	r3, [r7, #20]
 800b118:	68fa      	ldr	r2, [r7, #12]
 800b11a:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800b11c:	697b      	ldr	r3, [r7, #20]
 800b11e:	68ba      	ldr	r2, [r7, #8]
 800b120:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800b122:	697b      	ldr	r3, [r7, #20]
 800b124:	687a      	ldr	r2, [r7, #4]
 800b126:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800b128:	6979      	ldr	r1, [r7, #20]
 800b12a:	4809      	ldr	r0, [pc, #36]	@ (800b150 <tcpip_inpkt+0x78>)
 800b12c:	f00a ff8a 	bl	8016044 <sys_mbox_trypost>
 800b130:	4603      	mov	r3, r0
 800b132:	2b00      	cmp	r3, #0
 800b134:	d006      	beq.n	800b144 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800b136:	6979      	ldr	r1, [r7, #20]
 800b138:	2009      	movs	r0, #9
 800b13a:	f000 fe21 	bl	800bd80 <memp_free>
    return ERR_MEM;
 800b13e:	f04f 33ff 	mov.w	r3, #4294967295
 800b142:	e000      	b.n	800b146 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800b144:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800b146:	4618      	mov	r0, r3
 800b148:	3718      	adds	r7, #24
 800b14a:	46bd      	mov	sp, r7
 800b14c:	bd80      	pop	{r7, pc}
 800b14e:	bf00      	nop
 800b150:	200093ec 	.word	0x200093ec
 800b154:	08018574 	.word	0x08018574
 800b158:	080185ec 	.word	0x080185ec
 800b15c:	080185c4 	.word	0x080185c4

0800b160 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800b160:	b580      	push	{r7, lr}
 800b162:	b082      	sub	sp, #8
 800b164:	af00      	add	r7, sp, #0
 800b166:	6078      	str	r0, [r7, #4]
 800b168:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800b16a:	683b      	ldr	r3, [r7, #0]
 800b16c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800b170:	f003 0318 	and.w	r3, r3, #24
 800b174:	2b00      	cmp	r3, #0
 800b176:	d006      	beq.n	800b186 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800b178:	4a08      	ldr	r2, [pc, #32]	@ (800b19c <tcpip_input+0x3c>)
 800b17a:	6839      	ldr	r1, [r7, #0]
 800b17c:	6878      	ldr	r0, [r7, #4]
 800b17e:	f7ff ffab 	bl	800b0d8 <tcpip_inpkt>
 800b182:	4603      	mov	r3, r0
 800b184:	e005      	b.n	800b192 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800b186:	4a06      	ldr	r2, [pc, #24]	@ (800b1a0 <tcpip_input+0x40>)
 800b188:	6839      	ldr	r1, [r7, #0]
 800b18a:	6878      	ldr	r0, [r7, #4]
 800b18c:	f7ff ffa4 	bl	800b0d8 <tcpip_inpkt>
 800b190:	4603      	mov	r3, r0
}
 800b192:	4618      	mov	r0, r3
 800b194:	3708      	adds	r7, #8
 800b196:	46bd      	mov	sp, r7
 800b198:	bd80      	pop	{r7, pc}
 800b19a:	bf00      	nop
 800b19c:	08015e31 	.word	0x08015e31
 800b1a0:	08014d39 	.word	0x08014d39

0800b1a4 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800b1a4:	b580      	push	{r7, lr}
 800b1a6:	b084      	sub	sp, #16
 800b1a8:	af00      	add	r7, sp, #0
 800b1aa:	6078      	str	r0, [r7, #4]
 800b1ac:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800b1ae:	4819      	ldr	r0, [pc, #100]	@ (800b214 <tcpip_try_callback+0x70>)
 800b1b0:	f00a ffbd 	bl	801612e <sys_mbox_valid>
 800b1b4:	4603      	mov	r3, r0
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d106      	bne.n	800b1c8 <tcpip_try_callback+0x24>
 800b1ba:	4b17      	ldr	r3, [pc, #92]	@ (800b218 <tcpip_try_callback+0x74>)
 800b1bc:	f240 125d 	movw	r2, #349	@ 0x15d
 800b1c0:	4916      	ldr	r1, [pc, #88]	@ (800b21c <tcpip_try_callback+0x78>)
 800b1c2:	4817      	ldr	r0, [pc, #92]	@ (800b220 <tcpip_try_callback+0x7c>)
 800b1c4:	f00b f9ec 	bl	80165a0 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800b1c8:	2008      	movs	r0, #8
 800b1ca:	f000 fd63 	bl	800bc94 <memp_malloc>
 800b1ce:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d102      	bne.n	800b1dc <tcpip_try_callback+0x38>
    return ERR_MEM;
 800b1d6:	f04f 33ff 	mov.w	r3, #4294967295
 800b1da:	e017      	b.n	800b20c <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	2201      	movs	r2, #1
 800b1e0:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	687a      	ldr	r2, [r7, #4]
 800b1e6:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	683a      	ldr	r2, [r7, #0]
 800b1ec:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800b1ee:	68f9      	ldr	r1, [r7, #12]
 800b1f0:	4808      	ldr	r0, [pc, #32]	@ (800b214 <tcpip_try_callback+0x70>)
 800b1f2:	f00a ff27 	bl	8016044 <sys_mbox_trypost>
 800b1f6:	4603      	mov	r3, r0
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d006      	beq.n	800b20a <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800b1fc:	68f9      	ldr	r1, [r7, #12]
 800b1fe:	2008      	movs	r0, #8
 800b200:	f000 fdbe 	bl	800bd80 <memp_free>
    return ERR_MEM;
 800b204:	f04f 33ff 	mov.w	r3, #4294967295
 800b208:	e000      	b.n	800b20c <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800b20a:	2300      	movs	r3, #0
}
 800b20c:	4618      	mov	r0, r3
 800b20e:	3710      	adds	r7, #16
 800b210:	46bd      	mov	sp, r7
 800b212:	bd80      	pop	{r7, pc}
 800b214:	200093ec 	.word	0x200093ec
 800b218:	08018574 	.word	0x08018574
 800b21c:	080185ec 	.word	0x080185ec
 800b220:	080185c4 	.word	0x080185c4

0800b224 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 800b224:	b580      	push	{r7, lr}
 800b226:	b084      	sub	sp, #16
 800b228:	af00      	add	r7, sp, #0
 800b22a:	60f8      	str	r0, [r7, #12]
 800b22c:	60b9      	str	r1, [r7, #8]
 800b22e:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 800b230:	4806      	ldr	r0, [pc, #24]	@ (800b24c <tcpip_send_msg_wait_sem+0x28>)
 800b232:	f00b f855 	bl	80162e0 <sys_mutex_lock>
  fn(apimsg);
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	68b8      	ldr	r0, [r7, #8]
 800b23a:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 800b23c:	4803      	ldr	r0, [pc, #12]	@ (800b24c <tcpip_send_msg_wait_sem+0x28>)
 800b23e:	f00b f85e 	bl	80162fe <sys_mutex_unlock>
  return ERR_OK;
 800b242:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800b244:	4618      	mov	r0, r3
 800b246:	3710      	adds	r7, #16
 800b248:	46bd      	mov	sp, r7
 800b24a:	bd80      	pop	{r7, pc}
 800b24c:	200093f0 	.word	0x200093f0

0800b250 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800b250:	b580      	push	{r7, lr}
 800b252:	b084      	sub	sp, #16
 800b254:	af02      	add	r7, sp, #8
 800b256:	6078      	str	r0, [r7, #4]
 800b258:	6039      	str	r1, [r7, #0]
  lwip_init();
 800b25a:	f000 f871 	bl	800b340 <lwip_init>

  tcpip_init_done = initfunc;
 800b25e:	4a17      	ldr	r2, [pc, #92]	@ (800b2bc <tcpip_init+0x6c>)
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800b264:	4a16      	ldr	r2, [pc, #88]	@ (800b2c0 <tcpip_init+0x70>)
 800b266:	683b      	ldr	r3, [r7, #0]
 800b268:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800b26a:	2106      	movs	r1, #6
 800b26c:	4815      	ldr	r0, [pc, #84]	@ (800b2c4 <tcpip_init+0x74>)
 800b26e:	f00a feb5 	bl	8015fdc <sys_mbox_new>
 800b272:	4603      	mov	r3, r0
 800b274:	2b00      	cmp	r3, #0
 800b276:	d006      	beq.n	800b286 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800b278:	4b13      	ldr	r3, [pc, #76]	@ (800b2c8 <tcpip_init+0x78>)
 800b27a:	f240 2261 	movw	r2, #609	@ 0x261
 800b27e:	4913      	ldr	r1, [pc, #76]	@ (800b2cc <tcpip_init+0x7c>)
 800b280:	4813      	ldr	r0, [pc, #76]	@ (800b2d0 <tcpip_init+0x80>)
 800b282:	f00b f98d 	bl	80165a0 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800b286:	4813      	ldr	r0, [pc, #76]	@ (800b2d4 <tcpip_init+0x84>)
 800b288:	f00b f80e 	bl	80162a8 <sys_mutex_new>
 800b28c:	4603      	mov	r3, r0
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d006      	beq.n	800b2a0 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800b292:	4b0d      	ldr	r3, [pc, #52]	@ (800b2c8 <tcpip_init+0x78>)
 800b294:	f240 2265 	movw	r2, #613	@ 0x265
 800b298:	490f      	ldr	r1, [pc, #60]	@ (800b2d8 <tcpip_init+0x88>)
 800b29a:	480d      	ldr	r0, [pc, #52]	@ (800b2d0 <tcpip_init+0x80>)
 800b29c:	f00b f980 	bl	80165a0 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800b2a0:	2300      	movs	r3, #0
 800b2a2:	9300      	str	r3, [sp, #0]
 800b2a4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b2a8:	2200      	movs	r2, #0
 800b2aa:	490c      	ldr	r1, [pc, #48]	@ (800b2dc <tcpip_init+0x8c>)
 800b2ac:	480c      	ldr	r0, [pc, #48]	@ (800b2e0 <tcpip_init+0x90>)
 800b2ae:	f00b f833 	bl	8016318 <sys_thread_new>
}
 800b2b2:	bf00      	nop
 800b2b4:	3708      	adds	r7, #8
 800b2b6:	46bd      	mov	sp, r7
 800b2b8:	bd80      	pop	{r7, pc}
 800b2ba:	bf00      	nop
 800b2bc:	200093e4 	.word	0x200093e4
 800b2c0:	200093e8 	.word	0x200093e8
 800b2c4:	200093ec 	.word	0x200093ec
 800b2c8:	08018574 	.word	0x08018574
 800b2cc:	080185fc 	.word	0x080185fc
 800b2d0:	080185c4 	.word	0x080185c4
 800b2d4:	200093f0 	.word	0x200093f0
 800b2d8:	08018620 	.word	0x08018620
 800b2dc:	0800afe1 	.word	0x0800afe1
 800b2e0:	08018644 	.word	0x08018644

0800b2e4 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800b2e4:	b480      	push	{r7}
 800b2e6:	b083      	sub	sp, #12
 800b2e8:	af00      	add	r7, sp, #0
 800b2ea:	4603      	mov	r3, r0
 800b2ec:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800b2ee:	88fb      	ldrh	r3, [r7, #6]
 800b2f0:	021b      	lsls	r3, r3, #8
 800b2f2:	b21a      	sxth	r2, r3
 800b2f4:	88fb      	ldrh	r3, [r7, #6]
 800b2f6:	0a1b      	lsrs	r3, r3, #8
 800b2f8:	b29b      	uxth	r3, r3
 800b2fa:	b21b      	sxth	r3, r3
 800b2fc:	4313      	orrs	r3, r2
 800b2fe:	b21b      	sxth	r3, r3
 800b300:	b29b      	uxth	r3, r3
}
 800b302:	4618      	mov	r0, r3
 800b304:	370c      	adds	r7, #12
 800b306:	46bd      	mov	sp, r7
 800b308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b30c:	4770      	bx	lr

0800b30e <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800b30e:	b480      	push	{r7}
 800b310:	b083      	sub	sp, #12
 800b312:	af00      	add	r7, sp, #0
 800b314:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	061a      	lsls	r2, r3, #24
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	021b      	lsls	r3, r3, #8
 800b31e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800b322:	431a      	orrs	r2, r3
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	0a1b      	lsrs	r3, r3, #8
 800b328:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800b32c:	431a      	orrs	r2, r3
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	0e1b      	lsrs	r3, r3, #24
 800b332:	4313      	orrs	r3, r2
}
 800b334:	4618      	mov	r0, r3
 800b336:	370c      	adds	r7, #12
 800b338:	46bd      	mov	sp, r7
 800b33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b33e:	4770      	bx	lr

0800b340 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800b340:	b580      	push	{r7, lr}
 800b342:	b082      	sub	sp, #8
 800b344:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800b346:	2300      	movs	r3, #0
 800b348:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800b34a:	f00a ff9f 	bl	801628c <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800b34e:	f000 f8d5 	bl	800b4fc <mem_init>
  memp_init();
 800b352:	f000 fc31 	bl	800bbb8 <memp_init>
  pbuf_init();
  netif_init();
 800b356:	f000 fd3d 	bl	800bdd4 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800b35a:	f008 f879 	bl	8013450 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800b35e:	f001 fe6f 	bl	800d040 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800b362:	f007 ffbb 	bl	80132dc <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800b366:	bf00      	nop
 800b368:	3708      	adds	r7, #8
 800b36a:	46bd      	mov	sp, r7
 800b36c:	bd80      	pop	{r7, pc}
	...

0800b370 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800b370:	b480      	push	{r7}
 800b372:	b083      	sub	sp, #12
 800b374:	af00      	add	r7, sp, #0
 800b376:	4603      	mov	r3, r0
 800b378:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800b37a:	4b05      	ldr	r3, [pc, #20]	@ (800b390 <ptr_to_mem+0x20>)
 800b37c:	681a      	ldr	r2, [r3, #0]
 800b37e:	88fb      	ldrh	r3, [r7, #6]
 800b380:	4413      	add	r3, r2
}
 800b382:	4618      	mov	r0, r3
 800b384:	370c      	adds	r7, #12
 800b386:	46bd      	mov	sp, r7
 800b388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b38c:	4770      	bx	lr
 800b38e:	bf00      	nop
 800b390:	2000bc20 	.word	0x2000bc20

0800b394 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800b394:	b480      	push	{r7}
 800b396:	b083      	sub	sp, #12
 800b398:	af00      	add	r7, sp, #0
 800b39a:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800b39c:	4b05      	ldr	r3, [pc, #20]	@ (800b3b4 <mem_to_ptr+0x20>)
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	687a      	ldr	r2, [r7, #4]
 800b3a2:	1ad3      	subs	r3, r2, r3
 800b3a4:	b29b      	uxth	r3, r3
}
 800b3a6:	4618      	mov	r0, r3
 800b3a8:	370c      	adds	r7, #12
 800b3aa:	46bd      	mov	sp, r7
 800b3ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b0:	4770      	bx	lr
 800b3b2:	bf00      	nop
 800b3b4:	2000bc20 	.word	0x2000bc20

0800b3b8 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800b3b8:	b590      	push	{r4, r7, lr}
 800b3ba:	b085      	sub	sp, #20
 800b3bc:	af00      	add	r7, sp, #0
 800b3be:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800b3c0:	4b45      	ldr	r3, [pc, #276]	@ (800b4d8 <plug_holes+0x120>)
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	687a      	ldr	r2, [r7, #4]
 800b3c6:	429a      	cmp	r2, r3
 800b3c8:	d206      	bcs.n	800b3d8 <plug_holes+0x20>
 800b3ca:	4b44      	ldr	r3, [pc, #272]	@ (800b4dc <plug_holes+0x124>)
 800b3cc:	f240 12df 	movw	r2, #479	@ 0x1df
 800b3d0:	4943      	ldr	r1, [pc, #268]	@ (800b4e0 <plug_holes+0x128>)
 800b3d2:	4844      	ldr	r0, [pc, #272]	@ (800b4e4 <plug_holes+0x12c>)
 800b3d4:	f00b f8e4 	bl	80165a0 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800b3d8:	4b43      	ldr	r3, [pc, #268]	@ (800b4e8 <plug_holes+0x130>)
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	687a      	ldr	r2, [r7, #4]
 800b3de:	429a      	cmp	r2, r3
 800b3e0:	d306      	bcc.n	800b3f0 <plug_holes+0x38>
 800b3e2:	4b3e      	ldr	r3, [pc, #248]	@ (800b4dc <plug_holes+0x124>)
 800b3e4:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800b3e8:	4940      	ldr	r1, [pc, #256]	@ (800b4ec <plug_holes+0x134>)
 800b3ea:	483e      	ldr	r0, [pc, #248]	@ (800b4e4 <plug_holes+0x12c>)
 800b3ec:	f00b f8d8 	bl	80165a0 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	791b      	ldrb	r3, [r3, #4]
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d006      	beq.n	800b406 <plug_holes+0x4e>
 800b3f8:	4b38      	ldr	r3, [pc, #224]	@ (800b4dc <plug_holes+0x124>)
 800b3fa:	f240 12e1 	movw	r2, #481	@ 0x1e1
 800b3fe:	493c      	ldr	r1, [pc, #240]	@ (800b4f0 <plug_holes+0x138>)
 800b400:	4838      	ldr	r0, [pc, #224]	@ (800b4e4 <plug_holes+0x12c>)
 800b402:	f00b f8cd 	bl	80165a0 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	881b      	ldrh	r3, [r3, #0]
 800b40a:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800b40e:	d906      	bls.n	800b41e <plug_holes+0x66>
 800b410:	4b32      	ldr	r3, [pc, #200]	@ (800b4dc <plug_holes+0x124>)
 800b412:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 800b416:	4937      	ldr	r1, [pc, #220]	@ (800b4f4 <plug_holes+0x13c>)
 800b418:	4832      	ldr	r0, [pc, #200]	@ (800b4e4 <plug_holes+0x12c>)
 800b41a:	f00b f8c1 	bl	80165a0 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	881b      	ldrh	r3, [r3, #0]
 800b422:	4618      	mov	r0, r3
 800b424:	f7ff ffa4 	bl	800b370 <ptr_to_mem>
 800b428:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800b42a:	687a      	ldr	r2, [r7, #4]
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	429a      	cmp	r2, r3
 800b430:	d024      	beq.n	800b47c <plug_holes+0xc4>
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	791b      	ldrb	r3, [r3, #4]
 800b436:	2b00      	cmp	r3, #0
 800b438:	d120      	bne.n	800b47c <plug_holes+0xc4>
 800b43a:	4b2b      	ldr	r3, [pc, #172]	@ (800b4e8 <plug_holes+0x130>)
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	68fa      	ldr	r2, [r7, #12]
 800b440:	429a      	cmp	r2, r3
 800b442:	d01b      	beq.n	800b47c <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800b444:	4b2c      	ldr	r3, [pc, #176]	@ (800b4f8 <plug_holes+0x140>)
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	68fa      	ldr	r2, [r7, #12]
 800b44a:	429a      	cmp	r2, r3
 800b44c:	d102      	bne.n	800b454 <plug_holes+0x9c>
      lfree = mem;
 800b44e:	4a2a      	ldr	r2, [pc, #168]	@ (800b4f8 <plug_holes+0x140>)
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	881a      	ldrh	r2, [r3, #0]
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	881b      	ldrh	r3, [r3, #0]
 800b460:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800b464:	d00a      	beq.n	800b47c <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	881b      	ldrh	r3, [r3, #0]
 800b46a:	4618      	mov	r0, r3
 800b46c:	f7ff ff80 	bl	800b370 <ptr_to_mem>
 800b470:	4604      	mov	r4, r0
 800b472:	6878      	ldr	r0, [r7, #4]
 800b474:	f7ff ff8e 	bl	800b394 <mem_to_ptr>
 800b478:	4603      	mov	r3, r0
 800b47a:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	885b      	ldrh	r3, [r3, #2]
 800b480:	4618      	mov	r0, r3
 800b482:	f7ff ff75 	bl	800b370 <ptr_to_mem>
 800b486:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800b488:	68ba      	ldr	r2, [r7, #8]
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	429a      	cmp	r2, r3
 800b48e:	d01f      	beq.n	800b4d0 <plug_holes+0x118>
 800b490:	68bb      	ldr	r3, [r7, #8]
 800b492:	791b      	ldrb	r3, [r3, #4]
 800b494:	2b00      	cmp	r3, #0
 800b496:	d11b      	bne.n	800b4d0 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800b498:	4b17      	ldr	r3, [pc, #92]	@ (800b4f8 <plug_holes+0x140>)
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	687a      	ldr	r2, [r7, #4]
 800b49e:	429a      	cmp	r2, r3
 800b4a0:	d102      	bne.n	800b4a8 <plug_holes+0xf0>
      lfree = pmem;
 800b4a2:	4a15      	ldr	r2, [pc, #84]	@ (800b4f8 <plug_holes+0x140>)
 800b4a4:	68bb      	ldr	r3, [r7, #8]
 800b4a6:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	881a      	ldrh	r2, [r3, #0]
 800b4ac:	68bb      	ldr	r3, [r7, #8]
 800b4ae:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	881b      	ldrh	r3, [r3, #0]
 800b4b4:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800b4b8:	d00a      	beq.n	800b4d0 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	881b      	ldrh	r3, [r3, #0]
 800b4be:	4618      	mov	r0, r3
 800b4c0:	f7ff ff56 	bl	800b370 <ptr_to_mem>
 800b4c4:	4604      	mov	r4, r0
 800b4c6:	68b8      	ldr	r0, [r7, #8]
 800b4c8:	f7ff ff64 	bl	800b394 <mem_to_ptr>
 800b4cc:	4603      	mov	r3, r0
 800b4ce:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800b4d0:	bf00      	nop
 800b4d2:	3714      	adds	r7, #20
 800b4d4:	46bd      	mov	sp, r7
 800b4d6:	bd90      	pop	{r4, r7, pc}
 800b4d8:	2000bc20 	.word	0x2000bc20
 800b4dc:	08018654 	.word	0x08018654
 800b4e0:	08018684 	.word	0x08018684
 800b4e4:	0801869c 	.word	0x0801869c
 800b4e8:	2000bc24 	.word	0x2000bc24
 800b4ec:	080186c4 	.word	0x080186c4
 800b4f0:	080186e0 	.word	0x080186e0
 800b4f4:	080186fc 	.word	0x080186fc
 800b4f8:	2000bc2c 	.word	0x2000bc2c

0800b4fc <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800b4fc:	b580      	push	{r7, lr}
 800b4fe:	b082      	sub	sp, #8
 800b500:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800b502:	4b1f      	ldr	r3, [pc, #124]	@ (800b580 <mem_init+0x84>)
 800b504:	3303      	adds	r3, #3
 800b506:	f023 0303 	bic.w	r3, r3, #3
 800b50a:	461a      	mov	r2, r3
 800b50c:	4b1d      	ldr	r3, [pc, #116]	@ (800b584 <mem_init+0x88>)
 800b50e:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800b510:	4b1c      	ldr	r3, [pc, #112]	@ (800b584 <mem_init+0x88>)
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 800b51c:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	2200      	movs	r2, #0
 800b522:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	2200      	movs	r2, #0
 800b528:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800b52a:	f44f 5020 	mov.w	r0, #10240	@ 0x2800
 800b52e:	f7ff ff1f 	bl	800b370 <ptr_to_mem>
 800b532:	4603      	mov	r3, r0
 800b534:	4a14      	ldr	r2, [pc, #80]	@ (800b588 <mem_init+0x8c>)
 800b536:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800b538:	4b13      	ldr	r3, [pc, #76]	@ (800b588 <mem_init+0x8c>)
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	2201      	movs	r2, #1
 800b53e:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800b540:	4b11      	ldr	r3, [pc, #68]	@ (800b588 <mem_init+0x8c>)
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 800b548:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800b54a:	4b0f      	ldr	r3, [pc, #60]	@ (800b588 <mem_init+0x8c>)
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 800b552:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800b554:	4b0b      	ldr	r3, [pc, #44]	@ (800b584 <mem_init+0x88>)
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	4a0c      	ldr	r2, [pc, #48]	@ (800b58c <mem_init+0x90>)
 800b55a:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800b55c:	480c      	ldr	r0, [pc, #48]	@ (800b590 <mem_init+0x94>)
 800b55e:	f00a fea3 	bl	80162a8 <sys_mutex_new>
 800b562:	4603      	mov	r3, r0
 800b564:	2b00      	cmp	r3, #0
 800b566:	d006      	beq.n	800b576 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800b568:	4b0a      	ldr	r3, [pc, #40]	@ (800b594 <mem_init+0x98>)
 800b56a:	f240 221f 	movw	r2, #543	@ 0x21f
 800b56e:	490a      	ldr	r1, [pc, #40]	@ (800b598 <mem_init+0x9c>)
 800b570:	480a      	ldr	r0, [pc, #40]	@ (800b59c <mem_init+0xa0>)
 800b572:	f00b f815 	bl	80165a0 <iprintf>
  }
}
 800b576:	bf00      	nop
 800b578:	3708      	adds	r7, #8
 800b57a:	46bd      	mov	sp, r7
 800b57c:	bd80      	pop	{r7, pc}
 800b57e:	bf00      	nop
 800b580:	2000940c 	.word	0x2000940c
 800b584:	2000bc20 	.word	0x2000bc20
 800b588:	2000bc24 	.word	0x2000bc24
 800b58c:	2000bc2c 	.word	0x2000bc2c
 800b590:	2000bc28 	.word	0x2000bc28
 800b594:	08018654 	.word	0x08018654
 800b598:	08018728 	.word	0x08018728
 800b59c:	0801869c 	.word	0x0801869c

0800b5a0 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800b5a0:	b580      	push	{r7, lr}
 800b5a2:	b086      	sub	sp, #24
 800b5a4:	af00      	add	r7, sp, #0
 800b5a6:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800b5a8:	6878      	ldr	r0, [r7, #4]
 800b5aa:	f7ff fef3 	bl	800b394 <mem_to_ptr>
 800b5ae:	4603      	mov	r3, r0
 800b5b0:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	881b      	ldrh	r3, [r3, #0]
 800b5b6:	4618      	mov	r0, r3
 800b5b8:	f7ff feda 	bl	800b370 <ptr_to_mem>
 800b5bc:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	885b      	ldrh	r3, [r3, #2]
 800b5c2:	4618      	mov	r0, r3
 800b5c4:	f7ff fed4 	bl	800b370 <ptr_to_mem>
 800b5c8:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	881b      	ldrh	r3, [r3, #0]
 800b5ce:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800b5d2:	d818      	bhi.n	800b606 <mem_link_valid+0x66>
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	885b      	ldrh	r3, [r3, #2]
 800b5d8:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800b5dc:	d813      	bhi.n	800b606 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800b5e2:	8afa      	ldrh	r2, [r7, #22]
 800b5e4:	429a      	cmp	r2, r3
 800b5e6:	d004      	beq.n	800b5f2 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	881b      	ldrh	r3, [r3, #0]
 800b5ec:	8afa      	ldrh	r2, [r7, #22]
 800b5ee:	429a      	cmp	r2, r3
 800b5f0:	d109      	bne.n	800b606 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800b5f2:	4b08      	ldr	r3, [pc, #32]	@ (800b614 <mem_link_valid+0x74>)
 800b5f4:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800b5f6:	693a      	ldr	r2, [r7, #16]
 800b5f8:	429a      	cmp	r2, r3
 800b5fa:	d006      	beq.n	800b60a <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800b5fc:	693b      	ldr	r3, [r7, #16]
 800b5fe:	885b      	ldrh	r3, [r3, #2]
 800b600:	8afa      	ldrh	r2, [r7, #22]
 800b602:	429a      	cmp	r2, r3
 800b604:	d001      	beq.n	800b60a <mem_link_valid+0x6a>
    return 0;
 800b606:	2300      	movs	r3, #0
 800b608:	e000      	b.n	800b60c <mem_link_valid+0x6c>
  }
  return 1;
 800b60a:	2301      	movs	r3, #1
}
 800b60c:	4618      	mov	r0, r3
 800b60e:	3718      	adds	r7, #24
 800b610:	46bd      	mov	sp, r7
 800b612:	bd80      	pop	{r7, pc}
 800b614:	2000bc24 	.word	0x2000bc24

0800b618 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800b618:	b580      	push	{r7, lr}
 800b61a:	b088      	sub	sp, #32
 800b61c:	af00      	add	r7, sp, #0
 800b61e:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	2b00      	cmp	r3, #0
 800b624:	d070      	beq.n	800b708 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	f003 0303 	and.w	r3, r3, #3
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d00d      	beq.n	800b64c <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800b630:	4b37      	ldr	r3, [pc, #220]	@ (800b710 <mem_free+0xf8>)
 800b632:	f240 2273 	movw	r2, #627	@ 0x273
 800b636:	4937      	ldr	r1, [pc, #220]	@ (800b714 <mem_free+0xfc>)
 800b638:	4837      	ldr	r0, [pc, #220]	@ (800b718 <mem_free+0x100>)
 800b63a:	f00a ffb1 	bl	80165a0 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800b63e:	f00a fe91 	bl	8016364 <sys_arch_protect>
 800b642:	60f8      	str	r0, [r7, #12]
 800b644:	68f8      	ldr	r0, [r7, #12]
 800b646:	f00a fe9b 	bl	8016380 <sys_arch_unprotect>
    return;
 800b64a:	e05e      	b.n	800b70a <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	3b08      	subs	r3, #8
 800b650:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800b652:	4b32      	ldr	r3, [pc, #200]	@ (800b71c <mem_free+0x104>)
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	69fa      	ldr	r2, [r7, #28]
 800b658:	429a      	cmp	r2, r3
 800b65a:	d306      	bcc.n	800b66a <mem_free+0x52>
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	f103 020c 	add.w	r2, r3, #12
 800b662:	4b2f      	ldr	r3, [pc, #188]	@ (800b720 <mem_free+0x108>)
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	429a      	cmp	r2, r3
 800b668:	d90d      	bls.n	800b686 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800b66a:	4b29      	ldr	r3, [pc, #164]	@ (800b710 <mem_free+0xf8>)
 800b66c:	f240 227f 	movw	r2, #639	@ 0x27f
 800b670:	492c      	ldr	r1, [pc, #176]	@ (800b724 <mem_free+0x10c>)
 800b672:	4829      	ldr	r0, [pc, #164]	@ (800b718 <mem_free+0x100>)
 800b674:	f00a ff94 	bl	80165a0 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800b678:	f00a fe74 	bl	8016364 <sys_arch_protect>
 800b67c:	6138      	str	r0, [r7, #16]
 800b67e:	6938      	ldr	r0, [r7, #16]
 800b680:	f00a fe7e 	bl	8016380 <sys_arch_unprotect>
    return;
 800b684:	e041      	b.n	800b70a <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800b686:	4828      	ldr	r0, [pc, #160]	@ (800b728 <mem_free+0x110>)
 800b688:	f00a fe2a 	bl	80162e0 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800b68c:	69fb      	ldr	r3, [r7, #28]
 800b68e:	791b      	ldrb	r3, [r3, #4]
 800b690:	2b00      	cmp	r3, #0
 800b692:	d110      	bne.n	800b6b6 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800b694:	4b1e      	ldr	r3, [pc, #120]	@ (800b710 <mem_free+0xf8>)
 800b696:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 800b69a:	4924      	ldr	r1, [pc, #144]	@ (800b72c <mem_free+0x114>)
 800b69c:	481e      	ldr	r0, [pc, #120]	@ (800b718 <mem_free+0x100>)
 800b69e:	f00a ff7f 	bl	80165a0 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800b6a2:	4821      	ldr	r0, [pc, #132]	@ (800b728 <mem_free+0x110>)
 800b6a4:	f00a fe2b 	bl	80162fe <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800b6a8:	f00a fe5c 	bl	8016364 <sys_arch_protect>
 800b6ac:	6178      	str	r0, [r7, #20]
 800b6ae:	6978      	ldr	r0, [r7, #20]
 800b6b0:	f00a fe66 	bl	8016380 <sys_arch_unprotect>
    return;
 800b6b4:	e029      	b.n	800b70a <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800b6b6:	69f8      	ldr	r0, [r7, #28]
 800b6b8:	f7ff ff72 	bl	800b5a0 <mem_link_valid>
 800b6bc:	4603      	mov	r3, r0
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d110      	bne.n	800b6e4 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800b6c2:	4b13      	ldr	r3, [pc, #76]	@ (800b710 <mem_free+0xf8>)
 800b6c4:	f240 2295 	movw	r2, #661	@ 0x295
 800b6c8:	4919      	ldr	r1, [pc, #100]	@ (800b730 <mem_free+0x118>)
 800b6ca:	4813      	ldr	r0, [pc, #76]	@ (800b718 <mem_free+0x100>)
 800b6cc:	f00a ff68 	bl	80165a0 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800b6d0:	4815      	ldr	r0, [pc, #84]	@ (800b728 <mem_free+0x110>)
 800b6d2:	f00a fe14 	bl	80162fe <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800b6d6:	f00a fe45 	bl	8016364 <sys_arch_protect>
 800b6da:	61b8      	str	r0, [r7, #24]
 800b6dc:	69b8      	ldr	r0, [r7, #24]
 800b6de:	f00a fe4f 	bl	8016380 <sys_arch_unprotect>
    return;
 800b6e2:	e012      	b.n	800b70a <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800b6e4:	69fb      	ldr	r3, [r7, #28]
 800b6e6:	2200      	movs	r2, #0
 800b6e8:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800b6ea:	4b12      	ldr	r3, [pc, #72]	@ (800b734 <mem_free+0x11c>)
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	69fa      	ldr	r2, [r7, #28]
 800b6f0:	429a      	cmp	r2, r3
 800b6f2:	d202      	bcs.n	800b6fa <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800b6f4:	4a0f      	ldr	r2, [pc, #60]	@ (800b734 <mem_free+0x11c>)
 800b6f6:	69fb      	ldr	r3, [r7, #28]
 800b6f8:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800b6fa:	69f8      	ldr	r0, [r7, #28]
 800b6fc:	f7ff fe5c 	bl	800b3b8 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800b700:	4809      	ldr	r0, [pc, #36]	@ (800b728 <mem_free+0x110>)
 800b702:	f00a fdfc 	bl	80162fe <sys_mutex_unlock>
 800b706:	e000      	b.n	800b70a <mem_free+0xf2>
    return;
 800b708:	bf00      	nop
}
 800b70a:	3720      	adds	r7, #32
 800b70c:	46bd      	mov	sp, r7
 800b70e:	bd80      	pop	{r7, pc}
 800b710:	08018654 	.word	0x08018654
 800b714:	08018744 	.word	0x08018744
 800b718:	0801869c 	.word	0x0801869c
 800b71c:	2000bc20 	.word	0x2000bc20
 800b720:	2000bc24 	.word	0x2000bc24
 800b724:	08018768 	.word	0x08018768
 800b728:	2000bc28 	.word	0x2000bc28
 800b72c:	08018784 	.word	0x08018784
 800b730:	080187ac 	.word	0x080187ac
 800b734:	2000bc2c 	.word	0x2000bc2c

0800b738 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800b738:	b580      	push	{r7, lr}
 800b73a:	b088      	sub	sp, #32
 800b73c:	af00      	add	r7, sp, #0
 800b73e:	6078      	str	r0, [r7, #4]
 800b740:	460b      	mov	r3, r1
 800b742:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800b744:	887b      	ldrh	r3, [r7, #2]
 800b746:	3303      	adds	r3, #3
 800b748:	b29b      	uxth	r3, r3
 800b74a:	f023 0303 	bic.w	r3, r3, #3
 800b74e:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800b750:	8bfb      	ldrh	r3, [r7, #30]
 800b752:	2b0b      	cmp	r3, #11
 800b754:	d801      	bhi.n	800b75a <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800b756:	230c      	movs	r3, #12
 800b758:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800b75a:	8bfb      	ldrh	r3, [r7, #30]
 800b75c:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800b760:	d803      	bhi.n	800b76a <mem_trim+0x32>
 800b762:	8bfa      	ldrh	r2, [r7, #30]
 800b764:	887b      	ldrh	r3, [r7, #2]
 800b766:	429a      	cmp	r2, r3
 800b768:	d201      	bcs.n	800b76e <mem_trim+0x36>
    return NULL;
 800b76a:	2300      	movs	r3, #0
 800b76c:	e0d8      	b.n	800b920 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800b76e:	4b6e      	ldr	r3, [pc, #440]	@ (800b928 <mem_trim+0x1f0>)
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	687a      	ldr	r2, [r7, #4]
 800b774:	429a      	cmp	r2, r3
 800b776:	d304      	bcc.n	800b782 <mem_trim+0x4a>
 800b778:	4b6c      	ldr	r3, [pc, #432]	@ (800b92c <mem_trim+0x1f4>)
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	687a      	ldr	r2, [r7, #4]
 800b77e:	429a      	cmp	r2, r3
 800b780:	d306      	bcc.n	800b790 <mem_trim+0x58>
 800b782:	4b6b      	ldr	r3, [pc, #428]	@ (800b930 <mem_trim+0x1f8>)
 800b784:	f240 22d1 	movw	r2, #721	@ 0x2d1
 800b788:	496a      	ldr	r1, [pc, #424]	@ (800b934 <mem_trim+0x1fc>)
 800b78a:	486b      	ldr	r0, [pc, #428]	@ (800b938 <mem_trim+0x200>)
 800b78c:	f00a ff08 	bl	80165a0 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800b790:	4b65      	ldr	r3, [pc, #404]	@ (800b928 <mem_trim+0x1f0>)
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	687a      	ldr	r2, [r7, #4]
 800b796:	429a      	cmp	r2, r3
 800b798:	d304      	bcc.n	800b7a4 <mem_trim+0x6c>
 800b79a:	4b64      	ldr	r3, [pc, #400]	@ (800b92c <mem_trim+0x1f4>)
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	687a      	ldr	r2, [r7, #4]
 800b7a0:	429a      	cmp	r2, r3
 800b7a2:	d307      	bcc.n	800b7b4 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800b7a4:	f00a fdde 	bl	8016364 <sys_arch_protect>
 800b7a8:	60b8      	str	r0, [r7, #8]
 800b7aa:	68b8      	ldr	r0, [r7, #8]
 800b7ac:	f00a fde8 	bl	8016380 <sys_arch_unprotect>
    return rmem;
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	e0b5      	b.n	800b920 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	3b08      	subs	r3, #8
 800b7b8:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800b7ba:	69b8      	ldr	r0, [r7, #24]
 800b7bc:	f7ff fdea 	bl	800b394 <mem_to_ptr>
 800b7c0:	4603      	mov	r3, r0
 800b7c2:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800b7c4:	69bb      	ldr	r3, [r7, #24]
 800b7c6:	881a      	ldrh	r2, [r3, #0]
 800b7c8:	8afb      	ldrh	r3, [r7, #22]
 800b7ca:	1ad3      	subs	r3, r2, r3
 800b7cc:	b29b      	uxth	r3, r3
 800b7ce:	3b08      	subs	r3, #8
 800b7d0:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800b7d2:	8bfa      	ldrh	r2, [r7, #30]
 800b7d4:	8abb      	ldrh	r3, [r7, #20]
 800b7d6:	429a      	cmp	r2, r3
 800b7d8:	d906      	bls.n	800b7e8 <mem_trim+0xb0>
 800b7da:	4b55      	ldr	r3, [pc, #340]	@ (800b930 <mem_trim+0x1f8>)
 800b7dc:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 800b7e0:	4956      	ldr	r1, [pc, #344]	@ (800b93c <mem_trim+0x204>)
 800b7e2:	4855      	ldr	r0, [pc, #340]	@ (800b938 <mem_trim+0x200>)
 800b7e4:	f00a fedc 	bl	80165a0 <iprintf>
  if (newsize > size) {
 800b7e8:	8bfa      	ldrh	r2, [r7, #30]
 800b7ea:	8abb      	ldrh	r3, [r7, #20]
 800b7ec:	429a      	cmp	r2, r3
 800b7ee:	d901      	bls.n	800b7f4 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800b7f0:	2300      	movs	r3, #0
 800b7f2:	e095      	b.n	800b920 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800b7f4:	8bfa      	ldrh	r2, [r7, #30]
 800b7f6:	8abb      	ldrh	r3, [r7, #20]
 800b7f8:	429a      	cmp	r2, r3
 800b7fa:	d101      	bne.n	800b800 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	e08f      	b.n	800b920 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800b800:	484f      	ldr	r0, [pc, #316]	@ (800b940 <mem_trim+0x208>)
 800b802:	f00a fd6d 	bl	80162e0 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800b806:	69bb      	ldr	r3, [r7, #24]
 800b808:	881b      	ldrh	r3, [r3, #0]
 800b80a:	4618      	mov	r0, r3
 800b80c:	f7ff fdb0 	bl	800b370 <ptr_to_mem>
 800b810:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800b812:	693b      	ldr	r3, [r7, #16]
 800b814:	791b      	ldrb	r3, [r3, #4]
 800b816:	2b00      	cmp	r3, #0
 800b818:	d13f      	bne.n	800b89a <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800b81a:	69bb      	ldr	r3, [r7, #24]
 800b81c:	881b      	ldrh	r3, [r3, #0]
 800b81e:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800b822:	d106      	bne.n	800b832 <mem_trim+0xfa>
 800b824:	4b42      	ldr	r3, [pc, #264]	@ (800b930 <mem_trim+0x1f8>)
 800b826:	f240 22f5 	movw	r2, #757	@ 0x2f5
 800b82a:	4946      	ldr	r1, [pc, #280]	@ (800b944 <mem_trim+0x20c>)
 800b82c:	4842      	ldr	r0, [pc, #264]	@ (800b938 <mem_trim+0x200>)
 800b82e:	f00a feb7 	bl	80165a0 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800b832:	693b      	ldr	r3, [r7, #16]
 800b834:	881b      	ldrh	r3, [r3, #0]
 800b836:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800b838:	8afa      	ldrh	r2, [r7, #22]
 800b83a:	8bfb      	ldrh	r3, [r7, #30]
 800b83c:	4413      	add	r3, r2
 800b83e:	b29b      	uxth	r3, r3
 800b840:	3308      	adds	r3, #8
 800b842:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800b844:	4b40      	ldr	r3, [pc, #256]	@ (800b948 <mem_trim+0x210>)
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	693a      	ldr	r2, [r7, #16]
 800b84a:	429a      	cmp	r2, r3
 800b84c:	d106      	bne.n	800b85c <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800b84e:	89fb      	ldrh	r3, [r7, #14]
 800b850:	4618      	mov	r0, r3
 800b852:	f7ff fd8d 	bl	800b370 <ptr_to_mem>
 800b856:	4603      	mov	r3, r0
 800b858:	4a3b      	ldr	r2, [pc, #236]	@ (800b948 <mem_trim+0x210>)
 800b85a:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800b85c:	89fb      	ldrh	r3, [r7, #14]
 800b85e:	4618      	mov	r0, r3
 800b860:	f7ff fd86 	bl	800b370 <ptr_to_mem>
 800b864:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800b866:	693b      	ldr	r3, [r7, #16]
 800b868:	2200      	movs	r2, #0
 800b86a:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800b86c:	693b      	ldr	r3, [r7, #16]
 800b86e:	89ba      	ldrh	r2, [r7, #12]
 800b870:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800b872:	693b      	ldr	r3, [r7, #16]
 800b874:	8afa      	ldrh	r2, [r7, #22]
 800b876:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800b878:	69bb      	ldr	r3, [r7, #24]
 800b87a:	89fa      	ldrh	r2, [r7, #14]
 800b87c:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800b87e:	693b      	ldr	r3, [r7, #16]
 800b880:	881b      	ldrh	r3, [r3, #0]
 800b882:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800b886:	d047      	beq.n	800b918 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800b888:	693b      	ldr	r3, [r7, #16]
 800b88a:	881b      	ldrh	r3, [r3, #0]
 800b88c:	4618      	mov	r0, r3
 800b88e:	f7ff fd6f 	bl	800b370 <ptr_to_mem>
 800b892:	4602      	mov	r2, r0
 800b894:	89fb      	ldrh	r3, [r7, #14]
 800b896:	8053      	strh	r3, [r2, #2]
 800b898:	e03e      	b.n	800b918 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800b89a:	8bfb      	ldrh	r3, [r7, #30]
 800b89c:	f103 0214 	add.w	r2, r3, #20
 800b8a0:	8abb      	ldrh	r3, [r7, #20]
 800b8a2:	429a      	cmp	r2, r3
 800b8a4:	d838      	bhi.n	800b918 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800b8a6:	8afa      	ldrh	r2, [r7, #22]
 800b8a8:	8bfb      	ldrh	r3, [r7, #30]
 800b8aa:	4413      	add	r3, r2
 800b8ac:	b29b      	uxth	r3, r3
 800b8ae:	3308      	adds	r3, #8
 800b8b0:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800b8b2:	69bb      	ldr	r3, [r7, #24]
 800b8b4:	881b      	ldrh	r3, [r3, #0]
 800b8b6:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800b8ba:	d106      	bne.n	800b8ca <mem_trim+0x192>
 800b8bc:	4b1c      	ldr	r3, [pc, #112]	@ (800b930 <mem_trim+0x1f8>)
 800b8be:	f240 3216 	movw	r2, #790	@ 0x316
 800b8c2:	4920      	ldr	r1, [pc, #128]	@ (800b944 <mem_trim+0x20c>)
 800b8c4:	481c      	ldr	r0, [pc, #112]	@ (800b938 <mem_trim+0x200>)
 800b8c6:	f00a fe6b 	bl	80165a0 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800b8ca:	89fb      	ldrh	r3, [r7, #14]
 800b8cc:	4618      	mov	r0, r3
 800b8ce:	f7ff fd4f 	bl	800b370 <ptr_to_mem>
 800b8d2:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800b8d4:	4b1c      	ldr	r3, [pc, #112]	@ (800b948 <mem_trim+0x210>)
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	693a      	ldr	r2, [r7, #16]
 800b8da:	429a      	cmp	r2, r3
 800b8dc:	d202      	bcs.n	800b8e4 <mem_trim+0x1ac>
      lfree = mem2;
 800b8de:	4a1a      	ldr	r2, [pc, #104]	@ (800b948 <mem_trim+0x210>)
 800b8e0:	693b      	ldr	r3, [r7, #16]
 800b8e2:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800b8e4:	693b      	ldr	r3, [r7, #16]
 800b8e6:	2200      	movs	r2, #0
 800b8e8:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800b8ea:	69bb      	ldr	r3, [r7, #24]
 800b8ec:	881a      	ldrh	r2, [r3, #0]
 800b8ee:	693b      	ldr	r3, [r7, #16]
 800b8f0:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800b8f2:	693b      	ldr	r3, [r7, #16]
 800b8f4:	8afa      	ldrh	r2, [r7, #22]
 800b8f6:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800b8f8:	69bb      	ldr	r3, [r7, #24]
 800b8fa:	89fa      	ldrh	r2, [r7, #14]
 800b8fc:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800b8fe:	693b      	ldr	r3, [r7, #16]
 800b900:	881b      	ldrh	r3, [r3, #0]
 800b902:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800b906:	d007      	beq.n	800b918 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800b908:	693b      	ldr	r3, [r7, #16]
 800b90a:	881b      	ldrh	r3, [r3, #0]
 800b90c:	4618      	mov	r0, r3
 800b90e:	f7ff fd2f 	bl	800b370 <ptr_to_mem>
 800b912:	4602      	mov	r2, r0
 800b914:	89fb      	ldrh	r3, [r7, #14]
 800b916:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800b918:	4809      	ldr	r0, [pc, #36]	@ (800b940 <mem_trim+0x208>)
 800b91a:	f00a fcf0 	bl	80162fe <sys_mutex_unlock>
  return rmem;
 800b91e:	687b      	ldr	r3, [r7, #4]
}
 800b920:	4618      	mov	r0, r3
 800b922:	3720      	adds	r7, #32
 800b924:	46bd      	mov	sp, r7
 800b926:	bd80      	pop	{r7, pc}
 800b928:	2000bc20 	.word	0x2000bc20
 800b92c:	2000bc24 	.word	0x2000bc24
 800b930:	08018654 	.word	0x08018654
 800b934:	080187e0 	.word	0x080187e0
 800b938:	0801869c 	.word	0x0801869c
 800b93c:	080187f8 	.word	0x080187f8
 800b940:	2000bc28 	.word	0x2000bc28
 800b944:	08018818 	.word	0x08018818
 800b948:	2000bc2c 	.word	0x2000bc2c

0800b94c <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800b94c:	b580      	push	{r7, lr}
 800b94e:	b088      	sub	sp, #32
 800b950:	af00      	add	r7, sp, #0
 800b952:	4603      	mov	r3, r0
 800b954:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800b956:	88fb      	ldrh	r3, [r7, #6]
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d101      	bne.n	800b960 <mem_malloc+0x14>
    return NULL;
 800b95c:	2300      	movs	r3, #0
 800b95e:	e0e2      	b.n	800bb26 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800b960:	88fb      	ldrh	r3, [r7, #6]
 800b962:	3303      	adds	r3, #3
 800b964:	b29b      	uxth	r3, r3
 800b966:	f023 0303 	bic.w	r3, r3, #3
 800b96a:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800b96c:	8bbb      	ldrh	r3, [r7, #28]
 800b96e:	2b0b      	cmp	r3, #11
 800b970:	d801      	bhi.n	800b976 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800b972:	230c      	movs	r3, #12
 800b974:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800b976:	8bbb      	ldrh	r3, [r7, #28]
 800b978:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800b97c:	d803      	bhi.n	800b986 <mem_malloc+0x3a>
 800b97e:	8bba      	ldrh	r2, [r7, #28]
 800b980:	88fb      	ldrh	r3, [r7, #6]
 800b982:	429a      	cmp	r2, r3
 800b984:	d201      	bcs.n	800b98a <mem_malloc+0x3e>
    return NULL;
 800b986:	2300      	movs	r3, #0
 800b988:	e0cd      	b.n	800bb26 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800b98a:	4869      	ldr	r0, [pc, #420]	@ (800bb30 <mem_malloc+0x1e4>)
 800b98c:	f00a fca8 	bl	80162e0 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800b990:	4b68      	ldr	r3, [pc, #416]	@ (800bb34 <mem_malloc+0x1e8>)
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	4618      	mov	r0, r3
 800b996:	f7ff fcfd 	bl	800b394 <mem_to_ptr>
 800b99a:	4603      	mov	r3, r0
 800b99c:	83fb      	strh	r3, [r7, #30]
 800b99e:	e0b7      	b.n	800bb10 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800b9a0:	8bfb      	ldrh	r3, [r7, #30]
 800b9a2:	4618      	mov	r0, r3
 800b9a4:	f7ff fce4 	bl	800b370 <ptr_to_mem>
 800b9a8:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800b9aa:	697b      	ldr	r3, [r7, #20]
 800b9ac:	791b      	ldrb	r3, [r3, #4]
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	f040 80a7 	bne.w	800bb02 <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800b9b4:	697b      	ldr	r3, [r7, #20]
 800b9b6:	881b      	ldrh	r3, [r3, #0]
 800b9b8:	461a      	mov	r2, r3
 800b9ba:	8bfb      	ldrh	r3, [r7, #30]
 800b9bc:	1ad3      	subs	r3, r2, r3
 800b9be:	f1a3 0208 	sub.w	r2, r3, #8
 800b9c2:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800b9c4:	429a      	cmp	r2, r3
 800b9c6:	f0c0 809c 	bcc.w	800bb02 <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800b9ca:	697b      	ldr	r3, [r7, #20]
 800b9cc:	881b      	ldrh	r3, [r3, #0]
 800b9ce:	461a      	mov	r2, r3
 800b9d0:	8bfb      	ldrh	r3, [r7, #30]
 800b9d2:	1ad3      	subs	r3, r2, r3
 800b9d4:	f1a3 0208 	sub.w	r2, r3, #8
 800b9d8:	8bbb      	ldrh	r3, [r7, #28]
 800b9da:	3314      	adds	r3, #20
 800b9dc:	429a      	cmp	r2, r3
 800b9de:	d333      	bcc.n	800ba48 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800b9e0:	8bfa      	ldrh	r2, [r7, #30]
 800b9e2:	8bbb      	ldrh	r3, [r7, #28]
 800b9e4:	4413      	add	r3, r2
 800b9e6:	b29b      	uxth	r3, r3
 800b9e8:	3308      	adds	r3, #8
 800b9ea:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800b9ec:	8a7b      	ldrh	r3, [r7, #18]
 800b9ee:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800b9f2:	d106      	bne.n	800ba02 <mem_malloc+0xb6>
 800b9f4:	4b50      	ldr	r3, [pc, #320]	@ (800bb38 <mem_malloc+0x1ec>)
 800b9f6:	f240 3287 	movw	r2, #903	@ 0x387
 800b9fa:	4950      	ldr	r1, [pc, #320]	@ (800bb3c <mem_malloc+0x1f0>)
 800b9fc:	4850      	ldr	r0, [pc, #320]	@ (800bb40 <mem_malloc+0x1f4>)
 800b9fe:	f00a fdcf 	bl	80165a0 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800ba02:	8a7b      	ldrh	r3, [r7, #18]
 800ba04:	4618      	mov	r0, r3
 800ba06:	f7ff fcb3 	bl	800b370 <ptr_to_mem>
 800ba0a:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	2200      	movs	r2, #0
 800ba10:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800ba12:	697b      	ldr	r3, [r7, #20]
 800ba14:	881a      	ldrh	r2, [r3, #0]
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	8bfa      	ldrh	r2, [r7, #30]
 800ba1e:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800ba20:	697b      	ldr	r3, [r7, #20]
 800ba22:	8a7a      	ldrh	r2, [r7, #18]
 800ba24:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800ba26:	697b      	ldr	r3, [r7, #20]
 800ba28:	2201      	movs	r2, #1
 800ba2a:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	881b      	ldrh	r3, [r3, #0]
 800ba30:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800ba34:	d00b      	beq.n	800ba4e <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	881b      	ldrh	r3, [r3, #0]
 800ba3a:	4618      	mov	r0, r3
 800ba3c:	f7ff fc98 	bl	800b370 <ptr_to_mem>
 800ba40:	4602      	mov	r2, r0
 800ba42:	8a7b      	ldrh	r3, [r7, #18]
 800ba44:	8053      	strh	r3, [r2, #2]
 800ba46:	e002      	b.n	800ba4e <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800ba48:	697b      	ldr	r3, [r7, #20]
 800ba4a:	2201      	movs	r2, #1
 800ba4c:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800ba4e:	4b39      	ldr	r3, [pc, #228]	@ (800bb34 <mem_malloc+0x1e8>)
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	697a      	ldr	r2, [r7, #20]
 800ba54:	429a      	cmp	r2, r3
 800ba56:	d127      	bne.n	800baa8 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800ba58:	4b36      	ldr	r3, [pc, #216]	@ (800bb34 <mem_malloc+0x1e8>)
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800ba5e:	e005      	b.n	800ba6c <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800ba60:	69bb      	ldr	r3, [r7, #24]
 800ba62:	881b      	ldrh	r3, [r3, #0]
 800ba64:	4618      	mov	r0, r3
 800ba66:	f7ff fc83 	bl	800b370 <ptr_to_mem>
 800ba6a:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800ba6c:	69bb      	ldr	r3, [r7, #24]
 800ba6e:	791b      	ldrb	r3, [r3, #4]
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d004      	beq.n	800ba7e <mem_malloc+0x132>
 800ba74:	4b33      	ldr	r3, [pc, #204]	@ (800bb44 <mem_malloc+0x1f8>)
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	69ba      	ldr	r2, [r7, #24]
 800ba7a:	429a      	cmp	r2, r3
 800ba7c:	d1f0      	bne.n	800ba60 <mem_malloc+0x114>
          }
          lfree = cur;
 800ba7e:	4a2d      	ldr	r2, [pc, #180]	@ (800bb34 <mem_malloc+0x1e8>)
 800ba80:	69bb      	ldr	r3, [r7, #24]
 800ba82:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800ba84:	4b2b      	ldr	r3, [pc, #172]	@ (800bb34 <mem_malloc+0x1e8>)
 800ba86:	681a      	ldr	r2, [r3, #0]
 800ba88:	4b2e      	ldr	r3, [pc, #184]	@ (800bb44 <mem_malloc+0x1f8>)
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	429a      	cmp	r2, r3
 800ba8e:	d00b      	beq.n	800baa8 <mem_malloc+0x15c>
 800ba90:	4b28      	ldr	r3, [pc, #160]	@ (800bb34 <mem_malloc+0x1e8>)
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	791b      	ldrb	r3, [r3, #4]
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d006      	beq.n	800baa8 <mem_malloc+0x15c>
 800ba9a:	4b27      	ldr	r3, [pc, #156]	@ (800bb38 <mem_malloc+0x1ec>)
 800ba9c:	f240 32b5 	movw	r2, #949	@ 0x3b5
 800baa0:	4929      	ldr	r1, [pc, #164]	@ (800bb48 <mem_malloc+0x1fc>)
 800baa2:	4827      	ldr	r0, [pc, #156]	@ (800bb40 <mem_malloc+0x1f4>)
 800baa4:	f00a fd7c 	bl	80165a0 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800baa8:	4821      	ldr	r0, [pc, #132]	@ (800bb30 <mem_malloc+0x1e4>)
 800baaa:	f00a fc28 	bl	80162fe <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800baae:	8bba      	ldrh	r2, [r7, #28]
 800bab0:	697b      	ldr	r3, [r7, #20]
 800bab2:	4413      	add	r3, r2
 800bab4:	3308      	adds	r3, #8
 800bab6:	4a23      	ldr	r2, [pc, #140]	@ (800bb44 <mem_malloc+0x1f8>)
 800bab8:	6812      	ldr	r2, [r2, #0]
 800baba:	4293      	cmp	r3, r2
 800babc:	d906      	bls.n	800bacc <mem_malloc+0x180>
 800babe:	4b1e      	ldr	r3, [pc, #120]	@ (800bb38 <mem_malloc+0x1ec>)
 800bac0:	f240 32b9 	movw	r2, #953	@ 0x3b9
 800bac4:	4921      	ldr	r1, [pc, #132]	@ (800bb4c <mem_malloc+0x200>)
 800bac6:	481e      	ldr	r0, [pc, #120]	@ (800bb40 <mem_malloc+0x1f4>)
 800bac8:	f00a fd6a 	bl	80165a0 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800bacc:	697b      	ldr	r3, [r7, #20]
 800bace:	f003 0303 	and.w	r3, r3, #3
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d006      	beq.n	800bae4 <mem_malloc+0x198>
 800bad6:	4b18      	ldr	r3, [pc, #96]	@ (800bb38 <mem_malloc+0x1ec>)
 800bad8:	f240 32bb 	movw	r2, #955	@ 0x3bb
 800badc:	491c      	ldr	r1, [pc, #112]	@ (800bb50 <mem_malloc+0x204>)
 800bade:	4818      	ldr	r0, [pc, #96]	@ (800bb40 <mem_malloc+0x1f4>)
 800bae0:	f00a fd5e 	bl	80165a0 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800bae4:	697b      	ldr	r3, [r7, #20]
 800bae6:	f003 0303 	and.w	r3, r3, #3
 800baea:	2b00      	cmp	r3, #0
 800baec:	d006      	beq.n	800bafc <mem_malloc+0x1b0>
 800baee:	4b12      	ldr	r3, [pc, #72]	@ (800bb38 <mem_malloc+0x1ec>)
 800baf0:	f240 32bd 	movw	r2, #957	@ 0x3bd
 800baf4:	4917      	ldr	r1, [pc, #92]	@ (800bb54 <mem_malloc+0x208>)
 800baf6:	4812      	ldr	r0, [pc, #72]	@ (800bb40 <mem_malloc+0x1f4>)
 800baf8:	f00a fd52 	bl	80165a0 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800bafc:	697b      	ldr	r3, [r7, #20]
 800bafe:	3308      	adds	r3, #8
 800bb00:	e011      	b.n	800bb26 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800bb02:	8bfb      	ldrh	r3, [r7, #30]
 800bb04:	4618      	mov	r0, r3
 800bb06:	f7ff fc33 	bl	800b370 <ptr_to_mem>
 800bb0a:	4603      	mov	r3, r0
 800bb0c:	881b      	ldrh	r3, [r3, #0]
 800bb0e:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800bb10:	8bfa      	ldrh	r2, [r7, #30]
 800bb12:	8bbb      	ldrh	r3, [r7, #28]
 800bb14:	f5c3 5320 	rsb	r3, r3, #10240	@ 0x2800
 800bb18:	429a      	cmp	r2, r3
 800bb1a:	f4ff af41 	bcc.w	800b9a0 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800bb1e:	4804      	ldr	r0, [pc, #16]	@ (800bb30 <mem_malloc+0x1e4>)
 800bb20:	f00a fbed 	bl	80162fe <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800bb24:	2300      	movs	r3, #0
}
 800bb26:	4618      	mov	r0, r3
 800bb28:	3720      	adds	r7, #32
 800bb2a:	46bd      	mov	sp, r7
 800bb2c:	bd80      	pop	{r7, pc}
 800bb2e:	bf00      	nop
 800bb30:	2000bc28 	.word	0x2000bc28
 800bb34:	2000bc2c 	.word	0x2000bc2c
 800bb38:	08018654 	.word	0x08018654
 800bb3c:	08018818 	.word	0x08018818
 800bb40:	0801869c 	.word	0x0801869c
 800bb44:	2000bc24 	.word	0x2000bc24
 800bb48:	0801882c 	.word	0x0801882c
 800bb4c:	08018848 	.word	0x08018848
 800bb50:	08018878 	.word	0x08018878
 800bb54:	080188a8 	.word	0x080188a8

0800bb58 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800bb58:	b480      	push	{r7}
 800bb5a:	b085      	sub	sp, #20
 800bb5c:	af00      	add	r7, sp, #0
 800bb5e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	689b      	ldr	r3, [r3, #8]
 800bb64:	2200      	movs	r2, #0
 800bb66:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	685b      	ldr	r3, [r3, #4]
 800bb6c:	3303      	adds	r3, #3
 800bb6e:	f023 0303 	bic.w	r3, r3, #3
 800bb72:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800bb74:	2300      	movs	r3, #0
 800bb76:	60fb      	str	r3, [r7, #12]
 800bb78:	e011      	b.n	800bb9e <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	689b      	ldr	r3, [r3, #8]
 800bb7e:	681a      	ldr	r2, [r3, #0]
 800bb80:	68bb      	ldr	r3, [r7, #8]
 800bb82:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	689b      	ldr	r3, [r3, #8]
 800bb88:	68ba      	ldr	r2, [r7, #8]
 800bb8a:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	881b      	ldrh	r3, [r3, #0]
 800bb90:	461a      	mov	r2, r3
 800bb92:	68bb      	ldr	r3, [r7, #8]
 800bb94:	4413      	add	r3, r2
 800bb96:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	3301      	adds	r3, #1
 800bb9c:	60fb      	str	r3, [r7, #12]
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	885b      	ldrh	r3, [r3, #2]
 800bba2:	461a      	mov	r2, r3
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	4293      	cmp	r3, r2
 800bba8:	dbe7      	blt.n	800bb7a <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800bbaa:	bf00      	nop
 800bbac:	bf00      	nop
 800bbae:	3714      	adds	r7, #20
 800bbb0:	46bd      	mov	sp, r7
 800bbb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbb6:	4770      	bx	lr

0800bbb8 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800bbb8:	b580      	push	{r7, lr}
 800bbba:	b082      	sub	sp, #8
 800bbbc:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800bbbe:	2300      	movs	r3, #0
 800bbc0:	80fb      	strh	r3, [r7, #6]
 800bbc2:	e009      	b.n	800bbd8 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800bbc4:	88fb      	ldrh	r3, [r7, #6]
 800bbc6:	4a08      	ldr	r2, [pc, #32]	@ (800bbe8 <memp_init+0x30>)
 800bbc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bbcc:	4618      	mov	r0, r3
 800bbce:	f7ff ffc3 	bl	800bb58 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800bbd2:	88fb      	ldrh	r3, [r7, #6]
 800bbd4:	3301      	adds	r3, #1
 800bbd6:	80fb      	strh	r3, [r7, #6]
 800bbd8:	88fb      	ldrh	r3, [r7, #6]
 800bbda:	2b0c      	cmp	r3, #12
 800bbdc:	d9f2      	bls.n	800bbc4 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800bbde:	bf00      	nop
 800bbe0:	bf00      	nop
 800bbe2:	3708      	adds	r7, #8
 800bbe4:	46bd      	mov	sp, r7
 800bbe6:	bd80      	pop	{r7, pc}
 800bbe8:	0801b0c0 	.word	0x0801b0c0

0800bbec <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800bbec:	b580      	push	{r7, lr}
 800bbee:	b084      	sub	sp, #16
 800bbf0:	af00      	add	r7, sp, #0
 800bbf2:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800bbf4:	f00a fbb6 	bl	8016364 <sys_arch_protect>
 800bbf8:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	689b      	ldr	r3, [r3, #8]
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800bc02:	68bb      	ldr	r3, [r7, #8]
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d015      	beq.n	800bc34 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	689b      	ldr	r3, [r3, #8]
 800bc0c:	68ba      	ldr	r2, [r7, #8]
 800bc0e:	6812      	ldr	r2, [r2, #0]
 800bc10:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800bc12:	68bb      	ldr	r3, [r7, #8]
 800bc14:	f003 0303 	and.w	r3, r3, #3
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d006      	beq.n	800bc2a <do_memp_malloc_pool+0x3e>
 800bc1c:	4b09      	ldr	r3, [pc, #36]	@ (800bc44 <do_memp_malloc_pool+0x58>)
 800bc1e:	f44f 728c 	mov.w	r2, #280	@ 0x118
 800bc22:	4909      	ldr	r1, [pc, #36]	@ (800bc48 <do_memp_malloc_pool+0x5c>)
 800bc24:	4809      	ldr	r0, [pc, #36]	@ (800bc4c <do_memp_malloc_pool+0x60>)
 800bc26:	f00a fcbb 	bl	80165a0 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800bc2a:	68f8      	ldr	r0, [r7, #12]
 800bc2c:	f00a fba8 	bl	8016380 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800bc30:	68bb      	ldr	r3, [r7, #8]
 800bc32:	e003      	b.n	800bc3c <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800bc34:	68f8      	ldr	r0, [r7, #12]
 800bc36:	f00a fba3 	bl	8016380 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800bc3a:	2300      	movs	r3, #0
}
 800bc3c:	4618      	mov	r0, r3
 800bc3e:	3710      	adds	r7, #16
 800bc40:	46bd      	mov	sp, r7
 800bc42:	bd80      	pop	{r7, pc}
 800bc44:	080188cc 	.word	0x080188cc
 800bc48:	080188fc 	.word	0x080188fc
 800bc4c:	08018920 	.word	0x08018920

0800bc50 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800bc50:	b580      	push	{r7, lr}
 800bc52:	b082      	sub	sp, #8
 800bc54:	af00      	add	r7, sp, #0
 800bc56:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d106      	bne.n	800bc6c <memp_malloc_pool+0x1c>
 800bc5e:	4b0a      	ldr	r3, [pc, #40]	@ (800bc88 <memp_malloc_pool+0x38>)
 800bc60:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 800bc64:	4909      	ldr	r1, [pc, #36]	@ (800bc8c <memp_malloc_pool+0x3c>)
 800bc66:	480a      	ldr	r0, [pc, #40]	@ (800bc90 <memp_malloc_pool+0x40>)
 800bc68:	f00a fc9a 	bl	80165a0 <iprintf>
  if (desc == NULL) {
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d101      	bne.n	800bc76 <memp_malloc_pool+0x26>
    return NULL;
 800bc72:	2300      	movs	r3, #0
 800bc74:	e003      	b.n	800bc7e <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800bc76:	6878      	ldr	r0, [r7, #4]
 800bc78:	f7ff ffb8 	bl	800bbec <do_memp_malloc_pool>
 800bc7c:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800bc7e:	4618      	mov	r0, r3
 800bc80:	3708      	adds	r7, #8
 800bc82:	46bd      	mov	sp, r7
 800bc84:	bd80      	pop	{r7, pc}
 800bc86:	bf00      	nop
 800bc88:	080188cc 	.word	0x080188cc
 800bc8c:	08018948 	.word	0x08018948
 800bc90:	08018920 	.word	0x08018920

0800bc94 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800bc94:	b580      	push	{r7, lr}
 800bc96:	b084      	sub	sp, #16
 800bc98:	af00      	add	r7, sp, #0
 800bc9a:	4603      	mov	r3, r0
 800bc9c:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800bc9e:	79fb      	ldrb	r3, [r7, #7]
 800bca0:	2b0c      	cmp	r3, #12
 800bca2:	d908      	bls.n	800bcb6 <memp_malloc+0x22>
 800bca4:	4b0a      	ldr	r3, [pc, #40]	@ (800bcd0 <memp_malloc+0x3c>)
 800bca6:	f240 1257 	movw	r2, #343	@ 0x157
 800bcaa:	490a      	ldr	r1, [pc, #40]	@ (800bcd4 <memp_malloc+0x40>)
 800bcac:	480a      	ldr	r0, [pc, #40]	@ (800bcd8 <memp_malloc+0x44>)
 800bcae:	f00a fc77 	bl	80165a0 <iprintf>
 800bcb2:	2300      	movs	r3, #0
 800bcb4:	e008      	b.n	800bcc8 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800bcb6:	79fb      	ldrb	r3, [r7, #7]
 800bcb8:	4a08      	ldr	r2, [pc, #32]	@ (800bcdc <memp_malloc+0x48>)
 800bcba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bcbe:	4618      	mov	r0, r3
 800bcc0:	f7ff ff94 	bl	800bbec <do_memp_malloc_pool>
 800bcc4:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800bcc6:	68fb      	ldr	r3, [r7, #12]
}
 800bcc8:	4618      	mov	r0, r3
 800bcca:	3710      	adds	r7, #16
 800bccc:	46bd      	mov	sp, r7
 800bcce:	bd80      	pop	{r7, pc}
 800bcd0:	080188cc 	.word	0x080188cc
 800bcd4:	0801895c 	.word	0x0801895c
 800bcd8:	08018920 	.word	0x08018920
 800bcdc:	0801b0c0 	.word	0x0801b0c0

0800bce0 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800bce0:	b580      	push	{r7, lr}
 800bce2:	b084      	sub	sp, #16
 800bce4:	af00      	add	r7, sp, #0
 800bce6:	6078      	str	r0, [r7, #4]
 800bce8:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800bcea:	683b      	ldr	r3, [r7, #0]
 800bcec:	f003 0303 	and.w	r3, r3, #3
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d006      	beq.n	800bd02 <do_memp_free_pool+0x22>
 800bcf4:	4b0d      	ldr	r3, [pc, #52]	@ (800bd2c <do_memp_free_pool+0x4c>)
 800bcf6:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 800bcfa:	490d      	ldr	r1, [pc, #52]	@ (800bd30 <do_memp_free_pool+0x50>)
 800bcfc:	480d      	ldr	r0, [pc, #52]	@ (800bd34 <do_memp_free_pool+0x54>)
 800bcfe:	f00a fc4f 	bl	80165a0 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800bd02:	683b      	ldr	r3, [r7, #0]
 800bd04:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800bd06:	f00a fb2d 	bl	8016364 <sys_arch_protect>
 800bd0a:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	689b      	ldr	r3, [r3, #8]
 800bd10:	681a      	ldr	r2, [r3, #0]
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	689b      	ldr	r3, [r3, #8]
 800bd1a:	68fa      	ldr	r2, [r7, #12]
 800bd1c:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800bd1e:	68b8      	ldr	r0, [r7, #8]
 800bd20:	f00a fb2e 	bl	8016380 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800bd24:	bf00      	nop
 800bd26:	3710      	adds	r7, #16
 800bd28:	46bd      	mov	sp, r7
 800bd2a:	bd80      	pop	{r7, pc}
 800bd2c:	080188cc 	.word	0x080188cc
 800bd30:	0801897c 	.word	0x0801897c
 800bd34:	08018920 	.word	0x08018920

0800bd38 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800bd38:	b580      	push	{r7, lr}
 800bd3a:	b082      	sub	sp, #8
 800bd3c:	af00      	add	r7, sp, #0
 800bd3e:	6078      	str	r0, [r7, #4]
 800bd40:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d106      	bne.n	800bd56 <memp_free_pool+0x1e>
 800bd48:	4b0a      	ldr	r3, [pc, #40]	@ (800bd74 <memp_free_pool+0x3c>)
 800bd4a:	f240 1295 	movw	r2, #405	@ 0x195
 800bd4e:	490a      	ldr	r1, [pc, #40]	@ (800bd78 <memp_free_pool+0x40>)
 800bd50:	480a      	ldr	r0, [pc, #40]	@ (800bd7c <memp_free_pool+0x44>)
 800bd52:	f00a fc25 	bl	80165a0 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d007      	beq.n	800bd6c <memp_free_pool+0x34>
 800bd5c:	683b      	ldr	r3, [r7, #0]
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d004      	beq.n	800bd6c <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800bd62:	6839      	ldr	r1, [r7, #0]
 800bd64:	6878      	ldr	r0, [r7, #4]
 800bd66:	f7ff ffbb 	bl	800bce0 <do_memp_free_pool>
 800bd6a:	e000      	b.n	800bd6e <memp_free_pool+0x36>
    return;
 800bd6c:	bf00      	nop
}
 800bd6e:	3708      	adds	r7, #8
 800bd70:	46bd      	mov	sp, r7
 800bd72:	bd80      	pop	{r7, pc}
 800bd74:	080188cc 	.word	0x080188cc
 800bd78:	08018948 	.word	0x08018948
 800bd7c:	08018920 	.word	0x08018920

0800bd80 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800bd80:	b580      	push	{r7, lr}
 800bd82:	b082      	sub	sp, #8
 800bd84:	af00      	add	r7, sp, #0
 800bd86:	4603      	mov	r3, r0
 800bd88:	6039      	str	r1, [r7, #0]
 800bd8a:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800bd8c:	79fb      	ldrb	r3, [r7, #7]
 800bd8e:	2b0c      	cmp	r3, #12
 800bd90:	d907      	bls.n	800bda2 <memp_free+0x22>
 800bd92:	4b0c      	ldr	r3, [pc, #48]	@ (800bdc4 <memp_free+0x44>)
 800bd94:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 800bd98:	490b      	ldr	r1, [pc, #44]	@ (800bdc8 <memp_free+0x48>)
 800bd9a:	480c      	ldr	r0, [pc, #48]	@ (800bdcc <memp_free+0x4c>)
 800bd9c:	f00a fc00 	bl	80165a0 <iprintf>
 800bda0:	e00c      	b.n	800bdbc <memp_free+0x3c>

  if (mem == NULL) {
 800bda2:	683b      	ldr	r3, [r7, #0]
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d008      	beq.n	800bdba <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800bda8:	79fb      	ldrb	r3, [r7, #7]
 800bdaa:	4a09      	ldr	r2, [pc, #36]	@ (800bdd0 <memp_free+0x50>)
 800bdac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bdb0:	6839      	ldr	r1, [r7, #0]
 800bdb2:	4618      	mov	r0, r3
 800bdb4:	f7ff ff94 	bl	800bce0 <do_memp_free_pool>
 800bdb8:	e000      	b.n	800bdbc <memp_free+0x3c>
    return;
 800bdba:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800bdbc:	3708      	adds	r7, #8
 800bdbe:	46bd      	mov	sp, r7
 800bdc0:	bd80      	pop	{r7, pc}
 800bdc2:	bf00      	nop
 800bdc4:	080188cc 	.word	0x080188cc
 800bdc8:	0801899c 	.word	0x0801899c
 800bdcc:	08018920 	.word	0x08018920
 800bdd0:	0801b0c0 	.word	0x0801b0c0

0800bdd4 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800bdd4:	b480      	push	{r7}
 800bdd6:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800bdd8:	bf00      	nop
 800bdda:	46bd      	mov	sp, r7
 800bddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bde0:	4770      	bx	lr
	...

0800bde4 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800bde4:	b580      	push	{r7, lr}
 800bde6:	b086      	sub	sp, #24
 800bde8:	af00      	add	r7, sp, #0
 800bdea:	60f8      	str	r0, [r7, #12]
 800bdec:	60b9      	str	r1, [r7, #8]
 800bdee:	607a      	str	r2, [r7, #4]
 800bdf0:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d108      	bne.n	800be0a <netif_add+0x26>
 800bdf8:	4b57      	ldr	r3, [pc, #348]	@ (800bf58 <netif_add+0x174>)
 800bdfa:	f240 1227 	movw	r2, #295	@ 0x127
 800bdfe:	4957      	ldr	r1, [pc, #348]	@ (800bf5c <netif_add+0x178>)
 800be00:	4857      	ldr	r0, [pc, #348]	@ (800bf60 <netif_add+0x17c>)
 800be02:	f00a fbcd 	bl	80165a0 <iprintf>
 800be06:	2300      	movs	r3, #0
 800be08:	e0a2      	b.n	800bf50 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800be0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d108      	bne.n	800be22 <netif_add+0x3e>
 800be10:	4b51      	ldr	r3, [pc, #324]	@ (800bf58 <netif_add+0x174>)
 800be12:	f44f 7294 	mov.w	r2, #296	@ 0x128
 800be16:	4953      	ldr	r1, [pc, #332]	@ (800bf64 <netif_add+0x180>)
 800be18:	4851      	ldr	r0, [pc, #324]	@ (800bf60 <netif_add+0x17c>)
 800be1a:	f00a fbc1 	bl	80165a0 <iprintf>
 800be1e:	2300      	movs	r3, #0
 800be20:	e096      	b.n	800bf50 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800be22:	68bb      	ldr	r3, [r7, #8]
 800be24:	2b00      	cmp	r3, #0
 800be26:	d101      	bne.n	800be2c <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800be28:	4b4f      	ldr	r3, [pc, #316]	@ (800bf68 <netif_add+0x184>)
 800be2a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d101      	bne.n	800be36 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800be32:	4b4d      	ldr	r3, [pc, #308]	@ (800bf68 <netif_add+0x184>)
 800be34:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800be36:	683b      	ldr	r3, [r7, #0]
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d101      	bne.n	800be40 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800be3c:	4b4a      	ldr	r3, [pc, #296]	@ (800bf68 <netif_add+0x184>)
 800be3e:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	2200      	movs	r2, #0
 800be44:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	2200      	movs	r2, #0
 800be4a:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	2200      	movs	r2, #0
 800be50:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	4a45      	ldr	r2, [pc, #276]	@ (800bf6c <netif_add+0x188>)
 800be56:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	2200      	movs	r2, #0
 800be5c:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	2200      	movs	r2, #0
 800be62:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	2200      	movs	r2, #0
 800be6a:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	6a3a      	ldr	r2, [r7, #32]
 800be70:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800be72:	4b3f      	ldr	r3, [pc, #252]	@ (800bf70 <netif_add+0x18c>)
 800be74:	781a      	ldrb	r2, [r3, #0]
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800be80:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800be82:	683b      	ldr	r3, [r7, #0]
 800be84:	687a      	ldr	r2, [r7, #4]
 800be86:	68b9      	ldr	r1, [r7, #8]
 800be88:	68f8      	ldr	r0, [r7, #12]
 800be8a:	f000 f913 	bl	800c0b4 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800be8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be90:	68f8      	ldr	r0, [r7, #12]
 800be92:	4798      	blx	r3
 800be94:	4603      	mov	r3, r0
 800be96:	2b00      	cmp	r3, #0
 800be98:	d001      	beq.n	800be9e <netif_add+0xba>
    return NULL;
 800be9a:	2300      	movs	r3, #0
 800be9c:	e058      	b.n	800bf50 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800bea4:	2bff      	cmp	r3, #255	@ 0xff
 800bea6:	d103      	bne.n	800beb0 <netif_add+0xcc>
        netif->num = 0;
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	2200      	movs	r2, #0
 800beac:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 800beb0:	2300      	movs	r3, #0
 800beb2:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800beb4:	4b2f      	ldr	r3, [pc, #188]	@ (800bf74 <netif_add+0x190>)
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	617b      	str	r3, [r7, #20]
 800beba:	e02b      	b.n	800bf14 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800bebc:	697a      	ldr	r2, [r7, #20]
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	429a      	cmp	r2, r3
 800bec2:	d106      	bne.n	800bed2 <netif_add+0xee>
 800bec4:	4b24      	ldr	r3, [pc, #144]	@ (800bf58 <netif_add+0x174>)
 800bec6:	f240 128b 	movw	r2, #395	@ 0x18b
 800beca:	492b      	ldr	r1, [pc, #172]	@ (800bf78 <netif_add+0x194>)
 800becc:	4824      	ldr	r0, [pc, #144]	@ (800bf60 <netif_add+0x17c>)
 800bece:	f00a fb67 	bl	80165a0 <iprintf>
        num_netifs++;
 800bed2:	693b      	ldr	r3, [r7, #16]
 800bed4:	3301      	adds	r3, #1
 800bed6:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800bed8:	693b      	ldr	r3, [r7, #16]
 800beda:	2bff      	cmp	r3, #255	@ 0xff
 800bedc:	dd06      	ble.n	800beec <netif_add+0x108>
 800bede:	4b1e      	ldr	r3, [pc, #120]	@ (800bf58 <netif_add+0x174>)
 800bee0:	f240 128d 	movw	r2, #397	@ 0x18d
 800bee4:	4925      	ldr	r1, [pc, #148]	@ (800bf7c <netif_add+0x198>)
 800bee6:	481e      	ldr	r0, [pc, #120]	@ (800bf60 <netif_add+0x17c>)
 800bee8:	f00a fb5a 	bl	80165a0 <iprintf>
        if (netif2->num == netif->num) {
 800beec:	697b      	ldr	r3, [r7, #20]
 800beee:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800bef8:	429a      	cmp	r2, r3
 800befa:	d108      	bne.n	800bf0e <netif_add+0x12a>
          netif->num++;
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800bf02:	3301      	adds	r3, #1
 800bf04:	b2da      	uxtb	r2, r3
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 800bf0c:	e005      	b.n	800bf1a <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800bf0e:	697b      	ldr	r3, [r7, #20]
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	617b      	str	r3, [r7, #20]
 800bf14:	697b      	ldr	r3, [r7, #20]
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d1d0      	bne.n	800bebc <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800bf1a:	697b      	ldr	r3, [r7, #20]
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d1be      	bne.n	800be9e <netif_add+0xba>
  }
  if (netif->num == 254) {
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800bf26:	2bfe      	cmp	r3, #254	@ 0xfe
 800bf28:	d103      	bne.n	800bf32 <netif_add+0x14e>
    netif_num = 0;
 800bf2a:	4b11      	ldr	r3, [pc, #68]	@ (800bf70 <netif_add+0x18c>)
 800bf2c:	2200      	movs	r2, #0
 800bf2e:	701a      	strb	r2, [r3, #0]
 800bf30:	e006      	b.n	800bf40 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800bf38:	3301      	adds	r3, #1
 800bf3a:	b2da      	uxtb	r2, r3
 800bf3c:	4b0c      	ldr	r3, [pc, #48]	@ (800bf70 <netif_add+0x18c>)
 800bf3e:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800bf40:	4b0c      	ldr	r3, [pc, #48]	@ (800bf74 <netif_add+0x190>)
 800bf42:	681a      	ldr	r2, [r3, #0]
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800bf48:	4a0a      	ldr	r2, [pc, #40]	@ (800bf74 <netif_add+0x190>)
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800bf4e:	68fb      	ldr	r3, [r7, #12]
}
 800bf50:	4618      	mov	r0, r3
 800bf52:	3718      	adds	r7, #24
 800bf54:	46bd      	mov	sp, r7
 800bf56:	bd80      	pop	{r7, pc}
 800bf58:	080189b8 	.word	0x080189b8
 800bf5c:	08018a4c 	.word	0x08018a4c
 800bf60:	08018a08 	.word	0x08018a08
 800bf64:	08018a68 	.word	0x08018a68
 800bf68:	0801b134 	.word	0x0801b134
 800bf6c:	0800c38f 	.word	0x0800c38f
 800bf70:	2000ed3c 	.word	0x2000ed3c
 800bf74:	2000ed34 	.word	0x2000ed34
 800bf78:	08018a8c 	.word	0x08018a8c
 800bf7c:	08018aa0 	.word	0x08018aa0

0800bf80 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800bf80:	b580      	push	{r7, lr}
 800bf82:	b082      	sub	sp, #8
 800bf84:	af00      	add	r7, sp, #0
 800bf86:	6078      	str	r0, [r7, #4]
 800bf88:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800bf8a:	6839      	ldr	r1, [r7, #0]
 800bf8c:	6878      	ldr	r0, [r7, #4]
 800bf8e:	f002 fe7f 	bl	800ec90 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800bf92:	6839      	ldr	r1, [r7, #0]
 800bf94:	6878      	ldr	r0, [r7, #4]
 800bf96:	f007 fd2b 	bl	80139f0 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800bf9a:	bf00      	nop
 800bf9c:	3708      	adds	r7, #8
 800bf9e:	46bd      	mov	sp, r7
 800bfa0:	bd80      	pop	{r7, pc}
	...

0800bfa4 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800bfa4:	b580      	push	{r7, lr}
 800bfa6:	b086      	sub	sp, #24
 800bfa8:	af00      	add	r7, sp, #0
 800bfaa:	60f8      	str	r0, [r7, #12]
 800bfac:	60b9      	str	r1, [r7, #8]
 800bfae:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800bfb0:	68bb      	ldr	r3, [r7, #8]
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d106      	bne.n	800bfc4 <netif_do_set_ipaddr+0x20>
 800bfb6:	4b1d      	ldr	r3, [pc, #116]	@ (800c02c <netif_do_set_ipaddr+0x88>)
 800bfb8:	f240 12cb 	movw	r2, #459	@ 0x1cb
 800bfbc:	491c      	ldr	r1, [pc, #112]	@ (800c030 <netif_do_set_ipaddr+0x8c>)
 800bfbe:	481d      	ldr	r0, [pc, #116]	@ (800c034 <netif_do_set_ipaddr+0x90>)
 800bfc0:	f00a faee 	bl	80165a0 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d106      	bne.n	800bfd8 <netif_do_set_ipaddr+0x34>
 800bfca:	4b18      	ldr	r3, [pc, #96]	@ (800c02c <netif_do_set_ipaddr+0x88>)
 800bfcc:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 800bfd0:	4917      	ldr	r1, [pc, #92]	@ (800c030 <netif_do_set_ipaddr+0x8c>)
 800bfd2:	4818      	ldr	r0, [pc, #96]	@ (800c034 <netif_do_set_ipaddr+0x90>)
 800bfd4:	f00a fae4 	bl	80165a0 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800bfd8:	68bb      	ldr	r3, [r7, #8]
 800bfda:	681a      	ldr	r2, [r3, #0]
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	3304      	adds	r3, #4
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	429a      	cmp	r2, r3
 800bfe4:	d01c      	beq.n	800c020 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800bfe6:	68bb      	ldr	r3, [r7, #8]
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	3304      	adds	r3, #4
 800bff0:	681a      	ldr	r2, [r3, #0]
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800bff6:	f107 0314 	add.w	r3, r7, #20
 800bffa:	4619      	mov	r1, r3
 800bffc:	6878      	ldr	r0, [r7, #4]
 800bffe:	f7ff ffbf 	bl	800bf80 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800c002:	68bb      	ldr	r3, [r7, #8]
 800c004:	2b00      	cmp	r3, #0
 800c006:	d002      	beq.n	800c00e <netif_do_set_ipaddr+0x6a>
 800c008:	68bb      	ldr	r3, [r7, #8]
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	e000      	b.n	800c010 <netif_do_set_ipaddr+0x6c>
 800c00e:	2300      	movs	r3, #0
 800c010:	68fa      	ldr	r2, [r7, #12]
 800c012:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800c014:	2101      	movs	r1, #1
 800c016:	68f8      	ldr	r0, [r7, #12]
 800c018:	f000 f8d2 	bl	800c1c0 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800c01c:	2301      	movs	r3, #1
 800c01e:	e000      	b.n	800c022 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800c020:	2300      	movs	r3, #0
}
 800c022:	4618      	mov	r0, r3
 800c024:	3718      	adds	r7, #24
 800c026:	46bd      	mov	sp, r7
 800c028:	bd80      	pop	{r7, pc}
 800c02a:	bf00      	nop
 800c02c:	080189b8 	.word	0x080189b8
 800c030:	08018ad0 	.word	0x08018ad0
 800c034:	08018a08 	.word	0x08018a08

0800c038 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800c038:	b480      	push	{r7}
 800c03a:	b085      	sub	sp, #20
 800c03c:	af00      	add	r7, sp, #0
 800c03e:	60f8      	str	r0, [r7, #12]
 800c040:	60b9      	str	r1, [r7, #8]
 800c042:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800c044:	68bb      	ldr	r3, [r7, #8]
 800c046:	681a      	ldr	r2, [r3, #0]
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	3308      	adds	r3, #8
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	429a      	cmp	r2, r3
 800c050:	d00a      	beq.n	800c068 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800c052:	68bb      	ldr	r3, [r7, #8]
 800c054:	2b00      	cmp	r3, #0
 800c056:	d002      	beq.n	800c05e <netif_do_set_netmask+0x26>
 800c058:	68bb      	ldr	r3, [r7, #8]
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	e000      	b.n	800c060 <netif_do_set_netmask+0x28>
 800c05e:	2300      	movs	r3, #0
 800c060:	68fa      	ldr	r2, [r7, #12]
 800c062:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800c064:	2301      	movs	r3, #1
 800c066:	e000      	b.n	800c06a <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800c068:	2300      	movs	r3, #0
}
 800c06a:	4618      	mov	r0, r3
 800c06c:	3714      	adds	r7, #20
 800c06e:	46bd      	mov	sp, r7
 800c070:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c074:	4770      	bx	lr

0800c076 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800c076:	b480      	push	{r7}
 800c078:	b085      	sub	sp, #20
 800c07a:	af00      	add	r7, sp, #0
 800c07c:	60f8      	str	r0, [r7, #12]
 800c07e:	60b9      	str	r1, [r7, #8]
 800c080:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800c082:	68bb      	ldr	r3, [r7, #8]
 800c084:	681a      	ldr	r2, [r3, #0]
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	330c      	adds	r3, #12
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	429a      	cmp	r2, r3
 800c08e:	d00a      	beq.n	800c0a6 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800c090:	68bb      	ldr	r3, [r7, #8]
 800c092:	2b00      	cmp	r3, #0
 800c094:	d002      	beq.n	800c09c <netif_do_set_gw+0x26>
 800c096:	68bb      	ldr	r3, [r7, #8]
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	e000      	b.n	800c09e <netif_do_set_gw+0x28>
 800c09c:	2300      	movs	r3, #0
 800c09e:	68fa      	ldr	r2, [r7, #12]
 800c0a0:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800c0a2:	2301      	movs	r3, #1
 800c0a4:	e000      	b.n	800c0a8 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800c0a6:	2300      	movs	r3, #0
}
 800c0a8:	4618      	mov	r0, r3
 800c0aa:	3714      	adds	r7, #20
 800c0ac:	46bd      	mov	sp, r7
 800c0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0b2:	4770      	bx	lr

0800c0b4 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800c0b4:	b580      	push	{r7, lr}
 800c0b6:	b088      	sub	sp, #32
 800c0b8:	af00      	add	r7, sp, #0
 800c0ba:	60f8      	str	r0, [r7, #12]
 800c0bc:	60b9      	str	r1, [r7, #8]
 800c0be:	607a      	str	r2, [r7, #4]
 800c0c0:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800c0c2:	2300      	movs	r3, #0
 800c0c4:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800c0c6:	2300      	movs	r3, #0
 800c0c8:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800c0ca:	68bb      	ldr	r3, [r7, #8]
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d101      	bne.n	800c0d4 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800c0d0:	4b1c      	ldr	r3, [pc, #112]	@ (800c144 <netif_set_addr+0x90>)
 800c0d2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d101      	bne.n	800c0de <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800c0da:	4b1a      	ldr	r3, [pc, #104]	@ (800c144 <netif_set_addr+0x90>)
 800c0dc:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800c0de:	683b      	ldr	r3, [r7, #0]
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d101      	bne.n	800c0e8 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800c0e4:	4b17      	ldr	r3, [pc, #92]	@ (800c144 <netif_set_addr+0x90>)
 800c0e6:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800c0e8:	68bb      	ldr	r3, [r7, #8]
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d003      	beq.n	800c0f6 <netif_set_addr+0x42>
 800c0ee:	68bb      	ldr	r3, [r7, #8]
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d101      	bne.n	800c0fa <netif_set_addr+0x46>
 800c0f6:	2301      	movs	r3, #1
 800c0f8:	e000      	b.n	800c0fc <netif_set_addr+0x48>
 800c0fa:	2300      	movs	r3, #0
 800c0fc:	617b      	str	r3, [r7, #20]
  if (remove) {
 800c0fe:	697b      	ldr	r3, [r7, #20]
 800c100:	2b00      	cmp	r3, #0
 800c102:	d006      	beq.n	800c112 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800c104:	f107 0310 	add.w	r3, r7, #16
 800c108:	461a      	mov	r2, r3
 800c10a:	68b9      	ldr	r1, [r7, #8]
 800c10c:	68f8      	ldr	r0, [r7, #12]
 800c10e:	f7ff ff49 	bl	800bfa4 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800c112:	69fa      	ldr	r2, [r7, #28]
 800c114:	6879      	ldr	r1, [r7, #4]
 800c116:	68f8      	ldr	r0, [r7, #12]
 800c118:	f7ff ff8e 	bl	800c038 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800c11c:	69ba      	ldr	r2, [r7, #24]
 800c11e:	6839      	ldr	r1, [r7, #0]
 800c120:	68f8      	ldr	r0, [r7, #12]
 800c122:	f7ff ffa8 	bl	800c076 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800c126:	697b      	ldr	r3, [r7, #20]
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d106      	bne.n	800c13a <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800c12c:	f107 0310 	add.w	r3, r7, #16
 800c130:	461a      	mov	r2, r3
 800c132:	68b9      	ldr	r1, [r7, #8]
 800c134:	68f8      	ldr	r0, [r7, #12]
 800c136:	f7ff ff35 	bl	800bfa4 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800c13a:	bf00      	nop
 800c13c:	3720      	adds	r7, #32
 800c13e:	46bd      	mov	sp, r7
 800c140:	bd80      	pop	{r7, pc}
 800c142:	bf00      	nop
 800c144:	0801b134 	.word	0x0801b134

0800c148 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800c148:	b480      	push	{r7}
 800c14a:	b083      	sub	sp, #12
 800c14c:	af00      	add	r7, sp, #0
 800c14e:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800c150:	4a04      	ldr	r2, [pc, #16]	@ (800c164 <netif_set_default+0x1c>)
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800c156:	bf00      	nop
 800c158:	370c      	adds	r7, #12
 800c15a:	46bd      	mov	sp, r7
 800c15c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c160:	4770      	bx	lr
 800c162:	bf00      	nop
 800c164:	2000ed38 	.word	0x2000ed38

0800c168 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800c168:	b580      	push	{r7, lr}
 800c16a:	b082      	sub	sp, #8
 800c16c:	af00      	add	r7, sp, #0
 800c16e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	2b00      	cmp	r3, #0
 800c174:	d107      	bne.n	800c186 <netif_set_up+0x1e>
 800c176:	4b0f      	ldr	r3, [pc, #60]	@ (800c1b4 <netif_set_up+0x4c>)
 800c178:	f44f 7254 	mov.w	r2, #848	@ 0x350
 800c17c:	490e      	ldr	r1, [pc, #56]	@ (800c1b8 <netif_set_up+0x50>)
 800c17e:	480f      	ldr	r0, [pc, #60]	@ (800c1bc <netif_set_up+0x54>)
 800c180:	f00a fa0e 	bl	80165a0 <iprintf>
 800c184:	e013      	b.n	800c1ae <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c18c:	f003 0301 	and.w	r3, r3, #1
 800c190:	2b00      	cmp	r3, #0
 800c192:	d10c      	bne.n	800c1ae <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c19a:	f043 0301 	orr.w	r3, r3, #1
 800c19e:	b2da      	uxtb	r2, r3
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800c1a6:	2103      	movs	r1, #3
 800c1a8:	6878      	ldr	r0, [r7, #4]
 800c1aa:	f000 f809 	bl	800c1c0 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800c1ae:	3708      	adds	r7, #8
 800c1b0:	46bd      	mov	sp, r7
 800c1b2:	bd80      	pop	{r7, pc}
 800c1b4:	080189b8 	.word	0x080189b8
 800c1b8:	08018b40 	.word	0x08018b40
 800c1bc:	08018a08 	.word	0x08018a08

0800c1c0 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800c1c0:	b580      	push	{r7, lr}
 800c1c2:	b082      	sub	sp, #8
 800c1c4:	af00      	add	r7, sp, #0
 800c1c6:	6078      	str	r0, [r7, #4]
 800c1c8:	460b      	mov	r3, r1
 800c1ca:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d106      	bne.n	800c1e0 <netif_issue_reports+0x20>
 800c1d2:	4b18      	ldr	r3, [pc, #96]	@ (800c234 <netif_issue_reports+0x74>)
 800c1d4:	f240 326d 	movw	r2, #877	@ 0x36d
 800c1d8:	4917      	ldr	r1, [pc, #92]	@ (800c238 <netif_issue_reports+0x78>)
 800c1da:	4818      	ldr	r0, [pc, #96]	@ (800c23c <netif_issue_reports+0x7c>)
 800c1dc:	f00a f9e0 	bl	80165a0 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c1e6:	f003 0304 	and.w	r3, r3, #4
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	d01e      	beq.n	800c22c <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c1f4:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d017      	beq.n	800c22c <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800c1fc:	78fb      	ldrb	r3, [r7, #3]
 800c1fe:	f003 0301 	and.w	r3, r3, #1
 800c202:	2b00      	cmp	r3, #0
 800c204:	d013      	beq.n	800c22e <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	3304      	adds	r3, #4
 800c20a:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d00e      	beq.n	800c22e <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c216:	f003 0308 	and.w	r3, r3, #8
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d007      	beq.n	800c22e <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	3304      	adds	r3, #4
 800c222:	4619      	mov	r1, r3
 800c224:	6878      	ldr	r0, [r7, #4]
 800c226:	f008 fb4d 	bl	80148c4 <etharp_request>
 800c22a:	e000      	b.n	800c22e <netif_issue_reports+0x6e>
    return;
 800c22c:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800c22e:	3708      	adds	r7, #8
 800c230:	46bd      	mov	sp, r7
 800c232:	bd80      	pop	{r7, pc}
 800c234:	080189b8 	.word	0x080189b8
 800c238:	08018b5c 	.word	0x08018b5c
 800c23c:	08018a08 	.word	0x08018a08

0800c240 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800c240:	b580      	push	{r7, lr}
 800c242:	b082      	sub	sp, #8
 800c244:	af00      	add	r7, sp, #0
 800c246:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d107      	bne.n	800c25e <netif_set_down+0x1e>
 800c24e:	4b12      	ldr	r3, [pc, #72]	@ (800c298 <netif_set_down+0x58>)
 800c250:	f240 329b 	movw	r2, #923	@ 0x39b
 800c254:	4911      	ldr	r1, [pc, #68]	@ (800c29c <netif_set_down+0x5c>)
 800c256:	4812      	ldr	r0, [pc, #72]	@ (800c2a0 <netif_set_down+0x60>)
 800c258:	f00a f9a2 	bl	80165a0 <iprintf>
 800c25c:	e019      	b.n	800c292 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c264:	f003 0301 	and.w	r3, r3, #1
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d012      	beq.n	800c292 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c272:	f023 0301 	bic.w	r3, r3, #1
 800c276:	b2da      	uxtb	r2, r3
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c284:	f003 0308 	and.w	r3, r3, #8
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d002      	beq.n	800c292 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800c28c:	6878      	ldr	r0, [r7, #4]
 800c28e:	f007 fed7 	bl	8014040 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800c292:	3708      	adds	r7, #8
 800c294:	46bd      	mov	sp, r7
 800c296:	bd80      	pop	{r7, pc}
 800c298:	080189b8 	.word	0x080189b8
 800c29c:	08018b80 	.word	0x08018b80
 800c2a0:	08018a08 	.word	0x08018a08

0800c2a4 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800c2a4:	b580      	push	{r7, lr}
 800c2a6:	b082      	sub	sp, #8
 800c2a8:	af00      	add	r7, sp, #0
 800c2aa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d107      	bne.n	800c2c2 <netif_set_link_up+0x1e>
 800c2b2:	4b13      	ldr	r3, [pc, #76]	@ (800c300 <netif_set_link_up+0x5c>)
 800c2b4:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 800c2b8:	4912      	ldr	r1, [pc, #72]	@ (800c304 <netif_set_link_up+0x60>)
 800c2ba:	4813      	ldr	r0, [pc, #76]	@ (800c308 <netif_set_link_up+0x64>)
 800c2bc:	f00a f970 	bl	80165a0 <iprintf>
 800c2c0:	e01b      	b.n	800c2fa <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c2c8:	f003 0304 	and.w	r3, r3, #4
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d114      	bne.n	800c2fa <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c2d6:	f043 0304 	orr.w	r3, r3, #4
 800c2da:	b2da      	uxtb	r2, r3
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800c2e2:	2103      	movs	r1, #3
 800c2e4:	6878      	ldr	r0, [r7, #4]
 800c2e6:	f7ff ff6b 	bl	800c1c0 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	69db      	ldr	r3, [r3, #28]
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d003      	beq.n	800c2fa <netif_set_link_up+0x56>
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	69db      	ldr	r3, [r3, #28]
 800c2f6:	6878      	ldr	r0, [r7, #4]
 800c2f8:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800c2fa:	3708      	adds	r7, #8
 800c2fc:	46bd      	mov	sp, r7
 800c2fe:	bd80      	pop	{r7, pc}
 800c300:	080189b8 	.word	0x080189b8
 800c304:	08018ba0 	.word	0x08018ba0
 800c308:	08018a08 	.word	0x08018a08

0800c30c <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800c30c:	b580      	push	{r7, lr}
 800c30e:	b082      	sub	sp, #8
 800c310:	af00      	add	r7, sp, #0
 800c312:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	2b00      	cmp	r3, #0
 800c318:	d107      	bne.n	800c32a <netif_set_link_down+0x1e>
 800c31a:	4b11      	ldr	r3, [pc, #68]	@ (800c360 <netif_set_link_down+0x54>)
 800c31c:	f240 4206 	movw	r2, #1030	@ 0x406
 800c320:	4910      	ldr	r1, [pc, #64]	@ (800c364 <netif_set_link_down+0x58>)
 800c322:	4811      	ldr	r0, [pc, #68]	@ (800c368 <netif_set_link_down+0x5c>)
 800c324:	f00a f93c 	bl	80165a0 <iprintf>
 800c328:	e017      	b.n	800c35a <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c330:	f003 0304 	and.w	r3, r3, #4
 800c334:	2b00      	cmp	r3, #0
 800c336:	d010      	beq.n	800c35a <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c33e:	f023 0304 	bic.w	r3, r3, #4
 800c342:	b2da      	uxtb	r2, r3
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	69db      	ldr	r3, [r3, #28]
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d003      	beq.n	800c35a <netif_set_link_down+0x4e>
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	69db      	ldr	r3, [r3, #28]
 800c356:	6878      	ldr	r0, [r7, #4]
 800c358:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800c35a:	3708      	adds	r7, #8
 800c35c:	46bd      	mov	sp, r7
 800c35e:	bd80      	pop	{r7, pc}
 800c360:	080189b8 	.word	0x080189b8
 800c364:	08018bc4 	.word	0x08018bc4
 800c368:	08018a08 	.word	0x08018a08

0800c36c <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800c36c:	b480      	push	{r7}
 800c36e:	b083      	sub	sp, #12
 800c370:	af00      	add	r7, sp, #0
 800c372:	6078      	str	r0, [r7, #4]
 800c374:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d002      	beq.n	800c382 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	683a      	ldr	r2, [r7, #0]
 800c380:	61da      	str	r2, [r3, #28]
  }
}
 800c382:	bf00      	nop
 800c384:	370c      	adds	r7, #12
 800c386:	46bd      	mov	sp, r7
 800c388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c38c:	4770      	bx	lr

0800c38e <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800c38e:	b480      	push	{r7}
 800c390:	b085      	sub	sp, #20
 800c392:	af00      	add	r7, sp, #0
 800c394:	60f8      	str	r0, [r7, #12]
 800c396:	60b9      	str	r1, [r7, #8]
 800c398:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800c39a:	f06f 030b 	mvn.w	r3, #11
}
 800c39e:	4618      	mov	r0, r3
 800c3a0:	3714      	adds	r7, #20
 800c3a2:	46bd      	mov	sp, r7
 800c3a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3a8:	4770      	bx	lr
	...

0800c3ac <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800c3ac:	b480      	push	{r7}
 800c3ae:	b085      	sub	sp, #20
 800c3b0:	af00      	add	r7, sp, #0
 800c3b2:	4603      	mov	r3, r0
 800c3b4:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800c3b6:	79fb      	ldrb	r3, [r7, #7]
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d013      	beq.n	800c3e4 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800c3bc:	4b0d      	ldr	r3, [pc, #52]	@ (800c3f4 <netif_get_by_index+0x48>)
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	60fb      	str	r3, [r7, #12]
 800c3c2:	e00c      	b.n	800c3de <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c3ca:	3301      	adds	r3, #1
 800c3cc:	b2db      	uxtb	r3, r3
 800c3ce:	79fa      	ldrb	r2, [r7, #7]
 800c3d0:	429a      	cmp	r2, r3
 800c3d2:	d101      	bne.n	800c3d8 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	e006      	b.n	800c3e6 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	60fb      	str	r3, [r7, #12]
 800c3de:	68fb      	ldr	r3, [r7, #12]
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d1ef      	bne.n	800c3c4 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800c3e4:	2300      	movs	r3, #0
}
 800c3e6:	4618      	mov	r0, r3
 800c3e8:	3714      	adds	r7, #20
 800c3ea:	46bd      	mov	sp, r7
 800c3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3f0:	4770      	bx	lr
 800c3f2:	bf00      	nop
 800c3f4:	2000ed34 	.word	0x2000ed34

0800c3f8 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800c3f8:	b580      	push	{r7, lr}
 800c3fa:	b082      	sub	sp, #8
 800c3fc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800c3fe:	f009 ffb1 	bl	8016364 <sys_arch_protect>
 800c402:	6038      	str	r0, [r7, #0]
 800c404:	4b0d      	ldr	r3, [pc, #52]	@ (800c43c <pbuf_free_ooseq+0x44>)
 800c406:	2200      	movs	r2, #0
 800c408:	701a      	strb	r2, [r3, #0]
 800c40a:	6838      	ldr	r0, [r7, #0]
 800c40c:	f009 ffb8 	bl	8016380 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800c410:	4b0b      	ldr	r3, [pc, #44]	@ (800c440 <pbuf_free_ooseq+0x48>)
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	607b      	str	r3, [r7, #4]
 800c416:	e00a      	b.n	800c42e <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d003      	beq.n	800c428 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800c420:	6878      	ldr	r0, [r7, #4]
 800c422:	f002 fc73 	bl	800ed0c <tcp_free_ooseq>
      return;
 800c426:	e005      	b.n	800c434 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	68db      	ldr	r3, [r3, #12]
 800c42c:	607b      	str	r3, [r7, #4]
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	2b00      	cmp	r3, #0
 800c432:	d1f1      	bne.n	800c418 <pbuf_free_ooseq+0x20>
    }
  }
}
 800c434:	3708      	adds	r7, #8
 800c436:	46bd      	mov	sp, r7
 800c438:	bd80      	pop	{r7, pc}
 800c43a:	bf00      	nop
 800c43c:	2000ed3d 	.word	0x2000ed3d
 800c440:	2000ed4c 	.word	0x2000ed4c

0800c444 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800c444:	b580      	push	{r7, lr}
 800c446:	b082      	sub	sp, #8
 800c448:	af00      	add	r7, sp, #0
 800c44a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800c44c:	f7ff ffd4 	bl	800c3f8 <pbuf_free_ooseq>
}
 800c450:	bf00      	nop
 800c452:	3708      	adds	r7, #8
 800c454:	46bd      	mov	sp, r7
 800c456:	bd80      	pop	{r7, pc}

0800c458 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800c458:	b580      	push	{r7, lr}
 800c45a:	b082      	sub	sp, #8
 800c45c:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800c45e:	f009 ff81 	bl	8016364 <sys_arch_protect>
 800c462:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800c464:	4b0f      	ldr	r3, [pc, #60]	@ (800c4a4 <pbuf_pool_is_empty+0x4c>)
 800c466:	781b      	ldrb	r3, [r3, #0]
 800c468:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800c46a:	4b0e      	ldr	r3, [pc, #56]	@ (800c4a4 <pbuf_pool_is_empty+0x4c>)
 800c46c:	2201      	movs	r2, #1
 800c46e:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800c470:	6878      	ldr	r0, [r7, #4]
 800c472:	f009 ff85 	bl	8016380 <sys_arch_unprotect>

  if (!queued) {
 800c476:	78fb      	ldrb	r3, [r7, #3]
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d10f      	bne.n	800c49c <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800c47c:	2100      	movs	r1, #0
 800c47e:	480a      	ldr	r0, [pc, #40]	@ (800c4a8 <pbuf_pool_is_empty+0x50>)
 800c480:	f7fe fe90 	bl	800b1a4 <tcpip_try_callback>
 800c484:	4603      	mov	r3, r0
 800c486:	2b00      	cmp	r3, #0
 800c488:	d008      	beq.n	800c49c <pbuf_pool_is_empty+0x44>
 800c48a:	f009 ff6b 	bl	8016364 <sys_arch_protect>
 800c48e:	6078      	str	r0, [r7, #4]
 800c490:	4b04      	ldr	r3, [pc, #16]	@ (800c4a4 <pbuf_pool_is_empty+0x4c>)
 800c492:	2200      	movs	r2, #0
 800c494:	701a      	strb	r2, [r3, #0]
 800c496:	6878      	ldr	r0, [r7, #4]
 800c498:	f009 ff72 	bl	8016380 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800c49c:	bf00      	nop
 800c49e:	3708      	adds	r7, #8
 800c4a0:	46bd      	mov	sp, r7
 800c4a2:	bd80      	pop	{r7, pc}
 800c4a4:	2000ed3d 	.word	0x2000ed3d
 800c4a8:	0800c445 	.word	0x0800c445

0800c4ac <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800c4ac:	b480      	push	{r7}
 800c4ae:	b085      	sub	sp, #20
 800c4b0:	af00      	add	r7, sp, #0
 800c4b2:	60f8      	str	r0, [r7, #12]
 800c4b4:	60b9      	str	r1, [r7, #8]
 800c4b6:	4611      	mov	r1, r2
 800c4b8:	461a      	mov	r2, r3
 800c4ba:	460b      	mov	r3, r1
 800c4bc:	80fb      	strh	r3, [r7, #6]
 800c4be:	4613      	mov	r3, r2
 800c4c0:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800c4c2:	68fb      	ldr	r3, [r7, #12]
 800c4c4:	2200      	movs	r2, #0
 800c4c6:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	68ba      	ldr	r2, [r7, #8]
 800c4cc:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	88fa      	ldrh	r2, [r7, #6]
 800c4d2:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800c4d4:	68fb      	ldr	r3, [r7, #12]
 800c4d6:	88ba      	ldrh	r2, [r7, #4]
 800c4d8:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800c4da:	8b3b      	ldrh	r3, [r7, #24]
 800c4dc:	b2da      	uxtb	r2, r3
 800c4de:	68fb      	ldr	r3, [r7, #12]
 800c4e0:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800c4e2:	68fb      	ldr	r3, [r7, #12]
 800c4e4:	7f3a      	ldrb	r2, [r7, #28]
 800c4e6:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800c4e8:	68fb      	ldr	r3, [r7, #12]
 800c4ea:	2201      	movs	r2, #1
 800c4ec:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800c4ee:	68fb      	ldr	r3, [r7, #12]
 800c4f0:	2200      	movs	r2, #0
 800c4f2:	73da      	strb	r2, [r3, #15]
}
 800c4f4:	bf00      	nop
 800c4f6:	3714      	adds	r7, #20
 800c4f8:	46bd      	mov	sp, r7
 800c4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4fe:	4770      	bx	lr

0800c500 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800c500:	b580      	push	{r7, lr}
 800c502:	b08c      	sub	sp, #48	@ 0x30
 800c504:	af02      	add	r7, sp, #8
 800c506:	4603      	mov	r3, r0
 800c508:	71fb      	strb	r3, [r7, #7]
 800c50a:	460b      	mov	r3, r1
 800c50c:	80bb      	strh	r3, [r7, #4]
 800c50e:	4613      	mov	r3, r2
 800c510:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800c512:	79fb      	ldrb	r3, [r7, #7]
 800c514:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800c516:	887b      	ldrh	r3, [r7, #2]
 800c518:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800c51c:	d07f      	beq.n	800c61e <pbuf_alloc+0x11e>
 800c51e:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800c522:	f300 80c8 	bgt.w	800c6b6 <pbuf_alloc+0x1b6>
 800c526:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800c52a:	d010      	beq.n	800c54e <pbuf_alloc+0x4e>
 800c52c:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800c530:	f300 80c1 	bgt.w	800c6b6 <pbuf_alloc+0x1b6>
 800c534:	2b01      	cmp	r3, #1
 800c536:	d002      	beq.n	800c53e <pbuf_alloc+0x3e>
 800c538:	2b41      	cmp	r3, #65	@ 0x41
 800c53a:	f040 80bc 	bne.w	800c6b6 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800c53e:	887a      	ldrh	r2, [r7, #2]
 800c540:	88bb      	ldrh	r3, [r7, #4]
 800c542:	4619      	mov	r1, r3
 800c544:	2000      	movs	r0, #0
 800c546:	f000 f8d1 	bl	800c6ec <pbuf_alloc_reference>
 800c54a:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 800c54c:	e0bd      	b.n	800c6ca <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800c54e:	2300      	movs	r3, #0
 800c550:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 800c552:	2300      	movs	r3, #0
 800c554:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800c556:	88bb      	ldrh	r3, [r7, #4]
 800c558:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800c55a:	200c      	movs	r0, #12
 800c55c:	f7ff fb9a 	bl	800bc94 <memp_malloc>
 800c560:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800c562:	693b      	ldr	r3, [r7, #16]
 800c564:	2b00      	cmp	r3, #0
 800c566:	d109      	bne.n	800c57c <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800c568:	f7ff ff76 	bl	800c458 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800c56c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d002      	beq.n	800c578 <pbuf_alloc+0x78>
            pbuf_free(p);
 800c572:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c574:	f000 faa8 	bl	800cac8 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800c578:	2300      	movs	r3, #0
 800c57a:	e0a7      	b.n	800c6cc <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800c57c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c57e:	3303      	adds	r3, #3
 800c580:	b29b      	uxth	r3, r3
 800c582:	f023 0303 	bic.w	r3, r3, #3
 800c586:	b29b      	uxth	r3, r3
 800c588:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 800c58c:	b29b      	uxth	r3, r3
 800c58e:	8b7a      	ldrh	r2, [r7, #26]
 800c590:	4293      	cmp	r3, r2
 800c592:	bf28      	it	cs
 800c594:	4613      	movcs	r3, r2
 800c596:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800c598:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c59a:	3310      	adds	r3, #16
 800c59c:	693a      	ldr	r2, [r7, #16]
 800c59e:	4413      	add	r3, r2
 800c5a0:	3303      	adds	r3, #3
 800c5a2:	f023 0303 	bic.w	r3, r3, #3
 800c5a6:	4618      	mov	r0, r3
 800c5a8:	89f9      	ldrh	r1, [r7, #14]
 800c5aa:	8b7a      	ldrh	r2, [r7, #26]
 800c5ac:	2300      	movs	r3, #0
 800c5ae:	9301      	str	r3, [sp, #4]
 800c5b0:	887b      	ldrh	r3, [r7, #2]
 800c5b2:	9300      	str	r3, [sp, #0]
 800c5b4:	460b      	mov	r3, r1
 800c5b6:	4601      	mov	r1, r0
 800c5b8:	6938      	ldr	r0, [r7, #16]
 800c5ba:	f7ff ff77 	bl	800c4ac <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800c5be:	693b      	ldr	r3, [r7, #16]
 800c5c0:	685b      	ldr	r3, [r3, #4]
 800c5c2:	f003 0303 	and.w	r3, r3, #3
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d006      	beq.n	800c5d8 <pbuf_alloc+0xd8>
 800c5ca:	4b42      	ldr	r3, [pc, #264]	@ (800c6d4 <pbuf_alloc+0x1d4>)
 800c5cc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800c5d0:	4941      	ldr	r1, [pc, #260]	@ (800c6d8 <pbuf_alloc+0x1d8>)
 800c5d2:	4842      	ldr	r0, [pc, #264]	@ (800c6dc <pbuf_alloc+0x1dc>)
 800c5d4:	f009 ffe4 	bl	80165a0 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800c5d8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c5da:	3303      	adds	r3, #3
 800c5dc:	f023 0303 	bic.w	r3, r3, #3
 800c5e0:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 800c5e4:	d106      	bne.n	800c5f4 <pbuf_alloc+0xf4>
 800c5e6:	4b3b      	ldr	r3, [pc, #236]	@ (800c6d4 <pbuf_alloc+0x1d4>)
 800c5e8:	f44f 7281 	mov.w	r2, #258	@ 0x102
 800c5ec:	493c      	ldr	r1, [pc, #240]	@ (800c6e0 <pbuf_alloc+0x1e0>)
 800c5ee:	483b      	ldr	r0, [pc, #236]	@ (800c6dc <pbuf_alloc+0x1dc>)
 800c5f0:	f009 ffd6 	bl	80165a0 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800c5f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d102      	bne.n	800c600 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800c5fa:	693b      	ldr	r3, [r7, #16]
 800c5fc:	627b      	str	r3, [r7, #36]	@ 0x24
 800c5fe:	e002      	b.n	800c606 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800c600:	69fb      	ldr	r3, [r7, #28]
 800c602:	693a      	ldr	r2, [r7, #16]
 800c604:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800c606:	693b      	ldr	r3, [r7, #16]
 800c608:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800c60a:	8b7a      	ldrh	r2, [r7, #26]
 800c60c:	89fb      	ldrh	r3, [r7, #14]
 800c60e:	1ad3      	subs	r3, r2, r3
 800c610:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800c612:	2300      	movs	r3, #0
 800c614:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 800c616:	8b7b      	ldrh	r3, [r7, #26]
 800c618:	2b00      	cmp	r3, #0
 800c61a:	d19e      	bne.n	800c55a <pbuf_alloc+0x5a>
      break;
 800c61c:	e055      	b.n	800c6ca <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800c61e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c620:	3303      	adds	r3, #3
 800c622:	b29b      	uxth	r3, r3
 800c624:	f023 0303 	bic.w	r3, r3, #3
 800c628:	b29a      	uxth	r2, r3
 800c62a:	88bb      	ldrh	r3, [r7, #4]
 800c62c:	3303      	adds	r3, #3
 800c62e:	b29b      	uxth	r3, r3
 800c630:	f023 0303 	bic.w	r3, r3, #3
 800c634:	b29b      	uxth	r3, r3
 800c636:	4413      	add	r3, r2
 800c638:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800c63a:	8b3b      	ldrh	r3, [r7, #24]
 800c63c:	3310      	adds	r3, #16
 800c63e:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800c640:	8b3a      	ldrh	r2, [r7, #24]
 800c642:	88bb      	ldrh	r3, [r7, #4]
 800c644:	3303      	adds	r3, #3
 800c646:	f023 0303 	bic.w	r3, r3, #3
 800c64a:	429a      	cmp	r2, r3
 800c64c:	d306      	bcc.n	800c65c <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800c64e:	8afa      	ldrh	r2, [r7, #22]
 800c650:	88bb      	ldrh	r3, [r7, #4]
 800c652:	3303      	adds	r3, #3
 800c654:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800c658:	429a      	cmp	r2, r3
 800c65a:	d201      	bcs.n	800c660 <pbuf_alloc+0x160>
        return NULL;
 800c65c:	2300      	movs	r3, #0
 800c65e:	e035      	b.n	800c6cc <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800c660:	8afb      	ldrh	r3, [r7, #22]
 800c662:	4618      	mov	r0, r3
 800c664:	f7ff f972 	bl	800b94c <mem_malloc>
 800c668:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 800c66a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d101      	bne.n	800c674 <pbuf_alloc+0x174>
        return NULL;
 800c670:	2300      	movs	r3, #0
 800c672:	e02b      	b.n	800c6cc <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800c674:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c676:	3310      	adds	r3, #16
 800c678:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c67a:	4413      	add	r3, r2
 800c67c:	3303      	adds	r3, #3
 800c67e:	f023 0303 	bic.w	r3, r3, #3
 800c682:	4618      	mov	r0, r3
 800c684:	88b9      	ldrh	r1, [r7, #4]
 800c686:	88ba      	ldrh	r2, [r7, #4]
 800c688:	2300      	movs	r3, #0
 800c68a:	9301      	str	r3, [sp, #4]
 800c68c:	887b      	ldrh	r3, [r7, #2]
 800c68e:	9300      	str	r3, [sp, #0]
 800c690:	460b      	mov	r3, r1
 800c692:	4601      	mov	r1, r0
 800c694:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c696:	f7ff ff09 	bl	800c4ac <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800c69a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c69c:	685b      	ldr	r3, [r3, #4]
 800c69e:	f003 0303 	and.w	r3, r3, #3
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d010      	beq.n	800c6c8 <pbuf_alloc+0x1c8>
 800c6a6:	4b0b      	ldr	r3, [pc, #44]	@ (800c6d4 <pbuf_alloc+0x1d4>)
 800c6a8:	f44f 7291 	mov.w	r2, #290	@ 0x122
 800c6ac:	490d      	ldr	r1, [pc, #52]	@ (800c6e4 <pbuf_alloc+0x1e4>)
 800c6ae:	480b      	ldr	r0, [pc, #44]	@ (800c6dc <pbuf_alloc+0x1dc>)
 800c6b0:	f009 ff76 	bl	80165a0 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800c6b4:	e008      	b.n	800c6c8 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800c6b6:	4b07      	ldr	r3, [pc, #28]	@ (800c6d4 <pbuf_alloc+0x1d4>)
 800c6b8:	f240 1227 	movw	r2, #295	@ 0x127
 800c6bc:	490a      	ldr	r1, [pc, #40]	@ (800c6e8 <pbuf_alloc+0x1e8>)
 800c6be:	4807      	ldr	r0, [pc, #28]	@ (800c6dc <pbuf_alloc+0x1dc>)
 800c6c0:	f009 ff6e 	bl	80165a0 <iprintf>
      return NULL;
 800c6c4:	2300      	movs	r3, #0
 800c6c6:	e001      	b.n	800c6cc <pbuf_alloc+0x1cc>
      break;
 800c6c8:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800c6ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800c6cc:	4618      	mov	r0, r3
 800c6ce:	3728      	adds	r7, #40	@ 0x28
 800c6d0:	46bd      	mov	sp, r7
 800c6d2:	bd80      	pop	{r7, pc}
 800c6d4:	08018be8 	.word	0x08018be8
 800c6d8:	08018c18 	.word	0x08018c18
 800c6dc:	08018c48 	.word	0x08018c48
 800c6e0:	08018c70 	.word	0x08018c70
 800c6e4:	08018ca4 	.word	0x08018ca4
 800c6e8:	08018cd0 	.word	0x08018cd0

0800c6ec <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800c6ec:	b580      	push	{r7, lr}
 800c6ee:	b086      	sub	sp, #24
 800c6f0:	af02      	add	r7, sp, #8
 800c6f2:	6078      	str	r0, [r7, #4]
 800c6f4:	460b      	mov	r3, r1
 800c6f6:	807b      	strh	r3, [r7, #2]
 800c6f8:	4613      	mov	r3, r2
 800c6fa:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800c6fc:	883b      	ldrh	r3, [r7, #0]
 800c6fe:	2b41      	cmp	r3, #65	@ 0x41
 800c700:	d009      	beq.n	800c716 <pbuf_alloc_reference+0x2a>
 800c702:	883b      	ldrh	r3, [r7, #0]
 800c704:	2b01      	cmp	r3, #1
 800c706:	d006      	beq.n	800c716 <pbuf_alloc_reference+0x2a>
 800c708:	4b0f      	ldr	r3, [pc, #60]	@ (800c748 <pbuf_alloc_reference+0x5c>)
 800c70a:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 800c70e:	490f      	ldr	r1, [pc, #60]	@ (800c74c <pbuf_alloc_reference+0x60>)
 800c710:	480f      	ldr	r0, [pc, #60]	@ (800c750 <pbuf_alloc_reference+0x64>)
 800c712:	f009 ff45 	bl	80165a0 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800c716:	200b      	movs	r0, #11
 800c718:	f7ff fabc 	bl	800bc94 <memp_malloc>
 800c71c:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800c71e:	68fb      	ldr	r3, [r7, #12]
 800c720:	2b00      	cmp	r3, #0
 800c722:	d101      	bne.n	800c728 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800c724:	2300      	movs	r3, #0
 800c726:	e00b      	b.n	800c740 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800c728:	8879      	ldrh	r1, [r7, #2]
 800c72a:	887a      	ldrh	r2, [r7, #2]
 800c72c:	2300      	movs	r3, #0
 800c72e:	9301      	str	r3, [sp, #4]
 800c730:	883b      	ldrh	r3, [r7, #0]
 800c732:	9300      	str	r3, [sp, #0]
 800c734:	460b      	mov	r3, r1
 800c736:	6879      	ldr	r1, [r7, #4]
 800c738:	68f8      	ldr	r0, [r7, #12]
 800c73a:	f7ff feb7 	bl	800c4ac <pbuf_init_alloced_pbuf>
  return p;
 800c73e:	68fb      	ldr	r3, [r7, #12]
}
 800c740:	4618      	mov	r0, r3
 800c742:	3710      	adds	r7, #16
 800c744:	46bd      	mov	sp, r7
 800c746:	bd80      	pop	{r7, pc}
 800c748:	08018be8 	.word	0x08018be8
 800c74c:	08018cec 	.word	0x08018cec
 800c750:	08018c48 	.word	0x08018c48

0800c754 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800c754:	b580      	push	{r7, lr}
 800c756:	b088      	sub	sp, #32
 800c758:	af02      	add	r7, sp, #8
 800c75a:	607b      	str	r3, [r7, #4]
 800c75c:	4603      	mov	r3, r0
 800c75e:	73fb      	strb	r3, [r7, #15]
 800c760:	460b      	mov	r3, r1
 800c762:	81bb      	strh	r3, [r7, #12]
 800c764:	4613      	mov	r3, r2
 800c766:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800c768:	7bfb      	ldrb	r3, [r7, #15]
 800c76a:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800c76c:	8a7b      	ldrh	r3, [r7, #18]
 800c76e:	3303      	adds	r3, #3
 800c770:	f023 0203 	bic.w	r2, r3, #3
 800c774:	89bb      	ldrh	r3, [r7, #12]
 800c776:	441a      	add	r2, r3
 800c778:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c77a:	429a      	cmp	r2, r3
 800c77c:	d901      	bls.n	800c782 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800c77e:	2300      	movs	r3, #0
 800c780:	e018      	b.n	800c7b4 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800c782:	6a3b      	ldr	r3, [r7, #32]
 800c784:	2b00      	cmp	r3, #0
 800c786:	d007      	beq.n	800c798 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800c788:	8a7b      	ldrh	r3, [r7, #18]
 800c78a:	3303      	adds	r3, #3
 800c78c:	f023 0303 	bic.w	r3, r3, #3
 800c790:	6a3a      	ldr	r2, [r7, #32]
 800c792:	4413      	add	r3, r2
 800c794:	617b      	str	r3, [r7, #20]
 800c796:	e001      	b.n	800c79c <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800c798:	2300      	movs	r3, #0
 800c79a:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800c79c:	6878      	ldr	r0, [r7, #4]
 800c79e:	89b9      	ldrh	r1, [r7, #12]
 800c7a0:	89ba      	ldrh	r2, [r7, #12]
 800c7a2:	2302      	movs	r3, #2
 800c7a4:	9301      	str	r3, [sp, #4]
 800c7a6:	897b      	ldrh	r3, [r7, #10]
 800c7a8:	9300      	str	r3, [sp, #0]
 800c7aa:	460b      	mov	r3, r1
 800c7ac:	6979      	ldr	r1, [r7, #20]
 800c7ae:	f7ff fe7d 	bl	800c4ac <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800c7b2:	687b      	ldr	r3, [r7, #4]
}
 800c7b4:	4618      	mov	r0, r3
 800c7b6:	3718      	adds	r7, #24
 800c7b8:	46bd      	mov	sp, r7
 800c7ba:	bd80      	pop	{r7, pc}

0800c7bc <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800c7bc:	b580      	push	{r7, lr}
 800c7be:	b084      	sub	sp, #16
 800c7c0:	af00      	add	r7, sp, #0
 800c7c2:	6078      	str	r0, [r7, #4]
 800c7c4:	460b      	mov	r3, r1
 800c7c6:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d106      	bne.n	800c7dc <pbuf_realloc+0x20>
 800c7ce:	4b3a      	ldr	r3, [pc, #232]	@ (800c8b8 <pbuf_realloc+0xfc>)
 800c7d0:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 800c7d4:	4939      	ldr	r1, [pc, #228]	@ (800c8bc <pbuf_realloc+0x100>)
 800c7d6:	483a      	ldr	r0, [pc, #232]	@ (800c8c0 <pbuf_realloc+0x104>)
 800c7d8:	f009 fee2 	bl	80165a0 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	891b      	ldrh	r3, [r3, #8]
 800c7e0:	887a      	ldrh	r2, [r7, #2]
 800c7e2:	429a      	cmp	r2, r3
 800c7e4:	d263      	bcs.n	800c8ae <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	891a      	ldrh	r2, [r3, #8]
 800c7ea:	887b      	ldrh	r3, [r7, #2]
 800c7ec:	1ad3      	subs	r3, r2, r3
 800c7ee:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800c7f0:	887b      	ldrh	r3, [r7, #2]
 800c7f2:	817b      	strh	r3, [r7, #10]
  q = p;
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800c7f8:	e018      	b.n	800c82c <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800c7fa:	68fb      	ldr	r3, [r7, #12]
 800c7fc:	895b      	ldrh	r3, [r3, #10]
 800c7fe:	897a      	ldrh	r2, [r7, #10]
 800c800:	1ad3      	subs	r3, r2, r3
 800c802:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800c804:	68fb      	ldr	r3, [r7, #12]
 800c806:	891a      	ldrh	r2, [r3, #8]
 800c808:	893b      	ldrh	r3, [r7, #8]
 800c80a:	1ad3      	subs	r3, r2, r3
 800c80c:	b29a      	uxth	r2, r3
 800c80e:	68fb      	ldr	r3, [r7, #12]
 800c810:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800c812:	68fb      	ldr	r3, [r7, #12]
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800c818:	68fb      	ldr	r3, [r7, #12]
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d106      	bne.n	800c82c <pbuf_realloc+0x70>
 800c81e:	4b26      	ldr	r3, [pc, #152]	@ (800c8b8 <pbuf_realloc+0xfc>)
 800c820:	f240 12af 	movw	r2, #431	@ 0x1af
 800c824:	4927      	ldr	r1, [pc, #156]	@ (800c8c4 <pbuf_realloc+0x108>)
 800c826:	4826      	ldr	r0, [pc, #152]	@ (800c8c0 <pbuf_realloc+0x104>)
 800c828:	f009 feba 	bl	80165a0 <iprintf>
  while (rem_len > q->len) {
 800c82c:	68fb      	ldr	r3, [r7, #12]
 800c82e:	895b      	ldrh	r3, [r3, #10]
 800c830:	897a      	ldrh	r2, [r7, #10]
 800c832:	429a      	cmp	r2, r3
 800c834:	d8e1      	bhi.n	800c7fa <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800c836:	68fb      	ldr	r3, [r7, #12]
 800c838:	7b1b      	ldrb	r3, [r3, #12]
 800c83a:	f003 030f 	and.w	r3, r3, #15
 800c83e:	2b00      	cmp	r3, #0
 800c840:	d121      	bne.n	800c886 <pbuf_realloc+0xca>
 800c842:	68fb      	ldr	r3, [r7, #12]
 800c844:	895b      	ldrh	r3, [r3, #10]
 800c846:	897a      	ldrh	r2, [r7, #10]
 800c848:	429a      	cmp	r2, r3
 800c84a:	d01c      	beq.n	800c886 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800c84c:	68fb      	ldr	r3, [r7, #12]
 800c84e:	7b5b      	ldrb	r3, [r3, #13]
 800c850:	f003 0302 	and.w	r3, r3, #2
 800c854:	2b00      	cmp	r3, #0
 800c856:	d116      	bne.n	800c886 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	685a      	ldr	r2, [r3, #4]
 800c85c:	68fb      	ldr	r3, [r7, #12]
 800c85e:	1ad3      	subs	r3, r2, r3
 800c860:	b29a      	uxth	r2, r3
 800c862:	897b      	ldrh	r3, [r7, #10]
 800c864:	4413      	add	r3, r2
 800c866:	b29b      	uxth	r3, r3
 800c868:	4619      	mov	r1, r3
 800c86a:	68f8      	ldr	r0, [r7, #12]
 800c86c:	f7fe ff64 	bl	800b738 <mem_trim>
 800c870:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	2b00      	cmp	r3, #0
 800c876:	d106      	bne.n	800c886 <pbuf_realloc+0xca>
 800c878:	4b0f      	ldr	r3, [pc, #60]	@ (800c8b8 <pbuf_realloc+0xfc>)
 800c87a:	f240 12bd 	movw	r2, #445	@ 0x1bd
 800c87e:	4912      	ldr	r1, [pc, #72]	@ (800c8c8 <pbuf_realloc+0x10c>)
 800c880:	480f      	ldr	r0, [pc, #60]	@ (800c8c0 <pbuf_realloc+0x104>)
 800c882:	f009 fe8d 	bl	80165a0 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	897a      	ldrh	r2, [r7, #10]
 800c88a:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	895a      	ldrh	r2, [r3, #10]
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800c894:	68fb      	ldr	r3, [r7, #12]
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d004      	beq.n	800c8a6 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	4618      	mov	r0, r3
 800c8a2:	f000 f911 	bl	800cac8 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800c8a6:	68fb      	ldr	r3, [r7, #12]
 800c8a8:	2200      	movs	r2, #0
 800c8aa:	601a      	str	r2, [r3, #0]
 800c8ac:	e000      	b.n	800c8b0 <pbuf_realloc+0xf4>
    return;
 800c8ae:	bf00      	nop

}
 800c8b0:	3710      	adds	r7, #16
 800c8b2:	46bd      	mov	sp, r7
 800c8b4:	bd80      	pop	{r7, pc}
 800c8b6:	bf00      	nop
 800c8b8:	08018be8 	.word	0x08018be8
 800c8bc:	08018d00 	.word	0x08018d00
 800c8c0:	08018c48 	.word	0x08018c48
 800c8c4:	08018d18 	.word	0x08018d18
 800c8c8:	08018d30 	.word	0x08018d30

0800c8cc <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800c8cc:	b580      	push	{r7, lr}
 800c8ce:	b086      	sub	sp, #24
 800c8d0:	af00      	add	r7, sp, #0
 800c8d2:	60f8      	str	r0, [r7, #12]
 800c8d4:	60b9      	str	r1, [r7, #8]
 800c8d6:	4613      	mov	r3, r2
 800c8d8:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800c8da:	68fb      	ldr	r3, [r7, #12]
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	d106      	bne.n	800c8ee <pbuf_add_header_impl+0x22>
 800c8e0:	4b2b      	ldr	r3, [pc, #172]	@ (800c990 <pbuf_add_header_impl+0xc4>)
 800c8e2:	f240 12df 	movw	r2, #479	@ 0x1df
 800c8e6:	492b      	ldr	r1, [pc, #172]	@ (800c994 <pbuf_add_header_impl+0xc8>)
 800c8e8:	482b      	ldr	r0, [pc, #172]	@ (800c998 <pbuf_add_header_impl+0xcc>)
 800c8ea:	f009 fe59 	bl	80165a0 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d003      	beq.n	800c8fc <pbuf_add_header_impl+0x30>
 800c8f4:	68bb      	ldr	r3, [r7, #8]
 800c8f6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c8fa:	d301      	bcc.n	800c900 <pbuf_add_header_impl+0x34>
    return 1;
 800c8fc:	2301      	movs	r3, #1
 800c8fe:	e043      	b.n	800c988 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800c900:	68bb      	ldr	r3, [r7, #8]
 800c902:	2b00      	cmp	r3, #0
 800c904:	d101      	bne.n	800c90a <pbuf_add_header_impl+0x3e>
    return 0;
 800c906:	2300      	movs	r3, #0
 800c908:	e03e      	b.n	800c988 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800c90a:	68bb      	ldr	r3, [r7, #8]
 800c90c:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800c90e:	68fb      	ldr	r3, [r7, #12]
 800c910:	891a      	ldrh	r2, [r3, #8]
 800c912:	8a7b      	ldrh	r3, [r7, #18]
 800c914:	4413      	add	r3, r2
 800c916:	b29b      	uxth	r3, r3
 800c918:	8a7a      	ldrh	r2, [r7, #18]
 800c91a:	429a      	cmp	r2, r3
 800c91c:	d901      	bls.n	800c922 <pbuf_add_header_impl+0x56>
    return 1;
 800c91e:	2301      	movs	r3, #1
 800c920:	e032      	b.n	800c988 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800c922:	68fb      	ldr	r3, [r7, #12]
 800c924:	7b1b      	ldrb	r3, [r3, #12]
 800c926:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800c928:	8a3b      	ldrh	r3, [r7, #16]
 800c92a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d00c      	beq.n	800c94c <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800c932:	68fb      	ldr	r3, [r7, #12]
 800c934:	685a      	ldr	r2, [r3, #4]
 800c936:	68bb      	ldr	r3, [r7, #8]
 800c938:	425b      	negs	r3, r3
 800c93a:	4413      	add	r3, r2
 800c93c:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800c93e:	68fb      	ldr	r3, [r7, #12]
 800c940:	3310      	adds	r3, #16
 800c942:	697a      	ldr	r2, [r7, #20]
 800c944:	429a      	cmp	r2, r3
 800c946:	d20d      	bcs.n	800c964 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800c948:	2301      	movs	r3, #1
 800c94a:	e01d      	b.n	800c988 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800c94c:	79fb      	ldrb	r3, [r7, #7]
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d006      	beq.n	800c960 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800c952:	68fb      	ldr	r3, [r7, #12]
 800c954:	685a      	ldr	r2, [r3, #4]
 800c956:	68bb      	ldr	r3, [r7, #8]
 800c958:	425b      	negs	r3, r3
 800c95a:	4413      	add	r3, r2
 800c95c:	617b      	str	r3, [r7, #20]
 800c95e:	e001      	b.n	800c964 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800c960:	2301      	movs	r3, #1
 800c962:	e011      	b.n	800c988 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	697a      	ldr	r2, [r7, #20]
 800c968:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	895a      	ldrh	r2, [r3, #10]
 800c96e:	8a7b      	ldrh	r3, [r7, #18]
 800c970:	4413      	add	r3, r2
 800c972:	b29a      	uxth	r2, r3
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800c978:	68fb      	ldr	r3, [r7, #12]
 800c97a:	891a      	ldrh	r2, [r3, #8]
 800c97c:	8a7b      	ldrh	r3, [r7, #18]
 800c97e:	4413      	add	r3, r2
 800c980:	b29a      	uxth	r2, r3
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	811a      	strh	r2, [r3, #8]


  return 0;
 800c986:	2300      	movs	r3, #0
}
 800c988:	4618      	mov	r0, r3
 800c98a:	3718      	adds	r7, #24
 800c98c:	46bd      	mov	sp, r7
 800c98e:	bd80      	pop	{r7, pc}
 800c990:	08018be8 	.word	0x08018be8
 800c994:	08018d4c 	.word	0x08018d4c
 800c998:	08018c48 	.word	0x08018c48

0800c99c <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800c99c:	b580      	push	{r7, lr}
 800c99e:	b082      	sub	sp, #8
 800c9a0:	af00      	add	r7, sp, #0
 800c9a2:	6078      	str	r0, [r7, #4]
 800c9a4:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800c9a6:	2200      	movs	r2, #0
 800c9a8:	6839      	ldr	r1, [r7, #0]
 800c9aa:	6878      	ldr	r0, [r7, #4]
 800c9ac:	f7ff ff8e 	bl	800c8cc <pbuf_add_header_impl>
 800c9b0:	4603      	mov	r3, r0
}
 800c9b2:	4618      	mov	r0, r3
 800c9b4:	3708      	adds	r7, #8
 800c9b6:	46bd      	mov	sp, r7
 800c9b8:	bd80      	pop	{r7, pc}
	...

0800c9bc <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800c9bc:	b580      	push	{r7, lr}
 800c9be:	b084      	sub	sp, #16
 800c9c0:	af00      	add	r7, sp, #0
 800c9c2:	6078      	str	r0, [r7, #4]
 800c9c4:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d106      	bne.n	800c9da <pbuf_remove_header+0x1e>
 800c9cc:	4b20      	ldr	r3, [pc, #128]	@ (800ca50 <pbuf_remove_header+0x94>)
 800c9ce:	f240 224b 	movw	r2, #587	@ 0x24b
 800c9d2:	4920      	ldr	r1, [pc, #128]	@ (800ca54 <pbuf_remove_header+0x98>)
 800c9d4:	4820      	ldr	r0, [pc, #128]	@ (800ca58 <pbuf_remove_header+0x9c>)
 800c9d6:	f009 fde3 	bl	80165a0 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	d003      	beq.n	800c9e8 <pbuf_remove_header+0x2c>
 800c9e0:	683b      	ldr	r3, [r7, #0]
 800c9e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c9e6:	d301      	bcc.n	800c9ec <pbuf_remove_header+0x30>
    return 1;
 800c9e8:	2301      	movs	r3, #1
 800c9ea:	e02c      	b.n	800ca46 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800c9ec:	683b      	ldr	r3, [r7, #0]
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	d101      	bne.n	800c9f6 <pbuf_remove_header+0x3a>
    return 0;
 800c9f2:	2300      	movs	r3, #0
 800c9f4:	e027      	b.n	800ca46 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800c9f6:	683b      	ldr	r3, [r7, #0]
 800c9f8:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	895b      	ldrh	r3, [r3, #10]
 800c9fe:	89fa      	ldrh	r2, [r7, #14]
 800ca00:	429a      	cmp	r2, r3
 800ca02:	d908      	bls.n	800ca16 <pbuf_remove_header+0x5a>
 800ca04:	4b12      	ldr	r3, [pc, #72]	@ (800ca50 <pbuf_remove_header+0x94>)
 800ca06:	f240 2255 	movw	r2, #597	@ 0x255
 800ca0a:	4914      	ldr	r1, [pc, #80]	@ (800ca5c <pbuf_remove_header+0xa0>)
 800ca0c:	4812      	ldr	r0, [pc, #72]	@ (800ca58 <pbuf_remove_header+0x9c>)
 800ca0e:	f009 fdc7 	bl	80165a0 <iprintf>
 800ca12:	2301      	movs	r3, #1
 800ca14:	e017      	b.n	800ca46 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	685b      	ldr	r3, [r3, #4]
 800ca1a:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	685a      	ldr	r2, [r3, #4]
 800ca20:	683b      	ldr	r3, [r7, #0]
 800ca22:	441a      	add	r2, r3
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	895a      	ldrh	r2, [r3, #10]
 800ca2c:	89fb      	ldrh	r3, [r7, #14]
 800ca2e:	1ad3      	subs	r3, r2, r3
 800ca30:	b29a      	uxth	r2, r3
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	891a      	ldrh	r2, [r3, #8]
 800ca3a:	89fb      	ldrh	r3, [r7, #14]
 800ca3c:	1ad3      	subs	r3, r2, r3
 800ca3e:	b29a      	uxth	r2, r3
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800ca44:	2300      	movs	r3, #0
}
 800ca46:	4618      	mov	r0, r3
 800ca48:	3710      	adds	r7, #16
 800ca4a:	46bd      	mov	sp, r7
 800ca4c:	bd80      	pop	{r7, pc}
 800ca4e:	bf00      	nop
 800ca50:	08018be8 	.word	0x08018be8
 800ca54:	08018d4c 	.word	0x08018d4c
 800ca58:	08018c48 	.word	0x08018c48
 800ca5c:	08018d58 	.word	0x08018d58

0800ca60 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800ca60:	b580      	push	{r7, lr}
 800ca62:	b082      	sub	sp, #8
 800ca64:	af00      	add	r7, sp, #0
 800ca66:	6078      	str	r0, [r7, #4]
 800ca68:	460b      	mov	r3, r1
 800ca6a:	807b      	strh	r3, [r7, #2]
 800ca6c:	4613      	mov	r3, r2
 800ca6e:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800ca70:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	da08      	bge.n	800ca8a <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800ca78:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ca7c:	425b      	negs	r3, r3
 800ca7e:	4619      	mov	r1, r3
 800ca80:	6878      	ldr	r0, [r7, #4]
 800ca82:	f7ff ff9b 	bl	800c9bc <pbuf_remove_header>
 800ca86:	4603      	mov	r3, r0
 800ca88:	e007      	b.n	800ca9a <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800ca8a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ca8e:	787a      	ldrb	r2, [r7, #1]
 800ca90:	4619      	mov	r1, r3
 800ca92:	6878      	ldr	r0, [r7, #4]
 800ca94:	f7ff ff1a 	bl	800c8cc <pbuf_add_header_impl>
 800ca98:	4603      	mov	r3, r0
  }
}
 800ca9a:	4618      	mov	r0, r3
 800ca9c:	3708      	adds	r7, #8
 800ca9e:	46bd      	mov	sp, r7
 800caa0:	bd80      	pop	{r7, pc}

0800caa2 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800caa2:	b580      	push	{r7, lr}
 800caa4:	b082      	sub	sp, #8
 800caa6:	af00      	add	r7, sp, #0
 800caa8:	6078      	str	r0, [r7, #4]
 800caaa:	460b      	mov	r3, r1
 800caac:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800caae:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800cab2:	2201      	movs	r2, #1
 800cab4:	4619      	mov	r1, r3
 800cab6:	6878      	ldr	r0, [r7, #4]
 800cab8:	f7ff ffd2 	bl	800ca60 <pbuf_header_impl>
 800cabc:	4603      	mov	r3, r0
}
 800cabe:	4618      	mov	r0, r3
 800cac0:	3708      	adds	r7, #8
 800cac2:	46bd      	mov	sp, r7
 800cac4:	bd80      	pop	{r7, pc}
	...

0800cac8 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800cac8:	b580      	push	{r7, lr}
 800caca:	b088      	sub	sp, #32
 800cacc:	af00      	add	r7, sp, #0
 800cace:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	d10b      	bne.n	800caee <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d106      	bne.n	800caea <pbuf_free+0x22>
 800cadc:	4b3b      	ldr	r3, [pc, #236]	@ (800cbcc <pbuf_free+0x104>)
 800cade:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 800cae2:	493b      	ldr	r1, [pc, #236]	@ (800cbd0 <pbuf_free+0x108>)
 800cae4:	483b      	ldr	r0, [pc, #236]	@ (800cbd4 <pbuf_free+0x10c>)
 800cae6:	f009 fd5b 	bl	80165a0 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800caea:	2300      	movs	r3, #0
 800caec:	e069      	b.n	800cbc2 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800caee:	2300      	movs	r3, #0
 800caf0:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800caf2:	e062      	b.n	800cbba <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800caf4:	f009 fc36 	bl	8016364 <sys_arch_protect>
 800caf8:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	7b9b      	ldrb	r3, [r3, #14]
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	d106      	bne.n	800cb10 <pbuf_free+0x48>
 800cb02:	4b32      	ldr	r3, [pc, #200]	@ (800cbcc <pbuf_free+0x104>)
 800cb04:	f240 22f1 	movw	r2, #753	@ 0x2f1
 800cb08:	4933      	ldr	r1, [pc, #204]	@ (800cbd8 <pbuf_free+0x110>)
 800cb0a:	4832      	ldr	r0, [pc, #200]	@ (800cbd4 <pbuf_free+0x10c>)
 800cb0c:	f009 fd48 	bl	80165a0 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	7b9b      	ldrb	r3, [r3, #14]
 800cb14:	3b01      	subs	r3, #1
 800cb16:	b2da      	uxtb	r2, r3
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	739a      	strb	r2, [r3, #14]
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	7b9b      	ldrb	r3, [r3, #14]
 800cb20:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800cb22:	69b8      	ldr	r0, [r7, #24]
 800cb24:	f009 fc2c 	bl	8016380 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800cb28:	7dfb      	ldrb	r3, [r7, #23]
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	d143      	bne.n	800cbb6 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	7b1b      	ldrb	r3, [r3, #12]
 800cb38:	f003 030f 	and.w	r3, r3, #15
 800cb3c:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	7b5b      	ldrb	r3, [r3, #13]
 800cb42:	f003 0302 	and.w	r3, r3, #2
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	d011      	beq.n	800cb6e <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800cb4e:	68bb      	ldr	r3, [r7, #8]
 800cb50:	691b      	ldr	r3, [r3, #16]
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d106      	bne.n	800cb64 <pbuf_free+0x9c>
 800cb56:	4b1d      	ldr	r3, [pc, #116]	@ (800cbcc <pbuf_free+0x104>)
 800cb58:	f240 22ff 	movw	r2, #767	@ 0x2ff
 800cb5c:	491f      	ldr	r1, [pc, #124]	@ (800cbdc <pbuf_free+0x114>)
 800cb5e:	481d      	ldr	r0, [pc, #116]	@ (800cbd4 <pbuf_free+0x10c>)
 800cb60:	f009 fd1e 	bl	80165a0 <iprintf>
        pc->custom_free_function(p);
 800cb64:	68bb      	ldr	r3, [r7, #8]
 800cb66:	691b      	ldr	r3, [r3, #16]
 800cb68:	6878      	ldr	r0, [r7, #4]
 800cb6a:	4798      	blx	r3
 800cb6c:	e01d      	b.n	800cbaa <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800cb6e:	7bfb      	ldrb	r3, [r7, #15]
 800cb70:	2b02      	cmp	r3, #2
 800cb72:	d104      	bne.n	800cb7e <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800cb74:	6879      	ldr	r1, [r7, #4]
 800cb76:	200c      	movs	r0, #12
 800cb78:	f7ff f902 	bl	800bd80 <memp_free>
 800cb7c:	e015      	b.n	800cbaa <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800cb7e:	7bfb      	ldrb	r3, [r7, #15]
 800cb80:	2b01      	cmp	r3, #1
 800cb82:	d104      	bne.n	800cb8e <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800cb84:	6879      	ldr	r1, [r7, #4]
 800cb86:	200b      	movs	r0, #11
 800cb88:	f7ff f8fa 	bl	800bd80 <memp_free>
 800cb8c:	e00d      	b.n	800cbaa <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800cb8e:	7bfb      	ldrb	r3, [r7, #15]
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	d103      	bne.n	800cb9c <pbuf_free+0xd4>
          mem_free(p);
 800cb94:	6878      	ldr	r0, [r7, #4]
 800cb96:	f7fe fd3f 	bl	800b618 <mem_free>
 800cb9a:	e006      	b.n	800cbaa <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800cb9c:	4b0b      	ldr	r3, [pc, #44]	@ (800cbcc <pbuf_free+0x104>)
 800cb9e:	f240 320f 	movw	r2, #783	@ 0x30f
 800cba2:	490f      	ldr	r1, [pc, #60]	@ (800cbe0 <pbuf_free+0x118>)
 800cba4:	480b      	ldr	r0, [pc, #44]	@ (800cbd4 <pbuf_free+0x10c>)
 800cba6:	f009 fcfb 	bl	80165a0 <iprintf>
        }
      }
      count++;
 800cbaa:	7ffb      	ldrb	r3, [r7, #31]
 800cbac:	3301      	adds	r3, #1
 800cbae:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800cbb0:	693b      	ldr	r3, [r7, #16]
 800cbb2:	607b      	str	r3, [r7, #4]
 800cbb4:	e001      	b.n	800cbba <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800cbb6:	2300      	movs	r3, #0
 800cbb8:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d199      	bne.n	800caf4 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800cbc0:	7ffb      	ldrb	r3, [r7, #31]
}
 800cbc2:	4618      	mov	r0, r3
 800cbc4:	3720      	adds	r7, #32
 800cbc6:	46bd      	mov	sp, r7
 800cbc8:	bd80      	pop	{r7, pc}
 800cbca:	bf00      	nop
 800cbcc:	08018be8 	.word	0x08018be8
 800cbd0:	08018d4c 	.word	0x08018d4c
 800cbd4:	08018c48 	.word	0x08018c48
 800cbd8:	08018d78 	.word	0x08018d78
 800cbdc:	08018d90 	.word	0x08018d90
 800cbe0:	08018db4 	.word	0x08018db4

0800cbe4 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800cbe4:	b480      	push	{r7}
 800cbe6:	b085      	sub	sp, #20
 800cbe8:	af00      	add	r7, sp, #0
 800cbea:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800cbec:	2300      	movs	r3, #0
 800cbee:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800cbf0:	e005      	b.n	800cbfe <pbuf_clen+0x1a>
    ++len;
 800cbf2:	89fb      	ldrh	r3, [r7, #14]
 800cbf4:	3301      	adds	r3, #1
 800cbf6:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	d1f6      	bne.n	800cbf2 <pbuf_clen+0xe>
  }
  return len;
 800cc04:	89fb      	ldrh	r3, [r7, #14]
}
 800cc06:	4618      	mov	r0, r3
 800cc08:	3714      	adds	r7, #20
 800cc0a:	46bd      	mov	sp, r7
 800cc0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc10:	4770      	bx	lr
	...

0800cc14 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800cc14:	b580      	push	{r7, lr}
 800cc16:	b084      	sub	sp, #16
 800cc18:	af00      	add	r7, sp, #0
 800cc1a:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d016      	beq.n	800cc50 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800cc22:	f009 fb9f 	bl	8016364 <sys_arch_protect>
 800cc26:	60f8      	str	r0, [r7, #12]
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	7b9b      	ldrb	r3, [r3, #14]
 800cc2c:	3301      	adds	r3, #1
 800cc2e:	b2da      	uxtb	r2, r3
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	739a      	strb	r2, [r3, #14]
 800cc34:	68f8      	ldr	r0, [r7, #12]
 800cc36:	f009 fba3 	bl	8016380 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	7b9b      	ldrb	r3, [r3, #14]
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d106      	bne.n	800cc50 <pbuf_ref+0x3c>
 800cc42:	4b05      	ldr	r3, [pc, #20]	@ (800cc58 <pbuf_ref+0x44>)
 800cc44:	f240 3242 	movw	r2, #834	@ 0x342
 800cc48:	4904      	ldr	r1, [pc, #16]	@ (800cc5c <pbuf_ref+0x48>)
 800cc4a:	4805      	ldr	r0, [pc, #20]	@ (800cc60 <pbuf_ref+0x4c>)
 800cc4c:	f009 fca8 	bl	80165a0 <iprintf>
  }
}
 800cc50:	bf00      	nop
 800cc52:	3710      	adds	r7, #16
 800cc54:	46bd      	mov	sp, r7
 800cc56:	bd80      	pop	{r7, pc}
 800cc58:	08018be8 	.word	0x08018be8
 800cc5c:	08018dc8 	.word	0x08018dc8
 800cc60:	08018c48 	.word	0x08018c48

0800cc64 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800cc64:	b580      	push	{r7, lr}
 800cc66:	b084      	sub	sp, #16
 800cc68:	af00      	add	r7, sp, #0
 800cc6a:	6078      	str	r0, [r7, #4]
 800cc6c:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	d002      	beq.n	800cc7a <pbuf_cat+0x16>
 800cc74:	683b      	ldr	r3, [r7, #0]
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	d107      	bne.n	800cc8a <pbuf_cat+0x26>
 800cc7a:	4b20      	ldr	r3, [pc, #128]	@ (800ccfc <pbuf_cat+0x98>)
 800cc7c:	f240 3259 	movw	r2, #857	@ 0x359
 800cc80:	491f      	ldr	r1, [pc, #124]	@ (800cd00 <pbuf_cat+0x9c>)
 800cc82:	4820      	ldr	r0, [pc, #128]	@ (800cd04 <pbuf_cat+0xa0>)
 800cc84:	f009 fc8c 	bl	80165a0 <iprintf>
 800cc88:	e034      	b.n	800ccf4 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	60fb      	str	r3, [r7, #12]
 800cc8e:	e00a      	b.n	800cca6 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800cc90:	68fb      	ldr	r3, [r7, #12]
 800cc92:	891a      	ldrh	r2, [r3, #8]
 800cc94:	683b      	ldr	r3, [r7, #0]
 800cc96:	891b      	ldrh	r3, [r3, #8]
 800cc98:	4413      	add	r3, r2
 800cc9a:	b29a      	uxth	r2, r3
 800cc9c:	68fb      	ldr	r3, [r7, #12]
 800cc9e:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800cca0:	68fb      	ldr	r3, [r7, #12]
 800cca2:	681b      	ldr	r3, [r3, #0]
 800cca4:	60fb      	str	r3, [r7, #12]
 800cca6:	68fb      	ldr	r3, [r7, #12]
 800cca8:	681b      	ldr	r3, [r3, #0]
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	d1f0      	bne.n	800cc90 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800ccae:	68fb      	ldr	r3, [r7, #12]
 800ccb0:	891a      	ldrh	r2, [r3, #8]
 800ccb2:	68fb      	ldr	r3, [r7, #12]
 800ccb4:	895b      	ldrh	r3, [r3, #10]
 800ccb6:	429a      	cmp	r2, r3
 800ccb8:	d006      	beq.n	800ccc8 <pbuf_cat+0x64>
 800ccba:	4b10      	ldr	r3, [pc, #64]	@ (800ccfc <pbuf_cat+0x98>)
 800ccbc:	f240 3262 	movw	r2, #866	@ 0x362
 800ccc0:	4911      	ldr	r1, [pc, #68]	@ (800cd08 <pbuf_cat+0xa4>)
 800ccc2:	4810      	ldr	r0, [pc, #64]	@ (800cd04 <pbuf_cat+0xa0>)
 800ccc4:	f009 fc6c 	bl	80165a0 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800ccc8:	68fb      	ldr	r3, [r7, #12]
 800ccca:	681b      	ldr	r3, [r3, #0]
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d006      	beq.n	800ccde <pbuf_cat+0x7a>
 800ccd0:	4b0a      	ldr	r3, [pc, #40]	@ (800ccfc <pbuf_cat+0x98>)
 800ccd2:	f240 3263 	movw	r2, #867	@ 0x363
 800ccd6:	490d      	ldr	r1, [pc, #52]	@ (800cd0c <pbuf_cat+0xa8>)
 800ccd8:	480a      	ldr	r0, [pc, #40]	@ (800cd04 <pbuf_cat+0xa0>)
 800ccda:	f009 fc61 	bl	80165a0 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800ccde:	68fb      	ldr	r3, [r7, #12]
 800cce0:	891a      	ldrh	r2, [r3, #8]
 800cce2:	683b      	ldr	r3, [r7, #0]
 800cce4:	891b      	ldrh	r3, [r3, #8]
 800cce6:	4413      	add	r3, r2
 800cce8:	b29a      	uxth	r2, r3
 800ccea:	68fb      	ldr	r3, [r7, #12]
 800ccec:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800ccee:	68fb      	ldr	r3, [r7, #12]
 800ccf0:	683a      	ldr	r2, [r7, #0]
 800ccf2:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800ccf4:	3710      	adds	r7, #16
 800ccf6:	46bd      	mov	sp, r7
 800ccf8:	bd80      	pop	{r7, pc}
 800ccfa:	bf00      	nop
 800ccfc:	08018be8 	.word	0x08018be8
 800cd00:	08018ddc 	.word	0x08018ddc
 800cd04:	08018c48 	.word	0x08018c48
 800cd08:	08018e14 	.word	0x08018e14
 800cd0c:	08018e44 	.word	0x08018e44

0800cd10 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800cd10:	b580      	push	{r7, lr}
 800cd12:	b086      	sub	sp, #24
 800cd14:	af00      	add	r7, sp, #0
 800cd16:	6078      	str	r0, [r7, #4]
 800cd18:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800cd1a:	2300      	movs	r3, #0
 800cd1c:	617b      	str	r3, [r7, #20]
 800cd1e:	2300      	movs	r3, #0
 800cd20:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	d008      	beq.n	800cd3a <pbuf_copy+0x2a>
 800cd28:	683b      	ldr	r3, [r7, #0]
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	d005      	beq.n	800cd3a <pbuf_copy+0x2a>
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	891a      	ldrh	r2, [r3, #8]
 800cd32:	683b      	ldr	r3, [r7, #0]
 800cd34:	891b      	ldrh	r3, [r3, #8]
 800cd36:	429a      	cmp	r2, r3
 800cd38:	d209      	bcs.n	800cd4e <pbuf_copy+0x3e>
 800cd3a:	4b57      	ldr	r3, [pc, #348]	@ (800ce98 <pbuf_copy+0x188>)
 800cd3c:	f240 32c9 	movw	r2, #969	@ 0x3c9
 800cd40:	4956      	ldr	r1, [pc, #344]	@ (800ce9c <pbuf_copy+0x18c>)
 800cd42:	4857      	ldr	r0, [pc, #348]	@ (800cea0 <pbuf_copy+0x190>)
 800cd44:	f009 fc2c 	bl	80165a0 <iprintf>
 800cd48:	f06f 030f 	mvn.w	r3, #15
 800cd4c:	e09f      	b.n	800ce8e <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	895b      	ldrh	r3, [r3, #10]
 800cd52:	461a      	mov	r2, r3
 800cd54:	697b      	ldr	r3, [r7, #20]
 800cd56:	1ad2      	subs	r2, r2, r3
 800cd58:	683b      	ldr	r3, [r7, #0]
 800cd5a:	895b      	ldrh	r3, [r3, #10]
 800cd5c:	4619      	mov	r1, r3
 800cd5e:	693b      	ldr	r3, [r7, #16]
 800cd60:	1acb      	subs	r3, r1, r3
 800cd62:	429a      	cmp	r2, r3
 800cd64:	d306      	bcc.n	800cd74 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800cd66:	683b      	ldr	r3, [r7, #0]
 800cd68:	895b      	ldrh	r3, [r3, #10]
 800cd6a:	461a      	mov	r2, r3
 800cd6c:	693b      	ldr	r3, [r7, #16]
 800cd6e:	1ad3      	subs	r3, r2, r3
 800cd70:	60fb      	str	r3, [r7, #12]
 800cd72:	e005      	b.n	800cd80 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	895b      	ldrh	r3, [r3, #10]
 800cd78:	461a      	mov	r2, r3
 800cd7a:	697b      	ldr	r3, [r7, #20]
 800cd7c:	1ad3      	subs	r3, r2, r3
 800cd7e:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	685a      	ldr	r2, [r3, #4]
 800cd84:	697b      	ldr	r3, [r7, #20]
 800cd86:	18d0      	adds	r0, r2, r3
 800cd88:	683b      	ldr	r3, [r7, #0]
 800cd8a:	685a      	ldr	r2, [r3, #4]
 800cd8c:	693b      	ldr	r3, [r7, #16]
 800cd8e:	4413      	add	r3, r2
 800cd90:	68fa      	ldr	r2, [r7, #12]
 800cd92:	4619      	mov	r1, r3
 800cd94:	f009 fd6f 	bl	8016876 <memcpy>
    offset_to += len;
 800cd98:	697a      	ldr	r2, [r7, #20]
 800cd9a:	68fb      	ldr	r3, [r7, #12]
 800cd9c:	4413      	add	r3, r2
 800cd9e:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800cda0:	693a      	ldr	r2, [r7, #16]
 800cda2:	68fb      	ldr	r3, [r7, #12]
 800cda4:	4413      	add	r3, r2
 800cda6:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	895b      	ldrh	r3, [r3, #10]
 800cdac:	461a      	mov	r2, r3
 800cdae:	697b      	ldr	r3, [r7, #20]
 800cdb0:	4293      	cmp	r3, r2
 800cdb2:	d906      	bls.n	800cdc2 <pbuf_copy+0xb2>
 800cdb4:	4b38      	ldr	r3, [pc, #224]	@ (800ce98 <pbuf_copy+0x188>)
 800cdb6:	f240 32d9 	movw	r2, #985	@ 0x3d9
 800cdba:	493a      	ldr	r1, [pc, #232]	@ (800cea4 <pbuf_copy+0x194>)
 800cdbc:	4838      	ldr	r0, [pc, #224]	@ (800cea0 <pbuf_copy+0x190>)
 800cdbe:	f009 fbef 	bl	80165a0 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800cdc2:	683b      	ldr	r3, [r7, #0]
 800cdc4:	895b      	ldrh	r3, [r3, #10]
 800cdc6:	461a      	mov	r2, r3
 800cdc8:	693b      	ldr	r3, [r7, #16]
 800cdca:	4293      	cmp	r3, r2
 800cdcc:	d906      	bls.n	800cddc <pbuf_copy+0xcc>
 800cdce:	4b32      	ldr	r3, [pc, #200]	@ (800ce98 <pbuf_copy+0x188>)
 800cdd0:	f240 32da 	movw	r2, #986	@ 0x3da
 800cdd4:	4934      	ldr	r1, [pc, #208]	@ (800cea8 <pbuf_copy+0x198>)
 800cdd6:	4832      	ldr	r0, [pc, #200]	@ (800cea0 <pbuf_copy+0x190>)
 800cdd8:	f009 fbe2 	bl	80165a0 <iprintf>
    if (offset_from >= p_from->len) {
 800cddc:	683b      	ldr	r3, [r7, #0]
 800cdde:	895b      	ldrh	r3, [r3, #10]
 800cde0:	461a      	mov	r2, r3
 800cde2:	693b      	ldr	r3, [r7, #16]
 800cde4:	4293      	cmp	r3, r2
 800cde6:	d304      	bcc.n	800cdf2 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800cde8:	2300      	movs	r3, #0
 800cdea:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800cdec:	683b      	ldr	r3, [r7, #0]
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	895b      	ldrh	r3, [r3, #10]
 800cdf6:	461a      	mov	r2, r3
 800cdf8:	697b      	ldr	r3, [r7, #20]
 800cdfa:	4293      	cmp	r3, r2
 800cdfc:	d114      	bne.n	800ce28 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800cdfe:	2300      	movs	r3, #0
 800ce00:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	681b      	ldr	r3, [r3, #0]
 800ce06:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d10c      	bne.n	800ce28 <pbuf_copy+0x118>
 800ce0e:	683b      	ldr	r3, [r7, #0]
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d009      	beq.n	800ce28 <pbuf_copy+0x118>
 800ce14:	4b20      	ldr	r3, [pc, #128]	@ (800ce98 <pbuf_copy+0x188>)
 800ce16:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 800ce1a:	4924      	ldr	r1, [pc, #144]	@ (800ceac <pbuf_copy+0x19c>)
 800ce1c:	4820      	ldr	r0, [pc, #128]	@ (800cea0 <pbuf_copy+0x190>)
 800ce1e:	f009 fbbf 	bl	80165a0 <iprintf>
 800ce22:	f06f 030f 	mvn.w	r3, #15
 800ce26:	e032      	b.n	800ce8e <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800ce28:	683b      	ldr	r3, [r7, #0]
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d013      	beq.n	800ce56 <pbuf_copy+0x146>
 800ce2e:	683b      	ldr	r3, [r7, #0]
 800ce30:	895a      	ldrh	r2, [r3, #10]
 800ce32:	683b      	ldr	r3, [r7, #0]
 800ce34:	891b      	ldrh	r3, [r3, #8]
 800ce36:	429a      	cmp	r2, r3
 800ce38:	d10d      	bne.n	800ce56 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800ce3a:	683b      	ldr	r3, [r7, #0]
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d009      	beq.n	800ce56 <pbuf_copy+0x146>
 800ce42:	4b15      	ldr	r3, [pc, #84]	@ (800ce98 <pbuf_copy+0x188>)
 800ce44:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 800ce48:	4919      	ldr	r1, [pc, #100]	@ (800ceb0 <pbuf_copy+0x1a0>)
 800ce4a:	4815      	ldr	r0, [pc, #84]	@ (800cea0 <pbuf_copy+0x190>)
 800ce4c:	f009 fba8 	bl	80165a0 <iprintf>
 800ce50:	f06f 0305 	mvn.w	r3, #5
 800ce54:	e01b      	b.n	800ce8e <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	d013      	beq.n	800ce84 <pbuf_copy+0x174>
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	895a      	ldrh	r2, [r3, #10]
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	891b      	ldrh	r3, [r3, #8]
 800ce64:	429a      	cmp	r2, r3
 800ce66:	d10d      	bne.n	800ce84 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	681b      	ldr	r3, [r3, #0]
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	d009      	beq.n	800ce84 <pbuf_copy+0x174>
 800ce70:	4b09      	ldr	r3, [pc, #36]	@ (800ce98 <pbuf_copy+0x188>)
 800ce72:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 800ce76:	490e      	ldr	r1, [pc, #56]	@ (800ceb0 <pbuf_copy+0x1a0>)
 800ce78:	4809      	ldr	r0, [pc, #36]	@ (800cea0 <pbuf_copy+0x190>)
 800ce7a:	f009 fb91 	bl	80165a0 <iprintf>
 800ce7e:	f06f 0305 	mvn.w	r3, #5
 800ce82:	e004      	b.n	800ce8e <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800ce84:	683b      	ldr	r3, [r7, #0]
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	f47f af61 	bne.w	800cd4e <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800ce8c:	2300      	movs	r3, #0
}
 800ce8e:	4618      	mov	r0, r3
 800ce90:	3718      	adds	r7, #24
 800ce92:	46bd      	mov	sp, r7
 800ce94:	bd80      	pop	{r7, pc}
 800ce96:	bf00      	nop
 800ce98:	08018be8 	.word	0x08018be8
 800ce9c:	08018e90 	.word	0x08018e90
 800cea0:	08018c48 	.word	0x08018c48
 800cea4:	08018ec0 	.word	0x08018ec0
 800cea8:	08018ed8 	.word	0x08018ed8
 800ceac:	08018ef4 	.word	0x08018ef4
 800ceb0:	08018f04 	.word	0x08018f04

0800ceb4 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800ceb4:	b580      	push	{r7, lr}
 800ceb6:	b088      	sub	sp, #32
 800ceb8:	af00      	add	r7, sp, #0
 800ceba:	60f8      	str	r0, [r7, #12]
 800cebc:	60b9      	str	r1, [r7, #8]
 800cebe:	4611      	mov	r1, r2
 800cec0:	461a      	mov	r2, r3
 800cec2:	460b      	mov	r3, r1
 800cec4:	80fb      	strh	r3, [r7, #6]
 800cec6:	4613      	mov	r3, r2
 800cec8:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800ceca:	2300      	movs	r3, #0
 800cecc:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800cece:	2300      	movs	r3, #0
 800ced0:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d108      	bne.n	800ceea <pbuf_copy_partial+0x36>
 800ced8:	4b2b      	ldr	r3, [pc, #172]	@ (800cf88 <pbuf_copy_partial+0xd4>)
 800ceda:	f240 420a 	movw	r2, #1034	@ 0x40a
 800cede:	492b      	ldr	r1, [pc, #172]	@ (800cf8c <pbuf_copy_partial+0xd8>)
 800cee0:	482b      	ldr	r0, [pc, #172]	@ (800cf90 <pbuf_copy_partial+0xdc>)
 800cee2:	f009 fb5d 	bl	80165a0 <iprintf>
 800cee6:	2300      	movs	r3, #0
 800cee8:	e04a      	b.n	800cf80 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800ceea:	68bb      	ldr	r3, [r7, #8]
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	d108      	bne.n	800cf02 <pbuf_copy_partial+0x4e>
 800cef0:	4b25      	ldr	r3, [pc, #148]	@ (800cf88 <pbuf_copy_partial+0xd4>)
 800cef2:	f240 420b 	movw	r2, #1035	@ 0x40b
 800cef6:	4927      	ldr	r1, [pc, #156]	@ (800cf94 <pbuf_copy_partial+0xe0>)
 800cef8:	4825      	ldr	r0, [pc, #148]	@ (800cf90 <pbuf_copy_partial+0xdc>)
 800cefa:	f009 fb51 	bl	80165a0 <iprintf>
 800cefe:	2300      	movs	r3, #0
 800cf00:	e03e      	b.n	800cf80 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800cf02:	68fb      	ldr	r3, [r7, #12]
 800cf04:	61fb      	str	r3, [r7, #28]
 800cf06:	e034      	b.n	800cf72 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800cf08:	88bb      	ldrh	r3, [r7, #4]
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	d00a      	beq.n	800cf24 <pbuf_copy_partial+0x70>
 800cf0e:	69fb      	ldr	r3, [r7, #28]
 800cf10:	895b      	ldrh	r3, [r3, #10]
 800cf12:	88ba      	ldrh	r2, [r7, #4]
 800cf14:	429a      	cmp	r2, r3
 800cf16:	d305      	bcc.n	800cf24 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800cf18:	69fb      	ldr	r3, [r7, #28]
 800cf1a:	895b      	ldrh	r3, [r3, #10]
 800cf1c:	88ba      	ldrh	r2, [r7, #4]
 800cf1e:	1ad3      	subs	r3, r2, r3
 800cf20:	80bb      	strh	r3, [r7, #4]
 800cf22:	e023      	b.n	800cf6c <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800cf24:	69fb      	ldr	r3, [r7, #28]
 800cf26:	895a      	ldrh	r2, [r3, #10]
 800cf28:	88bb      	ldrh	r3, [r7, #4]
 800cf2a:	1ad3      	subs	r3, r2, r3
 800cf2c:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800cf2e:	8b3a      	ldrh	r2, [r7, #24]
 800cf30:	88fb      	ldrh	r3, [r7, #6]
 800cf32:	429a      	cmp	r2, r3
 800cf34:	d901      	bls.n	800cf3a <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800cf36:	88fb      	ldrh	r3, [r7, #6]
 800cf38:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800cf3a:	8b7b      	ldrh	r3, [r7, #26]
 800cf3c:	68ba      	ldr	r2, [r7, #8]
 800cf3e:	18d0      	adds	r0, r2, r3
 800cf40:	69fb      	ldr	r3, [r7, #28]
 800cf42:	685a      	ldr	r2, [r3, #4]
 800cf44:	88bb      	ldrh	r3, [r7, #4]
 800cf46:	4413      	add	r3, r2
 800cf48:	8b3a      	ldrh	r2, [r7, #24]
 800cf4a:	4619      	mov	r1, r3
 800cf4c:	f009 fc93 	bl	8016876 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800cf50:	8afa      	ldrh	r2, [r7, #22]
 800cf52:	8b3b      	ldrh	r3, [r7, #24]
 800cf54:	4413      	add	r3, r2
 800cf56:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800cf58:	8b7a      	ldrh	r2, [r7, #26]
 800cf5a:	8b3b      	ldrh	r3, [r7, #24]
 800cf5c:	4413      	add	r3, r2
 800cf5e:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800cf60:	88fa      	ldrh	r2, [r7, #6]
 800cf62:	8b3b      	ldrh	r3, [r7, #24]
 800cf64:	1ad3      	subs	r3, r2, r3
 800cf66:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800cf68:	2300      	movs	r3, #0
 800cf6a:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800cf6c:	69fb      	ldr	r3, [r7, #28]
 800cf6e:	681b      	ldr	r3, [r3, #0]
 800cf70:	61fb      	str	r3, [r7, #28]
 800cf72:	88fb      	ldrh	r3, [r7, #6]
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	d002      	beq.n	800cf7e <pbuf_copy_partial+0xca>
 800cf78:	69fb      	ldr	r3, [r7, #28]
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	d1c4      	bne.n	800cf08 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800cf7e:	8afb      	ldrh	r3, [r7, #22]
}
 800cf80:	4618      	mov	r0, r3
 800cf82:	3720      	adds	r7, #32
 800cf84:	46bd      	mov	sp, r7
 800cf86:	bd80      	pop	{r7, pc}
 800cf88:	08018be8 	.word	0x08018be8
 800cf8c:	08018f30 	.word	0x08018f30
 800cf90:	08018c48 	.word	0x08018c48
 800cf94:	08018f50 	.word	0x08018f50

0800cf98 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800cf98:	b580      	push	{r7, lr}
 800cf9a:	b084      	sub	sp, #16
 800cf9c:	af00      	add	r7, sp, #0
 800cf9e:	4603      	mov	r3, r0
 800cfa0:	603a      	str	r2, [r7, #0]
 800cfa2:	71fb      	strb	r3, [r7, #7]
 800cfa4:	460b      	mov	r3, r1
 800cfa6:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800cfa8:	683b      	ldr	r3, [r7, #0]
 800cfaa:	8919      	ldrh	r1, [r3, #8]
 800cfac:	88ba      	ldrh	r2, [r7, #4]
 800cfae:	79fb      	ldrb	r3, [r7, #7]
 800cfb0:	4618      	mov	r0, r3
 800cfb2:	f7ff faa5 	bl	800c500 <pbuf_alloc>
 800cfb6:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800cfb8:	68fb      	ldr	r3, [r7, #12]
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	d101      	bne.n	800cfc2 <pbuf_clone+0x2a>
    return NULL;
 800cfbe:	2300      	movs	r3, #0
 800cfc0:	e011      	b.n	800cfe6 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800cfc2:	6839      	ldr	r1, [r7, #0]
 800cfc4:	68f8      	ldr	r0, [r7, #12]
 800cfc6:	f7ff fea3 	bl	800cd10 <pbuf_copy>
 800cfca:	4603      	mov	r3, r0
 800cfcc:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800cfce:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d006      	beq.n	800cfe4 <pbuf_clone+0x4c>
 800cfd6:	4b06      	ldr	r3, [pc, #24]	@ (800cff0 <pbuf_clone+0x58>)
 800cfd8:	f240 5224 	movw	r2, #1316	@ 0x524
 800cfdc:	4905      	ldr	r1, [pc, #20]	@ (800cff4 <pbuf_clone+0x5c>)
 800cfde:	4806      	ldr	r0, [pc, #24]	@ (800cff8 <pbuf_clone+0x60>)
 800cfe0:	f009 fade 	bl	80165a0 <iprintf>
  return q;
 800cfe4:	68fb      	ldr	r3, [r7, #12]
}
 800cfe6:	4618      	mov	r0, r3
 800cfe8:	3710      	adds	r7, #16
 800cfea:	46bd      	mov	sp, r7
 800cfec:	bd80      	pop	{r7, pc}
 800cfee:	bf00      	nop
 800cff0:	08018be8 	.word	0x08018be8
 800cff4:	0801905c 	.word	0x0801905c
 800cff8:	08018c48 	.word	0x08018c48

0800cffc <sys_msleep>:
 *
 * @param ms number of milliseconds to sleep
 */
void
sys_msleep(u32_t ms)
{
 800cffc:	b580      	push	{r7, lr}
 800cffe:	b084      	sub	sp, #16
 800d000:	af00      	add	r7, sp, #0
 800d002:	6078      	str	r0, [r7, #4]
  if (ms > 0) {
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	2b00      	cmp	r3, #0
 800d008:	d016      	beq.n	800d038 <sys_msleep+0x3c>
    sys_sem_t delaysem;
    err_t err = sys_sem_new(&delaysem, 0);
 800d00a:	f107 0308 	add.w	r3, r7, #8
 800d00e:	2100      	movs	r1, #0
 800d010:	4618      	mov	r0, r3
 800d012:	f009 f8aa 	bl	801616a <sys_sem_new>
 800d016:	4603      	mov	r3, r0
 800d018:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800d01a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d01e:	2b00      	cmp	r3, #0
 800d020:	d10a      	bne.n	800d038 <sys_msleep+0x3c>
      sys_arch_sem_wait(&delaysem, ms);
 800d022:	f107 0308 	add.w	r3, r7, #8
 800d026:	6879      	ldr	r1, [r7, #4]
 800d028:	4618      	mov	r0, r3
 800d02a:	f009 f8c6 	bl	80161ba <sys_arch_sem_wait>
      sys_sem_free(&delaysem);
 800d02e:	f107 0308 	add.w	r3, r7, #8
 800d032:	4618      	mov	r0, r3
 800d034:	f009 f8ff 	bl	8016236 <sys_sem_free>
    }
  }
}
 800d038:	bf00      	nop
 800d03a:	3710      	adds	r7, #16
 800d03c:	46bd      	mov	sp, r7
 800d03e:	bd80      	pop	{r7, pc}

0800d040 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800d040:	b580      	push	{r7, lr}
 800d042:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800d044:	f009 f9ac 	bl	80163a0 <rand>
 800d048:	4603      	mov	r3, r0
 800d04a:	b29b      	uxth	r3, r3
 800d04c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800d050:	b29b      	uxth	r3, r3
 800d052:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800d056:	b29a      	uxth	r2, r3
 800d058:	4b01      	ldr	r3, [pc, #4]	@ (800d060 <tcp_init+0x20>)
 800d05a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800d05c:	bf00      	nop
 800d05e:	bd80      	pop	{r7, pc}
 800d060:	20000024 	.word	0x20000024

0800d064 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800d064:	b580      	push	{r7, lr}
 800d066:	b082      	sub	sp, #8
 800d068:	af00      	add	r7, sp, #0
 800d06a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	7d1b      	ldrb	r3, [r3, #20]
 800d070:	2b01      	cmp	r3, #1
 800d072:	d105      	bne.n	800d080 <tcp_free+0x1c>
 800d074:	4b06      	ldr	r3, [pc, #24]	@ (800d090 <tcp_free+0x2c>)
 800d076:	22d4      	movs	r2, #212	@ 0xd4
 800d078:	4906      	ldr	r1, [pc, #24]	@ (800d094 <tcp_free+0x30>)
 800d07a:	4807      	ldr	r0, [pc, #28]	@ (800d098 <tcp_free+0x34>)
 800d07c:	f009 fa90 	bl	80165a0 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800d080:	6879      	ldr	r1, [r7, #4]
 800d082:	2001      	movs	r0, #1
 800d084:	f7fe fe7c 	bl	800bd80 <memp_free>
}
 800d088:	bf00      	nop
 800d08a:	3708      	adds	r7, #8
 800d08c:	46bd      	mov	sp, r7
 800d08e:	bd80      	pop	{r7, pc}
 800d090:	080190e8 	.word	0x080190e8
 800d094:	08019118 	.word	0x08019118
 800d098:	0801912c 	.word	0x0801912c

0800d09c <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800d09c:	b580      	push	{r7, lr}
 800d09e:	b082      	sub	sp, #8
 800d0a0:	af00      	add	r7, sp, #0
 800d0a2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	7d1b      	ldrb	r3, [r3, #20]
 800d0a8:	2b01      	cmp	r3, #1
 800d0aa:	d105      	bne.n	800d0b8 <tcp_free_listen+0x1c>
 800d0ac:	4b06      	ldr	r3, [pc, #24]	@ (800d0c8 <tcp_free_listen+0x2c>)
 800d0ae:	22df      	movs	r2, #223	@ 0xdf
 800d0b0:	4906      	ldr	r1, [pc, #24]	@ (800d0cc <tcp_free_listen+0x30>)
 800d0b2:	4807      	ldr	r0, [pc, #28]	@ (800d0d0 <tcp_free_listen+0x34>)
 800d0b4:	f009 fa74 	bl	80165a0 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800d0b8:	6879      	ldr	r1, [r7, #4]
 800d0ba:	2002      	movs	r0, #2
 800d0bc:	f7fe fe60 	bl	800bd80 <memp_free>
}
 800d0c0:	bf00      	nop
 800d0c2:	3708      	adds	r7, #8
 800d0c4:	46bd      	mov	sp, r7
 800d0c6:	bd80      	pop	{r7, pc}
 800d0c8:	080190e8 	.word	0x080190e8
 800d0cc:	08019154 	.word	0x08019154
 800d0d0:	0801912c 	.word	0x0801912c

0800d0d4 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800d0d4:	b580      	push	{r7, lr}
 800d0d6:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800d0d8:	f001 f8ac 	bl	800e234 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800d0dc:	4b07      	ldr	r3, [pc, #28]	@ (800d0fc <tcp_tmr+0x28>)
 800d0de:	781b      	ldrb	r3, [r3, #0]
 800d0e0:	3301      	adds	r3, #1
 800d0e2:	b2da      	uxtb	r2, r3
 800d0e4:	4b05      	ldr	r3, [pc, #20]	@ (800d0fc <tcp_tmr+0x28>)
 800d0e6:	701a      	strb	r2, [r3, #0]
 800d0e8:	4b04      	ldr	r3, [pc, #16]	@ (800d0fc <tcp_tmr+0x28>)
 800d0ea:	781b      	ldrb	r3, [r3, #0]
 800d0ec:	f003 0301 	and.w	r3, r3, #1
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	d001      	beq.n	800d0f8 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800d0f4:	f000 fd58 	bl	800dba8 <tcp_slowtmr>
  }
}
 800d0f8:	bf00      	nop
 800d0fa:	bd80      	pop	{r7, pc}
 800d0fc:	2000ed55 	.word	0x2000ed55

0800d100 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800d100:	b580      	push	{r7, lr}
 800d102:	b084      	sub	sp, #16
 800d104:	af00      	add	r7, sp, #0
 800d106:	6078      	str	r0, [r7, #4]
 800d108:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800d10a:	683b      	ldr	r3, [r7, #0]
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	d105      	bne.n	800d11c <tcp_remove_listener+0x1c>
 800d110:	4b0d      	ldr	r3, [pc, #52]	@ (800d148 <tcp_remove_listener+0x48>)
 800d112:	22ff      	movs	r2, #255	@ 0xff
 800d114:	490d      	ldr	r1, [pc, #52]	@ (800d14c <tcp_remove_listener+0x4c>)
 800d116:	480e      	ldr	r0, [pc, #56]	@ (800d150 <tcp_remove_listener+0x50>)
 800d118:	f009 fa42 	bl	80165a0 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	60fb      	str	r3, [r7, #12]
 800d120:	e00a      	b.n	800d138 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800d122:	68fb      	ldr	r3, [r7, #12]
 800d124:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d126:	683a      	ldr	r2, [r7, #0]
 800d128:	429a      	cmp	r2, r3
 800d12a:	d102      	bne.n	800d132 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800d12c:	68fb      	ldr	r3, [r7, #12]
 800d12e:	2200      	movs	r2, #0
 800d130:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800d132:	68fb      	ldr	r3, [r7, #12]
 800d134:	68db      	ldr	r3, [r3, #12]
 800d136:	60fb      	str	r3, [r7, #12]
 800d138:	68fb      	ldr	r3, [r7, #12]
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d1f1      	bne.n	800d122 <tcp_remove_listener+0x22>
    }
  }
}
 800d13e:	bf00      	nop
 800d140:	bf00      	nop
 800d142:	3710      	adds	r7, #16
 800d144:	46bd      	mov	sp, r7
 800d146:	bd80      	pop	{r7, pc}
 800d148:	080190e8 	.word	0x080190e8
 800d14c:	08019170 	.word	0x08019170
 800d150:	0801912c 	.word	0x0801912c

0800d154 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800d154:	b580      	push	{r7, lr}
 800d156:	b084      	sub	sp, #16
 800d158:	af00      	add	r7, sp, #0
 800d15a:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	2b00      	cmp	r3, #0
 800d160:	d106      	bne.n	800d170 <tcp_listen_closed+0x1c>
 800d162:	4b14      	ldr	r3, [pc, #80]	@ (800d1b4 <tcp_listen_closed+0x60>)
 800d164:	f240 1211 	movw	r2, #273	@ 0x111
 800d168:	4913      	ldr	r1, [pc, #76]	@ (800d1b8 <tcp_listen_closed+0x64>)
 800d16a:	4814      	ldr	r0, [pc, #80]	@ (800d1bc <tcp_listen_closed+0x68>)
 800d16c:	f009 fa18 	bl	80165a0 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	7d1b      	ldrb	r3, [r3, #20]
 800d174:	2b01      	cmp	r3, #1
 800d176:	d006      	beq.n	800d186 <tcp_listen_closed+0x32>
 800d178:	4b0e      	ldr	r3, [pc, #56]	@ (800d1b4 <tcp_listen_closed+0x60>)
 800d17a:	f44f 7289 	mov.w	r2, #274	@ 0x112
 800d17e:	4910      	ldr	r1, [pc, #64]	@ (800d1c0 <tcp_listen_closed+0x6c>)
 800d180:	480e      	ldr	r0, [pc, #56]	@ (800d1bc <tcp_listen_closed+0x68>)
 800d182:	f009 fa0d 	bl	80165a0 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800d186:	2301      	movs	r3, #1
 800d188:	60fb      	str	r3, [r7, #12]
 800d18a:	e00b      	b.n	800d1a4 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800d18c:	4a0d      	ldr	r2, [pc, #52]	@ (800d1c4 <tcp_listen_closed+0x70>)
 800d18e:	68fb      	ldr	r3, [r7, #12]
 800d190:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d194:	681b      	ldr	r3, [r3, #0]
 800d196:	6879      	ldr	r1, [r7, #4]
 800d198:	4618      	mov	r0, r3
 800d19a:	f7ff ffb1 	bl	800d100 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800d19e:	68fb      	ldr	r3, [r7, #12]
 800d1a0:	3301      	adds	r3, #1
 800d1a2:	60fb      	str	r3, [r7, #12]
 800d1a4:	68fb      	ldr	r3, [r7, #12]
 800d1a6:	2b03      	cmp	r3, #3
 800d1a8:	d9f0      	bls.n	800d18c <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800d1aa:	bf00      	nop
 800d1ac:	bf00      	nop
 800d1ae:	3710      	adds	r7, #16
 800d1b0:	46bd      	mov	sp, r7
 800d1b2:	bd80      	pop	{r7, pc}
 800d1b4:	080190e8 	.word	0x080190e8
 800d1b8:	08019198 	.word	0x08019198
 800d1bc:	0801912c 	.word	0x0801912c
 800d1c0:	080191a4 	.word	0x080191a4
 800d1c4:	0801b10c 	.word	0x0801b10c

0800d1c8 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800d1c8:	b5b0      	push	{r4, r5, r7, lr}
 800d1ca:	b088      	sub	sp, #32
 800d1cc:	af04      	add	r7, sp, #16
 800d1ce:	6078      	str	r0, [r7, #4]
 800d1d0:	460b      	mov	r3, r1
 800d1d2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d106      	bne.n	800d1e8 <tcp_close_shutdown+0x20>
 800d1da:	4b63      	ldr	r3, [pc, #396]	@ (800d368 <tcp_close_shutdown+0x1a0>)
 800d1dc:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 800d1e0:	4962      	ldr	r1, [pc, #392]	@ (800d36c <tcp_close_shutdown+0x1a4>)
 800d1e2:	4863      	ldr	r0, [pc, #396]	@ (800d370 <tcp_close_shutdown+0x1a8>)
 800d1e4:	f009 f9dc 	bl	80165a0 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800d1e8:	78fb      	ldrb	r3, [r7, #3]
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d066      	beq.n	800d2bc <tcp_close_shutdown+0xf4>
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	7d1b      	ldrb	r3, [r3, #20]
 800d1f2:	2b04      	cmp	r3, #4
 800d1f4:	d003      	beq.n	800d1fe <tcp_close_shutdown+0x36>
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	7d1b      	ldrb	r3, [r3, #20]
 800d1fa:	2b07      	cmp	r3, #7
 800d1fc:	d15e      	bne.n	800d2bc <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d202:	2b00      	cmp	r3, #0
 800d204:	d104      	bne.n	800d210 <tcp_close_shutdown+0x48>
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d20a:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800d20e:	d055      	beq.n	800d2bc <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	8b5b      	ldrh	r3, [r3, #26]
 800d214:	f003 0310 	and.w	r3, r3, #16
 800d218:	2b00      	cmp	r3, #0
 800d21a:	d106      	bne.n	800d22a <tcp_close_shutdown+0x62>
 800d21c:	4b52      	ldr	r3, [pc, #328]	@ (800d368 <tcp_close_shutdown+0x1a0>)
 800d21e:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 800d222:	4954      	ldr	r1, [pc, #336]	@ (800d374 <tcp_close_shutdown+0x1ac>)
 800d224:	4852      	ldr	r0, [pc, #328]	@ (800d370 <tcp_close_shutdown+0x1a8>)
 800d226:	f009 f9bb 	bl	80165a0 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800d232:	687d      	ldr	r5, [r7, #4]
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	3304      	adds	r3, #4
 800d238:	687a      	ldr	r2, [r7, #4]
 800d23a:	8ad2      	ldrh	r2, [r2, #22]
 800d23c:	6879      	ldr	r1, [r7, #4]
 800d23e:	8b09      	ldrh	r1, [r1, #24]
 800d240:	9102      	str	r1, [sp, #8]
 800d242:	9201      	str	r2, [sp, #4]
 800d244:	9300      	str	r3, [sp, #0]
 800d246:	462b      	mov	r3, r5
 800d248:	4622      	mov	r2, r4
 800d24a:	4601      	mov	r1, r0
 800d24c:	6878      	ldr	r0, [r7, #4]
 800d24e:	f005 fdc3 	bl	8012dd8 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800d252:	6878      	ldr	r0, [r7, #4]
 800d254:	f001 fba6 	bl	800e9a4 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800d258:	4b47      	ldr	r3, [pc, #284]	@ (800d378 <tcp_close_shutdown+0x1b0>)
 800d25a:	681b      	ldr	r3, [r3, #0]
 800d25c:	687a      	ldr	r2, [r7, #4]
 800d25e:	429a      	cmp	r2, r3
 800d260:	d105      	bne.n	800d26e <tcp_close_shutdown+0xa6>
 800d262:	4b45      	ldr	r3, [pc, #276]	@ (800d378 <tcp_close_shutdown+0x1b0>)
 800d264:	681b      	ldr	r3, [r3, #0]
 800d266:	68db      	ldr	r3, [r3, #12]
 800d268:	4a43      	ldr	r2, [pc, #268]	@ (800d378 <tcp_close_shutdown+0x1b0>)
 800d26a:	6013      	str	r3, [r2, #0]
 800d26c:	e013      	b.n	800d296 <tcp_close_shutdown+0xce>
 800d26e:	4b42      	ldr	r3, [pc, #264]	@ (800d378 <tcp_close_shutdown+0x1b0>)
 800d270:	681b      	ldr	r3, [r3, #0]
 800d272:	60fb      	str	r3, [r7, #12]
 800d274:	e00c      	b.n	800d290 <tcp_close_shutdown+0xc8>
 800d276:	68fb      	ldr	r3, [r7, #12]
 800d278:	68db      	ldr	r3, [r3, #12]
 800d27a:	687a      	ldr	r2, [r7, #4]
 800d27c:	429a      	cmp	r2, r3
 800d27e:	d104      	bne.n	800d28a <tcp_close_shutdown+0xc2>
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	68da      	ldr	r2, [r3, #12]
 800d284:	68fb      	ldr	r3, [r7, #12]
 800d286:	60da      	str	r2, [r3, #12]
 800d288:	e005      	b.n	800d296 <tcp_close_shutdown+0xce>
 800d28a:	68fb      	ldr	r3, [r7, #12]
 800d28c:	68db      	ldr	r3, [r3, #12]
 800d28e:	60fb      	str	r3, [r7, #12]
 800d290:	68fb      	ldr	r3, [r7, #12]
 800d292:	2b00      	cmp	r3, #0
 800d294:	d1ef      	bne.n	800d276 <tcp_close_shutdown+0xae>
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	2200      	movs	r2, #0
 800d29a:	60da      	str	r2, [r3, #12]
 800d29c:	4b37      	ldr	r3, [pc, #220]	@ (800d37c <tcp_close_shutdown+0x1b4>)
 800d29e:	2201      	movs	r2, #1
 800d2a0:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800d2a2:	4b37      	ldr	r3, [pc, #220]	@ (800d380 <tcp_close_shutdown+0x1b8>)
 800d2a4:	681b      	ldr	r3, [r3, #0]
 800d2a6:	687a      	ldr	r2, [r7, #4]
 800d2a8:	429a      	cmp	r2, r3
 800d2aa:	d102      	bne.n	800d2b2 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800d2ac:	f004 f83a 	bl	8011324 <tcp_trigger_input_pcb_close>
 800d2b0:	e002      	b.n	800d2b8 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800d2b2:	6878      	ldr	r0, [r7, #4]
 800d2b4:	f7ff fed6 	bl	800d064 <tcp_free>
      }
      return ERR_OK;
 800d2b8:	2300      	movs	r3, #0
 800d2ba:	e050      	b.n	800d35e <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	7d1b      	ldrb	r3, [r3, #20]
 800d2c0:	2b02      	cmp	r3, #2
 800d2c2:	d03b      	beq.n	800d33c <tcp_close_shutdown+0x174>
 800d2c4:	2b02      	cmp	r3, #2
 800d2c6:	dc44      	bgt.n	800d352 <tcp_close_shutdown+0x18a>
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	d002      	beq.n	800d2d2 <tcp_close_shutdown+0x10a>
 800d2cc:	2b01      	cmp	r3, #1
 800d2ce:	d02a      	beq.n	800d326 <tcp_close_shutdown+0x15e>
 800d2d0:	e03f      	b.n	800d352 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	8adb      	ldrh	r3, [r3, #22]
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	d021      	beq.n	800d31e <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800d2da:	4b2a      	ldr	r3, [pc, #168]	@ (800d384 <tcp_close_shutdown+0x1bc>)
 800d2dc:	681b      	ldr	r3, [r3, #0]
 800d2de:	687a      	ldr	r2, [r7, #4]
 800d2e0:	429a      	cmp	r2, r3
 800d2e2:	d105      	bne.n	800d2f0 <tcp_close_shutdown+0x128>
 800d2e4:	4b27      	ldr	r3, [pc, #156]	@ (800d384 <tcp_close_shutdown+0x1bc>)
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	68db      	ldr	r3, [r3, #12]
 800d2ea:	4a26      	ldr	r2, [pc, #152]	@ (800d384 <tcp_close_shutdown+0x1bc>)
 800d2ec:	6013      	str	r3, [r2, #0]
 800d2ee:	e013      	b.n	800d318 <tcp_close_shutdown+0x150>
 800d2f0:	4b24      	ldr	r3, [pc, #144]	@ (800d384 <tcp_close_shutdown+0x1bc>)
 800d2f2:	681b      	ldr	r3, [r3, #0]
 800d2f4:	60bb      	str	r3, [r7, #8]
 800d2f6:	e00c      	b.n	800d312 <tcp_close_shutdown+0x14a>
 800d2f8:	68bb      	ldr	r3, [r7, #8]
 800d2fa:	68db      	ldr	r3, [r3, #12]
 800d2fc:	687a      	ldr	r2, [r7, #4]
 800d2fe:	429a      	cmp	r2, r3
 800d300:	d104      	bne.n	800d30c <tcp_close_shutdown+0x144>
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	68da      	ldr	r2, [r3, #12]
 800d306:	68bb      	ldr	r3, [r7, #8]
 800d308:	60da      	str	r2, [r3, #12]
 800d30a:	e005      	b.n	800d318 <tcp_close_shutdown+0x150>
 800d30c:	68bb      	ldr	r3, [r7, #8]
 800d30e:	68db      	ldr	r3, [r3, #12]
 800d310:	60bb      	str	r3, [r7, #8]
 800d312:	68bb      	ldr	r3, [r7, #8]
 800d314:	2b00      	cmp	r3, #0
 800d316:	d1ef      	bne.n	800d2f8 <tcp_close_shutdown+0x130>
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	2200      	movs	r2, #0
 800d31c:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800d31e:	6878      	ldr	r0, [r7, #4]
 800d320:	f7ff fea0 	bl	800d064 <tcp_free>
      break;
 800d324:	e01a      	b.n	800d35c <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800d326:	6878      	ldr	r0, [r7, #4]
 800d328:	f7ff ff14 	bl	800d154 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800d32c:	6879      	ldr	r1, [r7, #4]
 800d32e:	4816      	ldr	r0, [pc, #88]	@ (800d388 <tcp_close_shutdown+0x1c0>)
 800d330:	f001 fb88 	bl	800ea44 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800d334:	6878      	ldr	r0, [r7, #4]
 800d336:	f7ff feb1 	bl	800d09c <tcp_free_listen>
      break;
 800d33a:	e00f      	b.n	800d35c <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800d33c:	6879      	ldr	r1, [r7, #4]
 800d33e:	480e      	ldr	r0, [pc, #56]	@ (800d378 <tcp_close_shutdown+0x1b0>)
 800d340:	f001 fb80 	bl	800ea44 <tcp_pcb_remove>
 800d344:	4b0d      	ldr	r3, [pc, #52]	@ (800d37c <tcp_close_shutdown+0x1b4>)
 800d346:	2201      	movs	r2, #1
 800d348:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800d34a:	6878      	ldr	r0, [r7, #4]
 800d34c:	f7ff fe8a 	bl	800d064 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800d350:	e004      	b.n	800d35c <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800d352:	6878      	ldr	r0, [r7, #4]
 800d354:	f000 f81a 	bl	800d38c <tcp_close_shutdown_fin>
 800d358:	4603      	mov	r3, r0
 800d35a:	e000      	b.n	800d35e <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800d35c:	2300      	movs	r3, #0
}
 800d35e:	4618      	mov	r0, r3
 800d360:	3710      	adds	r7, #16
 800d362:	46bd      	mov	sp, r7
 800d364:	bdb0      	pop	{r4, r5, r7, pc}
 800d366:	bf00      	nop
 800d368:	080190e8 	.word	0x080190e8
 800d36c:	080191bc 	.word	0x080191bc
 800d370:	0801912c 	.word	0x0801912c
 800d374:	080191dc 	.word	0x080191dc
 800d378:	2000ed4c 	.word	0x2000ed4c
 800d37c:	2000ed54 	.word	0x2000ed54
 800d380:	2000ed8c 	.word	0x2000ed8c
 800d384:	2000ed44 	.word	0x2000ed44
 800d388:	2000ed48 	.word	0x2000ed48

0800d38c <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800d38c:	b580      	push	{r7, lr}
 800d38e:	b084      	sub	sp, #16
 800d390:	af00      	add	r7, sp, #0
 800d392:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	2b00      	cmp	r3, #0
 800d398:	d106      	bne.n	800d3a8 <tcp_close_shutdown_fin+0x1c>
 800d39a:	4b2e      	ldr	r3, [pc, #184]	@ (800d454 <tcp_close_shutdown_fin+0xc8>)
 800d39c:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 800d3a0:	492d      	ldr	r1, [pc, #180]	@ (800d458 <tcp_close_shutdown_fin+0xcc>)
 800d3a2:	482e      	ldr	r0, [pc, #184]	@ (800d45c <tcp_close_shutdown_fin+0xd0>)
 800d3a4:	f009 f8fc 	bl	80165a0 <iprintf>

  switch (pcb->state) {
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	7d1b      	ldrb	r3, [r3, #20]
 800d3ac:	2b07      	cmp	r3, #7
 800d3ae:	d020      	beq.n	800d3f2 <tcp_close_shutdown_fin+0x66>
 800d3b0:	2b07      	cmp	r3, #7
 800d3b2:	dc2b      	bgt.n	800d40c <tcp_close_shutdown_fin+0x80>
 800d3b4:	2b03      	cmp	r3, #3
 800d3b6:	d002      	beq.n	800d3be <tcp_close_shutdown_fin+0x32>
 800d3b8:	2b04      	cmp	r3, #4
 800d3ba:	d00d      	beq.n	800d3d8 <tcp_close_shutdown_fin+0x4c>
 800d3bc:	e026      	b.n	800d40c <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800d3be:	6878      	ldr	r0, [r7, #4]
 800d3c0:	f004 fe18 	bl	8011ff4 <tcp_send_fin>
 800d3c4:	4603      	mov	r3, r0
 800d3c6:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800d3c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	d11f      	bne.n	800d410 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	2205      	movs	r2, #5
 800d3d4:	751a      	strb	r2, [r3, #20]
      }
      break;
 800d3d6:	e01b      	b.n	800d410 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800d3d8:	6878      	ldr	r0, [r7, #4]
 800d3da:	f004 fe0b 	bl	8011ff4 <tcp_send_fin>
 800d3de:	4603      	mov	r3, r0
 800d3e0:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800d3e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	d114      	bne.n	800d414 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	2205      	movs	r2, #5
 800d3ee:	751a      	strb	r2, [r3, #20]
      }
      break;
 800d3f0:	e010      	b.n	800d414 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800d3f2:	6878      	ldr	r0, [r7, #4]
 800d3f4:	f004 fdfe 	bl	8011ff4 <tcp_send_fin>
 800d3f8:	4603      	mov	r3, r0
 800d3fa:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800d3fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d400:	2b00      	cmp	r3, #0
 800d402:	d109      	bne.n	800d418 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	2209      	movs	r2, #9
 800d408:	751a      	strb	r2, [r3, #20]
      }
      break;
 800d40a:	e005      	b.n	800d418 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800d40c:	2300      	movs	r3, #0
 800d40e:	e01c      	b.n	800d44a <tcp_close_shutdown_fin+0xbe>
      break;
 800d410:	bf00      	nop
 800d412:	e002      	b.n	800d41a <tcp_close_shutdown_fin+0x8e>
      break;
 800d414:	bf00      	nop
 800d416:	e000      	b.n	800d41a <tcp_close_shutdown_fin+0x8e>
      break;
 800d418:	bf00      	nop
  }

  if (err == ERR_OK) {
 800d41a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d41e:	2b00      	cmp	r3, #0
 800d420:	d103      	bne.n	800d42a <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800d422:	6878      	ldr	r0, [r7, #4]
 800d424:	f004 ff24 	bl	8012270 <tcp_output>
 800d428:	e00d      	b.n	800d446 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800d42a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d42e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d432:	d108      	bne.n	800d446 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	8b5b      	ldrh	r3, [r3, #26]
 800d438:	f043 0308 	orr.w	r3, r3, #8
 800d43c:	b29a      	uxth	r2, r3
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800d442:	2300      	movs	r3, #0
 800d444:	e001      	b.n	800d44a <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800d446:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d44a:	4618      	mov	r0, r3
 800d44c:	3710      	adds	r7, #16
 800d44e:	46bd      	mov	sp, r7
 800d450:	bd80      	pop	{r7, pc}
 800d452:	bf00      	nop
 800d454:	080190e8 	.word	0x080190e8
 800d458:	08019198 	.word	0x08019198
 800d45c:	0801912c 	.word	0x0801912c

0800d460 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800d460:	b580      	push	{r7, lr}
 800d462:	b082      	sub	sp, #8
 800d464:	af00      	add	r7, sp, #0
 800d466:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d109      	bne.n	800d482 <tcp_close+0x22>
 800d46e:	4b0f      	ldr	r3, [pc, #60]	@ (800d4ac <tcp_close+0x4c>)
 800d470:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 800d474:	490e      	ldr	r1, [pc, #56]	@ (800d4b0 <tcp_close+0x50>)
 800d476:	480f      	ldr	r0, [pc, #60]	@ (800d4b4 <tcp_close+0x54>)
 800d478:	f009 f892 	bl	80165a0 <iprintf>
 800d47c:	f06f 030f 	mvn.w	r3, #15
 800d480:	e00f      	b.n	800d4a2 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	7d1b      	ldrb	r3, [r3, #20]
 800d486:	2b01      	cmp	r3, #1
 800d488:	d006      	beq.n	800d498 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	8b5b      	ldrh	r3, [r3, #26]
 800d48e:	f043 0310 	orr.w	r3, r3, #16
 800d492:	b29a      	uxth	r2, r3
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800d498:	2101      	movs	r1, #1
 800d49a:	6878      	ldr	r0, [r7, #4]
 800d49c:	f7ff fe94 	bl	800d1c8 <tcp_close_shutdown>
 800d4a0:	4603      	mov	r3, r0
}
 800d4a2:	4618      	mov	r0, r3
 800d4a4:	3708      	adds	r7, #8
 800d4a6:	46bd      	mov	sp, r7
 800d4a8:	bd80      	pop	{r7, pc}
 800d4aa:	bf00      	nop
 800d4ac:	080190e8 	.word	0x080190e8
 800d4b0:	080191f8 	.word	0x080191f8
 800d4b4:	0801912c 	.word	0x0801912c

0800d4b8 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 800d4b8:	b580      	push	{r7, lr}
 800d4ba:	b084      	sub	sp, #16
 800d4bc:	af00      	add	r7, sp, #0
 800d4be:	60f8      	str	r0, [r7, #12]
 800d4c0:	60b9      	str	r1, [r7, #8]
 800d4c2:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 800d4c4:	68fb      	ldr	r3, [r7, #12]
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	d109      	bne.n	800d4de <tcp_shutdown+0x26>
 800d4ca:	4b26      	ldr	r3, [pc, #152]	@ (800d564 <tcp_shutdown+0xac>)
 800d4cc:	f240 2207 	movw	r2, #519	@ 0x207
 800d4d0:	4925      	ldr	r1, [pc, #148]	@ (800d568 <tcp_shutdown+0xb0>)
 800d4d2:	4826      	ldr	r0, [pc, #152]	@ (800d56c <tcp_shutdown+0xb4>)
 800d4d4:	f009 f864 	bl	80165a0 <iprintf>
 800d4d8:	f06f 030f 	mvn.w	r3, #15
 800d4dc:	e03d      	b.n	800d55a <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 800d4de:	68fb      	ldr	r3, [r7, #12]
 800d4e0:	7d1b      	ldrb	r3, [r3, #20]
 800d4e2:	2b01      	cmp	r3, #1
 800d4e4:	d102      	bne.n	800d4ec <tcp_shutdown+0x34>
    return ERR_CONN;
 800d4e6:	f06f 030a 	mvn.w	r3, #10
 800d4ea:	e036      	b.n	800d55a <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 800d4ec:	68bb      	ldr	r3, [r7, #8]
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d01b      	beq.n	800d52a <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800d4f2:	68fb      	ldr	r3, [r7, #12]
 800d4f4:	8b5b      	ldrh	r3, [r3, #26]
 800d4f6:	f043 0310 	orr.w	r3, r3, #16
 800d4fa:	b29a      	uxth	r2, r3
 800d4fc:	68fb      	ldr	r3, [r7, #12]
 800d4fe:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	2b00      	cmp	r3, #0
 800d504:	d005      	beq.n	800d512 <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 800d506:	2101      	movs	r1, #1
 800d508:	68f8      	ldr	r0, [r7, #12]
 800d50a:	f7ff fe5d 	bl	800d1c8 <tcp_close_shutdown>
 800d50e:	4603      	mov	r3, r0
 800d510:	e023      	b.n	800d55a <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 800d512:	68fb      	ldr	r3, [r7, #12]
 800d514:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d516:	2b00      	cmp	r3, #0
 800d518:	d007      	beq.n	800d52a <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 800d51a:	68fb      	ldr	r3, [r7, #12]
 800d51c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d51e:	4618      	mov	r0, r3
 800d520:	f7ff fad2 	bl	800cac8 <pbuf_free>
      pcb->refused_data = NULL;
 800d524:	68fb      	ldr	r3, [r7, #12]
 800d526:	2200      	movs	r2, #0
 800d528:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }
  if (shut_tx) {
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d013      	beq.n	800d558 <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 800d530:	68fb      	ldr	r3, [r7, #12]
 800d532:	7d1b      	ldrb	r3, [r3, #20]
 800d534:	2b04      	cmp	r3, #4
 800d536:	dc02      	bgt.n	800d53e <tcp_shutdown+0x86>
 800d538:	2b03      	cmp	r3, #3
 800d53a:	da02      	bge.n	800d542 <tcp_shutdown+0x8a>
 800d53c:	e009      	b.n	800d552 <tcp_shutdown+0x9a>
 800d53e:	2b07      	cmp	r3, #7
 800d540:	d107      	bne.n	800d552 <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800d542:	68bb      	ldr	r3, [r7, #8]
 800d544:	b2db      	uxtb	r3, r3
 800d546:	4619      	mov	r1, r3
 800d548:	68f8      	ldr	r0, [r7, #12]
 800d54a:	f7ff fe3d 	bl	800d1c8 <tcp_close_shutdown>
 800d54e:	4603      	mov	r3, r0
 800d550:	e003      	b.n	800d55a <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 800d552:	f06f 030a 	mvn.w	r3, #10
 800d556:	e000      	b.n	800d55a <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 800d558:	2300      	movs	r3, #0
}
 800d55a:	4618      	mov	r0, r3
 800d55c:	3710      	adds	r7, #16
 800d55e:	46bd      	mov	sp, r7
 800d560:	bd80      	pop	{r7, pc}
 800d562:	bf00      	nop
 800d564:	080190e8 	.word	0x080190e8
 800d568:	08019210 	.word	0x08019210
 800d56c:	0801912c 	.word	0x0801912c

0800d570 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800d570:	b580      	push	{r7, lr}
 800d572:	b08e      	sub	sp, #56	@ 0x38
 800d574:	af04      	add	r7, sp, #16
 800d576:	6078      	str	r0, [r7, #4]
 800d578:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	d107      	bne.n	800d590 <tcp_abandon+0x20>
 800d580:	4b52      	ldr	r3, [pc, #328]	@ (800d6cc <tcp_abandon+0x15c>)
 800d582:	f240 223d 	movw	r2, #573	@ 0x23d
 800d586:	4952      	ldr	r1, [pc, #328]	@ (800d6d0 <tcp_abandon+0x160>)
 800d588:	4852      	ldr	r0, [pc, #328]	@ (800d6d4 <tcp_abandon+0x164>)
 800d58a:	f009 f809 	bl	80165a0 <iprintf>
 800d58e:	e099      	b.n	800d6c4 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	7d1b      	ldrb	r3, [r3, #20]
 800d594:	2b01      	cmp	r3, #1
 800d596:	d106      	bne.n	800d5a6 <tcp_abandon+0x36>
 800d598:	4b4c      	ldr	r3, [pc, #304]	@ (800d6cc <tcp_abandon+0x15c>)
 800d59a:	f44f 7210 	mov.w	r2, #576	@ 0x240
 800d59e:	494e      	ldr	r1, [pc, #312]	@ (800d6d8 <tcp_abandon+0x168>)
 800d5a0:	484c      	ldr	r0, [pc, #304]	@ (800d6d4 <tcp_abandon+0x164>)
 800d5a2:	f008 fffd 	bl	80165a0 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	7d1b      	ldrb	r3, [r3, #20]
 800d5aa:	2b0a      	cmp	r3, #10
 800d5ac:	d107      	bne.n	800d5be <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800d5ae:	6879      	ldr	r1, [r7, #4]
 800d5b0:	484a      	ldr	r0, [pc, #296]	@ (800d6dc <tcp_abandon+0x16c>)
 800d5b2:	f001 fa47 	bl	800ea44 <tcp_pcb_remove>
    tcp_free(pcb);
 800d5b6:	6878      	ldr	r0, [r7, #4]
 800d5b8:	f7ff fd54 	bl	800d064 <tcp_free>
 800d5bc:	e082      	b.n	800d6c4 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800d5be:	2300      	movs	r3, #0
 800d5c0:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 800d5c2:	2300      	movs	r3, #0
 800d5c4:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d5ca:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d5d0:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d5d8:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	691b      	ldr	r3, [r3, #16]
 800d5de:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	7d1b      	ldrb	r3, [r3, #20]
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	d126      	bne.n	800d636 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	8adb      	ldrh	r3, [r3, #22]
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	d02e      	beq.n	800d64e <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800d5f0:	4b3b      	ldr	r3, [pc, #236]	@ (800d6e0 <tcp_abandon+0x170>)
 800d5f2:	681b      	ldr	r3, [r3, #0]
 800d5f4:	687a      	ldr	r2, [r7, #4]
 800d5f6:	429a      	cmp	r2, r3
 800d5f8:	d105      	bne.n	800d606 <tcp_abandon+0x96>
 800d5fa:	4b39      	ldr	r3, [pc, #228]	@ (800d6e0 <tcp_abandon+0x170>)
 800d5fc:	681b      	ldr	r3, [r3, #0]
 800d5fe:	68db      	ldr	r3, [r3, #12]
 800d600:	4a37      	ldr	r2, [pc, #220]	@ (800d6e0 <tcp_abandon+0x170>)
 800d602:	6013      	str	r3, [r2, #0]
 800d604:	e013      	b.n	800d62e <tcp_abandon+0xbe>
 800d606:	4b36      	ldr	r3, [pc, #216]	@ (800d6e0 <tcp_abandon+0x170>)
 800d608:	681b      	ldr	r3, [r3, #0]
 800d60a:	61fb      	str	r3, [r7, #28]
 800d60c:	e00c      	b.n	800d628 <tcp_abandon+0xb8>
 800d60e:	69fb      	ldr	r3, [r7, #28]
 800d610:	68db      	ldr	r3, [r3, #12]
 800d612:	687a      	ldr	r2, [r7, #4]
 800d614:	429a      	cmp	r2, r3
 800d616:	d104      	bne.n	800d622 <tcp_abandon+0xb2>
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	68da      	ldr	r2, [r3, #12]
 800d61c:	69fb      	ldr	r3, [r7, #28]
 800d61e:	60da      	str	r2, [r3, #12]
 800d620:	e005      	b.n	800d62e <tcp_abandon+0xbe>
 800d622:	69fb      	ldr	r3, [r7, #28]
 800d624:	68db      	ldr	r3, [r3, #12]
 800d626:	61fb      	str	r3, [r7, #28]
 800d628:	69fb      	ldr	r3, [r7, #28]
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	d1ef      	bne.n	800d60e <tcp_abandon+0x9e>
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	2200      	movs	r2, #0
 800d632:	60da      	str	r2, [r3, #12]
 800d634:	e00b      	b.n	800d64e <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800d636:	683b      	ldr	r3, [r7, #0]
 800d638:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	8adb      	ldrh	r3, [r3, #22]
 800d63e:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800d640:	6879      	ldr	r1, [r7, #4]
 800d642:	4828      	ldr	r0, [pc, #160]	@ (800d6e4 <tcp_abandon+0x174>)
 800d644:	f001 f9fe 	bl	800ea44 <tcp_pcb_remove>
 800d648:	4b27      	ldr	r3, [pc, #156]	@ (800d6e8 <tcp_abandon+0x178>)
 800d64a:	2201      	movs	r2, #1
 800d64c:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d652:	2b00      	cmp	r3, #0
 800d654:	d004      	beq.n	800d660 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d65a:	4618      	mov	r0, r3
 800d65c:	f000 feca 	bl	800e3f4 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d664:	2b00      	cmp	r3, #0
 800d666:	d004      	beq.n	800d672 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d66c:	4618      	mov	r0, r3
 800d66e:	f000 fec1 	bl	800e3f4 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d676:	2b00      	cmp	r3, #0
 800d678:	d004      	beq.n	800d684 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d67e:	4618      	mov	r0, r3
 800d680:	f000 feb8 	bl	800e3f4 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800d684:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d686:	2b00      	cmp	r3, #0
 800d688:	d00e      	beq.n	800d6a8 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800d68a:	6879      	ldr	r1, [r7, #4]
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	3304      	adds	r3, #4
 800d690:	687a      	ldr	r2, [r7, #4]
 800d692:	8b12      	ldrh	r2, [r2, #24]
 800d694:	9202      	str	r2, [sp, #8]
 800d696:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800d698:	9201      	str	r2, [sp, #4]
 800d69a:	9300      	str	r3, [sp, #0]
 800d69c:	460b      	mov	r3, r1
 800d69e:	697a      	ldr	r2, [r7, #20]
 800d6a0:	69b9      	ldr	r1, [r7, #24]
 800d6a2:	6878      	ldr	r0, [r7, #4]
 800d6a4:	f005 fb98 	bl	8012dd8 <tcp_rst>
    }
    last_state = pcb->state;
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	7d1b      	ldrb	r3, [r3, #20]
 800d6ac:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800d6ae:	6878      	ldr	r0, [r7, #4]
 800d6b0:	f7ff fcd8 	bl	800d064 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800d6b4:	693b      	ldr	r3, [r7, #16]
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	d004      	beq.n	800d6c4 <tcp_abandon+0x154>
 800d6ba:	693b      	ldr	r3, [r7, #16]
 800d6bc:	f06f 010c 	mvn.w	r1, #12
 800d6c0:	68f8      	ldr	r0, [r7, #12]
 800d6c2:	4798      	blx	r3
  }
}
 800d6c4:	3728      	adds	r7, #40	@ 0x28
 800d6c6:	46bd      	mov	sp, r7
 800d6c8:	bd80      	pop	{r7, pc}
 800d6ca:	bf00      	nop
 800d6cc:	080190e8 	.word	0x080190e8
 800d6d0:	0801922c 	.word	0x0801922c
 800d6d4:	0801912c 	.word	0x0801912c
 800d6d8:	08019248 	.word	0x08019248
 800d6dc:	2000ed50 	.word	0x2000ed50
 800d6e0:	2000ed44 	.word	0x2000ed44
 800d6e4:	2000ed4c 	.word	0x2000ed4c
 800d6e8:	2000ed54 	.word	0x2000ed54

0800d6ec <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800d6ec:	b580      	push	{r7, lr}
 800d6ee:	b082      	sub	sp, #8
 800d6f0:	af00      	add	r7, sp, #0
 800d6f2:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800d6f4:	2101      	movs	r1, #1
 800d6f6:	6878      	ldr	r0, [r7, #4]
 800d6f8:	f7ff ff3a 	bl	800d570 <tcp_abandon>
}
 800d6fc:	bf00      	nop
 800d6fe:	3708      	adds	r7, #8
 800d700:	46bd      	mov	sp, r7
 800d702:	bd80      	pop	{r7, pc}

0800d704 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800d704:	b580      	push	{r7, lr}
 800d706:	b088      	sub	sp, #32
 800d708:	af00      	add	r7, sp, #0
 800d70a:	60f8      	str	r0, [r7, #12]
 800d70c:	60b9      	str	r1, [r7, #8]
 800d70e:	4613      	mov	r3, r2
 800d710:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800d712:	2304      	movs	r3, #4
 800d714:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800d716:	68bb      	ldr	r3, [r7, #8]
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d101      	bne.n	800d720 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800d71c:	4b3e      	ldr	r3, [pc, #248]	@ (800d818 <tcp_bind+0x114>)
 800d71e:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800d720:	68fb      	ldr	r3, [r7, #12]
 800d722:	2b00      	cmp	r3, #0
 800d724:	d109      	bne.n	800d73a <tcp_bind+0x36>
 800d726:	4b3d      	ldr	r3, [pc, #244]	@ (800d81c <tcp_bind+0x118>)
 800d728:	f240 22a9 	movw	r2, #681	@ 0x2a9
 800d72c:	493c      	ldr	r1, [pc, #240]	@ (800d820 <tcp_bind+0x11c>)
 800d72e:	483d      	ldr	r0, [pc, #244]	@ (800d824 <tcp_bind+0x120>)
 800d730:	f008 ff36 	bl	80165a0 <iprintf>
 800d734:	f06f 030f 	mvn.w	r3, #15
 800d738:	e06a      	b.n	800d810 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800d73a:	68fb      	ldr	r3, [r7, #12]
 800d73c:	7d1b      	ldrb	r3, [r3, #20]
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d009      	beq.n	800d756 <tcp_bind+0x52>
 800d742:	4b36      	ldr	r3, [pc, #216]	@ (800d81c <tcp_bind+0x118>)
 800d744:	f240 22ab 	movw	r2, #683	@ 0x2ab
 800d748:	4937      	ldr	r1, [pc, #220]	@ (800d828 <tcp_bind+0x124>)
 800d74a:	4836      	ldr	r0, [pc, #216]	@ (800d824 <tcp_bind+0x120>)
 800d74c:	f008 ff28 	bl	80165a0 <iprintf>
 800d750:	f06f 0305 	mvn.w	r3, #5
 800d754:	e05c      	b.n	800d810 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800d756:	88fb      	ldrh	r3, [r7, #6]
 800d758:	2b00      	cmp	r3, #0
 800d75a:	d109      	bne.n	800d770 <tcp_bind+0x6c>
    port = tcp_new_port();
 800d75c:	f000 f9de 	bl	800db1c <tcp_new_port>
 800d760:	4603      	mov	r3, r0
 800d762:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800d764:	88fb      	ldrh	r3, [r7, #6]
 800d766:	2b00      	cmp	r3, #0
 800d768:	d135      	bne.n	800d7d6 <tcp_bind+0xd2>
      return ERR_BUF;
 800d76a:	f06f 0301 	mvn.w	r3, #1
 800d76e:	e04f      	b.n	800d810 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800d770:	2300      	movs	r3, #0
 800d772:	61fb      	str	r3, [r7, #28]
 800d774:	e02b      	b.n	800d7ce <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800d776:	4a2d      	ldr	r2, [pc, #180]	@ (800d82c <tcp_bind+0x128>)
 800d778:	69fb      	ldr	r3, [r7, #28]
 800d77a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d77e:	681b      	ldr	r3, [r3, #0]
 800d780:	61bb      	str	r3, [r7, #24]
 800d782:	e01e      	b.n	800d7c2 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 800d784:	69bb      	ldr	r3, [r7, #24]
 800d786:	8adb      	ldrh	r3, [r3, #22]
 800d788:	88fa      	ldrh	r2, [r7, #6]
 800d78a:	429a      	cmp	r2, r3
 800d78c:	d116      	bne.n	800d7bc <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800d78e:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800d790:	2b00      	cmp	r3, #0
 800d792:	d010      	beq.n	800d7b6 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 800d794:	69bb      	ldr	r3, [r7, #24]
 800d796:	681b      	ldr	r3, [r3, #0]
 800d798:	2b00      	cmp	r3, #0
 800d79a:	d00c      	beq.n	800d7b6 <tcp_bind+0xb2>
 800d79c:	68bb      	ldr	r3, [r7, #8]
 800d79e:	2b00      	cmp	r3, #0
 800d7a0:	d009      	beq.n	800d7b6 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 800d7a2:	68bb      	ldr	r3, [r7, #8]
 800d7a4:	681b      	ldr	r3, [r3, #0]
 800d7a6:	2b00      	cmp	r3, #0
 800d7a8:	d005      	beq.n	800d7b6 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800d7aa:	69bb      	ldr	r3, [r7, #24]
 800d7ac:	681a      	ldr	r2, [r3, #0]
 800d7ae:	68bb      	ldr	r3, [r7, #8]
 800d7b0:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800d7b2:	429a      	cmp	r2, r3
 800d7b4:	d102      	bne.n	800d7bc <tcp_bind+0xb8>
              return ERR_USE;
 800d7b6:	f06f 0307 	mvn.w	r3, #7
 800d7ba:	e029      	b.n	800d810 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800d7bc:	69bb      	ldr	r3, [r7, #24]
 800d7be:	68db      	ldr	r3, [r3, #12]
 800d7c0:	61bb      	str	r3, [r7, #24]
 800d7c2:	69bb      	ldr	r3, [r7, #24]
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d1dd      	bne.n	800d784 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 800d7c8:	69fb      	ldr	r3, [r7, #28]
 800d7ca:	3301      	adds	r3, #1
 800d7cc:	61fb      	str	r3, [r7, #28]
 800d7ce:	69fa      	ldr	r2, [r7, #28]
 800d7d0:	697b      	ldr	r3, [r7, #20]
 800d7d2:	429a      	cmp	r2, r3
 800d7d4:	dbcf      	blt.n	800d776 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800d7d6:	68bb      	ldr	r3, [r7, #8]
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	d00c      	beq.n	800d7f6 <tcp_bind+0xf2>
 800d7dc:	68bb      	ldr	r3, [r7, #8]
 800d7de:	681b      	ldr	r3, [r3, #0]
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	d008      	beq.n	800d7f6 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 800d7e4:	68bb      	ldr	r3, [r7, #8]
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	d002      	beq.n	800d7f0 <tcp_bind+0xec>
 800d7ea:	68bb      	ldr	r3, [r7, #8]
 800d7ec:	681b      	ldr	r3, [r3, #0]
 800d7ee:	e000      	b.n	800d7f2 <tcp_bind+0xee>
 800d7f0:	2300      	movs	r3, #0
 800d7f2:	68fa      	ldr	r2, [r7, #12]
 800d7f4:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800d7f6:	68fb      	ldr	r3, [r7, #12]
 800d7f8:	88fa      	ldrh	r2, [r7, #6]
 800d7fa:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800d7fc:	4b0c      	ldr	r3, [pc, #48]	@ (800d830 <tcp_bind+0x12c>)
 800d7fe:	681a      	ldr	r2, [r3, #0]
 800d800:	68fb      	ldr	r3, [r7, #12]
 800d802:	60da      	str	r2, [r3, #12]
 800d804:	4a0a      	ldr	r2, [pc, #40]	@ (800d830 <tcp_bind+0x12c>)
 800d806:	68fb      	ldr	r3, [r7, #12]
 800d808:	6013      	str	r3, [r2, #0]
 800d80a:	f005 fca7 	bl	801315c <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800d80e:	2300      	movs	r3, #0
}
 800d810:	4618      	mov	r0, r3
 800d812:	3720      	adds	r7, #32
 800d814:	46bd      	mov	sp, r7
 800d816:	bd80      	pop	{r7, pc}
 800d818:	0801b134 	.word	0x0801b134
 800d81c:	080190e8 	.word	0x080190e8
 800d820:	0801927c 	.word	0x0801927c
 800d824:	0801912c 	.word	0x0801912c
 800d828:	08019294 	.word	0x08019294
 800d82c:	0801b10c 	.word	0x0801b10c
 800d830:	2000ed44 	.word	0x2000ed44

0800d834 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800d834:	b580      	push	{r7, lr}
 800d836:	b084      	sub	sp, #16
 800d838:	af00      	add	r7, sp, #0
 800d83a:	60f8      	str	r0, [r7, #12]
 800d83c:	60b9      	str	r1, [r7, #8]
 800d83e:	4613      	mov	r3, r2
 800d840:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 800d842:	68bb      	ldr	r3, [r7, #8]
 800d844:	2b00      	cmp	r3, #0
 800d846:	d106      	bne.n	800d856 <tcp_accept_null+0x22>
 800d848:	4b07      	ldr	r3, [pc, #28]	@ (800d868 <tcp_accept_null+0x34>)
 800d84a:	f240 320f 	movw	r2, #783	@ 0x30f
 800d84e:	4907      	ldr	r1, [pc, #28]	@ (800d86c <tcp_accept_null+0x38>)
 800d850:	4807      	ldr	r0, [pc, #28]	@ (800d870 <tcp_accept_null+0x3c>)
 800d852:	f008 fea5 	bl	80165a0 <iprintf>

  tcp_abort(pcb);
 800d856:	68b8      	ldr	r0, [r7, #8]
 800d858:	f7ff ff48 	bl	800d6ec <tcp_abort>

  return ERR_ABRT;
 800d85c:	f06f 030c 	mvn.w	r3, #12
}
 800d860:	4618      	mov	r0, r3
 800d862:	3710      	adds	r7, #16
 800d864:	46bd      	mov	sp, r7
 800d866:	bd80      	pop	{r7, pc}
 800d868:	080190e8 	.word	0x080190e8
 800d86c:	080192bc 	.word	0x080192bc
 800d870:	0801912c 	.word	0x0801912c

0800d874 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 800d874:	b580      	push	{r7, lr}
 800d876:	b088      	sub	sp, #32
 800d878:	af00      	add	r7, sp, #0
 800d87a:	60f8      	str	r0, [r7, #12]
 800d87c:	460b      	mov	r3, r1
 800d87e:	607a      	str	r2, [r7, #4]
 800d880:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 800d882:	2300      	movs	r3, #0
 800d884:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800d886:	68fb      	ldr	r3, [r7, #12]
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d109      	bne.n	800d8a0 <tcp_listen_with_backlog_and_err+0x2c>
 800d88c:	4b47      	ldr	r3, [pc, #284]	@ (800d9ac <tcp_listen_with_backlog_and_err+0x138>)
 800d88e:	f240 3259 	movw	r2, #857	@ 0x359
 800d892:	4947      	ldr	r1, [pc, #284]	@ (800d9b0 <tcp_listen_with_backlog_and_err+0x13c>)
 800d894:	4847      	ldr	r0, [pc, #284]	@ (800d9b4 <tcp_listen_with_backlog_and_err+0x140>)
 800d896:	f008 fe83 	bl	80165a0 <iprintf>
 800d89a:	23f0      	movs	r3, #240	@ 0xf0
 800d89c:	76fb      	strb	r3, [r7, #27]
 800d89e:	e079      	b.n	800d994 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800d8a0:	68fb      	ldr	r3, [r7, #12]
 800d8a2:	7d1b      	ldrb	r3, [r3, #20]
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	d009      	beq.n	800d8bc <tcp_listen_with_backlog_and_err+0x48>
 800d8a8:	4b40      	ldr	r3, [pc, #256]	@ (800d9ac <tcp_listen_with_backlog_and_err+0x138>)
 800d8aa:	f240 325a 	movw	r2, #858	@ 0x35a
 800d8ae:	4942      	ldr	r1, [pc, #264]	@ (800d9b8 <tcp_listen_with_backlog_and_err+0x144>)
 800d8b0:	4840      	ldr	r0, [pc, #256]	@ (800d9b4 <tcp_listen_with_backlog_and_err+0x140>)
 800d8b2:	f008 fe75 	bl	80165a0 <iprintf>
 800d8b6:	23f1      	movs	r3, #241	@ 0xf1
 800d8b8:	76fb      	strb	r3, [r7, #27]
 800d8ba:	e06b      	b.n	800d994 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 800d8bc:	68fb      	ldr	r3, [r7, #12]
 800d8be:	7d1b      	ldrb	r3, [r3, #20]
 800d8c0:	2b01      	cmp	r3, #1
 800d8c2:	d104      	bne.n	800d8ce <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 800d8c4:	68fb      	ldr	r3, [r7, #12]
 800d8c6:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 800d8c8:	23f7      	movs	r3, #247	@ 0xf7
 800d8ca:	76fb      	strb	r3, [r7, #27]
    goto done;
 800d8cc:	e062      	b.n	800d994 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800d8ce:	2002      	movs	r0, #2
 800d8d0:	f7fe f9e0 	bl	800bc94 <memp_malloc>
 800d8d4:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 800d8d6:	69fb      	ldr	r3, [r7, #28]
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	d102      	bne.n	800d8e2 <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 800d8dc:	23ff      	movs	r3, #255	@ 0xff
 800d8de:	76fb      	strb	r3, [r7, #27]
    goto done;
 800d8e0:	e058      	b.n	800d994 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 800d8e2:	68fb      	ldr	r3, [r7, #12]
 800d8e4:	691a      	ldr	r2, [r3, #16]
 800d8e6:	69fb      	ldr	r3, [r7, #28]
 800d8e8:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 800d8ea:	68fb      	ldr	r3, [r7, #12]
 800d8ec:	8ada      	ldrh	r2, [r3, #22]
 800d8ee:	69fb      	ldr	r3, [r7, #28]
 800d8f0:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 800d8f2:	69fb      	ldr	r3, [r7, #28]
 800d8f4:	2201      	movs	r2, #1
 800d8f6:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 800d8f8:	68fb      	ldr	r3, [r7, #12]
 800d8fa:	7d5a      	ldrb	r2, [r3, #21]
 800d8fc:	69fb      	ldr	r3, [r7, #28]
 800d8fe:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 800d900:	68fb      	ldr	r3, [r7, #12]
 800d902:	7a5a      	ldrb	r2, [r3, #9]
 800d904:	69fb      	ldr	r3, [r7, #28]
 800d906:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 800d908:	69fb      	ldr	r3, [r7, #28]
 800d90a:	2200      	movs	r2, #0
 800d90c:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 800d90e:	68fb      	ldr	r3, [r7, #12]
 800d910:	7ada      	ldrb	r2, [r3, #11]
 800d912:	69fb      	ldr	r3, [r7, #28]
 800d914:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 800d916:	68fb      	ldr	r3, [r7, #12]
 800d918:	7a9a      	ldrb	r2, [r3, #10]
 800d91a:	69fb      	ldr	r3, [r7, #28]
 800d91c:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800d91e:	68fb      	ldr	r3, [r7, #12]
 800d920:	681a      	ldr	r2, [r3, #0]
 800d922:	69fb      	ldr	r3, [r7, #28]
 800d924:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 800d926:	68fb      	ldr	r3, [r7, #12]
 800d928:	8adb      	ldrh	r3, [r3, #22]
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	d021      	beq.n	800d972 <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800d92e:	4b23      	ldr	r3, [pc, #140]	@ (800d9bc <tcp_listen_with_backlog_and_err+0x148>)
 800d930:	681b      	ldr	r3, [r3, #0]
 800d932:	68fa      	ldr	r2, [r7, #12]
 800d934:	429a      	cmp	r2, r3
 800d936:	d105      	bne.n	800d944 <tcp_listen_with_backlog_and_err+0xd0>
 800d938:	4b20      	ldr	r3, [pc, #128]	@ (800d9bc <tcp_listen_with_backlog_and_err+0x148>)
 800d93a:	681b      	ldr	r3, [r3, #0]
 800d93c:	68db      	ldr	r3, [r3, #12]
 800d93e:	4a1f      	ldr	r2, [pc, #124]	@ (800d9bc <tcp_listen_with_backlog_and_err+0x148>)
 800d940:	6013      	str	r3, [r2, #0]
 800d942:	e013      	b.n	800d96c <tcp_listen_with_backlog_and_err+0xf8>
 800d944:	4b1d      	ldr	r3, [pc, #116]	@ (800d9bc <tcp_listen_with_backlog_and_err+0x148>)
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	617b      	str	r3, [r7, #20]
 800d94a:	e00c      	b.n	800d966 <tcp_listen_with_backlog_and_err+0xf2>
 800d94c:	697b      	ldr	r3, [r7, #20]
 800d94e:	68db      	ldr	r3, [r3, #12]
 800d950:	68fa      	ldr	r2, [r7, #12]
 800d952:	429a      	cmp	r2, r3
 800d954:	d104      	bne.n	800d960 <tcp_listen_with_backlog_and_err+0xec>
 800d956:	68fb      	ldr	r3, [r7, #12]
 800d958:	68da      	ldr	r2, [r3, #12]
 800d95a:	697b      	ldr	r3, [r7, #20]
 800d95c:	60da      	str	r2, [r3, #12]
 800d95e:	e005      	b.n	800d96c <tcp_listen_with_backlog_and_err+0xf8>
 800d960:	697b      	ldr	r3, [r7, #20]
 800d962:	68db      	ldr	r3, [r3, #12]
 800d964:	617b      	str	r3, [r7, #20]
 800d966:	697b      	ldr	r3, [r7, #20]
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d1ef      	bne.n	800d94c <tcp_listen_with_backlog_and_err+0xd8>
 800d96c:	68fb      	ldr	r3, [r7, #12]
 800d96e:	2200      	movs	r2, #0
 800d970:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 800d972:	68f8      	ldr	r0, [r7, #12]
 800d974:	f7ff fb76 	bl	800d064 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 800d978:	69fb      	ldr	r3, [r7, #28]
 800d97a:	4a11      	ldr	r2, [pc, #68]	@ (800d9c0 <tcp_listen_with_backlog_and_err+0x14c>)
 800d97c:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800d97e:	4b11      	ldr	r3, [pc, #68]	@ (800d9c4 <tcp_listen_with_backlog_and_err+0x150>)
 800d980:	681a      	ldr	r2, [r3, #0]
 800d982:	69fb      	ldr	r3, [r7, #28]
 800d984:	60da      	str	r2, [r3, #12]
 800d986:	4a0f      	ldr	r2, [pc, #60]	@ (800d9c4 <tcp_listen_with_backlog_and_err+0x150>)
 800d988:	69fb      	ldr	r3, [r7, #28]
 800d98a:	6013      	str	r3, [r2, #0]
 800d98c:	f005 fbe6 	bl	801315c <tcp_timer_needed>
  res = ERR_OK;
 800d990:	2300      	movs	r3, #0
 800d992:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	2b00      	cmp	r3, #0
 800d998:	d002      	beq.n	800d9a0 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	7efa      	ldrb	r2, [r7, #27]
 800d99e:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 800d9a0:	69fb      	ldr	r3, [r7, #28]
}
 800d9a2:	4618      	mov	r0, r3
 800d9a4:	3720      	adds	r7, #32
 800d9a6:	46bd      	mov	sp, r7
 800d9a8:	bd80      	pop	{r7, pc}
 800d9aa:	bf00      	nop
 800d9ac:	080190e8 	.word	0x080190e8
 800d9b0:	080192dc 	.word	0x080192dc
 800d9b4:	0801912c 	.word	0x0801912c
 800d9b8:	0801930c 	.word	0x0801930c
 800d9bc:	2000ed44 	.word	0x2000ed44
 800d9c0:	0800d835 	.word	0x0800d835
 800d9c4:	2000ed48 	.word	0x2000ed48

0800d9c8 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800d9c8:	b580      	push	{r7, lr}
 800d9ca:	b084      	sub	sp, #16
 800d9cc:	af00      	add	r7, sp, #0
 800d9ce:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	d106      	bne.n	800d9e4 <tcp_update_rcv_ann_wnd+0x1c>
 800d9d6:	4b25      	ldr	r3, [pc, #148]	@ (800da6c <tcp_update_rcv_ann_wnd+0xa4>)
 800d9d8:	f240 32a6 	movw	r2, #934	@ 0x3a6
 800d9dc:	4924      	ldr	r1, [pc, #144]	@ (800da70 <tcp_update_rcv_ann_wnd+0xa8>)
 800d9de:	4825      	ldr	r0, [pc, #148]	@ (800da74 <tcp_update_rcv_ann_wnd+0xac>)
 800d9e0:	f008 fdde 	bl	80165a0 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d9e8:	687a      	ldr	r2, [r7, #4]
 800d9ea:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800d9ec:	4413      	add	r3, r2
 800d9ee:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d9f4:	687a      	ldr	r2, [r7, #4]
 800d9f6:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 800d9f8:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 800d9fc:	bf28      	it	cs
 800d9fe:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 800da02:	b292      	uxth	r2, r2
 800da04:	4413      	add	r3, r2
 800da06:	68fa      	ldr	r2, [r7, #12]
 800da08:	1ad3      	subs	r3, r2, r3
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	db08      	blt.n	800da20 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800da1a:	68fa      	ldr	r2, [r7, #12]
 800da1c:	1ad3      	subs	r3, r2, r3
 800da1e:	e020      	b.n	800da62 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800da28:	1ad3      	subs	r3, r2, r3
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	dd03      	ble.n	800da36 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	2200      	movs	r2, #0
 800da32:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800da34:	e014      	b.n	800da60 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800da3e:	1ad3      	subs	r3, r2, r3
 800da40:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800da42:	68bb      	ldr	r3, [r7, #8]
 800da44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800da48:	d306      	bcc.n	800da58 <tcp_update_rcv_ann_wnd+0x90>
 800da4a:	4b08      	ldr	r3, [pc, #32]	@ (800da6c <tcp_update_rcv_ann_wnd+0xa4>)
 800da4c:	f240 32b6 	movw	r2, #950	@ 0x3b6
 800da50:	4909      	ldr	r1, [pc, #36]	@ (800da78 <tcp_update_rcv_ann_wnd+0xb0>)
 800da52:	4808      	ldr	r0, [pc, #32]	@ (800da74 <tcp_update_rcv_ann_wnd+0xac>)
 800da54:	f008 fda4 	bl	80165a0 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800da58:	68bb      	ldr	r3, [r7, #8]
 800da5a:	b29a      	uxth	r2, r3
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 800da60:	2300      	movs	r3, #0
  }
}
 800da62:	4618      	mov	r0, r3
 800da64:	3710      	adds	r7, #16
 800da66:	46bd      	mov	sp, r7
 800da68:	bd80      	pop	{r7, pc}
 800da6a:	bf00      	nop
 800da6c:	080190e8 	.word	0x080190e8
 800da70:	08019344 	.word	0x08019344
 800da74:	0801912c 	.word	0x0801912c
 800da78:	08019368 	.word	0x08019368

0800da7c <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800da7c:	b580      	push	{r7, lr}
 800da7e:	b084      	sub	sp, #16
 800da80:	af00      	add	r7, sp, #0
 800da82:	6078      	str	r0, [r7, #4]
 800da84:	460b      	mov	r3, r1
 800da86:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	d107      	bne.n	800da9e <tcp_recved+0x22>
 800da8e:	4b1f      	ldr	r3, [pc, #124]	@ (800db0c <tcp_recved+0x90>)
 800da90:	f240 32cf 	movw	r2, #975	@ 0x3cf
 800da94:	491e      	ldr	r1, [pc, #120]	@ (800db10 <tcp_recved+0x94>)
 800da96:	481f      	ldr	r0, [pc, #124]	@ (800db14 <tcp_recved+0x98>)
 800da98:	f008 fd82 	bl	80165a0 <iprintf>
 800da9c:	e032      	b.n	800db04 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	7d1b      	ldrb	r3, [r3, #20]
 800daa2:	2b01      	cmp	r3, #1
 800daa4:	d106      	bne.n	800dab4 <tcp_recved+0x38>
 800daa6:	4b19      	ldr	r3, [pc, #100]	@ (800db0c <tcp_recved+0x90>)
 800daa8:	f240 32d2 	movw	r2, #978	@ 0x3d2
 800daac:	491a      	ldr	r1, [pc, #104]	@ (800db18 <tcp_recved+0x9c>)
 800daae:	4819      	ldr	r0, [pc, #100]	@ (800db14 <tcp_recved+0x98>)
 800dab0:	f008 fd76 	bl	80165a0 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800dab8:	887b      	ldrh	r3, [r7, #2]
 800daba:	4413      	add	r3, r2
 800dabc:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800dabe:	89fb      	ldrh	r3, [r7, #14]
 800dac0:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800dac4:	d804      	bhi.n	800dad0 <tcp_recved+0x54>
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800daca:	89fa      	ldrh	r2, [r7, #14]
 800dacc:	429a      	cmp	r2, r3
 800dace:	d204      	bcs.n	800dada <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800dad6:	851a      	strh	r2, [r3, #40]	@ 0x28
 800dad8:	e002      	b.n	800dae0 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	89fa      	ldrh	r2, [r7, #14]
 800dade:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800dae0:	6878      	ldr	r0, [r7, #4]
 800dae2:	f7ff ff71 	bl	800d9c8 <tcp_update_rcv_ann_wnd>
 800dae6:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800dae8:	68bb      	ldr	r3, [r7, #8]
 800daea:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 800daee:	d309      	bcc.n	800db04 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	8b5b      	ldrh	r3, [r3, #26]
 800daf4:	f043 0302 	orr.w	r3, r3, #2
 800daf8:	b29a      	uxth	r2, r3
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800dafe:	6878      	ldr	r0, [r7, #4]
 800db00:	f004 fbb6 	bl	8012270 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800db04:	3710      	adds	r7, #16
 800db06:	46bd      	mov	sp, r7
 800db08:	bd80      	pop	{r7, pc}
 800db0a:	bf00      	nop
 800db0c:	080190e8 	.word	0x080190e8
 800db10:	08019384 	.word	0x08019384
 800db14:	0801912c 	.word	0x0801912c
 800db18:	0801939c 	.word	0x0801939c

0800db1c <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800db1c:	b480      	push	{r7}
 800db1e:	b083      	sub	sp, #12
 800db20:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800db22:	2300      	movs	r3, #0
 800db24:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800db26:	4b1e      	ldr	r3, [pc, #120]	@ (800dba0 <tcp_new_port+0x84>)
 800db28:	881b      	ldrh	r3, [r3, #0]
 800db2a:	3301      	adds	r3, #1
 800db2c:	b29a      	uxth	r2, r3
 800db2e:	4b1c      	ldr	r3, [pc, #112]	@ (800dba0 <tcp_new_port+0x84>)
 800db30:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800db32:	4b1b      	ldr	r3, [pc, #108]	@ (800dba0 <tcp_new_port+0x84>)
 800db34:	881b      	ldrh	r3, [r3, #0]
 800db36:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800db3a:	4293      	cmp	r3, r2
 800db3c:	d103      	bne.n	800db46 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800db3e:	4b18      	ldr	r3, [pc, #96]	@ (800dba0 <tcp_new_port+0x84>)
 800db40:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 800db44:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800db46:	2300      	movs	r3, #0
 800db48:	71fb      	strb	r3, [r7, #7]
 800db4a:	e01e      	b.n	800db8a <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800db4c:	79fb      	ldrb	r3, [r7, #7]
 800db4e:	4a15      	ldr	r2, [pc, #84]	@ (800dba4 <tcp_new_port+0x88>)
 800db50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800db54:	681b      	ldr	r3, [r3, #0]
 800db56:	603b      	str	r3, [r7, #0]
 800db58:	e011      	b.n	800db7e <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800db5a:	683b      	ldr	r3, [r7, #0]
 800db5c:	8ada      	ldrh	r2, [r3, #22]
 800db5e:	4b10      	ldr	r3, [pc, #64]	@ (800dba0 <tcp_new_port+0x84>)
 800db60:	881b      	ldrh	r3, [r3, #0]
 800db62:	429a      	cmp	r2, r3
 800db64:	d108      	bne.n	800db78 <tcp_new_port+0x5c>
        n++;
 800db66:	88bb      	ldrh	r3, [r7, #4]
 800db68:	3301      	adds	r3, #1
 800db6a:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800db6c:	88bb      	ldrh	r3, [r7, #4]
 800db6e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800db72:	d3d8      	bcc.n	800db26 <tcp_new_port+0xa>
          return 0;
 800db74:	2300      	movs	r3, #0
 800db76:	e00d      	b.n	800db94 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800db78:	683b      	ldr	r3, [r7, #0]
 800db7a:	68db      	ldr	r3, [r3, #12]
 800db7c:	603b      	str	r3, [r7, #0]
 800db7e:	683b      	ldr	r3, [r7, #0]
 800db80:	2b00      	cmp	r3, #0
 800db82:	d1ea      	bne.n	800db5a <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800db84:	79fb      	ldrb	r3, [r7, #7]
 800db86:	3301      	adds	r3, #1
 800db88:	71fb      	strb	r3, [r7, #7]
 800db8a:	79fb      	ldrb	r3, [r7, #7]
 800db8c:	2b03      	cmp	r3, #3
 800db8e:	d9dd      	bls.n	800db4c <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800db90:	4b03      	ldr	r3, [pc, #12]	@ (800dba0 <tcp_new_port+0x84>)
 800db92:	881b      	ldrh	r3, [r3, #0]
}
 800db94:	4618      	mov	r0, r3
 800db96:	370c      	adds	r7, #12
 800db98:	46bd      	mov	sp, r7
 800db9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db9e:	4770      	bx	lr
 800dba0:	20000024 	.word	0x20000024
 800dba4:	0801b10c 	.word	0x0801b10c

0800dba8 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800dba8:	b5b0      	push	{r4, r5, r7, lr}
 800dbaa:	b090      	sub	sp, #64	@ 0x40
 800dbac:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800dbae:	2300      	movs	r3, #0
 800dbb0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 800dbb4:	4b95      	ldr	r3, [pc, #596]	@ (800de0c <tcp_slowtmr+0x264>)
 800dbb6:	681b      	ldr	r3, [r3, #0]
 800dbb8:	3301      	adds	r3, #1
 800dbba:	4a94      	ldr	r2, [pc, #592]	@ (800de0c <tcp_slowtmr+0x264>)
 800dbbc:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800dbbe:	4b94      	ldr	r3, [pc, #592]	@ (800de10 <tcp_slowtmr+0x268>)
 800dbc0:	781b      	ldrb	r3, [r3, #0]
 800dbc2:	3301      	adds	r3, #1
 800dbc4:	b2da      	uxtb	r2, r3
 800dbc6:	4b92      	ldr	r3, [pc, #584]	@ (800de10 <tcp_slowtmr+0x268>)
 800dbc8:	701a      	strb	r2, [r3, #0]
 800dbca:	e000      	b.n	800dbce <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 800dbcc:	bf00      	nop
  prev = NULL;
 800dbce:	2300      	movs	r3, #0
 800dbd0:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 800dbd2:	4b90      	ldr	r3, [pc, #576]	@ (800de14 <tcp_slowtmr+0x26c>)
 800dbd4:	681b      	ldr	r3, [r3, #0]
 800dbd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800dbd8:	e2b7      	b.n	800e14a <tcp_slowtmr+0x5a2>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800dbda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dbdc:	7d1b      	ldrb	r3, [r3, #20]
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	d106      	bne.n	800dbf0 <tcp_slowtmr+0x48>
 800dbe2:	4b8d      	ldr	r3, [pc, #564]	@ (800de18 <tcp_slowtmr+0x270>)
 800dbe4:	f240 42be 	movw	r2, #1214	@ 0x4be
 800dbe8:	498c      	ldr	r1, [pc, #560]	@ (800de1c <tcp_slowtmr+0x274>)
 800dbea:	488d      	ldr	r0, [pc, #564]	@ (800de20 <tcp_slowtmr+0x278>)
 800dbec:	f008 fcd8 	bl	80165a0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800dbf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dbf2:	7d1b      	ldrb	r3, [r3, #20]
 800dbf4:	2b01      	cmp	r3, #1
 800dbf6:	d106      	bne.n	800dc06 <tcp_slowtmr+0x5e>
 800dbf8:	4b87      	ldr	r3, [pc, #540]	@ (800de18 <tcp_slowtmr+0x270>)
 800dbfa:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 800dbfe:	4989      	ldr	r1, [pc, #548]	@ (800de24 <tcp_slowtmr+0x27c>)
 800dc00:	4887      	ldr	r0, [pc, #540]	@ (800de20 <tcp_slowtmr+0x278>)
 800dc02:	f008 fccd 	bl	80165a0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800dc06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc08:	7d1b      	ldrb	r3, [r3, #20]
 800dc0a:	2b0a      	cmp	r3, #10
 800dc0c:	d106      	bne.n	800dc1c <tcp_slowtmr+0x74>
 800dc0e:	4b82      	ldr	r3, [pc, #520]	@ (800de18 <tcp_slowtmr+0x270>)
 800dc10:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 800dc14:	4984      	ldr	r1, [pc, #528]	@ (800de28 <tcp_slowtmr+0x280>)
 800dc16:	4882      	ldr	r0, [pc, #520]	@ (800de20 <tcp_slowtmr+0x278>)
 800dc18:	f008 fcc2 	bl	80165a0 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800dc1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc1e:	7f9a      	ldrb	r2, [r3, #30]
 800dc20:	4b7b      	ldr	r3, [pc, #492]	@ (800de10 <tcp_slowtmr+0x268>)
 800dc22:	781b      	ldrb	r3, [r3, #0]
 800dc24:	429a      	cmp	r2, r3
 800dc26:	d105      	bne.n	800dc34 <tcp_slowtmr+0x8c>
      prev = pcb;
 800dc28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc2a:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800dc2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc2e:	68db      	ldr	r3, [r3, #12]
 800dc30:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 800dc32:	e28a      	b.n	800e14a <tcp_slowtmr+0x5a2>
    pcb->last_timer = tcp_timer_ctr;
 800dc34:	4b76      	ldr	r3, [pc, #472]	@ (800de10 <tcp_slowtmr+0x268>)
 800dc36:	781a      	ldrb	r2, [r3, #0]
 800dc38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc3a:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 800dc3c:	2300      	movs	r3, #0
 800dc3e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 800dc42:	2300      	movs	r3, #0
 800dc44:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800dc48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc4a:	7d1b      	ldrb	r3, [r3, #20]
 800dc4c:	2b02      	cmp	r3, #2
 800dc4e:	d10a      	bne.n	800dc66 <tcp_slowtmr+0xbe>
 800dc50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc52:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800dc56:	2b05      	cmp	r3, #5
 800dc58:	d905      	bls.n	800dc66 <tcp_slowtmr+0xbe>
      ++pcb_remove;
 800dc5a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800dc5e:	3301      	adds	r3, #1
 800dc60:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800dc64:	e11e      	b.n	800dea4 <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800dc66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc68:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800dc6c:	2b0b      	cmp	r3, #11
 800dc6e:	d905      	bls.n	800dc7c <tcp_slowtmr+0xd4>
      ++pcb_remove;
 800dc70:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800dc74:	3301      	adds	r3, #1
 800dc76:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800dc7a:	e113      	b.n	800dea4 <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 800dc7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc7e:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	d075      	beq.n	800dd72 <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800dc86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	d006      	beq.n	800dc9c <tcp_slowtmr+0xf4>
 800dc8e:	4b62      	ldr	r3, [pc, #392]	@ (800de18 <tcp_slowtmr+0x270>)
 800dc90:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 800dc94:	4965      	ldr	r1, [pc, #404]	@ (800de2c <tcp_slowtmr+0x284>)
 800dc96:	4862      	ldr	r0, [pc, #392]	@ (800de20 <tcp_slowtmr+0x278>)
 800dc98:	f008 fc82 	bl	80165a0 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800dc9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc9e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800dca0:	2b00      	cmp	r3, #0
 800dca2:	d106      	bne.n	800dcb2 <tcp_slowtmr+0x10a>
 800dca4:	4b5c      	ldr	r3, [pc, #368]	@ (800de18 <tcp_slowtmr+0x270>)
 800dca6:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 800dcaa:	4961      	ldr	r1, [pc, #388]	@ (800de30 <tcp_slowtmr+0x288>)
 800dcac:	485c      	ldr	r0, [pc, #368]	@ (800de20 <tcp_slowtmr+0x278>)
 800dcae:	f008 fc77 	bl	80165a0 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800dcb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dcb4:	f893 30a2 	ldrb.w	r3, [r3, #162]	@ 0xa2
 800dcb8:	2b0b      	cmp	r3, #11
 800dcba:	d905      	bls.n	800dcc8 <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 800dcbc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800dcc0:	3301      	adds	r3, #1
 800dcc2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800dcc6:	e0ed      	b.n	800dea4 <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800dcc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dcca:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 800dcce:	3b01      	subs	r3, #1
 800dcd0:	4a58      	ldr	r2, [pc, #352]	@ (800de34 <tcp_slowtmr+0x28c>)
 800dcd2:	5cd3      	ldrb	r3, [r2, r3]
 800dcd4:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800dcd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dcd8:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 800dcdc:	7c7a      	ldrb	r2, [r7, #17]
 800dcde:	429a      	cmp	r2, r3
 800dce0:	d907      	bls.n	800dcf2 <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 800dce2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dce4:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 800dce8:	3301      	adds	r3, #1
 800dcea:	b2da      	uxtb	r2, r3
 800dcec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dcee:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
          if (pcb->persist_cnt >= backoff_cnt) {
 800dcf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dcf4:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 800dcf8:	7c7a      	ldrb	r2, [r7, #17]
 800dcfa:	429a      	cmp	r2, r3
 800dcfc:	f200 80d2 	bhi.w	800dea4 <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 800dd00:	2301      	movs	r3, #1
 800dd02:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 800dd04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd06:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800dd0a:	2b00      	cmp	r3, #0
 800dd0c:	d108      	bne.n	800dd20 <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800dd0e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800dd10:	f005 f956 	bl	8012fc0 <tcp_zero_window_probe>
 800dd14:	4603      	mov	r3, r0
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	d014      	beq.n	800dd44 <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 800dd1a:	2300      	movs	r3, #0
 800dd1c:	623b      	str	r3, [r7, #32]
 800dd1e:	e011      	b.n	800dd44 <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800dd20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd22:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800dd26:	4619      	mov	r1, r3
 800dd28:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800dd2a:	f004 f81b 	bl	8011d64 <tcp_split_unsent_seg>
 800dd2e:	4603      	mov	r3, r0
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	d107      	bne.n	800dd44 <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 800dd34:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800dd36:	f004 fa9b 	bl	8012270 <tcp_output>
 800dd3a:	4603      	mov	r3, r0
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	d101      	bne.n	800dd44 <tcp_slowtmr+0x19c>
                  next_slot = 0;
 800dd40:	2300      	movs	r3, #0
 800dd42:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 800dd44:	6a3b      	ldr	r3, [r7, #32]
 800dd46:	2b00      	cmp	r3, #0
 800dd48:	f000 80ac 	beq.w	800dea4 <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 800dd4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd4e:	2200      	movs	r2, #0
 800dd50:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800dd54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd56:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 800dd5a:	2b06      	cmp	r3, #6
 800dd5c:	f200 80a2 	bhi.w	800dea4 <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 800dd60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd62:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 800dd66:	3301      	adds	r3, #1
 800dd68:	b2da      	uxtb	r2, r3
 800dd6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd6c:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1
 800dd70:	e098      	b.n	800dea4 <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800dd72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd74:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800dd78:	2b00      	cmp	r3, #0
 800dd7a:	db0f      	blt.n	800dd9c <tcp_slowtmr+0x1f4>
 800dd7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd7e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800dd82:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800dd86:	4293      	cmp	r3, r2
 800dd88:	d008      	beq.n	800dd9c <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 800dd8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd8c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800dd90:	b29b      	uxth	r3, r3
 800dd92:	3301      	adds	r3, #1
 800dd94:	b29b      	uxth	r3, r3
 800dd96:	b21a      	sxth	r2, r3
 800dd98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd9a:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 800dd9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd9e:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 800dda2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dda4:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800dda8:	429a      	cmp	r2, r3
 800ddaa:	db7b      	blt.n	800dea4 <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800ddac:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ddae:	f004 fd53 	bl	8012858 <tcp_rexmit_rto_prepare>
 800ddb2:	4603      	mov	r3, r0
 800ddb4:	2b00      	cmp	r3, #0
 800ddb6:	d007      	beq.n	800ddc8 <tcp_slowtmr+0x220>
 800ddb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ddba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ddbc:	2b00      	cmp	r3, #0
 800ddbe:	d171      	bne.n	800dea4 <tcp_slowtmr+0x2fc>
 800ddc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ddc2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	d06d      	beq.n	800dea4 <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 800ddc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ddca:	7d1b      	ldrb	r3, [r3, #20]
 800ddcc:	2b02      	cmp	r3, #2
 800ddce:	d03a      	beq.n	800de46 <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800ddd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ddd2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800ddd6:	2b0c      	cmp	r3, #12
 800ddd8:	bf28      	it	cs
 800ddda:	230c      	movcs	r3, #12
 800dddc:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800ddde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dde0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800dde4:	10db      	asrs	r3, r3, #3
 800dde6:	b21b      	sxth	r3, r3
 800dde8:	461a      	mov	r2, r3
 800ddea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ddec:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800ddf0:	4413      	add	r3, r2
 800ddf2:	7efa      	ldrb	r2, [r7, #27]
 800ddf4:	4910      	ldr	r1, [pc, #64]	@ (800de38 <tcp_slowtmr+0x290>)
 800ddf6:	5c8a      	ldrb	r2, [r1, r2]
 800ddf8:	4093      	lsls	r3, r2
 800ddfa:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800ddfc:	697b      	ldr	r3, [r7, #20]
 800ddfe:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 800de02:	4293      	cmp	r3, r2
 800de04:	dc1a      	bgt.n	800de3c <tcp_slowtmr+0x294>
 800de06:	697b      	ldr	r3, [r7, #20]
 800de08:	b21a      	sxth	r2, r3
 800de0a:	e019      	b.n	800de40 <tcp_slowtmr+0x298>
 800de0c:	2000ed40 	.word	0x2000ed40
 800de10:	2000ed56 	.word	0x2000ed56
 800de14:	2000ed4c 	.word	0x2000ed4c
 800de18:	080190e8 	.word	0x080190e8
 800de1c:	0801942c 	.word	0x0801942c
 800de20:	0801912c 	.word	0x0801912c
 800de24:	08019458 	.word	0x08019458
 800de28:	08019484 	.word	0x08019484
 800de2c:	080194b4 	.word	0x080194b4
 800de30:	080194e8 	.word	0x080194e8
 800de34:	0801b104 	.word	0x0801b104
 800de38:	0801b0f4 	.word	0x0801b0f4
 800de3c:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800de40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de42:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 800de46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de48:	2200      	movs	r2, #0
 800de4a:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800de4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de4e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800de52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de54:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800de58:	4293      	cmp	r3, r2
 800de5a:	bf28      	it	cs
 800de5c:	4613      	movcs	r3, r2
 800de5e:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800de60:	8a7b      	ldrh	r3, [r7, #18]
 800de62:	085b      	lsrs	r3, r3, #1
 800de64:	b29a      	uxth	r2, r3
 800de66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de68:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800de6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de6e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800de72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de74:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800de76:	005b      	lsls	r3, r3, #1
 800de78:	b29b      	uxth	r3, r3
 800de7a:	429a      	cmp	r2, r3
 800de7c:	d206      	bcs.n	800de8c <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800de7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de80:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800de82:	005b      	lsls	r3, r3, #1
 800de84:	b29a      	uxth	r2, r3
 800de86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de88:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 800de8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de8e:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 800de90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de92:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 800de96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de98:	2200      	movs	r2, #0
 800de9a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 800de9e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800dea0:	f004 fd4a 	bl	8012938 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 800dea4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dea6:	7d1b      	ldrb	r3, [r3, #20]
 800dea8:	2b06      	cmp	r3, #6
 800deaa:	d111      	bne.n	800ded0 <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 800deac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800deae:	8b5b      	ldrh	r3, [r3, #26]
 800deb0:	f003 0310 	and.w	r3, r3, #16
 800deb4:	2b00      	cmp	r3, #0
 800deb6:	d00b      	beq.n	800ded0 <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800deb8:	4b94      	ldr	r3, [pc, #592]	@ (800e10c <tcp_slowtmr+0x564>)
 800deba:	681a      	ldr	r2, [r3, #0]
 800debc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800debe:	6a1b      	ldr	r3, [r3, #32]
 800dec0:	1ad3      	subs	r3, r2, r3
 800dec2:	2b28      	cmp	r3, #40	@ 0x28
 800dec4:	d904      	bls.n	800ded0 <tcp_slowtmr+0x328>
          ++pcb_remove;
 800dec6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800deca:	3301      	adds	r3, #1
 800decc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800ded0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ded2:	7a5b      	ldrb	r3, [r3, #9]
 800ded4:	f003 0308 	and.w	r3, r3, #8
 800ded8:	2b00      	cmp	r3, #0
 800deda:	d053      	beq.n	800df84 <tcp_slowtmr+0x3dc>
        ((pcb->state == ESTABLISHED) ||
 800dedc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dede:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800dee0:	2b04      	cmp	r3, #4
 800dee2:	d003      	beq.n	800deec <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 800dee4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dee6:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800dee8:	2b07      	cmp	r3, #7
 800deea:	d14b      	bne.n	800df84 <tcp_slowtmr+0x3dc>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800deec:	4b87      	ldr	r3, [pc, #540]	@ (800e10c <tcp_slowtmr+0x564>)
 800deee:	681a      	ldr	r2, [r3, #0]
 800def0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800def2:	6a1b      	ldr	r3, [r3, #32]
 800def4:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800def6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800def8:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 800defc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800defe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800df02:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800df04:	f8d0 0098 	ldr.w	r0, [r0, #152]	@ 0x98
 800df08:	fb00 f303 	mul.w	r3, r0, r3
 800df0c:	440b      	add	r3, r1
 800df0e:	4980      	ldr	r1, [pc, #512]	@ (800e110 <tcp_slowtmr+0x568>)
 800df10:	fba1 1303 	umull	r1, r3, r1, r3
 800df14:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800df16:	429a      	cmp	r2, r3
 800df18:	d90a      	bls.n	800df30 <tcp_slowtmr+0x388>
        ++pcb_remove;
 800df1a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800df1e:	3301      	adds	r3, #1
 800df20:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 800df24:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800df28:	3301      	adds	r3, #1
 800df2a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800df2e:	e029      	b.n	800df84 <tcp_slowtmr+0x3dc>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800df30:	4b76      	ldr	r3, [pc, #472]	@ (800e10c <tcp_slowtmr+0x564>)
 800df32:	681a      	ldr	r2, [r3, #0]
 800df34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df36:	6a1b      	ldr	r3, [r3, #32]
 800df38:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800df3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df3c:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 800df40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df42:	f893 30a3 	ldrb.w	r3, [r3, #163]	@ 0xa3
 800df46:	4618      	mov	r0, r3
 800df48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df4a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800df4e:	fb00 f303 	mul.w	r3, r0, r3
 800df52:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800df54:	496e      	ldr	r1, [pc, #440]	@ (800e110 <tcp_slowtmr+0x568>)
 800df56:	fba1 1303 	umull	r1, r3, r1, r3
 800df5a:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800df5c:	429a      	cmp	r2, r3
 800df5e:	d911      	bls.n	800df84 <tcp_slowtmr+0x3dc>
        err = tcp_keepalive(pcb);
 800df60:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800df62:	f004 ffed 	bl	8012f40 <tcp_keepalive>
 800df66:	4603      	mov	r3, r0
 800df68:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 800df6c:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800df70:	2b00      	cmp	r3, #0
 800df72:	d107      	bne.n	800df84 <tcp_slowtmr+0x3dc>
          pcb->keep_cnt_sent++;
 800df74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df76:	f893 30a3 	ldrb.w	r3, [r3, #163]	@ 0xa3
 800df7a:	3301      	adds	r3, #1
 800df7c:	b2da      	uxtb	r2, r3
 800df7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df80:	f883 20a3 	strb.w	r2, [r3, #163]	@ 0xa3
    if (pcb->ooseq != NULL &&
 800df84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df86:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800df88:	2b00      	cmp	r3, #0
 800df8a:	d011      	beq.n	800dfb0 <tcp_slowtmr+0x408>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800df8c:	4b5f      	ldr	r3, [pc, #380]	@ (800e10c <tcp_slowtmr+0x564>)
 800df8e:	681a      	ldr	r2, [r3, #0]
 800df90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df92:	6a1b      	ldr	r3, [r3, #32]
 800df94:	1ad2      	subs	r2, r2, r3
 800df96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df98:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800df9c:	4619      	mov	r1, r3
 800df9e:	460b      	mov	r3, r1
 800dfa0:	005b      	lsls	r3, r3, #1
 800dfa2:	440b      	add	r3, r1
 800dfa4:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800dfa6:	429a      	cmp	r2, r3
 800dfa8:	d302      	bcc.n	800dfb0 <tcp_slowtmr+0x408>
      tcp_free_ooseq(pcb);
 800dfaa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800dfac:	f000 feae 	bl	800ed0c <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 800dfb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dfb2:	7d1b      	ldrb	r3, [r3, #20]
 800dfb4:	2b03      	cmp	r3, #3
 800dfb6:	d10b      	bne.n	800dfd0 <tcp_slowtmr+0x428>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800dfb8:	4b54      	ldr	r3, [pc, #336]	@ (800e10c <tcp_slowtmr+0x564>)
 800dfba:	681a      	ldr	r2, [r3, #0]
 800dfbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dfbe:	6a1b      	ldr	r3, [r3, #32]
 800dfc0:	1ad3      	subs	r3, r2, r3
 800dfc2:	2b28      	cmp	r3, #40	@ 0x28
 800dfc4:	d904      	bls.n	800dfd0 <tcp_slowtmr+0x428>
        ++pcb_remove;
 800dfc6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800dfca:	3301      	adds	r3, #1
 800dfcc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 800dfd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dfd2:	7d1b      	ldrb	r3, [r3, #20]
 800dfd4:	2b09      	cmp	r3, #9
 800dfd6:	d10b      	bne.n	800dff0 <tcp_slowtmr+0x448>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800dfd8:	4b4c      	ldr	r3, [pc, #304]	@ (800e10c <tcp_slowtmr+0x564>)
 800dfda:	681a      	ldr	r2, [r3, #0]
 800dfdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dfde:	6a1b      	ldr	r3, [r3, #32]
 800dfe0:	1ad3      	subs	r3, r2, r3
 800dfe2:	2bf0      	cmp	r3, #240	@ 0xf0
 800dfe4:	d904      	bls.n	800dff0 <tcp_slowtmr+0x448>
        ++pcb_remove;
 800dfe6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800dfea:	3301      	adds	r3, #1
 800dfec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 800dff0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	d060      	beq.n	800e0ba <tcp_slowtmr+0x512>
      tcp_err_fn err_fn = pcb->errf;
 800dff8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dffa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800dffe:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 800e000:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e002:	f000 fccf 	bl	800e9a4 <tcp_pcb_purge>
      if (prev != NULL) {
 800e006:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e008:	2b00      	cmp	r3, #0
 800e00a:	d010      	beq.n	800e02e <tcp_slowtmr+0x486>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800e00c:	4b41      	ldr	r3, [pc, #260]	@ (800e114 <tcp_slowtmr+0x56c>)
 800e00e:	681b      	ldr	r3, [r3, #0]
 800e010:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e012:	429a      	cmp	r2, r3
 800e014:	d106      	bne.n	800e024 <tcp_slowtmr+0x47c>
 800e016:	4b40      	ldr	r3, [pc, #256]	@ (800e118 <tcp_slowtmr+0x570>)
 800e018:	f240 526d 	movw	r2, #1389	@ 0x56d
 800e01c:	493f      	ldr	r1, [pc, #252]	@ (800e11c <tcp_slowtmr+0x574>)
 800e01e:	4840      	ldr	r0, [pc, #256]	@ (800e120 <tcp_slowtmr+0x578>)
 800e020:	f008 fabe 	bl	80165a0 <iprintf>
        prev->next = pcb->next;
 800e024:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e026:	68da      	ldr	r2, [r3, #12]
 800e028:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e02a:	60da      	str	r2, [r3, #12]
 800e02c:	e00f      	b.n	800e04e <tcp_slowtmr+0x4a6>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800e02e:	4b39      	ldr	r3, [pc, #228]	@ (800e114 <tcp_slowtmr+0x56c>)
 800e030:	681b      	ldr	r3, [r3, #0]
 800e032:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e034:	429a      	cmp	r2, r3
 800e036:	d006      	beq.n	800e046 <tcp_slowtmr+0x49e>
 800e038:	4b37      	ldr	r3, [pc, #220]	@ (800e118 <tcp_slowtmr+0x570>)
 800e03a:	f240 5271 	movw	r2, #1393	@ 0x571
 800e03e:	4939      	ldr	r1, [pc, #228]	@ (800e124 <tcp_slowtmr+0x57c>)
 800e040:	4837      	ldr	r0, [pc, #220]	@ (800e120 <tcp_slowtmr+0x578>)
 800e042:	f008 faad 	bl	80165a0 <iprintf>
        tcp_active_pcbs = pcb->next;
 800e046:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e048:	68db      	ldr	r3, [r3, #12]
 800e04a:	4a32      	ldr	r2, [pc, #200]	@ (800e114 <tcp_slowtmr+0x56c>)
 800e04c:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 800e04e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e052:	2b00      	cmp	r3, #0
 800e054:	d013      	beq.n	800e07e <tcp_slowtmr+0x4d6>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800e056:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e058:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800e05a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e05c:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800e05e:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 800e060:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e062:	3304      	adds	r3, #4
 800e064:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e066:	8ad2      	ldrh	r2, [r2, #22]
 800e068:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e06a:	8b09      	ldrh	r1, [r1, #24]
 800e06c:	9102      	str	r1, [sp, #8]
 800e06e:	9201      	str	r2, [sp, #4]
 800e070:	9300      	str	r3, [sp, #0]
 800e072:	462b      	mov	r3, r5
 800e074:	4622      	mov	r2, r4
 800e076:	4601      	mov	r1, r0
 800e078:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e07a:	f004 fead 	bl	8012dd8 <tcp_rst>
      err_arg = pcb->callback_arg;
 800e07e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e080:	691b      	ldr	r3, [r3, #16]
 800e082:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800e084:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e086:	7d1b      	ldrb	r3, [r3, #20]
 800e088:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800e08a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e08c:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800e08e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e090:	68db      	ldr	r3, [r3, #12]
 800e092:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800e094:	6838      	ldr	r0, [r7, #0]
 800e096:	f7fe ffe5 	bl	800d064 <tcp_free>
      tcp_active_pcbs_changed = 0;
 800e09a:	4b23      	ldr	r3, [pc, #140]	@ (800e128 <tcp_slowtmr+0x580>)
 800e09c:	2200      	movs	r2, #0
 800e09e:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800e0a0:	68fb      	ldr	r3, [r7, #12]
 800e0a2:	2b00      	cmp	r3, #0
 800e0a4:	d004      	beq.n	800e0b0 <tcp_slowtmr+0x508>
 800e0a6:	68fb      	ldr	r3, [r7, #12]
 800e0a8:	f06f 010c 	mvn.w	r1, #12
 800e0ac:	68b8      	ldr	r0, [r7, #8]
 800e0ae:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800e0b0:	4b1d      	ldr	r3, [pc, #116]	@ (800e128 <tcp_slowtmr+0x580>)
 800e0b2:	781b      	ldrb	r3, [r3, #0]
 800e0b4:	2b00      	cmp	r3, #0
 800e0b6:	d048      	beq.n	800e14a <tcp_slowtmr+0x5a2>
        goto tcp_slowtmr_start;
 800e0b8:	e589      	b.n	800dbce <tcp_slowtmr+0x26>
      prev = pcb;
 800e0ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e0bc:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800e0be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e0c0:	68db      	ldr	r3, [r3, #12]
 800e0c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 800e0c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e0c6:	7f1b      	ldrb	r3, [r3, #28]
 800e0c8:	3301      	adds	r3, #1
 800e0ca:	b2da      	uxtb	r2, r3
 800e0cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e0ce:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800e0d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e0d2:	7f1a      	ldrb	r2, [r3, #28]
 800e0d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e0d6:	7f5b      	ldrb	r3, [r3, #29]
 800e0d8:	429a      	cmp	r2, r3
 800e0da:	d336      	bcc.n	800e14a <tcp_slowtmr+0x5a2>
        prev->polltmr = 0;
 800e0dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e0de:	2200      	movs	r2, #0
 800e0e0:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 800e0e2:	4b11      	ldr	r3, [pc, #68]	@ (800e128 <tcp_slowtmr+0x580>)
 800e0e4:	2200      	movs	r2, #0
 800e0e6:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800e0e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e0ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e0ee:	2b00      	cmp	r3, #0
 800e0f0:	d01c      	beq.n	800e12c <tcp_slowtmr+0x584>
 800e0f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e0f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e0f8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e0fa:	6912      	ldr	r2, [r2, #16]
 800e0fc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e0fe:	4610      	mov	r0, r2
 800e100:	4798      	blx	r3
 800e102:	4603      	mov	r3, r0
 800e104:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 800e108:	e013      	b.n	800e132 <tcp_slowtmr+0x58a>
 800e10a:	bf00      	nop
 800e10c:	2000ed40 	.word	0x2000ed40
 800e110:	10624dd3 	.word	0x10624dd3
 800e114:	2000ed4c 	.word	0x2000ed4c
 800e118:	080190e8 	.word	0x080190e8
 800e11c:	08019520 	.word	0x08019520
 800e120:	0801912c 	.word	0x0801912c
 800e124:	0801954c 	.word	0x0801954c
 800e128:	2000ed54 	.word	0x2000ed54
 800e12c:	2300      	movs	r3, #0
 800e12e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 800e132:	4b38      	ldr	r3, [pc, #224]	@ (800e214 <tcp_slowtmr+0x66c>)
 800e134:	781b      	ldrb	r3, [r3, #0]
 800e136:	2b00      	cmp	r3, #0
 800e138:	f47f ad48 	bne.w	800dbcc <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800e13c:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800e140:	2b00      	cmp	r3, #0
 800e142:	d102      	bne.n	800e14a <tcp_slowtmr+0x5a2>
          tcp_output(prev);
 800e144:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e146:	f004 f893 	bl	8012270 <tcp_output>
  while (pcb != NULL) {
 800e14a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e14c:	2b00      	cmp	r3, #0
 800e14e:	f47f ad44 	bne.w	800dbda <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800e152:	2300      	movs	r3, #0
 800e154:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 800e156:	4b30      	ldr	r3, [pc, #192]	@ (800e218 <tcp_slowtmr+0x670>)
 800e158:	681b      	ldr	r3, [r3, #0]
 800e15a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800e15c:	e052      	b.n	800e204 <tcp_slowtmr+0x65c>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800e15e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e160:	7d1b      	ldrb	r3, [r3, #20]
 800e162:	2b0a      	cmp	r3, #10
 800e164:	d006      	beq.n	800e174 <tcp_slowtmr+0x5cc>
 800e166:	4b2d      	ldr	r3, [pc, #180]	@ (800e21c <tcp_slowtmr+0x674>)
 800e168:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 800e16c:	492c      	ldr	r1, [pc, #176]	@ (800e220 <tcp_slowtmr+0x678>)
 800e16e:	482d      	ldr	r0, [pc, #180]	@ (800e224 <tcp_slowtmr+0x67c>)
 800e170:	f008 fa16 	bl	80165a0 <iprintf>
    pcb_remove = 0;
 800e174:	2300      	movs	r3, #0
 800e176:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800e17a:	4b2b      	ldr	r3, [pc, #172]	@ (800e228 <tcp_slowtmr+0x680>)
 800e17c:	681a      	ldr	r2, [r3, #0]
 800e17e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e180:	6a1b      	ldr	r3, [r3, #32]
 800e182:	1ad3      	subs	r3, r2, r3
 800e184:	2bf0      	cmp	r3, #240	@ 0xf0
 800e186:	d904      	bls.n	800e192 <tcp_slowtmr+0x5ea>
      ++pcb_remove;
 800e188:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e18c:	3301      	adds	r3, #1
 800e18e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800e192:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e196:	2b00      	cmp	r3, #0
 800e198:	d02f      	beq.n	800e1fa <tcp_slowtmr+0x652>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800e19a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e19c:	f000 fc02 	bl	800e9a4 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800e1a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	d010      	beq.n	800e1c8 <tcp_slowtmr+0x620>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800e1a6:	4b1c      	ldr	r3, [pc, #112]	@ (800e218 <tcp_slowtmr+0x670>)
 800e1a8:	681b      	ldr	r3, [r3, #0]
 800e1aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e1ac:	429a      	cmp	r2, r3
 800e1ae:	d106      	bne.n	800e1be <tcp_slowtmr+0x616>
 800e1b0:	4b1a      	ldr	r3, [pc, #104]	@ (800e21c <tcp_slowtmr+0x674>)
 800e1b2:	f240 52af 	movw	r2, #1455	@ 0x5af
 800e1b6:	491d      	ldr	r1, [pc, #116]	@ (800e22c <tcp_slowtmr+0x684>)
 800e1b8:	481a      	ldr	r0, [pc, #104]	@ (800e224 <tcp_slowtmr+0x67c>)
 800e1ba:	f008 f9f1 	bl	80165a0 <iprintf>
        prev->next = pcb->next;
 800e1be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e1c0:	68da      	ldr	r2, [r3, #12]
 800e1c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e1c4:	60da      	str	r2, [r3, #12]
 800e1c6:	e00f      	b.n	800e1e8 <tcp_slowtmr+0x640>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800e1c8:	4b13      	ldr	r3, [pc, #76]	@ (800e218 <tcp_slowtmr+0x670>)
 800e1ca:	681b      	ldr	r3, [r3, #0]
 800e1cc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e1ce:	429a      	cmp	r2, r3
 800e1d0:	d006      	beq.n	800e1e0 <tcp_slowtmr+0x638>
 800e1d2:	4b12      	ldr	r3, [pc, #72]	@ (800e21c <tcp_slowtmr+0x674>)
 800e1d4:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 800e1d8:	4915      	ldr	r1, [pc, #84]	@ (800e230 <tcp_slowtmr+0x688>)
 800e1da:	4812      	ldr	r0, [pc, #72]	@ (800e224 <tcp_slowtmr+0x67c>)
 800e1dc:	f008 f9e0 	bl	80165a0 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800e1e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e1e2:	68db      	ldr	r3, [r3, #12]
 800e1e4:	4a0c      	ldr	r2, [pc, #48]	@ (800e218 <tcp_slowtmr+0x670>)
 800e1e6:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800e1e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e1ea:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800e1ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e1ee:	68db      	ldr	r3, [r3, #12]
 800e1f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800e1f2:	69f8      	ldr	r0, [r7, #28]
 800e1f4:	f7fe ff36 	bl	800d064 <tcp_free>
 800e1f8:	e004      	b.n	800e204 <tcp_slowtmr+0x65c>
    } else {
      prev = pcb;
 800e1fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e1fc:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800e1fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e200:	68db      	ldr	r3, [r3, #12]
 800e202:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800e204:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e206:	2b00      	cmp	r3, #0
 800e208:	d1a9      	bne.n	800e15e <tcp_slowtmr+0x5b6>
    }
  }
}
 800e20a:	bf00      	nop
 800e20c:	bf00      	nop
 800e20e:	3730      	adds	r7, #48	@ 0x30
 800e210:	46bd      	mov	sp, r7
 800e212:	bdb0      	pop	{r4, r5, r7, pc}
 800e214:	2000ed54 	.word	0x2000ed54
 800e218:	2000ed50 	.word	0x2000ed50
 800e21c:	080190e8 	.word	0x080190e8
 800e220:	08019578 	.word	0x08019578
 800e224:	0801912c 	.word	0x0801912c
 800e228:	2000ed40 	.word	0x2000ed40
 800e22c:	080195a8 	.word	0x080195a8
 800e230:	080195d0 	.word	0x080195d0

0800e234 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800e234:	b580      	push	{r7, lr}
 800e236:	b082      	sub	sp, #8
 800e238:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800e23a:	4b2d      	ldr	r3, [pc, #180]	@ (800e2f0 <tcp_fasttmr+0xbc>)
 800e23c:	781b      	ldrb	r3, [r3, #0]
 800e23e:	3301      	adds	r3, #1
 800e240:	b2da      	uxtb	r2, r3
 800e242:	4b2b      	ldr	r3, [pc, #172]	@ (800e2f0 <tcp_fasttmr+0xbc>)
 800e244:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800e246:	4b2b      	ldr	r3, [pc, #172]	@ (800e2f4 <tcp_fasttmr+0xc0>)
 800e248:	681b      	ldr	r3, [r3, #0]
 800e24a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800e24c:	e048      	b.n	800e2e0 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	7f9a      	ldrb	r2, [r3, #30]
 800e252:	4b27      	ldr	r3, [pc, #156]	@ (800e2f0 <tcp_fasttmr+0xbc>)
 800e254:	781b      	ldrb	r3, [r3, #0]
 800e256:	429a      	cmp	r2, r3
 800e258:	d03f      	beq.n	800e2da <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800e25a:	4b25      	ldr	r3, [pc, #148]	@ (800e2f0 <tcp_fasttmr+0xbc>)
 800e25c:	781a      	ldrb	r2, [r3, #0]
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	8b5b      	ldrh	r3, [r3, #26]
 800e266:	f003 0301 	and.w	r3, r3, #1
 800e26a:	2b00      	cmp	r3, #0
 800e26c:	d010      	beq.n	800e290 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	8b5b      	ldrh	r3, [r3, #26]
 800e272:	f043 0302 	orr.w	r3, r3, #2
 800e276:	b29a      	uxth	r2, r3
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800e27c:	6878      	ldr	r0, [r7, #4]
 800e27e:	f003 fff7 	bl	8012270 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	8b5b      	ldrh	r3, [r3, #26]
 800e286:	f023 0303 	bic.w	r3, r3, #3
 800e28a:	b29a      	uxth	r2, r3
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	8b5b      	ldrh	r3, [r3, #26]
 800e294:	f003 0308 	and.w	r3, r3, #8
 800e298:	2b00      	cmp	r3, #0
 800e29a:	d009      	beq.n	800e2b0 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	8b5b      	ldrh	r3, [r3, #26]
 800e2a0:	f023 0308 	bic.w	r3, r3, #8
 800e2a4:	b29a      	uxth	r2, r3
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800e2aa:	6878      	ldr	r0, [r7, #4]
 800e2ac:	f7ff f86e 	bl	800d38c <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	68db      	ldr	r3, [r3, #12]
 800e2b4:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e2ba:	2b00      	cmp	r3, #0
 800e2bc:	d00a      	beq.n	800e2d4 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800e2be:	4b0e      	ldr	r3, [pc, #56]	@ (800e2f8 <tcp_fasttmr+0xc4>)
 800e2c0:	2200      	movs	r2, #0
 800e2c2:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800e2c4:	6878      	ldr	r0, [r7, #4]
 800e2c6:	f000 f819 	bl	800e2fc <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800e2ca:	4b0b      	ldr	r3, [pc, #44]	@ (800e2f8 <tcp_fasttmr+0xc4>)
 800e2cc:	781b      	ldrb	r3, [r3, #0]
 800e2ce:	2b00      	cmp	r3, #0
 800e2d0:	d000      	beq.n	800e2d4 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800e2d2:	e7b8      	b.n	800e246 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800e2d4:	683b      	ldr	r3, [r7, #0]
 800e2d6:	607b      	str	r3, [r7, #4]
 800e2d8:	e002      	b.n	800e2e0 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	68db      	ldr	r3, [r3, #12]
 800e2de:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	2b00      	cmp	r3, #0
 800e2e4:	d1b3      	bne.n	800e24e <tcp_fasttmr+0x1a>
    }
  }
}
 800e2e6:	bf00      	nop
 800e2e8:	bf00      	nop
 800e2ea:	3708      	adds	r7, #8
 800e2ec:	46bd      	mov	sp, r7
 800e2ee:	bd80      	pop	{r7, pc}
 800e2f0:	2000ed56 	.word	0x2000ed56
 800e2f4:	2000ed4c 	.word	0x2000ed4c
 800e2f8:	2000ed54 	.word	0x2000ed54

0800e2fc <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800e2fc:	b590      	push	{r4, r7, lr}
 800e2fe:	b085      	sub	sp, #20
 800e300:	af00      	add	r7, sp, #0
 800e302:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	2b00      	cmp	r3, #0
 800e308:	d109      	bne.n	800e31e <tcp_process_refused_data+0x22>
 800e30a:	4b37      	ldr	r3, [pc, #220]	@ (800e3e8 <tcp_process_refused_data+0xec>)
 800e30c:	f240 6209 	movw	r2, #1545	@ 0x609
 800e310:	4936      	ldr	r1, [pc, #216]	@ (800e3ec <tcp_process_refused_data+0xf0>)
 800e312:	4837      	ldr	r0, [pc, #220]	@ (800e3f0 <tcp_process_refused_data+0xf4>)
 800e314:	f008 f944 	bl	80165a0 <iprintf>
 800e318:	f06f 030f 	mvn.w	r3, #15
 800e31c:	e060      	b.n	800e3e0 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e322:	7b5b      	ldrb	r3, [r3, #13]
 800e324:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e32a:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	2200      	movs	r2, #0
 800e330:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e338:	2b00      	cmp	r3, #0
 800e33a:	d00b      	beq.n	800e354 <tcp_process_refused_data+0x58>
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	6918      	ldr	r0, [r3, #16]
 800e346:	2300      	movs	r3, #0
 800e348:	68ba      	ldr	r2, [r7, #8]
 800e34a:	6879      	ldr	r1, [r7, #4]
 800e34c:	47a0      	blx	r4
 800e34e:	4603      	mov	r3, r0
 800e350:	73fb      	strb	r3, [r7, #15]
 800e352:	e007      	b.n	800e364 <tcp_process_refused_data+0x68>
 800e354:	2300      	movs	r3, #0
 800e356:	68ba      	ldr	r2, [r7, #8]
 800e358:	6879      	ldr	r1, [r7, #4]
 800e35a:	2000      	movs	r0, #0
 800e35c:	f000 f8a4 	bl	800e4a8 <tcp_recv_null>
 800e360:	4603      	mov	r3, r0
 800e362:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800e364:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e368:	2b00      	cmp	r3, #0
 800e36a:	d12a      	bne.n	800e3c2 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800e36c:	7bbb      	ldrb	r3, [r7, #14]
 800e36e:	f003 0320 	and.w	r3, r3, #32
 800e372:	2b00      	cmp	r3, #0
 800e374:	d033      	beq.n	800e3de <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e37a:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800e37e:	d005      	beq.n	800e38c <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e384:	3301      	adds	r3, #1
 800e386:	b29a      	uxth	r2, r3
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e392:	2b00      	cmp	r3, #0
 800e394:	d00b      	beq.n	800e3ae <tcp_process_refused_data+0xb2>
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	6918      	ldr	r0, [r3, #16]
 800e3a0:	2300      	movs	r3, #0
 800e3a2:	2200      	movs	r2, #0
 800e3a4:	6879      	ldr	r1, [r7, #4]
 800e3a6:	47a0      	blx	r4
 800e3a8:	4603      	mov	r3, r0
 800e3aa:	73fb      	strb	r3, [r7, #15]
 800e3ac:	e001      	b.n	800e3b2 <tcp_process_refused_data+0xb6>
 800e3ae:	2300      	movs	r3, #0
 800e3b0:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800e3b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e3b6:	f113 0f0d 	cmn.w	r3, #13
 800e3ba:	d110      	bne.n	800e3de <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800e3bc:	f06f 030c 	mvn.w	r3, #12
 800e3c0:	e00e      	b.n	800e3e0 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800e3c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e3c6:	f113 0f0d 	cmn.w	r3, #13
 800e3ca:	d102      	bne.n	800e3d2 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800e3cc:	f06f 030c 	mvn.w	r3, #12
 800e3d0:	e006      	b.n	800e3e0 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	68ba      	ldr	r2, [r7, #8]
 800e3d6:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 800e3d8:	f06f 0304 	mvn.w	r3, #4
 800e3dc:	e000      	b.n	800e3e0 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800e3de:	2300      	movs	r3, #0
}
 800e3e0:	4618      	mov	r0, r3
 800e3e2:	3714      	adds	r7, #20
 800e3e4:	46bd      	mov	sp, r7
 800e3e6:	bd90      	pop	{r4, r7, pc}
 800e3e8:	080190e8 	.word	0x080190e8
 800e3ec:	080195f8 	.word	0x080195f8
 800e3f0:	0801912c 	.word	0x0801912c

0800e3f4 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800e3f4:	b580      	push	{r7, lr}
 800e3f6:	b084      	sub	sp, #16
 800e3f8:	af00      	add	r7, sp, #0
 800e3fa:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800e3fc:	e007      	b.n	800e40e <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	681b      	ldr	r3, [r3, #0]
 800e402:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800e404:	6878      	ldr	r0, [r7, #4]
 800e406:	f000 f80a 	bl	800e41e <tcp_seg_free>
    seg = next;
 800e40a:	68fb      	ldr	r3, [r7, #12]
 800e40c:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	2b00      	cmp	r3, #0
 800e412:	d1f4      	bne.n	800e3fe <tcp_segs_free+0xa>
  }
}
 800e414:	bf00      	nop
 800e416:	bf00      	nop
 800e418:	3710      	adds	r7, #16
 800e41a:	46bd      	mov	sp, r7
 800e41c:	bd80      	pop	{r7, pc}

0800e41e <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800e41e:	b580      	push	{r7, lr}
 800e420:	b082      	sub	sp, #8
 800e422:	af00      	add	r7, sp, #0
 800e424:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	2b00      	cmp	r3, #0
 800e42a:	d00c      	beq.n	800e446 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	685b      	ldr	r3, [r3, #4]
 800e430:	2b00      	cmp	r3, #0
 800e432:	d004      	beq.n	800e43e <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	685b      	ldr	r3, [r3, #4]
 800e438:	4618      	mov	r0, r3
 800e43a:	f7fe fb45 	bl	800cac8 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800e43e:	6879      	ldr	r1, [r7, #4]
 800e440:	2003      	movs	r0, #3
 800e442:	f7fd fc9d 	bl	800bd80 <memp_free>
  }
}
 800e446:	bf00      	nop
 800e448:	3708      	adds	r7, #8
 800e44a:	46bd      	mov	sp, r7
 800e44c:	bd80      	pop	{r7, pc}
	...

0800e450 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800e450:	b580      	push	{r7, lr}
 800e452:	b084      	sub	sp, #16
 800e454:	af00      	add	r7, sp, #0
 800e456:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	d106      	bne.n	800e46c <tcp_seg_copy+0x1c>
 800e45e:	4b0f      	ldr	r3, [pc, #60]	@ (800e49c <tcp_seg_copy+0x4c>)
 800e460:	f240 6282 	movw	r2, #1666	@ 0x682
 800e464:	490e      	ldr	r1, [pc, #56]	@ (800e4a0 <tcp_seg_copy+0x50>)
 800e466:	480f      	ldr	r0, [pc, #60]	@ (800e4a4 <tcp_seg_copy+0x54>)
 800e468:	f008 f89a 	bl	80165a0 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800e46c:	2003      	movs	r0, #3
 800e46e:	f7fd fc11 	bl	800bc94 <memp_malloc>
 800e472:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800e474:	68fb      	ldr	r3, [r7, #12]
 800e476:	2b00      	cmp	r3, #0
 800e478:	d101      	bne.n	800e47e <tcp_seg_copy+0x2e>
    return NULL;
 800e47a:	2300      	movs	r3, #0
 800e47c:	e00a      	b.n	800e494 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800e47e:	2210      	movs	r2, #16
 800e480:	6879      	ldr	r1, [r7, #4]
 800e482:	68f8      	ldr	r0, [r7, #12]
 800e484:	f008 f9f7 	bl	8016876 <memcpy>
  pbuf_ref(cseg->p);
 800e488:	68fb      	ldr	r3, [r7, #12]
 800e48a:	685b      	ldr	r3, [r3, #4]
 800e48c:	4618      	mov	r0, r3
 800e48e:	f7fe fbc1 	bl	800cc14 <pbuf_ref>
  return cseg;
 800e492:	68fb      	ldr	r3, [r7, #12]
}
 800e494:	4618      	mov	r0, r3
 800e496:	3710      	adds	r7, #16
 800e498:	46bd      	mov	sp, r7
 800e49a:	bd80      	pop	{r7, pc}
 800e49c:	080190e8 	.word	0x080190e8
 800e4a0:	0801963c 	.word	0x0801963c
 800e4a4:	0801912c 	.word	0x0801912c

0800e4a8 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800e4a8:	b580      	push	{r7, lr}
 800e4aa:	b084      	sub	sp, #16
 800e4ac:	af00      	add	r7, sp, #0
 800e4ae:	60f8      	str	r0, [r7, #12]
 800e4b0:	60b9      	str	r1, [r7, #8]
 800e4b2:	607a      	str	r2, [r7, #4]
 800e4b4:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800e4b6:	68bb      	ldr	r3, [r7, #8]
 800e4b8:	2b00      	cmp	r3, #0
 800e4ba:	d109      	bne.n	800e4d0 <tcp_recv_null+0x28>
 800e4bc:	4b12      	ldr	r3, [pc, #72]	@ (800e508 <tcp_recv_null+0x60>)
 800e4be:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 800e4c2:	4912      	ldr	r1, [pc, #72]	@ (800e50c <tcp_recv_null+0x64>)
 800e4c4:	4812      	ldr	r0, [pc, #72]	@ (800e510 <tcp_recv_null+0x68>)
 800e4c6:	f008 f86b 	bl	80165a0 <iprintf>
 800e4ca:	f06f 030f 	mvn.w	r3, #15
 800e4ce:	e016      	b.n	800e4fe <tcp_recv_null+0x56>

  if (p != NULL) {
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	2b00      	cmp	r3, #0
 800e4d4:	d009      	beq.n	800e4ea <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	891b      	ldrh	r3, [r3, #8]
 800e4da:	4619      	mov	r1, r3
 800e4dc:	68b8      	ldr	r0, [r7, #8]
 800e4de:	f7ff facd 	bl	800da7c <tcp_recved>
    pbuf_free(p);
 800e4e2:	6878      	ldr	r0, [r7, #4]
 800e4e4:	f7fe faf0 	bl	800cac8 <pbuf_free>
 800e4e8:	e008      	b.n	800e4fc <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800e4ea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e4ee:	2b00      	cmp	r3, #0
 800e4f0:	d104      	bne.n	800e4fc <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800e4f2:	68b8      	ldr	r0, [r7, #8]
 800e4f4:	f7fe ffb4 	bl	800d460 <tcp_close>
 800e4f8:	4603      	mov	r3, r0
 800e4fa:	e000      	b.n	800e4fe <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800e4fc:	2300      	movs	r3, #0
}
 800e4fe:	4618      	mov	r0, r3
 800e500:	3710      	adds	r7, #16
 800e502:	46bd      	mov	sp, r7
 800e504:	bd80      	pop	{r7, pc}
 800e506:	bf00      	nop
 800e508:	080190e8 	.word	0x080190e8
 800e50c:	08019658 	.word	0x08019658
 800e510:	0801912c 	.word	0x0801912c

0800e514 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800e514:	b580      	push	{r7, lr}
 800e516:	b086      	sub	sp, #24
 800e518:	af00      	add	r7, sp, #0
 800e51a:	4603      	mov	r3, r0
 800e51c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800e51e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e522:	2b00      	cmp	r3, #0
 800e524:	db01      	blt.n	800e52a <tcp_kill_prio+0x16>
 800e526:	79fb      	ldrb	r3, [r7, #7]
 800e528:	e000      	b.n	800e52c <tcp_kill_prio+0x18>
 800e52a:	237f      	movs	r3, #127	@ 0x7f
 800e52c:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800e52e:	7afb      	ldrb	r3, [r7, #11]
 800e530:	2b00      	cmp	r3, #0
 800e532:	d034      	beq.n	800e59e <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800e534:	7afb      	ldrb	r3, [r7, #11]
 800e536:	3b01      	subs	r3, #1
 800e538:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800e53a:	2300      	movs	r3, #0
 800e53c:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800e53e:	2300      	movs	r3, #0
 800e540:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e542:	4b19      	ldr	r3, [pc, #100]	@ (800e5a8 <tcp_kill_prio+0x94>)
 800e544:	681b      	ldr	r3, [r3, #0]
 800e546:	617b      	str	r3, [r7, #20]
 800e548:	e01f      	b.n	800e58a <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800e54a:	697b      	ldr	r3, [r7, #20]
 800e54c:	7d5b      	ldrb	r3, [r3, #21]
 800e54e:	7afa      	ldrb	r2, [r7, #11]
 800e550:	429a      	cmp	r2, r3
 800e552:	d80c      	bhi.n	800e56e <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800e554:	697b      	ldr	r3, [r7, #20]
 800e556:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800e558:	7afa      	ldrb	r2, [r7, #11]
 800e55a:	429a      	cmp	r2, r3
 800e55c:	d112      	bne.n	800e584 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800e55e:	4b13      	ldr	r3, [pc, #76]	@ (800e5ac <tcp_kill_prio+0x98>)
 800e560:	681a      	ldr	r2, [r3, #0]
 800e562:	697b      	ldr	r3, [r7, #20]
 800e564:	6a1b      	ldr	r3, [r3, #32]
 800e566:	1ad3      	subs	r3, r2, r3
 800e568:	68fa      	ldr	r2, [r7, #12]
 800e56a:	429a      	cmp	r2, r3
 800e56c:	d80a      	bhi.n	800e584 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800e56e:	4b0f      	ldr	r3, [pc, #60]	@ (800e5ac <tcp_kill_prio+0x98>)
 800e570:	681a      	ldr	r2, [r3, #0]
 800e572:	697b      	ldr	r3, [r7, #20]
 800e574:	6a1b      	ldr	r3, [r3, #32]
 800e576:	1ad3      	subs	r3, r2, r3
 800e578:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800e57a:	697b      	ldr	r3, [r7, #20]
 800e57c:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800e57e:	697b      	ldr	r3, [r7, #20]
 800e580:	7d5b      	ldrb	r3, [r3, #21]
 800e582:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e584:	697b      	ldr	r3, [r7, #20]
 800e586:	68db      	ldr	r3, [r3, #12]
 800e588:	617b      	str	r3, [r7, #20]
 800e58a:	697b      	ldr	r3, [r7, #20]
 800e58c:	2b00      	cmp	r3, #0
 800e58e:	d1dc      	bne.n	800e54a <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800e590:	693b      	ldr	r3, [r7, #16]
 800e592:	2b00      	cmp	r3, #0
 800e594:	d004      	beq.n	800e5a0 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800e596:	6938      	ldr	r0, [r7, #16]
 800e598:	f7ff f8a8 	bl	800d6ec <tcp_abort>
 800e59c:	e000      	b.n	800e5a0 <tcp_kill_prio+0x8c>
    return;
 800e59e:	bf00      	nop
  }
}
 800e5a0:	3718      	adds	r7, #24
 800e5a2:	46bd      	mov	sp, r7
 800e5a4:	bd80      	pop	{r7, pc}
 800e5a6:	bf00      	nop
 800e5a8:	2000ed4c 	.word	0x2000ed4c
 800e5ac:	2000ed40 	.word	0x2000ed40

0800e5b0 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800e5b0:	b580      	push	{r7, lr}
 800e5b2:	b086      	sub	sp, #24
 800e5b4:	af00      	add	r7, sp, #0
 800e5b6:	4603      	mov	r3, r0
 800e5b8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800e5ba:	79fb      	ldrb	r3, [r7, #7]
 800e5bc:	2b08      	cmp	r3, #8
 800e5be:	d009      	beq.n	800e5d4 <tcp_kill_state+0x24>
 800e5c0:	79fb      	ldrb	r3, [r7, #7]
 800e5c2:	2b09      	cmp	r3, #9
 800e5c4:	d006      	beq.n	800e5d4 <tcp_kill_state+0x24>
 800e5c6:	4b1a      	ldr	r3, [pc, #104]	@ (800e630 <tcp_kill_state+0x80>)
 800e5c8:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 800e5cc:	4919      	ldr	r1, [pc, #100]	@ (800e634 <tcp_kill_state+0x84>)
 800e5ce:	481a      	ldr	r0, [pc, #104]	@ (800e638 <tcp_kill_state+0x88>)
 800e5d0:	f007 ffe6 	bl	80165a0 <iprintf>

  inactivity = 0;
 800e5d4:	2300      	movs	r3, #0
 800e5d6:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800e5d8:	2300      	movs	r3, #0
 800e5da:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e5dc:	4b17      	ldr	r3, [pc, #92]	@ (800e63c <tcp_kill_state+0x8c>)
 800e5de:	681b      	ldr	r3, [r3, #0]
 800e5e0:	617b      	str	r3, [r7, #20]
 800e5e2:	e017      	b.n	800e614 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800e5e4:	697b      	ldr	r3, [r7, #20]
 800e5e6:	7d1b      	ldrb	r3, [r3, #20]
 800e5e8:	79fa      	ldrb	r2, [r7, #7]
 800e5ea:	429a      	cmp	r2, r3
 800e5ec:	d10f      	bne.n	800e60e <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800e5ee:	4b14      	ldr	r3, [pc, #80]	@ (800e640 <tcp_kill_state+0x90>)
 800e5f0:	681a      	ldr	r2, [r3, #0]
 800e5f2:	697b      	ldr	r3, [r7, #20]
 800e5f4:	6a1b      	ldr	r3, [r3, #32]
 800e5f6:	1ad3      	subs	r3, r2, r3
 800e5f8:	68fa      	ldr	r2, [r7, #12]
 800e5fa:	429a      	cmp	r2, r3
 800e5fc:	d807      	bhi.n	800e60e <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800e5fe:	4b10      	ldr	r3, [pc, #64]	@ (800e640 <tcp_kill_state+0x90>)
 800e600:	681a      	ldr	r2, [r3, #0]
 800e602:	697b      	ldr	r3, [r7, #20]
 800e604:	6a1b      	ldr	r3, [r3, #32]
 800e606:	1ad3      	subs	r3, r2, r3
 800e608:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800e60a:	697b      	ldr	r3, [r7, #20]
 800e60c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e60e:	697b      	ldr	r3, [r7, #20]
 800e610:	68db      	ldr	r3, [r3, #12]
 800e612:	617b      	str	r3, [r7, #20]
 800e614:	697b      	ldr	r3, [r7, #20]
 800e616:	2b00      	cmp	r3, #0
 800e618:	d1e4      	bne.n	800e5e4 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800e61a:	693b      	ldr	r3, [r7, #16]
 800e61c:	2b00      	cmp	r3, #0
 800e61e:	d003      	beq.n	800e628 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800e620:	2100      	movs	r1, #0
 800e622:	6938      	ldr	r0, [r7, #16]
 800e624:	f7fe ffa4 	bl	800d570 <tcp_abandon>
  }
}
 800e628:	bf00      	nop
 800e62a:	3718      	adds	r7, #24
 800e62c:	46bd      	mov	sp, r7
 800e62e:	bd80      	pop	{r7, pc}
 800e630:	080190e8 	.word	0x080190e8
 800e634:	08019674 	.word	0x08019674
 800e638:	0801912c 	.word	0x0801912c
 800e63c:	2000ed4c 	.word	0x2000ed4c
 800e640:	2000ed40 	.word	0x2000ed40

0800e644 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800e644:	b580      	push	{r7, lr}
 800e646:	b084      	sub	sp, #16
 800e648:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800e64a:	2300      	movs	r3, #0
 800e64c:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800e64e:	2300      	movs	r3, #0
 800e650:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e652:	4b12      	ldr	r3, [pc, #72]	@ (800e69c <tcp_kill_timewait+0x58>)
 800e654:	681b      	ldr	r3, [r3, #0]
 800e656:	60fb      	str	r3, [r7, #12]
 800e658:	e012      	b.n	800e680 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800e65a:	4b11      	ldr	r3, [pc, #68]	@ (800e6a0 <tcp_kill_timewait+0x5c>)
 800e65c:	681a      	ldr	r2, [r3, #0]
 800e65e:	68fb      	ldr	r3, [r7, #12]
 800e660:	6a1b      	ldr	r3, [r3, #32]
 800e662:	1ad3      	subs	r3, r2, r3
 800e664:	687a      	ldr	r2, [r7, #4]
 800e666:	429a      	cmp	r2, r3
 800e668:	d807      	bhi.n	800e67a <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800e66a:	4b0d      	ldr	r3, [pc, #52]	@ (800e6a0 <tcp_kill_timewait+0x5c>)
 800e66c:	681a      	ldr	r2, [r3, #0]
 800e66e:	68fb      	ldr	r3, [r7, #12]
 800e670:	6a1b      	ldr	r3, [r3, #32]
 800e672:	1ad3      	subs	r3, r2, r3
 800e674:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800e676:	68fb      	ldr	r3, [r7, #12]
 800e678:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e67a:	68fb      	ldr	r3, [r7, #12]
 800e67c:	68db      	ldr	r3, [r3, #12]
 800e67e:	60fb      	str	r3, [r7, #12]
 800e680:	68fb      	ldr	r3, [r7, #12]
 800e682:	2b00      	cmp	r3, #0
 800e684:	d1e9      	bne.n	800e65a <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800e686:	68bb      	ldr	r3, [r7, #8]
 800e688:	2b00      	cmp	r3, #0
 800e68a:	d002      	beq.n	800e692 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800e68c:	68b8      	ldr	r0, [r7, #8]
 800e68e:	f7ff f82d 	bl	800d6ec <tcp_abort>
  }
}
 800e692:	bf00      	nop
 800e694:	3710      	adds	r7, #16
 800e696:	46bd      	mov	sp, r7
 800e698:	bd80      	pop	{r7, pc}
 800e69a:	bf00      	nop
 800e69c:	2000ed50 	.word	0x2000ed50
 800e6a0:	2000ed40 	.word	0x2000ed40

0800e6a4 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800e6a4:	b580      	push	{r7, lr}
 800e6a6:	b082      	sub	sp, #8
 800e6a8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800e6aa:	4b10      	ldr	r3, [pc, #64]	@ (800e6ec <tcp_handle_closepend+0x48>)
 800e6ac:	681b      	ldr	r3, [r3, #0]
 800e6ae:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800e6b0:	e014      	b.n	800e6dc <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	68db      	ldr	r3, [r3, #12]
 800e6b6:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	8b5b      	ldrh	r3, [r3, #26]
 800e6bc:	f003 0308 	and.w	r3, r3, #8
 800e6c0:	2b00      	cmp	r3, #0
 800e6c2:	d009      	beq.n	800e6d8 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	8b5b      	ldrh	r3, [r3, #26]
 800e6c8:	f023 0308 	bic.w	r3, r3, #8
 800e6cc:	b29a      	uxth	r2, r3
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800e6d2:	6878      	ldr	r0, [r7, #4]
 800e6d4:	f7fe fe5a 	bl	800d38c <tcp_close_shutdown_fin>
    }
    pcb = next;
 800e6d8:	683b      	ldr	r3, [r7, #0]
 800e6da:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	2b00      	cmp	r3, #0
 800e6e0:	d1e7      	bne.n	800e6b2 <tcp_handle_closepend+0xe>
  }
}
 800e6e2:	bf00      	nop
 800e6e4:	bf00      	nop
 800e6e6:	3708      	adds	r7, #8
 800e6e8:	46bd      	mov	sp, r7
 800e6ea:	bd80      	pop	{r7, pc}
 800e6ec:	2000ed4c 	.word	0x2000ed4c

0800e6f0 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800e6f0:	b580      	push	{r7, lr}
 800e6f2:	b084      	sub	sp, #16
 800e6f4:	af00      	add	r7, sp, #0
 800e6f6:	4603      	mov	r3, r0
 800e6f8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e6fa:	2001      	movs	r0, #1
 800e6fc:	f7fd faca 	bl	800bc94 <memp_malloc>
 800e700:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800e702:	68fb      	ldr	r3, [r7, #12]
 800e704:	2b00      	cmp	r3, #0
 800e706:	d126      	bne.n	800e756 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800e708:	f7ff ffcc 	bl	800e6a4 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800e70c:	f7ff ff9a 	bl	800e644 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e710:	2001      	movs	r0, #1
 800e712:	f7fd fabf 	bl	800bc94 <memp_malloc>
 800e716:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800e718:	68fb      	ldr	r3, [r7, #12]
 800e71a:	2b00      	cmp	r3, #0
 800e71c:	d11b      	bne.n	800e756 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800e71e:	2009      	movs	r0, #9
 800e720:	f7ff ff46 	bl	800e5b0 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e724:	2001      	movs	r0, #1
 800e726:	f7fd fab5 	bl	800bc94 <memp_malloc>
 800e72a:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800e72c:	68fb      	ldr	r3, [r7, #12]
 800e72e:	2b00      	cmp	r3, #0
 800e730:	d111      	bne.n	800e756 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800e732:	2008      	movs	r0, #8
 800e734:	f7ff ff3c 	bl	800e5b0 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e738:	2001      	movs	r0, #1
 800e73a:	f7fd faab 	bl	800bc94 <memp_malloc>
 800e73e:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800e740:	68fb      	ldr	r3, [r7, #12]
 800e742:	2b00      	cmp	r3, #0
 800e744:	d107      	bne.n	800e756 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800e746:	79fb      	ldrb	r3, [r7, #7]
 800e748:	4618      	mov	r0, r3
 800e74a:	f7ff fee3 	bl	800e514 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e74e:	2001      	movs	r0, #1
 800e750:	f7fd faa0 	bl	800bc94 <memp_malloc>
 800e754:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800e756:	68fb      	ldr	r3, [r7, #12]
 800e758:	2b00      	cmp	r3, #0
 800e75a:	d049      	beq.n	800e7f0 <tcp_alloc+0x100>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800e75c:	22a4      	movs	r2, #164	@ 0xa4
 800e75e:	2100      	movs	r1, #0
 800e760:	68f8      	ldr	r0, [r7, #12]
 800e762:	f007 ffbc 	bl	80166de <memset>
    pcb->prio = prio;
 800e766:	68fb      	ldr	r3, [r7, #12]
 800e768:	79fa      	ldrb	r2, [r7, #7]
 800e76a:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800e76c:	68fb      	ldr	r3, [r7, #12]
 800e76e:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800e772:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800e776:	68fb      	ldr	r3, [r7, #12]
 800e778:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800e77c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800e77e:	68fb      	ldr	r3, [r7, #12]
 800e780:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800e782:	68fb      	ldr	r3, [r7, #12]
 800e784:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 800e786:	68fb      	ldr	r3, [r7, #12]
 800e788:	22ff      	movs	r2, #255	@ 0xff
 800e78a:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800e78c:	68fb      	ldr	r3, [r7, #12]
 800e78e:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800e792:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800e794:	68fb      	ldr	r3, [r7, #12]
 800e796:	2206      	movs	r2, #6
 800e798:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800e79c:	68fb      	ldr	r3, [r7, #12]
 800e79e:	2206      	movs	r2, #6
 800e7a0:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 800e7a2:	68fb      	ldr	r3, [r7, #12]
 800e7a4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e7a8:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 800e7aa:	68fb      	ldr	r3, [r7, #12]
 800e7ac:	2201      	movs	r2, #1
 800e7ae:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 800e7b2:	4b12      	ldr	r3, [pc, #72]	@ (800e7fc <tcp_alloc+0x10c>)
 800e7b4:	681a      	ldr	r2, [r3, #0]
 800e7b6:	68fb      	ldr	r3, [r7, #12]
 800e7b8:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800e7ba:	4b11      	ldr	r3, [pc, #68]	@ (800e800 <tcp_alloc+0x110>)
 800e7bc:	781a      	ldrb	r2, [r3, #0]
 800e7be:	68fb      	ldr	r3, [r7, #12]
 800e7c0:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800e7c2:	68fb      	ldr	r3, [r7, #12]
 800e7c4:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800e7c8:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800e7cc:	68fb      	ldr	r3, [r7, #12]
 800e7ce:	4a0d      	ldr	r2, [pc, #52]	@ (800e804 <tcp_alloc+0x114>)
 800e7d0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800e7d4:	68fb      	ldr	r3, [r7, #12]
 800e7d6:	f242 7210 	movw	r2, #10000	@ 0x2710
 800e7da:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
 800e7de:	68fb      	ldr	r3, [r7, #12]
 800e7e0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800e7e4:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
 800e7e8:	68fb      	ldr	r3, [r7, #12]
 800e7ea:	2203      	movs	r2, #3
 800e7ec:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800e7f0:	68fb      	ldr	r3, [r7, #12]
}
 800e7f2:	4618      	mov	r0, r3
 800e7f4:	3710      	adds	r7, #16
 800e7f6:	46bd      	mov	sp, r7
 800e7f8:	bd80      	pop	{r7, pc}
 800e7fa:	bf00      	nop
 800e7fc:	2000ed40 	.word	0x2000ed40
 800e800:	2000ed56 	.word	0x2000ed56
 800e804:	0800e4a9 	.word	0x0800e4a9

0800e808 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 800e808:	b580      	push	{r7, lr}
 800e80a:	b084      	sub	sp, #16
 800e80c:	af00      	add	r7, sp, #0
 800e80e:	4603      	mov	r3, r0
 800e810:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800e812:	2040      	movs	r0, #64	@ 0x40
 800e814:	f7ff ff6c 	bl	800e6f0 <tcp_alloc>
 800e818:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 800e81a:	68fb      	ldr	r3, [r7, #12]
}
 800e81c:	4618      	mov	r0, r3
 800e81e:	3710      	adds	r7, #16
 800e820:	46bd      	mov	sp, r7
 800e822:	bd80      	pop	{r7, pc}

0800e824 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800e824:	b480      	push	{r7}
 800e826:	b083      	sub	sp, #12
 800e828:	af00      	add	r7, sp, #0
 800e82a:	6078      	str	r0, [r7, #4]
 800e82c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	2b00      	cmp	r3, #0
 800e832:	d002      	beq.n	800e83a <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	683a      	ldr	r2, [r7, #0]
 800e838:	611a      	str	r2, [r3, #16]
  }
}
 800e83a:	bf00      	nop
 800e83c:	370c      	adds	r7, #12
 800e83e:	46bd      	mov	sp, r7
 800e840:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e844:	4770      	bx	lr
	...

0800e848 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800e848:	b580      	push	{r7, lr}
 800e84a:	b082      	sub	sp, #8
 800e84c:	af00      	add	r7, sp, #0
 800e84e:	6078      	str	r0, [r7, #4]
 800e850:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	2b00      	cmp	r3, #0
 800e856:	d00e      	beq.n	800e876 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	7d1b      	ldrb	r3, [r3, #20]
 800e85c:	2b01      	cmp	r3, #1
 800e85e:	d106      	bne.n	800e86e <tcp_recv+0x26>
 800e860:	4b07      	ldr	r3, [pc, #28]	@ (800e880 <tcp_recv+0x38>)
 800e862:	f240 72df 	movw	r2, #2015	@ 0x7df
 800e866:	4907      	ldr	r1, [pc, #28]	@ (800e884 <tcp_recv+0x3c>)
 800e868:	4807      	ldr	r0, [pc, #28]	@ (800e888 <tcp_recv+0x40>)
 800e86a:	f007 fe99 	bl	80165a0 <iprintf>
    pcb->recv = recv;
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	683a      	ldr	r2, [r7, #0]
 800e872:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }
}
 800e876:	bf00      	nop
 800e878:	3708      	adds	r7, #8
 800e87a:	46bd      	mov	sp, r7
 800e87c:	bd80      	pop	{r7, pc}
 800e87e:	bf00      	nop
 800e880:	080190e8 	.word	0x080190e8
 800e884:	08019684 	.word	0x08019684
 800e888:	0801912c 	.word	0x0801912c

0800e88c <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800e88c:	b580      	push	{r7, lr}
 800e88e:	b082      	sub	sp, #8
 800e890:	af00      	add	r7, sp, #0
 800e892:	6078      	str	r0, [r7, #4]
 800e894:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	2b00      	cmp	r3, #0
 800e89a:	d00e      	beq.n	800e8ba <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	7d1b      	ldrb	r3, [r3, #20]
 800e8a0:	2b01      	cmp	r3, #1
 800e8a2:	d106      	bne.n	800e8b2 <tcp_sent+0x26>
 800e8a4:	4b07      	ldr	r3, [pc, #28]	@ (800e8c4 <tcp_sent+0x38>)
 800e8a6:	f240 72f3 	movw	r2, #2035	@ 0x7f3
 800e8aa:	4907      	ldr	r1, [pc, #28]	@ (800e8c8 <tcp_sent+0x3c>)
 800e8ac:	4807      	ldr	r0, [pc, #28]	@ (800e8cc <tcp_sent+0x40>)
 800e8ae:	f007 fe77 	bl	80165a0 <iprintf>
    pcb->sent = sent;
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	683a      	ldr	r2, [r7, #0]
 800e8b6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  }
}
 800e8ba:	bf00      	nop
 800e8bc:	3708      	adds	r7, #8
 800e8be:	46bd      	mov	sp, r7
 800e8c0:	bd80      	pop	{r7, pc}
 800e8c2:	bf00      	nop
 800e8c4:	080190e8 	.word	0x080190e8
 800e8c8:	080196ac 	.word	0x080196ac
 800e8cc:	0801912c 	.word	0x0801912c

0800e8d0 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800e8d0:	b580      	push	{r7, lr}
 800e8d2:	b082      	sub	sp, #8
 800e8d4:	af00      	add	r7, sp, #0
 800e8d6:	6078      	str	r0, [r7, #4]
 800e8d8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	2b00      	cmp	r3, #0
 800e8de:	d00e      	beq.n	800e8fe <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	7d1b      	ldrb	r3, [r3, #20]
 800e8e4:	2b01      	cmp	r3, #1
 800e8e6:	d106      	bne.n	800e8f6 <tcp_err+0x26>
 800e8e8:	4b07      	ldr	r3, [pc, #28]	@ (800e908 <tcp_err+0x38>)
 800e8ea:	f640 020d 	movw	r2, #2061	@ 0x80d
 800e8ee:	4907      	ldr	r1, [pc, #28]	@ (800e90c <tcp_err+0x3c>)
 800e8f0:	4807      	ldr	r0, [pc, #28]	@ (800e910 <tcp_err+0x40>)
 800e8f2:	f007 fe55 	bl	80165a0 <iprintf>
    pcb->errf = err;
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	683a      	ldr	r2, [r7, #0]
 800e8fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  }
}
 800e8fe:	bf00      	nop
 800e900:	3708      	adds	r7, #8
 800e902:	46bd      	mov	sp, r7
 800e904:	bd80      	pop	{r7, pc}
 800e906:	bf00      	nop
 800e908:	080190e8 	.word	0x080190e8
 800e90c:	080196d4 	.word	0x080196d4
 800e910:	0801912c 	.word	0x0801912c

0800e914 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800e914:	b480      	push	{r7}
 800e916:	b085      	sub	sp, #20
 800e918:	af00      	add	r7, sp, #0
 800e91a:	6078      	str	r0, [r7, #4]
 800e91c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	2b00      	cmp	r3, #0
 800e922:	d008      	beq.n	800e936 <tcp_accept+0x22>
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	7d1b      	ldrb	r3, [r3, #20]
 800e928:	2b01      	cmp	r3, #1
 800e92a:	d104      	bne.n	800e936 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800e930:	68fb      	ldr	r3, [r7, #12]
 800e932:	683a      	ldr	r2, [r7, #0]
 800e934:	619a      	str	r2, [r3, #24]
  }
}
 800e936:	bf00      	nop
 800e938:	3714      	adds	r7, #20
 800e93a:	46bd      	mov	sp, r7
 800e93c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e940:	4770      	bx	lr
	...

0800e944 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800e944:	b580      	push	{r7, lr}
 800e946:	b084      	sub	sp, #16
 800e948:	af00      	add	r7, sp, #0
 800e94a:	60f8      	str	r0, [r7, #12]
 800e94c:	60b9      	str	r1, [r7, #8]
 800e94e:	4613      	mov	r3, r2
 800e950:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800e952:	68fb      	ldr	r3, [r7, #12]
 800e954:	2b00      	cmp	r3, #0
 800e956:	d107      	bne.n	800e968 <tcp_poll+0x24>
 800e958:	4b0e      	ldr	r3, [pc, #56]	@ (800e994 <tcp_poll+0x50>)
 800e95a:	f640 023d 	movw	r2, #2109	@ 0x83d
 800e95e:	490e      	ldr	r1, [pc, #56]	@ (800e998 <tcp_poll+0x54>)
 800e960:	480e      	ldr	r0, [pc, #56]	@ (800e99c <tcp_poll+0x58>)
 800e962:	f007 fe1d 	bl	80165a0 <iprintf>
 800e966:	e011      	b.n	800e98c <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800e968:	68fb      	ldr	r3, [r7, #12]
 800e96a:	7d1b      	ldrb	r3, [r3, #20]
 800e96c:	2b01      	cmp	r3, #1
 800e96e:	d106      	bne.n	800e97e <tcp_poll+0x3a>
 800e970:	4b08      	ldr	r3, [pc, #32]	@ (800e994 <tcp_poll+0x50>)
 800e972:	f640 023e 	movw	r2, #2110	@ 0x83e
 800e976:	490a      	ldr	r1, [pc, #40]	@ (800e9a0 <tcp_poll+0x5c>)
 800e978:	4808      	ldr	r0, [pc, #32]	@ (800e99c <tcp_poll+0x58>)
 800e97a:	f007 fe11 	bl	80165a0 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800e97e:	68fb      	ldr	r3, [r7, #12]
 800e980:	68ba      	ldr	r2, [r7, #8]
 800e982:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800e986:	68fb      	ldr	r3, [r7, #12]
 800e988:	79fa      	ldrb	r2, [r7, #7]
 800e98a:	775a      	strb	r2, [r3, #29]
}
 800e98c:	3710      	adds	r7, #16
 800e98e:	46bd      	mov	sp, r7
 800e990:	bd80      	pop	{r7, pc}
 800e992:	bf00      	nop
 800e994:	080190e8 	.word	0x080190e8
 800e998:	080196fc 	.word	0x080196fc
 800e99c:	0801912c 	.word	0x0801912c
 800e9a0:	08019714 	.word	0x08019714

0800e9a4 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800e9a4:	b580      	push	{r7, lr}
 800e9a6:	b082      	sub	sp, #8
 800e9a8:	af00      	add	r7, sp, #0
 800e9aa:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	2b00      	cmp	r3, #0
 800e9b0:	d107      	bne.n	800e9c2 <tcp_pcb_purge+0x1e>
 800e9b2:	4b21      	ldr	r3, [pc, #132]	@ (800ea38 <tcp_pcb_purge+0x94>)
 800e9b4:	f640 0251 	movw	r2, #2129	@ 0x851
 800e9b8:	4920      	ldr	r1, [pc, #128]	@ (800ea3c <tcp_pcb_purge+0x98>)
 800e9ba:	4821      	ldr	r0, [pc, #132]	@ (800ea40 <tcp_pcb_purge+0x9c>)
 800e9bc:	f007 fdf0 	bl	80165a0 <iprintf>
 800e9c0:	e037      	b.n	800ea32 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	7d1b      	ldrb	r3, [r3, #20]
 800e9c6:	2b00      	cmp	r3, #0
 800e9c8:	d033      	beq.n	800ea32 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800e9ce:	2b0a      	cmp	r3, #10
 800e9d0:	d02f      	beq.n	800ea32 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800e9d6:	2b01      	cmp	r3, #1
 800e9d8:	d02b      	beq.n	800ea32 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e9de:	2b00      	cmp	r3, #0
 800e9e0:	d007      	beq.n	800e9f2 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e9e6:	4618      	mov	r0, r3
 800e9e8:	f7fe f86e 	bl	800cac8 <pbuf_free>
      pcb->refused_data = NULL;
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	2200      	movs	r2, #0
 800e9f0:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e9f6:	2b00      	cmp	r3, #0
 800e9f8:	d002      	beq.n	800ea00 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800e9fa:	6878      	ldr	r0, [r7, #4]
 800e9fc:	f000 f986 	bl	800ed0c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ea06:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ea0c:	4618      	mov	r0, r3
 800ea0e:	f7ff fcf1 	bl	800e3f4 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ea16:	4618      	mov	r0, r3
 800ea18:	f7ff fcec 	bl	800e3f4 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	2200      	movs	r2, #0
 800ea20:	66da      	str	r2, [r3, #108]	@ 0x6c
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	2200      	movs	r2, #0
 800ea2e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800ea32:	3708      	adds	r7, #8
 800ea34:	46bd      	mov	sp, r7
 800ea36:	bd80      	pop	{r7, pc}
 800ea38:	080190e8 	.word	0x080190e8
 800ea3c:	08019734 	.word	0x08019734
 800ea40:	0801912c 	.word	0x0801912c

0800ea44 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800ea44:	b580      	push	{r7, lr}
 800ea46:	b084      	sub	sp, #16
 800ea48:	af00      	add	r7, sp, #0
 800ea4a:	6078      	str	r0, [r7, #4]
 800ea4c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800ea4e:	683b      	ldr	r3, [r7, #0]
 800ea50:	2b00      	cmp	r3, #0
 800ea52:	d106      	bne.n	800ea62 <tcp_pcb_remove+0x1e>
 800ea54:	4b3e      	ldr	r3, [pc, #248]	@ (800eb50 <tcp_pcb_remove+0x10c>)
 800ea56:	f640 0283 	movw	r2, #2179	@ 0x883
 800ea5a:	493e      	ldr	r1, [pc, #248]	@ (800eb54 <tcp_pcb_remove+0x110>)
 800ea5c:	483e      	ldr	r0, [pc, #248]	@ (800eb58 <tcp_pcb_remove+0x114>)
 800ea5e:	f007 fd9f 	bl	80165a0 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	2b00      	cmp	r3, #0
 800ea66:	d106      	bne.n	800ea76 <tcp_pcb_remove+0x32>
 800ea68:	4b39      	ldr	r3, [pc, #228]	@ (800eb50 <tcp_pcb_remove+0x10c>)
 800ea6a:	f640 0284 	movw	r2, #2180	@ 0x884
 800ea6e:	493b      	ldr	r1, [pc, #236]	@ (800eb5c <tcp_pcb_remove+0x118>)
 800ea70:	4839      	ldr	r0, [pc, #228]	@ (800eb58 <tcp_pcb_remove+0x114>)
 800ea72:	f007 fd95 	bl	80165a0 <iprintf>

  TCP_RMV(pcblist, pcb);
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	681b      	ldr	r3, [r3, #0]
 800ea7a:	683a      	ldr	r2, [r7, #0]
 800ea7c:	429a      	cmp	r2, r3
 800ea7e:	d105      	bne.n	800ea8c <tcp_pcb_remove+0x48>
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	681b      	ldr	r3, [r3, #0]
 800ea84:	68da      	ldr	r2, [r3, #12]
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	601a      	str	r2, [r3, #0]
 800ea8a:	e013      	b.n	800eab4 <tcp_pcb_remove+0x70>
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	681b      	ldr	r3, [r3, #0]
 800ea90:	60fb      	str	r3, [r7, #12]
 800ea92:	e00c      	b.n	800eaae <tcp_pcb_remove+0x6a>
 800ea94:	68fb      	ldr	r3, [r7, #12]
 800ea96:	68db      	ldr	r3, [r3, #12]
 800ea98:	683a      	ldr	r2, [r7, #0]
 800ea9a:	429a      	cmp	r2, r3
 800ea9c:	d104      	bne.n	800eaa8 <tcp_pcb_remove+0x64>
 800ea9e:	683b      	ldr	r3, [r7, #0]
 800eaa0:	68da      	ldr	r2, [r3, #12]
 800eaa2:	68fb      	ldr	r3, [r7, #12]
 800eaa4:	60da      	str	r2, [r3, #12]
 800eaa6:	e005      	b.n	800eab4 <tcp_pcb_remove+0x70>
 800eaa8:	68fb      	ldr	r3, [r7, #12]
 800eaaa:	68db      	ldr	r3, [r3, #12]
 800eaac:	60fb      	str	r3, [r7, #12]
 800eaae:	68fb      	ldr	r3, [r7, #12]
 800eab0:	2b00      	cmp	r3, #0
 800eab2:	d1ef      	bne.n	800ea94 <tcp_pcb_remove+0x50>
 800eab4:	683b      	ldr	r3, [r7, #0]
 800eab6:	2200      	movs	r2, #0
 800eab8:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800eaba:	6838      	ldr	r0, [r7, #0]
 800eabc:	f7ff ff72 	bl	800e9a4 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800eac0:	683b      	ldr	r3, [r7, #0]
 800eac2:	7d1b      	ldrb	r3, [r3, #20]
 800eac4:	2b0a      	cmp	r3, #10
 800eac6:	d013      	beq.n	800eaf0 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800eac8:	683b      	ldr	r3, [r7, #0]
 800eaca:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800eacc:	2b01      	cmp	r3, #1
 800eace:	d00f      	beq.n	800eaf0 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800ead0:	683b      	ldr	r3, [r7, #0]
 800ead2:	8b5b      	ldrh	r3, [r3, #26]
 800ead4:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800ead8:	2b00      	cmp	r3, #0
 800eada:	d009      	beq.n	800eaf0 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800eadc:	683b      	ldr	r3, [r7, #0]
 800eade:	8b5b      	ldrh	r3, [r3, #26]
 800eae0:	f043 0302 	orr.w	r3, r3, #2
 800eae4:	b29a      	uxth	r2, r3
 800eae6:	683b      	ldr	r3, [r7, #0]
 800eae8:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800eaea:	6838      	ldr	r0, [r7, #0]
 800eaec:	f003 fbc0 	bl	8012270 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800eaf0:	683b      	ldr	r3, [r7, #0]
 800eaf2:	7d1b      	ldrb	r3, [r3, #20]
 800eaf4:	2b01      	cmp	r3, #1
 800eaf6:	d020      	beq.n	800eb3a <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800eaf8:	683b      	ldr	r3, [r7, #0]
 800eafa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800eafc:	2b00      	cmp	r3, #0
 800eafe:	d006      	beq.n	800eb0e <tcp_pcb_remove+0xca>
 800eb00:	4b13      	ldr	r3, [pc, #76]	@ (800eb50 <tcp_pcb_remove+0x10c>)
 800eb02:	f640 0293 	movw	r2, #2195	@ 0x893
 800eb06:	4916      	ldr	r1, [pc, #88]	@ (800eb60 <tcp_pcb_remove+0x11c>)
 800eb08:	4813      	ldr	r0, [pc, #76]	@ (800eb58 <tcp_pcb_remove+0x114>)
 800eb0a:	f007 fd49 	bl	80165a0 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800eb0e:	683b      	ldr	r3, [r7, #0]
 800eb10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800eb12:	2b00      	cmp	r3, #0
 800eb14:	d006      	beq.n	800eb24 <tcp_pcb_remove+0xe0>
 800eb16:	4b0e      	ldr	r3, [pc, #56]	@ (800eb50 <tcp_pcb_remove+0x10c>)
 800eb18:	f640 0294 	movw	r2, #2196	@ 0x894
 800eb1c:	4911      	ldr	r1, [pc, #68]	@ (800eb64 <tcp_pcb_remove+0x120>)
 800eb1e:	480e      	ldr	r0, [pc, #56]	@ (800eb58 <tcp_pcb_remove+0x114>)
 800eb20:	f007 fd3e 	bl	80165a0 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800eb24:	683b      	ldr	r3, [r7, #0]
 800eb26:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800eb28:	2b00      	cmp	r3, #0
 800eb2a:	d006      	beq.n	800eb3a <tcp_pcb_remove+0xf6>
 800eb2c:	4b08      	ldr	r3, [pc, #32]	@ (800eb50 <tcp_pcb_remove+0x10c>)
 800eb2e:	f640 0296 	movw	r2, #2198	@ 0x896
 800eb32:	490d      	ldr	r1, [pc, #52]	@ (800eb68 <tcp_pcb_remove+0x124>)
 800eb34:	4808      	ldr	r0, [pc, #32]	@ (800eb58 <tcp_pcb_remove+0x114>)
 800eb36:	f007 fd33 	bl	80165a0 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800eb3a:	683b      	ldr	r3, [r7, #0]
 800eb3c:	2200      	movs	r2, #0
 800eb3e:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800eb40:	683b      	ldr	r3, [r7, #0]
 800eb42:	2200      	movs	r2, #0
 800eb44:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800eb46:	bf00      	nop
 800eb48:	3710      	adds	r7, #16
 800eb4a:	46bd      	mov	sp, r7
 800eb4c:	bd80      	pop	{r7, pc}
 800eb4e:	bf00      	nop
 800eb50:	080190e8 	.word	0x080190e8
 800eb54:	08019750 	.word	0x08019750
 800eb58:	0801912c 	.word	0x0801912c
 800eb5c:	0801976c 	.word	0x0801976c
 800eb60:	0801978c 	.word	0x0801978c
 800eb64:	080197a4 	.word	0x080197a4
 800eb68:	080197c0 	.word	0x080197c0

0800eb6c <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800eb6c:	b580      	push	{r7, lr}
 800eb6e:	b082      	sub	sp, #8
 800eb70:	af00      	add	r7, sp, #0
 800eb72:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	2b00      	cmp	r3, #0
 800eb78:	d106      	bne.n	800eb88 <tcp_next_iss+0x1c>
 800eb7a:	4b0a      	ldr	r3, [pc, #40]	@ (800eba4 <tcp_next_iss+0x38>)
 800eb7c:	f640 02af 	movw	r2, #2223	@ 0x8af
 800eb80:	4909      	ldr	r1, [pc, #36]	@ (800eba8 <tcp_next_iss+0x3c>)
 800eb82:	480a      	ldr	r0, [pc, #40]	@ (800ebac <tcp_next_iss+0x40>)
 800eb84:	f007 fd0c 	bl	80165a0 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800eb88:	4b09      	ldr	r3, [pc, #36]	@ (800ebb0 <tcp_next_iss+0x44>)
 800eb8a:	681a      	ldr	r2, [r3, #0]
 800eb8c:	4b09      	ldr	r3, [pc, #36]	@ (800ebb4 <tcp_next_iss+0x48>)
 800eb8e:	681b      	ldr	r3, [r3, #0]
 800eb90:	4413      	add	r3, r2
 800eb92:	4a07      	ldr	r2, [pc, #28]	@ (800ebb0 <tcp_next_iss+0x44>)
 800eb94:	6013      	str	r3, [r2, #0]
  return iss;
 800eb96:	4b06      	ldr	r3, [pc, #24]	@ (800ebb0 <tcp_next_iss+0x44>)
 800eb98:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800eb9a:	4618      	mov	r0, r3
 800eb9c:	3708      	adds	r7, #8
 800eb9e:	46bd      	mov	sp, r7
 800eba0:	bd80      	pop	{r7, pc}
 800eba2:	bf00      	nop
 800eba4:	080190e8 	.word	0x080190e8
 800eba8:	080197d8 	.word	0x080197d8
 800ebac:	0801912c 	.word	0x0801912c
 800ebb0:	20000028 	.word	0x20000028
 800ebb4:	2000ed40 	.word	0x2000ed40

0800ebb8 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800ebb8:	b580      	push	{r7, lr}
 800ebba:	b086      	sub	sp, #24
 800ebbc:	af00      	add	r7, sp, #0
 800ebbe:	4603      	mov	r3, r0
 800ebc0:	60b9      	str	r1, [r7, #8]
 800ebc2:	607a      	str	r2, [r7, #4]
 800ebc4:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	2b00      	cmp	r3, #0
 800ebca:	d106      	bne.n	800ebda <tcp_eff_send_mss_netif+0x22>
 800ebcc:	4b14      	ldr	r3, [pc, #80]	@ (800ec20 <tcp_eff_send_mss_netif+0x68>)
 800ebce:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 800ebd2:	4914      	ldr	r1, [pc, #80]	@ (800ec24 <tcp_eff_send_mss_netif+0x6c>)
 800ebd4:	4814      	ldr	r0, [pc, #80]	@ (800ec28 <tcp_eff_send_mss_netif+0x70>)
 800ebd6:	f007 fce3 	bl	80165a0 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800ebda:	68bb      	ldr	r3, [r7, #8]
 800ebdc:	2b00      	cmp	r3, #0
 800ebde:	d101      	bne.n	800ebe4 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800ebe0:	89fb      	ldrh	r3, [r7, #14]
 800ebe2:	e019      	b.n	800ec18 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800ebe4:	68bb      	ldr	r3, [r7, #8]
 800ebe6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800ebe8:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800ebea:	8afb      	ldrh	r3, [r7, #22]
 800ebec:	2b00      	cmp	r3, #0
 800ebee:	d012      	beq.n	800ec16 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800ebf0:	2328      	movs	r3, #40	@ 0x28
 800ebf2:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800ebf4:	8afa      	ldrh	r2, [r7, #22]
 800ebf6:	8abb      	ldrh	r3, [r7, #20]
 800ebf8:	429a      	cmp	r2, r3
 800ebfa:	d904      	bls.n	800ec06 <tcp_eff_send_mss_netif+0x4e>
 800ebfc:	8afa      	ldrh	r2, [r7, #22]
 800ebfe:	8abb      	ldrh	r3, [r7, #20]
 800ec00:	1ad3      	subs	r3, r2, r3
 800ec02:	b29b      	uxth	r3, r3
 800ec04:	e000      	b.n	800ec08 <tcp_eff_send_mss_netif+0x50>
 800ec06:	2300      	movs	r3, #0
 800ec08:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800ec0a:	8a7a      	ldrh	r2, [r7, #18]
 800ec0c:	89fb      	ldrh	r3, [r7, #14]
 800ec0e:	4293      	cmp	r3, r2
 800ec10:	bf28      	it	cs
 800ec12:	4613      	movcs	r3, r2
 800ec14:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800ec16:	89fb      	ldrh	r3, [r7, #14]
}
 800ec18:	4618      	mov	r0, r3
 800ec1a:	3718      	adds	r7, #24
 800ec1c:	46bd      	mov	sp, r7
 800ec1e:	bd80      	pop	{r7, pc}
 800ec20:	080190e8 	.word	0x080190e8
 800ec24:	080197f4 	.word	0x080197f4
 800ec28:	0801912c 	.word	0x0801912c

0800ec2c <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800ec2c:	b580      	push	{r7, lr}
 800ec2e:	b084      	sub	sp, #16
 800ec30:	af00      	add	r7, sp, #0
 800ec32:	6078      	str	r0, [r7, #4]
 800ec34:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800ec36:	683b      	ldr	r3, [r7, #0]
 800ec38:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	2b00      	cmp	r3, #0
 800ec3e:	d119      	bne.n	800ec74 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800ec40:	4b10      	ldr	r3, [pc, #64]	@ (800ec84 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800ec42:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 800ec46:	4910      	ldr	r1, [pc, #64]	@ (800ec88 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800ec48:	4810      	ldr	r0, [pc, #64]	@ (800ec8c <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800ec4a:	f007 fca9 	bl	80165a0 <iprintf>

  while (pcb != NULL) {
 800ec4e:	e011      	b.n	800ec74 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800ec50:	68fb      	ldr	r3, [r7, #12]
 800ec52:	681a      	ldr	r2, [r3, #0]
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	681b      	ldr	r3, [r3, #0]
 800ec58:	429a      	cmp	r2, r3
 800ec5a:	d108      	bne.n	800ec6e <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800ec5c:	68fb      	ldr	r3, [r7, #12]
 800ec5e:	68db      	ldr	r3, [r3, #12]
 800ec60:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800ec62:	68f8      	ldr	r0, [r7, #12]
 800ec64:	f7fe fd42 	bl	800d6ec <tcp_abort>
      pcb = next;
 800ec68:	68bb      	ldr	r3, [r7, #8]
 800ec6a:	60fb      	str	r3, [r7, #12]
 800ec6c:	e002      	b.n	800ec74 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800ec6e:	68fb      	ldr	r3, [r7, #12]
 800ec70:	68db      	ldr	r3, [r3, #12]
 800ec72:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800ec74:	68fb      	ldr	r3, [r7, #12]
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	d1ea      	bne.n	800ec50 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800ec7a:	bf00      	nop
 800ec7c:	bf00      	nop
 800ec7e:	3710      	adds	r7, #16
 800ec80:	46bd      	mov	sp, r7
 800ec82:	bd80      	pop	{r7, pc}
 800ec84:	080190e8 	.word	0x080190e8
 800ec88:	0801981c 	.word	0x0801981c
 800ec8c:	0801912c 	.word	0x0801912c

0800ec90 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800ec90:	b580      	push	{r7, lr}
 800ec92:	b084      	sub	sp, #16
 800ec94:	af00      	add	r7, sp, #0
 800ec96:	6078      	str	r0, [r7, #4]
 800ec98:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	d02a      	beq.n	800ecf6 <tcp_netif_ip_addr_changed+0x66>
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	681b      	ldr	r3, [r3, #0]
 800eca4:	2b00      	cmp	r3, #0
 800eca6:	d026      	beq.n	800ecf6 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800eca8:	4b15      	ldr	r3, [pc, #84]	@ (800ed00 <tcp_netif_ip_addr_changed+0x70>)
 800ecaa:	681b      	ldr	r3, [r3, #0]
 800ecac:	4619      	mov	r1, r3
 800ecae:	6878      	ldr	r0, [r7, #4]
 800ecb0:	f7ff ffbc 	bl	800ec2c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800ecb4:	4b13      	ldr	r3, [pc, #76]	@ (800ed04 <tcp_netif_ip_addr_changed+0x74>)
 800ecb6:	681b      	ldr	r3, [r3, #0]
 800ecb8:	4619      	mov	r1, r3
 800ecba:	6878      	ldr	r0, [r7, #4]
 800ecbc:	f7ff ffb6 	bl	800ec2c <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800ecc0:	683b      	ldr	r3, [r7, #0]
 800ecc2:	2b00      	cmp	r3, #0
 800ecc4:	d017      	beq.n	800ecf6 <tcp_netif_ip_addr_changed+0x66>
 800ecc6:	683b      	ldr	r3, [r7, #0]
 800ecc8:	681b      	ldr	r3, [r3, #0]
 800ecca:	2b00      	cmp	r3, #0
 800eccc:	d013      	beq.n	800ecf6 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800ecce:	4b0e      	ldr	r3, [pc, #56]	@ (800ed08 <tcp_netif_ip_addr_changed+0x78>)
 800ecd0:	681b      	ldr	r3, [r3, #0]
 800ecd2:	60fb      	str	r3, [r7, #12]
 800ecd4:	e00c      	b.n	800ecf0 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800ecd6:	68fb      	ldr	r3, [r7, #12]
 800ecd8:	681a      	ldr	r2, [r3, #0]
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	681b      	ldr	r3, [r3, #0]
 800ecde:	429a      	cmp	r2, r3
 800ece0:	d103      	bne.n	800ecea <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800ece2:	683b      	ldr	r3, [r7, #0]
 800ece4:	681a      	ldr	r2, [r3, #0]
 800ece6:	68fb      	ldr	r3, [r7, #12]
 800ece8:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800ecea:	68fb      	ldr	r3, [r7, #12]
 800ecec:	68db      	ldr	r3, [r3, #12]
 800ecee:	60fb      	str	r3, [r7, #12]
 800ecf0:	68fb      	ldr	r3, [r7, #12]
 800ecf2:	2b00      	cmp	r3, #0
 800ecf4:	d1ef      	bne.n	800ecd6 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800ecf6:	bf00      	nop
 800ecf8:	3710      	adds	r7, #16
 800ecfa:	46bd      	mov	sp, r7
 800ecfc:	bd80      	pop	{r7, pc}
 800ecfe:	bf00      	nop
 800ed00:	2000ed4c 	.word	0x2000ed4c
 800ed04:	2000ed44 	.word	0x2000ed44
 800ed08:	2000ed48 	.word	0x2000ed48

0800ed0c <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800ed0c:	b580      	push	{r7, lr}
 800ed0e:	b082      	sub	sp, #8
 800ed10:	af00      	add	r7, sp, #0
 800ed12:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ed18:	2b00      	cmp	r3, #0
 800ed1a:	d007      	beq.n	800ed2c <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ed20:	4618      	mov	r0, r3
 800ed22:	f7ff fb67 	bl	800e3f4 <tcp_segs_free>
    pcb->ooseq = NULL;
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	2200      	movs	r2, #0
 800ed2a:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800ed2c:	bf00      	nop
 800ed2e:	3708      	adds	r7, #8
 800ed30:	46bd      	mov	sp, r7
 800ed32:	bd80      	pop	{r7, pc}

0800ed34 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800ed34:	b590      	push	{r4, r7, lr}
 800ed36:	b08d      	sub	sp, #52	@ 0x34
 800ed38:	af04      	add	r7, sp, #16
 800ed3a:	6078      	str	r0, [r7, #4]
 800ed3c:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	2b00      	cmp	r3, #0
 800ed42:	d105      	bne.n	800ed50 <tcp_input+0x1c>
 800ed44:	4b9b      	ldr	r3, [pc, #620]	@ (800efb4 <tcp_input+0x280>)
 800ed46:	2283      	movs	r2, #131	@ 0x83
 800ed48:	499b      	ldr	r1, [pc, #620]	@ (800efb8 <tcp_input+0x284>)
 800ed4a:	489c      	ldr	r0, [pc, #624]	@ (800efbc <tcp_input+0x288>)
 800ed4c:	f007 fc28 	bl	80165a0 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	685b      	ldr	r3, [r3, #4]
 800ed54:	4a9a      	ldr	r2, [pc, #616]	@ (800efc0 <tcp_input+0x28c>)
 800ed56:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	895b      	ldrh	r3, [r3, #10]
 800ed5c:	2b13      	cmp	r3, #19
 800ed5e:	f240 83d1 	bls.w	800f504 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800ed62:	4b98      	ldr	r3, [pc, #608]	@ (800efc4 <tcp_input+0x290>)
 800ed64:	695b      	ldr	r3, [r3, #20]
 800ed66:	4a97      	ldr	r2, [pc, #604]	@ (800efc4 <tcp_input+0x290>)
 800ed68:	6812      	ldr	r2, [r2, #0]
 800ed6a:	4611      	mov	r1, r2
 800ed6c:	4618      	mov	r0, r3
 800ed6e:	f006 f9df 	bl	8015130 <ip4_addr_isbroadcast_u32>
 800ed72:	4603      	mov	r3, r0
 800ed74:	2b00      	cmp	r3, #0
 800ed76:	f040 83c7 	bne.w	800f508 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800ed7a:	4b92      	ldr	r3, [pc, #584]	@ (800efc4 <tcp_input+0x290>)
 800ed7c:	695b      	ldr	r3, [r3, #20]
 800ed7e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800ed82:	2be0      	cmp	r3, #224	@ 0xe0
 800ed84:	f000 83c0 	beq.w	800f508 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800ed88:	4b8d      	ldr	r3, [pc, #564]	@ (800efc0 <tcp_input+0x28c>)
 800ed8a:	681b      	ldr	r3, [r3, #0]
 800ed8c:	899b      	ldrh	r3, [r3, #12]
 800ed8e:	b29b      	uxth	r3, r3
 800ed90:	4618      	mov	r0, r3
 800ed92:	f7fc faa7 	bl	800b2e4 <lwip_htons>
 800ed96:	4603      	mov	r3, r0
 800ed98:	0b1b      	lsrs	r3, r3, #12
 800ed9a:	b29b      	uxth	r3, r3
 800ed9c:	b2db      	uxtb	r3, r3
 800ed9e:	009b      	lsls	r3, r3, #2
 800eda0:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800eda2:	7cbb      	ldrb	r3, [r7, #18]
 800eda4:	2b13      	cmp	r3, #19
 800eda6:	f240 83b1 	bls.w	800f50c <tcp_input+0x7d8>
 800edaa:	7cbb      	ldrb	r3, [r7, #18]
 800edac:	b29a      	uxth	r2, r3
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	891b      	ldrh	r3, [r3, #8]
 800edb2:	429a      	cmp	r2, r3
 800edb4:	f200 83aa 	bhi.w	800f50c <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800edb8:	7cbb      	ldrb	r3, [r7, #18]
 800edba:	b29b      	uxth	r3, r3
 800edbc:	3b14      	subs	r3, #20
 800edbe:	b29a      	uxth	r2, r3
 800edc0:	4b81      	ldr	r3, [pc, #516]	@ (800efc8 <tcp_input+0x294>)
 800edc2:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800edc4:	4b81      	ldr	r3, [pc, #516]	@ (800efcc <tcp_input+0x298>)
 800edc6:	2200      	movs	r2, #0
 800edc8:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	895a      	ldrh	r2, [r3, #10]
 800edce:	7cbb      	ldrb	r3, [r7, #18]
 800edd0:	b29b      	uxth	r3, r3
 800edd2:	429a      	cmp	r2, r3
 800edd4:	d309      	bcc.n	800edea <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800edd6:	4b7c      	ldr	r3, [pc, #496]	@ (800efc8 <tcp_input+0x294>)
 800edd8:	881a      	ldrh	r2, [r3, #0]
 800edda:	4b7d      	ldr	r3, [pc, #500]	@ (800efd0 <tcp_input+0x29c>)
 800eddc:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800edde:	7cbb      	ldrb	r3, [r7, #18]
 800ede0:	4619      	mov	r1, r3
 800ede2:	6878      	ldr	r0, [r7, #4]
 800ede4:	f7fd fdea 	bl	800c9bc <pbuf_remove_header>
 800ede8:	e04e      	b.n	800ee88 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	681b      	ldr	r3, [r3, #0]
 800edee:	2b00      	cmp	r3, #0
 800edf0:	d105      	bne.n	800edfe <tcp_input+0xca>
 800edf2:	4b70      	ldr	r3, [pc, #448]	@ (800efb4 <tcp_input+0x280>)
 800edf4:	22c2      	movs	r2, #194	@ 0xc2
 800edf6:	4977      	ldr	r1, [pc, #476]	@ (800efd4 <tcp_input+0x2a0>)
 800edf8:	4870      	ldr	r0, [pc, #448]	@ (800efbc <tcp_input+0x288>)
 800edfa:	f007 fbd1 	bl	80165a0 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800edfe:	2114      	movs	r1, #20
 800ee00:	6878      	ldr	r0, [r7, #4]
 800ee02:	f7fd fddb 	bl	800c9bc <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	895a      	ldrh	r2, [r3, #10]
 800ee0a:	4b71      	ldr	r3, [pc, #452]	@ (800efd0 <tcp_input+0x29c>)
 800ee0c:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800ee0e:	4b6e      	ldr	r3, [pc, #440]	@ (800efc8 <tcp_input+0x294>)
 800ee10:	881a      	ldrh	r2, [r3, #0]
 800ee12:	4b6f      	ldr	r3, [pc, #444]	@ (800efd0 <tcp_input+0x29c>)
 800ee14:	881b      	ldrh	r3, [r3, #0]
 800ee16:	1ad3      	subs	r3, r2, r3
 800ee18:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800ee1a:	4b6d      	ldr	r3, [pc, #436]	@ (800efd0 <tcp_input+0x29c>)
 800ee1c:	881b      	ldrh	r3, [r3, #0]
 800ee1e:	4619      	mov	r1, r3
 800ee20:	6878      	ldr	r0, [r7, #4]
 800ee22:	f7fd fdcb 	bl	800c9bc <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	681b      	ldr	r3, [r3, #0]
 800ee2a:	895b      	ldrh	r3, [r3, #10]
 800ee2c:	8a3a      	ldrh	r2, [r7, #16]
 800ee2e:	429a      	cmp	r2, r3
 800ee30:	f200 836e 	bhi.w	800f510 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	681b      	ldr	r3, [r3, #0]
 800ee38:	685b      	ldr	r3, [r3, #4]
 800ee3a:	4a64      	ldr	r2, [pc, #400]	@ (800efcc <tcp_input+0x298>)
 800ee3c:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	681b      	ldr	r3, [r3, #0]
 800ee42:	8a3a      	ldrh	r2, [r7, #16]
 800ee44:	4611      	mov	r1, r2
 800ee46:	4618      	mov	r0, r3
 800ee48:	f7fd fdb8 	bl	800c9bc <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	891a      	ldrh	r2, [r3, #8]
 800ee50:	8a3b      	ldrh	r3, [r7, #16]
 800ee52:	1ad3      	subs	r3, r2, r3
 800ee54:	b29a      	uxth	r2, r3
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	895b      	ldrh	r3, [r3, #10]
 800ee5e:	2b00      	cmp	r3, #0
 800ee60:	d005      	beq.n	800ee6e <tcp_input+0x13a>
 800ee62:	4b54      	ldr	r3, [pc, #336]	@ (800efb4 <tcp_input+0x280>)
 800ee64:	22df      	movs	r2, #223	@ 0xdf
 800ee66:	495c      	ldr	r1, [pc, #368]	@ (800efd8 <tcp_input+0x2a4>)
 800ee68:	4854      	ldr	r0, [pc, #336]	@ (800efbc <tcp_input+0x288>)
 800ee6a:	f007 fb99 	bl	80165a0 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	891a      	ldrh	r2, [r3, #8]
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	681b      	ldr	r3, [r3, #0]
 800ee76:	891b      	ldrh	r3, [r3, #8]
 800ee78:	429a      	cmp	r2, r3
 800ee7a:	d005      	beq.n	800ee88 <tcp_input+0x154>
 800ee7c:	4b4d      	ldr	r3, [pc, #308]	@ (800efb4 <tcp_input+0x280>)
 800ee7e:	22e0      	movs	r2, #224	@ 0xe0
 800ee80:	4956      	ldr	r1, [pc, #344]	@ (800efdc <tcp_input+0x2a8>)
 800ee82:	484e      	ldr	r0, [pc, #312]	@ (800efbc <tcp_input+0x288>)
 800ee84:	f007 fb8c 	bl	80165a0 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800ee88:	4b4d      	ldr	r3, [pc, #308]	@ (800efc0 <tcp_input+0x28c>)
 800ee8a:	681b      	ldr	r3, [r3, #0]
 800ee8c:	881b      	ldrh	r3, [r3, #0]
 800ee8e:	b29b      	uxth	r3, r3
 800ee90:	4a4b      	ldr	r2, [pc, #300]	@ (800efc0 <tcp_input+0x28c>)
 800ee92:	6814      	ldr	r4, [r2, #0]
 800ee94:	4618      	mov	r0, r3
 800ee96:	f7fc fa25 	bl	800b2e4 <lwip_htons>
 800ee9a:	4603      	mov	r3, r0
 800ee9c:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800ee9e:	4b48      	ldr	r3, [pc, #288]	@ (800efc0 <tcp_input+0x28c>)
 800eea0:	681b      	ldr	r3, [r3, #0]
 800eea2:	885b      	ldrh	r3, [r3, #2]
 800eea4:	b29b      	uxth	r3, r3
 800eea6:	4a46      	ldr	r2, [pc, #280]	@ (800efc0 <tcp_input+0x28c>)
 800eea8:	6814      	ldr	r4, [r2, #0]
 800eeaa:	4618      	mov	r0, r3
 800eeac:	f7fc fa1a 	bl	800b2e4 <lwip_htons>
 800eeb0:	4603      	mov	r3, r0
 800eeb2:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800eeb4:	4b42      	ldr	r3, [pc, #264]	@ (800efc0 <tcp_input+0x28c>)
 800eeb6:	681b      	ldr	r3, [r3, #0]
 800eeb8:	685b      	ldr	r3, [r3, #4]
 800eeba:	4a41      	ldr	r2, [pc, #260]	@ (800efc0 <tcp_input+0x28c>)
 800eebc:	6814      	ldr	r4, [r2, #0]
 800eebe:	4618      	mov	r0, r3
 800eec0:	f7fc fa25 	bl	800b30e <lwip_htonl>
 800eec4:	4603      	mov	r3, r0
 800eec6:	6063      	str	r3, [r4, #4]
 800eec8:	6863      	ldr	r3, [r4, #4]
 800eeca:	4a45      	ldr	r2, [pc, #276]	@ (800efe0 <tcp_input+0x2ac>)
 800eecc:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800eece:	4b3c      	ldr	r3, [pc, #240]	@ (800efc0 <tcp_input+0x28c>)
 800eed0:	681b      	ldr	r3, [r3, #0]
 800eed2:	689b      	ldr	r3, [r3, #8]
 800eed4:	4a3a      	ldr	r2, [pc, #232]	@ (800efc0 <tcp_input+0x28c>)
 800eed6:	6814      	ldr	r4, [r2, #0]
 800eed8:	4618      	mov	r0, r3
 800eeda:	f7fc fa18 	bl	800b30e <lwip_htonl>
 800eede:	4603      	mov	r3, r0
 800eee0:	60a3      	str	r3, [r4, #8]
 800eee2:	68a3      	ldr	r3, [r4, #8]
 800eee4:	4a3f      	ldr	r2, [pc, #252]	@ (800efe4 <tcp_input+0x2b0>)
 800eee6:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800eee8:	4b35      	ldr	r3, [pc, #212]	@ (800efc0 <tcp_input+0x28c>)
 800eeea:	681b      	ldr	r3, [r3, #0]
 800eeec:	89db      	ldrh	r3, [r3, #14]
 800eeee:	b29b      	uxth	r3, r3
 800eef0:	4a33      	ldr	r2, [pc, #204]	@ (800efc0 <tcp_input+0x28c>)
 800eef2:	6814      	ldr	r4, [r2, #0]
 800eef4:	4618      	mov	r0, r3
 800eef6:	f7fc f9f5 	bl	800b2e4 <lwip_htons>
 800eefa:	4603      	mov	r3, r0
 800eefc:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800eefe:	4b30      	ldr	r3, [pc, #192]	@ (800efc0 <tcp_input+0x28c>)
 800ef00:	681b      	ldr	r3, [r3, #0]
 800ef02:	899b      	ldrh	r3, [r3, #12]
 800ef04:	b29b      	uxth	r3, r3
 800ef06:	4618      	mov	r0, r3
 800ef08:	f7fc f9ec 	bl	800b2e4 <lwip_htons>
 800ef0c:	4603      	mov	r3, r0
 800ef0e:	b2db      	uxtb	r3, r3
 800ef10:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ef14:	b2da      	uxtb	r2, r3
 800ef16:	4b34      	ldr	r3, [pc, #208]	@ (800efe8 <tcp_input+0x2b4>)
 800ef18:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	891a      	ldrh	r2, [r3, #8]
 800ef1e:	4b33      	ldr	r3, [pc, #204]	@ (800efec <tcp_input+0x2b8>)
 800ef20:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800ef22:	4b31      	ldr	r3, [pc, #196]	@ (800efe8 <tcp_input+0x2b4>)
 800ef24:	781b      	ldrb	r3, [r3, #0]
 800ef26:	f003 0303 	and.w	r3, r3, #3
 800ef2a:	2b00      	cmp	r3, #0
 800ef2c:	d00c      	beq.n	800ef48 <tcp_input+0x214>
    tcplen++;
 800ef2e:	4b2f      	ldr	r3, [pc, #188]	@ (800efec <tcp_input+0x2b8>)
 800ef30:	881b      	ldrh	r3, [r3, #0]
 800ef32:	3301      	adds	r3, #1
 800ef34:	b29a      	uxth	r2, r3
 800ef36:	4b2d      	ldr	r3, [pc, #180]	@ (800efec <tcp_input+0x2b8>)
 800ef38:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	891a      	ldrh	r2, [r3, #8]
 800ef3e:	4b2b      	ldr	r3, [pc, #172]	@ (800efec <tcp_input+0x2b8>)
 800ef40:	881b      	ldrh	r3, [r3, #0]
 800ef42:	429a      	cmp	r2, r3
 800ef44:	f200 82e6 	bhi.w	800f514 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800ef48:	2300      	movs	r3, #0
 800ef4a:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ef4c:	4b28      	ldr	r3, [pc, #160]	@ (800eff0 <tcp_input+0x2bc>)
 800ef4e:	681b      	ldr	r3, [r3, #0]
 800ef50:	61fb      	str	r3, [r7, #28]
 800ef52:	e09d      	b.n	800f090 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800ef54:	69fb      	ldr	r3, [r7, #28]
 800ef56:	7d1b      	ldrb	r3, [r3, #20]
 800ef58:	2b00      	cmp	r3, #0
 800ef5a:	d105      	bne.n	800ef68 <tcp_input+0x234>
 800ef5c:	4b15      	ldr	r3, [pc, #84]	@ (800efb4 <tcp_input+0x280>)
 800ef5e:	22fb      	movs	r2, #251	@ 0xfb
 800ef60:	4924      	ldr	r1, [pc, #144]	@ (800eff4 <tcp_input+0x2c0>)
 800ef62:	4816      	ldr	r0, [pc, #88]	@ (800efbc <tcp_input+0x288>)
 800ef64:	f007 fb1c 	bl	80165a0 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800ef68:	69fb      	ldr	r3, [r7, #28]
 800ef6a:	7d1b      	ldrb	r3, [r3, #20]
 800ef6c:	2b0a      	cmp	r3, #10
 800ef6e:	d105      	bne.n	800ef7c <tcp_input+0x248>
 800ef70:	4b10      	ldr	r3, [pc, #64]	@ (800efb4 <tcp_input+0x280>)
 800ef72:	22fc      	movs	r2, #252	@ 0xfc
 800ef74:	4920      	ldr	r1, [pc, #128]	@ (800eff8 <tcp_input+0x2c4>)
 800ef76:	4811      	ldr	r0, [pc, #68]	@ (800efbc <tcp_input+0x288>)
 800ef78:	f007 fb12 	bl	80165a0 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800ef7c:	69fb      	ldr	r3, [r7, #28]
 800ef7e:	7d1b      	ldrb	r3, [r3, #20]
 800ef80:	2b01      	cmp	r3, #1
 800ef82:	d105      	bne.n	800ef90 <tcp_input+0x25c>
 800ef84:	4b0b      	ldr	r3, [pc, #44]	@ (800efb4 <tcp_input+0x280>)
 800ef86:	22fd      	movs	r2, #253	@ 0xfd
 800ef88:	491c      	ldr	r1, [pc, #112]	@ (800effc <tcp_input+0x2c8>)
 800ef8a:	480c      	ldr	r0, [pc, #48]	@ (800efbc <tcp_input+0x288>)
 800ef8c:	f007 fb08 	bl	80165a0 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ef90:	69fb      	ldr	r3, [r7, #28]
 800ef92:	7a1b      	ldrb	r3, [r3, #8]
 800ef94:	2b00      	cmp	r3, #0
 800ef96:	d033      	beq.n	800f000 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800ef98:	69fb      	ldr	r3, [r7, #28]
 800ef9a:	7a1a      	ldrb	r2, [r3, #8]
 800ef9c:	4b09      	ldr	r3, [pc, #36]	@ (800efc4 <tcp_input+0x290>)
 800ef9e:	685b      	ldr	r3, [r3, #4]
 800efa0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800efa4:	3301      	adds	r3, #1
 800efa6:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800efa8:	429a      	cmp	r2, r3
 800efaa:	d029      	beq.n	800f000 <tcp_input+0x2cc>
      prev = pcb;
 800efac:	69fb      	ldr	r3, [r7, #28]
 800efae:	61bb      	str	r3, [r7, #24]
      continue;
 800efb0:	e06b      	b.n	800f08a <tcp_input+0x356>
 800efb2:	bf00      	nop
 800efb4:	08019850 	.word	0x08019850
 800efb8:	08019884 	.word	0x08019884
 800efbc:	0801989c 	.word	0x0801989c
 800efc0:	2000ed68 	.word	0x2000ed68
 800efc4:	200093f4 	.word	0x200093f4
 800efc8:	2000ed6c 	.word	0x2000ed6c
 800efcc:	2000ed70 	.word	0x2000ed70
 800efd0:	2000ed6e 	.word	0x2000ed6e
 800efd4:	080198c4 	.word	0x080198c4
 800efd8:	080198d4 	.word	0x080198d4
 800efdc:	080198e0 	.word	0x080198e0
 800efe0:	2000ed78 	.word	0x2000ed78
 800efe4:	2000ed7c 	.word	0x2000ed7c
 800efe8:	2000ed84 	.word	0x2000ed84
 800efec:	2000ed82 	.word	0x2000ed82
 800eff0:	2000ed4c 	.word	0x2000ed4c
 800eff4:	08019900 	.word	0x08019900
 800eff8:	08019928 	.word	0x08019928
 800effc:	08019954 	.word	0x08019954
    }

    if (pcb->remote_port == tcphdr->src &&
 800f000:	69fb      	ldr	r3, [r7, #28]
 800f002:	8b1a      	ldrh	r2, [r3, #24]
 800f004:	4b72      	ldr	r3, [pc, #456]	@ (800f1d0 <tcp_input+0x49c>)
 800f006:	681b      	ldr	r3, [r3, #0]
 800f008:	881b      	ldrh	r3, [r3, #0]
 800f00a:	b29b      	uxth	r3, r3
 800f00c:	429a      	cmp	r2, r3
 800f00e:	d13a      	bne.n	800f086 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800f010:	69fb      	ldr	r3, [r7, #28]
 800f012:	8ada      	ldrh	r2, [r3, #22]
 800f014:	4b6e      	ldr	r3, [pc, #440]	@ (800f1d0 <tcp_input+0x49c>)
 800f016:	681b      	ldr	r3, [r3, #0]
 800f018:	885b      	ldrh	r3, [r3, #2]
 800f01a:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800f01c:	429a      	cmp	r2, r3
 800f01e:	d132      	bne.n	800f086 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f020:	69fb      	ldr	r3, [r7, #28]
 800f022:	685a      	ldr	r2, [r3, #4]
 800f024:	4b6b      	ldr	r3, [pc, #428]	@ (800f1d4 <tcp_input+0x4a0>)
 800f026:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800f028:	429a      	cmp	r2, r3
 800f02a:	d12c      	bne.n	800f086 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800f02c:	69fb      	ldr	r3, [r7, #28]
 800f02e:	681a      	ldr	r2, [r3, #0]
 800f030:	4b68      	ldr	r3, [pc, #416]	@ (800f1d4 <tcp_input+0x4a0>)
 800f032:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f034:	429a      	cmp	r2, r3
 800f036:	d126      	bne.n	800f086 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800f038:	69fb      	ldr	r3, [r7, #28]
 800f03a:	68db      	ldr	r3, [r3, #12]
 800f03c:	69fa      	ldr	r2, [r7, #28]
 800f03e:	429a      	cmp	r2, r3
 800f040:	d106      	bne.n	800f050 <tcp_input+0x31c>
 800f042:	4b65      	ldr	r3, [pc, #404]	@ (800f1d8 <tcp_input+0x4a4>)
 800f044:	f240 120d 	movw	r2, #269	@ 0x10d
 800f048:	4964      	ldr	r1, [pc, #400]	@ (800f1dc <tcp_input+0x4a8>)
 800f04a:	4865      	ldr	r0, [pc, #404]	@ (800f1e0 <tcp_input+0x4ac>)
 800f04c:	f007 faa8 	bl	80165a0 <iprintf>
      if (prev != NULL) {
 800f050:	69bb      	ldr	r3, [r7, #24]
 800f052:	2b00      	cmp	r3, #0
 800f054:	d00a      	beq.n	800f06c <tcp_input+0x338>
        prev->next = pcb->next;
 800f056:	69fb      	ldr	r3, [r7, #28]
 800f058:	68da      	ldr	r2, [r3, #12]
 800f05a:	69bb      	ldr	r3, [r7, #24]
 800f05c:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800f05e:	4b61      	ldr	r3, [pc, #388]	@ (800f1e4 <tcp_input+0x4b0>)
 800f060:	681a      	ldr	r2, [r3, #0]
 800f062:	69fb      	ldr	r3, [r7, #28]
 800f064:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800f066:	4a5f      	ldr	r2, [pc, #380]	@ (800f1e4 <tcp_input+0x4b0>)
 800f068:	69fb      	ldr	r3, [r7, #28]
 800f06a:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800f06c:	69fb      	ldr	r3, [r7, #28]
 800f06e:	68db      	ldr	r3, [r3, #12]
 800f070:	69fa      	ldr	r2, [r7, #28]
 800f072:	429a      	cmp	r2, r3
 800f074:	d111      	bne.n	800f09a <tcp_input+0x366>
 800f076:	4b58      	ldr	r3, [pc, #352]	@ (800f1d8 <tcp_input+0x4a4>)
 800f078:	f240 1215 	movw	r2, #277	@ 0x115
 800f07c:	495a      	ldr	r1, [pc, #360]	@ (800f1e8 <tcp_input+0x4b4>)
 800f07e:	4858      	ldr	r0, [pc, #352]	@ (800f1e0 <tcp_input+0x4ac>)
 800f080:	f007 fa8e 	bl	80165a0 <iprintf>
      break;
 800f084:	e009      	b.n	800f09a <tcp_input+0x366>
    }
    prev = pcb;
 800f086:	69fb      	ldr	r3, [r7, #28]
 800f088:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f08a:	69fb      	ldr	r3, [r7, #28]
 800f08c:	68db      	ldr	r3, [r3, #12]
 800f08e:	61fb      	str	r3, [r7, #28]
 800f090:	69fb      	ldr	r3, [r7, #28]
 800f092:	2b00      	cmp	r3, #0
 800f094:	f47f af5e 	bne.w	800ef54 <tcp_input+0x220>
 800f098:	e000      	b.n	800f09c <tcp_input+0x368>
      break;
 800f09a:	bf00      	nop
  }

  if (pcb == NULL) {
 800f09c:	69fb      	ldr	r3, [r7, #28]
 800f09e:	2b00      	cmp	r3, #0
 800f0a0:	f040 80aa 	bne.w	800f1f8 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f0a4:	4b51      	ldr	r3, [pc, #324]	@ (800f1ec <tcp_input+0x4b8>)
 800f0a6:	681b      	ldr	r3, [r3, #0]
 800f0a8:	61fb      	str	r3, [r7, #28]
 800f0aa:	e03f      	b.n	800f12c <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800f0ac:	69fb      	ldr	r3, [r7, #28]
 800f0ae:	7d1b      	ldrb	r3, [r3, #20]
 800f0b0:	2b0a      	cmp	r3, #10
 800f0b2:	d006      	beq.n	800f0c2 <tcp_input+0x38e>
 800f0b4:	4b48      	ldr	r3, [pc, #288]	@ (800f1d8 <tcp_input+0x4a4>)
 800f0b6:	f240 121f 	movw	r2, #287	@ 0x11f
 800f0ba:	494d      	ldr	r1, [pc, #308]	@ (800f1f0 <tcp_input+0x4bc>)
 800f0bc:	4848      	ldr	r0, [pc, #288]	@ (800f1e0 <tcp_input+0x4ac>)
 800f0be:	f007 fa6f 	bl	80165a0 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f0c2:	69fb      	ldr	r3, [r7, #28]
 800f0c4:	7a1b      	ldrb	r3, [r3, #8]
 800f0c6:	2b00      	cmp	r3, #0
 800f0c8:	d009      	beq.n	800f0de <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f0ca:	69fb      	ldr	r3, [r7, #28]
 800f0cc:	7a1a      	ldrb	r2, [r3, #8]
 800f0ce:	4b41      	ldr	r3, [pc, #260]	@ (800f1d4 <tcp_input+0x4a0>)
 800f0d0:	685b      	ldr	r3, [r3, #4]
 800f0d2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800f0d6:	3301      	adds	r3, #1
 800f0d8:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f0da:	429a      	cmp	r2, r3
 800f0dc:	d122      	bne.n	800f124 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800f0de:	69fb      	ldr	r3, [r7, #28]
 800f0e0:	8b1a      	ldrh	r2, [r3, #24]
 800f0e2:	4b3b      	ldr	r3, [pc, #236]	@ (800f1d0 <tcp_input+0x49c>)
 800f0e4:	681b      	ldr	r3, [r3, #0]
 800f0e6:	881b      	ldrh	r3, [r3, #0]
 800f0e8:	b29b      	uxth	r3, r3
 800f0ea:	429a      	cmp	r2, r3
 800f0ec:	d11b      	bne.n	800f126 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800f0ee:	69fb      	ldr	r3, [r7, #28]
 800f0f0:	8ada      	ldrh	r2, [r3, #22]
 800f0f2:	4b37      	ldr	r3, [pc, #220]	@ (800f1d0 <tcp_input+0x49c>)
 800f0f4:	681b      	ldr	r3, [r3, #0]
 800f0f6:	885b      	ldrh	r3, [r3, #2]
 800f0f8:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800f0fa:	429a      	cmp	r2, r3
 800f0fc:	d113      	bne.n	800f126 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f0fe:	69fb      	ldr	r3, [r7, #28]
 800f100:	685a      	ldr	r2, [r3, #4]
 800f102:	4b34      	ldr	r3, [pc, #208]	@ (800f1d4 <tcp_input+0x4a0>)
 800f104:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800f106:	429a      	cmp	r2, r3
 800f108:	d10d      	bne.n	800f126 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800f10a:	69fb      	ldr	r3, [r7, #28]
 800f10c:	681a      	ldr	r2, [r3, #0]
 800f10e:	4b31      	ldr	r3, [pc, #196]	@ (800f1d4 <tcp_input+0x4a0>)
 800f110:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f112:	429a      	cmp	r2, r3
 800f114:	d107      	bne.n	800f126 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800f116:	69f8      	ldr	r0, [r7, #28]
 800f118:	f000 fb56 	bl	800f7c8 <tcp_timewait_input>
        }
        pbuf_free(p);
 800f11c:	6878      	ldr	r0, [r7, #4]
 800f11e:	f7fd fcd3 	bl	800cac8 <pbuf_free>
        return;
 800f122:	e1fd      	b.n	800f520 <tcp_input+0x7ec>
        continue;
 800f124:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f126:	69fb      	ldr	r3, [r7, #28]
 800f128:	68db      	ldr	r3, [r3, #12]
 800f12a:	61fb      	str	r3, [r7, #28]
 800f12c:	69fb      	ldr	r3, [r7, #28]
 800f12e:	2b00      	cmp	r3, #0
 800f130:	d1bc      	bne.n	800f0ac <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800f132:	2300      	movs	r3, #0
 800f134:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f136:	4b2f      	ldr	r3, [pc, #188]	@ (800f1f4 <tcp_input+0x4c0>)
 800f138:	681b      	ldr	r3, [r3, #0]
 800f13a:	617b      	str	r3, [r7, #20]
 800f13c:	e02a      	b.n	800f194 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800f13e:	697b      	ldr	r3, [r7, #20]
 800f140:	7a1b      	ldrb	r3, [r3, #8]
 800f142:	2b00      	cmp	r3, #0
 800f144:	d00c      	beq.n	800f160 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f146:	697b      	ldr	r3, [r7, #20]
 800f148:	7a1a      	ldrb	r2, [r3, #8]
 800f14a:	4b22      	ldr	r3, [pc, #136]	@ (800f1d4 <tcp_input+0x4a0>)
 800f14c:	685b      	ldr	r3, [r3, #4]
 800f14e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800f152:	3301      	adds	r3, #1
 800f154:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800f156:	429a      	cmp	r2, r3
 800f158:	d002      	beq.n	800f160 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800f15a:	697b      	ldr	r3, [r7, #20]
 800f15c:	61bb      	str	r3, [r7, #24]
        continue;
 800f15e:	e016      	b.n	800f18e <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800f160:	697b      	ldr	r3, [r7, #20]
 800f162:	8ada      	ldrh	r2, [r3, #22]
 800f164:	4b1a      	ldr	r3, [pc, #104]	@ (800f1d0 <tcp_input+0x49c>)
 800f166:	681b      	ldr	r3, [r3, #0]
 800f168:	885b      	ldrh	r3, [r3, #2]
 800f16a:	b29b      	uxth	r3, r3
 800f16c:	429a      	cmp	r2, r3
 800f16e:	d10c      	bne.n	800f18a <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800f170:	697b      	ldr	r3, [r7, #20]
 800f172:	681a      	ldr	r2, [r3, #0]
 800f174:	4b17      	ldr	r3, [pc, #92]	@ (800f1d4 <tcp_input+0x4a0>)
 800f176:	695b      	ldr	r3, [r3, #20]
 800f178:	429a      	cmp	r2, r3
 800f17a:	d00f      	beq.n	800f19c <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800f17c:	697b      	ldr	r3, [r7, #20]
 800f17e:	2b00      	cmp	r3, #0
 800f180:	d00d      	beq.n	800f19e <tcp_input+0x46a>
 800f182:	697b      	ldr	r3, [r7, #20]
 800f184:	681b      	ldr	r3, [r3, #0]
 800f186:	2b00      	cmp	r3, #0
 800f188:	d009      	beq.n	800f19e <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800f18a:	697b      	ldr	r3, [r7, #20]
 800f18c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f18e:	697b      	ldr	r3, [r7, #20]
 800f190:	68db      	ldr	r3, [r3, #12]
 800f192:	617b      	str	r3, [r7, #20]
 800f194:	697b      	ldr	r3, [r7, #20]
 800f196:	2b00      	cmp	r3, #0
 800f198:	d1d1      	bne.n	800f13e <tcp_input+0x40a>
 800f19a:	e000      	b.n	800f19e <tcp_input+0x46a>
            break;
 800f19c:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800f19e:	697b      	ldr	r3, [r7, #20]
 800f1a0:	2b00      	cmp	r3, #0
 800f1a2:	d029      	beq.n	800f1f8 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800f1a4:	69bb      	ldr	r3, [r7, #24]
 800f1a6:	2b00      	cmp	r3, #0
 800f1a8:	d00a      	beq.n	800f1c0 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800f1aa:	697b      	ldr	r3, [r7, #20]
 800f1ac:	68da      	ldr	r2, [r3, #12]
 800f1ae:	69bb      	ldr	r3, [r7, #24]
 800f1b0:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800f1b2:	4b10      	ldr	r3, [pc, #64]	@ (800f1f4 <tcp_input+0x4c0>)
 800f1b4:	681a      	ldr	r2, [r3, #0]
 800f1b6:	697b      	ldr	r3, [r7, #20]
 800f1b8:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800f1ba:	4a0e      	ldr	r2, [pc, #56]	@ (800f1f4 <tcp_input+0x4c0>)
 800f1bc:	697b      	ldr	r3, [r7, #20]
 800f1be:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800f1c0:	6978      	ldr	r0, [r7, #20]
 800f1c2:	f000 fa03 	bl	800f5cc <tcp_listen_input>
      }
      pbuf_free(p);
 800f1c6:	6878      	ldr	r0, [r7, #4]
 800f1c8:	f7fd fc7e 	bl	800cac8 <pbuf_free>
      return;
 800f1cc:	e1a8      	b.n	800f520 <tcp_input+0x7ec>
 800f1ce:	bf00      	nop
 800f1d0:	2000ed68 	.word	0x2000ed68
 800f1d4:	200093f4 	.word	0x200093f4
 800f1d8:	08019850 	.word	0x08019850
 800f1dc:	0801997c 	.word	0x0801997c
 800f1e0:	0801989c 	.word	0x0801989c
 800f1e4:	2000ed4c 	.word	0x2000ed4c
 800f1e8:	080199a8 	.word	0x080199a8
 800f1ec:	2000ed50 	.word	0x2000ed50
 800f1f0:	080199d4 	.word	0x080199d4
 800f1f4:	2000ed48 	.word	0x2000ed48
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800f1f8:	69fb      	ldr	r3, [r7, #28]
 800f1fa:	2b00      	cmp	r3, #0
 800f1fc:	f000 8158 	beq.w	800f4b0 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800f200:	4b95      	ldr	r3, [pc, #596]	@ (800f458 <tcp_input+0x724>)
 800f202:	2200      	movs	r2, #0
 800f204:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800f206:	687b      	ldr	r3, [r7, #4]
 800f208:	891a      	ldrh	r2, [r3, #8]
 800f20a:	4b93      	ldr	r3, [pc, #588]	@ (800f458 <tcp_input+0x724>)
 800f20c:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800f20e:	4a92      	ldr	r2, [pc, #584]	@ (800f458 <tcp_input+0x724>)
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800f214:	4b91      	ldr	r3, [pc, #580]	@ (800f45c <tcp_input+0x728>)
 800f216:	681b      	ldr	r3, [r3, #0]
 800f218:	4a8f      	ldr	r2, [pc, #572]	@ (800f458 <tcp_input+0x724>)
 800f21a:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800f21c:	4b90      	ldr	r3, [pc, #576]	@ (800f460 <tcp_input+0x72c>)
 800f21e:	2200      	movs	r2, #0
 800f220:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800f222:	4b90      	ldr	r3, [pc, #576]	@ (800f464 <tcp_input+0x730>)
 800f224:	2200      	movs	r2, #0
 800f226:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800f228:	4b8f      	ldr	r3, [pc, #572]	@ (800f468 <tcp_input+0x734>)
 800f22a:	2200      	movs	r2, #0
 800f22c:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800f22e:	4b8f      	ldr	r3, [pc, #572]	@ (800f46c <tcp_input+0x738>)
 800f230:	781b      	ldrb	r3, [r3, #0]
 800f232:	f003 0308 	and.w	r3, r3, #8
 800f236:	2b00      	cmp	r3, #0
 800f238:	d006      	beq.n	800f248 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	7b5b      	ldrb	r3, [r3, #13]
 800f23e:	f043 0301 	orr.w	r3, r3, #1
 800f242:	b2da      	uxtb	r2, r3
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800f248:	69fb      	ldr	r3, [r7, #28]
 800f24a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f24c:	2b00      	cmp	r3, #0
 800f24e:	d017      	beq.n	800f280 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800f250:	69f8      	ldr	r0, [r7, #28]
 800f252:	f7ff f853 	bl	800e2fc <tcp_process_refused_data>
 800f256:	4603      	mov	r3, r0
 800f258:	f113 0f0d 	cmn.w	r3, #13
 800f25c:	d007      	beq.n	800f26e <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800f25e:	69fb      	ldr	r3, [r7, #28]
 800f260:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800f262:	2b00      	cmp	r3, #0
 800f264:	d00c      	beq.n	800f280 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800f266:	4b82      	ldr	r3, [pc, #520]	@ (800f470 <tcp_input+0x73c>)
 800f268:	881b      	ldrh	r3, [r3, #0]
 800f26a:	2b00      	cmp	r3, #0
 800f26c:	d008      	beq.n	800f280 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800f26e:	69fb      	ldr	r3, [r7, #28]
 800f270:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f272:	2b00      	cmp	r3, #0
 800f274:	f040 80e3 	bne.w	800f43e <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800f278:	69f8      	ldr	r0, [r7, #28]
 800f27a:	f003 fdff 	bl	8012e7c <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800f27e:	e0de      	b.n	800f43e <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800f280:	4a7c      	ldr	r2, [pc, #496]	@ (800f474 <tcp_input+0x740>)
 800f282:	69fb      	ldr	r3, [r7, #28]
 800f284:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800f286:	69f8      	ldr	r0, [r7, #28]
 800f288:	f000 fb18 	bl	800f8bc <tcp_process>
 800f28c:	4603      	mov	r3, r0
 800f28e:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800f290:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f294:	f113 0f0d 	cmn.w	r3, #13
 800f298:	f000 80d3 	beq.w	800f442 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800f29c:	4b71      	ldr	r3, [pc, #452]	@ (800f464 <tcp_input+0x730>)
 800f29e:	781b      	ldrb	r3, [r3, #0]
 800f2a0:	f003 0308 	and.w	r3, r3, #8
 800f2a4:	2b00      	cmp	r3, #0
 800f2a6:	d015      	beq.n	800f2d4 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800f2a8:	69fb      	ldr	r3, [r7, #28]
 800f2aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f2ae:	2b00      	cmp	r3, #0
 800f2b0:	d008      	beq.n	800f2c4 <tcp_input+0x590>
 800f2b2:	69fb      	ldr	r3, [r7, #28]
 800f2b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f2b8:	69fa      	ldr	r2, [r7, #28]
 800f2ba:	6912      	ldr	r2, [r2, #16]
 800f2bc:	f06f 010d 	mvn.w	r1, #13
 800f2c0:	4610      	mov	r0, r2
 800f2c2:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800f2c4:	69f9      	ldr	r1, [r7, #28]
 800f2c6:	486c      	ldr	r0, [pc, #432]	@ (800f478 <tcp_input+0x744>)
 800f2c8:	f7ff fbbc 	bl	800ea44 <tcp_pcb_remove>
        tcp_free(pcb);
 800f2cc:	69f8      	ldr	r0, [r7, #28]
 800f2ce:	f7fd fec9 	bl	800d064 <tcp_free>
 800f2d2:	e0da      	b.n	800f48a <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800f2d4:	2300      	movs	r3, #0
 800f2d6:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800f2d8:	4b63      	ldr	r3, [pc, #396]	@ (800f468 <tcp_input+0x734>)
 800f2da:	881b      	ldrh	r3, [r3, #0]
 800f2dc:	2b00      	cmp	r3, #0
 800f2de:	d01d      	beq.n	800f31c <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800f2e0:	4b61      	ldr	r3, [pc, #388]	@ (800f468 <tcp_input+0x734>)
 800f2e2:	881b      	ldrh	r3, [r3, #0]
 800f2e4:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800f2e6:	69fb      	ldr	r3, [r7, #28]
 800f2e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f2ec:	2b00      	cmp	r3, #0
 800f2ee:	d00a      	beq.n	800f306 <tcp_input+0x5d2>
 800f2f0:	69fb      	ldr	r3, [r7, #28]
 800f2f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f2f6:	69fa      	ldr	r2, [r7, #28]
 800f2f8:	6910      	ldr	r0, [r2, #16]
 800f2fa:	89fa      	ldrh	r2, [r7, #14]
 800f2fc:	69f9      	ldr	r1, [r7, #28]
 800f2fe:	4798      	blx	r3
 800f300:	4603      	mov	r3, r0
 800f302:	74fb      	strb	r3, [r7, #19]
 800f304:	e001      	b.n	800f30a <tcp_input+0x5d6>
 800f306:	2300      	movs	r3, #0
 800f308:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800f30a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f30e:	f113 0f0d 	cmn.w	r3, #13
 800f312:	f000 8098 	beq.w	800f446 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800f316:	4b54      	ldr	r3, [pc, #336]	@ (800f468 <tcp_input+0x734>)
 800f318:	2200      	movs	r2, #0
 800f31a:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800f31c:	69f8      	ldr	r0, [r7, #28]
 800f31e:	f000 f915 	bl	800f54c <tcp_input_delayed_close>
 800f322:	4603      	mov	r3, r0
 800f324:	2b00      	cmp	r3, #0
 800f326:	f040 8090 	bne.w	800f44a <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800f32a:	4b4d      	ldr	r3, [pc, #308]	@ (800f460 <tcp_input+0x72c>)
 800f32c:	681b      	ldr	r3, [r3, #0]
 800f32e:	2b00      	cmp	r3, #0
 800f330:	d041      	beq.n	800f3b6 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800f332:	69fb      	ldr	r3, [r7, #28]
 800f334:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f336:	2b00      	cmp	r3, #0
 800f338:	d006      	beq.n	800f348 <tcp_input+0x614>
 800f33a:	4b50      	ldr	r3, [pc, #320]	@ (800f47c <tcp_input+0x748>)
 800f33c:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 800f340:	494f      	ldr	r1, [pc, #316]	@ (800f480 <tcp_input+0x74c>)
 800f342:	4850      	ldr	r0, [pc, #320]	@ (800f484 <tcp_input+0x750>)
 800f344:	f007 f92c 	bl	80165a0 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800f348:	69fb      	ldr	r3, [r7, #28]
 800f34a:	8b5b      	ldrh	r3, [r3, #26]
 800f34c:	f003 0310 	and.w	r3, r3, #16
 800f350:	2b00      	cmp	r3, #0
 800f352:	d008      	beq.n	800f366 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800f354:	4b42      	ldr	r3, [pc, #264]	@ (800f460 <tcp_input+0x72c>)
 800f356:	681b      	ldr	r3, [r3, #0]
 800f358:	4618      	mov	r0, r3
 800f35a:	f7fd fbb5 	bl	800cac8 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800f35e:	69f8      	ldr	r0, [r7, #28]
 800f360:	f7fe f9c4 	bl	800d6ec <tcp_abort>
            goto aborted;
 800f364:	e091      	b.n	800f48a <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800f366:	69fb      	ldr	r3, [r7, #28]
 800f368:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f36c:	2b00      	cmp	r3, #0
 800f36e:	d00c      	beq.n	800f38a <tcp_input+0x656>
 800f370:	69fb      	ldr	r3, [r7, #28]
 800f372:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800f376:	69fb      	ldr	r3, [r7, #28]
 800f378:	6918      	ldr	r0, [r3, #16]
 800f37a:	4b39      	ldr	r3, [pc, #228]	@ (800f460 <tcp_input+0x72c>)
 800f37c:	681a      	ldr	r2, [r3, #0]
 800f37e:	2300      	movs	r3, #0
 800f380:	69f9      	ldr	r1, [r7, #28]
 800f382:	47a0      	blx	r4
 800f384:	4603      	mov	r3, r0
 800f386:	74fb      	strb	r3, [r7, #19]
 800f388:	e008      	b.n	800f39c <tcp_input+0x668>
 800f38a:	4b35      	ldr	r3, [pc, #212]	@ (800f460 <tcp_input+0x72c>)
 800f38c:	681a      	ldr	r2, [r3, #0]
 800f38e:	2300      	movs	r3, #0
 800f390:	69f9      	ldr	r1, [r7, #28]
 800f392:	2000      	movs	r0, #0
 800f394:	f7ff f888 	bl	800e4a8 <tcp_recv_null>
 800f398:	4603      	mov	r3, r0
 800f39a:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800f39c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f3a0:	f113 0f0d 	cmn.w	r3, #13
 800f3a4:	d053      	beq.n	800f44e <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800f3a6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f3aa:	2b00      	cmp	r3, #0
 800f3ac:	d003      	beq.n	800f3b6 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800f3ae:	4b2c      	ldr	r3, [pc, #176]	@ (800f460 <tcp_input+0x72c>)
 800f3b0:	681a      	ldr	r2, [r3, #0]
 800f3b2:	69fb      	ldr	r3, [r7, #28]
 800f3b4:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800f3b6:	4b2b      	ldr	r3, [pc, #172]	@ (800f464 <tcp_input+0x730>)
 800f3b8:	781b      	ldrb	r3, [r3, #0]
 800f3ba:	f003 0320 	and.w	r3, r3, #32
 800f3be:	2b00      	cmp	r3, #0
 800f3c0:	d030      	beq.n	800f424 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800f3c2:	69fb      	ldr	r3, [r7, #28]
 800f3c4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f3c6:	2b00      	cmp	r3, #0
 800f3c8:	d009      	beq.n	800f3de <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800f3ca:	69fb      	ldr	r3, [r7, #28]
 800f3cc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f3ce:	7b5a      	ldrb	r2, [r3, #13]
 800f3d0:	69fb      	ldr	r3, [r7, #28]
 800f3d2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f3d4:	f042 0220 	orr.w	r2, r2, #32
 800f3d8:	b2d2      	uxtb	r2, r2
 800f3da:	735a      	strb	r2, [r3, #13]
 800f3dc:	e022      	b.n	800f424 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800f3de:	69fb      	ldr	r3, [r7, #28]
 800f3e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f3e2:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800f3e6:	d005      	beq.n	800f3f4 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800f3e8:	69fb      	ldr	r3, [r7, #28]
 800f3ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f3ec:	3301      	adds	r3, #1
 800f3ee:	b29a      	uxth	r2, r3
 800f3f0:	69fb      	ldr	r3, [r7, #28]
 800f3f2:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800f3f4:	69fb      	ldr	r3, [r7, #28]
 800f3f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f3fa:	2b00      	cmp	r3, #0
 800f3fc:	d00b      	beq.n	800f416 <tcp_input+0x6e2>
 800f3fe:	69fb      	ldr	r3, [r7, #28]
 800f400:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800f404:	69fb      	ldr	r3, [r7, #28]
 800f406:	6918      	ldr	r0, [r3, #16]
 800f408:	2300      	movs	r3, #0
 800f40a:	2200      	movs	r2, #0
 800f40c:	69f9      	ldr	r1, [r7, #28]
 800f40e:	47a0      	blx	r4
 800f410:	4603      	mov	r3, r0
 800f412:	74fb      	strb	r3, [r7, #19]
 800f414:	e001      	b.n	800f41a <tcp_input+0x6e6>
 800f416:	2300      	movs	r3, #0
 800f418:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800f41a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f41e:	f113 0f0d 	cmn.w	r3, #13
 800f422:	d016      	beq.n	800f452 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800f424:	4b13      	ldr	r3, [pc, #76]	@ (800f474 <tcp_input+0x740>)
 800f426:	2200      	movs	r2, #0
 800f428:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800f42a:	69f8      	ldr	r0, [r7, #28]
 800f42c:	f000 f88e 	bl	800f54c <tcp_input_delayed_close>
 800f430:	4603      	mov	r3, r0
 800f432:	2b00      	cmp	r3, #0
 800f434:	d128      	bne.n	800f488 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800f436:	69f8      	ldr	r0, [r7, #28]
 800f438:	f002 ff1a 	bl	8012270 <tcp_output>
 800f43c:	e025      	b.n	800f48a <tcp_input+0x756>
        goto aborted;
 800f43e:	bf00      	nop
 800f440:	e023      	b.n	800f48a <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800f442:	bf00      	nop
 800f444:	e021      	b.n	800f48a <tcp_input+0x756>
              goto aborted;
 800f446:	bf00      	nop
 800f448:	e01f      	b.n	800f48a <tcp_input+0x756>
          goto aborted;
 800f44a:	bf00      	nop
 800f44c:	e01d      	b.n	800f48a <tcp_input+0x756>
            goto aborted;
 800f44e:	bf00      	nop
 800f450:	e01b      	b.n	800f48a <tcp_input+0x756>
              goto aborted;
 800f452:	bf00      	nop
 800f454:	e019      	b.n	800f48a <tcp_input+0x756>
 800f456:	bf00      	nop
 800f458:	2000ed58 	.word	0x2000ed58
 800f45c:	2000ed68 	.word	0x2000ed68
 800f460:	2000ed88 	.word	0x2000ed88
 800f464:	2000ed85 	.word	0x2000ed85
 800f468:	2000ed80 	.word	0x2000ed80
 800f46c:	2000ed84 	.word	0x2000ed84
 800f470:	2000ed82 	.word	0x2000ed82
 800f474:	2000ed8c 	.word	0x2000ed8c
 800f478:	2000ed4c 	.word	0x2000ed4c
 800f47c:	08019850 	.word	0x08019850
 800f480:	08019a04 	.word	0x08019a04
 800f484:	0801989c 	.word	0x0801989c
          goto aborted;
 800f488:	bf00      	nop
    tcp_input_pcb = NULL;
 800f48a:	4b27      	ldr	r3, [pc, #156]	@ (800f528 <tcp_input+0x7f4>)
 800f48c:	2200      	movs	r2, #0
 800f48e:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800f490:	4b26      	ldr	r3, [pc, #152]	@ (800f52c <tcp_input+0x7f8>)
 800f492:	2200      	movs	r2, #0
 800f494:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800f496:	4b26      	ldr	r3, [pc, #152]	@ (800f530 <tcp_input+0x7fc>)
 800f498:	685b      	ldr	r3, [r3, #4]
 800f49a:	2b00      	cmp	r3, #0
 800f49c:	d03f      	beq.n	800f51e <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800f49e:	4b24      	ldr	r3, [pc, #144]	@ (800f530 <tcp_input+0x7fc>)
 800f4a0:	685b      	ldr	r3, [r3, #4]
 800f4a2:	4618      	mov	r0, r3
 800f4a4:	f7fd fb10 	bl	800cac8 <pbuf_free>
      inseg.p = NULL;
 800f4a8:	4b21      	ldr	r3, [pc, #132]	@ (800f530 <tcp_input+0x7fc>)
 800f4aa:	2200      	movs	r2, #0
 800f4ac:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800f4ae:	e036      	b.n	800f51e <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800f4b0:	4b20      	ldr	r3, [pc, #128]	@ (800f534 <tcp_input+0x800>)
 800f4b2:	681b      	ldr	r3, [r3, #0]
 800f4b4:	899b      	ldrh	r3, [r3, #12]
 800f4b6:	b29b      	uxth	r3, r3
 800f4b8:	4618      	mov	r0, r3
 800f4ba:	f7fb ff13 	bl	800b2e4 <lwip_htons>
 800f4be:	4603      	mov	r3, r0
 800f4c0:	b2db      	uxtb	r3, r3
 800f4c2:	f003 0304 	and.w	r3, r3, #4
 800f4c6:	2b00      	cmp	r3, #0
 800f4c8:	d118      	bne.n	800f4fc <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f4ca:	4b1b      	ldr	r3, [pc, #108]	@ (800f538 <tcp_input+0x804>)
 800f4cc:	6819      	ldr	r1, [r3, #0]
 800f4ce:	4b1b      	ldr	r3, [pc, #108]	@ (800f53c <tcp_input+0x808>)
 800f4d0:	881b      	ldrh	r3, [r3, #0]
 800f4d2:	461a      	mov	r2, r3
 800f4d4:	4b1a      	ldr	r3, [pc, #104]	@ (800f540 <tcp_input+0x80c>)
 800f4d6:	681b      	ldr	r3, [r3, #0]
 800f4d8:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f4da:	4b16      	ldr	r3, [pc, #88]	@ (800f534 <tcp_input+0x800>)
 800f4dc:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f4de:	885b      	ldrh	r3, [r3, #2]
 800f4e0:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f4e2:	4a14      	ldr	r2, [pc, #80]	@ (800f534 <tcp_input+0x800>)
 800f4e4:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f4e6:	8812      	ldrh	r2, [r2, #0]
 800f4e8:	b292      	uxth	r2, r2
 800f4ea:	9202      	str	r2, [sp, #8]
 800f4ec:	9301      	str	r3, [sp, #4]
 800f4ee:	4b15      	ldr	r3, [pc, #84]	@ (800f544 <tcp_input+0x810>)
 800f4f0:	9300      	str	r3, [sp, #0]
 800f4f2:	4b15      	ldr	r3, [pc, #84]	@ (800f548 <tcp_input+0x814>)
 800f4f4:	4602      	mov	r2, r0
 800f4f6:	2000      	movs	r0, #0
 800f4f8:	f003 fc6e 	bl	8012dd8 <tcp_rst>
    pbuf_free(p);
 800f4fc:	6878      	ldr	r0, [r7, #4]
 800f4fe:	f7fd fae3 	bl	800cac8 <pbuf_free>
  return;
 800f502:	e00c      	b.n	800f51e <tcp_input+0x7ea>
    goto dropped;
 800f504:	bf00      	nop
 800f506:	e006      	b.n	800f516 <tcp_input+0x7e2>
    goto dropped;
 800f508:	bf00      	nop
 800f50a:	e004      	b.n	800f516 <tcp_input+0x7e2>
    goto dropped;
 800f50c:	bf00      	nop
 800f50e:	e002      	b.n	800f516 <tcp_input+0x7e2>
      goto dropped;
 800f510:	bf00      	nop
 800f512:	e000      	b.n	800f516 <tcp_input+0x7e2>
      goto dropped;
 800f514:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800f516:	6878      	ldr	r0, [r7, #4]
 800f518:	f7fd fad6 	bl	800cac8 <pbuf_free>
 800f51c:	e000      	b.n	800f520 <tcp_input+0x7ec>
  return;
 800f51e:	bf00      	nop
}
 800f520:	3724      	adds	r7, #36	@ 0x24
 800f522:	46bd      	mov	sp, r7
 800f524:	bd90      	pop	{r4, r7, pc}
 800f526:	bf00      	nop
 800f528:	2000ed8c 	.word	0x2000ed8c
 800f52c:	2000ed88 	.word	0x2000ed88
 800f530:	2000ed58 	.word	0x2000ed58
 800f534:	2000ed68 	.word	0x2000ed68
 800f538:	2000ed7c 	.word	0x2000ed7c
 800f53c:	2000ed82 	.word	0x2000ed82
 800f540:	2000ed78 	.word	0x2000ed78
 800f544:	20009404 	.word	0x20009404
 800f548:	20009408 	.word	0x20009408

0800f54c <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800f54c:	b580      	push	{r7, lr}
 800f54e:	b082      	sub	sp, #8
 800f550:	af00      	add	r7, sp, #0
 800f552:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	2b00      	cmp	r3, #0
 800f558:	d106      	bne.n	800f568 <tcp_input_delayed_close+0x1c>
 800f55a:	4b17      	ldr	r3, [pc, #92]	@ (800f5b8 <tcp_input_delayed_close+0x6c>)
 800f55c:	f240 225a 	movw	r2, #602	@ 0x25a
 800f560:	4916      	ldr	r1, [pc, #88]	@ (800f5bc <tcp_input_delayed_close+0x70>)
 800f562:	4817      	ldr	r0, [pc, #92]	@ (800f5c0 <tcp_input_delayed_close+0x74>)
 800f564:	f007 f81c 	bl	80165a0 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800f568:	4b16      	ldr	r3, [pc, #88]	@ (800f5c4 <tcp_input_delayed_close+0x78>)
 800f56a:	781b      	ldrb	r3, [r3, #0]
 800f56c:	f003 0310 	and.w	r3, r3, #16
 800f570:	2b00      	cmp	r3, #0
 800f572:	d01c      	beq.n	800f5ae <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	8b5b      	ldrh	r3, [r3, #26]
 800f578:	f003 0310 	and.w	r3, r3, #16
 800f57c:	2b00      	cmp	r3, #0
 800f57e:	d10d      	bne.n	800f59c <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f586:	2b00      	cmp	r3, #0
 800f588:	d008      	beq.n	800f59c <tcp_input_delayed_close+0x50>
 800f58a:	687b      	ldr	r3, [r7, #4]
 800f58c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f590:	687a      	ldr	r2, [r7, #4]
 800f592:	6912      	ldr	r2, [r2, #16]
 800f594:	f06f 010e 	mvn.w	r1, #14
 800f598:	4610      	mov	r0, r2
 800f59a:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800f59c:	6879      	ldr	r1, [r7, #4]
 800f59e:	480a      	ldr	r0, [pc, #40]	@ (800f5c8 <tcp_input_delayed_close+0x7c>)
 800f5a0:	f7ff fa50 	bl	800ea44 <tcp_pcb_remove>
    tcp_free(pcb);
 800f5a4:	6878      	ldr	r0, [r7, #4]
 800f5a6:	f7fd fd5d 	bl	800d064 <tcp_free>
    return 1;
 800f5aa:	2301      	movs	r3, #1
 800f5ac:	e000      	b.n	800f5b0 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800f5ae:	2300      	movs	r3, #0
}
 800f5b0:	4618      	mov	r0, r3
 800f5b2:	3708      	adds	r7, #8
 800f5b4:	46bd      	mov	sp, r7
 800f5b6:	bd80      	pop	{r7, pc}
 800f5b8:	08019850 	.word	0x08019850
 800f5bc:	08019a20 	.word	0x08019a20
 800f5c0:	0801989c 	.word	0x0801989c
 800f5c4:	2000ed85 	.word	0x2000ed85
 800f5c8:	2000ed4c 	.word	0x2000ed4c

0800f5cc <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800f5cc:	b590      	push	{r4, r7, lr}
 800f5ce:	b08b      	sub	sp, #44	@ 0x2c
 800f5d0:	af04      	add	r7, sp, #16
 800f5d2:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800f5d4:	4b6f      	ldr	r3, [pc, #444]	@ (800f794 <tcp_listen_input+0x1c8>)
 800f5d6:	781b      	ldrb	r3, [r3, #0]
 800f5d8:	f003 0304 	and.w	r3, r3, #4
 800f5dc:	2b00      	cmp	r3, #0
 800f5de:	f040 80d2 	bne.w	800f786 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	2b00      	cmp	r3, #0
 800f5e6:	d106      	bne.n	800f5f6 <tcp_listen_input+0x2a>
 800f5e8:	4b6b      	ldr	r3, [pc, #428]	@ (800f798 <tcp_listen_input+0x1cc>)
 800f5ea:	f240 2281 	movw	r2, #641	@ 0x281
 800f5ee:	496b      	ldr	r1, [pc, #428]	@ (800f79c <tcp_listen_input+0x1d0>)
 800f5f0:	486b      	ldr	r0, [pc, #428]	@ (800f7a0 <tcp_listen_input+0x1d4>)
 800f5f2:	f006 ffd5 	bl	80165a0 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800f5f6:	4b67      	ldr	r3, [pc, #412]	@ (800f794 <tcp_listen_input+0x1c8>)
 800f5f8:	781b      	ldrb	r3, [r3, #0]
 800f5fa:	f003 0310 	and.w	r3, r3, #16
 800f5fe:	2b00      	cmp	r3, #0
 800f600:	d019      	beq.n	800f636 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f602:	4b68      	ldr	r3, [pc, #416]	@ (800f7a4 <tcp_listen_input+0x1d8>)
 800f604:	6819      	ldr	r1, [r3, #0]
 800f606:	4b68      	ldr	r3, [pc, #416]	@ (800f7a8 <tcp_listen_input+0x1dc>)
 800f608:	881b      	ldrh	r3, [r3, #0]
 800f60a:	461a      	mov	r2, r3
 800f60c:	4b67      	ldr	r3, [pc, #412]	@ (800f7ac <tcp_listen_input+0x1e0>)
 800f60e:	681b      	ldr	r3, [r3, #0]
 800f610:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f612:	4b67      	ldr	r3, [pc, #412]	@ (800f7b0 <tcp_listen_input+0x1e4>)
 800f614:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f616:	885b      	ldrh	r3, [r3, #2]
 800f618:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f61a:	4a65      	ldr	r2, [pc, #404]	@ (800f7b0 <tcp_listen_input+0x1e4>)
 800f61c:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f61e:	8812      	ldrh	r2, [r2, #0]
 800f620:	b292      	uxth	r2, r2
 800f622:	9202      	str	r2, [sp, #8]
 800f624:	9301      	str	r3, [sp, #4]
 800f626:	4b63      	ldr	r3, [pc, #396]	@ (800f7b4 <tcp_listen_input+0x1e8>)
 800f628:	9300      	str	r3, [sp, #0]
 800f62a:	4b63      	ldr	r3, [pc, #396]	@ (800f7b8 <tcp_listen_input+0x1ec>)
 800f62c:	4602      	mov	r2, r0
 800f62e:	6878      	ldr	r0, [r7, #4]
 800f630:	f003 fbd2 	bl	8012dd8 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800f634:	e0a9      	b.n	800f78a <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800f636:	4b57      	ldr	r3, [pc, #348]	@ (800f794 <tcp_listen_input+0x1c8>)
 800f638:	781b      	ldrb	r3, [r3, #0]
 800f63a:	f003 0302 	and.w	r3, r3, #2
 800f63e:	2b00      	cmp	r3, #0
 800f640:	f000 80a3 	beq.w	800f78a <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	7d5b      	ldrb	r3, [r3, #21]
 800f648:	4618      	mov	r0, r3
 800f64a:	f7ff f851 	bl	800e6f0 <tcp_alloc>
 800f64e:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800f650:	697b      	ldr	r3, [r7, #20]
 800f652:	2b00      	cmp	r3, #0
 800f654:	d111      	bne.n	800f67a <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	699b      	ldr	r3, [r3, #24]
 800f65a:	2b00      	cmp	r3, #0
 800f65c:	d00a      	beq.n	800f674 <tcp_listen_input+0xa8>
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	699b      	ldr	r3, [r3, #24]
 800f662:	687a      	ldr	r2, [r7, #4]
 800f664:	6910      	ldr	r0, [r2, #16]
 800f666:	f04f 32ff 	mov.w	r2, #4294967295
 800f66a:	2100      	movs	r1, #0
 800f66c:	4798      	blx	r3
 800f66e:	4603      	mov	r3, r0
 800f670:	73bb      	strb	r3, [r7, #14]
      return;
 800f672:	e08b      	b.n	800f78c <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800f674:	23f0      	movs	r3, #240	@ 0xf0
 800f676:	73bb      	strb	r3, [r7, #14]
      return;
 800f678:	e088      	b.n	800f78c <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800f67a:	4b50      	ldr	r3, [pc, #320]	@ (800f7bc <tcp_listen_input+0x1f0>)
 800f67c:	695a      	ldr	r2, [r3, #20]
 800f67e:	697b      	ldr	r3, [r7, #20]
 800f680:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800f682:	4b4e      	ldr	r3, [pc, #312]	@ (800f7bc <tcp_listen_input+0x1f0>)
 800f684:	691a      	ldr	r2, [r3, #16]
 800f686:	697b      	ldr	r3, [r7, #20]
 800f688:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	8ada      	ldrh	r2, [r3, #22]
 800f68e:	697b      	ldr	r3, [r7, #20]
 800f690:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800f692:	4b47      	ldr	r3, [pc, #284]	@ (800f7b0 <tcp_listen_input+0x1e4>)
 800f694:	681b      	ldr	r3, [r3, #0]
 800f696:	881b      	ldrh	r3, [r3, #0]
 800f698:	b29a      	uxth	r2, r3
 800f69a:	697b      	ldr	r3, [r7, #20]
 800f69c:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800f69e:	697b      	ldr	r3, [r7, #20]
 800f6a0:	2203      	movs	r2, #3
 800f6a2:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800f6a4:	4b41      	ldr	r3, [pc, #260]	@ (800f7ac <tcp_listen_input+0x1e0>)
 800f6a6:	681b      	ldr	r3, [r3, #0]
 800f6a8:	1c5a      	adds	r2, r3, #1
 800f6aa:	697b      	ldr	r3, [r7, #20]
 800f6ac:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800f6ae:	697b      	ldr	r3, [r7, #20]
 800f6b0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f6b2:	697b      	ldr	r3, [r7, #20]
 800f6b4:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 800f6b6:	6978      	ldr	r0, [r7, #20]
 800f6b8:	f7ff fa58 	bl	800eb6c <tcp_next_iss>
 800f6bc:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800f6be:	697b      	ldr	r3, [r7, #20]
 800f6c0:	693a      	ldr	r2, [r7, #16]
 800f6c2:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 800f6c4:	697b      	ldr	r3, [r7, #20]
 800f6c6:	693a      	ldr	r2, [r7, #16]
 800f6c8:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 800f6ca:	697b      	ldr	r3, [r7, #20]
 800f6cc:	693a      	ldr	r2, [r7, #16]
 800f6ce:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 800f6d0:	697b      	ldr	r3, [r7, #20]
 800f6d2:	693a      	ldr	r2, [r7, #16]
 800f6d4:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800f6d6:	4b35      	ldr	r3, [pc, #212]	@ (800f7ac <tcp_listen_input+0x1e0>)
 800f6d8:	681b      	ldr	r3, [r3, #0]
 800f6da:	1e5a      	subs	r2, r3, #1
 800f6dc:	697b      	ldr	r3, [r7, #20]
 800f6de:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	691a      	ldr	r2, [r3, #16]
 800f6e4:	697b      	ldr	r3, [r7, #20]
 800f6e6:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800f6e8:	697b      	ldr	r3, [r7, #20]
 800f6ea:	687a      	ldr	r2, [r7, #4]
 800f6ec:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	7a5b      	ldrb	r3, [r3, #9]
 800f6f2:	f003 030c 	and.w	r3, r3, #12
 800f6f6:	b2da      	uxtb	r2, r3
 800f6f8:	697b      	ldr	r3, [r7, #20]
 800f6fa:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	7a1a      	ldrb	r2, [r3, #8]
 800f700:	697b      	ldr	r3, [r7, #20]
 800f702:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800f704:	4b2e      	ldr	r3, [pc, #184]	@ (800f7c0 <tcp_listen_input+0x1f4>)
 800f706:	681a      	ldr	r2, [r3, #0]
 800f708:	697b      	ldr	r3, [r7, #20]
 800f70a:	60da      	str	r2, [r3, #12]
 800f70c:	4a2c      	ldr	r2, [pc, #176]	@ (800f7c0 <tcp_listen_input+0x1f4>)
 800f70e:	697b      	ldr	r3, [r7, #20]
 800f710:	6013      	str	r3, [r2, #0]
 800f712:	f003 fd23 	bl	801315c <tcp_timer_needed>
 800f716:	4b2b      	ldr	r3, [pc, #172]	@ (800f7c4 <tcp_listen_input+0x1f8>)
 800f718:	2201      	movs	r2, #1
 800f71a:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800f71c:	6978      	ldr	r0, [r7, #20]
 800f71e:	f001 fd8b 	bl	8011238 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800f722:	4b23      	ldr	r3, [pc, #140]	@ (800f7b0 <tcp_listen_input+0x1e4>)
 800f724:	681b      	ldr	r3, [r3, #0]
 800f726:	89db      	ldrh	r3, [r3, #14]
 800f728:	b29a      	uxth	r2, r3
 800f72a:	697b      	ldr	r3, [r7, #20]
 800f72c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800f730:	697b      	ldr	r3, [r7, #20]
 800f732:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800f736:	697b      	ldr	r3, [r7, #20]
 800f738:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800f73c:	697b      	ldr	r3, [r7, #20]
 800f73e:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 800f740:	697b      	ldr	r3, [r7, #20]
 800f742:	3304      	adds	r3, #4
 800f744:	4618      	mov	r0, r3
 800f746:	f005 fa5d 	bl	8014c04 <ip4_route>
 800f74a:	4601      	mov	r1, r0
 800f74c:	697b      	ldr	r3, [r7, #20]
 800f74e:	3304      	adds	r3, #4
 800f750:	461a      	mov	r2, r3
 800f752:	4620      	mov	r0, r4
 800f754:	f7ff fa30 	bl	800ebb8 <tcp_eff_send_mss_netif>
 800f758:	4603      	mov	r3, r0
 800f75a:	461a      	mov	r2, r3
 800f75c:	697b      	ldr	r3, [r7, #20]
 800f75e:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800f760:	2112      	movs	r1, #18
 800f762:	6978      	ldr	r0, [r7, #20]
 800f764:	f002 fc96 	bl	8012094 <tcp_enqueue_flags>
 800f768:	4603      	mov	r3, r0
 800f76a:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800f76c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f770:	2b00      	cmp	r3, #0
 800f772:	d004      	beq.n	800f77e <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800f774:	2100      	movs	r1, #0
 800f776:	6978      	ldr	r0, [r7, #20]
 800f778:	f7fd fefa 	bl	800d570 <tcp_abandon>
      return;
 800f77c:	e006      	b.n	800f78c <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800f77e:	6978      	ldr	r0, [r7, #20]
 800f780:	f002 fd76 	bl	8012270 <tcp_output>
  return;
 800f784:	e001      	b.n	800f78a <tcp_listen_input+0x1be>
    return;
 800f786:	bf00      	nop
 800f788:	e000      	b.n	800f78c <tcp_listen_input+0x1c0>
  return;
 800f78a:	bf00      	nop
}
 800f78c:	371c      	adds	r7, #28
 800f78e:	46bd      	mov	sp, r7
 800f790:	bd90      	pop	{r4, r7, pc}
 800f792:	bf00      	nop
 800f794:	2000ed84 	.word	0x2000ed84
 800f798:	08019850 	.word	0x08019850
 800f79c:	08019a48 	.word	0x08019a48
 800f7a0:	0801989c 	.word	0x0801989c
 800f7a4:	2000ed7c 	.word	0x2000ed7c
 800f7a8:	2000ed82 	.word	0x2000ed82
 800f7ac:	2000ed78 	.word	0x2000ed78
 800f7b0:	2000ed68 	.word	0x2000ed68
 800f7b4:	20009404 	.word	0x20009404
 800f7b8:	20009408 	.word	0x20009408
 800f7bc:	200093f4 	.word	0x200093f4
 800f7c0:	2000ed4c 	.word	0x2000ed4c
 800f7c4:	2000ed54 	.word	0x2000ed54

0800f7c8 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800f7c8:	b580      	push	{r7, lr}
 800f7ca:	b086      	sub	sp, #24
 800f7cc:	af04      	add	r7, sp, #16
 800f7ce:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800f7d0:	4b2f      	ldr	r3, [pc, #188]	@ (800f890 <tcp_timewait_input+0xc8>)
 800f7d2:	781b      	ldrb	r3, [r3, #0]
 800f7d4:	f003 0304 	and.w	r3, r3, #4
 800f7d8:	2b00      	cmp	r3, #0
 800f7da:	d153      	bne.n	800f884 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	2b00      	cmp	r3, #0
 800f7e0:	d106      	bne.n	800f7f0 <tcp_timewait_input+0x28>
 800f7e2:	4b2c      	ldr	r3, [pc, #176]	@ (800f894 <tcp_timewait_input+0xcc>)
 800f7e4:	f240 22ee 	movw	r2, #750	@ 0x2ee
 800f7e8:	492b      	ldr	r1, [pc, #172]	@ (800f898 <tcp_timewait_input+0xd0>)
 800f7ea:	482c      	ldr	r0, [pc, #176]	@ (800f89c <tcp_timewait_input+0xd4>)
 800f7ec:	f006 fed8 	bl	80165a0 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800f7f0:	4b27      	ldr	r3, [pc, #156]	@ (800f890 <tcp_timewait_input+0xc8>)
 800f7f2:	781b      	ldrb	r3, [r3, #0]
 800f7f4:	f003 0302 	and.w	r3, r3, #2
 800f7f8:	2b00      	cmp	r3, #0
 800f7fa:	d02a      	beq.n	800f852 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800f7fc:	4b28      	ldr	r3, [pc, #160]	@ (800f8a0 <tcp_timewait_input+0xd8>)
 800f7fe:	681a      	ldr	r2, [r3, #0]
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f804:	1ad3      	subs	r3, r2, r3
 800f806:	2b00      	cmp	r3, #0
 800f808:	db2d      	blt.n	800f866 <tcp_timewait_input+0x9e>
 800f80a:	4b25      	ldr	r3, [pc, #148]	@ (800f8a0 <tcp_timewait_input+0xd8>)
 800f80c:	681a      	ldr	r2, [r3, #0]
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f812:	6879      	ldr	r1, [r7, #4]
 800f814:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800f816:	440b      	add	r3, r1
 800f818:	1ad3      	subs	r3, r2, r3
 800f81a:	2b00      	cmp	r3, #0
 800f81c:	dc23      	bgt.n	800f866 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f81e:	4b21      	ldr	r3, [pc, #132]	@ (800f8a4 <tcp_timewait_input+0xdc>)
 800f820:	6819      	ldr	r1, [r3, #0]
 800f822:	4b21      	ldr	r3, [pc, #132]	@ (800f8a8 <tcp_timewait_input+0xe0>)
 800f824:	881b      	ldrh	r3, [r3, #0]
 800f826:	461a      	mov	r2, r3
 800f828:	4b1d      	ldr	r3, [pc, #116]	@ (800f8a0 <tcp_timewait_input+0xd8>)
 800f82a:	681b      	ldr	r3, [r3, #0]
 800f82c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f82e:	4b1f      	ldr	r3, [pc, #124]	@ (800f8ac <tcp_timewait_input+0xe4>)
 800f830:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f832:	885b      	ldrh	r3, [r3, #2]
 800f834:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f836:	4a1d      	ldr	r2, [pc, #116]	@ (800f8ac <tcp_timewait_input+0xe4>)
 800f838:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f83a:	8812      	ldrh	r2, [r2, #0]
 800f83c:	b292      	uxth	r2, r2
 800f83e:	9202      	str	r2, [sp, #8]
 800f840:	9301      	str	r3, [sp, #4]
 800f842:	4b1b      	ldr	r3, [pc, #108]	@ (800f8b0 <tcp_timewait_input+0xe8>)
 800f844:	9300      	str	r3, [sp, #0]
 800f846:	4b1b      	ldr	r3, [pc, #108]	@ (800f8b4 <tcp_timewait_input+0xec>)
 800f848:	4602      	mov	r2, r0
 800f84a:	6878      	ldr	r0, [r7, #4]
 800f84c:	f003 fac4 	bl	8012dd8 <tcp_rst>
      return;
 800f850:	e01b      	b.n	800f88a <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800f852:	4b0f      	ldr	r3, [pc, #60]	@ (800f890 <tcp_timewait_input+0xc8>)
 800f854:	781b      	ldrb	r3, [r3, #0]
 800f856:	f003 0301 	and.w	r3, r3, #1
 800f85a:	2b00      	cmp	r3, #0
 800f85c:	d003      	beq.n	800f866 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800f85e:	4b16      	ldr	r3, [pc, #88]	@ (800f8b8 <tcp_timewait_input+0xf0>)
 800f860:	681a      	ldr	r2, [r3, #0]
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800f866:	4b10      	ldr	r3, [pc, #64]	@ (800f8a8 <tcp_timewait_input+0xe0>)
 800f868:	881b      	ldrh	r3, [r3, #0]
 800f86a:	2b00      	cmp	r3, #0
 800f86c:	d00c      	beq.n	800f888 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800f86e:	687b      	ldr	r3, [r7, #4]
 800f870:	8b5b      	ldrh	r3, [r3, #26]
 800f872:	f043 0302 	orr.w	r3, r3, #2
 800f876:	b29a      	uxth	r2, r3
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800f87c:	6878      	ldr	r0, [r7, #4]
 800f87e:	f002 fcf7 	bl	8012270 <tcp_output>
  }
  return;
 800f882:	e001      	b.n	800f888 <tcp_timewait_input+0xc0>
    return;
 800f884:	bf00      	nop
 800f886:	e000      	b.n	800f88a <tcp_timewait_input+0xc2>
  return;
 800f888:	bf00      	nop
}
 800f88a:	3708      	adds	r7, #8
 800f88c:	46bd      	mov	sp, r7
 800f88e:	bd80      	pop	{r7, pc}
 800f890:	2000ed84 	.word	0x2000ed84
 800f894:	08019850 	.word	0x08019850
 800f898:	08019a68 	.word	0x08019a68
 800f89c:	0801989c 	.word	0x0801989c
 800f8a0:	2000ed78 	.word	0x2000ed78
 800f8a4:	2000ed7c 	.word	0x2000ed7c
 800f8a8:	2000ed82 	.word	0x2000ed82
 800f8ac:	2000ed68 	.word	0x2000ed68
 800f8b0:	20009404 	.word	0x20009404
 800f8b4:	20009408 	.word	0x20009408
 800f8b8:	2000ed40 	.word	0x2000ed40

0800f8bc <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800f8bc:	b590      	push	{r4, r7, lr}
 800f8be:	b08d      	sub	sp, #52	@ 0x34
 800f8c0:	af04      	add	r7, sp, #16
 800f8c2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800f8c4:	2300      	movs	r3, #0
 800f8c6:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800f8c8:	2300      	movs	r3, #0
 800f8ca:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	2b00      	cmp	r3, #0
 800f8d0:	d106      	bne.n	800f8e0 <tcp_process+0x24>
 800f8d2:	4b9d      	ldr	r3, [pc, #628]	@ (800fb48 <tcp_process+0x28c>)
 800f8d4:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 800f8d8:	499c      	ldr	r1, [pc, #624]	@ (800fb4c <tcp_process+0x290>)
 800f8da:	489d      	ldr	r0, [pc, #628]	@ (800fb50 <tcp_process+0x294>)
 800f8dc:	f006 fe60 	bl	80165a0 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800f8e0:	4b9c      	ldr	r3, [pc, #624]	@ (800fb54 <tcp_process+0x298>)
 800f8e2:	781b      	ldrb	r3, [r3, #0]
 800f8e4:	f003 0304 	and.w	r3, r3, #4
 800f8e8:	2b00      	cmp	r3, #0
 800f8ea:	d04e      	beq.n	800f98a <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	7d1b      	ldrb	r3, [r3, #20]
 800f8f0:	2b02      	cmp	r3, #2
 800f8f2:	d108      	bne.n	800f906 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f8f8:	4b97      	ldr	r3, [pc, #604]	@ (800fb58 <tcp_process+0x29c>)
 800f8fa:	681b      	ldr	r3, [r3, #0]
 800f8fc:	429a      	cmp	r2, r3
 800f8fe:	d123      	bne.n	800f948 <tcp_process+0x8c>
        acceptable = 1;
 800f900:	2301      	movs	r3, #1
 800f902:	76fb      	strb	r3, [r7, #27]
 800f904:	e020      	b.n	800f948 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f90a:	4b94      	ldr	r3, [pc, #592]	@ (800fb5c <tcp_process+0x2a0>)
 800f90c:	681b      	ldr	r3, [r3, #0]
 800f90e:	429a      	cmp	r2, r3
 800f910:	d102      	bne.n	800f918 <tcp_process+0x5c>
        acceptable = 1;
 800f912:	2301      	movs	r3, #1
 800f914:	76fb      	strb	r3, [r7, #27]
 800f916:	e017      	b.n	800f948 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800f918:	4b90      	ldr	r3, [pc, #576]	@ (800fb5c <tcp_process+0x2a0>)
 800f91a:	681a      	ldr	r2, [r3, #0]
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f920:	1ad3      	subs	r3, r2, r3
 800f922:	2b00      	cmp	r3, #0
 800f924:	db10      	blt.n	800f948 <tcp_process+0x8c>
 800f926:	4b8d      	ldr	r3, [pc, #564]	@ (800fb5c <tcp_process+0x2a0>)
 800f928:	681a      	ldr	r2, [r3, #0]
 800f92a:	687b      	ldr	r3, [r7, #4]
 800f92c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f92e:	6879      	ldr	r1, [r7, #4]
 800f930:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800f932:	440b      	add	r3, r1
 800f934:	1ad3      	subs	r3, r2, r3
 800f936:	2b00      	cmp	r3, #0
 800f938:	dc06      	bgt.n	800f948 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	8b5b      	ldrh	r3, [r3, #26]
 800f93e:	f043 0302 	orr.w	r3, r3, #2
 800f942:	b29a      	uxth	r2, r3
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800f948:	7efb      	ldrb	r3, [r7, #27]
 800f94a:	2b00      	cmp	r3, #0
 800f94c:	d01b      	beq.n	800f986 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	7d1b      	ldrb	r3, [r3, #20]
 800f952:	2b00      	cmp	r3, #0
 800f954:	d106      	bne.n	800f964 <tcp_process+0xa8>
 800f956:	4b7c      	ldr	r3, [pc, #496]	@ (800fb48 <tcp_process+0x28c>)
 800f958:	f44f 724e 	mov.w	r2, #824	@ 0x338
 800f95c:	4980      	ldr	r1, [pc, #512]	@ (800fb60 <tcp_process+0x2a4>)
 800f95e:	487c      	ldr	r0, [pc, #496]	@ (800fb50 <tcp_process+0x294>)
 800f960:	f006 fe1e 	bl	80165a0 <iprintf>
      recv_flags |= TF_RESET;
 800f964:	4b7f      	ldr	r3, [pc, #508]	@ (800fb64 <tcp_process+0x2a8>)
 800f966:	781b      	ldrb	r3, [r3, #0]
 800f968:	f043 0308 	orr.w	r3, r3, #8
 800f96c:	b2da      	uxtb	r2, r3
 800f96e:	4b7d      	ldr	r3, [pc, #500]	@ (800fb64 <tcp_process+0x2a8>)
 800f970:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	8b5b      	ldrh	r3, [r3, #26]
 800f976:	f023 0301 	bic.w	r3, r3, #1
 800f97a:	b29a      	uxth	r2, r3
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800f980:	f06f 030d 	mvn.w	r3, #13
 800f984:	e37a      	b.n	801007c <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800f986:	2300      	movs	r3, #0
 800f988:	e378      	b.n	801007c <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800f98a:	4b72      	ldr	r3, [pc, #456]	@ (800fb54 <tcp_process+0x298>)
 800f98c:	781b      	ldrb	r3, [r3, #0]
 800f98e:	f003 0302 	and.w	r3, r3, #2
 800f992:	2b00      	cmp	r3, #0
 800f994:	d010      	beq.n	800f9b8 <tcp_process+0xfc>
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	7d1b      	ldrb	r3, [r3, #20]
 800f99a:	2b02      	cmp	r3, #2
 800f99c:	d00c      	beq.n	800f9b8 <tcp_process+0xfc>
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	7d1b      	ldrb	r3, [r3, #20]
 800f9a2:	2b03      	cmp	r3, #3
 800f9a4:	d008      	beq.n	800f9b8 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	8b5b      	ldrh	r3, [r3, #26]
 800f9aa:	f043 0302 	orr.w	r3, r3, #2
 800f9ae:	b29a      	uxth	r2, r3
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800f9b4:	2300      	movs	r3, #0
 800f9b6:	e361      	b.n	801007c <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	8b5b      	ldrh	r3, [r3, #26]
 800f9bc:	f003 0310 	and.w	r3, r3, #16
 800f9c0:	2b00      	cmp	r3, #0
 800f9c2:	d103      	bne.n	800f9cc <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800f9c4:	4b68      	ldr	r3, [pc, #416]	@ (800fb68 <tcp_process+0x2ac>)
 800f9c6:	681a      	ldr	r2, [r3, #0]
 800f9c8:	687b      	ldr	r3, [r7, #4]
 800f9ca:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	2200      	movs	r2, #0
 800f9d0:	f883 20a3 	strb.w	r2, [r3, #163]	@ 0xa3
  pcb->persist_probe = 0;
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	2200      	movs	r2, #0
 800f9d8:	f883 20a2 	strb.w	r2, [r3, #162]	@ 0xa2

  tcp_parseopt(pcb);
 800f9dc:	6878      	ldr	r0, [r7, #4]
 800f9de:	f001 fc2b 	bl	8011238 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	7d1b      	ldrb	r3, [r3, #20]
 800f9e6:	3b02      	subs	r3, #2
 800f9e8:	2b07      	cmp	r3, #7
 800f9ea:	f200 8337 	bhi.w	801005c <tcp_process+0x7a0>
 800f9ee:	a201      	add	r2, pc, #4	@ (adr r2, 800f9f4 <tcp_process+0x138>)
 800f9f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f9f4:	0800fa15 	.word	0x0800fa15
 800f9f8:	0800fc45 	.word	0x0800fc45
 800f9fc:	0800fdbd 	.word	0x0800fdbd
 800fa00:	0800fde7 	.word	0x0800fde7
 800fa04:	0800ff0b 	.word	0x0800ff0b
 800fa08:	0800fdbd 	.word	0x0800fdbd
 800fa0c:	0800ff97 	.word	0x0800ff97
 800fa10:	08010027 	.word	0x08010027
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800fa14:	4b4f      	ldr	r3, [pc, #316]	@ (800fb54 <tcp_process+0x298>)
 800fa16:	781b      	ldrb	r3, [r3, #0]
 800fa18:	f003 0310 	and.w	r3, r3, #16
 800fa1c:	2b00      	cmp	r3, #0
 800fa1e:	f000 80e4 	beq.w	800fbea <tcp_process+0x32e>
 800fa22:	4b4c      	ldr	r3, [pc, #304]	@ (800fb54 <tcp_process+0x298>)
 800fa24:	781b      	ldrb	r3, [r3, #0]
 800fa26:	f003 0302 	and.w	r3, r3, #2
 800fa2a:	2b00      	cmp	r3, #0
 800fa2c:	f000 80dd 	beq.w	800fbea <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800fa30:	687b      	ldr	r3, [r7, #4]
 800fa32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fa34:	1c5a      	adds	r2, r3, #1
 800fa36:	4b48      	ldr	r3, [pc, #288]	@ (800fb58 <tcp_process+0x29c>)
 800fa38:	681b      	ldr	r3, [r3, #0]
 800fa3a:	429a      	cmp	r2, r3
 800fa3c:	f040 80d5 	bne.w	800fbea <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800fa40:	4b46      	ldr	r3, [pc, #280]	@ (800fb5c <tcp_process+0x2a0>)
 800fa42:	681b      	ldr	r3, [r3, #0]
 800fa44:	1c5a      	adds	r2, r3, #1
 800fa46:	687b      	ldr	r3, [r7, #4]
 800fa48:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800fa4a:	687b      	ldr	r3, [r7, #4]
 800fa4c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 800fa52:	4b41      	ldr	r3, [pc, #260]	@ (800fb58 <tcp_process+0x29c>)
 800fa54:	681a      	ldr	r2, [r3, #0]
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800fa5a:	4b44      	ldr	r3, [pc, #272]	@ (800fb6c <tcp_process+0x2b0>)
 800fa5c:	681b      	ldr	r3, [r3, #0]
 800fa5e:	89db      	ldrh	r3, [r3, #14]
 800fa60:	b29a      	uxth	r2, r3
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800fa74:	4b39      	ldr	r3, [pc, #228]	@ (800fb5c <tcp_process+0x2a0>)
 800fa76:	681b      	ldr	r3, [r3, #0]
 800fa78:	1e5a      	subs	r2, r3, #1
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 800fa7e:	687b      	ldr	r3, [r7, #4]
 800fa80:	2204      	movs	r2, #4
 800fa82:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	3304      	adds	r3, #4
 800fa8c:	4618      	mov	r0, r3
 800fa8e:	f005 f8b9 	bl	8014c04 <ip4_route>
 800fa92:	4601      	mov	r1, r0
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	3304      	adds	r3, #4
 800fa98:	461a      	mov	r2, r3
 800fa9a:	4620      	mov	r0, r4
 800fa9c:	f7ff f88c 	bl	800ebb8 <tcp_eff_send_mss_netif>
 800faa0:	4603      	mov	r3, r0
 800faa2:	461a      	mov	r2, r3
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800faac:	009a      	lsls	r2, r3, #2
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800fab2:	005b      	lsls	r3, r3, #1
 800fab4:	f241 111c 	movw	r1, #4380	@ 0x111c
 800fab8:	428b      	cmp	r3, r1
 800faba:	bf38      	it	cc
 800fabc:	460b      	movcc	r3, r1
 800fabe:	429a      	cmp	r2, r3
 800fac0:	d204      	bcs.n	800facc <tcp_process+0x210>
 800fac2:	687b      	ldr	r3, [r7, #4]
 800fac4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800fac6:	009b      	lsls	r3, r3, #2
 800fac8:	b29b      	uxth	r3, r3
 800faca:	e00d      	b.n	800fae8 <tcp_process+0x22c>
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800fad0:	005b      	lsls	r3, r3, #1
 800fad2:	f241 121c 	movw	r2, #4380	@ 0x111c
 800fad6:	4293      	cmp	r3, r2
 800fad8:	d904      	bls.n	800fae4 <tcp_process+0x228>
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800fade:	005b      	lsls	r3, r3, #1
 800fae0:	b29b      	uxth	r3, r3
 800fae2:	e001      	b.n	800fae8 <tcp_process+0x22c>
 800fae4:	f241 131c 	movw	r3, #4380	@ 0x111c
 800fae8:	687a      	ldr	r2, [r7, #4]
 800faea:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800faf4:	2b00      	cmp	r3, #0
 800faf6:	d106      	bne.n	800fb06 <tcp_process+0x24a>
 800faf8:	4b13      	ldr	r3, [pc, #76]	@ (800fb48 <tcp_process+0x28c>)
 800fafa:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 800fafe:	491c      	ldr	r1, [pc, #112]	@ (800fb70 <tcp_process+0x2b4>)
 800fb00:	4813      	ldr	r0, [pc, #76]	@ (800fb50 <tcp_process+0x294>)
 800fb02:	f006 fd4d 	bl	80165a0 <iprintf>
        --pcb->snd_queuelen;
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800fb0c:	3b01      	subs	r3, #1
 800fb0e:	b29a      	uxth	r2, r3
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fb1a:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800fb1c:	69fb      	ldr	r3, [r7, #28]
 800fb1e:	2b00      	cmp	r3, #0
 800fb20:	d12a      	bne.n	800fb78 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800fb22:	687b      	ldr	r3, [r7, #4]
 800fb24:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fb26:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800fb28:	69fb      	ldr	r3, [r7, #28]
 800fb2a:	2b00      	cmp	r3, #0
 800fb2c:	d106      	bne.n	800fb3c <tcp_process+0x280>
 800fb2e:	4b06      	ldr	r3, [pc, #24]	@ (800fb48 <tcp_process+0x28c>)
 800fb30:	f44f 725d 	mov.w	r2, #884	@ 0x374
 800fb34:	490f      	ldr	r1, [pc, #60]	@ (800fb74 <tcp_process+0x2b8>)
 800fb36:	4806      	ldr	r0, [pc, #24]	@ (800fb50 <tcp_process+0x294>)
 800fb38:	f006 fd32 	bl	80165a0 <iprintf>
          pcb->unsent = rseg->next;
 800fb3c:	69fb      	ldr	r3, [r7, #28]
 800fb3e:	681a      	ldr	r2, [r3, #0]
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	66da      	str	r2, [r3, #108]	@ 0x6c
 800fb44:	e01c      	b.n	800fb80 <tcp_process+0x2c4>
 800fb46:	bf00      	nop
 800fb48:	08019850 	.word	0x08019850
 800fb4c:	08019a88 	.word	0x08019a88
 800fb50:	0801989c 	.word	0x0801989c
 800fb54:	2000ed84 	.word	0x2000ed84
 800fb58:	2000ed7c 	.word	0x2000ed7c
 800fb5c:	2000ed78 	.word	0x2000ed78
 800fb60:	08019aa4 	.word	0x08019aa4
 800fb64:	2000ed85 	.word	0x2000ed85
 800fb68:	2000ed40 	.word	0x2000ed40
 800fb6c:	2000ed68 	.word	0x2000ed68
 800fb70:	08019ac4 	.word	0x08019ac4
 800fb74:	08019adc 	.word	0x08019adc
        } else {
          pcb->unacked = rseg->next;
 800fb78:	69fb      	ldr	r3, [r7, #28]
 800fb7a:	681a      	ldr	r2, [r3, #0]
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 800fb80:	69f8      	ldr	r0, [r7, #28]
 800fb82:	f7fe fc4c 	bl	800e41e <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fb8a:	2b00      	cmp	r3, #0
 800fb8c:	d104      	bne.n	800fb98 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800fb8e:	687b      	ldr	r3, [r7, #4]
 800fb90:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800fb94:	861a      	strh	r2, [r3, #48]	@ 0x30
 800fb96:	e006      	b.n	800fba6 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	2200      	movs	r2, #0
 800fb9c:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	2200      	movs	r2, #0
 800fba2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800fba6:	687b      	ldr	r3, [r7, #4]
 800fba8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800fbac:	2b00      	cmp	r3, #0
 800fbae:	d00a      	beq.n	800fbc6 <tcp_process+0x30a>
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800fbb6:	687a      	ldr	r2, [r7, #4]
 800fbb8:	6910      	ldr	r0, [r2, #16]
 800fbba:	2200      	movs	r2, #0
 800fbbc:	6879      	ldr	r1, [r7, #4]
 800fbbe:	4798      	blx	r3
 800fbc0:	4603      	mov	r3, r0
 800fbc2:	76bb      	strb	r3, [r7, #26]
 800fbc4:	e001      	b.n	800fbca <tcp_process+0x30e>
 800fbc6:	2300      	movs	r3, #0
 800fbc8:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800fbca:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800fbce:	f113 0f0d 	cmn.w	r3, #13
 800fbd2:	d102      	bne.n	800fbda <tcp_process+0x31e>
          return ERR_ABRT;
 800fbd4:	f06f 030c 	mvn.w	r3, #12
 800fbd8:	e250      	b.n	801007c <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	8b5b      	ldrh	r3, [r3, #26]
 800fbde:	f043 0302 	orr.w	r3, r3, #2
 800fbe2:	b29a      	uxth	r2, r3
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800fbe8:	e23a      	b.n	8010060 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800fbea:	4b98      	ldr	r3, [pc, #608]	@ (800fe4c <tcp_process+0x590>)
 800fbec:	781b      	ldrb	r3, [r3, #0]
 800fbee:	f003 0310 	and.w	r3, r3, #16
 800fbf2:	2b00      	cmp	r3, #0
 800fbf4:	f000 8234 	beq.w	8010060 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fbf8:	4b95      	ldr	r3, [pc, #596]	@ (800fe50 <tcp_process+0x594>)
 800fbfa:	6819      	ldr	r1, [r3, #0]
 800fbfc:	4b95      	ldr	r3, [pc, #596]	@ (800fe54 <tcp_process+0x598>)
 800fbfe:	881b      	ldrh	r3, [r3, #0]
 800fc00:	461a      	mov	r2, r3
 800fc02:	4b95      	ldr	r3, [pc, #596]	@ (800fe58 <tcp_process+0x59c>)
 800fc04:	681b      	ldr	r3, [r3, #0]
 800fc06:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fc08:	4b94      	ldr	r3, [pc, #592]	@ (800fe5c <tcp_process+0x5a0>)
 800fc0a:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fc0c:	885b      	ldrh	r3, [r3, #2]
 800fc0e:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fc10:	4a92      	ldr	r2, [pc, #584]	@ (800fe5c <tcp_process+0x5a0>)
 800fc12:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fc14:	8812      	ldrh	r2, [r2, #0]
 800fc16:	b292      	uxth	r2, r2
 800fc18:	9202      	str	r2, [sp, #8]
 800fc1a:	9301      	str	r3, [sp, #4]
 800fc1c:	4b90      	ldr	r3, [pc, #576]	@ (800fe60 <tcp_process+0x5a4>)
 800fc1e:	9300      	str	r3, [sp, #0]
 800fc20:	4b90      	ldr	r3, [pc, #576]	@ (800fe64 <tcp_process+0x5a8>)
 800fc22:	4602      	mov	r2, r0
 800fc24:	6878      	ldr	r0, [r7, #4]
 800fc26:	f003 f8d7 	bl	8012dd8 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800fc2a:	687b      	ldr	r3, [r7, #4]
 800fc2c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800fc30:	2b05      	cmp	r3, #5
 800fc32:	f200 8215 	bhi.w	8010060 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	2200      	movs	r2, #0
 800fc3a:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 800fc3c:	6878      	ldr	r0, [r7, #4]
 800fc3e:	f002 fea3 	bl	8012988 <tcp_rexmit_rto>
      break;
 800fc42:	e20d      	b.n	8010060 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800fc44:	4b81      	ldr	r3, [pc, #516]	@ (800fe4c <tcp_process+0x590>)
 800fc46:	781b      	ldrb	r3, [r3, #0]
 800fc48:	f003 0310 	and.w	r3, r3, #16
 800fc4c:	2b00      	cmp	r3, #0
 800fc4e:	f000 80a1 	beq.w	800fd94 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800fc52:	4b7f      	ldr	r3, [pc, #508]	@ (800fe50 <tcp_process+0x594>)
 800fc54:	681a      	ldr	r2, [r3, #0]
 800fc56:	687b      	ldr	r3, [r7, #4]
 800fc58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fc5a:	1ad3      	subs	r3, r2, r3
 800fc5c:	3b01      	subs	r3, #1
 800fc5e:	2b00      	cmp	r3, #0
 800fc60:	db7e      	blt.n	800fd60 <tcp_process+0x4a4>
 800fc62:	4b7b      	ldr	r3, [pc, #492]	@ (800fe50 <tcp_process+0x594>)
 800fc64:	681a      	ldr	r2, [r3, #0]
 800fc66:	687b      	ldr	r3, [r7, #4]
 800fc68:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fc6a:	1ad3      	subs	r3, r2, r3
 800fc6c:	2b00      	cmp	r3, #0
 800fc6e:	dc77      	bgt.n	800fd60 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800fc70:	687b      	ldr	r3, [r7, #4]
 800fc72:	2204      	movs	r2, #4
 800fc74:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800fc76:	687b      	ldr	r3, [r7, #4]
 800fc78:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800fc7a:	2b00      	cmp	r3, #0
 800fc7c:	d102      	bne.n	800fc84 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800fc7e:	23fa      	movs	r3, #250	@ 0xfa
 800fc80:	76bb      	strb	r3, [r7, #26]
 800fc82:	e01d      	b.n	800fcc0 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800fc88:	699b      	ldr	r3, [r3, #24]
 800fc8a:	2b00      	cmp	r3, #0
 800fc8c:	d106      	bne.n	800fc9c <tcp_process+0x3e0>
 800fc8e:	4b76      	ldr	r3, [pc, #472]	@ (800fe68 <tcp_process+0x5ac>)
 800fc90:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 800fc94:	4975      	ldr	r1, [pc, #468]	@ (800fe6c <tcp_process+0x5b0>)
 800fc96:	4876      	ldr	r0, [pc, #472]	@ (800fe70 <tcp_process+0x5b4>)
 800fc98:	f006 fc82 	bl	80165a0 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800fc9c:	687b      	ldr	r3, [r7, #4]
 800fc9e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800fca0:	699b      	ldr	r3, [r3, #24]
 800fca2:	2b00      	cmp	r3, #0
 800fca4:	d00a      	beq.n	800fcbc <tcp_process+0x400>
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800fcaa:	699b      	ldr	r3, [r3, #24]
 800fcac:	687a      	ldr	r2, [r7, #4]
 800fcae:	6910      	ldr	r0, [r2, #16]
 800fcb0:	2200      	movs	r2, #0
 800fcb2:	6879      	ldr	r1, [r7, #4]
 800fcb4:	4798      	blx	r3
 800fcb6:	4603      	mov	r3, r0
 800fcb8:	76bb      	strb	r3, [r7, #26]
 800fcba:	e001      	b.n	800fcc0 <tcp_process+0x404>
 800fcbc:	23f0      	movs	r3, #240	@ 0xf0
 800fcbe:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800fcc0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800fcc4:	2b00      	cmp	r3, #0
 800fcc6:	d00a      	beq.n	800fcde <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800fcc8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800fccc:	f113 0f0d 	cmn.w	r3, #13
 800fcd0:	d002      	beq.n	800fcd8 <tcp_process+0x41c>
              tcp_abort(pcb);
 800fcd2:	6878      	ldr	r0, [r7, #4]
 800fcd4:	f7fd fd0a 	bl	800d6ec <tcp_abort>
            }
            return ERR_ABRT;
 800fcd8:	f06f 030c 	mvn.w	r3, #12
 800fcdc:	e1ce      	b.n	801007c <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800fcde:	6878      	ldr	r0, [r7, #4]
 800fce0:	f000 fae0 	bl	80102a4 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800fce4:	4b63      	ldr	r3, [pc, #396]	@ (800fe74 <tcp_process+0x5b8>)
 800fce6:	881b      	ldrh	r3, [r3, #0]
 800fce8:	2b00      	cmp	r3, #0
 800fcea:	d005      	beq.n	800fcf8 <tcp_process+0x43c>
            recv_acked--;
 800fcec:	4b61      	ldr	r3, [pc, #388]	@ (800fe74 <tcp_process+0x5b8>)
 800fcee:	881b      	ldrh	r3, [r3, #0]
 800fcf0:	3b01      	subs	r3, #1
 800fcf2:	b29a      	uxth	r2, r3
 800fcf4:	4b5f      	ldr	r3, [pc, #380]	@ (800fe74 <tcp_process+0x5b8>)
 800fcf6:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800fcfc:	009a      	lsls	r2, r3, #2
 800fcfe:	687b      	ldr	r3, [r7, #4]
 800fd00:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800fd02:	005b      	lsls	r3, r3, #1
 800fd04:	f241 111c 	movw	r1, #4380	@ 0x111c
 800fd08:	428b      	cmp	r3, r1
 800fd0a:	bf38      	it	cc
 800fd0c:	460b      	movcc	r3, r1
 800fd0e:	429a      	cmp	r2, r3
 800fd10:	d204      	bcs.n	800fd1c <tcp_process+0x460>
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800fd16:	009b      	lsls	r3, r3, #2
 800fd18:	b29b      	uxth	r3, r3
 800fd1a:	e00d      	b.n	800fd38 <tcp_process+0x47c>
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800fd20:	005b      	lsls	r3, r3, #1
 800fd22:	f241 121c 	movw	r2, #4380	@ 0x111c
 800fd26:	4293      	cmp	r3, r2
 800fd28:	d904      	bls.n	800fd34 <tcp_process+0x478>
 800fd2a:	687b      	ldr	r3, [r7, #4]
 800fd2c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800fd2e:	005b      	lsls	r3, r3, #1
 800fd30:	b29b      	uxth	r3, r3
 800fd32:	e001      	b.n	800fd38 <tcp_process+0x47c>
 800fd34:	f241 131c 	movw	r3, #4380	@ 0x111c
 800fd38:	687a      	ldr	r2, [r7, #4]
 800fd3a:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800fd3e:	4b4e      	ldr	r3, [pc, #312]	@ (800fe78 <tcp_process+0x5bc>)
 800fd40:	781b      	ldrb	r3, [r3, #0]
 800fd42:	f003 0320 	and.w	r3, r3, #32
 800fd46:	2b00      	cmp	r3, #0
 800fd48:	d037      	beq.n	800fdba <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800fd4a:	687b      	ldr	r3, [r7, #4]
 800fd4c:	8b5b      	ldrh	r3, [r3, #26]
 800fd4e:	f043 0302 	orr.w	r3, r3, #2
 800fd52:	b29a      	uxth	r2, r3
 800fd54:	687b      	ldr	r3, [r7, #4]
 800fd56:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800fd58:	687b      	ldr	r3, [r7, #4]
 800fd5a:	2207      	movs	r2, #7
 800fd5c:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800fd5e:	e02c      	b.n	800fdba <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fd60:	4b3b      	ldr	r3, [pc, #236]	@ (800fe50 <tcp_process+0x594>)
 800fd62:	6819      	ldr	r1, [r3, #0]
 800fd64:	4b3b      	ldr	r3, [pc, #236]	@ (800fe54 <tcp_process+0x598>)
 800fd66:	881b      	ldrh	r3, [r3, #0]
 800fd68:	461a      	mov	r2, r3
 800fd6a:	4b3b      	ldr	r3, [pc, #236]	@ (800fe58 <tcp_process+0x59c>)
 800fd6c:	681b      	ldr	r3, [r3, #0]
 800fd6e:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fd70:	4b3a      	ldr	r3, [pc, #232]	@ (800fe5c <tcp_process+0x5a0>)
 800fd72:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fd74:	885b      	ldrh	r3, [r3, #2]
 800fd76:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fd78:	4a38      	ldr	r2, [pc, #224]	@ (800fe5c <tcp_process+0x5a0>)
 800fd7a:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fd7c:	8812      	ldrh	r2, [r2, #0]
 800fd7e:	b292      	uxth	r2, r2
 800fd80:	9202      	str	r2, [sp, #8]
 800fd82:	9301      	str	r3, [sp, #4]
 800fd84:	4b36      	ldr	r3, [pc, #216]	@ (800fe60 <tcp_process+0x5a4>)
 800fd86:	9300      	str	r3, [sp, #0]
 800fd88:	4b36      	ldr	r3, [pc, #216]	@ (800fe64 <tcp_process+0x5a8>)
 800fd8a:	4602      	mov	r2, r0
 800fd8c:	6878      	ldr	r0, [r7, #4]
 800fd8e:	f003 f823 	bl	8012dd8 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800fd92:	e167      	b.n	8010064 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800fd94:	4b2d      	ldr	r3, [pc, #180]	@ (800fe4c <tcp_process+0x590>)
 800fd96:	781b      	ldrb	r3, [r3, #0]
 800fd98:	f003 0302 	and.w	r3, r3, #2
 800fd9c:	2b00      	cmp	r3, #0
 800fd9e:	f000 8161 	beq.w	8010064 <tcp_process+0x7a8>
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fda6:	1e5a      	subs	r2, r3, #1
 800fda8:	4b2b      	ldr	r3, [pc, #172]	@ (800fe58 <tcp_process+0x59c>)
 800fdaa:	681b      	ldr	r3, [r3, #0]
 800fdac:	429a      	cmp	r2, r3
 800fdae:	f040 8159 	bne.w	8010064 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800fdb2:	6878      	ldr	r0, [r7, #4]
 800fdb4:	f002 fe0a 	bl	80129cc <tcp_rexmit>
      break;
 800fdb8:	e154      	b.n	8010064 <tcp_process+0x7a8>
 800fdba:	e153      	b.n	8010064 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800fdbc:	6878      	ldr	r0, [r7, #4]
 800fdbe:	f000 fa71 	bl	80102a4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800fdc2:	4b2d      	ldr	r3, [pc, #180]	@ (800fe78 <tcp_process+0x5bc>)
 800fdc4:	781b      	ldrb	r3, [r3, #0]
 800fdc6:	f003 0320 	and.w	r3, r3, #32
 800fdca:	2b00      	cmp	r3, #0
 800fdcc:	f000 814c 	beq.w	8010068 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	8b5b      	ldrh	r3, [r3, #26]
 800fdd4:	f043 0302 	orr.w	r3, r3, #2
 800fdd8:	b29a      	uxth	r2, r3
 800fdda:	687b      	ldr	r3, [r7, #4]
 800fddc:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	2207      	movs	r2, #7
 800fde2:	751a      	strb	r2, [r3, #20]
      }
      break;
 800fde4:	e140      	b.n	8010068 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800fde6:	6878      	ldr	r0, [r7, #4]
 800fde8:	f000 fa5c 	bl	80102a4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800fdec:	4b22      	ldr	r3, [pc, #136]	@ (800fe78 <tcp_process+0x5bc>)
 800fdee:	781b      	ldrb	r3, [r3, #0]
 800fdf0:	f003 0320 	and.w	r3, r3, #32
 800fdf4:	2b00      	cmp	r3, #0
 800fdf6:	d071      	beq.n	800fedc <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800fdf8:	4b14      	ldr	r3, [pc, #80]	@ (800fe4c <tcp_process+0x590>)
 800fdfa:	781b      	ldrb	r3, [r3, #0]
 800fdfc:	f003 0310 	and.w	r3, r3, #16
 800fe00:	2b00      	cmp	r3, #0
 800fe02:	d060      	beq.n	800fec6 <tcp_process+0x60a>
 800fe04:	687b      	ldr	r3, [r7, #4]
 800fe06:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800fe08:	4b11      	ldr	r3, [pc, #68]	@ (800fe50 <tcp_process+0x594>)
 800fe0a:	681b      	ldr	r3, [r3, #0]
 800fe0c:	429a      	cmp	r2, r3
 800fe0e:	d15a      	bne.n	800fec6 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800fe10:	687b      	ldr	r3, [r7, #4]
 800fe12:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800fe14:	2b00      	cmp	r3, #0
 800fe16:	d156      	bne.n	800fec6 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800fe18:	687b      	ldr	r3, [r7, #4]
 800fe1a:	8b5b      	ldrh	r3, [r3, #26]
 800fe1c:	f043 0302 	orr.w	r3, r3, #2
 800fe20:	b29a      	uxth	r2, r3
 800fe22:	687b      	ldr	r3, [r7, #4]
 800fe24:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800fe26:	6878      	ldr	r0, [r7, #4]
 800fe28:	f7fe fdbc 	bl	800e9a4 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800fe2c:	4b13      	ldr	r3, [pc, #76]	@ (800fe7c <tcp_process+0x5c0>)
 800fe2e:	681b      	ldr	r3, [r3, #0]
 800fe30:	687a      	ldr	r2, [r7, #4]
 800fe32:	429a      	cmp	r2, r3
 800fe34:	d105      	bne.n	800fe42 <tcp_process+0x586>
 800fe36:	4b11      	ldr	r3, [pc, #68]	@ (800fe7c <tcp_process+0x5c0>)
 800fe38:	681b      	ldr	r3, [r3, #0]
 800fe3a:	68db      	ldr	r3, [r3, #12]
 800fe3c:	4a0f      	ldr	r2, [pc, #60]	@ (800fe7c <tcp_process+0x5c0>)
 800fe3e:	6013      	str	r3, [r2, #0]
 800fe40:	e02e      	b.n	800fea0 <tcp_process+0x5e4>
 800fe42:	4b0e      	ldr	r3, [pc, #56]	@ (800fe7c <tcp_process+0x5c0>)
 800fe44:	681b      	ldr	r3, [r3, #0]
 800fe46:	617b      	str	r3, [r7, #20]
 800fe48:	e027      	b.n	800fe9a <tcp_process+0x5de>
 800fe4a:	bf00      	nop
 800fe4c:	2000ed84 	.word	0x2000ed84
 800fe50:	2000ed7c 	.word	0x2000ed7c
 800fe54:	2000ed82 	.word	0x2000ed82
 800fe58:	2000ed78 	.word	0x2000ed78
 800fe5c:	2000ed68 	.word	0x2000ed68
 800fe60:	20009404 	.word	0x20009404
 800fe64:	20009408 	.word	0x20009408
 800fe68:	08019850 	.word	0x08019850
 800fe6c:	08019af0 	.word	0x08019af0
 800fe70:	0801989c 	.word	0x0801989c
 800fe74:	2000ed80 	.word	0x2000ed80
 800fe78:	2000ed85 	.word	0x2000ed85
 800fe7c:	2000ed4c 	.word	0x2000ed4c
 800fe80:	697b      	ldr	r3, [r7, #20]
 800fe82:	68db      	ldr	r3, [r3, #12]
 800fe84:	687a      	ldr	r2, [r7, #4]
 800fe86:	429a      	cmp	r2, r3
 800fe88:	d104      	bne.n	800fe94 <tcp_process+0x5d8>
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	68da      	ldr	r2, [r3, #12]
 800fe8e:	697b      	ldr	r3, [r7, #20]
 800fe90:	60da      	str	r2, [r3, #12]
 800fe92:	e005      	b.n	800fea0 <tcp_process+0x5e4>
 800fe94:	697b      	ldr	r3, [r7, #20]
 800fe96:	68db      	ldr	r3, [r3, #12]
 800fe98:	617b      	str	r3, [r7, #20]
 800fe9a:	697b      	ldr	r3, [r7, #20]
 800fe9c:	2b00      	cmp	r3, #0
 800fe9e:	d1ef      	bne.n	800fe80 <tcp_process+0x5c4>
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	2200      	movs	r2, #0
 800fea4:	60da      	str	r2, [r3, #12]
 800fea6:	4b77      	ldr	r3, [pc, #476]	@ (8010084 <tcp_process+0x7c8>)
 800fea8:	2201      	movs	r2, #1
 800feaa:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800feac:	687b      	ldr	r3, [r7, #4]
 800feae:	220a      	movs	r2, #10
 800feb0:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800feb2:	4b75      	ldr	r3, [pc, #468]	@ (8010088 <tcp_process+0x7cc>)
 800feb4:	681a      	ldr	r2, [r3, #0]
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	60da      	str	r2, [r3, #12]
 800feba:	4a73      	ldr	r2, [pc, #460]	@ (8010088 <tcp_process+0x7cc>)
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	6013      	str	r3, [r2, #0]
 800fec0:	f003 f94c 	bl	801315c <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800fec4:	e0d2      	b.n	801006c <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	8b5b      	ldrh	r3, [r3, #26]
 800feca:	f043 0302 	orr.w	r3, r3, #2
 800fece:	b29a      	uxth	r2, r3
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800fed4:	687b      	ldr	r3, [r7, #4]
 800fed6:	2208      	movs	r2, #8
 800fed8:	751a      	strb	r2, [r3, #20]
      break;
 800feda:	e0c7      	b.n	801006c <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800fedc:	4b6b      	ldr	r3, [pc, #428]	@ (801008c <tcp_process+0x7d0>)
 800fede:	781b      	ldrb	r3, [r3, #0]
 800fee0:	f003 0310 	and.w	r3, r3, #16
 800fee4:	2b00      	cmp	r3, #0
 800fee6:	f000 80c1 	beq.w	801006c <tcp_process+0x7b0>
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800feee:	4b68      	ldr	r3, [pc, #416]	@ (8010090 <tcp_process+0x7d4>)
 800fef0:	681b      	ldr	r3, [r3, #0]
 800fef2:	429a      	cmp	r2, r3
 800fef4:	f040 80ba 	bne.w	801006c <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800fefc:	2b00      	cmp	r3, #0
 800fefe:	f040 80b5 	bne.w	801006c <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	2206      	movs	r2, #6
 800ff06:	751a      	strb	r2, [r3, #20]
      break;
 800ff08:	e0b0      	b.n	801006c <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800ff0a:	6878      	ldr	r0, [r7, #4]
 800ff0c:	f000 f9ca 	bl	80102a4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800ff10:	4b60      	ldr	r3, [pc, #384]	@ (8010094 <tcp_process+0x7d8>)
 800ff12:	781b      	ldrb	r3, [r3, #0]
 800ff14:	f003 0320 	and.w	r3, r3, #32
 800ff18:	2b00      	cmp	r3, #0
 800ff1a:	f000 80a9 	beq.w	8010070 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	8b5b      	ldrh	r3, [r3, #26]
 800ff22:	f043 0302 	orr.w	r3, r3, #2
 800ff26:	b29a      	uxth	r2, r3
 800ff28:	687b      	ldr	r3, [r7, #4]
 800ff2a:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800ff2c:	6878      	ldr	r0, [r7, #4]
 800ff2e:	f7fe fd39 	bl	800e9a4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800ff32:	4b59      	ldr	r3, [pc, #356]	@ (8010098 <tcp_process+0x7dc>)
 800ff34:	681b      	ldr	r3, [r3, #0]
 800ff36:	687a      	ldr	r2, [r7, #4]
 800ff38:	429a      	cmp	r2, r3
 800ff3a:	d105      	bne.n	800ff48 <tcp_process+0x68c>
 800ff3c:	4b56      	ldr	r3, [pc, #344]	@ (8010098 <tcp_process+0x7dc>)
 800ff3e:	681b      	ldr	r3, [r3, #0]
 800ff40:	68db      	ldr	r3, [r3, #12]
 800ff42:	4a55      	ldr	r2, [pc, #340]	@ (8010098 <tcp_process+0x7dc>)
 800ff44:	6013      	str	r3, [r2, #0]
 800ff46:	e013      	b.n	800ff70 <tcp_process+0x6b4>
 800ff48:	4b53      	ldr	r3, [pc, #332]	@ (8010098 <tcp_process+0x7dc>)
 800ff4a:	681b      	ldr	r3, [r3, #0]
 800ff4c:	613b      	str	r3, [r7, #16]
 800ff4e:	e00c      	b.n	800ff6a <tcp_process+0x6ae>
 800ff50:	693b      	ldr	r3, [r7, #16]
 800ff52:	68db      	ldr	r3, [r3, #12]
 800ff54:	687a      	ldr	r2, [r7, #4]
 800ff56:	429a      	cmp	r2, r3
 800ff58:	d104      	bne.n	800ff64 <tcp_process+0x6a8>
 800ff5a:	687b      	ldr	r3, [r7, #4]
 800ff5c:	68da      	ldr	r2, [r3, #12]
 800ff5e:	693b      	ldr	r3, [r7, #16]
 800ff60:	60da      	str	r2, [r3, #12]
 800ff62:	e005      	b.n	800ff70 <tcp_process+0x6b4>
 800ff64:	693b      	ldr	r3, [r7, #16]
 800ff66:	68db      	ldr	r3, [r3, #12]
 800ff68:	613b      	str	r3, [r7, #16]
 800ff6a:	693b      	ldr	r3, [r7, #16]
 800ff6c:	2b00      	cmp	r3, #0
 800ff6e:	d1ef      	bne.n	800ff50 <tcp_process+0x694>
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	2200      	movs	r2, #0
 800ff74:	60da      	str	r2, [r3, #12]
 800ff76:	4b43      	ldr	r3, [pc, #268]	@ (8010084 <tcp_process+0x7c8>)
 800ff78:	2201      	movs	r2, #1
 800ff7a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800ff7c:	687b      	ldr	r3, [r7, #4]
 800ff7e:	220a      	movs	r2, #10
 800ff80:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800ff82:	4b41      	ldr	r3, [pc, #260]	@ (8010088 <tcp_process+0x7cc>)
 800ff84:	681a      	ldr	r2, [r3, #0]
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	60da      	str	r2, [r3, #12]
 800ff8a:	4a3f      	ldr	r2, [pc, #252]	@ (8010088 <tcp_process+0x7cc>)
 800ff8c:	687b      	ldr	r3, [r7, #4]
 800ff8e:	6013      	str	r3, [r2, #0]
 800ff90:	f003 f8e4 	bl	801315c <tcp_timer_needed>
      }
      break;
 800ff94:	e06c      	b.n	8010070 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800ff96:	6878      	ldr	r0, [r7, #4]
 800ff98:	f000 f984 	bl	80102a4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800ff9c:	4b3b      	ldr	r3, [pc, #236]	@ (801008c <tcp_process+0x7d0>)
 800ff9e:	781b      	ldrb	r3, [r3, #0]
 800ffa0:	f003 0310 	and.w	r3, r3, #16
 800ffa4:	2b00      	cmp	r3, #0
 800ffa6:	d065      	beq.n	8010074 <tcp_process+0x7b8>
 800ffa8:	687b      	ldr	r3, [r7, #4]
 800ffaa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ffac:	4b38      	ldr	r3, [pc, #224]	@ (8010090 <tcp_process+0x7d4>)
 800ffae:	681b      	ldr	r3, [r3, #0]
 800ffb0:	429a      	cmp	r2, r3
 800ffb2:	d15f      	bne.n	8010074 <tcp_process+0x7b8>
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ffb8:	2b00      	cmp	r3, #0
 800ffba:	d15b      	bne.n	8010074 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800ffbc:	6878      	ldr	r0, [r7, #4]
 800ffbe:	f7fe fcf1 	bl	800e9a4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800ffc2:	4b35      	ldr	r3, [pc, #212]	@ (8010098 <tcp_process+0x7dc>)
 800ffc4:	681b      	ldr	r3, [r3, #0]
 800ffc6:	687a      	ldr	r2, [r7, #4]
 800ffc8:	429a      	cmp	r2, r3
 800ffca:	d105      	bne.n	800ffd8 <tcp_process+0x71c>
 800ffcc:	4b32      	ldr	r3, [pc, #200]	@ (8010098 <tcp_process+0x7dc>)
 800ffce:	681b      	ldr	r3, [r3, #0]
 800ffd0:	68db      	ldr	r3, [r3, #12]
 800ffd2:	4a31      	ldr	r2, [pc, #196]	@ (8010098 <tcp_process+0x7dc>)
 800ffd4:	6013      	str	r3, [r2, #0]
 800ffd6:	e013      	b.n	8010000 <tcp_process+0x744>
 800ffd8:	4b2f      	ldr	r3, [pc, #188]	@ (8010098 <tcp_process+0x7dc>)
 800ffda:	681b      	ldr	r3, [r3, #0]
 800ffdc:	60fb      	str	r3, [r7, #12]
 800ffde:	e00c      	b.n	800fffa <tcp_process+0x73e>
 800ffe0:	68fb      	ldr	r3, [r7, #12]
 800ffe2:	68db      	ldr	r3, [r3, #12]
 800ffe4:	687a      	ldr	r2, [r7, #4]
 800ffe6:	429a      	cmp	r2, r3
 800ffe8:	d104      	bne.n	800fff4 <tcp_process+0x738>
 800ffea:	687b      	ldr	r3, [r7, #4]
 800ffec:	68da      	ldr	r2, [r3, #12]
 800ffee:	68fb      	ldr	r3, [r7, #12]
 800fff0:	60da      	str	r2, [r3, #12]
 800fff2:	e005      	b.n	8010000 <tcp_process+0x744>
 800fff4:	68fb      	ldr	r3, [r7, #12]
 800fff6:	68db      	ldr	r3, [r3, #12]
 800fff8:	60fb      	str	r3, [r7, #12]
 800fffa:	68fb      	ldr	r3, [r7, #12]
 800fffc:	2b00      	cmp	r3, #0
 800fffe:	d1ef      	bne.n	800ffe0 <tcp_process+0x724>
 8010000:	687b      	ldr	r3, [r7, #4]
 8010002:	2200      	movs	r2, #0
 8010004:	60da      	str	r2, [r3, #12]
 8010006:	4b1f      	ldr	r3, [pc, #124]	@ (8010084 <tcp_process+0x7c8>)
 8010008:	2201      	movs	r2, #1
 801000a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	220a      	movs	r2, #10
 8010010:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8010012:	4b1d      	ldr	r3, [pc, #116]	@ (8010088 <tcp_process+0x7cc>)
 8010014:	681a      	ldr	r2, [r3, #0]
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	60da      	str	r2, [r3, #12]
 801001a:	4a1b      	ldr	r2, [pc, #108]	@ (8010088 <tcp_process+0x7cc>)
 801001c:	687b      	ldr	r3, [r7, #4]
 801001e:	6013      	str	r3, [r2, #0]
 8010020:	f003 f89c 	bl	801315c <tcp_timer_needed>
      }
      break;
 8010024:	e026      	b.n	8010074 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8010026:	6878      	ldr	r0, [r7, #4]
 8010028:	f000 f93c 	bl	80102a4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801002c:	4b17      	ldr	r3, [pc, #92]	@ (801008c <tcp_process+0x7d0>)
 801002e:	781b      	ldrb	r3, [r3, #0]
 8010030:	f003 0310 	and.w	r3, r3, #16
 8010034:	2b00      	cmp	r3, #0
 8010036:	d01f      	beq.n	8010078 <tcp_process+0x7bc>
 8010038:	687b      	ldr	r3, [r7, #4]
 801003a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801003c:	4b14      	ldr	r3, [pc, #80]	@ (8010090 <tcp_process+0x7d4>)
 801003e:	681b      	ldr	r3, [r3, #0]
 8010040:	429a      	cmp	r2, r3
 8010042:	d119      	bne.n	8010078 <tcp_process+0x7bc>
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010048:	2b00      	cmp	r3, #0
 801004a:	d115      	bne.n	8010078 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 801004c:	4b11      	ldr	r3, [pc, #68]	@ (8010094 <tcp_process+0x7d8>)
 801004e:	781b      	ldrb	r3, [r3, #0]
 8010050:	f043 0310 	orr.w	r3, r3, #16
 8010054:	b2da      	uxtb	r2, r3
 8010056:	4b0f      	ldr	r3, [pc, #60]	@ (8010094 <tcp_process+0x7d8>)
 8010058:	701a      	strb	r2, [r3, #0]
      }
      break;
 801005a:	e00d      	b.n	8010078 <tcp_process+0x7bc>
    default:
      break;
 801005c:	bf00      	nop
 801005e:	e00c      	b.n	801007a <tcp_process+0x7be>
      break;
 8010060:	bf00      	nop
 8010062:	e00a      	b.n	801007a <tcp_process+0x7be>
      break;
 8010064:	bf00      	nop
 8010066:	e008      	b.n	801007a <tcp_process+0x7be>
      break;
 8010068:	bf00      	nop
 801006a:	e006      	b.n	801007a <tcp_process+0x7be>
      break;
 801006c:	bf00      	nop
 801006e:	e004      	b.n	801007a <tcp_process+0x7be>
      break;
 8010070:	bf00      	nop
 8010072:	e002      	b.n	801007a <tcp_process+0x7be>
      break;
 8010074:	bf00      	nop
 8010076:	e000      	b.n	801007a <tcp_process+0x7be>
      break;
 8010078:	bf00      	nop
  }
  return ERR_OK;
 801007a:	2300      	movs	r3, #0
}
 801007c:	4618      	mov	r0, r3
 801007e:	3724      	adds	r7, #36	@ 0x24
 8010080:	46bd      	mov	sp, r7
 8010082:	bd90      	pop	{r4, r7, pc}
 8010084:	2000ed54 	.word	0x2000ed54
 8010088:	2000ed50 	.word	0x2000ed50
 801008c:	2000ed84 	.word	0x2000ed84
 8010090:	2000ed7c 	.word	0x2000ed7c
 8010094:	2000ed85 	.word	0x2000ed85
 8010098:	2000ed4c 	.word	0x2000ed4c

0801009c <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 801009c:	b590      	push	{r4, r7, lr}
 801009e:	b085      	sub	sp, #20
 80100a0:	af00      	add	r7, sp, #0
 80100a2:	6078      	str	r0, [r7, #4]
 80100a4:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 80100a6:	687b      	ldr	r3, [r7, #4]
 80100a8:	2b00      	cmp	r3, #0
 80100aa:	d106      	bne.n	80100ba <tcp_oos_insert_segment+0x1e>
 80100ac:	4b3b      	ldr	r3, [pc, #236]	@ (801019c <tcp_oos_insert_segment+0x100>)
 80100ae:	f240 421f 	movw	r2, #1055	@ 0x41f
 80100b2:	493b      	ldr	r1, [pc, #236]	@ (80101a0 <tcp_oos_insert_segment+0x104>)
 80100b4:	483b      	ldr	r0, [pc, #236]	@ (80101a4 <tcp_oos_insert_segment+0x108>)
 80100b6:	f006 fa73 	bl	80165a0 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	68db      	ldr	r3, [r3, #12]
 80100be:	899b      	ldrh	r3, [r3, #12]
 80100c0:	b29b      	uxth	r3, r3
 80100c2:	4618      	mov	r0, r3
 80100c4:	f7fb f90e 	bl	800b2e4 <lwip_htons>
 80100c8:	4603      	mov	r3, r0
 80100ca:	b2db      	uxtb	r3, r3
 80100cc:	f003 0301 	and.w	r3, r3, #1
 80100d0:	2b00      	cmp	r3, #0
 80100d2:	d028      	beq.n	8010126 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 80100d4:	6838      	ldr	r0, [r7, #0]
 80100d6:	f7fe f98d 	bl	800e3f4 <tcp_segs_free>
    next = NULL;
 80100da:	2300      	movs	r3, #0
 80100dc:	603b      	str	r3, [r7, #0]
 80100de:	e056      	b.n	801018e <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80100e0:	683b      	ldr	r3, [r7, #0]
 80100e2:	68db      	ldr	r3, [r3, #12]
 80100e4:	899b      	ldrh	r3, [r3, #12]
 80100e6:	b29b      	uxth	r3, r3
 80100e8:	4618      	mov	r0, r3
 80100ea:	f7fb f8fb 	bl	800b2e4 <lwip_htons>
 80100ee:	4603      	mov	r3, r0
 80100f0:	b2db      	uxtb	r3, r3
 80100f2:	f003 0301 	and.w	r3, r3, #1
 80100f6:	2b00      	cmp	r3, #0
 80100f8:	d00d      	beq.n	8010116 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 80100fa:	687b      	ldr	r3, [r7, #4]
 80100fc:	68db      	ldr	r3, [r3, #12]
 80100fe:	899b      	ldrh	r3, [r3, #12]
 8010100:	b29c      	uxth	r4, r3
 8010102:	2001      	movs	r0, #1
 8010104:	f7fb f8ee 	bl	800b2e4 <lwip_htons>
 8010108:	4603      	mov	r3, r0
 801010a:	461a      	mov	r2, r3
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	68db      	ldr	r3, [r3, #12]
 8010110:	4322      	orrs	r2, r4
 8010112:	b292      	uxth	r2, r2
 8010114:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8010116:	683b      	ldr	r3, [r7, #0]
 8010118:	60fb      	str	r3, [r7, #12]
      next = next->next;
 801011a:	683b      	ldr	r3, [r7, #0]
 801011c:	681b      	ldr	r3, [r3, #0]
 801011e:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8010120:	68f8      	ldr	r0, [r7, #12]
 8010122:	f7fe f97c 	bl	800e41e <tcp_seg_free>
    while (next &&
 8010126:	683b      	ldr	r3, [r7, #0]
 8010128:	2b00      	cmp	r3, #0
 801012a:	d00e      	beq.n	801014a <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	891b      	ldrh	r3, [r3, #8]
 8010130:	461a      	mov	r2, r3
 8010132:	4b1d      	ldr	r3, [pc, #116]	@ (80101a8 <tcp_oos_insert_segment+0x10c>)
 8010134:	681b      	ldr	r3, [r3, #0]
 8010136:	441a      	add	r2, r3
 8010138:	683b      	ldr	r3, [r7, #0]
 801013a:	68db      	ldr	r3, [r3, #12]
 801013c:	685b      	ldr	r3, [r3, #4]
 801013e:	6839      	ldr	r1, [r7, #0]
 8010140:	8909      	ldrh	r1, [r1, #8]
 8010142:	440b      	add	r3, r1
 8010144:	1ad3      	subs	r3, r2, r3
    while (next &&
 8010146:	2b00      	cmp	r3, #0
 8010148:	daca      	bge.n	80100e0 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 801014a:	683b      	ldr	r3, [r7, #0]
 801014c:	2b00      	cmp	r3, #0
 801014e:	d01e      	beq.n	801018e <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	891b      	ldrh	r3, [r3, #8]
 8010154:	461a      	mov	r2, r3
 8010156:	4b14      	ldr	r3, [pc, #80]	@ (80101a8 <tcp_oos_insert_segment+0x10c>)
 8010158:	681b      	ldr	r3, [r3, #0]
 801015a:	441a      	add	r2, r3
 801015c:	683b      	ldr	r3, [r7, #0]
 801015e:	68db      	ldr	r3, [r3, #12]
 8010160:	685b      	ldr	r3, [r3, #4]
 8010162:	1ad3      	subs	r3, r2, r3
    if (next &&
 8010164:	2b00      	cmp	r3, #0
 8010166:	dd12      	ble.n	801018e <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8010168:	683b      	ldr	r3, [r7, #0]
 801016a:	68db      	ldr	r3, [r3, #12]
 801016c:	685b      	ldr	r3, [r3, #4]
 801016e:	b29a      	uxth	r2, r3
 8010170:	4b0d      	ldr	r3, [pc, #52]	@ (80101a8 <tcp_oos_insert_segment+0x10c>)
 8010172:	681b      	ldr	r3, [r3, #0]
 8010174:	b29b      	uxth	r3, r3
 8010176:	1ad3      	subs	r3, r2, r3
 8010178:	b29a      	uxth	r2, r3
 801017a:	687b      	ldr	r3, [r7, #4]
 801017c:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 801017e:	687b      	ldr	r3, [r7, #4]
 8010180:	685a      	ldr	r2, [r3, #4]
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	891b      	ldrh	r3, [r3, #8]
 8010186:	4619      	mov	r1, r3
 8010188:	4610      	mov	r0, r2
 801018a:	f7fc fb17 	bl	800c7bc <pbuf_realloc>
    }
  }
  cseg->next = next;
 801018e:	687b      	ldr	r3, [r7, #4]
 8010190:	683a      	ldr	r2, [r7, #0]
 8010192:	601a      	str	r2, [r3, #0]
}
 8010194:	bf00      	nop
 8010196:	3714      	adds	r7, #20
 8010198:	46bd      	mov	sp, r7
 801019a:	bd90      	pop	{r4, r7, pc}
 801019c:	08019850 	.word	0x08019850
 80101a0:	08019b10 	.word	0x08019b10
 80101a4:	0801989c 	.word	0x0801989c
 80101a8:	2000ed78 	.word	0x2000ed78

080101ac <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 80101ac:	b5b0      	push	{r4, r5, r7, lr}
 80101ae:	b086      	sub	sp, #24
 80101b0:	af00      	add	r7, sp, #0
 80101b2:	60f8      	str	r0, [r7, #12]
 80101b4:	60b9      	str	r1, [r7, #8]
 80101b6:	607a      	str	r2, [r7, #4]
 80101b8:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 80101ba:	e03e      	b.n	801023a <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 80101bc:	68bb      	ldr	r3, [r7, #8]
 80101be:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 80101c0:	68bb      	ldr	r3, [r7, #8]
 80101c2:	681b      	ldr	r3, [r3, #0]
 80101c4:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 80101c6:	697b      	ldr	r3, [r7, #20]
 80101c8:	685b      	ldr	r3, [r3, #4]
 80101ca:	4618      	mov	r0, r3
 80101cc:	f7fc fd0a 	bl	800cbe4 <pbuf_clen>
 80101d0:	4603      	mov	r3, r0
 80101d2:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 80101d4:	68fb      	ldr	r3, [r7, #12]
 80101d6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80101da:	8a7a      	ldrh	r2, [r7, #18]
 80101dc:	429a      	cmp	r2, r3
 80101de:	d906      	bls.n	80101ee <tcp_free_acked_segments+0x42>
 80101e0:	4b2a      	ldr	r3, [pc, #168]	@ (801028c <tcp_free_acked_segments+0xe0>)
 80101e2:	f240 4257 	movw	r2, #1111	@ 0x457
 80101e6:	492a      	ldr	r1, [pc, #168]	@ (8010290 <tcp_free_acked_segments+0xe4>)
 80101e8:	482a      	ldr	r0, [pc, #168]	@ (8010294 <tcp_free_acked_segments+0xe8>)
 80101ea:	f006 f9d9 	bl	80165a0 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 80101ee:	68fb      	ldr	r3, [r7, #12]
 80101f0:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 80101f4:	8a7b      	ldrh	r3, [r7, #18]
 80101f6:	1ad3      	subs	r3, r2, r3
 80101f8:	b29a      	uxth	r2, r3
 80101fa:	68fb      	ldr	r3, [r7, #12]
 80101fc:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8010200:	697b      	ldr	r3, [r7, #20]
 8010202:	891a      	ldrh	r2, [r3, #8]
 8010204:	4b24      	ldr	r3, [pc, #144]	@ (8010298 <tcp_free_acked_segments+0xec>)
 8010206:	881b      	ldrh	r3, [r3, #0]
 8010208:	4413      	add	r3, r2
 801020a:	b29a      	uxth	r2, r3
 801020c:	4b22      	ldr	r3, [pc, #136]	@ (8010298 <tcp_free_acked_segments+0xec>)
 801020e:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8010210:	6978      	ldr	r0, [r7, #20]
 8010212:	f7fe f904 	bl	800e41e <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8010216:	68fb      	ldr	r3, [r7, #12]
 8010218:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801021c:	2b00      	cmp	r3, #0
 801021e:	d00c      	beq.n	801023a <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8010220:	68bb      	ldr	r3, [r7, #8]
 8010222:	2b00      	cmp	r3, #0
 8010224:	d109      	bne.n	801023a <tcp_free_acked_segments+0x8e>
 8010226:	683b      	ldr	r3, [r7, #0]
 8010228:	2b00      	cmp	r3, #0
 801022a:	d106      	bne.n	801023a <tcp_free_acked_segments+0x8e>
 801022c:	4b17      	ldr	r3, [pc, #92]	@ (801028c <tcp_free_acked_segments+0xe0>)
 801022e:	f240 4261 	movw	r2, #1121	@ 0x461
 8010232:	491a      	ldr	r1, [pc, #104]	@ (801029c <tcp_free_acked_segments+0xf0>)
 8010234:	4817      	ldr	r0, [pc, #92]	@ (8010294 <tcp_free_acked_segments+0xe8>)
 8010236:	f006 f9b3 	bl	80165a0 <iprintf>
  while (seg_list != NULL &&
 801023a:	68bb      	ldr	r3, [r7, #8]
 801023c:	2b00      	cmp	r3, #0
 801023e:	d020      	beq.n	8010282 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8010240:	68bb      	ldr	r3, [r7, #8]
 8010242:	68db      	ldr	r3, [r3, #12]
 8010244:	685b      	ldr	r3, [r3, #4]
 8010246:	4618      	mov	r0, r3
 8010248:	f7fb f861 	bl	800b30e <lwip_htonl>
 801024c:	4604      	mov	r4, r0
 801024e:	68bb      	ldr	r3, [r7, #8]
 8010250:	891b      	ldrh	r3, [r3, #8]
 8010252:	461d      	mov	r5, r3
 8010254:	68bb      	ldr	r3, [r7, #8]
 8010256:	68db      	ldr	r3, [r3, #12]
 8010258:	899b      	ldrh	r3, [r3, #12]
 801025a:	b29b      	uxth	r3, r3
 801025c:	4618      	mov	r0, r3
 801025e:	f7fb f841 	bl	800b2e4 <lwip_htons>
 8010262:	4603      	mov	r3, r0
 8010264:	b2db      	uxtb	r3, r3
 8010266:	f003 0303 	and.w	r3, r3, #3
 801026a:	2b00      	cmp	r3, #0
 801026c:	d001      	beq.n	8010272 <tcp_free_acked_segments+0xc6>
 801026e:	2301      	movs	r3, #1
 8010270:	e000      	b.n	8010274 <tcp_free_acked_segments+0xc8>
 8010272:	2300      	movs	r3, #0
 8010274:	442b      	add	r3, r5
 8010276:	18e2      	adds	r2, r4, r3
 8010278:	4b09      	ldr	r3, [pc, #36]	@ (80102a0 <tcp_free_acked_segments+0xf4>)
 801027a:	681b      	ldr	r3, [r3, #0]
 801027c:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 801027e:	2b00      	cmp	r3, #0
 8010280:	dd9c      	ble.n	80101bc <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8010282:	68bb      	ldr	r3, [r7, #8]
}
 8010284:	4618      	mov	r0, r3
 8010286:	3718      	adds	r7, #24
 8010288:	46bd      	mov	sp, r7
 801028a:	bdb0      	pop	{r4, r5, r7, pc}
 801028c:	08019850 	.word	0x08019850
 8010290:	08019b38 	.word	0x08019b38
 8010294:	0801989c 	.word	0x0801989c
 8010298:	2000ed80 	.word	0x2000ed80
 801029c:	08019b60 	.word	0x08019b60
 80102a0:	2000ed7c 	.word	0x2000ed7c

080102a4 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 80102a4:	b5b0      	push	{r4, r5, r7, lr}
 80102a6:	b094      	sub	sp, #80	@ 0x50
 80102a8:	af00      	add	r7, sp, #0
 80102aa:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 80102ac:	2300      	movs	r3, #0
 80102ae:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 80102b0:	687b      	ldr	r3, [r7, #4]
 80102b2:	2b00      	cmp	r3, #0
 80102b4:	d106      	bne.n	80102c4 <tcp_receive+0x20>
 80102b6:	4b91      	ldr	r3, [pc, #580]	@ (80104fc <tcp_receive+0x258>)
 80102b8:	f240 427b 	movw	r2, #1147	@ 0x47b
 80102bc:	4990      	ldr	r1, [pc, #576]	@ (8010500 <tcp_receive+0x25c>)
 80102be:	4891      	ldr	r0, [pc, #580]	@ (8010504 <tcp_receive+0x260>)
 80102c0:	f006 f96e 	bl	80165a0 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 80102c4:	687b      	ldr	r3, [r7, #4]
 80102c6:	7d1b      	ldrb	r3, [r3, #20]
 80102c8:	2b03      	cmp	r3, #3
 80102ca:	d806      	bhi.n	80102da <tcp_receive+0x36>
 80102cc:	4b8b      	ldr	r3, [pc, #556]	@ (80104fc <tcp_receive+0x258>)
 80102ce:	f240 427c 	movw	r2, #1148	@ 0x47c
 80102d2:	498d      	ldr	r1, [pc, #564]	@ (8010508 <tcp_receive+0x264>)
 80102d4:	488b      	ldr	r0, [pc, #556]	@ (8010504 <tcp_receive+0x260>)
 80102d6:	f006 f963 	bl	80165a0 <iprintf>

  if (flags & TCP_ACK) {
 80102da:	4b8c      	ldr	r3, [pc, #560]	@ (801050c <tcp_receive+0x268>)
 80102dc:	781b      	ldrb	r3, [r3, #0]
 80102de:	f003 0310 	and.w	r3, r3, #16
 80102e2:	2b00      	cmp	r3, #0
 80102e4:	f000 8264 	beq.w	80107b0 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 80102e8:	687b      	ldr	r3, [r7, #4]
 80102ea:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80102ee:	461a      	mov	r2, r3
 80102f0:	687b      	ldr	r3, [r7, #4]
 80102f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80102f4:	4413      	add	r3, r2
 80102f6:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80102fc:	4b84      	ldr	r3, [pc, #528]	@ (8010510 <tcp_receive+0x26c>)
 80102fe:	681b      	ldr	r3, [r3, #0]
 8010300:	1ad3      	subs	r3, r2, r3
 8010302:	2b00      	cmp	r3, #0
 8010304:	db1b      	blt.n	801033e <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8010306:	687b      	ldr	r3, [r7, #4]
 8010308:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801030a:	4b81      	ldr	r3, [pc, #516]	@ (8010510 <tcp_receive+0x26c>)
 801030c:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801030e:	429a      	cmp	r2, r3
 8010310:	d106      	bne.n	8010320 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8010312:	687b      	ldr	r3, [r7, #4]
 8010314:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8010316:	4b7f      	ldr	r3, [pc, #508]	@ (8010514 <tcp_receive+0x270>)
 8010318:	681b      	ldr	r3, [r3, #0]
 801031a:	1ad3      	subs	r3, r2, r3
 801031c:	2b00      	cmp	r3, #0
 801031e:	db0e      	blt.n	801033e <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8010324:	4b7b      	ldr	r3, [pc, #492]	@ (8010514 <tcp_receive+0x270>)
 8010326:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8010328:	429a      	cmp	r2, r3
 801032a:	d125      	bne.n	8010378 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801032c:	4b7a      	ldr	r3, [pc, #488]	@ (8010518 <tcp_receive+0x274>)
 801032e:	681b      	ldr	r3, [r3, #0]
 8010330:	89db      	ldrh	r3, [r3, #14]
 8010332:	b29a      	uxth	r2, r3
 8010334:	687b      	ldr	r3, [r7, #4]
 8010336:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801033a:	429a      	cmp	r2, r3
 801033c:	d91c      	bls.n	8010378 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 801033e:	4b76      	ldr	r3, [pc, #472]	@ (8010518 <tcp_receive+0x274>)
 8010340:	681b      	ldr	r3, [r3, #0]
 8010342:	89db      	ldrh	r3, [r3, #14]
 8010344:	b29a      	uxth	r2, r3
 8010346:	687b      	ldr	r3, [r7, #4]
 8010348:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 801034c:	687b      	ldr	r3, [r7, #4]
 801034e:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 8010352:	687b      	ldr	r3, [r7, #4]
 8010354:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8010358:	429a      	cmp	r2, r3
 801035a:	d205      	bcs.n	8010368 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 801035c:	687b      	ldr	r3, [r7, #4]
 801035e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8010362:	687b      	ldr	r3, [r7, #4]
 8010364:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 8010368:	4b69      	ldr	r3, [pc, #420]	@ (8010510 <tcp_receive+0x26c>)
 801036a:	681a      	ldr	r2, [r3, #0]
 801036c:	687b      	ldr	r3, [r7, #4]
 801036e:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 8010370:	4b68      	ldr	r3, [pc, #416]	@ (8010514 <tcp_receive+0x270>)
 8010372:	681a      	ldr	r2, [r3, #0]
 8010374:	687b      	ldr	r3, [r7, #4]
 8010376:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8010378:	4b66      	ldr	r3, [pc, #408]	@ (8010514 <tcp_receive+0x270>)
 801037a:	681a      	ldr	r2, [r3, #0]
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010380:	1ad3      	subs	r3, r2, r3
 8010382:	2b00      	cmp	r3, #0
 8010384:	dc58      	bgt.n	8010438 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8010386:	4b65      	ldr	r3, [pc, #404]	@ (801051c <tcp_receive+0x278>)
 8010388:	881b      	ldrh	r3, [r3, #0]
 801038a:	2b00      	cmp	r3, #0
 801038c:	d14b      	bne.n	8010426 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 801038e:	687b      	ldr	r3, [r7, #4]
 8010390:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010392:	687a      	ldr	r2, [r7, #4]
 8010394:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 8010398:	4413      	add	r3, r2
 801039a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801039c:	429a      	cmp	r2, r3
 801039e:	d142      	bne.n	8010426 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80103a6:	2b00      	cmp	r3, #0
 80103a8:	db3d      	blt.n	8010426 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80103ae:	4b59      	ldr	r3, [pc, #356]	@ (8010514 <tcp_receive+0x270>)
 80103b0:	681b      	ldr	r3, [r3, #0]
 80103b2:	429a      	cmp	r2, r3
 80103b4:	d137      	bne.n	8010426 <tcp_receive+0x182>
              found_dupack = 1;
 80103b6:	2301      	movs	r3, #1
 80103b8:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 80103ba:	687b      	ldr	r3, [r7, #4]
 80103bc:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80103c0:	2bff      	cmp	r3, #255	@ 0xff
 80103c2:	d007      	beq.n	80103d4 <tcp_receive+0x130>
                ++pcb->dupacks;
 80103c4:	687b      	ldr	r3, [r7, #4]
 80103c6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80103ca:	3301      	adds	r3, #1
 80103cc:	b2da      	uxtb	r2, r3
 80103ce:	687b      	ldr	r3, [r7, #4]
 80103d0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80103da:	2b03      	cmp	r3, #3
 80103dc:	d91b      	bls.n	8010416 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 80103de:	687b      	ldr	r3, [r7, #4]
 80103e0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80103e4:	687b      	ldr	r3, [r7, #4]
 80103e6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80103e8:	4413      	add	r3, r2
 80103ea:	b29a      	uxth	r2, r3
 80103ec:	687b      	ldr	r3, [r7, #4]
 80103ee:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80103f2:	429a      	cmp	r2, r3
 80103f4:	d30a      	bcc.n	801040c <tcp_receive+0x168>
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80103fc:	687b      	ldr	r3, [r7, #4]
 80103fe:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010400:	4413      	add	r3, r2
 8010402:	b29a      	uxth	r2, r3
 8010404:	687b      	ldr	r3, [r7, #4]
 8010406:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 801040a:	e004      	b.n	8010416 <tcp_receive+0x172>
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010412:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 801041c:	2b02      	cmp	r3, #2
 801041e:	d902      	bls.n	8010426 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8010420:	6878      	ldr	r0, [r7, #4]
 8010422:	f002 fb3f 	bl	8012aa4 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8010426:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010428:	2b00      	cmp	r3, #0
 801042a:	f040 8161 	bne.w	80106f0 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 801042e:	687b      	ldr	r3, [r7, #4]
 8010430:	2200      	movs	r2, #0
 8010432:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8010436:	e15b      	b.n	80106f0 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010438:	4b36      	ldr	r3, [pc, #216]	@ (8010514 <tcp_receive+0x270>)
 801043a:	681a      	ldr	r2, [r3, #0]
 801043c:	687b      	ldr	r3, [r7, #4]
 801043e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010440:	1ad3      	subs	r3, r2, r3
 8010442:	3b01      	subs	r3, #1
 8010444:	2b00      	cmp	r3, #0
 8010446:	f2c0 814e 	blt.w	80106e6 <tcp_receive+0x442>
 801044a:	4b32      	ldr	r3, [pc, #200]	@ (8010514 <tcp_receive+0x270>)
 801044c:	681a      	ldr	r2, [r3, #0]
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010452:	1ad3      	subs	r3, r2, r3
 8010454:	2b00      	cmp	r3, #0
 8010456:	f300 8146 	bgt.w	80106e6 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 801045a:	687b      	ldr	r3, [r7, #4]
 801045c:	8b5b      	ldrh	r3, [r3, #26]
 801045e:	f003 0304 	and.w	r3, r3, #4
 8010462:	2b00      	cmp	r3, #0
 8010464:	d010      	beq.n	8010488 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8010466:	687b      	ldr	r3, [r7, #4]
 8010468:	8b5b      	ldrh	r3, [r3, #26]
 801046a:	f023 0304 	bic.w	r3, r3, #4
 801046e:	b29a      	uxth	r2, r3
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8010474:	687b      	ldr	r3, [r7, #4]
 8010476:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 801047a:	687b      	ldr	r3, [r7, #4]
 801047c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 8010480:	687b      	ldr	r3, [r7, #4]
 8010482:	2200      	movs	r2, #0
 8010484:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8010488:	687b      	ldr	r3, [r7, #4]
 801048a:	2200      	movs	r2, #0
 801048c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8010490:	687b      	ldr	r3, [r7, #4]
 8010492:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8010496:	10db      	asrs	r3, r3, #3
 8010498:	b21b      	sxth	r3, r3
 801049a:	b29a      	uxth	r2, r3
 801049c:	687b      	ldr	r3, [r7, #4]
 801049e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80104a2:	b29b      	uxth	r3, r3
 80104a4:	4413      	add	r3, r2
 80104a6:	b29b      	uxth	r3, r3
 80104a8:	b21a      	sxth	r2, r3
 80104aa:	687b      	ldr	r3, [r7, #4]
 80104ac:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 80104b0:	4b18      	ldr	r3, [pc, #96]	@ (8010514 <tcp_receive+0x270>)
 80104b2:	681b      	ldr	r3, [r3, #0]
 80104b4:	b29a      	uxth	r2, r3
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80104ba:	b29b      	uxth	r3, r3
 80104bc:	1ad3      	subs	r3, r2, r3
 80104be:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 80104c0:	687b      	ldr	r3, [r7, #4]
 80104c2:	2200      	movs	r2, #0
 80104c4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 80104c8:	4b12      	ldr	r3, [pc, #72]	@ (8010514 <tcp_receive+0x270>)
 80104ca:	681a      	ldr	r2, [r3, #0]
 80104cc:	687b      	ldr	r3, [r7, #4]
 80104ce:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 80104d0:	687b      	ldr	r3, [r7, #4]
 80104d2:	7d1b      	ldrb	r3, [r3, #20]
 80104d4:	2b03      	cmp	r3, #3
 80104d6:	f240 8097 	bls.w	8010608 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 80104da:	687b      	ldr	r3, [r7, #4]
 80104dc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 80104e6:	429a      	cmp	r2, r3
 80104e8:	d245      	bcs.n	8010576 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 80104ea:	687b      	ldr	r3, [r7, #4]
 80104ec:	8b5b      	ldrh	r3, [r3, #26]
 80104ee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80104f2:	2b00      	cmp	r3, #0
 80104f4:	d014      	beq.n	8010520 <tcp_receive+0x27c>
 80104f6:	2301      	movs	r3, #1
 80104f8:	e013      	b.n	8010522 <tcp_receive+0x27e>
 80104fa:	bf00      	nop
 80104fc:	08019850 	.word	0x08019850
 8010500:	08019b80 	.word	0x08019b80
 8010504:	0801989c 	.word	0x0801989c
 8010508:	08019b9c 	.word	0x08019b9c
 801050c:	2000ed84 	.word	0x2000ed84
 8010510:	2000ed78 	.word	0x2000ed78
 8010514:	2000ed7c 	.word	0x2000ed7c
 8010518:	2000ed68 	.word	0x2000ed68
 801051c:	2000ed82 	.word	0x2000ed82
 8010520:	2302      	movs	r3, #2
 8010522:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8010526:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 801052a:	b29a      	uxth	r2, r3
 801052c:	687b      	ldr	r3, [r7, #4]
 801052e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010530:	fb12 f303 	smulbb	r3, r2, r3
 8010534:	b29b      	uxth	r3, r3
 8010536:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8010538:	4293      	cmp	r3, r2
 801053a:	bf28      	it	cs
 801053c:	4613      	movcs	r3, r2
 801053e:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8010540:	687b      	ldr	r3, [r7, #4]
 8010542:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8010546:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8010548:	4413      	add	r3, r2
 801054a:	b29a      	uxth	r2, r3
 801054c:	687b      	ldr	r3, [r7, #4]
 801054e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8010552:	429a      	cmp	r2, r3
 8010554:	d309      	bcc.n	801056a <tcp_receive+0x2c6>
 8010556:	687b      	ldr	r3, [r7, #4]
 8010558:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801055c:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801055e:	4413      	add	r3, r2
 8010560:	b29a      	uxth	r2, r3
 8010562:	687b      	ldr	r3, [r7, #4]
 8010564:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8010568:	e04e      	b.n	8010608 <tcp_receive+0x364>
 801056a:	687b      	ldr	r3, [r7, #4]
 801056c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010570:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8010574:	e048      	b.n	8010608 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8010576:	687b      	ldr	r3, [r7, #4]
 8010578:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 801057c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801057e:	4413      	add	r3, r2
 8010580:	b29a      	uxth	r2, r3
 8010582:	687b      	ldr	r3, [r7, #4]
 8010584:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8010588:	429a      	cmp	r2, r3
 801058a:	d309      	bcc.n	80105a0 <tcp_receive+0x2fc>
 801058c:	687b      	ldr	r3, [r7, #4]
 801058e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8010592:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8010594:	4413      	add	r3, r2
 8010596:	b29a      	uxth	r2, r3
 8010598:	687b      	ldr	r3, [r7, #4]
 801059a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 801059e:	e004      	b.n	80105aa <tcp_receive+0x306>
 80105a0:	687b      	ldr	r3, [r7, #4]
 80105a2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80105a6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 80105aa:	687b      	ldr	r3, [r7, #4]
 80105ac:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 80105b0:	687b      	ldr	r3, [r7, #4]
 80105b2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80105b6:	429a      	cmp	r2, r3
 80105b8:	d326      	bcc.n	8010608 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 80105ba:	687b      	ldr	r3, [r7, #4]
 80105bc:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 80105c0:	687b      	ldr	r3, [r7, #4]
 80105c2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80105c6:	1ad3      	subs	r3, r2, r3
 80105c8:	b29a      	uxth	r2, r3
 80105ca:	687b      	ldr	r3, [r7, #4]
 80105cc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80105d6:	687b      	ldr	r3, [r7, #4]
 80105d8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80105da:	4413      	add	r3, r2
 80105dc:	b29a      	uxth	r2, r3
 80105de:	687b      	ldr	r3, [r7, #4]
 80105e0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80105e4:	429a      	cmp	r2, r3
 80105e6:	d30a      	bcc.n	80105fe <tcp_receive+0x35a>
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80105f2:	4413      	add	r3, r2
 80105f4:	b29a      	uxth	r2, r3
 80105f6:	687b      	ldr	r3, [r7, #4]
 80105f8:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 80105fc:	e004      	b.n	8010608 <tcp_receive+0x364>
 80105fe:	687b      	ldr	r3, [r7, #4]
 8010600:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010604:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8010608:	687b      	ldr	r3, [r7, #4]
 801060a:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 801060c:	687b      	ldr	r3, [r7, #4]
 801060e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010610:	4a98      	ldr	r2, [pc, #608]	@ (8010874 <tcp_receive+0x5d0>)
 8010612:	6878      	ldr	r0, [r7, #4]
 8010614:	f7ff fdca 	bl	80101ac <tcp_free_acked_segments>
 8010618:	4602      	mov	r2, r0
 801061a:	687b      	ldr	r3, [r7, #4]
 801061c:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 801061e:	687b      	ldr	r3, [r7, #4]
 8010620:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 8010622:	687b      	ldr	r3, [r7, #4]
 8010624:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010626:	4a94      	ldr	r2, [pc, #592]	@ (8010878 <tcp_receive+0x5d4>)
 8010628:	6878      	ldr	r0, [r7, #4]
 801062a:	f7ff fdbf 	bl	80101ac <tcp_free_acked_segments>
 801062e:	4602      	mov	r2, r0
 8010630:	687b      	ldr	r3, [r7, #4]
 8010632:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8010634:	687b      	ldr	r3, [r7, #4]
 8010636:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010638:	2b00      	cmp	r3, #0
 801063a:	d104      	bne.n	8010646 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 801063c:	687b      	ldr	r3, [r7, #4]
 801063e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010642:	861a      	strh	r2, [r3, #48]	@ 0x30
 8010644:	e002      	b.n	801064c <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8010646:	687b      	ldr	r3, [r7, #4]
 8010648:	2200      	movs	r2, #0
 801064a:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 801064c:	687b      	ldr	r3, [r7, #4]
 801064e:	2200      	movs	r2, #0
 8010650:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8010652:	687b      	ldr	r3, [r7, #4]
 8010654:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010656:	2b00      	cmp	r3, #0
 8010658:	d103      	bne.n	8010662 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 801065a:	687b      	ldr	r3, [r7, #4]
 801065c:	2200      	movs	r2, #0
 801065e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 8010668:	4b84      	ldr	r3, [pc, #528]	@ (801087c <tcp_receive+0x5d8>)
 801066a:	881b      	ldrh	r3, [r3, #0]
 801066c:	4413      	add	r3, r2
 801066e:	b29a      	uxth	r2, r3
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	8b5b      	ldrh	r3, [r3, #26]
 801067a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801067e:	2b00      	cmp	r3, #0
 8010680:	d035      	beq.n	80106ee <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8010682:	687b      	ldr	r3, [r7, #4]
 8010684:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010686:	2b00      	cmp	r3, #0
 8010688:	d118      	bne.n	80106bc <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 801068a:	687b      	ldr	r3, [r7, #4]
 801068c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801068e:	2b00      	cmp	r3, #0
 8010690:	d00c      	beq.n	80106ac <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8010692:	687b      	ldr	r3, [r7, #4]
 8010694:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8010696:	687b      	ldr	r3, [r7, #4]
 8010698:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801069a:	68db      	ldr	r3, [r3, #12]
 801069c:	685b      	ldr	r3, [r3, #4]
 801069e:	4618      	mov	r0, r3
 80106a0:	f7fa fe35 	bl	800b30e <lwip_htonl>
 80106a4:	4603      	mov	r3, r0
 80106a6:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 80106a8:	2b00      	cmp	r3, #0
 80106aa:	dc20      	bgt.n	80106ee <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 80106ac:	687b      	ldr	r3, [r7, #4]
 80106ae:	8b5b      	ldrh	r3, [r3, #26]
 80106b0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80106b4:	b29a      	uxth	r2, r3
 80106b6:	687b      	ldr	r3, [r7, #4]
 80106b8:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80106ba:	e018      	b.n	80106ee <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 80106bc:	687b      	ldr	r3, [r7, #4]
 80106be:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 80106c0:	687b      	ldr	r3, [r7, #4]
 80106c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80106c4:	68db      	ldr	r3, [r3, #12]
 80106c6:	685b      	ldr	r3, [r3, #4]
 80106c8:	4618      	mov	r0, r3
 80106ca:	f7fa fe20 	bl	800b30e <lwip_htonl>
 80106ce:	4603      	mov	r3, r0
 80106d0:	1ae3      	subs	r3, r4, r3
 80106d2:	2b00      	cmp	r3, #0
 80106d4:	dc0b      	bgt.n	80106ee <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 80106d6:	687b      	ldr	r3, [r7, #4]
 80106d8:	8b5b      	ldrh	r3, [r3, #26]
 80106da:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80106de:	b29a      	uxth	r2, r3
 80106e0:	687b      	ldr	r3, [r7, #4]
 80106e2:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80106e4:	e003      	b.n	80106ee <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 80106e6:	6878      	ldr	r0, [r7, #4]
 80106e8:	f002 fbc8 	bl	8012e7c <tcp_send_empty_ack>
 80106ec:	e000      	b.n	80106f0 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80106ee:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 80106f0:	687b      	ldr	r3, [r7, #4]
 80106f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80106f4:	2b00      	cmp	r3, #0
 80106f6:	d05b      	beq.n	80107b0 <tcp_receive+0x50c>
 80106f8:	687b      	ldr	r3, [r7, #4]
 80106fa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80106fc:	4b60      	ldr	r3, [pc, #384]	@ (8010880 <tcp_receive+0x5dc>)
 80106fe:	681b      	ldr	r3, [r3, #0]
 8010700:	1ad3      	subs	r3, r2, r3
 8010702:	2b00      	cmp	r3, #0
 8010704:	da54      	bge.n	80107b0 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8010706:	4b5f      	ldr	r3, [pc, #380]	@ (8010884 <tcp_receive+0x5e0>)
 8010708:	681b      	ldr	r3, [r3, #0]
 801070a:	b29a      	uxth	r2, r3
 801070c:	687b      	ldr	r3, [r7, #4]
 801070e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010710:	b29b      	uxth	r3, r3
 8010712:	1ad3      	subs	r3, r2, r3
 8010714:	b29b      	uxth	r3, r3
 8010716:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 801071a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 801071e:	687b      	ldr	r3, [r7, #4]
 8010720:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8010724:	10db      	asrs	r3, r3, #3
 8010726:	b21b      	sxth	r3, r3
 8010728:	b29b      	uxth	r3, r3
 801072a:	1ad3      	subs	r3, r2, r3
 801072c:	b29b      	uxth	r3, r3
 801072e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8010732:	687b      	ldr	r3, [r7, #4]
 8010734:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8010738:	b29a      	uxth	r2, r3
 801073a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 801073e:	4413      	add	r3, r2
 8010740:	b29b      	uxth	r3, r3
 8010742:	b21a      	sxth	r2, r3
 8010744:	687b      	ldr	r3, [r7, #4]
 8010746:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 8010748:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 801074c:	2b00      	cmp	r3, #0
 801074e:	da05      	bge.n	801075c <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8010750:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8010754:	425b      	negs	r3, r3
 8010756:	b29b      	uxth	r3, r3
 8010758:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 801075c:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8010760:	687b      	ldr	r3, [r7, #4]
 8010762:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8010766:	109b      	asrs	r3, r3, #2
 8010768:	b21b      	sxth	r3, r3
 801076a:	b29b      	uxth	r3, r3
 801076c:	1ad3      	subs	r3, r2, r3
 801076e:	b29b      	uxth	r3, r3
 8010770:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8010774:	687b      	ldr	r3, [r7, #4]
 8010776:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 801077a:	b29a      	uxth	r2, r3
 801077c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8010780:	4413      	add	r3, r2
 8010782:	b29b      	uxth	r3, r3
 8010784:	b21a      	sxth	r2, r3
 8010786:	687b      	ldr	r3, [r7, #4]
 8010788:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801078a:	687b      	ldr	r3, [r7, #4]
 801078c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8010790:	10db      	asrs	r3, r3, #3
 8010792:	b21b      	sxth	r3, r3
 8010794:	b29a      	uxth	r2, r3
 8010796:	687b      	ldr	r3, [r7, #4]
 8010798:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 801079c:	b29b      	uxth	r3, r3
 801079e:	4413      	add	r3, r2
 80107a0:	b29b      	uxth	r3, r3
 80107a2:	b21a      	sxth	r2, r3
 80107a4:	687b      	ldr	r3, [r7, #4]
 80107a6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 80107aa:	687b      	ldr	r3, [r7, #4]
 80107ac:	2200      	movs	r2, #0
 80107ae:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 80107b0:	4b35      	ldr	r3, [pc, #212]	@ (8010888 <tcp_receive+0x5e4>)
 80107b2:	881b      	ldrh	r3, [r3, #0]
 80107b4:	2b00      	cmp	r3, #0
 80107b6:	f000 84df 	beq.w	8011178 <tcp_receive+0xed4>
 80107ba:	687b      	ldr	r3, [r7, #4]
 80107bc:	7d1b      	ldrb	r3, [r3, #20]
 80107be:	2b06      	cmp	r3, #6
 80107c0:	f200 84da 	bhi.w	8011178 <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80107c4:	687b      	ldr	r3, [r7, #4]
 80107c6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80107c8:	4b30      	ldr	r3, [pc, #192]	@ (801088c <tcp_receive+0x5e8>)
 80107ca:	681b      	ldr	r3, [r3, #0]
 80107cc:	1ad3      	subs	r3, r2, r3
 80107ce:	3b01      	subs	r3, #1
 80107d0:	2b00      	cmp	r3, #0
 80107d2:	f2c0 808f 	blt.w	80108f4 <tcp_receive+0x650>
 80107d6:	687b      	ldr	r3, [r7, #4]
 80107d8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80107da:	4b2b      	ldr	r3, [pc, #172]	@ (8010888 <tcp_receive+0x5e4>)
 80107dc:	881b      	ldrh	r3, [r3, #0]
 80107de:	4619      	mov	r1, r3
 80107e0:	4b2a      	ldr	r3, [pc, #168]	@ (801088c <tcp_receive+0x5e8>)
 80107e2:	681b      	ldr	r3, [r3, #0]
 80107e4:	440b      	add	r3, r1
 80107e6:	1ad3      	subs	r3, r2, r3
 80107e8:	3301      	adds	r3, #1
 80107ea:	2b00      	cmp	r3, #0
 80107ec:	f300 8082 	bgt.w	80108f4 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 80107f0:	4b27      	ldr	r3, [pc, #156]	@ (8010890 <tcp_receive+0x5ec>)
 80107f2:	685b      	ldr	r3, [r3, #4]
 80107f4:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 80107f6:	687b      	ldr	r3, [r7, #4]
 80107f8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80107fa:	4b24      	ldr	r3, [pc, #144]	@ (801088c <tcp_receive+0x5e8>)
 80107fc:	681b      	ldr	r3, [r3, #0]
 80107fe:	1ad3      	subs	r3, r2, r3
 8010800:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8010802:	4b23      	ldr	r3, [pc, #140]	@ (8010890 <tcp_receive+0x5ec>)
 8010804:	685b      	ldr	r3, [r3, #4]
 8010806:	2b00      	cmp	r3, #0
 8010808:	d106      	bne.n	8010818 <tcp_receive+0x574>
 801080a:	4b22      	ldr	r3, [pc, #136]	@ (8010894 <tcp_receive+0x5f0>)
 801080c:	f240 5294 	movw	r2, #1428	@ 0x594
 8010810:	4921      	ldr	r1, [pc, #132]	@ (8010898 <tcp_receive+0x5f4>)
 8010812:	4822      	ldr	r0, [pc, #136]	@ (801089c <tcp_receive+0x5f8>)
 8010814:	f005 fec4 	bl	80165a0 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8010818:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801081a:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801081e:	4293      	cmp	r3, r2
 8010820:	d906      	bls.n	8010830 <tcp_receive+0x58c>
 8010822:	4b1c      	ldr	r3, [pc, #112]	@ (8010894 <tcp_receive+0x5f0>)
 8010824:	f240 5295 	movw	r2, #1429	@ 0x595
 8010828:	491d      	ldr	r1, [pc, #116]	@ (80108a0 <tcp_receive+0x5fc>)
 801082a:	481c      	ldr	r0, [pc, #112]	@ (801089c <tcp_receive+0x5f8>)
 801082c:	f005 feb8 	bl	80165a0 <iprintf>
      off = (u16_t)off32;
 8010830:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010832:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8010836:	4b16      	ldr	r3, [pc, #88]	@ (8010890 <tcp_receive+0x5ec>)
 8010838:	685b      	ldr	r3, [r3, #4]
 801083a:	891b      	ldrh	r3, [r3, #8]
 801083c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8010840:	429a      	cmp	r2, r3
 8010842:	d906      	bls.n	8010852 <tcp_receive+0x5ae>
 8010844:	4b13      	ldr	r3, [pc, #76]	@ (8010894 <tcp_receive+0x5f0>)
 8010846:	f240 5297 	movw	r2, #1431	@ 0x597
 801084a:	4916      	ldr	r1, [pc, #88]	@ (80108a4 <tcp_receive+0x600>)
 801084c:	4813      	ldr	r0, [pc, #76]	@ (801089c <tcp_receive+0x5f8>)
 801084e:	f005 fea7 	bl	80165a0 <iprintf>
      inseg.len -= off;
 8010852:	4b0f      	ldr	r3, [pc, #60]	@ (8010890 <tcp_receive+0x5ec>)
 8010854:	891a      	ldrh	r2, [r3, #8]
 8010856:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801085a:	1ad3      	subs	r3, r2, r3
 801085c:	b29a      	uxth	r2, r3
 801085e:	4b0c      	ldr	r3, [pc, #48]	@ (8010890 <tcp_receive+0x5ec>)
 8010860:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8010862:	4b0b      	ldr	r3, [pc, #44]	@ (8010890 <tcp_receive+0x5ec>)
 8010864:	685b      	ldr	r3, [r3, #4]
 8010866:	891a      	ldrh	r2, [r3, #8]
 8010868:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801086c:	1ad3      	subs	r3, r2, r3
 801086e:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 8010870:	e02a      	b.n	80108c8 <tcp_receive+0x624>
 8010872:	bf00      	nop
 8010874:	08019bb8 	.word	0x08019bb8
 8010878:	08019bc0 	.word	0x08019bc0
 801087c:	2000ed80 	.word	0x2000ed80
 8010880:	2000ed7c 	.word	0x2000ed7c
 8010884:	2000ed40 	.word	0x2000ed40
 8010888:	2000ed82 	.word	0x2000ed82
 801088c:	2000ed78 	.word	0x2000ed78
 8010890:	2000ed58 	.word	0x2000ed58
 8010894:	08019850 	.word	0x08019850
 8010898:	08019bc8 	.word	0x08019bc8
 801089c:	0801989c 	.word	0x0801989c
 80108a0:	08019bd8 	.word	0x08019bd8
 80108a4:	08019be8 	.word	0x08019be8
        off -= p->len;
 80108a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80108aa:	895b      	ldrh	r3, [r3, #10]
 80108ac:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80108b0:	1ad3      	subs	r3, r2, r3
 80108b2:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 80108b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80108b8:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80108ba:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 80108bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80108be:	2200      	movs	r2, #0
 80108c0:	815a      	strh	r2, [r3, #10]
        p = p->next;
 80108c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80108c4:	681b      	ldr	r3, [r3, #0]
 80108c6:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 80108c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80108ca:	895b      	ldrh	r3, [r3, #10]
 80108cc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80108d0:	429a      	cmp	r2, r3
 80108d2:	d8e9      	bhi.n	80108a8 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 80108d4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80108d8:	4619      	mov	r1, r3
 80108da:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80108dc:	f7fc f86e 	bl	800c9bc <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 80108e0:	687b      	ldr	r3, [r7, #4]
 80108e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80108e4:	4a90      	ldr	r2, [pc, #576]	@ (8010b28 <tcp_receive+0x884>)
 80108e6:	6013      	str	r3, [r2, #0]
 80108e8:	4b90      	ldr	r3, [pc, #576]	@ (8010b2c <tcp_receive+0x888>)
 80108ea:	68db      	ldr	r3, [r3, #12]
 80108ec:	4a8e      	ldr	r2, [pc, #568]	@ (8010b28 <tcp_receive+0x884>)
 80108ee:	6812      	ldr	r2, [r2, #0]
 80108f0:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80108f2:	e00d      	b.n	8010910 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 80108f4:	4b8c      	ldr	r3, [pc, #560]	@ (8010b28 <tcp_receive+0x884>)
 80108f6:	681a      	ldr	r2, [r3, #0]
 80108f8:	687b      	ldr	r3, [r7, #4]
 80108fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80108fc:	1ad3      	subs	r3, r2, r3
 80108fe:	2b00      	cmp	r3, #0
 8010900:	da06      	bge.n	8010910 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8010902:	687b      	ldr	r3, [r7, #4]
 8010904:	8b5b      	ldrh	r3, [r3, #26]
 8010906:	f043 0302 	orr.w	r3, r3, #2
 801090a:	b29a      	uxth	r2, r3
 801090c:	687b      	ldr	r3, [r7, #4]
 801090e:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8010910:	4b85      	ldr	r3, [pc, #532]	@ (8010b28 <tcp_receive+0x884>)
 8010912:	681a      	ldr	r2, [r3, #0]
 8010914:	687b      	ldr	r3, [r7, #4]
 8010916:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010918:	1ad3      	subs	r3, r2, r3
 801091a:	2b00      	cmp	r3, #0
 801091c:	f2c0 8427 	blt.w	801116e <tcp_receive+0xeca>
 8010920:	4b81      	ldr	r3, [pc, #516]	@ (8010b28 <tcp_receive+0x884>)
 8010922:	681a      	ldr	r2, [r3, #0]
 8010924:	687b      	ldr	r3, [r7, #4]
 8010926:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010928:	6879      	ldr	r1, [r7, #4]
 801092a:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801092c:	440b      	add	r3, r1
 801092e:	1ad3      	subs	r3, r2, r3
 8010930:	3301      	adds	r3, #1
 8010932:	2b00      	cmp	r3, #0
 8010934:	f300 841b 	bgt.w	801116e <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8010938:	687b      	ldr	r3, [r7, #4]
 801093a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801093c:	4b7a      	ldr	r3, [pc, #488]	@ (8010b28 <tcp_receive+0x884>)
 801093e:	681b      	ldr	r3, [r3, #0]
 8010940:	429a      	cmp	r2, r3
 8010942:	f040 8298 	bne.w	8010e76 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8010946:	4b79      	ldr	r3, [pc, #484]	@ (8010b2c <tcp_receive+0x888>)
 8010948:	891c      	ldrh	r4, [r3, #8]
 801094a:	4b78      	ldr	r3, [pc, #480]	@ (8010b2c <tcp_receive+0x888>)
 801094c:	68db      	ldr	r3, [r3, #12]
 801094e:	899b      	ldrh	r3, [r3, #12]
 8010950:	b29b      	uxth	r3, r3
 8010952:	4618      	mov	r0, r3
 8010954:	f7fa fcc6 	bl	800b2e4 <lwip_htons>
 8010958:	4603      	mov	r3, r0
 801095a:	b2db      	uxtb	r3, r3
 801095c:	f003 0303 	and.w	r3, r3, #3
 8010960:	2b00      	cmp	r3, #0
 8010962:	d001      	beq.n	8010968 <tcp_receive+0x6c4>
 8010964:	2301      	movs	r3, #1
 8010966:	e000      	b.n	801096a <tcp_receive+0x6c6>
 8010968:	2300      	movs	r3, #0
 801096a:	4423      	add	r3, r4
 801096c:	b29a      	uxth	r2, r3
 801096e:	4b70      	ldr	r3, [pc, #448]	@ (8010b30 <tcp_receive+0x88c>)
 8010970:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8010972:	687b      	ldr	r3, [r7, #4]
 8010974:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8010976:	4b6e      	ldr	r3, [pc, #440]	@ (8010b30 <tcp_receive+0x88c>)
 8010978:	881b      	ldrh	r3, [r3, #0]
 801097a:	429a      	cmp	r2, r3
 801097c:	d274      	bcs.n	8010a68 <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801097e:	4b6b      	ldr	r3, [pc, #428]	@ (8010b2c <tcp_receive+0x888>)
 8010980:	68db      	ldr	r3, [r3, #12]
 8010982:	899b      	ldrh	r3, [r3, #12]
 8010984:	b29b      	uxth	r3, r3
 8010986:	4618      	mov	r0, r3
 8010988:	f7fa fcac 	bl	800b2e4 <lwip_htons>
 801098c:	4603      	mov	r3, r0
 801098e:	b2db      	uxtb	r3, r3
 8010990:	f003 0301 	and.w	r3, r3, #1
 8010994:	2b00      	cmp	r3, #0
 8010996:	d01e      	beq.n	80109d6 <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8010998:	4b64      	ldr	r3, [pc, #400]	@ (8010b2c <tcp_receive+0x888>)
 801099a:	68db      	ldr	r3, [r3, #12]
 801099c:	899b      	ldrh	r3, [r3, #12]
 801099e:	b29b      	uxth	r3, r3
 80109a0:	b21b      	sxth	r3, r3
 80109a2:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80109a6:	b21c      	sxth	r4, r3
 80109a8:	4b60      	ldr	r3, [pc, #384]	@ (8010b2c <tcp_receive+0x888>)
 80109aa:	68db      	ldr	r3, [r3, #12]
 80109ac:	899b      	ldrh	r3, [r3, #12]
 80109ae:	b29b      	uxth	r3, r3
 80109b0:	4618      	mov	r0, r3
 80109b2:	f7fa fc97 	bl	800b2e4 <lwip_htons>
 80109b6:	4603      	mov	r3, r0
 80109b8:	b2db      	uxtb	r3, r3
 80109ba:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 80109be:	b29b      	uxth	r3, r3
 80109c0:	4618      	mov	r0, r3
 80109c2:	f7fa fc8f 	bl	800b2e4 <lwip_htons>
 80109c6:	4603      	mov	r3, r0
 80109c8:	b21b      	sxth	r3, r3
 80109ca:	4323      	orrs	r3, r4
 80109cc:	b21a      	sxth	r2, r3
 80109ce:	4b57      	ldr	r3, [pc, #348]	@ (8010b2c <tcp_receive+0x888>)
 80109d0:	68db      	ldr	r3, [r3, #12]
 80109d2:	b292      	uxth	r2, r2
 80109d4:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 80109d6:	687b      	ldr	r3, [r7, #4]
 80109d8:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80109da:	4b54      	ldr	r3, [pc, #336]	@ (8010b2c <tcp_receive+0x888>)
 80109dc:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80109de:	4b53      	ldr	r3, [pc, #332]	@ (8010b2c <tcp_receive+0x888>)
 80109e0:	68db      	ldr	r3, [r3, #12]
 80109e2:	899b      	ldrh	r3, [r3, #12]
 80109e4:	b29b      	uxth	r3, r3
 80109e6:	4618      	mov	r0, r3
 80109e8:	f7fa fc7c 	bl	800b2e4 <lwip_htons>
 80109ec:	4603      	mov	r3, r0
 80109ee:	b2db      	uxtb	r3, r3
 80109f0:	f003 0302 	and.w	r3, r3, #2
 80109f4:	2b00      	cmp	r3, #0
 80109f6:	d005      	beq.n	8010a04 <tcp_receive+0x760>
            inseg.len -= 1;
 80109f8:	4b4c      	ldr	r3, [pc, #304]	@ (8010b2c <tcp_receive+0x888>)
 80109fa:	891b      	ldrh	r3, [r3, #8]
 80109fc:	3b01      	subs	r3, #1
 80109fe:	b29a      	uxth	r2, r3
 8010a00:	4b4a      	ldr	r3, [pc, #296]	@ (8010b2c <tcp_receive+0x888>)
 8010a02:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8010a04:	4b49      	ldr	r3, [pc, #292]	@ (8010b2c <tcp_receive+0x888>)
 8010a06:	685b      	ldr	r3, [r3, #4]
 8010a08:	4a48      	ldr	r2, [pc, #288]	@ (8010b2c <tcp_receive+0x888>)
 8010a0a:	8912      	ldrh	r2, [r2, #8]
 8010a0c:	4611      	mov	r1, r2
 8010a0e:	4618      	mov	r0, r3
 8010a10:	f7fb fed4 	bl	800c7bc <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8010a14:	4b45      	ldr	r3, [pc, #276]	@ (8010b2c <tcp_receive+0x888>)
 8010a16:	891c      	ldrh	r4, [r3, #8]
 8010a18:	4b44      	ldr	r3, [pc, #272]	@ (8010b2c <tcp_receive+0x888>)
 8010a1a:	68db      	ldr	r3, [r3, #12]
 8010a1c:	899b      	ldrh	r3, [r3, #12]
 8010a1e:	b29b      	uxth	r3, r3
 8010a20:	4618      	mov	r0, r3
 8010a22:	f7fa fc5f 	bl	800b2e4 <lwip_htons>
 8010a26:	4603      	mov	r3, r0
 8010a28:	b2db      	uxtb	r3, r3
 8010a2a:	f003 0303 	and.w	r3, r3, #3
 8010a2e:	2b00      	cmp	r3, #0
 8010a30:	d001      	beq.n	8010a36 <tcp_receive+0x792>
 8010a32:	2301      	movs	r3, #1
 8010a34:	e000      	b.n	8010a38 <tcp_receive+0x794>
 8010a36:	2300      	movs	r3, #0
 8010a38:	4423      	add	r3, r4
 8010a3a:	b29a      	uxth	r2, r3
 8010a3c:	4b3c      	ldr	r3, [pc, #240]	@ (8010b30 <tcp_receive+0x88c>)
 8010a3e:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8010a40:	4b3b      	ldr	r3, [pc, #236]	@ (8010b30 <tcp_receive+0x88c>)
 8010a42:	881b      	ldrh	r3, [r3, #0]
 8010a44:	461a      	mov	r2, r3
 8010a46:	4b38      	ldr	r3, [pc, #224]	@ (8010b28 <tcp_receive+0x884>)
 8010a48:	681b      	ldr	r3, [r3, #0]
 8010a4a:	441a      	add	r2, r3
 8010a4c:	687b      	ldr	r3, [r7, #4]
 8010a4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010a50:	6879      	ldr	r1, [r7, #4]
 8010a52:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8010a54:	440b      	add	r3, r1
 8010a56:	429a      	cmp	r2, r3
 8010a58:	d006      	beq.n	8010a68 <tcp_receive+0x7c4>
 8010a5a:	4b36      	ldr	r3, [pc, #216]	@ (8010b34 <tcp_receive+0x890>)
 8010a5c:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 8010a60:	4935      	ldr	r1, [pc, #212]	@ (8010b38 <tcp_receive+0x894>)
 8010a62:	4836      	ldr	r0, [pc, #216]	@ (8010b3c <tcp_receive+0x898>)
 8010a64:	f005 fd9c 	bl	80165a0 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8010a68:	687b      	ldr	r3, [r7, #4]
 8010a6a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010a6c:	2b00      	cmp	r3, #0
 8010a6e:	f000 80e6 	beq.w	8010c3e <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8010a72:	4b2e      	ldr	r3, [pc, #184]	@ (8010b2c <tcp_receive+0x888>)
 8010a74:	68db      	ldr	r3, [r3, #12]
 8010a76:	899b      	ldrh	r3, [r3, #12]
 8010a78:	b29b      	uxth	r3, r3
 8010a7a:	4618      	mov	r0, r3
 8010a7c:	f7fa fc32 	bl	800b2e4 <lwip_htons>
 8010a80:	4603      	mov	r3, r0
 8010a82:	b2db      	uxtb	r3, r3
 8010a84:	f003 0301 	and.w	r3, r3, #1
 8010a88:	2b00      	cmp	r3, #0
 8010a8a:	d010      	beq.n	8010aae <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8010a8c:	e00a      	b.n	8010aa4 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8010a8e:	687b      	ldr	r3, [r7, #4]
 8010a90:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010a92:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8010a94:	687b      	ldr	r3, [r7, #4]
 8010a96:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010a98:	681a      	ldr	r2, [r3, #0]
 8010a9a:	687b      	ldr	r3, [r7, #4]
 8010a9c:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 8010a9e:	68f8      	ldr	r0, [r7, #12]
 8010aa0:	f7fd fcbd 	bl	800e41e <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8010aa4:	687b      	ldr	r3, [r7, #4]
 8010aa6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010aa8:	2b00      	cmp	r3, #0
 8010aaa:	d1f0      	bne.n	8010a8e <tcp_receive+0x7ea>
 8010aac:	e0c7      	b.n	8010c3e <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8010aae:	687b      	ldr	r3, [r7, #4]
 8010ab0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010ab2:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8010ab4:	e051      	b.n	8010b5a <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8010ab6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010ab8:	68db      	ldr	r3, [r3, #12]
 8010aba:	899b      	ldrh	r3, [r3, #12]
 8010abc:	b29b      	uxth	r3, r3
 8010abe:	4618      	mov	r0, r3
 8010ac0:	f7fa fc10 	bl	800b2e4 <lwip_htons>
 8010ac4:	4603      	mov	r3, r0
 8010ac6:	b2db      	uxtb	r3, r3
 8010ac8:	f003 0301 	and.w	r3, r3, #1
 8010acc:	2b00      	cmp	r3, #0
 8010ace:	d03c      	beq.n	8010b4a <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8010ad0:	4b16      	ldr	r3, [pc, #88]	@ (8010b2c <tcp_receive+0x888>)
 8010ad2:	68db      	ldr	r3, [r3, #12]
 8010ad4:	899b      	ldrh	r3, [r3, #12]
 8010ad6:	b29b      	uxth	r3, r3
 8010ad8:	4618      	mov	r0, r3
 8010ada:	f7fa fc03 	bl	800b2e4 <lwip_htons>
 8010ade:	4603      	mov	r3, r0
 8010ae0:	b2db      	uxtb	r3, r3
 8010ae2:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8010ae6:	2b00      	cmp	r3, #0
 8010ae8:	d12f      	bne.n	8010b4a <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8010aea:	4b10      	ldr	r3, [pc, #64]	@ (8010b2c <tcp_receive+0x888>)
 8010aec:	68db      	ldr	r3, [r3, #12]
 8010aee:	899b      	ldrh	r3, [r3, #12]
 8010af0:	b29c      	uxth	r4, r3
 8010af2:	2001      	movs	r0, #1
 8010af4:	f7fa fbf6 	bl	800b2e4 <lwip_htons>
 8010af8:	4603      	mov	r3, r0
 8010afa:	461a      	mov	r2, r3
 8010afc:	4b0b      	ldr	r3, [pc, #44]	@ (8010b2c <tcp_receive+0x888>)
 8010afe:	68db      	ldr	r3, [r3, #12]
 8010b00:	4322      	orrs	r2, r4
 8010b02:	b292      	uxth	r2, r2
 8010b04:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8010b06:	4b09      	ldr	r3, [pc, #36]	@ (8010b2c <tcp_receive+0x888>)
 8010b08:	891c      	ldrh	r4, [r3, #8]
 8010b0a:	4b08      	ldr	r3, [pc, #32]	@ (8010b2c <tcp_receive+0x888>)
 8010b0c:	68db      	ldr	r3, [r3, #12]
 8010b0e:	899b      	ldrh	r3, [r3, #12]
 8010b10:	b29b      	uxth	r3, r3
 8010b12:	4618      	mov	r0, r3
 8010b14:	f7fa fbe6 	bl	800b2e4 <lwip_htons>
 8010b18:	4603      	mov	r3, r0
 8010b1a:	b2db      	uxtb	r3, r3
 8010b1c:	f003 0303 	and.w	r3, r3, #3
 8010b20:	2b00      	cmp	r3, #0
 8010b22:	d00d      	beq.n	8010b40 <tcp_receive+0x89c>
 8010b24:	2301      	movs	r3, #1
 8010b26:	e00c      	b.n	8010b42 <tcp_receive+0x89e>
 8010b28:	2000ed78 	.word	0x2000ed78
 8010b2c:	2000ed58 	.word	0x2000ed58
 8010b30:	2000ed82 	.word	0x2000ed82
 8010b34:	08019850 	.word	0x08019850
 8010b38:	08019bf8 	.word	0x08019bf8
 8010b3c:	0801989c 	.word	0x0801989c
 8010b40:	2300      	movs	r3, #0
 8010b42:	4423      	add	r3, r4
 8010b44:	b29a      	uxth	r2, r3
 8010b46:	4b98      	ldr	r3, [pc, #608]	@ (8010da8 <tcp_receive+0xb04>)
 8010b48:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8010b4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010b4c:	613b      	str	r3, [r7, #16]
              next = next->next;
 8010b4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010b50:	681b      	ldr	r3, [r3, #0]
 8010b52:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 8010b54:	6938      	ldr	r0, [r7, #16]
 8010b56:	f7fd fc62 	bl	800e41e <tcp_seg_free>
            while (next &&
 8010b5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010b5c:	2b00      	cmp	r3, #0
 8010b5e:	d00e      	beq.n	8010b7e <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8010b60:	4b91      	ldr	r3, [pc, #580]	@ (8010da8 <tcp_receive+0xb04>)
 8010b62:	881b      	ldrh	r3, [r3, #0]
 8010b64:	461a      	mov	r2, r3
 8010b66:	4b91      	ldr	r3, [pc, #580]	@ (8010dac <tcp_receive+0xb08>)
 8010b68:	681b      	ldr	r3, [r3, #0]
 8010b6a:	441a      	add	r2, r3
 8010b6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010b6e:	68db      	ldr	r3, [r3, #12]
 8010b70:	685b      	ldr	r3, [r3, #4]
 8010b72:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8010b74:	8909      	ldrh	r1, [r1, #8]
 8010b76:	440b      	add	r3, r1
 8010b78:	1ad3      	subs	r3, r2, r3
            while (next &&
 8010b7a:	2b00      	cmp	r3, #0
 8010b7c:	da9b      	bge.n	8010ab6 <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8010b7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010b80:	2b00      	cmp	r3, #0
 8010b82:	d059      	beq.n	8010c38 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8010b84:	4b88      	ldr	r3, [pc, #544]	@ (8010da8 <tcp_receive+0xb04>)
 8010b86:	881b      	ldrh	r3, [r3, #0]
 8010b88:	461a      	mov	r2, r3
 8010b8a:	4b88      	ldr	r3, [pc, #544]	@ (8010dac <tcp_receive+0xb08>)
 8010b8c:	681b      	ldr	r3, [r3, #0]
 8010b8e:	441a      	add	r2, r3
 8010b90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010b92:	68db      	ldr	r3, [r3, #12]
 8010b94:	685b      	ldr	r3, [r3, #4]
 8010b96:	1ad3      	subs	r3, r2, r3
            if (next &&
 8010b98:	2b00      	cmp	r3, #0
 8010b9a:	dd4d      	ble.n	8010c38 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8010b9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010b9e:	68db      	ldr	r3, [r3, #12]
 8010ba0:	685b      	ldr	r3, [r3, #4]
 8010ba2:	b29a      	uxth	r2, r3
 8010ba4:	4b81      	ldr	r3, [pc, #516]	@ (8010dac <tcp_receive+0xb08>)
 8010ba6:	681b      	ldr	r3, [r3, #0]
 8010ba8:	b29b      	uxth	r3, r3
 8010baa:	1ad3      	subs	r3, r2, r3
 8010bac:	b29a      	uxth	r2, r3
 8010bae:	4b80      	ldr	r3, [pc, #512]	@ (8010db0 <tcp_receive+0xb0c>)
 8010bb0:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8010bb2:	4b7f      	ldr	r3, [pc, #508]	@ (8010db0 <tcp_receive+0xb0c>)
 8010bb4:	68db      	ldr	r3, [r3, #12]
 8010bb6:	899b      	ldrh	r3, [r3, #12]
 8010bb8:	b29b      	uxth	r3, r3
 8010bba:	4618      	mov	r0, r3
 8010bbc:	f7fa fb92 	bl	800b2e4 <lwip_htons>
 8010bc0:	4603      	mov	r3, r0
 8010bc2:	b2db      	uxtb	r3, r3
 8010bc4:	f003 0302 	and.w	r3, r3, #2
 8010bc8:	2b00      	cmp	r3, #0
 8010bca:	d005      	beq.n	8010bd8 <tcp_receive+0x934>
                inseg.len -= 1;
 8010bcc:	4b78      	ldr	r3, [pc, #480]	@ (8010db0 <tcp_receive+0xb0c>)
 8010bce:	891b      	ldrh	r3, [r3, #8]
 8010bd0:	3b01      	subs	r3, #1
 8010bd2:	b29a      	uxth	r2, r3
 8010bd4:	4b76      	ldr	r3, [pc, #472]	@ (8010db0 <tcp_receive+0xb0c>)
 8010bd6:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8010bd8:	4b75      	ldr	r3, [pc, #468]	@ (8010db0 <tcp_receive+0xb0c>)
 8010bda:	685b      	ldr	r3, [r3, #4]
 8010bdc:	4a74      	ldr	r2, [pc, #464]	@ (8010db0 <tcp_receive+0xb0c>)
 8010bde:	8912      	ldrh	r2, [r2, #8]
 8010be0:	4611      	mov	r1, r2
 8010be2:	4618      	mov	r0, r3
 8010be4:	f7fb fdea 	bl	800c7bc <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8010be8:	4b71      	ldr	r3, [pc, #452]	@ (8010db0 <tcp_receive+0xb0c>)
 8010bea:	891c      	ldrh	r4, [r3, #8]
 8010bec:	4b70      	ldr	r3, [pc, #448]	@ (8010db0 <tcp_receive+0xb0c>)
 8010bee:	68db      	ldr	r3, [r3, #12]
 8010bf0:	899b      	ldrh	r3, [r3, #12]
 8010bf2:	b29b      	uxth	r3, r3
 8010bf4:	4618      	mov	r0, r3
 8010bf6:	f7fa fb75 	bl	800b2e4 <lwip_htons>
 8010bfa:	4603      	mov	r3, r0
 8010bfc:	b2db      	uxtb	r3, r3
 8010bfe:	f003 0303 	and.w	r3, r3, #3
 8010c02:	2b00      	cmp	r3, #0
 8010c04:	d001      	beq.n	8010c0a <tcp_receive+0x966>
 8010c06:	2301      	movs	r3, #1
 8010c08:	e000      	b.n	8010c0c <tcp_receive+0x968>
 8010c0a:	2300      	movs	r3, #0
 8010c0c:	4423      	add	r3, r4
 8010c0e:	b29a      	uxth	r2, r3
 8010c10:	4b65      	ldr	r3, [pc, #404]	@ (8010da8 <tcp_receive+0xb04>)
 8010c12:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8010c14:	4b64      	ldr	r3, [pc, #400]	@ (8010da8 <tcp_receive+0xb04>)
 8010c16:	881b      	ldrh	r3, [r3, #0]
 8010c18:	461a      	mov	r2, r3
 8010c1a:	4b64      	ldr	r3, [pc, #400]	@ (8010dac <tcp_receive+0xb08>)
 8010c1c:	681b      	ldr	r3, [r3, #0]
 8010c1e:	441a      	add	r2, r3
 8010c20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010c22:	68db      	ldr	r3, [r3, #12]
 8010c24:	685b      	ldr	r3, [r3, #4]
 8010c26:	429a      	cmp	r2, r3
 8010c28:	d006      	beq.n	8010c38 <tcp_receive+0x994>
 8010c2a:	4b62      	ldr	r3, [pc, #392]	@ (8010db4 <tcp_receive+0xb10>)
 8010c2c:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 8010c30:	4961      	ldr	r1, [pc, #388]	@ (8010db8 <tcp_receive+0xb14>)
 8010c32:	4862      	ldr	r0, [pc, #392]	@ (8010dbc <tcp_receive+0xb18>)
 8010c34:	f005 fcb4 	bl	80165a0 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8010c38:	687b      	ldr	r3, [r7, #4]
 8010c3a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8010c3c:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8010c3e:	4b5a      	ldr	r3, [pc, #360]	@ (8010da8 <tcp_receive+0xb04>)
 8010c40:	881b      	ldrh	r3, [r3, #0]
 8010c42:	461a      	mov	r2, r3
 8010c44:	4b59      	ldr	r3, [pc, #356]	@ (8010dac <tcp_receive+0xb08>)
 8010c46:	681b      	ldr	r3, [r3, #0]
 8010c48:	441a      	add	r2, r3
 8010c4a:	687b      	ldr	r3, [r7, #4]
 8010c4c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8010c4e:	687b      	ldr	r3, [r7, #4]
 8010c50:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8010c52:	4b55      	ldr	r3, [pc, #340]	@ (8010da8 <tcp_receive+0xb04>)
 8010c54:	881b      	ldrh	r3, [r3, #0]
 8010c56:	429a      	cmp	r2, r3
 8010c58:	d206      	bcs.n	8010c68 <tcp_receive+0x9c4>
 8010c5a:	4b56      	ldr	r3, [pc, #344]	@ (8010db4 <tcp_receive+0xb10>)
 8010c5c:	f240 6207 	movw	r2, #1543	@ 0x607
 8010c60:	4957      	ldr	r1, [pc, #348]	@ (8010dc0 <tcp_receive+0xb1c>)
 8010c62:	4856      	ldr	r0, [pc, #344]	@ (8010dbc <tcp_receive+0xb18>)
 8010c64:	f005 fc9c 	bl	80165a0 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8010c68:	687b      	ldr	r3, [r7, #4]
 8010c6a:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8010c6c:	4b4e      	ldr	r3, [pc, #312]	@ (8010da8 <tcp_receive+0xb04>)
 8010c6e:	881b      	ldrh	r3, [r3, #0]
 8010c70:	1ad3      	subs	r3, r2, r3
 8010c72:	b29a      	uxth	r2, r3
 8010c74:	687b      	ldr	r3, [r7, #4]
 8010c76:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8010c78:	6878      	ldr	r0, [r7, #4]
 8010c7a:	f7fc fea5 	bl	800d9c8 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8010c7e:	4b4c      	ldr	r3, [pc, #304]	@ (8010db0 <tcp_receive+0xb0c>)
 8010c80:	685b      	ldr	r3, [r3, #4]
 8010c82:	891b      	ldrh	r3, [r3, #8]
 8010c84:	2b00      	cmp	r3, #0
 8010c86:	d006      	beq.n	8010c96 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8010c88:	4b49      	ldr	r3, [pc, #292]	@ (8010db0 <tcp_receive+0xb0c>)
 8010c8a:	685b      	ldr	r3, [r3, #4]
 8010c8c:	4a4d      	ldr	r2, [pc, #308]	@ (8010dc4 <tcp_receive+0xb20>)
 8010c8e:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8010c90:	4b47      	ldr	r3, [pc, #284]	@ (8010db0 <tcp_receive+0xb0c>)
 8010c92:	2200      	movs	r2, #0
 8010c94:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8010c96:	4b46      	ldr	r3, [pc, #280]	@ (8010db0 <tcp_receive+0xb0c>)
 8010c98:	68db      	ldr	r3, [r3, #12]
 8010c9a:	899b      	ldrh	r3, [r3, #12]
 8010c9c:	b29b      	uxth	r3, r3
 8010c9e:	4618      	mov	r0, r3
 8010ca0:	f7fa fb20 	bl	800b2e4 <lwip_htons>
 8010ca4:	4603      	mov	r3, r0
 8010ca6:	b2db      	uxtb	r3, r3
 8010ca8:	f003 0301 	and.w	r3, r3, #1
 8010cac:	2b00      	cmp	r3, #0
 8010cae:	f000 80b8 	beq.w	8010e22 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8010cb2:	4b45      	ldr	r3, [pc, #276]	@ (8010dc8 <tcp_receive+0xb24>)
 8010cb4:	781b      	ldrb	r3, [r3, #0]
 8010cb6:	f043 0320 	orr.w	r3, r3, #32
 8010cba:	b2da      	uxtb	r2, r3
 8010cbc:	4b42      	ldr	r3, [pc, #264]	@ (8010dc8 <tcp_receive+0xb24>)
 8010cbe:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8010cc0:	e0af      	b.n	8010e22 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8010cc2:	687b      	ldr	r3, [r7, #4]
 8010cc4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010cc6:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8010cc8:	687b      	ldr	r3, [r7, #4]
 8010cca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010ccc:	68db      	ldr	r3, [r3, #12]
 8010cce:	685b      	ldr	r3, [r3, #4]
 8010cd0:	4a36      	ldr	r2, [pc, #216]	@ (8010dac <tcp_receive+0xb08>)
 8010cd2:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8010cd4:	68bb      	ldr	r3, [r7, #8]
 8010cd6:	891b      	ldrh	r3, [r3, #8]
 8010cd8:	461c      	mov	r4, r3
 8010cda:	68bb      	ldr	r3, [r7, #8]
 8010cdc:	68db      	ldr	r3, [r3, #12]
 8010cde:	899b      	ldrh	r3, [r3, #12]
 8010ce0:	b29b      	uxth	r3, r3
 8010ce2:	4618      	mov	r0, r3
 8010ce4:	f7fa fafe 	bl	800b2e4 <lwip_htons>
 8010ce8:	4603      	mov	r3, r0
 8010cea:	b2db      	uxtb	r3, r3
 8010cec:	f003 0303 	and.w	r3, r3, #3
 8010cf0:	2b00      	cmp	r3, #0
 8010cf2:	d001      	beq.n	8010cf8 <tcp_receive+0xa54>
 8010cf4:	2301      	movs	r3, #1
 8010cf6:	e000      	b.n	8010cfa <tcp_receive+0xa56>
 8010cf8:	2300      	movs	r3, #0
 8010cfa:	191a      	adds	r2, r3, r4
 8010cfc:	687b      	ldr	r3, [r7, #4]
 8010cfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010d00:	441a      	add	r2, r3
 8010d02:	687b      	ldr	r3, [r7, #4]
 8010d04:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8010d06:	687b      	ldr	r3, [r7, #4]
 8010d08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010d0a:	461c      	mov	r4, r3
 8010d0c:	68bb      	ldr	r3, [r7, #8]
 8010d0e:	891b      	ldrh	r3, [r3, #8]
 8010d10:	461d      	mov	r5, r3
 8010d12:	68bb      	ldr	r3, [r7, #8]
 8010d14:	68db      	ldr	r3, [r3, #12]
 8010d16:	899b      	ldrh	r3, [r3, #12]
 8010d18:	b29b      	uxth	r3, r3
 8010d1a:	4618      	mov	r0, r3
 8010d1c:	f7fa fae2 	bl	800b2e4 <lwip_htons>
 8010d20:	4603      	mov	r3, r0
 8010d22:	b2db      	uxtb	r3, r3
 8010d24:	f003 0303 	and.w	r3, r3, #3
 8010d28:	2b00      	cmp	r3, #0
 8010d2a:	d001      	beq.n	8010d30 <tcp_receive+0xa8c>
 8010d2c:	2301      	movs	r3, #1
 8010d2e:	e000      	b.n	8010d32 <tcp_receive+0xa8e>
 8010d30:	2300      	movs	r3, #0
 8010d32:	442b      	add	r3, r5
 8010d34:	429c      	cmp	r4, r3
 8010d36:	d206      	bcs.n	8010d46 <tcp_receive+0xaa2>
 8010d38:	4b1e      	ldr	r3, [pc, #120]	@ (8010db4 <tcp_receive+0xb10>)
 8010d3a:	f240 622b 	movw	r2, #1579	@ 0x62b
 8010d3e:	4923      	ldr	r1, [pc, #140]	@ (8010dcc <tcp_receive+0xb28>)
 8010d40:	481e      	ldr	r0, [pc, #120]	@ (8010dbc <tcp_receive+0xb18>)
 8010d42:	f005 fc2d 	bl	80165a0 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8010d46:	68bb      	ldr	r3, [r7, #8]
 8010d48:	891b      	ldrh	r3, [r3, #8]
 8010d4a:	461c      	mov	r4, r3
 8010d4c:	68bb      	ldr	r3, [r7, #8]
 8010d4e:	68db      	ldr	r3, [r3, #12]
 8010d50:	899b      	ldrh	r3, [r3, #12]
 8010d52:	b29b      	uxth	r3, r3
 8010d54:	4618      	mov	r0, r3
 8010d56:	f7fa fac5 	bl	800b2e4 <lwip_htons>
 8010d5a:	4603      	mov	r3, r0
 8010d5c:	b2db      	uxtb	r3, r3
 8010d5e:	f003 0303 	and.w	r3, r3, #3
 8010d62:	2b00      	cmp	r3, #0
 8010d64:	d001      	beq.n	8010d6a <tcp_receive+0xac6>
 8010d66:	2301      	movs	r3, #1
 8010d68:	e000      	b.n	8010d6c <tcp_receive+0xac8>
 8010d6a:	2300      	movs	r3, #0
 8010d6c:	1919      	adds	r1, r3, r4
 8010d6e:	687b      	ldr	r3, [r7, #4]
 8010d70:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8010d72:	b28b      	uxth	r3, r1
 8010d74:	1ad3      	subs	r3, r2, r3
 8010d76:	b29a      	uxth	r2, r3
 8010d78:	687b      	ldr	r3, [r7, #4]
 8010d7a:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8010d7c:	6878      	ldr	r0, [r7, #4]
 8010d7e:	f7fc fe23 	bl	800d9c8 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8010d82:	68bb      	ldr	r3, [r7, #8]
 8010d84:	685b      	ldr	r3, [r3, #4]
 8010d86:	891b      	ldrh	r3, [r3, #8]
 8010d88:	2b00      	cmp	r3, #0
 8010d8a:	d028      	beq.n	8010dde <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8010d8c:	4b0d      	ldr	r3, [pc, #52]	@ (8010dc4 <tcp_receive+0xb20>)
 8010d8e:	681b      	ldr	r3, [r3, #0]
 8010d90:	2b00      	cmp	r3, #0
 8010d92:	d01d      	beq.n	8010dd0 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8010d94:	4b0b      	ldr	r3, [pc, #44]	@ (8010dc4 <tcp_receive+0xb20>)
 8010d96:	681a      	ldr	r2, [r3, #0]
 8010d98:	68bb      	ldr	r3, [r7, #8]
 8010d9a:	685b      	ldr	r3, [r3, #4]
 8010d9c:	4619      	mov	r1, r3
 8010d9e:	4610      	mov	r0, r2
 8010da0:	f7fb ff60 	bl	800cc64 <pbuf_cat>
 8010da4:	e018      	b.n	8010dd8 <tcp_receive+0xb34>
 8010da6:	bf00      	nop
 8010da8:	2000ed82 	.word	0x2000ed82
 8010dac:	2000ed78 	.word	0x2000ed78
 8010db0:	2000ed58 	.word	0x2000ed58
 8010db4:	08019850 	.word	0x08019850
 8010db8:	08019c30 	.word	0x08019c30
 8010dbc:	0801989c 	.word	0x0801989c
 8010dc0:	08019c6c 	.word	0x08019c6c
 8010dc4:	2000ed88 	.word	0x2000ed88
 8010dc8:	2000ed85 	.word	0x2000ed85
 8010dcc:	08019c8c 	.word	0x08019c8c
            } else {
              recv_data = cseg->p;
 8010dd0:	68bb      	ldr	r3, [r7, #8]
 8010dd2:	685b      	ldr	r3, [r3, #4]
 8010dd4:	4a70      	ldr	r2, [pc, #448]	@ (8010f98 <tcp_receive+0xcf4>)
 8010dd6:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8010dd8:	68bb      	ldr	r3, [r7, #8]
 8010dda:	2200      	movs	r2, #0
 8010ddc:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8010dde:	68bb      	ldr	r3, [r7, #8]
 8010de0:	68db      	ldr	r3, [r3, #12]
 8010de2:	899b      	ldrh	r3, [r3, #12]
 8010de4:	b29b      	uxth	r3, r3
 8010de6:	4618      	mov	r0, r3
 8010de8:	f7fa fa7c 	bl	800b2e4 <lwip_htons>
 8010dec:	4603      	mov	r3, r0
 8010dee:	b2db      	uxtb	r3, r3
 8010df0:	f003 0301 	and.w	r3, r3, #1
 8010df4:	2b00      	cmp	r3, #0
 8010df6:	d00d      	beq.n	8010e14 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8010df8:	4b68      	ldr	r3, [pc, #416]	@ (8010f9c <tcp_receive+0xcf8>)
 8010dfa:	781b      	ldrb	r3, [r3, #0]
 8010dfc:	f043 0320 	orr.w	r3, r3, #32
 8010e00:	b2da      	uxtb	r2, r3
 8010e02:	4b66      	ldr	r3, [pc, #408]	@ (8010f9c <tcp_receive+0xcf8>)
 8010e04:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8010e06:	687b      	ldr	r3, [r7, #4]
 8010e08:	7d1b      	ldrb	r3, [r3, #20]
 8010e0a:	2b04      	cmp	r3, #4
 8010e0c:	d102      	bne.n	8010e14 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 8010e0e:	687b      	ldr	r3, [r7, #4]
 8010e10:	2207      	movs	r2, #7
 8010e12:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8010e14:	68bb      	ldr	r3, [r7, #8]
 8010e16:	681a      	ldr	r2, [r3, #0]
 8010e18:	687b      	ldr	r3, [r7, #4]
 8010e1a:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 8010e1c:	68b8      	ldr	r0, [r7, #8]
 8010e1e:	f7fd fafe 	bl	800e41e <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8010e22:	687b      	ldr	r3, [r7, #4]
 8010e24:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010e26:	2b00      	cmp	r3, #0
 8010e28:	d008      	beq.n	8010e3c <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8010e2a:	687b      	ldr	r3, [r7, #4]
 8010e2c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010e2e:	68db      	ldr	r3, [r3, #12]
 8010e30:	685a      	ldr	r2, [r3, #4]
 8010e32:	687b      	ldr	r3, [r7, #4]
 8010e34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 8010e36:	429a      	cmp	r2, r3
 8010e38:	f43f af43 	beq.w	8010cc2 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8010e3c:	687b      	ldr	r3, [r7, #4]
 8010e3e:	8b5b      	ldrh	r3, [r3, #26]
 8010e40:	f003 0301 	and.w	r3, r3, #1
 8010e44:	2b00      	cmp	r3, #0
 8010e46:	d00e      	beq.n	8010e66 <tcp_receive+0xbc2>
 8010e48:	687b      	ldr	r3, [r7, #4]
 8010e4a:	8b5b      	ldrh	r3, [r3, #26]
 8010e4c:	f023 0301 	bic.w	r3, r3, #1
 8010e50:	b29a      	uxth	r2, r3
 8010e52:	687b      	ldr	r3, [r7, #4]
 8010e54:	835a      	strh	r2, [r3, #26]
 8010e56:	687b      	ldr	r3, [r7, #4]
 8010e58:	8b5b      	ldrh	r3, [r3, #26]
 8010e5a:	f043 0302 	orr.w	r3, r3, #2
 8010e5e:	b29a      	uxth	r2, r3
 8010e60:	687b      	ldr	r3, [r7, #4]
 8010e62:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8010e64:	e187      	b.n	8011176 <tcp_receive+0xed2>
        tcp_ack(pcb);
 8010e66:	687b      	ldr	r3, [r7, #4]
 8010e68:	8b5b      	ldrh	r3, [r3, #26]
 8010e6a:	f043 0301 	orr.w	r3, r3, #1
 8010e6e:	b29a      	uxth	r2, r3
 8010e70:	687b      	ldr	r3, [r7, #4]
 8010e72:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8010e74:	e17f      	b.n	8011176 <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8010e76:	687b      	ldr	r3, [r7, #4]
 8010e78:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010e7a:	2b00      	cmp	r3, #0
 8010e7c:	d106      	bne.n	8010e8c <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8010e7e:	4848      	ldr	r0, [pc, #288]	@ (8010fa0 <tcp_receive+0xcfc>)
 8010e80:	f7fd fae6 	bl	800e450 <tcp_seg_copy>
 8010e84:	4602      	mov	r2, r0
 8010e86:	687b      	ldr	r3, [r7, #4]
 8010e88:	675a      	str	r2, [r3, #116]	@ 0x74
 8010e8a:	e16c      	b.n	8011166 <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8010e8c:	2300      	movs	r3, #0
 8010e8e:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8010e90:	687b      	ldr	r3, [r7, #4]
 8010e92:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010e94:	63bb      	str	r3, [r7, #56]	@ 0x38
 8010e96:	e156      	b.n	8011146 <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 8010e98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010e9a:	68db      	ldr	r3, [r3, #12]
 8010e9c:	685a      	ldr	r2, [r3, #4]
 8010e9e:	4b41      	ldr	r3, [pc, #260]	@ (8010fa4 <tcp_receive+0xd00>)
 8010ea0:	681b      	ldr	r3, [r3, #0]
 8010ea2:	429a      	cmp	r2, r3
 8010ea4:	d11d      	bne.n	8010ee2 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8010ea6:	4b3e      	ldr	r3, [pc, #248]	@ (8010fa0 <tcp_receive+0xcfc>)
 8010ea8:	891a      	ldrh	r2, [r3, #8]
 8010eaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010eac:	891b      	ldrh	r3, [r3, #8]
 8010eae:	429a      	cmp	r2, r3
 8010eb0:	f240 814e 	bls.w	8011150 <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8010eb4:	483a      	ldr	r0, [pc, #232]	@ (8010fa0 <tcp_receive+0xcfc>)
 8010eb6:	f7fd facb 	bl	800e450 <tcp_seg_copy>
 8010eba:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8010ebc:	697b      	ldr	r3, [r7, #20]
 8010ebe:	2b00      	cmp	r3, #0
 8010ec0:	f000 8148 	beq.w	8011154 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 8010ec4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010ec6:	2b00      	cmp	r3, #0
 8010ec8:	d003      	beq.n	8010ed2 <tcp_receive+0xc2e>
                    prev->next = cseg;
 8010eca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010ecc:	697a      	ldr	r2, [r7, #20]
 8010ece:	601a      	str	r2, [r3, #0]
 8010ed0:	e002      	b.n	8010ed8 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 8010ed2:	687b      	ldr	r3, [r7, #4]
 8010ed4:	697a      	ldr	r2, [r7, #20]
 8010ed6:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8010ed8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8010eda:	6978      	ldr	r0, [r7, #20]
 8010edc:	f7ff f8de 	bl	801009c <tcp_oos_insert_segment>
                }
                break;
 8010ee0:	e138      	b.n	8011154 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8010ee2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010ee4:	2b00      	cmp	r3, #0
 8010ee6:	d117      	bne.n	8010f18 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8010ee8:	4b2e      	ldr	r3, [pc, #184]	@ (8010fa4 <tcp_receive+0xd00>)
 8010eea:	681a      	ldr	r2, [r3, #0]
 8010eec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010eee:	68db      	ldr	r3, [r3, #12]
 8010ef0:	685b      	ldr	r3, [r3, #4]
 8010ef2:	1ad3      	subs	r3, r2, r3
 8010ef4:	2b00      	cmp	r3, #0
 8010ef6:	da57      	bge.n	8010fa8 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8010ef8:	4829      	ldr	r0, [pc, #164]	@ (8010fa0 <tcp_receive+0xcfc>)
 8010efa:	f7fd faa9 	bl	800e450 <tcp_seg_copy>
 8010efe:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8010f00:	69bb      	ldr	r3, [r7, #24]
 8010f02:	2b00      	cmp	r3, #0
 8010f04:	f000 8128 	beq.w	8011158 <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 8010f08:	687b      	ldr	r3, [r7, #4]
 8010f0a:	69ba      	ldr	r2, [r7, #24]
 8010f0c:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 8010f0e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8010f10:	69b8      	ldr	r0, [r7, #24]
 8010f12:	f7ff f8c3 	bl	801009c <tcp_oos_insert_segment>
                  }
                  break;
 8010f16:	e11f      	b.n	8011158 <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8010f18:	4b22      	ldr	r3, [pc, #136]	@ (8010fa4 <tcp_receive+0xd00>)
 8010f1a:	681a      	ldr	r2, [r3, #0]
 8010f1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010f1e:	68db      	ldr	r3, [r3, #12]
 8010f20:	685b      	ldr	r3, [r3, #4]
 8010f22:	1ad3      	subs	r3, r2, r3
 8010f24:	3b01      	subs	r3, #1
 8010f26:	2b00      	cmp	r3, #0
 8010f28:	db3e      	blt.n	8010fa8 <tcp_receive+0xd04>
 8010f2a:	4b1e      	ldr	r3, [pc, #120]	@ (8010fa4 <tcp_receive+0xd00>)
 8010f2c:	681a      	ldr	r2, [r3, #0]
 8010f2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f30:	68db      	ldr	r3, [r3, #12]
 8010f32:	685b      	ldr	r3, [r3, #4]
 8010f34:	1ad3      	subs	r3, r2, r3
 8010f36:	3301      	adds	r3, #1
 8010f38:	2b00      	cmp	r3, #0
 8010f3a:	dc35      	bgt.n	8010fa8 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8010f3c:	4818      	ldr	r0, [pc, #96]	@ (8010fa0 <tcp_receive+0xcfc>)
 8010f3e:	f7fd fa87 	bl	800e450 <tcp_seg_copy>
 8010f42:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8010f44:	69fb      	ldr	r3, [r7, #28]
 8010f46:	2b00      	cmp	r3, #0
 8010f48:	f000 8108 	beq.w	801115c <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8010f4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010f4e:	68db      	ldr	r3, [r3, #12]
 8010f50:	685b      	ldr	r3, [r3, #4]
 8010f52:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010f54:	8912      	ldrh	r2, [r2, #8]
 8010f56:	441a      	add	r2, r3
 8010f58:	4b12      	ldr	r3, [pc, #72]	@ (8010fa4 <tcp_receive+0xd00>)
 8010f5a:	681b      	ldr	r3, [r3, #0]
 8010f5c:	1ad3      	subs	r3, r2, r3
 8010f5e:	2b00      	cmp	r3, #0
 8010f60:	dd12      	ble.n	8010f88 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8010f62:	4b10      	ldr	r3, [pc, #64]	@ (8010fa4 <tcp_receive+0xd00>)
 8010f64:	681b      	ldr	r3, [r3, #0]
 8010f66:	b29a      	uxth	r2, r3
 8010f68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010f6a:	68db      	ldr	r3, [r3, #12]
 8010f6c:	685b      	ldr	r3, [r3, #4]
 8010f6e:	b29b      	uxth	r3, r3
 8010f70:	1ad3      	subs	r3, r2, r3
 8010f72:	b29a      	uxth	r2, r3
 8010f74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010f76:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8010f78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010f7a:	685a      	ldr	r2, [r3, #4]
 8010f7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010f7e:	891b      	ldrh	r3, [r3, #8]
 8010f80:	4619      	mov	r1, r3
 8010f82:	4610      	mov	r0, r2
 8010f84:	f7fb fc1a 	bl	800c7bc <pbuf_realloc>
                    }
                    prev->next = cseg;
 8010f88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010f8a:	69fa      	ldr	r2, [r7, #28]
 8010f8c:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8010f8e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8010f90:	69f8      	ldr	r0, [r7, #28]
 8010f92:	f7ff f883 	bl	801009c <tcp_oos_insert_segment>
                  }
                  break;
 8010f96:	e0e1      	b.n	801115c <tcp_receive+0xeb8>
 8010f98:	2000ed88 	.word	0x2000ed88
 8010f9c:	2000ed85 	.word	0x2000ed85
 8010fa0:	2000ed58 	.word	0x2000ed58
 8010fa4:	2000ed78 	.word	0x2000ed78
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8010fa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010faa:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8010fac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010fae:	681b      	ldr	r3, [r3, #0]
 8010fb0:	2b00      	cmp	r3, #0
 8010fb2:	f040 80c5 	bne.w	8011140 <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8010fb6:	4b7f      	ldr	r3, [pc, #508]	@ (80111b4 <tcp_receive+0xf10>)
 8010fb8:	681a      	ldr	r2, [r3, #0]
 8010fba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010fbc:	68db      	ldr	r3, [r3, #12]
 8010fbe:	685b      	ldr	r3, [r3, #4]
 8010fc0:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8010fc2:	2b00      	cmp	r3, #0
 8010fc4:	f340 80bc 	ble.w	8011140 <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8010fc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010fca:	68db      	ldr	r3, [r3, #12]
 8010fcc:	899b      	ldrh	r3, [r3, #12]
 8010fce:	b29b      	uxth	r3, r3
 8010fd0:	4618      	mov	r0, r3
 8010fd2:	f7fa f987 	bl	800b2e4 <lwip_htons>
 8010fd6:	4603      	mov	r3, r0
 8010fd8:	b2db      	uxtb	r3, r3
 8010fda:	f003 0301 	and.w	r3, r3, #1
 8010fde:	2b00      	cmp	r3, #0
 8010fe0:	f040 80be 	bne.w	8011160 <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8010fe4:	4874      	ldr	r0, [pc, #464]	@ (80111b8 <tcp_receive+0xf14>)
 8010fe6:	f7fd fa33 	bl	800e450 <tcp_seg_copy>
 8010fea:	4602      	mov	r2, r0
 8010fec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010fee:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8010ff0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010ff2:	681b      	ldr	r3, [r3, #0]
 8010ff4:	2b00      	cmp	r3, #0
 8010ff6:	f000 80b5 	beq.w	8011164 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8010ffa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010ffc:	68db      	ldr	r3, [r3, #12]
 8010ffe:	685b      	ldr	r3, [r3, #4]
 8011000:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011002:	8912      	ldrh	r2, [r2, #8]
 8011004:	441a      	add	r2, r3
 8011006:	4b6b      	ldr	r3, [pc, #428]	@ (80111b4 <tcp_receive+0xf10>)
 8011008:	681b      	ldr	r3, [r3, #0]
 801100a:	1ad3      	subs	r3, r2, r3
 801100c:	2b00      	cmp	r3, #0
 801100e:	dd12      	ble.n	8011036 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8011010:	4b68      	ldr	r3, [pc, #416]	@ (80111b4 <tcp_receive+0xf10>)
 8011012:	681b      	ldr	r3, [r3, #0]
 8011014:	b29a      	uxth	r2, r3
 8011016:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011018:	68db      	ldr	r3, [r3, #12]
 801101a:	685b      	ldr	r3, [r3, #4]
 801101c:	b29b      	uxth	r3, r3
 801101e:	1ad3      	subs	r3, r2, r3
 8011020:	b29a      	uxth	r2, r3
 8011022:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011024:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8011026:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011028:	685a      	ldr	r2, [r3, #4]
 801102a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801102c:	891b      	ldrh	r3, [r3, #8]
 801102e:	4619      	mov	r1, r3
 8011030:	4610      	mov	r0, r2
 8011032:	f7fb fbc3 	bl	800c7bc <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8011036:	4b61      	ldr	r3, [pc, #388]	@ (80111bc <tcp_receive+0xf18>)
 8011038:	881b      	ldrh	r3, [r3, #0]
 801103a:	461a      	mov	r2, r3
 801103c:	4b5d      	ldr	r3, [pc, #372]	@ (80111b4 <tcp_receive+0xf10>)
 801103e:	681b      	ldr	r3, [r3, #0]
 8011040:	441a      	add	r2, r3
 8011042:	687b      	ldr	r3, [r7, #4]
 8011044:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011046:	6879      	ldr	r1, [r7, #4]
 8011048:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801104a:	440b      	add	r3, r1
 801104c:	1ad3      	subs	r3, r2, r3
 801104e:	2b00      	cmp	r3, #0
 8011050:	f340 8088 	ble.w	8011164 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8011054:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011056:	681b      	ldr	r3, [r3, #0]
 8011058:	68db      	ldr	r3, [r3, #12]
 801105a:	899b      	ldrh	r3, [r3, #12]
 801105c:	b29b      	uxth	r3, r3
 801105e:	4618      	mov	r0, r3
 8011060:	f7fa f940 	bl	800b2e4 <lwip_htons>
 8011064:	4603      	mov	r3, r0
 8011066:	b2db      	uxtb	r3, r3
 8011068:	f003 0301 	and.w	r3, r3, #1
 801106c:	2b00      	cmp	r3, #0
 801106e:	d021      	beq.n	80110b4 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8011070:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011072:	681b      	ldr	r3, [r3, #0]
 8011074:	68db      	ldr	r3, [r3, #12]
 8011076:	899b      	ldrh	r3, [r3, #12]
 8011078:	b29b      	uxth	r3, r3
 801107a:	b21b      	sxth	r3, r3
 801107c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8011080:	b21c      	sxth	r4, r3
 8011082:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011084:	681b      	ldr	r3, [r3, #0]
 8011086:	68db      	ldr	r3, [r3, #12]
 8011088:	899b      	ldrh	r3, [r3, #12]
 801108a:	b29b      	uxth	r3, r3
 801108c:	4618      	mov	r0, r3
 801108e:	f7fa f929 	bl	800b2e4 <lwip_htons>
 8011092:	4603      	mov	r3, r0
 8011094:	b2db      	uxtb	r3, r3
 8011096:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 801109a:	b29b      	uxth	r3, r3
 801109c:	4618      	mov	r0, r3
 801109e:	f7fa f921 	bl	800b2e4 <lwip_htons>
 80110a2:	4603      	mov	r3, r0
 80110a4:	b21b      	sxth	r3, r3
 80110a6:	4323      	orrs	r3, r4
 80110a8:	b21a      	sxth	r2, r3
 80110aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80110ac:	681b      	ldr	r3, [r3, #0]
 80110ae:	68db      	ldr	r3, [r3, #12]
 80110b0:	b292      	uxth	r2, r2
 80110b2:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 80110b4:	687b      	ldr	r3, [r7, #4]
 80110b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80110b8:	b29a      	uxth	r2, r3
 80110ba:	687b      	ldr	r3, [r7, #4]
 80110bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80110be:	4413      	add	r3, r2
 80110c0:	b299      	uxth	r1, r3
 80110c2:	4b3c      	ldr	r3, [pc, #240]	@ (80111b4 <tcp_receive+0xf10>)
 80110c4:	681b      	ldr	r3, [r3, #0]
 80110c6:	b29a      	uxth	r2, r3
 80110c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80110ca:	681b      	ldr	r3, [r3, #0]
 80110cc:	1a8a      	subs	r2, r1, r2
 80110ce:	b292      	uxth	r2, r2
 80110d0:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 80110d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80110d4:	681b      	ldr	r3, [r3, #0]
 80110d6:	685a      	ldr	r2, [r3, #4]
 80110d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80110da:	681b      	ldr	r3, [r3, #0]
 80110dc:	891b      	ldrh	r3, [r3, #8]
 80110de:	4619      	mov	r1, r3
 80110e0:	4610      	mov	r0, r2
 80110e2:	f7fb fb6b 	bl	800c7bc <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 80110e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80110e8:	681b      	ldr	r3, [r3, #0]
 80110ea:	891c      	ldrh	r4, [r3, #8]
 80110ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80110ee:	681b      	ldr	r3, [r3, #0]
 80110f0:	68db      	ldr	r3, [r3, #12]
 80110f2:	899b      	ldrh	r3, [r3, #12]
 80110f4:	b29b      	uxth	r3, r3
 80110f6:	4618      	mov	r0, r3
 80110f8:	f7fa f8f4 	bl	800b2e4 <lwip_htons>
 80110fc:	4603      	mov	r3, r0
 80110fe:	b2db      	uxtb	r3, r3
 8011100:	f003 0303 	and.w	r3, r3, #3
 8011104:	2b00      	cmp	r3, #0
 8011106:	d001      	beq.n	801110c <tcp_receive+0xe68>
 8011108:	2301      	movs	r3, #1
 801110a:	e000      	b.n	801110e <tcp_receive+0xe6a>
 801110c:	2300      	movs	r3, #0
 801110e:	4423      	add	r3, r4
 8011110:	b29a      	uxth	r2, r3
 8011112:	4b2a      	ldr	r3, [pc, #168]	@ (80111bc <tcp_receive+0xf18>)
 8011114:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8011116:	4b29      	ldr	r3, [pc, #164]	@ (80111bc <tcp_receive+0xf18>)
 8011118:	881b      	ldrh	r3, [r3, #0]
 801111a:	461a      	mov	r2, r3
 801111c:	4b25      	ldr	r3, [pc, #148]	@ (80111b4 <tcp_receive+0xf10>)
 801111e:	681b      	ldr	r3, [r3, #0]
 8011120:	441a      	add	r2, r3
 8011122:	687b      	ldr	r3, [r7, #4]
 8011124:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011126:	6879      	ldr	r1, [r7, #4]
 8011128:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801112a:	440b      	add	r3, r1
 801112c:	429a      	cmp	r2, r3
 801112e:	d019      	beq.n	8011164 <tcp_receive+0xec0>
 8011130:	4b23      	ldr	r3, [pc, #140]	@ (80111c0 <tcp_receive+0xf1c>)
 8011132:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 8011136:	4923      	ldr	r1, [pc, #140]	@ (80111c4 <tcp_receive+0xf20>)
 8011138:	4823      	ldr	r0, [pc, #140]	@ (80111c8 <tcp_receive+0xf24>)
 801113a:	f005 fa31 	bl	80165a0 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 801113e:	e011      	b.n	8011164 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8011140:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011142:	681b      	ldr	r3, [r3, #0]
 8011144:	63bb      	str	r3, [r7, #56]	@ 0x38
 8011146:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011148:	2b00      	cmp	r3, #0
 801114a:	f47f aea5 	bne.w	8010e98 <tcp_receive+0xbf4>
 801114e:	e00a      	b.n	8011166 <tcp_receive+0xec2>
                break;
 8011150:	bf00      	nop
 8011152:	e008      	b.n	8011166 <tcp_receive+0xec2>
                break;
 8011154:	bf00      	nop
 8011156:	e006      	b.n	8011166 <tcp_receive+0xec2>
                  break;
 8011158:	bf00      	nop
 801115a:	e004      	b.n	8011166 <tcp_receive+0xec2>
                  break;
 801115c:	bf00      	nop
 801115e:	e002      	b.n	8011166 <tcp_receive+0xec2>
                  break;
 8011160:	bf00      	nop
 8011162:	e000      	b.n	8011166 <tcp_receive+0xec2>
                break;
 8011164:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8011166:	6878      	ldr	r0, [r7, #4]
 8011168:	f001 fe88 	bl	8012e7c <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 801116c:	e003      	b.n	8011176 <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 801116e:	6878      	ldr	r0, [r7, #4]
 8011170:	f001 fe84 	bl	8012e7c <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8011174:	e01a      	b.n	80111ac <tcp_receive+0xf08>
 8011176:	e019      	b.n	80111ac <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8011178:	4b0e      	ldr	r3, [pc, #56]	@ (80111b4 <tcp_receive+0xf10>)
 801117a:	681a      	ldr	r2, [r3, #0]
 801117c:	687b      	ldr	r3, [r7, #4]
 801117e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011180:	1ad3      	subs	r3, r2, r3
 8011182:	2b00      	cmp	r3, #0
 8011184:	db0a      	blt.n	801119c <tcp_receive+0xef8>
 8011186:	4b0b      	ldr	r3, [pc, #44]	@ (80111b4 <tcp_receive+0xf10>)
 8011188:	681a      	ldr	r2, [r3, #0]
 801118a:	687b      	ldr	r3, [r7, #4]
 801118c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801118e:	6879      	ldr	r1, [r7, #4]
 8011190:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8011192:	440b      	add	r3, r1
 8011194:	1ad3      	subs	r3, r2, r3
 8011196:	3301      	adds	r3, #1
 8011198:	2b00      	cmp	r3, #0
 801119a:	dd07      	ble.n	80111ac <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 801119c:	687b      	ldr	r3, [r7, #4]
 801119e:	8b5b      	ldrh	r3, [r3, #26]
 80111a0:	f043 0302 	orr.w	r3, r3, #2
 80111a4:	b29a      	uxth	r2, r3
 80111a6:	687b      	ldr	r3, [r7, #4]
 80111a8:	835a      	strh	r2, [r3, #26]
    }
  }
}
 80111aa:	e7ff      	b.n	80111ac <tcp_receive+0xf08>
 80111ac:	bf00      	nop
 80111ae:	3750      	adds	r7, #80	@ 0x50
 80111b0:	46bd      	mov	sp, r7
 80111b2:	bdb0      	pop	{r4, r5, r7, pc}
 80111b4:	2000ed78 	.word	0x2000ed78
 80111b8:	2000ed58 	.word	0x2000ed58
 80111bc:	2000ed82 	.word	0x2000ed82
 80111c0:	08019850 	.word	0x08019850
 80111c4:	08019bf8 	.word	0x08019bf8
 80111c8:	0801989c 	.word	0x0801989c

080111cc <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 80111cc:	b480      	push	{r7}
 80111ce:	b083      	sub	sp, #12
 80111d0:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 80111d2:	4b15      	ldr	r3, [pc, #84]	@ (8011228 <tcp_get_next_optbyte+0x5c>)
 80111d4:	881b      	ldrh	r3, [r3, #0]
 80111d6:	1c5a      	adds	r2, r3, #1
 80111d8:	b291      	uxth	r1, r2
 80111da:	4a13      	ldr	r2, [pc, #76]	@ (8011228 <tcp_get_next_optbyte+0x5c>)
 80111dc:	8011      	strh	r1, [r2, #0]
 80111de:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 80111e0:	4b12      	ldr	r3, [pc, #72]	@ (801122c <tcp_get_next_optbyte+0x60>)
 80111e2:	681b      	ldr	r3, [r3, #0]
 80111e4:	2b00      	cmp	r3, #0
 80111e6:	d004      	beq.n	80111f2 <tcp_get_next_optbyte+0x26>
 80111e8:	4b11      	ldr	r3, [pc, #68]	@ (8011230 <tcp_get_next_optbyte+0x64>)
 80111ea:	881b      	ldrh	r3, [r3, #0]
 80111ec:	88fa      	ldrh	r2, [r7, #6]
 80111ee:	429a      	cmp	r2, r3
 80111f0:	d208      	bcs.n	8011204 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 80111f2:	4b10      	ldr	r3, [pc, #64]	@ (8011234 <tcp_get_next_optbyte+0x68>)
 80111f4:	681b      	ldr	r3, [r3, #0]
 80111f6:	3314      	adds	r3, #20
 80111f8:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 80111fa:	88fb      	ldrh	r3, [r7, #6]
 80111fc:	683a      	ldr	r2, [r7, #0]
 80111fe:	4413      	add	r3, r2
 8011200:	781b      	ldrb	r3, [r3, #0]
 8011202:	e00b      	b.n	801121c <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8011204:	88fb      	ldrh	r3, [r7, #6]
 8011206:	b2da      	uxtb	r2, r3
 8011208:	4b09      	ldr	r3, [pc, #36]	@ (8011230 <tcp_get_next_optbyte+0x64>)
 801120a:	881b      	ldrh	r3, [r3, #0]
 801120c:	b2db      	uxtb	r3, r3
 801120e:	1ad3      	subs	r3, r2, r3
 8011210:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8011212:	4b06      	ldr	r3, [pc, #24]	@ (801122c <tcp_get_next_optbyte+0x60>)
 8011214:	681a      	ldr	r2, [r3, #0]
 8011216:	797b      	ldrb	r3, [r7, #5]
 8011218:	4413      	add	r3, r2
 801121a:	781b      	ldrb	r3, [r3, #0]
  }
}
 801121c:	4618      	mov	r0, r3
 801121e:	370c      	adds	r7, #12
 8011220:	46bd      	mov	sp, r7
 8011222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011226:	4770      	bx	lr
 8011228:	2000ed74 	.word	0x2000ed74
 801122c:	2000ed70 	.word	0x2000ed70
 8011230:	2000ed6e 	.word	0x2000ed6e
 8011234:	2000ed68 	.word	0x2000ed68

08011238 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8011238:	b580      	push	{r7, lr}
 801123a:	b084      	sub	sp, #16
 801123c:	af00      	add	r7, sp, #0
 801123e:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8011240:	687b      	ldr	r3, [r7, #4]
 8011242:	2b00      	cmp	r3, #0
 8011244:	d106      	bne.n	8011254 <tcp_parseopt+0x1c>
 8011246:	4b32      	ldr	r3, [pc, #200]	@ (8011310 <tcp_parseopt+0xd8>)
 8011248:	f240 727d 	movw	r2, #1917	@ 0x77d
 801124c:	4931      	ldr	r1, [pc, #196]	@ (8011314 <tcp_parseopt+0xdc>)
 801124e:	4832      	ldr	r0, [pc, #200]	@ (8011318 <tcp_parseopt+0xe0>)
 8011250:	f005 f9a6 	bl	80165a0 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8011254:	4b31      	ldr	r3, [pc, #196]	@ (801131c <tcp_parseopt+0xe4>)
 8011256:	881b      	ldrh	r3, [r3, #0]
 8011258:	2b00      	cmp	r3, #0
 801125a:	d056      	beq.n	801130a <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801125c:	4b30      	ldr	r3, [pc, #192]	@ (8011320 <tcp_parseopt+0xe8>)
 801125e:	2200      	movs	r2, #0
 8011260:	801a      	strh	r2, [r3, #0]
 8011262:	e046      	b.n	80112f2 <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 8011264:	f7ff ffb2 	bl	80111cc <tcp_get_next_optbyte>
 8011268:	4603      	mov	r3, r0
 801126a:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 801126c:	7bfb      	ldrb	r3, [r7, #15]
 801126e:	2b02      	cmp	r3, #2
 8011270:	d006      	beq.n	8011280 <tcp_parseopt+0x48>
 8011272:	2b02      	cmp	r3, #2
 8011274:	dc2a      	bgt.n	80112cc <tcp_parseopt+0x94>
 8011276:	2b00      	cmp	r3, #0
 8011278:	d042      	beq.n	8011300 <tcp_parseopt+0xc8>
 801127a:	2b01      	cmp	r3, #1
 801127c:	d038      	beq.n	80112f0 <tcp_parseopt+0xb8>
 801127e:	e025      	b.n	80112cc <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8011280:	f7ff ffa4 	bl	80111cc <tcp_get_next_optbyte>
 8011284:	4603      	mov	r3, r0
 8011286:	2b04      	cmp	r3, #4
 8011288:	d13c      	bne.n	8011304 <tcp_parseopt+0xcc>
 801128a:	4b25      	ldr	r3, [pc, #148]	@ (8011320 <tcp_parseopt+0xe8>)
 801128c:	881b      	ldrh	r3, [r3, #0]
 801128e:	3301      	adds	r3, #1
 8011290:	4a22      	ldr	r2, [pc, #136]	@ (801131c <tcp_parseopt+0xe4>)
 8011292:	8812      	ldrh	r2, [r2, #0]
 8011294:	4293      	cmp	r3, r2
 8011296:	da35      	bge.n	8011304 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8011298:	f7ff ff98 	bl	80111cc <tcp_get_next_optbyte>
 801129c:	4603      	mov	r3, r0
 801129e:	021b      	lsls	r3, r3, #8
 80112a0:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 80112a2:	f7ff ff93 	bl	80111cc <tcp_get_next_optbyte>
 80112a6:	4603      	mov	r3, r0
 80112a8:	461a      	mov	r2, r3
 80112aa:	89bb      	ldrh	r3, [r7, #12]
 80112ac:	4313      	orrs	r3, r2
 80112ae:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 80112b0:	89bb      	ldrh	r3, [r7, #12]
 80112b2:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 80112b6:	d804      	bhi.n	80112c2 <tcp_parseopt+0x8a>
 80112b8:	89bb      	ldrh	r3, [r7, #12]
 80112ba:	2b00      	cmp	r3, #0
 80112bc:	d001      	beq.n	80112c2 <tcp_parseopt+0x8a>
 80112be:	89ba      	ldrh	r2, [r7, #12]
 80112c0:	e001      	b.n	80112c6 <tcp_parseopt+0x8e>
 80112c2:	f44f 7206 	mov.w	r2, #536	@ 0x218
 80112c6:	687b      	ldr	r3, [r7, #4]
 80112c8:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 80112ca:	e012      	b.n	80112f2 <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 80112cc:	f7ff ff7e 	bl	80111cc <tcp_get_next_optbyte>
 80112d0:	4603      	mov	r3, r0
 80112d2:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 80112d4:	7afb      	ldrb	r3, [r7, #11]
 80112d6:	2b01      	cmp	r3, #1
 80112d8:	d916      	bls.n	8011308 <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 80112da:	7afb      	ldrb	r3, [r7, #11]
 80112dc:	b29a      	uxth	r2, r3
 80112de:	4b10      	ldr	r3, [pc, #64]	@ (8011320 <tcp_parseopt+0xe8>)
 80112e0:	881b      	ldrh	r3, [r3, #0]
 80112e2:	4413      	add	r3, r2
 80112e4:	b29b      	uxth	r3, r3
 80112e6:	3b02      	subs	r3, #2
 80112e8:	b29a      	uxth	r2, r3
 80112ea:	4b0d      	ldr	r3, [pc, #52]	@ (8011320 <tcp_parseopt+0xe8>)
 80112ec:	801a      	strh	r2, [r3, #0]
 80112ee:	e000      	b.n	80112f2 <tcp_parseopt+0xba>
          break;
 80112f0:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80112f2:	4b0b      	ldr	r3, [pc, #44]	@ (8011320 <tcp_parseopt+0xe8>)
 80112f4:	881a      	ldrh	r2, [r3, #0]
 80112f6:	4b09      	ldr	r3, [pc, #36]	@ (801131c <tcp_parseopt+0xe4>)
 80112f8:	881b      	ldrh	r3, [r3, #0]
 80112fa:	429a      	cmp	r2, r3
 80112fc:	d3b2      	bcc.n	8011264 <tcp_parseopt+0x2c>
 80112fe:	e004      	b.n	801130a <tcp_parseopt+0xd2>
          return;
 8011300:	bf00      	nop
 8011302:	e002      	b.n	801130a <tcp_parseopt+0xd2>
            return;
 8011304:	bf00      	nop
 8011306:	e000      	b.n	801130a <tcp_parseopt+0xd2>
            return;
 8011308:	bf00      	nop
      }
    }
  }
}
 801130a:	3710      	adds	r7, #16
 801130c:	46bd      	mov	sp, r7
 801130e:	bd80      	pop	{r7, pc}
 8011310:	08019850 	.word	0x08019850
 8011314:	08019cb4 	.word	0x08019cb4
 8011318:	0801989c 	.word	0x0801989c
 801131c:	2000ed6c 	.word	0x2000ed6c
 8011320:	2000ed74 	.word	0x2000ed74

08011324 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8011324:	b480      	push	{r7}
 8011326:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8011328:	4b05      	ldr	r3, [pc, #20]	@ (8011340 <tcp_trigger_input_pcb_close+0x1c>)
 801132a:	781b      	ldrb	r3, [r3, #0]
 801132c:	f043 0310 	orr.w	r3, r3, #16
 8011330:	b2da      	uxtb	r2, r3
 8011332:	4b03      	ldr	r3, [pc, #12]	@ (8011340 <tcp_trigger_input_pcb_close+0x1c>)
 8011334:	701a      	strb	r2, [r3, #0]
}
 8011336:	bf00      	nop
 8011338:	46bd      	mov	sp, r7
 801133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801133e:	4770      	bx	lr
 8011340:	2000ed85 	.word	0x2000ed85

08011344 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8011344:	b580      	push	{r7, lr}
 8011346:	b084      	sub	sp, #16
 8011348:	af00      	add	r7, sp, #0
 801134a:	60f8      	str	r0, [r7, #12]
 801134c:	60b9      	str	r1, [r7, #8]
 801134e:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8011350:	68fb      	ldr	r3, [r7, #12]
 8011352:	2b00      	cmp	r3, #0
 8011354:	d00a      	beq.n	801136c <tcp_route+0x28>
 8011356:	68fb      	ldr	r3, [r7, #12]
 8011358:	7a1b      	ldrb	r3, [r3, #8]
 801135a:	2b00      	cmp	r3, #0
 801135c:	d006      	beq.n	801136c <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 801135e:	68fb      	ldr	r3, [r7, #12]
 8011360:	7a1b      	ldrb	r3, [r3, #8]
 8011362:	4618      	mov	r0, r3
 8011364:	f7fb f822 	bl	800c3ac <netif_get_by_index>
 8011368:	4603      	mov	r3, r0
 801136a:	e003      	b.n	8011374 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 801136c:	6878      	ldr	r0, [r7, #4]
 801136e:	f003 fc49 	bl	8014c04 <ip4_route>
 8011372:	4603      	mov	r3, r0
  }
}
 8011374:	4618      	mov	r0, r3
 8011376:	3710      	adds	r7, #16
 8011378:	46bd      	mov	sp, r7
 801137a:	bd80      	pop	{r7, pc}

0801137c <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 801137c:	b590      	push	{r4, r7, lr}
 801137e:	b087      	sub	sp, #28
 8011380:	af00      	add	r7, sp, #0
 8011382:	60f8      	str	r0, [r7, #12]
 8011384:	60b9      	str	r1, [r7, #8]
 8011386:	603b      	str	r3, [r7, #0]
 8011388:	4613      	mov	r3, r2
 801138a:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 801138c:	68fb      	ldr	r3, [r7, #12]
 801138e:	2b00      	cmp	r3, #0
 8011390:	d105      	bne.n	801139e <tcp_create_segment+0x22>
 8011392:	4b43      	ldr	r3, [pc, #268]	@ (80114a0 <tcp_create_segment+0x124>)
 8011394:	22a3      	movs	r2, #163	@ 0xa3
 8011396:	4943      	ldr	r1, [pc, #268]	@ (80114a4 <tcp_create_segment+0x128>)
 8011398:	4843      	ldr	r0, [pc, #268]	@ (80114a8 <tcp_create_segment+0x12c>)
 801139a:	f005 f901 	bl	80165a0 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 801139e:	68bb      	ldr	r3, [r7, #8]
 80113a0:	2b00      	cmp	r3, #0
 80113a2:	d105      	bne.n	80113b0 <tcp_create_segment+0x34>
 80113a4:	4b3e      	ldr	r3, [pc, #248]	@ (80114a0 <tcp_create_segment+0x124>)
 80113a6:	22a4      	movs	r2, #164	@ 0xa4
 80113a8:	4940      	ldr	r1, [pc, #256]	@ (80114ac <tcp_create_segment+0x130>)
 80113aa:	483f      	ldr	r0, [pc, #252]	@ (80114a8 <tcp_create_segment+0x12c>)
 80113ac:	f005 f8f8 	bl	80165a0 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80113b0:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80113b4:	009b      	lsls	r3, r3, #2
 80113b6:	b2db      	uxtb	r3, r3
 80113b8:	f003 0304 	and.w	r3, r3, #4
 80113bc:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 80113be:	2003      	movs	r0, #3
 80113c0:	f7fa fc68 	bl	800bc94 <memp_malloc>
 80113c4:	6138      	str	r0, [r7, #16]
 80113c6:	693b      	ldr	r3, [r7, #16]
 80113c8:	2b00      	cmp	r3, #0
 80113ca:	d104      	bne.n	80113d6 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 80113cc:	68b8      	ldr	r0, [r7, #8]
 80113ce:	f7fb fb7b 	bl	800cac8 <pbuf_free>
    return NULL;
 80113d2:	2300      	movs	r3, #0
 80113d4:	e060      	b.n	8011498 <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 80113d6:	693b      	ldr	r3, [r7, #16]
 80113d8:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80113dc:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 80113de:	693b      	ldr	r3, [r7, #16]
 80113e0:	2200      	movs	r2, #0
 80113e2:	601a      	str	r2, [r3, #0]
  seg->p = p;
 80113e4:	693b      	ldr	r3, [r7, #16]
 80113e6:	68ba      	ldr	r2, [r7, #8]
 80113e8:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 80113ea:	68bb      	ldr	r3, [r7, #8]
 80113ec:	891a      	ldrh	r2, [r3, #8]
 80113ee:	7dfb      	ldrb	r3, [r7, #23]
 80113f0:	b29b      	uxth	r3, r3
 80113f2:	429a      	cmp	r2, r3
 80113f4:	d205      	bcs.n	8011402 <tcp_create_segment+0x86>
 80113f6:	4b2a      	ldr	r3, [pc, #168]	@ (80114a0 <tcp_create_segment+0x124>)
 80113f8:	22b0      	movs	r2, #176	@ 0xb0
 80113fa:	492d      	ldr	r1, [pc, #180]	@ (80114b0 <tcp_create_segment+0x134>)
 80113fc:	482a      	ldr	r0, [pc, #168]	@ (80114a8 <tcp_create_segment+0x12c>)
 80113fe:	f005 f8cf 	bl	80165a0 <iprintf>
  seg->len = p->tot_len - optlen;
 8011402:	68bb      	ldr	r3, [r7, #8]
 8011404:	891a      	ldrh	r2, [r3, #8]
 8011406:	7dfb      	ldrb	r3, [r7, #23]
 8011408:	b29b      	uxth	r3, r3
 801140a:	1ad3      	subs	r3, r2, r3
 801140c:	b29a      	uxth	r2, r3
 801140e:	693b      	ldr	r3, [r7, #16]
 8011410:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8011412:	2114      	movs	r1, #20
 8011414:	68b8      	ldr	r0, [r7, #8]
 8011416:	f7fb fac1 	bl	800c99c <pbuf_add_header>
 801141a:	4603      	mov	r3, r0
 801141c:	2b00      	cmp	r3, #0
 801141e:	d004      	beq.n	801142a <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8011420:	6938      	ldr	r0, [r7, #16]
 8011422:	f7fc fffc 	bl	800e41e <tcp_seg_free>
    return NULL;
 8011426:	2300      	movs	r3, #0
 8011428:	e036      	b.n	8011498 <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801142a:	693b      	ldr	r3, [r7, #16]
 801142c:	685b      	ldr	r3, [r3, #4]
 801142e:	685a      	ldr	r2, [r3, #4]
 8011430:	693b      	ldr	r3, [r7, #16]
 8011432:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8011434:	68fb      	ldr	r3, [r7, #12]
 8011436:	8ada      	ldrh	r2, [r3, #22]
 8011438:	693b      	ldr	r3, [r7, #16]
 801143a:	68dc      	ldr	r4, [r3, #12]
 801143c:	4610      	mov	r0, r2
 801143e:	f7f9 ff51 	bl	800b2e4 <lwip_htons>
 8011442:	4603      	mov	r3, r0
 8011444:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8011446:	68fb      	ldr	r3, [r7, #12]
 8011448:	8b1a      	ldrh	r2, [r3, #24]
 801144a:	693b      	ldr	r3, [r7, #16]
 801144c:	68dc      	ldr	r4, [r3, #12]
 801144e:	4610      	mov	r0, r2
 8011450:	f7f9 ff48 	bl	800b2e4 <lwip_htons>
 8011454:	4603      	mov	r3, r0
 8011456:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8011458:	693b      	ldr	r3, [r7, #16]
 801145a:	68dc      	ldr	r4, [r3, #12]
 801145c:	6838      	ldr	r0, [r7, #0]
 801145e:	f7f9 ff56 	bl	800b30e <lwip_htonl>
 8011462:	4603      	mov	r3, r0
 8011464:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8011466:	7dfb      	ldrb	r3, [r7, #23]
 8011468:	089b      	lsrs	r3, r3, #2
 801146a:	b2db      	uxtb	r3, r3
 801146c:	3305      	adds	r3, #5
 801146e:	b29b      	uxth	r3, r3
 8011470:	031b      	lsls	r3, r3, #12
 8011472:	b29a      	uxth	r2, r3
 8011474:	79fb      	ldrb	r3, [r7, #7]
 8011476:	b29b      	uxth	r3, r3
 8011478:	4313      	orrs	r3, r2
 801147a:	b29a      	uxth	r2, r3
 801147c:	693b      	ldr	r3, [r7, #16]
 801147e:	68dc      	ldr	r4, [r3, #12]
 8011480:	4610      	mov	r0, r2
 8011482:	f7f9 ff2f 	bl	800b2e4 <lwip_htons>
 8011486:	4603      	mov	r3, r0
 8011488:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 801148a:	693b      	ldr	r3, [r7, #16]
 801148c:	68db      	ldr	r3, [r3, #12]
 801148e:	2200      	movs	r2, #0
 8011490:	749a      	strb	r2, [r3, #18]
 8011492:	2200      	movs	r2, #0
 8011494:	74da      	strb	r2, [r3, #19]
  return seg;
 8011496:	693b      	ldr	r3, [r7, #16]
}
 8011498:	4618      	mov	r0, r3
 801149a:	371c      	adds	r7, #28
 801149c:	46bd      	mov	sp, r7
 801149e:	bd90      	pop	{r4, r7, pc}
 80114a0:	08019cd0 	.word	0x08019cd0
 80114a4:	08019d04 	.word	0x08019d04
 80114a8:	08019d24 	.word	0x08019d24
 80114ac:	08019d4c 	.word	0x08019d4c
 80114b0:	08019d70 	.word	0x08019d70

080114b4 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 80114b4:	b580      	push	{r7, lr}
 80114b6:	b086      	sub	sp, #24
 80114b8:	af00      	add	r7, sp, #0
 80114ba:	607b      	str	r3, [r7, #4]
 80114bc:	4603      	mov	r3, r0
 80114be:	73fb      	strb	r3, [r7, #15]
 80114c0:	460b      	mov	r3, r1
 80114c2:	81bb      	strh	r3, [r7, #12]
 80114c4:	4613      	mov	r3, r2
 80114c6:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 80114c8:	89bb      	ldrh	r3, [r7, #12]
 80114ca:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 80114cc:	687b      	ldr	r3, [r7, #4]
 80114ce:	2b00      	cmp	r3, #0
 80114d0:	d105      	bne.n	80114de <tcp_pbuf_prealloc+0x2a>
 80114d2:	4b30      	ldr	r3, [pc, #192]	@ (8011594 <tcp_pbuf_prealloc+0xe0>)
 80114d4:	22e8      	movs	r2, #232	@ 0xe8
 80114d6:	4930      	ldr	r1, [pc, #192]	@ (8011598 <tcp_pbuf_prealloc+0xe4>)
 80114d8:	4830      	ldr	r0, [pc, #192]	@ (801159c <tcp_pbuf_prealloc+0xe8>)
 80114da:	f005 f861 	bl	80165a0 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 80114de:	6a3b      	ldr	r3, [r7, #32]
 80114e0:	2b00      	cmp	r3, #0
 80114e2:	d105      	bne.n	80114f0 <tcp_pbuf_prealloc+0x3c>
 80114e4:	4b2b      	ldr	r3, [pc, #172]	@ (8011594 <tcp_pbuf_prealloc+0xe0>)
 80114e6:	22e9      	movs	r2, #233	@ 0xe9
 80114e8:	492d      	ldr	r1, [pc, #180]	@ (80115a0 <tcp_pbuf_prealloc+0xec>)
 80114ea:	482c      	ldr	r0, [pc, #176]	@ (801159c <tcp_pbuf_prealloc+0xe8>)
 80114ec:	f005 f858 	bl	80165a0 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 80114f0:	89ba      	ldrh	r2, [r7, #12]
 80114f2:	897b      	ldrh	r3, [r7, #10]
 80114f4:	429a      	cmp	r2, r3
 80114f6:	d221      	bcs.n	801153c <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 80114f8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80114fc:	f003 0302 	and.w	r3, r3, #2
 8011500:	2b00      	cmp	r3, #0
 8011502:	d111      	bne.n	8011528 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8011504:	6a3b      	ldr	r3, [r7, #32]
 8011506:	8b5b      	ldrh	r3, [r3, #26]
 8011508:	f003 0340 	and.w	r3, r3, #64	@ 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801150c:	2b00      	cmp	r3, #0
 801150e:	d115      	bne.n	801153c <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8011510:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8011514:	2b00      	cmp	r3, #0
 8011516:	d007      	beq.n	8011528 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8011518:	6a3b      	ldr	r3, [r7, #32]
 801151a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
         (!first_seg ||
 801151c:	2b00      	cmp	r3, #0
 801151e:	d103      	bne.n	8011528 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8011520:	6a3b      	ldr	r3, [r7, #32]
 8011522:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
          pcb->unsent != NULL ||
 8011524:	2b00      	cmp	r3, #0
 8011526:	d009      	beq.n	801153c <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8011528:	89bb      	ldrh	r3, [r7, #12]
 801152a:	f203 231b 	addw	r3, r3, #539	@ 0x21b
 801152e:	f023 0203 	bic.w	r2, r3, #3
 8011532:	897b      	ldrh	r3, [r7, #10]
 8011534:	4293      	cmp	r3, r2
 8011536:	bf28      	it	cs
 8011538:	4613      	movcs	r3, r2
 801153a:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 801153c:	8af9      	ldrh	r1, [r7, #22]
 801153e:	7bfb      	ldrb	r3, [r7, #15]
 8011540:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8011544:	4618      	mov	r0, r3
 8011546:	f7fa ffdb 	bl	800c500 <pbuf_alloc>
 801154a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801154c:	693b      	ldr	r3, [r7, #16]
 801154e:	2b00      	cmp	r3, #0
 8011550:	d101      	bne.n	8011556 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 8011552:	2300      	movs	r3, #0
 8011554:	e019      	b.n	801158a <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8011556:	693b      	ldr	r3, [r7, #16]
 8011558:	681b      	ldr	r3, [r3, #0]
 801155a:	2b00      	cmp	r3, #0
 801155c:	d006      	beq.n	801156c <tcp_pbuf_prealloc+0xb8>
 801155e:	4b0d      	ldr	r3, [pc, #52]	@ (8011594 <tcp_pbuf_prealloc+0xe0>)
 8011560:	f240 120b 	movw	r2, #267	@ 0x10b
 8011564:	490f      	ldr	r1, [pc, #60]	@ (80115a4 <tcp_pbuf_prealloc+0xf0>)
 8011566:	480d      	ldr	r0, [pc, #52]	@ (801159c <tcp_pbuf_prealloc+0xe8>)
 8011568:	f005 f81a 	bl	80165a0 <iprintf>
  *oversize = p->len - length;
 801156c:	693b      	ldr	r3, [r7, #16]
 801156e:	895a      	ldrh	r2, [r3, #10]
 8011570:	89bb      	ldrh	r3, [r7, #12]
 8011572:	1ad3      	subs	r3, r2, r3
 8011574:	b29a      	uxth	r2, r3
 8011576:	687b      	ldr	r3, [r7, #4]
 8011578:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 801157a:	693b      	ldr	r3, [r7, #16]
 801157c:	89ba      	ldrh	r2, [r7, #12]
 801157e:	811a      	strh	r2, [r3, #8]
 8011580:	693b      	ldr	r3, [r7, #16]
 8011582:	891a      	ldrh	r2, [r3, #8]
 8011584:	693b      	ldr	r3, [r7, #16]
 8011586:	815a      	strh	r2, [r3, #10]
  return p;
 8011588:	693b      	ldr	r3, [r7, #16]
}
 801158a:	4618      	mov	r0, r3
 801158c:	3718      	adds	r7, #24
 801158e:	46bd      	mov	sp, r7
 8011590:	bd80      	pop	{r7, pc}
 8011592:	bf00      	nop
 8011594:	08019cd0 	.word	0x08019cd0
 8011598:	08019d88 	.word	0x08019d88
 801159c:	08019d24 	.word	0x08019d24
 80115a0:	08019dac 	.word	0x08019dac
 80115a4:	08019dcc 	.word	0x08019dcc

080115a8 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 80115a8:	b580      	push	{r7, lr}
 80115aa:	b082      	sub	sp, #8
 80115ac:	af00      	add	r7, sp, #0
 80115ae:	6078      	str	r0, [r7, #4]
 80115b0:	460b      	mov	r3, r1
 80115b2:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 80115b4:	687b      	ldr	r3, [r7, #4]
 80115b6:	2b00      	cmp	r3, #0
 80115b8:	d106      	bne.n	80115c8 <tcp_write_checks+0x20>
 80115ba:	4b33      	ldr	r3, [pc, #204]	@ (8011688 <tcp_write_checks+0xe0>)
 80115bc:	f240 1233 	movw	r2, #307	@ 0x133
 80115c0:	4932      	ldr	r1, [pc, #200]	@ (801168c <tcp_write_checks+0xe4>)
 80115c2:	4833      	ldr	r0, [pc, #204]	@ (8011690 <tcp_write_checks+0xe8>)
 80115c4:	f004 ffec 	bl	80165a0 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 80115c8:	687b      	ldr	r3, [r7, #4]
 80115ca:	7d1b      	ldrb	r3, [r3, #20]
 80115cc:	2b04      	cmp	r3, #4
 80115ce:	d00e      	beq.n	80115ee <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 80115d0:	687b      	ldr	r3, [r7, #4]
 80115d2:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 80115d4:	2b07      	cmp	r3, #7
 80115d6:	d00a      	beq.n	80115ee <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 80115d8:	687b      	ldr	r3, [r7, #4]
 80115da:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 80115dc:	2b02      	cmp	r3, #2
 80115de:	d006      	beq.n	80115ee <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 80115e0:	687b      	ldr	r3, [r7, #4]
 80115e2:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 80115e4:	2b03      	cmp	r3, #3
 80115e6:	d002      	beq.n	80115ee <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 80115e8:	f06f 030a 	mvn.w	r3, #10
 80115ec:	e048      	b.n	8011680 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 80115ee:	887b      	ldrh	r3, [r7, #2]
 80115f0:	2b00      	cmp	r3, #0
 80115f2:	d101      	bne.n	80115f8 <tcp_write_checks+0x50>
    return ERR_OK;
 80115f4:	2300      	movs	r3, #0
 80115f6:	e043      	b.n	8011680 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 80115f8:	687b      	ldr	r3, [r7, #4]
 80115fa:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 80115fe:	887a      	ldrh	r2, [r7, #2]
 8011600:	429a      	cmp	r2, r3
 8011602:	d909      	bls.n	8011618 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011604:	687b      	ldr	r3, [r7, #4]
 8011606:	8b5b      	ldrh	r3, [r3, #26]
 8011608:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801160c:	b29a      	uxth	r2, r3
 801160e:	687b      	ldr	r3, [r7, #4]
 8011610:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8011612:	f04f 33ff 	mov.w	r3, #4294967295
 8011616:	e033      	b.n	8011680 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8011618:	687b      	ldr	r3, [r7, #4]
 801161a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801161e:	2b08      	cmp	r3, #8
 8011620:	d909      	bls.n	8011636 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011622:	687b      	ldr	r3, [r7, #4]
 8011624:	8b5b      	ldrh	r3, [r3, #26]
 8011626:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801162a:	b29a      	uxth	r2, r3
 801162c:	687b      	ldr	r3, [r7, #4]
 801162e:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8011630:	f04f 33ff 	mov.w	r3, #4294967295
 8011634:	e024      	b.n	8011680 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 8011636:	687b      	ldr	r3, [r7, #4]
 8011638:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801163c:	2b00      	cmp	r3, #0
 801163e:	d00f      	beq.n	8011660 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8011640:	687b      	ldr	r3, [r7, #4]
 8011642:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011644:	2b00      	cmp	r3, #0
 8011646:	d11a      	bne.n	801167e <tcp_write_checks+0xd6>
 8011648:	687b      	ldr	r3, [r7, #4]
 801164a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801164c:	2b00      	cmp	r3, #0
 801164e:	d116      	bne.n	801167e <tcp_write_checks+0xd6>
 8011650:	4b0d      	ldr	r3, [pc, #52]	@ (8011688 <tcp_write_checks+0xe0>)
 8011652:	f240 1255 	movw	r2, #341	@ 0x155
 8011656:	490f      	ldr	r1, [pc, #60]	@ (8011694 <tcp_write_checks+0xec>)
 8011658:	480d      	ldr	r0, [pc, #52]	@ (8011690 <tcp_write_checks+0xe8>)
 801165a:	f004 ffa1 	bl	80165a0 <iprintf>
 801165e:	e00e      	b.n	801167e <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8011660:	687b      	ldr	r3, [r7, #4]
 8011662:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011664:	2b00      	cmp	r3, #0
 8011666:	d103      	bne.n	8011670 <tcp_write_checks+0xc8>
 8011668:	687b      	ldr	r3, [r7, #4]
 801166a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801166c:	2b00      	cmp	r3, #0
 801166e:	d006      	beq.n	801167e <tcp_write_checks+0xd6>
 8011670:	4b05      	ldr	r3, [pc, #20]	@ (8011688 <tcp_write_checks+0xe0>)
 8011672:	f44f 72ac 	mov.w	r2, #344	@ 0x158
 8011676:	4908      	ldr	r1, [pc, #32]	@ (8011698 <tcp_write_checks+0xf0>)
 8011678:	4805      	ldr	r0, [pc, #20]	@ (8011690 <tcp_write_checks+0xe8>)
 801167a:	f004 ff91 	bl	80165a0 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 801167e:	2300      	movs	r3, #0
}
 8011680:	4618      	mov	r0, r3
 8011682:	3708      	adds	r7, #8
 8011684:	46bd      	mov	sp, r7
 8011686:	bd80      	pop	{r7, pc}
 8011688:	08019cd0 	.word	0x08019cd0
 801168c:	08019de0 	.word	0x08019de0
 8011690:	08019d24 	.word	0x08019d24
 8011694:	08019e00 	.word	0x08019e00
 8011698:	08019e3c 	.word	0x08019e3c

0801169c <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 801169c:	b590      	push	{r4, r7, lr}
 801169e:	b09b      	sub	sp, #108	@ 0x6c
 80116a0:	af04      	add	r7, sp, #16
 80116a2:	60f8      	str	r0, [r7, #12]
 80116a4:	60b9      	str	r1, [r7, #8]
 80116a6:	4611      	mov	r1, r2
 80116a8:	461a      	mov	r2, r3
 80116aa:	460b      	mov	r3, r1
 80116ac:	80fb      	strh	r3, [r7, #6]
 80116ae:	4613      	mov	r3, r2
 80116b0:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 80116b2:	2300      	movs	r3, #0
 80116b4:	657b      	str	r3, [r7, #84]	@ 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 80116b6:	2300      	movs	r3, #0
 80116b8:	653b      	str	r3, [r7, #80]	@ 0x50
 80116ba:	2300      	movs	r3, #0
 80116bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80116be:	2300      	movs	r3, #0
 80116c0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80116c2:	2300      	movs	r3, #0
 80116c4:	647b      	str	r3, [r7, #68]	@ 0x44
  u16_t pos = 0; /* position in 'arg' data */
 80116c6:	2300      	movs	r3, #0
 80116c8:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 80116cc:	2300      	movs	r3, #0
 80116ce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 80116d2:	2300      	movs	r3, #0
 80116d4:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 80116d6:	2300      	movs	r3, #0
 80116d8:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 80116da:	2300      	movs	r3, #0
 80116dc:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 80116de:	68fb      	ldr	r3, [r7, #12]
 80116e0:	2b00      	cmp	r3, #0
 80116e2:	d109      	bne.n	80116f8 <tcp_write+0x5c>
 80116e4:	4ba4      	ldr	r3, [pc, #656]	@ (8011978 <tcp_write+0x2dc>)
 80116e6:	f44f 72cf 	mov.w	r2, #414	@ 0x19e
 80116ea:	49a4      	ldr	r1, [pc, #656]	@ (801197c <tcp_write+0x2e0>)
 80116ec:	48a4      	ldr	r0, [pc, #656]	@ (8011980 <tcp_write+0x2e4>)
 80116ee:	f004 ff57 	bl	80165a0 <iprintf>
 80116f2:	f06f 030f 	mvn.w	r3, #15
 80116f6:	e32a      	b.n	8011d4e <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 80116f8:	68fb      	ldr	r3, [r7, #12]
 80116fa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80116fe:	085b      	lsrs	r3, r3, #1
 8011700:	b29a      	uxth	r2, r3
 8011702:	68fb      	ldr	r3, [r7, #12]
 8011704:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011706:	4293      	cmp	r3, r2
 8011708:	bf28      	it	cs
 801170a:	4613      	movcs	r3, r2
 801170c:	84bb      	strh	r3, [r7, #36]	@ 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 801170e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8011710:	2b00      	cmp	r3, #0
 8011712:	d102      	bne.n	801171a <tcp_write+0x7e>
 8011714:	68fb      	ldr	r3, [r7, #12]
 8011716:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011718:	e000      	b.n	801171c <tcp_write+0x80>
 801171a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801171c:	84bb      	strh	r3, [r7, #36]	@ 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 801171e:	68bb      	ldr	r3, [r7, #8]
 8011720:	2b00      	cmp	r3, #0
 8011722:	d109      	bne.n	8011738 <tcp_write+0x9c>
 8011724:	4b94      	ldr	r3, [pc, #592]	@ (8011978 <tcp_write+0x2dc>)
 8011726:	f240 12ad 	movw	r2, #429	@ 0x1ad
 801172a:	4996      	ldr	r1, [pc, #600]	@ (8011984 <tcp_write+0x2e8>)
 801172c:	4894      	ldr	r0, [pc, #592]	@ (8011980 <tcp_write+0x2e4>)
 801172e:	f004 ff37 	bl	80165a0 <iprintf>
 8011732:	f06f 030f 	mvn.w	r3, #15
 8011736:	e30a      	b.n	8011d4e <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8011738:	88fb      	ldrh	r3, [r7, #6]
 801173a:	4619      	mov	r1, r3
 801173c:	68f8      	ldr	r0, [r7, #12]
 801173e:	f7ff ff33 	bl	80115a8 <tcp_write_checks>
 8011742:	4603      	mov	r3, r0
 8011744:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (err != ERR_OK) {
 8011748:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 801174c:	2b00      	cmp	r3, #0
 801174e:	d002      	beq.n	8011756 <tcp_write+0xba>
    return err;
 8011750:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8011754:	e2fb      	b.n	8011d4e <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 8011756:	68fb      	ldr	r3, [r7, #12]
 8011758:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801175c:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8011760:	2300      	movs	r3, #0
 8011762:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8011766:	68fb      	ldr	r3, [r7, #12]
 8011768:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801176a:	2b00      	cmp	r3, #0
 801176c:	f000 80f6 	beq.w	801195c <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8011770:	68fb      	ldr	r3, [r7, #12]
 8011772:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011774:	653b      	str	r3, [r7, #80]	@ 0x50
 8011776:	e002      	b.n	801177e <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8011778:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801177a:	681b      	ldr	r3, [r3, #0]
 801177c:	653b      	str	r3, [r7, #80]	@ 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801177e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011780:	681b      	ldr	r3, [r3, #0]
 8011782:	2b00      	cmp	r3, #0
 8011784:	d1f8      	bne.n	8011778 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8011786:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011788:	7a9b      	ldrb	r3, [r3, #10]
 801178a:	009b      	lsls	r3, r3, #2
 801178c:	b29b      	uxth	r3, r3
 801178e:	f003 0304 	and.w	r3, r3, #4
 8011792:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8011794:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8011796:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011798:	891b      	ldrh	r3, [r3, #8]
 801179a:	4619      	mov	r1, r3
 801179c:	8c3b      	ldrh	r3, [r7, #32]
 801179e:	440b      	add	r3, r1
 80117a0:	429a      	cmp	r2, r3
 80117a2:	da06      	bge.n	80117b2 <tcp_write+0x116>
 80117a4:	4b74      	ldr	r3, [pc, #464]	@ (8011978 <tcp_write+0x2dc>)
 80117a6:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 80117aa:	4977      	ldr	r1, [pc, #476]	@ (8011988 <tcp_write+0x2ec>)
 80117ac:	4874      	ldr	r0, [pc, #464]	@ (8011980 <tcp_write+0x2e4>)
 80117ae:	f004 fef7 	bl	80165a0 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 80117b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80117b4:	891a      	ldrh	r2, [r3, #8]
 80117b6:	8c3b      	ldrh	r3, [r7, #32]
 80117b8:	4413      	add	r3, r2
 80117ba:	b29b      	uxth	r3, r3
 80117bc:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80117be:	1ad3      	subs	r3, r2, r3
 80117c0:	877b      	strh	r3, [r7, #58]	@ 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 80117c2:	68fb      	ldr	r3, [r7, #12]
 80117c4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80117c8:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 80117ca:	8a7b      	ldrh	r3, [r7, #18]
 80117cc:	2b00      	cmp	r3, #0
 80117ce:	d026      	beq.n	801181e <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 80117d0:	8a7b      	ldrh	r3, [r7, #18]
 80117d2:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 80117d4:	429a      	cmp	r2, r3
 80117d6:	d206      	bcs.n	80117e6 <tcp_write+0x14a>
 80117d8:	4b67      	ldr	r3, [pc, #412]	@ (8011978 <tcp_write+0x2dc>)
 80117da:	f44f 72fc 	mov.w	r2, #504	@ 0x1f8
 80117de:	496b      	ldr	r1, [pc, #428]	@ (801198c <tcp_write+0x2f0>)
 80117e0:	4867      	ldr	r0, [pc, #412]	@ (8011980 <tcp_write+0x2e4>)
 80117e2:	f004 fedd 	bl	80165a0 <iprintf>
      seg = last_unsent;
 80117e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80117e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 80117ea:	8a7b      	ldrh	r3, [r7, #18]
 80117ec:	88fa      	ldrh	r2, [r7, #6]
 80117ee:	4293      	cmp	r3, r2
 80117f0:	bf28      	it	cs
 80117f2:	4613      	movcs	r3, r2
 80117f4:	b29b      	uxth	r3, r3
 80117f6:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 80117f8:	4293      	cmp	r3, r2
 80117fa:	bf28      	it	cs
 80117fc:	4613      	movcs	r3, r2
 80117fe:	87fb      	strh	r3, [r7, #62]	@ 0x3e
      pos += oversize_used;
 8011800:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8011804:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8011806:	4413      	add	r3, r2
 8011808:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      oversize -= oversize_used;
 801180c:	8a7a      	ldrh	r2, [r7, #18]
 801180e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8011810:	1ad3      	subs	r3, r2, r3
 8011812:	b29b      	uxth	r3, r3
 8011814:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8011816:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8011818:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801181a:	1ad3      	subs	r3, r2, r3
 801181c:	877b      	strh	r3, [r7, #58]	@ 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 801181e:	8a7b      	ldrh	r3, [r7, #18]
 8011820:	2b00      	cmp	r3, #0
 8011822:	d00b      	beq.n	801183c <tcp_write+0x1a0>
 8011824:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8011828:	88fb      	ldrh	r3, [r7, #6]
 801182a:	429a      	cmp	r2, r3
 801182c:	d006      	beq.n	801183c <tcp_write+0x1a0>
 801182e:	4b52      	ldr	r3, [pc, #328]	@ (8011978 <tcp_write+0x2dc>)
 8011830:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011834:	4956      	ldr	r1, [pc, #344]	@ (8011990 <tcp_write+0x2f4>)
 8011836:	4852      	ldr	r0, [pc, #328]	@ (8011980 <tcp_write+0x2e4>)
 8011838:	f004 feb2 	bl	80165a0 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 801183c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8011840:	88fb      	ldrh	r3, [r7, #6]
 8011842:	429a      	cmp	r2, r3
 8011844:	f080 8167 	bcs.w	8011b16 <tcp_write+0x47a>
 8011848:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801184a:	2b00      	cmp	r3, #0
 801184c:	f000 8163 	beq.w	8011b16 <tcp_write+0x47a>
 8011850:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011852:	891b      	ldrh	r3, [r3, #8]
 8011854:	2b00      	cmp	r3, #0
 8011856:	f000 815e 	beq.w	8011b16 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 801185a:	88fa      	ldrh	r2, [r7, #6]
 801185c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8011860:	1ad2      	subs	r2, r2, r3
 8011862:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8011864:	4293      	cmp	r3, r2
 8011866:	bfa8      	it	ge
 8011868:	4613      	movge	r3, r2
 801186a:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 801186c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801186e:	64fb      	str	r3, [r7, #76]	@ 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8011870:	797b      	ldrb	r3, [r7, #5]
 8011872:	f003 0301 	and.w	r3, r3, #1
 8011876:	2b00      	cmp	r3, #0
 8011878:	d027      	beq.n	80118ca <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 801187a:	f107 0012 	add.w	r0, r7, #18
 801187e:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8011880:	8bf9      	ldrh	r1, [r7, #30]
 8011882:	2301      	movs	r3, #1
 8011884:	9302      	str	r3, [sp, #8]
 8011886:	797b      	ldrb	r3, [r7, #5]
 8011888:	9301      	str	r3, [sp, #4]
 801188a:	68fb      	ldr	r3, [r7, #12]
 801188c:	9300      	str	r3, [sp, #0]
 801188e:	4603      	mov	r3, r0
 8011890:	2000      	movs	r0, #0
 8011892:	f7ff fe0f 	bl	80114b4 <tcp_pbuf_prealloc>
 8011896:	6578      	str	r0, [r7, #84]	@ 0x54
 8011898:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801189a:	2b00      	cmp	r3, #0
 801189c:	f000 8225 	beq.w	8011cea <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 80118a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80118a2:	6858      	ldr	r0, [r3, #4]
 80118a4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80118a8:	68ba      	ldr	r2, [r7, #8]
 80118aa:	4413      	add	r3, r2
 80118ac:	8bfa      	ldrh	r2, [r7, #30]
 80118ae:	4619      	mov	r1, r3
 80118b0:	f004 ffe1 	bl	8016876 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 80118b4:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 80118b6:	f7fb f995 	bl	800cbe4 <pbuf_clen>
 80118ba:	4603      	mov	r3, r0
 80118bc:	461a      	mov	r2, r3
 80118be:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80118c2:	4413      	add	r3, r2
 80118c4:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 80118c8:	e041      	b.n	801194e <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 80118ca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80118cc:	685b      	ldr	r3, [r3, #4]
 80118ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80118d0:	e002      	b.n	80118d8 <tcp_write+0x23c>
 80118d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80118d4:	681b      	ldr	r3, [r3, #0]
 80118d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80118d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80118da:	681b      	ldr	r3, [r3, #0]
 80118dc:	2b00      	cmp	r3, #0
 80118de:	d1f8      	bne.n	80118d2 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 80118e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80118e2:	7b1b      	ldrb	r3, [r3, #12]
 80118e4:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80118e8:	2b00      	cmp	r3, #0
 80118ea:	d115      	bne.n	8011918 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 80118ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80118ee:	685b      	ldr	r3, [r3, #4]
 80118f0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80118f2:	8952      	ldrh	r2, [r2, #10]
 80118f4:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 80118f6:	68ba      	ldr	r2, [r7, #8]
 80118f8:	429a      	cmp	r2, r3
 80118fa:	d10d      	bne.n	8011918 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 80118fc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8011900:	2b00      	cmp	r3, #0
 8011902:	d006      	beq.n	8011912 <tcp_write+0x276>
 8011904:	4b1c      	ldr	r3, [pc, #112]	@ (8011978 <tcp_write+0x2dc>)
 8011906:	f240 2231 	movw	r2, #561	@ 0x231
 801190a:	4922      	ldr	r1, [pc, #136]	@ (8011994 <tcp_write+0x2f8>)
 801190c:	481c      	ldr	r0, [pc, #112]	@ (8011980 <tcp_write+0x2e4>)
 801190e:	f004 fe47 	bl	80165a0 <iprintf>
          extendlen = seglen;
 8011912:	8bfb      	ldrh	r3, [r7, #30]
 8011914:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8011916:	e01a      	b.n	801194e <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8011918:	8bfb      	ldrh	r3, [r7, #30]
 801191a:	2201      	movs	r2, #1
 801191c:	4619      	mov	r1, r3
 801191e:	2000      	movs	r0, #0
 8011920:	f7fa fdee 	bl	800c500 <pbuf_alloc>
 8011924:	6578      	str	r0, [r7, #84]	@ 0x54
 8011926:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011928:	2b00      	cmp	r3, #0
 801192a:	f000 81e0 	beq.w	8011cee <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 801192e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8011932:	68ba      	ldr	r2, [r7, #8]
 8011934:	441a      	add	r2, r3
 8011936:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011938:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 801193a:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 801193c:	f7fb f952 	bl	800cbe4 <pbuf_clen>
 8011940:	4603      	mov	r3, r0
 8011942:	461a      	mov	r2, r3
 8011944:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8011948:	4413      	add	r3, r2
 801194a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 801194e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8011952:	8bfb      	ldrh	r3, [r7, #30]
 8011954:	4413      	add	r3, r2
 8011956:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 801195a:	e0dc      	b.n	8011b16 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 801195c:	68fb      	ldr	r3, [r7, #12]
 801195e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8011962:	2b00      	cmp	r3, #0
 8011964:	f000 80d7 	beq.w	8011b16 <tcp_write+0x47a>
 8011968:	4b03      	ldr	r3, [pc, #12]	@ (8011978 <tcp_write+0x2dc>)
 801196a:	f240 224a 	movw	r2, #586	@ 0x24a
 801196e:	490a      	ldr	r1, [pc, #40]	@ (8011998 <tcp_write+0x2fc>)
 8011970:	4803      	ldr	r0, [pc, #12]	@ (8011980 <tcp_write+0x2e4>)
 8011972:	f004 fe15 	bl	80165a0 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8011976:	e0ce      	b.n	8011b16 <tcp_write+0x47a>
 8011978:	08019cd0 	.word	0x08019cd0
 801197c:	08019e70 	.word	0x08019e70
 8011980:	08019d24 	.word	0x08019d24
 8011984:	08019e88 	.word	0x08019e88
 8011988:	08019ebc 	.word	0x08019ebc
 801198c:	08019ed4 	.word	0x08019ed4
 8011990:	08019ef4 	.word	0x08019ef4
 8011994:	08019f14 	.word	0x08019f14
 8011998:	08019f40 	.word	0x08019f40
    struct pbuf *p;
    u16_t left = len - pos;
 801199c:	88fa      	ldrh	r2, [r7, #6]
 801199e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80119a2:	1ad3      	subs	r3, r2, r3
 80119a4:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 80119a6:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80119aa:	b29b      	uxth	r3, r3
 80119ac:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80119ae:	1ad3      	subs	r3, r2, r3
 80119b0:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 80119b2:	8b7a      	ldrh	r2, [r7, #26]
 80119b4:	8bbb      	ldrh	r3, [r7, #28]
 80119b6:	4293      	cmp	r3, r2
 80119b8:	bf28      	it	cs
 80119ba:	4613      	movcs	r3, r2
 80119bc:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 80119be:	797b      	ldrb	r3, [r7, #5]
 80119c0:	f003 0301 	and.w	r3, r3, #1
 80119c4:	2b00      	cmp	r3, #0
 80119c6:	d036      	beq.n	8011a36 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 80119c8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80119cc:	b29a      	uxth	r2, r3
 80119ce:	8b3b      	ldrh	r3, [r7, #24]
 80119d0:	4413      	add	r3, r2
 80119d2:	b299      	uxth	r1, r3
 80119d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80119d6:	2b00      	cmp	r3, #0
 80119d8:	bf0c      	ite	eq
 80119da:	2301      	moveq	r3, #1
 80119dc:	2300      	movne	r3, #0
 80119de:	b2db      	uxtb	r3, r3
 80119e0:	f107 0012 	add.w	r0, r7, #18
 80119e4:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80119e6:	9302      	str	r3, [sp, #8]
 80119e8:	797b      	ldrb	r3, [r7, #5]
 80119ea:	9301      	str	r3, [sp, #4]
 80119ec:	68fb      	ldr	r3, [r7, #12]
 80119ee:	9300      	str	r3, [sp, #0]
 80119f0:	4603      	mov	r3, r0
 80119f2:	2036      	movs	r0, #54	@ 0x36
 80119f4:	f7ff fd5e 	bl	80114b4 <tcp_pbuf_prealloc>
 80119f8:	6338      	str	r0, [r7, #48]	@ 0x30
 80119fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80119fc:	2b00      	cmp	r3, #0
 80119fe:	f000 8178 	beq.w	8011cf2 <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8011a02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011a04:	895b      	ldrh	r3, [r3, #10]
 8011a06:	8b3a      	ldrh	r2, [r7, #24]
 8011a08:	429a      	cmp	r2, r3
 8011a0a:	d906      	bls.n	8011a1a <tcp_write+0x37e>
 8011a0c:	4b8c      	ldr	r3, [pc, #560]	@ (8011c40 <tcp_write+0x5a4>)
 8011a0e:	f240 2266 	movw	r2, #614	@ 0x266
 8011a12:	498c      	ldr	r1, [pc, #560]	@ (8011c44 <tcp_write+0x5a8>)
 8011a14:	488c      	ldr	r0, [pc, #560]	@ (8011c48 <tcp_write+0x5ac>)
 8011a16:	f004 fdc3 	bl	80165a0 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 8011a1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011a1c:	685a      	ldr	r2, [r3, #4]
 8011a1e:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8011a22:	18d0      	adds	r0, r2, r3
 8011a24:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8011a28:	68ba      	ldr	r2, [r7, #8]
 8011a2a:	4413      	add	r3, r2
 8011a2c:	8b3a      	ldrh	r2, [r7, #24]
 8011a2e:	4619      	mov	r1, r3
 8011a30:	f004 ff21 	bl	8016876 <memcpy>
 8011a34:	e02f      	b.n	8011a96 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8011a36:	8a7b      	ldrh	r3, [r7, #18]
 8011a38:	2b00      	cmp	r3, #0
 8011a3a:	d006      	beq.n	8011a4a <tcp_write+0x3ae>
 8011a3c:	4b80      	ldr	r3, [pc, #512]	@ (8011c40 <tcp_write+0x5a4>)
 8011a3e:	f240 2271 	movw	r2, #625	@ 0x271
 8011a42:	4982      	ldr	r1, [pc, #520]	@ (8011c4c <tcp_write+0x5b0>)
 8011a44:	4880      	ldr	r0, [pc, #512]	@ (8011c48 <tcp_write+0x5ac>)
 8011a46:	f004 fdab 	bl	80165a0 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8011a4a:	8b3b      	ldrh	r3, [r7, #24]
 8011a4c:	2201      	movs	r2, #1
 8011a4e:	4619      	mov	r1, r3
 8011a50:	2036      	movs	r0, #54	@ 0x36
 8011a52:	f7fa fd55 	bl	800c500 <pbuf_alloc>
 8011a56:	6178      	str	r0, [r7, #20]
 8011a58:	697b      	ldr	r3, [r7, #20]
 8011a5a:	2b00      	cmp	r3, #0
 8011a5c:	f000 814b 	beq.w	8011cf6 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8011a60:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8011a64:	68ba      	ldr	r2, [r7, #8]
 8011a66:	441a      	add	r2, r3
 8011a68:	697b      	ldr	r3, [r7, #20]
 8011a6a:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8011a6c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8011a70:	b29b      	uxth	r3, r3
 8011a72:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8011a76:	4619      	mov	r1, r3
 8011a78:	2036      	movs	r0, #54	@ 0x36
 8011a7a:	f7fa fd41 	bl	800c500 <pbuf_alloc>
 8011a7e:	6338      	str	r0, [r7, #48]	@ 0x30
 8011a80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011a82:	2b00      	cmp	r3, #0
 8011a84:	d103      	bne.n	8011a8e <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8011a86:	6978      	ldr	r0, [r7, #20]
 8011a88:	f7fb f81e 	bl	800cac8 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8011a8c:	e136      	b.n	8011cfc <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8011a8e:	6979      	ldr	r1, [r7, #20]
 8011a90:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8011a92:	f7fb f8e7 	bl	800cc64 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8011a96:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8011a98:	f7fb f8a4 	bl	800cbe4 <pbuf_clen>
 8011a9c:	4603      	mov	r3, r0
 8011a9e:	461a      	mov	r2, r3
 8011aa0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8011aa4:	4413      	add	r3, r2
 8011aa6:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8011aaa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8011aae:	2b09      	cmp	r3, #9
 8011ab0:	d903      	bls.n	8011aba <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8011ab2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8011ab4:	f7fb f808 	bl	800cac8 <pbuf_free>
      goto memerr;
 8011ab8:	e120      	b.n	8011cfc <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8011aba:	68fb      	ldr	r3, [r7, #12]
 8011abc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8011abe:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8011ac2:	441a      	add	r2, r3
 8011ac4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011ac8:	9300      	str	r3, [sp, #0]
 8011aca:	4613      	mov	r3, r2
 8011acc:	2200      	movs	r2, #0
 8011ace:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8011ad0:	68f8      	ldr	r0, [r7, #12]
 8011ad2:	f7ff fc53 	bl	801137c <tcp_create_segment>
 8011ad6:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8011ad8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011ada:	2b00      	cmp	r3, #0
 8011adc:	f000 810d 	beq.w	8011cfa <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8011ae0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011ae2:	2b00      	cmp	r3, #0
 8011ae4:	d102      	bne.n	8011aec <tcp_write+0x450>
      queue = seg;
 8011ae6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011ae8:	647b      	str	r3, [r7, #68]	@ 0x44
 8011aea:	e00c      	b.n	8011b06 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8011aec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011aee:	2b00      	cmp	r3, #0
 8011af0:	d106      	bne.n	8011b00 <tcp_write+0x464>
 8011af2:	4b53      	ldr	r3, [pc, #332]	@ (8011c40 <tcp_write+0x5a4>)
 8011af4:	f240 22ab 	movw	r2, #683	@ 0x2ab
 8011af8:	4955      	ldr	r1, [pc, #340]	@ (8011c50 <tcp_write+0x5b4>)
 8011afa:	4853      	ldr	r0, [pc, #332]	@ (8011c48 <tcp_write+0x5ac>)
 8011afc:	f004 fd50 	bl	80165a0 <iprintf>
      prev_seg->next = seg;
 8011b00:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011b02:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8011b04:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8011b06:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011b08:	64bb      	str	r3, [r7, #72]	@ 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8011b0a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8011b0e:	8b3b      	ldrh	r3, [r7, #24]
 8011b10:	4413      	add	r3, r2
 8011b12:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  while (pos < len) {
 8011b16:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8011b1a:	88fb      	ldrh	r3, [r7, #6]
 8011b1c:	429a      	cmp	r2, r3
 8011b1e:	f4ff af3d 	bcc.w	801199c <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8011b22:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8011b24:	2b00      	cmp	r3, #0
 8011b26:	d02c      	beq.n	8011b82 <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8011b28:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011b2a:	685b      	ldr	r3, [r3, #4]
 8011b2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011b2e:	e01e      	b.n	8011b6e <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 8011b30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011b32:	891a      	ldrh	r2, [r3, #8]
 8011b34:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8011b36:	4413      	add	r3, r2
 8011b38:	b29a      	uxth	r2, r3
 8011b3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011b3c:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8011b3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011b40:	681b      	ldr	r3, [r3, #0]
 8011b42:	2b00      	cmp	r3, #0
 8011b44:	d110      	bne.n	8011b68 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8011b46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011b48:	685b      	ldr	r3, [r3, #4]
 8011b4a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011b4c:	8952      	ldrh	r2, [r2, #10]
 8011b4e:	4413      	add	r3, r2
 8011b50:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8011b52:	68b9      	ldr	r1, [r7, #8]
 8011b54:	4618      	mov	r0, r3
 8011b56:	f004 fe8e 	bl	8016876 <memcpy>
        p->len += oversize_used;
 8011b5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011b5c:	895a      	ldrh	r2, [r3, #10]
 8011b5e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8011b60:	4413      	add	r3, r2
 8011b62:	b29a      	uxth	r2, r3
 8011b64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011b66:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8011b68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011b6a:	681b      	ldr	r3, [r3, #0]
 8011b6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011b6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011b70:	2b00      	cmp	r3, #0
 8011b72:	d1dd      	bne.n	8011b30 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 8011b74:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011b76:	891a      	ldrh	r2, [r3, #8]
 8011b78:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8011b7a:	4413      	add	r3, r2
 8011b7c:	b29a      	uxth	r2, r3
 8011b7e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011b80:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8011b82:	8a7a      	ldrh	r2, [r7, #18]
 8011b84:	68fb      	ldr	r3, [r7, #12]
 8011b86:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8011b8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011b8c:	2b00      	cmp	r3, #0
 8011b8e:	d018      	beq.n	8011bc2 <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8011b90:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011b92:	2b00      	cmp	r3, #0
 8011b94:	d106      	bne.n	8011ba4 <tcp_write+0x508>
 8011b96:	4b2a      	ldr	r3, [pc, #168]	@ (8011c40 <tcp_write+0x5a4>)
 8011b98:	f44f 7238 	mov.w	r2, #736	@ 0x2e0
 8011b9c:	492d      	ldr	r1, [pc, #180]	@ (8011c54 <tcp_write+0x5b8>)
 8011b9e:	482a      	ldr	r0, [pc, #168]	@ (8011c48 <tcp_write+0x5ac>)
 8011ba0:	f004 fcfe 	bl	80165a0 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8011ba4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011ba6:	685b      	ldr	r3, [r3, #4]
 8011ba8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8011baa:	4618      	mov	r0, r3
 8011bac:	f7fb f85a 	bl	800cc64 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8011bb0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011bb2:	891a      	ldrh	r2, [r3, #8]
 8011bb4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011bb6:	891b      	ldrh	r3, [r3, #8]
 8011bb8:	4413      	add	r3, r2
 8011bba:	b29a      	uxth	r2, r3
 8011bbc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011bbe:	811a      	strh	r2, [r3, #8]
 8011bc0:	e037      	b.n	8011c32 <tcp_write+0x596>
  } else if (extendlen > 0) {
 8011bc2:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8011bc4:	2b00      	cmp	r3, #0
 8011bc6:	d034      	beq.n	8011c32 <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8011bc8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011bca:	2b00      	cmp	r3, #0
 8011bcc:	d003      	beq.n	8011bd6 <tcp_write+0x53a>
 8011bce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011bd0:	685b      	ldr	r3, [r3, #4]
 8011bd2:	2b00      	cmp	r3, #0
 8011bd4:	d106      	bne.n	8011be4 <tcp_write+0x548>
 8011bd6:	4b1a      	ldr	r3, [pc, #104]	@ (8011c40 <tcp_write+0x5a4>)
 8011bd8:	f240 22e6 	movw	r2, #742	@ 0x2e6
 8011bdc:	491e      	ldr	r1, [pc, #120]	@ (8011c58 <tcp_write+0x5bc>)
 8011bde:	481a      	ldr	r0, [pc, #104]	@ (8011c48 <tcp_write+0x5ac>)
 8011be0:	f004 fcde 	bl	80165a0 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8011be4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011be6:	685b      	ldr	r3, [r3, #4]
 8011be8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011bea:	e009      	b.n	8011c00 <tcp_write+0x564>
      p->tot_len += extendlen;
 8011bec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011bee:	891a      	ldrh	r2, [r3, #8]
 8011bf0:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8011bf2:	4413      	add	r3, r2
 8011bf4:	b29a      	uxth	r2, r3
 8011bf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011bf8:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8011bfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011bfc:	681b      	ldr	r3, [r3, #0]
 8011bfe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011c00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011c02:	681b      	ldr	r3, [r3, #0]
 8011c04:	2b00      	cmp	r3, #0
 8011c06:	d1f1      	bne.n	8011bec <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 8011c08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011c0a:	891a      	ldrh	r2, [r3, #8]
 8011c0c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8011c0e:	4413      	add	r3, r2
 8011c10:	b29a      	uxth	r2, r3
 8011c12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011c14:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8011c16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011c18:	895a      	ldrh	r2, [r3, #10]
 8011c1a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8011c1c:	4413      	add	r3, r2
 8011c1e:	b29a      	uxth	r2, r3
 8011c20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011c22:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8011c24:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011c26:	891a      	ldrh	r2, [r3, #8]
 8011c28:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8011c2a:	4413      	add	r3, r2
 8011c2c:	b29a      	uxth	r2, r3
 8011c2e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011c30:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8011c32:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011c34:	2b00      	cmp	r3, #0
 8011c36:	d111      	bne.n	8011c5c <tcp_write+0x5c0>
    pcb->unsent = queue;
 8011c38:	68fb      	ldr	r3, [r7, #12]
 8011c3a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8011c3c:	66da      	str	r2, [r3, #108]	@ 0x6c
 8011c3e:	e010      	b.n	8011c62 <tcp_write+0x5c6>
 8011c40:	08019cd0 	.word	0x08019cd0
 8011c44:	08019f70 	.word	0x08019f70
 8011c48:	08019d24 	.word	0x08019d24
 8011c4c:	08019fb0 	.word	0x08019fb0
 8011c50:	08019fc0 	.word	0x08019fc0
 8011c54:	08019fd4 	.word	0x08019fd4
 8011c58:	0801a00c 	.word	0x0801a00c
  } else {
    last_unsent->next = queue;
 8011c5c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011c5e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8011c60:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8011c62:	68fb      	ldr	r3, [r7, #12]
 8011c64:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8011c66:	88fb      	ldrh	r3, [r7, #6]
 8011c68:	441a      	add	r2, r3
 8011c6a:	68fb      	ldr	r3, [r7, #12]
 8011c6c:	65da      	str	r2, [r3, #92]	@ 0x5c
  pcb->snd_buf -= len;
 8011c6e:	68fb      	ldr	r3, [r7, #12]
 8011c70:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 8011c74:	88fb      	ldrh	r3, [r7, #6]
 8011c76:	1ad3      	subs	r3, r2, r3
 8011c78:	b29a      	uxth	r2, r3
 8011c7a:	68fb      	ldr	r3, [r7, #12]
 8011c7c:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  pcb->snd_queuelen = queuelen;
 8011c80:	68fb      	ldr	r3, [r7, #12]
 8011c82:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8011c86:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8011c8a:	68fb      	ldr	r3, [r7, #12]
 8011c8c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8011c90:	2b00      	cmp	r3, #0
 8011c92:	d00e      	beq.n	8011cb2 <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 8011c94:	68fb      	ldr	r3, [r7, #12]
 8011c96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011c98:	2b00      	cmp	r3, #0
 8011c9a:	d10a      	bne.n	8011cb2 <tcp_write+0x616>
 8011c9c:	68fb      	ldr	r3, [r7, #12]
 8011c9e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011ca0:	2b00      	cmp	r3, #0
 8011ca2:	d106      	bne.n	8011cb2 <tcp_write+0x616>
 8011ca4:	4b2c      	ldr	r3, [pc, #176]	@ (8011d58 <tcp_write+0x6bc>)
 8011ca6:	f240 3212 	movw	r2, #786	@ 0x312
 8011caa:	492c      	ldr	r1, [pc, #176]	@ (8011d5c <tcp_write+0x6c0>)
 8011cac:	482c      	ldr	r0, [pc, #176]	@ (8011d60 <tcp_write+0x6c4>)
 8011cae:	f004 fc77 	bl	80165a0 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 8011cb2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011cb4:	2b00      	cmp	r3, #0
 8011cb6:	d016      	beq.n	8011ce6 <tcp_write+0x64a>
 8011cb8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011cba:	68db      	ldr	r3, [r3, #12]
 8011cbc:	2b00      	cmp	r3, #0
 8011cbe:	d012      	beq.n	8011ce6 <tcp_write+0x64a>
 8011cc0:	797b      	ldrb	r3, [r7, #5]
 8011cc2:	f003 0302 	and.w	r3, r3, #2
 8011cc6:	2b00      	cmp	r3, #0
 8011cc8:	d10d      	bne.n	8011ce6 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8011cca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011ccc:	68db      	ldr	r3, [r3, #12]
 8011cce:	899b      	ldrh	r3, [r3, #12]
 8011cd0:	b29c      	uxth	r4, r3
 8011cd2:	2008      	movs	r0, #8
 8011cd4:	f7f9 fb06 	bl	800b2e4 <lwip_htons>
 8011cd8:	4603      	mov	r3, r0
 8011cda:	461a      	mov	r2, r3
 8011cdc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011cde:	68db      	ldr	r3, [r3, #12]
 8011ce0:	4322      	orrs	r2, r4
 8011ce2:	b292      	uxth	r2, r2
 8011ce4:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8011ce6:	2300      	movs	r3, #0
 8011ce8:	e031      	b.n	8011d4e <tcp_write+0x6b2>
          goto memerr;
 8011cea:	bf00      	nop
 8011cec:	e006      	b.n	8011cfc <tcp_write+0x660>
            goto memerr;
 8011cee:	bf00      	nop
 8011cf0:	e004      	b.n	8011cfc <tcp_write+0x660>
        goto memerr;
 8011cf2:	bf00      	nop
 8011cf4:	e002      	b.n	8011cfc <tcp_write+0x660>
        goto memerr;
 8011cf6:	bf00      	nop
 8011cf8:	e000      	b.n	8011cfc <tcp_write+0x660>
      goto memerr;
 8011cfa:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011cfc:	68fb      	ldr	r3, [r7, #12]
 8011cfe:	8b5b      	ldrh	r3, [r3, #26]
 8011d00:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011d04:	b29a      	uxth	r2, r3
 8011d06:	68fb      	ldr	r3, [r7, #12]
 8011d08:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8011d0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011d0c:	2b00      	cmp	r3, #0
 8011d0e:	d002      	beq.n	8011d16 <tcp_write+0x67a>
    pbuf_free(concat_p);
 8011d10:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8011d12:	f7fa fed9 	bl	800cac8 <pbuf_free>
  }
  if (queue != NULL) {
 8011d16:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011d18:	2b00      	cmp	r3, #0
 8011d1a:	d002      	beq.n	8011d22 <tcp_write+0x686>
    tcp_segs_free(queue);
 8011d1c:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8011d1e:	f7fc fb69 	bl	800e3f4 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8011d22:	68fb      	ldr	r3, [r7, #12]
 8011d24:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8011d28:	2b00      	cmp	r3, #0
 8011d2a:	d00e      	beq.n	8011d4a <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8011d2c:	68fb      	ldr	r3, [r7, #12]
 8011d2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011d30:	2b00      	cmp	r3, #0
 8011d32:	d10a      	bne.n	8011d4a <tcp_write+0x6ae>
 8011d34:	68fb      	ldr	r3, [r7, #12]
 8011d36:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011d38:	2b00      	cmp	r3, #0
 8011d3a:	d106      	bne.n	8011d4a <tcp_write+0x6ae>
 8011d3c:	4b06      	ldr	r3, [pc, #24]	@ (8011d58 <tcp_write+0x6bc>)
 8011d3e:	f240 3227 	movw	r2, #807	@ 0x327
 8011d42:	4906      	ldr	r1, [pc, #24]	@ (8011d5c <tcp_write+0x6c0>)
 8011d44:	4806      	ldr	r0, [pc, #24]	@ (8011d60 <tcp_write+0x6c4>)
 8011d46:	f004 fc2b 	bl	80165a0 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8011d4a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8011d4e:	4618      	mov	r0, r3
 8011d50:	375c      	adds	r7, #92	@ 0x5c
 8011d52:	46bd      	mov	sp, r7
 8011d54:	bd90      	pop	{r4, r7, pc}
 8011d56:	bf00      	nop
 8011d58:	08019cd0 	.word	0x08019cd0
 8011d5c:	0801a044 	.word	0x0801a044
 8011d60:	08019d24 	.word	0x08019d24

08011d64 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8011d64:	b590      	push	{r4, r7, lr}
 8011d66:	b08b      	sub	sp, #44	@ 0x2c
 8011d68:	af02      	add	r7, sp, #8
 8011d6a:	6078      	str	r0, [r7, #4]
 8011d6c:	460b      	mov	r3, r1
 8011d6e:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8011d70:	2300      	movs	r3, #0
 8011d72:	61fb      	str	r3, [r7, #28]
 8011d74:	2300      	movs	r3, #0
 8011d76:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8011d78:	2300      	movs	r3, #0
 8011d7a:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8011d7c:	687b      	ldr	r3, [r7, #4]
 8011d7e:	2b00      	cmp	r3, #0
 8011d80:	d106      	bne.n	8011d90 <tcp_split_unsent_seg+0x2c>
 8011d82:	4b95      	ldr	r3, [pc, #596]	@ (8011fd8 <tcp_split_unsent_seg+0x274>)
 8011d84:	f240 324b 	movw	r2, #843	@ 0x34b
 8011d88:	4994      	ldr	r1, [pc, #592]	@ (8011fdc <tcp_split_unsent_seg+0x278>)
 8011d8a:	4895      	ldr	r0, [pc, #596]	@ (8011fe0 <tcp_split_unsent_seg+0x27c>)
 8011d8c:	f004 fc08 	bl	80165a0 <iprintf>

  useg = pcb->unsent;
 8011d90:	687b      	ldr	r3, [r7, #4]
 8011d92:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011d94:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8011d96:	697b      	ldr	r3, [r7, #20]
 8011d98:	2b00      	cmp	r3, #0
 8011d9a:	d102      	bne.n	8011da2 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8011d9c:	f04f 33ff 	mov.w	r3, #4294967295
 8011da0:	e116      	b.n	8011fd0 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8011da2:	887b      	ldrh	r3, [r7, #2]
 8011da4:	2b00      	cmp	r3, #0
 8011da6:	d109      	bne.n	8011dbc <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8011da8:	4b8b      	ldr	r3, [pc, #556]	@ (8011fd8 <tcp_split_unsent_seg+0x274>)
 8011daa:	f240 3253 	movw	r2, #851	@ 0x353
 8011dae:	498d      	ldr	r1, [pc, #564]	@ (8011fe4 <tcp_split_unsent_seg+0x280>)
 8011db0:	488b      	ldr	r0, [pc, #556]	@ (8011fe0 <tcp_split_unsent_seg+0x27c>)
 8011db2:	f004 fbf5 	bl	80165a0 <iprintf>
    return ERR_VAL;
 8011db6:	f06f 0305 	mvn.w	r3, #5
 8011dba:	e109      	b.n	8011fd0 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8011dbc:	697b      	ldr	r3, [r7, #20]
 8011dbe:	891b      	ldrh	r3, [r3, #8]
 8011dc0:	887a      	ldrh	r2, [r7, #2]
 8011dc2:	429a      	cmp	r2, r3
 8011dc4:	d301      	bcc.n	8011dca <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8011dc6:	2300      	movs	r3, #0
 8011dc8:	e102      	b.n	8011fd0 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8011dca:	687b      	ldr	r3, [r7, #4]
 8011dcc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011dce:	887a      	ldrh	r2, [r7, #2]
 8011dd0:	429a      	cmp	r2, r3
 8011dd2:	d906      	bls.n	8011de2 <tcp_split_unsent_seg+0x7e>
 8011dd4:	4b80      	ldr	r3, [pc, #512]	@ (8011fd8 <tcp_split_unsent_seg+0x274>)
 8011dd6:	f240 325b 	movw	r2, #859	@ 0x35b
 8011dda:	4983      	ldr	r1, [pc, #524]	@ (8011fe8 <tcp_split_unsent_seg+0x284>)
 8011ddc:	4880      	ldr	r0, [pc, #512]	@ (8011fe0 <tcp_split_unsent_seg+0x27c>)
 8011dde:	f004 fbdf 	bl	80165a0 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8011de2:	697b      	ldr	r3, [r7, #20]
 8011de4:	891b      	ldrh	r3, [r3, #8]
 8011de6:	2b00      	cmp	r3, #0
 8011de8:	d106      	bne.n	8011df8 <tcp_split_unsent_seg+0x94>
 8011dea:	4b7b      	ldr	r3, [pc, #492]	@ (8011fd8 <tcp_split_unsent_seg+0x274>)
 8011dec:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 8011df0:	497e      	ldr	r1, [pc, #504]	@ (8011fec <tcp_split_unsent_seg+0x288>)
 8011df2:	487b      	ldr	r0, [pc, #492]	@ (8011fe0 <tcp_split_unsent_seg+0x27c>)
 8011df4:	f004 fbd4 	bl	80165a0 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8011df8:	697b      	ldr	r3, [r7, #20]
 8011dfa:	7a9b      	ldrb	r3, [r3, #10]
 8011dfc:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8011dfe:	7bfb      	ldrb	r3, [r7, #15]
 8011e00:	009b      	lsls	r3, r3, #2
 8011e02:	b2db      	uxtb	r3, r3
 8011e04:	f003 0304 	and.w	r3, r3, #4
 8011e08:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8011e0a:	697b      	ldr	r3, [r7, #20]
 8011e0c:	891a      	ldrh	r2, [r3, #8]
 8011e0e:	887b      	ldrh	r3, [r7, #2]
 8011e10:	1ad3      	subs	r3, r2, r3
 8011e12:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8011e14:	7bbb      	ldrb	r3, [r7, #14]
 8011e16:	b29a      	uxth	r2, r3
 8011e18:	89bb      	ldrh	r3, [r7, #12]
 8011e1a:	4413      	add	r3, r2
 8011e1c:	b29b      	uxth	r3, r3
 8011e1e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8011e22:	4619      	mov	r1, r3
 8011e24:	2036      	movs	r0, #54	@ 0x36
 8011e26:	f7fa fb6b 	bl	800c500 <pbuf_alloc>
 8011e2a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011e2c:	693b      	ldr	r3, [r7, #16]
 8011e2e:	2b00      	cmp	r3, #0
 8011e30:	f000 80b7 	beq.w	8011fa2 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8011e34:	697b      	ldr	r3, [r7, #20]
 8011e36:	685b      	ldr	r3, [r3, #4]
 8011e38:	891a      	ldrh	r2, [r3, #8]
 8011e3a:	697b      	ldr	r3, [r7, #20]
 8011e3c:	891b      	ldrh	r3, [r3, #8]
 8011e3e:	1ad3      	subs	r3, r2, r3
 8011e40:	b29a      	uxth	r2, r3
 8011e42:	887b      	ldrh	r3, [r7, #2]
 8011e44:	4413      	add	r3, r2
 8011e46:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8011e48:	697b      	ldr	r3, [r7, #20]
 8011e4a:	6858      	ldr	r0, [r3, #4]
 8011e4c:	693b      	ldr	r3, [r7, #16]
 8011e4e:	685a      	ldr	r2, [r3, #4]
 8011e50:	7bbb      	ldrb	r3, [r7, #14]
 8011e52:	18d1      	adds	r1, r2, r3
 8011e54:	897b      	ldrh	r3, [r7, #10]
 8011e56:	89ba      	ldrh	r2, [r7, #12]
 8011e58:	f7fb f82c 	bl	800ceb4 <pbuf_copy_partial>
 8011e5c:	4603      	mov	r3, r0
 8011e5e:	461a      	mov	r2, r3
 8011e60:	89bb      	ldrh	r3, [r7, #12]
 8011e62:	4293      	cmp	r3, r2
 8011e64:	f040 809f 	bne.w	8011fa6 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8011e68:	697b      	ldr	r3, [r7, #20]
 8011e6a:	68db      	ldr	r3, [r3, #12]
 8011e6c:	899b      	ldrh	r3, [r3, #12]
 8011e6e:	b29b      	uxth	r3, r3
 8011e70:	4618      	mov	r0, r3
 8011e72:	f7f9 fa37 	bl	800b2e4 <lwip_htons>
 8011e76:	4603      	mov	r3, r0
 8011e78:	b2db      	uxtb	r3, r3
 8011e7a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8011e7e:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8011e80:	2300      	movs	r3, #0
 8011e82:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8011e84:	7efb      	ldrb	r3, [r7, #27]
 8011e86:	f003 0308 	and.w	r3, r3, #8
 8011e8a:	2b00      	cmp	r3, #0
 8011e8c:	d007      	beq.n	8011e9e <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8011e8e:	7efb      	ldrb	r3, [r7, #27]
 8011e90:	f023 0308 	bic.w	r3, r3, #8
 8011e94:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8011e96:	7ebb      	ldrb	r3, [r7, #26]
 8011e98:	f043 0308 	orr.w	r3, r3, #8
 8011e9c:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8011e9e:	7efb      	ldrb	r3, [r7, #27]
 8011ea0:	f003 0301 	and.w	r3, r3, #1
 8011ea4:	2b00      	cmp	r3, #0
 8011ea6:	d007      	beq.n	8011eb8 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8011ea8:	7efb      	ldrb	r3, [r7, #27]
 8011eaa:	f023 0301 	bic.w	r3, r3, #1
 8011eae:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8011eb0:	7ebb      	ldrb	r3, [r7, #26]
 8011eb2:	f043 0301 	orr.w	r3, r3, #1
 8011eb6:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8011eb8:	697b      	ldr	r3, [r7, #20]
 8011eba:	68db      	ldr	r3, [r3, #12]
 8011ebc:	685b      	ldr	r3, [r3, #4]
 8011ebe:	4618      	mov	r0, r3
 8011ec0:	f7f9 fa25 	bl	800b30e <lwip_htonl>
 8011ec4:	4602      	mov	r2, r0
 8011ec6:	887b      	ldrh	r3, [r7, #2]
 8011ec8:	18d1      	adds	r1, r2, r3
 8011eca:	7eba      	ldrb	r2, [r7, #26]
 8011ecc:	7bfb      	ldrb	r3, [r7, #15]
 8011ece:	9300      	str	r3, [sp, #0]
 8011ed0:	460b      	mov	r3, r1
 8011ed2:	6939      	ldr	r1, [r7, #16]
 8011ed4:	6878      	ldr	r0, [r7, #4]
 8011ed6:	f7ff fa51 	bl	801137c <tcp_create_segment>
 8011eda:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8011edc:	69fb      	ldr	r3, [r7, #28]
 8011ede:	2b00      	cmp	r3, #0
 8011ee0:	d063      	beq.n	8011faa <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8011ee2:	697b      	ldr	r3, [r7, #20]
 8011ee4:	685b      	ldr	r3, [r3, #4]
 8011ee6:	4618      	mov	r0, r3
 8011ee8:	f7fa fe7c 	bl	800cbe4 <pbuf_clen>
 8011eec:	4603      	mov	r3, r0
 8011eee:	461a      	mov	r2, r3
 8011ef0:	687b      	ldr	r3, [r7, #4]
 8011ef2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8011ef6:	1a9b      	subs	r3, r3, r2
 8011ef8:	b29a      	uxth	r2, r3
 8011efa:	687b      	ldr	r3, [r7, #4]
 8011efc:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8011f00:	697b      	ldr	r3, [r7, #20]
 8011f02:	6858      	ldr	r0, [r3, #4]
 8011f04:	697b      	ldr	r3, [r7, #20]
 8011f06:	685b      	ldr	r3, [r3, #4]
 8011f08:	891a      	ldrh	r2, [r3, #8]
 8011f0a:	89bb      	ldrh	r3, [r7, #12]
 8011f0c:	1ad3      	subs	r3, r2, r3
 8011f0e:	b29b      	uxth	r3, r3
 8011f10:	4619      	mov	r1, r3
 8011f12:	f7fa fc53 	bl	800c7bc <pbuf_realloc>
  useg->len -= remainder;
 8011f16:	697b      	ldr	r3, [r7, #20]
 8011f18:	891a      	ldrh	r2, [r3, #8]
 8011f1a:	89bb      	ldrh	r3, [r7, #12]
 8011f1c:	1ad3      	subs	r3, r2, r3
 8011f1e:	b29a      	uxth	r2, r3
 8011f20:	697b      	ldr	r3, [r7, #20]
 8011f22:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8011f24:	697b      	ldr	r3, [r7, #20]
 8011f26:	68db      	ldr	r3, [r3, #12]
 8011f28:	899b      	ldrh	r3, [r3, #12]
 8011f2a:	b29c      	uxth	r4, r3
 8011f2c:	7efb      	ldrb	r3, [r7, #27]
 8011f2e:	b29b      	uxth	r3, r3
 8011f30:	4618      	mov	r0, r3
 8011f32:	f7f9 f9d7 	bl	800b2e4 <lwip_htons>
 8011f36:	4603      	mov	r3, r0
 8011f38:	461a      	mov	r2, r3
 8011f3a:	697b      	ldr	r3, [r7, #20]
 8011f3c:	68db      	ldr	r3, [r3, #12]
 8011f3e:	4322      	orrs	r2, r4
 8011f40:	b292      	uxth	r2, r2
 8011f42:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8011f44:	697b      	ldr	r3, [r7, #20]
 8011f46:	685b      	ldr	r3, [r3, #4]
 8011f48:	4618      	mov	r0, r3
 8011f4a:	f7fa fe4b 	bl	800cbe4 <pbuf_clen>
 8011f4e:	4603      	mov	r3, r0
 8011f50:	461a      	mov	r2, r3
 8011f52:	687b      	ldr	r3, [r7, #4]
 8011f54:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8011f58:	4413      	add	r3, r2
 8011f5a:	b29a      	uxth	r2, r3
 8011f5c:	687b      	ldr	r3, [r7, #4]
 8011f5e:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8011f62:	69fb      	ldr	r3, [r7, #28]
 8011f64:	685b      	ldr	r3, [r3, #4]
 8011f66:	4618      	mov	r0, r3
 8011f68:	f7fa fe3c 	bl	800cbe4 <pbuf_clen>
 8011f6c:	4603      	mov	r3, r0
 8011f6e:	461a      	mov	r2, r3
 8011f70:	687b      	ldr	r3, [r7, #4]
 8011f72:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8011f76:	4413      	add	r3, r2
 8011f78:	b29a      	uxth	r2, r3
 8011f7a:	687b      	ldr	r3, [r7, #4]
 8011f7c:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8011f80:	697b      	ldr	r3, [r7, #20]
 8011f82:	681a      	ldr	r2, [r3, #0]
 8011f84:	69fb      	ldr	r3, [r7, #28]
 8011f86:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8011f88:	697b      	ldr	r3, [r7, #20]
 8011f8a:	69fa      	ldr	r2, [r7, #28]
 8011f8c:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8011f8e:	69fb      	ldr	r3, [r7, #28]
 8011f90:	681b      	ldr	r3, [r3, #0]
 8011f92:	2b00      	cmp	r3, #0
 8011f94:	d103      	bne.n	8011f9e <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8011f96:	687b      	ldr	r3, [r7, #4]
 8011f98:	2200      	movs	r2, #0
 8011f9a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8011f9e:	2300      	movs	r3, #0
 8011fa0:	e016      	b.n	8011fd0 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8011fa2:	bf00      	nop
 8011fa4:	e002      	b.n	8011fac <tcp_split_unsent_seg+0x248>
    goto memerr;
 8011fa6:	bf00      	nop
 8011fa8:	e000      	b.n	8011fac <tcp_split_unsent_seg+0x248>
    goto memerr;
 8011faa:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8011fac:	69fb      	ldr	r3, [r7, #28]
 8011fae:	2b00      	cmp	r3, #0
 8011fb0:	d006      	beq.n	8011fc0 <tcp_split_unsent_seg+0x25c>
 8011fb2:	4b09      	ldr	r3, [pc, #36]	@ (8011fd8 <tcp_split_unsent_seg+0x274>)
 8011fb4:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 8011fb8:	490d      	ldr	r1, [pc, #52]	@ (8011ff0 <tcp_split_unsent_seg+0x28c>)
 8011fba:	4809      	ldr	r0, [pc, #36]	@ (8011fe0 <tcp_split_unsent_seg+0x27c>)
 8011fbc:	f004 faf0 	bl	80165a0 <iprintf>
  if (p != NULL) {
 8011fc0:	693b      	ldr	r3, [r7, #16]
 8011fc2:	2b00      	cmp	r3, #0
 8011fc4:	d002      	beq.n	8011fcc <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8011fc6:	6938      	ldr	r0, [r7, #16]
 8011fc8:	f7fa fd7e 	bl	800cac8 <pbuf_free>
  }

  return ERR_MEM;
 8011fcc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8011fd0:	4618      	mov	r0, r3
 8011fd2:	3724      	adds	r7, #36	@ 0x24
 8011fd4:	46bd      	mov	sp, r7
 8011fd6:	bd90      	pop	{r4, r7, pc}
 8011fd8:	08019cd0 	.word	0x08019cd0
 8011fdc:	0801a064 	.word	0x0801a064
 8011fe0:	08019d24 	.word	0x08019d24
 8011fe4:	0801a088 	.word	0x0801a088
 8011fe8:	0801a0ac 	.word	0x0801a0ac
 8011fec:	0801a0bc 	.word	0x0801a0bc
 8011ff0:	0801a0cc 	.word	0x0801a0cc

08011ff4 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8011ff4:	b590      	push	{r4, r7, lr}
 8011ff6:	b085      	sub	sp, #20
 8011ff8:	af00      	add	r7, sp, #0
 8011ffa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8011ffc:	687b      	ldr	r3, [r7, #4]
 8011ffe:	2b00      	cmp	r3, #0
 8012000:	d106      	bne.n	8012010 <tcp_send_fin+0x1c>
 8012002:	4b21      	ldr	r3, [pc, #132]	@ (8012088 <tcp_send_fin+0x94>)
 8012004:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 8012008:	4920      	ldr	r1, [pc, #128]	@ (801208c <tcp_send_fin+0x98>)
 801200a:	4821      	ldr	r0, [pc, #132]	@ (8012090 <tcp_send_fin+0x9c>)
 801200c:	f004 fac8 	bl	80165a0 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8012010:	687b      	ldr	r3, [r7, #4]
 8012012:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012014:	2b00      	cmp	r3, #0
 8012016:	d02e      	beq.n	8012076 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8012018:	687b      	ldr	r3, [r7, #4]
 801201a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801201c:	60fb      	str	r3, [r7, #12]
 801201e:	e002      	b.n	8012026 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8012020:	68fb      	ldr	r3, [r7, #12]
 8012022:	681b      	ldr	r3, [r3, #0]
 8012024:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8012026:	68fb      	ldr	r3, [r7, #12]
 8012028:	681b      	ldr	r3, [r3, #0]
 801202a:	2b00      	cmp	r3, #0
 801202c:	d1f8      	bne.n	8012020 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801202e:	68fb      	ldr	r3, [r7, #12]
 8012030:	68db      	ldr	r3, [r3, #12]
 8012032:	899b      	ldrh	r3, [r3, #12]
 8012034:	b29b      	uxth	r3, r3
 8012036:	4618      	mov	r0, r3
 8012038:	f7f9 f954 	bl	800b2e4 <lwip_htons>
 801203c:	4603      	mov	r3, r0
 801203e:	b2db      	uxtb	r3, r3
 8012040:	f003 0307 	and.w	r3, r3, #7
 8012044:	2b00      	cmp	r3, #0
 8012046:	d116      	bne.n	8012076 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8012048:	68fb      	ldr	r3, [r7, #12]
 801204a:	68db      	ldr	r3, [r3, #12]
 801204c:	899b      	ldrh	r3, [r3, #12]
 801204e:	b29c      	uxth	r4, r3
 8012050:	2001      	movs	r0, #1
 8012052:	f7f9 f947 	bl	800b2e4 <lwip_htons>
 8012056:	4603      	mov	r3, r0
 8012058:	461a      	mov	r2, r3
 801205a:	68fb      	ldr	r3, [r7, #12]
 801205c:	68db      	ldr	r3, [r3, #12]
 801205e:	4322      	orrs	r2, r4
 8012060:	b292      	uxth	r2, r2
 8012062:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8012064:	687b      	ldr	r3, [r7, #4]
 8012066:	8b5b      	ldrh	r3, [r3, #26]
 8012068:	f043 0320 	orr.w	r3, r3, #32
 801206c:	b29a      	uxth	r2, r3
 801206e:	687b      	ldr	r3, [r7, #4]
 8012070:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8012072:	2300      	movs	r3, #0
 8012074:	e004      	b.n	8012080 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8012076:	2101      	movs	r1, #1
 8012078:	6878      	ldr	r0, [r7, #4]
 801207a:	f000 f80b 	bl	8012094 <tcp_enqueue_flags>
 801207e:	4603      	mov	r3, r0
}
 8012080:	4618      	mov	r0, r3
 8012082:	3714      	adds	r7, #20
 8012084:	46bd      	mov	sp, r7
 8012086:	bd90      	pop	{r4, r7, pc}
 8012088:	08019cd0 	.word	0x08019cd0
 801208c:	0801a0d8 	.word	0x0801a0d8
 8012090:	08019d24 	.word	0x08019d24

08012094 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8012094:	b580      	push	{r7, lr}
 8012096:	b08a      	sub	sp, #40	@ 0x28
 8012098:	af02      	add	r7, sp, #8
 801209a:	6078      	str	r0, [r7, #4]
 801209c:	460b      	mov	r3, r1
 801209e:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 80120a0:	2300      	movs	r3, #0
 80120a2:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 80120a4:	2300      	movs	r3, #0
 80120a6:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 80120a8:	78fb      	ldrb	r3, [r7, #3]
 80120aa:	f003 0303 	and.w	r3, r3, #3
 80120ae:	2b00      	cmp	r3, #0
 80120b0:	d106      	bne.n	80120c0 <tcp_enqueue_flags+0x2c>
 80120b2:	4b67      	ldr	r3, [pc, #412]	@ (8012250 <tcp_enqueue_flags+0x1bc>)
 80120b4:	f240 4211 	movw	r2, #1041	@ 0x411
 80120b8:	4966      	ldr	r1, [pc, #408]	@ (8012254 <tcp_enqueue_flags+0x1c0>)
 80120ba:	4867      	ldr	r0, [pc, #412]	@ (8012258 <tcp_enqueue_flags+0x1c4>)
 80120bc:	f004 fa70 	bl	80165a0 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 80120c0:	687b      	ldr	r3, [r7, #4]
 80120c2:	2b00      	cmp	r3, #0
 80120c4:	d106      	bne.n	80120d4 <tcp_enqueue_flags+0x40>
 80120c6:	4b62      	ldr	r3, [pc, #392]	@ (8012250 <tcp_enqueue_flags+0x1bc>)
 80120c8:	f240 4213 	movw	r2, #1043	@ 0x413
 80120cc:	4963      	ldr	r1, [pc, #396]	@ (801225c <tcp_enqueue_flags+0x1c8>)
 80120ce:	4862      	ldr	r0, [pc, #392]	@ (8012258 <tcp_enqueue_flags+0x1c4>)
 80120d0:	f004 fa66 	bl	80165a0 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 80120d4:	78fb      	ldrb	r3, [r7, #3]
 80120d6:	f003 0302 	and.w	r3, r3, #2
 80120da:	2b00      	cmp	r3, #0
 80120dc:	d001      	beq.n	80120e2 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 80120de:	2301      	movs	r3, #1
 80120e0:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80120e2:	7ffb      	ldrb	r3, [r7, #31]
 80120e4:	009b      	lsls	r3, r3, #2
 80120e6:	b2db      	uxtb	r3, r3
 80120e8:	f003 0304 	and.w	r3, r3, #4
 80120ec:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80120ee:	7dfb      	ldrb	r3, [r7, #23]
 80120f0:	b29b      	uxth	r3, r3
 80120f2:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80120f6:	4619      	mov	r1, r3
 80120f8:	2036      	movs	r0, #54	@ 0x36
 80120fa:	f7fa fa01 	bl	800c500 <pbuf_alloc>
 80120fe:	6138      	str	r0, [r7, #16]
 8012100:	693b      	ldr	r3, [r7, #16]
 8012102:	2b00      	cmp	r3, #0
 8012104:	d109      	bne.n	801211a <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012106:	687b      	ldr	r3, [r7, #4]
 8012108:	8b5b      	ldrh	r3, [r3, #26]
 801210a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801210e:	b29a      	uxth	r2, r3
 8012110:	687b      	ldr	r3, [r7, #4]
 8012112:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8012114:	f04f 33ff 	mov.w	r3, #4294967295
 8012118:	e095      	b.n	8012246 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801211a:	693b      	ldr	r3, [r7, #16]
 801211c:	895a      	ldrh	r2, [r3, #10]
 801211e:	7dfb      	ldrb	r3, [r7, #23]
 8012120:	b29b      	uxth	r3, r3
 8012122:	429a      	cmp	r2, r3
 8012124:	d206      	bcs.n	8012134 <tcp_enqueue_flags+0xa0>
 8012126:	4b4a      	ldr	r3, [pc, #296]	@ (8012250 <tcp_enqueue_flags+0x1bc>)
 8012128:	f240 4239 	movw	r2, #1081	@ 0x439
 801212c:	494c      	ldr	r1, [pc, #304]	@ (8012260 <tcp_enqueue_flags+0x1cc>)
 801212e:	484a      	ldr	r0, [pc, #296]	@ (8012258 <tcp_enqueue_flags+0x1c4>)
 8012130:	f004 fa36 	bl	80165a0 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8012134:	687b      	ldr	r3, [r7, #4]
 8012136:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 8012138:	78fa      	ldrb	r2, [r7, #3]
 801213a:	7ffb      	ldrb	r3, [r7, #31]
 801213c:	9300      	str	r3, [sp, #0]
 801213e:	460b      	mov	r3, r1
 8012140:	6939      	ldr	r1, [r7, #16]
 8012142:	6878      	ldr	r0, [r7, #4]
 8012144:	f7ff f91a 	bl	801137c <tcp_create_segment>
 8012148:	60f8      	str	r0, [r7, #12]
 801214a:	68fb      	ldr	r3, [r7, #12]
 801214c:	2b00      	cmp	r3, #0
 801214e:	d109      	bne.n	8012164 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012150:	687b      	ldr	r3, [r7, #4]
 8012152:	8b5b      	ldrh	r3, [r3, #26]
 8012154:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012158:	b29a      	uxth	r2, r3
 801215a:	687b      	ldr	r3, [r7, #4]
 801215c:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801215e:	f04f 33ff 	mov.w	r3, #4294967295
 8012162:	e070      	b.n	8012246 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8012164:	68fb      	ldr	r3, [r7, #12]
 8012166:	68db      	ldr	r3, [r3, #12]
 8012168:	f003 0303 	and.w	r3, r3, #3
 801216c:	2b00      	cmp	r3, #0
 801216e:	d006      	beq.n	801217e <tcp_enqueue_flags+0xea>
 8012170:	4b37      	ldr	r3, [pc, #220]	@ (8012250 <tcp_enqueue_flags+0x1bc>)
 8012172:	f240 4242 	movw	r2, #1090	@ 0x442
 8012176:	493b      	ldr	r1, [pc, #236]	@ (8012264 <tcp_enqueue_flags+0x1d0>)
 8012178:	4837      	ldr	r0, [pc, #220]	@ (8012258 <tcp_enqueue_flags+0x1c4>)
 801217a:	f004 fa11 	bl	80165a0 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801217e:	68fb      	ldr	r3, [r7, #12]
 8012180:	891b      	ldrh	r3, [r3, #8]
 8012182:	2b00      	cmp	r3, #0
 8012184:	d006      	beq.n	8012194 <tcp_enqueue_flags+0x100>
 8012186:	4b32      	ldr	r3, [pc, #200]	@ (8012250 <tcp_enqueue_flags+0x1bc>)
 8012188:	f240 4243 	movw	r2, #1091	@ 0x443
 801218c:	4936      	ldr	r1, [pc, #216]	@ (8012268 <tcp_enqueue_flags+0x1d4>)
 801218e:	4832      	ldr	r0, [pc, #200]	@ (8012258 <tcp_enqueue_flags+0x1c4>)
 8012190:	f004 fa06 	bl	80165a0 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8012194:	687b      	ldr	r3, [r7, #4]
 8012196:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012198:	2b00      	cmp	r3, #0
 801219a:	d103      	bne.n	80121a4 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 801219c:	687b      	ldr	r3, [r7, #4]
 801219e:	68fa      	ldr	r2, [r7, #12]
 80121a0:	66da      	str	r2, [r3, #108]	@ 0x6c
 80121a2:	e00d      	b.n	80121c0 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 80121a4:	687b      	ldr	r3, [r7, #4]
 80121a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80121a8:	61bb      	str	r3, [r7, #24]
 80121aa:	e002      	b.n	80121b2 <tcp_enqueue_flags+0x11e>
 80121ac:	69bb      	ldr	r3, [r7, #24]
 80121ae:	681b      	ldr	r3, [r3, #0]
 80121b0:	61bb      	str	r3, [r7, #24]
 80121b2:	69bb      	ldr	r3, [r7, #24]
 80121b4:	681b      	ldr	r3, [r3, #0]
 80121b6:	2b00      	cmp	r3, #0
 80121b8:	d1f8      	bne.n	80121ac <tcp_enqueue_flags+0x118>
    useg->next = seg;
 80121ba:	69bb      	ldr	r3, [r7, #24]
 80121bc:	68fa      	ldr	r2, [r7, #12]
 80121be:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 80121c0:	687b      	ldr	r3, [r7, #4]
 80121c2:	2200      	movs	r2, #0
 80121c4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 80121c8:	78fb      	ldrb	r3, [r7, #3]
 80121ca:	f003 0302 	and.w	r3, r3, #2
 80121ce:	2b00      	cmp	r3, #0
 80121d0:	d104      	bne.n	80121dc <tcp_enqueue_flags+0x148>
 80121d2:	78fb      	ldrb	r3, [r7, #3]
 80121d4:	f003 0301 	and.w	r3, r3, #1
 80121d8:	2b00      	cmp	r3, #0
 80121da:	d004      	beq.n	80121e6 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 80121dc:	687b      	ldr	r3, [r7, #4]
 80121de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80121e0:	1c5a      	adds	r2, r3, #1
 80121e2:	687b      	ldr	r3, [r7, #4]
 80121e4:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 80121e6:	78fb      	ldrb	r3, [r7, #3]
 80121e8:	f003 0301 	and.w	r3, r3, #1
 80121ec:	2b00      	cmp	r3, #0
 80121ee:	d006      	beq.n	80121fe <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 80121f0:	687b      	ldr	r3, [r7, #4]
 80121f2:	8b5b      	ldrh	r3, [r3, #26]
 80121f4:	f043 0320 	orr.w	r3, r3, #32
 80121f8:	b29a      	uxth	r2, r3
 80121fa:	687b      	ldr	r3, [r7, #4]
 80121fc:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80121fe:	68fb      	ldr	r3, [r7, #12]
 8012200:	685b      	ldr	r3, [r3, #4]
 8012202:	4618      	mov	r0, r3
 8012204:	f7fa fcee 	bl	800cbe4 <pbuf_clen>
 8012208:	4603      	mov	r3, r0
 801220a:	461a      	mov	r2, r3
 801220c:	687b      	ldr	r3, [r7, #4]
 801220e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8012212:	4413      	add	r3, r2
 8012214:	b29a      	uxth	r2, r3
 8012216:	687b      	ldr	r3, [r7, #4]
 8012218:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801221c:	687b      	ldr	r3, [r7, #4]
 801221e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8012222:	2b00      	cmp	r3, #0
 8012224:	d00e      	beq.n	8012244 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8012226:	687b      	ldr	r3, [r7, #4]
 8012228:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801222a:	2b00      	cmp	r3, #0
 801222c:	d10a      	bne.n	8012244 <tcp_enqueue_flags+0x1b0>
 801222e:	687b      	ldr	r3, [r7, #4]
 8012230:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012232:	2b00      	cmp	r3, #0
 8012234:	d106      	bne.n	8012244 <tcp_enqueue_flags+0x1b0>
 8012236:	4b06      	ldr	r3, [pc, #24]	@ (8012250 <tcp_enqueue_flags+0x1bc>)
 8012238:	f240 4265 	movw	r2, #1125	@ 0x465
 801223c:	490b      	ldr	r1, [pc, #44]	@ (801226c <tcp_enqueue_flags+0x1d8>)
 801223e:	4806      	ldr	r0, [pc, #24]	@ (8012258 <tcp_enqueue_flags+0x1c4>)
 8012240:	f004 f9ae 	bl	80165a0 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8012244:	2300      	movs	r3, #0
}
 8012246:	4618      	mov	r0, r3
 8012248:	3720      	adds	r7, #32
 801224a:	46bd      	mov	sp, r7
 801224c:	bd80      	pop	{r7, pc}
 801224e:	bf00      	nop
 8012250:	08019cd0 	.word	0x08019cd0
 8012254:	0801a0f4 	.word	0x0801a0f4
 8012258:	08019d24 	.word	0x08019d24
 801225c:	0801a14c 	.word	0x0801a14c
 8012260:	0801a16c 	.word	0x0801a16c
 8012264:	0801a1a8 	.word	0x0801a1a8
 8012268:	0801a1c0 	.word	0x0801a1c0
 801226c:	0801a1ec 	.word	0x0801a1ec

08012270 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8012270:	b5b0      	push	{r4, r5, r7, lr}
 8012272:	b08a      	sub	sp, #40	@ 0x28
 8012274:	af00      	add	r7, sp, #0
 8012276:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8012278:	687b      	ldr	r3, [r7, #4]
 801227a:	2b00      	cmp	r3, #0
 801227c:	d106      	bne.n	801228c <tcp_output+0x1c>
 801227e:	4b8a      	ldr	r3, [pc, #552]	@ (80124a8 <tcp_output+0x238>)
 8012280:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 8012284:	4989      	ldr	r1, [pc, #548]	@ (80124ac <tcp_output+0x23c>)
 8012286:	488a      	ldr	r0, [pc, #552]	@ (80124b0 <tcp_output+0x240>)
 8012288:	f004 f98a 	bl	80165a0 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 801228c:	687b      	ldr	r3, [r7, #4]
 801228e:	7d1b      	ldrb	r3, [r3, #20]
 8012290:	2b01      	cmp	r3, #1
 8012292:	d106      	bne.n	80122a2 <tcp_output+0x32>
 8012294:	4b84      	ldr	r3, [pc, #528]	@ (80124a8 <tcp_output+0x238>)
 8012296:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 801229a:	4986      	ldr	r1, [pc, #536]	@ (80124b4 <tcp_output+0x244>)
 801229c:	4884      	ldr	r0, [pc, #528]	@ (80124b0 <tcp_output+0x240>)
 801229e:	f004 f97f 	bl	80165a0 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 80122a2:	4b85      	ldr	r3, [pc, #532]	@ (80124b8 <tcp_output+0x248>)
 80122a4:	681b      	ldr	r3, [r3, #0]
 80122a6:	687a      	ldr	r2, [r7, #4]
 80122a8:	429a      	cmp	r2, r3
 80122aa:	d101      	bne.n	80122b0 <tcp_output+0x40>
    return ERR_OK;
 80122ac:	2300      	movs	r3, #0
 80122ae:	e1ce      	b.n	801264e <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 80122b0:	687b      	ldr	r3, [r7, #4]
 80122b2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80122b6:	687b      	ldr	r3, [r7, #4]
 80122b8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80122bc:	4293      	cmp	r3, r2
 80122be:	bf28      	it	cs
 80122c0:	4613      	movcs	r3, r2
 80122c2:	b29b      	uxth	r3, r3
 80122c4:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 80122c6:	687b      	ldr	r3, [r7, #4]
 80122c8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80122ca:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 80122cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80122ce:	2b00      	cmp	r3, #0
 80122d0:	d10b      	bne.n	80122ea <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 80122d2:	687b      	ldr	r3, [r7, #4]
 80122d4:	8b5b      	ldrh	r3, [r3, #26]
 80122d6:	f003 0302 	and.w	r3, r3, #2
 80122da:	2b00      	cmp	r3, #0
 80122dc:	f000 81aa 	beq.w	8012634 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 80122e0:	6878      	ldr	r0, [r7, #4]
 80122e2:	f000 fdcb 	bl	8012e7c <tcp_send_empty_ack>
 80122e6:	4603      	mov	r3, r0
 80122e8:	e1b1      	b.n	801264e <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 80122ea:	6879      	ldr	r1, [r7, #4]
 80122ec:	687b      	ldr	r3, [r7, #4]
 80122ee:	3304      	adds	r3, #4
 80122f0:	461a      	mov	r2, r3
 80122f2:	6878      	ldr	r0, [r7, #4]
 80122f4:	f7ff f826 	bl	8011344 <tcp_route>
 80122f8:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 80122fa:	697b      	ldr	r3, [r7, #20]
 80122fc:	2b00      	cmp	r3, #0
 80122fe:	d102      	bne.n	8012306 <tcp_output+0x96>
    return ERR_RTE;
 8012300:	f06f 0303 	mvn.w	r3, #3
 8012304:	e1a3      	b.n	801264e <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8012306:	687b      	ldr	r3, [r7, #4]
 8012308:	2b00      	cmp	r3, #0
 801230a:	d003      	beq.n	8012314 <tcp_output+0xa4>
 801230c:	687b      	ldr	r3, [r7, #4]
 801230e:	681b      	ldr	r3, [r3, #0]
 8012310:	2b00      	cmp	r3, #0
 8012312:	d111      	bne.n	8012338 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8012314:	697b      	ldr	r3, [r7, #20]
 8012316:	2b00      	cmp	r3, #0
 8012318:	d002      	beq.n	8012320 <tcp_output+0xb0>
 801231a:	697b      	ldr	r3, [r7, #20]
 801231c:	3304      	adds	r3, #4
 801231e:	e000      	b.n	8012322 <tcp_output+0xb2>
 8012320:	2300      	movs	r3, #0
 8012322:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8012324:	693b      	ldr	r3, [r7, #16]
 8012326:	2b00      	cmp	r3, #0
 8012328:	d102      	bne.n	8012330 <tcp_output+0xc0>
      return ERR_RTE;
 801232a:	f06f 0303 	mvn.w	r3, #3
 801232e:	e18e      	b.n	801264e <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8012330:	693b      	ldr	r3, [r7, #16]
 8012332:	681a      	ldr	r2, [r3, #0]
 8012334:	687b      	ldr	r3, [r7, #4]
 8012336:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8012338:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801233a:	68db      	ldr	r3, [r3, #12]
 801233c:	685b      	ldr	r3, [r3, #4]
 801233e:	4618      	mov	r0, r3
 8012340:	f7f8 ffe5 	bl	800b30e <lwip_htonl>
 8012344:	4602      	mov	r2, r0
 8012346:	687b      	ldr	r3, [r7, #4]
 8012348:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801234a:	1ad3      	subs	r3, r2, r3
 801234c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801234e:	8912      	ldrh	r2, [r2, #8]
 8012350:	4413      	add	r3, r2
 8012352:	69ba      	ldr	r2, [r7, #24]
 8012354:	429a      	cmp	r2, r3
 8012356:	d227      	bcs.n	80123a8 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8012358:	687b      	ldr	r3, [r7, #4]
 801235a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801235e:	461a      	mov	r2, r3
 8012360:	69bb      	ldr	r3, [r7, #24]
 8012362:	4293      	cmp	r3, r2
 8012364:	d114      	bne.n	8012390 <tcp_output+0x120>
 8012366:	687b      	ldr	r3, [r7, #4]
 8012368:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801236a:	2b00      	cmp	r3, #0
 801236c:	d110      	bne.n	8012390 <tcp_output+0x120>
 801236e:	687b      	ldr	r3, [r7, #4]
 8012370:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8012374:	2b00      	cmp	r3, #0
 8012376:	d10b      	bne.n	8012390 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8012378:	687b      	ldr	r3, [r7, #4]
 801237a:	2200      	movs	r2, #0
 801237c:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
      pcb->persist_backoff = 1;
 8012380:	687b      	ldr	r3, [r7, #4]
 8012382:	2201      	movs	r2, #1
 8012384:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1
      pcb->persist_probe = 0;
 8012388:	687b      	ldr	r3, [r7, #4]
 801238a:	2200      	movs	r2, #0
 801238c:	f883 20a2 	strb.w	r2, [r3, #162]	@ 0xa2
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8012390:	687b      	ldr	r3, [r7, #4]
 8012392:	8b5b      	ldrh	r3, [r3, #26]
 8012394:	f003 0302 	and.w	r3, r3, #2
 8012398:	2b00      	cmp	r3, #0
 801239a:	f000 814d 	beq.w	8012638 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 801239e:	6878      	ldr	r0, [r7, #4]
 80123a0:	f000 fd6c 	bl	8012e7c <tcp_send_empty_ack>
 80123a4:	4603      	mov	r3, r0
 80123a6:	e152      	b.n	801264e <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 80123a8:	687b      	ldr	r3, [r7, #4]
 80123aa:	2200      	movs	r2, #0
 80123ac:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 80123b0:	687b      	ldr	r3, [r7, #4]
 80123b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80123b4:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 80123b6:	6a3b      	ldr	r3, [r7, #32]
 80123b8:	2b00      	cmp	r3, #0
 80123ba:	f000 811c 	beq.w	80125f6 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 80123be:	e002      	b.n	80123c6 <tcp_output+0x156>
 80123c0:	6a3b      	ldr	r3, [r7, #32]
 80123c2:	681b      	ldr	r3, [r3, #0]
 80123c4:	623b      	str	r3, [r7, #32]
 80123c6:	6a3b      	ldr	r3, [r7, #32]
 80123c8:	681b      	ldr	r3, [r3, #0]
 80123ca:	2b00      	cmp	r3, #0
 80123cc:	d1f8      	bne.n	80123c0 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 80123ce:	e112      	b.n	80125f6 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 80123d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80123d2:	68db      	ldr	r3, [r3, #12]
 80123d4:	899b      	ldrh	r3, [r3, #12]
 80123d6:	b29b      	uxth	r3, r3
 80123d8:	4618      	mov	r0, r3
 80123da:	f7f8 ff83 	bl	800b2e4 <lwip_htons>
 80123de:	4603      	mov	r3, r0
 80123e0:	b2db      	uxtb	r3, r3
 80123e2:	f003 0304 	and.w	r3, r3, #4
 80123e6:	2b00      	cmp	r3, #0
 80123e8:	d006      	beq.n	80123f8 <tcp_output+0x188>
 80123ea:	4b2f      	ldr	r3, [pc, #188]	@ (80124a8 <tcp_output+0x238>)
 80123ec:	f240 5236 	movw	r2, #1334	@ 0x536
 80123f0:	4932      	ldr	r1, [pc, #200]	@ (80124bc <tcp_output+0x24c>)
 80123f2:	482f      	ldr	r0, [pc, #188]	@ (80124b0 <tcp_output+0x240>)
 80123f4:	f004 f8d4 	bl	80165a0 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80123f8:	687b      	ldr	r3, [r7, #4]
 80123fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80123fc:	2b00      	cmp	r3, #0
 80123fe:	d01f      	beq.n	8012440 <tcp_output+0x1d0>
 8012400:	687b      	ldr	r3, [r7, #4]
 8012402:	8b5b      	ldrh	r3, [r3, #26]
 8012404:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 8012408:	2b00      	cmp	r3, #0
 801240a:	d119      	bne.n	8012440 <tcp_output+0x1d0>
 801240c:	687b      	ldr	r3, [r7, #4]
 801240e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012410:	2b00      	cmp	r3, #0
 8012412:	d00b      	beq.n	801242c <tcp_output+0x1bc>
 8012414:	687b      	ldr	r3, [r7, #4]
 8012416:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012418:	681b      	ldr	r3, [r3, #0]
 801241a:	2b00      	cmp	r3, #0
 801241c:	d110      	bne.n	8012440 <tcp_output+0x1d0>
 801241e:	687b      	ldr	r3, [r7, #4]
 8012420:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012422:	891a      	ldrh	r2, [r3, #8]
 8012424:	687b      	ldr	r3, [r7, #4]
 8012426:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012428:	429a      	cmp	r2, r3
 801242a:	d209      	bcs.n	8012440 <tcp_output+0x1d0>
 801242c:	687b      	ldr	r3, [r7, #4]
 801242e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8012432:	2b00      	cmp	r3, #0
 8012434:	d004      	beq.n	8012440 <tcp_output+0x1d0>
 8012436:	687b      	ldr	r3, [r7, #4]
 8012438:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801243c:	2b08      	cmp	r3, #8
 801243e:	d901      	bls.n	8012444 <tcp_output+0x1d4>
 8012440:	2301      	movs	r3, #1
 8012442:	e000      	b.n	8012446 <tcp_output+0x1d6>
 8012444:	2300      	movs	r3, #0
 8012446:	2b00      	cmp	r3, #0
 8012448:	d106      	bne.n	8012458 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 801244a:	687b      	ldr	r3, [r7, #4]
 801244c:	8b5b      	ldrh	r3, [r3, #26]
 801244e:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8012452:	2b00      	cmp	r3, #0
 8012454:	f000 80e4 	beq.w	8012620 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8012458:	687b      	ldr	r3, [r7, #4]
 801245a:	7d1b      	ldrb	r3, [r3, #20]
 801245c:	2b02      	cmp	r3, #2
 801245e:	d00d      	beq.n	801247c <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8012460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012462:	68db      	ldr	r3, [r3, #12]
 8012464:	899b      	ldrh	r3, [r3, #12]
 8012466:	b29c      	uxth	r4, r3
 8012468:	2010      	movs	r0, #16
 801246a:	f7f8 ff3b 	bl	800b2e4 <lwip_htons>
 801246e:	4603      	mov	r3, r0
 8012470:	461a      	mov	r2, r3
 8012472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012474:	68db      	ldr	r3, [r3, #12]
 8012476:	4322      	orrs	r2, r4
 8012478:	b292      	uxth	r2, r2
 801247a:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 801247c:	697a      	ldr	r2, [r7, #20]
 801247e:	6879      	ldr	r1, [r7, #4]
 8012480:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8012482:	f000 f909 	bl	8012698 <tcp_output_segment>
 8012486:	4603      	mov	r3, r0
 8012488:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 801248a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801248e:	2b00      	cmp	r3, #0
 8012490:	d016      	beq.n	80124c0 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012492:	687b      	ldr	r3, [r7, #4]
 8012494:	8b5b      	ldrh	r3, [r3, #26]
 8012496:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801249a:	b29a      	uxth	r2, r3
 801249c:	687b      	ldr	r3, [r7, #4]
 801249e:	835a      	strh	r2, [r3, #26]
      return err;
 80124a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80124a4:	e0d3      	b.n	801264e <tcp_output+0x3de>
 80124a6:	bf00      	nop
 80124a8:	08019cd0 	.word	0x08019cd0
 80124ac:	0801a214 	.word	0x0801a214
 80124b0:	08019d24 	.word	0x08019d24
 80124b4:	0801a22c 	.word	0x0801a22c
 80124b8:	2000ed8c 	.word	0x2000ed8c
 80124bc:	0801a254 	.word	0x0801a254
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 80124c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80124c2:	681a      	ldr	r2, [r3, #0]
 80124c4:	687b      	ldr	r3, [r7, #4]
 80124c6:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 80124c8:	687b      	ldr	r3, [r7, #4]
 80124ca:	7d1b      	ldrb	r3, [r3, #20]
 80124cc:	2b02      	cmp	r3, #2
 80124ce:	d006      	beq.n	80124de <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80124d0:	687b      	ldr	r3, [r7, #4]
 80124d2:	8b5b      	ldrh	r3, [r3, #26]
 80124d4:	f023 0303 	bic.w	r3, r3, #3
 80124d8:	b29a      	uxth	r2, r3
 80124da:	687b      	ldr	r3, [r7, #4]
 80124dc:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80124de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80124e0:	68db      	ldr	r3, [r3, #12]
 80124e2:	685b      	ldr	r3, [r3, #4]
 80124e4:	4618      	mov	r0, r3
 80124e6:	f7f8 ff12 	bl	800b30e <lwip_htonl>
 80124ea:	4604      	mov	r4, r0
 80124ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80124ee:	891b      	ldrh	r3, [r3, #8]
 80124f0:	461d      	mov	r5, r3
 80124f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80124f4:	68db      	ldr	r3, [r3, #12]
 80124f6:	899b      	ldrh	r3, [r3, #12]
 80124f8:	b29b      	uxth	r3, r3
 80124fa:	4618      	mov	r0, r3
 80124fc:	f7f8 fef2 	bl	800b2e4 <lwip_htons>
 8012500:	4603      	mov	r3, r0
 8012502:	b2db      	uxtb	r3, r3
 8012504:	f003 0303 	and.w	r3, r3, #3
 8012508:	2b00      	cmp	r3, #0
 801250a:	d001      	beq.n	8012510 <tcp_output+0x2a0>
 801250c:	2301      	movs	r3, #1
 801250e:	e000      	b.n	8012512 <tcp_output+0x2a2>
 8012510:	2300      	movs	r3, #0
 8012512:	442b      	add	r3, r5
 8012514:	4423      	add	r3, r4
 8012516:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8012518:	687b      	ldr	r3, [r7, #4]
 801251a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801251c:	68bb      	ldr	r3, [r7, #8]
 801251e:	1ad3      	subs	r3, r2, r3
 8012520:	2b00      	cmp	r3, #0
 8012522:	da02      	bge.n	801252a <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8012524:	687b      	ldr	r3, [r7, #4]
 8012526:	68ba      	ldr	r2, [r7, #8]
 8012528:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 801252a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801252c:	891b      	ldrh	r3, [r3, #8]
 801252e:	461c      	mov	r4, r3
 8012530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012532:	68db      	ldr	r3, [r3, #12]
 8012534:	899b      	ldrh	r3, [r3, #12]
 8012536:	b29b      	uxth	r3, r3
 8012538:	4618      	mov	r0, r3
 801253a:	f7f8 fed3 	bl	800b2e4 <lwip_htons>
 801253e:	4603      	mov	r3, r0
 8012540:	b2db      	uxtb	r3, r3
 8012542:	f003 0303 	and.w	r3, r3, #3
 8012546:	2b00      	cmp	r3, #0
 8012548:	d001      	beq.n	801254e <tcp_output+0x2de>
 801254a:	2301      	movs	r3, #1
 801254c:	e000      	b.n	8012550 <tcp_output+0x2e0>
 801254e:	2300      	movs	r3, #0
 8012550:	4423      	add	r3, r4
 8012552:	2b00      	cmp	r3, #0
 8012554:	d049      	beq.n	80125ea <tcp_output+0x37a>
      seg->next = NULL;
 8012556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012558:	2200      	movs	r2, #0
 801255a:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 801255c:	687b      	ldr	r3, [r7, #4]
 801255e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012560:	2b00      	cmp	r3, #0
 8012562:	d105      	bne.n	8012570 <tcp_output+0x300>
        pcb->unacked = seg;
 8012564:	687b      	ldr	r3, [r7, #4]
 8012566:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012568:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 801256a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801256c:	623b      	str	r3, [r7, #32]
 801256e:	e03f      	b.n	80125f0 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8012570:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012572:	68db      	ldr	r3, [r3, #12]
 8012574:	685b      	ldr	r3, [r3, #4]
 8012576:	4618      	mov	r0, r3
 8012578:	f7f8 fec9 	bl	800b30e <lwip_htonl>
 801257c:	4604      	mov	r4, r0
 801257e:	6a3b      	ldr	r3, [r7, #32]
 8012580:	68db      	ldr	r3, [r3, #12]
 8012582:	685b      	ldr	r3, [r3, #4]
 8012584:	4618      	mov	r0, r3
 8012586:	f7f8 fec2 	bl	800b30e <lwip_htonl>
 801258a:	4603      	mov	r3, r0
 801258c:	1ae3      	subs	r3, r4, r3
 801258e:	2b00      	cmp	r3, #0
 8012590:	da24      	bge.n	80125dc <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8012592:	687b      	ldr	r3, [r7, #4]
 8012594:	3370      	adds	r3, #112	@ 0x70
 8012596:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8012598:	e002      	b.n	80125a0 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 801259a:	69fb      	ldr	r3, [r7, #28]
 801259c:	681b      	ldr	r3, [r3, #0]
 801259e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80125a0:	69fb      	ldr	r3, [r7, #28]
 80125a2:	681b      	ldr	r3, [r3, #0]
 80125a4:	2b00      	cmp	r3, #0
 80125a6:	d011      	beq.n	80125cc <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80125a8:	69fb      	ldr	r3, [r7, #28]
 80125aa:	681b      	ldr	r3, [r3, #0]
 80125ac:	68db      	ldr	r3, [r3, #12]
 80125ae:	685b      	ldr	r3, [r3, #4]
 80125b0:	4618      	mov	r0, r3
 80125b2:	f7f8 feac 	bl	800b30e <lwip_htonl>
 80125b6:	4604      	mov	r4, r0
 80125b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80125ba:	68db      	ldr	r3, [r3, #12]
 80125bc:	685b      	ldr	r3, [r3, #4]
 80125be:	4618      	mov	r0, r3
 80125c0:	f7f8 fea5 	bl	800b30e <lwip_htonl>
 80125c4:	4603      	mov	r3, r0
 80125c6:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 80125c8:	2b00      	cmp	r3, #0
 80125ca:	dbe6      	blt.n	801259a <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 80125cc:	69fb      	ldr	r3, [r7, #28]
 80125ce:	681a      	ldr	r2, [r3, #0]
 80125d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80125d2:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 80125d4:	69fb      	ldr	r3, [r7, #28]
 80125d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80125d8:	601a      	str	r2, [r3, #0]
 80125da:	e009      	b.n	80125f0 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 80125dc:	6a3b      	ldr	r3, [r7, #32]
 80125de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80125e0:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 80125e2:	6a3b      	ldr	r3, [r7, #32]
 80125e4:	681b      	ldr	r3, [r3, #0]
 80125e6:	623b      	str	r3, [r7, #32]
 80125e8:	e002      	b.n	80125f0 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 80125ea:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80125ec:	f7fb ff17 	bl	800e41e <tcp_seg_free>
    }
    seg = pcb->unsent;
 80125f0:	687b      	ldr	r3, [r7, #4]
 80125f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80125f4:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 80125f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80125f8:	2b00      	cmp	r3, #0
 80125fa:	d012      	beq.n	8012622 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 80125fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80125fe:	68db      	ldr	r3, [r3, #12]
 8012600:	685b      	ldr	r3, [r3, #4]
 8012602:	4618      	mov	r0, r3
 8012604:	f7f8 fe83 	bl	800b30e <lwip_htonl>
 8012608:	4602      	mov	r2, r0
 801260a:	687b      	ldr	r3, [r7, #4]
 801260c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801260e:	1ad3      	subs	r3, r2, r3
 8012610:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012612:	8912      	ldrh	r2, [r2, #8]
 8012614:	4413      	add	r3, r2
  while (seg != NULL &&
 8012616:	69ba      	ldr	r2, [r7, #24]
 8012618:	429a      	cmp	r2, r3
 801261a:	f4bf aed9 	bcs.w	80123d0 <tcp_output+0x160>
 801261e:	e000      	b.n	8012622 <tcp_output+0x3b2>
      break;
 8012620:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8012622:	687b      	ldr	r3, [r7, #4]
 8012624:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012626:	2b00      	cmp	r3, #0
 8012628:	d108      	bne.n	801263c <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801262a:	687b      	ldr	r3, [r7, #4]
 801262c:	2200      	movs	r2, #0
 801262e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 8012632:	e004      	b.n	801263e <tcp_output+0x3ce>
    goto output_done;
 8012634:	bf00      	nop
 8012636:	e002      	b.n	801263e <tcp_output+0x3ce>
    goto output_done;
 8012638:	bf00      	nop
 801263a:	e000      	b.n	801263e <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 801263c:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801263e:	687b      	ldr	r3, [r7, #4]
 8012640:	8b5b      	ldrh	r3, [r3, #26]
 8012642:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8012646:	b29a      	uxth	r2, r3
 8012648:	687b      	ldr	r3, [r7, #4]
 801264a:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 801264c:	2300      	movs	r3, #0
}
 801264e:	4618      	mov	r0, r3
 8012650:	3728      	adds	r7, #40	@ 0x28
 8012652:	46bd      	mov	sp, r7
 8012654:	bdb0      	pop	{r4, r5, r7, pc}
 8012656:	bf00      	nop

08012658 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8012658:	b580      	push	{r7, lr}
 801265a:	b082      	sub	sp, #8
 801265c:	af00      	add	r7, sp, #0
 801265e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8012660:	687b      	ldr	r3, [r7, #4]
 8012662:	2b00      	cmp	r3, #0
 8012664:	d106      	bne.n	8012674 <tcp_output_segment_busy+0x1c>
 8012666:	4b09      	ldr	r3, [pc, #36]	@ (801268c <tcp_output_segment_busy+0x34>)
 8012668:	f240 529a 	movw	r2, #1434	@ 0x59a
 801266c:	4908      	ldr	r1, [pc, #32]	@ (8012690 <tcp_output_segment_busy+0x38>)
 801266e:	4809      	ldr	r0, [pc, #36]	@ (8012694 <tcp_output_segment_busy+0x3c>)
 8012670:	f003 ff96 	bl	80165a0 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8012674:	687b      	ldr	r3, [r7, #4]
 8012676:	685b      	ldr	r3, [r3, #4]
 8012678:	7b9b      	ldrb	r3, [r3, #14]
 801267a:	2b01      	cmp	r3, #1
 801267c:	d001      	beq.n	8012682 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 801267e:	2301      	movs	r3, #1
 8012680:	e000      	b.n	8012684 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8012682:	2300      	movs	r3, #0
}
 8012684:	4618      	mov	r0, r3
 8012686:	3708      	adds	r7, #8
 8012688:	46bd      	mov	sp, r7
 801268a:	bd80      	pop	{r7, pc}
 801268c:	08019cd0 	.word	0x08019cd0
 8012690:	0801a26c 	.word	0x0801a26c
 8012694:	08019d24 	.word	0x08019d24

08012698 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8012698:	b5b0      	push	{r4, r5, r7, lr}
 801269a:	b08c      	sub	sp, #48	@ 0x30
 801269c:	af04      	add	r7, sp, #16
 801269e:	60f8      	str	r0, [r7, #12]
 80126a0:	60b9      	str	r1, [r7, #8]
 80126a2:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 80126a4:	68fb      	ldr	r3, [r7, #12]
 80126a6:	2b00      	cmp	r3, #0
 80126a8:	d106      	bne.n	80126b8 <tcp_output_segment+0x20>
 80126aa:	4b64      	ldr	r3, [pc, #400]	@ (801283c <tcp_output_segment+0x1a4>)
 80126ac:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 80126b0:	4963      	ldr	r1, [pc, #396]	@ (8012840 <tcp_output_segment+0x1a8>)
 80126b2:	4864      	ldr	r0, [pc, #400]	@ (8012844 <tcp_output_segment+0x1ac>)
 80126b4:	f003 ff74 	bl	80165a0 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 80126b8:	68bb      	ldr	r3, [r7, #8]
 80126ba:	2b00      	cmp	r3, #0
 80126bc:	d106      	bne.n	80126cc <tcp_output_segment+0x34>
 80126be:	4b5f      	ldr	r3, [pc, #380]	@ (801283c <tcp_output_segment+0x1a4>)
 80126c0:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 80126c4:	4960      	ldr	r1, [pc, #384]	@ (8012848 <tcp_output_segment+0x1b0>)
 80126c6:	485f      	ldr	r0, [pc, #380]	@ (8012844 <tcp_output_segment+0x1ac>)
 80126c8:	f003 ff6a 	bl	80165a0 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 80126cc:	687b      	ldr	r3, [r7, #4]
 80126ce:	2b00      	cmp	r3, #0
 80126d0:	d106      	bne.n	80126e0 <tcp_output_segment+0x48>
 80126d2:	4b5a      	ldr	r3, [pc, #360]	@ (801283c <tcp_output_segment+0x1a4>)
 80126d4:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 80126d8:	495c      	ldr	r1, [pc, #368]	@ (801284c <tcp_output_segment+0x1b4>)
 80126da:	485a      	ldr	r0, [pc, #360]	@ (8012844 <tcp_output_segment+0x1ac>)
 80126dc:	f003 ff60 	bl	80165a0 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 80126e0:	68f8      	ldr	r0, [r7, #12]
 80126e2:	f7ff ffb9 	bl	8012658 <tcp_output_segment_busy>
 80126e6:	4603      	mov	r3, r0
 80126e8:	2b00      	cmp	r3, #0
 80126ea:	d001      	beq.n	80126f0 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 80126ec:	2300      	movs	r3, #0
 80126ee:	e0a1      	b.n	8012834 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 80126f0:	68bb      	ldr	r3, [r7, #8]
 80126f2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80126f4:	68fb      	ldr	r3, [r7, #12]
 80126f6:	68dc      	ldr	r4, [r3, #12]
 80126f8:	4610      	mov	r0, r2
 80126fa:	f7f8 fe08 	bl	800b30e <lwip_htonl>
 80126fe:	4603      	mov	r3, r0
 8012700:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8012702:	68bb      	ldr	r3, [r7, #8]
 8012704:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8012706:	68fb      	ldr	r3, [r7, #12]
 8012708:	68dc      	ldr	r4, [r3, #12]
 801270a:	4610      	mov	r0, r2
 801270c:	f7f8 fdea 	bl	800b2e4 <lwip_htons>
 8012710:	4603      	mov	r3, r0
 8012712:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8012714:	68bb      	ldr	r3, [r7, #8]
 8012716:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012718:	68ba      	ldr	r2, [r7, #8]
 801271a:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 801271c:	441a      	add	r2, r3
 801271e:	68bb      	ldr	r3, [r7, #8]
 8012720:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8012722:	68fb      	ldr	r3, [r7, #12]
 8012724:	68db      	ldr	r3, [r3, #12]
 8012726:	3314      	adds	r3, #20
 8012728:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801272a:	68fb      	ldr	r3, [r7, #12]
 801272c:	7a9b      	ldrb	r3, [r3, #10]
 801272e:	f003 0301 	and.w	r3, r3, #1
 8012732:	2b00      	cmp	r3, #0
 8012734:	d015      	beq.n	8012762 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8012736:	68bb      	ldr	r3, [r7, #8]
 8012738:	3304      	adds	r3, #4
 801273a:	461a      	mov	r2, r3
 801273c:	6879      	ldr	r1, [r7, #4]
 801273e:	f44f 7006 	mov.w	r0, #536	@ 0x218
 8012742:	f7fc fa39 	bl	800ebb8 <tcp_eff_send_mss_netif>
 8012746:	4603      	mov	r3, r0
 8012748:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801274a:	8b7b      	ldrh	r3, [r7, #26]
 801274c:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 8012750:	4618      	mov	r0, r3
 8012752:	f7f8 fddc 	bl	800b30e <lwip_htonl>
 8012756:	4602      	mov	r2, r0
 8012758:	69fb      	ldr	r3, [r7, #28]
 801275a:	601a      	str	r2, [r3, #0]
    opts += 1;
 801275c:	69fb      	ldr	r3, [r7, #28]
 801275e:	3304      	adds	r3, #4
 8012760:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8012762:	68bb      	ldr	r3, [r7, #8]
 8012764:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8012768:	2b00      	cmp	r3, #0
 801276a:	da02      	bge.n	8012772 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 801276c:	68bb      	ldr	r3, [r7, #8]
 801276e:	2200      	movs	r2, #0
 8012770:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 8012772:	68bb      	ldr	r3, [r7, #8]
 8012774:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012776:	2b00      	cmp	r3, #0
 8012778:	d10c      	bne.n	8012794 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 801277a:	4b35      	ldr	r3, [pc, #212]	@ (8012850 <tcp_output_segment+0x1b8>)
 801277c:	681a      	ldr	r2, [r3, #0]
 801277e:	68bb      	ldr	r3, [r7, #8]
 8012780:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8012782:	68fb      	ldr	r3, [r7, #12]
 8012784:	68db      	ldr	r3, [r3, #12]
 8012786:	685b      	ldr	r3, [r3, #4]
 8012788:	4618      	mov	r0, r3
 801278a:	f7f8 fdc0 	bl	800b30e <lwip_htonl>
 801278e:	4602      	mov	r2, r0
 8012790:	68bb      	ldr	r3, [r7, #8]
 8012792:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8012794:	68fb      	ldr	r3, [r7, #12]
 8012796:	68da      	ldr	r2, [r3, #12]
 8012798:	68fb      	ldr	r3, [r7, #12]
 801279a:	685b      	ldr	r3, [r3, #4]
 801279c:	685b      	ldr	r3, [r3, #4]
 801279e:	1ad3      	subs	r3, r2, r3
 80127a0:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 80127a2:	68fb      	ldr	r3, [r7, #12]
 80127a4:	685b      	ldr	r3, [r3, #4]
 80127a6:	8959      	ldrh	r1, [r3, #10]
 80127a8:	68fb      	ldr	r3, [r7, #12]
 80127aa:	685b      	ldr	r3, [r3, #4]
 80127ac:	8b3a      	ldrh	r2, [r7, #24]
 80127ae:	1a8a      	subs	r2, r1, r2
 80127b0:	b292      	uxth	r2, r2
 80127b2:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 80127b4:	68fb      	ldr	r3, [r7, #12]
 80127b6:	685b      	ldr	r3, [r3, #4]
 80127b8:	8919      	ldrh	r1, [r3, #8]
 80127ba:	68fb      	ldr	r3, [r7, #12]
 80127bc:	685b      	ldr	r3, [r3, #4]
 80127be:	8b3a      	ldrh	r2, [r7, #24]
 80127c0:	1a8a      	subs	r2, r1, r2
 80127c2:	b292      	uxth	r2, r2
 80127c4:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 80127c6:	68fb      	ldr	r3, [r7, #12]
 80127c8:	685b      	ldr	r3, [r3, #4]
 80127ca:	68fa      	ldr	r2, [r7, #12]
 80127cc:	68d2      	ldr	r2, [r2, #12]
 80127ce:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 80127d0:	68fb      	ldr	r3, [r7, #12]
 80127d2:	68db      	ldr	r3, [r3, #12]
 80127d4:	2200      	movs	r2, #0
 80127d6:	741a      	strb	r2, [r3, #16]
 80127d8:	2200      	movs	r2, #0
 80127da:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 80127dc:	68fb      	ldr	r3, [r7, #12]
 80127de:	68da      	ldr	r2, [r3, #12]
 80127e0:	68fb      	ldr	r3, [r7, #12]
 80127e2:	7a9b      	ldrb	r3, [r3, #10]
 80127e4:	f003 0301 	and.w	r3, r3, #1
 80127e8:	2b00      	cmp	r3, #0
 80127ea:	d001      	beq.n	80127f0 <tcp_output_segment+0x158>
 80127ec:	2318      	movs	r3, #24
 80127ee:	e000      	b.n	80127f2 <tcp_output_segment+0x15a>
 80127f0:	2314      	movs	r3, #20
 80127f2:	4413      	add	r3, r2
 80127f4:	69fa      	ldr	r2, [r7, #28]
 80127f6:	429a      	cmp	r2, r3
 80127f8:	d006      	beq.n	8012808 <tcp_output_segment+0x170>
 80127fa:	4b10      	ldr	r3, [pc, #64]	@ (801283c <tcp_output_segment+0x1a4>)
 80127fc:	f240 621c 	movw	r2, #1564	@ 0x61c
 8012800:	4914      	ldr	r1, [pc, #80]	@ (8012854 <tcp_output_segment+0x1bc>)
 8012802:	4810      	ldr	r0, [pc, #64]	@ (8012844 <tcp_output_segment+0x1ac>)
 8012804:	f003 fecc 	bl	80165a0 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8012808:	68fb      	ldr	r3, [r7, #12]
 801280a:	6858      	ldr	r0, [r3, #4]
 801280c:	68b9      	ldr	r1, [r7, #8]
 801280e:	68bb      	ldr	r3, [r7, #8]
 8012810:	1d1c      	adds	r4, r3, #4
 8012812:	68bb      	ldr	r3, [r7, #8]
 8012814:	7add      	ldrb	r5, [r3, #11]
 8012816:	68bb      	ldr	r3, [r7, #8]
 8012818:	7a9b      	ldrb	r3, [r3, #10]
 801281a:	687a      	ldr	r2, [r7, #4]
 801281c:	9202      	str	r2, [sp, #8]
 801281e:	2206      	movs	r2, #6
 8012820:	9201      	str	r2, [sp, #4]
 8012822:	9300      	str	r3, [sp, #0]
 8012824:	462b      	mov	r3, r5
 8012826:	4622      	mov	r2, r4
 8012828:	f002 fbaa 	bl	8014f80 <ip4_output_if>
 801282c:	4603      	mov	r3, r0
 801282e:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8012830:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012834:	4618      	mov	r0, r3
 8012836:	3720      	adds	r7, #32
 8012838:	46bd      	mov	sp, r7
 801283a:	bdb0      	pop	{r4, r5, r7, pc}
 801283c:	08019cd0 	.word	0x08019cd0
 8012840:	0801a294 	.word	0x0801a294
 8012844:	08019d24 	.word	0x08019d24
 8012848:	0801a2b4 	.word	0x0801a2b4
 801284c:	0801a2d4 	.word	0x0801a2d4
 8012850:	2000ed40 	.word	0x2000ed40
 8012854:	0801a2f8 	.word	0x0801a2f8

08012858 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8012858:	b5b0      	push	{r4, r5, r7, lr}
 801285a:	b084      	sub	sp, #16
 801285c:	af00      	add	r7, sp, #0
 801285e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8012860:	687b      	ldr	r3, [r7, #4]
 8012862:	2b00      	cmp	r3, #0
 8012864:	d106      	bne.n	8012874 <tcp_rexmit_rto_prepare+0x1c>
 8012866:	4b31      	ldr	r3, [pc, #196]	@ (801292c <tcp_rexmit_rto_prepare+0xd4>)
 8012868:	f240 6263 	movw	r2, #1635	@ 0x663
 801286c:	4930      	ldr	r1, [pc, #192]	@ (8012930 <tcp_rexmit_rto_prepare+0xd8>)
 801286e:	4831      	ldr	r0, [pc, #196]	@ (8012934 <tcp_rexmit_rto_prepare+0xdc>)
 8012870:	f003 fe96 	bl	80165a0 <iprintf>

  if (pcb->unacked == NULL) {
 8012874:	687b      	ldr	r3, [r7, #4]
 8012876:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012878:	2b00      	cmp	r3, #0
 801287a:	d102      	bne.n	8012882 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 801287c:	f06f 0305 	mvn.w	r3, #5
 8012880:	e050      	b.n	8012924 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8012882:	687b      	ldr	r3, [r7, #4]
 8012884:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012886:	60fb      	str	r3, [r7, #12]
 8012888:	e00b      	b.n	80128a2 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 801288a:	68f8      	ldr	r0, [r7, #12]
 801288c:	f7ff fee4 	bl	8012658 <tcp_output_segment_busy>
 8012890:	4603      	mov	r3, r0
 8012892:	2b00      	cmp	r3, #0
 8012894:	d002      	beq.n	801289c <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8012896:	f06f 0305 	mvn.w	r3, #5
 801289a:	e043      	b.n	8012924 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801289c:	68fb      	ldr	r3, [r7, #12]
 801289e:	681b      	ldr	r3, [r3, #0]
 80128a0:	60fb      	str	r3, [r7, #12]
 80128a2:	68fb      	ldr	r3, [r7, #12]
 80128a4:	681b      	ldr	r3, [r3, #0]
 80128a6:	2b00      	cmp	r3, #0
 80128a8:	d1ef      	bne.n	801288a <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 80128aa:	68f8      	ldr	r0, [r7, #12]
 80128ac:	f7ff fed4 	bl	8012658 <tcp_output_segment_busy>
 80128b0:	4603      	mov	r3, r0
 80128b2:	2b00      	cmp	r3, #0
 80128b4:	d002      	beq.n	80128bc <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 80128b6:	f06f 0305 	mvn.w	r3, #5
 80128ba:	e033      	b.n	8012924 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 80128bc:	687b      	ldr	r3, [r7, #4]
 80128be:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80128c0:	68fb      	ldr	r3, [r7, #12]
 80128c2:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 80128c4:	687b      	ldr	r3, [r7, #4]
 80128c6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80128c8:	687b      	ldr	r3, [r7, #4]
 80128ca:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 80128cc:	687b      	ldr	r3, [r7, #4]
 80128ce:	2200      	movs	r2, #0
 80128d0:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 80128d2:	687b      	ldr	r3, [r7, #4]
 80128d4:	8b5b      	ldrh	r3, [r3, #26]
 80128d6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80128da:	b29a      	uxth	r2, r3
 80128dc:	687b      	ldr	r3, [r7, #4]
 80128de:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80128e0:	68fb      	ldr	r3, [r7, #12]
 80128e2:	68db      	ldr	r3, [r3, #12]
 80128e4:	685b      	ldr	r3, [r3, #4]
 80128e6:	4618      	mov	r0, r3
 80128e8:	f7f8 fd11 	bl	800b30e <lwip_htonl>
 80128ec:	4604      	mov	r4, r0
 80128ee:	68fb      	ldr	r3, [r7, #12]
 80128f0:	891b      	ldrh	r3, [r3, #8]
 80128f2:	461d      	mov	r5, r3
 80128f4:	68fb      	ldr	r3, [r7, #12]
 80128f6:	68db      	ldr	r3, [r3, #12]
 80128f8:	899b      	ldrh	r3, [r3, #12]
 80128fa:	b29b      	uxth	r3, r3
 80128fc:	4618      	mov	r0, r3
 80128fe:	f7f8 fcf1 	bl	800b2e4 <lwip_htons>
 8012902:	4603      	mov	r3, r0
 8012904:	b2db      	uxtb	r3, r3
 8012906:	f003 0303 	and.w	r3, r3, #3
 801290a:	2b00      	cmp	r3, #0
 801290c:	d001      	beq.n	8012912 <tcp_rexmit_rto_prepare+0xba>
 801290e:	2301      	movs	r3, #1
 8012910:	e000      	b.n	8012914 <tcp_rexmit_rto_prepare+0xbc>
 8012912:	2300      	movs	r3, #0
 8012914:	442b      	add	r3, r5
 8012916:	18e2      	adds	r2, r4, r3
 8012918:	687b      	ldr	r3, [r7, #4]
 801291a:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 801291c:	687b      	ldr	r3, [r7, #4]
 801291e:	2200      	movs	r2, #0
 8012920:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 8012922:	2300      	movs	r3, #0
}
 8012924:	4618      	mov	r0, r3
 8012926:	3710      	adds	r7, #16
 8012928:	46bd      	mov	sp, r7
 801292a:	bdb0      	pop	{r4, r5, r7, pc}
 801292c:	08019cd0 	.word	0x08019cd0
 8012930:	0801a30c 	.word	0x0801a30c
 8012934:	08019d24 	.word	0x08019d24

08012938 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8012938:	b580      	push	{r7, lr}
 801293a:	b082      	sub	sp, #8
 801293c:	af00      	add	r7, sp, #0
 801293e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8012940:	687b      	ldr	r3, [r7, #4]
 8012942:	2b00      	cmp	r3, #0
 8012944:	d106      	bne.n	8012954 <tcp_rexmit_rto_commit+0x1c>
 8012946:	4b0d      	ldr	r3, [pc, #52]	@ (801297c <tcp_rexmit_rto_commit+0x44>)
 8012948:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 801294c:	490c      	ldr	r1, [pc, #48]	@ (8012980 <tcp_rexmit_rto_commit+0x48>)
 801294e:	480d      	ldr	r0, [pc, #52]	@ (8012984 <tcp_rexmit_rto_commit+0x4c>)
 8012950:	f003 fe26 	bl	80165a0 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8012954:	687b      	ldr	r3, [r7, #4]
 8012956:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801295a:	2bff      	cmp	r3, #255	@ 0xff
 801295c:	d007      	beq.n	801296e <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 801295e:	687b      	ldr	r3, [r7, #4]
 8012960:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8012964:	3301      	adds	r3, #1
 8012966:	b2da      	uxtb	r2, r3
 8012968:	687b      	ldr	r3, [r7, #4]
 801296a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 801296e:	6878      	ldr	r0, [r7, #4]
 8012970:	f7ff fc7e 	bl	8012270 <tcp_output>
}
 8012974:	bf00      	nop
 8012976:	3708      	adds	r7, #8
 8012978:	46bd      	mov	sp, r7
 801297a:	bd80      	pop	{r7, pc}
 801297c:	08019cd0 	.word	0x08019cd0
 8012980:	0801a330 	.word	0x0801a330
 8012984:	08019d24 	.word	0x08019d24

08012988 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8012988:	b580      	push	{r7, lr}
 801298a:	b082      	sub	sp, #8
 801298c:	af00      	add	r7, sp, #0
 801298e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8012990:	687b      	ldr	r3, [r7, #4]
 8012992:	2b00      	cmp	r3, #0
 8012994:	d106      	bne.n	80129a4 <tcp_rexmit_rto+0x1c>
 8012996:	4b0a      	ldr	r3, [pc, #40]	@ (80129c0 <tcp_rexmit_rto+0x38>)
 8012998:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 801299c:	4909      	ldr	r1, [pc, #36]	@ (80129c4 <tcp_rexmit_rto+0x3c>)
 801299e:	480a      	ldr	r0, [pc, #40]	@ (80129c8 <tcp_rexmit_rto+0x40>)
 80129a0:	f003 fdfe 	bl	80165a0 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 80129a4:	6878      	ldr	r0, [r7, #4]
 80129a6:	f7ff ff57 	bl	8012858 <tcp_rexmit_rto_prepare>
 80129aa:	4603      	mov	r3, r0
 80129ac:	2b00      	cmp	r3, #0
 80129ae:	d102      	bne.n	80129b6 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 80129b0:	6878      	ldr	r0, [r7, #4]
 80129b2:	f7ff ffc1 	bl	8012938 <tcp_rexmit_rto_commit>
  }
}
 80129b6:	bf00      	nop
 80129b8:	3708      	adds	r7, #8
 80129ba:	46bd      	mov	sp, r7
 80129bc:	bd80      	pop	{r7, pc}
 80129be:	bf00      	nop
 80129c0:	08019cd0 	.word	0x08019cd0
 80129c4:	0801a354 	.word	0x0801a354
 80129c8:	08019d24 	.word	0x08019d24

080129cc <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 80129cc:	b590      	push	{r4, r7, lr}
 80129ce:	b085      	sub	sp, #20
 80129d0:	af00      	add	r7, sp, #0
 80129d2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 80129d4:	687b      	ldr	r3, [r7, #4]
 80129d6:	2b00      	cmp	r3, #0
 80129d8:	d106      	bne.n	80129e8 <tcp_rexmit+0x1c>
 80129da:	4b2f      	ldr	r3, [pc, #188]	@ (8012a98 <tcp_rexmit+0xcc>)
 80129dc:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 80129e0:	492e      	ldr	r1, [pc, #184]	@ (8012a9c <tcp_rexmit+0xd0>)
 80129e2:	482f      	ldr	r0, [pc, #188]	@ (8012aa0 <tcp_rexmit+0xd4>)
 80129e4:	f003 fddc 	bl	80165a0 <iprintf>

  if (pcb->unacked == NULL) {
 80129e8:	687b      	ldr	r3, [r7, #4]
 80129ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80129ec:	2b00      	cmp	r3, #0
 80129ee:	d102      	bne.n	80129f6 <tcp_rexmit+0x2a>
    return ERR_VAL;
 80129f0:	f06f 0305 	mvn.w	r3, #5
 80129f4:	e04c      	b.n	8012a90 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 80129f6:	687b      	ldr	r3, [r7, #4]
 80129f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80129fa:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 80129fc:	68b8      	ldr	r0, [r7, #8]
 80129fe:	f7ff fe2b 	bl	8012658 <tcp_output_segment_busy>
 8012a02:	4603      	mov	r3, r0
 8012a04:	2b00      	cmp	r3, #0
 8012a06:	d002      	beq.n	8012a0e <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8012a08:	f06f 0305 	mvn.w	r3, #5
 8012a0c:	e040      	b.n	8012a90 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8012a0e:	68bb      	ldr	r3, [r7, #8]
 8012a10:	681a      	ldr	r2, [r3, #0]
 8012a12:	687b      	ldr	r3, [r7, #4]
 8012a14:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 8012a16:	687b      	ldr	r3, [r7, #4]
 8012a18:	336c      	adds	r3, #108	@ 0x6c
 8012a1a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8012a1c:	e002      	b.n	8012a24 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8012a1e:	68fb      	ldr	r3, [r7, #12]
 8012a20:	681b      	ldr	r3, [r3, #0]
 8012a22:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8012a24:	68fb      	ldr	r3, [r7, #12]
 8012a26:	681b      	ldr	r3, [r3, #0]
 8012a28:	2b00      	cmp	r3, #0
 8012a2a:	d011      	beq.n	8012a50 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8012a2c:	68fb      	ldr	r3, [r7, #12]
 8012a2e:	681b      	ldr	r3, [r3, #0]
 8012a30:	68db      	ldr	r3, [r3, #12]
 8012a32:	685b      	ldr	r3, [r3, #4]
 8012a34:	4618      	mov	r0, r3
 8012a36:	f7f8 fc6a 	bl	800b30e <lwip_htonl>
 8012a3a:	4604      	mov	r4, r0
 8012a3c:	68bb      	ldr	r3, [r7, #8]
 8012a3e:	68db      	ldr	r3, [r3, #12]
 8012a40:	685b      	ldr	r3, [r3, #4]
 8012a42:	4618      	mov	r0, r3
 8012a44:	f7f8 fc63 	bl	800b30e <lwip_htonl>
 8012a48:	4603      	mov	r3, r0
 8012a4a:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8012a4c:	2b00      	cmp	r3, #0
 8012a4e:	dbe6      	blt.n	8012a1e <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8012a50:	68fb      	ldr	r3, [r7, #12]
 8012a52:	681a      	ldr	r2, [r3, #0]
 8012a54:	68bb      	ldr	r3, [r7, #8]
 8012a56:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8012a58:	68fb      	ldr	r3, [r7, #12]
 8012a5a:	68ba      	ldr	r2, [r7, #8]
 8012a5c:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8012a5e:	68bb      	ldr	r3, [r7, #8]
 8012a60:	681b      	ldr	r3, [r3, #0]
 8012a62:	2b00      	cmp	r3, #0
 8012a64:	d103      	bne.n	8012a6e <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8012a66:	687b      	ldr	r3, [r7, #4]
 8012a68:	2200      	movs	r2, #0
 8012a6a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8012a6e:	687b      	ldr	r3, [r7, #4]
 8012a70:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8012a74:	2bff      	cmp	r3, #255	@ 0xff
 8012a76:	d007      	beq.n	8012a88 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8012a78:	687b      	ldr	r3, [r7, #4]
 8012a7a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8012a7e:	3301      	adds	r3, #1
 8012a80:	b2da      	uxtb	r2, r3
 8012a82:	687b      	ldr	r3, [r7, #4]
 8012a84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8012a88:	687b      	ldr	r3, [r7, #4]
 8012a8a:	2200      	movs	r2, #0
 8012a8c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8012a8e:	2300      	movs	r3, #0
}
 8012a90:	4618      	mov	r0, r3
 8012a92:	3714      	adds	r7, #20
 8012a94:	46bd      	mov	sp, r7
 8012a96:	bd90      	pop	{r4, r7, pc}
 8012a98:	08019cd0 	.word	0x08019cd0
 8012a9c:	0801a370 	.word	0x0801a370
 8012aa0:	08019d24 	.word	0x08019d24

08012aa4 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8012aa4:	b580      	push	{r7, lr}
 8012aa6:	b082      	sub	sp, #8
 8012aa8:	af00      	add	r7, sp, #0
 8012aaa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8012aac:	687b      	ldr	r3, [r7, #4]
 8012aae:	2b00      	cmp	r3, #0
 8012ab0:	d106      	bne.n	8012ac0 <tcp_rexmit_fast+0x1c>
 8012ab2:	4b2a      	ldr	r3, [pc, #168]	@ (8012b5c <tcp_rexmit_fast+0xb8>)
 8012ab4:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 8012ab8:	4929      	ldr	r1, [pc, #164]	@ (8012b60 <tcp_rexmit_fast+0xbc>)
 8012aba:	482a      	ldr	r0, [pc, #168]	@ (8012b64 <tcp_rexmit_fast+0xc0>)
 8012abc:	f003 fd70 	bl	80165a0 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8012ac0:	687b      	ldr	r3, [r7, #4]
 8012ac2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012ac4:	2b00      	cmp	r3, #0
 8012ac6:	d044      	beq.n	8012b52 <tcp_rexmit_fast+0xae>
 8012ac8:	687b      	ldr	r3, [r7, #4]
 8012aca:	8b5b      	ldrh	r3, [r3, #26]
 8012acc:	f003 0304 	and.w	r3, r3, #4
 8012ad0:	2b00      	cmp	r3, #0
 8012ad2:	d13e      	bne.n	8012b52 <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8012ad4:	6878      	ldr	r0, [r7, #4]
 8012ad6:	f7ff ff79 	bl	80129cc <tcp_rexmit>
 8012ada:	4603      	mov	r3, r0
 8012adc:	2b00      	cmp	r3, #0
 8012ade:	d138      	bne.n	8012b52 <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8012ae0:	687b      	ldr	r3, [r7, #4]
 8012ae2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8012ae6:	687b      	ldr	r3, [r7, #4]
 8012ae8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8012aec:	4293      	cmp	r3, r2
 8012aee:	bf28      	it	cs
 8012af0:	4613      	movcs	r3, r2
 8012af2:	b29b      	uxth	r3, r3
 8012af4:	0fda      	lsrs	r2, r3, #31
 8012af6:	4413      	add	r3, r2
 8012af8:	105b      	asrs	r3, r3, #1
 8012afa:	b29a      	uxth	r2, r3
 8012afc:	687b      	ldr	r3, [r7, #4]
 8012afe:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8012b02:	687b      	ldr	r3, [r7, #4]
 8012b04:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8012b08:	461a      	mov	r2, r3
 8012b0a:	687b      	ldr	r3, [r7, #4]
 8012b0c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012b0e:	005b      	lsls	r3, r3, #1
 8012b10:	429a      	cmp	r2, r3
 8012b12:	d206      	bcs.n	8012b22 <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8012b14:	687b      	ldr	r3, [r7, #4]
 8012b16:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012b18:	005b      	lsls	r3, r3, #1
 8012b1a:	b29a      	uxth	r2, r3
 8012b1c:	687b      	ldr	r3, [r7, #4]
 8012b1e:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8012b22:	687b      	ldr	r3, [r7, #4]
 8012b24:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8012b28:	687b      	ldr	r3, [r7, #4]
 8012b2a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012b2c:	4619      	mov	r1, r3
 8012b2e:	0049      	lsls	r1, r1, #1
 8012b30:	440b      	add	r3, r1
 8012b32:	b29b      	uxth	r3, r3
 8012b34:	4413      	add	r3, r2
 8012b36:	b29a      	uxth	r2, r3
 8012b38:	687b      	ldr	r3, [r7, #4]
 8012b3a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 8012b3e:	687b      	ldr	r3, [r7, #4]
 8012b40:	8b5b      	ldrh	r3, [r3, #26]
 8012b42:	f043 0304 	orr.w	r3, r3, #4
 8012b46:	b29a      	uxth	r2, r3
 8012b48:	687b      	ldr	r3, [r7, #4]
 8012b4a:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8012b4c:	687b      	ldr	r3, [r7, #4]
 8012b4e:	2200      	movs	r2, #0
 8012b50:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 8012b52:	bf00      	nop
 8012b54:	3708      	adds	r7, #8
 8012b56:	46bd      	mov	sp, r7
 8012b58:	bd80      	pop	{r7, pc}
 8012b5a:	bf00      	nop
 8012b5c:	08019cd0 	.word	0x08019cd0
 8012b60:	0801a388 	.word	0x0801a388
 8012b64:	08019d24 	.word	0x08019d24

08012b68 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8012b68:	b580      	push	{r7, lr}
 8012b6a:	b086      	sub	sp, #24
 8012b6c:	af00      	add	r7, sp, #0
 8012b6e:	60f8      	str	r0, [r7, #12]
 8012b70:	607b      	str	r3, [r7, #4]
 8012b72:	460b      	mov	r3, r1
 8012b74:	817b      	strh	r3, [r7, #10]
 8012b76:	4613      	mov	r3, r2
 8012b78:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8012b7a:	897a      	ldrh	r2, [r7, #10]
 8012b7c:	893b      	ldrh	r3, [r7, #8]
 8012b7e:	4413      	add	r3, r2
 8012b80:	b29b      	uxth	r3, r3
 8012b82:	3314      	adds	r3, #20
 8012b84:	b29b      	uxth	r3, r3
 8012b86:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8012b8a:	4619      	mov	r1, r3
 8012b8c:	2022      	movs	r0, #34	@ 0x22
 8012b8e:	f7f9 fcb7 	bl	800c500 <pbuf_alloc>
 8012b92:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8012b94:	697b      	ldr	r3, [r7, #20]
 8012b96:	2b00      	cmp	r3, #0
 8012b98:	d04d      	beq.n	8012c36 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8012b9a:	897b      	ldrh	r3, [r7, #10]
 8012b9c:	3313      	adds	r3, #19
 8012b9e:	697a      	ldr	r2, [r7, #20]
 8012ba0:	8952      	ldrh	r2, [r2, #10]
 8012ba2:	4293      	cmp	r3, r2
 8012ba4:	db06      	blt.n	8012bb4 <tcp_output_alloc_header_common+0x4c>
 8012ba6:	4b26      	ldr	r3, [pc, #152]	@ (8012c40 <tcp_output_alloc_header_common+0xd8>)
 8012ba8:	f240 7223 	movw	r2, #1827	@ 0x723
 8012bac:	4925      	ldr	r1, [pc, #148]	@ (8012c44 <tcp_output_alloc_header_common+0xdc>)
 8012bae:	4826      	ldr	r0, [pc, #152]	@ (8012c48 <tcp_output_alloc_header_common+0xe0>)
 8012bb0:	f003 fcf6 	bl	80165a0 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8012bb4:	697b      	ldr	r3, [r7, #20]
 8012bb6:	685b      	ldr	r3, [r3, #4]
 8012bb8:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8012bba:	8c3b      	ldrh	r3, [r7, #32]
 8012bbc:	4618      	mov	r0, r3
 8012bbe:	f7f8 fb91 	bl	800b2e4 <lwip_htons>
 8012bc2:	4603      	mov	r3, r0
 8012bc4:	461a      	mov	r2, r3
 8012bc6:	693b      	ldr	r3, [r7, #16]
 8012bc8:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8012bca:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012bcc:	4618      	mov	r0, r3
 8012bce:	f7f8 fb89 	bl	800b2e4 <lwip_htons>
 8012bd2:	4603      	mov	r3, r0
 8012bd4:	461a      	mov	r2, r3
 8012bd6:	693b      	ldr	r3, [r7, #16]
 8012bd8:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8012bda:	693b      	ldr	r3, [r7, #16]
 8012bdc:	687a      	ldr	r2, [r7, #4]
 8012bde:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8012be0:	68f8      	ldr	r0, [r7, #12]
 8012be2:	f7f8 fb94 	bl	800b30e <lwip_htonl>
 8012be6:	4602      	mov	r2, r0
 8012be8:	693b      	ldr	r3, [r7, #16]
 8012bea:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8012bec:	897b      	ldrh	r3, [r7, #10]
 8012bee:	089b      	lsrs	r3, r3, #2
 8012bf0:	b29b      	uxth	r3, r3
 8012bf2:	3305      	adds	r3, #5
 8012bf4:	b29b      	uxth	r3, r3
 8012bf6:	031b      	lsls	r3, r3, #12
 8012bf8:	b29a      	uxth	r2, r3
 8012bfa:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8012bfe:	b29b      	uxth	r3, r3
 8012c00:	4313      	orrs	r3, r2
 8012c02:	b29b      	uxth	r3, r3
 8012c04:	4618      	mov	r0, r3
 8012c06:	f7f8 fb6d 	bl	800b2e4 <lwip_htons>
 8012c0a:	4603      	mov	r3, r0
 8012c0c:	461a      	mov	r2, r3
 8012c0e:	693b      	ldr	r3, [r7, #16]
 8012c10:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8012c12:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8012c14:	4618      	mov	r0, r3
 8012c16:	f7f8 fb65 	bl	800b2e4 <lwip_htons>
 8012c1a:	4603      	mov	r3, r0
 8012c1c:	461a      	mov	r2, r3
 8012c1e:	693b      	ldr	r3, [r7, #16]
 8012c20:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8012c22:	693b      	ldr	r3, [r7, #16]
 8012c24:	2200      	movs	r2, #0
 8012c26:	741a      	strb	r2, [r3, #16]
 8012c28:	2200      	movs	r2, #0
 8012c2a:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8012c2c:	693b      	ldr	r3, [r7, #16]
 8012c2e:	2200      	movs	r2, #0
 8012c30:	749a      	strb	r2, [r3, #18]
 8012c32:	2200      	movs	r2, #0
 8012c34:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8012c36:	697b      	ldr	r3, [r7, #20]
}
 8012c38:	4618      	mov	r0, r3
 8012c3a:	3718      	adds	r7, #24
 8012c3c:	46bd      	mov	sp, r7
 8012c3e:	bd80      	pop	{r7, pc}
 8012c40:	08019cd0 	.word	0x08019cd0
 8012c44:	0801a3a8 	.word	0x0801a3a8
 8012c48:	08019d24 	.word	0x08019d24

08012c4c <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8012c4c:	b5b0      	push	{r4, r5, r7, lr}
 8012c4e:	b08a      	sub	sp, #40	@ 0x28
 8012c50:	af04      	add	r7, sp, #16
 8012c52:	60f8      	str	r0, [r7, #12]
 8012c54:	607b      	str	r3, [r7, #4]
 8012c56:	460b      	mov	r3, r1
 8012c58:	817b      	strh	r3, [r7, #10]
 8012c5a:	4613      	mov	r3, r2
 8012c5c:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8012c5e:	68fb      	ldr	r3, [r7, #12]
 8012c60:	2b00      	cmp	r3, #0
 8012c62:	d106      	bne.n	8012c72 <tcp_output_alloc_header+0x26>
 8012c64:	4b15      	ldr	r3, [pc, #84]	@ (8012cbc <tcp_output_alloc_header+0x70>)
 8012c66:	f240 7242 	movw	r2, #1858	@ 0x742
 8012c6a:	4915      	ldr	r1, [pc, #84]	@ (8012cc0 <tcp_output_alloc_header+0x74>)
 8012c6c:	4815      	ldr	r0, [pc, #84]	@ (8012cc4 <tcp_output_alloc_header+0x78>)
 8012c6e:	f003 fc97 	bl	80165a0 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8012c72:	68fb      	ldr	r3, [r7, #12]
 8012c74:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8012c76:	68fb      	ldr	r3, [r7, #12]
 8012c78:	8adb      	ldrh	r3, [r3, #22]
 8012c7a:	68fa      	ldr	r2, [r7, #12]
 8012c7c:	8b12      	ldrh	r2, [r2, #24]
 8012c7e:	68f9      	ldr	r1, [r7, #12]
 8012c80:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 8012c82:	893d      	ldrh	r5, [r7, #8]
 8012c84:	897c      	ldrh	r4, [r7, #10]
 8012c86:	9103      	str	r1, [sp, #12]
 8012c88:	2110      	movs	r1, #16
 8012c8a:	9102      	str	r1, [sp, #8]
 8012c8c:	9201      	str	r2, [sp, #4]
 8012c8e:	9300      	str	r3, [sp, #0]
 8012c90:	687b      	ldr	r3, [r7, #4]
 8012c92:	462a      	mov	r2, r5
 8012c94:	4621      	mov	r1, r4
 8012c96:	f7ff ff67 	bl	8012b68 <tcp_output_alloc_header_common>
 8012c9a:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8012c9c:	697b      	ldr	r3, [r7, #20]
 8012c9e:	2b00      	cmp	r3, #0
 8012ca0:	d006      	beq.n	8012cb0 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8012ca2:	68fb      	ldr	r3, [r7, #12]
 8012ca4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012ca6:	68fa      	ldr	r2, [r7, #12]
 8012ca8:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8012caa:	441a      	add	r2, r3
 8012cac:	68fb      	ldr	r3, [r7, #12]
 8012cae:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 8012cb0:	697b      	ldr	r3, [r7, #20]
}
 8012cb2:	4618      	mov	r0, r3
 8012cb4:	3718      	adds	r7, #24
 8012cb6:	46bd      	mov	sp, r7
 8012cb8:	bdb0      	pop	{r4, r5, r7, pc}
 8012cba:	bf00      	nop
 8012cbc:	08019cd0 	.word	0x08019cd0
 8012cc0:	0801a3d8 	.word	0x0801a3d8
 8012cc4:	08019d24 	.word	0x08019d24

08012cc8 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8012cc8:	b580      	push	{r7, lr}
 8012cca:	b088      	sub	sp, #32
 8012ccc:	af00      	add	r7, sp, #0
 8012cce:	60f8      	str	r0, [r7, #12]
 8012cd0:	60b9      	str	r1, [r7, #8]
 8012cd2:	4611      	mov	r1, r2
 8012cd4:	461a      	mov	r2, r3
 8012cd6:	460b      	mov	r3, r1
 8012cd8:	71fb      	strb	r3, [r7, #7]
 8012cda:	4613      	mov	r3, r2
 8012cdc:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8012cde:	2300      	movs	r3, #0
 8012ce0:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8012ce2:	68bb      	ldr	r3, [r7, #8]
 8012ce4:	2b00      	cmp	r3, #0
 8012ce6:	d106      	bne.n	8012cf6 <tcp_output_fill_options+0x2e>
 8012ce8:	4b12      	ldr	r3, [pc, #72]	@ (8012d34 <tcp_output_fill_options+0x6c>)
 8012cea:	f240 7256 	movw	r2, #1878	@ 0x756
 8012cee:	4912      	ldr	r1, [pc, #72]	@ (8012d38 <tcp_output_fill_options+0x70>)
 8012cf0:	4812      	ldr	r0, [pc, #72]	@ (8012d3c <tcp_output_fill_options+0x74>)
 8012cf2:	f003 fc55 	bl	80165a0 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8012cf6:	68bb      	ldr	r3, [r7, #8]
 8012cf8:	685b      	ldr	r3, [r3, #4]
 8012cfa:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8012cfc:	69bb      	ldr	r3, [r7, #24]
 8012cfe:	3314      	adds	r3, #20
 8012d00:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8012d02:	8bfb      	ldrh	r3, [r7, #30]
 8012d04:	009b      	lsls	r3, r3, #2
 8012d06:	461a      	mov	r2, r3
 8012d08:	79fb      	ldrb	r3, [r7, #7]
 8012d0a:	009b      	lsls	r3, r3, #2
 8012d0c:	f003 0304 	and.w	r3, r3, #4
 8012d10:	4413      	add	r3, r2
 8012d12:	3314      	adds	r3, #20
 8012d14:	69ba      	ldr	r2, [r7, #24]
 8012d16:	4413      	add	r3, r2
 8012d18:	697a      	ldr	r2, [r7, #20]
 8012d1a:	429a      	cmp	r2, r3
 8012d1c:	d006      	beq.n	8012d2c <tcp_output_fill_options+0x64>
 8012d1e:	4b05      	ldr	r3, [pc, #20]	@ (8012d34 <tcp_output_fill_options+0x6c>)
 8012d20:	f240 7275 	movw	r2, #1909	@ 0x775
 8012d24:	4906      	ldr	r1, [pc, #24]	@ (8012d40 <tcp_output_fill_options+0x78>)
 8012d26:	4805      	ldr	r0, [pc, #20]	@ (8012d3c <tcp_output_fill_options+0x74>)
 8012d28:	f003 fc3a 	bl	80165a0 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8012d2c:	bf00      	nop
 8012d2e:	3720      	adds	r7, #32
 8012d30:	46bd      	mov	sp, r7
 8012d32:	bd80      	pop	{r7, pc}
 8012d34:	08019cd0 	.word	0x08019cd0
 8012d38:	0801a400 	.word	0x0801a400
 8012d3c:	08019d24 	.word	0x08019d24
 8012d40:	0801a2f8 	.word	0x0801a2f8

08012d44 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8012d44:	b580      	push	{r7, lr}
 8012d46:	b08a      	sub	sp, #40	@ 0x28
 8012d48:	af04      	add	r7, sp, #16
 8012d4a:	60f8      	str	r0, [r7, #12]
 8012d4c:	60b9      	str	r1, [r7, #8]
 8012d4e:	607a      	str	r2, [r7, #4]
 8012d50:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8012d52:	68bb      	ldr	r3, [r7, #8]
 8012d54:	2b00      	cmp	r3, #0
 8012d56:	d106      	bne.n	8012d66 <tcp_output_control_segment+0x22>
 8012d58:	4b1c      	ldr	r3, [pc, #112]	@ (8012dcc <tcp_output_control_segment+0x88>)
 8012d5a:	f240 7287 	movw	r2, #1927	@ 0x787
 8012d5e:	491c      	ldr	r1, [pc, #112]	@ (8012dd0 <tcp_output_control_segment+0x8c>)
 8012d60:	481c      	ldr	r0, [pc, #112]	@ (8012dd4 <tcp_output_control_segment+0x90>)
 8012d62:	f003 fc1d 	bl	80165a0 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8012d66:	683a      	ldr	r2, [r7, #0]
 8012d68:	6879      	ldr	r1, [r7, #4]
 8012d6a:	68f8      	ldr	r0, [r7, #12]
 8012d6c:	f7fe faea 	bl	8011344 <tcp_route>
 8012d70:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8012d72:	693b      	ldr	r3, [r7, #16]
 8012d74:	2b00      	cmp	r3, #0
 8012d76:	d102      	bne.n	8012d7e <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8012d78:	23fc      	movs	r3, #252	@ 0xfc
 8012d7a:	75fb      	strb	r3, [r7, #23]
 8012d7c:	e01c      	b.n	8012db8 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8012d7e:	68fb      	ldr	r3, [r7, #12]
 8012d80:	2b00      	cmp	r3, #0
 8012d82:	d006      	beq.n	8012d92 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8012d84:	68fb      	ldr	r3, [r7, #12]
 8012d86:	7adb      	ldrb	r3, [r3, #11]
 8012d88:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8012d8a:	68fb      	ldr	r3, [r7, #12]
 8012d8c:	7a9b      	ldrb	r3, [r3, #10]
 8012d8e:	757b      	strb	r3, [r7, #21]
 8012d90:	e003      	b.n	8012d9a <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8012d92:	23ff      	movs	r3, #255	@ 0xff
 8012d94:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8012d96:	2300      	movs	r3, #0
 8012d98:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8012d9a:	7dba      	ldrb	r2, [r7, #22]
 8012d9c:	693b      	ldr	r3, [r7, #16]
 8012d9e:	9302      	str	r3, [sp, #8]
 8012da0:	2306      	movs	r3, #6
 8012da2:	9301      	str	r3, [sp, #4]
 8012da4:	7d7b      	ldrb	r3, [r7, #21]
 8012da6:	9300      	str	r3, [sp, #0]
 8012da8:	4613      	mov	r3, r2
 8012daa:	683a      	ldr	r2, [r7, #0]
 8012dac:	6879      	ldr	r1, [r7, #4]
 8012dae:	68b8      	ldr	r0, [r7, #8]
 8012db0:	f002 f8e6 	bl	8014f80 <ip4_output_if>
 8012db4:	4603      	mov	r3, r0
 8012db6:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8012db8:	68b8      	ldr	r0, [r7, #8]
 8012dba:	f7f9 fe85 	bl	800cac8 <pbuf_free>
  return err;
 8012dbe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012dc2:	4618      	mov	r0, r3
 8012dc4:	3718      	adds	r7, #24
 8012dc6:	46bd      	mov	sp, r7
 8012dc8:	bd80      	pop	{r7, pc}
 8012dca:	bf00      	nop
 8012dcc:	08019cd0 	.word	0x08019cd0
 8012dd0:	0801a428 	.word	0x0801a428
 8012dd4:	08019d24 	.word	0x08019d24

08012dd8 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8012dd8:	b590      	push	{r4, r7, lr}
 8012dda:	b08b      	sub	sp, #44	@ 0x2c
 8012ddc:	af04      	add	r7, sp, #16
 8012dde:	60f8      	str	r0, [r7, #12]
 8012de0:	60b9      	str	r1, [r7, #8]
 8012de2:	607a      	str	r2, [r7, #4]
 8012de4:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8012de6:	683b      	ldr	r3, [r7, #0]
 8012de8:	2b00      	cmp	r3, #0
 8012dea:	d106      	bne.n	8012dfa <tcp_rst+0x22>
 8012dec:	4b1f      	ldr	r3, [pc, #124]	@ (8012e6c <tcp_rst+0x94>)
 8012dee:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 8012df2:	491f      	ldr	r1, [pc, #124]	@ (8012e70 <tcp_rst+0x98>)
 8012df4:	481f      	ldr	r0, [pc, #124]	@ (8012e74 <tcp_rst+0x9c>)
 8012df6:	f003 fbd3 	bl	80165a0 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8012dfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012dfc:	2b00      	cmp	r3, #0
 8012dfe:	d106      	bne.n	8012e0e <tcp_rst+0x36>
 8012e00:	4b1a      	ldr	r3, [pc, #104]	@ (8012e6c <tcp_rst+0x94>)
 8012e02:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 8012e06:	491c      	ldr	r1, [pc, #112]	@ (8012e78 <tcp_rst+0xa0>)
 8012e08:	481a      	ldr	r0, [pc, #104]	@ (8012e74 <tcp_rst+0x9c>)
 8012e0a:	f003 fbc9 	bl	80165a0 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8012e0e:	2300      	movs	r3, #0
 8012e10:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8012e12:	f246 0308 	movw	r3, #24584	@ 0x6008
 8012e16:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8012e18:	7dfb      	ldrb	r3, [r7, #23]
 8012e1a:	b29c      	uxth	r4, r3
 8012e1c:	68b8      	ldr	r0, [r7, #8]
 8012e1e:	f7f8 fa76 	bl	800b30e <lwip_htonl>
 8012e22:	4602      	mov	r2, r0
 8012e24:	8abb      	ldrh	r3, [r7, #20]
 8012e26:	9303      	str	r3, [sp, #12]
 8012e28:	2314      	movs	r3, #20
 8012e2a:	9302      	str	r3, [sp, #8]
 8012e2c:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8012e2e:	9301      	str	r3, [sp, #4]
 8012e30:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8012e32:	9300      	str	r3, [sp, #0]
 8012e34:	4613      	mov	r3, r2
 8012e36:	2200      	movs	r2, #0
 8012e38:	4621      	mov	r1, r4
 8012e3a:	6878      	ldr	r0, [r7, #4]
 8012e3c:	f7ff fe94 	bl	8012b68 <tcp_output_alloc_header_common>
 8012e40:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8012e42:	693b      	ldr	r3, [r7, #16]
 8012e44:	2b00      	cmp	r3, #0
 8012e46:	d00c      	beq.n	8012e62 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8012e48:	7dfb      	ldrb	r3, [r7, #23]
 8012e4a:	2200      	movs	r2, #0
 8012e4c:	6939      	ldr	r1, [r7, #16]
 8012e4e:	68f8      	ldr	r0, [r7, #12]
 8012e50:	f7ff ff3a 	bl	8012cc8 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8012e54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012e56:	683a      	ldr	r2, [r7, #0]
 8012e58:	6939      	ldr	r1, [r7, #16]
 8012e5a:	68f8      	ldr	r0, [r7, #12]
 8012e5c:	f7ff ff72 	bl	8012d44 <tcp_output_control_segment>
 8012e60:	e000      	b.n	8012e64 <tcp_rst+0x8c>
    return;
 8012e62:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8012e64:	371c      	adds	r7, #28
 8012e66:	46bd      	mov	sp, r7
 8012e68:	bd90      	pop	{r4, r7, pc}
 8012e6a:	bf00      	nop
 8012e6c:	08019cd0 	.word	0x08019cd0
 8012e70:	0801a454 	.word	0x0801a454
 8012e74:	08019d24 	.word	0x08019d24
 8012e78:	0801a470 	.word	0x0801a470

08012e7c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8012e7c:	b590      	push	{r4, r7, lr}
 8012e7e:	b087      	sub	sp, #28
 8012e80:	af00      	add	r7, sp, #0
 8012e82:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8012e84:	2300      	movs	r3, #0
 8012e86:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8012e88:	2300      	movs	r3, #0
 8012e8a:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8012e8c:	687b      	ldr	r3, [r7, #4]
 8012e8e:	2b00      	cmp	r3, #0
 8012e90:	d106      	bne.n	8012ea0 <tcp_send_empty_ack+0x24>
 8012e92:	4b28      	ldr	r3, [pc, #160]	@ (8012f34 <tcp_send_empty_ack+0xb8>)
 8012e94:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 8012e98:	4927      	ldr	r1, [pc, #156]	@ (8012f38 <tcp_send_empty_ack+0xbc>)
 8012e9a:	4828      	ldr	r0, [pc, #160]	@ (8012f3c <tcp_send_empty_ack+0xc0>)
 8012e9c:	f003 fb80 	bl	80165a0 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8012ea0:	7dfb      	ldrb	r3, [r7, #23]
 8012ea2:	009b      	lsls	r3, r3, #2
 8012ea4:	b2db      	uxtb	r3, r3
 8012ea6:	f003 0304 	and.w	r3, r3, #4
 8012eaa:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8012eac:	7d7b      	ldrb	r3, [r7, #21]
 8012eae:	b29c      	uxth	r4, r3
 8012eb0:	687b      	ldr	r3, [r7, #4]
 8012eb2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012eb4:	4618      	mov	r0, r3
 8012eb6:	f7f8 fa2a 	bl	800b30e <lwip_htonl>
 8012eba:	4603      	mov	r3, r0
 8012ebc:	2200      	movs	r2, #0
 8012ebe:	4621      	mov	r1, r4
 8012ec0:	6878      	ldr	r0, [r7, #4]
 8012ec2:	f7ff fec3 	bl	8012c4c <tcp_output_alloc_header>
 8012ec6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8012ec8:	693b      	ldr	r3, [r7, #16]
 8012eca:	2b00      	cmp	r3, #0
 8012ecc:	d109      	bne.n	8012ee2 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012ece:	687b      	ldr	r3, [r7, #4]
 8012ed0:	8b5b      	ldrh	r3, [r3, #26]
 8012ed2:	f043 0303 	orr.w	r3, r3, #3
 8012ed6:	b29a      	uxth	r2, r3
 8012ed8:	687b      	ldr	r3, [r7, #4]
 8012eda:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8012edc:	f06f 0301 	mvn.w	r3, #1
 8012ee0:	e023      	b.n	8012f2a <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8012ee2:	7dbb      	ldrb	r3, [r7, #22]
 8012ee4:	7dfa      	ldrb	r2, [r7, #23]
 8012ee6:	6939      	ldr	r1, [r7, #16]
 8012ee8:	6878      	ldr	r0, [r7, #4]
 8012eea:	f7ff feed 	bl	8012cc8 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8012eee:	687a      	ldr	r2, [r7, #4]
 8012ef0:	687b      	ldr	r3, [r7, #4]
 8012ef2:	3304      	adds	r3, #4
 8012ef4:	6939      	ldr	r1, [r7, #16]
 8012ef6:	6878      	ldr	r0, [r7, #4]
 8012ef8:	f7ff ff24 	bl	8012d44 <tcp_output_control_segment>
 8012efc:	4603      	mov	r3, r0
 8012efe:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8012f00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012f04:	2b00      	cmp	r3, #0
 8012f06:	d007      	beq.n	8012f18 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012f08:	687b      	ldr	r3, [r7, #4]
 8012f0a:	8b5b      	ldrh	r3, [r3, #26]
 8012f0c:	f043 0303 	orr.w	r3, r3, #3
 8012f10:	b29a      	uxth	r2, r3
 8012f12:	687b      	ldr	r3, [r7, #4]
 8012f14:	835a      	strh	r2, [r3, #26]
 8012f16:	e006      	b.n	8012f26 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012f18:	687b      	ldr	r3, [r7, #4]
 8012f1a:	8b5b      	ldrh	r3, [r3, #26]
 8012f1c:	f023 0303 	bic.w	r3, r3, #3
 8012f20:	b29a      	uxth	r2, r3
 8012f22:	687b      	ldr	r3, [r7, #4]
 8012f24:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8012f26:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8012f2a:	4618      	mov	r0, r3
 8012f2c:	371c      	adds	r7, #28
 8012f2e:	46bd      	mov	sp, r7
 8012f30:	bd90      	pop	{r4, r7, pc}
 8012f32:	bf00      	nop
 8012f34:	08019cd0 	.word	0x08019cd0
 8012f38:	0801a48c 	.word	0x0801a48c
 8012f3c:	08019d24 	.word	0x08019d24

08012f40 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8012f40:	b590      	push	{r4, r7, lr}
 8012f42:	b087      	sub	sp, #28
 8012f44:	af00      	add	r7, sp, #0
 8012f46:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8012f48:	2300      	movs	r3, #0
 8012f4a:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8012f4c:	687b      	ldr	r3, [r7, #4]
 8012f4e:	2b00      	cmp	r3, #0
 8012f50:	d106      	bne.n	8012f60 <tcp_keepalive+0x20>
 8012f52:	4b18      	ldr	r3, [pc, #96]	@ (8012fb4 <tcp_keepalive+0x74>)
 8012f54:	f640 0224 	movw	r2, #2084	@ 0x824
 8012f58:	4917      	ldr	r1, [pc, #92]	@ (8012fb8 <tcp_keepalive+0x78>)
 8012f5a:	4818      	ldr	r0, [pc, #96]	@ (8012fbc <tcp_keepalive+0x7c>)
 8012f5c:	f003 fb20 	bl	80165a0 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8012f60:	7dfb      	ldrb	r3, [r7, #23]
 8012f62:	b29c      	uxth	r4, r3
 8012f64:	687b      	ldr	r3, [r7, #4]
 8012f66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012f68:	3b01      	subs	r3, #1
 8012f6a:	4618      	mov	r0, r3
 8012f6c:	f7f8 f9cf 	bl	800b30e <lwip_htonl>
 8012f70:	4603      	mov	r3, r0
 8012f72:	2200      	movs	r2, #0
 8012f74:	4621      	mov	r1, r4
 8012f76:	6878      	ldr	r0, [r7, #4]
 8012f78:	f7ff fe68 	bl	8012c4c <tcp_output_alloc_header>
 8012f7c:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8012f7e:	693b      	ldr	r3, [r7, #16]
 8012f80:	2b00      	cmp	r3, #0
 8012f82:	d102      	bne.n	8012f8a <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8012f84:	f04f 33ff 	mov.w	r3, #4294967295
 8012f88:	e010      	b.n	8012fac <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8012f8a:	7dfb      	ldrb	r3, [r7, #23]
 8012f8c:	2200      	movs	r2, #0
 8012f8e:	6939      	ldr	r1, [r7, #16]
 8012f90:	6878      	ldr	r0, [r7, #4]
 8012f92:	f7ff fe99 	bl	8012cc8 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8012f96:	687a      	ldr	r2, [r7, #4]
 8012f98:	687b      	ldr	r3, [r7, #4]
 8012f9a:	3304      	adds	r3, #4
 8012f9c:	6939      	ldr	r1, [r7, #16]
 8012f9e:	6878      	ldr	r0, [r7, #4]
 8012fa0:	f7ff fed0 	bl	8012d44 <tcp_output_control_segment>
 8012fa4:	4603      	mov	r3, r0
 8012fa6:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8012fa8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8012fac:	4618      	mov	r0, r3
 8012fae:	371c      	adds	r7, #28
 8012fb0:	46bd      	mov	sp, r7
 8012fb2:	bd90      	pop	{r4, r7, pc}
 8012fb4:	08019cd0 	.word	0x08019cd0
 8012fb8:	0801a4ac 	.word	0x0801a4ac
 8012fbc:	08019d24 	.word	0x08019d24

08012fc0 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8012fc0:	b590      	push	{r4, r7, lr}
 8012fc2:	b08b      	sub	sp, #44	@ 0x2c
 8012fc4:	af00      	add	r7, sp, #0
 8012fc6:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8012fc8:	2300      	movs	r3, #0
 8012fca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8012fce:	687b      	ldr	r3, [r7, #4]
 8012fd0:	2b00      	cmp	r3, #0
 8012fd2:	d106      	bne.n	8012fe2 <tcp_zero_window_probe+0x22>
 8012fd4:	4b4c      	ldr	r3, [pc, #304]	@ (8013108 <tcp_zero_window_probe+0x148>)
 8012fd6:	f640 024f 	movw	r2, #2127	@ 0x84f
 8012fda:	494c      	ldr	r1, [pc, #304]	@ (801310c <tcp_zero_window_probe+0x14c>)
 8012fdc:	484c      	ldr	r0, [pc, #304]	@ (8013110 <tcp_zero_window_probe+0x150>)
 8012fde:	f003 fadf 	bl	80165a0 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8012fe2:	687b      	ldr	r3, [r7, #4]
 8012fe4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012fe6:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8012fe8:	6a3b      	ldr	r3, [r7, #32]
 8012fea:	2b00      	cmp	r3, #0
 8012fec:	d101      	bne.n	8012ff2 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8012fee:	2300      	movs	r3, #0
 8012ff0:	e086      	b.n	8013100 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8012ff2:	687b      	ldr	r3, [r7, #4]
 8012ff4:	f893 30a2 	ldrb.w	r3, [r3, #162]	@ 0xa2
 8012ff8:	2bff      	cmp	r3, #255	@ 0xff
 8012ffa:	d007      	beq.n	801300c <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8012ffc:	687b      	ldr	r3, [r7, #4]
 8012ffe:	f893 30a2 	ldrb.w	r3, [r3, #162]	@ 0xa2
 8013002:	3301      	adds	r3, #1
 8013004:	b2da      	uxtb	r2, r3
 8013006:	687b      	ldr	r3, [r7, #4]
 8013008:	f883 20a2 	strb.w	r2, [r3, #162]	@ 0xa2
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 801300c:	6a3b      	ldr	r3, [r7, #32]
 801300e:	68db      	ldr	r3, [r3, #12]
 8013010:	899b      	ldrh	r3, [r3, #12]
 8013012:	b29b      	uxth	r3, r3
 8013014:	4618      	mov	r0, r3
 8013016:	f7f8 f965 	bl	800b2e4 <lwip_htons>
 801301a:	4603      	mov	r3, r0
 801301c:	b2db      	uxtb	r3, r3
 801301e:	f003 0301 	and.w	r3, r3, #1
 8013022:	2b00      	cmp	r3, #0
 8013024:	d005      	beq.n	8013032 <tcp_zero_window_probe+0x72>
 8013026:	6a3b      	ldr	r3, [r7, #32]
 8013028:	891b      	ldrh	r3, [r3, #8]
 801302a:	2b00      	cmp	r3, #0
 801302c:	d101      	bne.n	8013032 <tcp_zero_window_probe+0x72>
 801302e:	2301      	movs	r3, #1
 8013030:	e000      	b.n	8013034 <tcp_zero_window_probe+0x74>
 8013032:	2300      	movs	r3, #0
 8013034:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8013036:	7ffb      	ldrb	r3, [r7, #31]
 8013038:	2b00      	cmp	r3, #0
 801303a:	bf0c      	ite	eq
 801303c:	2301      	moveq	r3, #1
 801303e:	2300      	movne	r3, #0
 8013040:	b2db      	uxtb	r3, r3
 8013042:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8013044:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013048:	b299      	uxth	r1, r3
 801304a:	6a3b      	ldr	r3, [r7, #32]
 801304c:	68db      	ldr	r3, [r3, #12]
 801304e:	685b      	ldr	r3, [r3, #4]
 8013050:	8bba      	ldrh	r2, [r7, #28]
 8013052:	6878      	ldr	r0, [r7, #4]
 8013054:	f7ff fdfa 	bl	8012c4c <tcp_output_alloc_header>
 8013058:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 801305a:	69bb      	ldr	r3, [r7, #24]
 801305c:	2b00      	cmp	r3, #0
 801305e:	d102      	bne.n	8013066 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8013060:	f04f 33ff 	mov.w	r3, #4294967295
 8013064:	e04c      	b.n	8013100 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8013066:	69bb      	ldr	r3, [r7, #24]
 8013068:	685b      	ldr	r3, [r3, #4]
 801306a:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 801306c:	7ffb      	ldrb	r3, [r7, #31]
 801306e:	2b00      	cmp	r3, #0
 8013070:	d011      	beq.n	8013096 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8013072:	697b      	ldr	r3, [r7, #20]
 8013074:	899b      	ldrh	r3, [r3, #12]
 8013076:	b29b      	uxth	r3, r3
 8013078:	b21b      	sxth	r3, r3
 801307a:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 801307e:	b21c      	sxth	r4, r3
 8013080:	2011      	movs	r0, #17
 8013082:	f7f8 f92f 	bl	800b2e4 <lwip_htons>
 8013086:	4603      	mov	r3, r0
 8013088:	b21b      	sxth	r3, r3
 801308a:	4323      	orrs	r3, r4
 801308c:	b21b      	sxth	r3, r3
 801308e:	b29a      	uxth	r2, r3
 8013090:	697b      	ldr	r3, [r7, #20]
 8013092:	819a      	strh	r2, [r3, #12]
 8013094:	e010      	b.n	80130b8 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8013096:	69bb      	ldr	r3, [r7, #24]
 8013098:	685b      	ldr	r3, [r3, #4]
 801309a:	3314      	adds	r3, #20
 801309c:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801309e:	6a3b      	ldr	r3, [r7, #32]
 80130a0:	6858      	ldr	r0, [r3, #4]
 80130a2:	6a3b      	ldr	r3, [r7, #32]
 80130a4:	685b      	ldr	r3, [r3, #4]
 80130a6:	891a      	ldrh	r2, [r3, #8]
 80130a8:	6a3b      	ldr	r3, [r7, #32]
 80130aa:	891b      	ldrh	r3, [r3, #8]
 80130ac:	1ad3      	subs	r3, r2, r3
 80130ae:	b29b      	uxth	r3, r3
 80130b0:	2201      	movs	r2, #1
 80130b2:	6939      	ldr	r1, [r7, #16]
 80130b4:	f7f9 fefe 	bl	800ceb4 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 80130b8:	6a3b      	ldr	r3, [r7, #32]
 80130ba:	68db      	ldr	r3, [r3, #12]
 80130bc:	685b      	ldr	r3, [r3, #4]
 80130be:	4618      	mov	r0, r3
 80130c0:	f7f8 f925 	bl	800b30e <lwip_htonl>
 80130c4:	4603      	mov	r3, r0
 80130c6:	3301      	adds	r3, #1
 80130c8:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80130ca:	687b      	ldr	r3, [r7, #4]
 80130cc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80130ce:	68fb      	ldr	r3, [r7, #12]
 80130d0:	1ad3      	subs	r3, r2, r3
 80130d2:	2b00      	cmp	r3, #0
 80130d4:	da02      	bge.n	80130dc <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 80130d6:	687b      	ldr	r3, [r7, #4]
 80130d8:	68fa      	ldr	r2, [r7, #12]
 80130da:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80130dc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80130e0:	2200      	movs	r2, #0
 80130e2:	69b9      	ldr	r1, [r7, #24]
 80130e4:	6878      	ldr	r0, [r7, #4]
 80130e6:	f7ff fdef 	bl	8012cc8 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80130ea:	687a      	ldr	r2, [r7, #4]
 80130ec:	687b      	ldr	r3, [r7, #4]
 80130ee:	3304      	adds	r3, #4
 80130f0:	69b9      	ldr	r1, [r7, #24]
 80130f2:	6878      	ldr	r0, [r7, #4]
 80130f4:	f7ff fe26 	bl	8012d44 <tcp_output_control_segment>
 80130f8:	4603      	mov	r3, r0
 80130fa:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80130fc:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8013100:	4618      	mov	r0, r3
 8013102:	372c      	adds	r7, #44	@ 0x2c
 8013104:	46bd      	mov	sp, r7
 8013106:	bd90      	pop	{r4, r7, pc}
 8013108:	08019cd0 	.word	0x08019cd0
 801310c:	0801a4c8 	.word	0x0801a4c8
 8013110:	08019d24 	.word	0x08019d24

08013114 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8013114:	b580      	push	{r7, lr}
 8013116:	b082      	sub	sp, #8
 8013118:	af00      	add	r7, sp, #0
 801311a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 801311c:	f7f9 ffda 	bl	800d0d4 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8013120:	4b0a      	ldr	r3, [pc, #40]	@ (801314c <tcpip_tcp_timer+0x38>)
 8013122:	681b      	ldr	r3, [r3, #0]
 8013124:	2b00      	cmp	r3, #0
 8013126:	d103      	bne.n	8013130 <tcpip_tcp_timer+0x1c>
 8013128:	4b09      	ldr	r3, [pc, #36]	@ (8013150 <tcpip_tcp_timer+0x3c>)
 801312a:	681b      	ldr	r3, [r3, #0]
 801312c:	2b00      	cmp	r3, #0
 801312e:	d005      	beq.n	801313c <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8013130:	2200      	movs	r2, #0
 8013132:	4908      	ldr	r1, [pc, #32]	@ (8013154 <tcpip_tcp_timer+0x40>)
 8013134:	20fa      	movs	r0, #250	@ 0xfa
 8013136:	f000 f8f3 	bl	8013320 <sys_timeout>
 801313a:	e003      	b.n	8013144 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 801313c:	4b06      	ldr	r3, [pc, #24]	@ (8013158 <tcpip_tcp_timer+0x44>)
 801313e:	2200      	movs	r2, #0
 8013140:	601a      	str	r2, [r3, #0]
  }
}
 8013142:	bf00      	nop
 8013144:	bf00      	nop
 8013146:	3708      	adds	r7, #8
 8013148:	46bd      	mov	sp, r7
 801314a:	bd80      	pop	{r7, pc}
 801314c:	2000ed4c 	.word	0x2000ed4c
 8013150:	2000ed50 	.word	0x2000ed50
 8013154:	08013115 	.word	0x08013115
 8013158:	2000ed98 	.word	0x2000ed98

0801315c <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 801315c:	b580      	push	{r7, lr}
 801315e:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8013160:	4b0a      	ldr	r3, [pc, #40]	@ (801318c <tcp_timer_needed+0x30>)
 8013162:	681b      	ldr	r3, [r3, #0]
 8013164:	2b00      	cmp	r3, #0
 8013166:	d10f      	bne.n	8013188 <tcp_timer_needed+0x2c>
 8013168:	4b09      	ldr	r3, [pc, #36]	@ (8013190 <tcp_timer_needed+0x34>)
 801316a:	681b      	ldr	r3, [r3, #0]
 801316c:	2b00      	cmp	r3, #0
 801316e:	d103      	bne.n	8013178 <tcp_timer_needed+0x1c>
 8013170:	4b08      	ldr	r3, [pc, #32]	@ (8013194 <tcp_timer_needed+0x38>)
 8013172:	681b      	ldr	r3, [r3, #0]
 8013174:	2b00      	cmp	r3, #0
 8013176:	d007      	beq.n	8013188 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8013178:	4b04      	ldr	r3, [pc, #16]	@ (801318c <tcp_timer_needed+0x30>)
 801317a:	2201      	movs	r2, #1
 801317c:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801317e:	2200      	movs	r2, #0
 8013180:	4905      	ldr	r1, [pc, #20]	@ (8013198 <tcp_timer_needed+0x3c>)
 8013182:	20fa      	movs	r0, #250	@ 0xfa
 8013184:	f000 f8cc 	bl	8013320 <sys_timeout>
  }
}
 8013188:	bf00      	nop
 801318a:	bd80      	pop	{r7, pc}
 801318c:	2000ed98 	.word	0x2000ed98
 8013190:	2000ed4c 	.word	0x2000ed4c
 8013194:	2000ed50 	.word	0x2000ed50
 8013198:	08013115 	.word	0x08013115

0801319c <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 801319c:	b580      	push	{r7, lr}
 801319e:	b086      	sub	sp, #24
 80131a0:	af00      	add	r7, sp, #0
 80131a2:	60f8      	str	r0, [r7, #12]
 80131a4:	60b9      	str	r1, [r7, #8]
 80131a6:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 80131a8:	200a      	movs	r0, #10
 80131aa:	f7f8 fd73 	bl	800bc94 <memp_malloc>
 80131ae:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 80131b0:	693b      	ldr	r3, [r7, #16]
 80131b2:	2b00      	cmp	r3, #0
 80131b4:	d109      	bne.n	80131ca <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 80131b6:	693b      	ldr	r3, [r7, #16]
 80131b8:	2b00      	cmp	r3, #0
 80131ba:	d151      	bne.n	8013260 <sys_timeout_abs+0xc4>
 80131bc:	4b2a      	ldr	r3, [pc, #168]	@ (8013268 <sys_timeout_abs+0xcc>)
 80131be:	22be      	movs	r2, #190	@ 0xbe
 80131c0:	492a      	ldr	r1, [pc, #168]	@ (801326c <sys_timeout_abs+0xd0>)
 80131c2:	482b      	ldr	r0, [pc, #172]	@ (8013270 <sys_timeout_abs+0xd4>)
 80131c4:	f003 f9ec 	bl	80165a0 <iprintf>
    return;
 80131c8:	e04a      	b.n	8013260 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 80131ca:	693b      	ldr	r3, [r7, #16]
 80131cc:	2200      	movs	r2, #0
 80131ce:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 80131d0:	693b      	ldr	r3, [r7, #16]
 80131d2:	68ba      	ldr	r2, [r7, #8]
 80131d4:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 80131d6:	693b      	ldr	r3, [r7, #16]
 80131d8:	687a      	ldr	r2, [r7, #4]
 80131da:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 80131dc:	693b      	ldr	r3, [r7, #16]
 80131de:	68fa      	ldr	r2, [r7, #12]
 80131e0:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 80131e2:	4b24      	ldr	r3, [pc, #144]	@ (8013274 <sys_timeout_abs+0xd8>)
 80131e4:	681b      	ldr	r3, [r3, #0]
 80131e6:	2b00      	cmp	r3, #0
 80131e8:	d103      	bne.n	80131f2 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 80131ea:	4a22      	ldr	r2, [pc, #136]	@ (8013274 <sys_timeout_abs+0xd8>)
 80131ec:	693b      	ldr	r3, [r7, #16]
 80131ee:	6013      	str	r3, [r2, #0]
    return;
 80131f0:	e037      	b.n	8013262 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 80131f2:	693b      	ldr	r3, [r7, #16]
 80131f4:	685a      	ldr	r2, [r3, #4]
 80131f6:	4b1f      	ldr	r3, [pc, #124]	@ (8013274 <sys_timeout_abs+0xd8>)
 80131f8:	681b      	ldr	r3, [r3, #0]
 80131fa:	685b      	ldr	r3, [r3, #4]
 80131fc:	1ad3      	subs	r3, r2, r3
 80131fe:	0fdb      	lsrs	r3, r3, #31
 8013200:	f003 0301 	and.w	r3, r3, #1
 8013204:	b2db      	uxtb	r3, r3
 8013206:	2b00      	cmp	r3, #0
 8013208:	d007      	beq.n	801321a <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 801320a:	4b1a      	ldr	r3, [pc, #104]	@ (8013274 <sys_timeout_abs+0xd8>)
 801320c:	681a      	ldr	r2, [r3, #0]
 801320e:	693b      	ldr	r3, [r7, #16]
 8013210:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8013212:	4a18      	ldr	r2, [pc, #96]	@ (8013274 <sys_timeout_abs+0xd8>)
 8013214:	693b      	ldr	r3, [r7, #16]
 8013216:	6013      	str	r3, [r2, #0]
 8013218:	e023      	b.n	8013262 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801321a:	4b16      	ldr	r3, [pc, #88]	@ (8013274 <sys_timeout_abs+0xd8>)
 801321c:	681b      	ldr	r3, [r3, #0]
 801321e:	617b      	str	r3, [r7, #20]
 8013220:	e01a      	b.n	8013258 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8013222:	697b      	ldr	r3, [r7, #20]
 8013224:	681b      	ldr	r3, [r3, #0]
 8013226:	2b00      	cmp	r3, #0
 8013228:	d00b      	beq.n	8013242 <sys_timeout_abs+0xa6>
 801322a:	693b      	ldr	r3, [r7, #16]
 801322c:	685a      	ldr	r2, [r3, #4]
 801322e:	697b      	ldr	r3, [r7, #20]
 8013230:	681b      	ldr	r3, [r3, #0]
 8013232:	685b      	ldr	r3, [r3, #4]
 8013234:	1ad3      	subs	r3, r2, r3
 8013236:	0fdb      	lsrs	r3, r3, #31
 8013238:	f003 0301 	and.w	r3, r3, #1
 801323c:	b2db      	uxtb	r3, r3
 801323e:	2b00      	cmp	r3, #0
 8013240:	d007      	beq.n	8013252 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8013242:	697b      	ldr	r3, [r7, #20]
 8013244:	681a      	ldr	r2, [r3, #0]
 8013246:	693b      	ldr	r3, [r7, #16]
 8013248:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801324a:	697b      	ldr	r3, [r7, #20]
 801324c:	693a      	ldr	r2, [r7, #16]
 801324e:	601a      	str	r2, [r3, #0]
        break;
 8013250:	e007      	b.n	8013262 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8013252:	697b      	ldr	r3, [r7, #20]
 8013254:	681b      	ldr	r3, [r3, #0]
 8013256:	617b      	str	r3, [r7, #20]
 8013258:	697b      	ldr	r3, [r7, #20]
 801325a:	2b00      	cmp	r3, #0
 801325c:	d1e1      	bne.n	8013222 <sys_timeout_abs+0x86>
 801325e:	e000      	b.n	8013262 <sys_timeout_abs+0xc6>
    return;
 8013260:	bf00      	nop
      }
    }
  }
}
 8013262:	3718      	adds	r7, #24
 8013264:	46bd      	mov	sp, r7
 8013266:	bd80      	pop	{r7, pc}
 8013268:	0801a4ec 	.word	0x0801a4ec
 801326c:	0801a520 	.word	0x0801a520
 8013270:	0801a560 	.word	0x0801a560
 8013274:	2000ed90 	.word	0x2000ed90

08013278 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8013278:	b580      	push	{r7, lr}
 801327a:	b086      	sub	sp, #24
 801327c:	af00      	add	r7, sp, #0
 801327e:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8013280:	687b      	ldr	r3, [r7, #4]
 8013282:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8013284:	697b      	ldr	r3, [r7, #20]
 8013286:	685b      	ldr	r3, [r3, #4]
 8013288:	4798      	blx	r3

  now = sys_now();
 801328a:	f7f2 facf 	bl	800582c <sys_now>
 801328e:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8013290:	697b      	ldr	r3, [r7, #20]
 8013292:	681a      	ldr	r2, [r3, #0]
 8013294:	4b0f      	ldr	r3, [pc, #60]	@ (80132d4 <lwip_cyclic_timer+0x5c>)
 8013296:	681b      	ldr	r3, [r3, #0]
 8013298:	4413      	add	r3, r2
 801329a:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 801329c:	68fa      	ldr	r2, [r7, #12]
 801329e:	693b      	ldr	r3, [r7, #16]
 80132a0:	1ad3      	subs	r3, r2, r3
 80132a2:	0fdb      	lsrs	r3, r3, #31
 80132a4:	f003 0301 	and.w	r3, r3, #1
 80132a8:	b2db      	uxtb	r3, r3
 80132aa:	2b00      	cmp	r3, #0
 80132ac:	d009      	beq.n	80132c2 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 80132ae:	697b      	ldr	r3, [r7, #20]
 80132b0:	681a      	ldr	r2, [r3, #0]
 80132b2:	693b      	ldr	r3, [r7, #16]
 80132b4:	4413      	add	r3, r2
 80132b6:	687a      	ldr	r2, [r7, #4]
 80132b8:	4907      	ldr	r1, [pc, #28]	@ (80132d8 <lwip_cyclic_timer+0x60>)
 80132ba:	4618      	mov	r0, r3
 80132bc:	f7ff ff6e 	bl	801319c <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 80132c0:	e004      	b.n	80132cc <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 80132c2:	687a      	ldr	r2, [r7, #4]
 80132c4:	4904      	ldr	r1, [pc, #16]	@ (80132d8 <lwip_cyclic_timer+0x60>)
 80132c6:	68f8      	ldr	r0, [r7, #12]
 80132c8:	f7ff ff68 	bl	801319c <sys_timeout_abs>
}
 80132cc:	bf00      	nop
 80132ce:	3718      	adds	r7, #24
 80132d0:	46bd      	mov	sp, r7
 80132d2:	bd80      	pop	{r7, pc}
 80132d4:	2000ed94 	.word	0x2000ed94
 80132d8:	08013279 	.word	0x08013279

080132dc <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 80132dc:	b580      	push	{r7, lr}
 80132de:	b082      	sub	sp, #8
 80132e0:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80132e2:	2301      	movs	r3, #1
 80132e4:	607b      	str	r3, [r7, #4]
 80132e6:	e00e      	b.n	8013306 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 80132e8:	4a0b      	ldr	r2, [pc, #44]	@ (8013318 <sys_timeouts_init+0x3c>)
 80132ea:	687b      	ldr	r3, [r7, #4]
 80132ec:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80132f0:	687b      	ldr	r3, [r7, #4]
 80132f2:	00db      	lsls	r3, r3, #3
 80132f4:	4a08      	ldr	r2, [pc, #32]	@ (8013318 <sys_timeouts_init+0x3c>)
 80132f6:	4413      	add	r3, r2
 80132f8:	461a      	mov	r2, r3
 80132fa:	4908      	ldr	r1, [pc, #32]	@ (801331c <sys_timeouts_init+0x40>)
 80132fc:	f000 f810 	bl	8013320 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8013300:	687b      	ldr	r3, [r7, #4]
 8013302:	3301      	adds	r3, #1
 8013304:	607b      	str	r3, [r7, #4]
 8013306:	687b      	ldr	r3, [r7, #4]
 8013308:	2b02      	cmp	r3, #2
 801330a:	d9ed      	bls.n	80132e8 <sys_timeouts_init+0xc>
  }
}
 801330c:	bf00      	nop
 801330e:	bf00      	nop
 8013310:	3708      	adds	r7, #8
 8013312:	46bd      	mov	sp, r7
 8013314:	bd80      	pop	{r7, pc}
 8013316:	bf00      	nop
 8013318:	0801b11c 	.word	0x0801b11c
 801331c:	08013279 	.word	0x08013279

08013320 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8013320:	b580      	push	{r7, lr}
 8013322:	b086      	sub	sp, #24
 8013324:	af00      	add	r7, sp, #0
 8013326:	60f8      	str	r0, [r7, #12]
 8013328:	60b9      	str	r1, [r7, #8]
 801332a:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 801332c:	68fb      	ldr	r3, [r7, #12]
 801332e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8013332:	d306      	bcc.n	8013342 <sys_timeout+0x22>
 8013334:	4b0a      	ldr	r3, [pc, #40]	@ (8013360 <sys_timeout+0x40>)
 8013336:	f240 1229 	movw	r2, #297	@ 0x129
 801333a:	490a      	ldr	r1, [pc, #40]	@ (8013364 <sys_timeout+0x44>)
 801333c:	480a      	ldr	r0, [pc, #40]	@ (8013368 <sys_timeout+0x48>)
 801333e:	f003 f92f 	bl	80165a0 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8013342:	f7f2 fa73 	bl	800582c <sys_now>
 8013346:	4602      	mov	r2, r0
 8013348:	68fb      	ldr	r3, [r7, #12]
 801334a:	4413      	add	r3, r2
 801334c:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801334e:	687a      	ldr	r2, [r7, #4]
 8013350:	68b9      	ldr	r1, [r7, #8]
 8013352:	6978      	ldr	r0, [r7, #20]
 8013354:	f7ff ff22 	bl	801319c <sys_timeout_abs>
#endif
}
 8013358:	bf00      	nop
 801335a:	3718      	adds	r7, #24
 801335c:	46bd      	mov	sp, r7
 801335e:	bd80      	pop	{r7, pc}
 8013360:	0801a4ec 	.word	0x0801a4ec
 8013364:	0801a588 	.word	0x0801a588
 8013368:	0801a560 	.word	0x0801a560

0801336c <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 801336c:	b580      	push	{r7, lr}
 801336e:	b084      	sub	sp, #16
 8013370:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8013372:	f7f2 fa5b 	bl	800582c <sys_now>
 8013376:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8013378:	4b17      	ldr	r3, [pc, #92]	@ (80133d8 <sys_check_timeouts+0x6c>)
 801337a:	681b      	ldr	r3, [r3, #0]
 801337c:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 801337e:	68bb      	ldr	r3, [r7, #8]
 8013380:	2b00      	cmp	r3, #0
 8013382:	d022      	beq.n	80133ca <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8013384:	68bb      	ldr	r3, [r7, #8]
 8013386:	685b      	ldr	r3, [r3, #4]
 8013388:	68fa      	ldr	r2, [r7, #12]
 801338a:	1ad3      	subs	r3, r2, r3
 801338c:	0fdb      	lsrs	r3, r3, #31
 801338e:	f003 0301 	and.w	r3, r3, #1
 8013392:	b2db      	uxtb	r3, r3
 8013394:	2b00      	cmp	r3, #0
 8013396:	d11a      	bne.n	80133ce <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8013398:	68bb      	ldr	r3, [r7, #8]
 801339a:	681b      	ldr	r3, [r3, #0]
 801339c:	4a0e      	ldr	r2, [pc, #56]	@ (80133d8 <sys_check_timeouts+0x6c>)
 801339e:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 80133a0:	68bb      	ldr	r3, [r7, #8]
 80133a2:	689b      	ldr	r3, [r3, #8]
 80133a4:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 80133a6:	68bb      	ldr	r3, [r7, #8]
 80133a8:	68db      	ldr	r3, [r3, #12]
 80133aa:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 80133ac:	68bb      	ldr	r3, [r7, #8]
 80133ae:	685b      	ldr	r3, [r3, #4]
 80133b0:	4a0a      	ldr	r2, [pc, #40]	@ (80133dc <sys_check_timeouts+0x70>)
 80133b2:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 80133b4:	68b9      	ldr	r1, [r7, #8]
 80133b6:	200a      	movs	r0, #10
 80133b8:	f7f8 fce2 	bl	800bd80 <memp_free>
    if (handler != NULL) {
 80133bc:	687b      	ldr	r3, [r7, #4]
 80133be:	2b00      	cmp	r3, #0
 80133c0:	d0da      	beq.n	8013378 <sys_check_timeouts+0xc>
      handler(arg);
 80133c2:	687b      	ldr	r3, [r7, #4]
 80133c4:	6838      	ldr	r0, [r7, #0]
 80133c6:	4798      	blx	r3
  do {
 80133c8:	e7d6      	b.n	8013378 <sys_check_timeouts+0xc>
      return;
 80133ca:	bf00      	nop
 80133cc:	e000      	b.n	80133d0 <sys_check_timeouts+0x64>
      return;
 80133ce:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 80133d0:	3710      	adds	r7, #16
 80133d2:	46bd      	mov	sp, r7
 80133d4:	bd80      	pop	{r7, pc}
 80133d6:	bf00      	nop
 80133d8:	2000ed90 	.word	0x2000ed90
 80133dc:	2000ed94 	.word	0x2000ed94

080133e0 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 80133e0:	b580      	push	{r7, lr}
 80133e2:	b082      	sub	sp, #8
 80133e4:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 80133e6:	4b16      	ldr	r3, [pc, #88]	@ (8013440 <sys_timeouts_sleeptime+0x60>)
 80133e8:	681b      	ldr	r3, [r3, #0]
 80133ea:	2b00      	cmp	r3, #0
 80133ec:	d102      	bne.n	80133f4 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 80133ee:	f04f 33ff 	mov.w	r3, #4294967295
 80133f2:	e020      	b.n	8013436 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 80133f4:	f7f2 fa1a 	bl	800582c <sys_now>
 80133f8:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 80133fa:	4b11      	ldr	r3, [pc, #68]	@ (8013440 <sys_timeouts_sleeptime+0x60>)
 80133fc:	681b      	ldr	r3, [r3, #0]
 80133fe:	685a      	ldr	r2, [r3, #4]
 8013400:	687b      	ldr	r3, [r7, #4]
 8013402:	1ad3      	subs	r3, r2, r3
 8013404:	0fdb      	lsrs	r3, r3, #31
 8013406:	f003 0301 	and.w	r3, r3, #1
 801340a:	b2db      	uxtb	r3, r3
 801340c:	2b00      	cmp	r3, #0
 801340e:	d001      	beq.n	8013414 <sys_timeouts_sleeptime+0x34>
    return 0;
 8013410:	2300      	movs	r3, #0
 8013412:	e010      	b.n	8013436 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8013414:	4b0a      	ldr	r3, [pc, #40]	@ (8013440 <sys_timeouts_sleeptime+0x60>)
 8013416:	681b      	ldr	r3, [r3, #0]
 8013418:	685a      	ldr	r2, [r3, #4]
 801341a:	687b      	ldr	r3, [r7, #4]
 801341c:	1ad3      	subs	r3, r2, r3
 801341e:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8013420:	683b      	ldr	r3, [r7, #0]
 8013422:	2b00      	cmp	r3, #0
 8013424:	da06      	bge.n	8013434 <sys_timeouts_sleeptime+0x54>
 8013426:	4b07      	ldr	r3, [pc, #28]	@ (8013444 <sys_timeouts_sleeptime+0x64>)
 8013428:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 801342c:	4906      	ldr	r1, [pc, #24]	@ (8013448 <sys_timeouts_sleeptime+0x68>)
 801342e:	4807      	ldr	r0, [pc, #28]	@ (801344c <sys_timeouts_sleeptime+0x6c>)
 8013430:	f003 f8b6 	bl	80165a0 <iprintf>
    return ret;
 8013434:	683b      	ldr	r3, [r7, #0]
  }
}
 8013436:	4618      	mov	r0, r3
 8013438:	3708      	adds	r7, #8
 801343a:	46bd      	mov	sp, r7
 801343c:	bd80      	pop	{r7, pc}
 801343e:	bf00      	nop
 8013440:	2000ed90 	.word	0x2000ed90
 8013444:	0801a4ec 	.word	0x0801a4ec
 8013448:	0801a5c0 	.word	0x0801a5c0
 801344c:	0801a560 	.word	0x0801a560

08013450 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8013450:	b580      	push	{r7, lr}
 8013452:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8013454:	f002 ffa4 	bl	80163a0 <rand>
 8013458:	4603      	mov	r3, r0
 801345a:	b29b      	uxth	r3, r3
 801345c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8013460:	b29b      	uxth	r3, r3
 8013462:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8013466:	b29a      	uxth	r2, r3
 8013468:	4b01      	ldr	r3, [pc, #4]	@ (8013470 <udp_init+0x20>)
 801346a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 801346c:	bf00      	nop
 801346e:	bd80      	pop	{r7, pc}
 8013470:	2000002c 	.word	0x2000002c

08013474 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8013474:	b480      	push	{r7}
 8013476:	b083      	sub	sp, #12
 8013478:	af00      	add	r7, sp, #0
  u16_t n = 0;
 801347a:	2300      	movs	r3, #0
 801347c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801347e:	4b17      	ldr	r3, [pc, #92]	@ (80134dc <udp_new_port+0x68>)
 8013480:	881b      	ldrh	r3, [r3, #0]
 8013482:	1c5a      	adds	r2, r3, #1
 8013484:	b291      	uxth	r1, r2
 8013486:	4a15      	ldr	r2, [pc, #84]	@ (80134dc <udp_new_port+0x68>)
 8013488:	8011      	strh	r1, [r2, #0]
 801348a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801348e:	4293      	cmp	r3, r2
 8013490:	d103      	bne.n	801349a <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8013492:	4b12      	ldr	r3, [pc, #72]	@ (80134dc <udp_new_port+0x68>)
 8013494:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8013498:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801349a:	4b11      	ldr	r3, [pc, #68]	@ (80134e0 <udp_new_port+0x6c>)
 801349c:	681b      	ldr	r3, [r3, #0]
 801349e:	603b      	str	r3, [r7, #0]
 80134a0:	e011      	b.n	80134c6 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 80134a2:	683b      	ldr	r3, [r7, #0]
 80134a4:	8a5a      	ldrh	r2, [r3, #18]
 80134a6:	4b0d      	ldr	r3, [pc, #52]	@ (80134dc <udp_new_port+0x68>)
 80134a8:	881b      	ldrh	r3, [r3, #0]
 80134aa:	429a      	cmp	r2, r3
 80134ac:	d108      	bne.n	80134c0 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 80134ae:	88fb      	ldrh	r3, [r7, #6]
 80134b0:	3301      	adds	r3, #1
 80134b2:	80fb      	strh	r3, [r7, #6]
 80134b4:	88fb      	ldrh	r3, [r7, #6]
 80134b6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80134ba:	d3e0      	bcc.n	801347e <udp_new_port+0xa>
        return 0;
 80134bc:	2300      	movs	r3, #0
 80134be:	e007      	b.n	80134d0 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80134c0:	683b      	ldr	r3, [r7, #0]
 80134c2:	68db      	ldr	r3, [r3, #12]
 80134c4:	603b      	str	r3, [r7, #0]
 80134c6:	683b      	ldr	r3, [r7, #0]
 80134c8:	2b00      	cmp	r3, #0
 80134ca:	d1ea      	bne.n	80134a2 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 80134cc:	4b03      	ldr	r3, [pc, #12]	@ (80134dc <udp_new_port+0x68>)
 80134ce:	881b      	ldrh	r3, [r3, #0]
}
 80134d0:	4618      	mov	r0, r3
 80134d2:	370c      	adds	r7, #12
 80134d4:	46bd      	mov	sp, r7
 80134d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134da:	4770      	bx	lr
 80134dc:	2000002c 	.word	0x2000002c
 80134e0:	2000ed9c 	.word	0x2000ed9c

080134e4 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 80134e4:	b580      	push	{r7, lr}
 80134e6:	b084      	sub	sp, #16
 80134e8:	af00      	add	r7, sp, #0
 80134ea:	60f8      	str	r0, [r7, #12]
 80134ec:	60b9      	str	r1, [r7, #8]
 80134ee:	4613      	mov	r3, r2
 80134f0:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 80134f2:	68fb      	ldr	r3, [r7, #12]
 80134f4:	2b00      	cmp	r3, #0
 80134f6:	d105      	bne.n	8013504 <udp_input_local_match+0x20>
 80134f8:	4b27      	ldr	r3, [pc, #156]	@ (8013598 <udp_input_local_match+0xb4>)
 80134fa:	2287      	movs	r2, #135	@ 0x87
 80134fc:	4927      	ldr	r1, [pc, #156]	@ (801359c <udp_input_local_match+0xb8>)
 80134fe:	4828      	ldr	r0, [pc, #160]	@ (80135a0 <udp_input_local_match+0xbc>)
 8013500:	f003 f84e 	bl	80165a0 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8013504:	68bb      	ldr	r3, [r7, #8]
 8013506:	2b00      	cmp	r3, #0
 8013508:	d105      	bne.n	8013516 <udp_input_local_match+0x32>
 801350a:	4b23      	ldr	r3, [pc, #140]	@ (8013598 <udp_input_local_match+0xb4>)
 801350c:	2288      	movs	r2, #136	@ 0x88
 801350e:	4925      	ldr	r1, [pc, #148]	@ (80135a4 <udp_input_local_match+0xc0>)
 8013510:	4823      	ldr	r0, [pc, #140]	@ (80135a0 <udp_input_local_match+0xbc>)
 8013512:	f003 f845 	bl	80165a0 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013516:	68fb      	ldr	r3, [r7, #12]
 8013518:	7a1b      	ldrb	r3, [r3, #8]
 801351a:	2b00      	cmp	r3, #0
 801351c:	d00b      	beq.n	8013536 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801351e:	68fb      	ldr	r3, [r7, #12]
 8013520:	7a1a      	ldrb	r2, [r3, #8]
 8013522:	4b21      	ldr	r3, [pc, #132]	@ (80135a8 <udp_input_local_match+0xc4>)
 8013524:	685b      	ldr	r3, [r3, #4]
 8013526:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801352a:	3301      	adds	r3, #1
 801352c:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801352e:	429a      	cmp	r2, r3
 8013530:	d001      	beq.n	8013536 <udp_input_local_match+0x52>
    return 0;
 8013532:	2300      	movs	r3, #0
 8013534:	e02b      	b.n	801358e <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8013536:	79fb      	ldrb	r3, [r7, #7]
 8013538:	2b00      	cmp	r3, #0
 801353a:	d018      	beq.n	801356e <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801353c:	68fb      	ldr	r3, [r7, #12]
 801353e:	2b00      	cmp	r3, #0
 8013540:	d013      	beq.n	801356a <udp_input_local_match+0x86>
 8013542:	68fb      	ldr	r3, [r7, #12]
 8013544:	681b      	ldr	r3, [r3, #0]
 8013546:	2b00      	cmp	r3, #0
 8013548:	d00f      	beq.n	801356a <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801354a:	4b17      	ldr	r3, [pc, #92]	@ (80135a8 <udp_input_local_match+0xc4>)
 801354c:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801354e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013552:	d00a      	beq.n	801356a <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8013554:	68fb      	ldr	r3, [r7, #12]
 8013556:	681a      	ldr	r2, [r3, #0]
 8013558:	4b13      	ldr	r3, [pc, #76]	@ (80135a8 <udp_input_local_match+0xc4>)
 801355a:	695b      	ldr	r3, [r3, #20]
 801355c:	405a      	eors	r2, r3
 801355e:	68bb      	ldr	r3, [r7, #8]
 8013560:	3308      	adds	r3, #8
 8013562:	681b      	ldr	r3, [r3, #0]
 8013564:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8013566:	2b00      	cmp	r3, #0
 8013568:	d110      	bne.n	801358c <udp_input_local_match+0xa8>
          return 1;
 801356a:	2301      	movs	r3, #1
 801356c:	e00f      	b.n	801358e <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801356e:	68fb      	ldr	r3, [r7, #12]
 8013570:	2b00      	cmp	r3, #0
 8013572:	d009      	beq.n	8013588 <udp_input_local_match+0xa4>
 8013574:	68fb      	ldr	r3, [r7, #12]
 8013576:	681b      	ldr	r3, [r3, #0]
 8013578:	2b00      	cmp	r3, #0
 801357a:	d005      	beq.n	8013588 <udp_input_local_match+0xa4>
 801357c:	68fb      	ldr	r3, [r7, #12]
 801357e:	681a      	ldr	r2, [r3, #0]
 8013580:	4b09      	ldr	r3, [pc, #36]	@ (80135a8 <udp_input_local_match+0xc4>)
 8013582:	695b      	ldr	r3, [r3, #20]
 8013584:	429a      	cmp	r2, r3
 8013586:	d101      	bne.n	801358c <udp_input_local_match+0xa8>
        return 1;
 8013588:	2301      	movs	r3, #1
 801358a:	e000      	b.n	801358e <udp_input_local_match+0xaa>
      }
  }

  return 0;
 801358c:	2300      	movs	r3, #0
}
 801358e:	4618      	mov	r0, r3
 8013590:	3710      	adds	r7, #16
 8013592:	46bd      	mov	sp, r7
 8013594:	bd80      	pop	{r7, pc}
 8013596:	bf00      	nop
 8013598:	0801a5d4 	.word	0x0801a5d4
 801359c:	0801a604 	.word	0x0801a604
 80135a0:	0801a628 	.word	0x0801a628
 80135a4:	0801a650 	.word	0x0801a650
 80135a8:	200093f4 	.word	0x200093f4

080135ac <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 80135ac:	b590      	push	{r4, r7, lr}
 80135ae:	b08d      	sub	sp, #52	@ 0x34
 80135b0:	af02      	add	r7, sp, #8
 80135b2:	6078      	str	r0, [r7, #4]
 80135b4:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 80135b6:	2300      	movs	r3, #0
 80135b8:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 80135ba:	687b      	ldr	r3, [r7, #4]
 80135bc:	2b00      	cmp	r3, #0
 80135be:	d105      	bne.n	80135cc <udp_input+0x20>
 80135c0:	4b7c      	ldr	r3, [pc, #496]	@ (80137b4 <udp_input+0x208>)
 80135c2:	22cf      	movs	r2, #207	@ 0xcf
 80135c4:	497c      	ldr	r1, [pc, #496]	@ (80137b8 <udp_input+0x20c>)
 80135c6:	487d      	ldr	r0, [pc, #500]	@ (80137bc <udp_input+0x210>)
 80135c8:	f002 ffea 	bl	80165a0 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 80135cc:	683b      	ldr	r3, [r7, #0]
 80135ce:	2b00      	cmp	r3, #0
 80135d0:	d105      	bne.n	80135de <udp_input+0x32>
 80135d2:	4b78      	ldr	r3, [pc, #480]	@ (80137b4 <udp_input+0x208>)
 80135d4:	22d0      	movs	r2, #208	@ 0xd0
 80135d6:	497a      	ldr	r1, [pc, #488]	@ (80137c0 <udp_input+0x214>)
 80135d8:	4878      	ldr	r0, [pc, #480]	@ (80137bc <udp_input+0x210>)
 80135da:	f002 ffe1 	bl	80165a0 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 80135de:	687b      	ldr	r3, [r7, #4]
 80135e0:	895b      	ldrh	r3, [r3, #10]
 80135e2:	2b07      	cmp	r3, #7
 80135e4:	d803      	bhi.n	80135ee <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 80135e6:	6878      	ldr	r0, [r7, #4]
 80135e8:	f7f9 fa6e 	bl	800cac8 <pbuf_free>
    goto end;
 80135ec:	e0de      	b.n	80137ac <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 80135ee:	687b      	ldr	r3, [r7, #4]
 80135f0:	685b      	ldr	r3, [r3, #4]
 80135f2:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 80135f4:	4b73      	ldr	r3, [pc, #460]	@ (80137c4 <udp_input+0x218>)
 80135f6:	695b      	ldr	r3, [r3, #20]
 80135f8:	4a72      	ldr	r2, [pc, #456]	@ (80137c4 <udp_input+0x218>)
 80135fa:	6812      	ldr	r2, [r2, #0]
 80135fc:	4611      	mov	r1, r2
 80135fe:	4618      	mov	r0, r3
 8013600:	f001 fd96 	bl	8015130 <ip4_addr_isbroadcast_u32>
 8013604:	4603      	mov	r3, r0
 8013606:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8013608:	697b      	ldr	r3, [r7, #20]
 801360a:	881b      	ldrh	r3, [r3, #0]
 801360c:	b29b      	uxth	r3, r3
 801360e:	4618      	mov	r0, r3
 8013610:	f7f7 fe68 	bl	800b2e4 <lwip_htons>
 8013614:	4603      	mov	r3, r0
 8013616:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8013618:	697b      	ldr	r3, [r7, #20]
 801361a:	885b      	ldrh	r3, [r3, #2]
 801361c:	b29b      	uxth	r3, r3
 801361e:	4618      	mov	r0, r3
 8013620:	f7f7 fe60 	bl	800b2e4 <lwip_htons>
 8013624:	4603      	mov	r3, r0
 8013626:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8013628:	2300      	movs	r3, #0
 801362a:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 801362c:	2300      	movs	r3, #0
 801362e:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8013630:	2300      	movs	r3, #0
 8013632:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013634:	4b64      	ldr	r3, [pc, #400]	@ (80137c8 <udp_input+0x21c>)
 8013636:	681b      	ldr	r3, [r3, #0]
 8013638:	627b      	str	r3, [r7, #36]	@ 0x24
 801363a:	e054      	b.n	80136e6 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 801363c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801363e:	8a5b      	ldrh	r3, [r3, #18]
 8013640:	89fa      	ldrh	r2, [r7, #14]
 8013642:	429a      	cmp	r2, r3
 8013644:	d14a      	bne.n	80136dc <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8013646:	7cfb      	ldrb	r3, [r7, #19]
 8013648:	461a      	mov	r2, r3
 801364a:	6839      	ldr	r1, [r7, #0]
 801364c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801364e:	f7ff ff49 	bl	80134e4 <udp_input_local_match>
 8013652:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8013654:	2b00      	cmp	r3, #0
 8013656:	d041      	beq.n	80136dc <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8013658:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801365a:	7c1b      	ldrb	r3, [r3, #16]
 801365c:	f003 0304 	and.w	r3, r3, #4
 8013660:	2b00      	cmp	r3, #0
 8013662:	d11d      	bne.n	80136a0 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8013664:	69fb      	ldr	r3, [r7, #28]
 8013666:	2b00      	cmp	r3, #0
 8013668:	d102      	bne.n	8013670 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 801366a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801366c:	61fb      	str	r3, [r7, #28]
 801366e:	e017      	b.n	80136a0 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8013670:	7cfb      	ldrb	r3, [r7, #19]
 8013672:	2b00      	cmp	r3, #0
 8013674:	d014      	beq.n	80136a0 <udp_input+0xf4>
 8013676:	4b53      	ldr	r3, [pc, #332]	@ (80137c4 <udp_input+0x218>)
 8013678:	695b      	ldr	r3, [r3, #20]
 801367a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801367e:	d10f      	bne.n	80136a0 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8013680:	69fb      	ldr	r3, [r7, #28]
 8013682:	681a      	ldr	r2, [r3, #0]
 8013684:	683b      	ldr	r3, [r7, #0]
 8013686:	3304      	adds	r3, #4
 8013688:	681b      	ldr	r3, [r3, #0]
 801368a:	429a      	cmp	r2, r3
 801368c:	d008      	beq.n	80136a0 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801368e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013690:	681a      	ldr	r2, [r3, #0]
 8013692:	683b      	ldr	r3, [r7, #0]
 8013694:	3304      	adds	r3, #4
 8013696:	681b      	ldr	r3, [r3, #0]
 8013698:	429a      	cmp	r2, r3
 801369a:	d101      	bne.n	80136a0 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 801369c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801369e:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 80136a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80136a2:	8a9b      	ldrh	r3, [r3, #20]
 80136a4:	8a3a      	ldrh	r2, [r7, #16]
 80136a6:	429a      	cmp	r2, r3
 80136a8:	d118      	bne.n	80136dc <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 80136aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80136ac:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 80136ae:	2b00      	cmp	r3, #0
 80136b0:	d005      	beq.n	80136be <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 80136b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80136b4:	685a      	ldr	r2, [r3, #4]
 80136b6:	4b43      	ldr	r3, [pc, #268]	@ (80137c4 <udp_input+0x218>)
 80136b8:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 80136ba:	429a      	cmp	r2, r3
 80136bc:	d10e      	bne.n	80136dc <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 80136be:	6a3b      	ldr	r3, [r7, #32]
 80136c0:	2b00      	cmp	r3, #0
 80136c2:	d014      	beq.n	80136ee <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 80136c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80136c6:	68da      	ldr	r2, [r3, #12]
 80136c8:	6a3b      	ldr	r3, [r7, #32]
 80136ca:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 80136cc:	4b3e      	ldr	r3, [pc, #248]	@ (80137c8 <udp_input+0x21c>)
 80136ce:	681a      	ldr	r2, [r3, #0]
 80136d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80136d2:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 80136d4:	4a3c      	ldr	r2, [pc, #240]	@ (80137c8 <udp_input+0x21c>)
 80136d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80136d8:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 80136da:	e008      	b.n	80136ee <udp_input+0x142>
      }
    }

    prev = pcb;
 80136dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80136de:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80136e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80136e2:	68db      	ldr	r3, [r3, #12]
 80136e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80136e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80136e8:	2b00      	cmp	r3, #0
 80136ea:	d1a7      	bne.n	801363c <udp_input+0x90>
 80136ec:	e000      	b.n	80136f0 <udp_input+0x144>
        break;
 80136ee:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 80136f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80136f2:	2b00      	cmp	r3, #0
 80136f4:	d101      	bne.n	80136fa <udp_input+0x14e>
    pcb = uncon_pcb;
 80136f6:	69fb      	ldr	r3, [r7, #28]
 80136f8:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 80136fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80136fc:	2b00      	cmp	r3, #0
 80136fe:	d002      	beq.n	8013706 <udp_input+0x15a>
    for_us = 1;
 8013700:	2301      	movs	r3, #1
 8013702:	76fb      	strb	r3, [r7, #27]
 8013704:	e00a      	b.n	801371c <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8013706:	683b      	ldr	r3, [r7, #0]
 8013708:	3304      	adds	r3, #4
 801370a:	681a      	ldr	r2, [r3, #0]
 801370c:	4b2d      	ldr	r3, [pc, #180]	@ (80137c4 <udp_input+0x218>)
 801370e:	695b      	ldr	r3, [r3, #20]
 8013710:	429a      	cmp	r2, r3
 8013712:	bf0c      	ite	eq
 8013714:	2301      	moveq	r3, #1
 8013716:	2300      	movne	r3, #0
 8013718:	b2db      	uxtb	r3, r3
 801371a:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 801371c:	7efb      	ldrb	r3, [r7, #27]
 801371e:	2b00      	cmp	r3, #0
 8013720:	d041      	beq.n	80137a6 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8013722:	2108      	movs	r1, #8
 8013724:	6878      	ldr	r0, [r7, #4]
 8013726:	f7f9 f949 	bl	800c9bc <pbuf_remove_header>
 801372a:	4603      	mov	r3, r0
 801372c:	2b00      	cmp	r3, #0
 801372e:	d00a      	beq.n	8013746 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8013730:	4b20      	ldr	r3, [pc, #128]	@ (80137b4 <udp_input+0x208>)
 8013732:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 8013736:	4925      	ldr	r1, [pc, #148]	@ (80137cc <udp_input+0x220>)
 8013738:	4820      	ldr	r0, [pc, #128]	@ (80137bc <udp_input+0x210>)
 801373a:	f002 ff31 	bl	80165a0 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801373e:	6878      	ldr	r0, [r7, #4]
 8013740:	f7f9 f9c2 	bl	800cac8 <pbuf_free>
      goto end;
 8013744:	e032      	b.n	80137ac <udp_input+0x200>
    }

    if (pcb != NULL) {
 8013746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013748:	2b00      	cmp	r3, #0
 801374a:	d012      	beq.n	8013772 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 801374c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801374e:	699b      	ldr	r3, [r3, #24]
 8013750:	2b00      	cmp	r3, #0
 8013752:	d00a      	beq.n	801376a <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8013754:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013756:	699c      	ldr	r4, [r3, #24]
 8013758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801375a:	69d8      	ldr	r0, [r3, #28]
 801375c:	8a3b      	ldrh	r3, [r7, #16]
 801375e:	9300      	str	r3, [sp, #0]
 8013760:	4b1b      	ldr	r3, [pc, #108]	@ (80137d0 <udp_input+0x224>)
 8013762:	687a      	ldr	r2, [r7, #4]
 8013764:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8013766:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8013768:	e021      	b.n	80137ae <udp_input+0x202>
        pbuf_free(p);
 801376a:	6878      	ldr	r0, [r7, #4]
 801376c:	f7f9 f9ac 	bl	800cac8 <pbuf_free>
        goto end;
 8013770:	e01c      	b.n	80137ac <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8013772:	7cfb      	ldrb	r3, [r7, #19]
 8013774:	2b00      	cmp	r3, #0
 8013776:	d112      	bne.n	801379e <udp_input+0x1f2>
 8013778:	4b12      	ldr	r3, [pc, #72]	@ (80137c4 <udp_input+0x218>)
 801377a:	695b      	ldr	r3, [r3, #20]
 801377c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8013780:	2be0      	cmp	r3, #224	@ 0xe0
 8013782:	d00c      	beq.n	801379e <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8013784:	4b0f      	ldr	r3, [pc, #60]	@ (80137c4 <udp_input+0x218>)
 8013786:	899b      	ldrh	r3, [r3, #12]
 8013788:	3308      	adds	r3, #8
 801378a:	b29b      	uxth	r3, r3
 801378c:	b21b      	sxth	r3, r3
 801378e:	4619      	mov	r1, r3
 8013790:	6878      	ldr	r0, [r7, #4]
 8013792:	f7f9 f986 	bl	800caa2 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8013796:	2103      	movs	r1, #3
 8013798:	6878      	ldr	r0, [r7, #4]
 801379a:	f001 f9a9 	bl	8014af0 <icmp_dest_unreach>
      pbuf_free(p);
 801379e:	6878      	ldr	r0, [r7, #4]
 80137a0:	f7f9 f992 	bl	800cac8 <pbuf_free>
  return;
 80137a4:	e003      	b.n	80137ae <udp_input+0x202>
    pbuf_free(p);
 80137a6:	6878      	ldr	r0, [r7, #4]
 80137a8:	f7f9 f98e 	bl	800cac8 <pbuf_free>
  return;
 80137ac:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 80137ae:	372c      	adds	r7, #44	@ 0x2c
 80137b0:	46bd      	mov	sp, r7
 80137b2:	bd90      	pop	{r4, r7, pc}
 80137b4:	0801a5d4 	.word	0x0801a5d4
 80137b8:	0801a678 	.word	0x0801a678
 80137bc:	0801a628 	.word	0x0801a628
 80137c0:	0801a690 	.word	0x0801a690
 80137c4:	200093f4 	.word	0x200093f4
 80137c8:	2000ed9c 	.word	0x2000ed9c
 80137cc:	0801a6ac 	.word	0x0801a6ac
 80137d0:	20009404 	.word	0x20009404

080137d4 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80137d4:	b580      	push	{r7, lr}
 80137d6:	b086      	sub	sp, #24
 80137d8:	af00      	add	r7, sp, #0
 80137da:	60f8      	str	r0, [r7, #12]
 80137dc:	60b9      	str	r1, [r7, #8]
 80137de:	4613      	mov	r3, r2
 80137e0:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80137e2:	68bb      	ldr	r3, [r7, #8]
 80137e4:	2b00      	cmp	r3, #0
 80137e6:	d101      	bne.n	80137ec <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 80137e8:	4b39      	ldr	r3, [pc, #228]	@ (80138d0 <udp_bind+0xfc>)
 80137ea:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 80137ec:	68fb      	ldr	r3, [r7, #12]
 80137ee:	2b00      	cmp	r3, #0
 80137f0:	d109      	bne.n	8013806 <udp_bind+0x32>
 80137f2:	4b38      	ldr	r3, [pc, #224]	@ (80138d4 <udp_bind+0x100>)
 80137f4:	f240 32b7 	movw	r2, #951	@ 0x3b7
 80137f8:	4937      	ldr	r1, [pc, #220]	@ (80138d8 <udp_bind+0x104>)
 80137fa:	4838      	ldr	r0, [pc, #224]	@ (80138dc <udp_bind+0x108>)
 80137fc:	f002 fed0 	bl	80165a0 <iprintf>
 8013800:	f06f 030f 	mvn.w	r3, #15
 8013804:	e060      	b.n	80138c8 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8013806:	2300      	movs	r3, #0
 8013808:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801380a:	4b35      	ldr	r3, [pc, #212]	@ (80138e0 <udp_bind+0x10c>)
 801380c:	681b      	ldr	r3, [r3, #0]
 801380e:	617b      	str	r3, [r7, #20]
 8013810:	e009      	b.n	8013826 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8013812:	68fa      	ldr	r2, [r7, #12]
 8013814:	697b      	ldr	r3, [r7, #20]
 8013816:	429a      	cmp	r2, r3
 8013818:	d102      	bne.n	8013820 <udp_bind+0x4c>
      rebind = 1;
 801381a:	2301      	movs	r3, #1
 801381c:	74fb      	strb	r3, [r7, #19]
      break;
 801381e:	e005      	b.n	801382c <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013820:	697b      	ldr	r3, [r7, #20]
 8013822:	68db      	ldr	r3, [r3, #12]
 8013824:	617b      	str	r3, [r7, #20]
 8013826:	697b      	ldr	r3, [r7, #20]
 8013828:	2b00      	cmp	r3, #0
 801382a:	d1f2      	bne.n	8013812 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 801382c:	88fb      	ldrh	r3, [r7, #6]
 801382e:	2b00      	cmp	r3, #0
 8013830:	d109      	bne.n	8013846 <udp_bind+0x72>
    port = udp_new_port();
 8013832:	f7ff fe1f 	bl	8013474 <udp_new_port>
 8013836:	4603      	mov	r3, r0
 8013838:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801383a:	88fb      	ldrh	r3, [r7, #6]
 801383c:	2b00      	cmp	r3, #0
 801383e:	d12c      	bne.n	801389a <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8013840:	f06f 0307 	mvn.w	r3, #7
 8013844:	e040      	b.n	80138c8 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013846:	4b26      	ldr	r3, [pc, #152]	@ (80138e0 <udp_bind+0x10c>)
 8013848:	681b      	ldr	r3, [r3, #0]
 801384a:	617b      	str	r3, [r7, #20]
 801384c:	e022      	b.n	8013894 <udp_bind+0xc0>
      if (pcb != ipcb) {
 801384e:	68fa      	ldr	r2, [r7, #12]
 8013850:	697b      	ldr	r3, [r7, #20]
 8013852:	429a      	cmp	r2, r3
 8013854:	d01b      	beq.n	801388e <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8013856:	697b      	ldr	r3, [r7, #20]
 8013858:	8a5b      	ldrh	r3, [r3, #18]
 801385a:	88fa      	ldrh	r2, [r7, #6]
 801385c:	429a      	cmp	r2, r3
 801385e:	d116      	bne.n	801388e <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8013860:	697b      	ldr	r3, [r7, #20]
 8013862:	681a      	ldr	r2, [r3, #0]
 8013864:	68bb      	ldr	r3, [r7, #8]
 8013866:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8013868:	429a      	cmp	r2, r3
 801386a:	d00d      	beq.n	8013888 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801386c:	68bb      	ldr	r3, [r7, #8]
 801386e:	2b00      	cmp	r3, #0
 8013870:	d00a      	beq.n	8013888 <udp_bind+0xb4>
 8013872:	68bb      	ldr	r3, [r7, #8]
 8013874:	681b      	ldr	r3, [r3, #0]
 8013876:	2b00      	cmp	r3, #0
 8013878:	d006      	beq.n	8013888 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801387a:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801387c:	2b00      	cmp	r3, #0
 801387e:	d003      	beq.n	8013888 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8013880:	697b      	ldr	r3, [r7, #20]
 8013882:	681b      	ldr	r3, [r3, #0]
 8013884:	2b00      	cmp	r3, #0
 8013886:	d102      	bne.n	801388e <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8013888:	f06f 0307 	mvn.w	r3, #7
 801388c:	e01c      	b.n	80138c8 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801388e:	697b      	ldr	r3, [r7, #20]
 8013890:	68db      	ldr	r3, [r3, #12]
 8013892:	617b      	str	r3, [r7, #20]
 8013894:	697b      	ldr	r3, [r7, #20]
 8013896:	2b00      	cmp	r3, #0
 8013898:	d1d9      	bne.n	801384e <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801389a:	68bb      	ldr	r3, [r7, #8]
 801389c:	2b00      	cmp	r3, #0
 801389e:	d002      	beq.n	80138a6 <udp_bind+0xd2>
 80138a0:	68bb      	ldr	r3, [r7, #8]
 80138a2:	681b      	ldr	r3, [r3, #0]
 80138a4:	e000      	b.n	80138a8 <udp_bind+0xd4>
 80138a6:	2300      	movs	r3, #0
 80138a8:	68fa      	ldr	r2, [r7, #12]
 80138aa:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 80138ac:	68fb      	ldr	r3, [r7, #12]
 80138ae:	88fa      	ldrh	r2, [r7, #6]
 80138b0:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 80138b2:	7cfb      	ldrb	r3, [r7, #19]
 80138b4:	2b00      	cmp	r3, #0
 80138b6:	d106      	bne.n	80138c6 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 80138b8:	4b09      	ldr	r3, [pc, #36]	@ (80138e0 <udp_bind+0x10c>)
 80138ba:	681a      	ldr	r2, [r3, #0]
 80138bc:	68fb      	ldr	r3, [r7, #12]
 80138be:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 80138c0:	4a07      	ldr	r2, [pc, #28]	@ (80138e0 <udp_bind+0x10c>)
 80138c2:	68fb      	ldr	r3, [r7, #12]
 80138c4:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 80138c6:	2300      	movs	r3, #0
}
 80138c8:	4618      	mov	r0, r3
 80138ca:	3718      	adds	r7, #24
 80138cc:	46bd      	mov	sp, r7
 80138ce:	bd80      	pop	{r7, pc}
 80138d0:	0801b134 	.word	0x0801b134
 80138d4:	0801a5d4 	.word	0x0801a5d4
 80138d8:	0801a89c 	.word	0x0801a89c
 80138dc:	0801a628 	.word	0x0801a628
 80138e0:	2000ed9c 	.word	0x2000ed9c

080138e4 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 80138e4:	b580      	push	{r7, lr}
 80138e6:	b084      	sub	sp, #16
 80138e8:	af00      	add	r7, sp, #0
 80138ea:	60f8      	str	r0, [r7, #12]
 80138ec:	60b9      	str	r1, [r7, #8]
 80138ee:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 80138f0:	68fb      	ldr	r3, [r7, #12]
 80138f2:	2b00      	cmp	r3, #0
 80138f4:	d107      	bne.n	8013906 <udp_recv+0x22>
 80138f6:	4b08      	ldr	r3, [pc, #32]	@ (8013918 <udp_recv+0x34>)
 80138f8:	f240 428a 	movw	r2, #1162	@ 0x48a
 80138fc:	4907      	ldr	r1, [pc, #28]	@ (801391c <udp_recv+0x38>)
 80138fe:	4808      	ldr	r0, [pc, #32]	@ (8013920 <udp_recv+0x3c>)
 8013900:	f002 fe4e 	bl	80165a0 <iprintf>
 8013904:	e005      	b.n	8013912 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8013906:	68fb      	ldr	r3, [r7, #12]
 8013908:	68ba      	ldr	r2, [r7, #8]
 801390a:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 801390c:	68fb      	ldr	r3, [r7, #12]
 801390e:	687a      	ldr	r2, [r7, #4]
 8013910:	61da      	str	r2, [r3, #28]
}
 8013912:	3710      	adds	r7, #16
 8013914:	46bd      	mov	sp, r7
 8013916:	bd80      	pop	{r7, pc}
 8013918:	0801a5d4 	.word	0x0801a5d4
 801391c:	0801a908 	.word	0x0801a908
 8013920:	0801a628 	.word	0x0801a628

08013924 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8013924:	b580      	push	{r7, lr}
 8013926:	b084      	sub	sp, #16
 8013928:	af00      	add	r7, sp, #0
 801392a:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 801392c:	687b      	ldr	r3, [r7, #4]
 801392e:	2b00      	cmp	r3, #0
 8013930:	d107      	bne.n	8013942 <udp_remove+0x1e>
 8013932:	4b19      	ldr	r3, [pc, #100]	@ (8013998 <udp_remove+0x74>)
 8013934:	f240 42a1 	movw	r2, #1185	@ 0x4a1
 8013938:	4918      	ldr	r1, [pc, #96]	@ (801399c <udp_remove+0x78>)
 801393a:	4819      	ldr	r0, [pc, #100]	@ (80139a0 <udp_remove+0x7c>)
 801393c:	f002 fe30 	bl	80165a0 <iprintf>
 8013940:	e026      	b.n	8013990 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8013942:	4b18      	ldr	r3, [pc, #96]	@ (80139a4 <udp_remove+0x80>)
 8013944:	681b      	ldr	r3, [r3, #0]
 8013946:	687a      	ldr	r2, [r7, #4]
 8013948:	429a      	cmp	r2, r3
 801394a:	d105      	bne.n	8013958 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 801394c:	4b15      	ldr	r3, [pc, #84]	@ (80139a4 <udp_remove+0x80>)
 801394e:	681b      	ldr	r3, [r3, #0]
 8013950:	68db      	ldr	r3, [r3, #12]
 8013952:	4a14      	ldr	r2, [pc, #80]	@ (80139a4 <udp_remove+0x80>)
 8013954:	6013      	str	r3, [r2, #0]
 8013956:	e017      	b.n	8013988 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8013958:	4b12      	ldr	r3, [pc, #72]	@ (80139a4 <udp_remove+0x80>)
 801395a:	681b      	ldr	r3, [r3, #0]
 801395c:	60fb      	str	r3, [r7, #12]
 801395e:	e010      	b.n	8013982 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8013960:	68fb      	ldr	r3, [r7, #12]
 8013962:	68db      	ldr	r3, [r3, #12]
 8013964:	2b00      	cmp	r3, #0
 8013966:	d009      	beq.n	801397c <udp_remove+0x58>
 8013968:	68fb      	ldr	r3, [r7, #12]
 801396a:	68db      	ldr	r3, [r3, #12]
 801396c:	687a      	ldr	r2, [r7, #4]
 801396e:	429a      	cmp	r2, r3
 8013970:	d104      	bne.n	801397c <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8013972:	687b      	ldr	r3, [r7, #4]
 8013974:	68da      	ldr	r2, [r3, #12]
 8013976:	68fb      	ldr	r3, [r7, #12]
 8013978:	60da      	str	r2, [r3, #12]
        break;
 801397a:	e005      	b.n	8013988 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801397c:	68fb      	ldr	r3, [r7, #12]
 801397e:	68db      	ldr	r3, [r3, #12]
 8013980:	60fb      	str	r3, [r7, #12]
 8013982:	68fb      	ldr	r3, [r7, #12]
 8013984:	2b00      	cmp	r3, #0
 8013986:	d1eb      	bne.n	8013960 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8013988:	6879      	ldr	r1, [r7, #4]
 801398a:	2000      	movs	r0, #0
 801398c:	f7f8 f9f8 	bl	800bd80 <memp_free>
}
 8013990:	3710      	adds	r7, #16
 8013992:	46bd      	mov	sp, r7
 8013994:	bd80      	pop	{r7, pc}
 8013996:	bf00      	nop
 8013998:	0801a5d4 	.word	0x0801a5d4
 801399c:	0801a920 	.word	0x0801a920
 80139a0:	0801a628 	.word	0x0801a628
 80139a4:	2000ed9c 	.word	0x2000ed9c

080139a8 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 80139a8:	b580      	push	{r7, lr}
 80139aa:	b082      	sub	sp, #8
 80139ac:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 80139ae:	2000      	movs	r0, #0
 80139b0:	f7f8 f970 	bl	800bc94 <memp_malloc>
 80139b4:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 80139b6:	687b      	ldr	r3, [r7, #4]
 80139b8:	2b00      	cmp	r3, #0
 80139ba:	d007      	beq.n	80139cc <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 80139bc:	2220      	movs	r2, #32
 80139be:	2100      	movs	r1, #0
 80139c0:	6878      	ldr	r0, [r7, #4]
 80139c2:	f002 fe8c 	bl	80166de <memset>
    pcb->ttl = UDP_TTL;
 80139c6:	687b      	ldr	r3, [r7, #4]
 80139c8:	22ff      	movs	r2, #255	@ 0xff
 80139ca:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 80139cc:	687b      	ldr	r3, [r7, #4]
}
 80139ce:	4618      	mov	r0, r3
 80139d0:	3708      	adds	r7, #8
 80139d2:	46bd      	mov	sp, r7
 80139d4:	bd80      	pop	{r7, pc}

080139d6 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 80139d6:	b580      	push	{r7, lr}
 80139d8:	b084      	sub	sp, #16
 80139da:	af00      	add	r7, sp, #0
 80139dc:	4603      	mov	r3, r0
 80139de:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 80139e0:	f7ff ffe2 	bl	80139a8 <udp_new>
 80139e4:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 80139e6:	68fb      	ldr	r3, [r7, #12]
}
 80139e8:	4618      	mov	r0, r3
 80139ea:	3710      	adds	r7, #16
 80139ec:	46bd      	mov	sp, r7
 80139ee:	bd80      	pop	{r7, pc}

080139f0 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80139f0:	b480      	push	{r7}
 80139f2:	b085      	sub	sp, #20
 80139f4:	af00      	add	r7, sp, #0
 80139f6:	6078      	str	r0, [r7, #4]
 80139f8:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 80139fa:	687b      	ldr	r3, [r7, #4]
 80139fc:	2b00      	cmp	r3, #0
 80139fe:	d01e      	beq.n	8013a3e <udp_netif_ip_addr_changed+0x4e>
 8013a00:	687b      	ldr	r3, [r7, #4]
 8013a02:	681b      	ldr	r3, [r3, #0]
 8013a04:	2b00      	cmp	r3, #0
 8013a06:	d01a      	beq.n	8013a3e <udp_netif_ip_addr_changed+0x4e>
 8013a08:	683b      	ldr	r3, [r7, #0]
 8013a0a:	2b00      	cmp	r3, #0
 8013a0c:	d017      	beq.n	8013a3e <udp_netif_ip_addr_changed+0x4e>
 8013a0e:	683b      	ldr	r3, [r7, #0]
 8013a10:	681b      	ldr	r3, [r3, #0]
 8013a12:	2b00      	cmp	r3, #0
 8013a14:	d013      	beq.n	8013a3e <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8013a16:	4b0d      	ldr	r3, [pc, #52]	@ (8013a4c <udp_netif_ip_addr_changed+0x5c>)
 8013a18:	681b      	ldr	r3, [r3, #0]
 8013a1a:	60fb      	str	r3, [r7, #12]
 8013a1c:	e00c      	b.n	8013a38 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8013a1e:	68fb      	ldr	r3, [r7, #12]
 8013a20:	681a      	ldr	r2, [r3, #0]
 8013a22:	687b      	ldr	r3, [r7, #4]
 8013a24:	681b      	ldr	r3, [r3, #0]
 8013a26:	429a      	cmp	r2, r3
 8013a28:	d103      	bne.n	8013a32 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8013a2a:	683b      	ldr	r3, [r7, #0]
 8013a2c:	681a      	ldr	r2, [r3, #0]
 8013a2e:	68fb      	ldr	r3, [r7, #12]
 8013a30:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8013a32:	68fb      	ldr	r3, [r7, #12]
 8013a34:	68db      	ldr	r3, [r3, #12]
 8013a36:	60fb      	str	r3, [r7, #12]
 8013a38:	68fb      	ldr	r3, [r7, #12]
 8013a3a:	2b00      	cmp	r3, #0
 8013a3c:	d1ef      	bne.n	8013a1e <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8013a3e:	bf00      	nop
 8013a40:	3714      	adds	r7, #20
 8013a42:	46bd      	mov	sp, r7
 8013a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a48:	4770      	bx	lr
 8013a4a:	bf00      	nop
 8013a4c:	2000ed9c 	.word	0x2000ed9c

08013a50 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8013a50:	b580      	push	{r7, lr}
 8013a52:	b082      	sub	sp, #8
 8013a54:	af00      	add	r7, sp, #0
 8013a56:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8013a58:	4915      	ldr	r1, [pc, #84]	@ (8013ab0 <etharp_free_entry+0x60>)
 8013a5a:	687a      	ldr	r2, [r7, #4]
 8013a5c:	4613      	mov	r3, r2
 8013a5e:	005b      	lsls	r3, r3, #1
 8013a60:	4413      	add	r3, r2
 8013a62:	00db      	lsls	r3, r3, #3
 8013a64:	440b      	add	r3, r1
 8013a66:	681b      	ldr	r3, [r3, #0]
 8013a68:	2b00      	cmp	r3, #0
 8013a6a:	d013      	beq.n	8013a94 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8013a6c:	4910      	ldr	r1, [pc, #64]	@ (8013ab0 <etharp_free_entry+0x60>)
 8013a6e:	687a      	ldr	r2, [r7, #4]
 8013a70:	4613      	mov	r3, r2
 8013a72:	005b      	lsls	r3, r3, #1
 8013a74:	4413      	add	r3, r2
 8013a76:	00db      	lsls	r3, r3, #3
 8013a78:	440b      	add	r3, r1
 8013a7a:	681b      	ldr	r3, [r3, #0]
 8013a7c:	4618      	mov	r0, r3
 8013a7e:	f7f9 f823 	bl	800cac8 <pbuf_free>
    arp_table[i].q = NULL;
 8013a82:	490b      	ldr	r1, [pc, #44]	@ (8013ab0 <etharp_free_entry+0x60>)
 8013a84:	687a      	ldr	r2, [r7, #4]
 8013a86:	4613      	mov	r3, r2
 8013a88:	005b      	lsls	r3, r3, #1
 8013a8a:	4413      	add	r3, r2
 8013a8c:	00db      	lsls	r3, r3, #3
 8013a8e:	440b      	add	r3, r1
 8013a90:	2200      	movs	r2, #0
 8013a92:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8013a94:	4906      	ldr	r1, [pc, #24]	@ (8013ab0 <etharp_free_entry+0x60>)
 8013a96:	687a      	ldr	r2, [r7, #4]
 8013a98:	4613      	mov	r3, r2
 8013a9a:	005b      	lsls	r3, r3, #1
 8013a9c:	4413      	add	r3, r2
 8013a9e:	00db      	lsls	r3, r3, #3
 8013aa0:	440b      	add	r3, r1
 8013aa2:	3314      	adds	r3, #20
 8013aa4:	2200      	movs	r2, #0
 8013aa6:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8013aa8:	bf00      	nop
 8013aaa:	3708      	adds	r7, #8
 8013aac:	46bd      	mov	sp, r7
 8013aae:	bd80      	pop	{r7, pc}
 8013ab0:	2000eda0 	.word	0x2000eda0

08013ab4 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8013ab4:	b580      	push	{r7, lr}
 8013ab6:	b082      	sub	sp, #8
 8013ab8:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013aba:	2300      	movs	r3, #0
 8013abc:	607b      	str	r3, [r7, #4]
 8013abe:	e096      	b.n	8013bee <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8013ac0:	494f      	ldr	r1, [pc, #316]	@ (8013c00 <etharp_tmr+0x14c>)
 8013ac2:	687a      	ldr	r2, [r7, #4]
 8013ac4:	4613      	mov	r3, r2
 8013ac6:	005b      	lsls	r3, r3, #1
 8013ac8:	4413      	add	r3, r2
 8013aca:	00db      	lsls	r3, r3, #3
 8013acc:	440b      	add	r3, r1
 8013ace:	3314      	adds	r3, #20
 8013ad0:	781b      	ldrb	r3, [r3, #0]
 8013ad2:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8013ad4:	78fb      	ldrb	r3, [r7, #3]
 8013ad6:	2b00      	cmp	r3, #0
 8013ad8:	f000 8086 	beq.w	8013be8 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8013adc:	4948      	ldr	r1, [pc, #288]	@ (8013c00 <etharp_tmr+0x14c>)
 8013ade:	687a      	ldr	r2, [r7, #4]
 8013ae0:	4613      	mov	r3, r2
 8013ae2:	005b      	lsls	r3, r3, #1
 8013ae4:	4413      	add	r3, r2
 8013ae6:	00db      	lsls	r3, r3, #3
 8013ae8:	440b      	add	r3, r1
 8013aea:	3312      	adds	r3, #18
 8013aec:	881b      	ldrh	r3, [r3, #0]
 8013aee:	3301      	adds	r3, #1
 8013af0:	b298      	uxth	r0, r3
 8013af2:	4943      	ldr	r1, [pc, #268]	@ (8013c00 <etharp_tmr+0x14c>)
 8013af4:	687a      	ldr	r2, [r7, #4]
 8013af6:	4613      	mov	r3, r2
 8013af8:	005b      	lsls	r3, r3, #1
 8013afa:	4413      	add	r3, r2
 8013afc:	00db      	lsls	r3, r3, #3
 8013afe:	440b      	add	r3, r1
 8013b00:	3312      	adds	r3, #18
 8013b02:	4602      	mov	r2, r0
 8013b04:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8013b06:	493e      	ldr	r1, [pc, #248]	@ (8013c00 <etharp_tmr+0x14c>)
 8013b08:	687a      	ldr	r2, [r7, #4]
 8013b0a:	4613      	mov	r3, r2
 8013b0c:	005b      	lsls	r3, r3, #1
 8013b0e:	4413      	add	r3, r2
 8013b10:	00db      	lsls	r3, r3, #3
 8013b12:	440b      	add	r3, r1
 8013b14:	3312      	adds	r3, #18
 8013b16:	881b      	ldrh	r3, [r3, #0]
 8013b18:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8013b1c:	d215      	bcs.n	8013b4a <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8013b1e:	4938      	ldr	r1, [pc, #224]	@ (8013c00 <etharp_tmr+0x14c>)
 8013b20:	687a      	ldr	r2, [r7, #4]
 8013b22:	4613      	mov	r3, r2
 8013b24:	005b      	lsls	r3, r3, #1
 8013b26:	4413      	add	r3, r2
 8013b28:	00db      	lsls	r3, r3, #3
 8013b2a:	440b      	add	r3, r1
 8013b2c:	3314      	adds	r3, #20
 8013b2e:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8013b30:	2b01      	cmp	r3, #1
 8013b32:	d10e      	bne.n	8013b52 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8013b34:	4932      	ldr	r1, [pc, #200]	@ (8013c00 <etharp_tmr+0x14c>)
 8013b36:	687a      	ldr	r2, [r7, #4]
 8013b38:	4613      	mov	r3, r2
 8013b3a:	005b      	lsls	r3, r3, #1
 8013b3c:	4413      	add	r3, r2
 8013b3e:	00db      	lsls	r3, r3, #3
 8013b40:	440b      	add	r3, r1
 8013b42:	3312      	adds	r3, #18
 8013b44:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8013b46:	2b04      	cmp	r3, #4
 8013b48:	d903      	bls.n	8013b52 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8013b4a:	6878      	ldr	r0, [r7, #4]
 8013b4c:	f7ff ff80 	bl	8013a50 <etharp_free_entry>
 8013b50:	e04a      	b.n	8013be8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8013b52:	492b      	ldr	r1, [pc, #172]	@ (8013c00 <etharp_tmr+0x14c>)
 8013b54:	687a      	ldr	r2, [r7, #4]
 8013b56:	4613      	mov	r3, r2
 8013b58:	005b      	lsls	r3, r3, #1
 8013b5a:	4413      	add	r3, r2
 8013b5c:	00db      	lsls	r3, r3, #3
 8013b5e:	440b      	add	r3, r1
 8013b60:	3314      	adds	r3, #20
 8013b62:	781b      	ldrb	r3, [r3, #0]
 8013b64:	2b03      	cmp	r3, #3
 8013b66:	d10a      	bne.n	8013b7e <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8013b68:	4925      	ldr	r1, [pc, #148]	@ (8013c00 <etharp_tmr+0x14c>)
 8013b6a:	687a      	ldr	r2, [r7, #4]
 8013b6c:	4613      	mov	r3, r2
 8013b6e:	005b      	lsls	r3, r3, #1
 8013b70:	4413      	add	r3, r2
 8013b72:	00db      	lsls	r3, r3, #3
 8013b74:	440b      	add	r3, r1
 8013b76:	3314      	adds	r3, #20
 8013b78:	2204      	movs	r2, #4
 8013b7a:	701a      	strb	r2, [r3, #0]
 8013b7c:	e034      	b.n	8013be8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8013b7e:	4920      	ldr	r1, [pc, #128]	@ (8013c00 <etharp_tmr+0x14c>)
 8013b80:	687a      	ldr	r2, [r7, #4]
 8013b82:	4613      	mov	r3, r2
 8013b84:	005b      	lsls	r3, r3, #1
 8013b86:	4413      	add	r3, r2
 8013b88:	00db      	lsls	r3, r3, #3
 8013b8a:	440b      	add	r3, r1
 8013b8c:	3314      	adds	r3, #20
 8013b8e:	781b      	ldrb	r3, [r3, #0]
 8013b90:	2b04      	cmp	r3, #4
 8013b92:	d10a      	bne.n	8013baa <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8013b94:	491a      	ldr	r1, [pc, #104]	@ (8013c00 <etharp_tmr+0x14c>)
 8013b96:	687a      	ldr	r2, [r7, #4]
 8013b98:	4613      	mov	r3, r2
 8013b9a:	005b      	lsls	r3, r3, #1
 8013b9c:	4413      	add	r3, r2
 8013b9e:	00db      	lsls	r3, r3, #3
 8013ba0:	440b      	add	r3, r1
 8013ba2:	3314      	adds	r3, #20
 8013ba4:	2202      	movs	r2, #2
 8013ba6:	701a      	strb	r2, [r3, #0]
 8013ba8:	e01e      	b.n	8013be8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8013baa:	4915      	ldr	r1, [pc, #84]	@ (8013c00 <etharp_tmr+0x14c>)
 8013bac:	687a      	ldr	r2, [r7, #4]
 8013bae:	4613      	mov	r3, r2
 8013bb0:	005b      	lsls	r3, r3, #1
 8013bb2:	4413      	add	r3, r2
 8013bb4:	00db      	lsls	r3, r3, #3
 8013bb6:	440b      	add	r3, r1
 8013bb8:	3314      	adds	r3, #20
 8013bba:	781b      	ldrb	r3, [r3, #0]
 8013bbc:	2b01      	cmp	r3, #1
 8013bbe:	d113      	bne.n	8013be8 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8013bc0:	490f      	ldr	r1, [pc, #60]	@ (8013c00 <etharp_tmr+0x14c>)
 8013bc2:	687a      	ldr	r2, [r7, #4]
 8013bc4:	4613      	mov	r3, r2
 8013bc6:	005b      	lsls	r3, r3, #1
 8013bc8:	4413      	add	r3, r2
 8013bca:	00db      	lsls	r3, r3, #3
 8013bcc:	440b      	add	r3, r1
 8013bce:	3308      	adds	r3, #8
 8013bd0:	6818      	ldr	r0, [r3, #0]
 8013bd2:	687a      	ldr	r2, [r7, #4]
 8013bd4:	4613      	mov	r3, r2
 8013bd6:	005b      	lsls	r3, r3, #1
 8013bd8:	4413      	add	r3, r2
 8013bda:	00db      	lsls	r3, r3, #3
 8013bdc:	4a08      	ldr	r2, [pc, #32]	@ (8013c00 <etharp_tmr+0x14c>)
 8013bde:	4413      	add	r3, r2
 8013be0:	3304      	adds	r3, #4
 8013be2:	4619      	mov	r1, r3
 8013be4:	f000 fe6e 	bl	80148c4 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013be8:	687b      	ldr	r3, [r7, #4]
 8013bea:	3301      	adds	r3, #1
 8013bec:	607b      	str	r3, [r7, #4]
 8013bee:	687b      	ldr	r3, [r7, #4]
 8013bf0:	2b09      	cmp	r3, #9
 8013bf2:	f77f af65 	ble.w	8013ac0 <etharp_tmr+0xc>
      }
    }
  }
}
 8013bf6:	bf00      	nop
 8013bf8:	bf00      	nop
 8013bfa:	3708      	adds	r7, #8
 8013bfc:	46bd      	mov	sp, r7
 8013bfe:	bd80      	pop	{r7, pc}
 8013c00:	2000eda0 	.word	0x2000eda0

08013c04 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8013c04:	b580      	push	{r7, lr}
 8013c06:	b08a      	sub	sp, #40	@ 0x28
 8013c08:	af00      	add	r7, sp, #0
 8013c0a:	60f8      	str	r0, [r7, #12]
 8013c0c:	460b      	mov	r3, r1
 8013c0e:	607a      	str	r2, [r7, #4]
 8013c10:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8013c12:	230a      	movs	r3, #10
 8013c14:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8013c16:	230a      	movs	r3, #10
 8013c18:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8013c1a:	230a      	movs	r3, #10
 8013c1c:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 8013c1e:	2300      	movs	r3, #0
 8013c20:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8013c22:	230a      	movs	r3, #10
 8013c24:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8013c26:	2300      	movs	r3, #0
 8013c28:	83bb      	strh	r3, [r7, #28]
 8013c2a:	2300      	movs	r3, #0
 8013c2c:	837b      	strh	r3, [r7, #26]
 8013c2e:	2300      	movs	r3, #0
 8013c30:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013c32:	2300      	movs	r3, #0
 8013c34:	843b      	strh	r3, [r7, #32]
 8013c36:	e0ae      	b.n	8013d96 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8013c38:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013c3c:	49a6      	ldr	r1, [pc, #664]	@ (8013ed8 <etharp_find_entry+0x2d4>)
 8013c3e:	4613      	mov	r3, r2
 8013c40:	005b      	lsls	r3, r3, #1
 8013c42:	4413      	add	r3, r2
 8013c44:	00db      	lsls	r3, r3, #3
 8013c46:	440b      	add	r3, r1
 8013c48:	3314      	adds	r3, #20
 8013c4a:	781b      	ldrb	r3, [r3, #0]
 8013c4c:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8013c4e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8013c52:	2b0a      	cmp	r3, #10
 8013c54:	d105      	bne.n	8013c62 <etharp_find_entry+0x5e>
 8013c56:	7dfb      	ldrb	r3, [r7, #23]
 8013c58:	2b00      	cmp	r3, #0
 8013c5a:	d102      	bne.n	8013c62 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8013c5c:	8c3b      	ldrh	r3, [r7, #32]
 8013c5e:	847b      	strh	r3, [r7, #34]	@ 0x22
 8013c60:	e095      	b.n	8013d8e <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8013c62:	7dfb      	ldrb	r3, [r7, #23]
 8013c64:	2b00      	cmp	r3, #0
 8013c66:	f000 8092 	beq.w	8013d8e <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8013c6a:	7dfb      	ldrb	r3, [r7, #23]
 8013c6c:	2b01      	cmp	r3, #1
 8013c6e:	d009      	beq.n	8013c84 <etharp_find_entry+0x80>
 8013c70:	7dfb      	ldrb	r3, [r7, #23]
 8013c72:	2b01      	cmp	r3, #1
 8013c74:	d806      	bhi.n	8013c84 <etharp_find_entry+0x80>
 8013c76:	4b99      	ldr	r3, [pc, #612]	@ (8013edc <etharp_find_entry+0x2d8>)
 8013c78:	f240 1223 	movw	r2, #291	@ 0x123
 8013c7c:	4998      	ldr	r1, [pc, #608]	@ (8013ee0 <etharp_find_entry+0x2dc>)
 8013c7e:	4899      	ldr	r0, [pc, #612]	@ (8013ee4 <etharp_find_entry+0x2e0>)
 8013c80:	f002 fc8e 	bl	80165a0 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8013c84:	68fb      	ldr	r3, [r7, #12]
 8013c86:	2b00      	cmp	r3, #0
 8013c88:	d020      	beq.n	8013ccc <etharp_find_entry+0xc8>
 8013c8a:	68fb      	ldr	r3, [r7, #12]
 8013c8c:	6819      	ldr	r1, [r3, #0]
 8013c8e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013c92:	4891      	ldr	r0, [pc, #580]	@ (8013ed8 <etharp_find_entry+0x2d4>)
 8013c94:	4613      	mov	r3, r2
 8013c96:	005b      	lsls	r3, r3, #1
 8013c98:	4413      	add	r3, r2
 8013c9a:	00db      	lsls	r3, r3, #3
 8013c9c:	4403      	add	r3, r0
 8013c9e:	3304      	adds	r3, #4
 8013ca0:	681b      	ldr	r3, [r3, #0]
 8013ca2:	4299      	cmp	r1, r3
 8013ca4:	d112      	bne.n	8013ccc <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8013ca6:	687b      	ldr	r3, [r7, #4]
 8013ca8:	2b00      	cmp	r3, #0
 8013caa:	d00c      	beq.n	8013cc6 <etharp_find_entry+0xc2>
 8013cac:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013cb0:	4989      	ldr	r1, [pc, #548]	@ (8013ed8 <etharp_find_entry+0x2d4>)
 8013cb2:	4613      	mov	r3, r2
 8013cb4:	005b      	lsls	r3, r3, #1
 8013cb6:	4413      	add	r3, r2
 8013cb8:	00db      	lsls	r3, r3, #3
 8013cba:	440b      	add	r3, r1
 8013cbc:	3308      	adds	r3, #8
 8013cbe:	681b      	ldr	r3, [r3, #0]
 8013cc0:	687a      	ldr	r2, [r7, #4]
 8013cc2:	429a      	cmp	r2, r3
 8013cc4:	d102      	bne.n	8013ccc <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8013cc6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8013cca:	e100      	b.n	8013ece <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8013ccc:	7dfb      	ldrb	r3, [r7, #23]
 8013cce:	2b01      	cmp	r3, #1
 8013cd0:	d140      	bne.n	8013d54 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8013cd2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013cd6:	4980      	ldr	r1, [pc, #512]	@ (8013ed8 <etharp_find_entry+0x2d4>)
 8013cd8:	4613      	mov	r3, r2
 8013cda:	005b      	lsls	r3, r3, #1
 8013cdc:	4413      	add	r3, r2
 8013cde:	00db      	lsls	r3, r3, #3
 8013ce0:	440b      	add	r3, r1
 8013ce2:	681b      	ldr	r3, [r3, #0]
 8013ce4:	2b00      	cmp	r3, #0
 8013ce6:	d01a      	beq.n	8013d1e <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8013ce8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013cec:	497a      	ldr	r1, [pc, #488]	@ (8013ed8 <etharp_find_entry+0x2d4>)
 8013cee:	4613      	mov	r3, r2
 8013cf0:	005b      	lsls	r3, r3, #1
 8013cf2:	4413      	add	r3, r2
 8013cf4:	00db      	lsls	r3, r3, #3
 8013cf6:	440b      	add	r3, r1
 8013cf8:	3312      	adds	r3, #18
 8013cfa:	881b      	ldrh	r3, [r3, #0]
 8013cfc:	8bba      	ldrh	r2, [r7, #28]
 8013cfe:	429a      	cmp	r2, r3
 8013d00:	d845      	bhi.n	8013d8e <etharp_find_entry+0x18a>
            old_queue = i;
 8013d02:	8c3b      	ldrh	r3, [r7, #32]
 8013d04:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8013d06:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013d0a:	4973      	ldr	r1, [pc, #460]	@ (8013ed8 <etharp_find_entry+0x2d4>)
 8013d0c:	4613      	mov	r3, r2
 8013d0e:	005b      	lsls	r3, r3, #1
 8013d10:	4413      	add	r3, r2
 8013d12:	00db      	lsls	r3, r3, #3
 8013d14:	440b      	add	r3, r1
 8013d16:	3312      	adds	r3, #18
 8013d18:	881b      	ldrh	r3, [r3, #0]
 8013d1a:	83bb      	strh	r3, [r7, #28]
 8013d1c:	e037      	b.n	8013d8e <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8013d1e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013d22:	496d      	ldr	r1, [pc, #436]	@ (8013ed8 <etharp_find_entry+0x2d4>)
 8013d24:	4613      	mov	r3, r2
 8013d26:	005b      	lsls	r3, r3, #1
 8013d28:	4413      	add	r3, r2
 8013d2a:	00db      	lsls	r3, r3, #3
 8013d2c:	440b      	add	r3, r1
 8013d2e:	3312      	adds	r3, #18
 8013d30:	881b      	ldrh	r3, [r3, #0]
 8013d32:	8b7a      	ldrh	r2, [r7, #26]
 8013d34:	429a      	cmp	r2, r3
 8013d36:	d82a      	bhi.n	8013d8e <etharp_find_entry+0x18a>
            old_pending = i;
 8013d38:	8c3b      	ldrh	r3, [r7, #32]
 8013d3a:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 8013d3c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013d40:	4965      	ldr	r1, [pc, #404]	@ (8013ed8 <etharp_find_entry+0x2d4>)
 8013d42:	4613      	mov	r3, r2
 8013d44:	005b      	lsls	r3, r3, #1
 8013d46:	4413      	add	r3, r2
 8013d48:	00db      	lsls	r3, r3, #3
 8013d4a:	440b      	add	r3, r1
 8013d4c:	3312      	adds	r3, #18
 8013d4e:	881b      	ldrh	r3, [r3, #0]
 8013d50:	837b      	strh	r3, [r7, #26]
 8013d52:	e01c      	b.n	8013d8e <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8013d54:	7dfb      	ldrb	r3, [r7, #23]
 8013d56:	2b01      	cmp	r3, #1
 8013d58:	d919      	bls.n	8013d8e <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8013d5a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013d5e:	495e      	ldr	r1, [pc, #376]	@ (8013ed8 <etharp_find_entry+0x2d4>)
 8013d60:	4613      	mov	r3, r2
 8013d62:	005b      	lsls	r3, r3, #1
 8013d64:	4413      	add	r3, r2
 8013d66:	00db      	lsls	r3, r3, #3
 8013d68:	440b      	add	r3, r1
 8013d6a:	3312      	adds	r3, #18
 8013d6c:	881b      	ldrh	r3, [r3, #0]
 8013d6e:	8b3a      	ldrh	r2, [r7, #24]
 8013d70:	429a      	cmp	r2, r3
 8013d72:	d80c      	bhi.n	8013d8e <etharp_find_entry+0x18a>
            old_stable = i;
 8013d74:	8c3b      	ldrh	r3, [r7, #32]
 8013d76:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 8013d78:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013d7c:	4956      	ldr	r1, [pc, #344]	@ (8013ed8 <etharp_find_entry+0x2d4>)
 8013d7e:	4613      	mov	r3, r2
 8013d80:	005b      	lsls	r3, r3, #1
 8013d82:	4413      	add	r3, r2
 8013d84:	00db      	lsls	r3, r3, #3
 8013d86:	440b      	add	r3, r1
 8013d88:	3312      	adds	r3, #18
 8013d8a:	881b      	ldrh	r3, [r3, #0]
 8013d8c:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013d8e:	8c3b      	ldrh	r3, [r7, #32]
 8013d90:	3301      	adds	r3, #1
 8013d92:	b29b      	uxth	r3, r3
 8013d94:	843b      	strh	r3, [r7, #32]
 8013d96:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8013d9a:	2b09      	cmp	r3, #9
 8013d9c:	f77f af4c 	ble.w	8013c38 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8013da0:	7afb      	ldrb	r3, [r7, #11]
 8013da2:	f003 0302 	and.w	r3, r3, #2
 8013da6:	2b00      	cmp	r3, #0
 8013da8:	d108      	bne.n	8013dbc <etharp_find_entry+0x1b8>
 8013daa:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8013dae:	2b0a      	cmp	r3, #10
 8013db0:	d107      	bne.n	8013dc2 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8013db2:	7afb      	ldrb	r3, [r7, #11]
 8013db4:	f003 0301 	and.w	r3, r3, #1
 8013db8:	2b00      	cmp	r3, #0
 8013dba:	d102      	bne.n	8013dc2 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8013dbc:	f04f 33ff 	mov.w	r3, #4294967295
 8013dc0:	e085      	b.n	8013ece <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8013dc2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8013dc6:	2b09      	cmp	r3, #9
 8013dc8:	dc02      	bgt.n	8013dd0 <etharp_find_entry+0x1cc>
    i = empty;
 8013dca:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8013dcc:	843b      	strh	r3, [r7, #32]
 8013dce:	e039      	b.n	8013e44 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8013dd0:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8013dd4:	2b09      	cmp	r3, #9
 8013dd6:	dc14      	bgt.n	8013e02 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8013dd8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013dda:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8013ddc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013de0:	493d      	ldr	r1, [pc, #244]	@ (8013ed8 <etharp_find_entry+0x2d4>)
 8013de2:	4613      	mov	r3, r2
 8013de4:	005b      	lsls	r3, r3, #1
 8013de6:	4413      	add	r3, r2
 8013de8:	00db      	lsls	r3, r3, #3
 8013dea:	440b      	add	r3, r1
 8013dec:	681b      	ldr	r3, [r3, #0]
 8013dee:	2b00      	cmp	r3, #0
 8013df0:	d018      	beq.n	8013e24 <etharp_find_entry+0x220>
 8013df2:	4b3a      	ldr	r3, [pc, #232]	@ (8013edc <etharp_find_entry+0x2d8>)
 8013df4:	f240 126d 	movw	r2, #365	@ 0x16d
 8013df8:	493b      	ldr	r1, [pc, #236]	@ (8013ee8 <etharp_find_entry+0x2e4>)
 8013dfa:	483a      	ldr	r0, [pc, #232]	@ (8013ee4 <etharp_find_entry+0x2e0>)
 8013dfc:	f002 fbd0 	bl	80165a0 <iprintf>
 8013e00:	e010      	b.n	8013e24 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8013e02:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8013e06:	2b09      	cmp	r3, #9
 8013e08:	dc02      	bgt.n	8013e10 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8013e0a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8013e0c:	843b      	strh	r3, [r7, #32]
 8013e0e:	e009      	b.n	8013e24 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8013e10:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8013e14:	2b09      	cmp	r3, #9
 8013e16:	dc02      	bgt.n	8013e1e <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8013e18:	8bfb      	ldrh	r3, [r7, #30]
 8013e1a:	843b      	strh	r3, [r7, #32]
 8013e1c:	e002      	b.n	8013e24 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8013e1e:	f04f 33ff 	mov.w	r3, #4294967295
 8013e22:	e054      	b.n	8013ece <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8013e24:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8013e28:	2b09      	cmp	r3, #9
 8013e2a:	dd06      	ble.n	8013e3a <etharp_find_entry+0x236>
 8013e2c:	4b2b      	ldr	r3, [pc, #172]	@ (8013edc <etharp_find_entry+0x2d8>)
 8013e2e:	f240 127f 	movw	r2, #383	@ 0x17f
 8013e32:	492e      	ldr	r1, [pc, #184]	@ (8013eec <etharp_find_entry+0x2e8>)
 8013e34:	482b      	ldr	r0, [pc, #172]	@ (8013ee4 <etharp_find_entry+0x2e0>)
 8013e36:	f002 fbb3 	bl	80165a0 <iprintf>
    etharp_free_entry(i);
 8013e3a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8013e3e:	4618      	mov	r0, r3
 8013e40:	f7ff fe06 	bl	8013a50 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8013e44:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8013e48:	2b09      	cmp	r3, #9
 8013e4a:	dd06      	ble.n	8013e5a <etharp_find_entry+0x256>
 8013e4c:	4b23      	ldr	r3, [pc, #140]	@ (8013edc <etharp_find_entry+0x2d8>)
 8013e4e:	f240 1283 	movw	r2, #387	@ 0x183
 8013e52:	4926      	ldr	r1, [pc, #152]	@ (8013eec <etharp_find_entry+0x2e8>)
 8013e54:	4823      	ldr	r0, [pc, #140]	@ (8013ee4 <etharp_find_entry+0x2e0>)
 8013e56:	f002 fba3 	bl	80165a0 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8013e5a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013e5e:	491e      	ldr	r1, [pc, #120]	@ (8013ed8 <etharp_find_entry+0x2d4>)
 8013e60:	4613      	mov	r3, r2
 8013e62:	005b      	lsls	r3, r3, #1
 8013e64:	4413      	add	r3, r2
 8013e66:	00db      	lsls	r3, r3, #3
 8013e68:	440b      	add	r3, r1
 8013e6a:	3314      	adds	r3, #20
 8013e6c:	781b      	ldrb	r3, [r3, #0]
 8013e6e:	2b00      	cmp	r3, #0
 8013e70:	d006      	beq.n	8013e80 <etharp_find_entry+0x27c>
 8013e72:	4b1a      	ldr	r3, [pc, #104]	@ (8013edc <etharp_find_entry+0x2d8>)
 8013e74:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 8013e78:	491d      	ldr	r1, [pc, #116]	@ (8013ef0 <etharp_find_entry+0x2ec>)
 8013e7a:	481a      	ldr	r0, [pc, #104]	@ (8013ee4 <etharp_find_entry+0x2e0>)
 8013e7c:	f002 fb90 	bl	80165a0 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8013e80:	68fb      	ldr	r3, [r7, #12]
 8013e82:	2b00      	cmp	r3, #0
 8013e84:	d00b      	beq.n	8013e9e <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8013e86:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013e8a:	68fb      	ldr	r3, [r7, #12]
 8013e8c:	6819      	ldr	r1, [r3, #0]
 8013e8e:	4812      	ldr	r0, [pc, #72]	@ (8013ed8 <etharp_find_entry+0x2d4>)
 8013e90:	4613      	mov	r3, r2
 8013e92:	005b      	lsls	r3, r3, #1
 8013e94:	4413      	add	r3, r2
 8013e96:	00db      	lsls	r3, r3, #3
 8013e98:	4403      	add	r3, r0
 8013e9a:	3304      	adds	r3, #4
 8013e9c:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8013e9e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013ea2:	490d      	ldr	r1, [pc, #52]	@ (8013ed8 <etharp_find_entry+0x2d4>)
 8013ea4:	4613      	mov	r3, r2
 8013ea6:	005b      	lsls	r3, r3, #1
 8013ea8:	4413      	add	r3, r2
 8013eaa:	00db      	lsls	r3, r3, #3
 8013eac:	440b      	add	r3, r1
 8013eae:	3312      	adds	r3, #18
 8013eb0:	2200      	movs	r2, #0
 8013eb2:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8013eb4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013eb8:	4907      	ldr	r1, [pc, #28]	@ (8013ed8 <etharp_find_entry+0x2d4>)
 8013eba:	4613      	mov	r3, r2
 8013ebc:	005b      	lsls	r3, r3, #1
 8013ebe:	4413      	add	r3, r2
 8013ec0:	00db      	lsls	r3, r3, #3
 8013ec2:	440b      	add	r3, r1
 8013ec4:	3308      	adds	r3, #8
 8013ec6:	687a      	ldr	r2, [r7, #4]
 8013ec8:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8013eca:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8013ece:	4618      	mov	r0, r3
 8013ed0:	3728      	adds	r7, #40	@ 0x28
 8013ed2:	46bd      	mov	sp, r7
 8013ed4:	bd80      	pop	{r7, pc}
 8013ed6:	bf00      	nop
 8013ed8:	2000eda0 	.word	0x2000eda0
 8013edc:	0801a938 	.word	0x0801a938
 8013ee0:	0801a970 	.word	0x0801a970
 8013ee4:	0801a9b0 	.word	0x0801a9b0
 8013ee8:	0801a9d8 	.word	0x0801a9d8
 8013eec:	0801a9f0 	.word	0x0801a9f0
 8013ef0:	0801aa04 	.word	0x0801aa04

08013ef4 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8013ef4:	b580      	push	{r7, lr}
 8013ef6:	b088      	sub	sp, #32
 8013ef8:	af02      	add	r7, sp, #8
 8013efa:	60f8      	str	r0, [r7, #12]
 8013efc:	60b9      	str	r1, [r7, #8]
 8013efe:	607a      	str	r2, [r7, #4]
 8013f00:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8013f02:	68fb      	ldr	r3, [r7, #12]
 8013f04:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8013f08:	2b06      	cmp	r3, #6
 8013f0a:	d006      	beq.n	8013f1a <etharp_update_arp_entry+0x26>
 8013f0c:	4b48      	ldr	r3, [pc, #288]	@ (8014030 <etharp_update_arp_entry+0x13c>)
 8013f0e:	f240 12a9 	movw	r2, #425	@ 0x1a9
 8013f12:	4948      	ldr	r1, [pc, #288]	@ (8014034 <etharp_update_arp_entry+0x140>)
 8013f14:	4848      	ldr	r0, [pc, #288]	@ (8014038 <etharp_update_arp_entry+0x144>)
 8013f16:	f002 fb43 	bl	80165a0 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8013f1a:	68bb      	ldr	r3, [r7, #8]
 8013f1c:	2b00      	cmp	r3, #0
 8013f1e:	d012      	beq.n	8013f46 <etharp_update_arp_entry+0x52>
 8013f20:	68bb      	ldr	r3, [r7, #8]
 8013f22:	681b      	ldr	r3, [r3, #0]
 8013f24:	2b00      	cmp	r3, #0
 8013f26:	d00e      	beq.n	8013f46 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8013f28:	68bb      	ldr	r3, [r7, #8]
 8013f2a:	681b      	ldr	r3, [r3, #0]
 8013f2c:	68f9      	ldr	r1, [r7, #12]
 8013f2e:	4618      	mov	r0, r3
 8013f30:	f001 f8fe 	bl	8015130 <ip4_addr_isbroadcast_u32>
 8013f34:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8013f36:	2b00      	cmp	r3, #0
 8013f38:	d105      	bne.n	8013f46 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8013f3a:	68bb      	ldr	r3, [r7, #8]
 8013f3c:	681b      	ldr	r3, [r3, #0]
 8013f3e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8013f42:	2be0      	cmp	r3, #224	@ 0xe0
 8013f44:	d102      	bne.n	8013f4c <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8013f46:	f06f 030f 	mvn.w	r3, #15
 8013f4a:	e06c      	b.n	8014026 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8013f4c:	78fb      	ldrb	r3, [r7, #3]
 8013f4e:	68fa      	ldr	r2, [r7, #12]
 8013f50:	4619      	mov	r1, r3
 8013f52:	68b8      	ldr	r0, [r7, #8]
 8013f54:	f7ff fe56 	bl	8013c04 <etharp_find_entry>
 8013f58:	4603      	mov	r3, r0
 8013f5a:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8013f5c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8013f60:	2b00      	cmp	r3, #0
 8013f62:	da02      	bge.n	8013f6a <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8013f64:	8afb      	ldrh	r3, [r7, #22]
 8013f66:	b25b      	sxtb	r3, r3
 8013f68:	e05d      	b.n	8014026 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8013f6a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013f6e:	4933      	ldr	r1, [pc, #204]	@ (801403c <etharp_update_arp_entry+0x148>)
 8013f70:	4613      	mov	r3, r2
 8013f72:	005b      	lsls	r3, r3, #1
 8013f74:	4413      	add	r3, r2
 8013f76:	00db      	lsls	r3, r3, #3
 8013f78:	440b      	add	r3, r1
 8013f7a:	3314      	adds	r3, #20
 8013f7c:	2202      	movs	r2, #2
 8013f7e:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8013f80:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013f84:	492d      	ldr	r1, [pc, #180]	@ (801403c <etharp_update_arp_entry+0x148>)
 8013f86:	4613      	mov	r3, r2
 8013f88:	005b      	lsls	r3, r3, #1
 8013f8a:	4413      	add	r3, r2
 8013f8c:	00db      	lsls	r3, r3, #3
 8013f8e:	440b      	add	r3, r1
 8013f90:	3308      	adds	r3, #8
 8013f92:	68fa      	ldr	r2, [r7, #12]
 8013f94:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8013f96:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013f9a:	4613      	mov	r3, r2
 8013f9c:	005b      	lsls	r3, r3, #1
 8013f9e:	4413      	add	r3, r2
 8013fa0:	00db      	lsls	r3, r3, #3
 8013fa2:	3308      	adds	r3, #8
 8013fa4:	4a25      	ldr	r2, [pc, #148]	@ (801403c <etharp_update_arp_entry+0x148>)
 8013fa6:	4413      	add	r3, r2
 8013fa8:	3304      	adds	r3, #4
 8013faa:	2206      	movs	r2, #6
 8013fac:	6879      	ldr	r1, [r7, #4]
 8013fae:	4618      	mov	r0, r3
 8013fb0:	f002 fc61 	bl	8016876 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8013fb4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013fb8:	4920      	ldr	r1, [pc, #128]	@ (801403c <etharp_update_arp_entry+0x148>)
 8013fba:	4613      	mov	r3, r2
 8013fbc:	005b      	lsls	r3, r3, #1
 8013fbe:	4413      	add	r3, r2
 8013fc0:	00db      	lsls	r3, r3, #3
 8013fc2:	440b      	add	r3, r1
 8013fc4:	3312      	adds	r3, #18
 8013fc6:	2200      	movs	r2, #0
 8013fc8:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8013fca:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013fce:	491b      	ldr	r1, [pc, #108]	@ (801403c <etharp_update_arp_entry+0x148>)
 8013fd0:	4613      	mov	r3, r2
 8013fd2:	005b      	lsls	r3, r3, #1
 8013fd4:	4413      	add	r3, r2
 8013fd6:	00db      	lsls	r3, r3, #3
 8013fd8:	440b      	add	r3, r1
 8013fda:	681b      	ldr	r3, [r3, #0]
 8013fdc:	2b00      	cmp	r3, #0
 8013fde:	d021      	beq.n	8014024 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8013fe0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013fe4:	4915      	ldr	r1, [pc, #84]	@ (801403c <etharp_update_arp_entry+0x148>)
 8013fe6:	4613      	mov	r3, r2
 8013fe8:	005b      	lsls	r3, r3, #1
 8013fea:	4413      	add	r3, r2
 8013fec:	00db      	lsls	r3, r3, #3
 8013fee:	440b      	add	r3, r1
 8013ff0:	681b      	ldr	r3, [r3, #0]
 8013ff2:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8013ff4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013ff8:	4910      	ldr	r1, [pc, #64]	@ (801403c <etharp_update_arp_entry+0x148>)
 8013ffa:	4613      	mov	r3, r2
 8013ffc:	005b      	lsls	r3, r3, #1
 8013ffe:	4413      	add	r3, r2
 8014000:	00db      	lsls	r3, r3, #3
 8014002:	440b      	add	r3, r1
 8014004:	2200      	movs	r2, #0
 8014006:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8014008:	68fb      	ldr	r3, [r7, #12]
 801400a:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 801400e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8014012:	9300      	str	r3, [sp, #0]
 8014014:	687b      	ldr	r3, [r7, #4]
 8014016:	6939      	ldr	r1, [r7, #16]
 8014018:	68f8      	ldr	r0, [r7, #12]
 801401a:	f001 ff97 	bl	8015f4c <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801401e:	6938      	ldr	r0, [r7, #16]
 8014020:	f7f8 fd52 	bl	800cac8 <pbuf_free>
  }
  return ERR_OK;
 8014024:	2300      	movs	r3, #0
}
 8014026:	4618      	mov	r0, r3
 8014028:	3718      	adds	r7, #24
 801402a:	46bd      	mov	sp, r7
 801402c:	bd80      	pop	{r7, pc}
 801402e:	bf00      	nop
 8014030:	0801a938 	.word	0x0801a938
 8014034:	0801aa30 	.word	0x0801aa30
 8014038:	0801a9b0 	.word	0x0801a9b0
 801403c:	2000eda0 	.word	0x2000eda0

08014040 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8014040:	b580      	push	{r7, lr}
 8014042:	b084      	sub	sp, #16
 8014044:	af00      	add	r7, sp, #0
 8014046:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014048:	2300      	movs	r3, #0
 801404a:	60fb      	str	r3, [r7, #12]
 801404c:	e01e      	b.n	801408c <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801404e:	4913      	ldr	r1, [pc, #76]	@ (801409c <etharp_cleanup_netif+0x5c>)
 8014050:	68fa      	ldr	r2, [r7, #12]
 8014052:	4613      	mov	r3, r2
 8014054:	005b      	lsls	r3, r3, #1
 8014056:	4413      	add	r3, r2
 8014058:	00db      	lsls	r3, r3, #3
 801405a:	440b      	add	r3, r1
 801405c:	3314      	adds	r3, #20
 801405e:	781b      	ldrb	r3, [r3, #0]
 8014060:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8014062:	7afb      	ldrb	r3, [r7, #11]
 8014064:	2b00      	cmp	r3, #0
 8014066:	d00e      	beq.n	8014086 <etharp_cleanup_netif+0x46>
 8014068:	490c      	ldr	r1, [pc, #48]	@ (801409c <etharp_cleanup_netif+0x5c>)
 801406a:	68fa      	ldr	r2, [r7, #12]
 801406c:	4613      	mov	r3, r2
 801406e:	005b      	lsls	r3, r3, #1
 8014070:	4413      	add	r3, r2
 8014072:	00db      	lsls	r3, r3, #3
 8014074:	440b      	add	r3, r1
 8014076:	3308      	adds	r3, #8
 8014078:	681b      	ldr	r3, [r3, #0]
 801407a:	687a      	ldr	r2, [r7, #4]
 801407c:	429a      	cmp	r2, r3
 801407e:	d102      	bne.n	8014086 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8014080:	68f8      	ldr	r0, [r7, #12]
 8014082:	f7ff fce5 	bl	8013a50 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014086:	68fb      	ldr	r3, [r7, #12]
 8014088:	3301      	adds	r3, #1
 801408a:	60fb      	str	r3, [r7, #12]
 801408c:	68fb      	ldr	r3, [r7, #12]
 801408e:	2b09      	cmp	r3, #9
 8014090:	dddd      	ble.n	801404e <etharp_cleanup_netif+0xe>
    }
  }
}
 8014092:	bf00      	nop
 8014094:	bf00      	nop
 8014096:	3710      	adds	r7, #16
 8014098:	46bd      	mov	sp, r7
 801409a:	bd80      	pop	{r7, pc}
 801409c:	2000eda0 	.word	0x2000eda0

080140a0 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 80140a0:	b5b0      	push	{r4, r5, r7, lr}
 80140a2:	b08a      	sub	sp, #40	@ 0x28
 80140a4:	af04      	add	r7, sp, #16
 80140a6:	6078      	str	r0, [r7, #4]
 80140a8:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80140aa:	683b      	ldr	r3, [r7, #0]
 80140ac:	2b00      	cmp	r3, #0
 80140ae:	d107      	bne.n	80140c0 <etharp_input+0x20>
 80140b0:	4b3d      	ldr	r3, [pc, #244]	@ (80141a8 <etharp_input+0x108>)
 80140b2:	f240 228a 	movw	r2, #650	@ 0x28a
 80140b6:	493d      	ldr	r1, [pc, #244]	@ (80141ac <etharp_input+0x10c>)
 80140b8:	483d      	ldr	r0, [pc, #244]	@ (80141b0 <etharp_input+0x110>)
 80140ba:	f002 fa71 	bl	80165a0 <iprintf>
 80140be:	e06f      	b.n	80141a0 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 80140c0:	687b      	ldr	r3, [r7, #4]
 80140c2:	685b      	ldr	r3, [r3, #4]
 80140c4:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80140c6:	693b      	ldr	r3, [r7, #16]
 80140c8:	881b      	ldrh	r3, [r3, #0]
 80140ca:	b29b      	uxth	r3, r3
 80140cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80140d0:	d10c      	bne.n	80140ec <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80140d2:	693b      	ldr	r3, [r7, #16]
 80140d4:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80140d6:	2b06      	cmp	r3, #6
 80140d8:	d108      	bne.n	80140ec <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80140da:	693b      	ldr	r3, [r7, #16]
 80140dc:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80140de:	2b04      	cmp	r3, #4
 80140e0:	d104      	bne.n	80140ec <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 80140e2:	693b      	ldr	r3, [r7, #16]
 80140e4:	885b      	ldrh	r3, [r3, #2]
 80140e6:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80140e8:	2b08      	cmp	r3, #8
 80140ea:	d003      	beq.n	80140f4 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 80140ec:	6878      	ldr	r0, [r7, #4]
 80140ee:	f7f8 fceb 	bl	800cac8 <pbuf_free>
    return;
 80140f2:	e055      	b.n	80141a0 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 80140f4:	693b      	ldr	r3, [r7, #16]
 80140f6:	330e      	adds	r3, #14
 80140f8:	681b      	ldr	r3, [r3, #0]
 80140fa:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 80140fc:	693b      	ldr	r3, [r7, #16]
 80140fe:	3318      	adds	r3, #24
 8014100:	681b      	ldr	r3, [r3, #0]
 8014102:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8014104:	683b      	ldr	r3, [r7, #0]
 8014106:	3304      	adds	r3, #4
 8014108:	681b      	ldr	r3, [r3, #0]
 801410a:	2b00      	cmp	r3, #0
 801410c:	d102      	bne.n	8014114 <etharp_input+0x74>
    for_us = 0;
 801410e:	2300      	movs	r3, #0
 8014110:	75fb      	strb	r3, [r7, #23]
 8014112:	e009      	b.n	8014128 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8014114:	68ba      	ldr	r2, [r7, #8]
 8014116:	683b      	ldr	r3, [r7, #0]
 8014118:	3304      	adds	r3, #4
 801411a:	681b      	ldr	r3, [r3, #0]
 801411c:	429a      	cmp	r2, r3
 801411e:	bf0c      	ite	eq
 8014120:	2301      	moveq	r3, #1
 8014122:	2300      	movne	r3, #0
 8014124:	b2db      	uxtb	r3, r3
 8014126:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8014128:	693b      	ldr	r3, [r7, #16]
 801412a:	f103 0208 	add.w	r2, r3, #8
 801412e:	7dfb      	ldrb	r3, [r7, #23]
 8014130:	2b00      	cmp	r3, #0
 8014132:	d001      	beq.n	8014138 <etharp_input+0x98>
 8014134:	2301      	movs	r3, #1
 8014136:	e000      	b.n	801413a <etharp_input+0x9a>
 8014138:	2302      	movs	r3, #2
 801413a:	f107 010c 	add.w	r1, r7, #12
 801413e:	6838      	ldr	r0, [r7, #0]
 8014140:	f7ff fed8 	bl	8013ef4 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8014144:	693b      	ldr	r3, [r7, #16]
 8014146:	88db      	ldrh	r3, [r3, #6]
 8014148:	b29b      	uxth	r3, r3
 801414a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801414e:	d003      	beq.n	8014158 <etharp_input+0xb8>
 8014150:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8014154:	d01e      	beq.n	8014194 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8014156:	e020      	b.n	801419a <etharp_input+0xfa>
      if (for_us) {
 8014158:	7dfb      	ldrb	r3, [r7, #23]
 801415a:	2b00      	cmp	r3, #0
 801415c:	d01c      	beq.n	8014198 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801415e:	683b      	ldr	r3, [r7, #0]
 8014160:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 8014164:	693b      	ldr	r3, [r7, #16]
 8014166:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801416a:	683b      	ldr	r3, [r7, #0]
 801416c:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 8014170:	683b      	ldr	r3, [r7, #0]
 8014172:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8014174:	693a      	ldr	r2, [r7, #16]
 8014176:	3208      	adds	r2, #8
        etharp_raw(netif,
 8014178:	2102      	movs	r1, #2
 801417a:	9103      	str	r1, [sp, #12]
 801417c:	f107 010c 	add.w	r1, r7, #12
 8014180:	9102      	str	r1, [sp, #8]
 8014182:	9201      	str	r2, [sp, #4]
 8014184:	9300      	str	r3, [sp, #0]
 8014186:	462b      	mov	r3, r5
 8014188:	4622      	mov	r2, r4
 801418a:	4601      	mov	r1, r0
 801418c:	6838      	ldr	r0, [r7, #0]
 801418e:	f000 faeb 	bl	8014768 <etharp_raw>
      break;
 8014192:	e001      	b.n	8014198 <etharp_input+0xf8>
      break;
 8014194:	bf00      	nop
 8014196:	e000      	b.n	801419a <etharp_input+0xfa>
      break;
 8014198:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801419a:	6878      	ldr	r0, [r7, #4]
 801419c:	f7f8 fc94 	bl	800cac8 <pbuf_free>
}
 80141a0:	3718      	adds	r7, #24
 80141a2:	46bd      	mov	sp, r7
 80141a4:	bdb0      	pop	{r4, r5, r7, pc}
 80141a6:	bf00      	nop
 80141a8:	0801a938 	.word	0x0801a938
 80141ac:	0801aa88 	.word	0x0801aa88
 80141b0:	0801a9b0 	.word	0x0801a9b0

080141b4 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 80141b4:	b580      	push	{r7, lr}
 80141b6:	b086      	sub	sp, #24
 80141b8:	af02      	add	r7, sp, #8
 80141ba:	60f8      	str	r0, [r7, #12]
 80141bc:	60b9      	str	r1, [r7, #8]
 80141be:	4613      	mov	r3, r2
 80141c0:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80141c2:	79fa      	ldrb	r2, [r7, #7]
 80141c4:	4944      	ldr	r1, [pc, #272]	@ (80142d8 <etharp_output_to_arp_index+0x124>)
 80141c6:	4613      	mov	r3, r2
 80141c8:	005b      	lsls	r3, r3, #1
 80141ca:	4413      	add	r3, r2
 80141cc:	00db      	lsls	r3, r3, #3
 80141ce:	440b      	add	r3, r1
 80141d0:	3314      	adds	r3, #20
 80141d2:	781b      	ldrb	r3, [r3, #0]
 80141d4:	2b01      	cmp	r3, #1
 80141d6:	d806      	bhi.n	80141e6 <etharp_output_to_arp_index+0x32>
 80141d8:	4b40      	ldr	r3, [pc, #256]	@ (80142dc <etharp_output_to_arp_index+0x128>)
 80141da:	f240 22ee 	movw	r2, #750	@ 0x2ee
 80141de:	4940      	ldr	r1, [pc, #256]	@ (80142e0 <etharp_output_to_arp_index+0x12c>)
 80141e0:	4840      	ldr	r0, [pc, #256]	@ (80142e4 <etharp_output_to_arp_index+0x130>)
 80141e2:	f002 f9dd 	bl	80165a0 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 80141e6:	79fa      	ldrb	r2, [r7, #7]
 80141e8:	493b      	ldr	r1, [pc, #236]	@ (80142d8 <etharp_output_to_arp_index+0x124>)
 80141ea:	4613      	mov	r3, r2
 80141ec:	005b      	lsls	r3, r3, #1
 80141ee:	4413      	add	r3, r2
 80141f0:	00db      	lsls	r3, r3, #3
 80141f2:	440b      	add	r3, r1
 80141f4:	3314      	adds	r3, #20
 80141f6:	781b      	ldrb	r3, [r3, #0]
 80141f8:	2b02      	cmp	r3, #2
 80141fa:	d153      	bne.n	80142a4 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 80141fc:	79fa      	ldrb	r2, [r7, #7]
 80141fe:	4936      	ldr	r1, [pc, #216]	@ (80142d8 <etharp_output_to_arp_index+0x124>)
 8014200:	4613      	mov	r3, r2
 8014202:	005b      	lsls	r3, r3, #1
 8014204:	4413      	add	r3, r2
 8014206:	00db      	lsls	r3, r3, #3
 8014208:	440b      	add	r3, r1
 801420a:	3312      	adds	r3, #18
 801420c:	881b      	ldrh	r3, [r3, #0]
 801420e:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 8014212:	d919      	bls.n	8014248 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8014214:	79fa      	ldrb	r2, [r7, #7]
 8014216:	4613      	mov	r3, r2
 8014218:	005b      	lsls	r3, r3, #1
 801421a:	4413      	add	r3, r2
 801421c:	00db      	lsls	r3, r3, #3
 801421e:	4a2e      	ldr	r2, [pc, #184]	@ (80142d8 <etharp_output_to_arp_index+0x124>)
 8014220:	4413      	add	r3, r2
 8014222:	3304      	adds	r3, #4
 8014224:	4619      	mov	r1, r3
 8014226:	68f8      	ldr	r0, [r7, #12]
 8014228:	f000 fb4c 	bl	80148c4 <etharp_request>
 801422c:	4603      	mov	r3, r0
 801422e:	2b00      	cmp	r3, #0
 8014230:	d138      	bne.n	80142a4 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8014232:	79fa      	ldrb	r2, [r7, #7]
 8014234:	4928      	ldr	r1, [pc, #160]	@ (80142d8 <etharp_output_to_arp_index+0x124>)
 8014236:	4613      	mov	r3, r2
 8014238:	005b      	lsls	r3, r3, #1
 801423a:	4413      	add	r3, r2
 801423c:	00db      	lsls	r3, r3, #3
 801423e:	440b      	add	r3, r1
 8014240:	3314      	adds	r3, #20
 8014242:	2203      	movs	r2, #3
 8014244:	701a      	strb	r2, [r3, #0]
 8014246:	e02d      	b.n	80142a4 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8014248:	79fa      	ldrb	r2, [r7, #7]
 801424a:	4923      	ldr	r1, [pc, #140]	@ (80142d8 <etharp_output_to_arp_index+0x124>)
 801424c:	4613      	mov	r3, r2
 801424e:	005b      	lsls	r3, r3, #1
 8014250:	4413      	add	r3, r2
 8014252:	00db      	lsls	r3, r3, #3
 8014254:	440b      	add	r3, r1
 8014256:	3312      	adds	r3, #18
 8014258:	881b      	ldrh	r3, [r3, #0]
 801425a:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 801425e:	d321      	bcc.n	80142a4 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8014260:	79fa      	ldrb	r2, [r7, #7]
 8014262:	4613      	mov	r3, r2
 8014264:	005b      	lsls	r3, r3, #1
 8014266:	4413      	add	r3, r2
 8014268:	00db      	lsls	r3, r3, #3
 801426a:	4a1b      	ldr	r2, [pc, #108]	@ (80142d8 <etharp_output_to_arp_index+0x124>)
 801426c:	4413      	add	r3, r2
 801426e:	1d19      	adds	r1, r3, #4
 8014270:	79fa      	ldrb	r2, [r7, #7]
 8014272:	4613      	mov	r3, r2
 8014274:	005b      	lsls	r3, r3, #1
 8014276:	4413      	add	r3, r2
 8014278:	00db      	lsls	r3, r3, #3
 801427a:	3308      	adds	r3, #8
 801427c:	4a16      	ldr	r2, [pc, #88]	@ (80142d8 <etharp_output_to_arp_index+0x124>)
 801427e:	4413      	add	r3, r2
 8014280:	3304      	adds	r3, #4
 8014282:	461a      	mov	r2, r3
 8014284:	68f8      	ldr	r0, [r7, #12]
 8014286:	f000 fafb 	bl	8014880 <etharp_request_dst>
 801428a:	4603      	mov	r3, r0
 801428c:	2b00      	cmp	r3, #0
 801428e:	d109      	bne.n	80142a4 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8014290:	79fa      	ldrb	r2, [r7, #7]
 8014292:	4911      	ldr	r1, [pc, #68]	@ (80142d8 <etharp_output_to_arp_index+0x124>)
 8014294:	4613      	mov	r3, r2
 8014296:	005b      	lsls	r3, r3, #1
 8014298:	4413      	add	r3, r2
 801429a:	00db      	lsls	r3, r3, #3
 801429c:	440b      	add	r3, r1
 801429e:	3314      	adds	r3, #20
 80142a0:	2203      	movs	r2, #3
 80142a2:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 80142a4:	68fb      	ldr	r3, [r7, #12]
 80142a6:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 80142aa:	79fa      	ldrb	r2, [r7, #7]
 80142ac:	4613      	mov	r3, r2
 80142ae:	005b      	lsls	r3, r3, #1
 80142b0:	4413      	add	r3, r2
 80142b2:	00db      	lsls	r3, r3, #3
 80142b4:	3308      	adds	r3, #8
 80142b6:	4a08      	ldr	r2, [pc, #32]	@ (80142d8 <etharp_output_to_arp_index+0x124>)
 80142b8:	4413      	add	r3, r2
 80142ba:	3304      	adds	r3, #4
 80142bc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80142c0:	9200      	str	r2, [sp, #0]
 80142c2:	460a      	mov	r2, r1
 80142c4:	68b9      	ldr	r1, [r7, #8]
 80142c6:	68f8      	ldr	r0, [r7, #12]
 80142c8:	f001 fe40 	bl	8015f4c <ethernet_output>
 80142cc:	4603      	mov	r3, r0
}
 80142ce:	4618      	mov	r0, r3
 80142d0:	3710      	adds	r7, #16
 80142d2:	46bd      	mov	sp, r7
 80142d4:	bd80      	pop	{r7, pc}
 80142d6:	bf00      	nop
 80142d8:	2000eda0 	.word	0x2000eda0
 80142dc:	0801a938 	.word	0x0801a938
 80142e0:	0801aaa8 	.word	0x0801aaa8
 80142e4:	0801a9b0 	.word	0x0801a9b0

080142e8 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 80142e8:	b580      	push	{r7, lr}
 80142ea:	b08a      	sub	sp, #40	@ 0x28
 80142ec:	af02      	add	r7, sp, #8
 80142ee:	60f8      	str	r0, [r7, #12]
 80142f0:	60b9      	str	r1, [r7, #8]
 80142f2:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 80142f4:	687b      	ldr	r3, [r7, #4]
 80142f6:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80142f8:	68fb      	ldr	r3, [r7, #12]
 80142fa:	2b00      	cmp	r3, #0
 80142fc:	d106      	bne.n	801430c <etharp_output+0x24>
 80142fe:	4b73      	ldr	r3, [pc, #460]	@ (80144cc <etharp_output+0x1e4>)
 8014300:	f240 321e 	movw	r2, #798	@ 0x31e
 8014304:	4972      	ldr	r1, [pc, #456]	@ (80144d0 <etharp_output+0x1e8>)
 8014306:	4873      	ldr	r0, [pc, #460]	@ (80144d4 <etharp_output+0x1ec>)
 8014308:	f002 f94a 	bl	80165a0 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 801430c:	68bb      	ldr	r3, [r7, #8]
 801430e:	2b00      	cmp	r3, #0
 8014310:	d106      	bne.n	8014320 <etharp_output+0x38>
 8014312:	4b6e      	ldr	r3, [pc, #440]	@ (80144cc <etharp_output+0x1e4>)
 8014314:	f240 321f 	movw	r2, #799	@ 0x31f
 8014318:	496f      	ldr	r1, [pc, #444]	@ (80144d8 <etharp_output+0x1f0>)
 801431a:	486e      	ldr	r0, [pc, #440]	@ (80144d4 <etharp_output+0x1ec>)
 801431c:	f002 f940 	bl	80165a0 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8014320:	687b      	ldr	r3, [r7, #4]
 8014322:	2b00      	cmp	r3, #0
 8014324:	d106      	bne.n	8014334 <etharp_output+0x4c>
 8014326:	4b69      	ldr	r3, [pc, #420]	@ (80144cc <etharp_output+0x1e4>)
 8014328:	f44f 7248 	mov.w	r2, #800	@ 0x320
 801432c:	496b      	ldr	r1, [pc, #428]	@ (80144dc <etharp_output+0x1f4>)
 801432e:	4869      	ldr	r0, [pc, #420]	@ (80144d4 <etharp_output+0x1ec>)
 8014330:	f002 f936 	bl	80165a0 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8014334:	687b      	ldr	r3, [r7, #4]
 8014336:	681b      	ldr	r3, [r3, #0]
 8014338:	68f9      	ldr	r1, [r7, #12]
 801433a:	4618      	mov	r0, r3
 801433c:	f000 fef8 	bl	8015130 <ip4_addr_isbroadcast_u32>
 8014340:	4603      	mov	r3, r0
 8014342:	2b00      	cmp	r3, #0
 8014344:	d002      	beq.n	801434c <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8014346:	4b66      	ldr	r3, [pc, #408]	@ (80144e0 <etharp_output+0x1f8>)
 8014348:	61fb      	str	r3, [r7, #28]
 801434a:	e0af      	b.n	80144ac <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 801434c:	687b      	ldr	r3, [r7, #4]
 801434e:	681b      	ldr	r3, [r3, #0]
 8014350:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8014354:	2be0      	cmp	r3, #224	@ 0xe0
 8014356:	d118      	bne.n	801438a <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8014358:	2301      	movs	r3, #1
 801435a:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 801435c:	2300      	movs	r3, #0
 801435e:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8014360:	235e      	movs	r3, #94	@ 0x5e
 8014362:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8014364:	687b      	ldr	r3, [r7, #4]
 8014366:	3301      	adds	r3, #1
 8014368:	781b      	ldrb	r3, [r3, #0]
 801436a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801436e:	b2db      	uxtb	r3, r3
 8014370:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8014372:	687b      	ldr	r3, [r7, #4]
 8014374:	3302      	adds	r3, #2
 8014376:	781b      	ldrb	r3, [r3, #0]
 8014378:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801437a:	687b      	ldr	r3, [r7, #4]
 801437c:	3303      	adds	r3, #3
 801437e:	781b      	ldrb	r3, [r3, #0]
 8014380:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8014382:	f107 0310 	add.w	r3, r7, #16
 8014386:	61fb      	str	r3, [r7, #28]
 8014388:	e090      	b.n	80144ac <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801438a:	687b      	ldr	r3, [r7, #4]
 801438c:	681a      	ldr	r2, [r3, #0]
 801438e:	68fb      	ldr	r3, [r7, #12]
 8014390:	3304      	adds	r3, #4
 8014392:	681b      	ldr	r3, [r3, #0]
 8014394:	405a      	eors	r2, r3
 8014396:	68fb      	ldr	r3, [r7, #12]
 8014398:	3308      	adds	r3, #8
 801439a:	681b      	ldr	r3, [r3, #0]
 801439c:	4013      	ands	r3, r2
 801439e:	2b00      	cmp	r3, #0
 80143a0:	d012      	beq.n	80143c8 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 80143a2:	687b      	ldr	r3, [r7, #4]
 80143a4:	681b      	ldr	r3, [r3, #0]
 80143a6:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80143a8:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 80143ac:	4293      	cmp	r3, r2
 80143ae:	d00b      	beq.n	80143c8 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 80143b0:	68fb      	ldr	r3, [r7, #12]
 80143b2:	330c      	adds	r3, #12
 80143b4:	681b      	ldr	r3, [r3, #0]
 80143b6:	2b00      	cmp	r3, #0
 80143b8:	d003      	beq.n	80143c2 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 80143ba:	68fb      	ldr	r3, [r7, #12]
 80143bc:	330c      	adds	r3, #12
 80143be:	61bb      	str	r3, [r7, #24]
 80143c0:	e002      	b.n	80143c8 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 80143c2:	f06f 0303 	mvn.w	r3, #3
 80143c6:	e07d      	b.n	80144c4 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80143c8:	4b46      	ldr	r3, [pc, #280]	@ (80144e4 <etharp_output+0x1fc>)
 80143ca:	781b      	ldrb	r3, [r3, #0]
 80143cc:	4619      	mov	r1, r3
 80143ce:	4a46      	ldr	r2, [pc, #280]	@ (80144e8 <etharp_output+0x200>)
 80143d0:	460b      	mov	r3, r1
 80143d2:	005b      	lsls	r3, r3, #1
 80143d4:	440b      	add	r3, r1
 80143d6:	00db      	lsls	r3, r3, #3
 80143d8:	4413      	add	r3, r2
 80143da:	3314      	adds	r3, #20
 80143dc:	781b      	ldrb	r3, [r3, #0]
 80143de:	2b01      	cmp	r3, #1
 80143e0:	d925      	bls.n	801442e <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 80143e2:	4b40      	ldr	r3, [pc, #256]	@ (80144e4 <etharp_output+0x1fc>)
 80143e4:	781b      	ldrb	r3, [r3, #0]
 80143e6:	4619      	mov	r1, r3
 80143e8:	4a3f      	ldr	r2, [pc, #252]	@ (80144e8 <etharp_output+0x200>)
 80143ea:	460b      	mov	r3, r1
 80143ec:	005b      	lsls	r3, r3, #1
 80143ee:	440b      	add	r3, r1
 80143f0:	00db      	lsls	r3, r3, #3
 80143f2:	4413      	add	r3, r2
 80143f4:	3308      	adds	r3, #8
 80143f6:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80143f8:	68fa      	ldr	r2, [r7, #12]
 80143fa:	429a      	cmp	r2, r3
 80143fc:	d117      	bne.n	801442e <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 80143fe:	69bb      	ldr	r3, [r7, #24]
 8014400:	681a      	ldr	r2, [r3, #0]
 8014402:	4b38      	ldr	r3, [pc, #224]	@ (80144e4 <etharp_output+0x1fc>)
 8014404:	781b      	ldrb	r3, [r3, #0]
 8014406:	4618      	mov	r0, r3
 8014408:	4937      	ldr	r1, [pc, #220]	@ (80144e8 <etharp_output+0x200>)
 801440a:	4603      	mov	r3, r0
 801440c:	005b      	lsls	r3, r3, #1
 801440e:	4403      	add	r3, r0
 8014410:	00db      	lsls	r3, r3, #3
 8014412:	440b      	add	r3, r1
 8014414:	3304      	adds	r3, #4
 8014416:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8014418:	429a      	cmp	r2, r3
 801441a:	d108      	bne.n	801442e <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 801441c:	4b31      	ldr	r3, [pc, #196]	@ (80144e4 <etharp_output+0x1fc>)
 801441e:	781b      	ldrb	r3, [r3, #0]
 8014420:	461a      	mov	r2, r3
 8014422:	68b9      	ldr	r1, [r7, #8]
 8014424:	68f8      	ldr	r0, [r7, #12]
 8014426:	f7ff fec5 	bl	80141b4 <etharp_output_to_arp_index>
 801442a:	4603      	mov	r3, r0
 801442c:	e04a      	b.n	80144c4 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801442e:	2300      	movs	r3, #0
 8014430:	75fb      	strb	r3, [r7, #23]
 8014432:	e031      	b.n	8014498 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8014434:	7dfa      	ldrb	r2, [r7, #23]
 8014436:	492c      	ldr	r1, [pc, #176]	@ (80144e8 <etharp_output+0x200>)
 8014438:	4613      	mov	r3, r2
 801443a:	005b      	lsls	r3, r3, #1
 801443c:	4413      	add	r3, r2
 801443e:	00db      	lsls	r3, r3, #3
 8014440:	440b      	add	r3, r1
 8014442:	3314      	adds	r3, #20
 8014444:	781b      	ldrb	r3, [r3, #0]
 8014446:	2b01      	cmp	r3, #1
 8014448:	d923      	bls.n	8014492 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801444a:	7dfa      	ldrb	r2, [r7, #23]
 801444c:	4926      	ldr	r1, [pc, #152]	@ (80144e8 <etharp_output+0x200>)
 801444e:	4613      	mov	r3, r2
 8014450:	005b      	lsls	r3, r3, #1
 8014452:	4413      	add	r3, r2
 8014454:	00db      	lsls	r3, r3, #3
 8014456:	440b      	add	r3, r1
 8014458:	3308      	adds	r3, #8
 801445a:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801445c:	68fa      	ldr	r2, [r7, #12]
 801445e:	429a      	cmp	r2, r3
 8014460:	d117      	bne.n	8014492 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8014462:	69bb      	ldr	r3, [r7, #24]
 8014464:	6819      	ldr	r1, [r3, #0]
 8014466:	7dfa      	ldrb	r2, [r7, #23]
 8014468:	481f      	ldr	r0, [pc, #124]	@ (80144e8 <etharp_output+0x200>)
 801446a:	4613      	mov	r3, r2
 801446c:	005b      	lsls	r3, r3, #1
 801446e:	4413      	add	r3, r2
 8014470:	00db      	lsls	r3, r3, #3
 8014472:	4403      	add	r3, r0
 8014474:	3304      	adds	r3, #4
 8014476:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8014478:	4299      	cmp	r1, r3
 801447a:	d10a      	bne.n	8014492 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 801447c:	4a19      	ldr	r2, [pc, #100]	@ (80144e4 <etharp_output+0x1fc>)
 801447e:	7dfb      	ldrb	r3, [r7, #23]
 8014480:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8014482:	7dfb      	ldrb	r3, [r7, #23]
 8014484:	461a      	mov	r2, r3
 8014486:	68b9      	ldr	r1, [r7, #8]
 8014488:	68f8      	ldr	r0, [r7, #12]
 801448a:	f7ff fe93 	bl	80141b4 <etharp_output_to_arp_index>
 801448e:	4603      	mov	r3, r0
 8014490:	e018      	b.n	80144c4 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8014492:	7dfb      	ldrb	r3, [r7, #23]
 8014494:	3301      	adds	r3, #1
 8014496:	75fb      	strb	r3, [r7, #23]
 8014498:	7dfb      	ldrb	r3, [r7, #23]
 801449a:	2b09      	cmp	r3, #9
 801449c:	d9ca      	bls.n	8014434 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801449e:	68ba      	ldr	r2, [r7, #8]
 80144a0:	69b9      	ldr	r1, [r7, #24]
 80144a2:	68f8      	ldr	r0, [r7, #12]
 80144a4:	f000 f822 	bl	80144ec <etharp_query>
 80144a8:	4603      	mov	r3, r0
 80144aa:	e00b      	b.n	80144c4 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 80144ac:	68fb      	ldr	r3, [r7, #12]
 80144ae:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 80144b2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80144b6:	9300      	str	r3, [sp, #0]
 80144b8:	69fb      	ldr	r3, [r7, #28]
 80144ba:	68b9      	ldr	r1, [r7, #8]
 80144bc:	68f8      	ldr	r0, [r7, #12]
 80144be:	f001 fd45 	bl	8015f4c <ethernet_output>
 80144c2:	4603      	mov	r3, r0
}
 80144c4:	4618      	mov	r0, r3
 80144c6:	3720      	adds	r7, #32
 80144c8:	46bd      	mov	sp, r7
 80144ca:	bd80      	pop	{r7, pc}
 80144cc:	0801a938 	.word	0x0801a938
 80144d0:	0801aa88 	.word	0x0801aa88
 80144d4:	0801a9b0 	.word	0x0801a9b0
 80144d8:	0801aad8 	.word	0x0801aad8
 80144dc:	0801aa78 	.word	0x0801aa78
 80144e0:	0801b138 	.word	0x0801b138
 80144e4:	2000ee90 	.word	0x2000ee90
 80144e8:	2000eda0 	.word	0x2000eda0

080144ec <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 80144ec:	b580      	push	{r7, lr}
 80144ee:	b08c      	sub	sp, #48	@ 0x30
 80144f0:	af02      	add	r7, sp, #8
 80144f2:	60f8      	str	r0, [r7, #12]
 80144f4:	60b9      	str	r1, [r7, #8]
 80144f6:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 80144f8:	68fb      	ldr	r3, [r7, #12]
 80144fa:	3326      	adds	r3, #38	@ 0x26
 80144fc:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 80144fe:	23ff      	movs	r3, #255	@ 0xff
 8014500:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 8014504:	2300      	movs	r3, #0
 8014506:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8014508:	68bb      	ldr	r3, [r7, #8]
 801450a:	681b      	ldr	r3, [r3, #0]
 801450c:	68f9      	ldr	r1, [r7, #12]
 801450e:	4618      	mov	r0, r3
 8014510:	f000 fe0e 	bl	8015130 <ip4_addr_isbroadcast_u32>
 8014514:	4603      	mov	r3, r0
 8014516:	2b00      	cmp	r3, #0
 8014518:	d10c      	bne.n	8014534 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801451a:	68bb      	ldr	r3, [r7, #8]
 801451c:	681b      	ldr	r3, [r3, #0]
 801451e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8014522:	2be0      	cmp	r3, #224	@ 0xe0
 8014524:	d006      	beq.n	8014534 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8014526:	68bb      	ldr	r3, [r7, #8]
 8014528:	2b00      	cmp	r3, #0
 801452a:	d003      	beq.n	8014534 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 801452c:	68bb      	ldr	r3, [r7, #8]
 801452e:	681b      	ldr	r3, [r3, #0]
 8014530:	2b00      	cmp	r3, #0
 8014532:	d102      	bne.n	801453a <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8014534:	f06f 030f 	mvn.w	r3, #15
 8014538:	e101      	b.n	801473e <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801453a:	68fa      	ldr	r2, [r7, #12]
 801453c:	2101      	movs	r1, #1
 801453e:	68b8      	ldr	r0, [r7, #8]
 8014540:	f7ff fb60 	bl	8013c04 <etharp_find_entry>
 8014544:	4603      	mov	r3, r0
 8014546:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8014548:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801454c:	2b00      	cmp	r3, #0
 801454e:	da02      	bge.n	8014556 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8014550:	8a7b      	ldrh	r3, [r7, #18]
 8014552:	b25b      	sxtb	r3, r3
 8014554:	e0f3      	b.n	801473e <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8014556:	8a7b      	ldrh	r3, [r7, #18]
 8014558:	2b7e      	cmp	r3, #126	@ 0x7e
 801455a:	d906      	bls.n	801456a <etharp_query+0x7e>
 801455c:	4b7a      	ldr	r3, [pc, #488]	@ (8014748 <etharp_query+0x25c>)
 801455e:	f240 32c1 	movw	r2, #961	@ 0x3c1
 8014562:	497a      	ldr	r1, [pc, #488]	@ (801474c <etharp_query+0x260>)
 8014564:	487a      	ldr	r0, [pc, #488]	@ (8014750 <etharp_query+0x264>)
 8014566:	f002 f81b 	bl	80165a0 <iprintf>
  i = (netif_addr_idx_t)i_err;
 801456a:	8a7b      	ldrh	r3, [r7, #18]
 801456c:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801456e:	7c7a      	ldrb	r2, [r7, #17]
 8014570:	4978      	ldr	r1, [pc, #480]	@ (8014754 <etharp_query+0x268>)
 8014572:	4613      	mov	r3, r2
 8014574:	005b      	lsls	r3, r3, #1
 8014576:	4413      	add	r3, r2
 8014578:	00db      	lsls	r3, r3, #3
 801457a:	440b      	add	r3, r1
 801457c:	3314      	adds	r3, #20
 801457e:	781b      	ldrb	r3, [r3, #0]
 8014580:	2b00      	cmp	r3, #0
 8014582:	d115      	bne.n	80145b0 <etharp_query+0xc4>
    is_new_entry = 1;
 8014584:	2301      	movs	r3, #1
 8014586:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8014588:	7c7a      	ldrb	r2, [r7, #17]
 801458a:	4972      	ldr	r1, [pc, #456]	@ (8014754 <etharp_query+0x268>)
 801458c:	4613      	mov	r3, r2
 801458e:	005b      	lsls	r3, r3, #1
 8014590:	4413      	add	r3, r2
 8014592:	00db      	lsls	r3, r3, #3
 8014594:	440b      	add	r3, r1
 8014596:	3314      	adds	r3, #20
 8014598:	2201      	movs	r2, #1
 801459a:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 801459c:	7c7a      	ldrb	r2, [r7, #17]
 801459e:	496d      	ldr	r1, [pc, #436]	@ (8014754 <etharp_query+0x268>)
 80145a0:	4613      	mov	r3, r2
 80145a2:	005b      	lsls	r3, r3, #1
 80145a4:	4413      	add	r3, r2
 80145a6:	00db      	lsls	r3, r3, #3
 80145a8:	440b      	add	r3, r1
 80145aa:	3308      	adds	r3, #8
 80145ac:	68fa      	ldr	r2, [r7, #12]
 80145ae:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 80145b0:	7c7a      	ldrb	r2, [r7, #17]
 80145b2:	4968      	ldr	r1, [pc, #416]	@ (8014754 <etharp_query+0x268>)
 80145b4:	4613      	mov	r3, r2
 80145b6:	005b      	lsls	r3, r3, #1
 80145b8:	4413      	add	r3, r2
 80145ba:	00db      	lsls	r3, r3, #3
 80145bc:	440b      	add	r3, r1
 80145be:	3314      	adds	r3, #20
 80145c0:	781b      	ldrb	r3, [r3, #0]
 80145c2:	2b01      	cmp	r3, #1
 80145c4:	d011      	beq.n	80145ea <etharp_query+0xfe>
 80145c6:	7c7a      	ldrb	r2, [r7, #17]
 80145c8:	4962      	ldr	r1, [pc, #392]	@ (8014754 <etharp_query+0x268>)
 80145ca:	4613      	mov	r3, r2
 80145cc:	005b      	lsls	r3, r3, #1
 80145ce:	4413      	add	r3, r2
 80145d0:	00db      	lsls	r3, r3, #3
 80145d2:	440b      	add	r3, r1
 80145d4:	3314      	adds	r3, #20
 80145d6:	781b      	ldrb	r3, [r3, #0]
 80145d8:	2b01      	cmp	r3, #1
 80145da:	d806      	bhi.n	80145ea <etharp_query+0xfe>
 80145dc:	4b5a      	ldr	r3, [pc, #360]	@ (8014748 <etharp_query+0x25c>)
 80145de:	f240 32cd 	movw	r2, #973	@ 0x3cd
 80145e2:	495d      	ldr	r1, [pc, #372]	@ (8014758 <etharp_query+0x26c>)
 80145e4:	485a      	ldr	r0, [pc, #360]	@ (8014750 <etharp_query+0x264>)
 80145e6:	f001 ffdb 	bl	80165a0 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 80145ea:	6a3b      	ldr	r3, [r7, #32]
 80145ec:	2b00      	cmp	r3, #0
 80145ee:	d102      	bne.n	80145f6 <etharp_query+0x10a>
 80145f0:	687b      	ldr	r3, [r7, #4]
 80145f2:	2b00      	cmp	r3, #0
 80145f4:	d10c      	bne.n	8014610 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 80145f6:	68b9      	ldr	r1, [r7, #8]
 80145f8:	68f8      	ldr	r0, [r7, #12]
 80145fa:	f000 f963 	bl	80148c4 <etharp_request>
 80145fe:	4603      	mov	r3, r0
 8014600:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8014604:	687b      	ldr	r3, [r7, #4]
 8014606:	2b00      	cmp	r3, #0
 8014608:	d102      	bne.n	8014610 <etharp_query+0x124>
      return result;
 801460a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 801460e:	e096      	b.n	801473e <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8014610:	687b      	ldr	r3, [r7, #4]
 8014612:	2b00      	cmp	r3, #0
 8014614:	d106      	bne.n	8014624 <etharp_query+0x138>
 8014616:	4b4c      	ldr	r3, [pc, #304]	@ (8014748 <etharp_query+0x25c>)
 8014618:	f240 32e1 	movw	r2, #993	@ 0x3e1
 801461c:	494f      	ldr	r1, [pc, #316]	@ (801475c <etharp_query+0x270>)
 801461e:	484c      	ldr	r0, [pc, #304]	@ (8014750 <etharp_query+0x264>)
 8014620:	f001 ffbe 	bl	80165a0 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8014624:	7c7a      	ldrb	r2, [r7, #17]
 8014626:	494b      	ldr	r1, [pc, #300]	@ (8014754 <etharp_query+0x268>)
 8014628:	4613      	mov	r3, r2
 801462a:	005b      	lsls	r3, r3, #1
 801462c:	4413      	add	r3, r2
 801462e:	00db      	lsls	r3, r3, #3
 8014630:	440b      	add	r3, r1
 8014632:	3314      	adds	r3, #20
 8014634:	781b      	ldrb	r3, [r3, #0]
 8014636:	2b01      	cmp	r3, #1
 8014638:	d917      	bls.n	801466a <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801463a:	4a49      	ldr	r2, [pc, #292]	@ (8014760 <etharp_query+0x274>)
 801463c:	7c7b      	ldrb	r3, [r7, #17]
 801463e:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8014640:	7c7a      	ldrb	r2, [r7, #17]
 8014642:	4613      	mov	r3, r2
 8014644:	005b      	lsls	r3, r3, #1
 8014646:	4413      	add	r3, r2
 8014648:	00db      	lsls	r3, r3, #3
 801464a:	3308      	adds	r3, #8
 801464c:	4a41      	ldr	r2, [pc, #260]	@ (8014754 <etharp_query+0x268>)
 801464e:	4413      	add	r3, r2
 8014650:	3304      	adds	r3, #4
 8014652:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8014656:	9200      	str	r2, [sp, #0]
 8014658:	697a      	ldr	r2, [r7, #20]
 801465a:	6879      	ldr	r1, [r7, #4]
 801465c:	68f8      	ldr	r0, [r7, #12]
 801465e:	f001 fc75 	bl	8015f4c <ethernet_output>
 8014662:	4603      	mov	r3, r0
 8014664:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8014668:	e067      	b.n	801473a <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801466a:	7c7a      	ldrb	r2, [r7, #17]
 801466c:	4939      	ldr	r1, [pc, #228]	@ (8014754 <etharp_query+0x268>)
 801466e:	4613      	mov	r3, r2
 8014670:	005b      	lsls	r3, r3, #1
 8014672:	4413      	add	r3, r2
 8014674:	00db      	lsls	r3, r3, #3
 8014676:	440b      	add	r3, r1
 8014678:	3314      	adds	r3, #20
 801467a:	781b      	ldrb	r3, [r3, #0]
 801467c:	2b01      	cmp	r3, #1
 801467e:	d15c      	bne.n	801473a <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8014680:	2300      	movs	r3, #0
 8014682:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8014684:	687b      	ldr	r3, [r7, #4]
 8014686:	61fb      	str	r3, [r7, #28]
    while (p) {
 8014688:	e01c      	b.n	80146c4 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801468a:	69fb      	ldr	r3, [r7, #28]
 801468c:	895a      	ldrh	r2, [r3, #10]
 801468e:	69fb      	ldr	r3, [r7, #28]
 8014690:	891b      	ldrh	r3, [r3, #8]
 8014692:	429a      	cmp	r2, r3
 8014694:	d10a      	bne.n	80146ac <etharp_query+0x1c0>
 8014696:	69fb      	ldr	r3, [r7, #28]
 8014698:	681b      	ldr	r3, [r3, #0]
 801469a:	2b00      	cmp	r3, #0
 801469c:	d006      	beq.n	80146ac <etharp_query+0x1c0>
 801469e:	4b2a      	ldr	r3, [pc, #168]	@ (8014748 <etharp_query+0x25c>)
 80146a0:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 80146a4:	492f      	ldr	r1, [pc, #188]	@ (8014764 <etharp_query+0x278>)
 80146a6:	482a      	ldr	r0, [pc, #168]	@ (8014750 <etharp_query+0x264>)
 80146a8:	f001 ff7a 	bl	80165a0 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 80146ac:	69fb      	ldr	r3, [r7, #28]
 80146ae:	7b1b      	ldrb	r3, [r3, #12]
 80146b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80146b4:	2b00      	cmp	r3, #0
 80146b6:	d002      	beq.n	80146be <etharp_query+0x1d2>
        copy_needed = 1;
 80146b8:	2301      	movs	r3, #1
 80146ba:	61bb      	str	r3, [r7, #24]
        break;
 80146bc:	e005      	b.n	80146ca <etharp_query+0x1de>
      }
      p = p->next;
 80146be:	69fb      	ldr	r3, [r7, #28]
 80146c0:	681b      	ldr	r3, [r3, #0]
 80146c2:	61fb      	str	r3, [r7, #28]
    while (p) {
 80146c4:	69fb      	ldr	r3, [r7, #28]
 80146c6:	2b00      	cmp	r3, #0
 80146c8:	d1df      	bne.n	801468a <etharp_query+0x19e>
    }
    if (copy_needed) {
 80146ca:	69bb      	ldr	r3, [r7, #24]
 80146cc:	2b00      	cmp	r3, #0
 80146ce:	d007      	beq.n	80146e0 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 80146d0:	687a      	ldr	r2, [r7, #4]
 80146d2:	f44f 7120 	mov.w	r1, #640	@ 0x280
 80146d6:	200e      	movs	r0, #14
 80146d8:	f7f8 fc5e 	bl	800cf98 <pbuf_clone>
 80146dc:	61f8      	str	r0, [r7, #28]
 80146de:	e004      	b.n	80146ea <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 80146e0:	687b      	ldr	r3, [r7, #4]
 80146e2:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 80146e4:	69f8      	ldr	r0, [r7, #28]
 80146e6:	f7f8 fa95 	bl	800cc14 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 80146ea:	69fb      	ldr	r3, [r7, #28]
 80146ec:	2b00      	cmp	r3, #0
 80146ee:	d021      	beq.n	8014734 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 80146f0:	7c7a      	ldrb	r2, [r7, #17]
 80146f2:	4918      	ldr	r1, [pc, #96]	@ (8014754 <etharp_query+0x268>)
 80146f4:	4613      	mov	r3, r2
 80146f6:	005b      	lsls	r3, r3, #1
 80146f8:	4413      	add	r3, r2
 80146fa:	00db      	lsls	r3, r3, #3
 80146fc:	440b      	add	r3, r1
 80146fe:	681b      	ldr	r3, [r3, #0]
 8014700:	2b00      	cmp	r3, #0
 8014702:	d00a      	beq.n	801471a <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8014704:	7c7a      	ldrb	r2, [r7, #17]
 8014706:	4913      	ldr	r1, [pc, #76]	@ (8014754 <etharp_query+0x268>)
 8014708:	4613      	mov	r3, r2
 801470a:	005b      	lsls	r3, r3, #1
 801470c:	4413      	add	r3, r2
 801470e:	00db      	lsls	r3, r3, #3
 8014710:	440b      	add	r3, r1
 8014712:	681b      	ldr	r3, [r3, #0]
 8014714:	4618      	mov	r0, r3
 8014716:	f7f8 f9d7 	bl	800cac8 <pbuf_free>
      }
      arp_table[i].q = p;
 801471a:	7c7a      	ldrb	r2, [r7, #17]
 801471c:	490d      	ldr	r1, [pc, #52]	@ (8014754 <etharp_query+0x268>)
 801471e:	4613      	mov	r3, r2
 8014720:	005b      	lsls	r3, r3, #1
 8014722:	4413      	add	r3, r2
 8014724:	00db      	lsls	r3, r3, #3
 8014726:	440b      	add	r3, r1
 8014728:	69fa      	ldr	r2, [r7, #28]
 801472a:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 801472c:	2300      	movs	r3, #0
 801472e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8014732:	e002      	b.n	801473a <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8014734:	23ff      	movs	r3, #255	@ 0xff
 8014736:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 801473a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 801473e:	4618      	mov	r0, r3
 8014740:	3728      	adds	r7, #40	@ 0x28
 8014742:	46bd      	mov	sp, r7
 8014744:	bd80      	pop	{r7, pc}
 8014746:	bf00      	nop
 8014748:	0801a938 	.word	0x0801a938
 801474c:	0801aae4 	.word	0x0801aae4
 8014750:	0801a9b0 	.word	0x0801a9b0
 8014754:	2000eda0 	.word	0x2000eda0
 8014758:	0801aaf4 	.word	0x0801aaf4
 801475c:	0801aad8 	.word	0x0801aad8
 8014760:	2000ee90 	.word	0x2000ee90
 8014764:	0801ab1c 	.word	0x0801ab1c

08014768 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8014768:	b580      	push	{r7, lr}
 801476a:	b08a      	sub	sp, #40	@ 0x28
 801476c:	af02      	add	r7, sp, #8
 801476e:	60f8      	str	r0, [r7, #12]
 8014770:	60b9      	str	r1, [r7, #8]
 8014772:	607a      	str	r2, [r7, #4]
 8014774:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8014776:	2300      	movs	r3, #0
 8014778:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801477a:	68fb      	ldr	r3, [r7, #12]
 801477c:	2b00      	cmp	r3, #0
 801477e:	d106      	bne.n	801478e <etharp_raw+0x26>
 8014780:	4b3a      	ldr	r3, [pc, #232]	@ (801486c <etharp_raw+0x104>)
 8014782:	f240 4257 	movw	r2, #1111	@ 0x457
 8014786:	493a      	ldr	r1, [pc, #232]	@ (8014870 <etharp_raw+0x108>)
 8014788:	483a      	ldr	r0, [pc, #232]	@ (8014874 <etharp_raw+0x10c>)
 801478a:	f001 ff09 	bl	80165a0 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801478e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8014792:	211c      	movs	r1, #28
 8014794:	200e      	movs	r0, #14
 8014796:	f7f7 feb3 	bl	800c500 <pbuf_alloc>
 801479a:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 801479c:	69bb      	ldr	r3, [r7, #24]
 801479e:	2b00      	cmp	r3, #0
 80147a0:	d102      	bne.n	80147a8 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 80147a2:	f04f 33ff 	mov.w	r3, #4294967295
 80147a6:	e05d      	b.n	8014864 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 80147a8:	69bb      	ldr	r3, [r7, #24]
 80147aa:	895b      	ldrh	r3, [r3, #10]
 80147ac:	2b1b      	cmp	r3, #27
 80147ae:	d806      	bhi.n	80147be <etharp_raw+0x56>
 80147b0:	4b2e      	ldr	r3, [pc, #184]	@ (801486c <etharp_raw+0x104>)
 80147b2:	f240 4262 	movw	r2, #1122	@ 0x462
 80147b6:	4930      	ldr	r1, [pc, #192]	@ (8014878 <etharp_raw+0x110>)
 80147b8:	482e      	ldr	r0, [pc, #184]	@ (8014874 <etharp_raw+0x10c>)
 80147ba:	f001 fef1 	bl	80165a0 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 80147be:	69bb      	ldr	r3, [r7, #24]
 80147c0:	685b      	ldr	r3, [r3, #4]
 80147c2:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 80147c4:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80147c6:	4618      	mov	r0, r3
 80147c8:	f7f6 fd8c 	bl	800b2e4 <lwip_htons>
 80147cc:	4603      	mov	r3, r0
 80147ce:	461a      	mov	r2, r3
 80147d0:	697b      	ldr	r3, [r7, #20]
 80147d2:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 80147d4:	68fb      	ldr	r3, [r7, #12]
 80147d6:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80147da:	2b06      	cmp	r3, #6
 80147dc:	d006      	beq.n	80147ec <etharp_raw+0x84>
 80147de:	4b23      	ldr	r3, [pc, #140]	@ (801486c <etharp_raw+0x104>)
 80147e0:	f240 4269 	movw	r2, #1129	@ 0x469
 80147e4:	4925      	ldr	r1, [pc, #148]	@ (801487c <etharp_raw+0x114>)
 80147e6:	4823      	ldr	r0, [pc, #140]	@ (8014874 <etharp_raw+0x10c>)
 80147e8:	f001 feda 	bl	80165a0 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 80147ec:	697b      	ldr	r3, [r7, #20]
 80147ee:	3308      	adds	r3, #8
 80147f0:	2206      	movs	r2, #6
 80147f2:	6839      	ldr	r1, [r7, #0]
 80147f4:	4618      	mov	r0, r3
 80147f6:	f002 f83e 	bl	8016876 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 80147fa:	697b      	ldr	r3, [r7, #20]
 80147fc:	3312      	adds	r3, #18
 80147fe:	2206      	movs	r2, #6
 8014800:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8014802:	4618      	mov	r0, r3
 8014804:	f002 f837 	bl	8016876 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8014808:	697b      	ldr	r3, [r7, #20]
 801480a:	330e      	adds	r3, #14
 801480c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801480e:	6812      	ldr	r2, [r2, #0]
 8014810:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8014812:	697b      	ldr	r3, [r7, #20]
 8014814:	3318      	adds	r3, #24
 8014816:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014818:	6812      	ldr	r2, [r2, #0]
 801481a:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 801481c:	697b      	ldr	r3, [r7, #20]
 801481e:	2200      	movs	r2, #0
 8014820:	701a      	strb	r2, [r3, #0]
 8014822:	2200      	movs	r2, #0
 8014824:	f042 0201 	orr.w	r2, r2, #1
 8014828:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801482a:	697b      	ldr	r3, [r7, #20]
 801482c:	2200      	movs	r2, #0
 801482e:	f042 0208 	orr.w	r2, r2, #8
 8014832:	709a      	strb	r2, [r3, #2]
 8014834:	2200      	movs	r2, #0
 8014836:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8014838:	697b      	ldr	r3, [r7, #20]
 801483a:	2206      	movs	r2, #6
 801483c:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801483e:	697b      	ldr	r3, [r7, #20]
 8014840:	2204      	movs	r2, #4
 8014842:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8014844:	f640 0306 	movw	r3, #2054	@ 0x806
 8014848:	9300      	str	r3, [sp, #0]
 801484a:	687b      	ldr	r3, [r7, #4]
 801484c:	68ba      	ldr	r2, [r7, #8]
 801484e:	69b9      	ldr	r1, [r7, #24]
 8014850:	68f8      	ldr	r0, [r7, #12]
 8014852:	f001 fb7b 	bl	8015f4c <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8014856:	69b8      	ldr	r0, [r7, #24]
 8014858:	f7f8 f936 	bl	800cac8 <pbuf_free>
  p = NULL;
 801485c:	2300      	movs	r3, #0
 801485e:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8014860:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8014864:	4618      	mov	r0, r3
 8014866:	3720      	adds	r7, #32
 8014868:	46bd      	mov	sp, r7
 801486a:	bd80      	pop	{r7, pc}
 801486c:	0801a938 	.word	0x0801a938
 8014870:	0801aa88 	.word	0x0801aa88
 8014874:	0801a9b0 	.word	0x0801a9b0
 8014878:	0801ab38 	.word	0x0801ab38
 801487c:	0801ab6c 	.word	0x0801ab6c

08014880 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8014880:	b580      	push	{r7, lr}
 8014882:	b088      	sub	sp, #32
 8014884:	af04      	add	r7, sp, #16
 8014886:	60f8      	str	r0, [r7, #12]
 8014888:	60b9      	str	r1, [r7, #8]
 801488a:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801488c:	68fb      	ldr	r3, [r7, #12]
 801488e:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8014892:	68fb      	ldr	r3, [r7, #12]
 8014894:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 8014898:	68fb      	ldr	r3, [r7, #12]
 801489a:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801489c:	2201      	movs	r2, #1
 801489e:	9203      	str	r2, [sp, #12]
 80148a0:	68ba      	ldr	r2, [r7, #8]
 80148a2:	9202      	str	r2, [sp, #8]
 80148a4:	4a06      	ldr	r2, [pc, #24]	@ (80148c0 <etharp_request_dst+0x40>)
 80148a6:	9201      	str	r2, [sp, #4]
 80148a8:	9300      	str	r3, [sp, #0]
 80148aa:	4603      	mov	r3, r0
 80148ac:	687a      	ldr	r2, [r7, #4]
 80148ae:	68f8      	ldr	r0, [r7, #12]
 80148b0:	f7ff ff5a 	bl	8014768 <etharp_raw>
 80148b4:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 80148b6:	4618      	mov	r0, r3
 80148b8:	3710      	adds	r7, #16
 80148ba:	46bd      	mov	sp, r7
 80148bc:	bd80      	pop	{r7, pc}
 80148be:	bf00      	nop
 80148c0:	0801b140 	.word	0x0801b140

080148c4 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80148c4:	b580      	push	{r7, lr}
 80148c6:	b082      	sub	sp, #8
 80148c8:	af00      	add	r7, sp, #0
 80148ca:	6078      	str	r0, [r7, #4]
 80148cc:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 80148ce:	4a05      	ldr	r2, [pc, #20]	@ (80148e4 <etharp_request+0x20>)
 80148d0:	6839      	ldr	r1, [r7, #0]
 80148d2:	6878      	ldr	r0, [r7, #4]
 80148d4:	f7ff ffd4 	bl	8014880 <etharp_request_dst>
 80148d8:	4603      	mov	r3, r0
}
 80148da:	4618      	mov	r0, r3
 80148dc:	3708      	adds	r7, #8
 80148de:	46bd      	mov	sp, r7
 80148e0:	bd80      	pop	{r7, pc}
 80148e2:	bf00      	nop
 80148e4:	0801b138 	.word	0x0801b138

080148e8 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 80148e8:	b580      	push	{r7, lr}
 80148ea:	b08e      	sub	sp, #56	@ 0x38
 80148ec:	af04      	add	r7, sp, #16
 80148ee:	6078      	str	r0, [r7, #4]
 80148f0:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 80148f2:	4b79      	ldr	r3, [pc, #484]	@ (8014ad8 <icmp_input+0x1f0>)
 80148f4:	689b      	ldr	r3, [r3, #8]
 80148f6:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 80148f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80148fa:	781b      	ldrb	r3, [r3, #0]
 80148fc:	f003 030f 	and.w	r3, r3, #15
 8014900:	b2db      	uxtb	r3, r3
 8014902:	009b      	lsls	r3, r3, #2
 8014904:	b2db      	uxtb	r3, r3
 8014906:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 8014908:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801490a:	2b13      	cmp	r3, #19
 801490c:	f240 80cd 	bls.w	8014aaa <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8014910:	687b      	ldr	r3, [r7, #4]
 8014912:	895b      	ldrh	r3, [r3, #10]
 8014914:	2b03      	cmp	r3, #3
 8014916:	f240 80ca 	bls.w	8014aae <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801491a:	687b      	ldr	r3, [r7, #4]
 801491c:	685b      	ldr	r3, [r3, #4]
 801491e:	781b      	ldrb	r3, [r3, #0]
 8014920:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8014924:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8014928:	2b00      	cmp	r3, #0
 801492a:	f000 80b7 	beq.w	8014a9c <icmp_input+0x1b4>
 801492e:	2b08      	cmp	r3, #8
 8014930:	f040 80b7 	bne.w	8014aa2 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8014934:	4b69      	ldr	r3, [pc, #420]	@ (8014adc <icmp_input+0x1f4>)
 8014936:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8014938:	4b67      	ldr	r3, [pc, #412]	@ (8014ad8 <icmp_input+0x1f0>)
 801493a:	695b      	ldr	r3, [r3, #20]
 801493c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8014940:	2be0      	cmp	r3, #224	@ 0xe0
 8014942:	f000 80bb 	beq.w	8014abc <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8014946:	4b64      	ldr	r3, [pc, #400]	@ (8014ad8 <icmp_input+0x1f0>)
 8014948:	695b      	ldr	r3, [r3, #20]
 801494a:	4a63      	ldr	r2, [pc, #396]	@ (8014ad8 <icmp_input+0x1f0>)
 801494c:	6812      	ldr	r2, [r2, #0]
 801494e:	4611      	mov	r1, r2
 8014950:	4618      	mov	r0, r3
 8014952:	f000 fbed 	bl	8015130 <ip4_addr_isbroadcast_u32>
 8014956:	4603      	mov	r3, r0
 8014958:	2b00      	cmp	r3, #0
 801495a:	f040 80b1 	bne.w	8014ac0 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801495e:	687b      	ldr	r3, [r7, #4]
 8014960:	891b      	ldrh	r3, [r3, #8]
 8014962:	2b07      	cmp	r3, #7
 8014964:	f240 80a5 	bls.w	8014ab2 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8014968:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801496a:	330e      	adds	r3, #14
 801496c:	4619      	mov	r1, r3
 801496e:	6878      	ldr	r0, [r7, #4]
 8014970:	f7f8 f814 	bl	800c99c <pbuf_add_header>
 8014974:	4603      	mov	r3, r0
 8014976:	2b00      	cmp	r3, #0
 8014978:	d04b      	beq.n	8014a12 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801497a:	687b      	ldr	r3, [r7, #4]
 801497c:	891a      	ldrh	r2, [r3, #8]
 801497e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8014980:	4413      	add	r3, r2
 8014982:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8014984:	687b      	ldr	r3, [r7, #4]
 8014986:	891b      	ldrh	r3, [r3, #8]
 8014988:	8b7a      	ldrh	r2, [r7, #26]
 801498a:	429a      	cmp	r2, r3
 801498c:	f0c0 809a 	bcc.w	8014ac4 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8014990:	8b7b      	ldrh	r3, [r7, #26]
 8014992:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8014996:	4619      	mov	r1, r3
 8014998:	200e      	movs	r0, #14
 801499a:	f7f7 fdb1 	bl	800c500 <pbuf_alloc>
 801499e:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 80149a0:	697b      	ldr	r3, [r7, #20]
 80149a2:	2b00      	cmp	r3, #0
 80149a4:	f000 8090 	beq.w	8014ac8 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 80149a8:	697b      	ldr	r3, [r7, #20]
 80149aa:	895b      	ldrh	r3, [r3, #10]
 80149ac:	461a      	mov	r2, r3
 80149ae:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80149b0:	3308      	adds	r3, #8
 80149b2:	429a      	cmp	r2, r3
 80149b4:	d203      	bcs.n	80149be <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 80149b6:	6978      	ldr	r0, [r7, #20]
 80149b8:	f7f8 f886 	bl	800cac8 <pbuf_free>
          goto icmperr;
 80149bc:	e085      	b.n	8014aca <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 80149be:	697b      	ldr	r3, [r7, #20]
 80149c0:	685b      	ldr	r3, [r3, #4]
 80149c2:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80149c4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80149c6:	4618      	mov	r0, r3
 80149c8:	f001 ff55 	bl	8016876 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 80149cc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80149ce:	4619      	mov	r1, r3
 80149d0:	6978      	ldr	r0, [r7, #20]
 80149d2:	f7f7 fff3 	bl	800c9bc <pbuf_remove_header>
 80149d6:	4603      	mov	r3, r0
 80149d8:	2b00      	cmp	r3, #0
 80149da:	d009      	beq.n	80149f0 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 80149dc:	4b40      	ldr	r3, [pc, #256]	@ (8014ae0 <icmp_input+0x1f8>)
 80149de:	22b6      	movs	r2, #182	@ 0xb6
 80149e0:	4940      	ldr	r1, [pc, #256]	@ (8014ae4 <icmp_input+0x1fc>)
 80149e2:	4841      	ldr	r0, [pc, #260]	@ (8014ae8 <icmp_input+0x200>)
 80149e4:	f001 fddc 	bl	80165a0 <iprintf>
          pbuf_free(r);
 80149e8:	6978      	ldr	r0, [r7, #20]
 80149ea:	f7f8 f86d 	bl	800cac8 <pbuf_free>
          goto icmperr;
 80149ee:	e06c      	b.n	8014aca <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 80149f0:	6879      	ldr	r1, [r7, #4]
 80149f2:	6978      	ldr	r0, [r7, #20]
 80149f4:	f7f8 f98c 	bl	800cd10 <pbuf_copy>
 80149f8:	4603      	mov	r3, r0
 80149fa:	2b00      	cmp	r3, #0
 80149fc:	d003      	beq.n	8014a06 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 80149fe:	6978      	ldr	r0, [r7, #20]
 8014a00:	f7f8 f862 	bl	800cac8 <pbuf_free>
          goto icmperr;
 8014a04:	e061      	b.n	8014aca <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8014a06:	6878      	ldr	r0, [r7, #4]
 8014a08:	f7f8 f85e 	bl	800cac8 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8014a0c:	697b      	ldr	r3, [r7, #20]
 8014a0e:	607b      	str	r3, [r7, #4]
 8014a10:	e00f      	b.n	8014a32 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8014a12:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8014a14:	330e      	adds	r3, #14
 8014a16:	4619      	mov	r1, r3
 8014a18:	6878      	ldr	r0, [r7, #4]
 8014a1a:	f7f7 ffcf 	bl	800c9bc <pbuf_remove_header>
 8014a1e:	4603      	mov	r3, r0
 8014a20:	2b00      	cmp	r3, #0
 8014a22:	d006      	beq.n	8014a32 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8014a24:	4b2e      	ldr	r3, [pc, #184]	@ (8014ae0 <icmp_input+0x1f8>)
 8014a26:	22c7      	movs	r2, #199	@ 0xc7
 8014a28:	4930      	ldr	r1, [pc, #192]	@ (8014aec <icmp_input+0x204>)
 8014a2a:	482f      	ldr	r0, [pc, #188]	@ (8014ae8 <icmp_input+0x200>)
 8014a2c:	f001 fdb8 	bl	80165a0 <iprintf>
          goto icmperr;
 8014a30:	e04b      	b.n	8014aca <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8014a32:	687b      	ldr	r3, [r7, #4]
 8014a34:	685b      	ldr	r3, [r3, #4]
 8014a36:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8014a38:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8014a3a:	4619      	mov	r1, r3
 8014a3c:	6878      	ldr	r0, [r7, #4]
 8014a3e:	f7f7 ffad 	bl	800c99c <pbuf_add_header>
 8014a42:	4603      	mov	r3, r0
 8014a44:	2b00      	cmp	r3, #0
 8014a46:	d12b      	bne.n	8014aa0 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8014a48:	687b      	ldr	r3, [r7, #4]
 8014a4a:	685b      	ldr	r3, [r3, #4]
 8014a4c:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8014a4e:	69fb      	ldr	r3, [r7, #28]
 8014a50:	681a      	ldr	r2, [r3, #0]
 8014a52:	68fb      	ldr	r3, [r7, #12]
 8014a54:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8014a56:	4b20      	ldr	r3, [pc, #128]	@ (8014ad8 <icmp_input+0x1f0>)
 8014a58:	691a      	ldr	r2, [r3, #16]
 8014a5a:	68fb      	ldr	r3, [r7, #12]
 8014a5c:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8014a5e:	693b      	ldr	r3, [r7, #16]
 8014a60:	2200      	movs	r2, #0
 8014a62:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8014a64:	693b      	ldr	r3, [r7, #16]
 8014a66:	2200      	movs	r2, #0
 8014a68:	709a      	strb	r2, [r3, #2]
 8014a6a:	2200      	movs	r2, #0
 8014a6c:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8014a6e:	68fb      	ldr	r3, [r7, #12]
 8014a70:	22ff      	movs	r2, #255	@ 0xff
 8014a72:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8014a74:	68fb      	ldr	r3, [r7, #12]
 8014a76:	2200      	movs	r2, #0
 8014a78:	729a      	strb	r2, [r3, #10]
 8014a7a:	2200      	movs	r2, #0
 8014a7c:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8014a7e:	683b      	ldr	r3, [r7, #0]
 8014a80:	9302      	str	r3, [sp, #8]
 8014a82:	2301      	movs	r3, #1
 8014a84:	9301      	str	r3, [sp, #4]
 8014a86:	2300      	movs	r3, #0
 8014a88:	9300      	str	r3, [sp, #0]
 8014a8a:	23ff      	movs	r3, #255	@ 0xff
 8014a8c:	2200      	movs	r2, #0
 8014a8e:	69f9      	ldr	r1, [r7, #28]
 8014a90:	6878      	ldr	r0, [r7, #4]
 8014a92:	f000 fa75 	bl	8014f80 <ip4_output_if>
 8014a96:	4603      	mov	r3, r0
 8014a98:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8014a9a:	e001      	b.n	8014aa0 <icmp_input+0x1b8>
      break;
 8014a9c:	bf00      	nop
 8014a9e:	e000      	b.n	8014aa2 <icmp_input+0x1ba>
      break;
 8014aa0:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8014aa2:	6878      	ldr	r0, [r7, #4]
 8014aa4:	f7f8 f810 	bl	800cac8 <pbuf_free>
  return;
 8014aa8:	e013      	b.n	8014ad2 <icmp_input+0x1ea>
    goto lenerr;
 8014aaa:	bf00      	nop
 8014aac:	e002      	b.n	8014ab4 <icmp_input+0x1cc>
    goto lenerr;
 8014aae:	bf00      	nop
 8014ab0:	e000      	b.n	8014ab4 <icmp_input+0x1cc>
        goto lenerr;
 8014ab2:	bf00      	nop
lenerr:
  pbuf_free(p);
 8014ab4:	6878      	ldr	r0, [r7, #4]
 8014ab6:	f7f8 f807 	bl	800cac8 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8014aba:	e00a      	b.n	8014ad2 <icmp_input+0x1ea>
        goto icmperr;
 8014abc:	bf00      	nop
 8014abe:	e004      	b.n	8014aca <icmp_input+0x1e2>
        goto icmperr;
 8014ac0:	bf00      	nop
 8014ac2:	e002      	b.n	8014aca <icmp_input+0x1e2>
          goto icmperr;
 8014ac4:	bf00      	nop
 8014ac6:	e000      	b.n	8014aca <icmp_input+0x1e2>
          goto icmperr;
 8014ac8:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8014aca:	6878      	ldr	r0, [r7, #4]
 8014acc:	f7f7 fffc 	bl	800cac8 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8014ad0:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8014ad2:	3728      	adds	r7, #40	@ 0x28
 8014ad4:	46bd      	mov	sp, r7
 8014ad6:	bd80      	pop	{r7, pc}
 8014ad8:	200093f4 	.word	0x200093f4
 8014adc:	20009408 	.word	0x20009408
 8014ae0:	0801abb0 	.word	0x0801abb0
 8014ae4:	0801abe8 	.word	0x0801abe8
 8014ae8:	0801ac20 	.word	0x0801ac20
 8014aec:	0801ac48 	.word	0x0801ac48

08014af0 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8014af0:	b580      	push	{r7, lr}
 8014af2:	b082      	sub	sp, #8
 8014af4:	af00      	add	r7, sp, #0
 8014af6:	6078      	str	r0, [r7, #4]
 8014af8:	460b      	mov	r3, r1
 8014afa:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8014afc:	78fb      	ldrb	r3, [r7, #3]
 8014afe:	461a      	mov	r2, r3
 8014b00:	2103      	movs	r1, #3
 8014b02:	6878      	ldr	r0, [r7, #4]
 8014b04:	f000 f814 	bl	8014b30 <icmp_send_response>
}
 8014b08:	bf00      	nop
 8014b0a:	3708      	adds	r7, #8
 8014b0c:	46bd      	mov	sp, r7
 8014b0e:	bd80      	pop	{r7, pc}

08014b10 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8014b10:	b580      	push	{r7, lr}
 8014b12:	b082      	sub	sp, #8
 8014b14:	af00      	add	r7, sp, #0
 8014b16:	6078      	str	r0, [r7, #4]
 8014b18:	460b      	mov	r3, r1
 8014b1a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8014b1c:	78fb      	ldrb	r3, [r7, #3]
 8014b1e:	461a      	mov	r2, r3
 8014b20:	210b      	movs	r1, #11
 8014b22:	6878      	ldr	r0, [r7, #4]
 8014b24:	f000 f804 	bl	8014b30 <icmp_send_response>
}
 8014b28:	bf00      	nop
 8014b2a:	3708      	adds	r7, #8
 8014b2c:	46bd      	mov	sp, r7
 8014b2e:	bd80      	pop	{r7, pc}

08014b30 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8014b30:	b580      	push	{r7, lr}
 8014b32:	b08c      	sub	sp, #48	@ 0x30
 8014b34:	af04      	add	r7, sp, #16
 8014b36:	6078      	str	r0, [r7, #4]
 8014b38:	460b      	mov	r3, r1
 8014b3a:	70fb      	strb	r3, [r7, #3]
 8014b3c:	4613      	mov	r3, r2
 8014b3e:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8014b40:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8014b44:	2124      	movs	r1, #36	@ 0x24
 8014b46:	2022      	movs	r0, #34	@ 0x22
 8014b48:	f7f7 fcda 	bl	800c500 <pbuf_alloc>
 8014b4c:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8014b4e:	69fb      	ldr	r3, [r7, #28]
 8014b50:	2b00      	cmp	r3, #0
 8014b52:	d04c      	beq.n	8014bee <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8014b54:	69fb      	ldr	r3, [r7, #28]
 8014b56:	895b      	ldrh	r3, [r3, #10]
 8014b58:	2b23      	cmp	r3, #35	@ 0x23
 8014b5a:	d806      	bhi.n	8014b6a <icmp_send_response+0x3a>
 8014b5c:	4b26      	ldr	r3, [pc, #152]	@ (8014bf8 <icmp_send_response+0xc8>)
 8014b5e:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 8014b62:	4926      	ldr	r1, [pc, #152]	@ (8014bfc <icmp_send_response+0xcc>)
 8014b64:	4826      	ldr	r0, [pc, #152]	@ (8014c00 <icmp_send_response+0xd0>)
 8014b66:	f001 fd1b 	bl	80165a0 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8014b6a:	687b      	ldr	r3, [r7, #4]
 8014b6c:	685b      	ldr	r3, [r3, #4]
 8014b6e:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8014b70:	69fb      	ldr	r3, [r7, #28]
 8014b72:	685b      	ldr	r3, [r3, #4]
 8014b74:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8014b76:	697b      	ldr	r3, [r7, #20]
 8014b78:	78fa      	ldrb	r2, [r7, #3]
 8014b7a:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8014b7c:	697b      	ldr	r3, [r7, #20]
 8014b7e:	78ba      	ldrb	r2, [r7, #2]
 8014b80:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8014b82:	697b      	ldr	r3, [r7, #20]
 8014b84:	2200      	movs	r2, #0
 8014b86:	711a      	strb	r2, [r3, #4]
 8014b88:	2200      	movs	r2, #0
 8014b8a:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8014b8c:	697b      	ldr	r3, [r7, #20]
 8014b8e:	2200      	movs	r2, #0
 8014b90:	719a      	strb	r2, [r3, #6]
 8014b92:	2200      	movs	r2, #0
 8014b94:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8014b96:	69fb      	ldr	r3, [r7, #28]
 8014b98:	685b      	ldr	r3, [r3, #4]
 8014b9a:	f103 0008 	add.w	r0, r3, #8
 8014b9e:	687b      	ldr	r3, [r7, #4]
 8014ba0:	685b      	ldr	r3, [r3, #4]
 8014ba2:	221c      	movs	r2, #28
 8014ba4:	4619      	mov	r1, r3
 8014ba6:	f001 fe66 	bl	8016876 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8014baa:	69bb      	ldr	r3, [r7, #24]
 8014bac:	68db      	ldr	r3, [r3, #12]
 8014bae:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8014bb0:	f107 030c 	add.w	r3, r7, #12
 8014bb4:	4618      	mov	r0, r3
 8014bb6:	f000 f825 	bl	8014c04 <ip4_route>
 8014bba:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8014bbc:	693b      	ldr	r3, [r7, #16]
 8014bbe:	2b00      	cmp	r3, #0
 8014bc0:	d011      	beq.n	8014be6 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8014bc2:	697b      	ldr	r3, [r7, #20]
 8014bc4:	2200      	movs	r2, #0
 8014bc6:	709a      	strb	r2, [r3, #2]
 8014bc8:	2200      	movs	r2, #0
 8014bca:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8014bcc:	f107 020c 	add.w	r2, r7, #12
 8014bd0:	693b      	ldr	r3, [r7, #16]
 8014bd2:	9302      	str	r3, [sp, #8]
 8014bd4:	2301      	movs	r3, #1
 8014bd6:	9301      	str	r3, [sp, #4]
 8014bd8:	2300      	movs	r3, #0
 8014bda:	9300      	str	r3, [sp, #0]
 8014bdc:	23ff      	movs	r3, #255	@ 0xff
 8014bde:	2100      	movs	r1, #0
 8014be0:	69f8      	ldr	r0, [r7, #28]
 8014be2:	f000 f9cd 	bl	8014f80 <ip4_output_if>
  }
  pbuf_free(q);
 8014be6:	69f8      	ldr	r0, [r7, #28]
 8014be8:	f7f7 ff6e 	bl	800cac8 <pbuf_free>
 8014bec:	e000      	b.n	8014bf0 <icmp_send_response+0xc0>
    return;
 8014bee:	bf00      	nop
}
 8014bf0:	3720      	adds	r7, #32
 8014bf2:	46bd      	mov	sp, r7
 8014bf4:	bd80      	pop	{r7, pc}
 8014bf6:	bf00      	nop
 8014bf8:	0801abb0 	.word	0x0801abb0
 8014bfc:	0801ac7c 	.word	0x0801ac7c
 8014c00:	0801ac20 	.word	0x0801ac20

08014c04 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8014c04:	b480      	push	{r7}
 8014c06:	b085      	sub	sp, #20
 8014c08:	af00      	add	r7, sp, #0
 8014c0a:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8014c0c:	4b33      	ldr	r3, [pc, #204]	@ (8014cdc <ip4_route+0xd8>)
 8014c0e:	681b      	ldr	r3, [r3, #0]
 8014c10:	60fb      	str	r3, [r7, #12]
 8014c12:	e036      	b.n	8014c82 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8014c14:	68fb      	ldr	r3, [r7, #12]
 8014c16:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8014c1a:	f003 0301 	and.w	r3, r3, #1
 8014c1e:	b2db      	uxtb	r3, r3
 8014c20:	2b00      	cmp	r3, #0
 8014c22:	d02b      	beq.n	8014c7c <ip4_route+0x78>
 8014c24:	68fb      	ldr	r3, [r7, #12]
 8014c26:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8014c2a:	089b      	lsrs	r3, r3, #2
 8014c2c:	f003 0301 	and.w	r3, r3, #1
 8014c30:	b2db      	uxtb	r3, r3
 8014c32:	2b00      	cmp	r3, #0
 8014c34:	d022      	beq.n	8014c7c <ip4_route+0x78>
 8014c36:	68fb      	ldr	r3, [r7, #12]
 8014c38:	3304      	adds	r3, #4
 8014c3a:	681b      	ldr	r3, [r3, #0]
 8014c3c:	2b00      	cmp	r3, #0
 8014c3e:	d01d      	beq.n	8014c7c <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8014c40:	687b      	ldr	r3, [r7, #4]
 8014c42:	681a      	ldr	r2, [r3, #0]
 8014c44:	68fb      	ldr	r3, [r7, #12]
 8014c46:	3304      	adds	r3, #4
 8014c48:	681b      	ldr	r3, [r3, #0]
 8014c4a:	405a      	eors	r2, r3
 8014c4c:	68fb      	ldr	r3, [r7, #12]
 8014c4e:	3308      	adds	r3, #8
 8014c50:	681b      	ldr	r3, [r3, #0]
 8014c52:	4013      	ands	r3, r2
 8014c54:	2b00      	cmp	r3, #0
 8014c56:	d101      	bne.n	8014c5c <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8014c58:	68fb      	ldr	r3, [r7, #12]
 8014c5a:	e038      	b.n	8014cce <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8014c5c:	68fb      	ldr	r3, [r7, #12]
 8014c5e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8014c62:	f003 0302 	and.w	r3, r3, #2
 8014c66:	2b00      	cmp	r3, #0
 8014c68:	d108      	bne.n	8014c7c <ip4_route+0x78>
 8014c6a:	687b      	ldr	r3, [r7, #4]
 8014c6c:	681a      	ldr	r2, [r3, #0]
 8014c6e:	68fb      	ldr	r3, [r7, #12]
 8014c70:	330c      	adds	r3, #12
 8014c72:	681b      	ldr	r3, [r3, #0]
 8014c74:	429a      	cmp	r2, r3
 8014c76:	d101      	bne.n	8014c7c <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8014c78:	68fb      	ldr	r3, [r7, #12]
 8014c7a:	e028      	b.n	8014cce <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8014c7c:	68fb      	ldr	r3, [r7, #12]
 8014c7e:	681b      	ldr	r3, [r3, #0]
 8014c80:	60fb      	str	r3, [r7, #12]
 8014c82:	68fb      	ldr	r3, [r7, #12]
 8014c84:	2b00      	cmp	r3, #0
 8014c86:	d1c5      	bne.n	8014c14 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8014c88:	4b15      	ldr	r3, [pc, #84]	@ (8014ce0 <ip4_route+0xdc>)
 8014c8a:	681b      	ldr	r3, [r3, #0]
 8014c8c:	2b00      	cmp	r3, #0
 8014c8e:	d01a      	beq.n	8014cc6 <ip4_route+0xc2>
 8014c90:	4b13      	ldr	r3, [pc, #76]	@ (8014ce0 <ip4_route+0xdc>)
 8014c92:	681b      	ldr	r3, [r3, #0]
 8014c94:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8014c98:	f003 0301 	and.w	r3, r3, #1
 8014c9c:	2b00      	cmp	r3, #0
 8014c9e:	d012      	beq.n	8014cc6 <ip4_route+0xc2>
 8014ca0:	4b0f      	ldr	r3, [pc, #60]	@ (8014ce0 <ip4_route+0xdc>)
 8014ca2:	681b      	ldr	r3, [r3, #0]
 8014ca4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8014ca8:	f003 0304 	and.w	r3, r3, #4
 8014cac:	2b00      	cmp	r3, #0
 8014cae:	d00a      	beq.n	8014cc6 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8014cb0:	4b0b      	ldr	r3, [pc, #44]	@ (8014ce0 <ip4_route+0xdc>)
 8014cb2:	681b      	ldr	r3, [r3, #0]
 8014cb4:	3304      	adds	r3, #4
 8014cb6:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8014cb8:	2b00      	cmp	r3, #0
 8014cba:	d004      	beq.n	8014cc6 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8014cbc:	687b      	ldr	r3, [r7, #4]
 8014cbe:	681b      	ldr	r3, [r3, #0]
 8014cc0:	b2db      	uxtb	r3, r3
 8014cc2:	2b7f      	cmp	r3, #127	@ 0x7f
 8014cc4:	d101      	bne.n	8014cca <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8014cc6:	2300      	movs	r3, #0
 8014cc8:	e001      	b.n	8014cce <ip4_route+0xca>
  }

  return netif_default;
 8014cca:	4b05      	ldr	r3, [pc, #20]	@ (8014ce0 <ip4_route+0xdc>)
 8014ccc:	681b      	ldr	r3, [r3, #0]
}
 8014cce:	4618      	mov	r0, r3
 8014cd0:	3714      	adds	r7, #20
 8014cd2:	46bd      	mov	sp, r7
 8014cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cd8:	4770      	bx	lr
 8014cda:	bf00      	nop
 8014cdc:	2000ed34 	.word	0x2000ed34
 8014ce0:	2000ed38 	.word	0x2000ed38

08014ce4 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8014ce4:	b580      	push	{r7, lr}
 8014ce6:	b082      	sub	sp, #8
 8014ce8:	af00      	add	r7, sp, #0
 8014cea:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8014cec:	687b      	ldr	r3, [r7, #4]
 8014cee:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8014cf2:	f003 0301 	and.w	r3, r3, #1
 8014cf6:	b2db      	uxtb	r3, r3
 8014cf8:	2b00      	cmp	r3, #0
 8014cfa:	d016      	beq.n	8014d2a <ip4_input_accept+0x46>
 8014cfc:	687b      	ldr	r3, [r7, #4]
 8014cfe:	3304      	adds	r3, #4
 8014d00:	681b      	ldr	r3, [r3, #0]
 8014d02:	2b00      	cmp	r3, #0
 8014d04:	d011      	beq.n	8014d2a <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8014d06:	4b0b      	ldr	r3, [pc, #44]	@ (8014d34 <ip4_input_accept+0x50>)
 8014d08:	695a      	ldr	r2, [r3, #20]
 8014d0a:	687b      	ldr	r3, [r7, #4]
 8014d0c:	3304      	adds	r3, #4
 8014d0e:	681b      	ldr	r3, [r3, #0]
 8014d10:	429a      	cmp	r2, r3
 8014d12:	d008      	beq.n	8014d26 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8014d14:	4b07      	ldr	r3, [pc, #28]	@ (8014d34 <ip4_input_accept+0x50>)
 8014d16:	695b      	ldr	r3, [r3, #20]
 8014d18:	6879      	ldr	r1, [r7, #4]
 8014d1a:	4618      	mov	r0, r3
 8014d1c:	f000 fa08 	bl	8015130 <ip4_addr_isbroadcast_u32>
 8014d20:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8014d22:	2b00      	cmp	r3, #0
 8014d24:	d001      	beq.n	8014d2a <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8014d26:	2301      	movs	r3, #1
 8014d28:	e000      	b.n	8014d2c <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8014d2a:	2300      	movs	r3, #0
}
 8014d2c:	4618      	mov	r0, r3
 8014d2e:	3708      	adds	r7, #8
 8014d30:	46bd      	mov	sp, r7
 8014d32:	bd80      	pop	{r7, pc}
 8014d34:	200093f4 	.word	0x200093f4

08014d38 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8014d38:	b580      	push	{r7, lr}
 8014d3a:	b086      	sub	sp, #24
 8014d3c:	af00      	add	r7, sp, #0
 8014d3e:	6078      	str	r0, [r7, #4]
 8014d40:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8014d42:	687b      	ldr	r3, [r7, #4]
 8014d44:	685b      	ldr	r3, [r3, #4]
 8014d46:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8014d48:	697b      	ldr	r3, [r7, #20]
 8014d4a:	781b      	ldrb	r3, [r3, #0]
 8014d4c:	091b      	lsrs	r3, r3, #4
 8014d4e:	b2db      	uxtb	r3, r3
 8014d50:	2b04      	cmp	r3, #4
 8014d52:	d004      	beq.n	8014d5e <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8014d54:	6878      	ldr	r0, [r7, #4]
 8014d56:	f7f7 feb7 	bl	800cac8 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8014d5a:	2300      	movs	r3, #0
 8014d5c:	e107      	b.n	8014f6e <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8014d5e:	697b      	ldr	r3, [r7, #20]
 8014d60:	781b      	ldrb	r3, [r3, #0]
 8014d62:	f003 030f 	and.w	r3, r3, #15
 8014d66:	b2db      	uxtb	r3, r3
 8014d68:	009b      	lsls	r3, r3, #2
 8014d6a:	b2db      	uxtb	r3, r3
 8014d6c:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8014d6e:	697b      	ldr	r3, [r7, #20]
 8014d70:	885b      	ldrh	r3, [r3, #2]
 8014d72:	b29b      	uxth	r3, r3
 8014d74:	4618      	mov	r0, r3
 8014d76:	f7f6 fab5 	bl	800b2e4 <lwip_htons>
 8014d7a:	4603      	mov	r3, r0
 8014d7c:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8014d7e:	687b      	ldr	r3, [r7, #4]
 8014d80:	891b      	ldrh	r3, [r3, #8]
 8014d82:	89ba      	ldrh	r2, [r7, #12]
 8014d84:	429a      	cmp	r2, r3
 8014d86:	d204      	bcs.n	8014d92 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8014d88:	89bb      	ldrh	r3, [r7, #12]
 8014d8a:	4619      	mov	r1, r3
 8014d8c:	6878      	ldr	r0, [r7, #4]
 8014d8e:	f7f7 fd15 	bl	800c7bc <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8014d92:	687b      	ldr	r3, [r7, #4]
 8014d94:	895b      	ldrh	r3, [r3, #10]
 8014d96:	89fa      	ldrh	r2, [r7, #14]
 8014d98:	429a      	cmp	r2, r3
 8014d9a:	d807      	bhi.n	8014dac <ip4_input+0x74>
 8014d9c:	687b      	ldr	r3, [r7, #4]
 8014d9e:	891b      	ldrh	r3, [r3, #8]
 8014da0:	89ba      	ldrh	r2, [r7, #12]
 8014da2:	429a      	cmp	r2, r3
 8014da4:	d802      	bhi.n	8014dac <ip4_input+0x74>
 8014da6:	89fb      	ldrh	r3, [r7, #14]
 8014da8:	2b13      	cmp	r3, #19
 8014daa:	d804      	bhi.n	8014db6 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8014dac:	6878      	ldr	r0, [r7, #4]
 8014dae:	f7f7 fe8b 	bl	800cac8 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8014db2:	2300      	movs	r3, #0
 8014db4:	e0db      	b.n	8014f6e <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8014db6:	697b      	ldr	r3, [r7, #20]
 8014db8:	691b      	ldr	r3, [r3, #16]
 8014dba:	4a6f      	ldr	r2, [pc, #444]	@ (8014f78 <ip4_input+0x240>)
 8014dbc:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8014dbe:	697b      	ldr	r3, [r7, #20]
 8014dc0:	68db      	ldr	r3, [r3, #12]
 8014dc2:	4a6d      	ldr	r2, [pc, #436]	@ (8014f78 <ip4_input+0x240>)
 8014dc4:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8014dc6:	4b6c      	ldr	r3, [pc, #432]	@ (8014f78 <ip4_input+0x240>)
 8014dc8:	695b      	ldr	r3, [r3, #20]
 8014dca:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8014dce:	2be0      	cmp	r3, #224	@ 0xe0
 8014dd0:	d112      	bne.n	8014df8 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8014dd2:	683b      	ldr	r3, [r7, #0]
 8014dd4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8014dd8:	f003 0301 	and.w	r3, r3, #1
 8014ddc:	b2db      	uxtb	r3, r3
 8014dde:	2b00      	cmp	r3, #0
 8014de0:	d007      	beq.n	8014df2 <ip4_input+0xba>
 8014de2:	683b      	ldr	r3, [r7, #0]
 8014de4:	3304      	adds	r3, #4
 8014de6:	681b      	ldr	r3, [r3, #0]
 8014de8:	2b00      	cmp	r3, #0
 8014dea:	d002      	beq.n	8014df2 <ip4_input+0xba>
      netif = inp;
 8014dec:	683b      	ldr	r3, [r7, #0]
 8014dee:	613b      	str	r3, [r7, #16]
 8014df0:	e02a      	b.n	8014e48 <ip4_input+0x110>
    } else {
      netif = NULL;
 8014df2:	2300      	movs	r3, #0
 8014df4:	613b      	str	r3, [r7, #16]
 8014df6:	e027      	b.n	8014e48 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8014df8:	6838      	ldr	r0, [r7, #0]
 8014dfa:	f7ff ff73 	bl	8014ce4 <ip4_input_accept>
 8014dfe:	4603      	mov	r3, r0
 8014e00:	2b00      	cmp	r3, #0
 8014e02:	d002      	beq.n	8014e0a <ip4_input+0xd2>
      netif = inp;
 8014e04:	683b      	ldr	r3, [r7, #0]
 8014e06:	613b      	str	r3, [r7, #16]
 8014e08:	e01e      	b.n	8014e48 <ip4_input+0x110>
    } else {
      netif = NULL;
 8014e0a:	2300      	movs	r3, #0
 8014e0c:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8014e0e:	4b5a      	ldr	r3, [pc, #360]	@ (8014f78 <ip4_input+0x240>)
 8014e10:	695b      	ldr	r3, [r3, #20]
 8014e12:	b2db      	uxtb	r3, r3
 8014e14:	2b7f      	cmp	r3, #127	@ 0x7f
 8014e16:	d017      	beq.n	8014e48 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8014e18:	4b58      	ldr	r3, [pc, #352]	@ (8014f7c <ip4_input+0x244>)
 8014e1a:	681b      	ldr	r3, [r3, #0]
 8014e1c:	613b      	str	r3, [r7, #16]
 8014e1e:	e00e      	b.n	8014e3e <ip4_input+0x106>
          if (netif == inp) {
 8014e20:	693a      	ldr	r2, [r7, #16]
 8014e22:	683b      	ldr	r3, [r7, #0]
 8014e24:	429a      	cmp	r2, r3
 8014e26:	d006      	beq.n	8014e36 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8014e28:	6938      	ldr	r0, [r7, #16]
 8014e2a:	f7ff ff5b 	bl	8014ce4 <ip4_input_accept>
 8014e2e:	4603      	mov	r3, r0
 8014e30:	2b00      	cmp	r3, #0
 8014e32:	d108      	bne.n	8014e46 <ip4_input+0x10e>
 8014e34:	e000      	b.n	8014e38 <ip4_input+0x100>
            continue;
 8014e36:	bf00      	nop
        NETIF_FOREACH(netif) {
 8014e38:	693b      	ldr	r3, [r7, #16]
 8014e3a:	681b      	ldr	r3, [r3, #0]
 8014e3c:	613b      	str	r3, [r7, #16]
 8014e3e:	693b      	ldr	r3, [r7, #16]
 8014e40:	2b00      	cmp	r3, #0
 8014e42:	d1ed      	bne.n	8014e20 <ip4_input+0xe8>
 8014e44:	e000      	b.n	8014e48 <ip4_input+0x110>
            break;
 8014e46:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8014e48:	4b4b      	ldr	r3, [pc, #300]	@ (8014f78 <ip4_input+0x240>)
 8014e4a:	691b      	ldr	r3, [r3, #16]
 8014e4c:	6839      	ldr	r1, [r7, #0]
 8014e4e:	4618      	mov	r0, r3
 8014e50:	f000 f96e 	bl	8015130 <ip4_addr_isbroadcast_u32>
 8014e54:	4603      	mov	r3, r0
 8014e56:	2b00      	cmp	r3, #0
 8014e58:	d105      	bne.n	8014e66 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8014e5a:	4b47      	ldr	r3, [pc, #284]	@ (8014f78 <ip4_input+0x240>)
 8014e5c:	691b      	ldr	r3, [r3, #16]
 8014e5e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8014e62:	2be0      	cmp	r3, #224	@ 0xe0
 8014e64:	d104      	bne.n	8014e70 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8014e66:	6878      	ldr	r0, [r7, #4]
 8014e68:	f7f7 fe2e 	bl	800cac8 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8014e6c:	2300      	movs	r3, #0
 8014e6e:	e07e      	b.n	8014f6e <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8014e70:	693b      	ldr	r3, [r7, #16]
 8014e72:	2b00      	cmp	r3, #0
 8014e74:	d104      	bne.n	8014e80 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8014e76:	6878      	ldr	r0, [r7, #4]
 8014e78:	f7f7 fe26 	bl	800cac8 <pbuf_free>
    return ERR_OK;
 8014e7c:	2300      	movs	r3, #0
 8014e7e:	e076      	b.n	8014f6e <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8014e80:	697b      	ldr	r3, [r7, #20]
 8014e82:	88db      	ldrh	r3, [r3, #6]
 8014e84:	b29b      	uxth	r3, r3
 8014e86:	461a      	mov	r2, r3
 8014e88:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 8014e8c:	4013      	ands	r3, r2
 8014e8e:	2b00      	cmp	r3, #0
 8014e90:	d00b      	beq.n	8014eaa <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8014e92:	6878      	ldr	r0, [r7, #4]
 8014e94:	f000 fc92 	bl	80157bc <ip4_reass>
 8014e98:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8014e9a:	687b      	ldr	r3, [r7, #4]
 8014e9c:	2b00      	cmp	r3, #0
 8014e9e:	d101      	bne.n	8014ea4 <ip4_input+0x16c>
      return ERR_OK;
 8014ea0:	2300      	movs	r3, #0
 8014ea2:	e064      	b.n	8014f6e <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8014ea4:	687b      	ldr	r3, [r7, #4]
 8014ea6:	685b      	ldr	r3, [r3, #4]
 8014ea8:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8014eaa:	4a33      	ldr	r2, [pc, #204]	@ (8014f78 <ip4_input+0x240>)
 8014eac:	693b      	ldr	r3, [r7, #16]
 8014eae:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8014eb0:	4a31      	ldr	r2, [pc, #196]	@ (8014f78 <ip4_input+0x240>)
 8014eb2:	683b      	ldr	r3, [r7, #0]
 8014eb4:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8014eb6:	4a30      	ldr	r2, [pc, #192]	@ (8014f78 <ip4_input+0x240>)
 8014eb8:	697b      	ldr	r3, [r7, #20]
 8014eba:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8014ebc:	697b      	ldr	r3, [r7, #20]
 8014ebe:	781b      	ldrb	r3, [r3, #0]
 8014ec0:	f003 030f 	and.w	r3, r3, #15
 8014ec4:	b2db      	uxtb	r3, r3
 8014ec6:	009b      	lsls	r3, r3, #2
 8014ec8:	b2db      	uxtb	r3, r3
 8014eca:	461a      	mov	r2, r3
 8014ecc:	4b2a      	ldr	r3, [pc, #168]	@ (8014f78 <ip4_input+0x240>)
 8014ece:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8014ed0:	89fb      	ldrh	r3, [r7, #14]
 8014ed2:	4619      	mov	r1, r3
 8014ed4:	6878      	ldr	r0, [r7, #4]
 8014ed6:	f7f7 fd71 	bl	800c9bc <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8014eda:	697b      	ldr	r3, [r7, #20]
 8014edc:	7a5b      	ldrb	r3, [r3, #9]
 8014ede:	2b11      	cmp	r3, #17
 8014ee0:	d006      	beq.n	8014ef0 <ip4_input+0x1b8>
 8014ee2:	2b11      	cmp	r3, #17
 8014ee4:	dc13      	bgt.n	8014f0e <ip4_input+0x1d6>
 8014ee6:	2b01      	cmp	r3, #1
 8014ee8:	d00c      	beq.n	8014f04 <ip4_input+0x1cc>
 8014eea:	2b06      	cmp	r3, #6
 8014eec:	d005      	beq.n	8014efa <ip4_input+0x1c2>
 8014eee:	e00e      	b.n	8014f0e <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8014ef0:	6839      	ldr	r1, [r7, #0]
 8014ef2:	6878      	ldr	r0, [r7, #4]
 8014ef4:	f7fe fb5a 	bl	80135ac <udp_input>
        break;
 8014ef8:	e026      	b.n	8014f48 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8014efa:	6839      	ldr	r1, [r7, #0]
 8014efc:	6878      	ldr	r0, [r7, #4]
 8014efe:	f7f9 ff19 	bl	800ed34 <tcp_input>
        break;
 8014f02:	e021      	b.n	8014f48 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8014f04:	6839      	ldr	r1, [r7, #0]
 8014f06:	6878      	ldr	r0, [r7, #4]
 8014f08:	f7ff fcee 	bl	80148e8 <icmp_input>
        break;
 8014f0c:	e01c      	b.n	8014f48 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8014f0e:	4b1a      	ldr	r3, [pc, #104]	@ (8014f78 <ip4_input+0x240>)
 8014f10:	695b      	ldr	r3, [r3, #20]
 8014f12:	6939      	ldr	r1, [r7, #16]
 8014f14:	4618      	mov	r0, r3
 8014f16:	f000 f90b 	bl	8015130 <ip4_addr_isbroadcast_u32>
 8014f1a:	4603      	mov	r3, r0
 8014f1c:	2b00      	cmp	r3, #0
 8014f1e:	d10f      	bne.n	8014f40 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8014f20:	4b15      	ldr	r3, [pc, #84]	@ (8014f78 <ip4_input+0x240>)
 8014f22:	695b      	ldr	r3, [r3, #20]
 8014f24:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8014f28:	2be0      	cmp	r3, #224	@ 0xe0
 8014f2a:	d009      	beq.n	8014f40 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8014f2c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014f30:	4619      	mov	r1, r3
 8014f32:	6878      	ldr	r0, [r7, #4]
 8014f34:	f7f7 fdb5 	bl	800caa2 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8014f38:	2102      	movs	r1, #2
 8014f3a:	6878      	ldr	r0, [r7, #4]
 8014f3c:	f7ff fdd8 	bl	8014af0 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8014f40:	6878      	ldr	r0, [r7, #4]
 8014f42:	f7f7 fdc1 	bl	800cac8 <pbuf_free>
        break;
 8014f46:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8014f48:	4b0b      	ldr	r3, [pc, #44]	@ (8014f78 <ip4_input+0x240>)
 8014f4a:	2200      	movs	r2, #0
 8014f4c:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8014f4e:	4b0a      	ldr	r3, [pc, #40]	@ (8014f78 <ip4_input+0x240>)
 8014f50:	2200      	movs	r2, #0
 8014f52:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8014f54:	4b08      	ldr	r3, [pc, #32]	@ (8014f78 <ip4_input+0x240>)
 8014f56:	2200      	movs	r2, #0
 8014f58:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8014f5a:	4b07      	ldr	r3, [pc, #28]	@ (8014f78 <ip4_input+0x240>)
 8014f5c:	2200      	movs	r2, #0
 8014f5e:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8014f60:	4b05      	ldr	r3, [pc, #20]	@ (8014f78 <ip4_input+0x240>)
 8014f62:	2200      	movs	r2, #0
 8014f64:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8014f66:	4b04      	ldr	r3, [pc, #16]	@ (8014f78 <ip4_input+0x240>)
 8014f68:	2200      	movs	r2, #0
 8014f6a:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8014f6c:	2300      	movs	r3, #0
}
 8014f6e:	4618      	mov	r0, r3
 8014f70:	3718      	adds	r7, #24
 8014f72:	46bd      	mov	sp, r7
 8014f74:	bd80      	pop	{r7, pc}
 8014f76:	bf00      	nop
 8014f78:	200093f4 	.word	0x200093f4
 8014f7c:	2000ed34 	.word	0x2000ed34

08014f80 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8014f80:	b580      	push	{r7, lr}
 8014f82:	b08a      	sub	sp, #40	@ 0x28
 8014f84:	af04      	add	r7, sp, #16
 8014f86:	60f8      	str	r0, [r7, #12]
 8014f88:	60b9      	str	r1, [r7, #8]
 8014f8a:	607a      	str	r2, [r7, #4]
 8014f8c:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8014f8e:	68bb      	ldr	r3, [r7, #8]
 8014f90:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8014f92:	687b      	ldr	r3, [r7, #4]
 8014f94:	2b00      	cmp	r3, #0
 8014f96:	d009      	beq.n	8014fac <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8014f98:	68bb      	ldr	r3, [r7, #8]
 8014f9a:	2b00      	cmp	r3, #0
 8014f9c:	d003      	beq.n	8014fa6 <ip4_output_if+0x26>
 8014f9e:	68bb      	ldr	r3, [r7, #8]
 8014fa0:	681b      	ldr	r3, [r3, #0]
 8014fa2:	2b00      	cmp	r3, #0
 8014fa4:	d102      	bne.n	8014fac <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8014fa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014fa8:	3304      	adds	r3, #4
 8014faa:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8014fac:	78fa      	ldrb	r2, [r7, #3]
 8014fae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014fb0:	9302      	str	r3, [sp, #8]
 8014fb2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8014fb6:	9301      	str	r3, [sp, #4]
 8014fb8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8014fbc:	9300      	str	r3, [sp, #0]
 8014fbe:	4613      	mov	r3, r2
 8014fc0:	687a      	ldr	r2, [r7, #4]
 8014fc2:	6979      	ldr	r1, [r7, #20]
 8014fc4:	68f8      	ldr	r0, [r7, #12]
 8014fc6:	f000 f805 	bl	8014fd4 <ip4_output_if_src>
 8014fca:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8014fcc:	4618      	mov	r0, r3
 8014fce:	3718      	adds	r7, #24
 8014fd0:	46bd      	mov	sp, r7
 8014fd2:	bd80      	pop	{r7, pc}

08014fd4 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8014fd4:	b580      	push	{r7, lr}
 8014fd6:	b088      	sub	sp, #32
 8014fd8:	af00      	add	r7, sp, #0
 8014fda:	60f8      	str	r0, [r7, #12]
 8014fdc:	60b9      	str	r1, [r7, #8]
 8014fde:	607a      	str	r2, [r7, #4]
 8014fe0:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8014fe2:	68fb      	ldr	r3, [r7, #12]
 8014fe4:	7b9b      	ldrb	r3, [r3, #14]
 8014fe6:	2b01      	cmp	r3, #1
 8014fe8:	d006      	beq.n	8014ff8 <ip4_output_if_src+0x24>
 8014fea:	4b4b      	ldr	r3, [pc, #300]	@ (8015118 <ip4_output_if_src+0x144>)
 8014fec:	f44f 7255 	mov.w	r2, #852	@ 0x354
 8014ff0:	494a      	ldr	r1, [pc, #296]	@ (801511c <ip4_output_if_src+0x148>)
 8014ff2:	484b      	ldr	r0, [pc, #300]	@ (8015120 <ip4_output_if_src+0x14c>)
 8014ff4:	f001 fad4 	bl	80165a0 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8014ff8:	687b      	ldr	r3, [r7, #4]
 8014ffa:	2b00      	cmp	r3, #0
 8014ffc:	d060      	beq.n	80150c0 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8014ffe:	2314      	movs	r3, #20
 8015000:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8015002:	2114      	movs	r1, #20
 8015004:	68f8      	ldr	r0, [r7, #12]
 8015006:	f7f7 fcc9 	bl	800c99c <pbuf_add_header>
 801500a:	4603      	mov	r3, r0
 801500c:	2b00      	cmp	r3, #0
 801500e:	d002      	beq.n	8015016 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8015010:	f06f 0301 	mvn.w	r3, #1
 8015014:	e07c      	b.n	8015110 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8015016:	68fb      	ldr	r3, [r7, #12]
 8015018:	685b      	ldr	r3, [r3, #4]
 801501a:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801501c:	68fb      	ldr	r3, [r7, #12]
 801501e:	895b      	ldrh	r3, [r3, #10]
 8015020:	2b13      	cmp	r3, #19
 8015022:	d806      	bhi.n	8015032 <ip4_output_if_src+0x5e>
 8015024:	4b3c      	ldr	r3, [pc, #240]	@ (8015118 <ip4_output_if_src+0x144>)
 8015026:	f44f 7262 	mov.w	r2, #904	@ 0x388
 801502a:	493e      	ldr	r1, [pc, #248]	@ (8015124 <ip4_output_if_src+0x150>)
 801502c:	483c      	ldr	r0, [pc, #240]	@ (8015120 <ip4_output_if_src+0x14c>)
 801502e:	f001 fab7 	bl	80165a0 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8015032:	69fb      	ldr	r3, [r7, #28]
 8015034:	78fa      	ldrb	r2, [r7, #3]
 8015036:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8015038:	69fb      	ldr	r3, [r7, #28]
 801503a:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 801503e:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8015040:	687b      	ldr	r3, [r7, #4]
 8015042:	681a      	ldr	r2, [r3, #0]
 8015044:	69fb      	ldr	r3, [r7, #28]
 8015046:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8015048:	8b7b      	ldrh	r3, [r7, #26]
 801504a:	089b      	lsrs	r3, r3, #2
 801504c:	b29b      	uxth	r3, r3
 801504e:	b2db      	uxtb	r3, r3
 8015050:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015054:	b2da      	uxtb	r2, r3
 8015056:	69fb      	ldr	r3, [r7, #28]
 8015058:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801505a:	69fb      	ldr	r3, [r7, #28]
 801505c:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8015060:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8015062:	68fb      	ldr	r3, [r7, #12]
 8015064:	891b      	ldrh	r3, [r3, #8]
 8015066:	4618      	mov	r0, r3
 8015068:	f7f6 f93c 	bl	800b2e4 <lwip_htons>
 801506c:	4603      	mov	r3, r0
 801506e:	461a      	mov	r2, r3
 8015070:	69fb      	ldr	r3, [r7, #28]
 8015072:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8015074:	69fb      	ldr	r3, [r7, #28]
 8015076:	2200      	movs	r2, #0
 8015078:	719a      	strb	r2, [r3, #6]
 801507a:	2200      	movs	r2, #0
 801507c:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801507e:	4b2a      	ldr	r3, [pc, #168]	@ (8015128 <ip4_output_if_src+0x154>)
 8015080:	881b      	ldrh	r3, [r3, #0]
 8015082:	4618      	mov	r0, r3
 8015084:	f7f6 f92e 	bl	800b2e4 <lwip_htons>
 8015088:	4603      	mov	r3, r0
 801508a:	461a      	mov	r2, r3
 801508c:	69fb      	ldr	r3, [r7, #28]
 801508e:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8015090:	4b25      	ldr	r3, [pc, #148]	@ (8015128 <ip4_output_if_src+0x154>)
 8015092:	881b      	ldrh	r3, [r3, #0]
 8015094:	3301      	adds	r3, #1
 8015096:	b29a      	uxth	r2, r3
 8015098:	4b23      	ldr	r3, [pc, #140]	@ (8015128 <ip4_output_if_src+0x154>)
 801509a:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 801509c:	68bb      	ldr	r3, [r7, #8]
 801509e:	2b00      	cmp	r3, #0
 80150a0:	d104      	bne.n	80150ac <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 80150a2:	4b22      	ldr	r3, [pc, #136]	@ (801512c <ip4_output_if_src+0x158>)
 80150a4:	681a      	ldr	r2, [r3, #0]
 80150a6:	69fb      	ldr	r3, [r7, #28]
 80150a8:	60da      	str	r2, [r3, #12]
 80150aa:	e003      	b.n	80150b4 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 80150ac:	68bb      	ldr	r3, [r7, #8]
 80150ae:	681a      	ldr	r2, [r3, #0]
 80150b0:	69fb      	ldr	r3, [r7, #28]
 80150b2:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 80150b4:	69fb      	ldr	r3, [r7, #28]
 80150b6:	2200      	movs	r2, #0
 80150b8:	729a      	strb	r2, [r3, #10]
 80150ba:	2200      	movs	r2, #0
 80150bc:	72da      	strb	r2, [r3, #11]
 80150be:	e00f      	b.n	80150e0 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 80150c0:	68fb      	ldr	r3, [r7, #12]
 80150c2:	895b      	ldrh	r3, [r3, #10]
 80150c4:	2b13      	cmp	r3, #19
 80150c6:	d802      	bhi.n	80150ce <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80150c8:	f06f 0301 	mvn.w	r3, #1
 80150cc:	e020      	b.n	8015110 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 80150ce:	68fb      	ldr	r3, [r7, #12]
 80150d0:	685b      	ldr	r3, [r3, #4]
 80150d2:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 80150d4:	69fb      	ldr	r3, [r7, #28]
 80150d6:	691b      	ldr	r3, [r3, #16]
 80150d8:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 80150da:	f107 0314 	add.w	r3, r7, #20
 80150de:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 80150e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80150e2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80150e4:	2b00      	cmp	r3, #0
 80150e6:	d00c      	beq.n	8015102 <ip4_output_if_src+0x12e>
 80150e8:	68fb      	ldr	r3, [r7, #12]
 80150ea:	891a      	ldrh	r2, [r3, #8]
 80150ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80150ee:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80150f0:	429a      	cmp	r2, r3
 80150f2:	d906      	bls.n	8015102 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 80150f4:	687a      	ldr	r2, [r7, #4]
 80150f6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80150f8:	68f8      	ldr	r0, [r7, #12]
 80150fa:	f000 fd53 	bl	8015ba4 <ip4_frag>
 80150fe:	4603      	mov	r3, r0
 8015100:	e006      	b.n	8015110 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8015102:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015104:	695b      	ldr	r3, [r3, #20]
 8015106:	687a      	ldr	r2, [r7, #4]
 8015108:	68f9      	ldr	r1, [r7, #12]
 801510a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801510c:	4798      	blx	r3
 801510e:	4603      	mov	r3, r0
}
 8015110:	4618      	mov	r0, r3
 8015112:	3720      	adds	r7, #32
 8015114:	46bd      	mov	sp, r7
 8015116:	bd80      	pop	{r7, pc}
 8015118:	0801aca8 	.word	0x0801aca8
 801511c:	0801acdc 	.word	0x0801acdc
 8015120:	0801ace8 	.word	0x0801ace8
 8015124:	0801ad10 	.word	0x0801ad10
 8015128:	2000ee92 	.word	0x2000ee92
 801512c:	0801b134 	.word	0x0801b134

08015130 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8015130:	b480      	push	{r7}
 8015132:	b085      	sub	sp, #20
 8015134:	af00      	add	r7, sp, #0
 8015136:	6078      	str	r0, [r7, #4]
 8015138:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801513a:	687b      	ldr	r3, [r7, #4]
 801513c:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801513e:	687b      	ldr	r3, [r7, #4]
 8015140:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015144:	d002      	beq.n	801514c <ip4_addr_isbroadcast_u32+0x1c>
 8015146:	687b      	ldr	r3, [r7, #4]
 8015148:	2b00      	cmp	r3, #0
 801514a:	d101      	bne.n	8015150 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 801514c:	2301      	movs	r3, #1
 801514e:	e02a      	b.n	80151a6 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8015150:	683b      	ldr	r3, [r7, #0]
 8015152:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8015156:	f003 0302 	and.w	r3, r3, #2
 801515a:	2b00      	cmp	r3, #0
 801515c:	d101      	bne.n	8015162 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801515e:	2300      	movs	r3, #0
 8015160:	e021      	b.n	80151a6 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8015162:	683b      	ldr	r3, [r7, #0]
 8015164:	3304      	adds	r3, #4
 8015166:	681b      	ldr	r3, [r3, #0]
 8015168:	687a      	ldr	r2, [r7, #4]
 801516a:	429a      	cmp	r2, r3
 801516c:	d101      	bne.n	8015172 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801516e:	2300      	movs	r3, #0
 8015170:	e019      	b.n	80151a6 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8015172:	68fa      	ldr	r2, [r7, #12]
 8015174:	683b      	ldr	r3, [r7, #0]
 8015176:	3304      	adds	r3, #4
 8015178:	681b      	ldr	r3, [r3, #0]
 801517a:	405a      	eors	r2, r3
 801517c:	683b      	ldr	r3, [r7, #0]
 801517e:	3308      	adds	r3, #8
 8015180:	681b      	ldr	r3, [r3, #0]
 8015182:	4013      	ands	r3, r2
 8015184:	2b00      	cmp	r3, #0
 8015186:	d10d      	bne.n	80151a4 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8015188:	683b      	ldr	r3, [r7, #0]
 801518a:	3308      	adds	r3, #8
 801518c:	681b      	ldr	r3, [r3, #0]
 801518e:	43da      	mvns	r2, r3
 8015190:	687b      	ldr	r3, [r7, #4]
 8015192:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8015194:	683b      	ldr	r3, [r7, #0]
 8015196:	3308      	adds	r3, #8
 8015198:	681b      	ldr	r3, [r3, #0]
 801519a:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801519c:	429a      	cmp	r2, r3
 801519e:	d101      	bne.n	80151a4 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 80151a0:	2301      	movs	r3, #1
 80151a2:	e000      	b.n	80151a6 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 80151a4:	2300      	movs	r3, #0
  }
}
 80151a6:	4618      	mov	r0, r3
 80151a8:	3714      	adds	r7, #20
 80151aa:	46bd      	mov	sp, r7
 80151ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151b0:	4770      	bx	lr
	...

080151b4 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 80151b4:	b580      	push	{r7, lr}
 80151b6:	b084      	sub	sp, #16
 80151b8:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 80151ba:	2300      	movs	r3, #0
 80151bc:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 80151be:	4b12      	ldr	r3, [pc, #72]	@ (8015208 <ip_reass_tmr+0x54>)
 80151c0:	681b      	ldr	r3, [r3, #0]
 80151c2:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 80151c4:	e018      	b.n	80151f8 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 80151c6:	68fb      	ldr	r3, [r7, #12]
 80151c8:	7fdb      	ldrb	r3, [r3, #31]
 80151ca:	2b00      	cmp	r3, #0
 80151cc:	d00b      	beq.n	80151e6 <ip_reass_tmr+0x32>
      r->timer--;
 80151ce:	68fb      	ldr	r3, [r7, #12]
 80151d0:	7fdb      	ldrb	r3, [r3, #31]
 80151d2:	3b01      	subs	r3, #1
 80151d4:	b2da      	uxtb	r2, r3
 80151d6:	68fb      	ldr	r3, [r7, #12]
 80151d8:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 80151da:	68fb      	ldr	r3, [r7, #12]
 80151dc:	60bb      	str	r3, [r7, #8]
      r = r->next;
 80151de:	68fb      	ldr	r3, [r7, #12]
 80151e0:	681b      	ldr	r3, [r3, #0]
 80151e2:	60fb      	str	r3, [r7, #12]
 80151e4:	e008      	b.n	80151f8 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 80151e6:	68fb      	ldr	r3, [r7, #12]
 80151e8:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 80151ea:	68fb      	ldr	r3, [r7, #12]
 80151ec:	681b      	ldr	r3, [r3, #0]
 80151ee:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 80151f0:	68b9      	ldr	r1, [r7, #8]
 80151f2:	6878      	ldr	r0, [r7, #4]
 80151f4:	f000 f80a 	bl	801520c <ip_reass_free_complete_datagram>
  while (r != NULL) {
 80151f8:	68fb      	ldr	r3, [r7, #12]
 80151fa:	2b00      	cmp	r3, #0
 80151fc:	d1e3      	bne.n	80151c6 <ip_reass_tmr+0x12>
    }
  }
}
 80151fe:	bf00      	nop
 8015200:	bf00      	nop
 8015202:	3710      	adds	r7, #16
 8015204:	46bd      	mov	sp, r7
 8015206:	bd80      	pop	{r7, pc}
 8015208:	2000ee94 	.word	0x2000ee94

0801520c <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801520c:	b580      	push	{r7, lr}
 801520e:	b088      	sub	sp, #32
 8015210:	af00      	add	r7, sp, #0
 8015212:	6078      	str	r0, [r7, #4]
 8015214:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8015216:	2300      	movs	r3, #0
 8015218:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801521a:	683a      	ldr	r2, [r7, #0]
 801521c:	687b      	ldr	r3, [r7, #4]
 801521e:	429a      	cmp	r2, r3
 8015220:	d105      	bne.n	801522e <ip_reass_free_complete_datagram+0x22>
 8015222:	4b45      	ldr	r3, [pc, #276]	@ (8015338 <ip_reass_free_complete_datagram+0x12c>)
 8015224:	22ab      	movs	r2, #171	@ 0xab
 8015226:	4945      	ldr	r1, [pc, #276]	@ (801533c <ip_reass_free_complete_datagram+0x130>)
 8015228:	4845      	ldr	r0, [pc, #276]	@ (8015340 <ip_reass_free_complete_datagram+0x134>)
 801522a:	f001 f9b9 	bl	80165a0 <iprintf>
  if (prev != NULL) {
 801522e:	683b      	ldr	r3, [r7, #0]
 8015230:	2b00      	cmp	r3, #0
 8015232:	d00a      	beq.n	801524a <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8015234:	683b      	ldr	r3, [r7, #0]
 8015236:	681b      	ldr	r3, [r3, #0]
 8015238:	687a      	ldr	r2, [r7, #4]
 801523a:	429a      	cmp	r2, r3
 801523c:	d005      	beq.n	801524a <ip_reass_free_complete_datagram+0x3e>
 801523e:	4b3e      	ldr	r3, [pc, #248]	@ (8015338 <ip_reass_free_complete_datagram+0x12c>)
 8015240:	22ad      	movs	r2, #173	@ 0xad
 8015242:	4940      	ldr	r1, [pc, #256]	@ (8015344 <ip_reass_free_complete_datagram+0x138>)
 8015244:	483e      	ldr	r0, [pc, #248]	@ (8015340 <ip_reass_free_complete_datagram+0x134>)
 8015246:	f001 f9ab 	bl	80165a0 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801524a:	687b      	ldr	r3, [r7, #4]
 801524c:	685b      	ldr	r3, [r3, #4]
 801524e:	685b      	ldr	r3, [r3, #4]
 8015250:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8015252:	697b      	ldr	r3, [r7, #20]
 8015254:	889b      	ldrh	r3, [r3, #4]
 8015256:	b29b      	uxth	r3, r3
 8015258:	2b00      	cmp	r3, #0
 801525a:	d12a      	bne.n	80152b2 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801525c:	687b      	ldr	r3, [r7, #4]
 801525e:	685b      	ldr	r3, [r3, #4]
 8015260:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8015262:	697b      	ldr	r3, [r7, #20]
 8015264:	681a      	ldr	r2, [r3, #0]
 8015266:	687b      	ldr	r3, [r7, #4]
 8015268:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801526a:	69bb      	ldr	r3, [r7, #24]
 801526c:	6858      	ldr	r0, [r3, #4]
 801526e:	687b      	ldr	r3, [r7, #4]
 8015270:	3308      	adds	r3, #8
 8015272:	2214      	movs	r2, #20
 8015274:	4619      	mov	r1, r3
 8015276:	f001 fafe 	bl	8016876 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801527a:	2101      	movs	r1, #1
 801527c:	69b8      	ldr	r0, [r7, #24]
 801527e:	f7ff fc47 	bl	8014b10 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8015282:	69b8      	ldr	r0, [r7, #24]
 8015284:	f7f7 fcae 	bl	800cbe4 <pbuf_clen>
 8015288:	4603      	mov	r3, r0
 801528a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801528c:	8bfa      	ldrh	r2, [r7, #30]
 801528e:	8a7b      	ldrh	r3, [r7, #18]
 8015290:	4413      	add	r3, r2
 8015292:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8015296:	db05      	blt.n	80152a4 <ip_reass_free_complete_datagram+0x98>
 8015298:	4b27      	ldr	r3, [pc, #156]	@ (8015338 <ip_reass_free_complete_datagram+0x12c>)
 801529a:	22bc      	movs	r2, #188	@ 0xbc
 801529c:	492a      	ldr	r1, [pc, #168]	@ (8015348 <ip_reass_free_complete_datagram+0x13c>)
 801529e:	4828      	ldr	r0, [pc, #160]	@ (8015340 <ip_reass_free_complete_datagram+0x134>)
 80152a0:	f001 f97e 	bl	80165a0 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80152a4:	8bfa      	ldrh	r2, [r7, #30]
 80152a6:	8a7b      	ldrh	r3, [r7, #18]
 80152a8:	4413      	add	r3, r2
 80152aa:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 80152ac:	69b8      	ldr	r0, [r7, #24]
 80152ae:	f7f7 fc0b 	bl	800cac8 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 80152b2:	687b      	ldr	r3, [r7, #4]
 80152b4:	685b      	ldr	r3, [r3, #4]
 80152b6:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 80152b8:	e01f      	b.n	80152fa <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 80152ba:	69bb      	ldr	r3, [r7, #24]
 80152bc:	685b      	ldr	r3, [r3, #4]
 80152be:	617b      	str	r3, [r7, #20]
    pcur = p;
 80152c0:	69bb      	ldr	r3, [r7, #24]
 80152c2:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 80152c4:	697b      	ldr	r3, [r7, #20]
 80152c6:	681b      	ldr	r3, [r3, #0]
 80152c8:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 80152ca:	68f8      	ldr	r0, [r7, #12]
 80152cc:	f7f7 fc8a 	bl	800cbe4 <pbuf_clen>
 80152d0:	4603      	mov	r3, r0
 80152d2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80152d4:	8bfa      	ldrh	r2, [r7, #30]
 80152d6:	8a7b      	ldrh	r3, [r7, #18]
 80152d8:	4413      	add	r3, r2
 80152da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80152de:	db05      	blt.n	80152ec <ip_reass_free_complete_datagram+0xe0>
 80152e0:	4b15      	ldr	r3, [pc, #84]	@ (8015338 <ip_reass_free_complete_datagram+0x12c>)
 80152e2:	22cc      	movs	r2, #204	@ 0xcc
 80152e4:	4918      	ldr	r1, [pc, #96]	@ (8015348 <ip_reass_free_complete_datagram+0x13c>)
 80152e6:	4816      	ldr	r0, [pc, #88]	@ (8015340 <ip_reass_free_complete_datagram+0x134>)
 80152e8:	f001 f95a 	bl	80165a0 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80152ec:	8bfa      	ldrh	r2, [r7, #30]
 80152ee:	8a7b      	ldrh	r3, [r7, #18]
 80152f0:	4413      	add	r3, r2
 80152f2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 80152f4:	68f8      	ldr	r0, [r7, #12]
 80152f6:	f7f7 fbe7 	bl	800cac8 <pbuf_free>
  while (p != NULL) {
 80152fa:	69bb      	ldr	r3, [r7, #24]
 80152fc:	2b00      	cmp	r3, #0
 80152fe:	d1dc      	bne.n	80152ba <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8015300:	6839      	ldr	r1, [r7, #0]
 8015302:	6878      	ldr	r0, [r7, #4]
 8015304:	f000 f8c2 	bl	801548c <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8015308:	4b10      	ldr	r3, [pc, #64]	@ (801534c <ip_reass_free_complete_datagram+0x140>)
 801530a:	881b      	ldrh	r3, [r3, #0]
 801530c:	8bfa      	ldrh	r2, [r7, #30]
 801530e:	429a      	cmp	r2, r3
 8015310:	d905      	bls.n	801531e <ip_reass_free_complete_datagram+0x112>
 8015312:	4b09      	ldr	r3, [pc, #36]	@ (8015338 <ip_reass_free_complete_datagram+0x12c>)
 8015314:	22d2      	movs	r2, #210	@ 0xd2
 8015316:	490e      	ldr	r1, [pc, #56]	@ (8015350 <ip_reass_free_complete_datagram+0x144>)
 8015318:	4809      	ldr	r0, [pc, #36]	@ (8015340 <ip_reass_free_complete_datagram+0x134>)
 801531a:	f001 f941 	bl	80165a0 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801531e:	4b0b      	ldr	r3, [pc, #44]	@ (801534c <ip_reass_free_complete_datagram+0x140>)
 8015320:	881a      	ldrh	r2, [r3, #0]
 8015322:	8bfb      	ldrh	r3, [r7, #30]
 8015324:	1ad3      	subs	r3, r2, r3
 8015326:	b29a      	uxth	r2, r3
 8015328:	4b08      	ldr	r3, [pc, #32]	@ (801534c <ip_reass_free_complete_datagram+0x140>)
 801532a:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801532c:	8bfb      	ldrh	r3, [r7, #30]
}
 801532e:	4618      	mov	r0, r3
 8015330:	3720      	adds	r7, #32
 8015332:	46bd      	mov	sp, r7
 8015334:	bd80      	pop	{r7, pc}
 8015336:	bf00      	nop
 8015338:	0801ad40 	.word	0x0801ad40
 801533c:	0801ad7c 	.word	0x0801ad7c
 8015340:	0801ad88 	.word	0x0801ad88
 8015344:	0801adb0 	.word	0x0801adb0
 8015348:	0801adc4 	.word	0x0801adc4
 801534c:	2000ee98 	.word	0x2000ee98
 8015350:	0801ade4 	.word	0x0801ade4

08015354 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8015354:	b580      	push	{r7, lr}
 8015356:	b08a      	sub	sp, #40	@ 0x28
 8015358:	af00      	add	r7, sp, #0
 801535a:	6078      	str	r0, [r7, #4]
 801535c:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801535e:	2300      	movs	r3, #0
 8015360:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8015362:	2300      	movs	r3, #0
 8015364:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8015366:	2300      	movs	r3, #0
 8015368:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801536a:	2300      	movs	r3, #0
 801536c:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801536e:	2300      	movs	r3, #0
 8015370:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8015372:	4b28      	ldr	r3, [pc, #160]	@ (8015414 <ip_reass_remove_oldest_datagram+0xc0>)
 8015374:	681b      	ldr	r3, [r3, #0]
 8015376:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8015378:	e030      	b.n	80153dc <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801537a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801537c:	695a      	ldr	r2, [r3, #20]
 801537e:	687b      	ldr	r3, [r7, #4]
 8015380:	68db      	ldr	r3, [r3, #12]
 8015382:	429a      	cmp	r2, r3
 8015384:	d10c      	bne.n	80153a0 <ip_reass_remove_oldest_datagram+0x4c>
 8015386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015388:	699a      	ldr	r2, [r3, #24]
 801538a:	687b      	ldr	r3, [r7, #4]
 801538c:	691b      	ldr	r3, [r3, #16]
 801538e:	429a      	cmp	r2, r3
 8015390:	d106      	bne.n	80153a0 <ip_reass_remove_oldest_datagram+0x4c>
 8015392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015394:	899a      	ldrh	r2, [r3, #12]
 8015396:	687b      	ldr	r3, [r7, #4]
 8015398:	889b      	ldrh	r3, [r3, #4]
 801539a:	b29b      	uxth	r3, r3
 801539c:	429a      	cmp	r2, r3
 801539e:	d014      	beq.n	80153ca <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 80153a0:	693b      	ldr	r3, [r7, #16]
 80153a2:	3301      	adds	r3, #1
 80153a4:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 80153a6:	6a3b      	ldr	r3, [r7, #32]
 80153a8:	2b00      	cmp	r3, #0
 80153aa:	d104      	bne.n	80153b6 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 80153ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80153ae:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80153b0:	69fb      	ldr	r3, [r7, #28]
 80153b2:	61bb      	str	r3, [r7, #24]
 80153b4:	e009      	b.n	80153ca <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 80153b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80153b8:	7fda      	ldrb	r2, [r3, #31]
 80153ba:	6a3b      	ldr	r3, [r7, #32]
 80153bc:	7fdb      	ldrb	r3, [r3, #31]
 80153be:	429a      	cmp	r2, r3
 80153c0:	d803      	bhi.n	80153ca <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 80153c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80153c4:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80153c6:	69fb      	ldr	r3, [r7, #28]
 80153c8:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 80153ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80153cc:	681b      	ldr	r3, [r3, #0]
 80153ce:	2b00      	cmp	r3, #0
 80153d0:	d001      	beq.n	80153d6 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 80153d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80153d4:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 80153d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80153d8:	681b      	ldr	r3, [r3, #0]
 80153da:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 80153dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80153de:	2b00      	cmp	r3, #0
 80153e0:	d1cb      	bne.n	801537a <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 80153e2:	6a3b      	ldr	r3, [r7, #32]
 80153e4:	2b00      	cmp	r3, #0
 80153e6:	d008      	beq.n	80153fa <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 80153e8:	69b9      	ldr	r1, [r7, #24]
 80153ea:	6a38      	ldr	r0, [r7, #32]
 80153ec:	f7ff ff0e 	bl	801520c <ip_reass_free_complete_datagram>
 80153f0:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 80153f2:	697a      	ldr	r2, [r7, #20]
 80153f4:	68fb      	ldr	r3, [r7, #12]
 80153f6:	4413      	add	r3, r2
 80153f8:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80153fa:	697a      	ldr	r2, [r7, #20]
 80153fc:	683b      	ldr	r3, [r7, #0]
 80153fe:	429a      	cmp	r2, r3
 8015400:	da02      	bge.n	8015408 <ip_reass_remove_oldest_datagram+0xb4>
 8015402:	693b      	ldr	r3, [r7, #16]
 8015404:	2b01      	cmp	r3, #1
 8015406:	dcac      	bgt.n	8015362 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8015408:	697b      	ldr	r3, [r7, #20]
}
 801540a:	4618      	mov	r0, r3
 801540c:	3728      	adds	r7, #40	@ 0x28
 801540e:	46bd      	mov	sp, r7
 8015410:	bd80      	pop	{r7, pc}
 8015412:	bf00      	nop
 8015414:	2000ee94 	.word	0x2000ee94

08015418 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8015418:	b580      	push	{r7, lr}
 801541a:	b084      	sub	sp, #16
 801541c:	af00      	add	r7, sp, #0
 801541e:	6078      	str	r0, [r7, #4]
 8015420:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8015422:	2004      	movs	r0, #4
 8015424:	f7f6 fc36 	bl	800bc94 <memp_malloc>
 8015428:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801542a:	68fb      	ldr	r3, [r7, #12]
 801542c:	2b00      	cmp	r3, #0
 801542e:	d110      	bne.n	8015452 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8015430:	6839      	ldr	r1, [r7, #0]
 8015432:	6878      	ldr	r0, [r7, #4]
 8015434:	f7ff ff8e 	bl	8015354 <ip_reass_remove_oldest_datagram>
 8015438:	4602      	mov	r2, r0
 801543a:	683b      	ldr	r3, [r7, #0]
 801543c:	4293      	cmp	r3, r2
 801543e:	dc03      	bgt.n	8015448 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8015440:	2004      	movs	r0, #4
 8015442:	f7f6 fc27 	bl	800bc94 <memp_malloc>
 8015446:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8015448:	68fb      	ldr	r3, [r7, #12]
 801544a:	2b00      	cmp	r3, #0
 801544c:	d101      	bne.n	8015452 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801544e:	2300      	movs	r3, #0
 8015450:	e016      	b.n	8015480 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8015452:	2220      	movs	r2, #32
 8015454:	2100      	movs	r1, #0
 8015456:	68f8      	ldr	r0, [r7, #12]
 8015458:	f001 f941 	bl	80166de <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801545c:	68fb      	ldr	r3, [r7, #12]
 801545e:	220f      	movs	r2, #15
 8015460:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8015462:	4b09      	ldr	r3, [pc, #36]	@ (8015488 <ip_reass_enqueue_new_datagram+0x70>)
 8015464:	681a      	ldr	r2, [r3, #0]
 8015466:	68fb      	ldr	r3, [r7, #12]
 8015468:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801546a:	4a07      	ldr	r2, [pc, #28]	@ (8015488 <ip_reass_enqueue_new_datagram+0x70>)
 801546c:	68fb      	ldr	r3, [r7, #12]
 801546e:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8015470:	68fb      	ldr	r3, [r7, #12]
 8015472:	3308      	adds	r3, #8
 8015474:	2214      	movs	r2, #20
 8015476:	6879      	ldr	r1, [r7, #4]
 8015478:	4618      	mov	r0, r3
 801547a:	f001 f9fc 	bl	8016876 <memcpy>
  return ipr;
 801547e:	68fb      	ldr	r3, [r7, #12]
}
 8015480:	4618      	mov	r0, r3
 8015482:	3710      	adds	r7, #16
 8015484:	46bd      	mov	sp, r7
 8015486:	bd80      	pop	{r7, pc}
 8015488:	2000ee94 	.word	0x2000ee94

0801548c <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801548c:	b580      	push	{r7, lr}
 801548e:	b082      	sub	sp, #8
 8015490:	af00      	add	r7, sp, #0
 8015492:	6078      	str	r0, [r7, #4]
 8015494:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8015496:	4b10      	ldr	r3, [pc, #64]	@ (80154d8 <ip_reass_dequeue_datagram+0x4c>)
 8015498:	681b      	ldr	r3, [r3, #0]
 801549a:	687a      	ldr	r2, [r7, #4]
 801549c:	429a      	cmp	r2, r3
 801549e:	d104      	bne.n	80154aa <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 80154a0:	687b      	ldr	r3, [r7, #4]
 80154a2:	681b      	ldr	r3, [r3, #0]
 80154a4:	4a0c      	ldr	r2, [pc, #48]	@ (80154d8 <ip_reass_dequeue_datagram+0x4c>)
 80154a6:	6013      	str	r3, [r2, #0]
 80154a8:	e00d      	b.n	80154c6 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80154aa:	683b      	ldr	r3, [r7, #0]
 80154ac:	2b00      	cmp	r3, #0
 80154ae:	d106      	bne.n	80154be <ip_reass_dequeue_datagram+0x32>
 80154b0:	4b0a      	ldr	r3, [pc, #40]	@ (80154dc <ip_reass_dequeue_datagram+0x50>)
 80154b2:	f240 1245 	movw	r2, #325	@ 0x145
 80154b6:	490a      	ldr	r1, [pc, #40]	@ (80154e0 <ip_reass_dequeue_datagram+0x54>)
 80154b8:	480a      	ldr	r0, [pc, #40]	@ (80154e4 <ip_reass_dequeue_datagram+0x58>)
 80154ba:	f001 f871 	bl	80165a0 <iprintf>
    prev->next = ipr->next;
 80154be:	687b      	ldr	r3, [r7, #4]
 80154c0:	681a      	ldr	r2, [r3, #0]
 80154c2:	683b      	ldr	r3, [r7, #0]
 80154c4:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 80154c6:	6879      	ldr	r1, [r7, #4]
 80154c8:	2004      	movs	r0, #4
 80154ca:	f7f6 fc59 	bl	800bd80 <memp_free>
}
 80154ce:	bf00      	nop
 80154d0:	3708      	adds	r7, #8
 80154d2:	46bd      	mov	sp, r7
 80154d4:	bd80      	pop	{r7, pc}
 80154d6:	bf00      	nop
 80154d8:	2000ee94 	.word	0x2000ee94
 80154dc:	0801ad40 	.word	0x0801ad40
 80154e0:	0801ae08 	.word	0x0801ae08
 80154e4:	0801ad88 	.word	0x0801ad88

080154e8 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 80154e8:	b580      	push	{r7, lr}
 80154ea:	b08c      	sub	sp, #48	@ 0x30
 80154ec:	af00      	add	r7, sp, #0
 80154ee:	60f8      	str	r0, [r7, #12]
 80154f0:	60b9      	str	r1, [r7, #8]
 80154f2:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 80154f4:	2300      	movs	r3, #0
 80154f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 80154f8:	2301      	movs	r3, #1
 80154fa:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 80154fc:	68bb      	ldr	r3, [r7, #8]
 80154fe:	685b      	ldr	r3, [r3, #4]
 8015500:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8015502:	69fb      	ldr	r3, [r7, #28]
 8015504:	885b      	ldrh	r3, [r3, #2]
 8015506:	b29b      	uxth	r3, r3
 8015508:	4618      	mov	r0, r3
 801550a:	f7f5 feeb 	bl	800b2e4 <lwip_htons>
 801550e:	4603      	mov	r3, r0
 8015510:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8015512:	69fb      	ldr	r3, [r7, #28]
 8015514:	781b      	ldrb	r3, [r3, #0]
 8015516:	f003 030f 	and.w	r3, r3, #15
 801551a:	b2db      	uxtb	r3, r3
 801551c:	009b      	lsls	r3, r3, #2
 801551e:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8015520:	7e7b      	ldrb	r3, [r7, #25]
 8015522:	b29b      	uxth	r3, r3
 8015524:	8b7a      	ldrh	r2, [r7, #26]
 8015526:	429a      	cmp	r2, r3
 8015528:	d202      	bcs.n	8015530 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801552a:	f04f 33ff 	mov.w	r3, #4294967295
 801552e:	e135      	b.n	801579c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8015530:	7e7b      	ldrb	r3, [r7, #25]
 8015532:	b29b      	uxth	r3, r3
 8015534:	8b7a      	ldrh	r2, [r7, #26]
 8015536:	1ad3      	subs	r3, r2, r3
 8015538:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801553a:	69fb      	ldr	r3, [r7, #28]
 801553c:	88db      	ldrh	r3, [r3, #6]
 801553e:	b29b      	uxth	r3, r3
 8015540:	4618      	mov	r0, r3
 8015542:	f7f5 fecf 	bl	800b2e4 <lwip_htons>
 8015546:	4603      	mov	r3, r0
 8015548:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801554c:	b29b      	uxth	r3, r3
 801554e:	00db      	lsls	r3, r3, #3
 8015550:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8015552:	68bb      	ldr	r3, [r7, #8]
 8015554:	685b      	ldr	r3, [r3, #4]
 8015556:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 8015558:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801555a:	2200      	movs	r2, #0
 801555c:	701a      	strb	r2, [r3, #0]
 801555e:	2200      	movs	r2, #0
 8015560:	705a      	strb	r2, [r3, #1]
 8015562:	2200      	movs	r2, #0
 8015564:	709a      	strb	r2, [r3, #2]
 8015566:	2200      	movs	r2, #0
 8015568:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801556a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801556c:	8afa      	ldrh	r2, [r7, #22]
 801556e:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8015570:	8afa      	ldrh	r2, [r7, #22]
 8015572:	8b7b      	ldrh	r3, [r7, #26]
 8015574:	4413      	add	r3, r2
 8015576:	b29a      	uxth	r2, r3
 8015578:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801557a:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 801557c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801557e:	88db      	ldrh	r3, [r3, #6]
 8015580:	b29b      	uxth	r3, r3
 8015582:	8afa      	ldrh	r2, [r7, #22]
 8015584:	429a      	cmp	r2, r3
 8015586:	d902      	bls.n	801558e <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015588:	f04f 33ff 	mov.w	r3, #4294967295
 801558c:	e106      	b.n	801579c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801558e:	68fb      	ldr	r3, [r7, #12]
 8015590:	685b      	ldr	r3, [r3, #4]
 8015592:	627b      	str	r3, [r7, #36]	@ 0x24
 8015594:	e068      	b.n	8015668 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8015596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015598:	685b      	ldr	r3, [r3, #4]
 801559a:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 801559c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801559e:	889b      	ldrh	r3, [r3, #4]
 80155a0:	b29a      	uxth	r2, r3
 80155a2:	693b      	ldr	r3, [r7, #16]
 80155a4:	889b      	ldrh	r3, [r3, #4]
 80155a6:	b29b      	uxth	r3, r3
 80155a8:	429a      	cmp	r2, r3
 80155aa:	d235      	bcs.n	8015618 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 80155ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80155ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80155b0:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 80155b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80155b4:	2b00      	cmp	r3, #0
 80155b6:	d020      	beq.n	80155fa <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80155b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80155ba:	889b      	ldrh	r3, [r3, #4]
 80155bc:	b29a      	uxth	r2, r3
 80155be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80155c0:	88db      	ldrh	r3, [r3, #6]
 80155c2:	b29b      	uxth	r3, r3
 80155c4:	429a      	cmp	r2, r3
 80155c6:	d307      	bcc.n	80155d8 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 80155c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80155ca:	88db      	ldrh	r3, [r3, #6]
 80155cc:	b29a      	uxth	r2, r3
 80155ce:	693b      	ldr	r3, [r7, #16]
 80155d0:	889b      	ldrh	r3, [r3, #4]
 80155d2:	b29b      	uxth	r3, r3
 80155d4:	429a      	cmp	r2, r3
 80155d6:	d902      	bls.n	80155de <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80155d8:	f04f 33ff 	mov.w	r3, #4294967295
 80155dc:	e0de      	b.n	801579c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 80155de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80155e0:	68ba      	ldr	r2, [r7, #8]
 80155e2:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 80155e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80155e6:	88db      	ldrh	r3, [r3, #6]
 80155e8:	b29a      	uxth	r2, r3
 80155ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80155ec:	889b      	ldrh	r3, [r3, #4]
 80155ee:	b29b      	uxth	r3, r3
 80155f0:	429a      	cmp	r2, r3
 80155f2:	d03d      	beq.n	8015670 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80155f4:	2300      	movs	r3, #0
 80155f6:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 80155f8:	e03a      	b.n	8015670 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 80155fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80155fc:	88db      	ldrh	r3, [r3, #6]
 80155fe:	b29a      	uxth	r2, r3
 8015600:	693b      	ldr	r3, [r7, #16]
 8015602:	889b      	ldrh	r3, [r3, #4]
 8015604:	b29b      	uxth	r3, r3
 8015606:	429a      	cmp	r2, r3
 8015608:	d902      	bls.n	8015610 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801560a:	f04f 33ff 	mov.w	r3, #4294967295
 801560e:	e0c5      	b.n	801579c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8015610:	68fb      	ldr	r3, [r7, #12]
 8015612:	68ba      	ldr	r2, [r7, #8]
 8015614:	605a      	str	r2, [r3, #4]
      break;
 8015616:	e02b      	b.n	8015670 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8015618:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801561a:	889b      	ldrh	r3, [r3, #4]
 801561c:	b29a      	uxth	r2, r3
 801561e:	693b      	ldr	r3, [r7, #16]
 8015620:	889b      	ldrh	r3, [r3, #4]
 8015622:	b29b      	uxth	r3, r3
 8015624:	429a      	cmp	r2, r3
 8015626:	d102      	bne.n	801562e <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015628:	f04f 33ff 	mov.w	r3, #4294967295
 801562c:	e0b6      	b.n	801579c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801562e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015630:	889b      	ldrh	r3, [r3, #4]
 8015632:	b29a      	uxth	r2, r3
 8015634:	693b      	ldr	r3, [r7, #16]
 8015636:	88db      	ldrh	r3, [r3, #6]
 8015638:	b29b      	uxth	r3, r3
 801563a:	429a      	cmp	r2, r3
 801563c:	d202      	bcs.n	8015644 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801563e:	f04f 33ff 	mov.w	r3, #4294967295
 8015642:	e0ab      	b.n	801579c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8015644:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015646:	2b00      	cmp	r3, #0
 8015648:	d009      	beq.n	801565e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801564a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801564c:	88db      	ldrh	r3, [r3, #6]
 801564e:	b29a      	uxth	r2, r3
 8015650:	693b      	ldr	r3, [r7, #16]
 8015652:	889b      	ldrh	r3, [r3, #4]
 8015654:	b29b      	uxth	r3, r3
 8015656:	429a      	cmp	r2, r3
 8015658:	d001      	beq.n	801565e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801565a:	2300      	movs	r3, #0
 801565c:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801565e:	693b      	ldr	r3, [r7, #16]
 8015660:	681b      	ldr	r3, [r3, #0]
 8015662:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 8015664:	693b      	ldr	r3, [r7, #16]
 8015666:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 8015668:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801566a:	2b00      	cmp	r3, #0
 801566c:	d193      	bne.n	8015596 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801566e:	e000      	b.n	8015672 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8015670:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8015672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015674:	2b00      	cmp	r3, #0
 8015676:	d12d      	bne.n	80156d4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8015678:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801567a:	2b00      	cmp	r3, #0
 801567c:	d01c      	beq.n	80156b8 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801567e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015680:	88db      	ldrh	r3, [r3, #6]
 8015682:	b29a      	uxth	r2, r3
 8015684:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015686:	889b      	ldrh	r3, [r3, #4]
 8015688:	b29b      	uxth	r3, r3
 801568a:	429a      	cmp	r2, r3
 801568c:	d906      	bls.n	801569c <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801568e:	4b45      	ldr	r3, [pc, #276]	@ (80157a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015690:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 8015694:	4944      	ldr	r1, [pc, #272]	@ (80157a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8015696:	4845      	ldr	r0, [pc, #276]	@ (80157ac <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015698:	f000 ff82 	bl	80165a0 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 801569c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801569e:	68ba      	ldr	r2, [r7, #8]
 80156a0:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 80156a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80156a4:	88db      	ldrh	r3, [r3, #6]
 80156a6:	b29a      	uxth	r2, r3
 80156a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80156aa:	889b      	ldrh	r3, [r3, #4]
 80156ac:	b29b      	uxth	r3, r3
 80156ae:	429a      	cmp	r2, r3
 80156b0:	d010      	beq.n	80156d4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 80156b2:	2300      	movs	r3, #0
 80156b4:	623b      	str	r3, [r7, #32]
 80156b6:	e00d      	b.n	80156d4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 80156b8:	68fb      	ldr	r3, [r7, #12]
 80156ba:	685b      	ldr	r3, [r3, #4]
 80156bc:	2b00      	cmp	r3, #0
 80156be:	d006      	beq.n	80156ce <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 80156c0:	4b38      	ldr	r3, [pc, #224]	@ (80157a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80156c2:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 80156c6:	493a      	ldr	r1, [pc, #232]	@ (80157b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 80156c8:	4838      	ldr	r0, [pc, #224]	@ (80157ac <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80156ca:	f000 ff69 	bl	80165a0 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 80156ce:	68fb      	ldr	r3, [r7, #12]
 80156d0:	68ba      	ldr	r2, [r7, #8]
 80156d2:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80156d4:	687b      	ldr	r3, [r7, #4]
 80156d6:	2b00      	cmp	r3, #0
 80156d8:	d105      	bne.n	80156e6 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 80156da:	68fb      	ldr	r3, [r7, #12]
 80156dc:	7f9b      	ldrb	r3, [r3, #30]
 80156de:	f003 0301 	and.w	r3, r3, #1
 80156e2:	2b00      	cmp	r3, #0
 80156e4:	d059      	beq.n	801579a <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 80156e6:	6a3b      	ldr	r3, [r7, #32]
 80156e8:	2b00      	cmp	r3, #0
 80156ea:	d04f      	beq.n	801578c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 80156ec:	68fb      	ldr	r3, [r7, #12]
 80156ee:	685b      	ldr	r3, [r3, #4]
 80156f0:	2b00      	cmp	r3, #0
 80156f2:	d006      	beq.n	8015702 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 80156f4:	68fb      	ldr	r3, [r7, #12]
 80156f6:	685b      	ldr	r3, [r3, #4]
 80156f8:	685b      	ldr	r3, [r3, #4]
 80156fa:	889b      	ldrh	r3, [r3, #4]
 80156fc:	b29b      	uxth	r3, r3
 80156fe:	2b00      	cmp	r3, #0
 8015700:	d002      	beq.n	8015708 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8015702:	2300      	movs	r3, #0
 8015704:	623b      	str	r3, [r7, #32]
 8015706:	e041      	b.n	801578c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8015708:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801570a:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 801570c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801570e:	681b      	ldr	r3, [r3, #0]
 8015710:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 8015712:	e012      	b.n	801573a <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8015714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015716:	685b      	ldr	r3, [r3, #4]
 8015718:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 801571a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801571c:	88db      	ldrh	r3, [r3, #6]
 801571e:	b29a      	uxth	r2, r3
 8015720:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015722:	889b      	ldrh	r3, [r3, #4]
 8015724:	b29b      	uxth	r3, r3
 8015726:	429a      	cmp	r2, r3
 8015728:	d002      	beq.n	8015730 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801572a:	2300      	movs	r3, #0
 801572c:	623b      	str	r3, [r7, #32]
            break;
 801572e:	e007      	b.n	8015740 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8015730:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015732:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 8015734:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015736:	681b      	ldr	r3, [r3, #0]
 8015738:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 801573a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801573c:	2b00      	cmp	r3, #0
 801573e:	d1e9      	bne.n	8015714 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8015740:	6a3b      	ldr	r3, [r7, #32]
 8015742:	2b00      	cmp	r3, #0
 8015744:	d022      	beq.n	801578c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8015746:	68fb      	ldr	r3, [r7, #12]
 8015748:	685b      	ldr	r3, [r3, #4]
 801574a:	2b00      	cmp	r3, #0
 801574c:	d106      	bne.n	801575c <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801574e:	4b15      	ldr	r3, [pc, #84]	@ (80157a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015750:	f240 12df 	movw	r2, #479	@ 0x1df
 8015754:	4917      	ldr	r1, [pc, #92]	@ (80157b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8015756:	4815      	ldr	r0, [pc, #84]	@ (80157ac <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015758:	f000 ff22 	bl	80165a0 <iprintf>
          LWIP_ASSERT("sanity check",
 801575c:	68fb      	ldr	r3, [r7, #12]
 801575e:	685b      	ldr	r3, [r3, #4]
 8015760:	685b      	ldr	r3, [r3, #4]
 8015762:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8015764:	429a      	cmp	r2, r3
 8015766:	d106      	bne.n	8015776 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8015768:	4b0e      	ldr	r3, [pc, #56]	@ (80157a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801576a:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 801576e:	4911      	ldr	r1, [pc, #68]	@ (80157b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8015770:	480e      	ldr	r0, [pc, #56]	@ (80157ac <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015772:	f000 ff15 	bl	80165a0 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8015776:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015778:	681b      	ldr	r3, [r3, #0]
 801577a:	2b00      	cmp	r3, #0
 801577c:	d006      	beq.n	801578c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801577e:	4b09      	ldr	r3, [pc, #36]	@ (80157a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015780:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 8015784:	490c      	ldr	r1, [pc, #48]	@ (80157b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8015786:	4809      	ldr	r0, [pc, #36]	@ (80157ac <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015788:	f000 ff0a 	bl	80165a0 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 801578c:	6a3b      	ldr	r3, [r7, #32]
 801578e:	2b00      	cmp	r3, #0
 8015790:	bf14      	ite	ne
 8015792:	2301      	movne	r3, #1
 8015794:	2300      	moveq	r3, #0
 8015796:	b2db      	uxtb	r3, r3
 8015798:	e000      	b.n	801579c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801579a:	2300      	movs	r3, #0
}
 801579c:	4618      	mov	r0, r3
 801579e:	3730      	adds	r7, #48	@ 0x30
 80157a0:	46bd      	mov	sp, r7
 80157a2:	bd80      	pop	{r7, pc}
 80157a4:	0801ad40 	.word	0x0801ad40
 80157a8:	0801ae24 	.word	0x0801ae24
 80157ac:	0801ad88 	.word	0x0801ad88
 80157b0:	0801ae44 	.word	0x0801ae44
 80157b4:	0801ae7c 	.word	0x0801ae7c
 80157b8:	0801ae8c 	.word	0x0801ae8c

080157bc <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 80157bc:	b580      	push	{r7, lr}
 80157be:	b08e      	sub	sp, #56	@ 0x38
 80157c0:	af00      	add	r7, sp, #0
 80157c2:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 80157c4:	687b      	ldr	r3, [r7, #4]
 80157c6:	685b      	ldr	r3, [r3, #4]
 80157c8:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 80157ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80157cc:	781b      	ldrb	r3, [r3, #0]
 80157ce:	f003 030f 	and.w	r3, r3, #15
 80157d2:	b2db      	uxtb	r3, r3
 80157d4:	009b      	lsls	r3, r3, #2
 80157d6:	b2db      	uxtb	r3, r3
 80157d8:	2b14      	cmp	r3, #20
 80157da:	f040 8171 	bne.w	8015ac0 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 80157de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80157e0:	88db      	ldrh	r3, [r3, #6]
 80157e2:	b29b      	uxth	r3, r3
 80157e4:	4618      	mov	r0, r3
 80157e6:	f7f5 fd7d 	bl	800b2e4 <lwip_htons>
 80157ea:	4603      	mov	r3, r0
 80157ec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80157f0:	b29b      	uxth	r3, r3
 80157f2:	00db      	lsls	r3, r3, #3
 80157f4:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80157f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80157f8:	885b      	ldrh	r3, [r3, #2]
 80157fa:	b29b      	uxth	r3, r3
 80157fc:	4618      	mov	r0, r3
 80157fe:	f7f5 fd71 	bl	800b2e4 <lwip_htons>
 8015802:	4603      	mov	r3, r0
 8015804:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8015806:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015808:	781b      	ldrb	r3, [r3, #0]
 801580a:	f003 030f 	and.w	r3, r3, #15
 801580e:	b2db      	uxtb	r3, r3
 8015810:	009b      	lsls	r3, r3, #2
 8015812:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 8015816:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801581a:	b29b      	uxth	r3, r3
 801581c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801581e:	429a      	cmp	r2, r3
 8015820:	f0c0 8150 	bcc.w	8015ac4 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8015824:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8015828:	b29b      	uxth	r3, r3
 801582a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801582c:	1ad3      	subs	r3, r2, r3
 801582e:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8015830:	6878      	ldr	r0, [r7, #4]
 8015832:	f7f7 f9d7 	bl	800cbe4 <pbuf_clen>
 8015836:	4603      	mov	r3, r0
 8015838:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801583a:	4b8c      	ldr	r3, [pc, #560]	@ (8015a6c <ip4_reass+0x2b0>)
 801583c:	881b      	ldrh	r3, [r3, #0]
 801583e:	461a      	mov	r2, r3
 8015840:	8c3b      	ldrh	r3, [r7, #32]
 8015842:	4413      	add	r3, r2
 8015844:	2b0a      	cmp	r3, #10
 8015846:	dd10      	ble.n	801586a <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8015848:	8c3b      	ldrh	r3, [r7, #32]
 801584a:	4619      	mov	r1, r3
 801584c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801584e:	f7ff fd81 	bl	8015354 <ip_reass_remove_oldest_datagram>
 8015852:	4603      	mov	r3, r0
 8015854:	2b00      	cmp	r3, #0
 8015856:	f000 8137 	beq.w	8015ac8 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801585a:	4b84      	ldr	r3, [pc, #528]	@ (8015a6c <ip4_reass+0x2b0>)
 801585c:	881b      	ldrh	r3, [r3, #0]
 801585e:	461a      	mov	r2, r3
 8015860:	8c3b      	ldrh	r3, [r7, #32]
 8015862:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8015864:	2b0a      	cmp	r3, #10
 8015866:	f300 812f 	bgt.w	8015ac8 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801586a:	4b81      	ldr	r3, [pc, #516]	@ (8015a70 <ip4_reass+0x2b4>)
 801586c:	681b      	ldr	r3, [r3, #0]
 801586e:	633b      	str	r3, [r7, #48]	@ 0x30
 8015870:	e015      	b.n	801589e <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8015872:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015874:	695a      	ldr	r2, [r3, #20]
 8015876:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015878:	68db      	ldr	r3, [r3, #12]
 801587a:	429a      	cmp	r2, r3
 801587c:	d10c      	bne.n	8015898 <ip4_reass+0xdc>
 801587e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015880:	699a      	ldr	r2, [r3, #24]
 8015882:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015884:	691b      	ldr	r3, [r3, #16]
 8015886:	429a      	cmp	r2, r3
 8015888:	d106      	bne.n	8015898 <ip4_reass+0xdc>
 801588a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801588c:	899a      	ldrh	r2, [r3, #12]
 801588e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015890:	889b      	ldrh	r3, [r3, #4]
 8015892:	b29b      	uxth	r3, r3
 8015894:	429a      	cmp	r2, r3
 8015896:	d006      	beq.n	80158a6 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8015898:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801589a:	681b      	ldr	r3, [r3, #0]
 801589c:	633b      	str	r3, [r7, #48]	@ 0x30
 801589e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80158a0:	2b00      	cmp	r3, #0
 80158a2:	d1e6      	bne.n	8015872 <ip4_reass+0xb6>
 80158a4:	e000      	b.n	80158a8 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 80158a6:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 80158a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80158aa:	2b00      	cmp	r3, #0
 80158ac:	d109      	bne.n	80158c2 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 80158ae:	8c3b      	ldrh	r3, [r7, #32]
 80158b0:	4619      	mov	r1, r3
 80158b2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80158b4:	f7ff fdb0 	bl	8015418 <ip_reass_enqueue_new_datagram>
 80158b8:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 80158ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80158bc:	2b00      	cmp	r3, #0
 80158be:	d11c      	bne.n	80158fa <ip4_reass+0x13e>
      goto nullreturn;
 80158c0:	e105      	b.n	8015ace <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80158c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80158c4:	88db      	ldrh	r3, [r3, #6]
 80158c6:	b29b      	uxth	r3, r3
 80158c8:	4618      	mov	r0, r3
 80158ca:	f7f5 fd0b 	bl	800b2e4 <lwip_htons>
 80158ce:	4603      	mov	r3, r0
 80158d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80158d4:	2b00      	cmp	r3, #0
 80158d6:	d110      	bne.n	80158fa <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80158d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80158da:	89db      	ldrh	r3, [r3, #14]
 80158dc:	4618      	mov	r0, r3
 80158de:	f7f5 fd01 	bl	800b2e4 <lwip_htons>
 80158e2:	4603      	mov	r3, r0
 80158e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80158e8:	2b00      	cmp	r3, #0
 80158ea:	d006      	beq.n	80158fa <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80158ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80158ee:	3308      	adds	r3, #8
 80158f0:	2214      	movs	r2, #20
 80158f2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80158f4:	4618      	mov	r0, r3
 80158f6:	f000 ffbe 	bl	8016876 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 80158fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80158fc:	88db      	ldrh	r3, [r3, #6]
 80158fe:	b29b      	uxth	r3, r3
 8015900:	f003 0320 	and.w	r3, r3, #32
 8015904:	2b00      	cmp	r3, #0
 8015906:	bf0c      	ite	eq
 8015908:	2301      	moveq	r3, #1
 801590a:	2300      	movne	r3, #0
 801590c:	b2db      	uxtb	r3, r3
 801590e:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8015910:	69fb      	ldr	r3, [r7, #28]
 8015912:	2b00      	cmp	r3, #0
 8015914:	d00e      	beq.n	8015934 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8015916:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8015918:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801591a:	4413      	add	r3, r2
 801591c:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801591e:	8b7a      	ldrh	r2, [r7, #26]
 8015920:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8015922:	429a      	cmp	r2, r3
 8015924:	f0c0 80a0 	bcc.w	8015a68 <ip4_reass+0x2ac>
 8015928:	8b7b      	ldrh	r3, [r7, #26]
 801592a:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 801592e:	4293      	cmp	r3, r2
 8015930:	f200 809a 	bhi.w	8015a68 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8015934:	69fa      	ldr	r2, [r7, #28]
 8015936:	6879      	ldr	r1, [r7, #4]
 8015938:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801593a:	f7ff fdd5 	bl	80154e8 <ip_reass_chain_frag_into_datagram_and_validate>
 801593e:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8015940:	697b      	ldr	r3, [r7, #20]
 8015942:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015946:	f000 809b 	beq.w	8015a80 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801594a:	4b48      	ldr	r3, [pc, #288]	@ (8015a6c <ip4_reass+0x2b0>)
 801594c:	881a      	ldrh	r2, [r3, #0]
 801594e:	8c3b      	ldrh	r3, [r7, #32]
 8015950:	4413      	add	r3, r2
 8015952:	b29a      	uxth	r2, r3
 8015954:	4b45      	ldr	r3, [pc, #276]	@ (8015a6c <ip4_reass+0x2b0>)
 8015956:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8015958:	69fb      	ldr	r3, [r7, #28]
 801595a:	2b00      	cmp	r3, #0
 801595c:	d00d      	beq.n	801597a <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801595e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8015960:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8015962:	4413      	add	r3, r2
 8015964:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8015966:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015968:	8a7a      	ldrh	r2, [r7, #18]
 801596a:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801596c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801596e:	7f9b      	ldrb	r3, [r3, #30]
 8015970:	f043 0301 	orr.w	r3, r3, #1
 8015974:	b2da      	uxtb	r2, r3
 8015976:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015978:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801597a:	697b      	ldr	r3, [r7, #20]
 801597c:	2b01      	cmp	r3, #1
 801597e:	d171      	bne.n	8015a64 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8015980:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015982:	8b9b      	ldrh	r3, [r3, #28]
 8015984:	3314      	adds	r3, #20
 8015986:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8015988:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801598a:	685b      	ldr	r3, [r3, #4]
 801598c:	685b      	ldr	r3, [r3, #4]
 801598e:	681b      	ldr	r3, [r3, #0]
 8015990:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8015992:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015994:	685b      	ldr	r3, [r3, #4]
 8015996:	685b      	ldr	r3, [r3, #4]
 8015998:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801599a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801599c:	3308      	adds	r3, #8
 801599e:	2214      	movs	r2, #20
 80159a0:	4619      	mov	r1, r3
 80159a2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80159a4:	f000 ff67 	bl	8016876 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 80159a8:	8a3b      	ldrh	r3, [r7, #16]
 80159aa:	4618      	mov	r0, r3
 80159ac:	f7f5 fc9a 	bl	800b2e4 <lwip_htons>
 80159b0:	4603      	mov	r3, r0
 80159b2:	461a      	mov	r2, r3
 80159b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80159b6:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 80159b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80159ba:	2200      	movs	r2, #0
 80159bc:	719a      	strb	r2, [r3, #6]
 80159be:	2200      	movs	r2, #0
 80159c0:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 80159c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80159c4:	2200      	movs	r2, #0
 80159c6:	729a      	strb	r2, [r3, #10]
 80159c8:	2200      	movs	r2, #0
 80159ca:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 80159cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80159ce:	685b      	ldr	r3, [r3, #4]
 80159d0:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 80159d2:	e00d      	b.n	80159f0 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 80159d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80159d6:	685b      	ldr	r3, [r3, #4]
 80159d8:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 80159da:	2114      	movs	r1, #20
 80159dc:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80159de:	f7f6 ffed 	bl	800c9bc <pbuf_remove_header>
      pbuf_cat(p, r);
 80159e2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80159e4:	6878      	ldr	r0, [r7, #4]
 80159e6:	f7f7 f93d 	bl	800cc64 <pbuf_cat>
      r = iprh->next_pbuf;
 80159ea:	68fb      	ldr	r3, [r7, #12]
 80159ec:	681b      	ldr	r3, [r3, #0]
 80159ee:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 80159f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80159f2:	2b00      	cmp	r3, #0
 80159f4:	d1ee      	bne.n	80159d4 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 80159f6:	4b1e      	ldr	r3, [pc, #120]	@ (8015a70 <ip4_reass+0x2b4>)
 80159f8:	681b      	ldr	r3, [r3, #0]
 80159fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80159fc:	429a      	cmp	r2, r3
 80159fe:	d102      	bne.n	8015a06 <ip4_reass+0x24a>
      ipr_prev = NULL;
 8015a00:	2300      	movs	r3, #0
 8015a02:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8015a04:	e010      	b.n	8015a28 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8015a06:	4b1a      	ldr	r3, [pc, #104]	@ (8015a70 <ip4_reass+0x2b4>)
 8015a08:	681b      	ldr	r3, [r3, #0]
 8015a0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8015a0c:	e007      	b.n	8015a1e <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8015a0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015a10:	681b      	ldr	r3, [r3, #0]
 8015a12:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8015a14:	429a      	cmp	r2, r3
 8015a16:	d006      	beq.n	8015a26 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8015a18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015a1a:	681b      	ldr	r3, [r3, #0]
 8015a1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8015a1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015a20:	2b00      	cmp	r3, #0
 8015a22:	d1f4      	bne.n	8015a0e <ip4_reass+0x252>
 8015a24:	e000      	b.n	8015a28 <ip4_reass+0x26c>
          break;
 8015a26:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8015a28:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8015a2a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8015a2c:	f7ff fd2e 	bl	801548c <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8015a30:	6878      	ldr	r0, [r7, #4]
 8015a32:	f7f7 f8d7 	bl	800cbe4 <pbuf_clen>
 8015a36:	4603      	mov	r3, r0
 8015a38:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8015a3a:	4b0c      	ldr	r3, [pc, #48]	@ (8015a6c <ip4_reass+0x2b0>)
 8015a3c:	881b      	ldrh	r3, [r3, #0]
 8015a3e:	8c3a      	ldrh	r2, [r7, #32]
 8015a40:	429a      	cmp	r2, r3
 8015a42:	d906      	bls.n	8015a52 <ip4_reass+0x296>
 8015a44:	4b0b      	ldr	r3, [pc, #44]	@ (8015a74 <ip4_reass+0x2b8>)
 8015a46:	f240 229b 	movw	r2, #667	@ 0x29b
 8015a4a:	490b      	ldr	r1, [pc, #44]	@ (8015a78 <ip4_reass+0x2bc>)
 8015a4c:	480b      	ldr	r0, [pc, #44]	@ (8015a7c <ip4_reass+0x2c0>)
 8015a4e:	f000 fda7 	bl	80165a0 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8015a52:	4b06      	ldr	r3, [pc, #24]	@ (8015a6c <ip4_reass+0x2b0>)
 8015a54:	881a      	ldrh	r2, [r3, #0]
 8015a56:	8c3b      	ldrh	r3, [r7, #32]
 8015a58:	1ad3      	subs	r3, r2, r3
 8015a5a:	b29a      	uxth	r2, r3
 8015a5c:	4b03      	ldr	r3, [pc, #12]	@ (8015a6c <ip4_reass+0x2b0>)
 8015a5e:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8015a60:	687b      	ldr	r3, [r7, #4]
 8015a62:	e038      	b.n	8015ad6 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8015a64:	2300      	movs	r3, #0
 8015a66:	e036      	b.n	8015ad6 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8015a68:	bf00      	nop
 8015a6a:	e00a      	b.n	8015a82 <ip4_reass+0x2c6>
 8015a6c:	2000ee98 	.word	0x2000ee98
 8015a70:	2000ee94 	.word	0x2000ee94
 8015a74:	0801ad40 	.word	0x0801ad40
 8015a78:	0801aeb0 	.word	0x0801aeb0
 8015a7c:	0801ad88 	.word	0x0801ad88
    goto nullreturn_ipr;
 8015a80:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8015a82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015a84:	2b00      	cmp	r3, #0
 8015a86:	d106      	bne.n	8015a96 <ip4_reass+0x2da>
 8015a88:	4b15      	ldr	r3, [pc, #84]	@ (8015ae0 <ip4_reass+0x324>)
 8015a8a:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 8015a8e:	4915      	ldr	r1, [pc, #84]	@ (8015ae4 <ip4_reass+0x328>)
 8015a90:	4815      	ldr	r0, [pc, #84]	@ (8015ae8 <ip4_reass+0x32c>)
 8015a92:	f000 fd85 	bl	80165a0 <iprintf>
  if (ipr->p == NULL) {
 8015a96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015a98:	685b      	ldr	r3, [r3, #4]
 8015a9a:	2b00      	cmp	r3, #0
 8015a9c:	d116      	bne.n	8015acc <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8015a9e:	4b13      	ldr	r3, [pc, #76]	@ (8015aec <ip4_reass+0x330>)
 8015aa0:	681b      	ldr	r3, [r3, #0]
 8015aa2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8015aa4:	429a      	cmp	r2, r3
 8015aa6:	d006      	beq.n	8015ab6 <ip4_reass+0x2fa>
 8015aa8:	4b0d      	ldr	r3, [pc, #52]	@ (8015ae0 <ip4_reass+0x324>)
 8015aaa:	f240 22ab 	movw	r2, #683	@ 0x2ab
 8015aae:	4910      	ldr	r1, [pc, #64]	@ (8015af0 <ip4_reass+0x334>)
 8015ab0:	480d      	ldr	r0, [pc, #52]	@ (8015ae8 <ip4_reass+0x32c>)
 8015ab2:	f000 fd75 	bl	80165a0 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8015ab6:	2100      	movs	r1, #0
 8015ab8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8015aba:	f7ff fce7 	bl	801548c <ip_reass_dequeue_datagram>
 8015abe:	e006      	b.n	8015ace <ip4_reass+0x312>
    goto nullreturn;
 8015ac0:	bf00      	nop
 8015ac2:	e004      	b.n	8015ace <ip4_reass+0x312>
    goto nullreturn;
 8015ac4:	bf00      	nop
 8015ac6:	e002      	b.n	8015ace <ip4_reass+0x312>
      goto nullreturn;
 8015ac8:	bf00      	nop
 8015aca:	e000      	b.n	8015ace <ip4_reass+0x312>
  }

nullreturn:
 8015acc:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8015ace:	6878      	ldr	r0, [r7, #4]
 8015ad0:	f7f6 fffa 	bl	800cac8 <pbuf_free>
  return NULL;
 8015ad4:	2300      	movs	r3, #0
}
 8015ad6:	4618      	mov	r0, r3
 8015ad8:	3738      	adds	r7, #56	@ 0x38
 8015ada:	46bd      	mov	sp, r7
 8015adc:	bd80      	pop	{r7, pc}
 8015ade:	bf00      	nop
 8015ae0:	0801ad40 	.word	0x0801ad40
 8015ae4:	0801aecc 	.word	0x0801aecc
 8015ae8:	0801ad88 	.word	0x0801ad88
 8015aec:	2000ee94 	.word	0x2000ee94
 8015af0:	0801aed8 	.word	0x0801aed8

08015af4 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8015af4:	b580      	push	{r7, lr}
 8015af6:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8015af8:	2005      	movs	r0, #5
 8015afa:	f7f6 f8cb 	bl	800bc94 <memp_malloc>
 8015afe:	4603      	mov	r3, r0
}
 8015b00:	4618      	mov	r0, r3
 8015b02:	bd80      	pop	{r7, pc}

08015b04 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8015b04:	b580      	push	{r7, lr}
 8015b06:	b082      	sub	sp, #8
 8015b08:	af00      	add	r7, sp, #0
 8015b0a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8015b0c:	687b      	ldr	r3, [r7, #4]
 8015b0e:	2b00      	cmp	r3, #0
 8015b10:	d106      	bne.n	8015b20 <ip_frag_free_pbuf_custom_ref+0x1c>
 8015b12:	4b07      	ldr	r3, [pc, #28]	@ (8015b30 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8015b14:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 8015b18:	4906      	ldr	r1, [pc, #24]	@ (8015b34 <ip_frag_free_pbuf_custom_ref+0x30>)
 8015b1a:	4807      	ldr	r0, [pc, #28]	@ (8015b38 <ip_frag_free_pbuf_custom_ref+0x34>)
 8015b1c:	f000 fd40 	bl	80165a0 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8015b20:	6879      	ldr	r1, [r7, #4]
 8015b22:	2005      	movs	r0, #5
 8015b24:	f7f6 f92c 	bl	800bd80 <memp_free>
}
 8015b28:	bf00      	nop
 8015b2a:	3708      	adds	r7, #8
 8015b2c:	46bd      	mov	sp, r7
 8015b2e:	bd80      	pop	{r7, pc}
 8015b30:	0801ad40 	.word	0x0801ad40
 8015b34:	0801aef8 	.word	0x0801aef8
 8015b38:	0801ad88 	.word	0x0801ad88

08015b3c <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8015b3c:	b580      	push	{r7, lr}
 8015b3e:	b084      	sub	sp, #16
 8015b40:	af00      	add	r7, sp, #0
 8015b42:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8015b44:	687b      	ldr	r3, [r7, #4]
 8015b46:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8015b48:	68fb      	ldr	r3, [r7, #12]
 8015b4a:	2b00      	cmp	r3, #0
 8015b4c:	d106      	bne.n	8015b5c <ipfrag_free_pbuf_custom+0x20>
 8015b4e:	4b11      	ldr	r3, [pc, #68]	@ (8015b94 <ipfrag_free_pbuf_custom+0x58>)
 8015b50:	f240 22ce 	movw	r2, #718	@ 0x2ce
 8015b54:	4910      	ldr	r1, [pc, #64]	@ (8015b98 <ipfrag_free_pbuf_custom+0x5c>)
 8015b56:	4811      	ldr	r0, [pc, #68]	@ (8015b9c <ipfrag_free_pbuf_custom+0x60>)
 8015b58:	f000 fd22 	bl	80165a0 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8015b5c:	68fa      	ldr	r2, [r7, #12]
 8015b5e:	687b      	ldr	r3, [r7, #4]
 8015b60:	429a      	cmp	r2, r3
 8015b62:	d006      	beq.n	8015b72 <ipfrag_free_pbuf_custom+0x36>
 8015b64:	4b0b      	ldr	r3, [pc, #44]	@ (8015b94 <ipfrag_free_pbuf_custom+0x58>)
 8015b66:	f240 22cf 	movw	r2, #719	@ 0x2cf
 8015b6a:	490d      	ldr	r1, [pc, #52]	@ (8015ba0 <ipfrag_free_pbuf_custom+0x64>)
 8015b6c:	480b      	ldr	r0, [pc, #44]	@ (8015b9c <ipfrag_free_pbuf_custom+0x60>)
 8015b6e:	f000 fd17 	bl	80165a0 <iprintf>
  if (pcr->original != NULL) {
 8015b72:	68fb      	ldr	r3, [r7, #12]
 8015b74:	695b      	ldr	r3, [r3, #20]
 8015b76:	2b00      	cmp	r3, #0
 8015b78:	d004      	beq.n	8015b84 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8015b7a:	68fb      	ldr	r3, [r7, #12]
 8015b7c:	695b      	ldr	r3, [r3, #20]
 8015b7e:	4618      	mov	r0, r3
 8015b80:	f7f6 ffa2 	bl	800cac8 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8015b84:	68f8      	ldr	r0, [r7, #12]
 8015b86:	f7ff ffbd 	bl	8015b04 <ip_frag_free_pbuf_custom_ref>
}
 8015b8a:	bf00      	nop
 8015b8c:	3710      	adds	r7, #16
 8015b8e:	46bd      	mov	sp, r7
 8015b90:	bd80      	pop	{r7, pc}
 8015b92:	bf00      	nop
 8015b94:	0801ad40 	.word	0x0801ad40
 8015b98:	0801af04 	.word	0x0801af04
 8015b9c:	0801ad88 	.word	0x0801ad88
 8015ba0:	0801af10 	.word	0x0801af10

08015ba4 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8015ba4:	b580      	push	{r7, lr}
 8015ba6:	b094      	sub	sp, #80	@ 0x50
 8015ba8:	af02      	add	r7, sp, #8
 8015baa:	60f8      	str	r0, [r7, #12]
 8015bac:	60b9      	str	r1, [r7, #8]
 8015bae:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8015bb0:	2300      	movs	r3, #0
 8015bb2:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8015bb6:	68bb      	ldr	r3, [r7, #8]
 8015bb8:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8015bba:	3b14      	subs	r3, #20
 8015bbc:	2b00      	cmp	r3, #0
 8015bbe:	da00      	bge.n	8015bc2 <ip4_frag+0x1e>
 8015bc0:	3307      	adds	r3, #7
 8015bc2:	10db      	asrs	r3, r3, #3
 8015bc4:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8015bc6:	2314      	movs	r3, #20
 8015bc8:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8015bca:	68fb      	ldr	r3, [r7, #12]
 8015bcc:	685b      	ldr	r3, [r3, #4]
 8015bce:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 8015bd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015bd2:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8015bd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015bd6:	781b      	ldrb	r3, [r3, #0]
 8015bd8:	f003 030f 	and.w	r3, r3, #15
 8015bdc:	b2db      	uxtb	r3, r3
 8015bde:	009b      	lsls	r3, r3, #2
 8015be0:	b2db      	uxtb	r3, r3
 8015be2:	2b14      	cmp	r3, #20
 8015be4:	d002      	beq.n	8015bec <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8015be6:	f06f 0305 	mvn.w	r3, #5
 8015bea:	e110      	b.n	8015e0e <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8015bec:	68fb      	ldr	r3, [r7, #12]
 8015bee:	895b      	ldrh	r3, [r3, #10]
 8015bf0:	2b13      	cmp	r3, #19
 8015bf2:	d809      	bhi.n	8015c08 <ip4_frag+0x64>
 8015bf4:	4b88      	ldr	r3, [pc, #544]	@ (8015e18 <ip4_frag+0x274>)
 8015bf6:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 8015bfa:	4988      	ldr	r1, [pc, #544]	@ (8015e1c <ip4_frag+0x278>)
 8015bfc:	4888      	ldr	r0, [pc, #544]	@ (8015e20 <ip4_frag+0x27c>)
 8015bfe:	f000 fccf 	bl	80165a0 <iprintf>
 8015c02:	f06f 0305 	mvn.w	r3, #5
 8015c06:	e102      	b.n	8015e0e <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8015c08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015c0a:	88db      	ldrh	r3, [r3, #6]
 8015c0c:	b29b      	uxth	r3, r3
 8015c0e:	4618      	mov	r0, r3
 8015c10:	f7f5 fb68 	bl	800b2e4 <lwip_htons>
 8015c14:	4603      	mov	r3, r0
 8015c16:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 8015c18:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8015c1a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015c1e:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8015c22:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8015c24:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8015c28:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8015c2a:	68fb      	ldr	r3, [r7, #12]
 8015c2c:	891b      	ldrh	r3, [r3, #8]
 8015c2e:	3b14      	subs	r3, #20
 8015c30:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 8015c34:	e0e1      	b.n	8015dfa <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8015c36:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8015c38:	00db      	lsls	r3, r3, #3
 8015c3a:	b29b      	uxth	r3, r3
 8015c3c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8015c40:	4293      	cmp	r3, r2
 8015c42:	bf28      	it	cs
 8015c44:	4613      	movcs	r3, r2
 8015c46:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8015c48:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8015c4c:	2114      	movs	r1, #20
 8015c4e:	200e      	movs	r0, #14
 8015c50:	f7f6 fc56 	bl	800c500 <pbuf_alloc>
 8015c54:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 8015c56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015c58:	2b00      	cmp	r3, #0
 8015c5a:	f000 80d5 	beq.w	8015e08 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8015c5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015c60:	895b      	ldrh	r3, [r3, #10]
 8015c62:	2b13      	cmp	r3, #19
 8015c64:	d806      	bhi.n	8015c74 <ip4_frag+0xd0>
 8015c66:	4b6c      	ldr	r3, [pc, #432]	@ (8015e18 <ip4_frag+0x274>)
 8015c68:	f44f 7249 	mov.w	r2, #804	@ 0x324
 8015c6c:	496d      	ldr	r1, [pc, #436]	@ (8015e24 <ip4_frag+0x280>)
 8015c6e:	486c      	ldr	r0, [pc, #432]	@ (8015e20 <ip4_frag+0x27c>)
 8015c70:	f000 fc96 	bl	80165a0 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8015c74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015c76:	685b      	ldr	r3, [r3, #4]
 8015c78:	2214      	movs	r2, #20
 8015c7a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8015c7c:	4618      	mov	r0, r3
 8015c7e:	f000 fdfa 	bl	8016876 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8015c82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015c84:	685b      	ldr	r3, [r3, #4]
 8015c86:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 8015c88:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8015c8a:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 8015c8e:	e064      	b.n	8015d5a <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8015c90:	68fb      	ldr	r3, [r7, #12]
 8015c92:	895a      	ldrh	r2, [r3, #10]
 8015c94:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8015c96:	1ad3      	subs	r3, r2, r3
 8015c98:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8015c9a:	68fb      	ldr	r3, [r7, #12]
 8015c9c:	895b      	ldrh	r3, [r3, #10]
 8015c9e:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8015ca0:	429a      	cmp	r2, r3
 8015ca2:	d906      	bls.n	8015cb2 <ip4_frag+0x10e>
 8015ca4:	4b5c      	ldr	r3, [pc, #368]	@ (8015e18 <ip4_frag+0x274>)
 8015ca6:	f240 322d 	movw	r2, #813	@ 0x32d
 8015caa:	495f      	ldr	r1, [pc, #380]	@ (8015e28 <ip4_frag+0x284>)
 8015cac:	485c      	ldr	r0, [pc, #368]	@ (8015e20 <ip4_frag+0x27c>)
 8015cae:	f000 fc77 	bl	80165a0 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8015cb2:	8bfa      	ldrh	r2, [r7, #30]
 8015cb4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8015cb8:	4293      	cmp	r3, r2
 8015cba:	bf28      	it	cs
 8015cbc:	4613      	movcs	r3, r2
 8015cbe:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8015cc2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8015cc6:	2b00      	cmp	r3, #0
 8015cc8:	d105      	bne.n	8015cd6 <ip4_frag+0x132>
        poff = 0;
 8015cca:	2300      	movs	r3, #0
 8015ccc:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 8015cce:	68fb      	ldr	r3, [r7, #12]
 8015cd0:	681b      	ldr	r3, [r3, #0]
 8015cd2:	60fb      	str	r3, [r7, #12]
        continue;
 8015cd4:	e041      	b.n	8015d5a <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8015cd6:	f7ff ff0d 	bl	8015af4 <ip_frag_alloc_pbuf_custom_ref>
 8015cda:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8015cdc:	69bb      	ldr	r3, [r7, #24]
 8015cde:	2b00      	cmp	r3, #0
 8015ce0:	d103      	bne.n	8015cea <ip4_frag+0x146>
        pbuf_free(rambuf);
 8015ce2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8015ce4:	f7f6 fef0 	bl	800cac8 <pbuf_free>
        goto memerr;
 8015ce8:	e08f      	b.n	8015e0a <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8015cea:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8015cec:	68fb      	ldr	r3, [r7, #12]
 8015cee:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8015cf0:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8015cf2:	4413      	add	r3, r2
 8015cf4:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 8015cf8:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8015cfc:	9201      	str	r2, [sp, #4]
 8015cfe:	9300      	str	r3, [sp, #0]
 8015d00:	4603      	mov	r3, r0
 8015d02:	2241      	movs	r2, #65	@ 0x41
 8015d04:	2000      	movs	r0, #0
 8015d06:	f7f6 fd25 	bl	800c754 <pbuf_alloced_custom>
 8015d0a:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8015d0c:	697b      	ldr	r3, [r7, #20]
 8015d0e:	2b00      	cmp	r3, #0
 8015d10:	d106      	bne.n	8015d20 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8015d12:	69b8      	ldr	r0, [r7, #24]
 8015d14:	f7ff fef6 	bl	8015b04 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8015d18:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8015d1a:	f7f6 fed5 	bl	800cac8 <pbuf_free>
        goto memerr;
 8015d1e:	e074      	b.n	8015e0a <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8015d20:	68f8      	ldr	r0, [r7, #12]
 8015d22:	f7f6 ff77 	bl	800cc14 <pbuf_ref>
      pcr->original = p;
 8015d26:	69bb      	ldr	r3, [r7, #24]
 8015d28:	68fa      	ldr	r2, [r7, #12]
 8015d2a:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8015d2c:	69bb      	ldr	r3, [r7, #24]
 8015d2e:	4a3f      	ldr	r2, [pc, #252]	@ (8015e2c <ip4_frag+0x288>)
 8015d30:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8015d32:	6979      	ldr	r1, [r7, #20]
 8015d34:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8015d36:	f7f6 ff95 	bl	800cc64 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8015d3a:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 8015d3e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8015d42:	1ad3      	subs	r3, r2, r3
 8015d44:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 8015d48:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8015d4c:	2b00      	cmp	r3, #0
 8015d4e:	d004      	beq.n	8015d5a <ip4_frag+0x1b6>
        poff = 0;
 8015d50:	2300      	movs	r3, #0
 8015d52:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 8015d54:	68fb      	ldr	r3, [r7, #12]
 8015d56:	681b      	ldr	r3, [r3, #0]
 8015d58:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8015d5a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8015d5e:	2b00      	cmp	r3, #0
 8015d60:	d196      	bne.n	8015c90 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8015d62:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8015d64:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8015d68:	4413      	add	r3, r2
 8015d6a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8015d6c:	68bb      	ldr	r3, [r7, #8]
 8015d6e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8015d70:	f1a3 0213 	sub.w	r2, r3, #19
 8015d74:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8015d78:	429a      	cmp	r2, r3
 8015d7a:	bfcc      	ite	gt
 8015d7c:	2301      	movgt	r3, #1
 8015d7e:	2300      	movle	r3, #0
 8015d80:	b2db      	uxtb	r3, r3
 8015d82:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8015d84:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8015d88:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015d8c:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 8015d8e:	6a3b      	ldr	r3, [r7, #32]
 8015d90:	2b00      	cmp	r3, #0
 8015d92:	d002      	beq.n	8015d9a <ip4_frag+0x1f6>
 8015d94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015d96:	2b00      	cmp	r3, #0
 8015d98:	d003      	beq.n	8015da2 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8015d9a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8015d9c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8015da0:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8015da2:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8015da4:	4618      	mov	r0, r3
 8015da6:	f7f5 fa9d 	bl	800b2e4 <lwip_htons>
 8015daa:	4603      	mov	r3, r0
 8015dac:	461a      	mov	r2, r3
 8015dae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015db0:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8015db2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8015db4:	3314      	adds	r3, #20
 8015db6:	b29b      	uxth	r3, r3
 8015db8:	4618      	mov	r0, r3
 8015dba:	f7f5 fa93 	bl	800b2e4 <lwip_htons>
 8015dbe:	4603      	mov	r3, r0
 8015dc0:	461a      	mov	r2, r3
 8015dc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015dc4:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8015dc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015dc8:	2200      	movs	r2, #0
 8015dca:	729a      	strb	r2, [r3, #10]
 8015dcc:	2200      	movs	r2, #0
 8015dce:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8015dd0:	68bb      	ldr	r3, [r7, #8]
 8015dd2:	695b      	ldr	r3, [r3, #20]
 8015dd4:	687a      	ldr	r2, [r7, #4]
 8015dd6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8015dd8:	68b8      	ldr	r0, [r7, #8]
 8015dda:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8015ddc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8015dde:	f7f6 fe73 	bl	800cac8 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8015de2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8015de6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8015de8:	1ad3      	subs	r3, r2, r3
 8015dea:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 8015dee:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8015df2:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8015df4:	4413      	add	r3, r2
 8015df6:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 8015dfa:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8015dfe:	2b00      	cmp	r3, #0
 8015e00:	f47f af19 	bne.w	8015c36 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8015e04:	2300      	movs	r3, #0
 8015e06:	e002      	b.n	8015e0e <ip4_frag+0x26a>
      goto memerr;
 8015e08:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8015e0a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8015e0e:	4618      	mov	r0, r3
 8015e10:	3748      	adds	r7, #72	@ 0x48
 8015e12:	46bd      	mov	sp, r7
 8015e14:	bd80      	pop	{r7, pc}
 8015e16:	bf00      	nop
 8015e18:	0801ad40 	.word	0x0801ad40
 8015e1c:	0801af1c 	.word	0x0801af1c
 8015e20:	0801ad88 	.word	0x0801ad88
 8015e24:	0801af38 	.word	0x0801af38
 8015e28:	0801af58 	.word	0x0801af58
 8015e2c:	08015b3d 	.word	0x08015b3d

08015e30 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8015e30:	b580      	push	{r7, lr}
 8015e32:	b086      	sub	sp, #24
 8015e34:	af00      	add	r7, sp, #0
 8015e36:	6078      	str	r0, [r7, #4]
 8015e38:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8015e3a:	230e      	movs	r3, #14
 8015e3c:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8015e3e:	687b      	ldr	r3, [r7, #4]
 8015e40:	895b      	ldrh	r3, [r3, #10]
 8015e42:	2b0e      	cmp	r3, #14
 8015e44:	d96e      	bls.n	8015f24 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8015e46:	687b      	ldr	r3, [r7, #4]
 8015e48:	7bdb      	ldrb	r3, [r3, #15]
 8015e4a:	2b00      	cmp	r3, #0
 8015e4c:	d106      	bne.n	8015e5c <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8015e4e:	683b      	ldr	r3, [r7, #0]
 8015e50:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8015e54:	3301      	adds	r3, #1
 8015e56:	b2da      	uxtb	r2, r3
 8015e58:	687b      	ldr	r3, [r7, #4]
 8015e5a:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8015e5c:	687b      	ldr	r3, [r7, #4]
 8015e5e:	685b      	ldr	r3, [r3, #4]
 8015e60:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8015e62:	693b      	ldr	r3, [r7, #16]
 8015e64:	7b1a      	ldrb	r2, [r3, #12]
 8015e66:	7b5b      	ldrb	r3, [r3, #13]
 8015e68:	021b      	lsls	r3, r3, #8
 8015e6a:	4313      	orrs	r3, r2
 8015e6c:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8015e6e:	693b      	ldr	r3, [r7, #16]
 8015e70:	781b      	ldrb	r3, [r3, #0]
 8015e72:	f003 0301 	and.w	r3, r3, #1
 8015e76:	2b00      	cmp	r3, #0
 8015e78:	d023      	beq.n	8015ec2 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8015e7a:	693b      	ldr	r3, [r7, #16]
 8015e7c:	781b      	ldrb	r3, [r3, #0]
 8015e7e:	2b01      	cmp	r3, #1
 8015e80:	d10f      	bne.n	8015ea2 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8015e82:	693b      	ldr	r3, [r7, #16]
 8015e84:	785b      	ldrb	r3, [r3, #1]
 8015e86:	2b00      	cmp	r3, #0
 8015e88:	d11b      	bne.n	8015ec2 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8015e8a:	693b      	ldr	r3, [r7, #16]
 8015e8c:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8015e8e:	2b5e      	cmp	r3, #94	@ 0x5e
 8015e90:	d117      	bne.n	8015ec2 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8015e92:	687b      	ldr	r3, [r7, #4]
 8015e94:	7b5b      	ldrb	r3, [r3, #13]
 8015e96:	f043 0310 	orr.w	r3, r3, #16
 8015e9a:	b2da      	uxtb	r2, r3
 8015e9c:	687b      	ldr	r3, [r7, #4]
 8015e9e:	735a      	strb	r2, [r3, #13]
 8015ea0:	e00f      	b.n	8015ec2 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8015ea2:	693b      	ldr	r3, [r7, #16]
 8015ea4:	2206      	movs	r2, #6
 8015ea6:	4928      	ldr	r1, [pc, #160]	@ (8015f48 <ethernet_input+0x118>)
 8015ea8:	4618      	mov	r0, r3
 8015eaa:	f000 fbee 	bl	801668a <memcmp>
 8015eae:	4603      	mov	r3, r0
 8015eb0:	2b00      	cmp	r3, #0
 8015eb2:	d106      	bne.n	8015ec2 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8015eb4:	687b      	ldr	r3, [r7, #4]
 8015eb6:	7b5b      	ldrb	r3, [r3, #13]
 8015eb8:	f043 0308 	orr.w	r3, r3, #8
 8015ebc:	b2da      	uxtb	r2, r3
 8015ebe:	687b      	ldr	r3, [r7, #4]
 8015ec0:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8015ec2:	89fb      	ldrh	r3, [r7, #14]
 8015ec4:	2b08      	cmp	r3, #8
 8015ec6:	d003      	beq.n	8015ed0 <ethernet_input+0xa0>
 8015ec8:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 8015ecc:	d014      	beq.n	8015ef8 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8015ece:	e032      	b.n	8015f36 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8015ed0:	683b      	ldr	r3, [r7, #0]
 8015ed2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8015ed6:	f003 0308 	and.w	r3, r3, #8
 8015eda:	2b00      	cmp	r3, #0
 8015edc:	d024      	beq.n	8015f28 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8015ede:	8afb      	ldrh	r3, [r7, #22]
 8015ee0:	4619      	mov	r1, r3
 8015ee2:	6878      	ldr	r0, [r7, #4]
 8015ee4:	f7f6 fd6a 	bl	800c9bc <pbuf_remove_header>
 8015ee8:	4603      	mov	r3, r0
 8015eea:	2b00      	cmp	r3, #0
 8015eec:	d11e      	bne.n	8015f2c <ethernet_input+0xfc>
        ip4_input(p, netif);
 8015eee:	6839      	ldr	r1, [r7, #0]
 8015ef0:	6878      	ldr	r0, [r7, #4]
 8015ef2:	f7fe ff21 	bl	8014d38 <ip4_input>
      break;
 8015ef6:	e013      	b.n	8015f20 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8015ef8:	683b      	ldr	r3, [r7, #0]
 8015efa:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8015efe:	f003 0308 	and.w	r3, r3, #8
 8015f02:	2b00      	cmp	r3, #0
 8015f04:	d014      	beq.n	8015f30 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8015f06:	8afb      	ldrh	r3, [r7, #22]
 8015f08:	4619      	mov	r1, r3
 8015f0a:	6878      	ldr	r0, [r7, #4]
 8015f0c:	f7f6 fd56 	bl	800c9bc <pbuf_remove_header>
 8015f10:	4603      	mov	r3, r0
 8015f12:	2b00      	cmp	r3, #0
 8015f14:	d10e      	bne.n	8015f34 <ethernet_input+0x104>
        etharp_input(p, netif);
 8015f16:	6839      	ldr	r1, [r7, #0]
 8015f18:	6878      	ldr	r0, [r7, #4]
 8015f1a:	f7fe f8c1 	bl	80140a0 <etharp_input>
      break;
 8015f1e:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8015f20:	2300      	movs	r3, #0
 8015f22:	e00c      	b.n	8015f3e <ethernet_input+0x10e>
    goto free_and_return;
 8015f24:	bf00      	nop
 8015f26:	e006      	b.n	8015f36 <ethernet_input+0x106>
        goto free_and_return;
 8015f28:	bf00      	nop
 8015f2a:	e004      	b.n	8015f36 <ethernet_input+0x106>
        goto free_and_return;
 8015f2c:	bf00      	nop
 8015f2e:	e002      	b.n	8015f36 <ethernet_input+0x106>
        goto free_and_return;
 8015f30:	bf00      	nop
 8015f32:	e000      	b.n	8015f36 <ethernet_input+0x106>
        goto free_and_return;
 8015f34:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8015f36:	6878      	ldr	r0, [r7, #4]
 8015f38:	f7f6 fdc6 	bl	800cac8 <pbuf_free>
  return ERR_OK;
 8015f3c:	2300      	movs	r3, #0
}
 8015f3e:	4618      	mov	r0, r3
 8015f40:	3718      	adds	r7, #24
 8015f42:	46bd      	mov	sp, r7
 8015f44:	bd80      	pop	{r7, pc}
 8015f46:	bf00      	nop
 8015f48:	0801b138 	.word	0x0801b138

08015f4c <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8015f4c:	b580      	push	{r7, lr}
 8015f4e:	b086      	sub	sp, #24
 8015f50:	af00      	add	r7, sp, #0
 8015f52:	60f8      	str	r0, [r7, #12]
 8015f54:	60b9      	str	r1, [r7, #8]
 8015f56:	607a      	str	r2, [r7, #4]
 8015f58:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8015f5a:	8c3b      	ldrh	r3, [r7, #32]
 8015f5c:	4618      	mov	r0, r3
 8015f5e:	f7f5 f9c1 	bl	800b2e4 <lwip_htons>
 8015f62:	4603      	mov	r3, r0
 8015f64:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8015f66:	210e      	movs	r1, #14
 8015f68:	68b8      	ldr	r0, [r7, #8]
 8015f6a:	f7f6 fd17 	bl	800c99c <pbuf_add_header>
 8015f6e:	4603      	mov	r3, r0
 8015f70:	2b00      	cmp	r3, #0
 8015f72:	d125      	bne.n	8015fc0 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8015f74:	68bb      	ldr	r3, [r7, #8]
 8015f76:	685b      	ldr	r3, [r3, #4]
 8015f78:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8015f7a:	693b      	ldr	r3, [r7, #16]
 8015f7c:	8afa      	ldrh	r2, [r7, #22]
 8015f7e:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8015f80:	693b      	ldr	r3, [r7, #16]
 8015f82:	2206      	movs	r2, #6
 8015f84:	6839      	ldr	r1, [r7, #0]
 8015f86:	4618      	mov	r0, r3
 8015f88:	f000 fc75 	bl	8016876 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8015f8c:	693b      	ldr	r3, [r7, #16]
 8015f8e:	3306      	adds	r3, #6
 8015f90:	2206      	movs	r2, #6
 8015f92:	6879      	ldr	r1, [r7, #4]
 8015f94:	4618      	mov	r0, r3
 8015f96:	f000 fc6e 	bl	8016876 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8015f9a:	68fb      	ldr	r3, [r7, #12]
 8015f9c:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8015fa0:	2b06      	cmp	r3, #6
 8015fa2:	d006      	beq.n	8015fb2 <ethernet_output+0x66>
 8015fa4:	4b0a      	ldr	r3, [pc, #40]	@ (8015fd0 <ethernet_output+0x84>)
 8015fa6:	f44f 7299 	mov.w	r2, #306	@ 0x132
 8015faa:	490a      	ldr	r1, [pc, #40]	@ (8015fd4 <ethernet_output+0x88>)
 8015fac:	480a      	ldr	r0, [pc, #40]	@ (8015fd8 <ethernet_output+0x8c>)
 8015fae:	f000 faf7 	bl	80165a0 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8015fb2:	68fb      	ldr	r3, [r7, #12]
 8015fb4:	699b      	ldr	r3, [r3, #24]
 8015fb6:	68b9      	ldr	r1, [r7, #8]
 8015fb8:	68f8      	ldr	r0, [r7, #12]
 8015fba:	4798      	blx	r3
 8015fbc:	4603      	mov	r3, r0
 8015fbe:	e002      	b.n	8015fc6 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8015fc0:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8015fc2:	f06f 0301 	mvn.w	r3, #1
}
 8015fc6:	4618      	mov	r0, r3
 8015fc8:	3718      	adds	r7, #24
 8015fca:	46bd      	mov	sp, r7
 8015fcc:	bd80      	pop	{r7, pc}
 8015fce:	bf00      	nop
 8015fd0:	0801af68 	.word	0x0801af68
 8015fd4:	0801afa0 	.word	0x0801afa0
 8015fd8:	0801afd4 	.word	0x0801afd4

08015fdc <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8015fdc:	b580      	push	{r7, lr}
 8015fde:	b086      	sub	sp, #24
 8015fe0:	af00      	add	r7, sp, #0
 8015fe2:	6078      	str	r0, [r7, #4]
 8015fe4:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 8015fe6:	683b      	ldr	r3, [r7, #0]
 8015fe8:	60bb      	str	r3, [r7, #8]
 8015fea:	2304      	movs	r3, #4
 8015fec:	60fb      	str	r3, [r7, #12]
 8015fee:	2300      	movs	r3, #0
 8015ff0:	613b      	str	r3, [r7, #16]
 8015ff2:	2300      	movs	r3, #0
 8015ff4:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 8015ff6:	f107 0308 	add.w	r3, r7, #8
 8015ffa:	2100      	movs	r1, #0
 8015ffc:	4618      	mov	r0, r3
 8015ffe:	f7f0 f848 	bl	8006092 <osMessageCreate>
 8016002:	4602      	mov	r2, r0
 8016004:	687b      	ldr	r3, [r7, #4]
 8016006:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8016008:	687b      	ldr	r3, [r7, #4]
 801600a:	681b      	ldr	r3, [r3, #0]
 801600c:	2b00      	cmp	r3, #0
 801600e:	d102      	bne.n	8016016 <sys_mbox_new+0x3a>
    return ERR_MEM;
 8016010:	f04f 33ff 	mov.w	r3, #4294967295
 8016014:	e000      	b.n	8016018 <sys_mbox_new+0x3c>

  return ERR_OK;
 8016016:	2300      	movs	r3, #0
}
 8016018:	4618      	mov	r0, r3
 801601a:	3718      	adds	r7, #24
 801601c:	46bd      	mov	sp, r7
 801601e:	bd80      	pop	{r7, pc}

08016020 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 8016020:	b580      	push	{r7, lr}
 8016022:	b082      	sub	sp, #8
 8016024:	af00      	add	r7, sp, #0
 8016026:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 8016028:	687b      	ldr	r3, [r7, #4]
 801602a:	681b      	ldr	r3, [r3, #0]
 801602c:	4618      	mov	r0, r3
 801602e:	f7f0 f90d 	bl	800624c <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 8016032:	687b      	ldr	r3, [r7, #4]
 8016034:	681b      	ldr	r3, [r3, #0]
 8016036:	4618      	mov	r0, r3
 8016038:	f7f0 f91e 	bl	8006278 <osMessageDelete>
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 801603c:	bf00      	nop
 801603e:	3708      	adds	r7, #8
 8016040:	46bd      	mov	sp, r7
 8016042:	bd80      	pop	{r7, pc}

08016044 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8016044:	b580      	push	{r7, lr}
 8016046:	b084      	sub	sp, #16
 8016048:	af00      	add	r7, sp, #0
 801604a:	6078      	str	r0, [r7, #4]
 801604c:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 801604e:	687b      	ldr	r3, [r7, #4]
 8016050:	681b      	ldr	r3, [r3, #0]
 8016052:	6839      	ldr	r1, [r7, #0]
 8016054:	2200      	movs	r2, #0
 8016056:	4618      	mov	r0, r3
 8016058:	f7f0 f844 	bl	80060e4 <osMessagePut>
 801605c:	4603      	mov	r3, r0
 801605e:	2b00      	cmp	r3, #0
 8016060:	d102      	bne.n	8016068 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 8016062:	2300      	movs	r3, #0
 8016064:	73fb      	strb	r3, [r7, #15]
 8016066:	e001      	b.n	801606c <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8016068:	23ff      	movs	r3, #255	@ 0xff
 801606a:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 801606c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8016070:	4618      	mov	r0, r3
 8016072:	3710      	adds	r7, #16
 8016074:	46bd      	mov	sp, r7
 8016076:	bd80      	pop	{r7, pc}

08016078 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8016078:	b580      	push	{r7, lr}
 801607a:	b08c      	sub	sp, #48	@ 0x30
 801607c:	af00      	add	r7, sp, #0
 801607e:	61f8      	str	r0, [r7, #28]
 8016080:	61b9      	str	r1, [r7, #24]
 8016082:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 8016084:	f7ef fe30 	bl	8005ce8 <osKernelSysTick>
 8016088:	62f8      	str	r0, [r7, #44]	@ 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 801608a:	697b      	ldr	r3, [r7, #20]
 801608c:	2b00      	cmp	r3, #0
 801608e:	d017      	beq.n	80160c0 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8016090:	69fb      	ldr	r3, [r7, #28]
 8016092:	6819      	ldr	r1, [r3, #0]
 8016094:	f107 0320 	add.w	r3, r7, #32
 8016098:	697a      	ldr	r2, [r7, #20]
 801609a:	4618      	mov	r0, r3
 801609c:	f7f0 f862 	bl	8006164 <osMessageGet>

    if(event.status == osEventMessage)
 80160a0:	6a3b      	ldr	r3, [r7, #32]
 80160a2:	2b10      	cmp	r3, #16
 80160a4:	d109      	bne.n	80160ba <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 80160a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80160a8:	461a      	mov	r2, r3
 80160aa:	69bb      	ldr	r3, [r7, #24]
 80160ac:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 80160ae:	f7ef fe1b 	bl	8005ce8 <osKernelSysTick>
 80160b2:	4602      	mov	r2, r0
 80160b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80160b6:	1ad3      	subs	r3, r2, r3
 80160b8:	e019      	b.n	80160ee <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 80160ba:	f04f 33ff 	mov.w	r3, #4294967295
 80160be:	e016      	b.n	80160ee <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 80160c0:	69fb      	ldr	r3, [r7, #28]
 80160c2:	6819      	ldr	r1, [r3, #0]
 80160c4:	463b      	mov	r3, r7
 80160c6:	f04f 32ff 	mov.w	r2, #4294967295
 80160ca:	4618      	mov	r0, r3
 80160cc:	f7f0 f84a 	bl	8006164 <osMessageGet>
 80160d0:	f107 0320 	add.w	r3, r7, #32
 80160d4:	463a      	mov	r2, r7
 80160d6:	ca07      	ldmia	r2, {r0, r1, r2}
 80160d8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 80160dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80160de:	461a      	mov	r2, r3
 80160e0:	69bb      	ldr	r3, [r7, #24]
 80160e2:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 80160e4:	f7ef fe00 	bl	8005ce8 <osKernelSysTick>
 80160e8:	4602      	mov	r2, r0
 80160ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80160ec:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 80160ee:	4618      	mov	r0, r3
 80160f0:	3730      	adds	r7, #48	@ 0x30
 80160f2:	46bd      	mov	sp, r7
 80160f4:	bd80      	pop	{r7, pc}

080160f6 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 80160f6:	b580      	push	{r7, lr}
 80160f8:	b086      	sub	sp, #24
 80160fa:	af00      	add	r7, sp, #0
 80160fc:	6078      	str	r0, [r7, #4]
 80160fe:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 8016100:	687b      	ldr	r3, [r7, #4]
 8016102:	6819      	ldr	r1, [r3, #0]
 8016104:	f107 030c 	add.w	r3, r7, #12
 8016108:	2200      	movs	r2, #0
 801610a:	4618      	mov	r0, r3
 801610c:	f7f0 f82a 	bl	8006164 <osMessageGet>

  if(event.status == osEventMessage)
 8016110:	68fb      	ldr	r3, [r7, #12]
 8016112:	2b10      	cmp	r3, #16
 8016114:	d105      	bne.n	8016122 <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 8016116:	693b      	ldr	r3, [r7, #16]
 8016118:	461a      	mov	r2, r3
 801611a:	683b      	ldr	r3, [r7, #0]
 801611c:	601a      	str	r2, [r3, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 801611e:	2300      	movs	r3, #0
 8016120:	e001      	b.n	8016126 <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 8016122:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 8016126:	4618      	mov	r0, r3
 8016128:	3718      	adds	r7, #24
 801612a:	46bd      	mov	sp, r7
 801612c:	bd80      	pop	{r7, pc}

0801612e <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801612e:	b480      	push	{r7}
 8016130:	b083      	sub	sp, #12
 8016132:	af00      	add	r7, sp, #0
 8016134:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8016136:	687b      	ldr	r3, [r7, #4]
 8016138:	681b      	ldr	r3, [r3, #0]
 801613a:	2b00      	cmp	r3, #0
 801613c:	d101      	bne.n	8016142 <sys_mbox_valid+0x14>
    return 0;
 801613e:	2300      	movs	r3, #0
 8016140:	e000      	b.n	8016144 <sys_mbox_valid+0x16>
  else
    return 1;
 8016142:	2301      	movs	r3, #1
}
 8016144:	4618      	mov	r0, r3
 8016146:	370c      	adds	r7, #12
 8016148:	46bd      	mov	sp, r7
 801614a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801614e:	4770      	bx	lr

08016150 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 8016150:	b480      	push	{r7}
 8016152:	b083      	sub	sp, #12
 8016154:	af00      	add	r7, sp, #0
 8016156:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 8016158:	687b      	ldr	r3, [r7, #4]
 801615a:	2200      	movs	r2, #0
 801615c:	601a      	str	r2, [r3, #0]
}
 801615e:	bf00      	nop
 8016160:	370c      	adds	r7, #12
 8016162:	46bd      	mov	sp, r7
 8016164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016168:	4770      	bx	lr

0801616a <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 801616a:	b580      	push	{r7, lr}
 801616c:	b084      	sub	sp, #16
 801616e:	af00      	add	r7, sp, #0
 8016170:	6078      	str	r0, [r7, #4]
 8016172:	460b      	mov	r3, r1
 8016174:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 8016176:	2300      	movs	r3, #0
 8016178:	60bb      	str	r3, [r7, #8]
 801617a:	2300      	movs	r3, #0
 801617c:	60fb      	str	r3, [r7, #12]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 801617e:	f107 0308 	add.w	r3, r7, #8
 8016182:	2101      	movs	r1, #1
 8016184:	4618      	mov	r0, r3
 8016186:	f7ef febb 	bl	8005f00 <osSemaphoreCreate>
 801618a:	4602      	mov	r2, r0
 801618c:	687b      	ldr	r3, [r7, #4]
 801618e:	601a      	str	r2, [r3, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 8016190:	687b      	ldr	r3, [r7, #4]
 8016192:	681b      	ldr	r3, [r3, #0]
 8016194:	2b00      	cmp	r3, #0
 8016196:	d102      	bne.n	801619e <sys_sem_new+0x34>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8016198:	f04f 33ff 	mov.w	r3, #4294967295
 801619c:	e009      	b.n	80161b2 <sys_sem_new+0x48>
  }

  if(count == 0)	// Means it can't be taken
 801619e:	78fb      	ldrb	r3, [r7, #3]
 80161a0:	2b00      	cmp	r3, #0
 80161a2:	d105      	bne.n	80161b0 <sys_sem_new+0x46>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 80161a4:	687b      	ldr	r3, [r7, #4]
 80161a6:	681b      	ldr	r3, [r3, #0]
 80161a8:	2100      	movs	r1, #0
 80161aa:	4618      	mov	r0, r3
 80161ac:	f7ef feda 	bl	8005f64 <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 80161b0:	2300      	movs	r3, #0
}
 80161b2:	4618      	mov	r0, r3
 80161b4:	3710      	adds	r7, #16
 80161b6:	46bd      	mov	sp, r7
 80161b8:	bd80      	pop	{r7, pc}

080161ba <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 80161ba:	b580      	push	{r7, lr}
 80161bc:	b084      	sub	sp, #16
 80161be:	af00      	add	r7, sp, #0
 80161c0:	6078      	str	r0, [r7, #4]
 80161c2:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 80161c4:	f7ef fd90 	bl	8005ce8 <osKernelSysTick>
 80161c8:	60f8      	str	r0, [r7, #12]
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 80161ca:	683b      	ldr	r3, [r7, #0]
 80161cc:	2b00      	cmp	r3, #0
 80161ce:	d011      	beq.n	80161f4 <sys_arch_sem_wait+0x3a>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 80161d0:	687b      	ldr	r3, [r7, #4]
 80161d2:	681b      	ldr	r3, [r3, #0]
 80161d4:	6839      	ldr	r1, [r7, #0]
 80161d6:	4618      	mov	r0, r3
 80161d8:	f7ef fec4 	bl	8005f64 <osSemaphoreWait>
 80161dc:	4603      	mov	r3, r0
 80161de:	2b00      	cmp	r3, #0
 80161e0:	d105      	bne.n	80161ee <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 80161e2:	f7ef fd81 	bl	8005ce8 <osKernelSysTick>
 80161e6:	4602      	mov	r2, r0
 80161e8:	68fb      	ldr	r3, [r7, #12]
 80161ea:	1ad3      	subs	r3, r2, r3
 80161ec:	e012      	b.n	8016214 <sys_arch_sem_wait+0x5a>
        return (osKernelGetTickCount() - starttime);
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 80161ee:	f04f 33ff 	mov.w	r3, #4294967295
 80161f2:	e00f      	b.n	8016214 <sys_arch_sem_wait+0x5a>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 80161f4:	bf00      	nop
 80161f6:	687b      	ldr	r3, [r7, #4]
 80161f8:	681b      	ldr	r3, [r3, #0]
 80161fa:	f04f 31ff 	mov.w	r1, #4294967295
 80161fe:	4618      	mov	r0, r3
 8016200:	f7ef feb0 	bl	8005f64 <osSemaphoreWait>
 8016204:	4603      	mov	r3, r0
 8016206:	2b00      	cmp	r3, #0
 8016208:	d1f5      	bne.n	80161f6 <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 801620a:	f7ef fd6d 	bl	8005ce8 <osKernelSysTick>
 801620e:	4602      	mov	r2, r0
 8016210:	68fb      	ldr	r3, [r7, #12]
 8016212:	1ad3      	subs	r3, r2, r3
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8016214:	4618      	mov	r0, r3
 8016216:	3710      	adds	r7, #16
 8016218:	46bd      	mov	sp, r7
 801621a:	bd80      	pop	{r7, pc}

0801621c <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 801621c:	b580      	push	{r7, lr}
 801621e:	b082      	sub	sp, #8
 8016220:	af00      	add	r7, sp, #0
 8016222:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 8016224:	687b      	ldr	r3, [r7, #4]
 8016226:	681b      	ldr	r3, [r3, #0]
 8016228:	4618      	mov	r0, r3
 801622a:	f7ef fee9 	bl	8006000 <osSemaphoreRelease>
}
 801622e:	bf00      	nop
 8016230:	3708      	adds	r7, #8
 8016232:	46bd      	mov	sp, r7
 8016234:	bd80      	pop	{r7, pc}

08016236 <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 8016236:	b580      	push	{r7, lr}
 8016238:	b082      	sub	sp, #8
 801623a:	af00      	add	r7, sp, #0
 801623c:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 801623e:	687b      	ldr	r3, [r7, #4]
 8016240:	681b      	ldr	r3, [r3, #0]
 8016242:	4618      	mov	r0, r3
 8016244:	f7ef ff12 	bl	800606c <osSemaphoreDelete>
}
 8016248:	bf00      	nop
 801624a:	3708      	adds	r7, #8
 801624c:	46bd      	mov	sp, r7
 801624e:	bd80      	pop	{r7, pc}

08016250 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 8016250:	b480      	push	{r7}
 8016252:	b083      	sub	sp, #12
 8016254:	af00      	add	r7, sp, #0
 8016256:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 8016258:	687b      	ldr	r3, [r7, #4]
 801625a:	681b      	ldr	r3, [r3, #0]
 801625c:	2b00      	cmp	r3, #0
 801625e:	d101      	bne.n	8016264 <sys_sem_valid+0x14>
    return 0;
 8016260:	2300      	movs	r3, #0
 8016262:	e000      	b.n	8016266 <sys_sem_valid+0x16>
  else
    return 1;
 8016264:	2301      	movs	r3, #1
}
 8016266:	4618      	mov	r0, r3
 8016268:	370c      	adds	r7, #12
 801626a:	46bd      	mov	sp, r7
 801626c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016270:	4770      	bx	lr

08016272 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 8016272:	b480      	push	{r7}
 8016274:	b083      	sub	sp, #12
 8016276:	af00      	add	r7, sp, #0
 8016278:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 801627a:	687b      	ldr	r3, [r7, #4]
 801627c:	2200      	movs	r2, #0
 801627e:	601a      	str	r2, [r3, #0]
}
 8016280:	bf00      	nop
 8016282:	370c      	adds	r7, #12
 8016284:	46bd      	mov	sp, r7
 8016286:	f85d 7b04 	ldr.w	r7, [sp], #4
 801628a:	4770      	bx	lr

0801628c <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 801628c:	b580      	push	{r7, lr}
 801628e:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8016290:	4803      	ldr	r0, [pc, #12]	@ (80162a0 <sys_init+0x14>)
 8016292:	f7ef fd99 	bl	8005dc8 <osMutexCreate>
 8016296:	4603      	mov	r3, r0
 8016298:	4a02      	ldr	r2, [pc, #8]	@ (80162a4 <sys_init+0x18>)
 801629a:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 801629c:	bf00      	nop
 801629e:	bd80      	pop	{r7, pc}
 80162a0:	0801b148 	.word	0x0801b148
 80162a4:	2000ee9c 	.word	0x2000ee9c

080162a8 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 80162a8:	b580      	push	{r7, lr}
 80162aa:	b084      	sub	sp, #16
 80162ac:	af00      	add	r7, sp, #0
 80162ae:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 80162b0:	2300      	movs	r3, #0
 80162b2:	60bb      	str	r3, [r7, #8]
 80162b4:	2300      	movs	r3, #0
 80162b6:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 80162b8:	f107 0308 	add.w	r3, r7, #8
 80162bc:	4618      	mov	r0, r3
 80162be:	f7ef fd83 	bl	8005dc8 <osMutexCreate>
 80162c2:	4602      	mov	r2, r0
 80162c4:	687b      	ldr	r3, [r7, #4]
 80162c6:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 80162c8:	687b      	ldr	r3, [r7, #4]
 80162ca:	681b      	ldr	r3, [r3, #0]
 80162cc:	2b00      	cmp	r3, #0
 80162ce:	d102      	bne.n	80162d6 <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 80162d0:	f04f 33ff 	mov.w	r3, #4294967295
 80162d4:	e000      	b.n	80162d8 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 80162d6:	2300      	movs	r3, #0
}
 80162d8:	4618      	mov	r0, r3
 80162da:	3710      	adds	r7, #16
 80162dc:	46bd      	mov	sp, r7
 80162de:	bd80      	pop	{r7, pc}

080162e0 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 80162e0:	b580      	push	{r7, lr}
 80162e2:	b082      	sub	sp, #8
 80162e4:	af00      	add	r7, sp, #0
 80162e6:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 80162e8:	687b      	ldr	r3, [r7, #4]
 80162ea:	681b      	ldr	r3, [r3, #0]
 80162ec:	f04f 31ff 	mov.w	r1, #4294967295
 80162f0:	4618      	mov	r0, r3
 80162f2:	f7ef fd81 	bl	8005df8 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 80162f6:	bf00      	nop
 80162f8:	3708      	adds	r7, #8
 80162fa:	46bd      	mov	sp, r7
 80162fc:	bd80      	pop	{r7, pc}

080162fe <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 80162fe:	b580      	push	{r7, lr}
 8016300:	b082      	sub	sp, #8
 8016302:	af00      	add	r7, sp, #0
 8016304:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8016306:	687b      	ldr	r3, [r7, #4]
 8016308:	681b      	ldr	r3, [r3, #0]
 801630a:	4618      	mov	r0, r3
 801630c:	f7ef fdc2 	bl	8005e94 <osMutexRelease>
}
 8016310:	bf00      	nop
 8016312:	3708      	adds	r7, #8
 8016314:	46bd      	mov	sp, r7
 8016316:	bd80      	pop	{r7, pc}

08016318 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8016318:	b580      	push	{r7, lr}
 801631a:	b08c      	sub	sp, #48	@ 0x30
 801631c:	af00      	add	r7, sp, #0
 801631e:	60f8      	str	r0, [r7, #12]
 8016320:	60b9      	str	r1, [r7, #8]
 8016322:	607a      	str	r2, [r7, #4]
 8016324:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8016326:	f107 0314 	add.w	r3, r7, #20
 801632a:	2200      	movs	r2, #0
 801632c:	601a      	str	r2, [r3, #0]
 801632e:	605a      	str	r2, [r3, #4]
 8016330:	609a      	str	r2, [r3, #8]
 8016332:	60da      	str	r2, [r3, #12]
 8016334:	611a      	str	r2, [r3, #16]
 8016336:	615a      	str	r2, [r3, #20]
 8016338:	619a      	str	r2, [r3, #24]
 801633a:	68fb      	ldr	r3, [r7, #12]
 801633c:	617b      	str	r3, [r7, #20]
 801633e:	68bb      	ldr	r3, [r7, #8]
 8016340:	61bb      	str	r3, [r7, #24]
 8016342:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016344:	b21b      	sxth	r3, r3
 8016346:	83bb      	strh	r3, [r7, #28]
 8016348:	683b      	ldr	r3, [r7, #0]
 801634a:	627b      	str	r3, [r7, #36]	@ 0x24
  return osThreadCreate(&os_thread_def, arg);
 801634c:	f107 0314 	add.w	r3, r7, #20
 8016350:	6879      	ldr	r1, [r7, #4]
 8016352:	4618      	mov	r0, r3
 8016354:	f7ef fcd8 	bl	8005d08 <osThreadCreate>
 8016358:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 801635a:	4618      	mov	r0, r3
 801635c:	3730      	adds	r7, #48	@ 0x30
 801635e:	46bd      	mov	sp, r7
 8016360:	bd80      	pop	{r7, pc}
	...

08016364 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8016364:	b580      	push	{r7, lr}
 8016366:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8016368:	4b04      	ldr	r3, [pc, #16]	@ (801637c <sys_arch_protect+0x18>)
 801636a:	681b      	ldr	r3, [r3, #0]
 801636c:	f04f 31ff 	mov.w	r1, #4294967295
 8016370:	4618      	mov	r0, r3
 8016372:	f7ef fd41 	bl	8005df8 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 8016376:	2301      	movs	r3, #1
}
 8016378:	4618      	mov	r0, r3
 801637a:	bd80      	pop	{r7, pc}
 801637c:	2000ee9c 	.word	0x2000ee9c

08016380 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8016380:	b580      	push	{r7, lr}
 8016382:	b082      	sub	sp, #8
 8016384:	af00      	add	r7, sp, #0
 8016386:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8016388:	4b04      	ldr	r3, [pc, #16]	@ (801639c <sys_arch_unprotect+0x1c>)
 801638a:	681b      	ldr	r3, [r3, #0]
 801638c:	4618      	mov	r0, r3
 801638e:	f7ef fd81 	bl	8005e94 <osMutexRelease>
}
 8016392:	bf00      	nop
 8016394:	3708      	adds	r7, #8
 8016396:	46bd      	mov	sp, r7
 8016398:	bd80      	pop	{r7, pc}
 801639a:	bf00      	nop
 801639c:	2000ee9c 	.word	0x2000ee9c

080163a0 <rand>:
 80163a0:	4b16      	ldr	r3, [pc, #88]	@ (80163fc <rand+0x5c>)
 80163a2:	b510      	push	{r4, lr}
 80163a4:	681c      	ldr	r4, [r3, #0]
 80163a6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80163a8:	b9b3      	cbnz	r3, 80163d8 <rand+0x38>
 80163aa:	2018      	movs	r0, #24
 80163ac:	f000 fada 	bl	8016964 <malloc>
 80163b0:	4602      	mov	r2, r0
 80163b2:	6320      	str	r0, [r4, #48]	@ 0x30
 80163b4:	b920      	cbnz	r0, 80163c0 <rand+0x20>
 80163b6:	4b12      	ldr	r3, [pc, #72]	@ (8016400 <rand+0x60>)
 80163b8:	4812      	ldr	r0, [pc, #72]	@ (8016404 <rand+0x64>)
 80163ba:	2152      	movs	r1, #82	@ 0x52
 80163bc:	f000 fa6a 	bl	8016894 <__assert_func>
 80163c0:	4911      	ldr	r1, [pc, #68]	@ (8016408 <rand+0x68>)
 80163c2:	4b12      	ldr	r3, [pc, #72]	@ (801640c <rand+0x6c>)
 80163c4:	e9c0 1300 	strd	r1, r3, [r0]
 80163c8:	4b11      	ldr	r3, [pc, #68]	@ (8016410 <rand+0x70>)
 80163ca:	6083      	str	r3, [r0, #8]
 80163cc:	230b      	movs	r3, #11
 80163ce:	8183      	strh	r3, [r0, #12]
 80163d0:	2100      	movs	r1, #0
 80163d2:	2001      	movs	r0, #1
 80163d4:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80163d8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80163da:	480e      	ldr	r0, [pc, #56]	@ (8016414 <rand+0x74>)
 80163dc:	690b      	ldr	r3, [r1, #16]
 80163de:	694c      	ldr	r4, [r1, #20]
 80163e0:	4a0d      	ldr	r2, [pc, #52]	@ (8016418 <rand+0x78>)
 80163e2:	4358      	muls	r0, r3
 80163e4:	fb02 0004 	mla	r0, r2, r4, r0
 80163e8:	fba3 3202 	umull	r3, r2, r3, r2
 80163ec:	3301      	adds	r3, #1
 80163ee:	eb40 0002 	adc.w	r0, r0, r2
 80163f2:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80163f6:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80163fa:	bd10      	pop	{r4, pc}
 80163fc:	2000003c 	.word	0x2000003c
 8016400:	0801b150 	.word	0x0801b150
 8016404:	0801b167 	.word	0x0801b167
 8016408:	abcd330e 	.word	0xabcd330e
 801640c:	e66d1234 	.word	0xe66d1234
 8016410:	0005deec 	.word	0x0005deec
 8016414:	5851f42d 	.word	0x5851f42d
 8016418:	4c957f2d 	.word	0x4c957f2d

0801641c <std>:
 801641c:	2300      	movs	r3, #0
 801641e:	b510      	push	{r4, lr}
 8016420:	4604      	mov	r4, r0
 8016422:	e9c0 3300 	strd	r3, r3, [r0]
 8016426:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801642a:	6083      	str	r3, [r0, #8]
 801642c:	8181      	strh	r1, [r0, #12]
 801642e:	6643      	str	r3, [r0, #100]	@ 0x64
 8016430:	81c2      	strh	r2, [r0, #14]
 8016432:	6183      	str	r3, [r0, #24]
 8016434:	4619      	mov	r1, r3
 8016436:	2208      	movs	r2, #8
 8016438:	305c      	adds	r0, #92	@ 0x5c
 801643a:	f000 f950 	bl	80166de <memset>
 801643e:	4b0d      	ldr	r3, [pc, #52]	@ (8016474 <std+0x58>)
 8016440:	6263      	str	r3, [r4, #36]	@ 0x24
 8016442:	4b0d      	ldr	r3, [pc, #52]	@ (8016478 <std+0x5c>)
 8016444:	62a3      	str	r3, [r4, #40]	@ 0x28
 8016446:	4b0d      	ldr	r3, [pc, #52]	@ (801647c <std+0x60>)
 8016448:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801644a:	4b0d      	ldr	r3, [pc, #52]	@ (8016480 <std+0x64>)
 801644c:	6323      	str	r3, [r4, #48]	@ 0x30
 801644e:	4b0d      	ldr	r3, [pc, #52]	@ (8016484 <std+0x68>)
 8016450:	6224      	str	r4, [r4, #32]
 8016452:	429c      	cmp	r4, r3
 8016454:	d006      	beq.n	8016464 <std+0x48>
 8016456:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801645a:	4294      	cmp	r4, r2
 801645c:	d002      	beq.n	8016464 <std+0x48>
 801645e:	33d0      	adds	r3, #208	@ 0xd0
 8016460:	429c      	cmp	r4, r3
 8016462:	d105      	bne.n	8016470 <std+0x54>
 8016464:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8016468:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801646c:	f000 ba00 	b.w	8016870 <__retarget_lock_init_recursive>
 8016470:	bd10      	pop	{r4, pc}
 8016472:	bf00      	nop
 8016474:	08016605 	.word	0x08016605
 8016478:	08016627 	.word	0x08016627
 801647c:	0801665f 	.word	0x0801665f
 8016480:	08016683 	.word	0x08016683
 8016484:	2000eea0 	.word	0x2000eea0

08016488 <stdio_exit_handler>:
 8016488:	4a02      	ldr	r2, [pc, #8]	@ (8016494 <stdio_exit_handler+0xc>)
 801648a:	4903      	ldr	r1, [pc, #12]	@ (8016498 <stdio_exit_handler+0x10>)
 801648c:	4803      	ldr	r0, [pc, #12]	@ (801649c <stdio_exit_handler+0x14>)
 801648e:	f000 b869 	b.w	8016564 <_fwalk_sglue>
 8016492:	bf00      	nop
 8016494:	20000030 	.word	0x20000030
 8016498:	08017429 	.word	0x08017429
 801649c:	20000040 	.word	0x20000040

080164a0 <cleanup_stdio>:
 80164a0:	6841      	ldr	r1, [r0, #4]
 80164a2:	4b0c      	ldr	r3, [pc, #48]	@ (80164d4 <cleanup_stdio+0x34>)
 80164a4:	4299      	cmp	r1, r3
 80164a6:	b510      	push	{r4, lr}
 80164a8:	4604      	mov	r4, r0
 80164aa:	d001      	beq.n	80164b0 <cleanup_stdio+0x10>
 80164ac:	f000 ffbc 	bl	8017428 <_fflush_r>
 80164b0:	68a1      	ldr	r1, [r4, #8]
 80164b2:	4b09      	ldr	r3, [pc, #36]	@ (80164d8 <cleanup_stdio+0x38>)
 80164b4:	4299      	cmp	r1, r3
 80164b6:	d002      	beq.n	80164be <cleanup_stdio+0x1e>
 80164b8:	4620      	mov	r0, r4
 80164ba:	f000 ffb5 	bl	8017428 <_fflush_r>
 80164be:	68e1      	ldr	r1, [r4, #12]
 80164c0:	4b06      	ldr	r3, [pc, #24]	@ (80164dc <cleanup_stdio+0x3c>)
 80164c2:	4299      	cmp	r1, r3
 80164c4:	d004      	beq.n	80164d0 <cleanup_stdio+0x30>
 80164c6:	4620      	mov	r0, r4
 80164c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80164cc:	f000 bfac 	b.w	8017428 <_fflush_r>
 80164d0:	bd10      	pop	{r4, pc}
 80164d2:	bf00      	nop
 80164d4:	2000eea0 	.word	0x2000eea0
 80164d8:	2000ef08 	.word	0x2000ef08
 80164dc:	2000ef70 	.word	0x2000ef70

080164e0 <global_stdio_init.part.0>:
 80164e0:	b510      	push	{r4, lr}
 80164e2:	4b0b      	ldr	r3, [pc, #44]	@ (8016510 <global_stdio_init.part.0+0x30>)
 80164e4:	4c0b      	ldr	r4, [pc, #44]	@ (8016514 <global_stdio_init.part.0+0x34>)
 80164e6:	4a0c      	ldr	r2, [pc, #48]	@ (8016518 <global_stdio_init.part.0+0x38>)
 80164e8:	601a      	str	r2, [r3, #0]
 80164ea:	4620      	mov	r0, r4
 80164ec:	2200      	movs	r2, #0
 80164ee:	2104      	movs	r1, #4
 80164f0:	f7ff ff94 	bl	801641c <std>
 80164f4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80164f8:	2201      	movs	r2, #1
 80164fa:	2109      	movs	r1, #9
 80164fc:	f7ff ff8e 	bl	801641c <std>
 8016500:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8016504:	2202      	movs	r2, #2
 8016506:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801650a:	2112      	movs	r1, #18
 801650c:	f7ff bf86 	b.w	801641c <std>
 8016510:	2000efd8 	.word	0x2000efd8
 8016514:	2000eea0 	.word	0x2000eea0
 8016518:	08016489 	.word	0x08016489

0801651c <__sfp_lock_acquire>:
 801651c:	4801      	ldr	r0, [pc, #4]	@ (8016524 <__sfp_lock_acquire+0x8>)
 801651e:	f000 b9a8 	b.w	8016872 <__retarget_lock_acquire_recursive>
 8016522:	bf00      	nop
 8016524:	2000efe1 	.word	0x2000efe1

08016528 <__sfp_lock_release>:
 8016528:	4801      	ldr	r0, [pc, #4]	@ (8016530 <__sfp_lock_release+0x8>)
 801652a:	f000 b9a3 	b.w	8016874 <__retarget_lock_release_recursive>
 801652e:	bf00      	nop
 8016530:	2000efe1 	.word	0x2000efe1

08016534 <__sinit>:
 8016534:	b510      	push	{r4, lr}
 8016536:	4604      	mov	r4, r0
 8016538:	f7ff fff0 	bl	801651c <__sfp_lock_acquire>
 801653c:	6a23      	ldr	r3, [r4, #32]
 801653e:	b11b      	cbz	r3, 8016548 <__sinit+0x14>
 8016540:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016544:	f7ff bff0 	b.w	8016528 <__sfp_lock_release>
 8016548:	4b04      	ldr	r3, [pc, #16]	@ (801655c <__sinit+0x28>)
 801654a:	6223      	str	r3, [r4, #32]
 801654c:	4b04      	ldr	r3, [pc, #16]	@ (8016560 <__sinit+0x2c>)
 801654e:	681b      	ldr	r3, [r3, #0]
 8016550:	2b00      	cmp	r3, #0
 8016552:	d1f5      	bne.n	8016540 <__sinit+0xc>
 8016554:	f7ff ffc4 	bl	80164e0 <global_stdio_init.part.0>
 8016558:	e7f2      	b.n	8016540 <__sinit+0xc>
 801655a:	bf00      	nop
 801655c:	080164a1 	.word	0x080164a1
 8016560:	2000efd8 	.word	0x2000efd8

08016564 <_fwalk_sglue>:
 8016564:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016568:	4607      	mov	r7, r0
 801656a:	4688      	mov	r8, r1
 801656c:	4614      	mov	r4, r2
 801656e:	2600      	movs	r6, #0
 8016570:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8016574:	f1b9 0901 	subs.w	r9, r9, #1
 8016578:	d505      	bpl.n	8016586 <_fwalk_sglue+0x22>
 801657a:	6824      	ldr	r4, [r4, #0]
 801657c:	2c00      	cmp	r4, #0
 801657e:	d1f7      	bne.n	8016570 <_fwalk_sglue+0xc>
 8016580:	4630      	mov	r0, r6
 8016582:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016586:	89ab      	ldrh	r3, [r5, #12]
 8016588:	2b01      	cmp	r3, #1
 801658a:	d907      	bls.n	801659c <_fwalk_sglue+0x38>
 801658c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8016590:	3301      	adds	r3, #1
 8016592:	d003      	beq.n	801659c <_fwalk_sglue+0x38>
 8016594:	4629      	mov	r1, r5
 8016596:	4638      	mov	r0, r7
 8016598:	47c0      	blx	r8
 801659a:	4306      	orrs	r6, r0
 801659c:	3568      	adds	r5, #104	@ 0x68
 801659e:	e7e9      	b.n	8016574 <_fwalk_sglue+0x10>

080165a0 <iprintf>:
 80165a0:	b40f      	push	{r0, r1, r2, r3}
 80165a2:	b507      	push	{r0, r1, r2, lr}
 80165a4:	4906      	ldr	r1, [pc, #24]	@ (80165c0 <iprintf+0x20>)
 80165a6:	ab04      	add	r3, sp, #16
 80165a8:	6808      	ldr	r0, [r1, #0]
 80165aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80165ae:	6881      	ldr	r1, [r0, #8]
 80165b0:	9301      	str	r3, [sp, #4]
 80165b2:	f000 fc0f 	bl	8016dd4 <_vfiprintf_r>
 80165b6:	b003      	add	sp, #12
 80165b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80165bc:	b004      	add	sp, #16
 80165be:	4770      	bx	lr
 80165c0:	2000003c 	.word	0x2000003c

080165c4 <siprintf>:
 80165c4:	b40e      	push	{r1, r2, r3}
 80165c6:	b500      	push	{lr}
 80165c8:	b09c      	sub	sp, #112	@ 0x70
 80165ca:	ab1d      	add	r3, sp, #116	@ 0x74
 80165cc:	9002      	str	r0, [sp, #8]
 80165ce:	9006      	str	r0, [sp, #24]
 80165d0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80165d4:	4809      	ldr	r0, [pc, #36]	@ (80165fc <siprintf+0x38>)
 80165d6:	9107      	str	r1, [sp, #28]
 80165d8:	9104      	str	r1, [sp, #16]
 80165da:	4909      	ldr	r1, [pc, #36]	@ (8016600 <siprintf+0x3c>)
 80165dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80165e0:	9105      	str	r1, [sp, #20]
 80165e2:	6800      	ldr	r0, [r0, #0]
 80165e4:	9301      	str	r3, [sp, #4]
 80165e6:	a902      	add	r1, sp, #8
 80165e8:	f000 face 	bl	8016b88 <_svfiprintf_r>
 80165ec:	9b02      	ldr	r3, [sp, #8]
 80165ee:	2200      	movs	r2, #0
 80165f0:	701a      	strb	r2, [r3, #0]
 80165f2:	b01c      	add	sp, #112	@ 0x70
 80165f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80165f8:	b003      	add	sp, #12
 80165fa:	4770      	bx	lr
 80165fc:	2000003c 	.word	0x2000003c
 8016600:	ffff0208 	.word	0xffff0208

08016604 <__sread>:
 8016604:	b510      	push	{r4, lr}
 8016606:	460c      	mov	r4, r1
 8016608:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801660c:	f000 f8e8 	bl	80167e0 <_read_r>
 8016610:	2800      	cmp	r0, #0
 8016612:	bfab      	itete	ge
 8016614:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8016616:	89a3      	ldrhlt	r3, [r4, #12]
 8016618:	181b      	addge	r3, r3, r0
 801661a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801661e:	bfac      	ite	ge
 8016620:	6563      	strge	r3, [r4, #84]	@ 0x54
 8016622:	81a3      	strhlt	r3, [r4, #12]
 8016624:	bd10      	pop	{r4, pc}

08016626 <__swrite>:
 8016626:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801662a:	461f      	mov	r7, r3
 801662c:	898b      	ldrh	r3, [r1, #12]
 801662e:	05db      	lsls	r3, r3, #23
 8016630:	4605      	mov	r5, r0
 8016632:	460c      	mov	r4, r1
 8016634:	4616      	mov	r6, r2
 8016636:	d505      	bpl.n	8016644 <__swrite+0x1e>
 8016638:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801663c:	2302      	movs	r3, #2
 801663e:	2200      	movs	r2, #0
 8016640:	f000 f8bc 	bl	80167bc <_lseek_r>
 8016644:	89a3      	ldrh	r3, [r4, #12]
 8016646:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801664a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801664e:	81a3      	strh	r3, [r4, #12]
 8016650:	4632      	mov	r2, r6
 8016652:	463b      	mov	r3, r7
 8016654:	4628      	mov	r0, r5
 8016656:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801665a:	f000 b8d3 	b.w	8016804 <_write_r>

0801665e <__sseek>:
 801665e:	b510      	push	{r4, lr}
 8016660:	460c      	mov	r4, r1
 8016662:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016666:	f000 f8a9 	bl	80167bc <_lseek_r>
 801666a:	1c43      	adds	r3, r0, #1
 801666c:	89a3      	ldrh	r3, [r4, #12]
 801666e:	bf15      	itete	ne
 8016670:	6560      	strne	r0, [r4, #84]	@ 0x54
 8016672:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8016676:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801667a:	81a3      	strheq	r3, [r4, #12]
 801667c:	bf18      	it	ne
 801667e:	81a3      	strhne	r3, [r4, #12]
 8016680:	bd10      	pop	{r4, pc}

08016682 <__sclose>:
 8016682:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016686:	f000 b833 	b.w	80166f0 <_close_r>

0801668a <memcmp>:
 801668a:	b510      	push	{r4, lr}
 801668c:	3901      	subs	r1, #1
 801668e:	4402      	add	r2, r0
 8016690:	4290      	cmp	r0, r2
 8016692:	d101      	bne.n	8016698 <memcmp+0xe>
 8016694:	2000      	movs	r0, #0
 8016696:	e005      	b.n	80166a4 <memcmp+0x1a>
 8016698:	7803      	ldrb	r3, [r0, #0]
 801669a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801669e:	42a3      	cmp	r3, r4
 80166a0:	d001      	beq.n	80166a6 <memcmp+0x1c>
 80166a2:	1b18      	subs	r0, r3, r4
 80166a4:	bd10      	pop	{r4, pc}
 80166a6:	3001      	adds	r0, #1
 80166a8:	e7f2      	b.n	8016690 <memcmp+0x6>

080166aa <memmove>:
 80166aa:	4288      	cmp	r0, r1
 80166ac:	b510      	push	{r4, lr}
 80166ae:	eb01 0402 	add.w	r4, r1, r2
 80166b2:	d902      	bls.n	80166ba <memmove+0x10>
 80166b4:	4284      	cmp	r4, r0
 80166b6:	4623      	mov	r3, r4
 80166b8:	d807      	bhi.n	80166ca <memmove+0x20>
 80166ba:	1e43      	subs	r3, r0, #1
 80166bc:	42a1      	cmp	r1, r4
 80166be:	d008      	beq.n	80166d2 <memmove+0x28>
 80166c0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80166c4:	f803 2f01 	strb.w	r2, [r3, #1]!
 80166c8:	e7f8      	b.n	80166bc <memmove+0x12>
 80166ca:	4402      	add	r2, r0
 80166cc:	4601      	mov	r1, r0
 80166ce:	428a      	cmp	r2, r1
 80166d0:	d100      	bne.n	80166d4 <memmove+0x2a>
 80166d2:	bd10      	pop	{r4, pc}
 80166d4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80166d8:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80166dc:	e7f7      	b.n	80166ce <memmove+0x24>

080166de <memset>:
 80166de:	4402      	add	r2, r0
 80166e0:	4603      	mov	r3, r0
 80166e2:	4293      	cmp	r3, r2
 80166e4:	d100      	bne.n	80166e8 <memset+0xa>
 80166e6:	4770      	bx	lr
 80166e8:	f803 1b01 	strb.w	r1, [r3], #1
 80166ec:	e7f9      	b.n	80166e2 <memset+0x4>
	...

080166f0 <_close_r>:
 80166f0:	b538      	push	{r3, r4, r5, lr}
 80166f2:	4d06      	ldr	r5, [pc, #24]	@ (801670c <_close_r+0x1c>)
 80166f4:	2300      	movs	r3, #0
 80166f6:	4604      	mov	r4, r0
 80166f8:	4608      	mov	r0, r1
 80166fa:	602b      	str	r3, [r5, #0]
 80166fc:	f7eb f838 	bl	8001770 <_close>
 8016700:	1c43      	adds	r3, r0, #1
 8016702:	d102      	bne.n	801670a <_close_r+0x1a>
 8016704:	682b      	ldr	r3, [r5, #0]
 8016706:	b103      	cbz	r3, 801670a <_close_r+0x1a>
 8016708:	6023      	str	r3, [r4, #0]
 801670a:	bd38      	pop	{r3, r4, r5, pc}
 801670c:	2000efdc 	.word	0x2000efdc

08016710 <_reclaim_reent>:
 8016710:	4b29      	ldr	r3, [pc, #164]	@ (80167b8 <_reclaim_reent+0xa8>)
 8016712:	681b      	ldr	r3, [r3, #0]
 8016714:	4283      	cmp	r3, r0
 8016716:	b570      	push	{r4, r5, r6, lr}
 8016718:	4604      	mov	r4, r0
 801671a:	d04b      	beq.n	80167b4 <_reclaim_reent+0xa4>
 801671c:	69c3      	ldr	r3, [r0, #28]
 801671e:	b1ab      	cbz	r3, 801674c <_reclaim_reent+0x3c>
 8016720:	68db      	ldr	r3, [r3, #12]
 8016722:	b16b      	cbz	r3, 8016740 <_reclaim_reent+0x30>
 8016724:	2500      	movs	r5, #0
 8016726:	69e3      	ldr	r3, [r4, #28]
 8016728:	68db      	ldr	r3, [r3, #12]
 801672a:	5959      	ldr	r1, [r3, r5]
 801672c:	2900      	cmp	r1, #0
 801672e:	d13b      	bne.n	80167a8 <_reclaim_reent+0x98>
 8016730:	3504      	adds	r5, #4
 8016732:	2d80      	cmp	r5, #128	@ 0x80
 8016734:	d1f7      	bne.n	8016726 <_reclaim_reent+0x16>
 8016736:	69e3      	ldr	r3, [r4, #28]
 8016738:	4620      	mov	r0, r4
 801673a:	68d9      	ldr	r1, [r3, #12]
 801673c:	f000 f8c8 	bl	80168d0 <_free_r>
 8016740:	69e3      	ldr	r3, [r4, #28]
 8016742:	6819      	ldr	r1, [r3, #0]
 8016744:	b111      	cbz	r1, 801674c <_reclaim_reent+0x3c>
 8016746:	4620      	mov	r0, r4
 8016748:	f000 f8c2 	bl	80168d0 <_free_r>
 801674c:	6961      	ldr	r1, [r4, #20]
 801674e:	b111      	cbz	r1, 8016756 <_reclaim_reent+0x46>
 8016750:	4620      	mov	r0, r4
 8016752:	f000 f8bd 	bl	80168d0 <_free_r>
 8016756:	69e1      	ldr	r1, [r4, #28]
 8016758:	b111      	cbz	r1, 8016760 <_reclaim_reent+0x50>
 801675a:	4620      	mov	r0, r4
 801675c:	f000 f8b8 	bl	80168d0 <_free_r>
 8016760:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8016762:	b111      	cbz	r1, 801676a <_reclaim_reent+0x5a>
 8016764:	4620      	mov	r0, r4
 8016766:	f000 f8b3 	bl	80168d0 <_free_r>
 801676a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801676c:	b111      	cbz	r1, 8016774 <_reclaim_reent+0x64>
 801676e:	4620      	mov	r0, r4
 8016770:	f000 f8ae 	bl	80168d0 <_free_r>
 8016774:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8016776:	b111      	cbz	r1, 801677e <_reclaim_reent+0x6e>
 8016778:	4620      	mov	r0, r4
 801677a:	f000 f8a9 	bl	80168d0 <_free_r>
 801677e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8016780:	b111      	cbz	r1, 8016788 <_reclaim_reent+0x78>
 8016782:	4620      	mov	r0, r4
 8016784:	f000 f8a4 	bl	80168d0 <_free_r>
 8016788:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 801678a:	b111      	cbz	r1, 8016792 <_reclaim_reent+0x82>
 801678c:	4620      	mov	r0, r4
 801678e:	f000 f89f 	bl	80168d0 <_free_r>
 8016792:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8016794:	b111      	cbz	r1, 801679c <_reclaim_reent+0x8c>
 8016796:	4620      	mov	r0, r4
 8016798:	f000 f89a 	bl	80168d0 <_free_r>
 801679c:	6a23      	ldr	r3, [r4, #32]
 801679e:	b14b      	cbz	r3, 80167b4 <_reclaim_reent+0xa4>
 80167a0:	4620      	mov	r0, r4
 80167a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80167a6:	4718      	bx	r3
 80167a8:	680e      	ldr	r6, [r1, #0]
 80167aa:	4620      	mov	r0, r4
 80167ac:	f000 f890 	bl	80168d0 <_free_r>
 80167b0:	4631      	mov	r1, r6
 80167b2:	e7bb      	b.n	801672c <_reclaim_reent+0x1c>
 80167b4:	bd70      	pop	{r4, r5, r6, pc}
 80167b6:	bf00      	nop
 80167b8:	2000003c 	.word	0x2000003c

080167bc <_lseek_r>:
 80167bc:	b538      	push	{r3, r4, r5, lr}
 80167be:	4d07      	ldr	r5, [pc, #28]	@ (80167dc <_lseek_r+0x20>)
 80167c0:	4604      	mov	r4, r0
 80167c2:	4608      	mov	r0, r1
 80167c4:	4611      	mov	r1, r2
 80167c6:	2200      	movs	r2, #0
 80167c8:	602a      	str	r2, [r5, #0]
 80167ca:	461a      	mov	r2, r3
 80167cc:	f7ea fff7 	bl	80017be <_lseek>
 80167d0:	1c43      	adds	r3, r0, #1
 80167d2:	d102      	bne.n	80167da <_lseek_r+0x1e>
 80167d4:	682b      	ldr	r3, [r5, #0]
 80167d6:	b103      	cbz	r3, 80167da <_lseek_r+0x1e>
 80167d8:	6023      	str	r3, [r4, #0]
 80167da:	bd38      	pop	{r3, r4, r5, pc}
 80167dc:	2000efdc 	.word	0x2000efdc

080167e0 <_read_r>:
 80167e0:	b538      	push	{r3, r4, r5, lr}
 80167e2:	4d07      	ldr	r5, [pc, #28]	@ (8016800 <_read_r+0x20>)
 80167e4:	4604      	mov	r4, r0
 80167e6:	4608      	mov	r0, r1
 80167e8:	4611      	mov	r1, r2
 80167ea:	2200      	movs	r2, #0
 80167ec:	602a      	str	r2, [r5, #0]
 80167ee:	461a      	mov	r2, r3
 80167f0:	f7ea ff85 	bl	80016fe <_read>
 80167f4:	1c43      	adds	r3, r0, #1
 80167f6:	d102      	bne.n	80167fe <_read_r+0x1e>
 80167f8:	682b      	ldr	r3, [r5, #0]
 80167fa:	b103      	cbz	r3, 80167fe <_read_r+0x1e>
 80167fc:	6023      	str	r3, [r4, #0]
 80167fe:	bd38      	pop	{r3, r4, r5, pc}
 8016800:	2000efdc 	.word	0x2000efdc

08016804 <_write_r>:
 8016804:	b538      	push	{r3, r4, r5, lr}
 8016806:	4d07      	ldr	r5, [pc, #28]	@ (8016824 <_write_r+0x20>)
 8016808:	4604      	mov	r4, r0
 801680a:	4608      	mov	r0, r1
 801680c:	4611      	mov	r1, r2
 801680e:	2200      	movs	r2, #0
 8016810:	602a      	str	r2, [r5, #0]
 8016812:	461a      	mov	r2, r3
 8016814:	f7ea ff90 	bl	8001738 <_write>
 8016818:	1c43      	adds	r3, r0, #1
 801681a:	d102      	bne.n	8016822 <_write_r+0x1e>
 801681c:	682b      	ldr	r3, [r5, #0]
 801681e:	b103      	cbz	r3, 8016822 <_write_r+0x1e>
 8016820:	6023      	str	r3, [r4, #0]
 8016822:	bd38      	pop	{r3, r4, r5, pc}
 8016824:	2000efdc 	.word	0x2000efdc

08016828 <__libc_init_array>:
 8016828:	b570      	push	{r4, r5, r6, lr}
 801682a:	4d0d      	ldr	r5, [pc, #52]	@ (8016860 <__libc_init_array+0x38>)
 801682c:	4c0d      	ldr	r4, [pc, #52]	@ (8016864 <__libc_init_array+0x3c>)
 801682e:	1b64      	subs	r4, r4, r5
 8016830:	10a4      	asrs	r4, r4, #2
 8016832:	2600      	movs	r6, #0
 8016834:	42a6      	cmp	r6, r4
 8016836:	d109      	bne.n	801684c <__libc_init_array+0x24>
 8016838:	4d0b      	ldr	r5, [pc, #44]	@ (8016868 <__libc_init_array+0x40>)
 801683a:	4c0c      	ldr	r4, [pc, #48]	@ (801686c <__libc_init_array+0x44>)
 801683c:	f000 ffd8 	bl	80177f0 <_init>
 8016840:	1b64      	subs	r4, r4, r5
 8016842:	10a4      	asrs	r4, r4, #2
 8016844:	2600      	movs	r6, #0
 8016846:	42a6      	cmp	r6, r4
 8016848:	d105      	bne.n	8016856 <__libc_init_array+0x2e>
 801684a:	bd70      	pop	{r4, r5, r6, pc}
 801684c:	f855 3b04 	ldr.w	r3, [r5], #4
 8016850:	4798      	blx	r3
 8016852:	3601      	adds	r6, #1
 8016854:	e7ee      	b.n	8016834 <__libc_init_array+0xc>
 8016856:	f855 3b04 	ldr.w	r3, [r5], #4
 801685a:	4798      	blx	r3
 801685c:	3601      	adds	r6, #1
 801685e:	e7f2      	b.n	8016846 <__libc_init_array+0x1e>
 8016860:	0801b238 	.word	0x0801b238
 8016864:	0801b238 	.word	0x0801b238
 8016868:	0801b238 	.word	0x0801b238
 801686c:	0801b23c 	.word	0x0801b23c

08016870 <__retarget_lock_init_recursive>:
 8016870:	4770      	bx	lr

08016872 <__retarget_lock_acquire_recursive>:
 8016872:	4770      	bx	lr

08016874 <__retarget_lock_release_recursive>:
 8016874:	4770      	bx	lr

08016876 <memcpy>:
 8016876:	440a      	add	r2, r1
 8016878:	4291      	cmp	r1, r2
 801687a:	f100 33ff 	add.w	r3, r0, #4294967295
 801687e:	d100      	bne.n	8016882 <memcpy+0xc>
 8016880:	4770      	bx	lr
 8016882:	b510      	push	{r4, lr}
 8016884:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016888:	f803 4f01 	strb.w	r4, [r3, #1]!
 801688c:	4291      	cmp	r1, r2
 801688e:	d1f9      	bne.n	8016884 <memcpy+0xe>
 8016890:	bd10      	pop	{r4, pc}
	...

08016894 <__assert_func>:
 8016894:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8016896:	4614      	mov	r4, r2
 8016898:	461a      	mov	r2, r3
 801689a:	4b09      	ldr	r3, [pc, #36]	@ (80168c0 <__assert_func+0x2c>)
 801689c:	681b      	ldr	r3, [r3, #0]
 801689e:	4605      	mov	r5, r0
 80168a0:	68d8      	ldr	r0, [r3, #12]
 80168a2:	b954      	cbnz	r4, 80168ba <__assert_func+0x26>
 80168a4:	4b07      	ldr	r3, [pc, #28]	@ (80168c4 <__assert_func+0x30>)
 80168a6:	461c      	mov	r4, r3
 80168a8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80168ac:	9100      	str	r1, [sp, #0]
 80168ae:	462b      	mov	r3, r5
 80168b0:	4905      	ldr	r1, [pc, #20]	@ (80168c8 <__assert_func+0x34>)
 80168b2:	f000 fde1 	bl	8017478 <fiprintf>
 80168b6:	f000 fe95 	bl	80175e4 <abort>
 80168ba:	4b04      	ldr	r3, [pc, #16]	@ (80168cc <__assert_func+0x38>)
 80168bc:	e7f4      	b.n	80168a8 <__assert_func+0x14>
 80168be:	bf00      	nop
 80168c0:	2000003c 	.word	0x2000003c
 80168c4:	0801b1fa 	.word	0x0801b1fa
 80168c8:	0801b1cc 	.word	0x0801b1cc
 80168cc:	0801b1bf 	.word	0x0801b1bf

080168d0 <_free_r>:
 80168d0:	b538      	push	{r3, r4, r5, lr}
 80168d2:	4605      	mov	r5, r0
 80168d4:	2900      	cmp	r1, #0
 80168d6:	d041      	beq.n	801695c <_free_r+0x8c>
 80168d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80168dc:	1f0c      	subs	r4, r1, #4
 80168de:	2b00      	cmp	r3, #0
 80168e0:	bfb8      	it	lt
 80168e2:	18e4      	addlt	r4, r4, r3
 80168e4:	f000 f8e8 	bl	8016ab8 <__malloc_lock>
 80168e8:	4a1d      	ldr	r2, [pc, #116]	@ (8016960 <_free_r+0x90>)
 80168ea:	6813      	ldr	r3, [r2, #0]
 80168ec:	b933      	cbnz	r3, 80168fc <_free_r+0x2c>
 80168ee:	6063      	str	r3, [r4, #4]
 80168f0:	6014      	str	r4, [r2, #0]
 80168f2:	4628      	mov	r0, r5
 80168f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80168f8:	f000 b8e4 	b.w	8016ac4 <__malloc_unlock>
 80168fc:	42a3      	cmp	r3, r4
 80168fe:	d908      	bls.n	8016912 <_free_r+0x42>
 8016900:	6820      	ldr	r0, [r4, #0]
 8016902:	1821      	adds	r1, r4, r0
 8016904:	428b      	cmp	r3, r1
 8016906:	bf01      	itttt	eq
 8016908:	6819      	ldreq	r1, [r3, #0]
 801690a:	685b      	ldreq	r3, [r3, #4]
 801690c:	1809      	addeq	r1, r1, r0
 801690e:	6021      	streq	r1, [r4, #0]
 8016910:	e7ed      	b.n	80168ee <_free_r+0x1e>
 8016912:	461a      	mov	r2, r3
 8016914:	685b      	ldr	r3, [r3, #4]
 8016916:	b10b      	cbz	r3, 801691c <_free_r+0x4c>
 8016918:	42a3      	cmp	r3, r4
 801691a:	d9fa      	bls.n	8016912 <_free_r+0x42>
 801691c:	6811      	ldr	r1, [r2, #0]
 801691e:	1850      	adds	r0, r2, r1
 8016920:	42a0      	cmp	r0, r4
 8016922:	d10b      	bne.n	801693c <_free_r+0x6c>
 8016924:	6820      	ldr	r0, [r4, #0]
 8016926:	4401      	add	r1, r0
 8016928:	1850      	adds	r0, r2, r1
 801692a:	4283      	cmp	r3, r0
 801692c:	6011      	str	r1, [r2, #0]
 801692e:	d1e0      	bne.n	80168f2 <_free_r+0x22>
 8016930:	6818      	ldr	r0, [r3, #0]
 8016932:	685b      	ldr	r3, [r3, #4]
 8016934:	6053      	str	r3, [r2, #4]
 8016936:	4408      	add	r0, r1
 8016938:	6010      	str	r0, [r2, #0]
 801693a:	e7da      	b.n	80168f2 <_free_r+0x22>
 801693c:	d902      	bls.n	8016944 <_free_r+0x74>
 801693e:	230c      	movs	r3, #12
 8016940:	602b      	str	r3, [r5, #0]
 8016942:	e7d6      	b.n	80168f2 <_free_r+0x22>
 8016944:	6820      	ldr	r0, [r4, #0]
 8016946:	1821      	adds	r1, r4, r0
 8016948:	428b      	cmp	r3, r1
 801694a:	bf04      	itt	eq
 801694c:	6819      	ldreq	r1, [r3, #0]
 801694e:	685b      	ldreq	r3, [r3, #4]
 8016950:	6063      	str	r3, [r4, #4]
 8016952:	bf04      	itt	eq
 8016954:	1809      	addeq	r1, r1, r0
 8016956:	6021      	streq	r1, [r4, #0]
 8016958:	6054      	str	r4, [r2, #4]
 801695a:	e7ca      	b.n	80168f2 <_free_r+0x22>
 801695c:	bd38      	pop	{r3, r4, r5, pc}
 801695e:	bf00      	nop
 8016960:	2000efe8 	.word	0x2000efe8

08016964 <malloc>:
 8016964:	4b02      	ldr	r3, [pc, #8]	@ (8016970 <malloc+0xc>)
 8016966:	4601      	mov	r1, r0
 8016968:	6818      	ldr	r0, [r3, #0]
 801696a:	f000 b825 	b.w	80169b8 <_malloc_r>
 801696e:	bf00      	nop
 8016970:	2000003c 	.word	0x2000003c

08016974 <sbrk_aligned>:
 8016974:	b570      	push	{r4, r5, r6, lr}
 8016976:	4e0f      	ldr	r6, [pc, #60]	@ (80169b4 <sbrk_aligned+0x40>)
 8016978:	460c      	mov	r4, r1
 801697a:	6831      	ldr	r1, [r6, #0]
 801697c:	4605      	mov	r5, r0
 801697e:	b911      	cbnz	r1, 8016986 <sbrk_aligned+0x12>
 8016980:	f000 fe20 	bl	80175c4 <_sbrk_r>
 8016984:	6030      	str	r0, [r6, #0]
 8016986:	4621      	mov	r1, r4
 8016988:	4628      	mov	r0, r5
 801698a:	f000 fe1b 	bl	80175c4 <_sbrk_r>
 801698e:	1c43      	adds	r3, r0, #1
 8016990:	d103      	bne.n	801699a <sbrk_aligned+0x26>
 8016992:	f04f 34ff 	mov.w	r4, #4294967295
 8016996:	4620      	mov	r0, r4
 8016998:	bd70      	pop	{r4, r5, r6, pc}
 801699a:	1cc4      	adds	r4, r0, #3
 801699c:	f024 0403 	bic.w	r4, r4, #3
 80169a0:	42a0      	cmp	r0, r4
 80169a2:	d0f8      	beq.n	8016996 <sbrk_aligned+0x22>
 80169a4:	1a21      	subs	r1, r4, r0
 80169a6:	4628      	mov	r0, r5
 80169a8:	f000 fe0c 	bl	80175c4 <_sbrk_r>
 80169ac:	3001      	adds	r0, #1
 80169ae:	d1f2      	bne.n	8016996 <sbrk_aligned+0x22>
 80169b0:	e7ef      	b.n	8016992 <sbrk_aligned+0x1e>
 80169b2:	bf00      	nop
 80169b4:	2000efe4 	.word	0x2000efe4

080169b8 <_malloc_r>:
 80169b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80169bc:	1ccd      	adds	r5, r1, #3
 80169be:	f025 0503 	bic.w	r5, r5, #3
 80169c2:	3508      	adds	r5, #8
 80169c4:	2d0c      	cmp	r5, #12
 80169c6:	bf38      	it	cc
 80169c8:	250c      	movcc	r5, #12
 80169ca:	2d00      	cmp	r5, #0
 80169cc:	4606      	mov	r6, r0
 80169ce:	db01      	blt.n	80169d4 <_malloc_r+0x1c>
 80169d0:	42a9      	cmp	r1, r5
 80169d2:	d904      	bls.n	80169de <_malloc_r+0x26>
 80169d4:	230c      	movs	r3, #12
 80169d6:	6033      	str	r3, [r6, #0]
 80169d8:	2000      	movs	r0, #0
 80169da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80169de:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8016ab4 <_malloc_r+0xfc>
 80169e2:	f000 f869 	bl	8016ab8 <__malloc_lock>
 80169e6:	f8d8 3000 	ldr.w	r3, [r8]
 80169ea:	461c      	mov	r4, r3
 80169ec:	bb44      	cbnz	r4, 8016a40 <_malloc_r+0x88>
 80169ee:	4629      	mov	r1, r5
 80169f0:	4630      	mov	r0, r6
 80169f2:	f7ff ffbf 	bl	8016974 <sbrk_aligned>
 80169f6:	1c43      	adds	r3, r0, #1
 80169f8:	4604      	mov	r4, r0
 80169fa:	d158      	bne.n	8016aae <_malloc_r+0xf6>
 80169fc:	f8d8 4000 	ldr.w	r4, [r8]
 8016a00:	4627      	mov	r7, r4
 8016a02:	2f00      	cmp	r7, #0
 8016a04:	d143      	bne.n	8016a8e <_malloc_r+0xd6>
 8016a06:	2c00      	cmp	r4, #0
 8016a08:	d04b      	beq.n	8016aa2 <_malloc_r+0xea>
 8016a0a:	6823      	ldr	r3, [r4, #0]
 8016a0c:	4639      	mov	r1, r7
 8016a0e:	4630      	mov	r0, r6
 8016a10:	eb04 0903 	add.w	r9, r4, r3
 8016a14:	f000 fdd6 	bl	80175c4 <_sbrk_r>
 8016a18:	4581      	cmp	r9, r0
 8016a1a:	d142      	bne.n	8016aa2 <_malloc_r+0xea>
 8016a1c:	6821      	ldr	r1, [r4, #0]
 8016a1e:	1a6d      	subs	r5, r5, r1
 8016a20:	4629      	mov	r1, r5
 8016a22:	4630      	mov	r0, r6
 8016a24:	f7ff ffa6 	bl	8016974 <sbrk_aligned>
 8016a28:	3001      	adds	r0, #1
 8016a2a:	d03a      	beq.n	8016aa2 <_malloc_r+0xea>
 8016a2c:	6823      	ldr	r3, [r4, #0]
 8016a2e:	442b      	add	r3, r5
 8016a30:	6023      	str	r3, [r4, #0]
 8016a32:	f8d8 3000 	ldr.w	r3, [r8]
 8016a36:	685a      	ldr	r2, [r3, #4]
 8016a38:	bb62      	cbnz	r2, 8016a94 <_malloc_r+0xdc>
 8016a3a:	f8c8 7000 	str.w	r7, [r8]
 8016a3e:	e00f      	b.n	8016a60 <_malloc_r+0xa8>
 8016a40:	6822      	ldr	r2, [r4, #0]
 8016a42:	1b52      	subs	r2, r2, r5
 8016a44:	d420      	bmi.n	8016a88 <_malloc_r+0xd0>
 8016a46:	2a0b      	cmp	r2, #11
 8016a48:	d917      	bls.n	8016a7a <_malloc_r+0xc2>
 8016a4a:	1961      	adds	r1, r4, r5
 8016a4c:	42a3      	cmp	r3, r4
 8016a4e:	6025      	str	r5, [r4, #0]
 8016a50:	bf18      	it	ne
 8016a52:	6059      	strne	r1, [r3, #4]
 8016a54:	6863      	ldr	r3, [r4, #4]
 8016a56:	bf08      	it	eq
 8016a58:	f8c8 1000 	streq.w	r1, [r8]
 8016a5c:	5162      	str	r2, [r4, r5]
 8016a5e:	604b      	str	r3, [r1, #4]
 8016a60:	4630      	mov	r0, r6
 8016a62:	f000 f82f 	bl	8016ac4 <__malloc_unlock>
 8016a66:	f104 000b 	add.w	r0, r4, #11
 8016a6a:	1d23      	adds	r3, r4, #4
 8016a6c:	f020 0007 	bic.w	r0, r0, #7
 8016a70:	1ac2      	subs	r2, r0, r3
 8016a72:	bf1c      	itt	ne
 8016a74:	1a1b      	subne	r3, r3, r0
 8016a76:	50a3      	strne	r3, [r4, r2]
 8016a78:	e7af      	b.n	80169da <_malloc_r+0x22>
 8016a7a:	6862      	ldr	r2, [r4, #4]
 8016a7c:	42a3      	cmp	r3, r4
 8016a7e:	bf0c      	ite	eq
 8016a80:	f8c8 2000 	streq.w	r2, [r8]
 8016a84:	605a      	strne	r2, [r3, #4]
 8016a86:	e7eb      	b.n	8016a60 <_malloc_r+0xa8>
 8016a88:	4623      	mov	r3, r4
 8016a8a:	6864      	ldr	r4, [r4, #4]
 8016a8c:	e7ae      	b.n	80169ec <_malloc_r+0x34>
 8016a8e:	463c      	mov	r4, r7
 8016a90:	687f      	ldr	r7, [r7, #4]
 8016a92:	e7b6      	b.n	8016a02 <_malloc_r+0x4a>
 8016a94:	461a      	mov	r2, r3
 8016a96:	685b      	ldr	r3, [r3, #4]
 8016a98:	42a3      	cmp	r3, r4
 8016a9a:	d1fb      	bne.n	8016a94 <_malloc_r+0xdc>
 8016a9c:	2300      	movs	r3, #0
 8016a9e:	6053      	str	r3, [r2, #4]
 8016aa0:	e7de      	b.n	8016a60 <_malloc_r+0xa8>
 8016aa2:	230c      	movs	r3, #12
 8016aa4:	6033      	str	r3, [r6, #0]
 8016aa6:	4630      	mov	r0, r6
 8016aa8:	f000 f80c 	bl	8016ac4 <__malloc_unlock>
 8016aac:	e794      	b.n	80169d8 <_malloc_r+0x20>
 8016aae:	6005      	str	r5, [r0, #0]
 8016ab0:	e7d6      	b.n	8016a60 <_malloc_r+0xa8>
 8016ab2:	bf00      	nop
 8016ab4:	2000efe8 	.word	0x2000efe8

08016ab8 <__malloc_lock>:
 8016ab8:	4801      	ldr	r0, [pc, #4]	@ (8016ac0 <__malloc_lock+0x8>)
 8016aba:	f7ff beda 	b.w	8016872 <__retarget_lock_acquire_recursive>
 8016abe:	bf00      	nop
 8016ac0:	2000efe0 	.word	0x2000efe0

08016ac4 <__malloc_unlock>:
 8016ac4:	4801      	ldr	r0, [pc, #4]	@ (8016acc <__malloc_unlock+0x8>)
 8016ac6:	f7ff bed5 	b.w	8016874 <__retarget_lock_release_recursive>
 8016aca:	bf00      	nop
 8016acc:	2000efe0 	.word	0x2000efe0

08016ad0 <__ssputs_r>:
 8016ad0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016ad4:	688e      	ldr	r6, [r1, #8]
 8016ad6:	461f      	mov	r7, r3
 8016ad8:	42be      	cmp	r6, r7
 8016ada:	680b      	ldr	r3, [r1, #0]
 8016adc:	4682      	mov	sl, r0
 8016ade:	460c      	mov	r4, r1
 8016ae0:	4690      	mov	r8, r2
 8016ae2:	d82d      	bhi.n	8016b40 <__ssputs_r+0x70>
 8016ae4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8016ae8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8016aec:	d026      	beq.n	8016b3c <__ssputs_r+0x6c>
 8016aee:	6965      	ldr	r5, [r4, #20]
 8016af0:	6909      	ldr	r1, [r1, #16]
 8016af2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016af6:	eba3 0901 	sub.w	r9, r3, r1
 8016afa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8016afe:	1c7b      	adds	r3, r7, #1
 8016b00:	444b      	add	r3, r9
 8016b02:	106d      	asrs	r5, r5, #1
 8016b04:	429d      	cmp	r5, r3
 8016b06:	bf38      	it	cc
 8016b08:	461d      	movcc	r5, r3
 8016b0a:	0553      	lsls	r3, r2, #21
 8016b0c:	d527      	bpl.n	8016b5e <__ssputs_r+0x8e>
 8016b0e:	4629      	mov	r1, r5
 8016b10:	f7ff ff52 	bl	80169b8 <_malloc_r>
 8016b14:	4606      	mov	r6, r0
 8016b16:	b360      	cbz	r0, 8016b72 <__ssputs_r+0xa2>
 8016b18:	6921      	ldr	r1, [r4, #16]
 8016b1a:	464a      	mov	r2, r9
 8016b1c:	f7ff feab 	bl	8016876 <memcpy>
 8016b20:	89a3      	ldrh	r3, [r4, #12]
 8016b22:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8016b26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8016b2a:	81a3      	strh	r3, [r4, #12]
 8016b2c:	6126      	str	r6, [r4, #16]
 8016b2e:	6165      	str	r5, [r4, #20]
 8016b30:	444e      	add	r6, r9
 8016b32:	eba5 0509 	sub.w	r5, r5, r9
 8016b36:	6026      	str	r6, [r4, #0]
 8016b38:	60a5      	str	r5, [r4, #8]
 8016b3a:	463e      	mov	r6, r7
 8016b3c:	42be      	cmp	r6, r7
 8016b3e:	d900      	bls.n	8016b42 <__ssputs_r+0x72>
 8016b40:	463e      	mov	r6, r7
 8016b42:	6820      	ldr	r0, [r4, #0]
 8016b44:	4632      	mov	r2, r6
 8016b46:	4641      	mov	r1, r8
 8016b48:	f7ff fdaf 	bl	80166aa <memmove>
 8016b4c:	68a3      	ldr	r3, [r4, #8]
 8016b4e:	1b9b      	subs	r3, r3, r6
 8016b50:	60a3      	str	r3, [r4, #8]
 8016b52:	6823      	ldr	r3, [r4, #0]
 8016b54:	4433      	add	r3, r6
 8016b56:	6023      	str	r3, [r4, #0]
 8016b58:	2000      	movs	r0, #0
 8016b5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016b5e:	462a      	mov	r2, r5
 8016b60:	f000 fd47 	bl	80175f2 <_realloc_r>
 8016b64:	4606      	mov	r6, r0
 8016b66:	2800      	cmp	r0, #0
 8016b68:	d1e0      	bne.n	8016b2c <__ssputs_r+0x5c>
 8016b6a:	6921      	ldr	r1, [r4, #16]
 8016b6c:	4650      	mov	r0, sl
 8016b6e:	f7ff feaf 	bl	80168d0 <_free_r>
 8016b72:	230c      	movs	r3, #12
 8016b74:	f8ca 3000 	str.w	r3, [sl]
 8016b78:	89a3      	ldrh	r3, [r4, #12]
 8016b7a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016b7e:	81a3      	strh	r3, [r4, #12]
 8016b80:	f04f 30ff 	mov.w	r0, #4294967295
 8016b84:	e7e9      	b.n	8016b5a <__ssputs_r+0x8a>
	...

08016b88 <_svfiprintf_r>:
 8016b88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016b8c:	4698      	mov	r8, r3
 8016b8e:	898b      	ldrh	r3, [r1, #12]
 8016b90:	061b      	lsls	r3, r3, #24
 8016b92:	b09d      	sub	sp, #116	@ 0x74
 8016b94:	4607      	mov	r7, r0
 8016b96:	460d      	mov	r5, r1
 8016b98:	4614      	mov	r4, r2
 8016b9a:	d510      	bpl.n	8016bbe <_svfiprintf_r+0x36>
 8016b9c:	690b      	ldr	r3, [r1, #16]
 8016b9e:	b973      	cbnz	r3, 8016bbe <_svfiprintf_r+0x36>
 8016ba0:	2140      	movs	r1, #64	@ 0x40
 8016ba2:	f7ff ff09 	bl	80169b8 <_malloc_r>
 8016ba6:	6028      	str	r0, [r5, #0]
 8016ba8:	6128      	str	r0, [r5, #16]
 8016baa:	b930      	cbnz	r0, 8016bba <_svfiprintf_r+0x32>
 8016bac:	230c      	movs	r3, #12
 8016bae:	603b      	str	r3, [r7, #0]
 8016bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8016bb4:	b01d      	add	sp, #116	@ 0x74
 8016bb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016bba:	2340      	movs	r3, #64	@ 0x40
 8016bbc:	616b      	str	r3, [r5, #20]
 8016bbe:	2300      	movs	r3, #0
 8016bc0:	9309      	str	r3, [sp, #36]	@ 0x24
 8016bc2:	2320      	movs	r3, #32
 8016bc4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8016bc8:	f8cd 800c 	str.w	r8, [sp, #12]
 8016bcc:	2330      	movs	r3, #48	@ 0x30
 8016bce:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8016d6c <_svfiprintf_r+0x1e4>
 8016bd2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8016bd6:	f04f 0901 	mov.w	r9, #1
 8016bda:	4623      	mov	r3, r4
 8016bdc:	469a      	mov	sl, r3
 8016bde:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016be2:	b10a      	cbz	r2, 8016be8 <_svfiprintf_r+0x60>
 8016be4:	2a25      	cmp	r2, #37	@ 0x25
 8016be6:	d1f9      	bne.n	8016bdc <_svfiprintf_r+0x54>
 8016be8:	ebba 0b04 	subs.w	fp, sl, r4
 8016bec:	d00b      	beq.n	8016c06 <_svfiprintf_r+0x7e>
 8016bee:	465b      	mov	r3, fp
 8016bf0:	4622      	mov	r2, r4
 8016bf2:	4629      	mov	r1, r5
 8016bf4:	4638      	mov	r0, r7
 8016bf6:	f7ff ff6b 	bl	8016ad0 <__ssputs_r>
 8016bfa:	3001      	adds	r0, #1
 8016bfc:	f000 80a7 	beq.w	8016d4e <_svfiprintf_r+0x1c6>
 8016c00:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016c02:	445a      	add	r2, fp
 8016c04:	9209      	str	r2, [sp, #36]	@ 0x24
 8016c06:	f89a 3000 	ldrb.w	r3, [sl]
 8016c0a:	2b00      	cmp	r3, #0
 8016c0c:	f000 809f 	beq.w	8016d4e <_svfiprintf_r+0x1c6>
 8016c10:	2300      	movs	r3, #0
 8016c12:	f04f 32ff 	mov.w	r2, #4294967295
 8016c16:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016c1a:	f10a 0a01 	add.w	sl, sl, #1
 8016c1e:	9304      	str	r3, [sp, #16]
 8016c20:	9307      	str	r3, [sp, #28]
 8016c22:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8016c26:	931a      	str	r3, [sp, #104]	@ 0x68
 8016c28:	4654      	mov	r4, sl
 8016c2a:	2205      	movs	r2, #5
 8016c2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016c30:	484e      	ldr	r0, [pc, #312]	@ (8016d6c <_svfiprintf_r+0x1e4>)
 8016c32:	f7e9 fae5 	bl	8000200 <memchr>
 8016c36:	9a04      	ldr	r2, [sp, #16]
 8016c38:	b9d8      	cbnz	r0, 8016c72 <_svfiprintf_r+0xea>
 8016c3a:	06d0      	lsls	r0, r2, #27
 8016c3c:	bf44      	itt	mi
 8016c3e:	2320      	movmi	r3, #32
 8016c40:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8016c44:	0711      	lsls	r1, r2, #28
 8016c46:	bf44      	itt	mi
 8016c48:	232b      	movmi	r3, #43	@ 0x2b
 8016c4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8016c4e:	f89a 3000 	ldrb.w	r3, [sl]
 8016c52:	2b2a      	cmp	r3, #42	@ 0x2a
 8016c54:	d015      	beq.n	8016c82 <_svfiprintf_r+0xfa>
 8016c56:	9a07      	ldr	r2, [sp, #28]
 8016c58:	4654      	mov	r4, sl
 8016c5a:	2000      	movs	r0, #0
 8016c5c:	f04f 0c0a 	mov.w	ip, #10
 8016c60:	4621      	mov	r1, r4
 8016c62:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016c66:	3b30      	subs	r3, #48	@ 0x30
 8016c68:	2b09      	cmp	r3, #9
 8016c6a:	d94b      	bls.n	8016d04 <_svfiprintf_r+0x17c>
 8016c6c:	b1b0      	cbz	r0, 8016c9c <_svfiprintf_r+0x114>
 8016c6e:	9207      	str	r2, [sp, #28]
 8016c70:	e014      	b.n	8016c9c <_svfiprintf_r+0x114>
 8016c72:	eba0 0308 	sub.w	r3, r0, r8
 8016c76:	fa09 f303 	lsl.w	r3, r9, r3
 8016c7a:	4313      	orrs	r3, r2
 8016c7c:	9304      	str	r3, [sp, #16]
 8016c7e:	46a2      	mov	sl, r4
 8016c80:	e7d2      	b.n	8016c28 <_svfiprintf_r+0xa0>
 8016c82:	9b03      	ldr	r3, [sp, #12]
 8016c84:	1d19      	adds	r1, r3, #4
 8016c86:	681b      	ldr	r3, [r3, #0]
 8016c88:	9103      	str	r1, [sp, #12]
 8016c8a:	2b00      	cmp	r3, #0
 8016c8c:	bfbb      	ittet	lt
 8016c8e:	425b      	neglt	r3, r3
 8016c90:	f042 0202 	orrlt.w	r2, r2, #2
 8016c94:	9307      	strge	r3, [sp, #28]
 8016c96:	9307      	strlt	r3, [sp, #28]
 8016c98:	bfb8      	it	lt
 8016c9a:	9204      	strlt	r2, [sp, #16]
 8016c9c:	7823      	ldrb	r3, [r4, #0]
 8016c9e:	2b2e      	cmp	r3, #46	@ 0x2e
 8016ca0:	d10a      	bne.n	8016cb8 <_svfiprintf_r+0x130>
 8016ca2:	7863      	ldrb	r3, [r4, #1]
 8016ca4:	2b2a      	cmp	r3, #42	@ 0x2a
 8016ca6:	d132      	bne.n	8016d0e <_svfiprintf_r+0x186>
 8016ca8:	9b03      	ldr	r3, [sp, #12]
 8016caa:	1d1a      	adds	r2, r3, #4
 8016cac:	681b      	ldr	r3, [r3, #0]
 8016cae:	9203      	str	r2, [sp, #12]
 8016cb0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8016cb4:	3402      	adds	r4, #2
 8016cb6:	9305      	str	r3, [sp, #20]
 8016cb8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8016d7c <_svfiprintf_r+0x1f4>
 8016cbc:	7821      	ldrb	r1, [r4, #0]
 8016cbe:	2203      	movs	r2, #3
 8016cc0:	4650      	mov	r0, sl
 8016cc2:	f7e9 fa9d 	bl	8000200 <memchr>
 8016cc6:	b138      	cbz	r0, 8016cd8 <_svfiprintf_r+0x150>
 8016cc8:	9b04      	ldr	r3, [sp, #16]
 8016cca:	eba0 000a 	sub.w	r0, r0, sl
 8016cce:	2240      	movs	r2, #64	@ 0x40
 8016cd0:	4082      	lsls	r2, r0
 8016cd2:	4313      	orrs	r3, r2
 8016cd4:	3401      	adds	r4, #1
 8016cd6:	9304      	str	r3, [sp, #16]
 8016cd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016cdc:	4824      	ldr	r0, [pc, #144]	@ (8016d70 <_svfiprintf_r+0x1e8>)
 8016cde:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8016ce2:	2206      	movs	r2, #6
 8016ce4:	f7e9 fa8c 	bl	8000200 <memchr>
 8016ce8:	2800      	cmp	r0, #0
 8016cea:	d036      	beq.n	8016d5a <_svfiprintf_r+0x1d2>
 8016cec:	4b21      	ldr	r3, [pc, #132]	@ (8016d74 <_svfiprintf_r+0x1ec>)
 8016cee:	bb1b      	cbnz	r3, 8016d38 <_svfiprintf_r+0x1b0>
 8016cf0:	9b03      	ldr	r3, [sp, #12]
 8016cf2:	3307      	adds	r3, #7
 8016cf4:	f023 0307 	bic.w	r3, r3, #7
 8016cf8:	3308      	adds	r3, #8
 8016cfa:	9303      	str	r3, [sp, #12]
 8016cfc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016cfe:	4433      	add	r3, r6
 8016d00:	9309      	str	r3, [sp, #36]	@ 0x24
 8016d02:	e76a      	b.n	8016bda <_svfiprintf_r+0x52>
 8016d04:	fb0c 3202 	mla	r2, ip, r2, r3
 8016d08:	460c      	mov	r4, r1
 8016d0a:	2001      	movs	r0, #1
 8016d0c:	e7a8      	b.n	8016c60 <_svfiprintf_r+0xd8>
 8016d0e:	2300      	movs	r3, #0
 8016d10:	3401      	adds	r4, #1
 8016d12:	9305      	str	r3, [sp, #20]
 8016d14:	4619      	mov	r1, r3
 8016d16:	f04f 0c0a 	mov.w	ip, #10
 8016d1a:	4620      	mov	r0, r4
 8016d1c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016d20:	3a30      	subs	r2, #48	@ 0x30
 8016d22:	2a09      	cmp	r2, #9
 8016d24:	d903      	bls.n	8016d2e <_svfiprintf_r+0x1a6>
 8016d26:	2b00      	cmp	r3, #0
 8016d28:	d0c6      	beq.n	8016cb8 <_svfiprintf_r+0x130>
 8016d2a:	9105      	str	r1, [sp, #20]
 8016d2c:	e7c4      	b.n	8016cb8 <_svfiprintf_r+0x130>
 8016d2e:	fb0c 2101 	mla	r1, ip, r1, r2
 8016d32:	4604      	mov	r4, r0
 8016d34:	2301      	movs	r3, #1
 8016d36:	e7f0      	b.n	8016d1a <_svfiprintf_r+0x192>
 8016d38:	ab03      	add	r3, sp, #12
 8016d3a:	9300      	str	r3, [sp, #0]
 8016d3c:	462a      	mov	r2, r5
 8016d3e:	4b0e      	ldr	r3, [pc, #56]	@ (8016d78 <_svfiprintf_r+0x1f0>)
 8016d40:	a904      	add	r1, sp, #16
 8016d42:	4638      	mov	r0, r7
 8016d44:	f3af 8000 	nop.w
 8016d48:	1c42      	adds	r2, r0, #1
 8016d4a:	4606      	mov	r6, r0
 8016d4c:	d1d6      	bne.n	8016cfc <_svfiprintf_r+0x174>
 8016d4e:	89ab      	ldrh	r3, [r5, #12]
 8016d50:	065b      	lsls	r3, r3, #25
 8016d52:	f53f af2d 	bmi.w	8016bb0 <_svfiprintf_r+0x28>
 8016d56:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8016d58:	e72c      	b.n	8016bb4 <_svfiprintf_r+0x2c>
 8016d5a:	ab03      	add	r3, sp, #12
 8016d5c:	9300      	str	r3, [sp, #0]
 8016d5e:	462a      	mov	r2, r5
 8016d60:	4b05      	ldr	r3, [pc, #20]	@ (8016d78 <_svfiprintf_r+0x1f0>)
 8016d62:	a904      	add	r1, sp, #16
 8016d64:	4638      	mov	r0, r7
 8016d66:	f000 f9bb 	bl	80170e0 <_printf_i>
 8016d6a:	e7ed      	b.n	8016d48 <_svfiprintf_r+0x1c0>
 8016d6c:	0801b1fb 	.word	0x0801b1fb
 8016d70:	0801b205 	.word	0x0801b205
 8016d74:	00000000 	.word	0x00000000
 8016d78:	08016ad1 	.word	0x08016ad1
 8016d7c:	0801b201 	.word	0x0801b201

08016d80 <__sfputc_r>:
 8016d80:	6893      	ldr	r3, [r2, #8]
 8016d82:	3b01      	subs	r3, #1
 8016d84:	2b00      	cmp	r3, #0
 8016d86:	b410      	push	{r4}
 8016d88:	6093      	str	r3, [r2, #8]
 8016d8a:	da08      	bge.n	8016d9e <__sfputc_r+0x1e>
 8016d8c:	6994      	ldr	r4, [r2, #24]
 8016d8e:	42a3      	cmp	r3, r4
 8016d90:	db01      	blt.n	8016d96 <__sfputc_r+0x16>
 8016d92:	290a      	cmp	r1, #10
 8016d94:	d103      	bne.n	8016d9e <__sfputc_r+0x1e>
 8016d96:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016d9a:	f000 bb7f 	b.w	801749c <__swbuf_r>
 8016d9e:	6813      	ldr	r3, [r2, #0]
 8016da0:	1c58      	adds	r0, r3, #1
 8016da2:	6010      	str	r0, [r2, #0]
 8016da4:	7019      	strb	r1, [r3, #0]
 8016da6:	4608      	mov	r0, r1
 8016da8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016dac:	4770      	bx	lr

08016dae <__sfputs_r>:
 8016dae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016db0:	4606      	mov	r6, r0
 8016db2:	460f      	mov	r7, r1
 8016db4:	4614      	mov	r4, r2
 8016db6:	18d5      	adds	r5, r2, r3
 8016db8:	42ac      	cmp	r4, r5
 8016dba:	d101      	bne.n	8016dc0 <__sfputs_r+0x12>
 8016dbc:	2000      	movs	r0, #0
 8016dbe:	e007      	b.n	8016dd0 <__sfputs_r+0x22>
 8016dc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016dc4:	463a      	mov	r2, r7
 8016dc6:	4630      	mov	r0, r6
 8016dc8:	f7ff ffda 	bl	8016d80 <__sfputc_r>
 8016dcc:	1c43      	adds	r3, r0, #1
 8016dce:	d1f3      	bne.n	8016db8 <__sfputs_r+0xa>
 8016dd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08016dd4 <_vfiprintf_r>:
 8016dd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016dd8:	460d      	mov	r5, r1
 8016dda:	b09d      	sub	sp, #116	@ 0x74
 8016ddc:	4614      	mov	r4, r2
 8016dde:	4698      	mov	r8, r3
 8016de0:	4606      	mov	r6, r0
 8016de2:	b118      	cbz	r0, 8016dec <_vfiprintf_r+0x18>
 8016de4:	6a03      	ldr	r3, [r0, #32]
 8016de6:	b90b      	cbnz	r3, 8016dec <_vfiprintf_r+0x18>
 8016de8:	f7ff fba4 	bl	8016534 <__sinit>
 8016dec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8016dee:	07d9      	lsls	r1, r3, #31
 8016df0:	d405      	bmi.n	8016dfe <_vfiprintf_r+0x2a>
 8016df2:	89ab      	ldrh	r3, [r5, #12]
 8016df4:	059a      	lsls	r2, r3, #22
 8016df6:	d402      	bmi.n	8016dfe <_vfiprintf_r+0x2a>
 8016df8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8016dfa:	f7ff fd3a 	bl	8016872 <__retarget_lock_acquire_recursive>
 8016dfe:	89ab      	ldrh	r3, [r5, #12]
 8016e00:	071b      	lsls	r3, r3, #28
 8016e02:	d501      	bpl.n	8016e08 <_vfiprintf_r+0x34>
 8016e04:	692b      	ldr	r3, [r5, #16]
 8016e06:	b99b      	cbnz	r3, 8016e30 <_vfiprintf_r+0x5c>
 8016e08:	4629      	mov	r1, r5
 8016e0a:	4630      	mov	r0, r6
 8016e0c:	f000 fb84 	bl	8017518 <__swsetup_r>
 8016e10:	b170      	cbz	r0, 8016e30 <_vfiprintf_r+0x5c>
 8016e12:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8016e14:	07dc      	lsls	r4, r3, #31
 8016e16:	d504      	bpl.n	8016e22 <_vfiprintf_r+0x4e>
 8016e18:	f04f 30ff 	mov.w	r0, #4294967295
 8016e1c:	b01d      	add	sp, #116	@ 0x74
 8016e1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016e22:	89ab      	ldrh	r3, [r5, #12]
 8016e24:	0598      	lsls	r0, r3, #22
 8016e26:	d4f7      	bmi.n	8016e18 <_vfiprintf_r+0x44>
 8016e28:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8016e2a:	f7ff fd23 	bl	8016874 <__retarget_lock_release_recursive>
 8016e2e:	e7f3      	b.n	8016e18 <_vfiprintf_r+0x44>
 8016e30:	2300      	movs	r3, #0
 8016e32:	9309      	str	r3, [sp, #36]	@ 0x24
 8016e34:	2320      	movs	r3, #32
 8016e36:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8016e3a:	f8cd 800c 	str.w	r8, [sp, #12]
 8016e3e:	2330      	movs	r3, #48	@ 0x30
 8016e40:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8016ff0 <_vfiprintf_r+0x21c>
 8016e44:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8016e48:	f04f 0901 	mov.w	r9, #1
 8016e4c:	4623      	mov	r3, r4
 8016e4e:	469a      	mov	sl, r3
 8016e50:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016e54:	b10a      	cbz	r2, 8016e5a <_vfiprintf_r+0x86>
 8016e56:	2a25      	cmp	r2, #37	@ 0x25
 8016e58:	d1f9      	bne.n	8016e4e <_vfiprintf_r+0x7a>
 8016e5a:	ebba 0b04 	subs.w	fp, sl, r4
 8016e5e:	d00b      	beq.n	8016e78 <_vfiprintf_r+0xa4>
 8016e60:	465b      	mov	r3, fp
 8016e62:	4622      	mov	r2, r4
 8016e64:	4629      	mov	r1, r5
 8016e66:	4630      	mov	r0, r6
 8016e68:	f7ff ffa1 	bl	8016dae <__sfputs_r>
 8016e6c:	3001      	adds	r0, #1
 8016e6e:	f000 80a7 	beq.w	8016fc0 <_vfiprintf_r+0x1ec>
 8016e72:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016e74:	445a      	add	r2, fp
 8016e76:	9209      	str	r2, [sp, #36]	@ 0x24
 8016e78:	f89a 3000 	ldrb.w	r3, [sl]
 8016e7c:	2b00      	cmp	r3, #0
 8016e7e:	f000 809f 	beq.w	8016fc0 <_vfiprintf_r+0x1ec>
 8016e82:	2300      	movs	r3, #0
 8016e84:	f04f 32ff 	mov.w	r2, #4294967295
 8016e88:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016e8c:	f10a 0a01 	add.w	sl, sl, #1
 8016e90:	9304      	str	r3, [sp, #16]
 8016e92:	9307      	str	r3, [sp, #28]
 8016e94:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8016e98:	931a      	str	r3, [sp, #104]	@ 0x68
 8016e9a:	4654      	mov	r4, sl
 8016e9c:	2205      	movs	r2, #5
 8016e9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016ea2:	4853      	ldr	r0, [pc, #332]	@ (8016ff0 <_vfiprintf_r+0x21c>)
 8016ea4:	f7e9 f9ac 	bl	8000200 <memchr>
 8016ea8:	9a04      	ldr	r2, [sp, #16]
 8016eaa:	b9d8      	cbnz	r0, 8016ee4 <_vfiprintf_r+0x110>
 8016eac:	06d1      	lsls	r1, r2, #27
 8016eae:	bf44      	itt	mi
 8016eb0:	2320      	movmi	r3, #32
 8016eb2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8016eb6:	0713      	lsls	r3, r2, #28
 8016eb8:	bf44      	itt	mi
 8016eba:	232b      	movmi	r3, #43	@ 0x2b
 8016ebc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8016ec0:	f89a 3000 	ldrb.w	r3, [sl]
 8016ec4:	2b2a      	cmp	r3, #42	@ 0x2a
 8016ec6:	d015      	beq.n	8016ef4 <_vfiprintf_r+0x120>
 8016ec8:	9a07      	ldr	r2, [sp, #28]
 8016eca:	4654      	mov	r4, sl
 8016ecc:	2000      	movs	r0, #0
 8016ece:	f04f 0c0a 	mov.w	ip, #10
 8016ed2:	4621      	mov	r1, r4
 8016ed4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016ed8:	3b30      	subs	r3, #48	@ 0x30
 8016eda:	2b09      	cmp	r3, #9
 8016edc:	d94b      	bls.n	8016f76 <_vfiprintf_r+0x1a2>
 8016ede:	b1b0      	cbz	r0, 8016f0e <_vfiprintf_r+0x13a>
 8016ee0:	9207      	str	r2, [sp, #28]
 8016ee2:	e014      	b.n	8016f0e <_vfiprintf_r+0x13a>
 8016ee4:	eba0 0308 	sub.w	r3, r0, r8
 8016ee8:	fa09 f303 	lsl.w	r3, r9, r3
 8016eec:	4313      	orrs	r3, r2
 8016eee:	9304      	str	r3, [sp, #16]
 8016ef0:	46a2      	mov	sl, r4
 8016ef2:	e7d2      	b.n	8016e9a <_vfiprintf_r+0xc6>
 8016ef4:	9b03      	ldr	r3, [sp, #12]
 8016ef6:	1d19      	adds	r1, r3, #4
 8016ef8:	681b      	ldr	r3, [r3, #0]
 8016efa:	9103      	str	r1, [sp, #12]
 8016efc:	2b00      	cmp	r3, #0
 8016efe:	bfbb      	ittet	lt
 8016f00:	425b      	neglt	r3, r3
 8016f02:	f042 0202 	orrlt.w	r2, r2, #2
 8016f06:	9307      	strge	r3, [sp, #28]
 8016f08:	9307      	strlt	r3, [sp, #28]
 8016f0a:	bfb8      	it	lt
 8016f0c:	9204      	strlt	r2, [sp, #16]
 8016f0e:	7823      	ldrb	r3, [r4, #0]
 8016f10:	2b2e      	cmp	r3, #46	@ 0x2e
 8016f12:	d10a      	bne.n	8016f2a <_vfiprintf_r+0x156>
 8016f14:	7863      	ldrb	r3, [r4, #1]
 8016f16:	2b2a      	cmp	r3, #42	@ 0x2a
 8016f18:	d132      	bne.n	8016f80 <_vfiprintf_r+0x1ac>
 8016f1a:	9b03      	ldr	r3, [sp, #12]
 8016f1c:	1d1a      	adds	r2, r3, #4
 8016f1e:	681b      	ldr	r3, [r3, #0]
 8016f20:	9203      	str	r2, [sp, #12]
 8016f22:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8016f26:	3402      	adds	r4, #2
 8016f28:	9305      	str	r3, [sp, #20]
 8016f2a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8017000 <_vfiprintf_r+0x22c>
 8016f2e:	7821      	ldrb	r1, [r4, #0]
 8016f30:	2203      	movs	r2, #3
 8016f32:	4650      	mov	r0, sl
 8016f34:	f7e9 f964 	bl	8000200 <memchr>
 8016f38:	b138      	cbz	r0, 8016f4a <_vfiprintf_r+0x176>
 8016f3a:	9b04      	ldr	r3, [sp, #16]
 8016f3c:	eba0 000a 	sub.w	r0, r0, sl
 8016f40:	2240      	movs	r2, #64	@ 0x40
 8016f42:	4082      	lsls	r2, r0
 8016f44:	4313      	orrs	r3, r2
 8016f46:	3401      	adds	r4, #1
 8016f48:	9304      	str	r3, [sp, #16]
 8016f4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016f4e:	4829      	ldr	r0, [pc, #164]	@ (8016ff4 <_vfiprintf_r+0x220>)
 8016f50:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8016f54:	2206      	movs	r2, #6
 8016f56:	f7e9 f953 	bl	8000200 <memchr>
 8016f5a:	2800      	cmp	r0, #0
 8016f5c:	d03f      	beq.n	8016fde <_vfiprintf_r+0x20a>
 8016f5e:	4b26      	ldr	r3, [pc, #152]	@ (8016ff8 <_vfiprintf_r+0x224>)
 8016f60:	bb1b      	cbnz	r3, 8016faa <_vfiprintf_r+0x1d6>
 8016f62:	9b03      	ldr	r3, [sp, #12]
 8016f64:	3307      	adds	r3, #7
 8016f66:	f023 0307 	bic.w	r3, r3, #7
 8016f6a:	3308      	adds	r3, #8
 8016f6c:	9303      	str	r3, [sp, #12]
 8016f6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016f70:	443b      	add	r3, r7
 8016f72:	9309      	str	r3, [sp, #36]	@ 0x24
 8016f74:	e76a      	b.n	8016e4c <_vfiprintf_r+0x78>
 8016f76:	fb0c 3202 	mla	r2, ip, r2, r3
 8016f7a:	460c      	mov	r4, r1
 8016f7c:	2001      	movs	r0, #1
 8016f7e:	e7a8      	b.n	8016ed2 <_vfiprintf_r+0xfe>
 8016f80:	2300      	movs	r3, #0
 8016f82:	3401      	adds	r4, #1
 8016f84:	9305      	str	r3, [sp, #20]
 8016f86:	4619      	mov	r1, r3
 8016f88:	f04f 0c0a 	mov.w	ip, #10
 8016f8c:	4620      	mov	r0, r4
 8016f8e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016f92:	3a30      	subs	r2, #48	@ 0x30
 8016f94:	2a09      	cmp	r2, #9
 8016f96:	d903      	bls.n	8016fa0 <_vfiprintf_r+0x1cc>
 8016f98:	2b00      	cmp	r3, #0
 8016f9a:	d0c6      	beq.n	8016f2a <_vfiprintf_r+0x156>
 8016f9c:	9105      	str	r1, [sp, #20]
 8016f9e:	e7c4      	b.n	8016f2a <_vfiprintf_r+0x156>
 8016fa0:	fb0c 2101 	mla	r1, ip, r1, r2
 8016fa4:	4604      	mov	r4, r0
 8016fa6:	2301      	movs	r3, #1
 8016fa8:	e7f0      	b.n	8016f8c <_vfiprintf_r+0x1b8>
 8016faa:	ab03      	add	r3, sp, #12
 8016fac:	9300      	str	r3, [sp, #0]
 8016fae:	462a      	mov	r2, r5
 8016fb0:	4b12      	ldr	r3, [pc, #72]	@ (8016ffc <_vfiprintf_r+0x228>)
 8016fb2:	a904      	add	r1, sp, #16
 8016fb4:	4630      	mov	r0, r6
 8016fb6:	f3af 8000 	nop.w
 8016fba:	4607      	mov	r7, r0
 8016fbc:	1c78      	adds	r0, r7, #1
 8016fbe:	d1d6      	bne.n	8016f6e <_vfiprintf_r+0x19a>
 8016fc0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8016fc2:	07d9      	lsls	r1, r3, #31
 8016fc4:	d405      	bmi.n	8016fd2 <_vfiprintf_r+0x1fe>
 8016fc6:	89ab      	ldrh	r3, [r5, #12]
 8016fc8:	059a      	lsls	r2, r3, #22
 8016fca:	d402      	bmi.n	8016fd2 <_vfiprintf_r+0x1fe>
 8016fcc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8016fce:	f7ff fc51 	bl	8016874 <__retarget_lock_release_recursive>
 8016fd2:	89ab      	ldrh	r3, [r5, #12]
 8016fd4:	065b      	lsls	r3, r3, #25
 8016fd6:	f53f af1f 	bmi.w	8016e18 <_vfiprintf_r+0x44>
 8016fda:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8016fdc:	e71e      	b.n	8016e1c <_vfiprintf_r+0x48>
 8016fde:	ab03      	add	r3, sp, #12
 8016fe0:	9300      	str	r3, [sp, #0]
 8016fe2:	462a      	mov	r2, r5
 8016fe4:	4b05      	ldr	r3, [pc, #20]	@ (8016ffc <_vfiprintf_r+0x228>)
 8016fe6:	a904      	add	r1, sp, #16
 8016fe8:	4630      	mov	r0, r6
 8016fea:	f000 f879 	bl	80170e0 <_printf_i>
 8016fee:	e7e4      	b.n	8016fba <_vfiprintf_r+0x1e6>
 8016ff0:	0801b1fb 	.word	0x0801b1fb
 8016ff4:	0801b205 	.word	0x0801b205
 8016ff8:	00000000 	.word	0x00000000
 8016ffc:	08016daf 	.word	0x08016daf
 8017000:	0801b201 	.word	0x0801b201

08017004 <_printf_common>:
 8017004:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017008:	4616      	mov	r6, r2
 801700a:	4698      	mov	r8, r3
 801700c:	688a      	ldr	r2, [r1, #8]
 801700e:	690b      	ldr	r3, [r1, #16]
 8017010:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8017014:	4293      	cmp	r3, r2
 8017016:	bfb8      	it	lt
 8017018:	4613      	movlt	r3, r2
 801701a:	6033      	str	r3, [r6, #0]
 801701c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8017020:	4607      	mov	r7, r0
 8017022:	460c      	mov	r4, r1
 8017024:	b10a      	cbz	r2, 801702a <_printf_common+0x26>
 8017026:	3301      	adds	r3, #1
 8017028:	6033      	str	r3, [r6, #0]
 801702a:	6823      	ldr	r3, [r4, #0]
 801702c:	0699      	lsls	r1, r3, #26
 801702e:	bf42      	ittt	mi
 8017030:	6833      	ldrmi	r3, [r6, #0]
 8017032:	3302      	addmi	r3, #2
 8017034:	6033      	strmi	r3, [r6, #0]
 8017036:	6825      	ldr	r5, [r4, #0]
 8017038:	f015 0506 	ands.w	r5, r5, #6
 801703c:	d106      	bne.n	801704c <_printf_common+0x48>
 801703e:	f104 0a19 	add.w	sl, r4, #25
 8017042:	68e3      	ldr	r3, [r4, #12]
 8017044:	6832      	ldr	r2, [r6, #0]
 8017046:	1a9b      	subs	r3, r3, r2
 8017048:	42ab      	cmp	r3, r5
 801704a:	dc26      	bgt.n	801709a <_printf_common+0x96>
 801704c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8017050:	6822      	ldr	r2, [r4, #0]
 8017052:	3b00      	subs	r3, #0
 8017054:	bf18      	it	ne
 8017056:	2301      	movne	r3, #1
 8017058:	0692      	lsls	r2, r2, #26
 801705a:	d42b      	bmi.n	80170b4 <_printf_common+0xb0>
 801705c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8017060:	4641      	mov	r1, r8
 8017062:	4638      	mov	r0, r7
 8017064:	47c8      	blx	r9
 8017066:	3001      	adds	r0, #1
 8017068:	d01e      	beq.n	80170a8 <_printf_common+0xa4>
 801706a:	6823      	ldr	r3, [r4, #0]
 801706c:	6922      	ldr	r2, [r4, #16]
 801706e:	f003 0306 	and.w	r3, r3, #6
 8017072:	2b04      	cmp	r3, #4
 8017074:	bf02      	ittt	eq
 8017076:	68e5      	ldreq	r5, [r4, #12]
 8017078:	6833      	ldreq	r3, [r6, #0]
 801707a:	1aed      	subeq	r5, r5, r3
 801707c:	68a3      	ldr	r3, [r4, #8]
 801707e:	bf0c      	ite	eq
 8017080:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8017084:	2500      	movne	r5, #0
 8017086:	4293      	cmp	r3, r2
 8017088:	bfc4      	itt	gt
 801708a:	1a9b      	subgt	r3, r3, r2
 801708c:	18ed      	addgt	r5, r5, r3
 801708e:	2600      	movs	r6, #0
 8017090:	341a      	adds	r4, #26
 8017092:	42b5      	cmp	r5, r6
 8017094:	d11a      	bne.n	80170cc <_printf_common+0xc8>
 8017096:	2000      	movs	r0, #0
 8017098:	e008      	b.n	80170ac <_printf_common+0xa8>
 801709a:	2301      	movs	r3, #1
 801709c:	4652      	mov	r2, sl
 801709e:	4641      	mov	r1, r8
 80170a0:	4638      	mov	r0, r7
 80170a2:	47c8      	blx	r9
 80170a4:	3001      	adds	r0, #1
 80170a6:	d103      	bne.n	80170b0 <_printf_common+0xac>
 80170a8:	f04f 30ff 	mov.w	r0, #4294967295
 80170ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80170b0:	3501      	adds	r5, #1
 80170b2:	e7c6      	b.n	8017042 <_printf_common+0x3e>
 80170b4:	18e1      	adds	r1, r4, r3
 80170b6:	1c5a      	adds	r2, r3, #1
 80170b8:	2030      	movs	r0, #48	@ 0x30
 80170ba:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80170be:	4422      	add	r2, r4
 80170c0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80170c4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80170c8:	3302      	adds	r3, #2
 80170ca:	e7c7      	b.n	801705c <_printf_common+0x58>
 80170cc:	2301      	movs	r3, #1
 80170ce:	4622      	mov	r2, r4
 80170d0:	4641      	mov	r1, r8
 80170d2:	4638      	mov	r0, r7
 80170d4:	47c8      	blx	r9
 80170d6:	3001      	adds	r0, #1
 80170d8:	d0e6      	beq.n	80170a8 <_printf_common+0xa4>
 80170da:	3601      	adds	r6, #1
 80170dc:	e7d9      	b.n	8017092 <_printf_common+0x8e>
	...

080170e0 <_printf_i>:
 80170e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80170e4:	7e0f      	ldrb	r7, [r1, #24]
 80170e6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80170e8:	2f78      	cmp	r7, #120	@ 0x78
 80170ea:	4691      	mov	r9, r2
 80170ec:	4680      	mov	r8, r0
 80170ee:	460c      	mov	r4, r1
 80170f0:	469a      	mov	sl, r3
 80170f2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80170f6:	d807      	bhi.n	8017108 <_printf_i+0x28>
 80170f8:	2f62      	cmp	r7, #98	@ 0x62
 80170fa:	d80a      	bhi.n	8017112 <_printf_i+0x32>
 80170fc:	2f00      	cmp	r7, #0
 80170fe:	f000 80d2 	beq.w	80172a6 <_printf_i+0x1c6>
 8017102:	2f58      	cmp	r7, #88	@ 0x58
 8017104:	f000 80b9 	beq.w	801727a <_printf_i+0x19a>
 8017108:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801710c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8017110:	e03a      	b.n	8017188 <_printf_i+0xa8>
 8017112:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8017116:	2b15      	cmp	r3, #21
 8017118:	d8f6      	bhi.n	8017108 <_printf_i+0x28>
 801711a:	a101      	add	r1, pc, #4	@ (adr r1, 8017120 <_printf_i+0x40>)
 801711c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8017120:	08017179 	.word	0x08017179
 8017124:	0801718d 	.word	0x0801718d
 8017128:	08017109 	.word	0x08017109
 801712c:	08017109 	.word	0x08017109
 8017130:	08017109 	.word	0x08017109
 8017134:	08017109 	.word	0x08017109
 8017138:	0801718d 	.word	0x0801718d
 801713c:	08017109 	.word	0x08017109
 8017140:	08017109 	.word	0x08017109
 8017144:	08017109 	.word	0x08017109
 8017148:	08017109 	.word	0x08017109
 801714c:	0801728d 	.word	0x0801728d
 8017150:	080171b7 	.word	0x080171b7
 8017154:	08017247 	.word	0x08017247
 8017158:	08017109 	.word	0x08017109
 801715c:	08017109 	.word	0x08017109
 8017160:	080172af 	.word	0x080172af
 8017164:	08017109 	.word	0x08017109
 8017168:	080171b7 	.word	0x080171b7
 801716c:	08017109 	.word	0x08017109
 8017170:	08017109 	.word	0x08017109
 8017174:	0801724f 	.word	0x0801724f
 8017178:	6833      	ldr	r3, [r6, #0]
 801717a:	1d1a      	adds	r2, r3, #4
 801717c:	681b      	ldr	r3, [r3, #0]
 801717e:	6032      	str	r2, [r6, #0]
 8017180:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8017184:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8017188:	2301      	movs	r3, #1
 801718a:	e09d      	b.n	80172c8 <_printf_i+0x1e8>
 801718c:	6833      	ldr	r3, [r6, #0]
 801718e:	6820      	ldr	r0, [r4, #0]
 8017190:	1d19      	adds	r1, r3, #4
 8017192:	6031      	str	r1, [r6, #0]
 8017194:	0606      	lsls	r6, r0, #24
 8017196:	d501      	bpl.n	801719c <_printf_i+0xbc>
 8017198:	681d      	ldr	r5, [r3, #0]
 801719a:	e003      	b.n	80171a4 <_printf_i+0xc4>
 801719c:	0645      	lsls	r5, r0, #25
 801719e:	d5fb      	bpl.n	8017198 <_printf_i+0xb8>
 80171a0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80171a4:	2d00      	cmp	r5, #0
 80171a6:	da03      	bge.n	80171b0 <_printf_i+0xd0>
 80171a8:	232d      	movs	r3, #45	@ 0x2d
 80171aa:	426d      	negs	r5, r5
 80171ac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80171b0:	4859      	ldr	r0, [pc, #356]	@ (8017318 <_printf_i+0x238>)
 80171b2:	230a      	movs	r3, #10
 80171b4:	e011      	b.n	80171da <_printf_i+0xfa>
 80171b6:	6821      	ldr	r1, [r4, #0]
 80171b8:	6833      	ldr	r3, [r6, #0]
 80171ba:	0608      	lsls	r0, r1, #24
 80171bc:	f853 5b04 	ldr.w	r5, [r3], #4
 80171c0:	d402      	bmi.n	80171c8 <_printf_i+0xe8>
 80171c2:	0649      	lsls	r1, r1, #25
 80171c4:	bf48      	it	mi
 80171c6:	b2ad      	uxthmi	r5, r5
 80171c8:	2f6f      	cmp	r7, #111	@ 0x6f
 80171ca:	4853      	ldr	r0, [pc, #332]	@ (8017318 <_printf_i+0x238>)
 80171cc:	6033      	str	r3, [r6, #0]
 80171ce:	bf14      	ite	ne
 80171d0:	230a      	movne	r3, #10
 80171d2:	2308      	moveq	r3, #8
 80171d4:	2100      	movs	r1, #0
 80171d6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80171da:	6866      	ldr	r6, [r4, #4]
 80171dc:	60a6      	str	r6, [r4, #8]
 80171de:	2e00      	cmp	r6, #0
 80171e0:	bfa2      	ittt	ge
 80171e2:	6821      	ldrge	r1, [r4, #0]
 80171e4:	f021 0104 	bicge.w	r1, r1, #4
 80171e8:	6021      	strge	r1, [r4, #0]
 80171ea:	b90d      	cbnz	r5, 80171f0 <_printf_i+0x110>
 80171ec:	2e00      	cmp	r6, #0
 80171ee:	d04b      	beq.n	8017288 <_printf_i+0x1a8>
 80171f0:	4616      	mov	r6, r2
 80171f2:	fbb5 f1f3 	udiv	r1, r5, r3
 80171f6:	fb03 5711 	mls	r7, r3, r1, r5
 80171fa:	5dc7      	ldrb	r7, [r0, r7]
 80171fc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8017200:	462f      	mov	r7, r5
 8017202:	42bb      	cmp	r3, r7
 8017204:	460d      	mov	r5, r1
 8017206:	d9f4      	bls.n	80171f2 <_printf_i+0x112>
 8017208:	2b08      	cmp	r3, #8
 801720a:	d10b      	bne.n	8017224 <_printf_i+0x144>
 801720c:	6823      	ldr	r3, [r4, #0]
 801720e:	07df      	lsls	r7, r3, #31
 8017210:	d508      	bpl.n	8017224 <_printf_i+0x144>
 8017212:	6923      	ldr	r3, [r4, #16]
 8017214:	6861      	ldr	r1, [r4, #4]
 8017216:	4299      	cmp	r1, r3
 8017218:	bfde      	ittt	le
 801721a:	2330      	movle	r3, #48	@ 0x30
 801721c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8017220:	f106 36ff 	addle.w	r6, r6, #4294967295
 8017224:	1b92      	subs	r2, r2, r6
 8017226:	6122      	str	r2, [r4, #16]
 8017228:	f8cd a000 	str.w	sl, [sp]
 801722c:	464b      	mov	r3, r9
 801722e:	aa03      	add	r2, sp, #12
 8017230:	4621      	mov	r1, r4
 8017232:	4640      	mov	r0, r8
 8017234:	f7ff fee6 	bl	8017004 <_printf_common>
 8017238:	3001      	adds	r0, #1
 801723a:	d14a      	bne.n	80172d2 <_printf_i+0x1f2>
 801723c:	f04f 30ff 	mov.w	r0, #4294967295
 8017240:	b004      	add	sp, #16
 8017242:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017246:	6823      	ldr	r3, [r4, #0]
 8017248:	f043 0320 	orr.w	r3, r3, #32
 801724c:	6023      	str	r3, [r4, #0]
 801724e:	4833      	ldr	r0, [pc, #204]	@ (801731c <_printf_i+0x23c>)
 8017250:	2778      	movs	r7, #120	@ 0x78
 8017252:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8017256:	6823      	ldr	r3, [r4, #0]
 8017258:	6831      	ldr	r1, [r6, #0]
 801725a:	061f      	lsls	r7, r3, #24
 801725c:	f851 5b04 	ldr.w	r5, [r1], #4
 8017260:	d402      	bmi.n	8017268 <_printf_i+0x188>
 8017262:	065f      	lsls	r7, r3, #25
 8017264:	bf48      	it	mi
 8017266:	b2ad      	uxthmi	r5, r5
 8017268:	6031      	str	r1, [r6, #0]
 801726a:	07d9      	lsls	r1, r3, #31
 801726c:	bf44      	itt	mi
 801726e:	f043 0320 	orrmi.w	r3, r3, #32
 8017272:	6023      	strmi	r3, [r4, #0]
 8017274:	b11d      	cbz	r5, 801727e <_printf_i+0x19e>
 8017276:	2310      	movs	r3, #16
 8017278:	e7ac      	b.n	80171d4 <_printf_i+0xf4>
 801727a:	4827      	ldr	r0, [pc, #156]	@ (8017318 <_printf_i+0x238>)
 801727c:	e7e9      	b.n	8017252 <_printf_i+0x172>
 801727e:	6823      	ldr	r3, [r4, #0]
 8017280:	f023 0320 	bic.w	r3, r3, #32
 8017284:	6023      	str	r3, [r4, #0]
 8017286:	e7f6      	b.n	8017276 <_printf_i+0x196>
 8017288:	4616      	mov	r6, r2
 801728a:	e7bd      	b.n	8017208 <_printf_i+0x128>
 801728c:	6833      	ldr	r3, [r6, #0]
 801728e:	6825      	ldr	r5, [r4, #0]
 8017290:	6961      	ldr	r1, [r4, #20]
 8017292:	1d18      	adds	r0, r3, #4
 8017294:	6030      	str	r0, [r6, #0]
 8017296:	062e      	lsls	r6, r5, #24
 8017298:	681b      	ldr	r3, [r3, #0]
 801729a:	d501      	bpl.n	80172a0 <_printf_i+0x1c0>
 801729c:	6019      	str	r1, [r3, #0]
 801729e:	e002      	b.n	80172a6 <_printf_i+0x1c6>
 80172a0:	0668      	lsls	r0, r5, #25
 80172a2:	d5fb      	bpl.n	801729c <_printf_i+0x1bc>
 80172a4:	8019      	strh	r1, [r3, #0]
 80172a6:	2300      	movs	r3, #0
 80172a8:	6123      	str	r3, [r4, #16]
 80172aa:	4616      	mov	r6, r2
 80172ac:	e7bc      	b.n	8017228 <_printf_i+0x148>
 80172ae:	6833      	ldr	r3, [r6, #0]
 80172b0:	1d1a      	adds	r2, r3, #4
 80172b2:	6032      	str	r2, [r6, #0]
 80172b4:	681e      	ldr	r6, [r3, #0]
 80172b6:	6862      	ldr	r2, [r4, #4]
 80172b8:	2100      	movs	r1, #0
 80172ba:	4630      	mov	r0, r6
 80172bc:	f7e8 ffa0 	bl	8000200 <memchr>
 80172c0:	b108      	cbz	r0, 80172c6 <_printf_i+0x1e6>
 80172c2:	1b80      	subs	r0, r0, r6
 80172c4:	6060      	str	r0, [r4, #4]
 80172c6:	6863      	ldr	r3, [r4, #4]
 80172c8:	6123      	str	r3, [r4, #16]
 80172ca:	2300      	movs	r3, #0
 80172cc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80172d0:	e7aa      	b.n	8017228 <_printf_i+0x148>
 80172d2:	6923      	ldr	r3, [r4, #16]
 80172d4:	4632      	mov	r2, r6
 80172d6:	4649      	mov	r1, r9
 80172d8:	4640      	mov	r0, r8
 80172da:	47d0      	blx	sl
 80172dc:	3001      	adds	r0, #1
 80172de:	d0ad      	beq.n	801723c <_printf_i+0x15c>
 80172e0:	6823      	ldr	r3, [r4, #0]
 80172e2:	079b      	lsls	r3, r3, #30
 80172e4:	d413      	bmi.n	801730e <_printf_i+0x22e>
 80172e6:	68e0      	ldr	r0, [r4, #12]
 80172e8:	9b03      	ldr	r3, [sp, #12]
 80172ea:	4298      	cmp	r0, r3
 80172ec:	bfb8      	it	lt
 80172ee:	4618      	movlt	r0, r3
 80172f0:	e7a6      	b.n	8017240 <_printf_i+0x160>
 80172f2:	2301      	movs	r3, #1
 80172f4:	4632      	mov	r2, r6
 80172f6:	4649      	mov	r1, r9
 80172f8:	4640      	mov	r0, r8
 80172fa:	47d0      	blx	sl
 80172fc:	3001      	adds	r0, #1
 80172fe:	d09d      	beq.n	801723c <_printf_i+0x15c>
 8017300:	3501      	adds	r5, #1
 8017302:	68e3      	ldr	r3, [r4, #12]
 8017304:	9903      	ldr	r1, [sp, #12]
 8017306:	1a5b      	subs	r3, r3, r1
 8017308:	42ab      	cmp	r3, r5
 801730a:	dcf2      	bgt.n	80172f2 <_printf_i+0x212>
 801730c:	e7eb      	b.n	80172e6 <_printf_i+0x206>
 801730e:	2500      	movs	r5, #0
 8017310:	f104 0619 	add.w	r6, r4, #25
 8017314:	e7f5      	b.n	8017302 <_printf_i+0x222>
 8017316:	bf00      	nop
 8017318:	0801b20c 	.word	0x0801b20c
 801731c:	0801b21d 	.word	0x0801b21d

08017320 <__sflush_r>:
 8017320:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8017324:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017328:	0716      	lsls	r6, r2, #28
 801732a:	4605      	mov	r5, r0
 801732c:	460c      	mov	r4, r1
 801732e:	d454      	bmi.n	80173da <__sflush_r+0xba>
 8017330:	684b      	ldr	r3, [r1, #4]
 8017332:	2b00      	cmp	r3, #0
 8017334:	dc02      	bgt.n	801733c <__sflush_r+0x1c>
 8017336:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8017338:	2b00      	cmp	r3, #0
 801733a:	dd48      	ble.n	80173ce <__sflush_r+0xae>
 801733c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801733e:	2e00      	cmp	r6, #0
 8017340:	d045      	beq.n	80173ce <__sflush_r+0xae>
 8017342:	2300      	movs	r3, #0
 8017344:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8017348:	682f      	ldr	r7, [r5, #0]
 801734a:	6a21      	ldr	r1, [r4, #32]
 801734c:	602b      	str	r3, [r5, #0]
 801734e:	d030      	beq.n	80173b2 <__sflush_r+0x92>
 8017350:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8017352:	89a3      	ldrh	r3, [r4, #12]
 8017354:	0759      	lsls	r1, r3, #29
 8017356:	d505      	bpl.n	8017364 <__sflush_r+0x44>
 8017358:	6863      	ldr	r3, [r4, #4]
 801735a:	1ad2      	subs	r2, r2, r3
 801735c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801735e:	b10b      	cbz	r3, 8017364 <__sflush_r+0x44>
 8017360:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8017362:	1ad2      	subs	r2, r2, r3
 8017364:	2300      	movs	r3, #0
 8017366:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8017368:	6a21      	ldr	r1, [r4, #32]
 801736a:	4628      	mov	r0, r5
 801736c:	47b0      	blx	r6
 801736e:	1c43      	adds	r3, r0, #1
 8017370:	89a3      	ldrh	r3, [r4, #12]
 8017372:	d106      	bne.n	8017382 <__sflush_r+0x62>
 8017374:	6829      	ldr	r1, [r5, #0]
 8017376:	291d      	cmp	r1, #29
 8017378:	d82b      	bhi.n	80173d2 <__sflush_r+0xb2>
 801737a:	4a2a      	ldr	r2, [pc, #168]	@ (8017424 <__sflush_r+0x104>)
 801737c:	410a      	asrs	r2, r1
 801737e:	07d6      	lsls	r6, r2, #31
 8017380:	d427      	bmi.n	80173d2 <__sflush_r+0xb2>
 8017382:	2200      	movs	r2, #0
 8017384:	6062      	str	r2, [r4, #4]
 8017386:	04d9      	lsls	r1, r3, #19
 8017388:	6922      	ldr	r2, [r4, #16]
 801738a:	6022      	str	r2, [r4, #0]
 801738c:	d504      	bpl.n	8017398 <__sflush_r+0x78>
 801738e:	1c42      	adds	r2, r0, #1
 8017390:	d101      	bne.n	8017396 <__sflush_r+0x76>
 8017392:	682b      	ldr	r3, [r5, #0]
 8017394:	b903      	cbnz	r3, 8017398 <__sflush_r+0x78>
 8017396:	6560      	str	r0, [r4, #84]	@ 0x54
 8017398:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801739a:	602f      	str	r7, [r5, #0]
 801739c:	b1b9      	cbz	r1, 80173ce <__sflush_r+0xae>
 801739e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80173a2:	4299      	cmp	r1, r3
 80173a4:	d002      	beq.n	80173ac <__sflush_r+0x8c>
 80173a6:	4628      	mov	r0, r5
 80173a8:	f7ff fa92 	bl	80168d0 <_free_r>
 80173ac:	2300      	movs	r3, #0
 80173ae:	6363      	str	r3, [r4, #52]	@ 0x34
 80173b0:	e00d      	b.n	80173ce <__sflush_r+0xae>
 80173b2:	2301      	movs	r3, #1
 80173b4:	4628      	mov	r0, r5
 80173b6:	47b0      	blx	r6
 80173b8:	4602      	mov	r2, r0
 80173ba:	1c50      	adds	r0, r2, #1
 80173bc:	d1c9      	bne.n	8017352 <__sflush_r+0x32>
 80173be:	682b      	ldr	r3, [r5, #0]
 80173c0:	2b00      	cmp	r3, #0
 80173c2:	d0c6      	beq.n	8017352 <__sflush_r+0x32>
 80173c4:	2b1d      	cmp	r3, #29
 80173c6:	d001      	beq.n	80173cc <__sflush_r+0xac>
 80173c8:	2b16      	cmp	r3, #22
 80173ca:	d11e      	bne.n	801740a <__sflush_r+0xea>
 80173cc:	602f      	str	r7, [r5, #0]
 80173ce:	2000      	movs	r0, #0
 80173d0:	e022      	b.n	8017418 <__sflush_r+0xf8>
 80173d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80173d6:	b21b      	sxth	r3, r3
 80173d8:	e01b      	b.n	8017412 <__sflush_r+0xf2>
 80173da:	690f      	ldr	r7, [r1, #16]
 80173dc:	2f00      	cmp	r7, #0
 80173de:	d0f6      	beq.n	80173ce <__sflush_r+0xae>
 80173e0:	0793      	lsls	r3, r2, #30
 80173e2:	680e      	ldr	r6, [r1, #0]
 80173e4:	bf08      	it	eq
 80173e6:	694b      	ldreq	r3, [r1, #20]
 80173e8:	600f      	str	r7, [r1, #0]
 80173ea:	bf18      	it	ne
 80173ec:	2300      	movne	r3, #0
 80173ee:	eba6 0807 	sub.w	r8, r6, r7
 80173f2:	608b      	str	r3, [r1, #8]
 80173f4:	f1b8 0f00 	cmp.w	r8, #0
 80173f8:	dde9      	ble.n	80173ce <__sflush_r+0xae>
 80173fa:	6a21      	ldr	r1, [r4, #32]
 80173fc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80173fe:	4643      	mov	r3, r8
 8017400:	463a      	mov	r2, r7
 8017402:	4628      	mov	r0, r5
 8017404:	47b0      	blx	r6
 8017406:	2800      	cmp	r0, #0
 8017408:	dc08      	bgt.n	801741c <__sflush_r+0xfc>
 801740a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801740e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017412:	81a3      	strh	r3, [r4, #12]
 8017414:	f04f 30ff 	mov.w	r0, #4294967295
 8017418:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801741c:	4407      	add	r7, r0
 801741e:	eba8 0800 	sub.w	r8, r8, r0
 8017422:	e7e7      	b.n	80173f4 <__sflush_r+0xd4>
 8017424:	dfbffffe 	.word	0xdfbffffe

08017428 <_fflush_r>:
 8017428:	b538      	push	{r3, r4, r5, lr}
 801742a:	690b      	ldr	r3, [r1, #16]
 801742c:	4605      	mov	r5, r0
 801742e:	460c      	mov	r4, r1
 8017430:	b913      	cbnz	r3, 8017438 <_fflush_r+0x10>
 8017432:	2500      	movs	r5, #0
 8017434:	4628      	mov	r0, r5
 8017436:	bd38      	pop	{r3, r4, r5, pc}
 8017438:	b118      	cbz	r0, 8017442 <_fflush_r+0x1a>
 801743a:	6a03      	ldr	r3, [r0, #32]
 801743c:	b90b      	cbnz	r3, 8017442 <_fflush_r+0x1a>
 801743e:	f7ff f879 	bl	8016534 <__sinit>
 8017442:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017446:	2b00      	cmp	r3, #0
 8017448:	d0f3      	beq.n	8017432 <_fflush_r+0xa>
 801744a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801744c:	07d0      	lsls	r0, r2, #31
 801744e:	d404      	bmi.n	801745a <_fflush_r+0x32>
 8017450:	0599      	lsls	r1, r3, #22
 8017452:	d402      	bmi.n	801745a <_fflush_r+0x32>
 8017454:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8017456:	f7ff fa0c 	bl	8016872 <__retarget_lock_acquire_recursive>
 801745a:	4628      	mov	r0, r5
 801745c:	4621      	mov	r1, r4
 801745e:	f7ff ff5f 	bl	8017320 <__sflush_r>
 8017462:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8017464:	07da      	lsls	r2, r3, #31
 8017466:	4605      	mov	r5, r0
 8017468:	d4e4      	bmi.n	8017434 <_fflush_r+0xc>
 801746a:	89a3      	ldrh	r3, [r4, #12]
 801746c:	059b      	lsls	r3, r3, #22
 801746e:	d4e1      	bmi.n	8017434 <_fflush_r+0xc>
 8017470:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8017472:	f7ff f9ff 	bl	8016874 <__retarget_lock_release_recursive>
 8017476:	e7dd      	b.n	8017434 <_fflush_r+0xc>

08017478 <fiprintf>:
 8017478:	b40e      	push	{r1, r2, r3}
 801747a:	b503      	push	{r0, r1, lr}
 801747c:	4601      	mov	r1, r0
 801747e:	ab03      	add	r3, sp, #12
 8017480:	4805      	ldr	r0, [pc, #20]	@ (8017498 <fiprintf+0x20>)
 8017482:	f853 2b04 	ldr.w	r2, [r3], #4
 8017486:	6800      	ldr	r0, [r0, #0]
 8017488:	9301      	str	r3, [sp, #4]
 801748a:	f7ff fca3 	bl	8016dd4 <_vfiprintf_r>
 801748e:	b002      	add	sp, #8
 8017490:	f85d eb04 	ldr.w	lr, [sp], #4
 8017494:	b003      	add	sp, #12
 8017496:	4770      	bx	lr
 8017498:	2000003c 	.word	0x2000003c

0801749c <__swbuf_r>:
 801749c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801749e:	460e      	mov	r6, r1
 80174a0:	4614      	mov	r4, r2
 80174a2:	4605      	mov	r5, r0
 80174a4:	b118      	cbz	r0, 80174ae <__swbuf_r+0x12>
 80174a6:	6a03      	ldr	r3, [r0, #32]
 80174a8:	b90b      	cbnz	r3, 80174ae <__swbuf_r+0x12>
 80174aa:	f7ff f843 	bl	8016534 <__sinit>
 80174ae:	69a3      	ldr	r3, [r4, #24]
 80174b0:	60a3      	str	r3, [r4, #8]
 80174b2:	89a3      	ldrh	r3, [r4, #12]
 80174b4:	071a      	lsls	r2, r3, #28
 80174b6:	d501      	bpl.n	80174bc <__swbuf_r+0x20>
 80174b8:	6923      	ldr	r3, [r4, #16]
 80174ba:	b943      	cbnz	r3, 80174ce <__swbuf_r+0x32>
 80174bc:	4621      	mov	r1, r4
 80174be:	4628      	mov	r0, r5
 80174c0:	f000 f82a 	bl	8017518 <__swsetup_r>
 80174c4:	b118      	cbz	r0, 80174ce <__swbuf_r+0x32>
 80174c6:	f04f 37ff 	mov.w	r7, #4294967295
 80174ca:	4638      	mov	r0, r7
 80174cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80174ce:	6823      	ldr	r3, [r4, #0]
 80174d0:	6922      	ldr	r2, [r4, #16]
 80174d2:	1a98      	subs	r0, r3, r2
 80174d4:	6963      	ldr	r3, [r4, #20]
 80174d6:	b2f6      	uxtb	r6, r6
 80174d8:	4283      	cmp	r3, r0
 80174da:	4637      	mov	r7, r6
 80174dc:	dc05      	bgt.n	80174ea <__swbuf_r+0x4e>
 80174de:	4621      	mov	r1, r4
 80174e0:	4628      	mov	r0, r5
 80174e2:	f7ff ffa1 	bl	8017428 <_fflush_r>
 80174e6:	2800      	cmp	r0, #0
 80174e8:	d1ed      	bne.n	80174c6 <__swbuf_r+0x2a>
 80174ea:	68a3      	ldr	r3, [r4, #8]
 80174ec:	3b01      	subs	r3, #1
 80174ee:	60a3      	str	r3, [r4, #8]
 80174f0:	6823      	ldr	r3, [r4, #0]
 80174f2:	1c5a      	adds	r2, r3, #1
 80174f4:	6022      	str	r2, [r4, #0]
 80174f6:	701e      	strb	r6, [r3, #0]
 80174f8:	6962      	ldr	r2, [r4, #20]
 80174fa:	1c43      	adds	r3, r0, #1
 80174fc:	429a      	cmp	r2, r3
 80174fe:	d004      	beq.n	801750a <__swbuf_r+0x6e>
 8017500:	89a3      	ldrh	r3, [r4, #12]
 8017502:	07db      	lsls	r3, r3, #31
 8017504:	d5e1      	bpl.n	80174ca <__swbuf_r+0x2e>
 8017506:	2e0a      	cmp	r6, #10
 8017508:	d1df      	bne.n	80174ca <__swbuf_r+0x2e>
 801750a:	4621      	mov	r1, r4
 801750c:	4628      	mov	r0, r5
 801750e:	f7ff ff8b 	bl	8017428 <_fflush_r>
 8017512:	2800      	cmp	r0, #0
 8017514:	d0d9      	beq.n	80174ca <__swbuf_r+0x2e>
 8017516:	e7d6      	b.n	80174c6 <__swbuf_r+0x2a>

08017518 <__swsetup_r>:
 8017518:	b538      	push	{r3, r4, r5, lr}
 801751a:	4b29      	ldr	r3, [pc, #164]	@ (80175c0 <__swsetup_r+0xa8>)
 801751c:	4605      	mov	r5, r0
 801751e:	6818      	ldr	r0, [r3, #0]
 8017520:	460c      	mov	r4, r1
 8017522:	b118      	cbz	r0, 801752c <__swsetup_r+0x14>
 8017524:	6a03      	ldr	r3, [r0, #32]
 8017526:	b90b      	cbnz	r3, 801752c <__swsetup_r+0x14>
 8017528:	f7ff f804 	bl	8016534 <__sinit>
 801752c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017530:	0719      	lsls	r1, r3, #28
 8017532:	d422      	bmi.n	801757a <__swsetup_r+0x62>
 8017534:	06da      	lsls	r2, r3, #27
 8017536:	d407      	bmi.n	8017548 <__swsetup_r+0x30>
 8017538:	2209      	movs	r2, #9
 801753a:	602a      	str	r2, [r5, #0]
 801753c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017540:	81a3      	strh	r3, [r4, #12]
 8017542:	f04f 30ff 	mov.w	r0, #4294967295
 8017546:	e033      	b.n	80175b0 <__swsetup_r+0x98>
 8017548:	0758      	lsls	r0, r3, #29
 801754a:	d512      	bpl.n	8017572 <__swsetup_r+0x5a>
 801754c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801754e:	b141      	cbz	r1, 8017562 <__swsetup_r+0x4a>
 8017550:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8017554:	4299      	cmp	r1, r3
 8017556:	d002      	beq.n	801755e <__swsetup_r+0x46>
 8017558:	4628      	mov	r0, r5
 801755a:	f7ff f9b9 	bl	80168d0 <_free_r>
 801755e:	2300      	movs	r3, #0
 8017560:	6363      	str	r3, [r4, #52]	@ 0x34
 8017562:	89a3      	ldrh	r3, [r4, #12]
 8017564:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8017568:	81a3      	strh	r3, [r4, #12]
 801756a:	2300      	movs	r3, #0
 801756c:	6063      	str	r3, [r4, #4]
 801756e:	6923      	ldr	r3, [r4, #16]
 8017570:	6023      	str	r3, [r4, #0]
 8017572:	89a3      	ldrh	r3, [r4, #12]
 8017574:	f043 0308 	orr.w	r3, r3, #8
 8017578:	81a3      	strh	r3, [r4, #12]
 801757a:	6923      	ldr	r3, [r4, #16]
 801757c:	b94b      	cbnz	r3, 8017592 <__swsetup_r+0x7a>
 801757e:	89a3      	ldrh	r3, [r4, #12]
 8017580:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8017584:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8017588:	d003      	beq.n	8017592 <__swsetup_r+0x7a>
 801758a:	4621      	mov	r1, r4
 801758c:	4628      	mov	r0, r5
 801758e:	f000 f884 	bl	801769a <__smakebuf_r>
 8017592:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017596:	f013 0201 	ands.w	r2, r3, #1
 801759a:	d00a      	beq.n	80175b2 <__swsetup_r+0x9a>
 801759c:	2200      	movs	r2, #0
 801759e:	60a2      	str	r2, [r4, #8]
 80175a0:	6962      	ldr	r2, [r4, #20]
 80175a2:	4252      	negs	r2, r2
 80175a4:	61a2      	str	r2, [r4, #24]
 80175a6:	6922      	ldr	r2, [r4, #16]
 80175a8:	b942      	cbnz	r2, 80175bc <__swsetup_r+0xa4>
 80175aa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80175ae:	d1c5      	bne.n	801753c <__swsetup_r+0x24>
 80175b0:	bd38      	pop	{r3, r4, r5, pc}
 80175b2:	0799      	lsls	r1, r3, #30
 80175b4:	bf58      	it	pl
 80175b6:	6962      	ldrpl	r2, [r4, #20]
 80175b8:	60a2      	str	r2, [r4, #8]
 80175ba:	e7f4      	b.n	80175a6 <__swsetup_r+0x8e>
 80175bc:	2000      	movs	r0, #0
 80175be:	e7f7      	b.n	80175b0 <__swsetup_r+0x98>
 80175c0:	2000003c 	.word	0x2000003c

080175c4 <_sbrk_r>:
 80175c4:	b538      	push	{r3, r4, r5, lr}
 80175c6:	4d06      	ldr	r5, [pc, #24]	@ (80175e0 <_sbrk_r+0x1c>)
 80175c8:	2300      	movs	r3, #0
 80175ca:	4604      	mov	r4, r0
 80175cc:	4608      	mov	r0, r1
 80175ce:	602b      	str	r3, [r5, #0]
 80175d0:	f7ea f902 	bl	80017d8 <_sbrk>
 80175d4:	1c43      	adds	r3, r0, #1
 80175d6:	d102      	bne.n	80175de <_sbrk_r+0x1a>
 80175d8:	682b      	ldr	r3, [r5, #0]
 80175da:	b103      	cbz	r3, 80175de <_sbrk_r+0x1a>
 80175dc:	6023      	str	r3, [r4, #0]
 80175de:	bd38      	pop	{r3, r4, r5, pc}
 80175e0:	2000efdc 	.word	0x2000efdc

080175e4 <abort>:
 80175e4:	b508      	push	{r3, lr}
 80175e6:	2006      	movs	r0, #6
 80175e8:	f000 f8bc 	bl	8017764 <raise>
 80175ec:	2001      	movs	r0, #1
 80175ee:	f7ea f87b 	bl	80016e8 <_exit>

080175f2 <_realloc_r>:
 80175f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80175f6:	4680      	mov	r8, r0
 80175f8:	4615      	mov	r5, r2
 80175fa:	460c      	mov	r4, r1
 80175fc:	b921      	cbnz	r1, 8017608 <_realloc_r+0x16>
 80175fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017602:	4611      	mov	r1, r2
 8017604:	f7ff b9d8 	b.w	80169b8 <_malloc_r>
 8017608:	b92a      	cbnz	r2, 8017616 <_realloc_r+0x24>
 801760a:	f7ff f961 	bl	80168d0 <_free_r>
 801760e:	2400      	movs	r4, #0
 8017610:	4620      	mov	r0, r4
 8017612:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017616:	f000 f8e3 	bl	80177e0 <_malloc_usable_size_r>
 801761a:	4285      	cmp	r5, r0
 801761c:	4606      	mov	r6, r0
 801761e:	d802      	bhi.n	8017626 <_realloc_r+0x34>
 8017620:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8017624:	d8f4      	bhi.n	8017610 <_realloc_r+0x1e>
 8017626:	4629      	mov	r1, r5
 8017628:	4640      	mov	r0, r8
 801762a:	f7ff f9c5 	bl	80169b8 <_malloc_r>
 801762e:	4607      	mov	r7, r0
 8017630:	2800      	cmp	r0, #0
 8017632:	d0ec      	beq.n	801760e <_realloc_r+0x1c>
 8017634:	42b5      	cmp	r5, r6
 8017636:	462a      	mov	r2, r5
 8017638:	4621      	mov	r1, r4
 801763a:	bf28      	it	cs
 801763c:	4632      	movcs	r2, r6
 801763e:	f7ff f91a 	bl	8016876 <memcpy>
 8017642:	4621      	mov	r1, r4
 8017644:	4640      	mov	r0, r8
 8017646:	f7ff f943 	bl	80168d0 <_free_r>
 801764a:	463c      	mov	r4, r7
 801764c:	e7e0      	b.n	8017610 <_realloc_r+0x1e>

0801764e <__swhatbuf_r>:
 801764e:	b570      	push	{r4, r5, r6, lr}
 8017650:	460c      	mov	r4, r1
 8017652:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017656:	2900      	cmp	r1, #0
 8017658:	b096      	sub	sp, #88	@ 0x58
 801765a:	4615      	mov	r5, r2
 801765c:	461e      	mov	r6, r3
 801765e:	da0d      	bge.n	801767c <__swhatbuf_r+0x2e>
 8017660:	89a3      	ldrh	r3, [r4, #12]
 8017662:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8017666:	f04f 0100 	mov.w	r1, #0
 801766a:	bf14      	ite	ne
 801766c:	2340      	movne	r3, #64	@ 0x40
 801766e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8017672:	2000      	movs	r0, #0
 8017674:	6031      	str	r1, [r6, #0]
 8017676:	602b      	str	r3, [r5, #0]
 8017678:	b016      	add	sp, #88	@ 0x58
 801767a:	bd70      	pop	{r4, r5, r6, pc}
 801767c:	466a      	mov	r2, sp
 801767e:	f000 f879 	bl	8017774 <_fstat_r>
 8017682:	2800      	cmp	r0, #0
 8017684:	dbec      	blt.n	8017660 <__swhatbuf_r+0x12>
 8017686:	9901      	ldr	r1, [sp, #4]
 8017688:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801768c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8017690:	4259      	negs	r1, r3
 8017692:	4159      	adcs	r1, r3
 8017694:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8017698:	e7eb      	b.n	8017672 <__swhatbuf_r+0x24>

0801769a <__smakebuf_r>:
 801769a:	898b      	ldrh	r3, [r1, #12]
 801769c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801769e:	079d      	lsls	r5, r3, #30
 80176a0:	4606      	mov	r6, r0
 80176a2:	460c      	mov	r4, r1
 80176a4:	d507      	bpl.n	80176b6 <__smakebuf_r+0x1c>
 80176a6:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80176aa:	6023      	str	r3, [r4, #0]
 80176ac:	6123      	str	r3, [r4, #16]
 80176ae:	2301      	movs	r3, #1
 80176b0:	6163      	str	r3, [r4, #20]
 80176b2:	b003      	add	sp, #12
 80176b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80176b6:	ab01      	add	r3, sp, #4
 80176b8:	466a      	mov	r2, sp
 80176ba:	f7ff ffc8 	bl	801764e <__swhatbuf_r>
 80176be:	9f00      	ldr	r7, [sp, #0]
 80176c0:	4605      	mov	r5, r0
 80176c2:	4639      	mov	r1, r7
 80176c4:	4630      	mov	r0, r6
 80176c6:	f7ff f977 	bl	80169b8 <_malloc_r>
 80176ca:	b948      	cbnz	r0, 80176e0 <__smakebuf_r+0x46>
 80176cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80176d0:	059a      	lsls	r2, r3, #22
 80176d2:	d4ee      	bmi.n	80176b2 <__smakebuf_r+0x18>
 80176d4:	f023 0303 	bic.w	r3, r3, #3
 80176d8:	f043 0302 	orr.w	r3, r3, #2
 80176dc:	81a3      	strh	r3, [r4, #12]
 80176de:	e7e2      	b.n	80176a6 <__smakebuf_r+0xc>
 80176e0:	89a3      	ldrh	r3, [r4, #12]
 80176e2:	6020      	str	r0, [r4, #0]
 80176e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80176e8:	81a3      	strh	r3, [r4, #12]
 80176ea:	9b01      	ldr	r3, [sp, #4]
 80176ec:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80176f0:	b15b      	cbz	r3, 801770a <__smakebuf_r+0x70>
 80176f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80176f6:	4630      	mov	r0, r6
 80176f8:	f000 f84e 	bl	8017798 <_isatty_r>
 80176fc:	b128      	cbz	r0, 801770a <__smakebuf_r+0x70>
 80176fe:	89a3      	ldrh	r3, [r4, #12]
 8017700:	f023 0303 	bic.w	r3, r3, #3
 8017704:	f043 0301 	orr.w	r3, r3, #1
 8017708:	81a3      	strh	r3, [r4, #12]
 801770a:	89a3      	ldrh	r3, [r4, #12]
 801770c:	431d      	orrs	r5, r3
 801770e:	81a5      	strh	r5, [r4, #12]
 8017710:	e7cf      	b.n	80176b2 <__smakebuf_r+0x18>

08017712 <_raise_r>:
 8017712:	291f      	cmp	r1, #31
 8017714:	b538      	push	{r3, r4, r5, lr}
 8017716:	4605      	mov	r5, r0
 8017718:	460c      	mov	r4, r1
 801771a:	d904      	bls.n	8017726 <_raise_r+0x14>
 801771c:	2316      	movs	r3, #22
 801771e:	6003      	str	r3, [r0, #0]
 8017720:	f04f 30ff 	mov.w	r0, #4294967295
 8017724:	bd38      	pop	{r3, r4, r5, pc}
 8017726:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8017728:	b112      	cbz	r2, 8017730 <_raise_r+0x1e>
 801772a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801772e:	b94b      	cbnz	r3, 8017744 <_raise_r+0x32>
 8017730:	4628      	mov	r0, r5
 8017732:	f000 f853 	bl	80177dc <_getpid_r>
 8017736:	4622      	mov	r2, r4
 8017738:	4601      	mov	r1, r0
 801773a:	4628      	mov	r0, r5
 801773c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017740:	f000 b83a 	b.w	80177b8 <_kill_r>
 8017744:	2b01      	cmp	r3, #1
 8017746:	d00a      	beq.n	801775e <_raise_r+0x4c>
 8017748:	1c59      	adds	r1, r3, #1
 801774a:	d103      	bne.n	8017754 <_raise_r+0x42>
 801774c:	2316      	movs	r3, #22
 801774e:	6003      	str	r3, [r0, #0]
 8017750:	2001      	movs	r0, #1
 8017752:	e7e7      	b.n	8017724 <_raise_r+0x12>
 8017754:	2100      	movs	r1, #0
 8017756:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801775a:	4620      	mov	r0, r4
 801775c:	4798      	blx	r3
 801775e:	2000      	movs	r0, #0
 8017760:	e7e0      	b.n	8017724 <_raise_r+0x12>
	...

08017764 <raise>:
 8017764:	4b02      	ldr	r3, [pc, #8]	@ (8017770 <raise+0xc>)
 8017766:	4601      	mov	r1, r0
 8017768:	6818      	ldr	r0, [r3, #0]
 801776a:	f7ff bfd2 	b.w	8017712 <_raise_r>
 801776e:	bf00      	nop
 8017770:	2000003c 	.word	0x2000003c

08017774 <_fstat_r>:
 8017774:	b538      	push	{r3, r4, r5, lr}
 8017776:	4d07      	ldr	r5, [pc, #28]	@ (8017794 <_fstat_r+0x20>)
 8017778:	2300      	movs	r3, #0
 801777a:	4604      	mov	r4, r0
 801777c:	4608      	mov	r0, r1
 801777e:	4611      	mov	r1, r2
 8017780:	602b      	str	r3, [r5, #0]
 8017782:	f7ea f801 	bl	8001788 <_fstat>
 8017786:	1c43      	adds	r3, r0, #1
 8017788:	d102      	bne.n	8017790 <_fstat_r+0x1c>
 801778a:	682b      	ldr	r3, [r5, #0]
 801778c:	b103      	cbz	r3, 8017790 <_fstat_r+0x1c>
 801778e:	6023      	str	r3, [r4, #0]
 8017790:	bd38      	pop	{r3, r4, r5, pc}
 8017792:	bf00      	nop
 8017794:	2000efdc 	.word	0x2000efdc

08017798 <_isatty_r>:
 8017798:	b538      	push	{r3, r4, r5, lr}
 801779a:	4d06      	ldr	r5, [pc, #24]	@ (80177b4 <_isatty_r+0x1c>)
 801779c:	2300      	movs	r3, #0
 801779e:	4604      	mov	r4, r0
 80177a0:	4608      	mov	r0, r1
 80177a2:	602b      	str	r3, [r5, #0]
 80177a4:	f7ea f800 	bl	80017a8 <_isatty>
 80177a8:	1c43      	adds	r3, r0, #1
 80177aa:	d102      	bne.n	80177b2 <_isatty_r+0x1a>
 80177ac:	682b      	ldr	r3, [r5, #0]
 80177ae:	b103      	cbz	r3, 80177b2 <_isatty_r+0x1a>
 80177b0:	6023      	str	r3, [r4, #0]
 80177b2:	bd38      	pop	{r3, r4, r5, pc}
 80177b4:	2000efdc 	.word	0x2000efdc

080177b8 <_kill_r>:
 80177b8:	b538      	push	{r3, r4, r5, lr}
 80177ba:	4d07      	ldr	r5, [pc, #28]	@ (80177d8 <_kill_r+0x20>)
 80177bc:	2300      	movs	r3, #0
 80177be:	4604      	mov	r4, r0
 80177c0:	4608      	mov	r0, r1
 80177c2:	4611      	mov	r1, r2
 80177c4:	602b      	str	r3, [r5, #0]
 80177c6:	f7e9 ff7d 	bl	80016c4 <_kill>
 80177ca:	1c43      	adds	r3, r0, #1
 80177cc:	d102      	bne.n	80177d4 <_kill_r+0x1c>
 80177ce:	682b      	ldr	r3, [r5, #0]
 80177d0:	b103      	cbz	r3, 80177d4 <_kill_r+0x1c>
 80177d2:	6023      	str	r3, [r4, #0]
 80177d4:	bd38      	pop	{r3, r4, r5, pc}
 80177d6:	bf00      	nop
 80177d8:	2000efdc 	.word	0x2000efdc

080177dc <_getpid_r>:
 80177dc:	f7e9 bf6a 	b.w	80016b4 <_getpid>

080177e0 <_malloc_usable_size_r>:
 80177e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80177e4:	1f18      	subs	r0, r3, #4
 80177e6:	2b00      	cmp	r3, #0
 80177e8:	bfbc      	itt	lt
 80177ea:	580b      	ldrlt	r3, [r1, r0]
 80177ec:	18c0      	addlt	r0, r0, r3
 80177ee:	4770      	bx	lr

080177f0 <_init>:
 80177f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80177f2:	bf00      	nop
 80177f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80177f6:	bc08      	pop	{r3}
 80177f8:	469e      	mov	lr, r3
 80177fa:	4770      	bx	lr

080177fc <_fini>:
 80177fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80177fe:	bf00      	nop
 8017800:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017802:	bc08      	pop	{r3}
 8017804:	469e      	mov	lr, r3
 8017806:	4770      	bx	lr
