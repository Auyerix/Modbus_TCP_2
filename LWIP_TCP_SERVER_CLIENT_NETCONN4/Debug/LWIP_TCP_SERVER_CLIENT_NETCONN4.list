
LWIP_TCP_SERVER_CLIENT_NETCONN4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017950  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003984  08017b00  08017b00  00018b00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801b484  0801b484  0001d18c  2**0
                  CONTENTS
  4 .ARM          00000008  0801b484  0801b484  0001c484  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801b48c  0801b48c  0001d18c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801b48c  0801b48c  0001c48c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801b490  0801b490  0001c490  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000018c  20000000  0801b494  0001d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0001d18c  2**0
                  CONTENTS
 10 .bss          0000f508  2000018c  2000018c  0001d18c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000f694  2000f694  0001d18c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0001d18c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00032d56  00000000  00000000  0001d1bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00007ee3  00000000  00000000  0004ff12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000025a0  00000000  00000000  00057df8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001dca  00000000  00000000  0005a398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001347c  00000000  00000000  0005c162  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003ae96  00000000  00000000  0006f5de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00102451  00000000  00000000  000aa474  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001ac8c5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000a420  00000000  00000000  001ac908  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007b  00000000  00000000  001b6d28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000018c 	.word	0x2000018c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08017ae8 	.word	0x08017ae8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000190 	.word	0x20000190
 80001ec:	08017ae8 	.word	0x08017ae8

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96a 	b.w	800058c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	460c      	mov	r4, r1
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d14e      	bne.n	800037a <__udivmoddi4+0xaa>
 80002dc:	4694      	mov	ip, r2
 80002de:	458c      	cmp	ip, r1
 80002e0:	4686      	mov	lr, r0
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	d962      	bls.n	80003ae <__udivmoddi4+0xde>
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0320 	rsb	r3, r2, #32
 80002ee:	4091      	lsls	r1, r2
 80002f0:	fa20 f303 	lsr.w	r3, r0, r3
 80002f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002f8:	4319      	orrs	r1, r3
 80002fa:	fa00 fe02 	lsl.w	lr, r0, r2
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f f68c 	uxth.w	r6, ip
 8000306:	fbb1 f4f7 	udiv	r4, r1, r7
 800030a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030e:	fb07 1114 	mls	r1, r7, r4, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb04 f106 	mul.w	r1, r4, r6
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f104 30ff 	add.w	r0, r4, #4294967295
 8000326:	f080 8112 	bcs.w	800054e <__udivmoddi4+0x27e>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 810f 	bls.w	800054e <__udivmoddi4+0x27e>
 8000330:	3c02      	subs	r4, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	fa1f f38e 	uxth.w	r3, lr
 800033a:	fbb1 f0f7 	udiv	r0, r1, r7
 800033e:	fb07 1110 	mls	r1, r7, r0, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb00 f606 	mul.w	r6, r0, r6
 800034a:	429e      	cmp	r6, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x94>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f100 31ff 	add.w	r1, r0, #4294967295
 8000356:	f080 80fc 	bcs.w	8000552 <__udivmoddi4+0x282>
 800035a:	429e      	cmp	r6, r3
 800035c:	f240 80f9 	bls.w	8000552 <__udivmoddi4+0x282>
 8000360:	4463      	add	r3, ip
 8000362:	3802      	subs	r0, #2
 8000364:	1b9b      	subs	r3, r3, r6
 8000366:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800036a:	2100      	movs	r1, #0
 800036c:	b11d      	cbz	r5, 8000376 <__udivmoddi4+0xa6>
 800036e:	40d3      	lsrs	r3, r2
 8000370:	2200      	movs	r2, #0
 8000372:	e9c5 3200 	strd	r3, r2, [r5]
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d905      	bls.n	800038a <__udivmoddi4+0xba>
 800037e:	b10d      	cbz	r5, 8000384 <__udivmoddi4+0xb4>
 8000380:	e9c5 0100 	strd	r0, r1, [r5]
 8000384:	2100      	movs	r1, #0
 8000386:	4608      	mov	r0, r1
 8000388:	e7f5      	b.n	8000376 <__udivmoddi4+0xa6>
 800038a:	fab3 f183 	clz	r1, r3
 800038e:	2900      	cmp	r1, #0
 8000390:	d146      	bne.n	8000420 <__udivmoddi4+0x150>
 8000392:	42a3      	cmp	r3, r4
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xcc>
 8000396:	4290      	cmp	r0, r2
 8000398:	f0c0 80f0 	bcc.w	800057c <__udivmoddi4+0x2ac>
 800039c:	1a86      	subs	r6, r0, r2
 800039e:	eb64 0303 	sbc.w	r3, r4, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	2d00      	cmp	r5, #0
 80003a6:	d0e6      	beq.n	8000376 <__udivmoddi4+0xa6>
 80003a8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ac:	e7e3      	b.n	8000376 <__udivmoddi4+0xa6>
 80003ae:	2a00      	cmp	r2, #0
 80003b0:	f040 8090 	bne.w	80004d4 <__udivmoddi4+0x204>
 80003b4:	eba1 040c 	sub.w	r4, r1, ip
 80003b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003bc:	fa1f f78c 	uxth.w	r7, ip
 80003c0:	2101      	movs	r1, #1
 80003c2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003c6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ca:	fb08 4416 	mls	r4, r8, r6, r4
 80003ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003d2:	fb07 f006 	mul.w	r0, r7, r6
 80003d6:	4298      	cmp	r0, r3
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x11c>
 80003da:	eb1c 0303 	adds.w	r3, ip, r3
 80003de:	f106 34ff 	add.w	r4, r6, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x11a>
 80003e4:	4298      	cmp	r0, r3
 80003e6:	f200 80cd 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003ea:	4626      	mov	r6, r4
 80003ec:	1a1c      	subs	r4, r3, r0
 80003ee:	fa1f f38e 	uxth.w	r3, lr
 80003f2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003f6:	fb08 4410 	mls	r4, r8, r0, r4
 80003fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003fe:	fb00 f707 	mul.w	r7, r0, r7
 8000402:	429f      	cmp	r7, r3
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x148>
 8000406:	eb1c 0303 	adds.w	r3, ip, r3
 800040a:	f100 34ff 	add.w	r4, r0, #4294967295
 800040e:	d202      	bcs.n	8000416 <__udivmoddi4+0x146>
 8000410:	429f      	cmp	r7, r3
 8000412:	f200 80b0 	bhi.w	8000576 <__udivmoddi4+0x2a6>
 8000416:	4620      	mov	r0, r4
 8000418:	1bdb      	subs	r3, r3, r7
 800041a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800041e:	e7a5      	b.n	800036c <__udivmoddi4+0x9c>
 8000420:	f1c1 0620 	rsb	r6, r1, #32
 8000424:	408b      	lsls	r3, r1
 8000426:	fa22 f706 	lsr.w	r7, r2, r6
 800042a:	431f      	orrs	r7, r3
 800042c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000430:	fa04 f301 	lsl.w	r3, r4, r1
 8000434:	ea43 030c 	orr.w	r3, r3, ip
 8000438:	40f4      	lsrs	r4, r6
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	0c38      	lsrs	r0, r7, #16
 8000440:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000444:	fbb4 fef0 	udiv	lr, r4, r0
 8000448:	fa1f fc87 	uxth.w	ip, r7
 800044c:	fb00 441e 	mls	r4, r0, lr, r4
 8000450:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000454:	fb0e f90c 	mul.w	r9, lr, ip
 8000458:	45a1      	cmp	r9, r4
 800045a:	fa02 f201 	lsl.w	r2, r2, r1
 800045e:	d90a      	bls.n	8000476 <__udivmoddi4+0x1a6>
 8000460:	193c      	adds	r4, r7, r4
 8000462:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000466:	f080 8084 	bcs.w	8000572 <__udivmoddi4+0x2a2>
 800046a:	45a1      	cmp	r9, r4
 800046c:	f240 8081 	bls.w	8000572 <__udivmoddi4+0x2a2>
 8000470:	f1ae 0e02 	sub.w	lr, lr, #2
 8000474:	443c      	add	r4, r7
 8000476:	eba4 0409 	sub.w	r4, r4, r9
 800047a:	fa1f f983 	uxth.w	r9, r3
 800047e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000482:	fb00 4413 	mls	r4, r0, r3, r4
 8000486:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048a:	fb03 fc0c 	mul.w	ip, r3, ip
 800048e:	45a4      	cmp	ip, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x1d2>
 8000492:	193c      	adds	r4, r7, r4
 8000494:	f103 30ff 	add.w	r0, r3, #4294967295
 8000498:	d267      	bcs.n	800056a <__udivmoddi4+0x29a>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d965      	bls.n	800056a <__udivmoddi4+0x29a>
 800049e:	3b02      	subs	r3, #2
 80004a0:	443c      	add	r4, r7
 80004a2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004a6:	fba0 9302 	umull	r9, r3, r0, r2
 80004aa:	eba4 040c 	sub.w	r4, r4, ip
 80004ae:	429c      	cmp	r4, r3
 80004b0:	46ce      	mov	lr, r9
 80004b2:	469c      	mov	ip, r3
 80004b4:	d351      	bcc.n	800055a <__udivmoddi4+0x28a>
 80004b6:	d04e      	beq.n	8000556 <__udivmoddi4+0x286>
 80004b8:	b155      	cbz	r5, 80004d0 <__udivmoddi4+0x200>
 80004ba:	ebb8 030e 	subs.w	r3, r8, lr
 80004be:	eb64 040c 	sbc.w	r4, r4, ip
 80004c2:	fa04 f606 	lsl.w	r6, r4, r6
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431e      	orrs	r6, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	e9c5 6400 	strd	r6, r4, [r5]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e750      	b.n	8000376 <__udivmoddi4+0xa6>
 80004d4:	f1c2 0320 	rsb	r3, r2, #32
 80004d8:	fa20 f103 	lsr.w	r1, r0, r3
 80004dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e0:	fa24 f303 	lsr.w	r3, r4, r3
 80004e4:	4094      	lsls	r4, r2
 80004e6:	430c      	orrs	r4, r1
 80004e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ec:	fa00 fe02 	lsl.w	lr, r0, r2
 80004f0:	fa1f f78c 	uxth.w	r7, ip
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3110 	mls	r1, r8, r0, r3
 80004fc:	0c23      	lsrs	r3, r4, #16
 80004fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000502:	fb00 f107 	mul.w	r1, r0, r7
 8000506:	4299      	cmp	r1, r3
 8000508:	d908      	bls.n	800051c <__udivmoddi4+0x24c>
 800050a:	eb1c 0303 	adds.w	r3, ip, r3
 800050e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000512:	d22c      	bcs.n	800056e <__udivmoddi4+0x29e>
 8000514:	4299      	cmp	r1, r3
 8000516:	d92a      	bls.n	800056e <__udivmoddi4+0x29e>
 8000518:	3802      	subs	r0, #2
 800051a:	4463      	add	r3, ip
 800051c:	1a5b      	subs	r3, r3, r1
 800051e:	b2a4      	uxth	r4, r4
 8000520:	fbb3 f1f8 	udiv	r1, r3, r8
 8000524:	fb08 3311 	mls	r3, r8, r1, r3
 8000528:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800052c:	fb01 f307 	mul.w	r3, r1, r7
 8000530:	42a3      	cmp	r3, r4
 8000532:	d908      	bls.n	8000546 <__udivmoddi4+0x276>
 8000534:	eb1c 0404 	adds.w	r4, ip, r4
 8000538:	f101 36ff 	add.w	r6, r1, #4294967295
 800053c:	d213      	bcs.n	8000566 <__udivmoddi4+0x296>
 800053e:	42a3      	cmp	r3, r4
 8000540:	d911      	bls.n	8000566 <__udivmoddi4+0x296>
 8000542:	3902      	subs	r1, #2
 8000544:	4464      	add	r4, ip
 8000546:	1ae4      	subs	r4, r4, r3
 8000548:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800054c:	e739      	b.n	80003c2 <__udivmoddi4+0xf2>
 800054e:	4604      	mov	r4, r0
 8000550:	e6f0      	b.n	8000334 <__udivmoddi4+0x64>
 8000552:	4608      	mov	r0, r1
 8000554:	e706      	b.n	8000364 <__udivmoddi4+0x94>
 8000556:	45c8      	cmp	r8, r9
 8000558:	d2ae      	bcs.n	80004b8 <__udivmoddi4+0x1e8>
 800055a:	ebb9 0e02 	subs.w	lr, r9, r2
 800055e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000562:	3801      	subs	r0, #1
 8000564:	e7a8      	b.n	80004b8 <__udivmoddi4+0x1e8>
 8000566:	4631      	mov	r1, r6
 8000568:	e7ed      	b.n	8000546 <__udivmoddi4+0x276>
 800056a:	4603      	mov	r3, r0
 800056c:	e799      	b.n	80004a2 <__udivmoddi4+0x1d2>
 800056e:	4630      	mov	r0, r6
 8000570:	e7d4      	b.n	800051c <__udivmoddi4+0x24c>
 8000572:	46d6      	mov	lr, sl
 8000574:	e77f      	b.n	8000476 <__udivmoddi4+0x1a6>
 8000576:	4463      	add	r3, ip
 8000578:	3802      	subs	r0, #2
 800057a:	e74d      	b.n	8000418 <__udivmoddi4+0x148>
 800057c:	4606      	mov	r6, r0
 800057e:	4623      	mov	r3, r4
 8000580:	4608      	mov	r0, r1
 8000582:	e70f      	b.n	80003a4 <__udivmoddi4+0xd4>
 8000584:	3e02      	subs	r6, #2
 8000586:	4463      	add	r3, ip
 8000588:	e730      	b.n	80003ec <__udivmoddi4+0x11c>
 800058a:	bf00      	nop

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */

	// Configuramos algunos estados de coils para el ejemplo
    coil_status[0] = 1;
 8000594:	4b1f      	ldr	r3, [pc, #124]	@ (8000614 <main+0x84>)
 8000596:	2201      	movs	r2, #1
 8000598:	701a      	strb	r2, [r3, #0]
    coil_status[1] = 0;
 800059a:	4b1e      	ldr	r3, [pc, #120]	@ (8000614 <main+0x84>)
 800059c:	2200      	movs	r2, #0
 800059e:	705a      	strb	r2, [r3, #1]
    coil_status[2] = 0;
 80005a0:	4b1c      	ldr	r3, [pc, #112]	@ (8000614 <main+0x84>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	709a      	strb	r2, [r3, #2]
    coil_status[3] = 1;
 80005a6:	4b1b      	ldr	r3, [pc, #108]	@ (8000614 <main+0x84>)
 80005a8:	2201      	movs	r2, #1
 80005aa:	70da      	strb	r2, [r3, #3]
    coil_status[4] = 0;
 80005ac:	4b19      	ldr	r3, [pc, #100]	@ (8000614 <main+0x84>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	711a      	strb	r2, [r3, #4]
    coil_status[5] = 0;
 80005b2:	4b18      	ldr	r3, [pc, #96]	@ (8000614 <main+0x84>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	715a      	strb	r2, [r3, #5]
    coil_status[6] = 0;
 80005b8:	4b16      	ldr	r3, [pc, #88]	@ (8000614 <main+0x84>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	719a      	strb	r2, [r3, #6]
    coil_status[7] = 1;
 80005be:	4b15      	ldr	r3, [pc, #84]	@ (8000614 <main+0x84>)
 80005c0:	2201      	movs	r2, #1
 80005c2:	71da      	strb	r2, [r3, #7]

    coil_status[8] = 1;
 80005c4:	4b13      	ldr	r3, [pc, #76]	@ (8000614 <main+0x84>)
 80005c6:	2201      	movs	r2, #1
 80005c8:	721a      	strb	r2, [r3, #8]
    coil_status[15] = 1;
 80005ca:	4b12      	ldr	r3, [pc, #72]	@ (8000614 <main+0x84>)
 80005cc:	2201      	movs	r2, #1
 80005ce:	73da      	strb	r2, [r3, #15]

    coil_status[16] = 0;
 80005d0:	4b10      	ldr	r3, [pc, #64]	@ (8000614 <main+0x84>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	741a      	strb	r2, [r3, #16]
    coil_status[23] = 1;
 80005d6:	4b0f      	ldr	r3, [pc, #60]	@ (8000614 <main+0x84>)
 80005d8:	2201      	movs	r2, #1
 80005da:	75da      	strb	r2, [r3, #23]

    coil_status[24] = 1;
 80005dc:	4b0d      	ldr	r3, [pc, #52]	@ (8000614 <main+0x84>)
 80005de:	2201      	movs	r2, #1
 80005e0:	761a      	strb	r2, [r3, #24]
    coil_status[31] = 1;
 80005e2:	4b0c      	ldr	r3, [pc, #48]	@ (8000614 <main+0x84>)
 80005e4:	2201      	movs	r2, #1
 80005e6:	77da      	strb	r2, [r3, #31]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e8:	f001 f8e6 	bl	80017b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ec:	f000 f81a 	bl	8000624 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f0:	f000 f8ac 	bl	800074c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80005f4:	f000 f880 	bl	80006f8 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005f8:	f005 f81a 	bl	8005630 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80005fc:	4a06      	ldr	r2, [pc, #24]	@ (8000618 <main+0x88>)
 80005fe:	2100      	movs	r1, #0
 8000600:	4806      	ldr	r0, [pc, #24]	@ (800061c <main+0x8c>)
 8000602:	f005 f874 	bl	80056ee <osThreadNew>
 8000606:	4603      	mov	r3, r0
 8000608:	4a05      	ldr	r2, [pc, #20]	@ (8000620 <main+0x90>)
 800060a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800060c:	f005 f834 	bl	8005678 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000610:	bf00      	nop
 8000612:	e7fd      	b.n	8000610 <main+0x80>
 8000614:	20000000 	.word	0x20000000
 8000618:	0801b238 	.word	0x0801b238
 800061c:	08000915 	.word	0x08000915
 8000620:	200001f0 	.word	0x200001f0

08000624 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b094      	sub	sp, #80	@ 0x50
 8000628:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800062a:	f107 0320 	add.w	r3, r7, #32
 800062e:	2230      	movs	r2, #48	@ 0x30
 8000630:	2100      	movs	r1, #0
 8000632:	4618      	mov	r0, r3
 8000634:	f016 fb5d 	bl	8016cf2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000638:	f107 030c 	add.w	r3, r7, #12
 800063c:	2200      	movs	r2, #0
 800063e:	601a      	str	r2, [r3, #0]
 8000640:	605a      	str	r2, [r3, #4]
 8000642:	609a      	str	r2, [r3, #8]
 8000644:	60da      	str	r2, [r3, #12]
 8000646:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000648:	2300      	movs	r3, #0
 800064a:	60bb      	str	r3, [r7, #8]
 800064c:	4b28      	ldr	r3, [pc, #160]	@ (80006f0 <SystemClock_Config+0xcc>)
 800064e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000650:	4a27      	ldr	r2, [pc, #156]	@ (80006f0 <SystemClock_Config+0xcc>)
 8000652:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000656:	6413      	str	r3, [r2, #64]	@ 0x40
 8000658:	4b25      	ldr	r3, [pc, #148]	@ (80006f0 <SystemClock_Config+0xcc>)
 800065a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800065c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000660:	60bb      	str	r3, [r7, #8]
 8000662:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000664:	2300      	movs	r3, #0
 8000666:	607b      	str	r3, [r7, #4]
 8000668:	4b22      	ldr	r3, [pc, #136]	@ (80006f4 <SystemClock_Config+0xd0>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	4a21      	ldr	r2, [pc, #132]	@ (80006f4 <SystemClock_Config+0xd0>)
 800066e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000672:	6013      	str	r3, [r2, #0]
 8000674:	4b1f      	ldr	r3, [pc, #124]	@ (80006f4 <SystemClock_Config+0xd0>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800067c:	607b      	str	r3, [r7, #4]
 800067e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000680:	2301      	movs	r3, #1
 8000682:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000684:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000688:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800068a:	2302      	movs	r3, #2
 800068c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800068e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000692:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000694:	2304      	movs	r3, #4
 8000696:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000698:	23a8      	movs	r3, #168	@ 0xa8
 800069a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800069c:	2302      	movs	r3, #2
 800069e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006a0:	2307      	movs	r3, #7
 80006a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a4:	f107 0320 	add.w	r3, r7, #32
 80006a8:	4618      	mov	r0, r3
 80006aa:	f002 fdef 	bl	800328c <HAL_RCC_OscConfig>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006b4:	f000 f95c 	bl	8000970 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b8:	230f      	movs	r3, #15
 80006ba:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006bc:	2302      	movs	r3, #2
 80006be:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006c0:	2300      	movs	r3, #0
 80006c2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006c4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80006c8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006ca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006ce:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006d0:	f107 030c 	add.w	r3, r7, #12
 80006d4:	2105      	movs	r1, #5
 80006d6:	4618      	mov	r0, r3
 80006d8:	f003 f850 	bl	800377c <HAL_RCC_ClockConfig>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006e2:	f000 f945 	bl	8000970 <Error_Handler>
  }
}
 80006e6:	bf00      	nop
 80006e8:	3750      	adds	r7, #80	@ 0x50
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	40023800 	.word	0x40023800
 80006f4:	40007000 	.word	0x40007000

080006f8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80006fc:	4b11      	ldr	r3, [pc, #68]	@ (8000744 <MX_USART3_UART_Init+0x4c>)
 80006fe:	4a12      	ldr	r2, [pc, #72]	@ (8000748 <MX_USART3_UART_Init+0x50>)
 8000700:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000702:	4b10      	ldr	r3, [pc, #64]	@ (8000744 <MX_USART3_UART_Init+0x4c>)
 8000704:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000708:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800070a:	4b0e      	ldr	r3, [pc, #56]	@ (8000744 <MX_USART3_UART_Init+0x4c>)
 800070c:	2200      	movs	r2, #0
 800070e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000710:	4b0c      	ldr	r3, [pc, #48]	@ (8000744 <MX_USART3_UART_Init+0x4c>)
 8000712:	2200      	movs	r2, #0
 8000714:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000716:	4b0b      	ldr	r3, [pc, #44]	@ (8000744 <MX_USART3_UART_Init+0x4c>)
 8000718:	2200      	movs	r2, #0
 800071a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800071c:	4b09      	ldr	r3, [pc, #36]	@ (8000744 <MX_USART3_UART_Init+0x4c>)
 800071e:	220c      	movs	r2, #12
 8000720:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000722:	4b08      	ldr	r3, [pc, #32]	@ (8000744 <MX_USART3_UART_Init+0x4c>)
 8000724:	2200      	movs	r2, #0
 8000726:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000728:	4b06      	ldr	r3, [pc, #24]	@ (8000744 <MX_USART3_UART_Init+0x4c>)
 800072a:	2200      	movs	r2, #0
 800072c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800072e:	4805      	ldr	r0, [pc, #20]	@ (8000744 <MX_USART3_UART_Init+0x4c>)
 8000730:	f003 fd18 	bl	8004164 <HAL_UART_Init>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800073a:	f000 f919 	bl	8000970 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800073e:	bf00      	nop
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	200001a8 	.word	0x200001a8
 8000748:	40004800 	.word	0x40004800

0800074c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b08c      	sub	sp, #48	@ 0x30
 8000750:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000752:	f107 031c 	add.w	r3, r7, #28
 8000756:	2200      	movs	r2, #0
 8000758:	601a      	str	r2, [r3, #0]
 800075a:	605a      	str	r2, [r3, #4]
 800075c:	609a      	str	r2, [r3, #8]
 800075e:	60da      	str	r2, [r3, #12]
 8000760:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000762:	2300      	movs	r3, #0
 8000764:	61bb      	str	r3, [r7, #24]
 8000766:	4b5b      	ldr	r3, [pc, #364]	@ (80008d4 <MX_GPIO_Init+0x188>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800076a:	4a5a      	ldr	r2, [pc, #360]	@ (80008d4 <MX_GPIO_Init+0x188>)
 800076c:	f043 0304 	orr.w	r3, r3, #4
 8000770:	6313      	str	r3, [r2, #48]	@ 0x30
 8000772:	4b58      	ldr	r3, [pc, #352]	@ (80008d4 <MX_GPIO_Init+0x188>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000776:	f003 0304 	and.w	r3, r3, #4
 800077a:	61bb      	str	r3, [r7, #24]
 800077c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800077e:	2300      	movs	r3, #0
 8000780:	617b      	str	r3, [r7, #20]
 8000782:	4b54      	ldr	r3, [pc, #336]	@ (80008d4 <MX_GPIO_Init+0x188>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000786:	4a53      	ldr	r2, [pc, #332]	@ (80008d4 <MX_GPIO_Init+0x188>)
 8000788:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800078c:	6313      	str	r3, [r2, #48]	@ 0x30
 800078e:	4b51      	ldr	r3, [pc, #324]	@ (80008d4 <MX_GPIO_Init+0x188>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000792:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000796:	617b      	str	r3, [r7, #20]
 8000798:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800079a:	2300      	movs	r3, #0
 800079c:	613b      	str	r3, [r7, #16]
 800079e:	4b4d      	ldr	r3, [pc, #308]	@ (80008d4 <MX_GPIO_Init+0x188>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007a2:	4a4c      	ldr	r2, [pc, #304]	@ (80008d4 <MX_GPIO_Init+0x188>)
 80007a4:	f043 0301 	orr.w	r3, r3, #1
 80007a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007aa:	4b4a      	ldr	r3, [pc, #296]	@ (80008d4 <MX_GPIO_Init+0x188>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ae:	f003 0301 	and.w	r3, r3, #1
 80007b2:	613b      	str	r3, [r7, #16]
 80007b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007b6:	2300      	movs	r3, #0
 80007b8:	60fb      	str	r3, [r7, #12]
 80007ba:	4b46      	ldr	r3, [pc, #280]	@ (80008d4 <MX_GPIO_Init+0x188>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007be:	4a45      	ldr	r2, [pc, #276]	@ (80008d4 <MX_GPIO_Init+0x188>)
 80007c0:	f043 0302 	orr.w	r3, r3, #2
 80007c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007c6:	4b43      	ldr	r3, [pc, #268]	@ (80008d4 <MX_GPIO_Init+0x188>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ca:	f003 0302 	and.w	r3, r3, #2
 80007ce:	60fb      	str	r3, [r7, #12]
 80007d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007d2:	2300      	movs	r3, #0
 80007d4:	60bb      	str	r3, [r7, #8]
 80007d6:	4b3f      	ldr	r3, [pc, #252]	@ (80008d4 <MX_GPIO_Init+0x188>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007da:	4a3e      	ldr	r2, [pc, #248]	@ (80008d4 <MX_GPIO_Init+0x188>)
 80007dc:	f043 0308 	orr.w	r3, r3, #8
 80007e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007e2:	4b3c      	ldr	r3, [pc, #240]	@ (80008d4 <MX_GPIO_Init+0x188>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e6:	f003 0308 	and.w	r3, r3, #8
 80007ea:	60bb      	str	r3, [r7, #8]
 80007ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007ee:	2300      	movs	r3, #0
 80007f0:	607b      	str	r3, [r7, #4]
 80007f2:	4b38      	ldr	r3, [pc, #224]	@ (80008d4 <MX_GPIO_Init+0x188>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f6:	4a37      	ldr	r2, [pc, #220]	@ (80008d4 <MX_GPIO_Init+0x188>)
 80007f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80007fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80007fe:	4b35      	ldr	r3, [pc, #212]	@ (80008d4 <MX_GPIO_Init+0x188>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000802:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000806:	607b      	str	r3, [r7, #4]
 8000808:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800080a:	2200      	movs	r2, #0
 800080c:	f44f 4181 	mov.w	r1, #16512	@ 0x4080
 8000810:	4831      	ldr	r0, [pc, #196]	@ (80008d8 <MX_GPIO_Init+0x18c>)
 8000812:	f002 fd21 	bl	8003258 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000816:	2200      	movs	r2, #0
 8000818:	2140      	movs	r1, #64	@ 0x40
 800081a:	4830      	ldr	r0, [pc, #192]	@ (80008dc <MX_GPIO_Init+0x190>)
 800081c:	f002 fd1c 	bl	8003258 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000820:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000824:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000826:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800082a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082c:	2300      	movs	r3, #0
 800082e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000830:	f107 031c 	add.w	r3, r7, #28
 8000834:	4619      	mov	r1, r3
 8000836:	482a      	ldr	r0, [pc, #168]	@ (80008e0 <MX_GPIO_Init+0x194>)
 8000838:	f002 fb62 	bl	8002f00 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 800083c:	f44f 4381 	mov.w	r3, #16512	@ 0x4080
 8000840:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000842:	2301      	movs	r3, #1
 8000844:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000846:	2300      	movs	r3, #0
 8000848:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800084a:	2300      	movs	r3, #0
 800084c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800084e:	f107 031c 	add.w	r3, r7, #28
 8000852:	4619      	mov	r1, r3
 8000854:	4820      	ldr	r0, [pc, #128]	@ (80008d8 <MX_GPIO_Init+0x18c>)
 8000856:	f002 fb53 	bl	8002f00 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800085a:	2340      	movs	r3, #64	@ 0x40
 800085c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800085e:	2301      	movs	r3, #1
 8000860:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000862:	2300      	movs	r3, #0
 8000864:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000866:	2300      	movs	r3, #0
 8000868:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800086a:	f107 031c 	add.w	r3, r7, #28
 800086e:	4619      	mov	r1, r3
 8000870:	481a      	ldr	r0, [pc, #104]	@ (80008dc <MX_GPIO_Init+0x190>)
 8000872:	f002 fb45 	bl	8002f00 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000876:	2380      	movs	r3, #128	@ 0x80
 8000878:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800087a:	2300      	movs	r3, #0
 800087c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087e:	2300      	movs	r3, #0
 8000880:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000882:	f107 031c 	add.w	r3, r7, #28
 8000886:	4619      	mov	r1, r3
 8000888:	4814      	ldr	r0, [pc, #80]	@ (80008dc <MX_GPIO_Init+0x190>)
 800088a:	f002 fb39 	bl	8002f00 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800088e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000892:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000894:	2300      	movs	r3, #0
 8000896:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000898:	2300      	movs	r3, #0
 800089a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800089c:	f107 031c 	add.w	r3, r7, #28
 80008a0:	4619      	mov	r1, r3
 80008a2:	4810      	ldr	r0, [pc, #64]	@ (80008e4 <MX_GPIO_Init+0x198>)
 80008a4:	f002 fb2c 	bl	8002f00 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80008a8:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80008ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ae:	2302      	movs	r3, #2
 80008b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b2:	2300      	movs	r3, #0
 80008b4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008b6:	2303      	movs	r3, #3
 80008b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80008ba:	230a      	movs	r3, #10
 80008bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008be:	f107 031c 	add.w	r3, r7, #28
 80008c2:	4619      	mov	r1, r3
 80008c4:	4807      	ldr	r0, [pc, #28]	@ (80008e4 <MX_GPIO_Init+0x198>)
 80008c6:	f002 fb1b 	bl	8002f00 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008ca:	bf00      	nop
 80008cc:	3730      	adds	r7, #48	@ 0x30
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	40023800 	.word	0x40023800
 80008d8:	40020400 	.word	0x40020400
 80008dc:	40021800 	.word	0x40021800
 80008e0:	40020800 	.word	0x40020800
 80008e4:	40020000 	.word	0x40020000

080008e8 <SendString>:

/* USER CODE BEGIN 4 */


void SendString(const char *str) {
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b082      	sub	sp, #8
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *)str, strlen(str), HAL_MAX_DELAY);
 80008f0:	6878      	ldr	r0, [r7, #4]
 80008f2:	f7ff fc7d 	bl	80001f0 <strlen>
 80008f6:	4603      	mov	r3, r0
 80008f8:	b29a      	uxth	r2, r3
 80008fa:	f04f 33ff 	mov.w	r3, #4294967295
 80008fe:	6879      	ldr	r1, [r7, #4]
 8000900:	4803      	ldr	r0, [pc, #12]	@ (8000910 <SendString+0x28>)
 8000902:	f003 fc7f 	bl	8004204 <HAL_UART_Transmit>

}
 8000906:	bf00      	nop
 8000908:	3708      	adds	r7, #8
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	200001a8 	.word	0x200001a8

08000914 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b084      	sub	sp, #16
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 800091c:	f004 f82e 	bl	800497c <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  tcpserver_init();
 8000920:	f000 fcbc 	bl	800129c <tcpserver_init>


  const char *mensaje = "I'm alive!!!\n";
 8000924:	4b07      	ldr	r3, [pc, #28]	@ (8000944 <StartDefaultTask+0x30>)
 8000926:	60fb      	str	r3, [r7, #12]
  const char *mensaje_bienvenida = "inicio Modbus TCP Remoto en modo Servidor\n";
 8000928:	4b07      	ldr	r3, [pc, #28]	@ (8000948 <StartDefaultTask+0x34>)
 800092a:	60bb      	str	r3, [r7, #8]

  SendString(mensaje_bienvenida);
 800092c:	68b8      	ldr	r0, [r7, #8]
 800092e:	f7ff ffdb 	bl	80008e8 <SendString>

  /* Infinite loop */
  for(;;)
  {
	  //SendString(mensaje);
	  osDelay(500);
 8000932:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000936:	f004 ff6c 	bl	8005812 <osDelay>

	  osDelay(1);
 800093a:	2001      	movs	r0, #1
 800093c:	f004 ff69 	bl	8005812 <osDelay>
	  osDelay(500);
 8000940:	bf00      	nop
 8000942:	e7f6      	b.n	8000932 <StartDefaultTask+0x1e>
 8000944:	08017b0c 	.word	0x08017b0c
 8000948:	08017b1c 	.word	0x08017b1c

0800094c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	4a04      	ldr	r2, [pc, #16]	@ (800096c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800095a:	4293      	cmp	r3, r2
 800095c:	d101      	bne.n	8000962 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800095e:	f000 ff4d 	bl	80017fc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000962:	bf00      	nop
 8000964:	3708      	adds	r7, #8
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	40001000 	.word	0x40001000

08000970 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000974:	b672      	cpsid	i
}
 8000976:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000978:	bf00      	nop
 800097a:	e7fd      	b.n	8000978 <Error_Handler+0x8>

0800097c <mb_process>:
static uint8_t mb_process_val(uint16_t fn, uint16_t val);

static void mb_mbap_copy(uint8_t *mb_repl_buf, uint8_t *mb_req_buf);
static uint16_t mb_pdu_calculate_N(uint16_t fn, uint16_t quantity);

uint16_t mb_process(uint8_t *mb_repl_buf, uint8_t *mb_req_buf, uint16_t req_buf_len) {
 800097c:	b580      	push	{r7, lr}
 800097e:	b086      	sub	sp, #24
 8000980:	af00      	add	r7, sp, #0
 8000982:	60f8      	str	r0, [r7, #12]
 8000984:	60b9      	str	r1, [r7, #8]
 8000986:	4613      	mov	r3, r2
 8000988:	80fb      	strh	r3, [r7, #6]
	memset(mb_repl_buf, '\0', MB_ADU_MAXSIZE);  // clear the buffer
 800098a:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800098e:	2100      	movs	r1, #0
 8000990:	68f8      	ldr	r0, [r7, #12]
 8000992:	f016 f9ae 	bl	8016cf2 <memset>
	mb_mbap_copy(mb_repl_buf, mb_req_buf);
 8000996:	68b9      	ldr	r1, [r7, #8]
 8000998:	68f8      	ldr	r0, [r7, #12]
 800099a:	f000 f900 	bl	8000b9e <mb_mbap_copy>
	uint16_t pduLen = 0;
 800099e:	2300      	movs	r3, #0
 80009a0:	82fb      	strh	r3, [r7, #22]

	uint8_t fn = mb_req_buf[MB_PDU_FN];
 80009a2:	68bb      	ldr	r3, [r7, #8]
 80009a4:	79db      	ldrb	r3, [r3, #7]
 80009a6:	757b      	strb	r3, [r7, #21]
	switch (fn) {
 80009a8:	7d7b      	ldrb	r3, [r7, #21]
 80009aa:	2b10      	cmp	r3, #16
 80009ac:	dc1c      	bgt.n	80009e8 <mb_process+0x6c>
 80009ae:	2b0f      	cmp	r3, #15
 80009b0:	da23      	bge.n	80009fa <mb_process+0x7e>
 80009b2:	2b04      	cmp	r3, #4
 80009b4:	dc02      	bgt.n	80009bc <mb_process+0x40>
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	dc04      	bgt.n	80009c4 <mb_process+0x48>
 80009ba:	e015      	b.n	80009e8 <mb_process+0x6c>
 80009bc:	3b05      	subs	r3, #5
 80009be:	2b01      	cmp	r3, #1
 80009c0:	d812      	bhi.n	80009e8 <mb_process+0x6c>
 80009c2:	e008      	b.n	80009d6 <mb_process+0x5a>
	case MB_FN_READ_COILS:
	case MB_FN_READ_DISCRETE:
	case MB_FN_READ_HOLDING:
	case MB_FN_READ_INPUT:
		pduLen = mb_process_pdu_read_fn(mb_repl_buf, mb_req_buf, req_buf_len);
 80009c4:	88fb      	ldrh	r3, [r7, #6]
 80009c6:	461a      	mov	r2, r3
 80009c8:	68b9      	ldr	r1, [r7, #8]
 80009ca:	68f8      	ldr	r0, [r7, #12]
 80009cc:	f000 f82b 	bl	8000a26 <mb_process_pdu_read_fn>
 80009d0:	4603      	mov	r3, r0
 80009d2:	82fb      	strh	r3, [r7, #22]
		break;
 80009d4:	e012      	b.n	80009fc <mb_process+0x80>
	case MB_FN_WRITE_S_COIL:
	case MB_FN_WRITE_S_HOLDING:
		pduLen = mb_process_pdu_write_single_fn(mb_repl_buf, mb_req_buf, req_buf_len);
 80009d6:	88fb      	ldrh	r3, [r7, #6]
 80009d8:	461a      	mov	r2, r3
 80009da:	68b9      	ldr	r1, [r7, #8]
 80009dc:	68f8      	ldr	r0, [r7, #12]
 80009de:	f000 f87d 	bl	8000adc <mb_process_pdu_write_single_fn>
 80009e2:	4603      	mov	r3, r0
 80009e4:	82fb      	strh	r3, [r7, #22]
		break;
 80009e6:	e009      	b.n	80009fc <mb_process+0x80>
	case MB_FN_WRITE_M_COIL:
	case MB_FN_WRITE_M_HOLDING:
		//mb_process_write_fn(mb_repl_buf, mb_req_buf, req_buf_len);
		break;
	default:
		pduLen = mb_process_err(mb_repl_buf, fn, MB_EXCEPTION_FN_UNSUPPORTED);
 80009e8:	7d7b      	ldrb	r3, [r7, #21]
 80009ea:	2201      	movs	r2, #1
 80009ec:	4619      	mov	r1, r3
 80009ee:	68f8      	ldr	r0, [r7, #12]
 80009f0:	f000 f976 	bl	8000ce0 <mb_process_err>
 80009f4:	4603      	mov	r3, r0
 80009f6:	82fb      	strh	r3, [r7, #22]
		break;
 80009f8:	e000      	b.n	80009fc <mb_process+0x80>
		break;
 80009fa:	bf00      	nop
	}

	mb_repl_buf[MB_MBAP_LEN_H] = (pduLen + 1) >> 8;
 80009fc:	8afb      	ldrh	r3, [r7, #22]
 80009fe:	3301      	adds	r3, #1
 8000a00:	121a      	asrs	r2, r3, #8
 8000a02:	68fb      	ldr	r3, [r7, #12]
 8000a04:	3304      	adds	r3, #4
 8000a06:	b2d2      	uxtb	r2, r2
 8000a08:	701a      	strb	r2, [r3, #0]
	mb_repl_buf[MB_MBAP_LEN_L] = (pduLen + 1) & 0xff;
 8000a0a:	8afb      	ldrh	r3, [r7, #22]
 8000a0c:	b2da      	uxtb	r2, r3
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	3305      	adds	r3, #5
 8000a12:	3201      	adds	r2, #1
 8000a14:	b2d2      	uxtb	r2, r2
 8000a16:	701a      	strb	r2, [r3, #0]

	return (pduLen + MB_MBAP_SIZE);
 8000a18:	8afb      	ldrh	r3, [r7, #22]
 8000a1a:	3307      	adds	r3, #7
 8000a1c:	b29b      	uxth	r3, r3
}
 8000a1e:	4618      	mov	r0, r3
 8000a20:	3718      	adds	r7, #24
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}

08000a26 <mb_process_pdu_read_fn>:

static uint16_t mb_process_pdu_read_fn(uint8_t *mb_repl_buf, uint8_t *mb_req_buf, uint16_t req_buf_len) {
 8000a26:	b580      	push	{r7, lr}
 8000a28:	b086      	sub	sp, #24
 8000a2a:	af00      	add	r7, sp, #0
 8000a2c:	60f8      	str	r0, [r7, #12]
 8000a2e:	60b9      	str	r1, [r7, #8]
 8000a30:	4613      	mov	r3, r2
 8000a32:	80fb      	strh	r3, [r7, #6]
	uint8_t fn = mb_req_buf[MB_PDU_FN];
 8000a34:	68bb      	ldr	r3, [r7, #8]
 8000a36:	79db      	ldrb	r3, [r3, #7]
 8000a38:	75fb      	strb	r3, [r7, #23]
	uint16_t start_address = mb_req_buf[MB_PDU_R_ST_ADDR_L] + (mb_req_buf[MB_PDU_R_ST_ADDR_H] << 8);
 8000a3a:	68bb      	ldr	r3, [r7, #8]
 8000a3c:	3309      	adds	r3, #9
 8000a3e:	781b      	ldrb	r3, [r3, #0]
 8000a40:	461a      	mov	r2, r3
 8000a42:	68bb      	ldr	r3, [r7, #8]
 8000a44:	3308      	adds	r3, #8
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	021b      	lsls	r3, r3, #8
 8000a4a:	b29b      	uxth	r3, r3
 8000a4c:	4413      	add	r3, r2
 8000a4e:	82bb      	strh	r3, [r7, #20]
	uint16_t quantity = mb_req_buf[MB_PDU_R_QUANTITY_L] + (mb_req_buf[MB_PDU_R_QUANTITY_H] << 8);
 8000a50:	68bb      	ldr	r3, [r7, #8]
 8000a52:	330b      	adds	r3, #11
 8000a54:	781b      	ldrb	r3, [r3, #0]
 8000a56:	461a      	mov	r2, r3
 8000a58:	68bb      	ldr	r3, [r7, #8]
 8000a5a:	330a      	adds	r3, #10
 8000a5c:	781b      	ldrb	r3, [r3, #0]
 8000a5e:	021b      	lsls	r3, r3, #8
 8000a60:	b29b      	uxth	r3, r3
 8000a62:	4413      	add	r3, r2
 8000a64:	827b      	strh	r3, [r7, #18]

	if (mb_process_start_address(fn, start_address, quantity) != MB_EXCEPTION_OK) {
 8000a66:	7dfb      	ldrb	r3, [r7, #23]
 8000a68:	b29b      	uxth	r3, r3
 8000a6a:	8a7a      	ldrh	r2, [r7, #18]
 8000a6c:	8ab9      	ldrh	r1, [r7, #20]
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f000 f8b8 	bl	8000be4 <mb_process_start_address>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d007      	beq.n	8000a8a <mb_process_pdu_read_fn+0x64>
		return mb_process_err(mb_repl_buf, fn, MB_EXCEPTION_DATA_ADDR);
 8000a7a:	7dfb      	ldrb	r3, [r7, #23]
 8000a7c:	2202      	movs	r2, #2
 8000a7e:	4619      	mov	r1, r3
 8000a80:	68f8      	ldr	r0, [r7, #12]
 8000a82:	f000 f92d 	bl	8000ce0 <mb_process_err>
 8000a86:	4603      	mov	r3, r0
 8000a88:	e024      	b.n	8000ad4 <mb_process_pdu_read_fn+0xae>
	} else { // form PDU content
		mb_repl_buf[MB_PDU_FN] = fn;
 8000a8a:	68fb      	ldr	r3, [r7, #12]
 8000a8c:	3307      	adds	r3, #7
 8000a8e:	7dfa      	ldrb	r2, [r7, #23]
 8000a90:	701a      	strb	r2, [r3, #0]
		mb_repl_buf[MB_PDU_REPL_N] = mb_pdu_calculate_N(fn, quantity);
 8000a92:	7dfb      	ldrb	r3, [r7, #23]
 8000a94:	b29b      	uxth	r3, r3
 8000a96:	8a7a      	ldrh	r2, [r7, #18]
 8000a98:	4611      	mov	r1, r2
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f000 f93b 	bl	8000d16 <mb_pdu_calculate_N>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	461a      	mov	r2, r3
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	3308      	adds	r3, #8
 8000aa8:	b2d2      	uxtb	r2, r2
 8000aaa:	701a      	strb	r2, [r3, #0]

		switch (fn) {
 8000aac:	7dfb      	ldrb	r3, [r7, #23]
 8000aae:	2b01      	cmp	r3, #1
 8000ab0:	d106      	bne.n	8000ac0 <mb_process_pdu_read_fn+0x9a>
		case MB_FN_READ_COILS:
			read_coils(mb_repl_buf, start_address, quantity);
 8000ab2:	8a7a      	ldrh	r2, [r7, #18]
 8000ab4:	8abb      	ldrh	r3, [r7, #20]
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	68f8      	ldr	r0, [r7, #12]
 8000aba:	f000 f959 	bl	8000d70 <read_coils>
			break;
 8000abe:	bf00      	nop
//			read_inputs(mb_repl_buf, start_address, quantity);
//			break;
		}

	}
	return mb_pdu_calculate_N(fn, quantity) + 2; // returns PDU size where +2 are N and fn
 8000ac0:	7dfb      	ldrb	r3, [r7, #23]
 8000ac2:	b29b      	uxth	r3, r3
 8000ac4:	8a7a      	ldrh	r2, [r7, #18]
 8000ac6:	4611      	mov	r1, r2
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f000 f924 	bl	8000d16 <mb_pdu_calculate_N>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	3302      	adds	r3, #2
 8000ad2:	b29b      	uxth	r3, r3
}
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	3718      	adds	r7, #24
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}

08000adc <mb_process_pdu_write_single_fn>:

static uint16_t mb_process_pdu_write_single_fn(uint8_t *mb_repl_buf, uint8_t *mb_req_buf, uint16_t req_buf_len) {
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b086      	sub	sp, #24
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	60f8      	str	r0, [r7, #12]
 8000ae4:	60b9      	str	r1, [r7, #8]
 8000ae6:	4613      	mov	r3, r2
 8000ae8:	80fb      	strh	r3, [r7, #6]
	uint8_t fn = mb_req_buf[MB_PDU_FN];
 8000aea:	68bb      	ldr	r3, [r7, #8]
 8000aec:	79db      	ldrb	r3, [r3, #7]
 8000aee:	75fb      	strb	r3, [r7, #23]
	uint16_t address = mb_req_buf[MB_PDU_W_REG_ADDR_L] + (mb_req_buf[MB_PDU_W_REG_ADDR_H] << 8);
 8000af0:	68bb      	ldr	r3, [r7, #8]
 8000af2:	3309      	adds	r3, #9
 8000af4:	781b      	ldrb	r3, [r3, #0]
 8000af6:	461a      	mov	r2, r3
 8000af8:	68bb      	ldr	r3, [r7, #8]
 8000afa:	3308      	adds	r3, #8
 8000afc:	781b      	ldrb	r3, [r3, #0]
 8000afe:	021b      	lsls	r3, r3, #8
 8000b00:	b29b      	uxth	r3, r3
 8000b02:	4413      	add	r3, r2
 8000b04:	82bb      	strh	r3, [r7, #20]
	uint16_t valToWrite = mb_req_buf[MB_PDU_W_REG_VAL_L] + (mb_req_buf[MB_PDU_W_REG_VAL_H] << 8);
 8000b06:	68bb      	ldr	r3, [r7, #8]
 8000b08:	330b      	adds	r3, #11
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	461a      	mov	r2, r3
 8000b0e:	68bb      	ldr	r3, [r7, #8]
 8000b10:	330a      	adds	r3, #10
 8000b12:	781b      	ldrb	r3, [r3, #0]
 8000b14:	021b      	lsls	r3, r3, #8
 8000b16:	b29b      	uxth	r3, r3
 8000b18:	4413      	add	r3, r2
 8000b1a:	827b      	strh	r3, [r7, #18]

	if (mb_process_start_address(fn, address, 1) != MB_EXCEPTION_OK) {
 8000b1c:	7dfb      	ldrb	r3, [r7, #23]
 8000b1e:	b29b      	uxth	r3, r3
 8000b20:	8ab9      	ldrh	r1, [r7, #20]
 8000b22:	2201      	movs	r2, #1
 8000b24:	4618      	mov	r0, r3
 8000b26:	f000 f85d 	bl	8000be4 <mb_process_start_address>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d007      	beq.n	8000b40 <mb_process_pdu_write_single_fn+0x64>
		return mb_process_err(mb_repl_buf, fn, MB_EXCEPTION_DATA_ADDR);
 8000b30:	7dfb      	ldrb	r3, [r7, #23]
 8000b32:	2202      	movs	r2, #2
 8000b34:	4619      	mov	r1, r3
 8000b36:	68f8      	ldr	r0, [r7, #12]
 8000b38:	f000 f8d2 	bl	8000ce0 <mb_process_err>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	e02a      	b.n	8000b96 <mb_process_pdu_write_single_fn+0xba>
	} else if (mb_process_val(fn, valToWrite) != MB_EXCEPTION_OK) {
 8000b40:	7dfb      	ldrb	r3, [r7, #23]
 8000b42:	b29b      	uxth	r3, r3
 8000b44:	8a7a      	ldrh	r2, [r7, #18]
 8000b46:	4611      	mov	r1, r2
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f000 f8ab 	bl	8000ca4 <mb_process_val>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d007      	beq.n	8000b64 <mb_process_pdu_write_single_fn+0x88>
		return mb_process_err(mb_repl_buf, fn, MB_EXCEPTION_DATA_VAL);
 8000b54:	7dfb      	ldrb	r3, [r7, #23]
 8000b56:	2203      	movs	r2, #3
 8000b58:	4619      	mov	r1, r3
 8000b5a:	68f8      	ldr	r0, [r7, #12]
 8000b5c:	f000 f8c0 	bl	8000ce0 <mb_process_err>
 8000b60:	4603      	mov	r3, r0
 8000b62:	e018      	b.n	8000b96 <mb_process_pdu_write_single_fn+0xba>
	} else { // form PDU content
		mb_repl_buf[MB_PDU_FN] = fn;
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	3307      	adds	r3, #7
 8000b68:	7dfa      	ldrb	r2, [r7, #23]
 8000b6a:	701a      	strb	r2, [r3, #0]
		mb_repl_buf[MB_PDU_W_REG_ADDR_H] = mb_req_buf[MB_PDU_W_REG_ADDR_H];
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	3308      	adds	r3, #8
 8000b70:	68ba      	ldr	r2, [r7, #8]
 8000b72:	7a12      	ldrb	r2, [r2, #8]
 8000b74:	701a      	strb	r2, [r3, #0]
		mb_repl_buf[MB_PDU_W_REG_ADDR_L] = mb_req_buf[MB_PDU_W_REG_ADDR_L];
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	3309      	adds	r3, #9
 8000b7a:	68ba      	ldr	r2, [r7, #8]
 8000b7c:	7a52      	ldrb	r2, [r2, #9]
 8000b7e:	701a      	strb	r2, [r3, #0]
		mb_repl_buf[MB_PDU_W_REG_VAL_H] = mb_req_buf[MB_PDU_W_REG_VAL_H];
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	330a      	adds	r3, #10
 8000b84:	68ba      	ldr	r2, [r7, #8]
 8000b86:	7a92      	ldrb	r2, [r2, #10]
 8000b88:	701a      	strb	r2, [r3, #0]
		mb_repl_buf[MB_PDU_W_REG_VAL_L] = mb_req_buf[MB_PDU_W_REG_VAL_L];
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	330b      	adds	r3, #11
 8000b8e:	68ba      	ldr	r2, [r7, #8]
 8000b90:	7ad2      	ldrb	r2, [r2, #11]
 8000b92:	701a      	strb	r2, [r3, #0]

//		if(fn == MB_FN_WRITE_S_COIL) write_single_coil(address, valToWrite);
//		if(fn == MB_FN_WRITE_S_HOLDING) write_single_holding(address, valToWrite);
	}
	return 5; // PDU size for write single XXX command
 8000b94:	2305      	movs	r3, #5
}
 8000b96:	4618      	mov	r0, r3
 8000b98:	3718      	adds	r7, #24
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}

08000b9e <mb_mbap_copy>:

static void mb_mbap_copy(uint8_t *mb_repl_buf, uint8_t *mb_req_buf) {
 8000b9e:	b480      	push	{r7}
 8000ba0:	b083      	sub	sp, #12
 8000ba2:	af00      	add	r7, sp, #0
 8000ba4:	6078      	str	r0, [r7, #4]
 8000ba6:	6039      	str	r1, [r7, #0]
	mb_repl_buf[MB_MBAP_TRANSACTION_ID_H] = mb_req_buf[MB_MBAP_TRANSACTION_ID_H];
 8000ba8:	683b      	ldr	r3, [r7, #0]
 8000baa:	781a      	ldrb	r2, [r3, #0]
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	701a      	strb	r2, [r3, #0]
	mb_repl_buf[MB_MBAP_TRANSACTION_ID_L] = mb_req_buf[MB_MBAP_TRANSACTION_ID_L];
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	3301      	adds	r3, #1
 8000bb4:	683a      	ldr	r2, [r7, #0]
 8000bb6:	7852      	ldrb	r2, [r2, #1]
 8000bb8:	701a      	strb	r2, [r3, #0]
	mb_repl_buf[MB_MBAP_PROTOCOL_ID_H] = mb_req_buf[MB_MBAP_PROTOCOL_ID_H];
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	3302      	adds	r3, #2
 8000bbe:	683a      	ldr	r2, [r7, #0]
 8000bc0:	7892      	ldrb	r2, [r2, #2]
 8000bc2:	701a      	strb	r2, [r3, #0]
	mb_repl_buf[MB_MBAP_PROTOCOL_ID_L] = mb_req_buf[MB_MBAP_PROTOCOL_ID_L];
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	3303      	adds	r3, #3
 8000bc8:	683a      	ldr	r2, [r7, #0]
 8000bca:	78d2      	ldrb	r2, [r2, #3]
 8000bcc:	701a      	strb	r2, [r3, #0]
	mb_repl_buf[MB_MBAP_CLIENT_ID] = mb_req_buf[MB_MBAP_CLIENT_ID];
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	3306      	adds	r3, #6
 8000bd2:	683a      	ldr	r2, [r7, #0]
 8000bd4:	7992      	ldrb	r2, [r2, #6]
 8000bd6:	701a      	strb	r2, [r3, #0]
}
 8000bd8:	bf00      	nop
 8000bda:	370c      	adds	r7, #12
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr

08000be4 <mb_process_start_address>:

static uint8_t mb_process_start_address(uint16_t fn, uint16_t start_address, uint16_t quantity) {
 8000be4:	b480      	push	{r7}
 8000be6:	b085      	sub	sp, #20
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	4603      	mov	r3, r0
 8000bec:	80fb      	strh	r3, [r7, #6]
 8000bee:	460b      	mov	r3, r1
 8000bf0:	80bb      	strh	r3, [r7, #4]
 8000bf2:	4613      	mov	r3, r2
 8000bf4:	807b      	strh	r3, [r7, #2]
	uint8_t exception_code = MB_EXCEPTION_OK;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	73fb      	strb	r3, [r7, #15]
	switch (fn) {
 8000bfa:	88fb      	ldrh	r3, [r7, #6]
 8000bfc:	3b01      	subs	r3, #1
 8000bfe:	2b05      	cmp	r3, #5
 8000c00:	d849      	bhi.n	8000c96 <mb_process_start_address+0xb2>
 8000c02:	a201      	add	r2, pc, #4	@ (adr r2, 8000c08 <mb_process_start_address+0x24>)
 8000c04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c08:	08000c21 	.word	0x08000c21
 8000c0c:	08000c31 	.word	0x08000c31
 8000c10:	08000c41 	.word	0x08000c41
 8000c14:	08000c51 	.word	0x08000c51
 8000c18:	08000c61 	.word	0x08000c61
 8000c1c:	08000c71 	.word	0x08000c71
	case MB_FN_READ_COILS:
		if ((start_address + quantity) > MB_COILS_Q)
 8000c20:	88ba      	ldrh	r2, [r7, #4]
 8000c22:	887b      	ldrh	r3, [r7, #2]
 8000c24:	4413      	add	r3, r2
 8000c26:	2bff      	cmp	r3, #255	@ 0xff
 8000c28:	dd2a      	ble.n	8000c80 <mb_process_start_address+0x9c>
			exception_code = 2;
 8000c2a:	2302      	movs	r3, #2
 8000c2c:	73fb      	strb	r3, [r7, #15]
		break;
 8000c2e:	e027      	b.n	8000c80 <mb_process_start_address+0x9c>
	case MB_FN_READ_DISCRETE:
		if ((start_address + quantity) > MB_DISCRETE_Q)
 8000c30:	88ba      	ldrh	r2, [r7, #4]
 8000c32:	887b      	ldrh	r3, [r7, #2]
 8000c34:	4413      	add	r3, r2
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	dd24      	ble.n	8000c84 <mb_process_start_address+0xa0>
			exception_code = 2;
 8000c3a:	2302      	movs	r3, #2
 8000c3c:	73fb      	strb	r3, [r7, #15]
		break;
 8000c3e:	e021      	b.n	8000c84 <mb_process_start_address+0xa0>
	case MB_FN_READ_HOLDING:
		if ((start_address + quantity) > MB_HOLDING_Q)
 8000c40:	88ba      	ldrh	r2, [r7, #4]
 8000c42:	887b      	ldrh	r3, [r7, #2]
 8000c44:	4413      	add	r3, r2
 8000c46:	2b04      	cmp	r3, #4
 8000c48:	dd1e      	ble.n	8000c88 <mb_process_start_address+0xa4>
			exception_code = 2;
 8000c4a:	2302      	movs	r3, #2
 8000c4c:	73fb      	strb	r3, [r7, #15]
		break;
 8000c4e:	e01b      	b.n	8000c88 <mb_process_start_address+0xa4>
	case MB_FN_READ_INPUT:
		if ((start_address + quantity) > MB_INPUT_Q)
 8000c50:	88ba      	ldrh	r2, [r7, #4]
 8000c52:	887b      	ldrh	r3, [r7, #2]
 8000c54:	4413      	add	r3, r2
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	dd18      	ble.n	8000c8c <mb_process_start_address+0xa8>
			exception_code = 2;
 8000c5a:	2302      	movs	r3, #2
 8000c5c:	73fb      	strb	r3, [r7, #15]
		break;
 8000c5e:	e015      	b.n	8000c8c <mb_process_start_address+0xa8>

	case MB_FN_WRITE_S_COIL:
		if ((start_address + quantity) > MB_COILS_Q)
 8000c60:	88ba      	ldrh	r2, [r7, #4]
 8000c62:	887b      	ldrh	r3, [r7, #2]
 8000c64:	4413      	add	r3, r2
 8000c66:	2bff      	cmp	r3, #255	@ 0xff
 8000c68:	dd12      	ble.n	8000c90 <mb_process_start_address+0xac>
			exception_code = 2;
 8000c6a:	2302      	movs	r3, #2
 8000c6c:	73fb      	strb	r3, [r7, #15]
		break;
 8000c6e:	e00f      	b.n	8000c90 <mb_process_start_address+0xac>
	case MB_FN_WRITE_S_HOLDING:
		if ((start_address + quantity) > MB_HOLDING_Q)
 8000c70:	88ba      	ldrh	r2, [r7, #4]
 8000c72:	887b      	ldrh	r3, [r7, #2]
 8000c74:	4413      	add	r3, r2
 8000c76:	2b04      	cmp	r3, #4
 8000c78:	dd0c      	ble.n	8000c94 <mb_process_start_address+0xb0>
			exception_code = 2;
 8000c7a:	2302      	movs	r3, #2
 8000c7c:	73fb      	strb	r3, [r7, #15]
		break;
 8000c7e:	e009      	b.n	8000c94 <mb_process_start_address+0xb0>
		break;
 8000c80:	bf00      	nop
 8000c82:	e008      	b.n	8000c96 <mb_process_start_address+0xb2>
		break;
 8000c84:	bf00      	nop
 8000c86:	e006      	b.n	8000c96 <mb_process_start_address+0xb2>
		break;
 8000c88:	bf00      	nop
 8000c8a:	e004      	b.n	8000c96 <mb_process_start_address+0xb2>
		break;
 8000c8c:	bf00      	nop
 8000c8e:	e002      	b.n	8000c96 <mb_process_start_address+0xb2>
		break;
 8000c90:	bf00      	nop
 8000c92:	e000      	b.n	8000c96 <mb_process_start_address+0xb2>
		break;
 8000c94:	bf00      	nop
	}
	return exception_code;
 8000c96:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c98:	4618      	mov	r0, r3
 8000c9a:	3714      	adds	r7, #20
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca2:	4770      	bx	lr

08000ca4 <mb_process_val>:

static uint8_t mb_process_val(uint16_t fn, uint16_t val) {
 8000ca4:	b480      	push	{r7}
 8000ca6:	b085      	sub	sp, #20
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	4603      	mov	r3, r0
 8000cac:	460a      	mov	r2, r1
 8000cae:	80fb      	strh	r3, [r7, #6]
 8000cb0:	4613      	mov	r3, r2
 8000cb2:	80bb      	strh	r3, [r7, #4]
	uint8_t exception_code = MB_EXCEPTION_OK;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	73fb      	strb	r3, [r7, #15]
	switch (fn) {
 8000cb8:	88fb      	ldrh	r3, [r7, #6]
 8000cba:	2b05      	cmp	r3, #5
 8000cbc:	d109      	bne.n	8000cd2 <mb_process_val+0x2e>
	case MB_FN_WRITE_S_COIL:
		if ((val != 0xFF00) && (val != 0x0000))
 8000cbe:	88bb      	ldrh	r3, [r7, #4]
 8000cc0:	f5b3 4f7f 	cmp.w	r3, #65280	@ 0xff00
 8000cc4:	d004      	beq.n	8000cd0 <mb_process_val+0x2c>
 8000cc6:	88bb      	ldrh	r3, [r7, #4]
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d001      	beq.n	8000cd0 <mb_process_val+0x2c>
			exception_code = 3;
 8000ccc:	2303      	movs	r3, #3
 8000cce:	73fb      	strb	r3, [r7, #15]
		break;
 8000cd0:	bf00      	nop
	}
	return exception_code;
 8000cd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	3714      	adds	r7, #20
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cde:	4770      	bx	lr

08000ce0 <mb_process_err>:

static uint16_t mb_process_err(uint8_t *mb_repl_buf, uint8_t fn, uint16_t exceptionCode) {
 8000ce0:	b480      	push	{r7}
 8000ce2:	b083      	sub	sp, #12
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
 8000ce8:	460b      	mov	r3, r1
 8000cea:	70fb      	strb	r3, [r7, #3]
 8000cec:	4613      	mov	r3, r2
 8000cee:	803b      	strh	r3, [r7, #0]
	mb_repl_buf[MB_PDU_FN] = fn | 0x80;
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	3307      	adds	r3, #7
 8000cf4:	78fa      	ldrb	r2, [r7, #3]
 8000cf6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8000cfa:	b2d2      	uxtb	r2, r2
 8000cfc:	701a      	strb	r2, [r3, #0]
	mb_repl_buf[MB_PDU_EXCEPTION_CODE] = exceptionCode;
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	3308      	adds	r3, #8
 8000d02:	883a      	ldrh	r2, [r7, #0]
 8000d04:	b2d2      	uxtb	r2, r2
 8000d06:	701a      	strb	r2, [r3, #0]
	return 2;
 8000d08:	2302      	movs	r3, #2
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	370c      	adds	r7, #12
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr

08000d16 <mb_pdu_calculate_N>:

static uint16_t mb_pdu_calculate_N(uint16_t fn, uint16_t quantity) {
 8000d16:	b480      	push	{r7}
 8000d18:	b083      	sub	sp, #12
 8000d1a:	af00      	add	r7, sp, #0
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	460a      	mov	r2, r1
 8000d20:	80fb      	strh	r3, [r7, #6]
 8000d22:	4613      	mov	r3, r2
 8000d24:	80bb      	strh	r3, [r7, #4]
	switch (fn) {
 8000d26:	88fb      	ldrh	r3, [r7, #6]
 8000d28:	2b02      	cmp	r3, #2
 8000d2a:	dc02      	bgt.n	8000d32 <mb_pdu_calculate_N+0x1c>
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	dc04      	bgt.n	8000d3a <mb_pdu_calculate_N+0x24>
 8000d30:	e017      	b.n	8000d62 <mb_pdu_calculate_N+0x4c>
 8000d32:	3b03      	subs	r3, #3
 8000d34:	2b01      	cmp	r3, #1
 8000d36:	d814      	bhi.n	8000d62 <mb_pdu_calculate_N+0x4c>
 8000d38:	e00f      	b.n	8000d5a <mb_pdu_calculate_N+0x44>
	case MB_FN_READ_COILS:
	case MB_FN_READ_DISCRETE:
		if (quantity % 8 != 0)
 8000d3a:	88bb      	ldrh	r3, [r7, #4]
 8000d3c:	f003 0307 	and.w	r3, r3, #7
 8000d40:	b29b      	uxth	r3, r3
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d005      	beq.n	8000d52 <mb_pdu_calculate_N+0x3c>
			return ((quantity / 8) + 1);
 8000d46:	88bb      	ldrh	r3, [r7, #4]
 8000d48:	08db      	lsrs	r3, r3, #3
 8000d4a:	b29b      	uxth	r3, r3
 8000d4c:	3301      	adds	r3, #1
 8000d4e:	b29b      	uxth	r3, r3
 8000d50:	e008      	b.n	8000d64 <mb_pdu_calculate_N+0x4e>
		else
			return (quantity / 8);
 8000d52:	88bb      	ldrh	r3, [r7, #4]
 8000d54:	08db      	lsrs	r3, r3, #3
 8000d56:	b29b      	uxth	r3, r3
 8000d58:	e004      	b.n	8000d64 <mb_pdu_calculate_N+0x4e>
		break;
	case MB_FN_READ_HOLDING:
	case MB_FN_READ_INPUT:
		return quantity * 2;
 8000d5a:	88bb      	ldrh	r3, [r7, #4]
 8000d5c:	005b      	lsls	r3, r3, #1
 8000d5e:	b29b      	uxth	r3, r3
 8000d60:	e000      	b.n	8000d64 <mb_pdu_calculate_N+0x4e>
		break;
	default:
		return 0;
 8000d62:	2300      	movs	r3, #0
	}
}
 8000d64:	4618      	mov	r0, r3
 8000d66:	370c      	adds	r7, #12
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6e:	4770      	bx	lr

08000d70 <read_coils>:

void read_coils(uint8_t *repl_buf, uint16_t address, uint16_t quantity){
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b084      	sub	sp, #16
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
 8000d78:	460b      	mov	r3, r1
 8000d7a:	807b      	strh	r3, [r7, #2]
 8000d7c:	4613      	mov	r3, r2
 8000d7e:	803b      	strh	r3, [r7, #0]
    //uint16_t byte_count = (quantity + 7) / 8;  // Cantidad de bytes necesarios
    //memset(response_buffer, 0, 256);            // Inicializar TODO el buffer de respuesta a 0
    //memset(response_buffer, 0, byte_count);    // Inicializar el buffer de respuesta a 0
	SendString("paso por coils");
 8000d80:	4819      	ldr	r0, [pc, #100]	@ (8000de8 <read_coils+0x78>)
 8000d82:	f7ff fdb1 	bl	80008e8 <SendString>
    for (uint16_t i = 0; i < quantity; i++) {
 8000d86:	2300      	movs	r3, #0
 8000d88:	81fb      	strh	r3, [r7, #14]
 8000d8a:	e023      	b.n	8000dd4 <read_coils+0x64>
        uint16_t coil_index = address + i;
 8000d8c:	887a      	ldrh	r2, [r7, #2]
 8000d8e:	89fb      	ldrh	r3, [r7, #14]
 8000d90:	4413      	add	r3, r2
 8000d92:	81bb      	strh	r3, [r7, #12]
        if (coil_status[coil_index]) {
 8000d94:	89bb      	ldrh	r3, [r7, #12]
 8000d96:	4a15      	ldr	r2, [pc, #84]	@ (8000dec <read_coils+0x7c>)
 8000d98:	5cd3      	ldrb	r3, [r2, r3]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d017      	beq.n	8000dce <read_coils+0x5e>
            repl_buf[(i / 8) +9 ] |= (1 << (i % 8));  // Establecer el bit correspondiente si la coil está ON
 8000d9e:	89fb      	ldrh	r3, [r7, #14]
 8000da0:	08db      	lsrs	r3, r3, #3
 8000da2:	b298      	uxth	r0, r3
 8000da4:	4603      	mov	r3, r0
 8000da6:	3309      	adds	r3, #9
 8000da8:	687a      	ldr	r2, [r7, #4]
 8000daa:	4413      	add	r3, r2
 8000dac:	781b      	ldrb	r3, [r3, #0]
 8000dae:	b25a      	sxtb	r2, r3
 8000db0:	89fb      	ldrh	r3, [r7, #14]
 8000db2:	f003 0307 	and.w	r3, r3, #7
 8000db6:	2101      	movs	r1, #1
 8000db8:	fa01 f303 	lsl.w	r3, r1, r3
 8000dbc:	b25b      	sxtb	r3, r3
 8000dbe:	4313      	orrs	r3, r2
 8000dc0:	b259      	sxtb	r1, r3
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	3309      	adds	r3, #9
 8000dc6:	687a      	ldr	r2, [r7, #4]
 8000dc8:	4413      	add	r3, r2
 8000dca:	b2ca      	uxtb	r2, r1
 8000dcc:	701a      	strb	r2, [r3, #0]
    for (uint16_t i = 0; i < quantity; i++) {
 8000dce:	89fb      	ldrh	r3, [r7, #14]
 8000dd0:	3301      	adds	r3, #1
 8000dd2:	81fb      	strh	r3, [r7, #14]
 8000dd4:	89fa      	ldrh	r2, [r7, #14]
 8000dd6:	883b      	ldrh	r3, [r7, #0]
 8000dd8:	429a      	cmp	r2, r3
 8000dda:	d3d7      	bcc.n	8000d8c <read_coils+0x1c>
													//y es mas 9 para dar lugar a fn y cantidad de bytes en
													//[7] y [8]
        }
    }
}
 8000ddc:	bf00      	nop
 8000dde:	bf00      	nop
 8000de0:	3710      	adds	r7, #16
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	08017b48 	.word	0x08017b48
 8000dec:	20000000 	.word	0x20000000

08000df0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b082      	sub	sp, #8
 8000df4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000df6:	2300      	movs	r3, #0
 8000df8:	607b      	str	r3, [r7, #4]
 8000dfa:	4b12      	ldr	r3, [pc, #72]	@ (8000e44 <HAL_MspInit+0x54>)
 8000dfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dfe:	4a11      	ldr	r2, [pc, #68]	@ (8000e44 <HAL_MspInit+0x54>)
 8000e00:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e04:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e06:	4b0f      	ldr	r3, [pc, #60]	@ (8000e44 <HAL_MspInit+0x54>)
 8000e08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e0a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e0e:	607b      	str	r3, [r7, #4]
 8000e10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e12:	2300      	movs	r3, #0
 8000e14:	603b      	str	r3, [r7, #0]
 8000e16:	4b0b      	ldr	r3, [pc, #44]	@ (8000e44 <HAL_MspInit+0x54>)
 8000e18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e1a:	4a0a      	ldr	r2, [pc, #40]	@ (8000e44 <HAL_MspInit+0x54>)
 8000e1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e20:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e22:	4b08      	ldr	r3, [pc, #32]	@ (8000e44 <HAL_MspInit+0x54>)
 8000e24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e2a:	603b      	str	r3, [r7, #0]
 8000e2c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000e2e:	2200      	movs	r2, #0
 8000e30:	210f      	movs	r1, #15
 8000e32:	f06f 0001 	mvn.w	r0, #1
 8000e36:	f000 fddd 	bl	80019f4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e3a:	bf00      	nop
 8000e3c:	3708      	adds	r7, #8
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	40023800 	.word	0x40023800

08000e48 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b08a      	sub	sp, #40	@ 0x28
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e50:	f107 0314 	add.w	r3, r7, #20
 8000e54:	2200      	movs	r2, #0
 8000e56:	601a      	str	r2, [r3, #0]
 8000e58:	605a      	str	r2, [r3, #4]
 8000e5a:	609a      	str	r2, [r3, #8]
 8000e5c:	60da      	str	r2, [r3, #12]
 8000e5e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4a19      	ldr	r2, [pc, #100]	@ (8000ecc <HAL_UART_MspInit+0x84>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d12c      	bne.n	8000ec4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	613b      	str	r3, [r7, #16]
 8000e6e:	4b18      	ldr	r3, [pc, #96]	@ (8000ed0 <HAL_UART_MspInit+0x88>)
 8000e70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e72:	4a17      	ldr	r2, [pc, #92]	@ (8000ed0 <HAL_UART_MspInit+0x88>)
 8000e74:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000e78:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e7a:	4b15      	ldr	r3, [pc, #84]	@ (8000ed0 <HAL_UART_MspInit+0x88>)
 8000e7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e7e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000e82:	613b      	str	r3, [r7, #16]
 8000e84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e86:	2300      	movs	r3, #0
 8000e88:	60fb      	str	r3, [r7, #12]
 8000e8a:	4b11      	ldr	r3, [pc, #68]	@ (8000ed0 <HAL_UART_MspInit+0x88>)
 8000e8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e8e:	4a10      	ldr	r2, [pc, #64]	@ (8000ed0 <HAL_UART_MspInit+0x88>)
 8000e90:	f043 0308 	orr.w	r3, r3, #8
 8000e94:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e96:	4b0e      	ldr	r3, [pc, #56]	@ (8000ed0 <HAL_UART_MspInit+0x88>)
 8000e98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e9a:	f003 0308 	and.w	r3, r3, #8
 8000e9e:	60fb      	str	r3, [r7, #12]
 8000ea0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000ea2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000ea6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea8:	2302      	movs	r3, #2
 8000eaa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eac:	2300      	movs	r3, #0
 8000eae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eb0:	2303      	movs	r3, #3
 8000eb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000eb4:	2307      	movs	r3, #7
 8000eb6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000eb8:	f107 0314 	add.w	r3, r7, #20
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	4805      	ldr	r0, [pc, #20]	@ (8000ed4 <HAL_UART_MspInit+0x8c>)
 8000ec0:	f002 f81e 	bl	8002f00 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000ec4:	bf00      	nop
 8000ec6:	3728      	adds	r7, #40	@ 0x28
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	40004800 	.word	0x40004800
 8000ed0:	40023800 	.word	0x40023800
 8000ed4:	40020c00 	.word	0x40020c00

08000ed8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b08e      	sub	sp, #56	@ 0x38
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000ee8:	2300      	movs	r3, #0
 8000eea:	60fb      	str	r3, [r7, #12]
 8000eec:	4b33      	ldr	r3, [pc, #204]	@ (8000fbc <HAL_InitTick+0xe4>)
 8000eee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ef0:	4a32      	ldr	r2, [pc, #200]	@ (8000fbc <HAL_InitTick+0xe4>)
 8000ef2:	f043 0310 	orr.w	r3, r3, #16
 8000ef6:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ef8:	4b30      	ldr	r3, [pc, #192]	@ (8000fbc <HAL_InitTick+0xe4>)
 8000efa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000efc:	f003 0310 	and.w	r3, r3, #16
 8000f00:	60fb      	str	r3, [r7, #12]
 8000f02:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000f04:	f107 0210 	add.w	r2, r7, #16
 8000f08:	f107 0314 	add.w	r3, r7, #20
 8000f0c:	4611      	mov	r1, r2
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f002 fe54 	bl	8003bbc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000f14:	6a3b      	ldr	r3, [r7, #32]
 8000f16:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000f18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d103      	bne.n	8000f26 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000f1e:	f002 fe25 	bl	8003b6c <HAL_RCC_GetPCLK1Freq>
 8000f22:	6378      	str	r0, [r7, #52]	@ 0x34
 8000f24:	e004      	b.n	8000f30 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000f26:	f002 fe21 	bl	8003b6c <HAL_RCC_GetPCLK1Freq>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	005b      	lsls	r3, r3, #1
 8000f2e:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000f30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f32:	4a23      	ldr	r2, [pc, #140]	@ (8000fc0 <HAL_InitTick+0xe8>)
 8000f34:	fba2 2303 	umull	r2, r3, r2, r3
 8000f38:	0c9b      	lsrs	r3, r3, #18
 8000f3a:	3b01      	subs	r3, #1
 8000f3c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000f3e:	4b21      	ldr	r3, [pc, #132]	@ (8000fc4 <HAL_InitTick+0xec>)
 8000f40:	4a21      	ldr	r2, [pc, #132]	@ (8000fc8 <HAL_InitTick+0xf0>)
 8000f42:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000f44:	4b1f      	ldr	r3, [pc, #124]	@ (8000fc4 <HAL_InitTick+0xec>)
 8000f46:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000f4a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000f4c:	4a1d      	ldr	r2, [pc, #116]	@ (8000fc4 <HAL_InitTick+0xec>)
 8000f4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f50:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000f52:	4b1c      	ldr	r3, [pc, #112]	@ (8000fc4 <HAL_InitTick+0xec>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f58:	4b1a      	ldr	r3, [pc, #104]	@ (8000fc4 <HAL_InitTick+0xec>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f5e:	4b19      	ldr	r3, [pc, #100]	@ (8000fc4 <HAL_InitTick+0xec>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000f64:	4817      	ldr	r0, [pc, #92]	@ (8000fc4 <HAL_InitTick+0xec>)
 8000f66:	f002 fe5b 	bl	8003c20 <HAL_TIM_Base_Init>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000f70:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d11b      	bne.n	8000fb0 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000f78:	4812      	ldr	r0, [pc, #72]	@ (8000fc4 <HAL_InitTick+0xec>)
 8000f7a:	f002 feab 	bl	8003cd4 <HAL_TIM_Base_Start_IT>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000f84:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d111      	bne.n	8000fb0 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000f8c:	2036      	movs	r0, #54	@ 0x36
 8000f8e:	f000 fd4d 	bl	8001a2c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	2b0f      	cmp	r3, #15
 8000f96:	d808      	bhi.n	8000faa <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000f98:	2200      	movs	r2, #0
 8000f9a:	6879      	ldr	r1, [r7, #4]
 8000f9c:	2036      	movs	r0, #54	@ 0x36
 8000f9e:	f000 fd29 	bl	80019f4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000fa2:	4a0a      	ldr	r2, [pc, #40]	@ (8000fcc <HAL_InitTick+0xf4>)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	6013      	str	r3, [r2, #0]
 8000fa8:	e002      	b.n	8000fb0 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000faa:	2301      	movs	r3, #1
 8000fac:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000fb0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	3738      	adds	r7, #56	@ 0x38
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	40023800 	.word	0x40023800
 8000fc0:	431bde83 	.word	0x431bde83
 8000fc4:	200001f4 	.word	0x200001f4
 8000fc8:	40001000 	.word	0x40001000
 8000fcc:	20000104 	.word	0x20000104

08000fd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fd4:	bf00      	nop
 8000fd6:	e7fd      	b.n	8000fd4 <NMI_Handler+0x4>

08000fd8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fdc:	bf00      	nop
 8000fde:	e7fd      	b.n	8000fdc <HardFault_Handler+0x4>

08000fe0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fe4:	bf00      	nop
 8000fe6:	e7fd      	b.n	8000fe4 <MemManage_Handler+0x4>

08000fe8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fec:	bf00      	nop
 8000fee:	e7fd      	b.n	8000fec <BusFault_Handler+0x4>

08000ff0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ff4:	bf00      	nop
 8000ff6:	e7fd      	b.n	8000ff4 <UsageFault_Handler+0x4>

08000ff8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ffc:	bf00      	nop
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr
	...

08001008 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800100c:	4802      	ldr	r0, [pc, #8]	@ (8001018 <TIM6_DAC_IRQHandler+0x10>)
 800100e:	f002 fed1 	bl	8003db4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001012:	bf00      	nop
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	200001f4 	.word	0x200001f4

0800101c <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001020:	4802      	ldr	r0, [pc, #8]	@ (800102c <ETH_IRQHandler+0x10>)
 8001022:	f001 f897 	bl	8002154 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8001026:	bf00      	nop
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	20004f9c 	.word	0x20004f9c

08001030 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
  return 1;
 8001034:	2301      	movs	r3, #1
}
 8001036:	4618      	mov	r0, r3
 8001038:	46bd      	mov	sp, r7
 800103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103e:	4770      	bx	lr

08001040 <_kill>:

int _kill(int pid, int sig)
{
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
 8001048:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800104a:	4b05      	ldr	r3, [pc, #20]	@ (8001060 <_kill+0x20>)
 800104c:	2216      	movs	r2, #22
 800104e:	601a      	str	r2, [r3, #0]
  return -1;
 8001050:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001054:	4618      	mov	r0, r3
 8001056:	370c      	adds	r7, #12
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr
 8001060:	2000f684 	.word	0x2000f684

08001064 <_exit>:

void _exit (int status)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800106c:	f04f 31ff 	mov.w	r1, #4294967295
 8001070:	6878      	ldr	r0, [r7, #4]
 8001072:	f7ff ffe5 	bl	8001040 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001076:	bf00      	nop
 8001078:	e7fd      	b.n	8001076 <_exit+0x12>

0800107a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800107a:	b580      	push	{r7, lr}
 800107c:	b086      	sub	sp, #24
 800107e:	af00      	add	r7, sp, #0
 8001080:	60f8      	str	r0, [r7, #12]
 8001082:	60b9      	str	r1, [r7, #8]
 8001084:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001086:	2300      	movs	r3, #0
 8001088:	617b      	str	r3, [r7, #20]
 800108a:	e00a      	b.n	80010a2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800108c:	f3af 8000 	nop.w
 8001090:	4601      	mov	r1, r0
 8001092:	68bb      	ldr	r3, [r7, #8]
 8001094:	1c5a      	adds	r2, r3, #1
 8001096:	60ba      	str	r2, [r7, #8]
 8001098:	b2ca      	uxtb	r2, r1
 800109a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	3301      	adds	r3, #1
 80010a0:	617b      	str	r3, [r7, #20]
 80010a2:	697a      	ldr	r2, [r7, #20]
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	429a      	cmp	r2, r3
 80010a8:	dbf0      	blt.n	800108c <_read+0x12>
  }

  return len;
 80010aa:	687b      	ldr	r3, [r7, #4]
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	3718      	adds	r7, #24
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}

080010b4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b086      	sub	sp, #24
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	60f8      	str	r0, [r7, #12]
 80010bc:	60b9      	str	r1, [r7, #8]
 80010be:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010c0:	2300      	movs	r3, #0
 80010c2:	617b      	str	r3, [r7, #20]
 80010c4:	e009      	b.n	80010da <_write+0x26>
  {
    __io_putchar(*ptr++);
 80010c6:	68bb      	ldr	r3, [r7, #8]
 80010c8:	1c5a      	adds	r2, r3, #1
 80010ca:	60ba      	str	r2, [r7, #8]
 80010cc:	781b      	ldrb	r3, [r3, #0]
 80010ce:	4618      	mov	r0, r3
 80010d0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010d4:	697b      	ldr	r3, [r7, #20]
 80010d6:	3301      	adds	r3, #1
 80010d8:	617b      	str	r3, [r7, #20]
 80010da:	697a      	ldr	r2, [r7, #20]
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	429a      	cmp	r2, r3
 80010e0:	dbf1      	blt.n	80010c6 <_write+0x12>
  }
  return len;
 80010e2:	687b      	ldr	r3, [r7, #4]
}
 80010e4:	4618      	mov	r0, r3
 80010e6:	3718      	adds	r7, #24
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}

080010ec <_close>:

int _close(int file)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80010f4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	370c      	adds	r7, #12
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr

08001104 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001104:	b480      	push	{r7}
 8001106:	b083      	sub	sp, #12
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
 800110c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001114:	605a      	str	r2, [r3, #4]
  return 0;
 8001116:	2300      	movs	r3, #0
}
 8001118:	4618      	mov	r0, r3
 800111a:	370c      	adds	r7, #12
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr

08001124 <_isatty>:

int _isatty(int file)
{
 8001124:	b480      	push	{r7}
 8001126:	b083      	sub	sp, #12
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800112c:	2301      	movs	r3, #1
}
 800112e:	4618      	mov	r0, r3
 8001130:	370c      	adds	r7, #12
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr

0800113a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800113a:	b480      	push	{r7}
 800113c:	b085      	sub	sp, #20
 800113e:	af00      	add	r7, sp, #0
 8001140:	60f8      	str	r0, [r7, #12]
 8001142:	60b9      	str	r1, [r7, #8]
 8001144:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001146:	2300      	movs	r3, #0
}
 8001148:	4618      	mov	r0, r3
 800114a:	3714      	adds	r7, #20
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr

08001154 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001154:	b480      	push	{r7}
 8001156:	b087      	sub	sp, #28
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800115c:	4a14      	ldr	r2, [pc, #80]	@ (80011b0 <_sbrk+0x5c>)
 800115e:	4b15      	ldr	r3, [pc, #84]	@ (80011b4 <_sbrk+0x60>)
 8001160:	1ad3      	subs	r3, r2, r3
 8001162:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001164:	697b      	ldr	r3, [r7, #20]
 8001166:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001168:	4b13      	ldr	r3, [pc, #76]	@ (80011b8 <_sbrk+0x64>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d102      	bne.n	8001176 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001170:	4b11      	ldr	r3, [pc, #68]	@ (80011b8 <_sbrk+0x64>)
 8001172:	4a12      	ldr	r2, [pc, #72]	@ (80011bc <_sbrk+0x68>)
 8001174:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001176:	4b10      	ldr	r3, [pc, #64]	@ (80011b8 <_sbrk+0x64>)
 8001178:	681a      	ldr	r2, [r3, #0]
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	4413      	add	r3, r2
 800117e:	693a      	ldr	r2, [r7, #16]
 8001180:	429a      	cmp	r2, r3
 8001182:	d205      	bcs.n	8001190 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001184:	4b0e      	ldr	r3, [pc, #56]	@ (80011c0 <_sbrk+0x6c>)
 8001186:	220c      	movs	r2, #12
 8001188:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800118a:	f04f 33ff 	mov.w	r3, #4294967295
 800118e:	e009      	b.n	80011a4 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001190:	4b09      	ldr	r3, [pc, #36]	@ (80011b8 <_sbrk+0x64>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001196:	4b08      	ldr	r3, [pc, #32]	@ (80011b8 <_sbrk+0x64>)
 8001198:	681a      	ldr	r2, [r3, #0]
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	4413      	add	r3, r2
 800119e:	4a06      	ldr	r2, [pc, #24]	@ (80011b8 <_sbrk+0x64>)
 80011a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011a2:	68fb      	ldr	r3, [r7, #12]
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	371c      	adds	r7, #28
 80011a8:	46bd      	mov	sp, r7
 80011aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ae:	4770      	bx	lr
 80011b0:	20030000 	.word	0x20030000
 80011b4:	00000400 	.word	0x00000400
 80011b8:	2000023c 	.word	0x2000023c
 80011bc:	2000f698 	.word	0x2000f698
 80011c0:	2000f684 	.word	0x2000f684

080011c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011c8:	4b06      	ldr	r3, [pc, #24]	@ (80011e4 <SystemInit+0x20>)
 80011ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80011ce:	4a05      	ldr	r2, [pc, #20]	@ (80011e4 <SystemInit+0x20>)
 80011d0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80011d4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011d8:	bf00      	nop
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr
 80011e2:	bf00      	nop
 80011e4:	e000ed00 	.word	0xe000ed00

080011e8 <tcp_thread>:
static void process_client_connection(struct netconn *client_conn);
static err_t initialize_server();


// Función principal del hilo TCP
static void tcp_thread(void *arg) {
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b084      	sub	sp, #16
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
    err_t server_err, accept_err;

    SendString("Estoy en thread principal***********************************");
 80011f0:	4822      	ldr	r0, [pc, #136]	@ (800127c <tcp_thread+0x94>)
 80011f2:	f7ff fb79 	bl	80008e8 <SendString>

    while (1) {
        // Inicializar el servidor
        server_err = initialize_server();
 80011f6:	f000 f8d7 	bl	80013a8 <initialize_server>
 80011fa:	4603      	mov	r3, r0
 80011fc:	73fb      	strb	r3, [r7, #15]
        if (server_err != ERR_OK) {
 80011fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d007      	beq.n	8001216 <tcp_thread+0x2e>
            //printf("Error: Reintentando iniciar el servidor en %d ms...\n", RETRY_DELAY_MS);
        	SendString("Error: Reintentando iniciar el servidor");
 8001206:	481e      	ldr	r0, [pc, #120]	@ (8001280 <tcp_thread+0x98>)
 8001208:	f7ff fb6e 	bl	80008e8 <SendString>
            sys_msleep(RETRY_DELAY_MS); // Esperar antes de reintentar
 800120c:	f241 3088 	movw	r0, #5000	@ 0x1388
 8001210:	f00c fa64 	bl	800d6dc <sys_msleep>
            continue;
 8001214:	e030      	b.n	8001278 <tcp_thread+0x90>
        }

        // Aceptar conexiones entrantes
        while (1) {
            accept_err = netconn_accept(conn, &newconn);
 8001216:	4b1b      	ldr	r3, [pc, #108]	@ (8001284 <tcp_thread+0x9c>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	491b      	ldr	r1, [pc, #108]	@ (8001288 <tcp_thread+0xa0>)
 800121c:	4618      	mov	r0, r3
 800121e:	f008 fa17 	bl	8009650 <netconn_accept>
 8001222:	4603      	mov	r3, r0
 8001224:	73bb      	strb	r3, [r7, #14]
            if (accept_err == ERR_OK) {
 8001226:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d108      	bne.n	8001240 <tcp_thread+0x58>
                //printf("Cliente conectado.\n");
            	SendString("Cliente conectado...\n");
 800122e:	4817      	ldr	r0, [pc, #92]	@ (800128c <tcp_thread+0xa4>)
 8001230:	f7ff fb5a 	bl	80008e8 <SendString>
                process_client_connection(newconn); // Procesar conexión del cliente
 8001234:	4b14      	ldr	r3, [pc, #80]	@ (8001288 <tcp_thread+0xa0>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4618      	mov	r0, r3
 800123a:	f000 f863 	bl	8001304 <process_client_connection>
 800123e:	e7ea      	b.n	8001216 <tcp_thread+0x2e>
            } else {
                //printf("Error al aceptar conexión (Error: %d). Reintentando...\n", accept_err);
            	SendString("Error al aceptar conexión Reintentando...\n");
 8001240:	4813      	ldr	r0, [pc, #76]	@ (8001290 <tcp_thread+0xa8>)
 8001242:	f7ff fb51 	bl	80008e8 <SendString>
                break; // Salir al detectar un error en el servidor
 8001246:	bf00      	nop
            }
        }

        // Liberar recursos del servidor en caso de error
        //printf("Cerrando servidor...\n");
        SendString("Cerrando servidor...\n");
 8001248:	4812      	ldr	r0, [pc, #72]	@ (8001294 <tcp_thread+0xac>)
 800124a:	f7ff fb4d 	bl	80008e8 <SendString>
        netconn_close(conn);
 800124e:	4b0d      	ldr	r3, [pc, #52]	@ (8001284 <tcp_thread+0x9c>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4618      	mov	r0, r3
 8001254:	f008 fd9c 	bl	8009d90 <netconn_close>
        netconn_delete(conn);
 8001258:	4b0a      	ldr	r3, [pc, #40]	@ (8001284 <tcp_thread+0x9c>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4618      	mov	r0, r3
 800125e:	f008 f977 	bl	8009550 <netconn_delete>
        conn = NULL;
 8001262:	4b08      	ldr	r3, [pc, #32]	@ (8001284 <tcp_thread+0x9c>)
 8001264:	2200      	movs	r2, #0
 8001266:	601a      	str	r2, [r3, #0]

        // Reintentar después de un tiempo
        //printf("Reiniciando servidor en %d ms...\n", RETRY_DELAY_MS);
        SendString("Reiniciando servidor en ms...\n");
 8001268:	480b      	ldr	r0, [pc, #44]	@ (8001298 <tcp_thread+0xb0>)
 800126a:	f7ff fb3d 	bl	80008e8 <SendString>
        sys_msleep(RETRY_DELAY_MS);
 800126e:	f241 3088 	movw	r0, #5000	@ 0x1388
 8001272:	f00c fa33 	bl	800d6dc <sys_msleep>
 8001276:	e7be      	b.n	80011f6 <tcp_thread+0xe>
        server_err = initialize_server();
 8001278:	e7bd      	b.n	80011f6 <tcp_thread+0xe>
 800127a:	bf00      	nop
 800127c:	08017b58 	.word	0x08017b58
 8001280:	08017b98 	.word	0x08017b98
 8001284:	20000240 	.word	0x20000240
 8001288:	20000244 	.word	0x20000244
 800128c:	08017bc0 	.word	0x08017bc0
 8001290:	08017bd8 	.word	0x08017bd8
 8001294:	08017c04 	.word	0x08017c04
 8001298:	08017c1c 	.word	0x08017c1c

0800129c <tcpserver_init>:





void tcpserver_init(void) {
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af02      	add	r7, sp, #8
	sys_thread_new("tcp_thread", tcp_thread, NULL, 8*DEFAULT_THREAD_STACKSIZE,
 80012a2:	2318      	movs	r3, #24
 80012a4:	9300      	str	r3, [sp, #0]
 80012a6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80012aa:	2200      	movs	r2, #0
 80012ac:	4903      	ldr	r1, [pc, #12]	@ (80012bc <tcpserver_init+0x20>)
 80012ae:	4804      	ldr	r0, [pc, #16]	@ (80012c0 <tcpserver_init+0x24>)
 80012b0:	f015 fb7c 	bl	80169ac <sys_thread_new>
			osPriorityNormal);
}
 80012b4:	bf00      	nop
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	080011e9 	.word	0x080011e9
 80012c0:	08017c3c 	.word	0x08017c3c

080012c4 <copyString>:

static void copyString(uint8_t* dest, uint8_t* src, unsigned num){
 80012c4:	b480      	push	{r7}
 80012c6:	b087      	sub	sp, #28
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	60f8      	str	r0, [r7, #12]
 80012cc:	60b9      	str	r1, [r7, #8]
 80012ce:	607a      	str	r2, [r7, #4]
	for(unsigned i = 0; i != num; ++i){
 80012d0:	2300      	movs	r3, #0
 80012d2:	617b      	str	r3, [r7, #20]
 80012d4:	e00a      	b.n	80012ec <copyString+0x28>
		dest[i] = src[i];
 80012d6:	68ba      	ldr	r2, [r7, #8]
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	441a      	add	r2, r3
 80012dc:	68f9      	ldr	r1, [r7, #12]
 80012de:	697b      	ldr	r3, [r7, #20]
 80012e0:	440b      	add	r3, r1
 80012e2:	7812      	ldrb	r2, [r2, #0]
 80012e4:	701a      	strb	r2, [r3, #0]
	for(unsigned i = 0; i != num; ++i){
 80012e6:	697b      	ldr	r3, [r7, #20]
 80012e8:	3301      	adds	r3, #1
 80012ea:	617b      	str	r3, [r7, #20]
 80012ec:	697a      	ldr	r2, [r7, #20]
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	429a      	cmp	r2, r3
 80012f2:	d1f0      	bne.n	80012d6 <copyString+0x12>
	}
}
 80012f4:	bf00      	nop
 80012f6:	bf00      	nop
 80012f8:	371c      	adds	r7, #28
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr
	...

08001304 <process_client_connection>:


/************************************************************************/
// Función para procesar una conexión de cliente
static void process_client_connection(struct netconn *client_conn) {
 8001304:	b580      	push	{r7, lr}
 8001306:	b086      	sub	sp, #24
 8001308:	af02      	add	r7, sp, #8
 800130a:	6078      	str	r0, [r7, #4]
    err_t recv_err;

    // Configurar timeout para evitar bloqueos indefinidos
    //netconn_set_recvtimeout(client_conn, 5000); // Timeout de 5 segundos

    while ((recv_err = netconn_recv(client_conn, &netbuf)) == ERR_OK) {
 800130c:	e02d      	b.n	800136a <process_client_connection+0x66>
        do {
            copyString(mb_req_buf, netbuf->p->payload, netbuf->p->len); // Obtener mensaje del cliente
 800130e:	4b22      	ldr	r3, [pc, #136]	@ (8001398 <process_client_connection+0x94>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	6859      	ldr	r1, [r3, #4]
 8001316:	4b20      	ldr	r3, [pc, #128]	@ (8001398 <process_client_connection+0x94>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	895b      	ldrh	r3, [r3, #10]
 800131e:	461a      	mov	r2, r3
 8001320:	481e      	ldr	r0, [pc, #120]	@ (800139c <process_client_connection+0x98>)
 8001322:	f7ff ffcf 	bl	80012c4 <copyString>
            uint16_t buf_len = netbuf->p->len;
 8001326:	4b1c      	ldr	r3, [pc, #112]	@ (8001398 <process_client_connection+0x94>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	895b      	ldrh	r3, [r3, #10]
 800132e:	81bb      	strh	r3, [r7, #12]
            buf_len = mb_process(mb_repl_buf, mb_req_buf, buf_len);    // Procesar datos
 8001330:	89bb      	ldrh	r3, [r7, #12]
 8001332:	461a      	mov	r2, r3
 8001334:	4919      	ldr	r1, [pc, #100]	@ (800139c <process_client_connection+0x98>)
 8001336:	481a      	ldr	r0, [pc, #104]	@ (80013a0 <process_client_connection+0x9c>)
 8001338:	f7ff fb20 	bl	800097c <mb_process>
 800133c:	4603      	mov	r3, r0
 800133e:	81bb      	strh	r3, [r7, #12]
            netconn_write(client_conn, mb_repl_buf, buf_len, NETCONN_COPY); // Responder al cliente
 8001340:	89ba      	ldrh	r2, [r7, #12]
 8001342:	2300      	movs	r3, #0
 8001344:	9300      	str	r3, [sp, #0]
 8001346:	2301      	movs	r3, #1
 8001348:	4915      	ldr	r1, [pc, #84]	@ (80013a0 <process_client_connection+0x9c>)
 800134a:	6878      	ldr	r0, [r7, #4]
 800134c:	f008 fc1e 	bl	8009b8c <netconn_write_partly>
        } while (netbuf_next(netbuf) > 0);
 8001350:	4b11      	ldr	r3, [pc, #68]	@ (8001398 <process_client_connection+0x94>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4618      	mov	r0, r3
 8001356:	f00a f94d 	bl	800b5f4 <netbuf_next>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	dcd6      	bgt.n	800130e <process_client_connection+0xa>

        netbuf_delete(netbuf); // Liberar el buffer después de procesarlo
 8001360:	4b0d      	ldr	r3, [pc, #52]	@ (8001398 <process_client_connection+0x94>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4618      	mov	r0, r3
 8001366:	f00a f925 	bl	800b5b4 <netbuf_delete>
    while ((recv_err = netconn_recv(client_conn, &netbuf)) == ERR_OK) {
 800136a:	490b      	ldr	r1, [pc, #44]	@ (8001398 <process_client_connection+0x94>)
 800136c:	6878      	ldr	r0, [r7, #4]
 800136e:	f008 fb93 	bl	8009a98 <netconn_recv>
 8001372:	4603      	mov	r3, r0
 8001374:	73fb      	strb	r3, [r7, #15]
 8001376:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d0c7      	beq.n	800130e <process_client_connection+0xa>
    }

    // Cerrar y liberar la conexión del cliente
    netconn_close(client_conn);
 800137e:	6878      	ldr	r0, [r7, #4]
 8001380:	f008 fd06 	bl	8009d90 <netconn_close>
    netconn_delete(client_conn);
 8001384:	6878      	ldr	r0, [r7, #4]
 8001386:	f008 f8e3 	bl	8009550 <netconn_delete>
    SendString("Desconecto...\n");
 800138a:	4806      	ldr	r0, [pc, #24]	@ (80013a4 <process_client_connection+0xa0>)
 800138c:	f7ff faac 	bl	80008e8 <SendString>
}
 8001390:	bf00      	nop
 8001392:	3710      	adds	r7, #16
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	20000248 	.word	0x20000248
 800139c:	2000024c 	.word	0x2000024c
 80013a0:	20000350 	.word	0x20000350
 80013a4:	08017c48 	.word	0x08017c48

080013a8 <initialize_server>:

// Función para inicializar la conexión TCP
static err_t initialize_server() {
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
    conn = netconn_new(NETCONN_TCP);
 80013ae:	2200      	movs	r2, #0
 80013b0:	2100      	movs	r1, #0
 80013b2:	2010      	movs	r0, #16
 80013b4:	f008 f82e 	bl	8009414 <netconn_new_with_proto_and_callback>
 80013b8:	4603      	mov	r3, r0
 80013ba:	4a1f      	ldr	r2, [pc, #124]	@ (8001438 <initialize_server+0x90>)
 80013bc:	6013      	str	r3, [r2, #0]
    if (conn == NULL) {
 80013be:	4b1e      	ldr	r3, [pc, #120]	@ (8001438 <initialize_server+0x90>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d105      	bne.n	80013d2 <initialize_server+0x2a>
        //printf("Error: No se pudo crear la conexión.\n");
    	SendString("Error: No se pudo crear la conexión.\n");
 80013c6:	481d      	ldr	r0, [pc, #116]	@ (800143c <initialize_server+0x94>)
 80013c8:	f7ff fa8e 	bl	80008e8 <SendString>
        return ERR_MEM;
 80013cc:	f04f 33ff 	mov.w	r3, #4294967295
 80013d0:	e02d      	b.n	800142e <initialize_server+0x86>
    }


    err_t err = netconn_bind(conn, IP_ADDR_ANY, MB_TCP_PORT);
 80013d2:	4b19      	ldr	r3, [pc, #100]	@ (8001438 <initialize_server+0x90>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f44f 72fb 	mov.w	r2, #502	@ 0x1f6
 80013da:	4919      	ldr	r1, [pc, #100]	@ (8001440 <initialize_server+0x98>)
 80013dc:	4618      	mov	r0, r3
 80013de:	f008 f8d3 	bl	8009588 <netconn_bind>
 80013e2:	4603      	mov	r3, r0
 80013e4:	71fb      	strb	r3, [r7, #7]
    if (err != ERR_OK) {
 80013e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d00d      	beq.n	800140a <initialize_server+0x62>
        //printf("Error: No se pudo enlazar al puerto %d (Error: %d).\n", MB_TCP_PORT, err);
    	SendString("Error: No se pudo enlazar al puerto\n");
 80013ee:	4815      	ldr	r0, [pc, #84]	@ (8001444 <initialize_server+0x9c>)
 80013f0:	f7ff fa7a 	bl	80008e8 <SendString>
        netconn_delete(conn);
 80013f4:	4b10      	ldr	r3, [pc, #64]	@ (8001438 <initialize_server+0x90>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4618      	mov	r0, r3
 80013fa:	f008 f8a9 	bl	8009550 <netconn_delete>
        conn = NULL;
 80013fe:	4b0e      	ldr	r3, [pc, #56]	@ (8001438 <initialize_server+0x90>)
 8001400:	2200      	movs	r2, #0
 8001402:	601a      	str	r2, [r3, #0]
        return err;
 8001404:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001408:	e011      	b.n	800142e <initialize_server+0x86>
    }

    SendString("Activando Keep-Alive...\n");
 800140a:	480f      	ldr	r0, [pc, #60]	@ (8001448 <initialize_server+0xa0>)
 800140c:	f7ff fa6c 	bl	80008e8 <SendString>

    //netconn_set_keepalive(newconn, 1);
    enable_keepalive(conn);
 8001410:	4b09      	ldr	r3, [pc, #36]	@ (8001438 <initialize_server+0x90>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4618      	mov	r0, r3
 8001416:	f000 f81b 	bl	8001450 <enable_keepalive>

    netconn_listen(conn); // Escuchar conexiones entrantes
 800141a:	4b07      	ldr	r3, [pc, #28]	@ (8001438 <initialize_server+0x90>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	21ff      	movs	r1, #255	@ 0xff
 8001420:	4618      	mov	r0, r3
 8001422:	f008 f8e9 	bl	80095f8 <netconn_listen_with_backlog>
    //printf("Servidor TCP escuchando en el puerto %d.\n", MB_TCP_PORT);
    SendString("Servidor TCP escuchando en el puerto");
 8001426:	4809      	ldr	r0, [pc, #36]	@ (800144c <initialize_server+0xa4>)
 8001428:	f7ff fa5e 	bl	80008e8 <SendString>
    return ERR_OK;
 800142c:	2300      	movs	r3, #0
}
 800142e:	4618      	mov	r0, r3
 8001430:	3708      	adds	r7, #8
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	20000240 	.word	0x20000240
 800143c:	08017c58 	.word	0x08017c58
 8001440:	0801b394 	.word	0x0801b394
 8001444:	08017c80 	.word	0x08017c80
 8001448:	08017ca8 	.word	0x08017ca8
 800144c:	08017cc4 	.word	0x08017cc4

08001450 <enable_keepalive>:

void enable_keepalive(struct netconn *conn) {
 8001450:	b480      	push	{r7}
 8001452:	b085      	sub	sp, #20
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
    if (conn != NULL && conn->pcb.tcp != NULL) {
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d01b      	beq.n	8001496 <enable_keepalive+0x46>
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d017      	beq.n	8001496 <enable_keepalive+0x46>
        struct tcp_pcb *pcb = conn->pcb.tcp;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	60fb      	str	r3, [r7, #12]

        // Activar opción KEEPALIVE
        pcb->so_options |= SOF_KEEPALIVE;
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	7a5b      	ldrb	r3, [r3, #9]
 8001470:	f043 0308 	orr.w	r3, r3, #8
 8001474:	b2da      	uxtb	r2, r3
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	725a      	strb	r2, [r3, #9]

        // Configurar parámetros de Keep-Alive
        pcb->keep_idle = TCP_KEEPIDLE_DEFAULT;     // Tiempo en ms antes del primer paquete
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	f242 7210 	movw	r2, #10000	@ 0x2710
 8001480:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;   // Intervalo entre intentos en ms
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800148a:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        pcb->keep_cnt = TCP_KEEPCNT_DEFAULT;       // Número máximo de intentos
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	2203      	movs	r2, #3
 8001492:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }
}
 8001496:	bf00      	nop
 8001498:	3714      	adds	r7, #20
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr
	...

080014a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80014a4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80014dc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80014a8:	f7ff fe8c 	bl	80011c4 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80014ac:	480c      	ldr	r0, [pc, #48]	@ (80014e0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80014ae:	490d      	ldr	r1, [pc, #52]	@ (80014e4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80014b0:	4a0d      	ldr	r2, [pc, #52]	@ (80014e8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80014b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014b4:	e002      	b.n	80014bc <LoopCopyDataInit>

080014b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014ba:	3304      	adds	r3, #4

080014bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014c0:	d3f9      	bcc.n	80014b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014c2:	4a0a      	ldr	r2, [pc, #40]	@ (80014ec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80014c4:	4c0a      	ldr	r4, [pc, #40]	@ (80014f0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80014c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014c8:	e001      	b.n	80014ce <LoopFillZerobss>

080014ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014cc:	3204      	adds	r2, #4

080014ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014d0:	d3fb      	bcc.n	80014ca <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80014d2:	f015 fcb3 	bl	8016e3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014d6:	f7ff f85b 	bl	8000590 <main>
  bx  lr    
 80014da:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80014dc:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80014e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014e4:	2000018c 	.word	0x2000018c
  ldr r2, =_sidata
 80014e8:	0801b494 	.word	0x0801b494
  ldr r2, =_sbss
 80014ec:	2000018c 	.word	0x2000018c
  ldr r4, =_ebss
 80014f0:	2000f694 	.word	0x2000f694

080014f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014f4:	e7fe      	b.n	80014f4 <ADC_IRQHandler>

080014f6 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 80014f6:	b480      	push	{r7}
 80014f8:	b083      	sub	sp, #12
 80014fa:	af00      	add	r7, sp, #0
 80014fc:	6078      	str	r0, [r7, #4]
 80014fe:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d00b      	beq.n	800151e <LAN8742_RegisterBusIO+0x28>
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	68db      	ldr	r3, [r3, #12]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d007      	beq.n	800151e <LAN8742_RegisterBusIO+0x28>
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	689b      	ldr	r3, [r3, #8]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d003      	beq.n	800151e <LAN8742_RegisterBusIO+0x28>
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	691b      	ldr	r3, [r3, #16]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d102      	bne.n	8001524 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 800151e:	f04f 33ff 	mov.w	r3, #4294967295
 8001522:	e014      	b.n	800154e <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	681a      	ldr	r2, [r3, #0]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	685a      	ldr	r2, [r3, #4]
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	68da      	ldr	r2, [r3, #12]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	689a      	ldr	r2, [r3, #8]
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	691a      	ldr	r2, [r3, #16]
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 800154c:	2300      	movs	r3, #0
}
 800154e:	4618      	mov	r0, r3
 8001550:	370c      	adds	r7, #12
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr

0800155a <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 800155a:	b580      	push	{r7, lr}
 800155c:	b086      	sub	sp, #24
 800155e:	af00      	add	r7, sp, #0
 8001560:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8001562:	2300      	movs	r3, #0
 8001564:	60fb      	str	r3, [r7, #12]
 8001566:	2300      	movs	r3, #0
 8001568:	60bb      	str	r3, [r7, #8]
 800156a:	2300      	movs	r3, #0
 800156c:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 800156e:	2300      	movs	r3, #0
 8001570:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d17c      	bne.n	8001674 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	689b      	ldr	r3, [r3, #8]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d002      	beq.n	8001588 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	689b      	ldr	r3, [r3, #8]
 8001586:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2220      	movs	r2, #32
 800158c:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 800158e:	2300      	movs	r3, #0
 8001590:	617b      	str	r3, [r7, #20]
 8001592:	e01c      	b.n	80015ce <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	695b      	ldr	r3, [r3, #20]
 8001598:	f107 0208 	add.w	r2, r7, #8
 800159c:	2112      	movs	r1, #18
 800159e:	6978      	ldr	r0, [r7, #20]
 80015a0:	4798      	blx	r3
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	da03      	bge.n	80015b0 <LAN8742_Init+0x56>
       {
         status = LAN8742_STATUS_READ_ERROR;
 80015a8:	f06f 0304 	mvn.w	r3, #4
 80015ac:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 80015ae:	e00b      	b.n	80015c8 <LAN8742_Init+0x6e>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 80015b0:	68bb      	ldr	r3, [r7, #8]
 80015b2:	f003 031f 	and.w	r3, r3, #31
 80015b6:	697a      	ldr	r2, [r7, #20]
 80015b8:	429a      	cmp	r2, r3
 80015ba:	d105      	bne.n	80015c8 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	697a      	ldr	r2, [r7, #20]
 80015c0:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 80015c2:	2300      	movs	r3, #0
 80015c4:	613b      	str	r3, [r7, #16]
         break;
 80015c6:	e005      	b.n	80015d4 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	3301      	adds	r3, #1
 80015cc:	617b      	str	r3, [r7, #20]
 80015ce:	697b      	ldr	r3, [r7, #20]
 80015d0:	2b1f      	cmp	r3, #31
 80015d2:	d9df      	bls.n	8001594 <LAN8742_Init+0x3a>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	2b1f      	cmp	r3, #31
 80015da:	d902      	bls.n	80015e2 <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 80015dc:	f06f 0302 	mvn.w	r3, #2
 80015e0:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 80015e2:	693b      	ldr	r3, [r7, #16]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d145      	bne.n	8001674 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	691b      	ldr	r3, [r3, #16]
 80015ec:	687a      	ldr	r2, [r7, #4]
 80015ee:	6810      	ldr	r0, [r2, #0]
 80015f0:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80015f4:	2100      	movs	r1, #0
 80015f6:	4798      	blx	r3
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	db37      	blt.n	800166e <LAN8742_Init+0x114>
       {
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	695b      	ldr	r3, [r3, #20]
 8001602:	687a      	ldr	r2, [r7, #4]
 8001604:	6810      	ldr	r0, [r2, #0]
 8001606:	f107 0208 	add.w	r2, r7, #8
 800160a:	2100      	movs	r1, #0
 800160c:	4798      	blx	r3
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	db28      	blt.n	8001666 <LAN8742_Init+0x10c>
         {
           tickstart = pObj->IO.GetTick();
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	699b      	ldr	r3, [r3, #24]
 8001618:	4798      	blx	r3
 800161a:	4603      	mov	r3, r0
 800161c:	60fb      	str	r3, [r7, #12]

           /* wait until software reset is done or timeout occurred */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 800161e:	e01c      	b.n	800165a <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	699b      	ldr	r3, [r3, #24]
 8001624:	4798      	blx	r3
 8001626:	4603      	mov	r3, r0
 8001628:	461a      	mov	r2, r3
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	1ad3      	subs	r3, r2, r3
 800162e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001632:	d80e      	bhi.n	8001652 <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	695b      	ldr	r3, [r3, #20]
 8001638:	687a      	ldr	r2, [r7, #4]
 800163a:	6810      	ldr	r0, [r2, #0]
 800163c:	f107 0208 	add.w	r2, r7, #8
 8001640:	2100      	movs	r1, #0
 8001642:	4798      	blx	r3
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	da07      	bge.n	800165a <LAN8742_Init+0x100>
               {
                 status = LAN8742_STATUS_READ_ERROR;
 800164a:	f06f 0304 	mvn.w	r3, #4
 800164e:	613b      	str	r3, [r7, #16]
                 break;
 8001650:	e010      	b.n	8001674 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8001652:	f06f 0301 	mvn.w	r3, #1
 8001656:	613b      	str	r3, [r7, #16]
               break;
 8001658:	e00c      	b.n	8001674 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 800165a:	68bb      	ldr	r3, [r7, #8]
 800165c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001660:	2b00      	cmp	r3, #0
 8001662:	d1dd      	bne.n	8001620 <LAN8742_Init+0xc6>
 8001664:	e006      	b.n	8001674 <LAN8742_Init+0x11a>
             }
           }
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 8001666:	f06f 0304 	mvn.w	r3, #4
 800166a:	613b      	str	r3, [r7, #16]
 800166c:	e002      	b.n	8001674 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 800166e:	f06f 0303 	mvn.w	r3, #3
 8001672:	613b      	str	r3, [r7, #16]
       }
     }
   }

   if(status == LAN8742_STATUS_OK)
 8001674:	693b      	ldr	r3, [r7, #16]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d112      	bne.n	80016a0 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	699b      	ldr	r3, [r3, #24]
 800167e:	4798      	blx	r3
 8001680:	4603      	mov	r3, r0
 8001682:	60fb      	str	r3, [r7, #12]

     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8001684:	bf00      	nop
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	699b      	ldr	r3, [r3, #24]
 800168a:	4798      	blx	r3
 800168c:	4603      	mov	r3, r0
 800168e:	461a      	mov	r2, r3
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	1ad3      	subs	r3, r2, r3
 8001694:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001698:	d9f5      	bls.n	8001686 <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2201      	movs	r2, #1
 800169e:	605a      	str	r2, [r3, #4]
   }

   return status;
 80016a0:	693b      	ldr	r3, [r7, #16]
 }
 80016a2:	4618      	mov	r0, r3
 80016a4:	3718      	adds	r7, #24
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}

080016aa <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 80016aa:	b580      	push	{r7, lr}
 80016ac:	b084      	sub	sp, #16
 80016ae:	af00      	add	r7, sp, #0
 80016b0:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 80016b2:	2300      	movs	r3, #0
 80016b4:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	695b      	ldr	r3, [r3, #20]
 80016ba:	687a      	ldr	r2, [r7, #4]
 80016bc:	6810      	ldr	r0, [r2, #0]
 80016be:	f107 020c 	add.w	r2, r7, #12
 80016c2:	2101      	movs	r1, #1
 80016c4:	4798      	blx	r3
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	da02      	bge.n	80016d2 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 80016cc:	f06f 0304 	mvn.w	r3, #4
 80016d0:	e06e      	b.n	80017b0 <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	695b      	ldr	r3, [r3, #20]
 80016d6:	687a      	ldr	r2, [r7, #4]
 80016d8:	6810      	ldr	r0, [r2, #0]
 80016da:	f107 020c 	add.w	r2, r7, #12
 80016de:	2101      	movs	r1, #1
 80016e0:	4798      	blx	r3
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	da02      	bge.n	80016ee <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 80016e8:	f06f 0304 	mvn.w	r3, #4
 80016ec:	e060      	b.n	80017b0 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	f003 0304 	and.w	r3, r3, #4
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d101      	bne.n	80016fc <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 80016f8:	2301      	movs	r3, #1
 80016fa:	e059      	b.n	80017b0 <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	695b      	ldr	r3, [r3, #20]
 8001700:	687a      	ldr	r2, [r7, #4]
 8001702:	6810      	ldr	r0, [r2, #0]
 8001704:	f107 020c 	add.w	r2, r7, #12
 8001708:	2100      	movs	r1, #0
 800170a:	4798      	blx	r3
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	da02      	bge.n	8001718 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001712:	f06f 0304 	mvn.w	r3, #4
 8001716:	e04b      	b.n	80017b0 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800171e:	2b00      	cmp	r3, #0
 8001720:	d11b      	bne.n	800175a <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001728:	2b00      	cmp	r3, #0
 800172a:	d006      	beq.n	800173a <LAN8742_GetLinkState+0x90>
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001732:	2b00      	cmp	r3, #0
 8001734:	d001      	beq.n	800173a <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001736:	2302      	movs	r3, #2
 8001738:	e03a      	b.n	80017b0 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001740:	2b00      	cmp	r3, #0
 8001742:	d001      	beq.n	8001748 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001744:	2303      	movs	r3, #3
 8001746:	e033      	b.n	80017b0 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800174e:	2b00      	cmp	r3, #0
 8001750:	d001      	beq.n	8001756 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001752:	2304      	movs	r3, #4
 8001754:	e02c      	b.n	80017b0 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001756:	2305      	movs	r3, #5
 8001758:	e02a      	b.n	80017b0 <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	695b      	ldr	r3, [r3, #20]
 800175e:	687a      	ldr	r2, [r7, #4]
 8001760:	6810      	ldr	r0, [r2, #0]
 8001762:	f107 020c 	add.w	r2, r7, #12
 8001766:	211f      	movs	r1, #31
 8001768:	4798      	blx	r3
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	da02      	bge.n	8001776 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8001770:	f06f 0304 	mvn.w	r3, #4
 8001774:	e01c      	b.n	80017b0 <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800177c:	2b00      	cmp	r3, #0
 800177e:	d101      	bne.n	8001784 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8001780:	2306      	movs	r3, #6
 8001782:	e015      	b.n	80017b0 <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	f003 031c 	and.w	r3, r3, #28
 800178a:	2b18      	cmp	r3, #24
 800178c:	d101      	bne.n	8001792 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 800178e:	2302      	movs	r3, #2
 8001790:	e00e      	b.n	80017b0 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	f003 031c 	and.w	r3, r3, #28
 8001798:	2b08      	cmp	r3, #8
 800179a:	d101      	bne.n	80017a0 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 800179c:	2303      	movs	r3, #3
 800179e:	e007      	b.n	80017b0 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	f003 031c 	and.w	r3, r3, #28
 80017a6:	2b14      	cmp	r3, #20
 80017a8:	d101      	bne.n	80017ae <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80017aa:	2304      	movs	r3, #4
 80017ac:	e000      	b.n	80017b0 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80017ae:	2305      	movs	r3, #5
    }
  }
}
 80017b0:	4618      	mov	r0, r3
 80017b2:	3710      	adds	r7, #16
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}

080017b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80017bc:	4b0e      	ldr	r3, [pc, #56]	@ (80017f8 <HAL_Init+0x40>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a0d      	ldr	r2, [pc, #52]	@ (80017f8 <HAL_Init+0x40>)
 80017c2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80017c6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80017c8:	4b0b      	ldr	r3, [pc, #44]	@ (80017f8 <HAL_Init+0x40>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a0a      	ldr	r2, [pc, #40]	@ (80017f8 <HAL_Init+0x40>)
 80017ce:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80017d2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017d4:	4b08      	ldr	r3, [pc, #32]	@ (80017f8 <HAL_Init+0x40>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a07      	ldr	r2, [pc, #28]	@ (80017f8 <HAL_Init+0x40>)
 80017da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017e0:	2003      	movs	r0, #3
 80017e2:	f000 f8fc 	bl	80019de <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017e6:	200f      	movs	r0, #15
 80017e8:	f7ff fb76 	bl	8000ed8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017ec:	f7ff fb00 	bl	8000df0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017f0:	2300      	movs	r3, #0
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	40023c00 	.word	0x40023c00

080017fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001800:	4b06      	ldr	r3, [pc, #24]	@ (800181c <HAL_IncTick+0x20>)
 8001802:	781b      	ldrb	r3, [r3, #0]
 8001804:	461a      	mov	r2, r3
 8001806:	4b06      	ldr	r3, [pc, #24]	@ (8001820 <HAL_IncTick+0x24>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4413      	add	r3, r2
 800180c:	4a04      	ldr	r2, [pc, #16]	@ (8001820 <HAL_IncTick+0x24>)
 800180e:	6013      	str	r3, [r2, #0]
}
 8001810:	bf00      	nop
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr
 800181a:	bf00      	nop
 800181c:	20000108 	.word	0x20000108
 8001820:	20000454 	.word	0x20000454

08001824 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0
  return uwTick;
 8001828:	4b03      	ldr	r3, [pc, #12]	@ (8001838 <HAL_GetTick+0x14>)
 800182a:	681b      	ldr	r3, [r3, #0]
}
 800182c:	4618      	mov	r0, r3
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr
 8001836:	bf00      	nop
 8001838:	20000454 	.word	0x20000454

0800183c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b084      	sub	sp, #16
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001844:	f7ff ffee 	bl	8001824 <HAL_GetTick>
 8001848:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001854:	d005      	beq.n	8001862 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001856:	4b0a      	ldr	r3, [pc, #40]	@ (8001880 <HAL_Delay+0x44>)
 8001858:	781b      	ldrb	r3, [r3, #0]
 800185a:	461a      	mov	r2, r3
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	4413      	add	r3, r2
 8001860:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001862:	bf00      	nop
 8001864:	f7ff ffde 	bl	8001824 <HAL_GetTick>
 8001868:	4602      	mov	r2, r0
 800186a:	68bb      	ldr	r3, [r7, #8]
 800186c:	1ad3      	subs	r3, r2, r3
 800186e:	68fa      	ldr	r2, [r7, #12]
 8001870:	429a      	cmp	r2, r3
 8001872:	d8f7      	bhi.n	8001864 <HAL_Delay+0x28>
  {
  }
}
 8001874:	bf00      	nop
 8001876:	bf00      	nop
 8001878:	3710      	adds	r7, #16
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	20000108 	.word	0x20000108

08001884 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001884:	b480      	push	{r7}
 8001886:	b085      	sub	sp, #20
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	f003 0307 	and.w	r3, r3, #7
 8001892:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001894:	4b0c      	ldr	r3, [pc, #48]	@ (80018c8 <__NVIC_SetPriorityGrouping+0x44>)
 8001896:	68db      	ldr	r3, [r3, #12]
 8001898:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800189a:	68ba      	ldr	r2, [r7, #8]
 800189c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80018a0:	4013      	ands	r3, r2
 80018a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018ac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80018b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018b6:	4a04      	ldr	r2, [pc, #16]	@ (80018c8 <__NVIC_SetPriorityGrouping+0x44>)
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	60d3      	str	r3, [r2, #12]
}
 80018bc:	bf00      	nop
 80018be:	3714      	adds	r7, #20
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr
 80018c8:	e000ed00 	.word	0xe000ed00

080018cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018d0:	4b04      	ldr	r3, [pc, #16]	@ (80018e4 <__NVIC_GetPriorityGrouping+0x18>)
 80018d2:	68db      	ldr	r3, [r3, #12]
 80018d4:	0a1b      	lsrs	r3, r3, #8
 80018d6:	f003 0307 	and.w	r3, r3, #7
}
 80018da:	4618      	mov	r0, r3
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr
 80018e4:	e000ed00 	.word	0xe000ed00

080018e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b083      	sub	sp, #12
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	4603      	mov	r3, r0
 80018f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	db0b      	blt.n	8001912 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018fa:	79fb      	ldrb	r3, [r7, #7]
 80018fc:	f003 021f 	and.w	r2, r3, #31
 8001900:	4907      	ldr	r1, [pc, #28]	@ (8001920 <__NVIC_EnableIRQ+0x38>)
 8001902:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001906:	095b      	lsrs	r3, r3, #5
 8001908:	2001      	movs	r0, #1
 800190a:	fa00 f202 	lsl.w	r2, r0, r2
 800190e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001912:	bf00      	nop
 8001914:	370c      	adds	r7, #12
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr
 800191e:	bf00      	nop
 8001920:	e000e100 	.word	0xe000e100

08001924 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001924:	b480      	push	{r7}
 8001926:	b083      	sub	sp, #12
 8001928:	af00      	add	r7, sp, #0
 800192a:	4603      	mov	r3, r0
 800192c:	6039      	str	r1, [r7, #0]
 800192e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001930:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001934:	2b00      	cmp	r3, #0
 8001936:	db0a      	blt.n	800194e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	b2da      	uxtb	r2, r3
 800193c:	490c      	ldr	r1, [pc, #48]	@ (8001970 <__NVIC_SetPriority+0x4c>)
 800193e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001942:	0112      	lsls	r2, r2, #4
 8001944:	b2d2      	uxtb	r2, r2
 8001946:	440b      	add	r3, r1
 8001948:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800194c:	e00a      	b.n	8001964 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	b2da      	uxtb	r2, r3
 8001952:	4908      	ldr	r1, [pc, #32]	@ (8001974 <__NVIC_SetPriority+0x50>)
 8001954:	79fb      	ldrb	r3, [r7, #7]
 8001956:	f003 030f 	and.w	r3, r3, #15
 800195a:	3b04      	subs	r3, #4
 800195c:	0112      	lsls	r2, r2, #4
 800195e:	b2d2      	uxtb	r2, r2
 8001960:	440b      	add	r3, r1
 8001962:	761a      	strb	r2, [r3, #24]
}
 8001964:	bf00      	nop
 8001966:	370c      	adds	r7, #12
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr
 8001970:	e000e100 	.word	0xe000e100
 8001974:	e000ed00 	.word	0xe000ed00

08001978 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001978:	b480      	push	{r7}
 800197a:	b089      	sub	sp, #36	@ 0x24
 800197c:	af00      	add	r7, sp, #0
 800197e:	60f8      	str	r0, [r7, #12]
 8001980:	60b9      	str	r1, [r7, #8]
 8001982:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	f003 0307 	and.w	r3, r3, #7
 800198a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800198c:	69fb      	ldr	r3, [r7, #28]
 800198e:	f1c3 0307 	rsb	r3, r3, #7
 8001992:	2b04      	cmp	r3, #4
 8001994:	bf28      	it	cs
 8001996:	2304      	movcs	r3, #4
 8001998:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800199a:	69fb      	ldr	r3, [r7, #28]
 800199c:	3304      	adds	r3, #4
 800199e:	2b06      	cmp	r3, #6
 80019a0:	d902      	bls.n	80019a8 <NVIC_EncodePriority+0x30>
 80019a2:	69fb      	ldr	r3, [r7, #28]
 80019a4:	3b03      	subs	r3, #3
 80019a6:	e000      	b.n	80019aa <NVIC_EncodePriority+0x32>
 80019a8:	2300      	movs	r3, #0
 80019aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019ac:	f04f 32ff 	mov.w	r2, #4294967295
 80019b0:	69bb      	ldr	r3, [r7, #24]
 80019b2:	fa02 f303 	lsl.w	r3, r2, r3
 80019b6:	43da      	mvns	r2, r3
 80019b8:	68bb      	ldr	r3, [r7, #8]
 80019ba:	401a      	ands	r2, r3
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019c0:	f04f 31ff 	mov.w	r1, #4294967295
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	fa01 f303 	lsl.w	r3, r1, r3
 80019ca:	43d9      	mvns	r1, r3
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019d0:	4313      	orrs	r3, r2
         );
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	3724      	adds	r7, #36	@ 0x24
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr

080019de <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019de:	b580      	push	{r7, lr}
 80019e0:	b082      	sub	sp, #8
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019e6:	6878      	ldr	r0, [r7, #4]
 80019e8:	f7ff ff4c 	bl	8001884 <__NVIC_SetPriorityGrouping>
}
 80019ec:	bf00      	nop
 80019ee:	3708      	adds	r7, #8
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}

080019f4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b086      	sub	sp, #24
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	4603      	mov	r3, r0
 80019fc:	60b9      	str	r1, [r7, #8]
 80019fe:	607a      	str	r2, [r7, #4]
 8001a00:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a02:	2300      	movs	r3, #0
 8001a04:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a06:	f7ff ff61 	bl	80018cc <__NVIC_GetPriorityGrouping>
 8001a0a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a0c:	687a      	ldr	r2, [r7, #4]
 8001a0e:	68b9      	ldr	r1, [r7, #8]
 8001a10:	6978      	ldr	r0, [r7, #20]
 8001a12:	f7ff ffb1 	bl	8001978 <NVIC_EncodePriority>
 8001a16:	4602      	mov	r2, r0
 8001a18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a1c:	4611      	mov	r1, r2
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f7ff ff80 	bl	8001924 <__NVIC_SetPriority>
}
 8001a24:	bf00      	nop
 8001a26:	3718      	adds	r7, #24
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}

08001a2c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b082      	sub	sp, #8
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	4603      	mov	r3, r0
 8001a34:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f7ff ff54 	bl	80018e8 <__NVIC_EnableIRQ>
}
 8001a40:	bf00      	nop
 8001a42:	3708      	adds	r7, #8
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}

08001a48 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b084      	sub	sp, #16
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d101      	bne.n	8001a5a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001a56:	2301      	movs	r3, #1
 8001a58:	e06c      	b.n	8001b34 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d106      	bne.n	8001a72 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2223      	movs	r2, #35	@ 0x23
 8001a68:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001a6c:	6878      	ldr	r0, [r7, #4]
 8001a6e:	f003 fb75 	bl	800515c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a72:	2300      	movs	r3, #0
 8001a74:	60bb      	str	r3, [r7, #8]
 8001a76:	4b31      	ldr	r3, [pc, #196]	@ (8001b3c <HAL_ETH_Init+0xf4>)
 8001a78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a7a:	4a30      	ldr	r2, [pc, #192]	@ (8001b3c <HAL_ETH_Init+0xf4>)
 8001a7c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a80:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a82:	4b2e      	ldr	r3, [pc, #184]	@ (8001b3c <HAL_ETH_Init+0xf4>)
 8001a84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a86:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a8a:	60bb      	str	r3, [r7, #8]
 8001a8c:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001a8e:	4b2c      	ldr	r3, [pc, #176]	@ (8001b40 <HAL_ETH_Init+0xf8>)
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	4a2b      	ldr	r2, [pc, #172]	@ (8001b40 <HAL_ETH_Init+0xf8>)
 8001a94:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001a98:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001a9a:	4b29      	ldr	r3, [pc, #164]	@ (8001b40 <HAL_ETH_Init+0xf8>)
 8001a9c:	685a      	ldr	r2, [r3, #4]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	689b      	ldr	r3, [r3, #8]
 8001aa2:	4927      	ldr	r1, [pc, #156]	@ (8001b40 <HAL_ETH_Init+0xf8>)
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001aa8:	4b25      	ldr	r3, [pc, #148]	@ (8001b40 <HAL_ETH_Init+0xf8>)
 8001aaa:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	687a      	ldr	r2, [r7, #4]
 8001ab8:	6812      	ldr	r2, [r2, #0]
 8001aba:	f043 0301 	orr.w	r3, r3, #1
 8001abe:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001ac2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ac4:	f7ff feae 	bl	8001824 <HAL_GetTick>
 8001ac8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001aca:	e011      	b.n	8001af0 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001acc:	f7ff feaa 	bl	8001824 <HAL_GetTick>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	1ad3      	subs	r3, r2, r3
 8001ad6:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001ada:	d909      	bls.n	8001af0 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2204      	movs	r2, #4
 8001ae0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	22e0      	movs	r2, #224	@ 0xe0
 8001ae8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8001aec:	2301      	movs	r3, #1
 8001aee:	e021      	b.n	8001b34 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f003 0301 	and.w	r3, r3, #1
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d1e4      	bne.n	8001acc <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001b02:	6878      	ldr	r0, [r7, #4]
 8001b04:	f000 ff56 	bl	80029b4 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001b08:	6878      	ldr	r0, [r7, #4]
 8001b0a:	f000 fffd 	bl	8002b08 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001b0e:	6878      	ldr	r0, [r7, #4]
 8001b10:	f001 f853 	bl	8002bba <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	461a      	mov	r2, r3
 8001b1a:	2100      	movs	r1, #0
 8001b1c:	6878      	ldr	r0, [r7, #4]
 8001b1e:	f000 ffbb 	bl	8002a98 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2200      	movs	r2, #0
 8001b26:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2210      	movs	r2, #16
 8001b2e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8001b32:	2300      	movs	r3, #0
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	3710      	adds	r7, #16
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	40023800 	.word	0x40023800
 8001b40:	40013800 	.word	0x40013800

08001b44 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b084      	sub	sp, #16
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001b52:	2b10      	cmp	r3, #16
 8001b54:	d17f      	bne.n	8001c56 <HAL_ETH_Start_IT+0x112>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2223      	movs	r2, #35	@ 0x23
 8001b5a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2201      	movs	r2, #1
 8001b62:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Disable MMC Interrupts */
    SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8001b72:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable Rx MMC Interrupts */
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 8001b7c:	687a      	ldr	r2, [r7, #4]
 8001b7e:	6812      	ldr	r2, [r2, #0]
 8001b80:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b84:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001b88:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
            ETH_MMCRIMR_RFCEM);

    /* Disable Tx MMC Interrupts */
    SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 8001b9c:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
            ETH_MMCTIMR_TGFSCM);

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2204      	movs	r2, #4
 8001ba4:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8001ba6:	6878      	ldr	r0, [r7, #4]
 8001ba8:	f000 f9f8 	bl	8001f9c <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	681a      	ldr	r2, [r3, #0]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f042 0208 	orr.w	r2, r2, #8
 8001bba:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001bc4:	2001      	movs	r0, #1
 8001bc6:	f7ff fe39 	bl	800183c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	68fa      	ldr	r2, [r7, #12]
 8001bd0:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	681a      	ldr	r2, [r3, #0]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f042 0204 	orr.w	r2, r2, #4
 8001be0:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001bea:	2001      	movs	r0, #1
 8001bec:	f7ff fe26 	bl	800183c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	68fa      	ldr	r2, [r7, #12]
 8001bf6:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001bf8:	6878      	ldr	r0, [r7, #4]
 8001bfa:	f000 fd7c 	bl	80026f6 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c06:	699b      	ldr	r3, [r3, #24]
 8001c08:	687a      	ldr	r2, [r7, #4]
 8001c0a:	6812      	ldr	r2, [r2, #0]
 8001c0c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001c10:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001c14:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c1e:	699b      	ldr	r3, [r3, #24]
 8001c20:	687a      	ldr	r2, [r7, #4]
 8001c22:	6812      	ldr	r2, [r2, #0]
 8001c24:	f043 0302 	orr.w	r3, r3, #2
 8001c28:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001c2c:	6193      	str	r3, [r2, #24]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c36:	69db      	ldr	r3, [r3, #28]
 8001c38:	687a      	ldr	r2, [r7, #4]
 8001c3a:	6812      	ldr	r2, [r2, #0]
 8001c3c:	f443 33d0 	orr.w	r3, r3, #106496	@ 0x1a000
 8001c40:	f043 03c1 	orr.w	r3, r3, #193	@ 0xc1
 8001c44:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001c48:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2223      	movs	r2, #35	@ 0x23
 8001c4e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    return HAL_OK;
 8001c52:	2300      	movs	r3, #0
 8001c54:	e000      	b.n	8001c58 <HAL_ETH_Start_IT+0x114>
  }
  else
  {
    return HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
  }
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	3710      	adds	r7, #16
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}

08001c60 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b086      	sub	sp, #24
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001c6e:	2b23      	cmp	r3, #35	@ 0x23
 8001c70:	d170      	bne.n	8001d54 <HAL_ETH_Stop_IT+0xf4>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2223      	movs	r2, #35	@ 0x23
 8001c76:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c82:	69db      	ldr	r3, [r3, #28]
 8001c84:	687a      	ldr	r2, [r7, #4]
 8001c86:	6812      	ldr	r2, [r2, #0]
 8001c88:	f423 33d0 	bic.w	r3, r3, #106496	@ 0x1a000
 8001c8c:	f023 03c1 	bic.w	r3, r3, #193	@ 0xc1
 8001c90:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001c94:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c9e:	699b      	ldr	r3, [r3, #24]
 8001ca0:	687a      	ldr	r2, [r7, #4]
 8001ca2:	6812      	ldr	r2, [r2, #0]
 8001ca4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8001ca8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001cac:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001cb6:	699b      	ldr	r3, [r3, #24]
 8001cb8:	687a      	ldr	r2, [r7, #4]
 8001cba:	6812      	ldr	r2, [r2, #0]
 8001cbc:	f023 0302 	bic.w	r3, r3, #2
 8001cc0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001cc4:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f022 0204 	bic.w	r2, r2, #4
 8001cd4:	601a      	str	r2, [r3, #0]


    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001cde:	2001      	movs	r0, #1
 8001ce0:	f7ff fdac 	bl	800183c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	693a      	ldr	r2, [r7, #16]
 8001cea:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001cec:	6878      	ldr	r0, [r7, #4]
 8001cee:	f000 fd02 	bl	80026f6 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	681a      	ldr	r2, [r3, #0]
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f022 0208 	bic.w	r2, r2, #8
 8001d00:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d0a:	2001      	movs	r0, #1
 8001d0c:	f7ff fd96 	bl	800183c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	693a      	ldr	r2, [r7, #16]
 8001d16:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001d18:	2300      	movs	r3, #0
 8001d1a:	617b      	str	r3, [r7, #20]
 8001d1c:	e00e      	b.n	8001d3c <HAL_ETH_Stop_IT+0xdc>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	697a      	ldr	r2, [r7, #20]
 8001d22:	3212      	adds	r2, #18
 8001d24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d28:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001d36:	697b      	ldr	r3, [r7, #20]
 8001d38:	3301      	adds	r3, #1
 8001d3a:	617b      	str	r3, [r7, #20]
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	2b03      	cmp	r3, #3
 8001d40:	d9ed      	bls.n	8001d1e <HAL_ETH_Stop_IT+0xbe>
    }

    heth->RxDescList.ItMode = 0U;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2200      	movs	r2, #0
 8001d46:	659a      	str	r2, [r3, #88]	@ 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2210      	movs	r2, #16
 8001d4c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 8001d50:	2300      	movs	r3, #0
 8001d52:	e000      	b.n	8001d56 <HAL_ETH_Stop_IT+0xf6>
  }
  else
  {
    return HAL_ERROR;
 8001d54:	2301      	movs	r3, #1
  }
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	3718      	adds	r7, #24
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}

08001d5e <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig)
{
 8001d5e:	b580      	push	{r7, lr}
 8001d60:	b082      	sub	sp, #8
 8001d62:	af00      	add	r7, sp, #0
 8001d64:	6078      	str	r0, [r7, #4]
 8001d66:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d109      	bne.n	8001d82 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d74:	f043 0201 	orr.w	r2, r3, #1
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e045      	b.n	8001e0e <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001d88:	2b23      	cmp	r3, #35	@ 0x23
 8001d8a:	d13f      	bne.n	8001e0c <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8001d94:	2201      	movs	r2, #1
 8001d96:	6839      	ldr	r1, [r7, #0]
 8001d98:	6878      	ldr	r0, [r7, #4]
 8001d9a:	f000 ff7b 	bl	8002c94 <ETH_Prepare_Tx_Descriptors>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d009      	beq.n	8001db8 <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001daa:	f043 0202 	orr.w	r2, r3, #2
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 8001db4:	2301      	movs	r3, #1
 8001db6:	e02a      	b.n	8001e0e <HAL_ETH_Transmit_IT+0xb0>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001db8:	f3bf 8f4f 	dsb	sy
}
 8001dbc:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dc2:	1c5a      	adds	r2, r3, #1
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	629a      	str	r2, [r3, #40]	@ 0x28
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dcc:	2b03      	cmp	r3, #3
 8001dce:	d904      	bls.n	8001dda <HAL_ETH_Transmit_IT+0x7c>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dd4:	1f1a      	subs	r2, r3, #4
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001de2:	695b      	ldr	r3, [r3, #20]
 8001de4:	f003 0304 	and.w	r3, r3, #4
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d00d      	beq.n	8001e08 <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001df4:	461a      	mov	r2, r3
 8001df6:	2304      	movs	r3, #4
 8001df8:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e02:	461a      	mov	r2, r3
 8001e04:	2300      	movs	r3, #0
 8001e06:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	e000      	b.n	8001e0e <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 8001e0c:	2301      	movs	r3, #1
  }
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3708      	adds	r7, #8
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}

08001e16 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8001e16:	b580      	push	{r7, lr}
 8001e18:	b088      	sub	sp, #32
 8001e1a:	af00      	add	r7, sp, #0
 8001e1c:	6078      	str	r0, [r7, #4]
 8001e1e:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8001e20:	2300      	movs	r3, #0
 8001e22:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8001e24:	2300      	movs	r3, #0
 8001e26:	73fb      	strb	r3, [r7, #15]

  if (pAppBuff == NULL)
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d109      	bne.n	8001e42 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e34:	f043 0201 	orr.w	r2, r3, #1
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e0a8      	b.n	8001f94 <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001e48:	2b23      	cmp	r3, #35	@ 0x23
 8001e4a:	d001      	beq.n	8001e50 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	e0a1      	b.n	8001f94 <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e54:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	69fa      	ldr	r2, [r7, #28]
 8001e5a:	3212      	adds	r2, #18
 8001e5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e60:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001e66:	f1c3 0304 	rsb	r3, r3, #4
 8001e6a:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001e6c:	e06a      	b.n	8001f44 <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8001e6e:	69bb      	ldr	r3, [r7, #24]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d007      	beq.n	8001e8a <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 8001e7a:	69bb      	ldr	r3, [r7, #24]
 8001e7c:	69da      	ldr	r2, [r3, #28]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 8001e82:	69bb      	ldr	r3, [r7, #24]
 8001e84:	699a      	ldr	r2, [r3, #24]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8001e8a:	69bb      	ldr	r3, [r7, #24]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d103      	bne.n	8001e9e <HAL_ETH_ReadData+0x88>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d040      	beq.n	8001f20 <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8001e9e:	69bb      	ldr	r3, [r7, #24]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d005      	beq.n	8001eb6 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2200      	movs	r2, #0
 8001eae:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	695b      	ldr	r3, [r3, #20]
 8001eba:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8001ebc:	69bb      	ldr	r3, [r7, #24]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d00c      	beq.n	8001ee2 <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8001ec8:	69bb      	ldr	r3, [r7, #24]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	0c1b      	lsrs	r3, r3, #16
 8001ece:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001ed2:	3b04      	subs	r3, #4
 8001ed4:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8001ed6:	69bb      	ldr	r3, [r7, #24]
 8001ed8:	681a      	ldr	r2, [r3, #0]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8001ee2:	69bb      	ldr	r3, [r7, #24]
 8001ee4:	689a      	ldr	r2, [r3, #8]
 8001ee6:	69bb      	ldr	r3, [r7, #24]
 8001ee8:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8001ef6:	69bb      	ldr	r3, [r7, #24]
 8001ef8:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001efa:	461a      	mov	r2, r3
 8001efc:	693b      	ldr	r3, [r7, #16]
 8001efe:	b29b      	uxth	r3, r3
 8001f00:	f003 fb06 	bl	8005510 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f08:	1c5a      	adds	r2, r3, #1
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	441a      	add	r2, r3
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8001f1a:	69bb      	ldr	r3, [r7, #24]
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8001f20:	69fb      	ldr	r3, [r7, #28]
 8001f22:	3301      	adds	r3, #1
 8001f24:	61fb      	str	r3, [r7, #28]
 8001f26:	69fb      	ldr	r3, [r7, #28]
 8001f28:	2b03      	cmp	r3, #3
 8001f2a:	d902      	bls.n	8001f32 <HAL_ETH_ReadData+0x11c>
 8001f2c:	69fb      	ldr	r3, [r7, #28]
 8001f2e:	3b04      	subs	r3, #4
 8001f30:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	69fa      	ldr	r2, [r7, #28]
 8001f36:	3212      	adds	r2, #18
 8001f38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f3c:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	3301      	adds	r3, #1
 8001f42:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001f44:	69bb      	ldr	r3, [r7, #24]
 8001f46:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	db06      	blt.n	8001f5a <HAL_ETH_ReadData+0x144>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001f4c:	697a      	ldr	r2, [r7, #20]
 8001f4e:	68bb      	ldr	r3, [r7, #8]
 8001f50:	429a      	cmp	r2, r3
 8001f52:	d202      	bcs.n	8001f5a <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 8001f54:	7bfb      	ldrb	r3, [r7, #15]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d089      	beq.n	8001e6e <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	441a      	add	r2, r3
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d002      	beq.n	8001f74 <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8001f6e:	6878      	ldr	r0, [r7, #4]
 8001f70:	f000 f814 	bl	8001f9c <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	69fa      	ldr	r2, [r7, #28]
 8001f78:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 8001f7a:	7bfb      	ldrb	r3, [r7, #15]
 8001f7c:	2b01      	cmp	r3, #1
 8001f7e:	d108      	bne.n	8001f92 <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	e000      	b.n	8001f94 <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	3720      	adds	r7, #32
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}

08001f9c <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b088      	sub	sp, #32
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  uint32_t tailidx;
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001fb0:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	69fa      	ldr	r2, [r7, #28]
 8001fb6:	3212      	adds	r2, #18
 8001fb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fbc:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001fc2:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8001fc4:	e03d      	b.n	8002042 <ETH_UpdateDescriptor+0xa6>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	6a1b      	ldr	r3, [r3, #32]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d112      	bne.n	8001ff4 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8001fce:	f107 0308 	add.w	r3, r7, #8
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f003 fa6c 	bl	80054b0 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d102      	bne.n	8001fe4 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	74fb      	strb	r3, [r7, #19]
 8001fe2:	e007      	b.n	8001ff4 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	461a      	mov	r2, r3
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	461a      	mov	r2, r3
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8001ff4:	7cfb      	ldrb	r3, [r7, #19]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d023      	beq.n	8002042 <ETH_UpdateDescriptor+0xa6>
    {
      if (heth->RxDescList.ItMode == 0U)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d103      	bne.n	800200a <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	4a24      	ldr	r2, [pc, #144]	@ (8002098 <ETH_UpdateDescriptor+0xfc>)
 8002006:	605a      	str	r2, [r3, #4]
 8002008:	e003      	b.n	8002012 <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	f44f 428c 	mov.w	r2, #17920	@ 0x4600
 8002010:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 800201e:	69fb      	ldr	r3, [r7, #28]
 8002020:	3301      	adds	r3, #1
 8002022:	61fb      	str	r3, [r7, #28]
 8002024:	69fb      	ldr	r3, [r7, #28]
 8002026:	2b03      	cmp	r3, #3
 8002028:	d902      	bls.n	8002030 <ETH_UpdateDescriptor+0x94>
 800202a:	69fb      	ldr	r3, [r7, #28]
 800202c:	3b04      	subs	r3, #4
 800202e:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	69fa      	ldr	r2, [r7, #28]
 8002034:	3212      	adds	r2, #18
 8002036:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800203a:	617b      	str	r3, [r7, #20]
      desccount--;
 800203c:	69bb      	ldr	r3, [r7, #24]
 800203e:	3b01      	subs	r3, #1
 8002040:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8002042:	69bb      	ldr	r3, [r7, #24]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d002      	beq.n	800204e <ETH_UpdateDescriptor+0xb2>
 8002048:	7cfb      	ldrb	r3, [r7, #19]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d1bb      	bne.n	8001fc6 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002052:	69ba      	ldr	r2, [r7, #24]
 8002054:	429a      	cmp	r2, r3
 8002056:	d01a      	beq.n	800208e <ETH_UpdateDescriptor+0xf2>
  {
    /* Set the tail pointer index */
    tailidx = (descidx + 1U) % ETH_RX_DESC_CNT;
 8002058:	69fb      	ldr	r3, [r7, #28]
 800205a:	3301      	adds	r3, #1
 800205c:	f003 0303 	and.w	r3, r3, #3
 8002060:	60fb      	str	r3, [r7, #12]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8002062:	f3bf 8f5f 	dmb	sy
}
 8002066:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6919      	ldr	r1, [r3, #16]
 800206c:	68fa      	ldr	r2, [r7, #12]
 800206e:	4613      	mov	r3, r2
 8002070:	009b      	lsls	r3, r3, #2
 8002072:	4413      	add	r3, r2
 8002074:	00db      	lsls	r3, r3, #3
 8002076:	18ca      	adds	r2, r1, r3
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002080:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	69fa      	ldr	r2, [r7, #28]
 8002086:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	69ba      	ldr	r2, [r7, #24]
 800208c:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 800208e:	bf00      	nop
 8002090:	3720      	adds	r7, #32
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	80004600 	.word	0x80004600

0800209c <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b086      	sub	sp, #24
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	3318      	adds	r3, #24
 80020a8:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 80020aa:	68bb      	ldr	r3, [r7, #8]
 80020ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020ae:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020b4:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 80020b6:	2301      	movs	r3, #1
 80020b8:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 80020ba:	e03f      	b.n	800213c <HAL_ETH_ReleaseTxPacket+0xa0>
  {
    pktInUse = 1U;
 80020bc:	2301      	movs	r3, #1
 80020be:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	3b01      	subs	r3, #1
 80020c4:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 80020c6:	68ba      	ldr	r2, [r7, #8]
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	3304      	adds	r3, #4
 80020cc:	009b      	lsls	r3, r3, #2
 80020ce:	4413      	add	r3, r2
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d106      	bne.n	80020e4 <HAL_ETH_ReleaseTxPacket+0x48>
    {
      /* No packet in use, skip to next.  */
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	3301      	adds	r3, #1
 80020da:	f003 0303 	and.w	r3, r3, #3
 80020de:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 80020e0:	2300      	movs	r3, #0
 80020e2:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 80020e4:	7bbb      	ldrb	r3, [r7, #14]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d028      	beq.n	800213c <HAL_ETH_ReleaseTxPacket+0xa0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	68d9      	ldr	r1, [r3, #12]
 80020ee:	693a      	ldr	r2, [r7, #16]
 80020f0:	4613      	mov	r3, r2
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	4413      	add	r3, r2
 80020f6:	00db      	lsls	r3, r3, #3
 80020f8:	440b      	add	r3, r1
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	db1b      	blt.n	8002138 <HAL_ETH_ReleaseTxPacket+0x9c>
#ifdef HAL_ETH_USE_PTP
        /* Handle Ptp  */
        HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8002100:	68ba      	ldr	r2, [r7, #8]
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	3304      	adds	r3, #4
 8002106:	009b      	lsls	r3, r3, #2
 8002108:	4413      	add	r3, r2
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	4618      	mov	r0, r3
 800210e:	f003 fa3f 	bl	8005590 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8002112:	68ba      	ldr	r2, [r7, #8]
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	3304      	adds	r3, #4
 8002118:	009b      	lsls	r3, r3, #2
 800211a:	4413      	add	r3, r2
 800211c:	2200      	movs	r2, #0
 800211e:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	3301      	adds	r3, #1
 8002124:	f003 0303 	and.w	r3, r3, #3
 8002128:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 800212a:	68bb      	ldr	r3, [r7, #8]
 800212c:	697a      	ldr	r2, [r7, #20]
 800212e:	629a      	str	r2, [r3, #40]	@ 0x28
        dmatxdesclist->releaseIndex = idx;
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	693a      	ldr	r2, [r7, #16]
 8002134:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002136:	e001      	b.n	800213c <HAL_ETH_ReleaseTxPacket+0xa0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8002138:	2300      	movs	r3, #0
 800213a:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d002      	beq.n	8002148 <HAL_ETH_ReleaseTxPacket+0xac>
 8002142:	7bfb      	ldrb	r3, [r7, #15]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d1b9      	bne.n	80020bc <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8002148:	2300      	movs	r3, #0
}
 800214a:	4618      	mov	r0, r3
 800214c:	3718      	adds	r7, #24
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
	...

08002154 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b082      	sub	sp, #8
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002164:	695b      	ldr	r3, [r3, #20]
 8002166:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800216a:	2b40      	cmp	r3, #64	@ 0x40
 800216c:	d112      	bne.n	8002194 <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002176:	69db      	ldr	r3, [r3, #28]
 8002178:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800217c:	2b40      	cmp	r3, #64	@ 0x40
 800217e:	d109      	bne.n	8002194 <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002188:	461a      	mov	r2, r3
 800218a:	4b50      	ldr	r3, [pc, #320]	@ (80022cc <HAL_ETH_IRQHandler+0x178>)
 800218c:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 800218e:	6878      	ldr	r0, [r7, #4]
 8002190:	f002 fd40 	bl	8004c14 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800219c:	695b      	ldr	r3, [r3, #20]
 800219e:	f003 0301 	and.w	r3, r3, #1
 80021a2:	2b01      	cmp	r3, #1
 80021a4:	d113      	bne.n	80021ce <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80021ae:	69db      	ldr	r3, [r3, #28]
 80021b0:	f003 0301 	and.w	r3, r3, #1
 80021b4:	2b01      	cmp	r3, #1
 80021b6:	d10a      	bne.n	80021ce <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80021c0:	461a      	mov	r2, r3
 80021c2:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 80021c6:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 80021c8:	6878      	ldr	r0, [r7, #4]
 80021ca:	f002 fd33 	bl	8004c34 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80021d6:	695b      	ldr	r3, [r3, #20]
 80021d8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80021dc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80021e0:	d14c      	bne.n	800227c <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80021ea:	69db      	ldr	r3, [r3, #28]
 80021ec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80021f0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80021f4:	d142      	bne.n	800227c <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021fc:	f043 0208 	orr.w	r2, r3, #8
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800220e:	695b      	ldr	r3, [r3, #20]
 8002210:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002214:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002218:	d11a      	bne.n	8002250 <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002222:	695a      	ldr	r2, [r3, #20]
 8002224:	4b2a      	ldr	r3, [pc, #168]	@ (80022d0 <HAL_ETH_IRQHandler+0x17c>)
 8002226:	4013      	ands	r3, r2
 8002228:	687a      	ldr	r2, [r7, #4]
 800222a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002236:	69db      	ldr	r3, [r3, #28]
 8002238:	687a      	ldr	r2, [r7, #4]
 800223a:	6812      	ldr	r2, [r2, #0]
 800223c:	f423 33c0 	bic.w	r3, r3, #98304	@ 0x18000
 8002240:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002244:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	22e0      	movs	r2, #224	@ 0xe0
 800224a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 800224e:	e012      	b.n	8002276 <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002258:	695a      	ldr	r2, [r3, #20]
 800225a:	f248 6380 	movw	r3, #34432	@ 0x8680
 800225e:	4013      	ands	r3, r2
 8002260:	687a      	ldr	r2, [r7, #4]
 8002262:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800226e:	461a      	mov	r2, r3
 8002270:	f248 6380 	movw	r3, #34432	@ 0x8680
 8002274:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 8002276:	6878      	ldr	r0, [r7, #4]
 8002278:	f002 fcec 	bl	8004c54 <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002282:	f003 0308 	and.w	r3, r3, #8
 8002286:	2b08      	cmp	r3, #8
 8002288:	d10e      	bne.n	80022a8 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002290:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 800229a:	6878      	ldr	r0, [r7, #4]
 800229c:	f000 f81c 	bl	80022d8 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2200      	movs	r2, #0
 80022a4:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 80022a8:	4b0a      	ldr	r3, [pc, #40]	@ (80022d4 <HAL_ETH_IRQHandler+0x180>)
 80022aa:	695b      	ldr	r3, [r3, #20]
 80022ac:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d006      	beq.n	80022c2 <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 80022b4:	4b07      	ldr	r3, [pc, #28]	@ (80022d4 <HAL_ETH_IRQHandler+0x180>)
 80022b6:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80022ba:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 80022bc:	6878      	ldr	r0, [r7, #4]
 80022be:	f000 f815 	bl	80022ec <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 80022c2:	bf00      	nop
 80022c4:	3708      	adds	r7, #8
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	00010040 	.word	0x00010040
 80022d0:	007e2000 	.word	0x007e2000
 80022d4:	40013c00 	.word	0x40013c00

080022d8 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 80022d8:	b480      	push	{r7}
 80022da:	b083      	sub	sp, #12
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 80022e0:	bf00      	nop
 80022e2:	370c      	adds	r7, #12
 80022e4:	46bd      	mov	sp, r7
 80022e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ea:	4770      	bx	lr

080022ec <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b083      	sub	sp, #12
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 80022f4:	bf00      	nop
 80022f6:	370c      	adds	r7, #12
 80022f8:	46bd      	mov	sp, r7
 80022fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fe:	4770      	bx	lr

08002300 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b086      	sub	sp, #24
 8002304:	af00      	add	r7, sp, #0
 8002306:	60f8      	str	r0, [r7, #12]
 8002308:	60b9      	str	r1, [r7, #8]
 800230a:	607a      	str	r2, [r7, #4]
 800230c:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	691b      	ldr	r3, [r3, #16]
 8002314:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	f003 031c 	and.w	r3, r3, #28
 800231c:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	02db      	lsls	r3, r3, #11
 8002322:	b29b      	uxth	r3, r3
 8002324:	697a      	ldr	r2, [r7, #20]
 8002326:	4313      	orrs	r3, r2
 8002328:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	019b      	lsls	r3, r3, #6
 800232e:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8002332:	697a      	ldr	r2, [r7, #20]
 8002334:	4313      	orrs	r3, r2
 8002336:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	f023 0302 	bic.w	r3, r3, #2
 800233e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	f043 0301 	orr.w	r3, r3, #1
 8002346:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	697a      	ldr	r2, [r7, #20]
 800234e:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8002350:	f7ff fa68 	bl	8001824 <HAL_GetTick>
 8002354:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002356:	e00d      	b.n	8002374 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8002358:	f7ff fa64 	bl	8001824 <HAL_GetTick>
 800235c:	4602      	mov	r2, r0
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	1ad3      	subs	r3, r2, r3
 8002362:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002366:	d301      	bcc.n	800236c <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	e010      	b.n	800238e <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	691b      	ldr	r3, [r3, #16]
 8002372:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	f003 0301 	and.w	r3, r3, #1
 800237a:	2b00      	cmp	r3, #0
 800237c:	d1ec      	bne.n	8002358 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	695b      	ldr	r3, [r3, #20]
 8002384:	b29b      	uxth	r3, r3
 8002386:	461a      	mov	r2, r3
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800238c:	2300      	movs	r3, #0
}
 800238e:	4618      	mov	r0, r3
 8002390:	3718      	adds	r7, #24
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}

08002396 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8002396:	b580      	push	{r7, lr}
 8002398:	b086      	sub	sp, #24
 800239a:	af00      	add	r7, sp, #0
 800239c:	60f8      	str	r0, [r7, #12]
 800239e:	60b9      	str	r1, [r7, #8]
 80023a0:	607a      	str	r2, [r7, #4]
 80023a2:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	691b      	ldr	r3, [r3, #16]
 80023aa:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	f003 031c 	and.w	r3, r3, #28
 80023b2:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	02db      	lsls	r3, r3, #11
 80023b8:	b29b      	uxth	r3, r3
 80023ba:	697a      	ldr	r2, [r7, #20]
 80023bc:	4313      	orrs	r3, r2
 80023be:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	019b      	lsls	r3, r3, #6
 80023c4:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 80023c8:	697a      	ldr	r2, [r7, #20]
 80023ca:	4313      	orrs	r3, r2
 80023cc:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	f043 0302 	orr.w	r3, r3, #2
 80023d4:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	f043 0301 	orr.w	r3, r3, #1
 80023dc:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	b29a      	uxth	r2, r3
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	697a      	ldr	r2, [r7, #20]
 80023ee:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 80023f0:	f7ff fa18 	bl	8001824 <HAL_GetTick>
 80023f4:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80023f6:	e00d      	b.n	8002414 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 80023f8:	f7ff fa14 	bl	8001824 <HAL_GetTick>
 80023fc:	4602      	mov	r2, r0
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	1ad3      	subs	r3, r2, r3
 8002402:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002406:	d301      	bcc.n	800240c <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	e009      	b.n	8002420 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	691b      	ldr	r3, [r3, #16]
 8002412:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	f003 0301 	and.w	r3, r3, #1
 800241a:	2b00      	cmp	r3, #0
 800241c:	d1ec      	bne.n	80023f8 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 800241e:	2300      	movs	r3, #0
}
 8002420:	4618      	mov	r0, r3
 8002422:	3718      	adds	r7, #24
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}

08002428 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8002428:	b480      	push	{r7}
 800242a:	b083      	sub	sp, #12
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
 8002430:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d101      	bne.n	800243c <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002438:	2301      	movs	r3, #1
 800243a:	e0d9      	b.n	80025f0 <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f003 0310 	and.w	r3, r3, #16
 8002446:	2b00      	cmp	r3, #0
 8002448:	bf14      	ite	ne
 800244a:	2301      	movne	r3, #1
 800244c:	2300      	moveq	r3, #0
 800244e:	b2db      	uxtb	r3, r3
 8002450:	461a      	mov	r2, r3
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002470:	2b00      	cmp	r3, #0
 8002472:	bf0c      	ite	eq
 8002474:	2301      	moveq	r3, #1
 8002476:	2300      	movne	r3, #0
 8002478:	b2db      	uxtb	r3, r3
 800247a:	461a      	mov	r2, r3
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
                                        ? ENABLE : DISABLE;
 800248c:	2b00      	cmp	r3, #0
 800248e:	bf14      	ite	ne
 8002490:	2301      	movne	r3, #1
 8002492:	2300      	moveq	r3, #0
 8002494:	b2db      	uxtb	r3, r3
 8002496:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	bf0c      	ite	eq
 80024aa:	2301      	moveq	r3, #1
 80024ac:	2300      	movne	r3, #0
 80024ae:	b2db      	uxtb	r3, r3
 80024b0:	461a      	mov	r2, r3
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	bf14      	ite	ne
 80024c4:	2301      	movne	r3, #1
 80024c6:	2300      	moveq	r3, #0
 80024c8:	b2db      	uxtb	r3, r3
 80024ca:	461a      	mov	r2, r3
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	bf0c      	ite	eq
 80024fa:	2301      	moveq	r3, #1
 80024fc:	2300      	movne	r3, #0
 80024fe:	b2db      	uxtb	r3, r3
 8002500:	461a      	mov	r2, r3
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002510:	2b00      	cmp	r3, #0
 8002512:	bf0c      	ite	eq
 8002514:	2301      	moveq	r3, #1
 8002516:	2300      	movne	r3, #0
 8002518:	b2db      	uxtb	r3, r3
 800251a:	461a      	mov	r2, r3
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800252a:	2b00      	cmp	r3, #0
 800252c:	bf14      	ite	ne
 800252e:	2301      	movne	r3, #1
 8002530:	2300      	moveq	r3, #0
 8002532:	b2db      	uxtb	r3, r3
 8002534:	461a      	mov	r2, r3
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f403 2260 	and.w	r2, r3, #917504	@ 0xe0000
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002552:	2b00      	cmp	r3, #0
 8002554:	bf14      	ite	ne
 8002556:	2301      	movne	r3, #1
 8002558:	2300      	moveq	r3, #0
 800255a:	b2db      	uxtb	r3, r3
 800255c:	461a      	mov	r2, r3
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	699b      	ldr	r3, [r3, #24]
 8002568:	f003 0302 	and.w	r3, r3, #2
 800256c:	2b00      	cmp	r3, #0
 800256e:	bf14      	ite	ne
 8002570:	2301      	movne	r3, #1
 8002572:	2300      	moveq	r3, #0
 8002574:	b2db      	uxtb	r3, r3
 8002576:	461a      	mov	r2, r3
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	699b      	ldr	r3, [r3, #24]
 8002584:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002588:	2b00      	cmp	r3, #0
 800258a:	bf0c      	ite	eq
 800258c:	2301      	moveq	r3, #1
 800258e:	2300      	movne	r3, #0
 8002590:	b2db      	uxtb	r3, r3
 8002592:	461a      	mov	r2, r3
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	699b      	ldr	r3, [r3, #24]
 80025a0:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	699b      	ldr	r3, [r3, #24]
 80025ae:	0c1b      	lsrs	r3, r3, #16
 80025b0:	b29a      	uxth	r2, r3
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	699b      	ldr	r3, [r3, #24]
 80025bc:	f003 0304 	and.w	r3, r3, #4
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	bf14      	ite	ne
 80025c4:	2301      	movne	r3, #1
 80025c6:	2300      	moveq	r3, #0
 80025c8:	b2db      	uxtb	r3, r3
 80025ca:	461a      	mov	r2, r3
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	699b      	ldr	r3, [r3, #24]
 80025d8:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 80025dc:	2b00      	cmp	r3, #0
 80025de:	bf14      	ite	ne
 80025e0:	2301      	movne	r3, #1
 80025e2:	2300      	moveq	r3, #0
 80025e4:	b2db      	uxtb	r3, r3
 80025e6:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  return HAL_OK;
 80025ee:	2300      	movs	r3, #0
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	370c      	adds	r7, #12
 80025f4:	46bd      	mov	sp, r7
 80025f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fa:	4770      	bx	lr

080025fc <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b082      	sub	sp, #8
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
 8002604:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d101      	bne.n	8002610 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 800260c:	2301      	movs	r3, #1
 800260e:	e00b      	b.n	8002628 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002616:	2b10      	cmp	r3, #16
 8002618:	d105      	bne.n	8002626 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 800261a:	6839      	ldr	r1, [r7, #0]
 800261c:	6878      	ldr	r0, [r7, #4]
 800261e:	f000 f88f 	bl	8002740 <ETH_SetMACConfig>

    return HAL_OK;
 8002622:	2300      	movs	r3, #0
 8002624:	e000      	b.n	8002628 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
  }
}
 8002628:	4618      	mov	r0, r3
 800262a:	3708      	adds	r7, #8
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}

08002630 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b084      	sub	sp, #16
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	691b      	ldr	r3, [r3, #16]
 800263e:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	f023 031c 	bic.w	r3, r3, #28
 8002646:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002648:	f001 fa84 	bl	8003b54 <HAL_RCC_GetHCLKFreq>
 800264c:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 800264e:	68bb      	ldr	r3, [r7, #8]
 8002650:	4a1d      	ldr	r2, [pc, #116]	@ (80026c8 <HAL_ETH_SetMDIOClockRange+0x98>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d908      	bls.n	8002668 <HAL_ETH_SetMDIOClockRange+0x38>
 8002656:	68bb      	ldr	r3, [r7, #8]
 8002658:	4a1c      	ldr	r2, [pc, #112]	@ (80026cc <HAL_ETH_SetMDIOClockRange+0x9c>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d804      	bhi.n	8002668 <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	f043 0308 	orr.w	r3, r3, #8
 8002664:	60fb      	str	r3, [r7, #12]
 8002666:	e027      	b.n	80026b8 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	4a18      	ldr	r2, [pc, #96]	@ (80026cc <HAL_ETH_SetMDIOClockRange+0x9c>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d908      	bls.n	8002682 <HAL_ETH_SetMDIOClockRange+0x52>
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	4a17      	ldr	r2, [pc, #92]	@ (80026d0 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d204      	bcs.n	8002682 <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	f043 030c 	orr.w	r3, r3, #12
 800267e:	60fb      	str	r3, [r7, #12]
 8002680:	e01a      	b.n	80026b8 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	4a12      	ldr	r2, [pc, #72]	@ (80026d0 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d303      	bcc.n	8002692 <HAL_ETH_SetMDIOClockRange+0x62>
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	4a11      	ldr	r2, [pc, #68]	@ (80026d4 <HAL_ETH_SetMDIOClockRange+0xa4>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d911      	bls.n	80026b6 <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8002692:	68bb      	ldr	r3, [r7, #8]
 8002694:	4a0f      	ldr	r2, [pc, #60]	@ (80026d4 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d908      	bls.n	80026ac <HAL_ETH_SetMDIOClockRange+0x7c>
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	4a0e      	ldr	r2, [pc, #56]	@ (80026d8 <HAL_ETH_SetMDIOClockRange+0xa8>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d804      	bhi.n	80026ac <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	f043 0304 	orr.w	r3, r3, #4
 80026a8:	60fb      	str	r3, [r7, #12]
 80026aa:	e005      	b.n	80026b8 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	f043 0310 	orr.w	r3, r3, #16
 80026b2:	60fb      	str	r3, [r7, #12]
 80026b4:	e000      	b.n	80026b8 <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80026b6:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	68fa      	ldr	r2, [r7, #12]
 80026be:	611a      	str	r2, [r3, #16]
}
 80026c0:	bf00      	nop
 80026c2:	3710      	adds	r7, #16
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}
 80026c8:	01312cff 	.word	0x01312cff
 80026cc:	02160ebf 	.word	0x02160ebf
 80026d0:	03938700 	.word	0x03938700
 80026d4:	05f5e0ff 	.word	0x05f5e0ff
 80026d8:	08f0d17f 	.word	0x08f0d17f

080026dc <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(const ETH_HandleTypeDef *heth)
{
 80026dc:	b480      	push	{r7}
 80026de:	b083      	sub	sp, #12
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	370c      	adds	r7, #12
 80026ee:	46bd      	mov	sp, r7
 80026f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f4:	4770      	bx	lr

080026f6 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 80026f6:	b580      	push	{r7, lr}
 80026f8:	b084      	sub	sp, #16
 80026fa:	af00      	add	r7, sp, #0
 80026fc:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80026fe:	2300      	movs	r3, #0
 8002700:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800270a:	699b      	ldr	r3, [r3, #24]
 800270c:	687a      	ldr	r2, [r7, #4]
 800270e:	6812      	ldr	r2, [r2, #0]
 8002710:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002714:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002718:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002722:	699b      	ldr	r3, [r3, #24]
 8002724:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002726:	2001      	movs	r0, #1
 8002728:	f7ff f888 	bl	800183c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681a      	ldr	r2, [r3, #0]
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002736:	6193      	str	r3, [r2, #24]
}
 8002738:	bf00      	nop
 800273a:	3710      	adds	r7, #16
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}

08002740 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b084      	sub	sp, #16
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
 8002748:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002752:	68fa      	ldr	r2, [r7, #12]
 8002754:	4b51      	ldr	r3, [pc, #324]	@ (800289c <ETH_SetMACConfig+0x15c>)
 8002756:	4013      	ands	r3, r2
 8002758:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	7c1b      	ldrb	r3, [r3, #16]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d102      	bne.n	8002768 <ETH_SetMACConfig+0x28>
 8002762:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002766:	e000      	b.n	800276a <ETH_SetMACConfig+0x2a>
 8002768:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	7c5b      	ldrb	r3, [r3, #17]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d102      	bne.n	8002778 <ETH_SetMACConfig+0x38>
 8002772:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002776:	e000      	b.n	800277a <ETH_SetMACConfig+0x3a>
 8002778:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800277a:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002780:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	7fdb      	ldrb	r3, [r3, #31]
 8002786:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002788:	431a      	orrs	r2, r3
                        macconf->Speed |
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800278e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002790:	683a      	ldr	r2, [r7, #0]
 8002792:	7f92      	ldrb	r2, [r2, #30]
 8002794:	2a00      	cmp	r2, #0
 8002796:	d102      	bne.n	800279e <ETH_SetMACConfig+0x5e>
 8002798:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800279c:	e000      	b.n	80027a0 <ETH_SetMACConfig+0x60>
 800279e:	2200      	movs	r2, #0
                        macconf->Speed |
 80027a0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	7f1b      	ldrb	r3, [r3, #28]
 80027a6:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80027a8:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80027ae:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	791b      	ldrb	r3, [r3, #4]
 80027b4:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80027b6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80027b8:	683a      	ldr	r2, [r7, #0]
 80027ba:	f892 2020 	ldrb.w	r2, [r2, #32]
 80027be:	2a00      	cmp	r2, #0
 80027c0:	d102      	bne.n	80027c8 <ETH_SetMACConfig+0x88>
 80027c2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80027c6:	e000      	b.n	80027ca <ETH_SetMACConfig+0x8a>
 80027c8:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80027ca:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	7bdb      	ldrb	r3, [r3, #15]
 80027d0:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80027d2:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80027d8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80027e0:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80027e2:	4313      	orrs	r3, r2
 80027e4:	68fa      	ldr	r2, [r7, #12]
 80027e6:	4313      	orrs	r3, r2
 80027e8:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	68fa      	ldr	r2, [r7, #12]
 80027f0:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80027fa:	2001      	movs	r0, #1
 80027fc:	f7ff f81e 	bl	800183c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	68fa      	ldr	r2, [r7, #12]
 8002806:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	699b      	ldr	r3, [r3, #24]
 800280e:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002810:	68fa      	ldr	r2, [r7, #12]
 8002812:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8002816:	4013      	ands	r3, r2
 8002818:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800281e:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002820:	683a      	ldr	r2, [r7, #0]
 8002822:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8002826:	2a00      	cmp	r2, #0
 8002828:	d101      	bne.n	800282e <ETH_SetMACConfig+0xee>
 800282a:	2280      	movs	r2, #128	@ 0x80
 800282c:	e000      	b.n	8002830 <ETH_SetMACConfig+0xf0>
 800282e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002830:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002836:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002838:	683a      	ldr	r2, [r7, #0]
 800283a:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 800283e:	2a01      	cmp	r2, #1
 8002840:	d101      	bne.n	8002846 <ETH_SetMACConfig+0x106>
 8002842:	2208      	movs	r2, #8
 8002844:	e000      	b.n	8002848 <ETH_SetMACConfig+0x108>
 8002846:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002848:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800284a:	683a      	ldr	r2, [r7, #0]
 800284c:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8002850:	2a01      	cmp	r2, #1
 8002852:	d101      	bne.n	8002858 <ETH_SetMACConfig+0x118>
 8002854:	2204      	movs	r2, #4
 8002856:	e000      	b.n	800285a <ETH_SetMACConfig+0x11a>
 8002858:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800285a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 800285c:	683a      	ldr	r2, [r7, #0]
 800285e:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8002862:	2a01      	cmp	r2, #1
 8002864:	d101      	bne.n	800286a <ETH_SetMACConfig+0x12a>
 8002866:	2202      	movs	r2, #2
 8002868:	e000      	b.n	800286c <ETH_SetMACConfig+0x12c>
 800286a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800286c:	4313      	orrs	r3, r2
 800286e:	68fa      	ldr	r2, [r7, #12]
 8002870:	4313      	orrs	r3, r2
 8002872:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	68fa      	ldr	r2, [r7, #12]
 800287a:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	699b      	ldr	r3, [r3, #24]
 8002882:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002884:	2001      	movs	r0, #1
 8002886:	f7fe ffd9 	bl	800183c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	68fa      	ldr	r2, [r7, #12]
 8002890:	619a      	str	r2, [r3, #24]
}
 8002892:	bf00      	nop
 8002894:	3710      	adds	r7, #16
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}
 800289a:	bf00      	nop
 800289c:	ff20810f 	.word	0xff20810f

080028a0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b084      	sub	sp, #16
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
 80028a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80028b2:	699b      	ldr	r3, [r3, #24]
 80028b4:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80028b6:	68fa      	ldr	r2, [r7, #12]
 80028b8:	4b3d      	ldr	r3, [pc, #244]	@ (80029b0 <ETH_SetDMAConfig+0x110>)
 80028ba:	4013      	ands	r3, r2
 80028bc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	7b1b      	ldrb	r3, [r3, #12]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d102      	bne.n	80028cc <ETH_SetDMAConfig+0x2c>
 80028c6:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80028ca:	e000      	b.n	80028ce <ETH_SetDMAConfig+0x2e>
 80028cc:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	7b5b      	ldrb	r3, [r3, #13]
 80028d2:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80028d4:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80028d6:	683a      	ldr	r2, [r7, #0]
 80028d8:	7f52      	ldrb	r2, [r2, #29]
 80028da:	2a00      	cmp	r2, #0
 80028dc:	d102      	bne.n	80028e4 <ETH_SetDMAConfig+0x44>
 80028de:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80028e2:	e000      	b.n	80028e6 <ETH_SetDMAConfig+0x46>
 80028e4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80028e6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	7b9b      	ldrb	r3, [r3, #14]
 80028ec:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80028ee:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80028f4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	7f1b      	ldrb	r3, [r3, #28]
 80028fa:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80028fc:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	7f9b      	ldrb	r3, [r3, #30]
 8002902:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002904:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800290a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002912:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002914:	4313      	orrs	r3, r2
 8002916:	68fa      	ldr	r2, [r7, #12]
 8002918:	4313      	orrs	r3, r2
 800291a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002924:	461a      	mov	r2, r3
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002932:	699b      	ldr	r3, [r3, #24]
 8002934:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002936:	2001      	movs	r0, #1
 8002938:	f7fe ff80 	bl	800183c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002944:	461a      	mov	r2, r3
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	791b      	ldrb	r3, [r3, #4]
 800294e:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002954:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800295a:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002960:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002968:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800296a:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002970:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002972:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002978:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800297a:	687a      	ldr	r2, [r7, #4]
 800297c:	6812      	ldr	r2, [r2, #0]
 800297e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002982:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002986:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002994:	2001      	movs	r0, #1
 8002996:	f7fe ff51 	bl	800183c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80029a2:	461a      	mov	r2, r3
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	6013      	str	r3, [r2, #0]
}
 80029a8:	bf00      	nop
 80029aa:	3710      	adds	r7, #16
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}
 80029b0:	f8de3f23 	.word	0xf8de3f23

080029b4 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b0a6      	sub	sp, #152	@ 0x98
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80029bc:	2301      	movs	r3, #1
 80029be:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 80029c2:	2301      	movs	r3, #1
 80029c4:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80029c8:	2300      	movs	r3, #0
 80029ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80029cc:	2300      	movs	r3, #0
 80029ce:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80029d2:	2301      	movs	r3, #1
 80029d4:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80029d8:	2300      	movs	r3, #0
 80029da:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80029de:	2301      	movs	r3, #1
 80029e0:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80029e4:	2300      	movs	r3, #0
 80029e6:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80029ea:	2300      	movs	r3, #0
 80029ec:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80029f0:	2300      	movs	r3, #0
 80029f2:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80029f4:	2300      	movs	r3, #0
 80029f6:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80029fa:	2300      	movs	r3, #0
 80029fc:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80029fe:	2300      	movs	r3, #0
 8002a00:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002a04:	2300      	movs	r3, #0
 8002a06:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002a10:	2300      	movs	r3, #0
 8002a12:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002a16:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002a1a:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002a1c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002a20:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002a22:	2300      	movs	r3, #0
 8002a24:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002a28:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002a2c:	4619      	mov	r1, r3
 8002a2e:	6878      	ldr	r0, [r7, #4]
 8002a30:	f7ff fe86 	bl	8002740 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002a34:	2301      	movs	r3, #1
 8002a36:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002a42:	2301      	movs	r3, #1
 8002a44:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002a46:	2300      	movs	r3, #0
 8002a48:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002a50:	2300      	movs	r3, #0
 8002a52:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002a56:	2300      	movs	r3, #0
 8002a58:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002a60:	2301      	movs	r3, #1
 8002a62:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002a64:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002a68:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002a6a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002a6e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002a70:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002a74:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002a76:	2301      	movs	r3, #1
 8002a78:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002a80:	2300      	movs	r3, #0
 8002a82:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002a84:	f107 0308 	add.w	r3, r7, #8
 8002a88:	4619      	mov	r1, r3
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	f7ff ff08 	bl	80028a0 <ETH_SetDMAConfig>
}
 8002a90:	bf00      	nop
 8002a92:	3798      	adds	r7, #152	@ 0x98
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}

08002a98 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b087      	sub	sp, #28
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	60f8      	str	r0, [r7, #12]
 8002aa0:	60b9      	str	r1, [r7, #8]
 8002aa2:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	3305      	adds	r3, #5
 8002aa8:	781b      	ldrb	r3, [r3, #0]
 8002aaa:	021b      	lsls	r3, r3, #8
 8002aac:	687a      	ldr	r2, [r7, #4]
 8002aae:	3204      	adds	r2, #4
 8002ab0:	7812      	ldrb	r2, [r2, #0]
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002ab6:	68ba      	ldr	r2, [r7, #8]
 8002ab8:	4b11      	ldr	r3, [pc, #68]	@ (8002b00 <ETH_MACAddressConfig+0x68>)
 8002aba:	4413      	add	r3, r2
 8002abc:	461a      	mov	r2, r3
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	3303      	adds	r3, #3
 8002ac6:	781b      	ldrb	r3, [r3, #0]
 8002ac8:	061a      	lsls	r2, r3, #24
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	3302      	adds	r3, #2
 8002ace:	781b      	ldrb	r3, [r3, #0]
 8002ad0:	041b      	lsls	r3, r3, #16
 8002ad2:	431a      	orrs	r2, r3
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	3301      	adds	r3, #1
 8002ad8:	781b      	ldrb	r3, [r3, #0]
 8002ada:	021b      	lsls	r3, r3, #8
 8002adc:	4313      	orrs	r3, r2
 8002ade:	687a      	ldr	r2, [r7, #4]
 8002ae0:	7812      	ldrb	r2, [r2, #0]
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002ae6:	68ba      	ldr	r2, [r7, #8]
 8002ae8:	4b06      	ldr	r3, [pc, #24]	@ (8002b04 <ETH_MACAddressConfig+0x6c>)
 8002aea:	4413      	add	r3, r2
 8002aec:	461a      	mov	r2, r3
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	6013      	str	r3, [r2, #0]
}
 8002af2:	bf00      	nop
 8002af4:	371c      	adds	r7, #28
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr
 8002afe:	bf00      	nop
 8002b00:	40028040 	.word	0x40028040
 8002b04:	40028044 	.word	0x40028044

08002b08 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b085      	sub	sp, #20
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002b10:	2300      	movs	r3, #0
 8002b12:	60fb      	str	r3, [r7, #12]
 8002b14:	e03e      	b.n	8002b94 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	68d9      	ldr	r1, [r3, #12]
 8002b1a:	68fa      	ldr	r2, [r7, #12]
 8002b1c:	4613      	mov	r3, r2
 8002b1e:	009b      	lsls	r3, r3, #2
 8002b20:	4413      	add	r3, r2
 8002b22:	00db      	lsls	r3, r3, #3
 8002b24:	440b      	add	r3, r1
 8002b26:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	2200      	movs	r2, #0
 8002b32:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	2200      	movs	r2, #0
 8002b38:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002b40:	68b9      	ldr	r1, [r7, #8]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	68fa      	ldr	r2, [r7, #12]
 8002b46:	3206      	adds	r2, #6
 8002b48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	2b02      	cmp	r3, #2
 8002b5c:	d80c      	bhi.n	8002b78 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	68d9      	ldr	r1, [r3, #12]
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	1c5a      	adds	r2, r3, #1
 8002b66:	4613      	mov	r3, r2
 8002b68:	009b      	lsls	r3, r3, #2
 8002b6a:	4413      	add	r3, r2
 8002b6c:	00db      	lsls	r3, r3, #3
 8002b6e:	440b      	add	r3, r1
 8002b70:	461a      	mov	r2, r3
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	60da      	str	r2, [r3, #12]
 8002b76:	e004      	b.n	8002b82 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	68db      	ldr	r3, [r3, #12]
 8002b7c:	461a      	mov	r2, r3
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	3301      	adds	r3, #1
 8002b92:	60fb      	str	r3, [r7, #12]
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	2b03      	cmp	r3, #3
 8002b98:	d9bd      	bls.n	8002b16 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	68da      	ldr	r2, [r3, #12]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002bac:	611a      	str	r2, [r3, #16]
}
 8002bae:	bf00      	nop
 8002bb0:	3714      	adds	r7, #20
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb8:	4770      	bx	lr

08002bba <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002bba:	b480      	push	{r7}
 8002bbc:	b085      	sub	sp, #20
 8002bbe:	af00      	add	r7, sp, #0
 8002bc0:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	60fb      	str	r3, [r7, #12]
 8002bc6:	e046      	b.n	8002c56 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6919      	ldr	r1, [r3, #16]
 8002bcc:	68fa      	ldr	r2, [r7, #12]
 8002bce:	4613      	mov	r3, r2
 8002bd0:	009b      	lsls	r3, r3, #2
 8002bd2:	4413      	add	r3, r2
 8002bd4:	00db      	lsls	r3, r3, #3
 8002bd6:	440b      	add	r3, r1
 8002bd8:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	2200      	movs	r2, #0
 8002be4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	2200      	movs	r2, #0
 8002bea:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8002c04:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	f44f 428c 	mov.w	r2, #17920	@ 0x4600
 8002c0c:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002c0e:	68bb      	ldr	r3, [r7, #8]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002c1a:	68b9      	ldr	r1, [r7, #8]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	68fa      	ldr	r2, [r7, #12]
 8002c20:	3212      	adds	r2, #18
 8002c22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	2b02      	cmp	r3, #2
 8002c2a:	d80c      	bhi.n	8002c46 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6919      	ldr	r1, [r3, #16]
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	1c5a      	adds	r2, r3, #1
 8002c34:	4613      	mov	r3, r2
 8002c36:	009b      	lsls	r3, r3, #2
 8002c38:	4413      	add	r3, r2
 8002c3a:	00db      	lsls	r3, r3, #3
 8002c3c:	440b      	add	r3, r1
 8002c3e:	461a      	mov	r2, r3
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	60da      	str	r2, [r3, #12]
 8002c44:	e004      	b.n	8002c50 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	691b      	ldr	r3, [r3, #16]
 8002c4a:	461a      	mov	r2, r3
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	3301      	adds	r3, #1
 8002c54:	60fb      	str	r3, [r7, #12]
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	2b03      	cmp	r3, #3
 8002c5a:	d9b5      	bls.n	8002bc8 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2200      	movs	r2, #0
 8002c66:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2200      	movs	r2, #0
 8002c72:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2200      	movs	r2, #0
 8002c78:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	691a      	ldr	r2, [r3, #16]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002c86:	60da      	str	r2, [r3, #12]
}
 8002c88:	bf00      	nop
 8002c8a:	3714      	adds	r7, #20
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c92:	4770      	bx	lr

08002c94 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b08d      	sub	sp, #52	@ 0x34
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	60f8      	str	r0, [r7, #12]
 8002c9c:	60b9      	str	r1, [r7, #8]
 8002c9e:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	3318      	adds	r3, #24
 8002ca4:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8002ca6:	697b      	ldr	r3, [r7, #20]
 8002ca8:	691b      	ldr	r3, [r3, #16]
 8002caa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	691b      	ldr	r3, [r3, #16]
 8002cb0:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	627b      	str	r3, [r7, #36]	@ 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002cba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cbe:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	689b      	ldr	r3, [r3, #8]
 8002cc4:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8002cca:	6a3b      	ldr	r3, [r7, #32]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002cd2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002cd6:	d007      	beq.n	8002ce8 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002cd8:	697a      	ldr	r2, [r7, #20]
 8002cda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cdc:	3304      	adds	r3, #4
 8002cde:	009b      	lsls	r3, r3, #2
 8002ce0:	4413      	add	r3, r2
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d001      	beq.n	8002cec <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8002ce8:	2302      	movs	r3, #2
 8002cea:	e103      	b.n	8002ef4 <ETH_Prepare_Tx_Descriptors+0x260>
  }


  descnbr += 1U;
 8002cec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cee:	3301      	adds	r3, #1
 8002cf0:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002cf2:	69fb      	ldr	r3, [r7, #28]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	461a      	mov	r2, r3
 8002cf8:	6a3b      	ldr	r3, [r7, #32]
 8002cfa:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002cfc:	6a3b      	ldr	r3, [r7, #32]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	f423 53ff 	bic.w	r3, r3, #8160	@ 0x1fe0
 8002d04:	f023 031f 	bic.w	r3, r3, #31
 8002d08:	69fa      	ldr	r2, [r7, #28]
 8002d0a:	6852      	ldr	r2, [r2, #4]
 8002d0c:	431a      	orrs	r2, r3
 8002d0e:	6a3b      	ldr	r3, [r7, #32]
 8002d10:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f003 0301 	and.w	r3, r3, #1
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d008      	beq.n	8002d30 <ETH_Prepare_Tx_Descriptors+0x9c>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8002d1e:	6a3b      	ldr	r3, [r7, #32]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	695b      	ldr	r3, [r3, #20]
 8002d2a:	431a      	orrs	r2, r3
 8002d2c:	6a3b      	ldr	r3, [r7, #32]
 8002d2e:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f003 0320 	and.w	r3, r3, #32
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d008      	beq.n	8002d4e <ETH_Prepare_Tx_Descriptors+0xba>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8002d3c:	6a3b      	ldr	r3, [r7, #32]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	691b      	ldr	r3, [r3, #16]
 8002d48:	431a      	orrs	r2, r3
 8002d4a:	6a3b      	ldr	r3, [r7, #32]
 8002d4c:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f003 0304 	and.w	r3, r3, #4
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d005      	beq.n	8002d66 <ETH_Prepare_Tx_Descriptors+0xd2>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8002d5a:	6a3b      	ldr	r3, [r7, #32]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002d62:	6a3b      	ldr	r3, [r7, #32]
 8002d64:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8002d66:	6a3b      	ldr	r3, [r7, #32]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002d6e:	6a3b      	ldr	r3, [r7, #32]
 8002d70:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 8002d72:	f3bf 8f5f 	dmb	sy
}
 8002d76:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002d78:	6a3b      	ldr	r3, [r7, #32]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002d80:	6a3b      	ldr	r3, [r7, #32]
 8002d82:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8002d84:	e084      	b.n	8002e90 <ETH_Prepare_Tx_Descriptors+0x1fc>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002d86:	6a3b      	ldr	r3, [r7, #32]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8002d8e:	6a3b      	ldr	r3, [r7, #32]
 8002d90:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d006      	beq.n	8002da6 <ETH_Prepare_Tx_Descriptors+0x112>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002d98:	6a3b      	ldr	r3, [r7, #32]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8002da0:	6a3b      	ldr	r3, [r7, #32]
 8002da2:	601a      	str	r2, [r3, #0]
 8002da4:	e005      	b.n	8002db2 <ETH_Prepare_Tx_Descriptors+0x11e>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002da6:	6a3b      	ldr	r3, [r7, #32]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002dae:	6a3b      	ldr	r3, [r7, #32]
 8002db0:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002db2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002db4:	3301      	adds	r3, #1
 8002db6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002db8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002dba:	2b03      	cmp	r3, #3
 8002dbc:	d902      	bls.n	8002dc4 <ETH_Prepare_Tx_Descriptors+0x130>
 8002dbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002dc0:	3b04      	subs	r3, #4
 8002dc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002dc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002dcc:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8002dce:	6a3b      	ldr	r3, [r7, #32]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8002dd6:	6a3b      	ldr	r3, [r7, #32]
 8002dd8:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8002dda:	6a3b      	ldr	r3, [r7, #32]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002de2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002de6:	d007      	beq.n	8002df8 <ETH_Prepare_Tx_Descriptors+0x164>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002de8:	697a      	ldr	r2, [r7, #20]
 8002dea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002dec:	3304      	adds	r3, #4
 8002dee:	009b      	lsls	r3, r3, #2
 8002df0:	4413      	add	r3, r2
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d029      	beq.n	8002e4c <ETH_Prepare_Tx_Descriptors+0x1b8>
    {
      descidx = firstdescidx;
 8002df8:	693b      	ldr	r3, [r7, #16]
 8002dfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002e00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e04:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8002e06:	2300      	movs	r3, #0
 8002e08:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002e0a:	e019      	b.n	8002e40 <ETH_Prepare_Tx_Descriptors+0x1ac>
  __ASM volatile ("dmb 0xF":::"memory");
 8002e0c:	f3bf 8f5f 	dmb	sy
}
 8002e10:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002e12:	6a3b      	ldr	r3, [r7, #32]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002e1a:	6a3b      	ldr	r3, [r7, #32]
 8002e1c:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8002e1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e20:	3301      	adds	r3, #1
 8002e22:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002e24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e26:	2b03      	cmp	r3, #3
 8002e28:	d902      	bls.n	8002e30 <ETH_Prepare_Tx_Descriptors+0x19c>
 8002e2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e2c:	3b04      	subs	r3, #4
 8002e2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002e34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e38:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8002e3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e3c:	3301      	adds	r3, #1
 8002e3e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002e40:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002e42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e44:	429a      	cmp	r2, r3
 8002e46:	d3e1      	bcc.n	8002e0c <ETH_Prepare_Tx_Descriptors+0x178>
      }

      return HAL_ETH_ERROR_BUSY;
 8002e48:	2302      	movs	r3, #2
 8002e4a:	e053      	b.n	8002ef4 <ETH_Prepare_Tx_Descriptors+0x260>
    }

    descnbr += 1U;
 8002e4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e4e:	3301      	adds	r3, #1
 8002e50:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8002e52:	69fb      	ldr	r3, [r7, #28]
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002e58:	69fb      	ldr	r3, [r7, #28]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	461a      	mov	r2, r3
 8002e5e:	6a3b      	ldr	r3, [r7, #32]
 8002e60:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002e62:	6a3b      	ldr	r3, [r7, #32]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	f423 53ff 	bic.w	r3, r3, #8160	@ 0x1fe0
 8002e6a:	f023 031f 	bic.w	r3, r3, #31
 8002e6e:	69fa      	ldr	r2, [r7, #28]
 8002e70:	6852      	ldr	r2, [r2, #4]
 8002e72:	431a      	orrs	r2, r3
 8002e74:	6a3b      	ldr	r3, [r7, #32]
 8002e76:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8002e78:	69bb      	ldr	r3, [r7, #24]
 8002e7a:	3301      	adds	r3, #1
 8002e7c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8002e7e:	f3bf 8f5f 	dmb	sy
}
 8002e82:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002e84:	6a3b      	ldr	r3, [r7, #32]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002e8c:	6a3b      	ldr	r3, [r7, #32]
 8002e8e:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8002e90:	69fb      	ldr	r3, [r7, #28]
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	f47f af76 	bne.w	8002d86 <ETH_Prepare_Tx_Descriptors+0xf2>
  }

  if (ItMode != ((uint32_t)RESET))
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d006      	beq.n	8002eae <ETH_Prepare_Tx_Descriptors+0x21a>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002ea0:	6a3b      	ldr	r3, [r7, #32]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8002ea8:	6a3b      	ldr	r3, [r7, #32]
 8002eaa:	601a      	str	r2, [r3, #0]
 8002eac:	e005      	b.n	8002eba <ETH_Prepare_Tx_Descriptors+0x226>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002eae:	6a3b      	ldr	r3, [r7, #32]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002eb6:	6a3b      	ldr	r3, [r7, #32]
 8002eb8:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002eba:	6a3b      	ldr	r3, [r7, #32]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8002ec2:	6a3b      	ldr	r3, [r7, #32]
 8002ec4:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002eca:	6979      	ldr	r1, [r7, #20]
 8002ecc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ece:	3304      	adds	r3, #4
 8002ed0:	009b      	lsls	r3, r3, #2
 8002ed2:	440b      	add	r3, r1
 8002ed4:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002eda:	611a      	str	r2, [r3, #16]
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002edc:	b672      	cpsid	i
}
 8002ede:	bf00      	nop
  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002ee4:	69bb      	ldr	r3, [r7, #24]
 8002ee6:	4413      	add	r3, r2
 8002ee8:	1c5a      	adds	r2, r3, #1
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	629a      	str	r2, [r3, #40]	@ 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8002eee:	b662      	cpsie	i
}
 8002ef0:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8002ef2:	2300      	movs	r3, #0
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	3734      	adds	r7, #52	@ 0x34
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efe:	4770      	bx	lr

08002f00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b089      	sub	sp, #36	@ 0x24
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
 8002f08:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002f12:	2300      	movs	r3, #0
 8002f14:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f16:	2300      	movs	r3, #0
 8002f18:	61fb      	str	r3, [r7, #28]
 8002f1a:	e177      	b.n	800320c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002f1c:	2201      	movs	r2, #1
 8002f1e:	69fb      	ldr	r3, [r7, #28]
 8002f20:	fa02 f303 	lsl.w	r3, r2, r3
 8002f24:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	697a      	ldr	r2, [r7, #20]
 8002f2c:	4013      	ands	r3, r2
 8002f2e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f30:	693a      	ldr	r2, [r7, #16]
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	429a      	cmp	r2, r3
 8002f36:	f040 8166 	bne.w	8003206 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	f003 0303 	and.w	r3, r3, #3
 8002f42:	2b01      	cmp	r3, #1
 8002f44:	d005      	beq.n	8002f52 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f4e:	2b02      	cmp	r3, #2
 8002f50:	d130      	bne.n	8002fb4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	689b      	ldr	r3, [r3, #8]
 8002f56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002f58:	69fb      	ldr	r3, [r7, #28]
 8002f5a:	005b      	lsls	r3, r3, #1
 8002f5c:	2203      	movs	r2, #3
 8002f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f62:	43db      	mvns	r3, r3
 8002f64:	69ba      	ldr	r2, [r7, #24]
 8002f66:	4013      	ands	r3, r2
 8002f68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	68da      	ldr	r2, [r3, #12]
 8002f6e:	69fb      	ldr	r3, [r7, #28]
 8002f70:	005b      	lsls	r3, r3, #1
 8002f72:	fa02 f303 	lsl.w	r3, r2, r3
 8002f76:	69ba      	ldr	r2, [r7, #24]
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	69ba      	ldr	r2, [r7, #24]
 8002f80:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f88:	2201      	movs	r2, #1
 8002f8a:	69fb      	ldr	r3, [r7, #28]
 8002f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f90:	43db      	mvns	r3, r3
 8002f92:	69ba      	ldr	r2, [r7, #24]
 8002f94:	4013      	ands	r3, r2
 8002f96:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	091b      	lsrs	r3, r3, #4
 8002f9e:	f003 0201 	and.w	r2, r3, #1
 8002fa2:	69fb      	ldr	r3, [r7, #28]
 8002fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa8:	69ba      	ldr	r2, [r7, #24]
 8002faa:	4313      	orrs	r3, r2
 8002fac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	69ba      	ldr	r2, [r7, #24]
 8002fb2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	f003 0303 	and.w	r3, r3, #3
 8002fbc:	2b03      	cmp	r3, #3
 8002fbe:	d017      	beq.n	8002ff0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	68db      	ldr	r3, [r3, #12]
 8002fc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002fc6:	69fb      	ldr	r3, [r7, #28]
 8002fc8:	005b      	lsls	r3, r3, #1
 8002fca:	2203      	movs	r2, #3
 8002fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd0:	43db      	mvns	r3, r3
 8002fd2:	69ba      	ldr	r2, [r7, #24]
 8002fd4:	4013      	ands	r3, r2
 8002fd6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	689a      	ldr	r2, [r3, #8]
 8002fdc:	69fb      	ldr	r3, [r7, #28]
 8002fde:	005b      	lsls	r3, r3, #1
 8002fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe4:	69ba      	ldr	r2, [r7, #24]
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	69ba      	ldr	r2, [r7, #24]
 8002fee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	f003 0303 	and.w	r3, r3, #3
 8002ff8:	2b02      	cmp	r3, #2
 8002ffa:	d123      	bne.n	8003044 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ffc:	69fb      	ldr	r3, [r7, #28]
 8002ffe:	08da      	lsrs	r2, r3, #3
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	3208      	adds	r2, #8
 8003004:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003008:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800300a:	69fb      	ldr	r3, [r7, #28]
 800300c:	f003 0307 	and.w	r3, r3, #7
 8003010:	009b      	lsls	r3, r3, #2
 8003012:	220f      	movs	r2, #15
 8003014:	fa02 f303 	lsl.w	r3, r2, r3
 8003018:	43db      	mvns	r3, r3
 800301a:	69ba      	ldr	r2, [r7, #24]
 800301c:	4013      	ands	r3, r2
 800301e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	691a      	ldr	r2, [r3, #16]
 8003024:	69fb      	ldr	r3, [r7, #28]
 8003026:	f003 0307 	and.w	r3, r3, #7
 800302a:	009b      	lsls	r3, r3, #2
 800302c:	fa02 f303 	lsl.w	r3, r2, r3
 8003030:	69ba      	ldr	r2, [r7, #24]
 8003032:	4313      	orrs	r3, r2
 8003034:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003036:	69fb      	ldr	r3, [r7, #28]
 8003038:	08da      	lsrs	r2, r3, #3
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	3208      	adds	r2, #8
 800303e:	69b9      	ldr	r1, [r7, #24]
 8003040:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800304a:	69fb      	ldr	r3, [r7, #28]
 800304c:	005b      	lsls	r3, r3, #1
 800304e:	2203      	movs	r2, #3
 8003050:	fa02 f303 	lsl.w	r3, r2, r3
 8003054:	43db      	mvns	r3, r3
 8003056:	69ba      	ldr	r2, [r7, #24]
 8003058:	4013      	ands	r3, r2
 800305a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	f003 0203 	and.w	r2, r3, #3
 8003064:	69fb      	ldr	r3, [r7, #28]
 8003066:	005b      	lsls	r3, r3, #1
 8003068:	fa02 f303 	lsl.w	r3, r2, r3
 800306c:	69ba      	ldr	r2, [r7, #24]
 800306e:	4313      	orrs	r3, r2
 8003070:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	69ba      	ldr	r2, [r7, #24]
 8003076:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003080:	2b00      	cmp	r3, #0
 8003082:	f000 80c0 	beq.w	8003206 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003086:	2300      	movs	r3, #0
 8003088:	60fb      	str	r3, [r7, #12]
 800308a:	4b66      	ldr	r3, [pc, #408]	@ (8003224 <HAL_GPIO_Init+0x324>)
 800308c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800308e:	4a65      	ldr	r2, [pc, #404]	@ (8003224 <HAL_GPIO_Init+0x324>)
 8003090:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003094:	6453      	str	r3, [r2, #68]	@ 0x44
 8003096:	4b63      	ldr	r3, [pc, #396]	@ (8003224 <HAL_GPIO_Init+0x324>)
 8003098:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800309a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800309e:	60fb      	str	r3, [r7, #12]
 80030a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80030a2:	4a61      	ldr	r2, [pc, #388]	@ (8003228 <HAL_GPIO_Init+0x328>)
 80030a4:	69fb      	ldr	r3, [r7, #28]
 80030a6:	089b      	lsrs	r3, r3, #2
 80030a8:	3302      	adds	r3, #2
 80030aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80030b0:	69fb      	ldr	r3, [r7, #28]
 80030b2:	f003 0303 	and.w	r3, r3, #3
 80030b6:	009b      	lsls	r3, r3, #2
 80030b8:	220f      	movs	r2, #15
 80030ba:	fa02 f303 	lsl.w	r3, r2, r3
 80030be:	43db      	mvns	r3, r3
 80030c0:	69ba      	ldr	r2, [r7, #24]
 80030c2:	4013      	ands	r3, r2
 80030c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	4a58      	ldr	r2, [pc, #352]	@ (800322c <HAL_GPIO_Init+0x32c>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d037      	beq.n	800313e <HAL_GPIO_Init+0x23e>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	4a57      	ldr	r2, [pc, #348]	@ (8003230 <HAL_GPIO_Init+0x330>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d031      	beq.n	800313a <HAL_GPIO_Init+0x23a>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	4a56      	ldr	r2, [pc, #344]	@ (8003234 <HAL_GPIO_Init+0x334>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d02b      	beq.n	8003136 <HAL_GPIO_Init+0x236>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	4a55      	ldr	r2, [pc, #340]	@ (8003238 <HAL_GPIO_Init+0x338>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d025      	beq.n	8003132 <HAL_GPIO_Init+0x232>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	4a54      	ldr	r2, [pc, #336]	@ (800323c <HAL_GPIO_Init+0x33c>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d01f      	beq.n	800312e <HAL_GPIO_Init+0x22e>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	4a53      	ldr	r2, [pc, #332]	@ (8003240 <HAL_GPIO_Init+0x340>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d019      	beq.n	800312a <HAL_GPIO_Init+0x22a>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	4a52      	ldr	r2, [pc, #328]	@ (8003244 <HAL_GPIO_Init+0x344>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d013      	beq.n	8003126 <HAL_GPIO_Init+0x226>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	4a51      	ldr	r2, [pc, #324]	@ (8003248 <HAL_GPIO_Init+0x348>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d00d      	beq.n	8003122 <HAL_GPIO_Init+0x222>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	4a50      	ldr	r2, [pc, #320]	@ (800324c <HAL_GPIO_Init+0x34c>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d007      	beq.n	800311e <HAL_GPIO_Init+0x21e>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	4a4f      	ldr	r2, [pc, #316]	@ (8003250 <HAL_GPIO_Init+0x350>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d101      	bne.n	800311a <HAL_GPIO_Init+0x21a>
 8003116:	2309      	movs	r3, #9
 8003118:	e012      	b.n	8003140 <HAL_GPIO_Init+0x240>
 800311a:	230a      	movs	r3, #10
 800311c:	e010      	b.n	8003140 <HAL_GPIO_Init+0x240>
 800311e:	2308      	movs	r3, #8
 8003120:	e00e      	b.n	8003140 <HAL_GPIO_Init+0x240>
 8003122:	2307      	movs	r3, #7
 8003124:	e00c      	b.n	8003140 <HAL_GPIO_Init+0x240>
 8003126:	2306      	movs	r3, #6
 8003128:	e00a      	b.n	8003140 <HAL_GPIO_Init+0x240>
 800312a:	2305      	movs	r3, #5
 800312c:	e008      	b.n	8003140 <HAL_GPIO_Init+0x240>
 800312e:	2304      	movs	r3, #4
 8003130:	e006      	b.n	8003140 <HAL_GPIO_Init+0x240>
 8003132:	2303      	movs	r3, #3
 8003134:	e004      	b.n	8003140 <HAL_GPIO_Init+0x240>
 8003136:	2302      	movs	r3, #2
 8003138:	e002      	b.n	8003140 <HAL_GPIO_Init+0x240>
 800313a:	2301      	movs	r3, #1
 800313c:	e000      	b.n	8003140 <HAL_GPIO_Init+0x240>
 800313e:	2300      	movs	r3, #0
 8003140:	69fa      	ldr	r2, [r7, #28]
 8003142:	f002 0203 	and.w	r2, r2, #3
 8003146:	0092      	lsls	r2, r2, #2
 8003148:	4093      	lsls	r3, r2
 800314a:	69ba      	ldr	r2, [r7, #24]
 800314c:	4313      	orrs	r3, r2
 800314e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003150:	4935      	ldr	r1, [pc, #212]	@ (8003228 <HAL_GPIO_Init+0x328>)
 8003152:	69fb      	ldr	r3, [r7, #28]
 8003154:	089b      	lsrs	r3, r3, #2
 8003156:	3302      	adds	r3, #2
 8003158:	69ba      	ldr	r2, [r7, #24]
 800315a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800315e:	4b3d      	ldr	r3, [pc, #244]	@ (8003254 <HAL_GPIO_Init+0x354>)
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003164:	693b      	ldr	r3, [r7, #16]
 8003166:	43db      	mvns	r3, r3
 8003168:	69ba      	ldr	r2, [r7, #24]
 800316a:	4013      	ands	r3, r2
 800316c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003176:	2b00      	cmp	r3, #0
 8003178:	d003      	beq.n	8003182 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800317a:	69ba      	ldr	r2, [r7, #24]
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	4313      	orrs	r3, r2
 8003180:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003182:	4a34      	ldr	r2, [pc, #208]	@ (8003254 <HAL_GPIO_Init+0x354>)
 8003184:	69bb      	ldr	r3, [r7, #24]
 8003186:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003188:	4b32      	ldr	r3, [pc, #200]	@ (8003254 <HAL_GPIO_Init+0x354>)
 800318a:	68db      	ldr	r3, [r3, #12]
 800318c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	43db      	mvns	r3, r3
 8003192:	69ba      	ldr	r2, [r7, #24]
 8003194:	4013      	ands	r3, r2
 8003196:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d003      	beq.n	80031ac <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80031a4:	69ba      	ldr	r2, [r7, #24]
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	4313      	orrs	r3, r2
 80031aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80031ac:	4a29      	ldr	r2, [pc, #164]	@ (8003254 <HAL_GPIO_Init+0x354>)
 80031ae:	69bb      	ldr	r3, [r7, #24]
 80031b0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80031b2:	4b28      	ldr	r3, [pc, #160]	@ (8003254 <HAL_GPIO_Init+0x354>)
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	43db      	mvns	r3, r3
 80031bc:	69ba      	ldr	r2, [r7, #24]
 80031be:	4013      	ands	r3, r2
 80031c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d003      	beq.n	80031d6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80031ce:	69ba      	ldr	r2, [r7, #24]
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	4313      	orrs	r3, r2
 80031d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80031d6:	4a1f      	ldr	r2, [pc, #124]	@ (8003254 <HAL_GPIO_Init+0x354>)
 80031d8:	69bb      	ldr	r3, [r7, #24]
 80031da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80031dc:	4b1d      	ldr	r3, [pc, #116]	@ (8003254 <HAL_GPIO_Init+0x354>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	43db      	mvns	r3, r3
 80031e6:	69ba      	ldr	r2, [r7, #24]
 80031e8:	4013      	ands	r3, r2
 80031ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d003      	beq.n	8003200 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80031f8:	69ba      	ldr	r2, [r7, #24]
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	4313      	orrs	r3, r2
 80031fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003200:	4a14      	ldr	r2, [pc, #80]	@ (8003254 <HAL_GPIO_Init+0x354>)
 8003202:	69bb      	ldr	r3, [r7, #24]
 8003204:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003206:	69fb      	ldr	r3, [r7, #28]
 8003208:	3301      	adds	r3, #1
 800320a:	61fb      	str	r3, [r7, #28]
 800320c:	69fb      	ldr	r3, [r7, #28]
 800320e:	2b0f      	cmp	r3, #15
 8003210:	f67f ae84 	bls.w	8002f1c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003214:	bf00      	nop
 8003216:	bf00      	nop
 8003218:	3724      	adds	r7, #36	@ 0x24
 800321a:	46bd      	mov	sp, r7
 800321c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003220:	4770      	bx	lr
 8003222:	bf00      	nop
 8003224:	40023800 	.word	0x40023800
 8003228:	40013800 	.word	0x40013800
 800322c:	40020000 	.word	0x40020000
 8003230:	40020400 	.word	0x40020400
 8003234:	40020800 	.word	0x40020800
 8003238:	40020c00 	.word	0x40020c00
 800323c:	40021000 	.word	0x40021000
 8003240:	40021400 	.word	0x40021400
 8003244:	40021800 	.word	0x40021800
 8003248:	40021c00 	.word	0x40021c00
 800324c:	40022000 	.word	0x40022000
 8003250:	40022400 	.word	0x40022400
 8003254:	40013c00 	.word	0x40013c00

08003258 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003258:	b480      	push	{r7}
 800325a:	b083      	sub	sp, #12
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
 8003260:	460b      	mov	r3, r1
 8003262:	807b      	strh	r3, [r7, #2]
 8003264:	4613      	mov	r3, r2
 8003266:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003268:	787b      	ldrb	r3, [r7, #1]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d003      	beq.n	8003276 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800326e:	887a      	ldrh	r2, [r7, #2]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003274:	e003      	b.n	800327e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003276:	887b      	ldrh	r3, [r7, #2]
 8003278:	041a      	lsls	r2, r3, #16
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	619a      	str	r2, [r3, #24]
}
 800327e:	bf00      	nop
 8003280:	370c      	adds	r7, #12
 8003282:	46bd      	mov	sp, r7
 8003284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003288:	4770      	bx	lr
	...

0800328c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b086      	sub	sp, #24
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d101      	bne.n	800329e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e267      	b.n	800376e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f003 0301 	and.w	r3, r3, #1
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d075      	beq.n	8003396 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80032aa:	4b88      	ldr	r3, [pc, #544]	@ (80034cc <HAL_RCC_OscConfig+0x240>)
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	f003 030c 	and.w	r3, r3, #12
 80032b2:	2b04      	cmp	r3, #4
 80032b4:	d00c      	beq.n	80032d0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032b6:	4b85      	ldr	r3, [pc, #532]	@ (80034cc <HAL_RCC_OscConfig+0x240>)
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80032be:	2b08      	cmp	r3, #8
 80032c0:	d112      	bne.n	80032e8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032c2:	4b82      	ldr	r3, [pc, #520]	@ (80034cc <HAL_RCC_OscConfig+0x240>)
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80032ca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80032ce:	d10b      	bne.n	80032e8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032d0:	4b7e      	ldr	r3, [pc, #504]	@ (80034cc <HAL_RCC_OscConfig+0x240>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d05b      	beq.n	8003394 <HAL_RCC_OscConfig+0x108>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d157      	bne.n	8003394 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80032e4:	2301      	movs	r3, #1
 80032e6:	e242      	b.n	800376e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032f0:	d106      	bne.n	8003300 <HAL_RCC_OscConfig+0x74>
 80032f2:	4b76      	ldr	r3, [pc, #472]	@ (80034cc <HAL_RCC_OscConfig+0x240>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a75      	ldr	r2, [pc, #468]	@ (80034cc <HAL_RCC_OscConfig+0x240>)
 80032f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032fc:	6013      	str	r3, [r2, #0]
 80032fe:	e01d      	b.n	800333c <HAL_RCC_OscConfig+0xb0>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003308:	d10c      	bne.n	8003324 <HAL_RCC_OscConfig+0x98>
 800330a:	4b70      	ldr	r3, [pc, #448]	@ (80034cc <HAL_RCC_OscConfig+0x240>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a6f      	ldr	r2, [pc, #444]	@ (80034cc <HAL_RCC_OscConfig+0x240>)
 8003310:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003314:	6013      	str	r3, [r2, #0]
 8003316:	4b6d      	ldr	r3, [pc, #436]	@ (80034cc <HAL_RCC_OscConfig+0x240>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a6c      	ldr	r2, [pc, #432]	@ (80034cc <HAL_RCC_OscConfig+0x240>)
 800331c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003320:	6013      	str	r3, [r2, #0]
 8003322:	e00b      	b.n	800333c <HAL_RCC_OscConfig+0xb0>
 8003324:	4b69      	ldr	r3, [pc, #420]	@ (80034cc <HAL_RCC_OscConfig+0x240>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a68      	ldr	r2, [pc, #416]	@ (80034cc <HAL_RCC_OscConfig+0x240>)
 800332a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800332e:	6013      	str	r3, [r2, #0]
 8003330:	4b66      	ldr	r3, [pc, #408]	@ (80034cc <HAL_RCC_OscConfig+0x240>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a65      	ldr	r2, [pc, #404]	@ (80034cc <HAL_RCC_OscConfig+0x240>)
 8003336:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800333a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d013      	beq.n	800336c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003344:	f7fe fa6e 	bl	8001824 <HAL_GetTick>
 8003348:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800334a:	e008      	b.n	800335e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800334c:	f7fe fa6a 	bl	8001824 <HAL_GetTick>
 8003350:	4602      	mov	r2, r0
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	1ad3      	subs	r3, r2, r3
 8003356:	2b64      	cmp	r3, #100	@ 0x64
 8003358:	d901      	bls.n	800335e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800335a:	2303      	movs	r3, #3
 800335c:	e207      	b.n	800376e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800335e:	4b5b      	ldr	r3, [pc, #364]	@ (80034cc <HAL_RCC_OscConfig+0x240>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003366:	2b00      	cmp	r3, #0
 8003368:	d0f0      	beq.n	800334c <HAL_RCC_OscConfig+0xc0>
 800336a:	e014      	b.n	8003396 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800336c:	f7fe fa5a 	bl	8001824 <HAL_GetTick>
 8003370:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003372:	e008      	b.n	8003386 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003374:	f7fe fa56 	bl	8001824 <HAL_GetTick>
 8003378:	4602      	mov	r2, r0
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	1ad3      	subs	r3, r2, r3
 800337e:	2b64      	cmp	r3, #100	@ 0x64
 8003380:	d901      	bls.n	8003386 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003382:	2303      	movs	r3, #3
 8003384:	e1f3      	b.n	800376e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003386:	4b51      	ldr	r3, [pc, #324]	@ (80034cc <HAL_RCC_OscConfig+0x240>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800338e:	2b00      	cmp	r3, #0
 8003390:	d1f0      	bne.n	8003374 <HAL_RCC_OscConfig+0xe8>
 8003392:	e000      	b.n	8003396 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003394:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f003 0302 	and.w	r3, r3, #2
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d063      	beq.n	800346a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80033a2:	4b4a      	ldr	r3, [pc, #296]	@ (80034cc <HAL_RCC_OscConfig+0x240>)
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	f003 030c 	and.w	r3, r3, #12
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d00b      	beq.n	80033c6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033ae:	4b47      	ldr	r3, [pc, #284]	@ (80034cc <HAL_RCC_OscConfig+0x240>)
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80033b6:	2b08      	cmp	r3, #8
 80033b8:	d11c      	bne.n	80033f4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033ba:	4b44      	ldr	r3, [pc, #272]	@ (80034cc <HAL_RCC_OscConfig+0x240>)
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d116      	bne.n	80033f4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033c6:	4b41      	ldr	r3, [pc, #260]	@ (80034cc <HAL_RCC_OscConfig+0x240>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f003 0302 	and.w	r3, r3, #2
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d005      	beq.n	80033de <HAL_RCC_OscConfig+0x152>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	68db      	ldr	r3, [r3, #12]
 80033d6:	2b01      	cmp	r3, #1
 80033d8:	d001      	beq.n	80033de <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	e1c7      	b.n	800376e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033de:	4b3b      	ldr	r3, [pc, #236]	@ (80034cc <HAL_RCC_OscConfig+0x240>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	691b      	ldr	r3, [r3, #16]
 80033ea:	00db      	lsls	r3, r3, #3
 80033ec:	4937      	ldr	r1, [pc, #220]	@ (80034cc <HAL_RCC_OscConfig+0x240>)
 80033ee:	4313      	orrs	r3, r2
 80033f0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033f2:	e03a      	b.n	800346a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	68db      	ldr	r3, [r3, #12]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d020      	beq.n	800343e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033fc:	4b34      	ldr	r3, [pc, #208]	@ (80034d0 <HAL_RCC_OscConfig+0x244>)
 80033fe:	2201      	movs	r2, #1
 8003400:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003402:	f7fe fa0f 	bl	8001824 <HAL_GetTick>
 8003406:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003408:	e008      	b.n	800341c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800340a:	f7fe fa0b 	bl	8001824 <HAL_GetTick>
 800340e:	4602      	mov	r2, r0
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	1ad3      	subs	r3, r2, r3
 8003414:	2b02      	cmp	r3, #2
 8003416:	d901      	bls.n	800341c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003418:	2303      	movs	r3, #3
 800341a:	e1a8      	b.n	800376e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800341c:	4b2b      	ldr	r3, [pc, #172]	@ (80034cc <HAL_RCC_OscConfig+0x240>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f003 0302 	and.w	r3, r3, #2
 8003424:	2b00      	cmp	r3, #0
 8003426:	d0f0      	beq.n	800340a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003428:	4b28      	ldr	r3, [pc, #160]	@ (80034cc <HAL_RCC_OscConfig+0x240>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	691b      	ldr	r3, [r3, #16]
 8003434:	00db      	lsls	r3, r3, #3
 8003436:	4925      	ldr	r1, [pc, #148]	@ (80034cc <HAL_RCC_OscConfig+0x240>)
 8003438:	4313      	orrs	r3, r2
 800343a:	600b      	str	r3, [r1, #0]
 800343c:	e015      	b.n	800346a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800343e:	4b24      	ldr	r3, [pc, #144]	@ (80034d0 <HAL_RCC_OscConfig+0x244>)
 8003440:	2200      	movs	r2, #0
 8003442:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003444:	f7fe f9ee 	bl	8001824 <HAL_GetTick>
 8003448:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800344a:	e008      	b.n	800345e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800344c:	f7fe f9ea 	bl	8001824 <HAL_GetTick>
 8003450:	4602      	mov	r2, r0
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	1ad3      	subs	r3, r2, r3
 8003456:	2b02      	cmp	r3, #2
 8003458:	d901      	bls.n	800345e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800345a:	2303      	movs	r3, #3
 800345c:	e187      	b.n	800376e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800345e:	4b1b      	ldr	r3, [pc, #108]	@ (80034cc <HAL_RCC_OscConfig+0x240>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f003 0302 	and.w	r3, r3, #2
 8003466:	2b00      	cmp	r3, #0
 8003468:	d1f0      	bne.n	800344c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f003 0308 	and.w	r3, r3, #8
 8003472:	2b00      	cmp	r3, #0
 8003474:	d036      	beq.n	80034e4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	695b      	ldr	r3, [r3, #20]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d016      	beq.n	80034ac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800347e:	4b15      	ldr	r3, [pc, #84]	@ (80034d4 <HAL_RCC_OscConfig+0x248>)
 8003480:	2201      	movs	r2, #1
 8003482:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003484:	f7fe f9ce 	bl	8001824 <HAL_GetTick>
 8003488:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800348a:	e008      	b.n	800349e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800348c:	f7fe f9ca 	bl	8001824 <HAL_GetTick>
 8003490:	4602      	mov	r2, r0
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	1ad3      	subs	r3, r2, r3
 8003496:	2b02      	cmp	r3, #2
 8003498:	d901      	bls.n	800349e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800349a:	2303      	movs	r3, #3
 800349c:	e167      	b.n	800376e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800349e:	4b0b      	ldr	r3, [pc, #44]	@ (80034cc <HAL_RCC_OscConfig+0x240>)
 80034a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034a2:	f003 0302 	and.w	r3, r3, #2
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d0f0      	beq.n	800348c <HAL_RCC_OscConfig+0x200>
 80034aa:	e01b      	b.n	80034e4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034ac:	4b09      	ldr	r3, [pc, #36]	@ (80034d4 <HAL_RCC_OscConfig+0x248>)
 80034ae:	2200      	movs	r2, #0
 80034b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034b2:	f7fe f9b7 	bl	8001824 <HAL_GetTick>
 80034b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034b8:	e00e      	b.n	80034d8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034ba:	f7fe f9b3 	bl	8001824 <HAL_GetTick>
 80034be:	4602      	mov	r2, r0
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	1ad3      	subs	r3, r2, r3
 80034c4:	2b02      	cmp	r3, #2
 80034c6:	d907      	bls.n	80034d8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80034c8:	2303      	movs	r3, #3
 80034ca:	e150      	b.n	800376e <HAL_RCC_OscConfig+0x4e2>
 80034cc:	40023800 	.word	0x40023800
 80034d0:	42470000 	.word	0x42470000
 80034d4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034d8:	4b88      	ldr	r3, [pc, #544]	@ (80036fc <HAL_RCC_OscConfig+0x470>)
 80034da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034dc:	f003 0302 	and.w	r3, r3, #2
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d1ea      	bne.n	80034ba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f003 0304 	and.w	r3, r3, #4
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	f000 8097 	beq.w	8003620 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034f2:	2300      	movs	r3, #0
 80034f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034f6:	4b81      	ldr	r3, [pc, #516]	@ (80036fc <HAL_RCC_OscConfig+0x470>)
 80034f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d10f      	bne.n	8003522 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003502:	2300      	movs	r3, #0
 8003504:	60bb      	str	r3, [r7, #8]
 8003506:	4b7d      	ldr	r3, [pc, #500]	@ (80036fc <HAL_RCC_OscConfig+0x470>)
 8003508:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800350a:	4a7c      	ldr	r2, [pc, #496]	@ (80036fc <HAL_RCC_OscConfig+0x470>)
 800350c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003510:	6413      	str	r3, [r2, #64]	@ 0x40
 8003512:	4b7a      	ldr	r3, [pc, #488]	@ (80036fc <HAL_RCC_OscConfig+0x470>)
 8003514:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003516:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800351a:	60bb      	str	r3, [r7, #8]
 800351c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800351e:	2301      	movs	r3, #1
 8003520:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003522:	4b77      	ldr	r3, [pc, #476]	@ (8003700 <HAL_RCC_OscConfig+0x474>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800352a:	2b00      	cmp	r3, #0
 800352c:	d118      	bne.n	8003560 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800352e:	4b74      	ldr	r3, [pc, #464]	@ (8003700 <HAL_RCC_OscConfig+0x474>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a73      	ldr	r2, [pc, #460]	@ (8003700 <HAL_RCC_OscConfig+0x474>)
 8003534:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003538:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800353a:	f7fe f973 	bl	8001824 <HAL_GetTick>
 800353e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003540:	e008      	b.n	8003554 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003542:	f7fe f96f 	bl	8001824 <HAL_GetTick>
 8003546:	4602      	mov	r2, r0
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	1ad3      	subs	r3, r2, r3
 800354c:	2b02      	cmp	r3, #2
 800354e:	d901      	bls.n	8003554 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003550:	2303      	movs	r3, #3
 8003552:	e10c      	b.n	800376e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003554:	4b6a      	ldr	r3, [pc, #424]	@ (8003700 <HAL_RCC_OscConfig+0x474>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800355c:	2b00      	cmp	r3, #0
 800355e:	d0f0      	beq.n	8003542 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	689b      	ldr	r3, [r3, #8]
 8003564:	2b01      	cmp	r3, #1
 8003566:	d106      	bne.n	8003576 <HAL_RCC_OscConfig+0x2ea>
 8003568:	4b64      	ldr	r3, [pc, #400]	@ (80036fc <HAL_RCC_OscConfig+0x470>)
 800356a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800356c:	4a63      	ldr	r2, [pc, #396]	@ (80036fc <HAL_RCC_OscConfig+0x470>)
 800356e:	f043 0301 	orr.w	r3, r3, #1
 8003572:	6713      	str	r3, [r2, #112]	@ 0x70
 8003574:	e01c      	b.n	80035b0 <HAL_RCC_OscConfig+0x324>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	2b05      	cmp	r3, #5
 800357c:	d10c      	bne.n	8003598 <HAL_RCC_OscConfig+0x30c>
 800357e:	4b5f      	ldr	r3, [pc, #380]	@ (80036fc <HAL_RCC_OscConfig+0x470>)
 8003580:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003582:	4a5e      	ldr	r2, [pc, #376]	@ (80036fc <HAL_RCC_OscConfig+0x470>)
 8003584:	f043 0304 	orr.w	r3, r3, #4
 8003588:	6713      	str	r3, [r2, #112]	@ 0x70
 800358a:	4b5c      	ldr	r3, [pc, #368]	@ (80036fc <HAL_RCC_OscConfig+0x470>)
 800358c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800358e:	4a5b      	ldr	r2, [pc, #364]	@ (80036fc <HAL_RCC_OscConfig+0x470>)
 8003590:	f043 0301 	orr.w	r3, r3, #1
 8003594:	6713      	str	r3, [r2, #112]	@ 0x70
 8003596:	e00b      	b.n	80035b0 <HAL_RCC_OscConfig+0x324>
 8003598:	4b58      	ldr	r3, [pc, #352]	@ (80036fc <HAL_RCC_OscConfig+0x470>)
 800359a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800359c:	4a57      	ldr	r2, [pc, #348]	@ (80036fc <HAL_RCC_OscConfig+0x470>)
 800359e:	f023 0301 	bic.w	r3, r3, #1
 80035a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80035a4:	4b55      	ldr	r3, [pc, #340]	@ (80036fc <HAL_RCC_OscConfig+0x470>)
 80035a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035a8:	4a54      	ldr	r2, [pc, #336]	@ (80036fc <HAL_RCC_OscConfig+0x470>)
 80035aa:	f023 0304 	bic.w	r3, r3, #4
 80035ae:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d015      	beq.n	80035e4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035b8:	f7fe f934 	bl	8001824 <HAL_GetTick>
 80035bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035be:	e00a      	b.n	80035d6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035c0:	f7fe f930 	bl	8001824 <HAL_GetTick>
 80035c4:	4602      	mov	r2, r0
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	1ad3      	subs	r3, r2, r3
 80035ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d901      	bls.n	80035d6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80035d2:	2303      	movs	r3, #3
 80035d4:	e0cb      	b.n	800376e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035d6:	4b49      	ldr	r3, [pc, #292]	@ (80036fc <HAL_RCC_OscConfig+0x470>)
 80035d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035da:	f003 0302 	and.w	r3, r3, #2
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d0ee      	beq.n	80035c0 <HAL_RCC_OscConfig+0x334>
 80035e2:	e014      	b.n	800360e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035e4:	f7fe f91e 	bl	8001824 <HAL_GetTick>
 80035e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035ea:	e00a      	b.n	8003602 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035ec:	f7fe f91a 	bl	8001824 <HAL_GetTick>
 80035f0:	4602      	mov	r2, r0
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	1ad3      	subs	r3, r2, r3
 80035f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d901      	bls.n	8003602 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80035fe:	2303      	movs	r3, #3
 8003600:	e0b5      	b.n	800376e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003602:	4b3e      	ldr	r3, [pc, #248]	@ (80036fc <HAL_RCC_OscConfig+0x470>)
 8003604:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003606:	f003 0302 	and.w	r3, r3, #2
 800360a:	2b00      	cmp	r3, #0
 800360c:	d1ee      	bne.n	80035ec <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800360e:	7dfb      	ldrb	r3, [r7, #23]
 8003610:	2b01      	cmp	r3, #1
 8003612:	d105      	bne.n	8003620 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003614:	4b39      	ldr	r3, [pc, #228]	@ (80036fc <HAL_RCC_OscConfig+0x470>)
 8003616:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003618:	4a38      	ldr	r2, [pc, #224]	@ (80036fc <HAL_RCC_OscConfig+0x470>)
 800361a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800361e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	699b      	ldr	r3, [r3, #24]
 8003624:	2b00      	cmp	r3, #0
 8003626:	f000 80a1 	beq.w	800376c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800362a:	4b34      	ldr	r3, [pc, #208]	@ (80036fc <HAL_RCC_OscConfig+0x470>)
 800362c:	689b      	ldr	r3, [r3, #8]
 800362e:	f003 030c 	and.w	r3, r3, #12
 8003632:	2b08      	cmp	r3, #8
 8003634:	d05c      	beq.n	80036f0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	699b      	ldr	r3, [r3, #24]
 800363a:	2b02      	cmp	r3, #2
 800363c:	d141      	bne.n	80036c2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800363e:	4b31      	ldr	r3, [pc, #196]	@ (8003704 <HAL_RCC_OscConfig+0x478>)
 8003640:	2200      	movs	r2, #0
 8003642:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003644:	f7fe f8ee 	bl	8001824 <HAL_GetTick>
 8003648:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800364a:	e008      	b.n	800365e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800364c:	f7fe f8ea 	bl	8001824 <HAL_GetTick>
 8003650:	4602      	mov	r2, r0
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	1ad3      	subs	r3, r2, r3
 8003656:	2b02      	cmp	r3, #2
 8003658:	d901      	bls.n	800365e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800365a:	2303      	movs	r3, #3
 800365c:	e087      	b.n	800376e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800365e:	4b27      	ldr	r3, [pc, #156]	@ (80036fc <HAL_RCC_OscConfig+0x470>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003666:	2b00      	cmp	r3, #0
 8003668:	d1f0      	bne.n	800364c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	69da      	ldr	r2, [r3, #28]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6a1b      	ldr	r3, [r3, #32]
 8003672:	431a      	orrs	r2, r3
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003678:	019b      	lsls	r3, r3, #6
 800367a:	431a      	orrs	r2, r3
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003680:	085b      	lsrs	r3, r3, #1
 8003682:	3b01      	subs	r3, #1
 8003684:	041b      	lsls	r3, r3, #16
 8003686:	431a      	orrs	r2, r3
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800368c:	061b      	lsls	r3, r3, #24
 800368e:	491b      	ldr	r1, [pc, #108]	@ (80036fc <HAL_RCC_OscConfig+0x470>)
 8003690:	4313      	orrs	r3, r2
 8003692:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003694:	4b1b      	ldr	r3, [pc, #108]	@ (8003704 <HAL_RCC_OscConfig+0x478>)
 8003696:	2201      	movs	r2, #1
 8003698:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800369a:	f7fe f8c3 	bl	8001824 <HAL_GetTick>
 800369e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036a0:	e008      	b.n	80036b4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036a2:	f7fe f8bf 	bl	8001824 <HAL_GetTick>
 80036a6:	4602      	mov	r2, r0
 80036a8:	693b      	ldr	r3, [r7, #16]
 80036aa:	1ad3      	subs	r3, r2, r3
 80036ac:	2b02      	cmp	r3, #2
 80036ae:	d901      	bls.n	80036b4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80036b0:	2303      	movs	r3, #3
 80036b2:	e05c      	b.n	800376e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036b4:	4b11      	ldr	r3, [pc, #68]	@ (80036fc <HAL_RCC_OscConfig+0x470>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d0f0      	beq.n	80036a2 <HAL_RCC_OscConfig+0x416>
 80036c0:	e054      	b.n	800376c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036c2:	4b10      	ldr	r3, [pc, #64]	@ (8003704 <HAL_RCC_OscConfig+0x478>)
 80036c4:	2200      	movs	r2, #0
 80036c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036c8:	f7fe f8ac 	bl	8001824 <HAL_GetTick>
 80036cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036ce:	e008      	b.n	80036e2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036d0:	f7fe f8a8 	bl	8001824 <HAL_GetTick>
 80036d4:	4602      	mov	r2, r0
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	1ad3      	subs	r3, r2, r3
 80036da:	2b02      	cmp	r3, #2
 80036dc:	d901      	bls.n	80036e2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80036de:	2303      	movs	r3, #3
 80036e0:	e045      	b.n	800376e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036e2:	4b06      	ldr	r3, [pc, #24]	@ (80036fc <HAL_RCC_OscConfig+0x470>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d1f0      	bne.n	80036d0 <HAL_RCC_OscConfig+0x444>
 80036ee:	e03d      	b.n	800376c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	699b      	ldr	r3, [r3, #24]
 80036f4:	2b01      	cmp	r3, #1
 80036f6:	d107      	bne.n	8003708 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80036f8:	2301      	movs	r3, #1
 80036fa:	e038      	b.n	800376e <HAL_RCC_OscConfig+0x4e2>
 80036fc:	40023800 	.word	0x40023800
 8003700:	40007000 	.word	0x40007000
 8003704:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003708:	4b1b      	ldr	r3, [pc, #108]	@ (8003778 <HAL_RCC_OscConfig+0x4ec>)
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	699b      	ldr	r3, [r3, #24]
 8003712:	2b01      	cmp	r3, #1
 8003714:	d028      	beq.n	8003768 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003720:	429a      	cmp	r2, r3
 8003722:	d121      	bne.n	8003768 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800372e:	429a      	cmp	r2, r3
 8003730:	d11a      	bne.n	8003768 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003732:	68fa      	ldr	r2, [r7, #12]
 8003734:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003738:	4013      	ands	r3, r2
 800373a:	687a      	ldr	r2, [r7, #4]
 800373c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800373e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003740:	4293      	cmp	r3, r2
 8003742:	d111      	bne.n	8003768 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800374e:	085b      	lsrs	r3, r3, #1
 8003750:	3b01      	subs	r3, #1
 8003752:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003754:	429a      	cmp	r2, r3
 8003756:	d107      	bne.n	8003768 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003762:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003764:	429a      	cmp	r2, r3
 8003766:	d001      	beq.n	800376c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003768:	2301      	movs	r3, #1
 800376a:	e000      	b.n	800376e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800376c:	2300      	movs	r3, #0
}
 800376e:	4618      	mov	r0, r3
 8003770:	3718      	adds	r7, #24
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}
 8003776:	bf00      	nop
 8003778:	40023800 	.word	0x40023800

0800377c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b084      	sub	sp, #16
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
 8003784:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d101      	bne.n	8003790 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800378c:	2301      	movs	r3, #1
 800378e:	e0cc      	b.n	800392a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003790:	4b68      	ldr	r3, [pc, #416]	@ (8003934 <HAL_RCC_ClockConfig+0x1b8>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f003 030f 	and.w	r3, r3, #15
 8003798:	683a      	ldr	r2, [r7, #0]
 800379a:	429a      	cmp	r2, r3
 800379c:	d90c      	bls.n	80037b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800379e:	4b65      	ldr	r3, [pc, #404]	@ (8003934 <HAL_RCC_ClockConfig+0x1b8>)
 80037a0:	683a      	ldr	r2, [r7, #0]
 80037a2:	b2d2      	uxtb	r2, r2
 80037a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037a6:	4b63      	ldr	r3, [pc, #396]	@ (8003934 <HAL_RCC_ClockConfig+0x1b8>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f003 030f 	and.w	r3, r3, #15
 80037ae:	683a      	ldr	r2, [r7, #0]
 80037b0:	429a      	cmp	r2, r3
 80037b2:	d001      	beq.n	80037b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	e0b8      	b.n	800392a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f003 0302 	and.w	r3, r3, #2
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d020      	beq.n	8003806 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f003 0304 	and.w	r3, r3, #4
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d005      	beq.n	80037dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80037d0:	4b59      	ldr	r3, [pc, #356]	@ (8003938 <HAL_RCC_ClockConfig+0x1bc>)
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	4a58      	ldr	r2, [pc, #352]	@ (8003938 <HAL_RCC_ClockConfig+0x1bc>)
 80037d6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80037da:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f003 0308 	and.w	r3, r3, #8
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d005      	beq.n	80037f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80037e8:	4b53      	ldr	r3, [pc, #332]	@ (8003938 <HAL_RCC_ClockConfig+0x1bc>)
 80037ea:	689b      	ldr	r3, [r3, #8]
 80037ec:	4a52      	ldr	r2, [pc, #328]	@ (8003938 <HAL_RCC_ClockConfig+0x1bc>)
 80037ee:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80037f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037f4:	4b50      	ldr	r3, [pc, #320]	@ (8003938 <HAL_RCC_ClockConfig+0x1bc>)
 80037f6:	689b      	ldr	r3, [r3, #8]
 80037f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	494d      	ldr	r1, [pc, #308]	@ (8003938 <HAL_RCC_ClockConfig+0x1bc>)
 8003802:	4313      	orrs	r3, r2
 8003804:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f003 0301 	and.w	r3, r3, #1
 800380e:	2b00      	cmp	r3, #0
 8003810:	d044      	beq.n	800389c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	2b01      	cmp	r3, #1
 8003818:	d107      	bne.n	800382a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800381a:	4b47      	ldr	r3, [pc, #284]	@ (8003938 <HAL_RCC_ClockConfig+0x1bc>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003822:	2b00      	cmp	r3, #0
 8003824:	d119      	bne.n	800385a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	e07f      	b.n	800392a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	2b02      	cmp	r3, #2
 8003830:	d003      	beq.n	800383a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003836:	2b03      	cmp	r3, #3
 8003838:	d107      	bne.n	800384a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800383a:	4b3f      	ldr	r3, [pc, #252]	@ (8003938 <HAL_RCC_ClockConfig+0x1bc>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003842:	2b00      	cmp	r3, #0
 8003844:	d109      	bne.n	800385a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	e06f      	b.n	800392a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800384a:	4b3b      	ldr	r3, [pc, #236]	@ (8003938 <HAL_RCC_ClockConfig+0x1bc>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f003 0302 	and.w	r3, r3, #2
 8003852:	2b00      	cmp	r3, #0
 8003854:	d101      	bne.n	800385a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	e067      	b.n	800392a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800385a:	4b37      	ldr	r3, [pc, #220]	@ (8003938 <HAL_RCC_ClockConfig+0x1bc>)
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	f023 0203 	bic.w	r2, r3, #3
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	4934      	ldr	r1, [pc, #208]	@ (8003938 <HAL_RCC_ClockConfig+0x1bc>)
 8003868:	4313      	orrs	r3, r2
 800386a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800386c:	f7fd ffda 	bl	8001824 <HAL_GetTick>
 8003870:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003872:	e00a      	b.n	800388a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003874:	f7fd ffd6 	bl	8001824 <HAL_GetTick>
 8003878:	4602      	mov	r2, r0
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	1ad3      	subs	r3, r2, r3
 800387e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003882:	4293      	cmp	r3, r2
 8003884:	d901      	bls.n	800388a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003886:	2303      	movs	r3, #3
 8003888:	e04f      	b.n	800392a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800388a:	4b2b      	ldr	r3, [pc, #172]	@ (8003938 <HAL_RCC_ClockConfig+0x1bc>)
 800388c:	689b      	ldr	r3, [r3, #8]
 800388e:	f003 020c 	and.w	r2, r3, #12
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	009b      	lsls	r3, r3, #2
 8003898:	429a      	cmp	r2, r3
 800389a:	d1eb      	bne.n	8003874 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800389c:	4b25      	ldr	r3, [pc, #148]	@ (8003934 <HAL_RCC_ClockConfig+0x1b8>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f003 030f 	and.w	r3, r3, #15
 80038a4:	683a      	ldr	r2, [r7, #0]
 80038a6:	429a      	cmp	r2, r3
 80038a8:	d20c      	bcs.n	80038c4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038aa:	4b22      	ldr	r3, [pc, #136]	@ (8003934 <HAL_RCC_ClockConfig+0x1b8>)
 80038ac:	683a      	ldr	r2, [r7, #0]
 80038ae:	b2d2      	uxtb	r2, r2
 80038b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038b2:	4b20      	ldr	r3, [pc, #128]	@ (8003934 <HAL_RCC_ClockConfig+0x1b8>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f003 030f 	and.w	r3, r3, #15
 80038ba:	683a      	ldr	r2, [r7, #0]
 80038bc:	429a      	cmp	r2, r3
 80038be:	d001      	beq.n	80038c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80038c0:	2301      	movs	r3, #1
 80038c2:	e032      	b.n	800392a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f003 0304 	and.w	r3, r3, #4
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d008      	beq.n	80038e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038d0:	4b19      	ldr	r3, [pc, #100]	@ (8003938 <HAL_RCC_ClockConfig+0x1bc>)
 80038d2:	689b      	ldr	r3, [r3, #8]
 80038d4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	68db      	ldr	r3, [r3, #12]
 80038dc:	4916      	ldr	r1, [pc, #88]	@ (8003938 <HAL_RCC_ClockConfig+0x1bc>)
 80038de:	4313      	orrs	r3, r2
 80038e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f003 0308 	and.w	r3, r3, #8
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d009      	beq.n	8003902 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80038ee:	4b12      	ldr	r3, [pc, #72]	@ (8003938 <HAL_RCC_ClockConfig+0x1bc>)
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	691b      	ldr	r3, [r3, #16]
 80038fa:	00db      	lsls	r3, r3, #3
 80038fc:	490e      	ldr	r1, [pc, #56]	@ (8003938 <HAL_RCC_ClockConfig+0x1bc>)
 80038fe:	4313      	orrs	r3, r2
 8003900:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003902:	f000 f821 	bl	8003948 <HAL_RCC_GetSysClockFreq>
 8003906:	4602      	mov	r2, r0
 8003908:	4b0b      	ldr	r3, [pc, #44]	@ (8003938 <HAL_RCC_ClockConfig+0x1bc>)
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	091b      	lsrs	r3, r3, #4
 800390e:	f003 030f 	and.w	r3, r3, #15
 8003912:	490a      	ldr	r1, [pc, #40]	@ (800393c <HAL_RCC_ClockConfig+0x1c0>)
 8003914:	5ccb      	ldrb	r3, [r1, r3]
 8003916:	fa22 f303 	lsr.w	r3, r2, r3
 800391a:	4a09      	ldr	r2, [pc, #36]	@ (8003940 <HAL_RCC_ClockConfig+0x1c4>)
 800391c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800391e:	4b09      	ldr	r3, [pc, #36]	@ (8003944 <HAL_RCC_ClockConfig+0x1c8>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4618      	mov	r0, r3
 8003924:	f7fd fad8 	bl	8000ed8 <HAL_InitTick>

  return HAL_OK;
 8003928:	2300      	movs	r3, #0
}
 800392a:	4618      	mov	r0, r3
 800392c:	3710      	adds	r7, #16
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}
 8003932:	bf00      	nop
 8003934:	40023c00 	.word	0x40023c00
 8003938:	40023800 	.word	0x40023800
 800393c:	0801b25c 	.word	0x0801b25c
 8003940:	20000100 	.word	0x20000100
 8003944:	20000104 	.word	0x20000104

08003948 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003948:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800394c:	b094      	sub	sp, #80	@ 0x50
 800394e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003950:	2300      	movs	r3, #0
 8003952:	647b      	str	r3, [r7, #68]	@ 0x44
 8003954:	2300      	movs	r3, #0
 8003956:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003958:	2300      	movs	r3, #0
 800395a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800395c:	2300      	movs	r3, #0
 800395e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003960:	4b79      	ldr	r3, [pc, #484]	@ (8003b48 <HAL_RCC_GetSysClockFreq+0x200>)
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	f003 030c 	and.w	r3, r3, #12
 8003968:	2b08      	cmp	r3, #8
 800396a:	d00d      	beq.n	8003988 <HAL_RCC_GetSysClockFreq+0x40>
 800396c:	2b08      	cmp	r3, #8
 800396e:	f200 80e1 	bhi.w	8003b34 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003972:	2b00      	cmp	r3, #0
 8003974:	d002      	beq.n	800397c <HAL_RCC_GetSysClockFreq+0x34>
 8003976:	2b04      	cmp	r3, #4
 8003978:	d003      	beq.n	8003982 <HAL_RCC_GetSysClockFreq+0x3a>
 800397a:	e0db      	b.n	8003b34 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800397c:	4b73      	ldr	r3, [pc, #460]	@ (8003b4c <HAL_RCC_GetSysClockFreq+0x204>)
 800397e:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8003980:	e0db      	b.n	8003b3a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003982:	4b73      	ldr	r3, [pc, #460]	@ (8003b50 <HAL_RCC_GetSysClockFreq+0x208>)
 8003984:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003986:	e0d8      	b.n	8003b3a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003988:	4b6f      	ldr	r3, [pc, #444]	@ (8003b48 <HAL_RCC_GetSysClockFreq+0x200>)
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003990:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003992:	4b6d      	ldr	r3, [pc, #436]	@ (8003b48 <HAL_RCC_GetSysClockFreq+0x200>)
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800399a:	2b00      	cmp	r3, #0
 800399c:	d063      	beq.n	8003a66 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800399e:	4b6a      	ldr	r3, [pc, #424]	@ (8003b48 <HAL_RCC_GetSysClockFreq+0x200>)
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	099b      	lsrs	r3, r3, #6
 80039a4:	2200      	movs	r2, #0
 80039a6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80039a8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80039aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039b0:	633b      	str	r3, [r7, #48]	@ 0x30
 80039b2:	2300      	movs	r3, #0
 80039b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80039b6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80039ba:	4622      	mov	r2, r4
 80039bc:	462b      	mov	r3, r5
 80039be:	f04f 0000 	mov.w	r0, #0
 80039c2:	f04f 0100 	mov.w	r1, #0
 80039c6:	0159      	lsls	r1, r3, #5
 80039c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80039cc:	0150      	lsls	r0, r2, #5
 80039ce:	4602      	mov	r2, r0
 80039d0:	460b      	mov	r3, r1
 80039d2:	4621      	mov	r1, r4
 80039d4:	1a51      	subs	r1, r2, r1
 80039d6:	6139      	str	r1, [r7, #16]
 80039d8:	4629      	mov	r1, r5
 80039da:	eb63 0301 	sbc.w	r3, r3, r1
 80039de:	617b      	str	r3, [r7, #20]
 80039e0:	f04f 0200 	mov.w	r2, #0
 80039e4:	f04f 0300 	mov.w	r3, #0
 80039e8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80039ec:	4659      	mov	r1, fp
 80039ee:	018b      	lsls	r3, r1, #6
 80039f0:	4651      	mov	r1, sl
 80039f2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80039f6:	4651      	mov	r1, sl
 80039f8:	018a      	lsls	r2, r1, #6
 80039fa:	4651      	mov	r1, sl
 80039fc:	ebb2 0801 	subs.w	r8, r2, r1
 8003a00:	4659      	mov	r1, fp
 8003a02:	eb63 0901 	sbc.w	r9, r3, r1
 8003a06:	f04f 0200 	mov.w	r2, #0
 8003a0a:	f04f 0300 	mov.w	r3, #0
 8003a0e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003a12:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003a16:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003a1a:	4690      	mov	r8, r2
 8003a1c:	4699      	mov	r9, r3
 8003a1e:	4623      	mov	r3, r4
 8003a20:	eb18 0303 	adds.w	r3, r8, r3
 8003a24:	60bb      	str	r3, [r7, #8]
 8003a26:	462b      	mov	r3, r5
 8003a28:	eb49 0303 	adc.w	r3, r9, r3
 8003a2c:	60fb      	str	r3, [r7, #12]
 8003a2e:	f04f 0200 	mov.w	r2, #0
 8003a32:	f04f 0300 	mov.w	r3, #0
 8003a36:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003a3a:	4629      	mov	r1, r5
 8003a3c:	024b      	lsls	r3, r1, #9
 8003a3e:	4621      	mov	r1, r4
 8003a40:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003a44:	4621      	mov	r1, r4
 8003a46:	024a      	lsls	r2, r1, #9
 8003a48:	4610      	mov	r0, r2
 8003a4a:	4619      	mov	r1, r3
 8003a4c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003a4e:	2200      	movs	r2, #0
 8003a50:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003a52:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003a54:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003a58:	f7fc fc22 	bl	80002a0 <__aeabi_uldivmod>
 8003a5c:	4602      	mov	r2, r0
 8003a5e:	460b      	mov	r3, r1
 8003a60:	4613      	mov	r3, r2
 8003a62:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003a64:	e058      	b.n	8003b18 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a66:	4b38      	ldr	r3, [pc, #224]	@ (8003b48 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	099b      	lsrs	r3, r3, #6
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	4618      	mov	r0, r3
 8003a70:	4611      	mov	r1, r2
 8003a72:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003a76:	623b      	str	r3, [r7, #32]
 8003a78:	2300      	movs	r3, #0
 8003a7a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a7c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003a80:	4642      	mov	r2, r8
 8003a82:	464b      	mov	r3, r9
 8003a84:	f04f 0000 	mov.w	r0, #0
 8003a88:	f04f 0100 	mov.w	r1, #0
 8003a8c:	0159      	lsls	r1, r3, #5
 8003a8e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a92:	0150      	lsls	r0, r2, #5
 8003a94:	4602      	mov	r2, r0
 8003a96:	460b      	mov	r3, r1
 8003a98:	4641      	mov	r1, r8
 8003a9a:	ebb2 0a01 	subs.w	sl, r2, r1
 8003a9e:	4649      	mov	r1, r9
 8003aa0:	eb63 0b01 	sbc.w	fp, r3, r1
 8003aa4:	f04f 0200 	mov.w	r2, #0
 8003aa8:	f04f 0300 	mov.w	r3, #0
 8003aac:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003ab0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003ab4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003ab8:	ebb2 040a 	subs.w	r4, r2, sl
 8003abc:	eb63 050b 	sbc.w	r5, r3, fp
 8003ac0:	f04f 0200 	mov.w	r2, #0
 8003ac4:	f04f 0300 	mov.w	r3, #0
 8003ac8:	00eb      	lsls	r3, r5, #3
 8003aca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003ace:	00e2      	lsls	r2, r4, #3
 8003ad0:	4614      	mov	r4, r2
 8003ad2:	461d      	mov	r5, r3
 8003ad4:	4643      	mov	r3, r8
 8003ad6:	18e3      	adds	r3, r4, r3
 8003ad8:	603b      	str	r3, [r7, #0]
 8003ada:	464b      	mov	r3, r9
 8003adc:	eb45 0303 	adc.w	r3, r5, r3
 8003ae0:	607b      	str	r3, [r7, #4]
 8003ae2:	f04f 0200 	mov.w	r2, #0
 8003ae6:	f04f 0300 	mov.w	r3, #0
 8003aea:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003aee:	4629      	mov	r1, r5
 8003af0:	028b      	lsls	r3, r1, #10
 8003af2:	4621      	mov	r1, r4
 8003af4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003af8:	4621      	mov	r1, r4
 8003afa:	028a      	lsls	r2, r1, #10
 8003afc:	4610      	mov	r0, r2
 8003afe:	4619      	mov	r1, r3
 8003b00:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003b02:	2200      	movs	r2, #0
 8003b04:	61bb      	str	r3, [r7, #24]
 8003b06:	61fa      	str	r2, [r7, #28]
 8003b08:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b0c:	f7fc fbc8 	bl	80002a0 <__aeabi_uldivmod>
 8003b10:	4602      	mov	r2, r0
 8003b12:	460b      	mov	r3, r1
 8003b14:	4613      	mov	r3, r2
 8003b16:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003b18:	4b0b      	ldr	r3, [pc, #44]	@ (8003b48 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	0c1b      	lsrs	r3, r3, #16
 8003b1e:	f003 0303 	and.w	r3, r3, #3
 8003b22:	3301      	adds	r3, #1
 8003b24:	005b      	lsls	r3, r3, #1
 8003b26:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8003b28:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003b2a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003b2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b30:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003b32:	e002      	b.n	8003b3a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003b34:	4b05      	ldr	r3, [pc, #20]	@ (8003b4c <HAL_RCC_GetSysClockFreq+0x204>)
 8003b36:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003b38:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b3a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	3750      	adds	r7, #80	@ 0x50
 8003b40:	46bd      	mov	sp, r7
 8003b42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b46:	bf00      	nop
 8003b48:	40023800 	.word	0x40023800
 8003b4c:	00f42400 	.word	0x00f42400
 8003b50:	007a1200 	.word	0x007a1200

08003b54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b54:	b480      	push	{r7}
 8003b56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b58:	4b03      	ldr	r3, [pc, #12]	@ (8003b68 <HAL_RCC_GetHCLKFreq+0x14>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b64:	4770      	bx	lr
 8003b66:	bf00      	nop
 8003b68:	20000100 	.word	0x20000100

08003b6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003b70:	f7ff fff0 	bl	8003b54 <HAL_RCC_GetHCLKFreq>
 8003b74:	4602      	mov	r2, r0
 8003b76:	4b05      	ldr	r3, [pc, #20]	@ (8003b8c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b78:	689b      	ldr	r3, [r3, #8]
 8003b7a:	0a9b      	lsrs	r3, r3, #10
 8003b7c:	f003 0307 	and.w	r3, r3, #7
 8003b80:	4903      	ldr	r1, [pc, #12]	@ (8003b90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b82:	5ccb      	ldrb	r3, [r1, r3]
 8003b84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b88:	4618      	mov	r0, r3
 8003b8a:	bd80      	pop	{r7, pc}
 8003b8c:	40023800 	.word	0x40023800
 8003b90:	0801b26c 	.word	0x0801b26c

08003b94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003b98:	f7ff ffdc 	bl	8003b54 <HAL_RCC_GetHCLKFreq>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	4b05      	ldr	r3, [pc, #20]	@ (8003bb4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	0b5b      	lsrs	r3, r3, #13
 8003ba4:	f003 0307 	and.w	r3, r3, #7
 8003ba8:	4903      	ldr	r1, [pc, #12]	@ (8003bb8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003baa:	5ccb      	ldrb	r3, [r1, r3]
 8003bac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	bd80      	pop	{r7, pc}
 8003bb4:	40023800 	.word	0x40023800
 8003bb8:	0801b26c 	.word	0x0801b26c

08003bbc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b083      	sub	sp, #12
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
 8003bc4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	220f      	movs	r2, #15
 8003bca:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003bcc:	4b12      	ldr	r3, [pc, #72]	@ (8003c18 <HAL_RCC_GetClockConfig+0x5c>)
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	f003 0203 	and.w	r2, r3, #3
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003bd8:	4b0f      	ldr	r3, [pc, #60]	@ (8003c18 <HAL_RCC_GetClockConfig+0x5c>)
 8003bda:	689b      	ldr	r3, [r3, #8]
 8003bdc:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003be4:	4b0c      	ldr	r3, [pc, #48]	@ (8003c18 <HAL_RCC_GetClockConfig+0x5c>)
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003bf0:	4b09      	ldr	r3, [pc, #36]	@ (8003c18 <HAL_RCC_GetClockConfig+0x5c>)
 8003bf2:	689b      	ldr	r3, [r3, #8]
 8003bf4:	08db      	lsrs	r3, r3, #3
 8003bf6:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003bfe:	4b07      	ldr	r3, [pc, #28]	@ (8003c1c <HAL_RCC_GetClockConfig+0x60>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f003 020f 	and.w	r2, r3, #15
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	601a      	str	r2, [r3, #0]
}
 8003c0a:	bf00      	nop
 8003c0c:	370c      	adds	r7, #12
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c14:	4770      	bx	lr
 8003c16:	bf00      	nop
 8003c18:	40023800 	.word	0x40023800
 8003c1c:	40023c00 	.word	0x40023c00

08003c20 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b082      	sub	sp, #8
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d101      	bne.n	8003c32 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	e041      	b.n	8003cb6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c38:	b2db      	uxtb	r3, r3
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d106      	bne.n	8003c4c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2200      	movs	r2, #0
 8003c42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c46:	6878      	ldr	r0, [r7, #4]
 8003c48:	f000 f839 	bl	8003cbe <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2202      	movs	r2, #2
 8003c50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681a      	ldr	r2, [r3, #0]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	3304      	adds	r3, #4
 8003c5c:	4619      	mov	r1, r3
 8003c5e:	4610      	mov	r0, r2
 8003c60:	f000 f9c0 	bl	8003fe4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2201      	movs	r2, #1
 8003c68:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2201      	movs	r2, #1
 8003c70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2201      	movs	r2, #1
 8003c78:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2201      	movs	r2, #1
 8003c80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2201      	movs	r2, #1
 8003c88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2201      	movs	r2, #1
 8003c90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2201      	movs	r2, #1
 8003c98:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2201      	movs	r2, #1
 8003cb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003cb4:	2300      	movs	r3, #0
}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	3708      	adds	r7, #8
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd80      	pop	{r7, pc}

08003cbe <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003cbe:	b480      	push	{r7}
 8003cc0:	b083      	sub	sp, #12
 8003cc2:	af00      	add	r7, sp, #0
 8003cc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003cc6:	bf00      	nop
 8003cc8:	370c      	adds	r7, #12
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd0:	4770      	bx	lr
	...

08003cd4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b085      	sub	sp, #20
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ce2:	b2db      	uxtb	r3, r3
 8003ce4:	2b01      	cmp	r3, #1
 8003ce6:	d001      	beq.n	8003cec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003ce8:	2301      	movs	r3, #1
 8003cea:	e04e      	b.n	8003d8a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2202      	movs	r2, #2
 8003cf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	68da      	ldr	r2, [r3, #12]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f042 0201 	orr.w	r2, r2, #1
 8003d02:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a23      	ldr	r2, [pc, #140]	@ (8003d98 <HAL_TIM_Base_Start_IT+0xc4>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d022      	beq.n	8003d54 <HAL_TIM_Base_Start_IT+0x80>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d16:	d01d      	beq.n	8003d54 <HAL_TIM_Base_Start_IT+0x80>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a1f      	ldr	r2, [pc, #124]	@ (8003d9c <HAL_TIM_Base_Start_IT+0xc8>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d018      	beq.n	8003d54 <HAL_TIM_Base_Start_IT+0x80>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a1e      	ldr	r2, [pc, #120]	@ (8003da0 <HAL_TIM_Base_Start_IT+0xcc>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d013      	beq.n	8003d54 <HAL_TIM_Base_Start_IT+0x80>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a1c      	ldr	r2, [pc, #112]	@ (8003da4 <HAL_TIM_Base_Start_IT+0xd0>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d00e      	beq.n	8003d54 <HAL_TIM_Base_Start_IT+0x80>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a1b      	ldr	r2, [pc, #108]	@ (8003da8 <HAL_TIM_Base_Start_IT+0xd4>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d009      	beq.n	8003d54 <HAL_TIM_Base_Start_IT+0x80>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a19      	ldr	r2, [pc, #100]	@ (8003dac <HAL_TIM_Base_Start_IT+0xd8>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d004      	beq.n	8003d54 <HAL_TIM_Base_Start_IT+0x80>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a18      	ldr	r2, [pc, #96]	@ (8003db0 <HAL_TIM_Base_Start_IT+0xdc>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d111      	bne.n	8003d78 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	689b      	ldr	r3, [r3, #8]
 8003d5a:	f003 0307 	and.w	r3, r3, #7
 8003d5e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	2b06      	cmp	r3, #6
 8003d64:	d010      	beq.n	8003d88 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	681a      	ldr	r2, [r3, #0]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f042 0201 	orr.w	r2, r2, #1
 8003d74:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d76:	e007      	b.n	8003d88 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	681a      	ldr	r2, [r3, #0]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f042 0201 	orr.w	r2, r2, #1
 8003d86:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003d88:	2300      	movs	r3, #0
}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	3714      	adds	r7, #20
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d94:	4770      	bx	lr
 8003d96:	bf00      	nop
 8003d98:	40010000 	.word	0x40010000
 8003d9c:	40000400 	.word	0x40000400
 8003da0:	40000800 	.word	0x40000800
 8003da4:	40000c00 	.word	0x40000c00
 8003da8:	40010400 	.word	0x40010400
 8003dac:	40014000 	.word	0x40014000
 8003db0:	40001800 	.word	0x40001800

08003db4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b084      	sub	sp, #16
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	68db      	ldr	r3, [r3, #12]
 8003dc2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	691b      	ldr	r3, [r3, #16]
 8003dca:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	f003 0302 	and.w	r3, r3, #2
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d020      	beq.n	8003e18 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	f003 0302 	and.w	r3, r3, #2
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d01b      	beq.n	8003e18 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f06f 0202 	mvn.w	r2, #2
 8003de8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2201      	movs	r2, #1
 8003dee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	699b      	ldr	r3, [r3, #24]
 8003df6:	f003 0303 	and.w	r3, r3, #3
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d003      	beq.n	8003e06 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003dfe:	6878      	ldr	r0, [r7, #4]
 8003e00:	f000 f8d2 	bl	8003fa8 <HAL_TIM_IC_CaptureCallback>
 8003e04:	e005      	b.n	8003e12 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e06:	6878      	ldr	r0, [r7, #4]
 8003e08:	f000 f8c4 	bl	8003f94 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e0c:	6878      	ldr	r0, [r7, #4]
 8003e0e:	f000 f8d5 	bl	8003fbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2200      	movs	r2, #0
 8003e16:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	f003 0304 	and.w	r3, r3, #4
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d020      	beq.n	8003e64 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	f003 0304 	and.w	r3, r3, #4
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d01b      	beq.n	8003e64 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f06f 0204 	mvn.w	r2, #4
 8003e34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2202      	movs	r2, #2
 8003e3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	699b      	ldr	r3, [r3, #24]
 8003e42:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d003      	beq.n	8003e52 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e4a:	6878      	ldr	r0, [r7, #4]
 8003e4c:	f000 f8ac 	bl	8003fa8 <HAL_TIM_IC_CaptureCallback>
 8003e50:	e005      	b.n	8003e5e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e52:	6878      	ldr	r0, [r7, #4]
 8003e54:	f000 f89e 	bl	8003f94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e58:	6878      	ldr	r0, [r7, #4]
 8003e5a:	f000 f8af 	bl	8003fbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2200      	movs	r2, #0
 8003e62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	f003 0308 	and.w	r3, r3, #8
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d020      	beq.n	8003eb0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	f003 0308 	and.w	r3, r3, #8
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d01b      	beq.n	8003eb0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f06f 0208 	mvn.w	r2, #8
 8003e80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2204      	movs	r2, #4
 8003e86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	69db      	ldr	r3, [r3, #28]
 8003e8e:	f003 0303 	and.w	r3, r3, #3
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d003      	beq.n	8003e9e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e96:	6878      	ldr	r0, [r7, #4]
 8003e98:	f000 f886 	bl	8003fa8 <HAL_TIM_IC_CaptureCallback>
 8003e9c:	e005      	b.n	8003eaa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	f000 f878 	bl	8003f94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ea4:	6878      	ldr	r0, [r7, #4]
 8003ea6:	f000 f889 	bl	8003fbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2200      	movs	r2, #0
 8003eae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	f003 0310 	and.w	r3, r3, #16
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d020      	beq.n	8003efc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	f003 0310 	and.w	r3, r3, #16
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d01b      	beq.n	8003efc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f06f 0210 	mvn.w	r2, #16
 8003ecc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2208      	movs	r2, #8
 8003ed2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	69db      	ldr	r3, [r3, #28]
 8003eda:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d003      	beq.n	8003eea <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ee2:	6878      	ldr	r0, [r7, #4]
 8003ee4:	f000 f860 	bl	8003fa8 <HAL_TIM_IC_CaptureCallback>
 8003ee8:	e005      	b.n	8003ef6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003eea:	6878      	ldr	r0, [r7, #4]
 8003eec:	f000 f852 	bl	8003f94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ef0:	6878      	ldr	r0, [r7, #4]
 8003ef2:	f000 f863 	bl	8003fbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	f003 0301 	and.w	r3, r3, #1
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d00c      	beq.n	8003f20 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	f003 0301 	and.w	r3, r3, #1
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d007      	beq.n	8003f20 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f06f 0201 	mvn.w	r2, #1
 8003f18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003f1a:	6878      	ldr	r0, [r7, #4]
 8003f1c:	f7fc fd16 	bl	800094c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d00c      	beq.n	8003f44 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d007      	beq.n	8003f44 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003f3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003f3e:	6878      	ldr	r0, [r7, #4]
 8003f40:	f000 f906 	bl	8004150 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d00c      	beq.n	8003f68 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d007      	beq.n	8003f68 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003f60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003f62:	6878      	ldr	r0, [r7, #4]
 8003f64:	f000 f834 	bl	8003fd0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	f003 0320 	and.w	r3, r3, #32
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d00c      	beq.n	8003f8c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	f003 0320 	and.w	r3, r3, #32
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d007      	beq.n	8003f8c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f06f 0220 	mvn.w	r2, #32
 8003f84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003f86:	6878      	ldr	r0, [r7, #4]
 8003f88:	f000 f8d8 	bl	800413c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003f8c:	bf00      	nop
 8003f8e:	3710      	adds	r7, #16
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bd80      	pop	{r7, pc}

08003f94 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b083      	sub	sp, #12
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003f9c:	bf00      	nop
 8003f9e:	370c      	adds	r7, #12
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa6:	4770      	bx	lr

08003fa8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b083      	sub	sp, #12
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003fb0:	bf00      	nop
 8003fb2:	370c      	adds	r7, #12
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fba:	4770      	bx	lr

08003fbc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b083      	sub	sp, #12
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003fc4:	bf00      	nop
 8003fc6:	370c      	adds	r7, #12
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fce:	4770      	bx	lr

08003fd0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b083      	sub	sp, #12
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003fd8:	bf00      	nop
 8003fda:	370c      	adds	r7, #12
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe2:	4770      	bx	lr

08003fe4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b085      	sub	sp, #20
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
 8003fec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	4a46      	ldr	r2, [pc, #280]	@ (8004110 <TIM_Base_SetConfig+0x12c>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d013      	beq.n	8004024 <TIM_Base_SetConfig+0x40>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004002:	d00f      	beq.n	8004024 <TIM_Base_SetConfig+0x40>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	4a43      	ldr	r2, [pc, #268]	@ (8004114 <TIM_Base_SetConfig+0x130>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d00b      	beq.n	8004024 <TIM_Base_SetConfig+0x40>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	4a42      	ldr	r2, [pc, #264]	@ (8004118 <TIM_Base_SetConfig+0x134>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d007      	beq.n	8004024 <TIM_Base_SetConfig+0x40>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	4a41      	ldr	r2, [pc, #260]	@ (800411c <TIM_Base_SetConfig+0x138>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d003      	beq.n	8004024 <TIM_Base_SetConfig+0x40>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	4a40      	ldr	r2, [pc, #256]	@ (8004120 <TIM_Base_SetConfig+0x13c>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d108      	bne.n	8004036 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800402a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	68fa      	ldr	r2, [r7, #12]
 8004032:	4313      	orrs	r3, r2
 8004034:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	4a35      	ldr	r2, [pc, #212]	@ (8004110 <TIM_Base_SetConfig+0x12c>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d02b      	beq.n	8004096 <TIM_Base_SetConfig+0xb2>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004044:	d027      	beq.n	8004096 <TIM_Base_SetConfig+0xb2>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	4a32      	ldr	r2, [pc, #200]	@ (8004114 <TIM_Base_SetConfig+0x130>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d023      	beq.n	8004096 <TIM_Base_SetConfig+0xb2>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	4a31      	ldr	r2, [pc, #196]	@ (8004118 <TIM_Base_SetConfig+0x134>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d01f      	beq.n	8004096 <TIM_Base_SetConfig+0xb2>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	4a30      	ldr	r2, [pc, #192]	@ (800411c <TIM_Base_SetConfig+0x138>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d01b      	beq.n	8004096 <TIM_Base_SetConfig+0xb2>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	4a2f      	ldr	r2, [pc, #188]	@ (8004120 <TIM_Base_SetConfig+0x13c>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d017      	beq.n	8004096 <TIM_Base_SetConfig+0xb2>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	4a2e      	ldr	r2, [pc, #184]	@ (8004124 <TIM_Base_SetConfig+0x140>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d013      	beq.n	8004096 <TIM_Base_SetConfig+0xb2>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	4a2d      	ldr	r2, [pc, #180]	@ (8004128 <TIM_Base_SetConfig+0x144>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d00f      	beq.n	8004096 <TIM_Base_SetConfig+0xb2>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	4a2c      	ldr	r2, [pc, #176]	@ (800412c <TIM_Base_SetConfig+0x148>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d00b      	beq.n	8004096 <TIM_Base_SetConfig+0xb2>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	4a2b      	ldr	r2, [pc, #172]	@ (8004130 <TIM_Base_SetConfig+0x14c>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d007      	beq.n	8004096 <TIM_Base_SetConfig+0xb2>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	4a2a      	ldr	r2, [pc, #168]	@ (8004134 <TIM_Base_SetConfig+0x150>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d003      	beq.n	8004096 <TIM_Base_SetConfig+0xb2>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	4a29      	ldr	r2, [pc, #164]	@ (8004138 <TIM_Base_SetConfig+0x154>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d108      	bne.n	80040a8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800409c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	68db      	ldr	r3, [r3, #12]
 80040a2:	68fa      	ldr	r2, [r7, #12]
 80040a4:	4313      	orrs	r3, r2
 80040a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	695b      	ldr	r3, [r3, #20]
 80040b2:	4313      	orrs	r3, r2
 80040b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	68fa      	ldr	r2, [r7, #12]
 80040ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	689a      	ldr	r2, [r3, #8]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	681a      	ldr	r2, [r3, #0]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	4a10      	ldr	r2, [pc, #64]	@ (8004110 <TIM_Base_SetConfig+0x12c>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d003      	beq.n	80040dc <TIM_Base_SetConfig+0xf8>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	4a12      	ldr	r2, [pc, #72]	@ (8004120 <TIM_Base_SetConfig+0x13c>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d103      	bne.n	80040e4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	691a      	ldr	r2, [r3, #16]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2201      	movs	r2, #1
 80040e8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	691b      	ldr	r3, [r3, #16]
 80040ee:	f003 0301 	and.w	r3, r3, #1
 80040f2:	2b01      	cmp	r3, #1
 80040f4:	d105      	bne.n	8004102 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	691b      	ldr	r3, [r3, #16]
 80040fa:	f023 0201 	bic.w	r2, r3, #1
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	611a      	str	r2, [r3, #16]
  }
}
 8004102:	bf00      	nop
 8004104:	3714      	adds	r7, #20
 8004106:	46bd      	mov	sp, r7
 8004108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410c:	4770      	bx	lr
 800410e:	bf00      	nop
 8004110:	40010000 	.word	0x40010000
 8004114:	40000400 	.word	0x40000400
 8004118:	40000800 	.word	0x40000800
 800411c:	40000c00 	.word	0x40000c00
 8004120:	40010400 	.word	0x40010400
 8004124:	40014000 	.word	0x40014000
 8004128:	40014400 	.word	0x40014400
 800412c:	40014800 	.word	0x40014800
 8004130:	40001800 	.word	0x40001800
 8004134:	40001c00 	.word	0x40001c00
 8004138:	40002000 	.word	0x40002000

0800413c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800413c:	b480      	push	{r7}
 800413e:	b083      	sub	sp, #12
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004144:	bf00      	nop
 8004146:	370c      	adds	r7, #12
 8004148:	46bd      	mov	sp, r7
 800414a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414e:	4770      	bx	lr

08004150 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004150:	b480      	push	{r7}
 8004152:	b083      	sub	sp, #12
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004158:	bf00      	nop
 800415a:	370c      	adds	r7, #12
 800415c:	46bd      	mov	sp, r7
 800415e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004162:	4770      	bx	lr

08004164 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b082      	sub	sp, #8
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d101      	bne.n	8004176 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004172:	2301      	movs	r3, #1
 8004174:	e042      	b.n	80041fc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800417c:	b2db      	uxtb	r3, r3
 800417e:	2b00      	cmp	r3, #0
 8004180:	d106      	bne.n	8004190 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2200      	movs	r2, #0
 8004186:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800418a:	6878      	ldr	r0, [r7, #4]
 800418c:	f7fc fe5c 	bl	8000e48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2224      	movs	r2, #36	@ 0x24
 8004194:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	68da      	ldr	r2, [r3, #12]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80041a6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80041a8:	6878      	ldr	r0, [r7, #4]
 80041aa:	f000 f973 	bl	8004494 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	691a      	ldr	r2, [r3, #16]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80041bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	695a      	ldr	r2, [r3, #20]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80041cc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	68da      	ldr	r2, [r3, #12]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80041dc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2200      	movs	r2, #0
 80041e2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2220      	movs	r2, #32
 80041e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2220      	movs	r2, #32
 80041f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2200      	movs	r2, #0
 80041f8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80041fa:	2300      	movs	r3, #0
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	3708      	adds	r7, #8
 8004200:	46bd      	mov	sp, r7
 8004202:	bd80      	pop	{r7, pc}

08004204 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b08a      	sub	sp, #40	@ 0x28
 8004208:	af02      	add	r7, sp, #8
 800420a:	60f8      	str	r0, [r7, #12]
 800420c:	60b9      	str	r1, [r7, #8]
 800420e:	603b      	str	r3, [r7, #0]
 8004210:	4613      	mov	r3, r2
 8004212:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004214:	2300      	movs	r3, #0
 8004216:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800421e:	b2db      	uxtb	r3, r3
 8004220:	2b20      	cmp	r3, #32
 8004222:	d175      	bne.n	8004310 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d002      	beq.n	8004230 <HAL_UART_Transmit+0x2c>
 800422a:	88fb      	ldrh	r3, [r7, #6]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d101      	bne.n	8004234 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004230:	2301      	movs	r3, #1
 8004232:	e06e      	b.n	8004312 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	2200      	movs	r2, #0
 8004238:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	2221      	movs	r2, #33	@ 0x21
 800423e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004242:	f7fd faef 	bl	8001824 <HAL_GetTick>
 8004246:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	88fa      	ldrh	r2, [r7, #6]
 800424c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	88fa      	ldrh	r2, [r7, #6]
 8004252:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	689b      	ldr	r3, [r3, #8]
 8004258:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800425c:	d108      	bne.n	8004270 <HAL_UART_Transmit+0x6c>
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	691b      	ldr	r3, [r3, #16]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d104      	bne.n	8004270 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004266:	2300      	movs	r3, #0
 8004268:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	61bb      	str	r3, [r7, #24]
 800426e:	e003      	b.n	8004278 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004274:	2300      	movs	r3, #0
 8004276:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004278:	e02e      	b.n	80042d8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	9300      	str	r3, [sp, #0]
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	2200      	movs	r2, #0
 8004282:	2180      	movs	r1, #128	@ 0x80
 8004284:	68f8      	ldr	r0, [r7, #12]
 8004286:	f000 f848 	bl	800431a <UART_WaitOnFlagUntilTimeout>
 800428a:	4603      	mov	r3, r0
 800428c:	2b00      	cmp	r3, #0
 800428e:	d005      	beq.n	800429c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	2220      	movs	r2, #32
 8004294:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004298:	2303      	movs	r3, #3
 800429a:	e03a      	b.n	8004312 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800429c:	69fb      	ldr	r3, [r7, #28]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d10b      	bne.n	80042ba <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80042a2:	69bb      	ldr	r3, [r7, #24]
 80042a4:	881b      	ldrh	r3, [r3, #0]
 80042a6:	461a      	mov	r2, r3
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80042b0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80042b2:	69bb      	ldr	r3, [r7, #24]
 80042b4:	3302      	adds	r3, #2
 80042b6:	61bb      	str	r3, [r7, #24]
 80042b8:	e007      	b.n	80042ca <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80042ba:	69fb      	ldr	r3, [r7, #28]
 80042bc:	781a      	ldrb	r2, [r3, #0]
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80042c4:	69fb      	ldr	r3, [r7, #28]
 80042c6:	3301      	adds	r3, #1
 80042c8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80042ce:	b29b      	uxth	r3, r3
 80042d0:	3b01      	subs	r3, #1
 80042d2:	b29a      	uxth	r2, r3
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80042dc:	b29b      	uxth	r3, r3
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d1cb      	bne.n	800427a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	9300      	str	r3, [sp, #0]
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	2200      	movs	r2, #0
 80042ea:	2140      	movs	r1, #64	@ 0x40
 80042ec:	68f8      	ldr	r0, [r7, #12]
 80042ee:	f000 f814 	bl	800431a <UART_WaitOnFlagUntilTimeout>
 80042f2:	4603      	mov	r3, r0
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d005      	beq.n	8004304 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	2220      	movs	r2, #32
 80042fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004300:	2303      	movs	r3, #3
 8004302:	e006      	b.n	8004312 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	2220      	movs	r2, #32
 8004308:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800430c:	2300      	movs	r3, #0
 800430e:	e000      	b.n	8004312 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004310:	2302      	movs	r3, #2
  }
}
 8004312:	4618      	mov	r0, r3
 8004314:	3720      	adds	r7, #32
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}

0800431a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800431a:	b580      	push	{r7, lr}
 800431c:	b086      	sub	sp, #24
 800431e:	af00      	add	r7, sp, #0
 8004320:	60f8      	str	r0, [r7, #12]
 8004322:	60b9      	str	r1, [r7, #8]
 8004324:	603b      	str	r3, [r7, #0]
 8004326:	4613      	mov	r3, r2
 8004328:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800432a:	e03b      	b.n	80043a4 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800432c:	6a3b      	ldr	r3, [r7, #32]
 800432e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004332:	d037      	beq.n	80043a4 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004334:	f7fd fa76 	bl	8001824 <HAL_GetTick>
 8004338:	4602      	mov	r2, r0
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	1ad3      	subs	r3, r2, r3
 800433e:	6a3a      	ldr	r2, [r7, #32]
 8004340:	429a      	cmp	r2, r3
 8004342:	d302      	bcc.n	800434a <UART_WaitOnFlagUntilTimeout+0x30>
 8004344:	6a3b      	ldr	r3, [r7, #32]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d101      	bne.n	800434e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800434a:	2303      	movs	r3, #3
 800434c:	e03a      	b.n	80043c4 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	68db      	ldr	r3, [r3, #12]
 8004354:	f003 0304 	and.w	r3, r3, #4
 8004358:	2b00      	cmp	r3, #0
 800435a:	d023      	beq.n	80043a4 <UART_WaitOnFlagUntilTimeout+0x8a>
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	2b80      	cmp	r3, #128	@ 0x80
 8004360:	d020      	beq.n	80043a4 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004362:	68bb      	ldr	r3, [r7, #8]
 8004364:	2b40      	cmp	r3, #64	@ 0x40
 8004366:	d01d      	beq.n	80043a4 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f003 0308 	and.w	r3, r3, #8
 8004372:	2b08      	cmp	r3, #8
 8004374:	d116      	bne.n	80043a4 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004376:	2300      	movs	r3, #0
 8004378:	617b      	str	r3, [r7, #20]
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	617b      	str	r3, [r7, #20]
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	617b      	str	r3, [r7, #20]
 800438a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800438c:	68f8      	ldr	r0, [r7, #12]
 800438e:	f000 f81d 	bl	80043cc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	2208      	movs	r2, #8
 8004396:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	2200      	movs	r2, #0
 800439c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80043a0:	2301      	movs	r3, #1
 80043a2:	e00f      	b.n	80043c4 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	681a      	ldr	r2, [r3, #0]
 80043aa:	68bb      	ldr	r3, [r7, #8]
 80043ac:	4013      	ands	r3, r2
 80043ae:	68ba      	ldr	r2, [r7, #8]
 80043b0:	429a      	cmp	r2, r3
 80043b2:	bf0c      	ite	eq
 80043b4:	2301      	moveq	r3, #1
 80043b6:	2300      	movne	r3, #0
 80043b8:	b2db      	uxtb	r3, r3
 80043ba:	461a      	mov	r2, r3
 80043bc:	79fb      	ldrb	r3, [r7, #7]
 80043be:	429a      	cmp	r2, r3
 80043c0:	d0b4      	beq.n	800432c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80043c2:	2300      	movs	r3, #0
}
 80043c4:	4618      	mov	r0, r3
 80043c6:	3718      	adds	r7, #24
 80043c8:	46bd      	mov	sp, r7
 80043ca:	bd80      	pop	{r7, pc}

080043cc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80043cc:	b480      	push	{r7}
 80043ce:	b095      	sub	sp, #84	@ 0x54
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	330c      	adds	r3, #12
 80043da:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043de:	e853 3f00 	ldrex	r3, [r3]
 80043e2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80043e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043e6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80043ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	330c      	adds	r3, #12
 80043f2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80043f4:	643a      	str	r2, [r7, #64]	@ 0x40
 80043f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043f8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80043fa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80043fc:	e841 2300 	strex	r3, r2, [r1]
 8004400:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004402:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004404:	2b00      	cmp	r3, #0
 8004406:	d1e5      	bne.n	80043d4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	3314      	adds	r3, #20
 800440e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004410:	6a3b      	ldr	r3, [r7, #32]
 8004412:	e853 3f00 	ldrex	r3, [r3]
 8004416:	61fb      	str	r3, [r7, #28]
   return(result);
 8004418:	69fb      	ldr	r3, [r7, #28]
 800441a:	f023 0301 	bic.w	r3, r3, #1
 800441e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	3314      	adds	r3, #20
 8004426:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004428:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800442a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800442c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800442e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004430:	e841 2300 	strex	r3, r2, [r1]
 8004434:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004438:	2b00      	cmp	r3, #0
 800443a:	d1e5      	bne.n	8004408 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004440:	2b01      	cmp	r3, #1
 8004442:	d119      	bne.n	8004478 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	330c      	adds	r3, #12
 800444a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	e853 3f00 	ldrex	r3, [r3]
 8004452:	60bb      	str	r3, [r7, #8]
   return(result);
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	f023 0310 	bic.w	r3, r3, #16
 800445a:	647b      	str	r3, [r7, #68]	@ 0x44
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	330c      	adds	r3, #12
 8004462:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004464:	61ba      	str	r2, [r7, #24]
 8004466:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004468:	6979      	ldr	r1, [r7, #20]
 800446a:	69ba      	ldr	r2, [r7, #24]
 800446c:	e841 2300 	strex	r3, r2, [r1]
 8004470:	613b      	str	r3, [r7, #16]
   return(result);
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d1e5      	bne.n	8004444 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2220      	movs	r2, #32
 800447c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2200      	movs	r2, #0
 8004484:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004486:	bf00      	nop
 8004488:	3754      	adds	r7, #84	@ 0x54
 800448a:	46bd      	mov	sp, r7
 800448c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004490:	4770      	bx	lr
	...

08004494 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004494:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004498:	b0c0      	sub	sp, #256	@ 0x100
 800449a:	af00      	add	r7, sp, #0
 800449c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80044a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	691b      	ldr	r3, [r3, #16]
 80044a8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80044ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044b0:	68d9      	ldr	r1, [r3, #12]
 80044b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044b6:	681a      	ldr	r2, [r3, #0]
 80044b8:	ea40 0301 	orr.w	r3, r0, r1
 80044bc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80044be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044c2:	689a      	ldr	r2, [r3, #8]
 80044c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044c8:	691b      	ldr	r3, [r3, #16]
 80044ca:	431a      	orrs	r2, r3
 80044cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044d0:	695b      	ldr	r3, [r3, #20]
 80044d2:	431a      	orrs	r2, r3
 80044d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044d8:	69db      	ldr	r3, [r3, #28]
 80044da:	4313      	orrs	r3, r2
 80044dc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80044e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	68db      	ldr	r3, [r3, #12]
 80044e8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80044ec:	f021 010c 	bic.w	r1, r1, #12
 80044f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044f4:	681a      	ldr	r2, [r3, #0]
 80044f6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80044fa:	430b      	orrs	r3, r1
 80044fc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80044fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	695b      	ldr	r3, [r3, #20]
 8004506:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800450a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800450e:	6999      	ldr	r1, [r3, #24]
 8004510:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004514:	681a      	ldr	r2, [r3, #0]
 8004516:	ea40 0301 	orr.w	r3, r0, r1
 800451a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800451c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004520:	681a      	ldr	r2, [r3, #0]
 8004522:	4b8f      	ldr	r3, [pc, #572]	@ (8004760 <UART_SetConfig+0x2cc>)
 8004524:	429a      	cmp	r2, r3
 8004526:	d005      	beq.n	8004534 <UART_SetConfig+0xa0>
 8004528:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800452c:	681a      	ldr	r2, [r3, #0]
 800452e:	4b8d      	ldr	r3, [pc, #564]	@ (8004764 <UART_SetConfig+0x2d0>)
 8004530:	429a      	cmp	r2, r3
 8004532:	d104      	bne.n	800453e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004534:	f7ff fb2e 	bl	8003b94 <HAL_RCC_GetPCLK2Freq>
 8004538:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800453c:	e003      	b.n	8004546 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800453e:	f7ff fb15 	bl	8003b6c <HAL_RCC_GetPCLK1Freq>
 8004542:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004546:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800454a:	69db      	ldr	r3, [r3, #28]
 800454c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004550:	f040 810c 	bne.w	800476c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004554:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004558:	2200      	movs	r2, #0
 800455a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800455e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004562:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004566:	4622      	mov	r2, r4
 8004568:	462b      	mov	r3, r5
 800456a:	1891      	adds	r1, r2, r2
 800456c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800456e:	415b      	adcs	r3, r3
 8004570:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004572:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004576:	4621      	mov	r1, r4
 8004578:	eb12 0801 	adds.w	r8, r2, r1
 800457c:	4629      	mov	r1, r5
 800457e:	eb43 0901 	adc.w	r9, r3, r1
 8004582:	f04f 0200 	mov.w	r2, #0
 8004586:	f04f 0300 	mov.w	r3, #0
 800458a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800458e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004592:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004596:	4690      	mov	r8, r2
 8004598:	4699      	mov	r9, r3
 800459a:	4623      	mov	r3, r4
 800459c:	eb18 0303 	adds.w	r3, r8, r3
 80045a0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80045a4:	462b      	mov	r3, r5
 80045a6:	eb49 0303 	adc.w	r3, r9, r3
 80045aa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80045ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	2200      	movs	r2, #0
 80045b6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80045ba:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80045be:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80045c2:	460b      	mov	r3, r1
 80045c4:	18db      	adds	r3, r3, r3
 80045c6:	653b      	str	r3, [r7, #80]	@ 0x50
 80045c8:	4613      	mov	r3, r2
 80045ca:	eb42 0303 	adc.w	r3, r2, r3
 80045ce:	657b      	str	r3, [r7, #84]	@ 0x54
 80045d0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80045d4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80045d8:	f7fb fe62 	bl	80002a0 <__aeabi_uldivmod>
 80045dc:	4602      	mov	r2, r0
 80045de:	460b      	mov	r3, r1
 80045e0:	4b61      	ldr	r3, [pc, #388]	@ (8004768 <UART_SetConfig+0x2d4>)
 80045e2:	fba3 2302 	umull	r2, r3, r3, r2
 80045e6:	095b      	lsrs	r3, r3, #5
 80045e8:	011c      	lsls	r4, r3, #4
 80045ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80045ee:	2200      	movs	r2, #0
 80045f0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80045f4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80045f8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80045fc:	4642      	mov	r2, r8
 80045fe:	464b      	mov	r3, r9
 8004600:	1891      	adds	r1, r2, r2
 8004602:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004604:	415b      	adcs	r3, r3
 8004606:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004608:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800460c:	4641      	mov	r1, r8
 800460e:	eb12 0a01 	adds.w	sl, r2, r1
 8004612:	4649      	mov	r1, r9
 8004614:	eb43 0b01 	adc.w	fp, r3, r1
 8004618:	f04f 0200 	mov.w	r2, #0
 800461c:	f04f 0300 	mov.w	r3, #0
 8004620:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004624:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004628:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800462c:	4692      	mov	sl, r2
 800462e:	469b      	mov	fp, r3
 8004630:	4643      	mov	r3, r8
 8004632:	eb1a 0303 	adds.w	r3, sl, r3
 8004636:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800463a:	464b      	mov	r3, r9
 800463c:	eb4b 0303 	adc.w	r3, fp, r3
 8004640:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004644:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	2200      	movs	r2, #0
 800464c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004650:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004654:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004658:	460b      	mov	r3, r1
 800465a:	18db      	adds	r3, r3, r3
 800465c:	643b      	str	r3, [r7, #64]	@ 0x40
 800465e:	4613      	mov	r3, r2
 8004660:	eb42 0303 	adc.w	r3, r2, r3
 8004664:	647b      	str	r3, [r7, #68]	@ 0x44
 8004666:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800466a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800466e:	f7fb fe17 	bl	80002a0 <__aeabi_uldivmod>
 8004672:	4602      	mov	r2, r0
 8004674:	460b      	mov	r3, r1
 8004676:	4611      	mov	r1, r2
 8004678:	4b3b      	ldr	r3, [pc, #236]	@ (8004768 <UART_SetConfig+0x2d4>)
 800467a:	fba3 2301 	umull	r2, r3, r3, r1
 800467e:	095b      	lsrs	r3, r3, #5
 8004680:	2264      	movs	r2, #100	@ 0x64
 8004682:	fb02 f303 	mul.w	r3, r2, r3
 8004686:	1acb      	subs	r3, r1, r3
 8004688:	00db      	lsls	r3, r3, #3
 800468a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800468e:	4b36      	ldr	r3, [pc, #216]	@ (8004768 <UART_SetConfig+0x2d4>)
 8004690:	fba3 2302 	umull	r2, r3, r3, r2
 8004694:	095b      	lsrs	r3, r3, #5
 8004696:	005b      	lsls	r3, r3, #1
 8004698:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800469c:	441c      	add	r4, r3
 800469e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80046a2:	2200      	movs	r2, #0
 80046a4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80046a8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80046ac:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80046b0:	4642      	mov	r2, r8
 80046b2:	464b      	mov	r3, r9
 80046b4:	1891      	adds	r1, r2, r2
 80046b6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80046b8:	415b      	adcs	r3, r3
 80046ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80046bc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80046c0:	4641      	mov	r1, r8
 80046c2:	1851      	adds	r1, r2, r1
 80046c4:	6339      	str	r1, [r7, #48]	@ 0x30
 80046c6:	4649      	mov	r1, r9
 80046c8:	414b      	adcs	r3, r1
 80046ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80046cc:	f04f 0200 	mov.w	r2, #0
 80046d0:	f04f 0300 	mov.w	r3, #0
 80046d4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80046d8:	4659      	mov	r1, fp
 80046da:	00cb      	lsls	r3, r1, #3
 80046dc:	4651      	mov	r1, sl
 80046de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80046e2:	4651      	mov	r1, sl
 80046e4:	00ca      	lsls	r2, r1, #3
 80046e6:	4610      	mov	r0, r2
 80046e8:	4619      	mov	r1, r3
 80046ea:	4603      	mov	r3, r0
 80046ec:	4642      	mov	r2, r8
 80046ee:	189b      	adds	r3, r3, r2
 80046f0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80046f4:	464b      	mov	r3, r9
 80046f6:	460a      	mov	r2, r1
 80046f8:	eb42 0303 	adc.w	r3, r2, r3
 80046fc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004700:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	2200      	movs	r2, #0
 8004708:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800470c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004710:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004714:	460b      	mov	r3, r1
 8004716:	18db      	adds	r3, r3, r3
 8004718:	62bb      	str	r3, [r7, #40]	@ 0x28
 800471a:	4613      	mov	r3, r2
 800471c:	eb42 0303 	adc.w	r3, r2, r3
 8004720:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004722:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004726:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800472a:	f7fb fdb9 	bl	80002a0 <__aeabi_uldivmod>
 800472e:	4602      	mov	r2, r0
 8004730:	460b      	mov	r3, r1
 8004732:	4b0d      	ldr	r3, [pc, #52]	@ (8004768 <UART_SetConfig+0x2d4>)
 8004734:	fba3 1302 	umull	r1, r3, r3, r2
 8004738:	095b      	lsrs	r3, r3, #5
 800473a:	2164      	movs	r1, #100	@ 0x64
 800473c:	fb01 f303 	mul.w	r3, r1, r3
 8004740:	1ad3      	subs	r3, r2, r3
 8004742:	00db      	lsls	r3, r3, #3
 8004744:	3332      	adds	r3, #50	@ 0x32
 8004746:	4a08      	ldr	r2, [pc, #32]	@ (8004768 <UART_SetConfig+0x2d4>)
 8004748:	fba2 2303 	umull	r2, r3, r2, r3
 800474c:	095b      	lsrs	r3, r3, #5
 800474e:	f003 0207 	and.w	r2, r3, #7
 8004752:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4422      	add	r2, r4
 800475a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800475c:	e106      	b.n	800496c <UART_SetConfig+0x4d8>
 800475e:	bf00      	nop
 8004760:	40011000 	.word	0x40011000
 8004764:	40011400 	.word	0x40011400
 8004768:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800476c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004770:	2200      	movs	r2, #0
 8004772:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004776:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800477a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800477e:	4642      	mov	r2, r8
 8004780:	464b      	mov	r3, r9
 8004782:	1891      	adds	r1, r2, r2
 8004784:	6239      	str	r1, [r7, #32]
 8004786:	415b      	adcs	r3, r3
 8004788:	627b      	str	r3, [r7, #36]	@ 0x24
 800478a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800478e:	4641      	mov	r1, r8
 8004790:	1854      	adds	r4, r2, r1
 8004792:	4649      	mov	r1, r9
 8004794:	eb43 0501 	adc.w	r5, r3, r1
 8004798:	f04f 0200 	mov.w	r2, #0
 800479c:	f04f 0300 	mov.w	r3, #0
 80047a0:	00eb      	lsls	r3, r5, #3
 80047a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80047a6:	00e2      	lsls	r2, r4, #3
 80047a8:	4614      	mov	r4, r2
 80047aa:	461d      	mov	r5, r3
 80047ac:	4643      	mov	r3, r8
 80047ae:	18e3      	adds	r3, r4, r3
 80047b0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80047b4:	464b      	mov	r3, r9
 80047b6:	eb45 0303 	adc.w	r3, r5, r3
 80047ba:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80047be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	2200      	movs	r2, #0
 80047c6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80047ca:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80047ce:	f04f 0200 	mov.w	r2, #0
 80047d2:	f04f 0300 	mov.w	r3, #0
 80047d6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80047da:	4629      	mov	r1, r5
 80047dc:	008b      	lsls	r3, r1, #2
 80047de:	4621      	mov	r1, r4
 80047e0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80047e4:	4621      	mov	r1, r4
 80047e6:	008a      	lsls	r2, r1, #2
 80047e8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80047ec:	f7fb fd58 	bl	80002a0 <__aeabi_uldivmod>
 80047f0:	4602      	mov	r2, r0
 80047f2:	460b      	mov	r3, r1
 80047f4:	4b60      	ldr	r3, [pc, #384]	@ (8004978 <UART_SetConfig+0x4e4>)
 80047f6:	fba3 2302 	umull	r2, r3, r3, r2
 80047fa:	095b      	lsrs	r3, r3, #5
 80047fc:	011c      	lsls	r4, r3, #4
 80047fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004802:	2200      	movs	r2, #0
 8004804:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004808:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800480c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004810:	4642      	mov	r2, r8
 8004812:	464b      	mov	r3, r9
 8004814:	1891      	adds	r1, r2, r2
 8004816:	61b9      	str	r1, [r7, #24]
 8004818:	415b      	adcs	r3, r3
 800481a:	61fb      	str	r3, [r7, #28]
 800481c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004820:	4641      	mov	r1, r8
 8004822:	1851      	adds	r1, r2, r1
 8004824:	6139      	str	r1, [r7, #16]
 8004826:	4649      	mov	r1, r9
 8004828:	414b      	adcs	r3, r1
 800482a:	617b      	str	r3, [r7, #20]
 800482c:	f04f 0200 	mov.w	r2, #0
 8004830:	f04f 0300 	mov.w	r3, #0
 8004834:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004838:	4659      	mov	r1, fp
 800483a:	00cb      	lsls	r3, r1, #3
 800483c:	4651      	mov	r1, sl
 800483e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004842:	4651      	mov	r1, sl
 8004844:	00ca      	lsls	r2, r1, #3
 8004846:	4610      	mov	r0, r2
 8004848:	4619      	mov	r1, r3
 800484a:	4603      	mov	r3, r0
 800484c:	4642      	mov	r2, r8
 800484e:	189b      	adds	r3, r3, r2
 8004850:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004854:	464b      	mov	r3, r9
 8004856:	460a      	mov	r2, r1
 8004858:	eb42 0303 	adc.w	r3, r2, r3
 800485c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004860:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	2200      	movs	r2, #0
 8004868:	67bb      	str	r3, [r7, #120]	@ 0x78
 800486a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800486c:	f04f 0200 	mov.w	r2, #0
 8004870:	f04f 0300 	mov.w	r3, #0
 8004874:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004878:	4649      	mov	r1, r9
 800487a:	008b      	lsls	r3, r1, #2
 800487c:	4641      	mov	r1, r8
 800487e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004882:	4641      	mov	r1, r8
 8004884:	008a      	lsls	r2, r1, #2
 8004886:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800488a:	f7fb fd09 	bl	80002a0 <__aeabi_uldivmod>
 800488e:	4602      	mov	r2, r0
 8004890:	460b      	mov	r3, r1
 8004892:	4611      	mov	r1, r2
 8004894:	4b38      	ldr	r3, [pc, #224]	@ (8004978 <UART_SetConfig+0x4e4>)
 8004896:	fba3 2301 	umull	r2, r3, r3, r1
 800489a:	095b      	lsrs	r3, r3, #5
 800489c:	2264      	movs	r2, #100	@ 0x64
 800489e:	fb02 f303 	mul.w	r3, r2, r3
 80048a2:	1acb      	subs	r3, r1, r3
 80048a4:	011b      	lsls	r3, r3, #4
 80048a6:	3332      	adds	r3, #50	@ 0x32
 80048a8:	4a33      	ldr	r2, [pc, #204]	@ (8004978 <UART_SetConfig+0x4e4>)
 80048aa:	fba2 2303 	umull	r2, r3, r2, r3
 80048ae:	095b      	lsrs	r3, r3, #5
 80048b0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80048b4:	441c      	add	r4, r3
 80048b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80048ba:	2200      	movs	r2, #0
 80048bc:	673b      	str	r3, [r7, #112]	@ 0x70
 80048be:	677a      	str	r2, [r7, #116]	@ 0x74
 80048c0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80048c4:	4642      	mov	r2, r8
 80048c6:	464b      	mov	r3, r9
 80048c8:	1891      	adds	r1, r2, r2
 80048ca:	60b9      	str	r1, [r7, #8]
 80048cc:	415b      	adcs	r3, r3
 80048ce:	60fb      	str	r3, [r7, #12]
 80048d0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80048d4:	4641      	mov	r1, r8
 80048d6:	1851      	adds	r1, r2, r1
 80048d8:	6039      	str	r1, [r7, #0]
 80048da:	4649      	mov	r1, r9
 80048dc:	414b      	adcs	r3, r1
 80048de:	607b      	str	r3, [r7, #4]
 80048e0:	f04f 0200 	mov.w	r2, #0
 80048e4:	f04f 0300 	mov.w	r3, #0
 80048e8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80048ec:	4659      	mov	r1, fp
 80048ee:	00cb      	lsls	r3, r1, #3
 80048f0:	4651      	mov	r1, sl
 80048f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80048f6:	4651      	mov	r1, sl
 80048f8:	00ca      	lsls	r2, r1, #3
 80048fa:	4610      	mov	r0, r2
 80048fc:	4619      	mov	r1, r3
 80048fe:	4603      	mov	r3, r0
 8004900:	4642      	mov	r2, r8
 8004902:	189b      	adds	r3, r3, r2
 8004904:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004906:	464b      	mov	r3, r9
 8004908:	460a      	mov	r2, r1
 800490a:	eb42 0303 	adc.w	r3, r2, r3
 800490e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004910:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	2200      	movs	r2, #0
 8004918:	663b      	str	r3, [r7, #96]	@ 0x60
 800491a:	667a      	str	r2, [r7, #100]	@ 0x64
 800491c:	f04f 0200 	mov.w	r2, #0
 8004920:	f04f 0300 	mov.w	r3, #0
 8004924:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004928:	4649      	mov	r1, r9
 800492a:	008b      	lsls	r3, r1, #2
 800492c:	4641      	mov	r1, r8
 800492e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004932:	4641      	mov	r1, r8
 8004934:	008a      	lsls	r2, r1, #2
 8004936:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800493a:	f7fb fcb1 	bl	80002a0 <__aeabi_uldivmod>
 800493e:	4602      	mov	r2, r0
 8004940:	460b      	mov	r3, r1
 8004942:	4b0d      	ldr	r3, [pc, #52]	@ (8004978 <UART_SetConfig+0x4e4>)
 8004944:	fba3 1302 	umull	r1, r3, r3, r2
 8004948:	095b      	lsrs	r3, r3, #5
 800494a:	2164      	movs	r1, #100	@ 0x64
 800494c:	fb01 f303 	mul.w	r3, r1, r3
 8004950:	1ad3      	subs	r3, r2, r3
 8004952:	011b      	lsls	r3, r3, #4
 8004954:	3332      	adds	r3, #50	@ 0x32
 8004956:	4a08      	ldr	r2, [pc, #32]	@ (8004978 <UART_SetConfig+0x4e4>)
 8004958:	fba2 2303 	umull	r2, r3, r2, r3
 800495c:	095b      	lsrs	r3, r3, #5
 800495e:	f003 020f 	and.w	r2, r3, #15
 8004962:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4422      	add	r2, r4
 800496a:	609a      	str	r2, [r3, #8]
}
 800496c:	bf00      	nop
 800496e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004972:	46bd      	mov	sp, r7
 8004974:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004978:	51eb851f 	.word	0x51eb851f

0800497c <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b084      	sub	sp, #16
 8004980:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8004982:	4b92      	ldr	r3, [pc, #584]	@ (8004bcc <MX_LWIP_Init+0x250>)
 8004984:	22c0      	movs	r2, #192	@ 0xc0
 8004986:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8004988:	4b90      	ldr	r3, [pc, #576]	@ (8004bcc <MX_LWIP_Init+0x250>)
 800498a:	22a8      	movs	r2, #168	@ 0xa8
 800498c:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 800498e:	4b8f      	ldr	r3, [pc, #572]	@ (8004bcc <MX_LWIP_Init+0x250>)
 8004990:	2201      	movs	r2, #1
 8004992:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 130;
 8004994:	4b8d      	ldr	r3, [pc, #564]	@ (8004bcc <MX_LWIP_Init+0x250>)
 8004996:	2282      	movs	r2, #130	@ 0x82
 8004998:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800499a:	4b8d      	ldr	r3, [pc, #564]	@ (8004bd0 <MX_LWIP_Init+0x254>)
 800499c:	22ff      	movs	r2, #255	@ 0xff
 800499e:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 80049a0:	4b8b      	ldr	r3, [pc, #556]	@ (8004bd0 <MX_LWIP_Init+0x254>)
 80049a2:	22ff      	movs	r2, #255	@ 0xff
 80049a4:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 80049a6:	4b8a      	ldr	r3, [pc, #552]	@ (8004bd0 <MX_LWIP_Init+0x254>)
 80049a8:	22ff      	movs	r2, #255	@ 0xff
 80049aa:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 80049ac:	4b88      	ldr	r3, [pc, #544]	@ (8004bd0 <MX_LWIP_Init+0x254>)
 80049ae:	2200      	movs	r2, #0
 80049b0:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 80049b2:	4b88      	ldr	r3, [pc, #544]	@ (8004bd4 <MX_LWIP_Init+0x258>)
 80049b4:	22c0      	movs	r2, #192	@ 0xc0
 80049b6:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 80049b8:	4b86      	ldr	r3, [pc, #536]	@ (8004bd4 <MX_LWIP_Init+0x258>)
 80049ba:	22a8      	movs	r2, #168	@ 0xa8
 80049bc:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 80049be:	4b85      	ldr	r3, [pc, #532]	@ (8004bd4 <MX_LWIP_Init+0x258>)
 80049c0:	2201      	movs	r2, #1
 80049c2:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 80049c4:	4b83      	ldr	r3, [pc, #524]	@ (8004bd4 <MX_LWIP_Init+0x258>)
 80049c6:	2201      	movs	r2, #1
 80049c8:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 80049ca:	2100      	movs	r1, #0
 80049cc:	2000      	movs	r0, #0
 80049ce:	f006 ffaf 	bl	800b930 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 80049d2:	4b7e      	ldr	r3, [pc, #504]	@ (8004bcc <MX_LWIP_Init+0x250>)
 80049d4:	781b      	ldrb	r3, [r3, #0]
 80049d6:	061a      	lsls	r2, r3, #24
 80049d8:	4b7c      	ldr	r3, [pc, #496]	@ (8004bcc <MX_LWIP_Init+0x250>)
 80049da:	785b      	ldrb	r3, [r3, #1]
 80049dc:	041b      	lsls	r3, r3, #16
 80049de:	431a      	orrs	r2, r3
 80049e0:	4b7a      	ldr	r3, [pc, #488]	@ (8004bcc <MX_LWIP_Init+0x250>)
 80049e2:	789b      	ldrb	r3, [r3, #2]
 80049e4:	021b      	lsls	r3, r3, #8
 80049e6:	4313      	orrs	r3, r2
 80049e8:	4a78      	ldr	r2, [pc, #480]	@ (8004bcc <MX_LWIP_Init+0x250>)
 80049ea:	78d2      	ldrb	r2, [r2, #3]
 80049ec:	4313      	orrs	r3, r2
 80049ee:	061a      	lsls	r2, r3, #24
 80049f0:	4b76      	ldr	r3, [pc, #472]	@ (8004bcc <MX_LWIP_Init+0x250>)
 80049f2:	781b      	ldrb	r3, [r3, #0]
 80049f4:	0619      	lsls	r1, r3, #24
 80049f6:	4b75      	ldr	r3, [pc, #468]	@ (8004bcc <MX_LWIP_Init+0x250>)
 80049f8:	785b      	ldrb	r3, [r3, #1]
 80049fa:	041b      	lsls	r3, r3, #16
 80049fc:	4319      	orrs	r1, r3
 80049fe:	4b73      	ldr	r3, [pc, #460]	@ (8004bcc <MX_LWIP_Init+0x250>)
 8004a00:	789b      	ldrb	r3, [r3, #2]
 8004a02:	021b      	lsls	r3, r3, #8
 8004a04:	430b      	orrs	r3, r1
 8004a06:	4971      	ldr	r1, [pc, #452]	@ (8004bcc <MX_LWIP_Init+0x250>)
 8004a08:	78c9      	ldrb	r1, [r1, #3]
 8004a0a:	430b      	orrs	r3, r1
 8004a0c:	021b      	lsls	r3, r3, #8
 8004a0e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8004a12:	431a      	orrs	r2, r3
 8004a14:	4b6d      	ldr	r3, [pc, #436]	@ (8004bcc <MX_LWIP_Init+0x250>)
 8004a16:	781b      	ldrb	r3, [r3, #0]
 8004a18:	0619      	lsls	r1, r3, #24
 8004a1a:	4b6c      	ldr	r3, [pc, #432]	@ (8004bcc <MX_LWIP_Init+0x250>)
 8004a1c:	785b      	ldrb	r3, [r3, #1]
 8004a1e:	041b      	lsls	r3, r3, #16
 8004a20:	4319      	orrs	r1, r3
 8004a22:	4b6a      	ldr	r3, [pc, #424]	@ (8004bcc <MX_LWIP_Init+0x250>)
 8004a24:	789b      	ldrb	r3, [r3, #2]
 8004a26:	021b      	lsls	r3, r3, #8
 8004a28:	430b      	orrs	r3, r1
 8004a2a:	4968      	ldr	r1, [pc, #416]	@ (8004bcc <MX_LWIP_Init+0x250>)
 8004a2c:	78c9      	ldrb	r1, [r1, #3]
 8004a2e:	430b      	orrs	r3, r1
 8004a30:	0a1b      	lsrs	r3, r3, #8
 8004a32:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8004a36:	431a      	orrs	r2, r3
 8004a38:	4b64      	ldr	r3, [pc, #400]	@ (8004bcc <MX_LWIP_Init+0x250>)
 8004a3a:	781b      	ldrb	r3, [r3, #0]
 8004a3c:	0619      	lsls	r1, r3, #24
 8004a3e:	4b63      	ldr	r3, [pc, #396]	@ (8004bcc <MX_LWIP_Init+0x250>)
 8004a40:	785b      	ldrb	r3, [r3, #1]
 8004a42:	041b      	lsls	r3, r3, #16
 8004a44:	4319      	orrs	r1, r3
 8004a46:	4b61      	ldr	r3, [pc, #388]	@ (8004bcc <MX_LWIP_Init+0x250>)
 8004a48:	789b      	ldrb	r3, [r3, #2]
 8004a4a:	021b      	lsls	r3, r3, #8
 8004a4c:	430b      	orrs	r3, r1
 8004a4e:	495f      	ldr	r1, [pc, #380]	@ (8004bcc <MX_LWIP_Init+0x250>)
 8004a50:	78c9      	ldrb	r1, [r1, #3]
 8004a52:	430b      	orrs	r3, r1
 8004a54:	0e1b      	lsrs	r3, r3, #24
 8004a56:	4313      	orrs	r3, r2
 8004a58:	4a5f      	ldr	r2, [pc, #380]	@ (8004bd8 <MX_LWIP_Init+0x25c>)
 8004a5a:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8004a5c:	4b5c      	ldr	r3, [pc, #368]	@ (8004bd0 <MX_LWIP_Init+0x254>)
 8004a5e:	781b      	ldrb	r3, [r3, #0]
 8004a60:	061a      	lsls	r2, r3, #24
 8004a62:	4b5b      	ldr	r3, [pc, #364]	@ (8004bd0 <MX_LWIP_Init+0x254>)
 8004a64:	785b      	ldrb	r3, [r3, #1]
 8004a66:	041b      	lsls	r3, r3, #16
 8004a68:	431a      	orrs	r2, r3
 8004a6a:	4b59      	ldr	r3, [pc, #356]	@ (8004bd0 <MX_LWIP_Init+0x254>)
 8004a6c:	789b      	ldrb	r3, [r3, #2]
 8004a6e:	021b      	lsls	r3, r3, #8
 8004a70:	4313      	orrs	r3, r2
 8004a72:	4a57      	ldr	r2, [pc, #348]	@ (8004bd0 <MX_LWIP_Init+0x254>)
 8004a74:	78d2      	ldrb	r2, [r2, #3]
 8004a76:	4313      	orrs	r3, r2
 8004a78:	061a      	lsls	r2, r3, #24
 8004a7a:	4b55      	ldr	r3, [pc, #340]	@ (8004bd0 <MX_LWIP_Init+0x254>)
 8004a7c:	781b      	ldrb	r3, [r3, #0]
 8004a7e:	0619      	lsls	r1, r3, #24
 8004a80:	4b53      	ldr	r3, [pc, #332]	@ (8004bd0 <MX_LWIP_Init+0x254>)
 8004a82:	785b      	ldrb	r3, [r3, #1]
 8004a84:	041b      	lsls	r3, r3, #16
 8004a86:	4319      	orrs	r1, r3
 8004a88:	4b51      	ldr	r3, [pc, #324]	@ (8004bd0 <MX_LWIP_Init+0x254>)
 8004a8a:	789b      	ldrb	r3, [r3, #2]
 8004a8c:	021b      	lsls	r3, r3, #8
 8004a8e:	430b      	orrs	r3, r1
 8004a90:	494f      	ldr	r1, [pc, #316]	@ (8004bd0 <MX_LWIP_Init+0x254>)
 8004a92:	78c9      	ldrb	r1, [r1, #3]
 8004a94:	430b      	orrs	r3, r1
 8004a96:	021b      	lsls	r3, r3, #8
 8004a98:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8004a9c:	431a      	orrs	r2, r3
 8004a9e:	4b4c      	ldr	r3, [pc, #304]	@ (8004bd0 <MX_LWIP_Init+0x254>)
 8004aa0:	781b      	ldrb	r3, [r3, #0]
 8004aa2:	0619      	lsls	r1, r3, #24
 8004aa4:	4b4a      	ldr	r3, [pc, #296]	@ (8004bd0 <MX_LWIP_Init+0x254>)
 8004aa6:	785b      	ldrb	r3, [r3, #1]
 8004aa8:	041b      	lsls	r3, r3, #16
 8004aaa:	4319      	orrs	r1, r3
 8004aac:	4b48      	ldr	r3, [pc, #288]	@ (8004bd0 <MX_LWIP_Init+0x254>)
 8004aae:	789b      	ldrb	r3, [r3, #2]
 8004ab0:	021b      	lsls	r3, r3, #8
 8004ab2:	430b      	orrs	r3, r1
 8004ab4:	4946      	ldr	r1, [pc, #280]	@ (8004bd0 <MX_LWIP_Init+0x254>)
 8004ab6:	78c9      	ldrb	r1, [r1, #3]
 8004ab8:	430b      	orrs	r3, r1
 8004aba:	0a1b      	lsrs	r3, r3, #8
 8004abc:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8004ac0:	431a      	orrs	r2, r3
 8004ac2:	4b43      	ldr	r3, [pc, #268]	@ (8004bd0 <MX_LWIP_Init+0x254>)
 8004ac4:	781b      	ldrb	r3, [r3, #0]
 8004ac6:	0619      	lsls	r1, r3, #24
 8004ac8:	4b41      	ldr	r3, [pc, #260]	@ (8004bd0 <MX_LWIP_Init+0x254>)
 8004aca:	785b      	ldrb	r3, [r3, #1]
 8004acc:	041b      	lsls	r3, r3, #16
 8004ace:	4319      	orrs	r1, r3
 8004ad0:	4b3f      	ldr	r3, [pc, #252]	@ (8004bd0 <MX_LWIP_Init+0x254>)
 8004ad2:	789b      	ldrb	r3, [r3, #2]
 8004ad4:	021b      	lsls	r3, r3, #8
 8004ad6:	430b      	orrs	r3, r1
 8004ad8:	493d      	ldr	r1, [pc, #244]	@ (8004bd0 <MX_LWIP_Init+0x254>)
 8004ada:	78c9      	ldrb	r1, [r1, #3]
 8004adc:	430b      	orrs	r3, r1
 8004ade:	0e1b      	lsrs	r3, r3, #24
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	4a3e      	ldr	r2, [pc, #248]	@ (8004bdc <MX_LWIP_Init+0x260>)
 8004ae4:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8004ae6:	4b3b      	ldr	r3, [pc, #236]	@ (8004bd4 <MX_LWIP_Init+0x258>)
 8004ae8:	781b      	ldrb	r3, [r3, #0]
 8004aea:	061a      	lsls	r2, r3, #24
 8004aec:	4b39      	ldr	r3, [pc, #228]	@ (8004bd4 <MX_LWIP_Init+0x258>)
 8004aee:	785b      	ldrb	r3, [r3, #1]
 8004af0:	041b      	lsls	r3, r3, #16
 8004af2:	431a      	orrs	r2, r3
 8004af4:	4b37      	ldr	r3, [pc, #220]	@ (8004bd4 <MX_LWIP_Init+0x258>)
 8004af6:	789b      	ldrb	r3, [r3, #2]
 8004af8:	021b      	lsls	r3, r3, #8
 8004afa:	4313      	orrs	r3, r2
 8004afc:	4a35      	ldr	r2, [pc, #212]	@ (8004bd4 <MX_LWIP_Init+0x258>)
 8004afe:	78d2      	ldrb	r2, [r2, #3]
 8004b00:	4313      	orrs	r3, r2
 8004b02:	061a      	lsls	r2, r3, #24
 8004b04:	4b33      	ldr	r3, [pc, #204]	@ (8004bd4 <MX_LWIP_Init+0x258>)
 8004b06:	781b      	ldrb	r3, [r3, #0]
 8004b08:	0619      	lsls	r1, r3, #24
 8004b0a:	4b32      	ldr	r3, [pc, #200]	@ (8004bd4 <MX_LWIP_Init+0x258>)
 8004b0c:	785b      	ldrb	r3, [r3, #1]
 8004b0e:	041b      	lsls	r3, r3, #16
 8004b10:	4319      	orrs	r1, r3
 8004b12:	4b30      	ldr	r3, [pc, #192]	@ (8004bd4 <MX_LWIP_Init+0x258>)
 8004b14:	789b      	ldrb	r3, [r3, #2]
 8004b16:	021b      	lsls	r3, r3, #8
 8004b18:	430b      	orrs	r3, r1
 8004b1a:	492e      	ldr	r1, [pc, #184]	@ (8004bd4 <MX_LWIP_Init+0x258>)
 8004b1c:	78c9      	ldrb	r1, [r1, #3]
 8004b1e:	430b      	orrs	r3, r1
 8004b20:	021b      	lsls	r3, r3, #8
 8004b22:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8004b26:	431a      	orrs	r2, r3
 8004b28:	4b2a      	ldr	r3, [pc, #168]	@ (8004bd4 <MX_LWIP_Init+0x258>)
 8004b2a:	781b      	ldrb	r3, [r3, #0]
 8004b2c:	0619      	lsls	r1, r3, #24
 8004b2e:	4b29      	ldr	r3, [pc, #164]	@ (8004bd4 <MX_LWIP_Init+0x258>)
 8004b30:	785b      	ldrb	r3, [r3, #1]
 8004b32:	041b      	lsls	r3, r3, #16
 8004b34:	4319      	orrs	r1, r3
 8004b36:	4b27      	ldr	r3, [pc, #156]	@ (8004bd4 <MX_LWIP_Init+0x258>)
 8004b38:	789b      	ldrb	r3, [r3, #2]
 8004b3a:	021b      	lsls	r3, r3, #8
 8004b3c:	430b      	orrs	r3, r1
 8004b3e:	4925      	ldr	r1, [pc, #148]	@ (8004bd4 <MX_LWIP_Init+0x258>)
 8004b40:	78c9      	ldrb	r1, [r1, #3]
 8004b42:	430b      	orrs	r3, r1
 8004b44:	0a1b      	lsrs	r3, r3, #8
 8004b46:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8004b4a:	431a      	orrs	r2, r3
 8004b4c:	4b21      	ldr	r3, [pc, #132]	@ (8004bd4 <MX_LWIP_Init+0x258>)
 8004b4e:	781b      	ldrb	r3, [r3, #0]
 8004b50:	0619      	lsls	r1, r3, #24
 8004b52:	4b20      	ldr	r3, [pc, #128]	@ (8004bd4 <MX_LWIP_Init+0x258>)
 8004b54:	785b      	ldrb	r3, [r3, #1]
 8004b56:	041b      	lsls	r3, r3, #16
 8004b58:	4319      	orrs	r1, r3
 8004b5a:	4b1e      	ldr	r3, [pc, #120]	@ (8004bd4 <MX_LWIP_Init+0x258>)
 8004b5c:	789b      	ldrb	r3, [r3, #2]
 8004b5e:	021b      	lsls	r3, r3, #8
 8004b60:	430b      	orrs	r3, r1
 8004b62:	491c      	ldr	r1, [pc, #112]	@ (8004bd4 <MX_LWIP_Init+0x258>)
 8004b64:	78c9      	ldrb	r1, [r1, #3]
 8004b66:	430b      	orrs	r3, r1
 8004b68:	0e1b      	lsrs	r3, r3, #24
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	4a1c      	ldr	r2, [pc, #112]	@ (8004be0 <MX_LWIP_Init+0x264>)
 8004b6e:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8004b70:	4b1c      	ldr	r3, [pc, #112]	@ (8004be4 <MX_LWIP_Init+0x268>)
 8004b72:	9302      	str	r3, [sp, #8]
 8004b74:	4b1c      	ldr	r3, [pc, #112]	@ (8004be8 <MX_LWIP_Init+0x26c>)
 8004b76:	9301      	str	r3, [sp, #4]
 8004b78:	2300      	movs	r3, #0
 8004b7a:	9300      	str	r3, [sp, #0]
 8004b7c:	4b18      	ldr	r3, [pc, #96]	@ (8004be0 <MX_LWIP_Init+0x264>)
 8004b7e:	4a17      	ldr	r2, [pc, #92]	@ (8004bdc <MX_LWIP_Init+0x260>)
 8004b80:	4915      	ldr	r1, [pc, #84]	@ (8004bd8 <MX_LWIP_Init+0x25c>)
 8004b82:	481a      	ldr	r0, [pc, #104]	@ (8004bec <MX_LWIP_Init+0x270>)
 8004b84:	f007 fc9e 	bl	800c4c4 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8004b88:	4818      	ldr	r0, [pc, #96]	@ (8004bec <MX_LWIP_Init+0x270>)
 8004b8a:	f007 fe4d 	bl	800c828 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 8004b8e:	4817      	ldr	r0, [pc, #92]	@ (8004bec <MX_LWIP_Init+0x270>)
 8004b90:	f007 fe5a 	bl	800c848 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8004b94:	4916      	ldr	r1, [pc, #88]	@ (8004bf0 <MX_LWIP_Init+0x274>)
 8004b96:	4815      	ldr	r0, [pc, #84]	@ (8004bec <MX_LWIP_Init+0x270>)
 8004b98:	f007 ff58 	bl	800ca4c <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8004b9c:	2224      	movs	r2, #36	@ 0x24
 8004b9e:	2100      	movs	r1, #0
 8004ba0:	4814      	ldr	r0, [pc, #80]	@ (8004bf4 <MX_LWIP_Init+0x278>)
 8004ba2:	f012 f8a6 	bl	8016cf2 <memset>
  attributes.name = "EthLink";
 8004ba6:	4b13      	ldr	r3, [pc, #76]	@ (8004bf4 <MX_LWIP_Init+0x278>)
 8004ba8:	4a13      	ldr	r2, [pc, #76]	@ (8004bf8 <MX_LWIP_Init+0x27c>)
 8004baa:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8004bac:	4b11      	ldr	r3, [pc, #68]	@ (8004bf4 <MX_LWIP_Init+0x278>)
 8004bae:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004bb2:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 8004bb4:	4b0f      	ldr	r3, [pc, #60]	@ (8004bf4 <MX_LWIP_Init+0x278>)
 8004bb6:	2210      	movs	r2, #16
 8004bb8:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 8004bba:	4a0e      	ldr	r2, [pc, #56]	@ (8004bf4 <MX_LWIP_Init+0x278>)
 8004bbc:	490b      	ldr	r1, [pc, #44]	@ (8004bec <MX_LWIP_Init+0x270>)
 8004bbe:	480f      	ldr	r0, [pc, #60]	@ (8004bfc <MX_LWIP_Init+0x280>)
 8004bc0:	f000 fd95 	bl	80056ee <osThreadNew>
/* USER CODE END H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8004bc4:	bf00      	nop
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bd80      	pop	{r7, pc}
 8004bca:	bf00      	nop
 8004bcc:	20000498 	.word	0x20000498
 8004bd0:	2000049c 	.word	0x2000049c
 8004bd4:	200004a0 	.word	0x200004a0
 8004bd8:	2000048c 	.word	0x2000048c
 8004bdc:	20000490 	.word	0x20000490
 8004be0:	20000494 	.word	0x20000494
 8004be4:	0800b841 	.word	0x0800b841
 8004be8:	080050b1 	.word	0x080050b1
 8004bec:	20000458 	.word	0x20000458
 8004bf0:	08004c01 	.word	0x08004c01
 8004bf4:	200004a4 	.word	0x200004a4
 8004bf8:	08017cec 	.word	0x08017cec
 8004bfc:	08005395 	.word	0x08005395

08004c00 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8004c00:	b480      	push	{r7}
 8004c02:	b083      	sub	sp, #12
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8004c08:	bf00      	nop
 8004c0a:	370c      	adds	r7, #12
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c12:	4770      	bx	lr

08004c14 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b082      	sub	sp, #8
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 8004c1c:	4b04      	ldr	r3, [pc, #16]	@ (8004c30 <HAL_ETH_RxCpltCallback+0x1c>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4618      	mov	r0, r3
 8004c22:	f000 fffb 	bl	8005c1c <osSemaphoreRelease>
}
 8004c26:	bf00      	nop
 8004c28:	3708      	adds	r7, #8
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bd80      	pop	{r7, pc}
 8004c2e:	bf00      	nop
 8004c30:	20004f94 	.word	0x20004f94

08004c34 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b082      	sub	sp, #8
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 8004c3c:	4b04      	ldr	r3, [pc, #16]	@ (8004c50 <HAL_ETH_TxCpltCallback+0x1c>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4618      	mov	r0, r3
 8004c42:	f000 ffeb 	bl	8005c1c <osSemaphoreRelease>
}
 8004c46:	bf00      	nop
 8004c48:	3708      	adds	r7, #8
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bd80      	pop	{r7, pc}
 8004c4e:	bf00      	nop
 8004c50:	20004f98 	.word	0x20004f98

08004c54 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b082      	sub	sp, #8
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 8004c5c:	6878      	ldr	r0, [r7, #4]
 8004c5e:	f7fd fd3d 	bl	80026dc <HAL_ETH_GetDMAError>
 8004c62:	4603      	mov	r3, r0
 8004c64:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c68:	2b80      	cmp	r3, #128	@ 0x80
 8004c6a:	d104      	bne.n	8004c76 <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 8004c6c:	4b04      	ldr	r3, [pc, #16]	@ (8004c80 <HAL_ETH_ErrorCallback+0x2c>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4618      	mov	r0, r3
 8004c72:	f000 ffd3 	bl	8005c1c <osSemaphoreRelease>
  }
}
 8004c76:	bf00      	nop
 8004c78:	3708      	adds	r7, #8
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bd80      	pop	{r7, pc}
 8004c7e:	bf00      	nop
 8004c80:	20004f94 	.word	0x20004f94

08004c84 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b0aa      	sub	sp, #168	@ 0xa8
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
/* USER CODE BEGIN OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  osThreadAttr_t attributes;
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  uint32_t duplex, speed = 0;
 8004c92:	2300      	movs	r3, #0
 8004c94:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  int32_t PHYLinkState = 0;
 8004c98:	2300      	movs	r3, #0
 8004c9a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  ETH_MACConfigTypeDef MACConf = {0};
 8004c9e:	f107 0310 	add.w	r3, r7, #16
 8004ca2:	2264      	movs	r2, #100	@ 0x64
 8004ca4:	2100      	movs	r1, #0
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	f012 f823 	bl	8016cf2 <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8004cac:	4b85      	ldr	r3, [pc, #532]	@ (8004ec4 <low_level_init+0x240>)
 8004cae:	4a86      	ldr	r2, [pc, #536]	@ (8004ec8 <low_level_init+0x244>)
 8004cb0:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8004cb6:	2380      	movs	r3, #128	@ 0x80
 8004cb8:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8004cba:	23e1      	movs	r3, #225	@ 0xe1
 8004cbc:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8004cca:	4a7e      	ldr	r2, [pc, #504]	@ (8004ec4 <low_level_init+0x240>)
 8004ccc:	f107 0308 	add.w	r3, r7, #8
 8004cd0:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8004cd2:	4b7c      	ldr	r3, [pc, #496]	@ (8004ec4 <low_level_init+0x240>)
 8004cd4:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004cd8:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8004cda:	4b7a      	ldr	r3, [pc, #488]	@ (8004ec4 <low_level_init+0x240>)
 8004cdc:	4a7b      	ldr	r2, [pc, #492]	@ (8004ecc <low_level_init+0x248>)
 8004cde:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8004ce0:	4b78      	ldr	r3, [pc, #480]	@ (8004ec4 <low_level_init+0x240>)
 8004ce2:	4a7b      	ldr	r2, [pc, #492]	@ (8004ed0 <low_level_init+0x24c>)
 8004ce4:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8004ce6:	4b77      	ldr	r3, [pc, #476]	@ (8004ec4 <low_level_init+0x240>)
 8004ce8:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8004cec:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8004cee:	4875      	ldr	r0, [pc, #468]	@ (8004ec4 <low_level_init+0x240>)
 8004cf0:	f7fc feaa 	bl	8001a48 <HAL_ETH_Init>
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8004cfa:	2238      	movs	r2, #56	@ 0x38
 8004cfc:	2100      	movs	r1, #0
 8004cfe:	4875      	ldr	r0, [pc, #468]	@ (8004ed4 <low_level_init+0x250>)
 8004d00:	f011 fff7 	bl	8016cf2 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8004d04:	4b73      	ldr	r3, [pc, #460]	@ (8004ed4 <low_level_init+0x250>)
 8004d06:	2221      	movs	r2, #33	@ 0x21
 8004d08:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8004d0a:	4b72      	ldr	r3, [pc, #456]	@ (8004ed4 <low_level_init+0x250>)
 8004d0c:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8004d10:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8004d12:	4b70      	ldr	r3, [pc, #448]	@ (8004ed4 <low_level_init+0x250>)
 8004d14:	2200      	movs	r2, #0
 8004d16:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8004d18:	486f      	ldr	r0, [pc, #444]	@ (8004ed8 <low_level_init+0x254>)
 8004d1a:	f007 fa8d 	bl	800c238 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2206      	movs	r2, #6
 8004d22:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8004d26:	4b67      	ldr	r3, [pc, #412]	@ (8004ec4 <low_level_init+0x240>)
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	781a      	ldrb	r2, [r3, #0]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8004d32:	4b64      	ldr	r3, [pc, #400]	@ (8004ec4 <low_level_init+0x240>)
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	785a      	ldrb	r2, [r3, #1]
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8004d3e:	4b61      	ldr	r3, [pc, #388]	@ (8004ec4 <low_level_init+0x240>)
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	789a      	ldrb	r2, [r3, #2]
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8004d4a:	4b5e      	ldr	r3, [pc, #376]	@ (8004ec4 <low_level_init+0x240>)
 8004d4c:	685b      	ldr	r3, [r3, #4]
 8004d4e:	78da      	ldrb	r2, [r3, #3]
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8004d56:	4b5b      	ldr	r3, [pc, #364]	@ (8004ec4 <low_level_init+0x240>)
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	791a      	ldrb	r2, [r3, #4]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8004d62:	4b58      	ldr	r3, [pc, #352]	@ (8004ec4 <low_level_init+0x240>)
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	795a      	ldrb	r2, [r3, #5]
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8004d74:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8004d7c:	f043 030a 	orr.w	r3, r3, #10
 8004d80:	b2da      	uxtb	r2, r3
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = osSemaphoreNew(1, 0, NULL);
 8004d88:	2200      	movs	r2, #0
 8004d8a:	2100      	movs	r1, #0
 8004d8c:	2001      	movs	r0, #1
 8004d8e:	f000 fe69 	bl	8005a64 <osSemaphoreNew>
 8004d92:	4603      	mov	r3, r0
 8004d94:	4a51      	ldr	r2, [pc, #324]	@ (8004edc <low_level_init+0x258>)
 8004d96:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = osSemaphoreNew(1, 0, NULL);
 8004d98:	2200      	movs	r2, #0
 8004d9a:	2100      	movs	r1, #0
 8004d9c:	2001      	movs	r0, #1
 8004d9e:	f000 fe61 	bl	8005a64 <osSemaphoreNew>
 8004da2:	4603      	mov	r3, r0
 8004da4:	4a4e      	ldr	r2, [pc, #312]	@ (8004ee0 <low_level_init+0x25c>)
 8004da6:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8004da8:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8004dac:	2224      	movs	r2, #36	@ 0x24
 8004dae:	2100      	movs	r1, #0
 8004db0:	4618      	mov	r0, r3
 8004db2:	f011 ff9e 	bl	8016cf2 <memset>
  attributes.name = "EthIf";
 8004db6:	4b4b      	ldr	r3, [pc, #300]	@ (8004ee4 <low_level_init+0x260>)
 8004db8:	677b      	str	r3, [r7, #116]	@ 0x74
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8004dba:	f44f 73af 	mov.w	r3, #350	@ 0x15e
 8004dbe:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  attributes.priority = osPriorityRealtime;
 8004dc2:	2330      	movs	r3, #48	@ 0x30
 8004dc4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  osThreadNew(ethernetif_input, netif, &attributes);
 8004dc8:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8004dcc:	461a      	mov	r2, r3
 8004dce:	6879      	ldr	r1, [r7, #4]
 8004dd0:	4845      	ldr	r0, [pc, #276]	@ (8004ee8 <low_level_init+0x264>)
 8004dd2:	f000 fc8c 	bl	80056ee <osThreadNew>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8004dd6:	4945      	ldr	r1, [pc, #276]	@ (8004eec <low_level_init+0x268>)
 8004dd8:	4845      	ldr	r0, [pc, #276]	@ (8004ef0 <low_level_init+0x26c>)
 8004dda:	f7fc fb8c 	bl	80014f6 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 8004dde:	4844      	ldr	r0, [pc, #272]	@ (8004ef0 <low_level_init+0x26c>)
 8004de0:	f7fc fbbb 	bl	800155a <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 8004de4:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d164      	bne.n	8004eb6 <low_level_init+0x232>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8004dec:	4840      	ldr	r0, [pc, #256]	@ (8004ef0 <low_level_init+0x26c>)
 8004dee:	f7fc fc5c 	bl	80016aa <LAN8742_GetLinkState>
 8004df2:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 8004df6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004dfa:	2b01      	cmp	r3, #1
 8004dfc:	dc06      	bgt.n	8004e0c <low_level_init+0x188>
    {
      netif_set_link_down(netif);
 8004dfe:	6878      	ldr	r0, [r7, #4]
 8004e00:	f007 fdf4 	bl	800c9ec <netif_set_link_down>
      netif_set_down(netif);
 8004e04:	6878      	ldr	r0, [r7, #4]
 8004e06:	f007 fd8b 	bl	800c920 <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8004e0a:	e056      	b.n	8004eba <low_level_init+0x236>
      switch (PHYLinkState)
 8004e0c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004e10:	3b02      	subs	r3, #2
 8004e12:	2b03      	cmp	r3, #3
 8004e14:	d82a      	bhi.n	8004e6c <low_level_init+0x1e8>
 8004e16:	a201      	add	r2, pc, #4	@ (adr r2, 8004e1c <low_level_init+0x198>)
 8004e18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e1c:	08004e2d 	.word	0x08004e2d
 8004e20:	08004e3f 	.word	0x08004e3f
 8004e24:	08004e4f 	.word	0x08004e4f
 8004e28:	08004e5f 	.word	0x08004e5f
        duplex = ETH_FULLDUPLEX_MODE;
 8004e2c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004e30:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 8004e34:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004e38:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 8004e3c:	e01f      	b.n	8004e7e <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 8004e3e:	2300      	movs	r3, #0
 8004e40:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 8004e44:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004e48:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 8004e4c:	e017      	b.n	8004e7e <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 8004e4e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004e52:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_10M;
 8004e56:	2300      	movs	r3, #0
 8004e58:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 8004e5c:	e00f      	b.n	8004e7e <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 8004e5e:	2300      	movs	r3, #0
 8004e60:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_10M;
 8004e64:	2300      	movs	r3, #0
 8004e66:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 8004e6a:	e008      	b.n	8004e7e <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 8004e6c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004e70:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 8004e74:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004e78:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 8004e7c:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 8004e7e:	f107 0310 	add.w	r3, r7, #16
 8004e82:	4619      	mov	r1, r3
 8004e84:	480f      	ldr	r0, [pc, #60]	@ (8004ec4 <low_level_init+0x240>)
 8004e86:	f7fd facf 	bl	8002428 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 8004e8a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004e8e:	62bb      	str	r3, [r7, #40]	@ 0x28
    MACConf.Speed = speed;
 8004e90:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004e94:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 8004e96:	f107 0310 	add.w	r3, r7, #16
 8004e9a:	4619      	mov	r1, r3
 8004e9c:	4809      	ldr	r0, [pc, #36]	@ (8004ec4 <low_level_init+0x240>)
 8004e9e:	f7fd fbad 	bl	80025fc <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 8004ea2:	4808      	ldr	r0, [pc, #32]	@ (8004ec4 <low_level_init+0x240>)
 8004ea4:	f7fc fe4e 	bl	8001b44 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 8004ea8:	6878      	ldr	r0, [r7, #4]
 8004eaa:	f007 fccd 	bl	800c848 <netif_set_up>
    netif_set_link_up(netif);
 8004eae:	6878      	ldr	r0, [r7, #4]
 8004eb0:	f007 fd68 	bl	800c984 <netif_set_link_up>
}
 8004eb4:	e001      	b.n	8004eba <low_level_init+0x236>
    Error_Handler();
 8004eb6:	f7fb fd5b 	bl	8000970 <Error_Handler>
}
 8004eba:	bf00      	nop
 8004ebc:	37a8      	adds	r7, #168	@ 0xa8
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bd80      	pop	{r7, pc}
 8004ec2:	bf00      	nop
 8004ec4:	20004f9c 	.word	0x20004f9c
 8004ec8:	40028000 	.word	0x40028000
 8004ecc:	20004ef4 	.word	0x20004ef4
 8004ed0:	20004e54 	.word	0x20004e54
 8004ed4:	2000504c 	.word	0x2000504c
 8004ed8:	0801b274 	.word	0x0801b274
 8004edc:	20004f94 	.word	0x20004f94
 8004ee0:	20004f98 	.word	0x20004f98
 8004ee4:	08017cf4 	.word	0x08017cf4
 8004ee8:	0800505d 	.word	0x0800505d
 8004eec:	2000010c 	.word	0x2000010c
 8004ef0:	20005084 	.word	0x20005084

08004ef4 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b092      	sub	sp, #72	@ 0x48
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
 8004efc:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8004efe:	2300      	movs	r3, #0
 8004f00:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 8004f02:	2300      	movs	r3, #0
 8004f04:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 8004f06:	2300      	movs	r3, #0
 8004f08:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8004f0c:	f107 030c 	add.w	r3, r7, #12
 8004f10:	2230      	movs	r2, #48	@ 0x30
 8004f12:	2100      	movs	r1, #0
 8004f14:	4618      	mov	r0, r3
 8004f16:	f011 feec 	bl	8016cf2 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8004f1a:	f107 030c 	add.w	r3, r7, #12
 8004f1e:	2230      	movs	r2, #48	@ 0x30
 8004f20:	2100      	movs	r1, #0
 8004f22:	4618      	mov	r0, r3
 8004f24:	f011 fee5 	bl	8016cf2 <memset>

  for(q = p; q != NULL; q = q->next)
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	643b      	str	r3, [r7, #64]	@ 0x40
 8004f2c:	e045      	b.n	8004fba <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8004f2e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004f30:	2b03      	cmp	r3, #3
 8004f32:	d902      	bls.n	8004f3a <low_level_output+0x46>
      return ERR_IF;
 8004f34:	f06f 030b 	mvn.w	r3, #11
 8004f38:	e06c      	b.n	8005014 <low_level_output+0x120>

    Txbuffer[i].buffer = q->payload;
 8004f3a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004f3c:	6859      	ldr	r1, [r3, #4]
 8004f3e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004f40:	4613      	mov	r3, r2
 8004f42:	005b      	lsls	r3, r3, #1
 8004f44:	4413      	add	r3, r2
 8004f46:	009b      	lsls	r3, r3, #2
 8004f48:	3348      	adds	r3, #72	@ 0x48
 8004f4a:	443b      	add	r3, r7
 8004f4c:	3b3c      	subs	r3, #60	@ 0x3c
 8004f4e:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8004f50:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004f52:	895b      	ldrh	r3, [r3, #10]
 8004f54:	4619      	mov	r1, r3
 8004f56:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004f58:	4613      	mov	r3, r2
 8004f5a:	005b      	lsls	r3, r3, #1
 8004f5c:	4413      	add	r3, r2
 8004f5e:	009b      	lsls	r3, r3, #2
 8004f60:	3348      	adds	r3, #72	@ 0x48
 8004f62:	443b      	add	r3, r7
 8004f64:	3b38      	subs	r3, #56	@ 0x38
 8004f66:	6019      	str	r1, [r3, #0]

    if(i>0)
 8004f68:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d011      	beq.n	8004f92 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8004f6e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004f70:	1e5a      	subs	r2, r3, #1
 8004f72:	f107 000c 	add.w	r0, r7, #12
 8004f76:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004f78:	460b      	mov	r3, r1
 8004f7a:	005b      	lsls	r3, r3, #1
 8004f7c:	440b      	add	r3, r1
 8004f7e:	009b      	lsls	r3, r3, #2
 8004f80:	18c1      	adds	r1, r0, r3
 8004f82:	4613      	mov	r3, r2
 8004f84:	005b      	lsls	r3, r3, #1
 8004f86:	4413      	add	r3, r2
 8004f88:	009b      	lsls	r3, r3, #2
 8004f8a:	3348      	adds	r3, #72	@ 0x48
 8004f8c:	443b      	add	r3, r7
 8004f8e:	3b34      	subs	r3, #52	@ 0x34
 8004f90:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8004f92:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d109      	bne.n	8004fae <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8004f9a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004f9c:	4613      	mov	r3, r2
 8004f9e:	005b      	lsls	r3, r3, #1
 8004fa0:	4413      	add	r3, r2
 8004fa2:	009b      	lsls	r3, r3, #2
 8004fa4:	3348      	adds	r3, #72	@ 0x48
 8004fa6:	443b      	add	r3, r7
 8004fa8:	3b34      	subs	r3, #52	@ 0x34
 8004faa:	2200      	movs	r2, #0
 8004fac:	601a      	str	r2, [r3, #0]
    }

    i++;
 8004fae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004fb0:	3301      	adds	r3, #1
 8004fb2:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 8004fb4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	643b      	str	r3, [r7, #64]	@ 0x40
 8004fba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d1b6      	bne.n	8004f2e <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	891b      	ldrh	r3, [r3, #8]
 8004fc4:	461a      	mov	r2, r3
 8004fc6:	4b15      	ldr	r3, [pc, #84]	@ (800501c <low_level_output+0x128>)
 8004fc8:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8004fca:	4a14      	ldr	r2, [pc, #80]	@ (800501c <low_level_output+0x128>)
 8004fcc:	f107 030c 	add.w	r3, r7, #12
 8004fd0:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8004fd2:	4a12      	ldr	r2, [pc, #72]	@ (800501c <low_level_output+0x128>)
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	6353      	str	r3, [r2, #52]	@ 0x34

  pbuf_ref(p);
 8004fd8:	6838      	ldr	r0, [r7, #0]
 8004fda:	f008 f98b 	bl	800d2f4 <pbuf_ref>

  if (HAL_ETH_Transmit_IT(&heth, &TxConfig) == HAL_OK) {
 8004fde:	490f      	ldr	r1, [pc, #60]	@ (800501c <low_level_output+0x128>)
 8004fe0:	480f      	ldr	r0, [pc, #60]	@ (8005020 <low_level_output+0x12c>)
 8004fe2:	f7fc febc 	bl	8001d5e <HAL_ETH_Transmit_IT>
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d10e      	bne.n	800500a <low_level_output+0x116>
    while(osSemaphoreAcquire(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 8004fec:	bf00      	nop
 8004fee:	4b0d      	ldr	r3, [pc, #52]	@ (8005024 <low_level_output+0x130>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f04f 31ff 	mov.w	r1, #4294967295
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	f000 fdbe 	bl	8005b78 <osSemaphoreAcquire>
 8004ffc:	4603      	mov	r3, r0
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d1f5      	bne.n	8004fee <low_level_output+0xfa>

    {
    }

    HAL_ETH_ReleaseTxPacket(&heth);
 8005002:	4807      	ldr	r0, [pc, #28]	@ (8005020 <low_level_output+0x12c>)
 8005004:	f7fd f84a 	bl	800209c <HAL_ETH_ReleaseTxPacket>
 8005008:	e002      	b.n	8005010 <low_level_output+0x11c>
  } else {
    pbuf_free(p);
 800500a:	6838      	ldr	r0, [r7, #0]
 800500c:	f008 f8cc 	bl	800d1a8 <pbuf_free>
  }

  return errval;
 8005010:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 8005014:	4618      	mov	r0, r3
 8005016:	3748      	adds	r7, #72	@ 0x48
 8005018:	46bd      	mov	sp, r7
 800501a:	bd80      	pop	{r7, pc}
 800501c:	2000504c 	.word	0x2000504c
 8005020:	20004f9c 	.word	0x20004f9c
 8005024:	20004f98 	.word	0x20004f98

08005028 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b084      	sub	sp, #16
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8005030:	2300      	movs	r3, #0
 8005032:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8005034:	4b07      	ldr	r3, [pc, #28]	@ (8005054 <low_level_input+0x2c>)
 8005036:	781b      	ldrb	r3, [r3, #0]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d105      	bne.n	8005048 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 800503c:	f107 030c 	add.w	r3, r7, #12
 8005040:	4619      	mov	r1, r3
 8005042:	4805      	ldr	r0, [pc, #20]	@ (8005058 <low_level_input+0x30>)
 8005044:	f7fc fee7 	bl	8001e16 <HAL_ETH_ReadData>
  }

  return p;
 8005048:	68fb      	ldr	r3, [r7, #12]
}
 800504a:	4618      	mov	r0, r3
 800504c:	3710      	adds	r7, #16
 800504e:	46bd      	mov	sp, r7
 8005050:	bd80      	pop	{r7, pc}
 8005052:	bf00      	nop
 8005054:	20004e50 	.word	0x20004e50
 8005058:	20004f9c 	.word	0x20004f9c

0800505c <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b084      	sub	sp, #16
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8005064:	2300      	movs	r3, #0
 8005066:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800506c:	4b0f      	ldr	r3, [pc, #60]	@ (80050ac <ethernetif_input+0x50>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f04f 31ff 	mov.w	r1, #4294967295
 8005074:	4618      	mov	r0, r3
 8005076:	f000 fd7f 	bl	8005b78 <osSemaphoreAcquire>
 800507a:	4603      	mov	r3, r0
 800507c:	2b00      	cmp	r3, #0
 800507e:	d1f5      	bne.n	800506c <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 8005080:	68b8      	ldr	r0, [r7, #8]
 8005082:	f7ff ffd1 	bl	8005028 <low_level_input>
 8005086:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d00a      	beq.n	80050a4 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	691b      	ldr	r3, [r3, #16]
 8005092:	68b9      	ldr	r1, [r7, #8]
 8005094:	68f8      	ldr	r0, [r7, #12]
 8005096:	4798      	blx	r3
 8005098:	4603      	mov	r3, r0
 800509a:	2b00      	cmp	r3, #0
 800509c:	d002      	beq.n	80050a4 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 800509e:	68f8      	ldr	r0, [r7, #12]
 80050a0:	f008 f882 	bl	800d1a8 <pbuf_free>
          }
        }
      } while(p!=NULL);
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d1ea      	bne.n	8005080 <ethernetif_input+0x24>
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 80050aa:	e7df      	b.n	800506c <ethernetif_input+0x10>
 80050ac:	20004f94 	.word	0x20004f94

080050b0 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b082      	sub	sp, #8
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d106      	bne.n	80050cc <ethernetif_init+0x1c>
 80050be:	4b0e      	ldr	r3, [pc, #56]	@ (80050f8 <ethernetif_init+0x48>)
 80050c0:	f240 12e7 	movw	r2, #487	@ 0x1e7
 80050c4:	490d      	ldr	r1, [pc, #52]	@ (80050fc <ethernetif_init+0x4c>)
 80050c6:	480e      	ldr	r0, [pc, #56]	@ (8005100 <ethernetif_init+0x50>)
 80050c8:	f011 fdae 	bl	8016c28 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2273      	movs	r2, #115	@ 0x73
 80050d0:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2274      	movs	r2, #116	@ 0x74
 80050d8:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	4a09      	ldr	r2, [pc, #36]	@ (8005104 <ethernetif_init+0x54>)
 80050e0:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	4a08      	ldr	r2, [pc, #32]	@ (8005108 <ethernetif_init+0x58>)
 80050e6:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 80050e8:	6878      	ldr	r0, [r7, #4]
 80050ea:	f7ff fdcb 	bl	8004c84 <low_level_init>

  return ERR_OK;
 80050ee:	2300      	movs	r3, #0
}
 80050f0:	4618      	mov	r0, r3
 80050f2:	3708      	adds	r7, #8
 80050f4:	46bd      	mov	sp, r7
 80050f6:	bd80      	pop	{r7, pc}
 80050f8:	08017cfc 	.word	0x08017cfc
 80050fc:	08017d18 	.word	0x08017d18
 8005100:	08017d28 	.word	0x08017d28
 8005104:	080149c9 	.word	0x080149c9
 8005108:	08004ef5 	.word	0x08004ef5

0800510c <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b084      	sub	sp, #16
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8005118:	68f9      	ldr	r1, [r7, #12]
 800511a:	4809      	ldr	r0, [pc, #36]	@ (8005140 <pbuf_free_custom+0x34>)
 800511c:	f007 f97c 	bl	800c418 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8005120:	4b08      	ldr	r3, [pc, #32]	@ (8005144 <pbuf_free_custom+0x38>)
 8005122:	781b      	ldrb	r3, [r3, #0]
 8005124:	2b01      	cmp	r3, #1
 8005126:	d107      	bne.n	8005138 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8005128:	4b06      	ldr	r3, [pc, #24]	@ (8005144 <pbuf_free_custom+0x38>)
 800512a:	2200      	movs	r2, #0
 800512c:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 800512e:	4b06      	ldr	r3, [pc, #24]	@ (8005148 <pbuf_free_custom+0x3c>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4618      	mov	r0, r3
 8005134:	f000 fd72 	bl	8005c1c <osSemaphoreRelease>
  }
}
 8005138:	bf00      	nop
 800513a:	3710      	adds	r7, #16
 800513c:	46bd      	mov	sp, r7
 800513e:	bd80      	pop	{r7, pc}
 8005140:	0801b274 	.word	0x0801b274
 8005144:	20004e50 	.word	0x20004e50
 8005148:	20004f94 	.word	0x20004f94

0800514c <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8005150:	f7fc fb68 	bl	8001824 <HAL_GetTick>
 8005154:	4603      	mov	r3, r0
}
 8005156:	4618      	mov	r0, r3
 8005158:	bd80      	pop	{r7, pc}
	...

0800515c <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b08e      	sub	sp, #56	@ 0x38
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005164:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005168:	2200      	movs	r2, #0
 800516a:	601a      	str	r2, [r3, #0]
 800516c:	605a      	str	r2, [r3, #4]
 800516e:	609a      	str	r2, [r3, #8]
 8005170:	60da      	str	r2, [r3, #12]
 8005172:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a59      	ldr	r2, [pc, #356]	@ (80052e0 <HAL_ETH_MspInit+0x184>)
 800517a:	4293      	cmp	r3, r2
 800517c:	f040 80ac 	bne.w	80052d8 <HAL_ETH_MspInit+0x17c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8005180:	2300      	movs	r3, #0
 8005182:	623b      	str	r3, [r7, #32]
 8005184:	4b57      	ldr	r3, [pc, #348]	@ (80052e4 <HAL_ETH_MspInit+0x188>)
 8005186:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005188:	4a56      	ldr	r2, [pc, #344]	@ (80052e4 <HAL_ETH_MspInit+0x188>)
 800518a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800518e:	6313      	str	r3, [r2, #48]	@ 0x30
 8005190:	4b54      	ldr	r3, [pc, #336]	@ (80052e4 <HAL_ETH_MspInit+0x188>)
 8005192:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005194:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005198:	623b      	str	r3, [r7, #32]
 800519a:	6a3b      	ldr	r3, [r7, #32]
 800519c:	2300      	movs	r3, #0
 800519e:	61fb      	str	r3, [r7, #28]
 80051a0:	4b50      	ldr	r3, [pc, #320]	@ (80052e4 <HAL_ETH_MspInit+0x188>)
 80051a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051a4:	4a4f      	ldr	r2, [pc, #316]	@ (80052e4 <HAL_ETH_MspInit+0x188>)
 80051a6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80051aa:	6313      	str	r3, [r2, #48]	@ 0x30
 80051ac:	4b4d      	ldr	r3, [pc, #308]	@ (80052e4 <HAL_ETH_MspInit+0x188>)
 80051ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051b0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80051b4:	61fb      	str	r3, [r7, #28]
 80051b6:	69fb      	ldr	r3, [r7, #28]
 80051b8:	2300      	movs	r3, #0
 80051ba:	61bb      	str	r3, [r7, #24]
 80051bc:	4b49      	ldr	r3, [pc, #292]	@ (80052e4 <HAL_ETH_MspInit+0x188>)
 80051be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051c0:	4a48      	ldr	r2, [pc, #288]	@ (80052e4 <HAL_ETH_MspInit+0x188>)
 80051c2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80051c6:	6313      	str	r3, [r2, #48]	@ 0x30
 80051c8:	4b46      	ldr	r3, [pc, #280]	@ (80052e4 <HAL_ETH_MspInit+0x188>)
 80051ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051cc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80051d0:	61bb      	str	r3, [r7, #24]
 80051d2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80051d4:	2300      	movs	r3, #0
 80051d6:	617b      	str	r3, [r7, #20]
 80051d8:	4b42      	ldr	r3, [pc, #264]	@ (80052e4 <HAL_ETH_MspInit+0x188>)
 80051da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051dc:	4a41      	ldr	r2, [pc, #260]	@ (80052e4 <HAL_ETH_MspInit+0x188>)
 80051de:	f043 0304 	orr.w	r3, r3, #4
 80051e2:	6313      	str	r3, [r2, #48]	@ 0x30
 80051e4:	4b3f      	ldr	r3, [pc, #252]	@ (80052e4 <HAL_ETH_MspInit+0x188>)
 80051e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051e8:	f003 0304 	and.w	r3, r3, #4
 80051ec:	617b      	str	r3, [r7, #20]
 80051ee:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80051f0:	2300      	movs	r3, #0
 80051f2:	613b      	str	r3, [r7, #16]
 80051f4:	4b3b      	ldr	r3, [pc, #236]	@ (80052e4 <HAL_ETH_MspInit+0x188>)
 80051f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051f8:	4a3a      	ldr	r2, [pc, #232]	@ (80052e4 <HAL_ETH_MspInit+0x188>)
 80051fa:	f043 0301 	orr.w	r3, r3, #1
 80051fe:	6313      	str	r3, [r2, #48]	@ 0x30
 8005200:	4b38      	ldr	r3, [pc, #224]	@ (80052e4 <HAL_ETH_MspInit+0x188>)
 8005202:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005204:	f003 0301 	and.w	r3, r3, #1
 8005208:	613b      	str	r3, [r7, #16]
 800520a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800520c:	2300      	movs	r3, #0
 800520e:	60fb      	str	r3, [r7, #12]
 8005210:	4b34      	ldr	r3, [pc, #208]	@ (80052e4 <HAL_ETH_MspInit+0x188>)
 8005212:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005214:	4a33      	ldr	r2, [pc, #204]	@ (80052e4 <HAL_ETH_MspInit+0x188>)
 8005216:	f043 0302 	orr.w	r3, r3, #2
 800521a:	6313      	str	r3, [r2, #48]	@ 0x30
 800521c:	4b31      	ldr	r3, [pc, #196]	@ (80052e4 <HAL_ETH_MspInit+0x188>)
 800521e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005220:	f003 0302 	and.w	r3, r3, #2
 8005224:	60fb      	str	r3, [r7, #12]
 8005226:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8005228:	2300      	movs	r3, #0
 800522a:	60bb      	str	r3, [r7, #8]
 800522c:	4b2d      	ldr	r3, [pc, #180]	@ (80052e4 <HAL_ETH_MspInit+0x188>)
 800522e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005230:	4a2c      	ldr	r2, [pc, #176]	@ (80052e4 <HAL_ETH_MspInit+0x188>)
 8005232:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005236:	6313      	str	r3, [r2, #48]	@ 0x30
 8005238:	4b2a      	ldr	r3, [pc, #168]	@ (80052e4 <HAL_ETH_MspInit+0x188>)
 800523a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800523c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005240:	60bb      	str	r3, [r7, #8]
 8005242:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8005244:	2332      	movs	r3, #50	@ 0x32
 8005246:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005248:	2302      	movs	r3, #2
 800524a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800524c:	2300      	movs	r3, #0
 800524e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005250:	2303      	movs	r3, #3
 8005252:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005254:	230b      	movs	r3, #11
 8005256:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005258:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800525c:	4619      	mov	r1, r3
 800525e:	4822      	ldr	r0, [pc, #136]	@ (80052e8 <HAL_ETH_MspInit+0x18c>)
 8005260:	f7fd fe4e 	bl	8002f00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8005264:	2386      	movs	r3, #134	@ 0x86
 8005266:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005268:	2302      	movs	r3, #2
 800526a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800526c:	2300      	movs	r3, #0
 800526e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005270:	2303      	movs	r3, #3
 8005272:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005274:	230b      	movs	r3, #11
 8005276:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005278:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800527c:	4619      	mov	r1, r3
 800527e:	481b      	ldr	r0, [pc, #108]	@ (80052ec <HAL_ETH_MspInit+0x190>)
 8005280:	f7fd fe3e 	bl	8002f00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8005284:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005288:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800528a:	2302      	movs	r3, #2
 800528c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800528e:	2300      	movs	r3, #0
 8005290:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005292:	2303      	movs	r3, #3
 8005294:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005296:	230b      	movs	r3, #11
 8005298:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800529a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800529e:	4619      	mov	r1, r3
 80052a0:	4813      	ldr	r0, [pc, #76]	@ (80052f0 <HAL_ETH_MspInit+0x194>)
 80052a2:	f7fd fe2d 	bl	8002f00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 80052a6:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80052aa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052ac:	2302      	movs	r3, #2
 80052ae:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052b0:	2300      	movs	r3, #0
 80052b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80052b4:	2303      	movs	r3, #3
 80052b6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80052b8:	230b      	movs	r3, #11
 80052ba:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80052bc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80052c0:	4619      	mov	r1, r3
 80052c2:	480c      	ldr	r0, [pc, #48]	@ (80052f4 <HAL_ETH_MspInit+0x198>)
 80052c4:	f7fd fe1c 	bl	8002f00 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 80052c8:	2200      	movs	r2, #0
 80052ca:	2105      	movs	r1, #5
 80052cc:	203d      	movs	r0, #61	@ 0x3d
 80052ce:	f7fc fb91 	bl	80019f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 80052d2:	203d      	movs	r0, #61	@ 0x3d
 80052d4:	f7fc fbaa 	bl	8001a2c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80052d8:	bf00      	nop
 80052da:	3738      	adds	r7, #56	@ 0x38
 80052dc:	46bd      	mov	sp, r7
 80052de:	bd80      	pop	{r7, pc}
 80052e0:	40028000 	.word	0x40028000
 80052e4:	40023800 	.word	0x40023800
 80052e8:	40020800 	.word	0x40020800
 80052ec:	40020000 	.word	0x40020000
 80052f0:	40020400 	.word	0x40020400
 80052f4:	40021800 	.word	0x40021800

080052f8 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 80052fc:	4802      	ldr	r0, [pc, #8]	@ (8005308 <ETH_PHY_IO_Init+0x10>)
 80052fe:	f7fd f997 	bl	8002630 <HAL_ETH_SetMDIOClockRange>

  return 0;
 8005302:	2300      	movs	r3, #0
}
 8005304:	4618      	mov	r0, r3
 8005306:	bd80      	pop	{r7, pc}
 8005308:	20004f9c 	.word	0x20004f9c

0800530c <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 800530c:	b480      	push	{r7}
 800530e:	af00      	add	r7, sp, #0
  return 0;
 8005310:	2300      	movs	r3, #0
}
 8005312:	4618      	mov	r0, r3
 8005314:	46bd      	mov	sp, r7
 8005316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531a:	4770      	bx	lr

0800531c <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b084      	sub	sp, #16
 8005320:	af00      	add	r7, sp, #0
 8005322:	60f8      	str	r0, [r7, #12]
 8005324:	60b9      	str	r1, [r7, #8]
 8005326:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	68ba      	ldr	r2, [r7, #8]
 800532c:	68f9      	ldr	r1, [r7, #12]
 800532e:	4807      	ldr	r0, [pc, #28]	@ (800534c <ETH_PHY_IO_ReadReg+0x30>)
 8005330:	f7fc ffe6 	bl	8002300 <HAL_ETH_ReadPHYRegister>
 8005334:	4603      	mov	r3, r0
 8005336:	2b00      	cmp	r3, #0
 8005338:	d002      	beq.n	8005340 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800533a:	f04f 33ff 	mov.w	r3, #4294967295
 800533e:	e000      	b.n	8005342 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8005340:	2300      	movs	r3, #0
}
 8005342:	4618      	mov	r0, r3
 8005344:	3710      	adds	r7, #16
 8005346:	46bd      	mov	sp, r7
 8005348:	bd80      	pop	{r7, pc}
 800534a:	bf00      	nop
 800534c:	20004f9c 	.word	0x20004f9c

08005350 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b084      	sub	sp, #16
 8005354:	af00      	add	r7, sp, #0
 8005356:	60f8      	str	r0, [r7, #12]
 8005358:	60b9      	str	r1, [r7, #8]
 800535a:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	68ba      	ldr	r2, [r7, #8]
 8005360:	68f9      	ldr	r1, [r7, #12]
 8005362:	4807      	ldr	r0, [pc, #28]	@ (8005380 <ETH_PHY_IO_WriteReg+0x30>)
 8005364:	f7fd f817 	bl	8002396 <HAL_ETH_WritePHYRegister>
 8005368:	4603      	mov	r3, r0
 800536a:	2b00      	cmp	r3, #0
 800536c:	d002      	beq.n	8005374 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800536e:	f04f 33ff 	mov.w	r3, #4294967295
 8005372:	e000      	b.n	8005376 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8005374:	2300      	movs	r3, #0
}
 8005376:	4618      	mov	r0, r3
 8005378:	3710      	adds	r7, #16
 800537a:	46bd      	mov	sp, r7
 800537c:	bd80      	pop	{r7, pc}
 800537e:	bf00      	nop
 8005380:	20004f9c 	.word	0x20004f9c

08005384 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8005388:	f7fc fa4c 	bl	8001824 <HAL_GetTick>
 800538c:	4603      	mov	r3, r0
}
 800538e:	4618      	mov	r0, r3
 8005390:	bd80      	pop	{r7, pc}
	...

08005394 <ethernet_link_thread>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_thread(void* argument)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b0a0      	sub	sp, #128	@ 0x80
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 800539c:	f107 0308 	add.w	r3, r7, #8
 80053a0:	2264      	movs	r2, #100	@ 0x64
 80053a2:	2100      	movs	r1, #0
 80053a4:	4618      	mov	r0, r3
 80053a6:	f011 fca4 	bl	8016cf2 <memset>
  int32_t PHYLinkState = 0;
 80053aa:	2300      	movs	r3, #0
 80053ac:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 80053ae:	2300      	movs	r3, #0
 80053b0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80053b2:	2300      	movs	r3, #0
 80053b4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80053b6:	2300      	movs	r3, #0
 80053b8:	677b      	str	r3, [r7, #116]	@ 0x74

  struct netif *netif = (struct netif *) argument;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	66fb      	str	r3, [r7, #108]	@ 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 80053be:	483a      	ldr	r0, [pc, #232]	@ (80054a8 <ethernet_link_thread+0x114>)
 80053c0:	f7fc f973 	bl	80016aa <LAN8742_GetLinkState>
 80053c4:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 80053c6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80053c8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80053cc:	089b      	lsrs	r3, r3, #2
 80053ce:	f003 0301 	and.w	r3, r3, #1
 80053d2:	b2db      	uxtb	r3, r3
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d00c      	beq.n	80053f2 <ethernet_link_thread+0x5e>
 80053d8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80053da:	2b01      	cmp	r3, #1
 80053dc:	dc09      	bgt.n	80053f2 <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 80053de:	4833      	ldr	r0, [pc, #204]	@ (80054ac <ethernet_link_thread+0x118>)
 80053e0:	f7fc fc3e 	bl	8001c60 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 80053e4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80053e6:	f007 fa9b 	bl	800c920 <netif_set_down>
    netif_set_link_down(netif);
 80053ea:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80053ec:	f007 fafe 	bl	800c9ec <netif_set_link_down>
 80053f0:	e055      	b.n	800549e <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 80053f2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80053f4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80053f8:	f003 0304 	and.w	r3, r3, #4
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d14e      	bne.n	800549e <ethernet_link_thread+0x10a>
 8005400:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005402:	2b01      	cmp	r3, #1
 8005404:	dd4b      	ble.n	800549e <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 8005406:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005408:	3b02      	subs	r3, #2
 800540a:	2b03      	cmp	r3, #3
 800540c:	d82a      	bhi.n	8005464 <ethernet_link_thread+0xd0>
 800540e:	a201      	add	r2, pc, #4	@ (adr r2, 8005414 <ethernet_link_thread+0x80>)
 8005410:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005414:	08005425 	.word	0x08005425
 8005418:	08005437 	.word	0x08005437
 800541c:	08005447 	.word	0x08005447
 8005420:	08005457 	.word	0x08005457
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8005424:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005428:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 800542a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800542e:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8005430:	2301      	movs	r3, #1
 8005432:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8005434:	e017      	b.n	8005466 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8005436:	2300      	movs	r3, #0
 8005438:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 800543a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800543e:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8005440:	2301      	movs	r3, #1
 8005442:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8005444:	e00f      	b.n	8005466 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8005446:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800544a:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 800544c:	2300      	movs	r3, #0
 800544e:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8005450:	2301      	movs	r3, #1
 8005452:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8005454:	e007      	b.n	8005466 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8005456:	2300      	movs	r3, #0
 8005458:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 800545a:	2300      	movs	r3, #0
 800545c:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800545e:	2301      	movs	r3, #1
 8005460:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8005462:	e000      	b.n	8005466 <ethernet_link_thread+0xd2>
    default:
      break;
 8005464:	bf00      	nop
    }

    if(linkchanged)
 8005466:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005468:	2b00      	cmp	r3, #0
 800546a:	d018      	beq.n	800549e <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 800546c:	f107 0308 	add.w	r3, r7, #8
 8005470:	4619      	mov	r1, r3
 8005472:	480e      	ldr	r0, [pc, #56]	@ (80054ac <ethernet_link_thread+0x118>)
 8005474:	f7fc ffd8 	bl	8002428 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8005478:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800547a:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 800547c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800547e:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8005480:	f107 0308 	add.w	r3, r7, #8
 8005484:	4619      	mov	r1, r3
 8005486:	4809      	ldr	r0, [pc, #36]	@ (80054ac <ethernet_link_thread+0x118>)
 8005488:	f7fd f8b8 	bl	80025fc <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 800548c:	4807      	ldr	r0, [pc, #28]	@ (80054ac <ethernet_link_thread+0x118>)
 800548e:	f7fc fb59 	bl	8001b44 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 8005492:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005494:	f007 f9d8 	bl	800c848 <netif_set_up>
      netif_set_link_up(netif);
 8005498:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800549a:	f007 fa73 	bl	800c984 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 800549e:	2064      	movs	r0, #100	@ 0x64
 80054a0:	f000 f9b7 	bl	8005812 <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 80054a4:	e78b      	b.n	80053be <ethernet_link_thread+0x2a>
 80054a6:	bf00      	nop
 80054a8:	20005084 	.word	0x20005084
 80054ac:	20004f9c 	.word	0x20004f9c

080054b0 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b086      	sub	sp, #24
 80054b4:	af02      	add	r7, sp, #8
 80054b6:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 80054b8:	4812      	ldr	r0, [pc, #72]	@ (8005504 <HAL_ETH_RxAllocateCallback+0x54>)
 80054ba:	f006 ff39 	bl	800c330 <memp_malloc_pool>
 80054be:	60f8      	str	r0, [r7, #12]
  if (p)
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d014      	beq.n	80054f0 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	f103 0220 	add.w	r2, r3, #32
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	4a0d      	ldr	r2, [pc, #52]	@ (8005508 <HAL_ETH_RxAllocateCallback+0x58>)
 80054d4:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 80054de:	9201      	str	r2, [sp, #4]
 80054e0:	9300      	str	r3, [sp, #0]
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	2241      	movs	r2, #65	@ 0x41
 80054e6:	2100      	movs	r1, #0
 80054e8:	2000      	movs	r0, #0
 80054ea:	f007 fca3 	bl	800ce34 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 80054ee:	e005      	b.n	80054fc <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 80054f0:	4b06      	ldr	r3, [pc, #24]	@ (800550c <HAL_ETH_RxAllocateCallback+0x5c>)
 80054f2:	2201      	movs	r2, #1
 80054f4:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2200      	movs	r2, #0
 80054fa:	601a      	str	r2, [r3, #0]
}
 80054fc:	bf00      	nop
 80054fe:	3710      	adds	r7, #16
 8005500:	46bd      	mov	sp, r7
 8005502:	bd80      	pop	{r7, pc}
 8005504:	0801b274 	.word	0x0801b274
 8005508:	0800510d 	.word	0x0800510d
 800550c:	20004e50 	.word	0x20004e50

08005510 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8005510:	b480      	push	{r7}
 8005512:	b089      	sub	sp, #36	@ 0x24
 8005514:	af00      	add	r7, sp, #0
 8005516:	60f8      	str	r0, [r7, #12]
 8005518:	60b9      	str	r1, [r7, #8]
 800551a:	607a      	str	r2, [r7, #4]
 800551c:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8005526:	2300      	movs	r3, #0
 8005528:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	3b20      	subs	r3, #32
 800552e:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8005530:	69fb      	ldr	r3, [r7, #28]
 8005532:	2200      	movs	r2, #0
 8005534:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8005536:	69fb      	ldr	r3, [r7, #28]
 8005538:	2200      	movs	r2, #0
 800553a:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 800553c:	69fb      	ldr	r3, [r7, #28]
 800553e:	887a      	ldrh	r2, [r7, #2]
 8005540:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 8005542:	69bb      	ldr	r3, [r7, #24]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d103      	bne.n	8005552 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 800554a:	69bb      	ldr	r3, [r7, #24]
 800554c:	69fa      	ldr	r2, [r7, #28]
 800554e:	601a      	str	r2, [r3, #0]
 8005550:	e003      	b.n	800555a <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8005552:	697b      	ldr	r3, [r7, #20]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	69fa      	ldr	r2, [r7, #28]
 8005558:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 800555a:	697b      	ldr	r3, [r7, #20]
 800555c:	69fa      	ldr	r2, [r7, #28]
 800555e:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8005560:	69bb      	ldr	r3, [r7, #24]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	61fb      	str	r3, [r7, #28]
 8005566:	e009      	b.n	800557c <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8005568:	69fb      	ldr	r3, [r7, #28]
 800556a:	891a      	ldrh	r2, [r3, #8]
 800556c:	887b      	ldrh	r3, [r7, #2]
 800556e:	4413      	add	r3, r2
 8005570:	b29a      	uxth	r2, r3
 8005572:	69fb      	ldr	r3, [r7, #28]
 8005574:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8005576:	69fb      	ldr	r3, [r7, #28]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	61fb      	str	r3, [r7, #28]
 800557c:	69fb      	ldr	r3, [r7, #28]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d1f2      	bne.n	8005568 <HAL_ETH_RxLinkCallback+0x58>
  }

/* USER CODE END HAL ETH RxLinkCallback */
}
 8005582:	bf00      	nop
 8005584:	bf00      	nop
 8005586:	3724      	adds	r7, #36	@ 0x24
 8005588:	46bd      	mov	sp, r7
 800558a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558e:	4770      	bx	lr

08005590 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b082      	sub	sp, #8
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 8005598:	6878      	ldr	r0, [r7, #4]
 800559a:	f007 fe05 	bl	800d1a8 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 800559e:	bf00      	nop
 80055a0:	3708      	adds	r7, #8
 80055a2:	46bd      	mov	sp, r7
 80055a4:	bd80      	pop	{r7, pc}
	...

080055a8 <__NVIC_SetPriority>:
{
 80055a8:	b480      	push	{r7}
 80055aa:	b083      	sub	sp, #12
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	4603      	mov	r3, r0
 80055b0:	6039      	str	r1, [r7, #0]
 80055b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80055b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	db0a      	blt.n	80055d2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	b2da      	uxtb	r2, r3
 80055c0:	490c      	ldr	r1, [pc, #48]	@ (80055f4 <__NVIC_SetPriority+0x4c>)
 80055c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055c6:	0112      	lsls	r2, r2, #4
 80055c8:	b2d2      	uxtb	r2, r2
 80055ca:	440b      	add	r3, r1
 80055cc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80055d0:	e00a      	b.n	80055e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	b2da      	uxtb	r2, r3
 80055d6:	4908      	ldr	r1, [pc, #32]	@ (80055f8 <__NVIC_SetPriority+0x50>)
 80055d8:	79fb      	ldrb	r3, [r7, #7]
 80055da:	f003 030f 	and.w	r3, r3, #15
 80055de:	3b04      	subs	r3, #4
 80055e0:	0112      	lsls	r2, r2, #4
 80055e2:	b2d2      	uxtb	r2, r2
 80055e4:	440b      	add	r3, r1
 80055e6:	761a      	strb	r2, [r3, #24]
}
 80055e8:	bf00      	nop
 80055ea:	370c      	adds	r7, #12
 80055ec:	46bd      	mov	sp, r7
 80055ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f2:	4770      	bx	lr
 80055f4:	e000e100 	.word	0xe000e100
 80055f8:	e000ed00 	.word	0xe000ed00

080055fc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80055fc:	b580      	push	{r7, lr}
 80055fe:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005600:	4b05      	ldr	r3, [pc, #20]	@ (8005618 <SysTick_Handler+0x1c>)
 8005602:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005604:	f002 fd6c 	bl	80080e0 <xTaskGetSchedulerState>
 8005608:	4603      	mov	r3, r0
 800560a:	2b01      	cmp	r3, #1
 800560c:	d001      	beq.n	8005612 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800560e:	f003 fc63 	bl	8008ed8 <xPortSysTickHandler>
  }
}
 8005612:	bf00      	nop
 8005614:	bd80      	pop	{r7, pc}
 8005616:	bf00      	nop
 8005618:	e000e010 	.word	0xe000e010

0800561c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800561c:	b580      	push	{r7, lr}
 800561e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005620:	2100      	movs	r1, #0
 8005622:	f06f 0004 	mvn.w	r0, #4
 8005626:	f7ff ffbf 	bl	80055a8 <__NVIC_SetPriority>
#endif
}
 800562a:	bf00      	nop
 800562c:	bd80      	pop	{r7, pc}
	...

08005630 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005630:	b480      	push	{r7}
 8005632:	b083      	sub	sp, #12
 8005634:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005636:	f3ef 8305 	mrs	r3, IPSR
 800563a:	603b      	str	r3, [r7, #0]
  return(result);
 800563c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800563e:	2b00      	cmp	r3, #0
 8005640:	d003      	beq.n	800564a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005642:	f06f 0305 	mvn.w	r3, #5
 8005646:	607b      	str	r3, [r7, #4]
 8005648:	e00c      	b.n	8005664 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800564a:	4b0a      	ldr	r3, [pc, #40]	@ (8005674 <osKernelInitialize+0x44>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d105      	bne.n	800565e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005652:	4b08      	ldr	r3, [pc, #32]	@ (8005674 <osKernelInitialize+0x44>)
 8005654:	2201      	movs	r2, #1
 8005656:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005658:	2300      	movs	r3, #0
 800565a:	607b      	str	r3, [r7, #4]
 800565c:	e002      	b.n	8005664 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800565e:	f04f 33ff 	mov.w	r3, #4294967295
 8005662:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005664:	687b      	ldr	r3, [r7, #4]
}
 8005666:	4618      	mov	r0, r3
 8005668:	370c      	adds	r7, #12
 800566a:	46bd      	mov	sp, r7
 800566c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005670:	4770      	bx	lr
 8005672:	bf00      	nop
 8005674:	200050a4 	.word	0x200050a4

08005678 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005678:	b580      	push	{r7, lr}
 800567a:	b082      	sub	sp, #8
 800567c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800567e:	f3ef 8305 	mrs	r3, IPSR
 8005682:	603b      	str	r3, [r7, #0]
  return(result);
 8005684:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005686:	2b00      	cmp	r3, #0
 8005688:	d003      	beq.n	8005692 <osKernelStart+0x1a>
    stat = osErrorISR;
 800568a:	f06f 0305 	mvn.w	r3, #5
 800568e:	607b      	str	r3, [r7, #4]
 8005690:	e010      	b.n	80056b4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005692:	4b0b      	ldr	r3, [pc, #44]	@ (80056c0 <osKernelStart+0x48>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	2b01      	cmp	r3, #1
 8005698:	d109      	bne.n	80056ae <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800569a:	f7ff ffbf 	bl	800561c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800569e:	4b08      	ldr	r3, [pc, #32]	@ (80056c0 <osKernelStart+0x48>)
 80056a0:	2202      	movs	r2, #2
 80056a2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80056a4:	f002 f896 	bl	80077d4 <vTaskStartScheduler>
      stat = osOK;
 80056a8:	2300      	movs	r3, #0
 80056aa:	607b      	str	r3, [r7, #4]
 80056ac:	e002      	b.n	80056b4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80056ae:	f04f 33ff 	mov.w	r3, #4294967295
 80056b2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80056b4:	687b      	ldr	r3, [r7, #4]
}
 80056b6:	4618      	mov	r0, r3
 80056b8:	3708      	adds	r7, #8
 80056ba:	46bd      	mov	sp, r7
 80056bc:	bd80      	pop	{r7, pc}
 80056be:	bf00      	nop
 80056c0:	200050a4 	.word	0x200050a4

080056c4 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b082      	sub	sp, #8
 80056c8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80056ca:	f3ef 8305 	mrs	r3, IPSR
 80056ce:	603b      	str	r3, [r7, #0]
  return(result);
 80056d0:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d003      	beq.n	80056de <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 80056d6:	f002 f9a9 	bl	8007a2c <xTaskGetTickCountFromISR>
 80056da:	6078      	str	r0, [r7, #4]
 80056dc:	e002      	b.n	80056e4 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 80056de:	f002 f995 	bl	8007a0c <xTaskGetTickCount>
 80056e2:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 80056e4:	687b      	ldr	r3, [r7, #4]
}
 80056e6:	4618      	mov	r0, r3
 80056e8:	3708      	adds	r7, #8
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bd80      	pop	{r7, pc}

080056ee <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80056ee:	b580      	push	{r7, lr}
 80056f0:	b08e      	sub	sp, #56	@ 0x38
 80056f2:	af04      	add	r7, sp, #16
 80056f4:	60f8      	str	r0, [r7, #12]
 80056f6:	60b9      	str	r1, [r7, #8]
 80056f8:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80056fa:	2300      	movs	r3, #0
 80056fc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80056fe:	f3ef 8305 	mrs	r3, IPSR
 8005702:	617b      	str	r3, [r7, #20]
  return(result);
 8005704:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005706:	2b00      	cmp	r3, #0
 8005708:	d17e      	bne.n	8005808 <osThreadNew+0x11a>
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d07b      	beq.n	8005808 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005710:	2380      	movs	r3, #128	@ 0x80
 8005712:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005714:	2318      	movs	r3, #24
 8005716:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005718:	2300      	movs	r3, #0
 800571a:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800571c:	f04f 33ff 	mov.w	r3, #4294967295
 8005720:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d045      	beq.n	80057b4 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d002      	beq.n	8005736 <osThreadNew+0x48>
        name = attr->name;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	699b      	ldr	r3, [r3, #24]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d002      	beq.n	8005744 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	699b      	ldr	r3, [r3, #24]
 8005742:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005744:	69fb      	ldr	r3, [r7, #28]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d008      	beq.n	800575c <osThreadNew+0x6e>
 800574a:	69fb      	ldr	r3, [r7, #28]
 800574c:	2b38      	cmp	r3, #56	@ 0x38
 800574e:	d805      	bhi.n	800575c <osThreadNew+0x6e>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	685b      	ldr	r3, [r3, #4]
 8005754:	f003 0301 	and.w	r3, r3, #1
 8005758:	2b00      	cmp	r3, #0
 800575a:	d001      	beq.n	8005760 <osThreadNew+0x72>
        return (NULL);
 800575c:	2300      	movs	r3, #0
 800575e:	e054      	b.n	800580a <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	695b      	ldr	r3, [r3, #20]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d003      	beq.n	8005770 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	695b      	ldr	r3, [r3, #20]
 800576c:	089b      	lsrs	r3, r3, #2
 800576e:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	689b      	ldr	r3, [r3, #8]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d00e      	beq.n	8005796 <osThreadNew+0xa8>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	68db      	ldr	r3, [r3, #12]
 800577c:	2ba7      	cmp	r3, #167	@ 0xa7
 800577e:	d90a      	bls.n	8005796 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005784:	2b00      	cmp	r3, #0
 8005786:	d006      	beq.n	8005796 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	695b      	ldr	r3, [r3, #20]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d002      	beq.n	8005796 <osThreadNew+0xa8>
        mem = 1;
 8005790:	2301      	movs	r3, #1
 8005792:	61bb      	str	r3, [r7, #24]
 8005794:	e010      	b.n	80057b8 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	689b      	ldr	r3, [r3, #8]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d10c      	bne.n	80057b8 <osThreadNew+0xca>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	68db      	ldr	r3, [r3, #12]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d108      	bne.n	80057b8 <osThreadNew+0xca>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	691b      	ldr	r3, [r3, #16]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d104      	bne.n	80057b8 <osThreadNew+0xca>
          mem = 0;
 80057ae:	2300      	movs	r3, #0
 80057b0:	61bb      	str	r3, [r7, #24]
 80057b2:	e001      	b.n	80057b8 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80057b4:	2300      	movs	r3, #0
 80057b6:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80057b8:	69bb      	ldr	r3, [r7, #24]
 80057ba:	2b01      	cmp	r3, #1
 80057bc:	d110      	bne.n	80057e0 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80057c2:	687a      	ldr	r2, [r7, #4]
 80057c4:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80057c6:	9202      	str	r2, [sp, #8]
 80057c8:	9301      	str	r3, [sp, #4]
 80057ca:	69fb      	ldr	r3, [r7, #28]
 80057cc:	9300      	str	r3, [sp, #0]
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	6a3a      	ldr	r2, [r7, #32]
 80057d2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80057d4:	68f8      	ldr	r0, [r7, #12]
 80057d6:	f001 fe09 	bl	80073ec <xTaskCreateStatic>
 80057da:	4603      	mov	r3, r0
 80057dc:	613b      	str	r3, [r7, #16]
 80057de:	e013      	b.n	8005808 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80057e0:	69bb      	ldr	r3, [r7, #24]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d110      	bne.n	8005808 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80057e6:	6a3b      	ldr	r3, [r7, #32]
 80057e8:	b29a      	uxth	r2, r3
 80057ea:	f107 0310 	add.w	r3, r7, #16
 80057ee:	9301      	str	r3, [sp, #4]
 80057f0:	69fb      	ldr	r3, [r7, #28]
 80057f2:	9300      	str	r3, [sp, #0]
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80057f8:	68f8      	ldr	r0, [r7, #12]
 80057fa:	f001 fe57 	bl	80074ac <xTaskCreate>
 80057fe:	4603      	mov	r3, r0
 8005800:	2b01      	cmp	r3, #1
 8005802:	d001      	beq.n	8005808 <osThreadNew+0x11a>
            hTask = NULL;
 8005804:	2300      	movs	r3, #0
 8005806:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005808:	693b      	ldr	r3, [r7, #16]
}
 800580a:	4618      	mov	r0, r3
 800580c:	3728      	adds	r7, #40	@ 0x28
 800580e:	46bd      	mov	sp, r7
 8005810:	bd80      	pop	{r7, pc}

08005812 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005812:	b580      	push	{r7, lr}
 8005814:	b084      	sub	sp, #16
 8005816:	af00      	add	r7, sp, #0
 8005818:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800581a:	f3ef 8305 	mrs	r3, IPSR
 800581e:	60bb      	str	r3, [r7, #8]
  return(result);
 8005820:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005822:	2b00      	cmp	r3, #0
 8005824:	d003      	beq.n	800582e <osDelay+0x1c>
    stat = osErrorISR;
 8005826:	f06f 0305 	mvn.w	r3, #5
 800582a:	60fb      	str	r3, [r7, #12]
 800582c:	e007      	b.n	800583e <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800582e:	2300      	movs	r3, #0
 8005830:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d002      	beq.n	800583e <osDelay+0x2c>
      vTaskDelay(ticks);
 8005838:	6878      	ldr	r0, [r7, #4]
 800583a:	f001 ff95 	bl	8007768 <vTaskDelay>
    }
  }

  return (stat);
 800583e:	68fb      	ldr	r3, [r7, #12]
}
 8005840:	4618      	mov	r0, r3
 8005842:	3710      	adds	r7, #16
 8005844:	46bd      	mov	sp, r7
 8005846:	bd80      	pop	{r7, pc}

08005848 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8005848:	b580      	push	{r7, lr}
 800584a:	b088      	sub	sp, #32
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8005850:	2300      	movs	r3, #0
 8005852:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005854:	f3ef 8305 	mrs	r3, IPSR
 8005858:	60bb      	str	r3, [r7, #8]
  return(result);
 800585a:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800585c:	2b00      	cmp	r3, #0
 800585e:	d174      	bne.n	800594a <osMutexNew+0x102>
    if (attr != NULL) {
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d003      	beq.n	800586e <osMutexNew+0x26>
      type = attr->attr_bits;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	685b      	ldr	r3, [r3, #4]
 800586a:	61bb      	str	r3, [r7, #24]
 800586c:	e001      	b.n	8005872 <osMutexNew+0x2a>
    } else {
      type = 0U;
 800586e:	2300      	movs	r3, #0
 8005870:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8005872:	69bb      	ldr	r3, [r7, #24]
 8005874:	f003 0301 	and.w	r3, r3, #1
 8005878:	2b00      	cmp	r3, #0
 800587a:	d002      	beq.n	8005882 <osMutexNew+0x3a>
      rmtx = 1U;
 800587c:	2301      	movs	r3, #1
 800587e:	617b      	str	r3, [r7, #20]
 8005880:	e001      	b.n	8005886 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8005882:	2300      	movs	r3, #0
 8005884:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8005886:	69bb      	ldr	r3, [r7, #24]
 8005888:	f003 0308 	and.w	r3, r3, #8
 800588c:	2b00      	cmp	r3, #0
 800588e:	d15c      	bne.n	800594a <osMutexNew+0x102>
      mem = -1;
 8005890:	f04f 33ff 	mov.w	r3, #4294967295
 8005894:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d015      	beq.n	80058c8 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	689b      	ldr	r3, [r3, #8]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d006      	beq.n	80058b2 <osMutexNew+0x6a>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	68db      	ldr	r3, [r3, #12]
 80058a8:	2b4f      	cmp	r3, #79	@ 0x4f
 80058aa:	d902      	bls.n	80058b2 <osMutexNew+0x6a>
          mem = 1;
 80058ac:	2301      	movs	r3, #1
 80058ae:	613b      	str	r3, [r7, #16]
 80058b0:	e00c      	b.n	80058cc <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	689b      	ldr	r3, [r3, #8]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d108      	bne.n	80058cc <osMutexNew+0x84>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	68db      	ldr	r3, [r3, #12]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d104      	bne.n	80058cc <osMutexNew+0x84>
            mem = 0;
 80058c2:	2300      	movs	r3, #0
 80058c4:	613b      	str	r3, [r7, #16]
 80058c6:	e001      	b.n	80058cc <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 80058c8:	2300      	movs	r3, #0
 80058ca:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 80058cc:	693b      	ldr	r3, [r7, #16]
 80058ce:	2b01      	cmp	r3, #1
 80058d0:	d112      	bne.n	80058f8 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 80058d2:	697b      	ldr	r3, [r7, #20]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d007      	beq.n	80058e8 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	689b      	ldr	r3, [r3, #8]
 80058dc:	4619      	mov	r1, r3
 80058de:	2004      	movs	r0, #4
 80058e0:	f000 fdd9 	bl	8006496 <xQueueCreateMutexStatic>
 80058e4:	61f8      	str	r0, [r7, #28]
 80058e6:	e016      	b.n	8005916 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	689b      	ldr	r3, [r3, #8]
 80058ec:	4619      	mov	r1, r3
 80058ee:	2001      	movs	r0, #1
 80058f0:	f000 fdd1 	bl	8006496 <xQueueCreateMutexStatic>
 80058f4:	61f8      	str	r0, [r7, #28]
 80058f6:	e00e      	b.n	8005916 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 80058f8:	693b      	ldr	r3, [r7, #16]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d10b      	bne.n	8005916 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 80058fe:	697b      	ldr	r3, [r7, #20]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d004      	beq.n	800590e <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8005904:	2004      	movs	r0, #4
 8005906:	f000 fdae 	bl	8006466 <xQueueCreateMutex>
 800590a:	61f8      	str	r0, [r7, #28]
 800590c:	e003      	b.n	8005916 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800590e:	2001      	movs	r0, #1
 8005910:	f000 fda9 	bl	8006466 <xQueueCreateMutex>
 8005914:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8005916:	69fb      	ldr	r3, [r7, #28]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d00c      	beq.n	8005936 <osMutexNew+0xee>
        if (attr != NULL) {
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d003      	beq.n	800592a <osMutexNew+0xe2>
          name = attr->name;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	60fb      	str	r3, [r7, #12]
 8005928:	e001      	b.n	800592e <osMutexNew+0xe6>
        } else {
          name = NULL;
 800592a:	2300      	movs	r3, #0
 800592c:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800592e:	68f9      	ldr	r1, [r7, #12]
 8005930:	69f8      	ldr	r0, [r7, #28]
 8005932:	f001 fcd3 	bl	80072dc <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8005936:	69fb      	ldr	r3, [r7, #28]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d006      	beq.n	800594a <osMutexNew+0x102>
 800593c:	697b      	ldr	r3, [r7, #20]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d003      	beq.n	800594a <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8005942:	69fb      	ldr	r3, [r7, #28]
 8005944:	f043 0301 	orr.w	r3, r3, #1
 8005948:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800594a:	69fb      	ldr	r3, [r7, #28]
}
 800594c:	4618      	mov	r0, r3
 800594e:	3720      	adds	r7, #32
 8005950:	46bd      	mov	sp, r7
 8005952:	bd80      	pop	{r7, pc}

08005954 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8005954:	b580      	push	{r7, lr}
 8005956:	b086      	sub	sp, #24
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
 800595c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	f023 0301 	bic.w	r3, r3, #1
 8005964:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	f003 0301 	and.w	r3, r3, #1
 800596c:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800596e:	2300      	movs	r3, #0
 8005970:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005972:	f3ef 8305 	mrs	r3, IPSR
 8005976:	60bb      	str	r3, [r7, #8]
  return(result);
 8005978:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800597a:	2b00      	cmp	r3, #0
 800597c:	d003      	beq.n	8005986 <osMutexAcquire+0x32>
    stat = osErrorISR;
 800597e:	f06f 0305 	mvn.w	r3, #5
 8005982:	617b      	str	r3, [r7, #20]
 8005984:	e02c      	b.n	80059e0 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8005986:	693b      	ldr	r3, [r7, #16]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d103      	bne.n	8005994 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800598c:	f06f 0303 	mvn.w	r3, #3
 8005990:	617b      	str	r3, [r7, #20]
 8005992:	e025      	b.n	80059e0 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d011      	beq.n	80059be <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800599a:	6839      	ldr	r1, [r7, #0]
 800599c:	6938      	ldr	r0, [r7, #16]
 800599e:	f000 fdca 	bl	8006536 <xQueueTakeMutexRecursive>
 80059a2:	4603      	mov	r3, r0
 80059a4:	2b01      	cmp	r3, #1
 80059a6:	d01b      	beq.n	80059e0 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d003      	beq.n	80059b6 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 80059ae:	f06f 0301 	mvn.w	r3, #1
 80059b2:	617b      	str	r3, [r7, #20]
 80059b4:	e014      	b.n	80059e0 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80059b6:	f06f 0302 	mvn.w	r3, #2
 80059ba:	617b      	str	r3, [r7, #20]
 80059bc:	e010      	b.n	80059e0 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 80059be:	6839      	ldr	r1, [r7, #0]
 80059c0:	6938      	ldr	r0, [r7, #16]
 80059c2:	f001 f96f 	bl	8006ca4 <xQueueSemaphoreTake>
 80059c6:	4603      	mov	r3, r0
 80059c8:	2b01      	cmp	r3, #1
 80059ca:	d009      	beq.n	80059e0 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d003      	beq.n	80059da <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 80059d2:	f06f 0301 	mvn.w	r3, #1
 80059d6:	617b      	str	r3, [r7, #20]
 80059d8:	e002      	b.n	80059e0 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80059da:	f06f 0302 	mvn.w	r3, #2
 80059de:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 80059e0:	697b      	ldr	r3, [r7, #20]
}
 80059e2:	4618      	mov	r0, r3
 80059e4:	3718      	adds	r7, #24
 80059e6:	46bd      	mov	sp, r7
 80059e8:	bd80      	pop	{r7, pc}

080059ea <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 80059ea:	b580      	push	{r7, lr}
 80059ec:	b086      	sub	sp, #24
 80059ee:	af00      	add	r7, sp, #0
 80059f0:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	f023 0301 	bic.w	r3, r3, #1
 80059f8:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	f003 0301 	and.w	r3, r3, #1
 8005a00:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8005a02:	2300      	movs	r3, #0
 8005a04:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005a06:	f3ef 8305 	mrs	r3, IPSR
 8005a0a:	60bb      	str	r3, [r7, #8]
  return(result);
 8005a0c:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d003      	beq.n	8005a1a <osMutexRelease+0x30>
    stat = osErrorISR;
 8005a12:	f06f 0305 	mvn.w	r3, #5
 8005a16:	617b      	str	r3, [r7, #20]
 8005a18:	e01f      	b.n	8005a5a <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8005a1a:	693b      	ldr	r3, [r7, #16]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d103      	bne.n	8005a28 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8005a20:	f06f 0303 	mvn.w	r3, #3
 8005a24:	617b      	str	r3, [r7, #20]
 8005a26:	e018      	b.n	8005a5a <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d009      	beq.n	8005a42 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8005a2e:	6938      	ldr	r0, [r7, #16]
 8005a30:	f000 fd4c 	bl	80064cc <xQueueGiveMutexRecursive>
 8005a34:	4603      	mov	r3, r0
 8005a36:	2b01      	cmp	r3, #1
 8005a38:	d00f      	beq.n	8005a5a <osMutexRelease+0x70>
        stat = osErrorResource;
 8005a3a:	f06f 0302 	mvn.w	r3, #2
 8005a3e:	617b      	str	r3, [r7, #20]
 8005a40:	e00b      	b.n	8005a5a <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8005a42:	2300      	movs	r3, #0
 8005a44:	2200      	movs	r2, #0
 8005a46:	2100      	movs	r1, #0
 8005a48:	6938      	ldr	r0, [r7, #16]
 8005a4a:	f000 fe19 	bl	8006680 <xQueueGenericSend>
 8005a4e:	4603      	mov	r3, r0
 8005a50:	2b01      	cmp	r3, #1
 8005a52:	d002      	beq.n	8005a5a <osMutexRelease+0x70>
        stat = osErrorResource;
 8005a54:	f06f 0302 	mvn.w	r3, #2
 8005a58:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8005a5a:	697b      	ldr	r3, [r7, #20]
}
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	3718      	adds	r7, #24
 8005a60:	46bd      	mov	sp, r7
 8005a62:	bd80      	pop	{r7, pc}

08005a64 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b08a      	sub	sp, #40	@ 0x28
 8005a68:	af02      	add	r7, sp, #8
 8005a6a:	60f8      	str	r0, [r7, #12]
 8005a6c:	60b9      	str	r1, [r7, #8]
 8005a6e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8005a70:	2300      	movs	r3, #0
 8005a72:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005a74:	f3ef 8305 	mrs	r3, IPSR
 8005a78:	613b      	str	r3, [r7, #16]
  return(result);
 8005a7a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d175      	bne.n	8005b6c <osSemaphoreNew+0x108>
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d072      	beq.n	8005b6c <osSemaphoreNew+0x108>
 8005a86:	68ba      	ldr	r2, [r7, #8]
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	429a      	cmp	r2, r3
 8005a8c:	d86e      	bhi.n	8005b6c <osSemaphoreNew+0x108>
    mem = -1;
 8005a8e:	f04f 33ff 	mov.w	r3, #4294967295
 8005a92:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d015      	beq.n	8005ac6 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	689b      	ldr	r3, [r3, #8]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d006      	beq.n	8005ab0 <osSemaphoreNew+0x4c>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	68db      	ldr	r3, [r3, #12]
 8005aa6:	2b4f      	cmp	r3, #79	@ 0x4f
 8005aa8:	d902      	bls.n	8005ab0 <osSemaphoreNew+0x4c>
        mem = 1;
 8005aaa:	2301      	movs	r3, #1
 8005aac:	61bb      	str	r3, [r7, #24]
 8005aae:	e00c      	b.n	8005aca <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	689b      	ldr	r3, [r3, #8]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d108      	bne.n	8005aca <osSemaphoreNew+0x66>
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	68db      	ldr	r3, [r3, #12]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d104      	bne.n	8005aca <osSemaphoreNew+0x66>
          mem = 0;
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	61bb      	str	r3, [r7, #24]
 8005ac4:	e001      	b.n	8005aca <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8005aca:	69bb      	ldr	r3, [r7, #24]
 8005acc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ad0:	d04c      	beq.n	8005b6c <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	2b01      	cmp	r3, #1
 8005ad6:	d128      	bne.n	8005b2a <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8005ad8:	69bb      	ldr	r3, [r7, #24]
 8005ada:	2b01      	cmp	r3, #1
 8005adc:	d10a      	bne.n	8005af4 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	689b      	ldr	r3, [r3, #8]
 8005ae2:	2203      	movs	r2, #3
 8005ae4:	9200      	str	r2, [sp, #0]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	2100      	movs	r1, #0
 8005aea:	2001      	movs	r0, #1
 8005aec:	f000 fbc6 	bl	800627c <xQueueGenericCreateStatic>
 8005af0:	61f8      	str	r0, [r7, #28]
 8005af2:	e005      	b.n	8005b00 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8005af4:	2203      	movs	r2, #3
 8005af6:	2100      	movs	r1, #0
 8005af8:	2001      	movs	r0, #1
 8005afa:	f000 fc3c 	bl	8006376 <xQueueGenericCreate>
 8005afe:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8005b00:	69fb      	ldr	r3, [r7, #28]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d022      	beq.n	8005b4c <osSemaphoreNew+0xe8>
 8005b06:	68bb      	ldr	r3, [r7, #8]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d01f      	beq.n	8005b4c <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	2200      	movs	r2, #0
 8005b10:	2100      	movs	r1, #0
 8005b12:	69f8      	ldr	r0, [r7, #28]
 8005b14:	f000 fdb4 	bl	8006680 <xQueueGenericSend>
 8005b18:	4603      	mov	r3, r0
 8005b1a:	2b01      	cmp	r3, #1
 8005b1c:	d016      	beq.n	8005b4c <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8005b1e:	69f8      	ldr	r0, [r7, #28]
 8005b20:	f001 fa90 	bl	8007044 <vQueueDelete>
            hSemaphore = NULL;
 8005b24:	2300      	movs	r3, #0
 8005b26:	61fb      	str	r3, [r7, #28]
 8005b28:	e010      	b.n	8005b4c <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8005b2a:	69bb      	ldr	r3, [r7, #24]
 8005b2c:	2b01      	cmp	r3, #1
 8005b2e:	d108      	bne.n	8005b42 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	689b      	ldr	r3, [r3, #8]
 8005b34:	461a      	mov	r2, r3
 8005b36:	68b9      	ldr	r1, [r7, #8]
 8005b38:	68f8      	ldr	r0, [r7, #12]
 8005b3a:	f000 fd33 	bl	80065a4 <xQueueCreateCountingSemaphoreStatic>
 8005b3e:	61f8      	str	r0, [r7, #28]
 8005b40:	e004      	b.n	8005b4c <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8005b42:	68b9      	ldr	r1, [r7, #8]
 8005b44:	68f8      	ldr	r0, [r7, #12]
 8005b46:	f000 fd66 	bl	8006616 <xQueueCreateCountingSemaphore>
 8005b4a:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8005b4c:	69fb      	ldr	r3, [r7, #28]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d00c      	beq.n	8005b6c <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d003      	beq.n	8005b60 <osSemaphoreNew+0xfc>
          name = attr->name;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	617b      	str	r3, [r7, #20]
 8005b5e:	e001      	b.n	8005b64 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8005b60:	2300      	movs	r3, #0
 8005b62:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8005b64:	6979      	ldr	r1, [r7, #20]
 8005b66:	69f8      	ldr	r0, [r7, #28]
 8005b68:	f001 fbb8 	bl	80072dc <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8005b6c:	69fb      	ldr	r3, [r7, #28]
}
 8005b6e:	4618      	mov	r0, r3
 8005b70:	3720      	adds	r7, #32
 8005b72:	46bd      	mov	sp, r7
 8005b74:	bd80      	pop	{r7, pc}
	...

08005b78 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b086      	sub	sp, #24
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
 8005b80:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8005b86:	2300      	movs	r3, #0
 8005b88:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8005b8a:	693b      	ldr	r3, [r7, #16]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d103      	bne.n	8005b98 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8005b90:	f06f 0303 	mvn.w	r3, #3
 8005b94:	617b      	str	r3, [r7, #20]
 8005b96:	e039      	b.n	8005c0c <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005b98:	f3ef 8305 	mrs	r3, IPSR
 8005b9c:	60fb      	str	r3, [r7, #12]
  return(result);
 8005b9e:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d022      	beq.n	8005bea <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d003      	beq.n	8005bb2 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8005baa:	f06f 0303 	mvn.w	r3, #3
 8005bae:	617b      	str	r3, [r7, #20]
 8005bb0:	e02c      	b.n	8005c0c <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8005bb6:	f107 0308 	add.w	r3, r7, #8
 8005bba:	461a      	mov	r2, r3
 8005bbc:	2100      	movs	r1, #0
 8005bbe:	6938      	ldr	r0, [r7, #16]
 8005bc0:	f001 f980 	bl	8006ec4 <xQueueReceiveFromISR>
 8005bc4:	4603      	mov	r3, r0
 8005bc6:	2b01      	cmp	r3, #1
 8005bc8:	d003      	beq.n	8005bd2 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8005bca:	f06f 0302 	mvn.w	r3, #2
 8005bce:	617b      	str	r3, [r7, #20]
 8005bd0:	e01c      	b.n	8005c0c <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8005bd2:	68bb      	ldr	r3, [r7, #8]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d019      	beq.n	8005c0c <osSemaphoreAcquire+0x94>
 8005bd8:	4b0f      	ldr	r3, [pc, #60]	@ (8005c18 <osSemaphoreAcquire+0xa0>)
 8005bda:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005bde:	601a      	str	r2, [r3, #0]
 8005be0:	f3bf 8f4f 	dsb	sy
 8005be4:	f3bf 8f6f 	isb	sy
 8005be8:	e010      	b.n	8005c0c <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8005bea:	6839      	ldr	r1, [r7, #0]
 8005bec:	6938      	ldr	r0, [r7, #16]
 8005bee:	f001 f859 	bl	8006ca4 <xQueueSemaphoreTake>
 8005bf2:	4603      	mov	r3, r0
 8005bf4:	2b01      	cmp	r3, #1
 8005bf6:	d009      	beq.n	8005c0c <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d003      	beq.n	8005c06 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8005bfe:	f06f 0301 	mvn.w	r3, #1
 8005c02:	617b      	str	r3, [r7, #20]
 8005c04:	e002      	b.n	8005c0c <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8005c06:	f06f 0302 	mvn.w	r3, #2
 8005c0a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8005c0c:	697b      	ldr	r3, [r7, #20]
}
 8005c0e:	4618      	mov	r0, r3
 8005c10:	3718      	adds	r7, #24
 8005c12:	46bd      	mov	sp, r7
 8005c14:	bd80      	pop	{r7, pc}
 8005c16:	bf00      	nop
 8005c18:	e000ed04 	.word	0xe000ed04

08005c1c <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b086      	sub	sp, #24
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8005c28:	2300      	movs	r3, #0
 8005c2a:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8005c2c:	693b      	ldr	r3, [r7, #16]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d103      	bne.n	8005c3a <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8005c32:	f06f 0303 	mvn.w	r3, #3
 8005c36:	617b      	str	r3, [r7, #20]
 8005c38:	e02c      	b.n	8005c94 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005c3a:	f3ef 8305 	mrs	r3, IPSR
 8005c3e:	60fb      	str	r3, [r7, #12]
  return(result);
 8005c40:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d01a      	beq.n	8005c7c <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8005c46:	2300      	movs	r3, #0
 8005c48:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8005c4a:	f107 0308 	add.w	r3, r7, #8
 8005c4e:	4619      	mov	r1, r3
 8005c50:	6938      	ldr	r0, [r7, #16]
 8005c52:	f000 feb5 	bl	80069c0 <xQueueGiveFromISR>
 8005c56:	4603      	mov	r3, r0
 8005c58:	2b01      	cmp	r3, #1
 8005c5a:	d003      	beq.n	8005c64 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8005c5c:	f06f 0302 	mvn.w	r3, #2
 8005c60:	617b      	str	r3, [r7, #20]
 8005c62:	e017      	b.n	8005c94 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d014      	beq.n	8005c94 <osSemaphoreRelease+0x78>
 8005c6a:	4b0d      	ldr	r3, [pc, #52]	@ (8005ca0 <osSemaphoreRelease+0x84>)
 8005c6c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005c70:	601a      	str	r2, [r3, #0]
 8005c72:	f3bf 8f4f 	dsb	sy
 8005c76:	f3bf 8f6f 	isb	sy
 8005c7a:	e00b      	b.n	8005c94 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	2200      	movs	r2, #0
 8005c80:	2100      	movs	r1, #0
 8005c82:	6938      	ldr	r0, [r7, #16]
 8005c84:	f000 fcfc 	bl	8006680 <xQueueGenericSend>
 8005c88:	4603      	mov	r3, r0
 8005c8a:	2b01      	cmp	r3, #1
 8005c8c:	d002      	beq.n	8005c94 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8005c8e:	f06f 0302 	mvn.w	r3, #2
 8005c92:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8005c94:	697b      	ldr	r3, [r7, #20]
}
 8005c96:	4618      	mov	r0, r3
 8005c98:	3718      	adds	r7, #24
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	bd80      	pop	{r7, pc}
 8005c9e:	bf00      	nop
 8005ca0:	e000ed04 	.word	0xe000ed04

08005ca4 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b086      	sub	sp, #24
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005cb0:	f3ef 8305 	mrs	r3, IPSR
 8005cb4:	60fb      	str	r3, [r7, #12]
  return(result);
 8005cb6:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d003      	beq.n	8005cc4 <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 8005cbc:	f06f 0305 	mvn.w	r3, #5
 8005cc0:	617b      	str	r3, [r7, #20]
 8005cc2:	e00e      	b.n	8005ce2 <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 8005cc4:	693b      	ldr	r3, [r7, #16]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d103      	bne.n	8005cd2 <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 8005cca:	f06f 0303 	mvn.w	r3, #3
 8005cce:	617b      	str	r3, [r7, #20]
 8005cd0:	e007      	b.n	8005ce2 <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 8005cd2:	6938      	ldr	r0, [r7, #16]
 8005cd4:	f001 fb2c 	bl	8007330 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 8005cd8:	2300      	movs	r3, #0
 8005cda:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 8005cdc:	6938      	ldr	r0, [r7, #16]
 8005cde:	f001 f9b1 	bl	8007044 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 8005ce2:	697b      	ldr	r3, [r7, #20]
}
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	3718      	adds	r7, #24
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	bd80      	pop	{r7, pc}

08005cec <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8005cec:	b580      	push	{r7, lr}
 8005cee:	b08a      	sub	sp, #40	@ 0x28
 8005cf0:	af02      	add	r7, sp, #8
 8005cf2:	60f8      	str	r0, [r7, #12]
 8005cf4:	60b9      	str	r1, [r7, #8]
 8005cf6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005cfc:	f3ef 8305 	mrs	r3, IPSR
 8005d00:	613b      	str	r3, [r7, #16]
  return(result);
 8005d02:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d15f      	bne.n	8005dc8 <osMessageQueueNew+0xdc>
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d05c      	beq.n	8005dc8 <osMessageQueueNew+0xdc>
 8005d0e:	68bb      	ldr	r3, [r7, #8]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d059      	beq.n	8005dc8 <osMessageQueueNew+0xdc>
    mem = -1;
 8005d14:	f04f 33ff 	mov.w	r3, #4294967295
 8005d18:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d029      	beq.n	8005d74 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	689b      	ldr	r3, [r3, #8]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d012      	beq.n	8005d4e <osMessageQueueNew+0x62>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	68db      	ldr	r3, [r3, #12]
 8005d2c:	2b4f      	cmp	r3, #79	@ 0x4f
 8005d2e:	d90e      	bls.n	8005d4e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d00a      	beq.n	8005d4e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	695a      	ldr	r2, [r3, #20]
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	68b9      	ldr	r1, [r7, #8]
 8005d40:	fb01 f303 	mul.w	r3, r1, r3
 8005d44:	429a      	cmp	r2, r3
 8005d46:	d302      	bcc.n	8005d4e <osMessageQueueNew+0x62>
        mem = 1;
 8005d48:	2301      	movs	r3, #1
 8005d4a:	61bb      	str	r3, [r7, #24]
 8005d4c:	e014      	b.n	8005d78 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	689b      	ldr	r3, [r3, #8]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d110      	bne.n	8005d78 <osMessageQueueNew+0x8c>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	68db      	ldr	r3, [r3, #12]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d10c      	bne.n	8005d78 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d108      	bne.n	8005d78 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	695b      	ldr	r3, [r3, #20]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d104      	bne.n	8005d78 <osMessageQueueNew+0x8c>
          mem = 0;
 8005d6e:	2300      	movs	r3, #0
 8005d70:	61bb      	str	r3, [r7, #24]
 8005d72:	e001      	b.n	8005d78 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8005d74:	2300      	movs	r3, #0
 8005d76:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005d78:	69bb      	ldr	r3, [r7, #24]
 8005d7a:	2b01      	cmp	r3, #1
 8005d7c:	d10b      	bne.n	8005d96 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	691a      	ldr	r2, [r3, #16]
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	689b      	ldr	r3, [r3, #8]
 8005d86:	2100      	movs	r1, #0
 8005d88:	9100      	str	r1, [sp, #0]
 8005d8a:	68b9      	ldr	r1, [r7, #8]
 8005d8c:	68f8      	ldr	r0, [r7, #12]
 8005d8e:	f000 fa75 	bl	800627c <xQueueGenericCreateStatic>
 8005d92:	61f8      	str	r0, [r7, #28]
 8005d94:	e008      	b.n	8005da8 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8005d96:	69bb      	ldr	r3, [r7, #24]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d105      	bne.n	8005da8 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	68b9      	ldr	r1, [r7, #8]
 8005da0:	68f8      	ldr	r0, [r7, #12]
 8005da2:	f000 fae8 	bl	8006376 <xQueueGenericCreate>
 8005da6:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8005da8:	69fb      	ldr	r3, [r7, #28]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d00c      	beq.n	8005dc8 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d003      	beq.n	8005dbc <osMessageQueueNew+0xd0>
        name = attr->name;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	617b      	str	r3, [r7, #20]
 8005dba:	e001      	b.n	8005dc0 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8005dc0:	6979      	ldr	r1, [r7, #20]
 8005dc2:	69f8      	ldr	r0, [r7, #28]
 8005dc4:	f001 fa8a 	bl	80072dc <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8005dc8:	69fb      	ldr	r3, [r7, #28]
}
 8005dca:	4618      	mov	r0, r3
 8005dcc:	3720      	adds	r7, #32
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	bd80      	pop	{r7, pc}
	...

08005dd4 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b088      	sub	sp, #32
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	60f8      	str	r0, [r7, #12]
 8005ddc:	60b9      	str	r1, [r7, #8]
 8005dde:	603b      	str	r3, [r7, #0]
 8005de0:	4613      	mov	r3, r2
 8005de2:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005de8:	2300      	movs	r3, #0
 8005dea:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005dec:	f3ef 8305 	mrs	r3, IPSR
 8005df0:	617b      	str	r3, [r7, #20]
  return(result);
 8005df2:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d028      	beq.n	8005e4a <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005df8:	69bb      	ldr	r3, [r7, #24]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d005      	beq.n	8005e0a <osMessageQueuePut+0x36>
 8005dfe:	68bb      	ldr	r3, [r7, #8]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d002      	beq.n	8005e0a <osMessageQueuePut+0x36>
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d003      	beq.n	8005e12 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8005e0a:	f06f 0303 	mvn.w	r3, #3
 8005e0e:	61fb      	str	r3, [r7, #28]
 8005e10:	e038      	b.n	8005e84 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8005e12:	2300      	movs	r3, #0
 8005e14:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8005e16:	f107 0210 	add.w	r2, r7, #16
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	68b9      	ldr	r1, [r7, #8]
 8005e1e:	69b8      	ldr	r0, [r7, #24]
 8005e20:	f000 fd30 	bl	8006884 <xQueueGenericSendFromISR>
 8005e24:	4603      	mov	r3, r0
 8005e26:	2b01      	cmp	r3, #1
 8005e28:	d003      	beq.n	8005e32 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8005e2a:	f06f 0302 	mvn.w	r3, #2
 8005e2e:	61fb      	str	r3, [r7, #28]
 8005e30:	e028      	b.n	8005e84 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8005e32:	693b      	ldr	r3, [r7, #16]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d025      	beq.n	8005e84 <osMessageQueuePut+0xb0>
 8005e38:	4b15      	ldr	r3, [pc, #84]	@ (8005e90 <osMessageQueuePut+0xbc>)
 8005e3a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005e3e:	601a      	str	r2, [r3, #0]
 8005e40:	f3bf 8f4f 	dsb	sy
 8005e44:	f3bf 8f6f 	isb	sy
 8005e48:	e01c      	b.n	8005e84 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005e4a:	69bb      	ldr	r3, [r7, #24]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d002      	beq.n	8005e56 <osMessageQueuePut+0x82>
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d103      	bne.n	8005e5e <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8005e56:	f06f 0303 	mvn.w	r3, #3
 8005e5a:	61fb      	str	r3, [r7, #28]
 8005e5c:	e012      	b.n	8005e84 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005e5e:	2300      	movs	r3, #0
 8005e60:	683a      	ldr	r2, [r7, #0]
 8005e62:	68b9      	ldr	r1, [r7, #8]
 8005e64:	69b8      	ldr	r0, [r7, #24]
 8005e66:	f000 fc0b 	bl	8006680 <xQueueGenericSend>
 8005e6a:	4603      	mov	r3, r0
 8005e6c:	2b01      	cmp	r3, #1
 8005e6e:	d009      	beq.n	8005e84 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d003      	beq.n	8005e7e <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8005e76:	f06f 0301 	mvn.w	r3, #1
 8005e7a:	61fb      	str	r3, [r7, #28]
 8005e7c:	e002      	b.n	8005e84 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8005e7e:	f06f 0302 	mvn.w	r3, #2
 8005e82:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8005e84:	69fb      	ldr	r3, [r7, #28]
}
 8005e86:	4618      	mov	r0, r3
 8005e88:	3720      	adds	r7, #32
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	bd80      	pop	{r7, pc}
 8005e8e:	bf00      	nop
 8005e90:	e000ed04 	.word	0xe000ed04

08005e94 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b088      	sub	sp, #32
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	60f8      	str	r0, [r7, #12]
 8005e9c:	60b9      	str	r1, [r7, #8]
 8005e9e:	607a      	str	r2, [r7, #4]
 8005ea0:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005eaa:	f3ef 8305 	mrs	r3, IPSR
 8005eae:	617b      	str	r3, [r7, #20]
  return(result);
 8005eb0:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d028      	beq.n	8005f08 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005eb6:	69bb      	ldr	r3, [r7, #24]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d005      	beq.n	8005ec8 <osMessageQueueGet+0x34>
 8005ebc:	68bb      	ldr	r3, [r7, #8]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d002      	beq.n	8005ec8 <osMessageQueueGet+0x34>
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d003      	beq.n	8005ed0 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8005ec8:	f06f 0303 	mvn.w	r3, #3
 8005ecc:	61fb      	str	r3, [r7, #28]
 8005ece:	e037      	b.n	8005f40 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8005ed4:	f107 0310 	add.w	r3, r7, #16
 8005ed8:	461a      	mov	r2, r3
 8005eda:	68b9      	ldr	r1, [r7, #8]
 8005edc:	69b8      	ldr	r0, [r7, #24]
 8005ede:	f000 fff1 	bl	8006ec4 <xQueueReceiveFromISR>
 8005ee2:	4603      	mov	r3, r0
 8005ee4:	2b01      	cmp	r3, #1
 8005ee6:	d003      	beq.n	8005ef0 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8005ee8:	f06f 0302 	mvn.w	r3, #2
 8005eec:	61fb      	str	r3, [r7, #28]
 8005eee:	e027      	b.n	8005f40 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8005ef0:	693b      	ldr	r3, [r7, #16]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d024      	beq.n	8005f40 <osMessageQueueGet+0xac>
 8005ef6:	4b15      	ldr	r3, [pc, #84]	@ (8005f4c <osMessageQueueGet+0xb8>)
 8005ef8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005efc:	601a      	str	r2, [r3, #0]
 8005efe:	f3bf 8f4f 	dsb	sy
 8005f02:	f3bf 8f6f 	isb	sy
 8005f06:	e01b      	b.n	8005f40 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005f08:	69bb      	ldr	r3, [r7, #24]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d002      	beq.n	8005f14 <osMessageQueueGet+0x80>
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d103      	bne.n	8005f1c <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8005f14:	f06f 0303 	mvn.w	r3, #3
 8005f18:	61fb      	str	r3, [r7, #28]
 8005f1a:	e011      	b.n	8005f40 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005f1c:	683a      	ldr	r2, [r7, #0]
 8005f1e:	68b9      	ldr	r1, [r7, #8]
 8005f20:	69b8      	ldr	r0, [r7, #24]
 8005f22:	f000 fddd 	bl	8006ae0 <xQueueReceive>
 8005f26:	4603      	mov	r3, r0
 8005f28:	2b01      	cmp	r3, #1
 8005f2a:	d009      	beq.n	8005f40 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d003      	beq.n	8005f3a <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8005f32:	f06f 0301 	mvn.w	r3, #1
 8005f36:	61fb      	str	r3, [r7, #28]
 8005f38:	e002      	b.n	8005f40 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8005f3a:	f06f 0302 	mvn.w	r3, #2
 8005f3e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8005f40:	69fb      	ldr	r3, [r7, #28]
}
 8005f42:	4618      	mov	r0, r3
 8005f44:	3720      	adds	r7, #32
 8005f46:	46bd      	mov	sp, r7
 8005f48:	bd80      	pop	{r7, pc}
 8005f4a:	bf00      	nop
 8005f4c:	e000ed04 	.word	0xe000ed04

08005f50 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b086      	sub	sp, #24
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	613b      	str	r3, [r7, #16]
  UBaseType_t count;

  if (hQueue == NULL) {
 8005f5c:	693b      	ldr	r3, [r7, #16]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d102      	bne.n	8005f68 <osMessageQueueGetCount+0x18>
    count = 0U;
 8005f62:	2300      	movs	r3, #0
 8005f64:	617b      	str	r3, [r7, #20]
 8005f66:	e00e      	b.n	8005f86 <osMessageQueueGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005f68:	f3ef 8305 	mrs	r3, IPSR
 8005f6c:	60fb      	str	r3, [r7, #12]
  return(result);
 8005f6e:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d004      	beq.n	8005f7e <osMessageQueueGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 8005f74:	6938      	ldr	r0, [r7, #16]
 8005f76:	f001 f846 	bl	8007006 <uxQueueMessagesWaitingFromISR>
 8005f7a:	6178      	str	r0, [r7, #20]
 8005f7c:	e003      	b.n	8005f86 <osMessageQueueGetCount+0x36>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 8005f7e:	6938      	ldr	r0, [r7, #16]
 8005f80:	f001 f822 	bl	8006fc8 <uxQueueMessagesWaiting>
 8005f84:	6178      	str	r0, [r7, #20]
  }

  return ((uint32_t)count);
 8005f86:	697b      	ldr	r3, [r7, #20]
}
 8005f88:	4618      	mov	r0, r3
 8005f8a:	3718      	adds	r7, #24
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	bd80      	pop	{r7, pc}

08005f90 <osMessageQueueDelete>:
  }

  return (stat);
}

osStatus_t osMessageQueueDelete (osMessageQueueId_t mq_id) {
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b086      	sub	sp, #24
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005f9c:	f3ef 8305 	mrs	r3, IPSR
 8005fa0:	60fb      	str	r3, [r7, #12]
  return(result);
 8005fa2:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d003      	beq.n	8005fb0 <osMessageQueueDelete+0x20>
    stat = osErrorISR;
 8005fa8:	f06f 0305 	mvn.w	r3, #5
 8005fac:	617b      	str	r3, [r7, #20]
 8005fae:	e00e      	b.n	8005fce <osMessageQueueDelete+0x3e>
  }
  else if (hQueue == NULL) {
 8005fb0:	693b      	ldr	r3, [r7, #16]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d103      	bne.n	8005fbe <osMessageQueueDelete+0x2e>
    stat = osErrorParameter;
 8005fb6:	f06f 0303 	mvn.w	r3, #3
 8005fba:	617b      	str	r3, [r7, #20]
 8005fbc:	e007      	b.n	8005fce <osMessageQueueDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hQueue);
 8005fbe:	6938      	ldr	r0, [r7, #16]
 8005fc0:	f001 f9b6 	bl	8007330 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	617b      	str	r3, [r7, #20]
    vQueueDelete (hQueue);
 8005fc8:	6938      	ldr	r0, [r7, #16]
 8005fca:	f001 f83b 	bl	8007044 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 8005fce:	697b      	ldr	r3, [r7, #20]
}
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	3718      	adds	r7, #24
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	bd80      	pop	{r7, pc}

08005fd8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005fd8:	b480      	push	{r7}
 8005fda:	b085      	sub	sp, #20
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	60f8      	str	r0, [r7, #12]
 8005fe0:	60b9      	str	r1, [r7, #8]
 8005fe2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	4a07      	ldr	r2, [pc, #28]	@ (8006004 <vApplicationGetIdleTaskMemory+0x2c>)
 8005fe8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005fea:	68bb      	ldr	r3, [r7, #8]
 8005fec:	4a06      	ldr	r2, [pc, #24]	@ (8006008 <vApplicationGetIdleTaskMemory+0x30>)
 8005fee:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2280      	movs	r2, #128	@ 0x80
 8005ff4:	601a      	str	r2, [r3, #0]
}
 8005ff6:	bf00      	nop
 8005ff8:	3714      	adds	r7, #20
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006000:	4770      	bx	lr
 8006002:	bf00      	nop
 8006004:	200050a8 	.word	0x200050a8
 8006008:	20005150 	.word	0x20005150

0800600c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800600c:	b480      	push	{r7}
 800600e:	b085      	sub	sp, #20
 8006010:	af00      	add	r7, sp, #0
 8006012:	60f8      	str	r0, [r7, #12]
 8006014:	60b9      	str	r1, [r7, #8]
 8006016:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	4a07      	ldr	r2, [pc, #28]	@ (8006038 <vApplicationGetTimerTaskMemory+0x2c>)
 800601c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800601e:	68bb      	ldr	r3, [r7, #8]
 8006020:	4a06      	ldr	r2, [pc, #24]	@ (800603c <vApplicationGetTimerTaskMemory+0x30>)
 8006022:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800602a:	601a      	str	r2, [r3, #0]
}
 800602c:	bf00      	nop
 800602e:	3714      	adds	r7, #20
 8006030:	46bd      	mov	sp, r7
 8006032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006036:	4770      	bx	lr
 8006038:	20005350 	.word	0x20005350
 800603c:	200053f8 	.word	0x200053f8

08006040 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006040:	b480      	push	{r7}
 8006042:	b083      	sub	sp, #12
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	f103 0208 	add.w	r2, r3, #8
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	f04f 32ff 	mov.w	r2, #4294967295
 8006058:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	f103 0208 	add.w	r2, r3, #8
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	f103 0208 	add.w	r2, r3, #8
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2200      	movs	r2, #0
 8006072:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006074:	bf00      	nop
 8006076:	370c      	adds	r7, #12
 8006078:	46bd      	mov	sp, r7
 800607a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607e:	4770      	bx	lr

08006080 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006080:	b480      	push	{r7}
 8006082:	b083      	sub	sp, #12
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2200      	movs	r2, #0
 800608c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800608e:	bf00      	nop
 8006090:	370c      	adds	r7, #12
 8006092:	46bd      	mov	sp, r7
 8006094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006098:	4770      	bx	lr

0800609a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800609a:	b480      	push	{r7}
 800609c:	b085      	sub	sp, #20
 800609e:	af00      	add	r7, sp, #0
 80060a0:	6078      	str	r0, [r7, #4]
 80060a2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	685b      	ldr	r3, [r3, #4]
 80060a8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	68fa      	ldr	r2, [r7, #12]
 80060ae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	689a      	ldr	r2, [r3, #8]
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	689b      	ldr	r3, [r3, #8]
 80060bc:	683a      	ldr	r2, [r7, #0]
 80060be:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	683a      	ldr	r2, [r7, #0]
 80060c4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	687a      	ldr	r2, [r7, #4]
 80060ca:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	1c5a      	adds	r2, r3, #1
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	601a      	str	r2, [r3, #0]
}
 80060d6:	bf00      	nop
 80060d8:	3714      	adds	r7, #20
 80060da:	46bd      	mov	sp, r7
 80060dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e0:	4770      	bx	lr

080060e2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80060e2:	b480      	push	{r7}
 80060e4:	b085      	sub	sp, #20
 80060e6:	af00      	add	r7, sp, #0
 80060e8:	6078      	str	r0, [r7, #4]
 80060ea:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80060f2:	68bb      	ldr	r3, [r7, #8]
 80060f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060f8:	d103      	bne.n	8006102 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	691b      	ldr	r3, [r3, #16]
 80060fe:	60fb      	str	r3, [r7, #12]
 8006100:	e00c      	b.n	800611c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	3308      	adds	r3, #8
 8006106:	60fb      	str	r3, [r7, #12]
 8006108:	e002      	b.n	8006110 <vListInsert+0x2e>
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	685b      	ldr	r3, [r3, #4]
 800610e:	60fb      	str	r3, [r7, #12]
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	685b      	ldr	r3, [r3, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	68ba      	ldr	r2, [r7, #8]
 8006118:	429a      	cmp	r2, r3
 800611a:	d2f6      	bcs.n	800610a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	685a      	ldr	r2, [r3, #4]
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	685b      	ldr	r3, [r3, #4]
 8006128:	683a      	ldr	r2, [r7, #0]
 800612a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	68fa      	ldr	r2, [r7, #12]
 8006130:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	683a      	ldr	r2, [r7, #0]
 8006136:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	687a      	ldr	r2, [r7, #4]
 800613c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	1c5a      	adds	r2, r3, #1
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	601a      	str	r2, [r3, #0]
}
 8006148:	bf00      	nop
 800614a:	3714      	adds	r7, #20
 800614c:	46bd      	mov	sp, r7
 800614e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006152:	4770      	bx	lr

08006154 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006154:	b480      	push	{r7}
 8006156:	b085      	sub	sp, #20
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	691b      	ldr	r3, [r3, #16]
 8006160:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	685b      	ldr	r3, [r3, #4]
 8006166:	687a      	ldr	r2, [r7, #4]
 8006168:	6892      	ldr	r2, [r2, #8]
 800616a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	689b      	ldr	r3, [r3, #8]
 8006170:	687a      	ldr	r2, [r7, #4]
 8006172:	6852      	ldr	r2, [r2, #4]
 8006174:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	685b      	ldr	r3, [r3, #4]
 800617a:	687a      	ldr	r2, [r7, #4]
 800617c:	429a      	cmp	r2, r3
 800617e:	d103      	bne.n	8006188 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	689a      	ldr	r2, [r3, #8]
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2200      	movs	r2, #0
 800618c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	1e5a      	subs	r2, r3, #1
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
}
 800619c:	4618      	mov	r0, r3
 800619e:	3714      	adds	r7, #20
 80061a0:	46bd      	mov	sp, r7
 80061a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a6:	4770      	bx	lr

080061a8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b084      	sub	sp, #16
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
 80061b0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d10b      	bne.n	80061d4 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80061bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061c0:	f383 8811 	msr	BASEPRI, r3
 80061c4:	f3bf 8f6f 	isb	sy
 80061c8:	f3bf 8f4f 	dsb	sy
 80061cc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80061ce:	bf00      	nop
 80061d0:	bf00      	nop
 80061d2:	e7fd      	b.n	80061d0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80061d4:	f002 fdf0 	bl	8008db8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681a      	ldr	r2, [r3, #0]
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061e0:	68f9      	ldr	r1, [r7, #12]
 80061e2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80061e4:	fb01 f303 	mul.w	r3, r1, r3
 80061e8:	441a      	add	r2, r3
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	2200      	movs	r2, #0
 80061f2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681a      	ldr	r2, [r3, #0]
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681a      	ldr	r2, [r3, #0]
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006204:	3b01      	subs	r3, #1
 8006206:	68f9      	ldr	r1, [r7, #12]
 8006208:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800620a:	fb01 f303 	mul.w	r3, r1, r3
 800620e:	441a      	add	r2, r3
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	22ff      	movs	r2, #255	@ 0xff
 8006218:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	22ff      	movs	r2, #255	@ 0xff
 8006220:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d114      	bne.n	8006254 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	691b      	ldr	r3, [r3, #16]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d01a      	beq.n	8006268 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	3310      	adds	r3, #16
 8006236:	4618      	mov	r0, r3
 8006238:	f001 fd7c 	bl	8007d34 <xTaskRemoveFromEventList>
 800623c:	4603      	mov	r3, r0
 800623e:	2b00      	cmp	r3, #0
 8006240:	d012      	beq.n	8006268 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006242:	4b0d      	ldr	r3, [pc, #52]	@ (8006278 <xQueueGenericReset+0xd0>)
 8006244:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006248:	601a      	str	r2, [r3, #0]
 800624a:	f3bf 8f4f 	dsb	sy
 800624e:	f3bf 8f6f 	isb	sy
 8006252:	e009      	b.n	8006268 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	3310      	adds	r3, #16
 8006258:	4618      	mov	r0, r3
 800625a:	f7ff fef1 	bl	8006040 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	3324      	adds	r3, #36	@ 0x24
 8006262:	4618      	mov	r0, r3
 8006264:	f7ff feec 	bl	8006040 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006268:	f002 fdd8 	bl	8008e1c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800626c:	2301      	movs	r3, #1
}
 800626e:	4618      	mov	r0, r3
 8006270:	3710      	adds	r7, #16
 8006272:	46bd      	mov	sp, r7
 8006274:	bd80      	pop	{r7, pc}
 8006276:	bf00      	nop
 8006278:	e000ed04 	.word	0xe000ed04

0800627c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800627c:	b580      	push	{r7, lr}
 800627e:	b08e      	sub	sp, #56	@ 0x38
 8006280:	af02      	add	r7, sp, #8
 8006282:	60f8      	str	r0, [r7, #12]
 8006284:	60b9      	str	r1, [r7, #8]
 8006286:	607a      	str	r2, [r7, #4]
 8006288:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d10b      	bne.n	80062a8 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8006290:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006294:	f383 8811 	msr	BASEPRI, r3
 8006298:	f3bf 8f6f 	isb	sy
 800629c:	f3bf 8f4f 	dsb	sy
 80062a0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80062a2:	bf00      	nop
 80062a4:	bf00      	nop
 80062a6:	e7fd      	b.n	80062a4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d10b      	bne.n	80062c6 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80062ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062b2:	f383 8811 	msr	BASEPRI, r3
 80062b6:	f3bf 8f6f 	isb	sy
 80062ba:	f3bf 8f4f 	dsb	sy
 80062be:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80062c0:	bf00      	nop
 80062c2:	bf00      	nop
 80062c4:	e7fd      	b.n	80062c2 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d002      	beq.n	80062d2 <xQueueGenericCreateStatic+0x56>
 80062cc:	68bb      	ldr	r3, [r7, #8]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d001      	beq.n	80062d6 <xQueueGenericCreateStatic+0x5a>
 80062d2:	2301      	movs	r3, #1
 80062d4:	e000      	b.n	80062d8 <xQueueGenericCreateStatic+0x5c>
 80062d6:	2300      	movs	r3, #0
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d10b      	bne.n	80062f4 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80062dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062e0:	f383 8811 	msr	BASEPRI, r3
 80062e4:	f3bf 8f6f 	isb	sy
 80062e8:	f3bf 8f4f 	dsb	sy
 80062ec:	623b      	str	r3, [r7, #32]
}
 80062ee:	bf00      	nop
 80062f0:	bf00      	nop
 80062f2:	e7fd      	b.n	80062f0 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d102      	bne.n	8006300 <xQueueGenericCreateStatic+0x84>
 80062fa:	68bb      	ldr	r3, [r7, #8]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d101      	bne.n	8006304 <xQueueGenericCreateStatic+0x88>
 8006300:	2301      	movs	r3, #1
 8006302:	e000      	b.n	8006306 <xQueueGenericCreateStatic+0x8a>
 8006304:	2300      	movs	r3, #0
 8006306:	2b00      	cmp	r3, #0
 8006308:	d10b      	bne.n	8006322 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800630a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800630e:	f383 8811 	msr	BASEPRI, r3
 8006312:	f3bf 8f6f 	isb	sy
 8006316:	f3bf 8f4f 	dsb	sy
 800631a:	61fb      	str	r3, [r7, #28]
}
 800631c:	bf00      	nop
 800631e:	bf00      	nop
 8006320:	e7fd      	b.n	800631e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006322:	2350      	movs	r3, #80	@ 0x50
 8006324:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006326:	697b      	ldr	r3, [r7, #20]
 8006328:	2b50      	cmp	r3, #80	@ 0x50
 800632a:	d00b      	beq.n	8006344 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800632c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006330:	f383 8811 	msr	BASEPRI, r3
 8006334:	f3bf 8f6f 	isb	sy
 8006338:	f3bf 8f4f 	dsb	sy
 800633c:	61bb      	str	r3, [r7, #24]
}
 800633e:	bf00      	nop
 8006340:	bf00      	nop
 8006342:	e7fd      	b.n	8006340 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006344:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800634a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800634c:	2b00      	cmp	r3, #0
 800634e:	d00d      	beq.n	800636c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006350:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006352:	2201      	movs	r2, #1
 8006354:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006358:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800635c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800635e:	9300      	str	r3, [sp, #0]
 8006360:	4613      	mov	r3, r2
 8006362:	687a      	ldr	r2, [r7, #4]
 8006364:	68b9      	ldr	r1, [r7, #8]
 8006366:	68f8      	ldr	r0, [r7, #12]
 8006368:	f000 f840 	bl	80063ec <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800636c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800636e:	4618      	mov	r0, r3
 8006370:	3730      	adds	r7, #48	@ 0x30
 8006372:	46bd      	mov	sp, r7
 8006374:	bd80      	pop	{r7, pc}

08006376 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006376:	b580      	push	{r7, lr}
 8006378:	b08a      	sub	sp, #40	@ 0x28
 800637a:	af02      	add	r7, sp, #8
 800637c:	60f8      	str	r0, [r7, #12]
 800637e:	60b9      	str	r1, [r7, #8]
 8006380:	4613      	mov	r3, r2
 8006382:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d10b      	bne.n	80063a2 <xQueueGenericCreate+0x2c>
	__asm volatile
 800638a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800638e:	f383 8811 	msr	BASEPRI, r3
 8006392:	f3bf 8f6f 	isb	sy
 8006396:	f3bf 8f4f 	dsb	sy
 800639a:	613b      	str	r3, [r7, #16]
}
 800639c:	bf00      	nop
 800639e:	bf00      	nop
 80063a0:	e7fd      	b.n	800639e <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	68ba      	ldr	r2, [r7, #8]
 80063a6:	fb02 f303 	mul.w	r3, r2, r3
 80063aa:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80063ac:	69fb      	ldr	r3, [r7, #28]
 80063ae:	3350      	adds	r3, #80	@ 0x50
 80063b0:	4618      	mov	r0, r3
 80063b2:	f002 fe23 	bl	8008ffc <pvPortMalloc>
 80063b6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80063b8:	69bb      	ldr	r3, [r7, #24]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d011      	beq.n	80063e2 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80063be:	69bb      	ldr	r3, [r7, #24]
 80063c0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80063c2:	697b      	ldr	r3, [r7, #20]
 80063c4:	3350      	adds	r3, #80	@ 0x50
 80063c6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80063c8:	69bb      	ldr	r3, [r7, #24]
 80063ca:	2200      	movs	r2, #0
 80063cc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80063d0:	79fa      	ldrb	r2, [r7, #7]
 80063d2:	69bb      	ldr	r3, [r7, #24]
 80063d4:	9300      	str	r3, [sp, #0]
 80063d6:	4613      	mov	r3, r2
 80063d8:	697a      	ldr	r2, [r7, #20]
 80063da:	68b9      	ldr	r1, [r7, #8]
 80063dc:	68f8      	ldr	r0, [r7, #12]
 80063de:	f000 f805 	bl	80063ec <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80063e2:	69bb      	ldr	r3, [r7, #24]
	}
 80063e4:	4618      	mov	r0, r3
 80063e6:	3720      	adds	r7, #32
 80063e8:	46bd      	mov	sp, r7
 80063ea:	bd80      	pop	{r7, pc}

080063ec <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b084      	sub	sp, #16
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	60f8      	str	r0, [r7, #12]
 80063f4:	60b9      	str	r1, [r7, #8]
 80063f6:	607a      	str	r2, [r7, #4]
 80063f8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80063fa:	68bb      	ldr	r3, [r7, #8]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d103      	bne.n	8006408 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006400:	69bb      	ldr	r3, [r7, #24]
 8006402:	69ba      	ldr	r2, [r7, #24]
 8006404:	601a      	str	r2, [r3, #0]
 8006406:	e002      	b.n	800640e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006408:	69bb      	ldr	r3, [r7, #24]
 800640a:	687a      	ldr	r2, [r7, #4]
 800640c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800640e:	69bb      	ldr	r3, [r7, #24]
 8006410:	68fa      	ldr	r2, [r7, #12]
 8006412:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006414:	69bb      	ldr	r3, [r7, #24]
 8006416:	68ba      	ldr	r2, [r7, #8]
 8006418:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800641a:	2101      	movs	r1, #1
 800641c:	69b8      	ldr	r0, [r7, #24]
 800641e:	f7ff fec3 	bl	80061a8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006422:	69bb      	ldr	r3, [r7, #24]
 8006424:	78fa      	ldrb	r2, [r7, #3]
 8006426:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800642a:	bf00      	nop
 800642c:	3710      	adds	r7, #16
 800642e:	46bd      	mov	sp, r7
 8006430:	bd80      	pop	{r7, pc}

08006432 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8006432:	b580      	push	{r7, lr}
 8006434:	b082      	sub	sp, #8
 8006436:	af00      	add	r7, sp, #0
 8006438:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d00e      	beq.n	800645e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2200      	movs	r2, #0
 8006444:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2200      	movs	r2, #0
 800644a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2200      	movs	r2, #0
 8006450:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8006452:	2300      	movs	r3, #0
 8006454:	2200      	movs	r2, #0
 8006456:	2100      	movs	r1, #0
 8006458:	6878      	ldr	r0, [r7, #4]
 800645a:	f000 f911 	bl	8006680 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800645e:	bf00      	nop
 8006460:	3708      	adds	r7, #8
 8006462:	46bd      	mov	sp, r7
 8006464:	bd80      	pop	{r7, pc}

08006466 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8006466:	b580      	push	{r7, lr}
 8006468:	b086      	sub	sp, #24
 800646a:	af00      	add	r7, sp, #0
 800646c:	4603      	mov	r3, r0
 800646e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006470:	2301      	movs	r3, #1
 8006472:	617b      	str	r3, [r7, #20]
 8006474:	2300      	movs	r3, #0
 8006476:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8006478:	79fb      	ldrb	r3, [r7, #7]
 800647a:	461a      	mov	r2, r3
 800647c:	6939      	ldr	r1, [r7, #16]
 800647e:	6978      	ldr	r0, [r7, #20]
 8006480:	f7ff ff79 	bl	8006376 <xQueueGenericCreate>
 8006484:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006486:	68f8      	ldr	r0, [r7, #12]
 8006488:	f7ff ffd3 	bl	8006432 <prvInitialiseMutex>

		return xNewQueue;
 800648c:	68fb      	ldr	r3, [r7, #12]
	}
 800648e:	4618      	mov	r0, r3
 8006490:	3718      	adds	r7, #24
 8006492:	46bd      	mov	sp, r7
 8006494:	bd80      	pop	{r7, pc}

08006496 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8006496:	b580      	push	{r7, lr}
 8006498:	b088      	sub	sp, #32
 800649a:	af02      	add	r7, sp, #8
 800649c:	4603      	mov	r3, r0
 800649e:	6039      	str	r1, [r7, #0]
 80064a0:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80064a2:	2301      	movs	r3, #1
 80064a4:	617b      	str	r3, [r7, #20]
 80064a6:	2300      	movs	r3, #0
 80064a8:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80064aa:	79fb      	ldrb	r3, [r7, #7]
 80064ac:	9300      	str	r3, [sp, #0]
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	2200      	movs	r2, #0
 80064b2:	6939      	ldr	r1, [r7, #16]
 80064b4:	6978      	ldr	r0, [r7, #20]
 80064b6:	f7ff fee1 	bl	800627c <xQueueGenericCreateStatic>
 80064ba:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80064bc:	68f8      	ldr	r0, [r7, #12]
 80064be:	f7ff ffb8 	bl	8006432 <prvInitialiseMutex>

		return xNewQueue;
 80064c2:	68fb      	ldr	r3, [r7, #12]
	}
 80064c4:	4618      	mov	r0, r3
 80064c6:	3718      	adds	r7, #24
 80064c8:	46bd      	mov	sp, r7
 80064ca:	bd80      	pop	{r7, pc}

080064cc <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 80064cc:	b590      	push	{r4, r7, lr}
 80064ce:	b087      	sub	sp, #28
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80064d8:	693b      	ldr	r3, [r7, #16]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d10b      	bne.n	80064f6 <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 80064de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064e2:	f383 8811 	msr	BASEPRI, r3
 80064e6:	f3bf 8f6f 	isb	sy
 80064ea:	f3bf 8f4f 	dsb	sy
 80064ee:	60fb      	str	r3, [r7, #12]
}
 80064f0:	bf00      	nop
 80064f2:	bf00      	nop
 80064f4:	e7fd      	b.n	80064f2 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80064f6:	693b      	ldr	r3, [r7, #16]
 80064f8:	689c      	ldr	r4, [r3, #8]
 80064fa:	f001 fde1 	bl	80080c0 <xTaskGetCurrentTaskHandle>
 80064fe:	4603      	mov	r3, r0
 8006500:	429c      	cmp	r4, r3
 8006502:	d111      	bne.n	8006528 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8006504:	693b      	ldr	r3, [r7, #16]
 8006506:	68db      	ldr	r3, [r3, #12]
 8006508:	1e5a      	subs	r2, r3, #1
 800650a:	693b      	ldr	r3, [r7, #16]
 800650c:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800650e:	693b      	ldr	r3, [r7, #16]
 8006510:	68db      	ldr	r3, [r3, #12]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d105      	bne.n	8006522 <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8006516:	2300      	movs	r3, #0
 8006518:	2200      	movs	r2, #0
 800651a:	2100      	movs	r1, #0
 800651c:	6938      	ldr	r0, [r7, #16]
 800651e:	f000 f8af 	bl	8006680 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8006522:	2301      	movs	r3, #1
 8006524:	617b      	str	r3, [r7, #20]
 8006526:	e001      	b.n	800652c <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8006528:	2300      	movs	r3, #0
 800652a:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800652c:	697b      	ldr	r3, [r7, #20]
	}
 800652e:	4618      	mov	r0, r3
 8006530:	371c      	adds	r7, #28
 8006532:	46bd      	mov	sp, r7
 8006534:	bd90      	pop	{r4, r7, pc}

08006536 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8006536:	b590      	push	{r4, r7, lr}
 8006538:	b087      	sub	sp, #28
 800653a:	af00      	add	r7, sp, #0
 800653c:	6078      	str	r0, [r7, #4]
 800653e:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8006544:	693b      	ldr	r3, [r7, #16]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d10b      	bne.n	8006562 <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 800654a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800654e:	f383 8811 	msr	BASEPRI, r3
 8006552:	f3bf 8f6f 	isb	sy
 8006556:	f3bf 8f4f 	dsb	sy
 800655a:	60fb      	str	r3, [r7, #12]
}
 800655c:	bf00      	nop
 800655e:	bf00      	nop
 8006560:	e7fd      	b.n	800655e <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8006562:	693b      	ldr	r3, [r7, #16]
 8006564:	689c      	ldr	r4, [r3, #8]
 8006566:	f001 fdab 	bl	80080c0 <xTaskGetCurrentTaskHandle>
 800656a:	4603      	mov	r3, r0
 800656c:	429c      	cmp	r4, r3
 800656e:	d107      	bne.n	8006580 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8006570:	693b      	ldr	r3, [r7, #16]
 8006572:	68db      	ldr	r3, [r3, #12]
 8006574:	1c5a      	adds	r2, r3, #1
 8006576:	693b      	ldr	r3, [r7, #16]
 8006578:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800657a:	2301      	movs	r3, #1
 800657c:	617b      	str	r3, [r7, #20]
 800657e:	e00c      	b.n	800659a <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8006580:	6839      	ldr	r1, [r7, #0]
 8006582:	6938      	ldr	r0, [r7, #16]
 8006584:	f000 fb8e 	bl	8006ca4 <xQueueSemaphoreTake>
 8006588:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800658a:	697b      	ldr	r3, [r7, #20]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d004      	beq.n	800659a <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8006590:	693b      	ldr	r3, [r7, #16]
 8006592:	68db      	ldr	r3, [r3, #12]
 8006594:	1c5a      	adds	r2, r3, #1
 8006596:	693b      	ldr	r3, [r7, #16]
 8006598:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800659a:	697b      	ldr	r3, [r7, #20]
	}
 800659c:	4618      	mov	r0, r3
 800659e:	371c      	adds	r7, #28
 80065a0:	46bd      	mov	sp, r7
 80065a2:	bd90      	pop	{r4, r7, pc}

080065a4 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b08a      	sub	sp, #40	@ 0x28
 80065a8:	af02      	add	r7, sp, #8
 80065aa:	60f8      	str	r0, [r7, #12]
 80065ac:	60b9      	str	r1, [r7, #8]
 80065ae:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d10b      	bne.n	80065ce <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 80065b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065ba:	f383 8811 	msr	BASEPRI, r3
 80065be:	f3bf 8f6f 	isb	sy
 80065c2:	f3bf 8f4f 	dsb	sy
 80065c6:	61bb      	str	r3, [r7, #24]
}
 80065c8:	bf00      	nop
 80065ca:	bf00      	nop
 80065cc:	e7fd      	b.n	80065ca <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 80065ce:	68ba      	ldr	r2, [r7, #8]
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	429a      	cmp	r2, r3
 80065d4:	d90b      	bls.n	80065ee <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 80065d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065da:	f383 8811 	msr	BASEPRI, r3
 80065de:	f3bf 8f6f 	isb	sy
 80065e2:	f3bf 8f4f 	dsb	sy
 80065e6:	617b      	str	r3, [r7, #20]
}
 80065e8:	bf00      	nop
 80065ea:	bf00      	nop
 80065ec:	e7fd      	b.n	80065ea <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80065ee:	2302      	movs	r3, #2
 80065f0:	9300      	str	r3, [sp, #0]
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2200      	movs	r2, #0
 80065f6:	2100      	movs	r1, #0
 80065f8:	68f8      	ldr	r0, [r7, #12]
 80065fa:	f7ff fe3f 	bl	800627c <xQueueGenericCreateStatic>
 80065fe:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8006600:	69fb      	ldr	r3, [r7, #28]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d002      	beq.n	800660c <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8006606:	69fb      	ldr	r3, [r7, #28]
 8006608:	68ba      	ldr	r2, [r7, #8]
 800660a:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800660c:	69fb      	ldr	r3, [r7, #28]
	}
 800660e:	4618      	mov	r0, r3
 8006610:	3720      	adds	r7, #32
 8006612:	46bd      	mov	sp, r7
 8006614:	bd80      	pop	{r7, pc}

08006616 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8006616:	b580      	push	{r7, lr}
 8006618:	b086      	sub	sp, #24
 800661a:	af00      	add	r7, sp, #0
 800661c:	6078      	str	r0, [r7, #4]
 800661e:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d10b      	bne.n	800663e <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 8006626:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800662a:	f383 8811 	msr	BASEPRI, r3
 800662e:	f3bf 8f6f 	isb	sy
 8006632:	f3bf 8f4f 	dsb	sy
 8006636:	613b      	str	r3, [r7, #16]
}
 8006638:	bf00      	nop
 800663a:	bf00      	nop
 800663c:	e7fd      	b.n	800663a <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800663e:	683a      	ldr	r2, [r7, #0]
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	429a      	cmp	r2, r3
 8006644:	d90b      	bls.n	800665e <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 8006646:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800664a:	f383 8811 	msr	BASEPRI, r3
 800664e:	f3bf 8f6f 	isb	sy
 8006652:	f3bf 8f4f 	dsb	sy
 8006656:	60fb      	str	r3, [r7, #12]
}
 8006658:	bf00      	nop
 800665a:	bf00      	nop
 800665c:	e7fd      	b.n	800665a <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800665e:	2202      	movs	r2, #2
 8006660:	2100      	movs	r1, #0
 8006662:	6878      	ldr	r0, [r7, #4]
 8006664:	f7ff fe87 	bl	8006376 <xQueueGenericCreate>
 8006668:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800666a:	697b      	ldr	r3, [r7, #20]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d002      	beq.n	8006676 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8006670:	697b      	ldr	r3, [r7, #20]
 8006672:	683a      	ldr	r2, [r7, #0]
 8006674:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8006676:	697b      	ldr	r3, [r7, #20]
	}
 8006678:	4618      	mov	r0, r3
 800667a:	3718      	adds	r7, #24
 800667c:	46bd      	mov	sp, r7
 800667e:	bd80      	pop	{r7, pc}

08006680 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006680:	b580      	push	{r7, lr}
 8006682:	b08e      	sub	sp, #56	@ 0x38
 8006684:	af00      	add	r7, sp, #0
 8006686:	60f8      	str	r0, [r7, #12]
 8006688:	60b9      	str	r1, [r7, #8]
 800668a:	607a      	str	r2, [r7, #4]
 800668c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800668e:	2300      	movs	r3, #0
 8006690:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006696:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006698:	2b00      	cmp	r3, #0
 800669a:	d10b      	bne.n	80066b4 <xQueueGenericSend+0x34>
	__asm volatile
 800669c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066a0:	f383 8811 	msr	BASEPRI, r3
 80066a4:	f3bf 8f6f 	isb	sy
 80066a8:	f3bf 8f4f 	dsb	sy
 80066ac:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80066ae:	bf00      	nop
 80066b0:	bf00      	nop
 80066b2:	e7fd      	b.n	80066b0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80066b4:	68bb      	ldr	r3, [r7, #8]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d103      	bne.n	80066c2 <xQueueGenericSend+0x42>
 80066ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d101      	bne.n	80066c6 <xQueueGenericSend+0x46>
 80066c2:	2301      	movs	r3, #1
 80066c4:	e000      	b.n	80066c8 <xQueueGenericSend+0x48>
 80066c6:	2300      	movs	r3, #0
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d10b      	bne.n	80066e4 <xQueueGenericSend+0x64>
	__asm volatile
 80066cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066d0:	f383 8811 	msr	BASEPRI, r3
 80066d4:	f3bf 8f6f 	isb	sy
 80066d8:	f3bf 8f4f 	dsb	sy
 80066dc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80066de:	bf00      	nop
 80066e0:	bf00      	nop
 80066e2:	e7fd      	b.n	80066e0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	2b02      	cmp	r3, #2
 80066e8:	d103      	bne.n	80066f2 <xQueueGenericSend+0x72>
 80066ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066ee:	2b01      	cmp	r3, #1
 80066f0:	d101      	bne.n	80066f6 <xQueueGenericSend+0x76>
 80066f2:	2301      	movs	r3, #1
 80066f4:	e000      	b.n	80066f8 <xQueueGenericSend+0x78>
 80066f6:	2300      	movs	r3, #0
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d10b      	bne.n	8006714 <xQueueGenericSend+0x94>
	__asm volatile
 80066fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006700:	f383 8811 	msr	BASEPRI, r3
 8006704:	f3bf 8f6f 	isb	sy
 8006708:	f3bf 8f4f 	dsb	sy
 800670c:	623b      	str	r3, [r7, #32]
}
 800670e:	bf00      	nop
 8006710:	bf00      	nop
 8006712:	e7fd      	b.n	8006710 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006714:	f001 fce4 	bl	80080e0 <xTaskGetSchedulerState>
 8006718:	4603      	mov	r3, r0
 800671a:	2b00      	cmp	r3, #0
 800671c:	d102      	bne.n	8006724 <xQueueGenericSend+0xa4>
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d101      	bne.n	8006728 <xQueueGenericSend+0xa8>
 8006724:	2301      	movs	r3, #1
 8006726:	e000      	b.n	800672a <xQueueGenericSend+0xaa>
 8006728:	2300      	movs	r3, #0
 800672a:	2b00      	cmp	r3, #0
 800672c:	d10b      	bne.n	8006746 <xQueueGenericSend+0xc6>
	__asm volatile
 800672e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006732:	f383 8811 	msr	BASEPRI, r3
 8006736:	f3bf 8f6f 	isb	sy
 800673a:	f3bf 8f4f 	dsb	sy
 800673e:	61fb      	str	r3, [r7, #28]
}
 8006740:	bf00      	nop
 8006742:	bf00      	nop
 8006744:	e7fd      	b.n	8006742 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006746:	f002 fb37 	bl	8008db8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800674a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800674c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800674e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006750:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006752:	429a      	cmp	r2, r3
 8006754:	d302      	bcc.n	800675c <xQueueGenericSend+0xdc>
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	2b02      	cmp	r3, #2
 800675a:	d129      	bne.n	80067b0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800675c:	683a      	ldr	r2, [r7, #0]
 800675e:	68b9      	ldr	r1, [r7, #8]
 8006760:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006762:	f000 fcab 	bl	80070bc <prvCopyDataToQueue>
 8006766:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006768:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800676a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800676c:	2b00      	cmp	r3, #0
 800676e:	d010      	beq.n	8006792 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006770:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006772:	3324      	adds	r3, #36	@ 0x24
 8006774:	4618      	mov	r0, r3
 8006776:	f001 fadd 	bl	8007d34 <xTaskRemoveFromEventList>
 800677a:	4603      	mov	r3, r0
 800677c:	2b00      	cmp	r3, #0
 800677e:	d013      	beq.n	80067a8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006780:	4b3f      	ldr	r3, [pc, #252]	@ (8006880 <xQueueGenericSend+0x200>)
 8006782:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006786:	601a      	str	r2, [r3, #0]
 8006788:	f3bf 8f4f 	dsb	sy
 800678c:	f3bf 8f6f 	isb	sy
 8006790:	e00a      	b.n	80067a8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006792:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006794:	2b00      	cmp	r3, #0
 8006796:	d007      	beq.n	80067a8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006798:	4b39      	ldr	r3, [pc, #228]	@ (8006880 <xQueueGenericSend+0x200>)
 800679a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800679e:	601a      	str	r2, [r3, #0]
 80067a0:	f3bf 8f4f 	dsb	sy
 80067a4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80067a8:	f002 fb38 	bl	8008e1c <vPortExitCritical>
				return pdPASS;
 80067ac:	2301      	movs	r3, #1
 80067ae:	e063      	b.n	8006878 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d103      	bne.n	80067be <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80067b6:	f002 fb31 	bl	8008e1c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80067ba:	2300      	movs	r3, #0
 80067bc:	e05c      	b.n	8006878 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80067be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d106      	bne.n	80067d2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80067c4:	f107 0314 	add.w	r3, r7, #20
 80067c8:	4618      	mov	r0, r3
 80067ca:	f001 fb17 	bl	8007dfc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80067ce:	2301      	movs	r3, #1
 80067d0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80067d2:	f002 fb23 	bl	8008e1c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80067d6:	f001 f86d 	bl	80078b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80067da:	f002 faed 	bl	8008db8 <vPortEnterCritical>
 80067de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067e0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80067e4:	b25b      	sxtb	r3, r3
 80067e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067ea:	d103      	bne.n	80067f4 <xQueueGenericSend+0x174>
 80067ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067ee:	2200      	movs	r2, #0
 80067f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80067f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067f6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80067fa:	b25b      	sxtb	r3, r3
 80067fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006800:	d103      	bne.n	800680a <xQueueGenericSend+0x18a>
 8006802:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006804:	2200      	movs	r2, #0
 8006806:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800680a:	f002 fb07 	bl	8008e1c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800680e:	1d3a      	adds	r2, r7, #4
 8006810:	f107 0314 	add.w	r3, r7, #20
 8006814:	4611      	mov	r1, r2
 8006816:	4618      	mov	r0, r3
 8006818:	f001 fb06 	bl	8007e28 <xTaskCheckForTimeOut>
 800681c:	4603      	mov	r3, r0
 800681e:	2b00      	cmp	r3, #0
 8006820:	d124      	bne.n	800686c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006822:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006824:	f000 fd42 	bl	80072ac <prvIsQueueFull>
 8006828:	4603      	mov	r3, r0
 800682a:	2b00      	cmp	r3, #0
 800682c:	d018      	beq.n	8006860 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800682e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006830:	3310      	adds	r3, #16
 8006832:	687a      	ldr	r2, [r7, #4]
 8006834:	4611      	mov	r1, r2
 8006836:	4618      	mov	r0, r3
 8006838:	f001 fa2a 	bl	8007c90 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800683c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800683e:	f000 fccd 	bl	80071dc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006842:	f001 f845 	bl	80078d0 <xTaskResumeAll>
 8006846:	4603      	mov	r3, r0
 8006848:	2b00      	cmp	r3, #0
 800684a:	f47f af7c 	bne.w	8006746 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800684e:	4b0c      	ldr	r3, [pc, #48]	@ (8006880 <xQueueGenericSend+0x200>)
 8006850:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006854:	601a      	str	r2, [r3, #0]
 8006856:	f3bf 8f4f 	dsb	sy
 800685a:	f3bf 8f6f 	isb	sy
 800685e:	e772      	b.n	8006746 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006860:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006862:	f000 fcbb 	bl	80071dc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006866:	f001 f833 	bl	80078d0 <xTaskResumeAll>
 800686a:	e76c      	b.n	8006746 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800686c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800686e:	f000 fcb5 	bl	80071dc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006872:	f001 f82d 	bl	80078d0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006876:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006878:	4618      	mov	r0, r3
 800687a:	3738      	adds	r7, #56	@ 0x38
 800687c:	46bd      	mov	sp, r7
 800687e:	bd80      	pop	{r7, pc}
 8006880:	e000ed04 	.word	0xe000ed04

08006884 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006884:	b580      	push	{r7, lr}
 8006886:	b090      	sub	sp, #64	@ 0x40
 8006888:	af00      	add	r7, sp, #0
 800688a:	60f8      	str	r0, [r7, #12]
 800688c:	60b9      	str	r1, [r7, #8]
 800688e:	607a      	str	r2, [r7, #4]
 8006890:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8006896:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006898:	2b00      	cmp	r3, #0
 800689a:	d10b      	bne.n	80068b4 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800689c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068a0:	f383 8811 	msr	BASEPRI, r3
 80068a4:	f3bf 8f6f 	isb	sy
 80068a8:	f3bf 8f4f 	dsb	sy
 80068ac:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80068ae:	bf00      	nop
 80068b0:	bf00      	nop
 80068b2:	e7fd      	b.n	80068b0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80068b4:	68bb      	ldr	r3, [r7, #8]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d103      	bne.n	80068c2 <xQueueGenericSendFromISR+0x3e>
 80068ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d101      	bne.n	80068c6 <xQueueGenericSendFromISR+0x42>
 80068c2:	2301      	movs	r3, #1
 80068c4:	e000      	b.n	80068c8 <xQueueGenericSendFromISR+0x44>
 80068c6:	2300      	movs	r3, #0
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d10b      	bne.n	80068e4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80068cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068d0:	f383 8811 	msr	BASEPRI, r3
 80068d4:	f3bf 8f6f 	isb	sy
 80068d8:	f3bf 8f4f 	dsb	sy
 80068dc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80068de:	bf00      	nop
 80068e0:	bf00      	nop
 80068e2:	e7fd      	b.n	80068e0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	2b02      	cmp	r3, #2
 80068e8:	d103      	bne.n	80068f2 <xQueueGenericSendFromISR+0x6e>
 80068ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068ee:	2b01      	cmp	r3, #1
 80068f0:	d101      	bne.n	80068f6 <xQueueGenericSendFromISR+0x72>
 80068f2:	2301      	movs	r3, #1
 80068f4:	e000      	b.n	80068f8 <xQueueGenericSendFromISR+0x74>
 80068f6:	2300      	movs	r3, #0
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d10b      	bne.n	8006914 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80068fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006900:	f383 8811 	msr	BASEPRI, r3
 8006904:	f3bf 8f6f 	isb	sy
 8006908:	f3bf 8f4f 	dsb	sy
 800690c:	623b      	str	r3, [r7, #32]
}
 800690e:	bf00      	nop
 8006910:	bf00      	nop
 8006912:	e7fd      	b.n	8006910 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006914:	f002 fb30 	bl	8008f78 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006918:	f3ef 8211 	mrs	r2, BASEPRI
 800691c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006920:	f383 8811 	msr	BASEPRI, r3
 8006924:	f3bf 8f6f 	isb	sy
 8006928:	f3bf 8f4f 	dsb	sy
 800692c:	61fa      	str	r2, [r7, #28]
 800692e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006930:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006932:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006934:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006936:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006938:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800693a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800693c:	429a      	cmp	r2, r3
 800693e:	d302      	bcc.n	8006946 <xQueueGenericSendFromISR+0xc2>
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	2b02      	cmp	r3, #2
 8006944:	d12f      	bne.n	80069a6 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006946:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006948:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800694c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006950:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006952:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006954:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006956:	683a      	ldr	r2, [r7, #0]
 8006958:	68b9      	ldr	r1, [r7, #8]
 800695a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800695c:	f000 fbae 	bl	80070bc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006960:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8006964:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006968:	d112      	bne.n	8006990 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800696a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800696c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800696e:	2b00      	cmp	r3, #0
 8006970:	d016      	beq.n	80069a0 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006972:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006974:	3324      	adds	r3, #36	@ 0x24
 8006976:	4618      	mov	r0, r3
 8006978:	f001 f9dc 	bl	8007d34 <xTaskRemoveFromEventList>
 800697c:	4603      	mov	r3, r0
 800697e:	2b00      	cmp	r3, #0
 8006980:	d00e      	beq.n	80069a0 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d00b      	beq.n	80069a0 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2201      	movs	r2, #1
 800698c:	601a      	str	r2, [r3, #0]
 800698e:	e007      	b.n	80069a0 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006990:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8006994:	3301      	adds	r3, #1
 8006996:	b2db      	uxtb	r3, r3
 8006998:	b25a      	sxtb	r2, r3
 800699a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800699c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80069a0:	2301      	movs	r3, #1
 80069a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80069a4:	e001      	b.n	80069aa <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80069a6:	2300      	movs	r3, #0
 80069a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80069aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069ac:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80069ae:	697b      	ldr	r3, [r7, #20]
 80069b0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80069b4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80069b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80069b8:	4618      	mov	r0, r3
 80069ba:	3740      	adds	r7, #64	@ 0x40
 80069bc:	46bd      	mov	sp, r7
 80069be:	bd80      	pop	{r7, pc}

080069c0 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b08e      	sub	sp, #56	@ 0x38
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
 80069c8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80069ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d10b      	bne.n	80069ec <xQueueGiveFromISR+0x2c>
	__asm volatile
 80069d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069d8:	f383 8811 	msr	BASEPRI, r3
 80069dc:	f3bf 8f6f 	isb	sy
 80069e0:	f3bf 8f4f 	dsb	sy
 80069e4:	623b      	str	r3, [r7, #32]
}
 80069e6:	bf00      	nop
 80069e8:	bf00      	nop
 80069ea:	e7fd      	b.n	80069e8 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80069ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d00b      	beq.n	8006a0c <xQueueGiveFromISR+0x4c>
	__asm volatile
 80069f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069f8:	f383 8811 	msr	BASEPRI, r3
 80069fc:	f3bf 8f6f 	isb	sy
 8006a00:	f3bf 8f4f 	dsb	sy
 8006a04:	61fb      	str	r3, [r7, #28]
}
 8006a06:	bf00      	nop
 8006a08:	bf00      	nop
 8006a0a:	e7fd      	b.n	8006a08 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8006a0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d103      	bne.n	8006a1c <xQueueGiveFromISR+0x5c>
 8006a14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a16:	689b      	ldr	r3, [r3, #8]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d101      	bne.n	8006a20 <xQueueGiveFromISR+0x60>
 8006a1c:	2301      	movs	r3, #1
 8006a1e:	e000      	b.n	8006a22 <xQueueGiveFromISR+0x62>
 8006a20:	2300      	movs	r3, #0
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d10b      	bne.n	8006a3e <xQueueGiveFromISR+0x7e>
	__asm volatile
 8006a26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a2a:	f383 8811 	msr	BASEPRI, r3
 8006a2e:	f3bf 8f6f 	isb	sy
 8006a32:	f3bf 8f4f 	dsb	sy
 8006a36:	61bb      	str	r3, [r7, #24]
}
 8006a38:	bf00      	nop
 8006a3a:	bf00      	nop
 8006a3c:	e7fd      	b.n	8006a3a <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006a3e:	f002 fa9b 	bl	8008f78 <vPortValidateInterruptPriority>
	__asm volatile
 8006a42:	f3ef 8211 	mrs	r2, BASEPRI
 8006a46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a4a:	f383 8811 	msr	BASEPRI, r3
 8006a4e:	f3bf 8f6f 	isb	sy
 8006a52:	f3bf 8f4f 	dsb	sy
 8006a56:	617a      	str	r2, [r7, #20]
 8006a58:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8006a5a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006a5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006a5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a62:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8006a64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a68:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006a6a:	429a      	cmp	r2, r3
 8006a6c:	d22b      	bcs.n	8006ac6 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006a6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a70:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006a74:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006a78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a7a:	1c5a      	adds	r2, r3, #1
 8006a7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a7e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006a80:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006a84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a88:	d112      	bne.n	8006ab0 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006a8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d016      	beq.n	8006ac0 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006a92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a94:	3324      	adds	r3, #36	@ 0x24
 8006a96:	4618      	mov	r0, r3
 8006a98:	f001 f94c 	bl	8007d34 <xTaskRemoveFromEventList>
 8006a9c:	4603      	mov	r3, r0
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d00e      	beq.n	8006ac0 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d00b      	beq.n	8006ac0 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	2201      	movs	r2, #1
 8006aac:	601a      	str	r2, [r3, #0]
 8006aae:	e007      	b.n	8006ac0 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006ab0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006ab4:	3301      	adds	r3, #1
 8006ab6:	b2db      	uxtb	r3, r3
 8006ab8:	b25a      	sxtb	r2, r3
 8006aba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006abc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8006ac0:	2301      	movs	r3, #1
 8006ac2:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ac4:	e001      	b.n	8006aca <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	637b      	str	r3, [r7, #52]	@ 0x34
 8006aca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006acc:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	f383 8811 	msr	BASEPRI, r3
}
 8006ad4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006ad6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8006ad8:	4618      	mov	r0, r3
 8006ada:	3738      	adds	r7, #56	@ 0x38
 8006adc:	46bd      	mov	sp, r7
 8006ade:	bd80      	pop	{r7, pc}

08006ae0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b08c      	sub	sp, #48	@ 0x30
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	60f8      	str	r0, [r7, #12]
 8006ae8:	60b9      	str	r1, [r7, #8]
 8006aea:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006aec:	2300      	movs	r3, #0
 8006aee:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006af4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d10b      	bne.n	8006b12 <xQueueReceive+0x32>
	__asm volatile
 8006afa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006afe:	f383 8811 	msr	BASEPRI, r3
 8006b02:	f3bf 8f6f 	isb	sy
 8006b06:	f3bf 8f4f 	dsb	sy
 8006b0a:	623b      	str	r3, [r7, #32]
}
 8006b0c:	bf00      	nop
 8006b0e:	bf00      	nop
 8006b10:	e7fd      	b.n	8006b0e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006b12:	68bb      	ldr	r3, [r7, #8]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d103      	bne.n	8006b20 <xQueueReceive+0x40>
 8006b18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d101      	bne.n	8006b24 <xQueueReceive+0x44>
 8006b20:	2301      	movs	r3, #1
 8006b22:	e000      	b.n	8006b26 <xQueueReceive+0x46>
 8006b24:	2300      	movs	r3, #0
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d10b      	bne.n	8006b42 <xQueueReceive+0x62>
	__asm volatile
 8006b2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b2e:	f383 8811 	msr	BASEPRI, r3
 8006b32:	f3bf 8f6f 	isb	sy
 8006b36:	f3bf 8f4f 	dsb	sy
 8006b3a:	61fb      	str	r3, [r7, #28]
}
 8006b3c:	bf00      	nop
 8006b3e:	bf00      	nop
 8006b40:	e7fd      	b.n	8006b3e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006b42:	f001 facd 	bl	80080e0 <xTaskGetSchedulerState>
 8006b46:	4603      	mov	r3, r0
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d102      	bne.n	8006b52 <xQueueReceive+0x72>
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d101      	bne.n	8006b56 <xQueueReceive+0x76>
 8006b52:	2301      	movs	r3, #1
 8006b54:	e000      	b.n	8006b58 <xQueueReceive+0x78>
 8006b56:	2300      	movs	r3, #0
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d10b      	bne.n	8006b74 <xQueueReceive+0x94>
	__asm volatile
 8006b5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b60:	f383 8811 	msr	BASEPRI, r3
 8006b64:	f3bf 8f6f 	isb	sy
 8006b68:	f3bf 8f4f 	dsb	sy
 8006b6c:	61bb      	str	r3, [r7, #24]
}
 8006b6e:	bf00      	nop
 8006b70:	bf00      	nop
 8006b72:	e7fd      	b.n	8006b70 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006b74:	f002 f920 	bl	8008db8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006b78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b7c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006b7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d01f      	beq.n	8006bc4 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006b84:	68b9      	ldr	r1, [r7, #8]
 8006b86:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006b88:	f000 fb02 	bl	8007190 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006b8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b8e:	1e5a      	subs	r2, r3, #1
 8006b90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b92:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006b94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b96:	691b      	ldr	r3, [r3, #16]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d00f      	beq.n	8006bbc <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006b9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b9e:	3310      	adds	r3, #16
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	f001 f8c7 	bl	8007d34 <xTaskRemoveFromEventList>
 8006ba6:	4603      	mov	r3, r0
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d007      	beq.n	8006bbc <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006bac:	4b3c      	ldr	r3, [pc, #240]	@ (8006ca0 <xQueueReceive+0x1c0>)
 8006bae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006bb2:	601a      	str	r2, [r3, #0]
 8006bb4:	f3bf 8f4f 	dsb	sy
 8006bb8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006bbc:	f002 f92e 	bl	8008e1c <vPortExitCritical>
				return pdPASS;
 8006bc0:	2301      	movs	r3, #1
 8006bc2:	e069      	b.n	8006c98 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d103      	bne.n	8006bd2 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006bca:	f002 f927 	bl	8008e1c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006bce:	2300      	movs	r3, #0
 8006bd0:	e062      	b.n	8006c98 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006bd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d106      	bne.n	8006be6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006bd8:	f107 0310 	add.w	r3, r7, #16
 8006bdc:	4618      	mov	r0, r3
 8006bde:	f001 f90d 	bl	8007dfc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006be2:	2301      	movs	r3, #1
 8006be4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006be6:	f002 f919 	bl	8008e1c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006bea:	f000 fe63 	bl	80078b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006bee:	f002 f8e3 	bl	8008db8 <vPortEnterCritical>
 8006bf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bf4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006bf8:	b25b      	sxtb	r3, r3
 8006bfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bfe:	d103      	bne.n	8006c08 <xQueueReceive+0x128>
 8006c00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c02:	2200      	movs	r2, #0
 8006c04:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006c08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c0a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006c0e:	b25b      	sxtb	r3, r3
 8006c10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c14:	d103      	bne.n	8006c1e <xQueueReceive+0x13e>
 8006c16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c18:	2200      	movs	r2, #0
 8006c1a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006c1e:	f002 f8fd 	bl	8008e1c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006c22:	1d3a      	adds	r2, r7, #4
 8006c24:	f107 0310 	add.w	r3, r7, #16
 8006c28:	4611      	mov	r1, r2
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	f001 f8fc 	bl	8007e28 <xTaskCheckForTimeOut>
 8006c30:	4603      	mov	r3, r0
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d123      	bne.n	8006c7e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006c36:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006c38:	f000 fb22 	bl	8007280 <prvIsQueueEmpty>
 8006c3c:	4603      	mov	r3, r0
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d017      	beq.n	8006c72 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006c42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c44:	3324      	adds	r3, #36	@ 0x24
 8006c46:	687a      	ldr	r2, [r7, #4]
 8006c48:	4611      	mov	r1, r2
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	f001 f820 	bl	8007c90 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006c50:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006c52:	f000 fac3 	bl	80071dc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006c56:	f000 fe3b 	bl	80078d0 <xTaskResumeAll>
 8006c5a:	4603      	mov	r3, r0
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d189      	bne.n	8006b74 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8006c60:	4b0f      	ldr	r3, [pc, #60]	@ (8006ca0 <xQueueReceive+0x1c0>)
 8006c62:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006c66:	601a      	str	r2, [r3, #0]
 8006c68:	f3bf 8f4f 	dsb	sy
 8006c6c:	f3bf 8f6f 	isb	sy
 8006c70:	e780      	b.n	8006b74 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006c72:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006c74:	f000 fab2 	bl	80071dc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006c78:	f000 fe2a 	bl	80078d0 <xTaskResumeAll>
 8006c7c:	e77a      	b.n	8006b74 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006c7e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006c80:	f000 faac 	bl	80071dc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006c84:	f000 fe24 	bl	80078d0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006c88:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006c8a:	f000 faf9 	bl	8007280 <prvIsQueueEmpty>
 8006c8e:	4603      	mov	r3, r0
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	f43f af6f 	beq.w	8006b74 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006c96:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006c98:	4618      	mov	r0, r3
 8006c9a:	3730      	adds	r7, #48	@ 0x30
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	bd80      	pop	{r7, pc}
 8006ca0:	e000ed04 	.word	0xe000ed04

08006ca4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b08e      	sub	sp, #56	@ 0x38
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
 8006cac:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006cae:	2300      	movs	r3, #0
 8006cb0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006cba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d10b      	bne.n	8006cd8 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8006cc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cc4:	f383 8811 	msr	BASEPRI, r3
 8006cc8:	f3bf 8f6f 	isb	sy
 8006ccc:	f3bf 8f4f 	dsb	sy
 8006cd0:	623b      	str	r3, [r7, #32]
}
 8006cd2:	bf00      	nop
 8006cd4:	bf00      	nop
 8006cd6:	e7fd      	b.n	8006cd4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006cd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d00b      	beq.n	8006cf8 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8006ce0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ce4:	f383 8811 	msr	BASEPRI, r3
 8006ce8:	f3bf 8f6f 	isb	sy
 8006cec:	f3bf 8f4f 	dsb	sy
 8006cf0:	61fb      	str	r3, [r7, #28]
}
 8006cf2:	bf00      	nop
 8006cf4:	bf00      	nop
 8006cf6:	e7fd      	b.n	8006cf4 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006cf8:	f001 f9f2 	bl	80080e0 <xTaskGetSchedulerState>
 8006cfc:	4603      	mov	r3, r0
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d102      	bne.n	8006d08 <xQueueSemaphoreTake+0x64>
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d101      	bne.n	8006d0c <xQueueSemaphoreTake+0x68>
 8006d08:	2301      	movs	r3, #1
 8006d0a:	e000      	b.n	8006d0e <xQueueSemaphoreTake+0x6a>
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d10b      	bne.n	8006d2a <xQueueSemaphoreTake+0x86>
	__asm volatile
 8006d12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d16:	f383 8811 	msr	BASEPRI, r3
 8006d1a:	f3bf 8f6f 	isb	sy
 8006d1e:	f3bf 8f4f 	dsb	sy
 8006d22:	61bb      	str	r3, [r7, #24]
}
 8006d24:	bf00      	nop
 8006d26:	bf00      	nop
 8006d28:	e7fd      	b.n	8006d26 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006d2a:	f002 f845 	bl	8008db8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006d2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d32:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006d34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d024      	beq.n	8006d84 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006d3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d3c:	1e5a      	subs	r2, r3, #1
 8006d3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d40:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006d42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d104      	bne.n	8006d54 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006d4a:	f001 fb43 	bl	80083d4 <pvTaskIncrementMutexHeldCount>
 8006d4e:	4602      	mov	r2, r0
 8006d50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d52:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006d54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d56:	691b      	ldr	r3, [r3, #16]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d00f      	beq.n	8006d7c <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006d5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d5e:	3310      	adds	r3, #16
 8006d60:	4618      	mov	r0, r3
 8006d62:	f000 ffe7 	bl	8007d34 <xTaskRemoveFromEventList>
 8006d66:	4603      	mov	r3, r0
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d007      	beq.n	8006d7c <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006d6c:	4b54      	ldr	r3, [pc, #336]	@ (8006ec0 <xQueueSemaphoreTake+0x21c>)
 8006d6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006d72:	601a      	str	r2, [r3, #0]
 8006d74:	f3bf 8f4f 	dsb	sy
 8006d78:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006d7c:	f002 f84e 	bl	8008e1c <vPortExitCritical>
				return pdPASS;
 8006d80:	2301      	movs	r3, #1
 8006d82:	e098      	b.n	8006eb6 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d112      	bne.n	8006db0 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006d8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d00b      	beq.n	8006da8 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8006d90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d94:	f383 8811 	msr	BASEPRI, r3
 8006d98:	f3bf 8f6f 	isb	sy
 8006d9c:	f3bf 8f4f 	dsb	sy
 8006da0:	617b      	str	r3, [r7, #20]
}
 8006da2:	bf00      	nop
 8006da4:	bf00      	nop
 8006da6:	e7fd      	b.n	8006da4 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006da8:	f002 f838 	bl	8008e1c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006dac:	2300      	movs	r3, #0
 8006dae:	e082      	b.n	8006eb6 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006db0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d106      	bne.n	8006dc4 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006db6:	f107 030c 	add.w	r3, r7, #12
 8006dba:	4618      	mov	r0, r3
 8006dbc:	f001 f81e 	bl	8007dfc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006dc0:	2301      	movs	r3, #1
 8006dc2:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006dc4:	f002 f82a 	bl	8008e1c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006dc8:	f000 fd74 	bl	80078b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006dcc:	f001 fff4 	bl	8008db8 <vPortEnterCritical>
 8006dd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006dd2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006dd6:	b25b      	sxtb	r3, r3
 8006dd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ddc:	d103      	bne.n	8006de6 <xQueueSemaphoreTake+0x142>
 8006dde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006de0:	2200      	movs	r2, #0
 8006de2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006de6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006de8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006dec:	b25b      	sxtb	r3, r3
 8006dee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006df2:	d103      	bne.n	8006dfc <xQueueSemaphoreTake+0x158>
 8006df4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006df6:	2200      	movs	r2, #0
 8006df8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006dfc:	f002 f80e 	bl	8008e1c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006e00:	463a      	mov	r2, r7
 8006e02:	f107 030c 	add.w	r3, r7, #12
 8006e06:	4611      	mov	r1, r2
 8006e08:	4618      	mov	r0, r3
 8006e0a:	f001 f80d 	bl	8007e28 <xTaskCheckForTimeOut>
 8006e0e:	4603      	mov	r3, r0
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d132      	bne.n	8006e7a <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006e14:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006e16:	f000 fa33 	bl	8007280 <prvIsQueueEmpty>
 8006e1a:	4603      	mov	r3, r0
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d026      	beq.n	8006e6e <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006e20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d109      	bne.n	8006e3c <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8006e28:	f001 ffc6 	bl	8008db8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006e2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e2e:	689b      	ldr	r3, [r3, #8]
 8006e30:	4618      	mov	r0, r3
 8006e32:	f001 f973 	bl	800811c <xTaskPriorityInherit>
 8006e36:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8006e38:	f001 fff0 	bl	8008e1c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006e3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e3e:	3324      	adds	r3, #36	@ 0x24
 8006e40:	683a      	ldr	r2, [r7, #0]
 8006e42:	4611      	mov	r1, r2
 8006e44:	4618      	mov	r0, r3
 8006e46:	f000 ff23 	bl	8007c90 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006e4a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006e4c:	f000 f9c6 	bl	80071dc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006e50:	f000 fd3e 	bl	80078d0 <xTaskResumeAll>
 8006e54:	4603      	mov	r3, r0
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	f47f af67 	bne.w	8006d2a <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8006e5c:	4b18      	ldr	r3, [pc, #96]	@ (8006ec0 <xQueueSemaphoreTake+0x21c>)
 8006e5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006e62:	601a      	str	r2, [r3, #0]
 8006e64:	f3bf 8f4f 	dsb	sy
 8006e68:	f3bf 8f6f 	isb	sy
 8006e6c:	e75d      	b.n	8006d2a <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006e6e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006e70:	f000 f9b4 	bl	80071dc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006e74:	f000 fd2c 	bl	80078d0 <xTaskResumeAll>
 8006e78:	e757      	b.n	8006d2a <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006e7a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006e7c:	f000 f9ae 	bl	80071dc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006e80:	f000 fd26 	bl	80078d0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006e84:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006e86:	f000 f9fb 	bl	8007280 <prvIsQueueEmpty>
 8006e8a:	4603      	mov	r3, r0
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	f43f af4c 	beq.w	8006d2a <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006e92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d00d      	beq.n	8006eb4 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8006e98:	f001 ff8e 	bl	8008db8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006e9c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006e9e:	f000 f8f5 	bl	800708c <prvGetDisinheritPriorityAfterTimeout>
 8006ea2:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006ea4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ea6:	689b      	ldr	r3, [r3, #8]
 8006ea8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006eaa:	4618      	mov	r0, r3
 8006eac:	f001 fa0e 	bl	80082cc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006eb0:	f001 ffb4 	bl	8008e1c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006eb4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	3738      	adds	r7, #56	@ 0x38
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	bd80      	pop	{r7, pc}
 8006ebe:	bf00      	nop
 8006ec0:	e000ed04 	.word	0xe000ed04

08006ec4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b08e      	sub	sp, #56	@ 0x38
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	60f8      	str	r0, [r7, #12]
 8006ecc:	60b9      	str	r1, [r7, #8]
 8006ece:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006ed4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d10b      	bne.n	8006ef2 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8006eda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ede:	f383 8811 	msr	BASEPRI, r3
 8006ee2:	f3bf 8f6f 	isb	sy
 8006ee6:	f3bf 8f4f 	dsb	sy
 8006eea:	623b      	str	r3, [r7, #32]
}
 8006eec:	bf00      	nop
 8006eee:	bf00      	nop
 8006ef0:	e7fd      	b.n	8006eee <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006ef2:	68bb      	ldr	r3, [r7, #8]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d103      	bne.n	8006f00 <xQueueReceiveFromISR+0x3c>
 8006ef8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006efa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d101      	bne.n	8006f04 <xQueueReceiveFromISR+0x40>
 8006f00:	2301      	movs	r3, #1
 8006f02:	e000      	b.n	8006f06 <xQueueReceiveFromISR+0x42>
 8006f04:	2300      	movs	r3, #0
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d10b      	bne.n	8006f22 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8006f0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f0e:	f383 8811 	msr	BASEPRI, r3
 8006f12:	f3bf 8f6f 	isb	sy
 8006f16:	f3bf 8f4f 	dsb	sy
 8006f1a:	61fb      	str	r3, [r7, #28]
}
 8006f1c:	bf00      	nop
 8006f1e:	bf00      	nop
 8006f20:	e7fd      	b.n	8006f1e <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006f22:	f002 f829 	bl	8008f78 <vPortValidateInterruptPriority>
	__asm volatile
 8006f26:	f3ef 8211 	mrs	r2, BASEPRI
 8006f2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f2e:	f383 8811 	msr	BASEPRI, r3
 8006f32:	f3bf 8f6f 	isb	sy
 8006f36:	f3bf 8f4f 	dsb	sy
 8006f3a:	61ba      	str	r2, [r7, #24]
 8006f3c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006f3e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006f40:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006f42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f46:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006f48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d02f      	beq.n	8006fae <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006f4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f50:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006f54:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006f58:	68b9      	ldr	r1, [r7, #8]
 8006f5a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006f5c:	f000 f918 	bl	8007190 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006f60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f62:	1e5a      	subs	r2, r3, #1
 8006f64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f66:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006f68:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006f6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f70:	d112      	bne.n	8006f98 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006f72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f74:	691b      	ldr	r3, [r3, #16]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d016      	beq.n	8006fa8 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006f7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f7c:	3310      	adds	r3, #16
 8006f7e:	4618      	mov	r0, r3
 8006f80:	f000 fed8 	bl	8007d34 <xTaskRemoveFromEventList>
 8006f84:	4603      	mov	r3, r0
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d00e      	beq.n	8006fa8 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d00b      	beq.n	8006fa8 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2201      	movs	r2, #1
 8006f94:	601a      	str	r2, [r3, #0]
 8006f96:	e007      	b.n	8006fa8 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006f98:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006f9c:	3301      	adds	r3, #1
 8006f9e:	b2db      	uxtb	r3, r3
 8006fa0:	b25a      	sxtb	r2, r3
 8006fa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fa4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8006fa8:	2301      	movs	r3, #1
 8006faa:	637b      	str	r3, [r7, #52]	@ 0x34
 8006fac:	e001      	b.n	8006fb2 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8006fae:	2300      	movs	r3, #0
 8006fb0:	637b      	str	r3, [r7, #52]	@ 0x34
 8006fb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fb4:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006fb6:	693b      	ldr	r3, [r7, #16]
 8006fb8:	f383 8811 	msr	BASEPRI, r3
}
 8006fbc:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006fbe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	3738      	adds	r7, #56	@ 0x38
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	bd80      	pop	{r7, pc}

08006fc8 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b084      	sub	sp, #16
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d10b      	bne.n	8006fee <uxQueueMessagesWaiting+0x26>
	__asm volatile
 8006fd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fda:	f383 8811 	msr	BASEPRI, r3
 8006fde:	f3bf 8f6f 	isb	sy
 8006fe2:	f3bf 8f4f 	dsb	sy
 8006fe6:	60bb      	str	r3, [r7, #8]
}
 8006fe8:	bf00      	nop
 8006fea:	bf00      	nop
 8006fec:	e7fd      	b.n	8006fea <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8006fee:	f001 fee3 	bl	8008db8 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ff6:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8006ff8:	f001 ff10 	bl	8008e1c <vPortExitCritical>

	return uxReturn;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8006ffe:	4618      	mov	r0, r3
 8007000:	3710      	adds	r7, #16
 8007002:	46bd      	mov	sp, r7
 8007004:	bd80      	pop	{r7, pc}

08007006 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8007006:	b480      	push	{r7}
 8007008:	b087      	sub	sp, #28
 800700a:	af00      	add	r7, sp, #0
 800700c:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8007012:	697b      	ldr	r3, [r7, #20]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d10b      	bne.n	8007030 <uxQueueMessagesWaitingFromISR+0x2a>
	__asm volatile
 8007018:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800701c:	f383 8811 	msr	BASEPRI, r3
 8007020:	f3bf 8f6f 	isb	sy
 8007024:	f3bf 8f4f 	dsb	sy
 8007028:	60fb      	str	r3, [r7, #12]
}
 800702a:	bf00      	nop
 800702c:	bf00      	nop
 800702e:	e7fd      	b.n	800702c <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 8007030:	697b      	ldr	r3, [r7, #20]
 8007032:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007034:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8007036:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8007038:	4618      	mov	r0, r3
 800703a:	371c      	adds	r7, #28
 800703c:	46bd      	mov	sp, r7
 800703e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007042:	4770      	bx	lr

08007044 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8007044:	b580      	push	{r7, lr}
 8007046:	b084      	sub	sp, #16
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d10b      	bne.n	800706e <vQueueDelete+0x2a>
	__asm volatile
 8007056:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800705a:	f383 8811 	msr	BASEPRI, r3
 800705e:	f3bf 8f6f 	isb	sy
 8007062:	f3bf 8f4f 	dsb	sy
 8007066:	60bb      	str	r3, [r7, #8]
}
 8007068:	bf00      	nop
 800706a:	bf00      	nop
 800706c:	e7fd      	b.n	800706a <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800706e:	68f8      	ldr	r0, [r7, #12]
 8007070:	f000 f95e 	bl	8007330 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800707a:	2b00      	cmp	r3, #0
 800707c:	d102      	bne.n	8007084 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 800707e:	68f8      	ldr	r0, [r7, #12]
 8007080:	f002 f88a 	bl	8009198 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8007084:	bf00      	nop
 8007086:	3710      	adds	r7, #16
 8007088:	46bd      	mov	sp, r7
 800708a:	bd80      	pop	{r7, pc}

0800708c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800708c:	b480      	push	{r7}
 800708e:	b085      	sub	sp, #20
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007098:	2b00      	cmp	r3, #0
 800709a:	d006      	beq.n	80070aa <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 80070a6:	60fb      	str	r3, [r7, #12]
 80070a8:	e001      	b.n	80070ae <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80070aa:	2300      	movs	r3, #0
 80070ac:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80070ae:	68fb      	ldr	r3, [r7, #12]
	}
 80070b0:	4618      	mov	r0, r3
 80070b2:	3714      	adds	r7, #20
 80070b4:	46bd      	mov	sp, r7
 80070b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ba:	4770      	bx	lr

080070bc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	b086      	sub	sp, #24
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	60f8      	str	r0, [r7, #12]
 80070c4:	60b9      	str	r1, [r7, #8]
 80070c6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80070c8:	2300      	movs	r3, #0
 80070ca:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070d0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d10d      	bne.n	80070f6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d14d      	bne.n	800717e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	689b      	ldr	r3, [r3, #8]
 80070e6:	4618      	mov	r0, r3
 80070e8:	f001 f880 	bl	80081ec <xTaskPriorityDisinherit>
 80070ec:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	2200      	movs	r2, #0
 80070f2:	609a      	str	r2, [r3, #8]
 80070f4:	e043      	b.n	800717e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d119      	bne.n	8007130 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	6858      	ldr	r0, [r3, #4]
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007104:	461a      	mov	r2, r3
 8007106:	68b9      	ldr	r1, [r7, #8]
 8007108:	f00f febf 	bl	8016e8a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	685a      	ldr	r2, [r3, #4]
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007114:	441a      	add	r2, r3
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	685a      	ldr	r2, [r3, #4]
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	689b      	ldr	r3, [r3, #8]
 8007122:	429a      	cmp	r2, r3
 8007124:	d32b      	bcc.n	800717e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	681a      	ldr	r2, [r3, #0]
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	605a      	str	r2, [r3, #4]
 800712e:	e026      	b.n	800717e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	68d8      	ldr	r0, [r3, #12]
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007138:	461a      	mov	r2, r3
 800713a:	68b9      	ldr	r1, [r7, #8]
 800713c:	f00f fea5 	bl	8016e8a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	68da      	ldr	r2, [r3, #12]
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007148:	425b      	negs	r3, r3
 800714a:	441a      	add	r2, r3
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	68da      	ldr	r2, [r3, #12]
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	429a      	cmp	r2, r3
 800715a:	d207      	bcs.n	800716c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	689a      	ldr	r2, [r3, #8]
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007164:	425b      	negs	r3, r3
 8007166:	441a      	add	r2, r3
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2b02      	cmp	r3, #2
 8007170:	d105      	bne.n	800717e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007172:	693b      	ldr	r3, [r7, #16]
 8007174:	2b00      	cmp	r3, #0
 8007176:	d002      	beq.n	800717e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007178:	693b      	ldr	r3, [r7, #16]
 800717a:	3b01      	subs	r3, #1
 800717c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800717e:	693b      	ldr	r3, [r7, #16]
 8007180:	1c5a      	adds	r2, r3, #1
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8007186:	697b      	ldr	r3, [r7, #20]
}
 8007188:	4618      	mov	r0, r3
 800718a:	3718      	adds	r7, #24
 800718c:	46bd      	mov	sp, r7
 800718e:	bd80      	pop	{r7, pc}

08007190 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b082      	sub	sp, #8
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
 8007198:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d018      	beq.n	80071d4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	68da      	ldr	r2, [r3, #12]
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071aa:	441a      	add	r2, r3
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	68da      	ldr	r2, [r3, #12]
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	689b      	ldr	r3, [r3, #8]
 80071b8:	429a      	cmp	r2, r3
 80071ba:	d303      	bcc.n	80071c4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681a      	ldr	r2, [r3, #0]
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	68d9      	ldr	r1, [r3, #12]
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071cc:	461a      	mov	r2, r3
 80071ce:	6838      	ldr	r0, [r7, #0]
 80071d0:	f00f fe5b 	bl	8016e8a <memcpy>
	}
}
 80071d4:	bf00      	nop
 80071d6:	3708      	adds	r7, #8
 80071d8:	46bd      	mov	sp, r7
 80071da:	bd80      	pop	{r7, pc}

080071dc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80071dc:	b580      	push	{r7, lr}
 80071de:	b084      	sub	sp, #16
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80071e4:	f001 fde8 	bl	8008db8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80071ee:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80071f0:	e011      	b.n	8007216 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d012      	beq.n	8007220 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	3324      	adds	r3, #36	@ 0x24
 80071fe:	4618      	mov	r0, r3
 8007200:	f000 fd98 	bl	8007d34 <xTaskRemoveFromEventList>
 8007204:	4603      	mov	r3, r0
 8007206:	2b00      	cmp	r3, #0
 8007208:	d001      	beq.n	800720e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800720a:	f000 fe71 	bl	8007ef0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800720e:	7bfb      	ldrb	r3, [r7, #15]
 8007210:	3b01      	subs	r3, #1
 8007212:	b2db      	uxtb	r3, r3
 8007214:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007216:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800721a:	2b00      	cmp	r3, #0
 800721c:	dce9      	bgt.n	80071f2 <prvUnlockQueue+0x16>
 800721e:	e000      	b.n	8007222 <prvUnlockQueue+0x46>
					break;
 8007220:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	22ff      	movs	r2, #255	@ 0xff
 8007226:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800722a:	f001 fdf7 	bl	8008e1c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800722e:	f001 fdc3 	bl	8008db8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007238:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800723a:	e011      	b.n	8007260 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	691b      	ldr	r3, [r3, #16]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d012      	beq.n	800726a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	3310      	adds	r3, #16
 8007248:	4618      	mov	r0, r3
 800724a:	f000 fd73 	bl	8007d34 <xTaskRemoveFromEventList>
 800724e:	4603      	mov	r3, r0
 8007250:	2b00      	cmp	r3, #0
 8007252:	d001      	beq.n	8007258 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007254:	f000 fe4c 	bl	8007ef0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007258:	7bbb      	ldrb	r3, [r7, #14]
 800725a:	3b01      	subs	r3, #1
 800725c:	b2db      	uxtb	r3, r3
 800725e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007260:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007264:	2b00      	cmp	r3, #0
 8007266:	dce9      	bgt.n	800723c <prvUnlockQueue+0x60>
 8007268:	e000      	b.n	800726c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800726a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	22ff      	movs	r2, #255	@ 0xff
 8007270:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8007274:	f001 fdd2 	bl	8008e1c <vPortExitCritical>
}
 8007278:	bf00      	nop
 800727a:	3710      	adds	r7, #16
 800727c:	46bd      	mov	sp, r7
 800727e:	bd80      	pop	{r7, pc}

08007280 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007280:	b580      	push	{r7, lr}
 8007282:	b084      	sub	sp, #16
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007288:	f001 fd96 	bl	8008db8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007290:	2b00      	cmp	r3, #0
 8007292:	d102      	bne.n	800729a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007294:	2301      	movs	r3, #1
 8007296:	60fb      	str	r3, [r7, #12]
 8007298:	e001      	b.n	800729e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800729a:	2300      	movs	r3, #0
 800729c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800729e:	f001 fdbd 	bl	8008e1c <vPortExitCritical>

	return xReturn;
 80072a2:	68fb      	ldr	r3, [r7, #12]
}
 80072a4:	4618      	mov	r0, r3
 80072a6:	3710      	adds	r7, #16
 80072a8:	46bd      	mov	sp, r7
 80072aa:	bd80      	pop	{r7, pc}

080072ac <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b084      	sub	sp, #16
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80072b4:	f001 fd80 	bl	8008db8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072c0:	429a      	cmp	r2, r3
 80072c2:	d102      	bne.n	80072ca <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80072c4:	2301      	movs	r3, #1
 80072c6:	60fb      	str	r3, [r7, #12]
 80072c8:	e001      	b.n	80072ce <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80072ca:	2300      	movs	r3, #0
 80072cc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80072ce:	f001 fda5 	bl	8008e1c <vPortExitCritical>

	return xReturn;
 80072d2:	68fb      	ldr	r3, [r7, #12]
}
 80072d4:	4618      	mov	r0, r3
 80072d6:	3710      	adds	r7, #16
 80072d8:	46bd      	mov	sp, r7
 80072da:	bd80      	pop	{r7, pc}

080072dc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80072dc:	b480      	push	{r7}
 80072de:	b085      	sub	sp, #20
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
 80072e4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80072e6:	2300      	movs	r3, #0
 80072e8:	60fb      	str	r3, [r7, #12]
 80072ea:	e014      	b.n	8007316 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80072ec:	4a0f      	ldr	r2, [pc, #60]	@ (800732c <vQueueAddToRegistry+0x50>)
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d10b      	bne.n	8007310 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80072f8:	490c      	ldr	r1, [pc, #48]	@ (800732c <vQueueAddToRegistry+0x50>)
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	683a      	ldr	r2, [r7, #0]
 80072fe:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007302:	4a0a      	ldr	r2, [pc, #40]	@ (800732c <vQueueAddToRegistry+0x50>)
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	00db      	lsls	r3, r3, #3
 8007308:	4413      	add	r3, r2
 800730a:	687a      	ldr	r2, [r7, #4]
 800730c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800730e:	e006      	b.n	800731e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	3301      	adds	r3, #1
 8007314:	60fb      	str	r3, [r7, #12]
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	2b07      	cmp	r3, #7
 800731a:	d9e7      	bls.n	80072ec <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800731c:	bf00      	nop
 800731e:	bf00      	nop
 8007320:	3714      	adds	r7, #20
 8007322:	46bd      	mov	sp, r7
 8007324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007328:	4770      	bx	lr
 800732a:	bf00      	nop
 800732c:	200057f8 	.word	0x200057f8

08007330 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8007330:	b480      	push	{r7}
 8007332:	b085      	sub	sp, #20
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007338:	2300      	movs	r3, #0
 800733a:	60fb      	str	r3, [r7, #12]
 800733c:	e016      	b.n	800736c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800733e:	4a10      	ldr	r2, [pc, #64]	@ (8007380 <vQueueUnregisterQueue+0x50>)
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	00db      	lsls	r3, r3, #3
 8007344:	4413      	add	r3, r2
 8007346:	685b      	ldr	r3, [r3, #4]
 8007348:	687a      	ldr	r2, [r7, #4]
 800734a:	429a      	cmp	r2, r3
 800734c:	d10b      	bne.n	8007366 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800734e:	4a0c      	ldr	r2, [pc, #48]	@ (8007380 <vQueueUnregisterQueue+0x50>)
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	2100      	movs	r1, #0
 8007354:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8007358:	4a09      	ldr	r2, [pc, #36]	@ (8007380 <vQueueUnregisterQueue+0x50>)
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	00db      	lsls	r3, r3, #3
 800735e:	4413      	add	r3, r2
 8007360:	2200      	movs	r2, #0
 8007362:	605a      	str	r2, [r3, #4]
				break;
 8007364:	e006      	b.n	8007374 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	3301      	adds	r3, #1
 800736a:	60fb      	str	r3, [r7, #12]
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	2b07      	cmp	r3, #7
 8007370:	d9e5      	bls.n	800733e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8007372:	bf00      	nop
 8007374:	bf00      	nop
 8007376:	3714      	adds	r7, #20
 8007378:	46bd      	mov	sp, r7
 800737a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737e:	4770      	bx	lr
 8007380:	200057f8 	.word	0x200057f8

08007384 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007384:	b580      	push	{r7, lr}
 8007386:	b086      	sub	sp, #24
 8007388:	af00      	add	r7, sp, #0
 800738a:	60f8      	str	r0, [r7, #12]
 800738c:	60b9      	str	r1, [r7, #8]
 800738e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007394:	f001 fd10 	bl	8008db8 <vPortEnterCritical>
 8007398:	697b      	ldr	r3, [r7, #20]
 800739a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800739e:	b25b      	sxtb	r3, r3
 80073a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073a4:	d103      	bne.n	80073ae <vQueueWaitForMessageRestricted+0x2a>
 80073a6:	697b      	ldr	r3, [r7, #20]
 80073a8:	2200      	movs	r2, #0
 80073aa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80073ae:	697b      	ldr	r3, [r7, #20]
 80073b0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80073b4:	b25b      	sxtb	r3, r3
 80073b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073ba:	d103      	bne.n	80073c4 <vQueueWaitForMessageRestricted+0x40>
 80073bc:	697b      	ldr	r3, [r7, #20]
 80073be:	2200      	movs	r2, #0
 80073c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80073c4:	f001 fd2a 	bl	8008e1c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80073c8:	697b      	ldr	r3, [r7, #20]
 80073ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d106      	bne.n	80073de <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80073d0:	697b      	ldr	r3, [r7, #20]
 80073d2:	3324      	adds	r3, #36	@ 0x24
 80073d4:	687a      	ldr	r2, [r7, #4]
 80073d6:	68b9      	ldr	r1, [r7, #8]
 80073d8:	4618      	mov	r0, r3
 80073da:	f000 fc7f 	bl	8007cdc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80073de:	6978      	ldr	r0, [r7, #20]
 80073e0:	f7ff fefc 	bl	80071dc <prvUnlockQueue>
	}
 80073e4:	bf00      	nop
 80073e6:	3718      	adds	r7, #24
 80073e8:	46bd      	mov	sp, r7
 80073ea:	bd80      	pop	{r7, pc}

080073ec <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b08e      	sub	sp, #56	@ 0x38
 80073f0:	af04      	add	r7, sp, #16
 80073f2:	60f8      	str	r0, [r7, #12]
 80073f4:	60b9      	str	r1, [r7, #8]
 80073f6:	607a      	str	r2, [r7, #4]
 80073f8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80073fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d10b      	bne.n	8007418 <xTaskCreateStatic+0x2c>
	__asm volatile
 8007400:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007404:	f383 8811 	msr	BASEPRI, r3
 8007408:	f3bf 8f6f 	isb	sy
 800740c:	f3bf 8f4f 	dsb	sy
 8007410:	623b      	str	r3, [r7, #32]
}
 8007412:	bf00      	nop
 8007414:	bf00      	nop
 8007416:	e7fd      	b.n	8007414 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007418:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800741a:	2b00      	cmp	r3, #0
 800741c:	d10b      	bne.n	8007436 <xTaskCreateStatic+0x4a>
	__asm volatile
 800741e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007422:	f383 8811 	msr	BASEPRI, r3
 8007426:	f3bf 8f6f 	isb	sy
 800742a:	f3bf 8f4f 	dsb	sy
 800742e:	61fb      	str	r3, [r7, #28]
}
 8007430:	bf00      	nop
 8007432:	bf00      	nop
 8007434:	e7fd      	b.n	8007432 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007436:	23a8      	movs	r3, #168	@ 0xa8
 8007438:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800743a:	693b      	ldr	r3, [r7, #16]
 800743c:	2ba8      	cmp	r3, #168	@ 0xa8
 800743e:	d00b      	beq.n	8007458 <xTaskCreateStatic+0x6c>
	__asm volatile
 8007440:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007444:	f383 8811 	msr	BASEPRI, r3
 8007448:	f3bf 8f6f 	isb	sy
 800744c:	f3bf 8f4f 	dsb	sy
 8007450:	61bb      	str	r3, [r7, #24]
}
 8007452:	bf00      	nop
 8007454:	bf00      	nop
 8007456:	e7fd      	b.n	8007454 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007458:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800745a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800745c:	2b00      	cmp	r3, #0
 800745e:	d01e      	beq.n	800749e <xTaskCreateStatic+0xb2>
 8007460:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007462:	2b00      	cmp	r3, #0
 8007464:	d01b      	beq.n	800749e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007466:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007468:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800746a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800746c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800746e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007470:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007472:	2202      	movs	r2, #2
 8007474:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007478:	2300      	movs	r3, #0
 800747a:	9303      	str	r3, [sp, #12]
 800747c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800747e:	9302      	str	r3, [sp, #8]
 8007480:	f107 0314 	add.w	r3, r7, #20
 8007484:	9301      	str	r3, [sp, #4]
 8007486:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007488:	9300      	str	r3, [sp, #0]
 800748a:	683b      	ldr	r3, [r7, #0]
 800748c:	687a      	ldr	r2, [r7, #4]
 800748e:	68b9      	ldr	r1, [r7, #8]
 8007490:	68f8      	ldr	r0, [r7, #12]
 8007492:	f000 f851 	bl	8007538 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007496:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007498:	f000 f8f6 	bl	8007688 <prvAddNewTaskToReadyList>
 800749c:	e001      	b.n	80074a2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800749e:	2300      	movs	r3, #0
 80074a0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80074a2:	697b      	ldr	r3, [r7, #20]
	}
 80074a4:	4618      	mov	r0, r3
 80074a6:	3728      	adds	r7, #40	@ 0x28
 80074a8:	46bd      	mov	sp, r7
 80074aa:	bd80      	pop	{r7, pc}

080074ac <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b08c      	sub	sp, #48	@ 0x30
 80074b0:	af04      	add	r7, sp, #16
 80074b2:	60f8      	str	r0, [r7, #12]
 80074b4:	60b9      	str	r1, [r7, #8]
 80074b6:	603b      	str	r3, [r7, #0]
 80074b8:	4613      	mov	r3, r2
 80074ba:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80074bc:	88fb      	ldrh	r3, [r7, #6]
 80074be:	009b      	lsls	r3, r3, #2
 80074c0:	4618      	mov	r0, r3
 80074c2:	f001 fd9b 	bl	8008ffc <pvPortMalloc>
 80074c6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80074c8:	697b      	ldr	r3, [r7, #20]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d00e      	beq.n	80074ec <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80074ce:	20a8      	movs	r0, #168	@ 0xa8
 80074d0:	f001 fd94 	bl	8008ffc <pvPortMalloc>
 80074d4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80074d6:	69fb      	ldr	r3, [r7, #28]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d003      	beq.n	80074e4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80074dc:	69fb      	ldr	r3, [r7, #28]
 80074de:	697a      	ldr	r2, [r7, #20]
 80074e0:	631a      	str	r2, [r3, #48]	@ 0x30
 80074e2:	e005      	b.n	80074f0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80074e4:	6978      	ldr	r0, [r7, #20]
 80074e6:	f001 fe57 	bl	8009198 <vPortFree>
 80074ea:	e001      	b.n	80074f0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80074ec:	2300      	movs	r3, #0
 80074ee:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80074f0:	69fb      	ldr	r3, [r7, #28]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d017      	beq.n	8007526 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80074f6:	69fb      	ldr	r3, [r7, #28]
 80074f8:	2200      	movs	r2, #0
 80074fa:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80074fe:	88fa      	ldrh	r2, [r7, #6]
 8007500:	2300      	movs	r3, #0
 8007502:	9303      	str	r3, [sp, #12]
 8007504:	69fb      	ldr	r3, [r7, #28]
 8007506:	9302      	str	r3, [sp, #8]
 8007508:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800750a:	9301      	str	r3, [sp, #4]
 800750c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800750e:	9300      	str	r3, [sp, #0]
 8007510:	683b      	ldr	r3, [r7, #0]
 8007512:	68b9      	ldr	r1, [r7, #8]
 8007514:	68f8      	ldr	r0, [r7, #12]
 8007516:	f000 f80f 	bl	8007538 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800751a:	69f8      	ldr	r0, [r7, #28]
 800751c:	f000 f8b4 	bl	8007688 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007520:	2301      	movs	r3, #1
 8007522:	61bb      	str	r3, [r7, #24]
 8007524:	e002      	b.n	800752c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007526:	f04f 33ff 	mov.w	r3, #4294967295
 800752a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800752c:	69bb      	ldr	r3, [r7, #24]
	}
 800752e:	4618      	mov	r0, r3
 8007530:	3720      	adds	r7, #32
 8007532:	46bd      	mov	sp, r7
 8007534:	bd80      	pop	{r7, pc}
	...

08007538 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007538:	b580      	push	{r7, lr}
 800753a:	b088      	sub	sp, #32
 800753c:	af00      	add	r7, sp, #0
 800753e:	60f8      	str	r0, [r7, #12]
 8007540:	60b9      	str	r1, [r7, #8]
 8007542:	607a      	str	r2, [r7, #4]
 8007544:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007546:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007548:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	009b      	lsls	r3, r3, #2
 800754e:	461a      	mov	r2, r3
 8007550:	21a5      	movs	r1, #165	@ 0xa5
 8007552:	f00f fbce 	bl	8016cf2 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007556:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007558:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007560:	3b01      	subs	r3, #1
 8007562:	009b      	lsls	r3, r3, #2
 8007564:	4413      	add	r3, r2
 8007566:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007568:	69bb      	ldr	r3, [r7, #24]
 800756a:	f023 0307 	bic.w	r3, r3, #7
 800756e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007570:	69bb      	ldr	r3, [r7, #24]
 8007572:	f003 0307 	and.w	r3, r3, #7
 8007576:	2b00      	cmp	r3, #0
 8007578:	d00b      	beq.n	8007592 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800757a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800757e:	f383 8811 	msr	BASEPRI, r3
 8007582:	f3bf 8f6f 	isb	sy
 8007586:	f3bf 8f4f 	dsb	sy
 800758a:	617b      	str	r3, [r7, #20]
}
 800758c:	bf00      	nop
 800758e:	bf00      	nop
 8007590:	e7fd      	b.n	800758e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007592:	68bb      	ldr	r3, [r7, #8]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d01f      	beq.n	80075d8 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007598:	2300      	movs	r3, #0
 800759a:	61fb      	str	r3, [r7, #28]
 800759c:	e012      	b.n	80075c4 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800759e:	68ba      	ldr	r2, [r7, #8]
 80075a0:	69fb      	ldr	r3, [r7, #28]
 80075a2:	4413      	add	r3, r2
 80075a4:	7819      	ldrb	r1, [r3, #0]
 80075a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80075a8:	69fb      	ldr	r3, [r7, #28]
 80075aa:	4413      	add	r3, r2
 80075ac:	3334      	adds	r3, #52	@ 0x34
 80075ae:	460a      	mov	r2, r1
 80075b0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80075b2:	68ba      	ldr	r2, [r7, #8]
 80075b4:	69fb      	ldr	r3, [r7, #28]
 80075b6:	4413      	add	r3, r2
 80075b8:	781b      	ldrb	r3, [r3, #0]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d006      	beq.n	80075cc <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80075be:	69fb      	ldr	r3, [r7, #28]
 80075c0:	3301      	adds	r3, #1
 80075c2:	61fb      	str	r3, [r7, #28]
 80075c4:	69fb      	ldr	r3, [r7, #28]
 80075c6:	2b0f      	cmp	r3, #15
 80075c8:	d9e9      	bls.n	800759e <prvInitialiseNewTask+0x66>
 80075ca:	e000      	b.n	80075ce <prvInitialiseNewTask+0x96>
			{
				break;
 80075cc:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80075ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075d0:	2200      	movs	r2, #0
 80075d2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80075d6:	e003      	b.n	80075e0 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80075d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075da:	2200      	movs	r2, #0
 80075dc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80075e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075e2:	2b37      	cmp	r3, #55	@ 0x37
 80075e4:	d901      	bls.n	80075ea <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80075e6:	2337      	movs	r3, #55	@ 0x37
 80075e8:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80075ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075ec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80075ee:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80075f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075f2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80075f4:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80075f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075f8:	2200      	movs	r2, #0
 80075fa:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80075fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075fe:	3304      	adds	r3, #4
 8007600:	4618      	mov	r0, r3
 8007602:	f7fe fd3d 	bl	8006080 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007606:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007608:	3318      	adds	r3, #24
 800760a:	4618      	mov	r0, r3
 800760c:	f7fe fd38 	bl	8006080 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007610:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007612:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007614:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007616:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007618:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800761c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800761e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007620:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007622:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007624:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007626:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007628:	2200      	movs	r2, #0
 800762a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800762e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007630:	2200      	movs	r2, #0
 8007632:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007636:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007638:	3354      	adds	r3, #84	@ 0x54
 800763a:	224c      	movs	r2, #76	@ 0x4c
 800763c:	2100      	movs	r1, #0
 800763e:	4618      	mov	r0, r3
 8007640:	f00f fb57 	bl	8016cf2 <memset>
 8007644:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007646:	4a0d      	ldr	r2, [pc, #52]	@ (800767c <prvInitialiseNewTask+0x144>)
 8007648:	659a      	str	r2, [r3, #88]	@ 0x58
 800764a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800764c:	4a0c      	ldr	r2, [pc, #48]	@ (8007680 <prvInitialiseNewTask+0x148>)
 800764e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8007650:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007652:	4a0c      	ldr	r2, [pc, #48]	@ (8007684 <prvInitialiseNewTask+0x14c>)
 8007654:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007656:	683a      	ldr	r2, [r7, #0]
 8007658:	68f9      	ldr	r1, [r7, #12]
 800765a:	69b8      	ldr	r0, [r7, #24]
 800765c:	f001 fa7c 	bl	8008b58 <pxPortInitialiseStack>
 8007660:	4602      	mov	r2, r0
 8007662:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007664:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007666:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007668:	2b00      	cmp	r3, #0
 800766a:	d002      	beq.n	8007672 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800766c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800766e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007670:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007672:	bf00      	nop
 8007674:	3720      	adds	r7, #32
 8007676:	46bd      	mov	sp, r7
 8007678:	bd80      	pop	{r7, pc}
 800767a:	bf00      	nop
 800767c:	2000f548 	.word	0x2000f548
 8007680:	2000f5b0 	.word	0x2000f5b0
 8007684:	2000f618 	.word	0x2000f618

08007688 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007688:	b580      	push	{r7, lr}
 800768a:	b082      	sub	sp, #8
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007690:	f001 fb92 	bl	8008db8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007694:	4b2d      	ldr	r3, [pc, #180]	@ (800774c <prvAddNewTaskToReadyList+0xc4>)
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	3301      	adds	r3, #1
 800769a:	4a2c      	ldr	r2, [pc, #176]	@ (800774c <prvAddNewTaskToReadyList+0xc4>)
 800769c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800769e:	4b2c      	ldr	r3, [pc, #176]	@ (8007750 <prvAddNewTaskToReadyList+0xc8>)
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d109      	bne.n	80076ba <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80076a6:	4a2a      	ldr	r2, [pc, #168]	@ (8007750 <prvAddNewTaskToReadyList+0xc8>)
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80076ac:	4b27      	ldr	r3, [pc, #156]	@ (800774c <prvAddNewTaskToReadyList+0xc4>)
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	2b01      	cmp	r3, #1
 80076b2:	d110      	bne.n	80076d6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80076b4:	f000 fc40 	bl	8007f38 <prvInitialiseTaskLists>
 80076b8:	e00d      	b.n	80076d6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80076ba:	4b26      	ldr	r3, [pc, #152]	@ (8007754 <prvAddNewTaskToReadyList+0xcc>)
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d109      	bne.n	80076d6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80076c2:	4b23      	ldr	r3, [pc, #140]	@ (8007750 <prvAddNewTaskToReadyList+0xc8>)
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076cc:	429a      	cmp	r2, r3
 80076ce:	d802      	bhi.n	80076d6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80076d0:	4a1f      	ldr	r2, [pc, #124]	@ (8007750 <prvAddNewTaskToReadyList+0xc8>)
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80076d6:	4b20      	ldr	r3, [pc, #128]	@ (8007758 <prvAddNewTaskToReadyList+0xd0>)
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	3301      	adds	r3, #1
 80076dc:	4a1e      	ldr	r2, [pc, #120]	@ (8007758 <prvAddNewTaskToReadyList+0xd0>)
 80076de:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80076e0:	4b1d      	ldr	r3, [pc, #116]	@ (8007758 <prvAddNewTaskToReadyList+0xd0>)
 80076e2:	681a      	ldr	r2, [r3, #0]
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80076ec:	4b1b      	ldr	r3, [pc, #108]	@ (800775c <prvAddNewTaskToReadyList+0xd4>)
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	429a      	cmp	r2, r3
 80076f2:	d903      	bls.n	80076fc <prvAddNewTaskToReadyList+0x74>
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076f8:	4a18      	ldr	r2, [pc, #96]	@ (800775c <prvAddNewTaskToReadyList+0xd4>)
 80076fa:	6013      	str	r3, [r2, #0]
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007700:	4613      	mov	r3, r2
 8007702:	009b      	lsls	r3, r3, #2
 8007704:	4413      	add	r3, r2
 8007706:	009b      	lsls	r3, r3, #2
 8007708:	4a15      	ldr	r2, [pc, #84]	@ (8007760 <prvAddNewTaskToReadyList+0xd8>)
 800770a:	441a      	add	r2, r3
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	3304      	adds	r3, #4
 8007710:	4619      	mov	r1, r3
 8007712:	4610      	mov	r0, r2
 8007714:	f7fe fcc1 	bl	800609a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007718:	f001 fb80 	bl	8008e1c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800771c:	4b0d      	ldr	r3, [pc, #52]	@ (8007754 <prvAddNewTaskToReadyList+0xcc>)
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d00e      	beq.n	8007742 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007724:	4b0a      	ldr	r3, [pc, #40]	@ (8007750 <prvAddNewTaskToReadyList+0xc8>)
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800772e:	429a      	cmp	r2, r3
 8007730:	d207      	bcs.n	8007742 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007732:	4b0c      	ldr	r3, [pc, #48]	@ (8007764 <prvAddNewTaskToReadyList+0xdc>)
 8007734:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007738:	601a      	str	r2, [r3, #0]
 800773a:	f3bf 8f4f 	dsb	sy
 800773e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007742:	bf00      	nop
 8007744:	3708      	adds	r7, #8
 8007746:	46bd      	mov	sp, r7
 8007748:	bd80      	pop	{r7, pc}
 800774a:	bf00      	nop
 800774c:	20005d0c 	.word	0x20005d0c
 8007750:	20005838 	.word	0x20005838
 8007754:	20005d18 	.word	0x20005d18
 8007758:	20005d28 	.word	0x20005d28
 800775c:	20005d14 	.word	0x20005d14
 8007760:	2000583c 	.word	0x2000583c
 8007764:	e000ed04 	.word	0xe000ed04

08007768 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007768:	b580      	push	{r7, lr}
 800776a:	b084      	sub	sp, #16
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007770:	2300      	movs	r3, #0
 8007772:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d018      	beq.n	80077ac <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800777a:	4b14      	ldr	r3, [pc, #80]	@ (80077cc <vTaskDelay+0x64>)
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	2b00      	cmp	r3, #0
 8007780:	d00b      	beq.n	800779a <vTaskDelay+0x32>
	__asm volatile
 8007782:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007786:	f383 8811 	msr	BASEPRI, r3
 800778a:	f3bf 8f6f 	isb	sy
 800778e:	f3bf 8f4f 	dsb	sy
 8007792:	60bb      	str	r3, [r7, #8]
}
 8007794:	bf00      	nop
 8007796:	bf00      	nop
 8007798:	e7fd      	b.n	8007796 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800779a:	f000 f88b 	bl	80078b4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800779e:	2100      	movs	r1, #0
 80077a0:	6878      	ldr	r0, [r7, #4]
 80077a2:	f000 fe2b 	bl	80083fc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80077a6:	f000 f893 	bl	80078d0 <xTaskResumeAll>
 80077aa:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d107      	bne.n	80077c2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80077b2:	4b07      	ldr	r3, [pc, #28]	@ (80077d0 <vTaskDelay+0x68>)
 80077b4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80077b8:	601a      	str	r2, [r3, #0]
 80077ba:	f3bf 8f4f 	dsb	sy
 80077be:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80077c2:	bf00      	nop
 80077c4:	3710      	adds	r7, #16
 80077c6:	46bd      	mov	sp, r7
 80077c8:	bd80      	pop	{r7, pc}
 80077ca:	bf00      	nop
 80077cc:	20005d34 	.word	0x20005d34
 80077d0:	e000ed04 	.word	0xe000ed04

080077d4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80077d4:	b580      	push	{r7, lr}
 80077d6:	b08a      	sub	sp, #40	@ 0x28
 80077d8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80077da:	2300      	movs	r3, #0
 80077dc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80077de:	2300      	movs	r3, #0
 80077e0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80077e2:	463a      	mov	r2, r7
 80077e4:	1d39      	adds	r1, r7, #4
 80077e6:	f107 0308 	add.w	r3, r7, #8
 80077ea:	4618      	mov	r0, r3
 80077ec:	f7fe fbf4 	bl	8005fd8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80077f0:	6839      	ldr	r1, [r7, #0]
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	68ba      	ldr	r2, [r7, #8]
 80077f6:	9202      	str	r2, [sp, #8]
 80077f8:	9301      	str	r3, [sp, #4]
 80077fa:	2300      	movs	r3, #0
 80077fc:	9300      	str	r3, [sp, #0]
 80077fe:	2300      	movs	r3, #0
 8007800:	460a      	mov	r2, r1
 8007802:	4924      	ldr	r1, [pc, #144]	@ (8007894 <vTaskStartScheduler+0xc0>)
 8007804:	4824      	ldr	r0, [pc, #144]	@ (8007898 <vTaskStartScheduler+0xc4>)
 8007806:	f7ff fdf1 	bl	80073ec <xTaskCreateStatic>
 800780a:	4603      	mov	r3, r0
 800780c:	4a23      	ldr	r2, [pc, #140]	@ (800789c <vTaskStartScheduler+0xc8>)
 800780e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007810:	4b22      	ldr	r3, [pc, #136]	@ (800789c <vTaskStartScheduler+0xc8>)
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	2b00      	cmp	r3, #0
 8007816:	d002      	beq.n	800781e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007818:	2301      	movs	r3, #1
 800781a:	617b      	str	r3, [r7, #20]
 800781c:	e001      	b.n	8007822 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800781e:	2300      	movs	r3, #0
 8007820:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007822:	697b      	ldr	r3, [r7, #20]
 8007824:	2b01      	cmp	r3, #1
 8007826:	d102      	bne.n	800782e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007828:	f000 fe3c 	bl	80084a4 <xTimerCreateTimerTask>
 800782c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800782e:	697b      	ldr	r3, [r7, #20]
 8007830:	2b01      	cmp	r3, #1
 8007832:	d11b      	bne.n	800786c <vTaskStartScheduler+0x98>
	__asm volatile
 8007834:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007838:	f383 8811 	msr	BASEPRI, r3
 800783c:	f3bf 8f6f 	isb	sy
 8007840:	f3bf 8f4f 	dsb	sy
 8007844:	613b      	str	r3, [r7, #16]
}
 8007846:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007848:	4b15      	ldr	r3, [pc, #84]	@ (80078a0 <vTaskStartScheduler+0xcc>)
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	3354      	adds	r3, #84	@ 0x54
 800784e:	4a15      	ldr	r2, [pc, #84]	@ (80078a4 <vTaskStartScheduler+0xd0>)
 8007850:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007852:	4b15      	ldr	r3, [pc, #84]	@ (80078a8 <vTaskStartScheduler+0xd4>)
 8007854:	f04f 32ff 	mov.w	r2, #4294967295
 8007858:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800785a:	4b14      	ldr	r3, [pc, #80]	@ (80078ac <vTaskStartScheduler+0xd8>)
 800785c:	2201      	movs	r2, #1
 800785e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007860:	4b13      	ldr	r3, [pc, #76]	@ (80078b0 <vTaskStartScheduler+0xdc>)
 8007862:	2200      	movs	r2, #0
 8007864:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007866:	f001 fa03 	bl	8008c70 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800786a:	e00f      	b.n	800788c <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800786c:	697b      	ldr	r3, [r7, #20]
 800786e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007872:	d10b      	bne.n	800788c <vTaskStartScheduler+0xb8>
	__asm volatile
 8007874:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007878:	f383 8811 	msr	BASEPRI, r3
 800787c:	f3bf 8f6f 	isb	sy
 8007880:	f3bf 8f4f 	dsb	sy
 8007884:	60fb      	str	r3, [r7, #12]
}
 8007886:	bf00      	nop
 8007888:	bf00      	nop
 800788a:	e7fd      	b.n	8007888 <vTaskStartScheduler+0xb4>
}
 800788c:	bf00      	nop
 800788e:	3718      	adds	r7, #24
 8007890:	46bd      	mov	sp, r7
 8007892:	bd80      	pop	{r7, pc}
 8007894:	08017d50 	.word	0x08017d50
 8007898:	08007f09 	.word	0x08007f09
 800789c:	20005d30 	.word	0x20005d30
 80078a0:	20005838 	.word	0x20005838
 80078a4:	2000013c 	.word	0x2000013c
 80078a8:	20005d2c 	.word	0x20005d2c
 80078ac:	20005d18 	.word	0x20005d18
 80078b0:	20005d10 	.word	0x20005d10

080078b4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80078b4:	b480      	push	{r7}
 80078b6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80078b8:	4b04      	ldr	r3, [pc, #16]	@ (80078cc <vTaskSuspendAll+0x18>)
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	3301      	adds	r3, #1
 80078be:	4a03      	ldr	r2, [pc, #12]	@ (80078cc <vTaskSuspendAll+0x18>)
 80078c0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80078c2:	bf00      	nop
 80078c4:	46bd      	mov	sp, r7
 80078c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ca:	4770      	bx	lr
 80078cc:	20005d34 	.word	0x20005d34

080078d0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80078d0:	b580      	push	{r7, lr}
 80078d2:	b084      	sub	sp, #16
 80078d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80078d6:	2300      	movs	r3, #0
 80078d8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80078da:	2300      	movs	r3, #0
 80078dc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80078de:	4b42      	ldr	r3, [pc, #264]	@ (80079e8 <xTaskResumeAll+0x118>)
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d10b      	bne.n	80078fe <xTaskResumeAll+0x2e>
	__asm volatile
 80078e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078ea:	f383 8811 	msr	BASEPRI, r3
 80078ee:	f3bf 8f6f 	isb	sy
 80078f2:	f3bf 8f4f 	dsb	sy
 80078f6:	603b      	str	r3, [r7, #0]
}
 80078f8:	bf00      	nop
 80078fa:	bf00      	nop
 80078fc:	e7fd      	b.n	80078fa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80078fe:	f001 fa5b 	bl	8008db8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007902:	4b39      	ldr	r3, [pc, #228]	@ (80079e8 <xTaskResumeAll+0x118>)
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	3b01      	subs	r3, #1
 8007908:	4a37      	ldr	r2, [pc, #220]	@ (80079e8 <xTaskResumeAll+0x118>)
 800790a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800790c:	4b36      	ldr	r3, [pc, #216]	@ (80079e8 <xTaskResumeAll+0x118>)
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d162      	bne.n	80079da <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007914:	4b35      	ldr	r3, [pc, #212]	@ (80079ec <xTaskResumeAll+0x11c>)
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d05e      	beq.n	80079da <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800791c:	e02f      	b.n	800797e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800791e:	4b34      	ldr	r3, [pc, #208]	@ (80079f0 <xTaskResumeAll+0x120>)
 8007920:	68db      	ldr	r3, [r3, #12]
 8007922:	68db      	ldr	r3, [r3, #12]
 8007924:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	3318      	adds	r3, #24
 800792a:	4618      	mov	r0, r3
 800792c:	f7fe fc12 	bl	8006154 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	3304      	adds	r3, #4
 8007934:	4618      	mov	r0, r3
 8007936:	f7fe fc0d 	bl	8006154 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800793e:	4b2d      	ldr	r3, [pc, #180]	@ (80079f4 <xTaskResumeAll+0x124>)
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	429a      	cmp	r2, r3
 8007944:	d903      	bls.n	800794e <xTaskResumeAll+0x7e>
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800794a:	4a2a      	ldr	r2, [pc, #168]	@ (80079f4 <xTaskResumeAll+0x124>)
 800794c:	6013      	str	r3, [r2, #0]
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007952:	4613      	mov	r3, r2
 8007954:	009b      	lsls	r3, r3, #2
 8007956:	4413      	add	r3, r2
 8007958:	009b      	lsls	r3, r3, #2
 800795a:	4a27      	ldr	r2, [pc, #156]	@ (80079f8 <xTaskResumeAll+0x128>)
 800795c:	441a      	add	r2, r3
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	3304      	adds	r3, #4
 8007962:	4619      	mov	r1, r3
 8007964:	4610      	mov	r0, r2
 8007966:	f7fe fb98 	bl	800609a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800796e:	4b23      	ldr	r3, [pc, #140]	@ (80079fc <xTaskResumeAll+0x12c>)
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007974:	429a      	cmp	r2, r3
 8007976:	d302      	bcc.n	800797e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8007978:	4b21      	ldr	r3, [pc, #132]	@ (8007a00 <xTaskResumeAll+0x130>)
 800797a:	2201      	movs	r2, #1
 800797c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800797e:	4b1c      	ldr	r3, [pc, #112]	@ (80079f0 <xTaskResumeAll+0x120>)
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d1cb      	bne.n	800791e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d001      	beq.n	8007990 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800798c:	f000 fb78 	bl	8008080 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007990:	4b1c      	ldr	r3, [pc, #112]	@ (8007a04 <xTaskResumeAll+0x134>)
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d010      	beq.n	80079be <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800799c:	f000 f858 	bl	8007a50 <xTaskIncrementTick>
 80079a0:	4603      	mov	r3, r0
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d002      	beq.n	80079ac <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80079a6:	4b16      	ldr	r3, [pc, #88]	@ (8007a00 <xTaskResumeAll+0x130>)
 80079a8:	2201      	movs	r2, #1
 80079aa:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	3b01      	subs	r3, #1
 80079b0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d1f1      	bne.n	800799c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80079b8:	4b12      	ldr	r3, [pc, #72]	@ (8007a04 <xTaskResumeAll+0x134>)
 80079ba:	2200      	movs	r2, #0
 80079bc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80079be:	4b10      	ldr	r3, [pc, #64]	@ (8007a00 <xTaskResumeAll+0x130>)
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d009      	beq.n	80079da <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80079c6:	2301      	movs	r3, #1
 80079c8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80079ca:	4b0f      	ldr	r3, [pc, #60]	@ (8007a08 <xTaskResumeAll+0x138>)
 80079cc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80079d0:	601a      	str	r2, [r3, #0]
 80079d2:	f3bf 8f4f 	dsb	sy
 80079d6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80079da:	f001 fa1f 	bl	8008e1c <vPortExitCritical>

	return xAlreadyYielded;
 80079de:	68bb      	ldr	r3, [r7, #8]
}
 80079e0:	4618      	mov	r0, r3
 80079e2:	3710      	adds	r7, #16
 80079e4:	46bd      	mov	sp, r7
 80079e6:	bd80      	pop	{r7, pc}
 80079e8:	20005d34 	.word	0x20005d34
 80079ec:	20005d0c 	.word	0x20005d0c
 80079f0:	20005ccc 	.word	0x20005ccc
 80079f4:	20005d14 	.word	0x20005d14
 80079f8:	2000583c 	.word	0x2000583c
 80079fc:	20005838 	.word	0x20005838
 8007a00:	20005d20 	.word	0x20005d20
 8007a04:	20005d1c 	.word	0x20005d1c
 8007a08:	e000ed04 	.word	0xe000ed04

08007a0c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007a0c:	b480      	push	{r7}
 8007a0e:	b083      	sub	sp, #12
 8007a10:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007a12:	4b05      	ldr	r3, [pc, #20]	@ (8007a28 <xTaskGetTickCount+0x1c>)
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007a18:	687b      	ldr	r3, [r7, #4]
}
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	370c      	adds	r7, #12
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a24:	4770      	bx	lr
 8007a26:	bf00      	nop
 8007a28:	20005d10 	.word	0x20005d10

08007a2c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	b082      	sub	sp, #8
 8007a30:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007a32:	f001 faa1 	bl	8008f78 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8007a36:	2300      	movs	r3, #0
 8007a38:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8007a3a:	4b04      	ldr	r3, [pc, #16]	@ (8007a4c <xTaskGetTickCountFromISR+0x20>)
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007a40:	683b      	ldr	r3, [r7, #0]
}
 8007a42:	4618      	mov	r0, r3
 8007a44:	3708      	adds	r7, #8
 8007a46:	46bd      	mov	sp, r7
 8007a48:	bd80      	pop	{r7, pc}
 8007a4a:	bf00      	nop
 8007a4c:	20005d10 	.word	0x20005d10

08007a50 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b086      	sub	sp, #24
 8007a54:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007a56:	2300      	movs	r3, #0
 8007a58:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007a5a:	4b4f      	ldr	r3, [pc, #316]	@ (8007b98 <xTaskIncrementTick+0x148>)
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	f040 8090 	bne.w	8007b84 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007a64:	4b4d      	ldr	r3, [pc, #308]	@ (8007b9c <xTaskIncrementTick+0x14c>)
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	3301      	adds	r3, #1
 8007a6a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007a6c:	4a4b      	ldr	r2, [pc, #300]	@ (8007b9c <xTaskIncrementTick+0x14c>)
 8007a6e:	693b      	ldr	r3, [r7, #16]
 8007a70:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007a72:	693b      	ldr	r3, [r7, #16]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d121      	bne.n	8007abc <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8007a78:	4b49      	ldr	r3, [pc, #292]	@ (8007ba0 <xTaskIncrementTick+0x150>)
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d00b      	beq.n	8007a9a <xTaskIncrementTick+0x4a>
	__asm volatile
 8007a82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a86:	f383 8811 	msr	BASEPRI, r3
 8007a8a:	f3bf 8f6f 	isb	sy
 8007a8e:	f3bf 8f4f 	dsb	sy
 8007a92:	603b      	str	r3, [r7, #0]
}
 8007a94:	bf00      	nop
 8007a96:	bf00      	nop
 8007a98:	e7fd      	b.n	8007a96 <xTaskIncrementTick+0x46>
 8007a9a:	4b41      	ldr	r3, [pc, #260]	@ (8007ba0 <xTaskIncrementTick+0x150>)
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	60fb      	str	r3, [r7, #12]
 8007aa0:	4b40      	ldr	r3, [pc, #256]	@ (8007ba4 <xTaskIncrementTick+0x154>)
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	4a3e      	ldr	r2, [pc, #248]	@ (8007ba0 <xTaskIncrementTick+0x150>)
 8007aa6:	6013      	str	r3, [r2, #0]
 8007aa8:	4a3e      	ldr	r2, [pc, #248]	@ (8007ba4 <xTaskIncrementTick+0x154>)
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	6013      	str	r3, [r2, #0]
 8007aae:	4b3e      	ldr	r3, [pc, #248]	@ (8007ba8 <xTaskIncrementTick+0x158>)
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	3301      	adds	r3, #1
 8007ab4:	4a3c      	ldr	r2, [pc, #240]	@ (8007ba8 <xTaskIncrementTick+0x158>)
 8007ab6:	6013      	str	r3, [r2, #0]
 8007ab8:	f000 fae2 	bl	8008080 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007abc:	4b3b      	ldr	r3, [pc, #236]	@ (8007bac <xTaskIncrementTick+0x15c>)
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	693a      	ldr	r2, [r7, #16]
 8007ac2:	429a      	cmp	r2, r3
 8007ac4:	d349      	bcc.n	8007b5a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007ac6:	4b36      	ldr	r3, [pc, #216]	@ (8007ba0 <xTaskIncrementTick+0x150>)
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d104      	bne.n	8007ada <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ad0:	4b36      	ldr	r3, [pc, #216]	@ (8007bac <xTaskIncrementTick+0x15c>)
 8007ad2:	f04f 32ff 	mov.w	r2, #4294967295
 8007ad6:	601a      	str	r2, [r3, #0]
					break;
 8007ad8:	e03f      	b.n	8007b5a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ada:	4b31      	ldr	r3, [pc, #196]	@ (8007ba0 <xTaskIncrementTick+0x150>)
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	68db      	ldr	r3, [r3, #12]
 8007ae0:	68db      	ldr	r3, [r3, #12]
 8007ae2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007ae4:	68bb      	ldr	r3, [r7, #8]
 8007ae6:	685b      	ldr	r3, [r3, #4]
 8007ae8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007aea:	693a      	ldr	r2, [r7, #16]
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	429a      	cmp	r2, r3
 8007af0:	d203      	bcs.n	8007afa <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007af2:	4a2e      	ldr	r2, [pc, #184]	@ (8007bac <xTaskIncrementTick+0x15c>)
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007af8:	e02f      	b.n	8007b5a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007afa:	68bb      	ldr	r3, [r7, #8]
 8007afc:	3304      	adds	r3, #4
 8007afe:	4618      	mov	r0, r3
 8007b00:	f7fe fb28 	bl	8006154 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007b04:	68bb      	ldr	r3, [r7, #8]
 8007b06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d004      	beq.n	8007b16 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007b0c:	68bb      	ldr	r3, [r7, #8]
 8007b0e:	3318      	adds	r3, #24
 8007b10:	4618      	mov	r0, r3
 8007b12:	f7fe fb1f 	bl	8006154 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007b16:	68bb      	ldr	r3, [r7, #8]
 8007b18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b1a:	4b25      	ldr	r3, [pc, #148]	@ (8007bb0 <xTaskIncrementTick+0x160>)
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	429a      	cmp	r2, r3
 8007b20:	d903      	bls.n	8007b2a <xTaskIncrementTick+0xda>
 8007b22:	68bb      	ldr	r3, [r7, #8]
 8007b24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b26:	4a22      	ldr	r2, [pc, #136]	@ (8007bb0 <xTaskIncrementTick+0x160>)
 8007b28:	6013      	str	r3, [r2, #0]
 8007b2a:	68bb      	ldr	r3, [r7, #8]
 8007b2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b2e:	4613      	mov	r3, r2
 8007b30:	009b      	lsls	r3, r3, #2
 8007b32:	4413      	add	r3, r2
 8007b34:	009b      	lsls	r3, r3, #2
 8007b36:	4a1f      	ldr	r2, [pc, #124]	@ (8007bb4 <xTaskIncrementTick+0x164>)
 8007b38:	441a      	add	r2, r3
 8007b3a:	68bb      	ldr	r3, [r7, #8]
 8007b3c:	3304      	adds	r3, #4
 8007b3e:	4619      	mov	r1, r3
 8007b40:	4610      	mov	r0, r2
 8007b42:	f7fe faaa 	bl	800609a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007b46:	68bb      	ldr	r3, [r7, #8]
 8007b48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b4a:	4b1b      	ldr	r3, [pc, #108]	@ (8007bb8 <xTaskIncrementTick+0x168>)
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b50:	429a      	cmp	r2, r3
 8007b52:	d3b8      	bcc.n	8007ac6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8007b54:	2301      	movs	r3, #1
 8007b56:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007b58:	e7b5      	b.n	8007ac6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007b5a:	4b17      	ldr	r3, [pc, #92]	@ (8007bb8 <xTaskIncrementTick+0x168>)
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b60:	4914      	ldr	r1, [pc, #80]	@ (8007bb4 <xTaskIncrementTick+0x164>)
 8007b62:	4613      	mov	r3, r2
 8007b64:	009b      	lsls	r3, r3, #2
 8007b66:	4413      	add	r3, r2
 8007b68:	009b      	lsls	r3, r3, #2
 8007b6a:	440b      	add	r3, r1
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	2b01      	cmp	r3, #1
 8007b70:	d901      	bls.n	8007b76 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8007b72:	2301      	movs	r3, #1
 8007b74:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007b76:	4b11      	ldr	r3, [pc, #68]	@ (8007bbc <xTaskIncrementTick+0x16c>)
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d007      	beq.n	8007b8e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8007b7e:	2301      	movs	r3, #1
 8007b80:	617b      	str	r3, [r7, #20]
 8007b82:	e004      	b.n	8007b8e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007b84:	4b0e      	ldr	r3, [pc, #56]	@ (8007bc0 <xTaskIncrementTick+0x170>)
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	3301      	adds	r3, #1
 8007b8a:	4a0d      	ldr	r2, [pc, #52]	@ (8007bc0 <xTaskIncrementTick+0x170>)
 8007b8c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007b8e:	697b      	ldr	r3, [r7, #20]
}
 8007b90:	4618      	mov	r0, r3
 8007b92:	3718      	adds	r7, #24
 8007b94:	46bd      	mov	sp, r7
 8007b96:	bd80      	pop	{r7, pc}
 8007b98:	20005d34 	.word	0x20005d34
 8007b9c:	20005d10 	.word	0x20005d10
 8007ba0:	20005cc4 	.word	0x20005cc4
 8007ba4:	20005cc8 	.word	0x20005cc8
 8007ba8:	20005d24 	.word	0x20005d24
 8007bac:	20005d2c 	.word	0x20005d2c
 8007bb0:	20005d14 	.word	0x20005d14
 8007bb4:	2000583c 	.word	0x2000583c
 8007bb8:	20005838 	.word	0x20005838
 8007bbc:	20005d20 	.word	0x20005d20
 8007bc0:	20005d1c 	.word	0x20005d1c

08007bc4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007bc4:	b480      	push	{r7}
 8007bc6:	b085      	sub	sp, #20
 8007bc8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007bca:	4b2b      	ldr	r3, [pc, #172]	@ (8007c78 <vTaskSwitchContext+0xb4>)
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d003      	beq.n	8007bda <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007bd2:	4b2a      	ldr	r3, [pc, #168]	@ (8007c7c <vTaskSwitchContext+0xb8>)
 8007bd4:	2201      	movs	r2, #1
 8007bd6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007bd8:	e047      	b.n	8007c6a <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8007bda:	4b28      	ldr	r3, [pc, #160]	@ (8007c7c <vTaskSwitchContext+0xb8>)
 8007bdc:	2200      	movs	r2, #0
 8007bde:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007be0:	4b27      	ldr	r3, [pc, #156]	@ (8007c80 <vTaskSwitchContext+0xbc>)
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	60fb      	str	r3, [r7, #12]
 8007be6:	e011      	b.n	8007c0c <vTaskSwitchContext+0x48>
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d10b      	bne.n	8007c06 <vTaskSwitchContext+0x42>
	__asm volatile
 8007bee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bf2:	f383 8811 	msr	BASEPRI, r3
 8007bf6:	f3bf 8f6f 	isb	sy
 8007bfa:	f3bf 8f4f 	dsb	sy
 8007bfe:	607b      	str	r3, [r7, #4]
}
 8007c00:	bf00      	nop
 8007c02:	bf00      	nop
 8007c04:	e7fd      	b.n	8007c02 <vTaskSwitchContext+0x3e>
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	3b01      	subs	r3, #1
 8007c0a:	60fb      	str	r3, [r7, #12]
 8007c0c:	491d      	ldr	r1, [pc, #116]	@ (8007c84 <vTaskSwitchContext+0xc0>)
 8007c0e:	68fa      	ldr	r2, [r7, #12]
 8007c10:	4613      	mov	r3, r2
 8007c12:	009b      	lsls	r3, r3, #2
 8007c14:	4413      	add	r3, r2
 8007c16:	009b      	lsls	r3, r3, #2
 8007c18:	440b      	add	r3, r1
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d0e3      	beq.n	8007be8 <vTaskSwitchContext+0x24>
 8007c20:	68fa      	ldr	r2, [r7, #12]
 8007c22:	4613      	mov	r3, r2
 8007c24:	009b      	lsls	r3, r3, #2
 8007c26:	4413      	add	r3, r2
 8007c28:	009b      	lsls	r3, r3, #2
 8007c2a:	4a16      	ldr	r2, [pc, #88]	@ (8007c84 <vTaskSwitchContext+0xc0>)
 8007c2c:	4413      	add	r3, r2
 8007c2e:	60bb      	str	r3, [r7, #8]
 8007c30:	68bb      	ldr	r3, [r7, #8]
 8007c32:	685b      	ldr	r3, [r3, #4]
 8007c34:	685a      	ldr	r2, [r3, #4]
 8007c36:	68bb      	ldr	r3, [r7, #8]
 8007c38:	605a      	str	r2, [r3, #4]
 8007c3a:	68bb      	ldr	r3, [r7, #8]
 8007c3c:	685a      	ldr	r2, [r3, #4]
 8007c3e:	68bb      	ldr	r3, [r7, #8]
 8007c40:	3308      	adds	r3, #8
 8007c42:	429a      	cmp	r2, r3
 8007c44:	d104      	bne.n	8007c50 <vTaskSwitchContext+0x8c>
 8007c46:	68bb      	ldr	r3, [r7, #8]
 8007c48:	685b      	ldr	r3, [r3, #4]
 8007c4a:	685a      	ldr	r2, [r3, #4]
 8007c4c:	68bb      	ldr	r3, [r7, #8]
 8007c4e:	605a      	str	r2, [r3, #4]
 8007c50:	68bb      	ldr	r3, [r7, #8]
 8007c52:	685b      	ldr	r3, [r3, #4]
 8007c54:	68db      	ldr	r3, [r3, #12]
 8007c56:	4a0c      	ldr	r2, [pc, #48]	@ (8007c88 <vTaskSwitchContext+0xc4>)
 8007c58:	6013      	str	r3, [r2, #0]
 8007c5a:	4a09      	ldr	r2, [pc, #36]	@ (8007c80 <vTaskSwitchContext+0xbc>)
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007c60:	4b09      	ldr	r3, [pc, #36]	@ (8007c88 <vTaskSwitchContext+0xc4>)
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	3354      	adds	r3, #84	@ 0x54
 8007c66:	4a09      	ldr	r2, [pc, #36]	@ (8007c8c <vTaskSwitchContext+0xc8>)
 8007c68:	6013      	str	r3, [r2, #0]
}
 8007c6a:	bf00      	nop
 8007c6c:	3714      	adds	r7, #20
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c74:	4770      	bx	lr
 8007c76:	bf00      	nop
 8007c78:	20005d34 	.word	0x20005d34
 8007c7c:	20005d20 	.word	0x20005d20
 8007c80:	20005d14 	.word	0x20005d14
 8007c84:	2000583c 	.word	0x2000583c
 8007c88:	20005838 	.word	0x20005838
 8007c8c:	2000013c 	.word	0x2000013c

08007c90 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b084      	sub	sp, #16
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
 8007c98:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d10b      	bne.n	8007cb8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8007ca0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ca4:	f383 8811 	msr	BASEPRI, r3
 8007ca8:	f3bf 8f6f 	isb	sy
 8007cac:	f3bf 8f4f 	dsb	sy
 8007cb0:	60fb      	str	r3, [r7, #12]
}
 8007cb2:	bf00      	nop
 8007cb4:	bf00      	nop
 8007cb6:	e7fd      	b.n	8007cb4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007cb8:	4b07      	ldr	r3, [pc, #28]	@ (8007cd8 <vTaskPlaceOnEventList+0x48>)
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	3318      	adds	r3, #24
 8007cbe:	4619      	mov	r1, r3
 8007cc0:	6878      	ldr	r0, [r7, #4]
 8007cc2:	f7fe fa0e 	bl	80060e2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007cc6:	2101      	movs	r1, #1
 8007cc8:	6838      	ldr	r0, [r7, #0]
 8007cca:	f000 fb97 	bl	80083fc <prvAddCurrentTaskToDelayedList>
}
 8007cce:	bf00      	nop
 8007cd0:	3710      	adds	r7, #16
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	bd80      	pop	{r7, pc}
 8007cd6:	bf00      	nop
 8007cd8:	20005838 	.word	0x20005838

08007cdc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	b086      	sub	sp, #24
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	60f8      	str	r0, [r7, #12]
 8007ce4:	60b9      	str	r1, [r7, #8]
 8007ce6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d10b      	bne.n	8007d06 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8007cee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cf2:	f383 8811 	msr	BASEPRI, r3
 8007cf6:	f3bf 8f6f 	isb	sy
 8007cfa:	f3bf 8f4f 	dsb	sy
 8007cfe:	617b      	str	r3, [r7, #20]
}
 8007d00:	bf00      	nop
 8007d02:	bf00      	nop
 8007d04:	e7fd      	b.n	8007d02 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007d06:	4b0a      	ldr	r3, [pc, #40]	@ (8007d30 <vTaskPlaceOnEventListRestricted+0x54>)
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	3318      	adds	r3, #24
 8007d0c:	4619      	mov	r1, r3
 8007d0e:	68f8      	ldr	r0, [r7, #12]
 8007d10:	f7fe f9c3 	bl	800609a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d002      	beq.n	8007d20 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8007d1a:	f04f 33ff 	mov.w	r3, #4294967295
 8007d1e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007d20:	6879      	ldr	r1, [r7, #4]
 8007d22:	68b8      	ldr	r0, [r7, #8]
 8007d24:	f000 fb6a 	bl	80083fc <prvAddCurrentTaskToDelayedList>
	}
 8007d28:	bf00      	nop
 8007d2a:	3718      	adds	r7, #24
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	bd80      	pop	{r7, pc}
 8007d30:	20005838 	.word	0x20005838

08007d34 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007d34:	b580      	push	{r7, lr}
 8007d36:	b086      	sub	sp, #24
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	68db      	ldr	r3, [r3, #12]
 8007d40:	68db      	ldr	r3, [r3, #12]
 8007d42:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007d44:	693b      	ldr	r3, [r7, #16]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d10b      	bne.n	8007d62 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8007d4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d4e:	f383 8811 	msr	BASEPRI, r3
 8007d52:	f3bf 8f6f 	isb	sy
 8007d56:	f3bf 8f4f 	dsb	sy
 8007d5a:	60fb      	str	r3, [r7, #12]
}
 8007d5c:	bf00      	nop
 8007d5e:	bf00      	nop
 8007d60:	e7fd      	b.n	8007d5e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007d62:	693b      	ldr	r3, [r7, #16]
 8007d64:	3318      	adds	r3, #24
 8007d66:	4618      	mov	r0, r3
 8007d68:	f7fe f9f4 	bl	8006154 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007d6c:	4b1d      	ldr	r3, [pc, #116]	@ (8007de4 <xTaskRemoveFromEventList+0xb0>)
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d11d      	bne.n	8007db0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007d74:	693b      	ldr	r3, [r7, #16]
 8007d76:	3304      	adds	r3, #4
 8007d78:	4618      	mov	r0, r3
 8007d7a:	f7fe f9eb 	bl	8006154 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007d7e:	693b      	ldr	r3, [r7, #16]
 8007d80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d82:	4b19      	ldr	r3, [pc, #100]	@ (8007de8 <xTaskRemoveFromEventList+0xb4>)
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	429a      	cmp	r2, r3
 8007d88:	d903      	bls.n	8007d92 <xTaskRemoveFromEventList+0x5e>
 8007d8a:	693b      	ldr	r3, [r7, #16]
 8007d8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d8e:	4a16      	ldr	r2, [pc, #88]	@ (8007de8 <xTaskRemoveFromEventList+0xb4>)
 8007d90:	6013      	str	r3, [r2, #0]
 8007d92:	693b      	ldr	r3, [r7, #16]
 8007d94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d96:	4613      	mov	r3, r2
 8007d98:	009b      	lsls	r3, r3, #2
 8007d9a:	4413      	add	r3, r2
 8007d9c:	009b      	lsls	r3, r3, #2
 8007d9e:	4a13      	ldr	r2, [pc, #76]	@ (8007dec <xTaskRemoveFromEventList+0xb8>)
 8007da0:	441a      	add	r2, r3
 8007da2:	693b      	ldr	r3, [r7, #16]
 8007da4:	3304      	adds	r3, #4
 8007da6:	4619      	mov	r1, r3
 8007da8:	4610      	mov	r0, r2
 8007daa:	f7fe f976 	bl	800609a <vListInsertEnd>
 8007dae:	e005      	b.n	8007dbc <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007db0:	693b      	ldr	r3, [r7, #16]
 8007db2:	3318      	adds	r3, #24
 8007db4:	4619      	mov	r1, r3
 8007db6:	480e      	ldr	r0, [pc, #56]	@ (8007df0 <xTaskRemoveFromEventList+0xbc>)
 8007db8:	f7fe f96f 	bl	800609a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007dbc:	693b      	ldr	r3, [r7, #16]
 8007dbe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007dc0:	4b0c      	ldr	r3, [pc, #48]	@ (8007df4 <xTaskRemoveFromEventList+0xc0>)
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007dc6:	429a      	cmp	r2, r3
 8007dc8:	d905      	bls.n	8007dd6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007dca:	2301      	movs	r3, #1
 8007dcc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007dce:	4b0a      	ldr	r3, [pc, #40]	@ (8007df8 <xTaskRemoveFromEventList+0xc4>)
 8007dd0:	2201      	movs	r2, #1
 8007dd2:	601a      	str	r2, [r3, #0]
 8007dd4:	e001      	b.n	8007dda <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007dda:	697b      	ldr	r3, [r7, #20]
}
 8007ddc:	4618      	mov	r0, r3
 8007dde:	3718      	adds	r7, #24
 8007de0:	46bd      	mov	sp, r7
 8007de2:	bd80      	pop	{r7, pc}
 8007de4:	20005d34 	.word	0x20005d34
 8007de8:	20005d14 	.word	0x20005d14
 8007dec:	2000583c 	.word	0x2000583c
 8007df0:	20005ccc 	.word	0x20005ccc
 8007df4:	20005838 	.word	0x20005838
 8007df8:	20005d20 	.word	0x20005d20

08007dfc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007dfc:	b480      	push	{r7}
 8007dfe:	b083      	sub	sp, #12
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007e04:	4b06      	ldr	r3, [pc, #24]	@ (8007e20 <vTaskInternalSetTimeOutState+0x24>)
 8007e06:	681a      	ldr	r2, [r3, #0]
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007e0c:	4b05      	ldr	r3, [pc, #20]	@ (8007e24 <vTaskInternalSetTimeOutState+0x28>)
 8007e0e:	681a      	ldr	r2, [r3, #0]
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	605a      	str	r2, [r3, #4]
}
 8007e14:	bf00      	nop
 8007e16:	370c      	adds	r7, #12
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1e:	4770      	bx	lr
 8007e20:	20005d24 	.word	0x20005d24
 8007e24:	20005d10 	.word	0x20005d10

08007e28 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	b088      	sub	sp, #32
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
 8007e30:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d10b      	bne.n	8007e50 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8007e38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e3c:	f383 8811 	msr	BASEPRI, r3
 8007e40:	f3bf 8f6f 	isb	sy
 8007e44:	f3bf 8f4f 	dsb	sy
 8007e48:	613b      	str	r3, [r7, #16]
}
 8007e4a:	bf00      	nop
 8007e4c:	bf00      	nop
 8007e4e:	e7fd      	b.n	8007e4c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007e50:	683b      	ldr	r3, [r7, #0]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d10b      	bne.n	8007e6e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8007e56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e5a:	f383 8811 	msr	BASEPRI, r3
 8007e5e:	f3bf 8f6f 	isb	sy
 8007e62:	f3bf 8f4f 	dsb	sy
 8007e66:	60fb      	str	r3, [r7, #12]
}
 8007e68:	bf00      	nop
 8007e6a:	bf00      	nop
 8007e6c:	e7fd      	b.n	8007e6a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8007e6e:	f000 ffa3 	bl	8008db8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007e72:	4b1d      	ldr	r3, [pc, #116]	@ (8007ee8 <xTaskCheckForTimeOut+0xc0>)
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	685b      	ldr	r3, [r3, #4]
 8007e7c:	69ba      	ldr	r2, [r7, #24]
 8007e7e:	1ad3      	subs	r3, r2, r3
 8007e80:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007e82:	683b      	ldr	r3, [r7, #0]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e8a:	d102      	bne.n	8007e92 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007e8c:	2300      	movs	r3, #0
 8007e8e:	61fb      	str	r3, [r7, #28]
 8007e90:	e023      	b.n	8007eda <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681a      	ldr	r2, [r3, #0]
 8007e96:	4b15      	ldr	r3, [pc, #84]	@ (8007eec <xTaskCheckForTimeOut+0xc4>)
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	429a      	cmp	r2, r3
 8007e9c:	d007      	beq.n	8007eae <xTaskCheckForTimeOut+0x86>
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	685b      	ldr	r3, [r3, #4]
 8007ea2:	69ba      	ldr	r2, [r7, #24]
 8007ea4:	429a      	cmp	r2, r3
 8007ea6:	d302      	bcc.n	8007eae <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007ea8:	2301      	movs	r3, #1
 8007eaa:	61fb      	str	r3, [r7, #28]
 8007eac:	e015      	b.n	8007eda <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007eae:	683b      	ldr	r3, [r7, #0]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	697a      	ldr	r2, [r7, #20]
 8007eb4:	429a      	cmp	r2, r3
 8007eb6:	d20b      	bcs.n	8007ed0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007eb8:	683b      	ldr	r3, [r7, #0]
 8007eba:	681a      	ldr	r2, [r3, #0]
 8007ebc:	697b      	ldr	r3, [r7, #20]
 8007ebe:	1ad2      	subs	r2, r2, r3
 8007ec0:	683b      	ldr	r3, [r7, #0]
 8007ec2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007ec4:	6878      	ldr	r0, [r7, #4]
 8007ec6:	f7ff ff99 	bl	8007dfc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007eca:	2300      	movs	r3, #0
 8007ecc:	61fb      	str	r3, [r7, #28]
 8007ece:	e004      	b.n	8007eda <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8007ed0:	683b      	ldr	r3, [r7, #0]
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007ed6:	2301      	movs	r3, #1
 8007ed8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007eda:	f000 ff9f 	bl	8008e1c <vPortExitCritical>

	return xReturn;
 8007ede:	69fb      	ldr	r3, [r7, #28]
}
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	3720      	adds	r7, #32
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	bd80      	pop	{r7, pc}
 8007ee8:	20005d10 	.word	0x20005d10
 8007eec:	20005d24 	.word	0x20005d24

08007ef0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007ef0:	b480      	push	{r7}
 8007ef2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007ef4:	4b03      	ldr	r3, [pc, #12]	@ (8007f04 <vTaskMissedYield+0x14>)
 8007ef6:	2201      	movs	r2, #1
 8007ef8:	601a      	str	r2, [r3, #0]
}
 8007efa:	bf00      	nop
 8007efc:	46bd      	mov	sp, r7
 8007efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f02:	4770      	bx	lr
 8007f04:	20005d20 	.word	0x20005d20

08007f08 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b082      	sub	sp, #8
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007f10:	f000 f852 	bl	8007fb8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007f14:	4b06      	ldr	r3, [pc, #24]	@ (8007f30 <prvIdleTask+0x28>)
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	2b01      	cmp	r3, #1
 8007f1a:	d9f9      	bls.n	8007f10 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007f1c:	4b05      	ldr	r3, [pc, #20]	@ (8007f34 <prvIdleTask+0x2c>)
 8007f1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007f22:	601a      	str	r2, [r3, #0]
 8007f24:	f3bf 8f4f 	dsb	sy
 8007f28:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007f2c:	e7f0      	b.n	8007f10 <prvIdleTask+0x8>
 8007f2e:	bf00      	nop
 8007f30:	2000583c 	.word	0x2000583c
 8007f34:	e000ed04 	.word	0xe000ed04

08007f38 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	b082      	sub	sp, #8
 8007f3c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007f3e:	2300      	movs	r3, #0
 8007f40:	607b      	str	r3, [r7, #4]
 8007f42:	e00c      	b.n	8007f5e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007f44:	687a      	ldr	r2, [r7, #4]
 8007f46:	4613      	mov	r3, r2
 8007f48:	009b      	lsls	r3, r3, #2
 8007f4a:	4413      	add	r3, r2
 8007f4c:	009b      	lsls	r3, r3, #2
 8007f4e:	4a12      	ldr	r2, [pc, #72]	@ (8007f98 <prvInitialiseTaskLists+0x60>)
 8007f50:	4413      	add	r3, r2
 8007f52:	4618      	mov	r0, r3
 8007f54:	f7fe f874 	bl	8006040 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	3301      	adds	r3, #1
 8007f5c:	607b      	str	r3, [r7, #4]
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	2b37      	cmp	r3, #55	@ 0x37
 8007f62:	d9ef      	bls.n	8007f44 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007f64:	480d      	ldr	r0, [pc, #52]	@ (8007f9c <prvInitialiseTaskLists+0x64>)
 8007f66:	f7fe f86b 	bl	8006040 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007f6a:	480d      	ldr	r0, [pc, #52]	@ (8007fa0 <prvInitialiseTaskLists+0x68>)
 8007f6c:	f7fe f868 	bl	8006040 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007f70:	480c      	ldr	r0, [pc, #48]	@ (8007fa4 <prvInitialiseTaskLists+0x6c>)
 8007f72:	f7fe f865 	bl	8006040 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007f76:	480c      	ldr	r0, [pc, #48]	@ (8007fa8 <prvInitialiseTaskLists+0x70>)
 8007f78:	f7fe f862 	bl	8006040 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007f7c:	480b      	ldr	r0, [pc, #44]	@ (8007fac <prvInitialiseTaskLists+0x74>)
 8007f7e:	f7fe f85f 	bl	8006040 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007f82:	4b0b      	ldr	r3, [pc, #44]	@ (8007fb0 <prvInitialiseTaskLists+0x78>)
 8007f84:	4a05      	ldr	r2, [pc, #20]	@ (8007f9c <prvInitialiseTaskLists+0x64>)
 8007f86:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007f88:	4b0a      	ldr	r3, [pc, #40]	@ (8007fb4 <prvInitialiseTaskLists+0x7c>)
 8007f8a:	4a05      	ldr	r2, [pc, #20]	@ (8007fa0 <prvInitialiseTaskLists+0x68>)
 8007f8c:	601a      	str	r2, [r3, #0]
}
 8007f8e:	bf00      	nop
 8007f90:	3708      	adds	r7, #8
 8007f92:	46bd      	mov	sp, r7
 8007f94:	bd80      	pop	{r7, pc}
 8007f96:	bf00      	nop
 8007f98:	2000583c 	.word	0x2000583c
 8007f9c:	20005c9c 	.word	0x20005c9c
 8007fa0:	20005cb0 	.word	0x20005cb0
 8007fa4:	20005ccc 	.word	0x20005ccc
 8007fa8:	20005ce0 	.word	0x20005ce0
 8007fac:	20005cf8 	.word	0x20005cf8
 8007fb0:	20005cc4 	.word	0x20005cc4
 8007fb4:	20005cc8 	.word	0x20005cc8

08007fb8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	b082      	sub	sp, #8
 8007fbc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007fbe:	e019      	b.n	8007ff4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007fc0:	f000 fefa 	bl	8008db8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007fc4:	4b10      	ldr	r3, [pc, #64]	@ (8008008 <prvCheckTasksWaitingTermination+0x50>)
 8007fc6:	68db      	ldr	r3, [r3, #12]
 8007fc8:	68db      	ldr	r3, [r3, #12]
 8007fca:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	3304      	adds	r3, #4
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	f7fe f8bf 	bl	8006154 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007fd6:	4b0d      	ldr	r3, [pc, #52]	@ (800800c <prvCheckTasksWaitingTermination+0x54>)
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	3b01      	subs	r3, #1
 8007fdc:	4a0b      	ldr	r2, [pc, #44]	@ (800800c <prvCheckTasksWaitingTermination+0x54>)
 8007fde:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007fe0:	4b0b      	ldr	r3, [pc, #44]	@ (8008010 <prvCheckTasksWaitingTermination+0x58>)
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	3b01      	subs	r3, #1
 8007fe6:	4a0a      	ldr	r2, [pc, #40]	@ (8008010 <prvCheckTasksWaitingTermination+0x58>)
 8007fe8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007fea:	f000 ff17 	bl	8008e1c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007fee:	6878      	ldr	r0, [r7, #4]
 8007ff0:	f000 f810 	bl	8008014 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007ff4:	4b06      	ldr	r3, [pc, #24]	@ (8008010 <prvCheckTasksWaitingTermination+0x58>)
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d1e1      	bne.n	8007fc0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007ffc:	bf00      	nop
 8007ffe:	bf00      	nop
 8008000:	3708      	adds	r7, #8
 8008002:	46bd      	mov	sp, r7
 8008004:	bd80      	pop	{r7, pc}
 8008006:	bf00      	nop
 8008008:	20005ce0 	.word	0x20005ce0
 800800c:	20005d0c 	.word	0x20005d0c
 8008010:	20005cf4 	.word	0x20005cf4

08008014 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008014:	b580      	push	{r7, lr}
 8008016:	b084      	sub	sp, #16
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	3354      	adds	r3, #84	@ 0x54
 8008020:	4618      	mov	r0, r3
 8008022:	f00e fe7f 	bl	8016d24 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800802c:	2b00      	cmp	r3, #0
 800802e:	d108      	bne.n	8008042 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008034:	4618      	mov	r0, r3
 8008036:	f001 f8af 	bl	8009198 <vPortFree>
				vPortFree( pxTCB );
 800803a:	6878      	ldr	r0, [r7, #4]
 800803c:	f001 f8ac 	bl	8009198 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008040:	e019      	b.n	8008076 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8008048:	2b01      	cmp	r3, #1
 800804a:	d103      	bne.n	8008054 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800804c:	6878      	ldr	r0, [r7, #4]
 800804e:	f001 f8a3 	bl	8009198 <vPortFree>
	}
 8008052:	e010      	b.n	8008076 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800805a:	2b02      	cmp	r3, #2
 800805c:	d00b      	beq.n	8008076 <prvDeleteTCB+0x62>
	__asm volatile
 800805e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008062:	f383 8811 	msr	BASEPRI, r3
 8008066:	f3bf 8f6f 	isb	sy
 800806a:	f3bf 8f4f 	dsb	sy
 800806e:	60fb      	str	r3, [r7, #12]
}
 8008070:	bf00      	nop
 8008072:	bf00      	nop
 8008074:	e7fd      	b.n	8008072 <prvDeleteTCB+0x5e>
	}
 8008076:	bf00      	nop
 8008078:	3710      	adds	r7, #16
 800807a:	46bd      	mov	sp, r7
 800807c:	bd80      	pop	{r7, pc}
	...

08008080 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008080:	b480      	push	{r7}
 8008082:	b083      	sub	sp, #12
 8008084:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008086:	4b0c      	ldr	r3, [pc, #48]	@ (80080b8 <prvResetNextTaskUnblockTime+0x38>)
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	2b00      	cmp	r3, #0
 800808e:	d104      	bne.n	800809a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008090:	4b0a      	ldr	r3, [pc, #40]	@ (80080bc <prvResetNextTaskUnblockTime+0x3c>)
 8008092:	f04f 32ff 	mov.w	r2, #4294967295
 8008096:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008098:	e008      	b.n	80080ac <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800809a:	4b07      	ldr	r3, [pc, #28]	@ (80080b8 <prvResetNextTaskUnblockTime+0x38>)
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	68db      	ldr	r3, [r3, #12]
 80080a0:	68db      	ldr	r3, [r3, #12]
 80080a2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	685b      	ldr	r3, [r3, #4]
 80080a8:	4a04      	ldr	r2, [pc, #16]	@ (80080bc <prvResetNextTaskUnblockTime+0x3c>)
 80080aa:	6013      	str	r3, [r2, #0]
}
 80080ac:	bf00      	nop
 80080ae:	370c      	adds	r7, #12
 80080b0:	46bd      	mov	sp, r7
 80080b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b6:	4770      	bx	lr
 80080b8:	20005cc4 	.word	0x20005cc4
 80080bc:	20005d2c 	.word	0x20005d2c

080080c0 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 80080c0:	b480      	push	{r7}
 80080c2:	b083      	sub	sp, #12
 80080c4:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 80080c6:	4b05      	ldr	r3, [pc, #20]	@ (80080dc <xTaskGetCurrentTaskHandle+0x1c>)
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	607b      	str	r3, [r7, #4]

		return xReturn;
 80080cc:	687b      	ldr	r3, [r7, #4]
	}
 80080ce:	4618      	mov	r0, r3
 80080d0:	370c      	adds	r7, #12
 80080d2:	46bd      	mov	sp, r7
 80080d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d8:	4770      	bx	lr
 80080da:	bf00      	nop
 80080dc:	20005838 	.word	0x20005838

080080e0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80080e0:	b480      	push	{r7}
 80080e2:	b083      	sub	sp, #12
 80080e4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80080e6:	4b0b      	ldr	r3, [pc, #44]	@ (8008114 <xTaskGetSchedulerState+0x34>)
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d102      	bne.n	80080f4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80080ee:	2301      	movs	r3, #1
 80080f0:	607b      	str	r3, [r7, #4]
 80080f2:	e008      	b.n	8008106 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80080f4:	4b08      	ldr	r3, [pc, #32]	@ (8008118 <xTaskGetSchedulerState+0x38>)
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d102      	bne.n	8008102 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80080fc:	2302      	movs	r3, #2
 80080fe:	607b      	str	r3, [r7, #4]
 8008100:	e001      	b.n	8008106 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008102:	2300      	movs	r3, #0
 8008104:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008106:	687b      	ldr	r3, [r7, #4]
	}
 8008108:	4618      	mov	r0, r3
 800810a:	370c      	adds	r7, #12
 800810c:	46bd      	mov	sp, r7
 800810e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008112:	4770      	bx	lr
 8008114:	20005d18 	.word	0x20005d18
 8008118:	20005d34 	.word	0x20005d34

0800811c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800811c:	b580      	push	{r7, lr}
 800811e:	b084      	sub	sp, #16
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008128:	2300      	movs	r3, #0
 800812a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	2b00      	cmp	r3, #0
 8008130:	d051      	beq.n	80081d6 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008132:	68bb      	ldr	r3, [r7, #8]
 8008134:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008136:	4b2a      	ldr	r3, [pc, #168]	@ (80081e0 <xTaskPriorityInherit+0xc4>)
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800813c:	429a      	cmp	r2, r3
 800813e:	d241      	bcs.n	80081c4 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008140:	68bb      	ldr	r3, [r7, #8]
 8008142:	699b      	ldr	r3, [r3, #24]
 8008144:	2b00      	cmp	r3, #0
 8008146:	db06      	blt.n	8008156 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008148:	4b25      	ldr	r3, [pc, #148]	@ (80081e0 <xTaskPriorityInherit+0xc4>)
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800814e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008152:	68bb      	ldr	r3, [r7, #8]
 8008154:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008156:	68bb      	ldr	r3, [r7, #8]
 8008158:	6959      	ldr	r1, [r3, #20]
 800815a:	68bb      	ldr	r3, [r7, #8]
 800815c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800815e:	4613      	mov	r3, r2
 8008160:	009b      	lsls	r3, r3, #2
 8008162:	4413      	add	r3, r2
 8008164:	009b      	lsls	r3, r3, #2
 8008166:	4a1f      	ldr	r2, [pc, #124]	@ (80081e4 <xTaskPriorityInherit+0xc8>)
 8008168:	4413      	add	r3, r2
 800816a:	4299      	cmp	r1, r3
 800816c:	d122      	bne.n	80081b4 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800816e:	68bb      	ldr	r3, [r7, #8]
 8008170:	3304      	adds	r3, #4
 8008172:	4618      	mov	r0, r3
 8008174:	f7fd ffee 	bl	8006154 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008178:	4b19      	ldr	r3, [pc, #100]	@ (80081e0 <xTaskPriorityInherit+0xc4>)
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800817e:	68bb      	ldr	r3, [r7, #8]
 8008180:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008182:	68bb      	ldr	r3, [r7, #8]
 8008184:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008186:	4b18      	ldr	r3, [pc, #96]	@ (80081e8 <xTaskPriorityInherit+0xcc>)
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	429a      	cmp	r2, r3
 800818c:	d903      	bls.n	8008196 <xTaskPriorityInherit+0x7a>
 800818e:	68bb      	ldr	r3, [r7, #8]
 8008190:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008192:	4a15      	ldr	r2, [pc, #84]	@ (80081e8 <xTaskPriorityInherit+0xcc>)
 8008194:	6013      	str	r3, [r2, #0]
 8008196:	68bb      	ldr	r3, [r7, #8]
 8008198:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800819a:	4613      	mov	r3, r2
 800819c:	009b      	lsls	r3, r3, #2
 800819e:	4413      	add	r3, r2
 80081a0:	009b      	lsls	r3, r3, #2
 80081a2:	4a10      	ldr	r2, [pc, #64]	@ (80081e4 <xTaskPriorityInherit+0xc8>)
 80081a4:	441a      	add	r2, r3
 80081a6:	68bb      	ldr	r3, [r7, #8]
 80081a8:	3304      	adds	r3, #4
 80081aa:	4619      	mov	r1, r3
 80081ac:	4610      	mov	r0, r2
 80081ae:	f7fd ff74 	bl	800609a <vListInsertEnd>
 80081b2:	e004      	b.n	80081be <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80081b4:	4b0a      	ldr	r3, [pc, #40]	@ (80081e0 <xTaskPriorityInherit+0xc4>)
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80081ba:	68bb      	ldr	r3, [r7, #8]
 80081bc:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80081be:	2301      	movs	r3, #1
 80081c0:	60fb      	str	r3, [r7, #12]
 80081c2:	e008      	b.n	80081d6 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80081c4:	68bb      	ldr	r3, [r7, #8]
 80081c6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80081c8:	4b05      	ldr	r3, [pc, #20]	@ (80081e0 <xTaskPriorityInherit+0xc4>)
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081ce:	429a      	cmp	r2, r3
 80081d0:	d201      	bcs.n	80081d6 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80081d2:	2301      	movs	r3, #1
 80081d4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80081d6:	68fb      	ldr	r3, [r7, #12]
	}
 80081d8:	4618      	mov	r0, r3
 80081da:	3710      	adds	r7, #16
 80081dc:	46bd      	mov	sp, r7
 80081de:	bd80      	pop	{r7, pc}
 80081e0:	20005838 	.word	0x20005838
 80081e4:	2000583c 	.word	0x2000583c
 80081e8:	20005d14 	.word	0x20005d14

080081ec <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80081ec:	b580      	push	{r7, lr}
 80081ee:	b086      	sub	sp, #24
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80081f8:	2300      	movs	r3, #0
 80081fa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d058      	beq.n	80082b4 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008202:	4b2f      	ldr	r3, [pc, #188]	@ (80082c0 <xTaskPriorityDisinherit+0xd4>)
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	693a      	ldr	r2, [r7, #16]
 8008208:	429a      	cmp	r2, r3
 800820a:	d00b      	beq.n	8008224 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800820c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008210:	f383 8811 	msr	BASEPRI, r3
 8008214:	f3bf 8f6f 	isb	sy
 8008218:	f3bf 8f4f 	dsb	sy
 800821c:	60fb      	str	r3, [r7, #12]
}
 800821e:	bf00      	nop
 8008220:	bf00      	nop
 8008222:	e7fd      	b.n	8008220 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008224:	693b      	ldr	r3, [r7, #16]
 8008226:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008228:	2b00      	cmp	r3, #0
 800822a:	d10b      	bne.n	8008244 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800822c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008230:	f383 8811 	msr	BASEPRI, r3
 8008234:	f3bf 8f6f 	isb	sy
 8008238:	f3bf 8f4f 	dsb	sy
 800823c:	60bb      	str	r3, [r7, #8]
}
 800823e:	bf00      	nop
 8008240:	bf00      	nop
 8008242:	e7fd      	b.n	8008240 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8008244:	693b      	ldr	r3, [r7, #16]
 8008246:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008248:	1e5a      	subs	r2, r3, #1
 800824a:	693b      	ldr	r3, [r7, #16]
 800824c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800824e:	693b      	ldr	r3, [r7, #16]
 8008250:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008252:	693b      	ldr	r3, [r7, #16]
 8008254:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008256:	429a      	cmp	r2, r3
 8008258:	d02c      	beq.n	80082b4 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800825a:	693b      	ldr	r3, [r7, #16]
 800825c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800825e:	2b00      	cmp	r3, #0
 8008260:	d128      	bne.n	80082b4 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008262:	693b      	ldr	r3, [r7, #16]
 8008264:	3304      	adds	r3, #4
 8008266:	4618      	mov	r0, r3
 8008268:	f7fd ff74 	bl	8006154 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800826c:	693b      	ldr	r3, [r7, #16]
 800826e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008270:	693b      	ldr	r3, [r7, #16]
 8008272:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008274:	693b      	ldr	r3, [r7, #16]
 8008276:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008278:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800827c:	693b      	ldr	r3, [r7, #16]
 800827e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008280:	693b      	ldr	r3, [r7, #16]
 8008282:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008284:	4b0f      	ldr	r3, [pc, #60]	@ (80082c4 <xTaskPriorityDisinherit+0xd8>)
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	429a      	cmp	r2, r3
 800828a:	d903      	bls.n	8008294 <xTaskPriorityDisinherit+0xa8>
 800828c:	693b      	ldr	r3, [r7, #16]
 800828e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008290:	4a0c      	ldr	r2, [pc, #48]	@ (80082c4 <xTaskPriorityDisinherit+0xd8>)
 8008292:	6013      	str	r3, [r2, #0]
 8008294:	693b      	ldr	r3, [r7, #16]
 8008296:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008298:	4613      	mov	r3, r2
 800829a:	009b      	lsls	r3, r3, #2
 800829c:	4413      	add	r3, r2
 800829e:	009b      	lsls	r3, r3, #2
 80082a0:	4a09      	ldr	r2, [pc, #36]	@ (80082c8 <xTaskPriorityDisinherit+0xdc>)
 80082a2:	441a      	add	r2, r3
 80082a4:	693b      	ldr	r3, [r7, #16]
 80082a6:	3304      	adds	r3, #4
 80082a8:	4619      	mov	r1, r3
 80082aa:	4610      	mov	r0, r2
 80082ac:	f7fd fef5 	bl	800609a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80082b0:	2301      	movs	r3, #1
 80082b2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80082b4:	697b      	ldr	r3, [r7, #20]
	}
 80082b6:	4618      	mov	r0, r3
 80082b8:	3718      	adds	r7, #24
 80082ba:	46bd      	mov	sp, r7
 80082bc:	bd80      	pop	{r7, pc}
 80082be:	bf00      	nop
 80082c0:	20005838 	.word	0x20005838
 80082c4:	20005d14 	.word	0x20005d14
 80082c8:	2000583c 	.word	0x2000583c

080082cc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80082cc:	b580      	push	{r7, lr}
 80082ce:	b088      	sub	sp, #32
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	6078      	str	r0, [r7, #4]
 80082d4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80082da:	2301      	movs	r3, #1
 80082dc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d06c      	beq.n	80083be <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80082e4:	69bb      	ldr	r3, [r7, #24]
 80082e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d10b      	bne.n	8008304 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 80082ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082f0:	f383 8811 	msr	BASEPRI, r3
 80082f4:	f3bf 8f6f 	isb	sy
 80082f8:	f3bf 8f4f 	dsb	sy
 80082fc:	60fb      	str	r3, [r7, #12]
}
 80082fe:	bf00      	nop
 8008300:	bf00      	nop
 8008302:	e7fd      	b.n	8008300 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008304:	69bb      	ldr	r3, [r7, #24]
 8008306:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008308:	683a      	ldr	r2, [r7, #0]
 800830a:	429a      	cmp	r2, r3
 800830c:	d902      	bls.n	8008314 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800830e:	683b      	ldr	r3, [r7, #0]
 8008310:	61fb      	str	r3, [r7, #28]
 8008312:	e002      	b.n	800831a <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008314:	69bb      	ldr	r3, [r7, #24]
 8008316:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008318:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800831a:	69bb      	ldr	r3, [r7, #24]
 800831c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800831e:	69fa      	ldr	r2, [r7, #28]
 8008320:	429a      	cmp	r2, r3
 8008322:	d04c      	beq.n	80083be <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008324:	69bb      	ldr	r3, [r7, #24]
 8008326:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008328:	697a      	ldr	r2, [r7, #20]
 800832a:	429a      	cmp	r2, r3
 800832c:	d147      	bne.n	80083be <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800832e:	4b26      	ldr	r3, [pc, #152]	@ (80083c8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	69ba      	ldr	r2, [r7, #24]
 8008334:	429a      	cmp	r2, r3
 8008336:	d10b      	bne.n	8008350 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8008338:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800833c:	f383 8811 	msr	BASEPRI, r3
 8008340:	f3bf 8f6f 	isb	sy
 8008344:	f3bf 8f4f 	dsb	sy
 8008348:	60bb      	str	r3, [r7, #8]
}
 800834a:	bf00      	nop
 800834c:	bf00      	nop
 800834e:	e7fd      	b.n	800834c <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008350:	69bb      	ldr	r3, [r7, #24]
 8008352:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008354:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8008356:	69bb      	ldr	r3, [r7, #24]
 8008358:	69fa      	ldr	r2, [r7, #28]
 800835a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800835c:	69bb      	ldr	r3, [r7, #24]
 800835e:	699b      	ldr	r3, [r3, #24]
 8008360:	2b00      	cmp	r3, #0
 8008362:	db04      	blt.n	800836e <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008364:	69fb      	ldr	r3, [r7, #28]
 8008366:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800836a:	69bb      	ldr	r3, [r7, #24]
 800836c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800836e:	69bb      	ldr	r3, [r7, #24]
 8008370:	6959      	ldr	r1, [r3, #20]
 8008372:	693a      	ldr	r2, [r7, #16]
 8008374:	4613      	mov	r3, r2
 8008376:	009b      	lsls	r3, r3, #2
 8008378:	4413      	add	r3, r2
 800837a:	009b      	lsls	r3, r3, #2
 800837c:	4a13      	ldr	r2, [pc, #76]	@ (80083cc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800837e:	4413      	add	r3, r2
 8008380:	4299      	cmp	r1, r3
 8008382:	d11c      	bne.n	80083be <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008384:	69bb      	ldr	r3, [r7, #24]
 8008386:	3304      	adds	r3, #4
 8008388:	4618      	mov	r0, r3
 800838a:	f7fd fee3 	bl	8006154 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800838e:	69bb      	ldr	r3, [r7, #24]
 8008390:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008392:	4b0f      	ldr	r3, [pc, #60]	@ (80083d0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	429a      	cmp	r2, r3
 8008398:	d903      	bls.n	80083a2 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800839a:	69bb      	ldr	r3, [r7, #24]
 800839c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800839e:	4a0c      	ldr	r2, [pc, #48]	@ (80083d0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80083a0:	6013      	str	r3, [r2, #0]
 80083a2:	69bb      	ldr	r3, [r7, #24]
 80083a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80083a6:	4613      	mov	r3, r2
 80083a8:	009b      	lsls	r3, r3, #2
 80083aa:	4413      	add	r3, r2
 80083ac:	009b      	lsls	r3, r3, #2
 80083ae:	4a07      	ldr	r2, [pc, #28]	@ (80083cc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80083b0:	441a      	add	r2, r3
 80083b2:	69bb      	ldr	r3, [r7, #24]
 80083b4:	3304      	adds	r3, #4
 80083b6:	4619      	mov	r1, r3
 80083b8:	4610      	mov	r0, r2
 80083ba:	f7fd fe6e 	bl	800609a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80083be:	bf00      	nop
 80083c0:	3720      	adds	r7, #32
 80083c2:	46bd      	mov	sp, r7
 80083c4:	bd80      	pop	{r7, pc}
 80083c6:	bf00      	nop
 80083c8:	20005838 	.word	0x20005838
 80083cc:	2000583c 	.word	0x2000583c
 80083d0:	20005d14 	.word	0x20005d14

080083d4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80083d4:	b480      	push	{r7}
 80083d6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80083d8:	4b07      	ldr	r3, [pc, #28]	@ (80083f8 <pvTaskIncrementMutexHeldCount+0x24>)
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d004      	beq.n	80083ea <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80083e0:	4b05      	ldr	r3, [pc, #20]	@ (80083f8 <pvTaskIncrementMutexHeldCount+0x24>)
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80083e6:	3201      	adds	r2, #1
 80083e8:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 80083ea:	4b03      	ldr	r3, [pc, #12]	@ (80083f8 <pvTaskIncrementMutexHeldCount+0x24>)
 80083ec:	681b      	ldr	r3, [r3, #0]
	}
 80083ee:	4618      	mov	r0, r3
 80083f0:	46bd      	mov	sp, r7
 80083f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f6:	4770      	bx	lr
 80083f8:	20005838 	.word	0x20005838

080083fc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80083fc:	b580      	push	{r7, lr}
 80083fe:	b084      	sub	sp, #16
 8008400:	af00      	add	r7, sp, #0
 8008402:	6078      	str	r0, [r7, #4]
 8008404:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008406:	4b21      	ldr	r3, [pc, #132]	@ (800848c <prvAddCurrentTaskToDelayedList+0x90>)
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800840c:	4b20      	ldr	r3, [pc, #128]	@ (8008490 <prvAddCurrentTaskToDelayedList+0x94>)
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	3304      	adds	r3, #4
 8008412:	4618      	mov	r0, r3
 8008414:	f7fd fe9e 	bl	8006154 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800841e:	d10a      	bne.n	8008436 <prvAddCurrentTaskToDelayedList+0x3a>
 8008420:	683b      	ldr	r3, [r7, #0]
 8008422:	2b00      	cmp	r3, #0
 8008424:	d007      	beq.n	8008436 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008426:	4b1a      	ldr	r3, [pc, #104]	@ (8008490 <prvAddCurrentTaskToDelayedList+0x94>)
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	3304      	adds	r3, #4
 800842c:	4619      	mov	r1, r3
 800842e:	4819      	ldr	r0, [pc, #100]	@ (8008494 <prvAddCurrentTaskToDelayedList+0x98>)
 8008430:	f7fd fe33 	bl	800609a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008434:	e026      	b.n	8008484 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008436:	68fa      	ldr	r2, [r7, #12]
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	4413      	add	r3, r2
 800843c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800843e:	4b14      	ldr	r3, [pc, #80]	@ (8008490 <prvAddCurrentTaskToDelayedList+0x94>)
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	68ba      	ldr	r2, [r7, #8]
 8008444:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008446:	68ba      	ldr	r2, [r7, #8]
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	429a      	cmp	r2, r3
 800844c:	d209      	bcs.n	8008462 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800844e:	4b12      	ldr	r3, [pc, #72]	@ (8008498 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008450:	681a      	ldr	r2, [r3, #0]
 8008452:	4b0f      	ldr	r3, [pc, #60]	@ (8008490 <prvAddCurrentTaskToDelayedList+0x94>)
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	3304      	adds	r3, #4
 8008458:	4619      	mov	r1, r3
 800845a:	4610      	mov	r0, r2
 800845c:	f7fd fe41 	bl	80060e2 <vListInsert>
}
 8008460:	e010      	b.n	8008484 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008462:	4b0e      	ldr	r3, [pc, #56]	@ (800849c <prvAddCurrentTaskToDelayedList+0xa0>)
 8008464:	681a      	ldr	r2, [r3, #0]
 8008466:	4b0a      	ldr	r3, [pc, #40]	@ (8008490 <prvAddCurrentTaskToDelayedList+0x94>)
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	3304      	adds	r3, #4
 800846c:	4619      	mov	r1, r3
 800846e:	4610      	mov	r0, r2
 8008470:	f7fd fe37 	bl	80060e2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008474:	4b0a      	ldr	r3, [pc, #40]	@ (80084a0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	68ba      	ldr	r2, [r7, #8]
 800847a:	429a      	cmp	r2, r3
 800847c:	d202      	bcs.n	8008484 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800847e:	4a08      	ldr	r2, [pc, #32]	@ (80084a0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008480:	68bb      	ldr	r3, [r7, #8]
 8008482:	6013      	str	r3, [r2, #0]
}
 8008484:	bf00      	nop
 8008486:	3710      	adds	r7, #16
 8008488:	46bd      	mov	sp, r7
 800848a:	bd80      	pop	{r7, pc}
 800848c:	20005d10 	.word	0x20005d10
 8008490:	20005838 	.word	0x20005838
 8008494:	20005cf8 	.word	0x20005cf8
 8008498:	20005cc8 	.word	0x20005cc8
 800849c:	20005cc4 	.word	0x20005cc4
 80084a0:	20005d2c 	.word	0x20005d2c

080084a4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80084a4:	b580      	push	{r7, lr}
 80084a6:	b08a      	sub	sp, #40	@ 0x28
 80084a8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80084aa:	2300      	movs	r3, #0
 80084ac:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80084ae:	f000 fb13 	bl	8008ad8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80084b2:	4b1d      	ldr	r3, [pc, #116]	@ (8008528 <xTimerCreateTimerTask+0x84>)
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d021      	beq.n	80084fe <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80084ba:	2300      	movs	r3, #0
 80084bc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80084be:	2300      	movs	r3, #0
 80084c0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80084c2:	1d3a      	adds	r2, r7, #4
 80084c4:	f107 0108 	add.w	r1, r7, #8
 80084c8:	f107 030c 	add.w	r3, r7, #12
 80084cc:	4618      	mov	r0, r3
 80084ce:	f7fd fd9d 	bl	800600c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80084d2:	6879      	ldr	r1, [r7, #4]
 80084d4:	68bb      	ldr	r3, [r7, #8]
 80084d6:	68fa      	ldr	r2, [r7, #12]
 80084d8:	9202      	str	r2, [sp, #8]
 80084da:	9301      	str	r3, [sp, #4]
 80084dc:	2302      	movs	r3, #2
 80084de:	9300      	str	r3, [sp, #0]
 80084e0:	2300      	movs	r3, #0
 80084e2:	460a      	mov	r2, r1
 80084e4:	4911      	ldr	r1, [pc, #68]	@ (800852c <xTimerCreateTimerTask+0x88>)
 80084e6:	4812      	ldr	r0, [pc, #72]	@ (8008530 <xTimerCreateTimerTask+0x8c>)
 80084e8:	f7fe ff80 	bl	80073ec <xTaskCreateStatic>
 80084ec:	4603      	mov	r3, r0
 80084ee:	4a11      	ldr	r2, [pc, #68]	@ (8008534 <xTimerCreateTimerTask+0x90>)
 80084f0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80084f2:	4b10      	ldr	r3, [pc, #64]	@ (8008534 <xTimerCreateTimerTask+0x90>)
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d001      	beq.n	80084fe <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80084fa:	2301      	movs	r3, #1
 80084fc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80084fe:	697b      	ldr	r3, [r7, #20]
 8008500:	2b00      	cmp	r3, #0
 8008502:	d10b      	bne.n	800851c <xTimerCreateTimerTask+0x78>
	__asm volatile
 8008504:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008508:	f383 8811 	msr	BASEPRI, r3
 800850c:	f3bf 8f6f 	isb	sy
 8008510:	f3bf 8f4f 	dsb	sy
 8008514:	613b      	str	r3, [r7, #16]
}
 8008516:	bf00      	nop
 8008518:	bf00      	nop
 800851a:	e7fd      	b.n	8008518 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800851c:	697b      	ldr	r3, [r7, #20]
}
 800851e:	4618      	mov	r0, r3
 8008520:	3718      	adds	r7, #24
 8008522:	46bd      	mov	sp, r7
 8008524:	bd80      	pop	{r7, pc}
 8008526:	bf00      	nop
 8008528:	20005d68 	.word	0x20005d68
 800852c:	08017d58 	.word	0x08017d58
 8008530:	08008671 	.word	0x08008671
 8008534:	20005d6c 	.word	0x20005d6c

08008538 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008538:	b580      	push	{r7, lr}
 800853a:	b08a      	sub	sp, #40	@ 0x28
 800853c:	af00      	add	r7, sp, #0
 800853e:	60f8      	str	r0, [r7, #12]
 8008540:	60b9      	str	r1, [r7, #8]
 8008542:	607a      	str	r2, [r7, #4]
 8008544:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008546:	2300      	movs	r3, #0
 8008548:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	2b00      	cmp	r3, #0
 800854e:	d10b      	bne.n	8008568 <xTimerGenericCommand+0x30>
	__asm volatile
 8008550:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008554:	f383 8811 	msr	BASEPRI, r3
 8008558:	f3bf 8f6f 	isb	sy
 800855c:	f3bf 8f4f 	dsb	sy
 8008560:	623b      	str	r3, [r7, #32]
}
 8008562:	bf00      	nop
 8008564:	bf00      	nop
 8008566:	e7fd      	b.n	8008564 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008568:	4b19      	ldr	r3, [pc, #100]	@ (80085d0 <xTimerGenericCommand+0x98>)
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	2b00      	cmp	r3, #0
 800856e:	d02a      	beq.n	80085c6 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008570:	68bb      	ldr	r3, [r7, #8]
 8008572:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800857c:	68bb      	ldr	r3, [r7, #8]
 800857e:	2b05      	cmp	r3, #5
 8008580:	dc18      	bgt.n	80085b4 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008582:	f7ff fdad 	bl	80080e0 <xTaskGetSchedulerState>
 8008586:	4603      	mov	r3, r0
 8008588:	2b02      	cmp	r3, #2
 800858a:	d109      	bne.n	80085a0 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800858c:	4b10      	ldr	r3, [pc, #64]	@ (80085d0 <xTimerGenericCommand+0x98>)
 800858e:	6818      	ldr	r0, [r3, #0]
 8008590:	f107 0110 	add.w	r1, r7, #16
 8008594:	2300      	movs	r3, #0
 8008596:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008598:	f7fe f872 	bl	8006680 <xQueueGenericSend>
 800859c:	6278      	str	r0, [r7, #36]	@ 0x24
 800859e:	e012      	b.n	80085c6 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80085a0:	4b0b      	ldr	r3, [pc, #44]	@ (80085d0 <xTimerGenericCommand+0x98>)
 80085a2:	6818      	ldr	r0, [r3, #0]
 80085a4:	f107 0110 	add.w	r1, r7, #16
 80085a8:	2300      	movs	r3, #0
 80085aa:	2200      	movs	r2, #0
 80085ac:	f7fe f868 	bl	8006680 <xQueueGenericSend>
 80085b0:	6278      	str	r0, [r7, #36]	@ 0x24
 80085b2:	e008      	b.n	80085c6 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80085b4:	4b06      	ldr	r3, [pc, #24]	@ (80085d0 <xTimerGenericCommand+0x98>)
 80085b6:	6818      	ldr	r0, [r3, #0]
 80085b8:	f107 0110 	add.w	r1, r7, #16
 80085bc:	2300      	movs	r3, #0
 80085be:	683a      	ldr	r2, [r7, #0]
 80085c0:	f7fe f960 	bl	8006884 <xQueueGenericSendFromISR>
 80085c4:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80085c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80085c8:	4618      	mov	r0, r3
 80085ca:	3728      	adds	r7, #40	@ 0x28
 80085cc:	46bd      	mov	sp, r7
 80085ce:	bd80      	pop	{r7, pc}
 80085d0:	20005d68 	.word	0x20005d68

080085d4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80085d4:	b580      	push	{r7, lr}
 80085d6:	b088      	sub	sp, #32
 80085d8:	af02      	add	r7, sp, #8
 80085da:	6078      	str	r0, [r7, #4]
 80085dc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80085de:	4b23      	ldr	r3, [pc, #140]	@ (800866c <prvProcessExpiredTimer+0x98>)
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	68db      	ldr	r3, [r3, #12]
 80085e4:	68db      	ldr	r3, [r3, #12]
 80085e6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80085e8:	697b      	ldr	r3, [r7, #20]
 80085ea:	3304      	adds	r3, #4
 80085ec:	4618      	mov	r0, r3
 80085ee:	f7fd fdb1 	bl	8006154 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80085f2:	697b      	ldr	r3, [r7, #20]
 80085f4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80085f8:	f003 0304 	and.w	r3, r3, #4
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d023      	beq.n	8008648 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008600:	697b      	ldr	r3, [r7, #20]
 8008602:	699a      	ldr	r2, [r3, #24]
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	18d1      	adds	r1, r2, r3
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	683a      	ldr	r2, [r7, #0]
 800860c:	6978      	ldr	r0, [r7, #20]
 800860e:	f000 f8d5 	bl	80087bc <prvInsertTimerInActiveList>
 8008612:	4603      	mov	r3, r0
 8008614:	2b00      	cmp	r3, #0
 8008616:	d020      	beq.n	800865a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008618:	2300      	movs	r3, #0
 800861a:	9300      	str	r3, [sp, #0]
 800861c:	2300      	movs	r3, #0
 800861e:	687a      	ldr	r2, [r7, #4]
 8008620:	2100      	movs	r1, #0
 8008622:	6978      	ldr	r0, [r7, #20]
 8008624:	f7ff ff88 	bl	8008538 <xTimerGenericCommand>
 8008628:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800862a:	693b      	ldr	r3, [r7, #16]
 800862c:	2b00      	cmp	r3, #0
 800862e:	d114      	bne.n	800865a <prvProcessExpiredTimer+0x86>
	__asm volatile
 8008630:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008634:	f383 8811 	msr	BASEPRI, r3
 8008638:	f3bf 8f6f 	isb	sy
 800863c:	f3bf 8f4f 	dsb	sy
 8008640:	60fb      	str	r3, [r7, #12]
}
 8008642:	bf00      	nop
 8008644:	bf00      	nop
 8008646:	e7fd      	b.n	8008644 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008648:	697b      	ldr	r3, [r7, #20]
 800864a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800864e:	f023 0301 	bic.w	r3, r3, #1
 8008652:	b2da      	uxtb	r2, r3
 8008654:	697b      	ldr	r3, [r7, #20]
 8008656:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800865a:	697b      	ldr	r3, [r7, #20]
 800865c:	6a1b      	ldr	r3, [r3, #32]
 800865e:	6978      	ldr	r0, [r7, #20]
 8008660:	4798      	blx	r3
}
 8008662:	bf00      	nop
 8008664:	3718      	adds	r7, #24
 8008666:	46bd      	mov	sp, r7
 8008668:	bd80      	pop	{r7, pc}
 800866a:	bf00      	nop
 800866c:	20005d60 	.word	0x20005d60

08008670 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008670:	b580      	push	{r7, lr}
 8008672:	b084      	sub	sp, #16
 8008674:	af00      	add	r7, sp, #0
 8008676:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008678:	f107 0308 	add.w	r3, r7, #8
 800867c:	4618      	mov	r0, r3
 800867e:	f000 f859 	bl	8008734 <prvGetNextExpireTime>
 8008682:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008684:	68bb      	ldr	r3, [r7, #8]
 8008686:	4619      	mov	r1, r3
 8008688:	68f8      	ldr	r0, [r7, #12]
 800868a:	f000 f805 	bl	8008698 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800868e:	f000 f8d7 	bl	8008840 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008692:	bf00      	nop
 8008694:	e7f0      	b.n	8008678 <prvTimerTask+0x8>
	...

08008698 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008698:	b580      	push	{r7, lr}
 800869a:	b084      	sub	sp, #16
 800869c:	af00      	add	r7, sp, #0
 800869e:	6078      	str	r0, [r7, #4]
 80086a0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80086a2:	f7ff f907 	bl	80078b4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80086a6:	f107 0308 	add.w	r3, r7, #8
 80086aa:	4618      	mov	r0, r3
 80086ac:	f000 f866 	bl	800877c <prvSampleTimeNow>
 80086b0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80086b2:	68bb      	ldr	r3, [r7, #8]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d130      	bne.n	800871a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80086b8:	683b      	ldr	r3, [r7, #0]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d10a      	bne.n	80086d4 <prvProcessTimerOrBlockTask+0x3c>
 80086be:	687a      	ldr	r2, [r7, #4]
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	429a      	cmp	r2, r3
 80086c4:	d806      	bhi.n	80086d4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80086c6:	f7ff f903 	bl	80078d0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80086ca:	68f9      	ldr	r1, [r7, #12]
 80086cc:	6878      	ldr	r0, [r7, #4]
 80086ce:	f7ff ff81 	bl	80085d4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80086d2:	e024      	b.n	800871e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80086d4:	683b      	ldr	r3, [r7, #0]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d008      	beq.n	80086ec <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80086da:	4b13      	ldr	r3, [pc, #76]	@ (8008728 <prvProcessTimerOrBlockTask+0x90>)
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d101      	bne.n	80086e8 <prvProcessTimerOrBlockTask+0x50>
 80086e4:	2301      	movs	r3, #1
 80086e6:	e000      	b.n	80086ea <prvProcessTimerOrBlockTask+0x52>
 80086e8:	2300      	movs	r3, #0
 80086ea:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80086ec:	4b0f      	ldr	r3, [pc, #60]	@ (800872c <prvProcessTimerOrBlockTask+0x94>)
 80086ee:	6818      	ldr	r0, [r3, #0]
 80086f0:	687a      	ldr	r2, [r7, #4]
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	1ad3      	subs	r3, r2, r3
 80086f6:	683a      	ldr	r2, [r7, #0]
 80086f8:	4619      	mov	r1, r3
 80086fa:	f7fe fe43 	bl	8007384 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80086fe:	f7ff f8e7 	bl	80078d0 <xTaskResumeAll>
 8008702:	4603      	mov	r3, r0
 8008704:	2b00      	cmp	r3, #0
 8008706:	d10a      	bne.n	800871e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008708:	4b09      	ldr	r3, [pc, #36]	@ (8008730 <prvProcessTimerOrBlockTask+0x98>)
 800870a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800870e:	601a      	str	r2, [r3, #0]
 8008710:	f3bf 8f4f 	dsb	sy
 8008714:	f3bf 8f6f 	isb	sy
}
 8008718:	e001      	b.n	800871e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800871a:	f7ff f8d9 	bl	80078d0 <xTaskResumeAll>
}
 800871e:	bf00      	nop
 8008720:	3710      	adds	r7, #16
 8008722:	46bd      	mov	sp, r7
 8008724:	bd80      	pop	{r7, pc}
 8008726:	bf00      	nop
 8008728:	20005d64 	.word	0x20005d64
 800872c:	20005d68 	.word	0x20005d68
 8008730:	e000ed04 	.word	0xe000ed04

08008734 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008734:	b480      	push	{r7}
 8008736:	b085      	sub	sp, #20
 8008738:	af00      	add	r7, sp, #0
 800873a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800873c:	4b0e      	ldr	r3, [pc, #56]	@ (8008778 <prvGetNextExpireTime+0x44>)
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	2b00      	cmp	r3, #0
 8008744:	d101      	bne.n	800874a <prvGetNextExpireTime+0x16>
 8008746:	2201      	movs	r2, #1
 8008748:	e000      	b.n	800874c <prvGetNextExpireTime+0x18>
 800874a:	2200      	movs	r2, #0
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	2b00      	cmp	r3, #0
 8008756:	d105      	bne.n	8008764 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008758:	4b07      	ldr	r3, [pc, #28]	@ (8008778 <prvGetNextExpireTime+0x44>)
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	68db      	ldr	r3, [r3, #12]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	60fb      	str	r3, [r7, #12]
 8008762:	e001      	b.n	8008768 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008764:	2300      	movs	r3, #0
 8008766:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008768:	68fb      	ldr	r3, [r7, #12]
}
 800876a:	4618      	mov	r0, r3
 800876c:	3714      	adds	r7, #20
 800876e:	46bd      	mov	sp, r7
 8008770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008774:	4770      	bx	lr
 8008776:	bf00      	nop
 8008778:	20005d60 	.word	0x20005d60

0800877c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800877c:	b580      	push	{r7, lr}
 800877e:	b084      	sub	sp, #16
 8008780:	af00      	add	r7, sp, #0
 8008782:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008784:	f7ff f942 	bl	8007a0c <xTaskGetTickCount>
 8008788:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800878a:	4b0b      	ldr	r3, [pc, #44]	@ (80087b8 <prvSampleTimeNow+0x3c>)
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	68fa      	ldr	r2, [r7, #12]
 8008790:	429a      	cmp	r2, r3
 8008792:	d205      	bcs.n	80087a0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008794:	f000 f93a 	bl	8008a0c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	2201      	movs	r2, #1
 800879c:	601a      	str	r2, [r3, #0]
 800879e:	e002      	b.n	80087a6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	2200      	movs	r2, #0
 80087a4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80087a6:	4a04      	ldr	r2, [pc, #16]	@ (80087b8 <prvSampleTimeNow+0x3c>)
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80087ac:	68fb      	ldr	r3, [r7, #12]
}
 80087ae:	4618      	mov	r0, r3
 80087b0:	3710      	adds	r7, #16
 80087b2:	46bd      	mov	sp, r7
 80087b4:	bd80      	pop	{r7, pc}
 80087b6:	bf00      	nop
 80087b8:	20005d70 	.word	0x20005d70

080087bc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80087bc:	b580      	push	{r7, lr}
 80087be:	b086      	sub	sp, #24
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	60f8      	str	r0, [r7, #12]
 80087c4:	60b9      	str	r1, [r7, #8]
 80087c6:	607a      	str	r2, [r7, #4]
 80087c8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80087ca:	2300      	movs	r3, #0
 80087cc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	68ba      	ldr	r2, [r7, #8]
 80087d2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	68fa      	ldr	r2, [r7, #12]
 80087d8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80087da:	68ba      	ldr	r2, [r7, #8]
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	429a      	cmp	r2, r3
 80087e0:	d812      	bhi.n	8008808 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80087e2:	687a      	ldr	r2, [r7, #4]
 80087e4:	683b      	ldr	r3, [r7, #0]
 80087e6:	1ad2      	subs	r2, r2, r3
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	699b      	ldr	r3, [r3, #24]
 80087ec:	429a      	cmp	r2, r3
 80087ee:	d302      	bcc.n	80087f6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80087f0:	2301      	movs	r3, #1
 80087f2:	617b      	str	r3, [r7, #20]
 80087f4:	e01b      	b.n	800882e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80087f6:	4b10      	ldr	r3, [pc, #64]	@ (8008838 <prvInsertTimerInActiveList+0x7c>)
 80087f8:	681a      	ldr	r2, [r3, #0]
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	3304      	adds	r3, #4
 80087fe:	4619      	mov	r1, r3
 8008800:	4610      	mov	r0, r2
 8008802:	f7fd fc6e 	bl	80060e2 <vListInsert>
 8008806:	e012      	b.n	800882e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008808:	687a      	ldr	r2, [r7, #4]
 800880a:	683b      	ldr	r3, [r7, #0]
 800880c:	429a      	cmp	r2, r3
 800880e:	d206      	bcs.n	800881e <prvInsertTimerInActiveList+0x62>
 8008810:	68ba      	ldr	r2, [r7, #8]
 8008812:	683b      	ldr	r3, [r7, #0]
 8008814:	429a      	cmp	r2, r3
 8008816:	d302      	bcc.n	800881e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008818:	2301      	movs	r3, #1
 800881a:	617b      	str	r3, [r7, #20]
 800881c:	e007      	b.n	800882e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800881e:	4b07      	ldr	r3, [pc, #28]	@ (800883c <prvInsertTimerInActiveList+0x80>)
 8008820:	681a      	ldr	r2, [r3, #0]
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	3304      	adds	r3, #4
 8008826:	4619      	mov	r1, r3
 8008828:	4610      	mov	r0, r2
 800882a:	f7fd fc5a 	bl	80060e2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800882e:	697b      	ldr	r3, [r7, #20]
}
 8008830:	4618      	mov	r0, r3
 8008832:	3718      	adds	r7, #24
 8008834:	46bd      	mov	sp, r7
 8008836:	bd80      	pop	{r7, pc}
 8008838:	20005d64 	.word	0x20005d64
 800883c:	20005d60 	.word	0x20005d60

08008840 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008840:	b580      	push	{r7, lr}
 8008842:	b08e      	sub	sp, #56	@ 0x38
 8008844:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008846:	e0ce      	b.n	80089e6 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	2b00      	cmp	r3, #0
 800884c:	da19      	bge.n	8008882 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800884e:	1d3b      	adds	r3, r7, #4
 8008850:	3304      	adds	r3, #4
 8008852:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008854:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008856:	2b00      	cmp	r3, #0
 8008858:	d10b      	bne.n	8008872 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800885a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800885e:	f383 8811 	msr	BASEPRI, r3
 8008862:	f3bf 8f6f 	isb	sy
 8008866:	f3bf 8f4f 	dsb	sy
 800886a:	61fb      	str	r3, [r7, #28]
}
 800886c:	bf00      	nop
 800886e:	bf00      	nop
 8008870:	e7fd      	b.n	800886e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008872:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008878:	6850      	ldr	r0, [r2, #4]
 800887a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800887c:	6892      	ldr	r2, [r2, #8]
 800887e:	4611      	mov	r1, r2
 8008880:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	2b00      	cmp	r3, #0
 8008886:	f2c0 80ae 	blt.w	80089e6 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800888e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008890:	695b      	ldr	r3, [r3, #20]
 8008892:	2b00      	cmp	r3, #0
 8008894:	d004      	beq.n	80088a0 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008896:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008898:	3304      	adds	r3, #4
 800889a:	4618      	mov	r0, r3
 800889c:	f7fd fc5a 	bl	8006154 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80088a0:	463b      	mov	r3, r7
 80088a2:	4618      	mov	r0, r3
 80088a4:	f7ff ff6a 	bl	800877c <prvSampleTimeNow>
 80088a8:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	2b09      	cmp	r3, #9
 80088ae:	f200 8097 	bhi.w	80089e0 <prvProcessReceivedCommands+0x1a0>
 80088b2:	a201      	add	r2, pc, #4	@ (adr r2, 80088b8 <prvProcessReceivedCommands+0x78>)
 80088b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088b8:	080088e1 	.word	0x080088e1
 80088bc:	080088e1 	.word	0x080088e1
 80088c0:	080088e1 	.word	0x080088e1
 80088c4:	08008957 	.word	0x08008957
 80088c8:	0800896b 	.word	0x0800896b
 80088cc:	080089b7 	.word	0x080089b7
 80088d0:	080088e1 	.word	0x080088e1
 80088d4:	080088e1 	.word	0x080088e1
 80088d8:	08008957 	.word	0x08008957
 80088dc:	0800896b 	.word	0x0800896b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80088e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088e2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80088e6:	f043 0301 	orr.w	r3, r3, #1
 80088ea:	b2da      	uxtb	r2, r3
 80088ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088ee:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80088f2:	68ba      	ldr	r2, [r7, #8]
 80088f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088f6:	699b      	ldr	r3, [r3, #24]
 80088f8:	18d1      	adds	r1, r2, r3
 80088fa:	68bb      	ldr	r3, [r7, #8]
 80088fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80088fe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008900:	f7ff ff5c 	bl	80087bc <prvInsertTimerInActiveList>
 8008904:	4603      	mov	r3, r0
 8008906:	2b00      	cmp	r3, #0
 8008908:	d06c      	beq.n	80089e4 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800890a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800890c:	6a1b      	ldr	r3, [r3, #32]
 800890e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008910:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008912:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008914:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008918:	f003 0304 	and.w	r3, r3, #4
 800891c:	2b00      	cmp	r3, #0
 800891e:	d061      	beq.n	80089e4 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008920:	68ba      	ldr	r2, [r7, #8]
 8008922:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008924:	699b      	ldr	r3, [r3, #24]
 8008926:	441a      	add	r2, r3
 8008928:	2300      	movs	r3, #0
 800892a:	9300      	str	r3, [sp, #0]
 800892c:	2300      	movs	r3, #0
 800892e:	2100      	movs	r1, #0
 8008930:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008932:	f7ff fe01 	bl	8008538 <xTimerGenericCommand>
 8008936:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008938:	6a3b      	ldr	r3, [r7, #32]
 800893a:	2b00      	cmp	r3, #0
 800893c:	d152      	bne.n	80089e4 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800893e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008942:	f383 8811 	msr	BASEPRI, r3
 8008946:	f3bf 8f6f 	isb	sy
 800894a:	f3bf 8f4f 	dsb	sy
 800894e:	61bb      	str	r3, [r7, #24]
}
 8008950:	bf00      	nop
 8008952:	bf00      	nop
 8008954:	e7fd      	b.n	8008952 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008956:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008958:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800895c:	f023 0301 	bic.w	r3, r3, #1
 8008960:	b2da      	uxtb	r2, r3
 8008962:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008964:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008968:	e03d      	b.n	80089e6 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800896a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800896c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008970:	f043 0301 	orr.w	r3, r3, #1
 8008974:	b2da      	uxtb	r2, r3
 8008976:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008978:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800897c:	68ba      	ldr	r2, [r7, #8]
 800897e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008980:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008982:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008984:	699b      	ldr	r3, [r3, #24]
 8008986:	2b00      	cmp	r3, #0
 8008988:	d10b      	bne.n	80089a2 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800898a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800898e:	f383 8811 	msr	BASEPRI, r3
 8008992:	f3bf 8f6f 	isb	sy
 8008996:	f3bf 8f4f 	dsb	sy
 800899a:	617b      	str	r3, [r7, #20]
}
 800899c:	bf00      	nop
 800899e:	bf00      	nop
 80089a0:	e7fd      	b.n	800899e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80089a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089a4:	699a      	ldr	r2, [r3, #24]
 80089a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089a8:	18d1      	adds	r1, r2, r3
 80089aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80089ae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80089b0:	f7ff ff04 	bl	80087bc <prvInsertTimerInActiveList>
					break;
 80089b4:	e017      	b.n	80089e6 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80089b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089b8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80089bc:	f003 0302 	and.w	r3, r3, #2
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d103      	bne.n	80089cc <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80089c4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80089c6:	f000 fbe7 	bl	8009198 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80089ca:	e00c      	b.n	80089e6 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80089cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089ce:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80089d2:	f023 0301 	bic.w	r3, r3, #1
 80089d6:	b2da      	uxtb	r2, r3
 80089d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089da:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80089de:	e002      	b.n	80089e6 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80089e0:	bf00      	nop
 80089e2:	e000      	b.n	80089e6 <prvProcessReceivedCommands+0x1a6>
					break;
 80089e4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80089e6:	4b08      	ldr	r3, [pc, #32]	@ (8008a08 <prvProcessReceivedCommands+0x1c8>)
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	1d39      	adds	r1, r7, #4
 80089ec:	2200      	movs	r2, #0
 80089ee:	4618      	mov	r0, r3
 80089f0:	f7fe f876 	bl	8006ae0 <xQueueReceive>
 80089f4:	4603      	mov	r3, r0
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	f47f af26 	bne.w	8008848 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80089fc:	bf00      	nop
 80089fe:	bf00      	nop
 8008a00:	3730      	adds	r7, #48	@ 0x30
 8008a02:	46bd      	mov	sp, r7
 8008a04:	bd80      	pop	{r7, pc}
 8008a06:	bf00      	nop
 8008a08:	20005d68 	.word	0x20005d68

08008a0c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	b088      	sub	sp, #32
 8008a10:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008a12:	e049      	b.n	8008aa8 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008a14:	4b2e      	ldr	r3, [pc, #184]	@ (8008ad0 <prvSwitchTimerLists+0xc4>)
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	68db      	ldr	r3, [r3, #12]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a1e:	4b2c      	ldr	r3, [pc, #176]	@ (8008ad0 <prvSwitchTimerLists+0xc4>)
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	68db      	ldr	r3, [r3, #12]
 8008a24:	68db      	ldr	r3, [r3, #12]
 8008a26:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	3304      	adds	r3, #4
 8008a2c:	4618      	mov	r0, r3
 8008a2e:	f7fd fb91 	bl	8006154 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	6a1b      	ldr	r3, [r3, #32]
 8008a36:	68f8      	ldr	r0, [r7, #12]
 8008a38:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008a40:	f003 0304 	and.w	r3, r3, #4
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d02f      	beq.n	8008aa8 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	699b      	ldr	r3, [r3, #24]
 8008a4c:	693a      	ldr	r2, [r7, #16]
 8008a4e:	4413      	add	r3, r2
 8008a50:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008a52:	68ba      	ldr	r2, [r7, #8]
 8008a54:	693b      	ldr	r3, [r7, #16]
 8008a56:	429a      	cmp	r2, r3
 8008a58:	d90e      	bls.n	8008a78 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	68ba      	ldr	r2, [r7, #8]
 8008a5e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	68fa      	ldr	r2, [r7, #12]
 8008a64:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008a66:	4b1a      	ldr	r3, [pc, #104]	@ (8008ad0 <prvSwitchTimerLists+0xc4>)
 8008a68:	681a      	ldr	r2, [r3, #0]
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	3304      	adds	r3, #4
 8008a6e:	4619      	mov	r1, r3
 8008a70:	4610      	mov	r0, r2
 8008a72:	f7fd fb36 	bl	80060e2 <vListInsert>
 8008a76:	e017      	b.n	8008aa8 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008a78:	2300      	movs	r3, #0
 8008a7a:	9300      	str	r3, [sp, #0]
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	693a      	ldr	r2, [r7, #16]
 8008a80:	2100      	movs	r1, #0
 8008a82:	68f8      	ldr	r0, [r7, #12]
 8008a84:	f7ff fd58 	bl	8008538 <xTimerGenericCommand>
 8008a88:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d10b      	bne.n	8008aa8 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8008a90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a94:	f383 8811 	msr	BASEPRI, r3
 8008a98:	f3bf 8f6f 	isb	sy
 8008a9c:	f3bf 8f4f 	dsb	sy
 8008aa0:	603b      	str	r3, [r7, #0]
}
 8008aa2:	bf00      	nop
 8008aa4:	bf00      	nop
 8008aa6:	e7fd      	b.n	8008aa4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008aa8:	4b09      	ldr	r3, [pc, #36]	@ (8008ad0 <prvSwitchTimerLists+0xc4>)
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d1b0      	bne.n	8008a14 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008ab2:	4b07      	ldr	r3, [pc, #28]	@ (8008ad0 <prvSwitchTimerLists+0xc4>)
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008ab8:	4b06      	ldr	r3, [pc, #24]	@ (8008ad4 <prvSwitchTimerLists+0xc8>)
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	4a04      	ldr	r2, [pc, #16]	@ (8008ad0 <prvSwitchTimerLists+0xc4>)
 8008abe:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008ac0:	4a04      	ldr	r2, [pc, #16]	@ (8008ad4 <prvSwitchTimerLists+0xc8>)
 8008ac2:	697b      	ldr	r3, [r7, #20]
 8008ac4:	6013      	str	r3, [r2, #0]
}
 8008ac6:	bf00      	nop
 8008ac8:	3718      	adds	r7, #24
 8008aca:	46bd      	mov	sp, r7
 8008acc:	bd80      	pop	{r7, pc}
 8008ace:	bf00      	nop
 8008ad0:	20005d60 	.word	0x20005d60
 8008ad4:	20005d64 	.word	0x20005d64

08008ad8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008ad8:	b580      	push	{r7, lr}
 8008ada:	b082      	sub	sp, #8
 8008adc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008ade:	f000 f96b 	bl	8008db8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008ae2:	4b15      	ldr	r3, [pc, #84]	@ (8008b38 <prvCheckForValidListAndQueue+0x60>)
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d120      	bne.n	8008b2c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008aea:	4814      	ldr	r0, [pc, #80]	@ (8008b3c <prvCheckForValidListAndQueue+0x64>)
 8008aec:	f7fd faa8 	bl	8006040 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008af0:	4813      	ldr	r0, [pc, #76]	@ (8008b40 <prvCheckForValidListAndQueue+0x68>)
 8008af2:	f7fd faa5 	bl	8006040 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008af6:	4b13      	ldr	r3, [pc, #76]	@ (8008b44 <prvCheckForValidListAndQueue+0x6c>)
 8008af8:	4a10      	ldr	r2, [pc, #64]	@ (8008b3c <prvCheckForValidListAndQueue+0x64>)
 8008afa:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008afc:	4b12      	ldr	r3, [pc, #72]	@ (8008b48 <prvCheckForValidListAndQueue+0x70>)
 8008afe:	4a10      	ldr	r2, [pc, #64]	@ (8008b40 <prvCheckForValidListAndQueue+0x68>)
 8008b00:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008b02:	2300      	movs	r3, #0
 8008b04:	9300      	str	r3, [sp, #0]
 8008b06:	4b11      	ldr	r3, [pc, #68]	@ (8008b4c <prvCheckForValidListAndQueue+0x74>)
 8008b08:	4a11      	ldr	r2, [pc, #68]	@ (8008b50 <prvCheckForValidListAndQueue+0x78>)
 8008b0a:	2110      	movs	r1, #16
 8008b0c:	200a      	movs	r0, #10
 8008b0e:	f7fd fbb5 	bl	800627c <xQueueGenericCreateStatic>
 8008b12:	4603      	mov	r3, r0
 8008b14:	4a08      	ldr	r2, [pc, #32]	@ (8008b38 <prvCheckForValidListAndQueue+0x60>)
 8008b16:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008b18:	4b07      	ldr	r3, [pc, #28]	@ (8008b38 <prvCheckForValidListAndQueue+0x60>)
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d005      	beq.n	8008b2c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008b20:	4b05      	ldr	r3, [pc, #20]	@ (8008b38 <prvCheckForValidListAndQueue+0x60>)
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	490b      	ldr	r1, [pc, #44]	@ (8008b54 <prvCheckForValidListAndQueue+0x7c>)
 8008b26:	4618      	mov	r0, r3
 8008b28:	f7fe fbd8 	bl	80072dc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008b2c:	f000 f976 	bl	8008e1c <vPortExitCritical>
}
 8008b30:	bf00      	nop
 8008b32:	46bd      	mov	sp, r7
 8008b34:	bd80      	pop	{r7, pc}
 8008b36:	bf00      	nop
 8008b38:	20005d68 	.word	0x20005d68
 8008b3c:	20005d38 	.word	0x20005d38
 8008b40:	20005d4c 	.word	0x20005d4c
 8008b44:	20005d60 	.word	0x20005d60
 8008b48:	20005d64 	.word	0x20005d64
 8008b4c:	20005e14 	.word	0x20005e14
 8008b50:	20005d74 	.word	0x20005d74
 8008b54:	08017d60 	.word	0x08017d60

08008b58 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008b58:	b480      	push	{r7}
 8008b5a:	b085      	sub	sp, #20
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	60f8      	str	r0, [r7, #12]
 8008b60:	60b9      	str	r1, [r7, #8]
 8008b62:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	3b04      	subs	r3, #4
 8008b68:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8008b70:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	3b04      	subs	r3, #4
 8008b76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008b78:	68bb      	ldr	r3, [r7, #8]
 8008b7a:	f023 0201 	bic.w	r2, r3, #1
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	3b04      	subs	r3, #4
 8008b86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008b88:	4a0c      	ldr	r2, [pc, #48]	@ (8008bbc <pxPortInitialiseStack+0x64>)
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	3b14      	subs	r3, #20
 8008b92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008b94:	687a      	ldr	r2, [r7, #4]
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	3b04      	subs	r3, #4
 8008b9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	f06f 0202 	mvn.w	r2, #2
 8008ba6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	3b20      	subs	r3, #32
 8008bac:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008bae:	68fb      	ldr	r3, [r7, #12]
}
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	3714      	adds	r7, #20
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bba:	4770      	bx	lr
 8008bbc:	08008bc1 	.word	0x08008bc1

08008bc0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008bc0:	b480      	push	{r7}
 8008bc2:	b085      	sub	sp, #20
 8008bc4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008bca:	4b13      	ldr	r3, [pc, #76]	@ (8008c18 <prvTaskExitError+0x58>)
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bd2:	d00b      	beq.n	8008bec <prvTaskExitError+0x2c>
	__asm volatile
 8008bd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bd8:	f383 8811 	msr	BASEPRI, r3
 8008bdc:	f3bf 8f6f 	isb	sy
 8008be0:	f3bf 8f4f 	dsb	sy
 8008be4:	60fb      	str	r3, [r7, #12]
}
 8008be6:	bf00      	nop
 8008be8:	bf00      	nop
 8008bea:	e7fd      	b.n	8008be8 <prvTaskExitError+0x28>
	__asm volatile
 8008bec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bf0:	f383 8811 	msr	BASEPRI, r3
 8008bf4:	f3bf 8f6f 	isb	sy
 8008bf8:	f3bf 8f4f 	dsb	sy
 8008bfc:	60bb      	str	r3, [r7, #8]
}
 8008bfe:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008c00:	bf00      	nop
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d0fc      	beq.n	8008c02 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008c08:	bf00      	nop
 8008c0a:	bf00      	nop
 8008c0c:	3714      	adds	r7, #20
 8008c0e:	46bd      	mov	sp, r7
 8008c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c14:	4770      	bx	lr
 8008c16:	bf00      	nop
 8008c18:	20000120 	.word	0x20000120
 8008c1c:	00000000 	.word	0x00000000

08008c20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008c20:	4b07      	ldr	r3, [pc, #28]	@ (8008c40 <pxCurrentTCBConst2>)
 8008c22:	6819      	ldr	r1, [r3, #0]
 8008c24:	6808      	ldr	r0, [r1, #0]
 8008c26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c2a:	f380 8809 	msr	PSP, r0
 8008c2e:	f3bf 8f6f 	isb	sy
 8008c32:	f04f 0000 	mov.w	r0, #0
 8008c36:	f380 8811 	msr	BASEPRI, r0
 8008c3a:	4770      	bx	lr
 8008c3c:	f3af 8000 	nop.w

08008c40 <pxCurrentTCBConst2>:
 8008c40:	20005838 	.word	0x20005838
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008c44:	bf00      	nop
 8008c46:	bf00      	nop

08008c48 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008c48:	4808      	ldr	r0, [pc, #32]	@ (8008c6c <prvPortStartFirstTask+0x24>)
 8008c4a:	6800      	ldr	r0, [r0, #0]
 8008c4c:	6800      	ldr	r0, [r0, #0]
 8008c4e:	f380 8808 	msr	MSP, r0
 8008c52:	f04f 0000 	mov.w	r0, #0
 8008c56:	f380 8814 	msr	CONTROL, r0
 8008c5a:	b662      	cpsie	i
 8008c5c:	b661      	cpsie	f
 8008c5e:	f3bf 8f4f 	dsb	sy
 8008c62:	f3bf 8f6f 	isb	sy
 8008c66:	df00      	svc	0
 8008c68:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008c6a:	bf00      	nop
 8008c6c:	e000ed08 	.word	0xe000ed08

08008c70 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008c70:	b580      	push	{r7, lr}
 8008c72:	b086      	sub	sp, #24
 8008c74:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008c76:	4b47      	ldr	r3, [pc, #284]	@ (8008d94 <xPortStartScheduler+0x124>)
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	4a47      	ldr	r2, [pc, #284]	@ (8008d98 <xPortStartScheduler+0x128>)
 8008c7c:	4293      	cmp	r3, r2
 8008c7e:	d10b      	bne.n	8008c98 <xPortStartScheduler+0x28>
	__asm volatile
 8008c80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c84:	f383 8811 	msr	BASEPRI, r3
 8008c88:	f3bf 8f6f 	isb	sy
 8008c8c:	f3bf 8f4f 	dsb	sy
 8008c90:	613b      	str	r3, [r7, #16]
}
 8008c92:	bf00      	nop
 8008c94:	bf00      	nop
 8008c96:	e7fd      	b.n	8008c94 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008c98:	4b3e      	ldr	r3, [pc, #248]	@ (8008d94 <xPortStartScheduler+0x124>)
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	4a3f      	ldr	r2, [pc, #252]	@ (8008d9c <xPortStartScheduler+0x12c>)
 8008c9e:	4293      	cmp	r3, r2
 8008ca0:	d10b      	bne.n	8008cba <xPortStartScheduler+0x4a>
	__asm volatile
 8008ca2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ca6:	f383 8811 	msr	BASEPRI, r3
 8008caa:	f3bf 8f6f 	isb	sy
 8008cae:	f3bf 8f4f 	dsb	sy
 8008cb2:	60fb      	str	r3, [r7, #12]
}
 8008cb4:	bf00      	nop
 8008cb6:	bf00      	nop
 8008cb8:	e7fd      	b.n	8008cb6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008cba:	4b39      	ldr	r3, [pc, #228]	@ (8008da0 <xPortStartScheduler+0x130>)
 8008cbc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008cbe:	697b      	ldr	r3, [r7, #20]
 8008cc0:	781b      	ldrb	r3, [r3, #0]
 8008cc2:	b2db      	uxtb	r3, r3
 8008cc4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008cc6:	697b      	ldr	r3, [r7, #20]
 8008cc8:	22ff      	movs	r2, #255	@ 0xff
 8008cca:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008ccc:	697b      	ldr	r3, [r7, #20]
 8008cce:	781b      	ldrb	r3, [r3, #0]
 8008cd0:	b2db      	uxtb	r3, r3
 8008cd2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008cd4:	78fb      	ldrb	r3, [r7, #3]
 8008cd6:	b2db      	uxtb	r3, r3
 8008cd8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8008cdc:	b2da      	uxtb	r2, r3
 8008cde:	4b31      	ldr	r3, [pc, #196]	@ (8008da4 <xPortStartScheduler+0x134>)
 8008ce0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008ce2:	4b31      	ldr	r3, [pc, #196]	@ (8008da8 <xPortStartScheduler+0x138>)
 8008ce4:	2207      	movs	r2, #7
 8008ce6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008ce8:	e009      	b.n	8008cfe <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8008cea:	4b2f      	ldr	r3, [pc, #188]	@ (8008da8 <xPortStartScheduler+0x138>)
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	3b01      	subs	r3, #1
 8008cf0:	4a2d      	ldr	r2, [pc, #180]	@ (8008da8 <xPortStartScheduler+0x138>)
 8008cf2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008cf4:	78fb      	ldrb	r3, [r7, #3]
 8008cf6:	b2db      	uxtb	r3, r3
 8008cf8:	005b      	lsls	r3, r3, #1
 8008cfa:	b2db      	uxtb	r3, r3
 8008cfc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008cfe:	78fb      	ldrb	r3, [r7, #3]
 8008d00:	b2db      	uxtb	r3, r3
 8008d02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008d06:	2b80      	cmp	r3, #128	@ 0x80
 8008d08:	d0ef      	beq.n	8008cea <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008d0a:	4b27      	ldr	r3, [pc, #156]	@ (8008da8 <xPortStartScheduler+0x138>)
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	f1c3 0307 	rsb	r3, r3, #7
 8008d12:	2b04      	cmp	r3, #4
 8008d14:	d00b      	beq.n	8008d2e <xPortStartScheduler+0xbe>
	__asm volatile
 8008d16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d1a:	f383 8811 	msr	BASEPRI, r3
 8008d1e:	f3bf 8f6f 	isb	sy
 8008d22:	f3bf 8f4f 	dsb	sy
 8008d26:	60bb      	str	r3, [r7, #8]
}
 8008d28:	bf00      	nop
 8008d2a:	bf00      	nop
 8008d2c:	e7fd      	b.n	8008d2a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008d2e:	4b1e      	ldr	r3, [pc, #120]	@ (8008da8 <xPortStartScheduler+0x138>)
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	021b      	lsls	r3, r3, #8
 8008d34:	4a1c      	ldr	r2, [pc, #112]	@ (8008da8 <xPortStartScheduler+0x138>)
 8008d36:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008d38:	4b1b      	ldr	r3, [pc, #108]	@ (8008da8 <xPortStartScheduler+0x138>)
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008d40:	4a19      	ldr	r2, [pc, #100]	@ (8008da8 <xPortStartScheduler+0x138>)
 8008d42:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	b2da      	uxtb	r2, r3
 8008d48:	697b      	ldr	r3, [r7, #20]
 8008d4a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008d4c:	4b17      	ldr	r3, [pc, #92]	@ (8008dac <xPortStartScheduler+0x13c>)
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	4a16      	ldr	r2, [pc, #88]	@ (8008dac <xPortStartScheduler+0x13c>)
 8008d52:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008d56:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008d58:	4b14      	ldr	r3, [pc, #80]	@ (8008dac <xPortStartScheduler+0x13c>)
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	4a13      	ldr	r2, [pc, #76]	@ (8008dac <xPortStartScheduler+0x13c>)
 8008d5e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008d62:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008d64:	f000 f8da 	bl	8008f1c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008d68:	4b11      	ldr	r3, [pc, #68]	@ (8008db0 <xPortStartScheduler+0x140>)
 8008d6a:	2200      	movs	r2, #0
 8008d6c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008d6e:	f000 f8f9 	bl	8008f64 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008d72:	4b10      	ldr	r3, [pc, #64]	@ (8008db4 <xPortStartScheduler+0x144>)
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	4a0f      	ldr	r2, [pc, #60]	@ (8008db4 <xPortStartScheduler+0x144>)
 8008d78:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8008d7c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008d7e:	f7ff ff63 	bl	8008c48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008d82:	f7fe ff1f 	bl	8007bc4 <vTaskSwitchContext>
	prvTaskExitError();
 8008d86:	f7ff ff1b 	bl	8008bc0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008d8a:	2300      	movs	r3, #0
}
 8008d8c:	4618      	mov	r0, r3
 8008d8e:	3718      	adds	r7, #24
 8008d90:	46bd      	mov	sp, r7
 8008d92:	bd80      	pop	{r7, pc}
 8008d94:	e000ed00 	.word	0xe000ed00
 8008d98:	410fc271 	.word	0x410fc271
 8008d9c:	410fc270 	.word	0x410fc270
 8008da0:	e000e400 	.word	0xe000e400
 8008da4:	20005e64 	.word	0x20005e64
 8008da8:	20005e68 	.word	0x20005e68
 8008dac:	e000ed20 	.word	0xe000ed20
 8008db0:	20000120 	.word	0x20000120
 8008db4:	e000ef34 	.word	0xe000ef34

08008db8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008db8:	b480      	push	{r7}
 8008dba:	b083      	sub	sp, #12
 8008dbc:	af00      	add	r7, sp, #0
	__asm volatile
 8008dbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008dc2:	f383 8811 	msr	BASEPRI, r3
 8008dc6:	f3bf 8f6f 	isb	sy
 8008dca:	f3bf 8f4f 	dsb	sy
 8008dce:	607b      	str	r3, [r7, #4]
}
 8008dd0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008dd2:	4b10      	ldr	r3, [pc, #64]	@ (8008e14 <vPortEnterCritical+0x5c>)
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	3301      	adds	r3, #1
 8008dd8:	4a0e      	ldr	r2, [pc, #56]	@ (8008e14 <vPortEnterCritical+0x5c>)
 8008dda:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008ddc:	4b0d      	ldr	r3, [pc, #52]	@ (8008e14 <vPortEnterCritical+0x5c>)
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	2b01      	cmp	r3, #1
 8008de2:	d110      	bne.n	8008e06 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008de4:	4b0c      	ldr	r3, [pc, #48]	@ (8008e18 <vPortEnterCritical+0x60>)
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	b2db      	uxtb	r3, r3
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d00b      	beq.n	8008e06 <vPortEnterCritical+0x4e>
	__asm volatile
 8008dee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008df2:	f383 8811 	msr	BASEPRI, r3
 8008df6:	f3bf 8f6f 	isb	sy
 8008dfa:	f3bf 8f4f 	dsb	sy
 8008dfe:	603b      	str	r3, [r7, #0]
}
 8008e00:	bf00      	nop
 8008e02:	bf00      	nop
 8008e04:	e7fd      	b.n	8008e02 <vPortEnterCritical+0x4a>
	}
}
 8008e06:	bf00      	nop
 8008e08:	370c      	adds	r7, #12
 8008e0a:	46bd      	mov	sp, r7
 8008e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e10:	4770      	bx	lr
 8008e12:	bf00      	nop
 8008e14:	20000120 	.word	0x20000120
 8008e18:	e000ed04 	.word	0xe000ed04

08008e1c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008e1c:	b480      	push	{r7}
 8008e1e:	b083      	sub	sp, #12
 8008e20:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008e22:	4b12      	ldr	r3, [pc, #72]	@ (8008e6c <vPortExitCritical+0x50>)
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d10b      	bne.n	8008e42 <vPortExitCritical+0x26>
	__asm volatile
 8008e2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e2e:	f383 8811 	msr	BASEPRI, r3
 8008e32:	f3bf 8f6f 	isb	sy
 8008e36:	f3bf 8f4f 	dsb	sy
 8008e3a:	607b      	str	r3, [r7, #4]
}
 8008e3c:	bf00      	nop
 8008e3e:	bf00      	nop
 8008e40:	e7fd      	b.n	8008e3e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008e42:	4b0a      	ldr	r3, [pc, #40]	@ (8008e6c <vPortExitCritical+0x50>)
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	3b01      	subs	r3, #1
 8008e48:	4a08      	ldr	r2, [pc, #32]	@ (8008e6c <vPortExitCritical+0x50>)
 8008e4a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008e4c:	4b07      	ldr	r3, [pc, #28]	@ (8008e6c <vPortExitCritical+0x50>)
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d105      	bne.n	8008e60 <vPortExitCritical+0x44>
 8008e54:	2300      	movs	r3, #0
 8008e56:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008e58:	683b      	ldr	r3, [r7, #0]
 8008e5a:	f383 8811 	msr	BASEPRI, r3
}
 8008e5e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008e60:	bf00      	nop
 8008e62:	370c      	adds	r7, #12
 8008e64:	46bd      	mov	sp, r7
 8008e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e6a:	4770      	bx	lr
 8008e6c:	20000120 	.word	0x20000120

08008e70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008e70:	f3ef 8009 	mrs	r0, PSP
 8008e74:	f3bf 8f6f 	isb	sy
 8008e78:	4b15      	ldr	r3, [pc, #84]	@ (8008ed0 <pxCurrentTCBConst>)
 8008e7a:	681a      	ldr	r2, [r3, #0]
 8008e7c:	f01e 0f10 	tst.w	lr, #16
 8008e80:	bf08      	it	eq
 8008e82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008e86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e8a:	6010      	str	r0, [r2, #0]
 8008e8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008e90:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008e94:	f380 8811 	msr	BASEPRI, r0
 8008e98:	f3bf 8f4f 	dsb	sy
 8008e9c:	f3bf 8f6f 	isb	sy
 8008ea0:	f7fe fe90 	bl	8007bc4 <vTaskSwitchContext>
 8008ea4:	f04f 0000 	mov.w	r0, #0
 8008ea8:	f380 8811 	msr	BASEPRI, r0
 8008eac:	bc09      	pop	{r0, r3}
 8008eae:	6819      	ldr	r1, [r3, #0]
 8008eb0:	6808      	ldr	r0, [r1, #0]
 8008eb2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008eb6:	f01e 0f10 	tst.w	lr, #16
 8008eba:	bf08      	it	eq
 8008ebc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008ec0:	f380 8809 	msr	PSP, r0
 8008ec4:	f3bf 8f6f 	isb	sy
 8008ec8:	4770      	bx	lr
 8008eca:	bf00      	nop
 8008ecc:	f3af 8000 	nop.w

08008ed0 <pxCurrentTCBConst>:
 8008ed0:	20005838 	.word	0x20005838
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008ed4:	bf00      	nop
 8008ed6:	bf00      	nop

08008ed8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008ed8:	b580      	push	{r7, lr}
 8008eda:	b082      	sub	sp, #8
 8008edc:	af00      	add	r7, sp, #0
	__asm volatile
 8008ede:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ee2:	f383 8811 	msr	BASEPRI, r3
 8008ee6:	f3bf 8f6f 	isb	sy
 8008eea:	f3bf 8f4f 	dsb	sy
 8008eee:	607b      	str	r3, [r7, #4]
}
 8008ef0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008ef2:	f7fe fdad 	bl	8007a50 <xTaskIncrementTick>
 8008ef6:	4603      	mov	r3, r0
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d003      	beq.n	8008f04 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008efc:	4b06      	ldr	r3, [pc, #24]	@ (8008f18 <xPortSysTickHandler+0x40>)
 8008efe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008f02:	601a      	str	r2, [r3, #0]
 8008f04:	2300      	movs	r3, #0
 8008f06:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008f08:	683b      	ldr	r3, [r7, #0]
 8008f0a:	f383 8811 	msr	BASEPRI, r3
}
 8008f0e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008f10:	bf00      	nop
 8008f12:	3708      	adds	r7, #8
 8008f14:	46bd      	mov	sp, r7
 8008f16:	bd80      	pop	{r7, pc}
 8008f18:	e000ed04 	.word	0xe000ed04

08008f1c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008f1c:	b480      	push	{r7}
 8008f1e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008f20:	4b0b      	ldr	r3, [pc, #44]	@ (8008f50 <vPortSetupTimerInterrupt+0x34>)
 8008f22:	2200      	movs	r2, #0
 8008f24:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008f26:	4b0b      	ldr	r3, [pc, #44]	@ (8008f54 <vPortSetupTimerInterrupt+0x38>)
 8008f28:	2200      	movs	r2, #0
 8008f2a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008f2c:	4b0a      	ldr	r3, [pc, #40]	@ (8008f58 <vPortSetupTimerInterrupt+0x3c>)
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	4a0a      	ldr	r2, [pc, #40]	@ (8008f5c <vPortSetupTimerInterrupt+0x40>)
 8008f32:	fba2 2303 	umull	r2, r3, r2, r3
 8008f36:	099b      	lsrs	r3, r3, #6
 8008f38:	4a09      	ldr	r2, [pc, #36]	@ (8008f60 <vPortSetupTimerInterrupt+0x44>)
 8008f3a:	3b01      	subs	r3, #1
 8008f3c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008f3e:	4b04      	ldr	r3, [pc, #16]	@ (8008f50 <vPortSetupTimerInterrupt+0x34>)
 8008f40:	2207      	movs	r2, #7
 8008f42:	601a      	str	r2, [r3, #0]
}
 8008f44:	bf00      	nop
 8008f46:	46bd      	mov	sp, r7
 8008f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f4c:	4770      	bx	lr
 8008f4e:	bf00      	nop
 8008f50:	e000e010 	.word	0xe000e010
 8008f54:	e000e018 	.word	0xe000e018
 8008f58:	20000100 	.word	0x20000100
 8008f5c:	10624dd3 	.word	0x10624dd3
 8008f60:	e000e014 	.word	0xe000e014

08008f64 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008f64:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008f74 <vPortEnableVFP+0x10>
 8008f68:	6801      	ldr	r1, [r0, #0]
 8008f6a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8008f6e:	6001      	str	r1, [r0, #0]
 8008f70:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008f72:	bf00      	nop
 8008f74:	e000ed88 	.word	0xe000ed88

08008f78 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008f78:	b480      	push	{r7}
 8008f7a:	b085      	sub	sp, #20
 8008f7c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008f7e:	f3ef 8305 	mrs	r3, IPSR
 8008f82:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	2b0f      	cmp	r3, #15
 8008f88:	d915      	bls.n	8008fb6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008f8a:	4a18      	ldr	r2, [pc, #96]	@ (8008fec <vPortValidateInterruptPriority+0x74>)
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	4413      	add	r3, r2
 8008f90:	781b      	ldrb	r3, [r3, #0]
 8008f92:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008f94:	4b16      	ldr	r3, [pc, #88]	@ (8008ff0 <vPortValidateInterruptPriority+0x78>)
 8008f96:	781b      	ldrb	r3, [r3, #0]
 8008f98:	7afa      	ldrb	r2, [r7, #11]
 8008f9a:	429a      	cmp	r2, r3
 8008f9c:	d20b      	bcs.n	8008fb6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8008f9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fa2:	f383 8811 	msr	BASEPRI, r3
 8008fa6:	f3bf 8f6f 	isb	sy
 8008faa:	f3bf 8f4f 	dsb	sy
 8008fae:	607b      	str	r3, [r7, #4]
}
 8008fb0:	bf00      	nop
 8008fb2:	bf00      	nop
 8008fb4:	e7fd      	b.n	8008fb2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008fb6:	4b0f      	ldr	r3, [pc, #60]	@ (8008ff4 <vPortValidateInterruptPriority+0x7c>)
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8008fbe:	4b0e      	ldr	r3, [pc, #56]	@ (8008ff8 <vPortValidateInterruptPriority+0x80>)
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	429a      	cmp	r2, r3
 8008fc4:	d90b      	bls.n	8008fde <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8008fc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fca:	f383 8811 	msr	BASEPRI, r3
 8008fce:	f3bf 8f6f 	isb	sy
 8008fd2:	f3bf 8f4f 	dsb	sy
 8008fd6:	603b      	str	r3, [r7, #0]
}
 8008fd8:	bf00      	nop
 8008fda:	bf00      	nop
 8008fdc:	e7fd      	b.n	8008fda <vPortValidateInterruptPriority+0x62>
	}
 8008fde:	bf00      	nop
 8008fe0:	3714      	adds	r7, #20
 8008fe2:	46bd      	mov	sp, r7
 8008fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe8:	4770      	bx	lr
 8008fea:	bf00      	nop
 8008fec:	e000e3f0 	.word	0xe000e3f0
 8008ff0:	20005e64 	.word	0x20005e64
 8008ff4:	e000ed0c 	.word	0xe000ed0c
 8008ff8:	20005e68 	.word	0x20005e68

08008ffc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008ffc:	b580      	push	{r7, lr}
 8008ffe:	b08a      	sub	sp, #40	@ 0x28
 8009000:	af00      	add	r7, sp, #0
 8009002:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009004:	2300      	movs	r3, #0
 8009006:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009008:	f7fe fc54 	bl	80078b4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800900c:	4b5c      	ldr	r3, [pc, #368]	@ (8009180 <pvPortMalloc+0x184>)
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	2b00      	cmp	r3, #0
 8009012:	d101      	bne.n	8009018 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009014:	f000 f924 	bl	8009260 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009018:	4b5a      	ldr	r3, [pc, #360]	@ (8009184 <pvPortMalloc+0x188>)
 800901a:	681a      	ldr	r2, [r3, #0]
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	4013      	ands	r3, r2
 8009020:	2b00      	cmp	r3, #0
 8009022:	f040 8095 	bne.w	8009150 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	2b00      	cmp	r3, #0
 800902a:	d01e      	beq.n	800906a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800902c:	2208      	movs	r2, #8
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	4413      	add	r3, r2
 8009032:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	f003 0307 	and.w	r3, r3, #7
 800903a:	2b00      	cmp	r3, #0
 800903c:	d015      	beq.n	800906a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	f023 0307 	bic.w	r3, r3, #7
 8009044:	3308      	adds	r3, #8
 8009046:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	f003 0307 	and.w	r3, r3, #7
 800904e:	2b00      	cmp	r3, #0
 8009050:	d00b      	beq.n	800906a <pvPortMalloc+0x6e>
	__asm volatile
 8009052:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009056:	f383 8811 	msr	BASEPRI, r3
 800905a:	f3bf 8f6f 	isb	sy
 800905e:	f3bf 8f4f 	dsb	sy
 8009062:	617b      	str	r3, [r7, #20]
}
 8009064:	bf00      	nop
 8009066:	bf00      	nop
 8009068:	e7fd      	b.n	8009066 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	2b00      	cmp	r3, #0
 800906e:	d06f      	beq.n	8009150 <pvPortMalloc+0x154>
 8009070:	4b45      	ldr	r3, [pc, #276]	@ (8009188 <pvPortMalloc+0x18c>)
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	687a      	ldr	r2, [r7, #4]
 8009076:	429a      	cmp	r2, r3
 8009078:	d86a      	bhi.n	8009150 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800907a:	4b44      	ldr	r3, [pc, #272]	@ (800918c <pvPortMalloc+0x190>)
 800907c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800907e:	4b43      	ldr	r3, [pc, #268]	@ (800918c <pvPortMalloc+0x190>)
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009084:	e004      	b.n	8009090 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8009086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009088:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800908a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009092:	685b      	ldr	r3, [r3, #4]
 8009094:	687a      	ldr	r2, [r7, #4]
 8009096:	429a      	cmp	r2, r3
 8009098:	d903      	bls.n	80090a2 <pvPortMalloc+0xa6>
 800909a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d1f1      	bne.n	8009086 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80090a2:	4b37      	ldr	r3, [pc, #220]	@ (8009180 <pvPortMalloc+0x184>)
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80090a8:	429a      	cmp	r2, r3
 80090aa:	d051      	beq.n	8009150 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80090ac:	6a3b      	ldr	r3, [r7, #32]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	2208      	movs	r2, #8
 80090b2:	4413      	add	r3, r2
 80090b4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80090b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090b8:	681a      	ldr	r2, [r3, #0]
 80090ba:	6a3b      	ldr	r3, [r7, #32]
 80090bc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80090be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090c0:	685a      	ldr	r2, [r3, #4]
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	1ad2      	subs	r2, r2, r3
 80090c6:	2308      	movs	r3, #8
 80090c8:	005b      	lsls	r3, r3, #1
 80090ca:	429a      	cmp	r2, r3
 80090cc:	d920      	bls.n	8009110 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80090ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	4413      	add	r3, r2
 80090d4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80090d6:	69bb      	ldr	r3, [r7, #24]
 80090d8:	f003 0307 	and.w	r3, r3, #7
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d00b      	beq.n	80090f8 <pvPortMalloc+0xfc>
	__asm volatile
 80090e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090e4:	f383 8811 	msr	BASEPRI, r3
 80090e8:	f3bf 8f6f 	isb	sy
 80090ec:	f3bf 8f4f 	dsb	sy
 80090f0:	613b      	str	r3, [r7, #16]
}
 80090f2:	bf00      	nop
 80090f4:	bf00      	nop
 80090f6:	e7fd      	b.n	80090f4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80090f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090fa:	685a      	ldr	r2, [r3, #4]
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	1ad2      	subs	r2, r2, r3
 8009100:	69bb      	ldr	r3, [r7, #24]
 8009102:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009104:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009106:	687a      	ldr	r2, [r7, #4]
 8009108:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800910a:	69b8      	ldr	r0, [r7, #24]
 800910c:	f000 f90a 	bl	8009324 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009110:	4b1d      	ldr	r3, [pc, #116]	@ (8009188 <pvPortMalloc+0x18c>)
 8009112:	681a      	ldr	r2, [r3, #0]
 8009114:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009116:	685b      	ldr	r3, [r3, #4]
 8009118:	1ad3      	subs	r3, r2, r3
 800911a:	4a1b      	ldr	r2, [pc, #108]	@ (8009188 <pvPortMalloc+0x18c>)
 800911c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800911e:	4b1a      	ldr	r3, [pc, #104]	@ (8009188 <pvPortMalloc+0x18c>)
 8009120:	681a      	ldr	r2, [r3, #0]
 8009122:	4b1b      	ldr	r3, [pc, #108]	@ (8009190 <pvPortMalloc+0x194>)
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	429a      	cmp	r2, r3
 8009128:	d203      	bcs.n	8009132 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800912a:	4b17      	ldr	r3, [pc, #92]	@ (8009188 <pvPortMalloc+0x18c>)
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	4a18      	ldr	r2, [pc, #96]	@ (8009190 <pvPortMalloc+0x194>)
 8009130:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009134:	685a      	ldr	r2, [r3, #4]
 8009136:	4b13      	ldr	r3, [pc, #76]	@ (8009184 <pvPortMalloc+0x188>)
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	431a      	orrs	r2, r3
 800913c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800913e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009140:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009142:	2200      	movs	r2, #0
 8009144:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009146:	4b13      	ldr	r3, [pc, #76]	@ (8009194 <pvPortMalloc+0x198>)
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	3301      	adds	r3, #1
 800914c:	4a11      	ldr	r2, [pc, #68]	@ (8009194 <pvPortMalloc+0x198>)
 800914e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009150:	f7fe fbbe 	bl	80078d0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009154:	69fb      	ldr	r3, [r7, #28]
 8009156:	f003 0307 	and.w	r3, r3, #7
 800915a:	2b00      	cmp	r3, #0
 800915c:	d00b      	beq.n	8009176 <pvPortMalloc+0x17a>
	__asm volatile
 800915e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009162:	f383 8811 	msr	BASEPRI, r3
 8009166:	f3bf 8f6f 	isb	sy
 800916a:	f3bf 8f4f 	dsb	sy
 800916e:	60fb      	str	r3, [r7, #12]
}
 8009170:	bf00      	nop
 8009172:	bf00      	nop
 8009174:	e7fd      	b.n	8009172 <pvPortMalloc+0x176>
	return pvReturn;
 8009176:	69fb      	ldr	r3, [r7, #28]
}
 8009178:	4618      	mov	r0, r3
 800917a:	3728      	adds	r7, #40	@ 0x28
 800917c:	46bd      	mov	sp, r7
 800917e:	bd80      	pop	{r7, pc}
 8009180:	20009a74 	.word	0x20009a74
 8009184:	20009a88 	.word	0x20009a88
 8009188:	20009a78 	.word	0x20009a78
 800918c:	20009a6c 	.word	0x20009a6c
 8009190:	20009a7c 	.word	0x20009a7c
 8009194:	20009a80 	.word	0x20009a80

08009198 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009198:	b580      	push	{r7, lr}
 800919a:	b086      	sub	sp, #24
 800919c:	af00      	add	r7, sp, #0
 800919e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d04f      	beq.n	800924a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80091aa:	2308      	movs	r3, #8
 80091ac:	425b      	negs	r3, r3
 80091ae:	697a      	ldr	r2, [r7, #20]
 80091b0:	4413      	add	r3, r2
 80091b2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80091b4:	697b      	ldr	r3, [r7, #20]
 80091b6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80091b8:	693b      	ldr	r3, [r7, #16]
 80091ba:	685a      	ldr	r2, [r3, #4]
 80091bc:	4b25      	ldr	r3, [pc, #148]	@ (8009254 <vPortFree+0xbc>)
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	4013      	ands	r3, r2
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d10b      	bne.n	80091de <vPortFree+0x46>
	__asm volatile
 80091c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091ca:	f383 8811 	msr	BASEPRI, r3
 80091ce:	f3bf 8f6f 	isb	sy
 80091d2:	f3bf 8f4f 	dsb	sy
 80091d6:	60fb      	str	r3, [r7, #12]
}
 80091d8:	bf00      	nop
 80091da:	bf00      	nop
 80091dc:	e7fd      	b.n	80091da <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80091de:	693b      	ldr	r3, [r7, #16]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d00b      	beq.n	80091fe <vPortFree+0x66>
	__asm volatile
 80091e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091ea:	f383 8811 	msr	BASEPRI, r3
 80091ee:	f3bf 8f6f 	isb	sy
 80091f2:	f3bf 8f4f 	dsb	sy
 80091f6:	60bb      	str	r3, [r7, #8]
}
 80091f8:	bf00      	nop
 80091fa:	bf00      	nop
 80091fc:	e7fd      	b.n	80091fa <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80091fe:	693b      	ldr	r3, [r7, #16]
 8009200:	685a      	ldr	r2, [r3, #4]
 8009202:	4b14      	ldr	r3, [pc, #80]	@ (8009254 <vPortFree+0xbc>)
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	4013      	ands	r3, r2
 8009208:	2b00      	cmp	r3, #0
 800920a:	d01e      	beq.n	800924a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800920c:	693b      	ldr	r3, [r7, #16]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	2b00      	cmp	r3, #0
 8009212:	d11a      	bne.n	800924a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009214:	693b      	ldr	r3, [r7, #16]
 8009216:	685a      	ldr	r2, [r3, #4]
 8009218:	4b0e      	ldr	r3, [pc, #56]	@ (8009254 <vPortFree+0xbc>)
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	43db      	mvns	r3, r3
 800921e:	401a      	ands	r2, r3
 8009220:	693b      	ldr	r3, [r7, #16]
 8009222:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009224:	f7fe fb46 	bl	80078b4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009228:	693b      	ldr	r3, [r7, #16]
 800922a:	685a      	ldr	r2, [r3, #4]
 800922c:	4b0a      	ldr	r3, [pc, #40]	@ (8009258 <vPortFree+0xc0>)
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	4413      	add	r3, r2
 8009232:	4a09      	ldr	r2, [pc, #36]	@ (8009258 <vPortFree+0xc0>)
 8009234:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009236:	6938      	ldr	r0, [r7, #16]
 8009238:	f000 f874 	bl	8009324 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800923c:	4b07      	ldr	r3, [pc, #28]	@ (800925c <vPortFree+0xc4>)
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	3301      	adds	r3, #1
 8009242:	4a06      	ldr	r2, [pc, #24]	@ (800925c <vPortFree+0xc4>)
 8009244:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009246:	f7fe fb43 	bl	80078d0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800924a:	bf00      	nop
 800924c:	3718      	adds	r7, #24
 800924e:	46bd      	mov	sp, r7
 8009250:	bd80      	pop	{r7, pc}
 8009252:	bf00      	nop
 8009254:	20009a88 	.word	0x20009a88
 8009258:	20009a78 	.word	0x20009a78
 800925c:	20009a84 	.word	0x20009a84

08009260 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009260:	b480      	push	{r7}
 8009262:	b085      	sub	sp, #20
 8009264:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009266:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800926a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800926c:	4b27      	ldr	r3, [pc, #156]	@ (800930c <prvHeapInit+0xac>)
 800926e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	f003 0307 	and.w	r3, r3, #7
 8009276:	2b00      	cmp	r3, #0
 8009278:	d00c      	beq.n	8009294 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	3307      	adds	r3, #7
 800927e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	f023 0307 	bic.w	r3, r3, #7
 8009286:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009288:	68ba      	ldr	r2, [r7, #8]
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	1ad3      	subs	r3, r2, r3
 800928e:	4a1f      	ldr	r2, [pc, #124]	@ (800930c <prvHeapInit+0xac>)
 8009290:	4413      	add	r3, r2
 8009292:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009298:	4a1d      	ldr	r2, [pc, #116]	@ (8009310 <prvHeapInit+0xb0>)
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800929e:	4b1c      	ldr	r3, [pc, #112]	@ (8009310 <prvHeapInit+0xb0>)
 80092a0:	2200      	movs	r2, #0
 80092a2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	68ba      	ldr	r2, [r7, #8]
 80092a8:	4413      	add	r3, r2
 80092aa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80092ac:	2208      	movs	r2, #8
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	1a9b      	subs	r3, r3, r2
 80092b2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	f023 0307 	bic.w	r3, r3, #7
 80092ba:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	4a15      	ldr	r2, [pc, #84]	@ (8009314 <prvHeapInit+0xb4>)
 80092c0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80092c2:	4b14      	ldr	r3, [pc, #80]	@ (8009314 <prvHeapInit+0xb4>)
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	2200      	movs	r2, #0
 80092c8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80092ca:	4b12      	ldr	r3, [pc, #72]	@ (8009314 <prvHeapInit+0xb4>)
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	2200      	movs	r2, #0
 80092d0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80092d6:	683b      	ldr	r3, [r7, #0]
 80092d8:	68fa      	ldr	r2, [r7, #12]
 80092da:	1ad2      	subs	r2, r2, r3
 80092dc:	683b      	ldr	r3, [r7, #0]
 80092de:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80092e0:	4b0c      	ldr	r3, [pc, #48]	@ (8009314 <prvHeapInit+0xb4>)
 80092e2:	681a      	ldr	r2, [r3, #0]
 80092e4:	683b      	ldr	r3, [r7, #0]
 80092e6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80092e8:	683b      	ldr	r3, [r7, #0]
 80092ea:	685b      	ldr	r3, [r3, #4]
 80092ec:	4a0a      	ldr	r2, [pc, #40]	@ (8009318 <prvHeapInit+0xb8>)
 80092ee:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80092f0:	683b      	ldr	r3, [r7, #0]
 80092f2:	685b      	ldr	r3, [r3, #4]
 80092f4:	4a09      	ldr	r2, [pc, #36]	@ (800931c <prvHeapInit+0xbc>)
 80092f6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80092f8:	4b09      	ldr	r3, [pc, #36]	@ (8009320 <prvHeapInit+0xc0>)
 80092fa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80092fe:	601a      	str	r2, [r3, #0]
}
 8009300:	bf00      	nop
 8009302:	3714      	adds	r7, #20
 8009304:	46bd      	mov	sp, r7
 8009306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800930a:	4770      	bx	lr
 800930c:	20005e6c 	.word	0x20005e6c
 8009310:	20009a6c 	.word	0x20009a6c
 8009314:	20009a74 	.word	0x20009a74
 8009318:	20009a7c 	.word	0x20009a7c
 800931c:	20009a78 	.word	0x20009a78
 8009320:	20009a88 	.word	0x20009a88

08009324 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009324:	b480      	push	{r7}
 8009326:	b085      	sub	sp, #20
 8009328:	af00      	add	r7, sp, #0
 800932a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800932c:	4b28      	ldr	r3, [pc, #160]	@ (80093d0 <prvInsertBlockIntoFreeList+0xac>)
 800932e:	60fb      	str	r3, [r7, #12]
 8009330:	e002      	b.n	8009338 <prvInsertBlockIntoFreeList+0x14>
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	60fb      	str	r3, [r7, #12]
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	687a      	ldr	r2, [r7, #4]
 800933e:	429a      	cmp	r2, r3
 8009340:	d8f7      	bhi.n	8009332 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	685b      	ldr	r3, [r3, #4]
 800934a:	68ba      	ldr	r2, [r7, #8]
 800934c:	4413      	add	r3, r2
 800934e:	687a      	ldr	r2, [r7, #4]
 8009350:	429a      	cmp	r2, r3
 8009352:	d108      	bne.n	8009366 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	685a      	ldr	r2, [r3, #4]
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	685b      	ldr	r3, [r3, #4]
 800935c:	441a      	add	r2, r3
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	685b      	ldr	r3, [r3, #4]
 800936e:	68ba      	ldr	r2, [r7, #8]
 8009370:	441a      	add	r2, r3
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	429a      	cmp	r2, r3
 8009378:	d118      	bne.n	80093ac <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	681a      	ldr	r2, [r3, #0]
 800937e:	4b15      	ldr	r3, [pc, #84]	@ (80093d4 <prvInsertBlockIntoFreeList+0xb0>)
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	429a      	cmp	r2, r3
 8009384:	d00d      	beq.n	80093a2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	685a      	ldr	r2, [r3, #4]
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	685b      	ldr	r3, [r3, #4]
 8009390:	441a      	add	r2, r3
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	681a      	ldr	r2, [r3, #0]
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	601a      	str	r2, [r3, #0]
 80093a0:	e008      	b.n	80093b4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80093a2:	4b0c      	ldr	r3, [pc, #48]	@ (80093d4 <prvInsertBlockIntoFreeList+0xb0>)
 80093a4:	681a      	ldr	r2, [r3, #0]
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	601a      	str	r2, [r3, #0]
 80093aa:	e003      	b.n	80093b4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	681a      	ldr	r2, [r3, #0]
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80093b4:	68fa      	ldr	r2, [r7, #12]
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	429a      	cmp	r2, r3
 80093ba:	d002      	beq.n	80093c2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	687a      	ldr	r2, [r7, #4]
 80093c0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80093c2:	bf00      	nop
 80093c4:	3714      	adds	r7, #20
 80093c6:	46bd      	mov	sp, r7
 80093c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093cc:	4770      	bx	lr
 80093ce:	bf00      	nop
 80093d0:	20009a6c 	.word	0x20009a6c
 80093d4:	20009a74 	.word	0x20009a74

080093d8 <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 80093d8:	b580      	push	{r7, lr}
 80093da:	b084      	sub	sp, #16
 80093dc:	af00      	add	r7, sp, #0
 80093de:	6078      	str	r0, [r7, #4]
 80093e0:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 80093e2:	683b      	ldr	r3, [r7, #0]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	330c      	adds	r3, #12
 80093e8:	461a      	mov	r2, r3
 80093ea:	6839      	ldr	r1, [r7, #0]
 80093ec:	6878      	ldr	r0, [r7, #4]
 80093ee:	f002 fa89 	bl	800b904 <tcpip_send_msg_wait_sem>
 80093f2:	4603      	mov	r3, r0
 80093f4:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 80093f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d103      	bne.n	8009406 <netconn_apimsg+0x2e>
    return apimsg->err;
 80093fe:	683b      	ldr	r3, [r7, #0]
 8009400:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8009404:	e001      	b.n	800940a <netconn_apimsg+0x32>
  }
  return err;
 8009406:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800940a:	4618      	mov	r0, r3
 800940c:	3710      	adds	r7, #16
 800940e:	46bd      	mov	sp, r7
 8009410:	bd80      	pop	{r7, pc}
	...

08009414 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 8009414:	b580      	push	{r7, lr}
 8009416:	b08c      	sub	sp, #48	@ 0x30
 8009418:	af00      	add	r7, sp, #0
 800941a:	4603      	mov	r3, r0
 800941c:	603a      	str	r2, [r7, #0]
 800941e:	71fb      	strb	r3, [r7, #7]
 8009420:	460b      	mov	r3, r1
 8009422:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 8009424:	79fb      	ldrb	r3, [r7, #7]
 8009426:	6839      	ldr	r1, [r7, #0]
 8009428:	4618      	mov	r0, r3
 800942a:	f001 f949 	bl	800a6c0 <netconn_alloc>
 800942e:	62f8      	str	r0, [r7, #44]	@ 0x2c
  if (conn != NULL) {
 8009430:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009432:	2b00      	cmp	r3, #0
 8009434:	d054      	beq.n	80094e0 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 8009436:	79bb      	ldrb	r3, [r7, #6]
 8009438:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 800943a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800943c:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 800943e:	f107 0308 	add.w	r3, r7, #8
 8009442:	4619      	mov	r1, r3
 8009444:	4829      	ldr	r0, [pc, #164]	@ (80094ec <netconn_new_with_proto_and_callback+0xd8>)
 8009446:	f7ff ffc7 	bl	80093d8 <netconn_apimsg>
 800944a:	4603      	mov	r3, r0
 800944c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    if (err != ERR_OK) {
 8009450:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8009454:	2b00      	cmp	r3, #0
 8009456:	d043      	beq.n	80094e0 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 8009458:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800945a:	685b      	ldr	r3, [r3, #4]
 800945c:	2b00      	cmp	r3, #0
 800945e:	d005      	beq.n	800946c <netconn_new_with_proto_and_callback+0x58>
 8009460:	4b23      	ldr	r3, [pc, #140]	@ (80094f0 <netconn_new_with_proto_and_callback+0xdc>)
 8009462:	22a3      	movs	r2, #163	@ 0xa3
 8009464:	4923      	ldr	r1, [pc, #140]	@ (80094f4 <netconn_new_with_proto_and_callback+0xe0>)
 8009466:	4824      	ldr	r0, [pc, #144]	@ (80094f8 <netconn_new_with_proto_and_callback+0xe4>)
 8009468:	f00d fbde 	bl	8016c28 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 800946c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800946e:	3310      	adds	r3, #16
 8009470:	4618      	mov	r0, r3
 8009472:	f00d f9b1 	bl	80167d8 <sys_mbox_valid>
 8009476:	4603      	mov	r3, r0
 8009478:	2b00      	cmp	r3, #0
 800947a:	d105      	bne.n	8009488 <netconn_new_with_proto_and_callback+0x74>
 800947c:	4b1c      	ldr	r3, [pc, #112]	@ (80094f0 <netconn_new_with_proto_and_callback+0xdc>)
 800947e:	22a4      	movs	r2, #164	@ 0xa4
 8009480:	491e      	ldr	r1, [pc, #120]	@ (80094fc <netconn_new_with_proto_and_callback+0xe8>)
 8009482:	481d      	ldr	r0, [pc, #116]	@ (80094f8 <netconn_new_with_proto_and_callback+0xe4>)
 8009484:	f00d fbd0 	bl	8016c28 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 8009488:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800948a:	3314      	adds	r3, #20
 800948c:	4618      	mov	r0, r3
 800948e:	f00d f9a3 	bl	80167d8 <sys_mbox_valid>
 8009492:	4603      	mov	r3, r0
 8009494:	2b00      	cmp	r3, #0
 8009496:	d005      	beq.n	80094a4 <netconn_new_with_proto_and_callback+0x90>
 8009498:	4b15      	ldr	r3, [pc, #84]	@ (80094f0 <netconn_new_with_proto_and_callback+0xdc>)
 800949a:	22a6      	movs	r2, #166	@ 0xa6
 800949c:	4918      	ldr	r1, [pc, #96]	@ (8009500 <netconn_new_with_proto_and_callback+0xec>)
 800949e:	4816      	ldr	r0, [pc, #88]	@ (80094f8 <netconn_new_with_proto_and_callback+0xe4>)
 80094a0:	f00d fbc2 	bl	8016c28 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 80094a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094a6:	330c      	adds	r3, #12
 80094a8:	4618      	mov	r0, r3
 80094aa:	f00d fa23 	bl	80168f4 <sys_sem_valid>
 80094ae:	4603      	mov	r3, r0
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d105      	bne.n	80094c0 <netconn_new_with_proto_and_callback+0xac>
 80094b4:	4b0e      	ldr	r3, [pc, #56]	@ (80094f0 <netconn_new_with_proto_and_callback+0xdc>)
 80094b6:	22a9      	movs	r2, #169	@ 0xa9
 80094b8:	4912      	ldr	r1, [pc, #72]	@ (8009504 <netconn_new_with_proto_and_callback+0xf0>)
 80094ba:	480f      	ldr	r0, [pc, #60]	@ (80094f8 <netconn_new_with_proto_and_callback+0xe4>)
 80094bc:	f00d fbb4 	bl	8016c28 <iprintf>
      sys_sem_free(&conn->op_completed);
 80094c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094c2:	330c      	adds	r3, #12
 80094c4:	4618      	mov	r0, r3
 80094c6:	f00d fa08 	bl	80168da <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 80094ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094cc:	3310      	adds	r3, #16
 80094ce:	4618      	mov	r0, r3
 80094d0:	f00d f90e 	bl	80166f0 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 80094d4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80094d6:	2007      	movs	r0, #7
 80094d8:	f002 ffc2 	bl	800c460 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 80094dc:	2300      	movs	r3, #0
 80094de:	e000      	b.n	80094e2 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 80094e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80094e2:	4618      	mov	r0, r3
 80094e4:	3730      	adds	r7, #48	@ 0x30
 80094e6:	46bd      	mov	sp, r7
 80094e8:	bd80      	pop	{r7, pc}
 80094ea:	bf00      	nop
 80094ec:	0800a695 	.word	0x0800a695
 80094f0:	08017d68 	.word	0x08017d68
 80094f4:	08017d9c 	.word	0x08017d9c
 80094f8:	08017dc0 	.word	0x08017dc0
 80094fc:	08017de8 	.word	0x08017de8
 8009500:	08017e00 	.word	0x08017e00
 8009504:	08017e24 	.word	0x08017e24

08009508 <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 8009508:	b580      	push	{r7, lr}
 800950a:	b08c      	sub	sp, #48	@ 0x30
 800950c:	af00      	add	r7, sp, #0
 800950e:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	2b00      	cmp	r3, #0
 8009514:	d101      	bne.n	800951a <netconn_prepare_delete+0x12>
    return ERR_OK;
 8009516:	2300      	movs	r3, #0
 8009518:	e014      	b.n	8009544 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800951e:	2329      	movs	r3, #41	@ 0x29
 8009520:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 8009522:	f107 030c 	add.w	r3, r7, #12
 8009526:	4619      	mov	r1, r3
 8009528:	4808      	ldr	r0, [pc, #32]	@ (800954c <netconn_prepare_delete+0x44>)
 800952a:	f7ff ff55 	bl	80093d8 <netconn_apimsg>
 800952e:	4603      	mov	r3, r0
 8009530:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 8009534:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8009538:	2b00      	cmp	r3, #0
 800953a:	d002      	beq.n	8009542 <netconn_prepare_delete+0x3a>
    return err;
 800953c:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8009540:	e000      	b.n	8009544 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 8009542:	2300      	movs	r3, #0
}
 8009544:	4618      	mov	r0, r3
 8009546:	3730      	adds	r7, #48	@ 0x30
 8009548:	46bd      	mov	sp, r7
 800954a:	bd80      	pop	{r7, pc}
 800954c:	0800ac09 	.word	0x0800ac09

08009550 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 8009550:	b580      	push	{r7, lr}
 8009552:	b084      	sub	sp, #16
 8009554:	af00      	add	r7, sp, #0
 8009556:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	2b00      	cmp	r3, #0
 800955c:	d101      	bne.n	8009562 <netconn_delete+0x12>
    return ERR_OK;
 800955e:	2300      	movs	r3, #0
 8009560:	e00d      	b.n	800957e <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 8009562:	6878      	ldr	r0, [r7, #4]
 8009564:	f7ff ffd0 	bl	8009508 <netconn_prepare_delete>
 8009568:	4603      	mov	r3, r0
 800956a:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 800956c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009570:	2b00      	cmp	r3, #0
 8009572:	d102      	bne.n	800957a <netconn_delete+0x2a>
    netconn_free(conn);
 8009574:	6878      	ldr	r0, [r7, #4]
 8009576:	f001 f915 	bl	800a7a4 <netconn_free>
  }
  return err;
 800957a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800957e:	4618      	mov	r0, r3
 8009580:	3710      	adds	r7, #16
 8009582:	46bd      	mov	sp, r7
 8009584:	bd80      	pop	{r7, pc}
	...

08009588 <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 8009588:	b580      	push	{r7, lr}
 800958a:	b08e      	sub	sp, #56	@ 0x38
 800958c:	af00      	add	r7, sp, #0
 800958e:	60f8      	str	r0, [r7, #12]
 8009590:	60b9      	str	r1, [r7, #8]
 8009592:	4613      	mov	r3, r2
 8009594:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	2b00      	cmp	r3, #0
 800959a:	d109      	bne.n	80095b0 <netconn_bind+0x28>
 800959c:	4b11      	ldr	r3, [pc, #68]	@ (80095e4 <netconn_bind+0x5c>)
 800959e:	f44f 729c 	mov.w	r2, #312	@ 0x138
 80095a2:	4911      	ldr	r1, [pc, #68]	@ (80095e8 <netconn_bind+0x60>)
 80095a4:	4811      	ldr	r0, [pc, #68]	@ (80095ec <netconn_bind+0x64>)
 80095a6:	f00d fb3f 	bl	8016c28 <iprintf>
 80095aa:	f06f 030f 	mvn.w	r3, #15
 80095ae:	e015      	b.n	80095dc <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 80095b0:	68bb      	ldr	r3, [r7, #8]
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d101      	bne.n	80095ba <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 80095b6:	4b0e      	ldr	r3, [pc, #56]	@ (80095f0 <netconn_bind+0x68>)
 80095b8:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 80095be:	68bb      	ldr	r3, [r7, #8]
 80095c0:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 80095c2:	88fb      	ldrh	r3, [r7, #6]
 80095c4:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 80095c6:	f107 0314 	add.w	r3, r7, #20
 80095ca:	4619      	mov	r1, r3
 80095cc:	4809      	ldr	r0, [pc, #36]	@ (80095f4 <netconn_bind+0x6c>)
 80095ce:	f7ff ff03 	bl	80093d8 <netconn_apimsg>
 80095d2:	4603      	mov	r3, r0
 80095d4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 80095d8:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 80095dc:	4618      	mov	r0, r3
 80095de:	3738      	adds	r7, #56	@ 0x38
 80095e0:	46bd      	mov	sp, r7
 80095e2:	bd80      	pop	{r7, pc}
 80095e4:	08017d68 	.word	0x08017d68
 80095e8:	08017ea0 	.word	0x08017ea0
 80095ec:	08017dc0 	.word	0x08017dc0
 80095f0:	0801b394 	.word	0x0801b394
 80095f4:	0800add5 	.word	0x0800add5

080095f8 <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
 80095f8:	b580      	push	{r7, lr}
 80095fa:	b08c      	sub	sp, #48	@ 0x30
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	6078      	str	r0, [r7, #4]
 8009600:	460b      	mov	r3, r1
 8009602:	70fb      	strb	r3, [r7, #3]
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	2b00      	cmp	r3, #0
 8009608:	d109      	bne.n	800961e <netconn_listen_with_backlog+0x26>
 800960a:	4b0d      	ldr	r3, [pc, #52]	@ (8009640 <netconn_listen_with_backlog+0x48>)
 800960c:	f240 12bb 	movw	r2, #443	@ 0x1bb
 8009610:	490c      	ldr	r1, [pc, #48]	@ (8009644 <netconn_listen_with_backlog+0x4c>)
 8009612:	480d      	ldr	r0, [pc, #52]	@ (8009648 <netconn_listen_with_backlog+0x50>)
 8009614:	f00d fb08 	bl	8016c28 <iprintf>
 8009618:	f06f 030f 	mvn.w	r3, #15
 800961c:	e00c      	b.n	8009638 <netconn_listen_with_backlog+0x40>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	60fb      	str	r3, [r7, #12]
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 8009622:	f107 030c 	add.w	r3, r7, #12
 8009626:	4619      	mov	r1, r3
 8009628:	4808      	ldr	r0, [pc, #32]	@ (800964c <netconn_listen_with_backlog+0x54>)
 800962a:	f7ff fed5 	bl	80093d8 <netconn_apimsg>
 800962e:	4603      	mov	r3, r0
 8009630:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8009634:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 8009638:	4618      	mov	r0, r3
 800963a:	3730      	adds	r7, #48	@ 0x30
 800963c:	46bd      	mov	sp, r7
 800963e:	bd80      	pop	{r7, pc}
 8009640:	08017d68 	.word	0x08017d68
 8009644:	08017f20 	.word	0x08017f20
 8009648:	08017dc0 	.word	0x08017dc0
 800964c:	0800ae49 	.word	0x0800ae49

08009650 <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
 8009650:	b580      	push	{r7, lr}
 8009652:	b086      	sub	sp, #24
 8009654:	af00      	add	r7, sp, #0
 8009656:	6078      	str	r0, [r7, #4]
 8009658:	6039      	str	r1, [r7, #0]
  struct netconn *newconn;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 800965a:	683b      	ldr	r3, [r7, #0]
 800965c:	2b00      	cmp	r3, #0
 800965e:	d109      	bne.n	8009674 <netconn_accept+0x24>
 8009660:	4b42      	ldr	r3, [pc, #264]	@ (800976c <netconn_accept+0x11c>)
 8009662:	f240 12e1 	movw	r2, #481	@ 0x1e1
 8009666:	4942      	ldr	r1, [pc, #264]	@ (8009770 <netconn_accept+0x120>)
 8009668:	4842      	ldr	r0, [pc, #264]	@ (8009774 <netconn_accept+0x124>)
 800966a:	f00d fadd 	bl	8016c28 <iprintf>
 800966e:	f06f 030f 	mvn.w	r3, #15
 8009672:	e077      	b.n	8009764 <netconn_accept+0x114>
  *new_conn = NULL;
 8009674:	683b      	ldr	r3, [r7, #0]
 8009676:	2200      	movs	r2, #0
 8009678:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	2b00      	cmp	r3, #0
 800967e:	d109      	bne.n	8009694 <netconn_accept+0x44>
 8009680:	4b3a      	ldr	r3, [pc, #232]	@ (800976c <netconn_accept+0x11c>)
 8009682:	f240 12e3 	movw	r2, #483	@ 0x1e3
 8009686:	493c      	ldr	r1, [pc, #240]	@ (8009778 <netconn_accept+0x128>)
 8009688:	483a      	ldr	r0, [pc, #232]	@ (8009774 <netconn_accept+0x124>)
 800968a:	f00d facd 	bl	8016c28 <iprintf>
 800968e:	f06f 030f 	mvn.w	r3, #15
 8009692:	e067      	b.n	8009764 <netconn_accept+0x114>

  /* NOTE: Although the opengroup spec says a pending error shall be returned to
           send/recv/getsockopt(SO_ERROR) only, we return it for listening
           connections also, to handle embedded-system errors */
  err = netconn_err(conn);
 8009694:	6878      	ldr	r0, [r7, #4]
 8009696:	f000 fb88 	bl	8009daa <netconn_err>
 800969a:	4603      	mov	r3, r0
 800969c:	74fb      	strb	r3, [r7, #19]
  if (err != ERR_OK) {
 800969e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d002      	beq.n	80096ac <netconn_accept+0x5c>
    /* return pending error */
    return err;
 80096a6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80096aa:	e05b      	b.n	8009764 <netconn_accept+0x114>
  }
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	3314      	adds	r3, #20
 80096b0:	4618      	mov	r0, r3
 80096b2:	f00d f891 	bl	80167d8 <sys_mbox_valid>
 80096b6:	4603      	mov	r3, r0
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d006      	beq.n	80096ca <netconn_accept+0x7a>
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	f893 3020 	ldrb.w	r3, [r3, #32]
 80096c2:	f003 0301 	and.w	r3, r3, #1
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d002      	beq.n	80096d0 <netconn_accept+0x80>
    /* don't accept if closed: this might block the application task
       waiting on acceptmbox forever! */
    return ERR_CLSD;
 80096ca:	f06f 030e 	mvn.w	r3, #14
 80096ce:	e049      	b.n	8009764 <netconn_accept+0x114>
  }

  API_MSG_VAR_ALLOC_ACCEPT(msg);

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn)) {
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80096d6:	f003 0302 	and.w	r3, r3, #2
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d00e      	beq.n	80096fc <netconn_accept+0xac>
    if (sys_arch_mbox_tryfetch(&conn->acceptmbox, &accept_ptr) == SYS_ARCH_TIMEOUT) {
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	3314      	adds	r3, #20
 80096e2:	f107 020c 	add.w	r2, r7, #12
 80096e6:	4611      	mov	r1, r2
 80096e8:	4618      	mov	r0, r3
 80096ea:	f00d f85e 	bl	80167aa <sys_arch_mbox_tryfetch>
 80096ee:	4603      	mov	r3, r0
 80096f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096f4:	d113      	bne.n	800971e <netconn_accept+0xce>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_WOULDBLOCK;
 80096f6:	f06f 0306 	mvn.w	r3, #6
 80096fa:	e033      	b.n	8009764 <netconn_accept+0x114>
    }
  } else {
#if LWIP_SO_RCVTIMEO
    if (sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	f103 0014 	add.w	r0, r3, #20
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	69da      	ldr	r2, [r3, #28]
 8009706:	f107 030c 	add.w	r3, r7, #12
 800970a:	4619      	mov	r1, r3
 800970c:	f00d f81c 	bl	8016748 <sys_arch_mbox_fetch>
 8009710:	4603      	mov	r3, r0
 8009712:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009716:	d102      	bne.n	800971e <netconn_accept+0xce>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
 8009718:	f06f 0302 	mvn.w	r3, #2
 800971c:	e022      	b.n	8009764 <netconn_accept+0x114>
    }
  }
#endif

  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009722:	2b00      	cmp	r3, #0
 8009724:	d005      	beq.n	8009732 <netconn_accept+0xe2>
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800972a:	2200      	movs	r2, #0
 800972c:	2101      	movs	r1, #1
 800972e:	6878      	ldr	r0, [r7, #4]
 8009730:	4798      	blx	r3

  if (lwip_netconn_is_err_msg(accept_ptr, &err)) {
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	f107 0213 	add.w	r2, r7, #19
 8009738:	4611      	mov	r1, r2
 800973a:	4618      	mov	r0, r3
 800973c:	f000 fb86 	bl	8009e4c <lwip_netconn_is_err_msg>
 8009740:	4603      	mov	r3, r0
 8009742:	2b00      	cmp	r3, #0
 8009744:	d002      	beq.n	800974c <netconn_accept+0xfc>
    /* a connection has been aborted: e.g. out of pcbs or out of netconns during accept */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return err;
 8009746:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800974a:	e00b      	b.n	8009764 <netconn_accept+0x114>
  }
  if (accept_ptr == NULL) {
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	2b00      	cmp	r3, #0
 8009750:	d102      	bne.n	8009758 <netconn_accept+0x108>
    /* connection has been aborted */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return ERR_CLSD;
 8009752:	f06f 030e 	mvn.w	r3, #14
 8009756:	e005      	b.n	8009764 <netconn_accept+0x114>
  }
  newconn = (struct netconn *)accept_ptr;
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	617b      	str	r3, [r7, #20]
  /* don't care for the return value of lwip_netconn_do_recv */
  netconn_apimsg(lwip_netconn_do_accepted, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
 800975c:	683b      	ldr	r3, [r7, #0]
 800975e:	697a      	ldr	r2, [r7, #20]
 8009760:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 8009762:	2300      	movs	r3, #0
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 8009764:	4618      	mov	r0, r3
 8009766:	3718      	adds	r7, #24
 8009768:	46bd      	mov	sp, r7
 800976a:	bd80      	pop	{r7, pc}
 800976c:	08017d68 	.word	0x08017d68
 8009770:	08017f40 	.word	0x08017f40
 8009774:	08017dc0 	.word	0x08017dc0
 8009778:	08017f60 	.word	0x08017f60

0800977c <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 800977c:	b580      	push	{r7, lr}
 800977e:	b088      	sub	sp, #32
 8009780:	af00      	add	r7, sp, #0
 8009782:	60f8      	str	r0, [r7, #12]
 8009784:	60b9      	str	r1, [r7, #8]
 8009786:	4613      	mov	r3, r2
 8009788:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 800978a:	2300      	movs	r3, #0
 800978c:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800978e:	68bb      	ldr	r3, [r7, #8]
 8009790:	2b00      	cmp	r3, #0
 8009792:	d109      	bne.n	80097a8 <netconn_recv_data+0x2c>
 8009794:	4b5e      	ldr	r3, [pc, #376]	@ (8009910 <netconn_recv_data+0x194>)
 8009796:	f44f 7212 	mov.w	r2, #584	@ 0x248
 800979a:	495e      	ldr	r1, [pc, #376]	@ (8009914 <netconn_recv_data+0x198>)
 800979c:	485e      	ldr	r0, [pc, #376]	@ (8009918 <netconn_recv_data+0x19c>)
 800979e:	f00d fa43 	bl	8016c28 <iprintf>
 80097a2:	f06f 030f 	mvn.w	r3, #15
 80097a6:	e0ae      	b.n	8009906 <netconn_recv_data+0x18a>
  *new_buf = NULL;
 80097a8:	68bb      	ldr	r3, [r7, #8]
 80097aa:	2200      	movs	r2, #0
 80097ac:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d109      	bne.n	80097c8 <netconn_recv_data+0x4c>
 80097b4:	4b56      	ldr	r3, [pc, #344]	@ (8009910 <netconn_recv_data+0x194>)
 80097b6:	f240 224a 	movw	r2, #586	@ 0x24a
 80097ba:	4958      	ldr	r1, [pc, #352]	@ (800991c <netconn_recv_data+0x1a0>)
 80097bc:	4856      	ldr	r0, [pc, #344]	@ (8009918 <netconn_recv_data+0x19c>)
 80097be:	f00d fa33 	bl	8016c28 <iprintf>
 80097c2:	f06f 030f 	mvn.w	r3, #15
 80097c6:	e09e      	b.n	8009906 <netconn_recv_data+0x18a>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	3310      	adds	r3, #16
 80097cc:	4618      	mov	r0, r3
 80097ce:	f00d f803 	bl	80167d8 <sys_mbox_valid>
 80097d2:	4603      	mov	r3, r0
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d10e      	bne.n	80097f6 <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 80097d8:	68f8      	ldr	r0, [r7, #12]
 80097da:	f000 fae6 	bl	8009daa <netconn_err>
 80097de:	4603      	mov	r3, r0
 80097e0:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 80097e2:	f997 301c 	ldrsb.w	r3, [r7, #28]
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d002      	beq.n	80097f0 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 80097ea:	f997 301c 	ldrsb.w	r3, [r7, #28]
 80097ee:	e08a      	b.n	8009906 <netconn_recv_data+0x18a>
    }
    return ERR_CONN;
 80097f0:	f06f 030a 	mvn.w	r3, #10
 80097f4:	e087      	b.n	8009906 <netconn_recv_data+0x18a>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80097fc:	f003 0302 	and.w	r3, r3, #2
 8009800:	2b00      	cmp	r3, #0
 8009802:	d110      	bne.n	8009826 <netconn_recv_data+0xaa>
 8009804:	79fb      	ldrb	r3, [r7, #7]
 8009806:	f003 0304 	and.w	r3, r3, #4
 800980a:	2b00      	cmp	r3, #0
 800980c:	d10b      	bne.n	8009826 <netconn_recv_data+0xaa>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009814:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8009818:	2b00      	cmp	r3, #0
 800981a:	d104      	bne.n	8009826 <netconn_recv_data+0xaa>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8009822:	2b00      	cmp	r3, #0
 8009824:	d024      	beq.n	8009870 <netconn_recv_data+0xf4>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	3310      	adds	r3, #16
 800982a:	f107 0218 	add.w	r2, r7, #24
 800982e:	4611      	mov	r1, r2
 8009830:	4618      	mov	r0, r3
 8009832:	f00c ffba 	bl	80167aa <sys_arch_mbox_tryfetch>
 8009836:	4603      	mov	r3, r0
 8009838:	f1b3 3fff 	cmp.w	r3, #4294967295
 800983c:	d129      	bne.n	8009892 <netconn_recv_data+0x116>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 800983e:	68f8      	ldr	r0, [r7, #12]
 8009840:	f000 fab3 	bl	8009daa <netconn_err>
 8009844:	4603      	mov	r3, r0
 8009846:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 8009848:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800984c:	2b00      	cmp	r3, #0
 800984e:	d002      	beq.n	8009856 <netconn_recv_data+0xda>
        /* return pending error */
        return err;
 8009850:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8009854:	e057      	b.n	8009906 <netconn_recv_data+0x18a>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	f893 3020 	ldrb.w	r3, [r3, #32]
 800985c:	f003 0301 	and.w	r3, r3, #1
 8009860:	2b00      	cmp	r3, #0
 8009862:	d002      	beq.n	800986a <netconn_recv_data+0xee>
        return ERR_CONN;
 8009864:	f06f 030a 	mvn.w	r3, #10
 8009868:	e04d      	b.n	8009906 <netconn_recv_data+0x18a>
      }
      return ERR_WOULDBLOCK;
 800986a:	f06f 0306 	mvn.w	r3, #6
 800986e:	e04a      	b.n	8009906 <netconn_recv_data+0x18a>
    }
  } else {
#if LWIP_SO_RCVTIMEO
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	f103 0010 	add.w	r0, r3, #16
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	69da      	ldr	r2, [r3, #28]
 800987a:	f107 0318 	add.w	r3, r7, #24
 800987e:	4619      	mov	r1, r3
 8009880:	f00c ff62 	bl	8016748 <sys_arch_mbox_fetch>
 8009884:	4603      	mov	r3, r0
 8009886:	f1b3 3fff 	cmp.w	r3, #4294967295
 800988a:	d102      	bne.n	8009892 <netconn_recv_data+0x116>
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
 800988c:	f06f 0302 	mvn.w	r3, #2
 8009890:	e039      	b.n	8009906 <netconn_recv_data+0x18a>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	781b      	ldrb	r3, [r3, #0]
 8009896:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800989a:	2b10      	cmp	r3, #16
 800989c:	d117      	bne.n	80098ce <netconn_recv_data+0x152>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 800989e:	69bb      	ldr	r3, [r7, #24]
 80098a0:	f107 0217 	add.w	r2, r7, #23
 80098a4:	4611      	mov	r1, r2
 80098a6:	4618      	mov	r0, r3
 80098a8:	f000 fad0 	bl	8009e4c <lwip_netconn_is_err_msg>
 80098ac:	4603      	mov	r3, r0
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d009      	beq.n	80098c6 <netconn_recv_data+0x14a>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 80098b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80098b6:	f113 0f0f 	cmn.w	r3, #15
 80098ba:	d101      	bne.n	80098c0 <netconn_recv_data+0x144>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 80098bc:	2300      	movs	r3, #0
 80098be:	e022      	b.n	8009906 <netconn_recv_data+0x18a>
      }
      return err;
 80098c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80098c4:	e01f      	b.n	8009906 <netconn_recv_data+0x18a>
    }
    len = ((struct pbuf *)buf)->tot_len;
 80098c6:	69bb      	ldr	r3, [r7, #24]
 80098c8:	891b      	ldrh	r3, [r3, #8]
 80098ca:	83fb      	strh	r3, [r7, #30]
 80098cc:	e00d      	b.n	80098ea <netconn_recv_data+0x16e>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 80098ce:	69bb      	ldr	r3, [r7, #24]
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d106      	bne.n	80098e2 <netconn_recv_data+0x166>
 80098d4:	4b0e      	ldr	r3, [pc, #56]	@ (8009910 <netconn_recv_data+0x194>)
 80098d6:	f240 2291 	movw	r2, #657	@ 0x291
 80098da:	4911      	ldr	r1, [pc, #68]	@ (8009920 <netconn_recv_data+0x1a4>)
 80098dc:	480e      	ldr	r0, [pc, #56]	@ (8009918 <netconn_recv_data+0x19c>)
 80098de:	f00d f9a3 	bl	8016c28 <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 80098e2:	69bb      	ldr	r3, [r7, #24]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	891b      	ldrh	r3, [r3, #8]
 80098e8:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d005      	beq.n	80098fe <netconn_recv_data+0x182>
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098f6:	8bfa      	ldrh	r2, [r7, #30]
 80098f8:	2101      	movs	r1, #1
 80098fa:	68f8      	ldr	r0, [r7, #12]
 80098fc:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 80098fe:	69ba      	ldr	r2, [r7, #24]
 8009900:	68bb      	ldr	r3, [r7, #8]
 8009902:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 8009904:	2300      	movs	r3, #0
}
 8009906:	4618      	mov	r0, r3
 8009908:	3720      	adds	r7, #32
 800990a:	46bd      	mov	sp, r7
 800990c:	bd80      	pop	{r7, pc}
 800990e:	bf00      	nop
 8009910:	08017d68 	.word	0x08017d68
 8009914:	08017f80 	.word	0x08017f80
 8009918:	08017dc0 	.word	0x08017dc0
 800991c:	08017fa0 	.word	0x08017fa0
 8009920:	08017fbc 	.word	0x08017fbc

08009924 <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 8009924:	b580      	push	{r7, lr}
 8009926:	b084      	sub	sp, #16
 8009928:	af00      	add	r7, sp, #0
 800992a:	60f8      	str	r0, [r7, #12]
 800992c:	60b9      	str	r1, [r7, #8]
 800992e:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	2b00      	cmp	r3, #0
 8009934:	d005      	beq.n	8009942 <netconn_tcp_recvd_msg+0x1e>
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	781b      	ldrb	r3, [r3, #0]
 800993a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800993e:	2b10      	cmp	r3, #16
 8009940:	d009      	beq.n	8009956 <netconn_tcp_recvd_msg+0x32>
 8009942:	4b0c      	ldr	r3, [pc, #48]	@ (8009974 <netconn_tcp_recvd_msg+0x50>)
 8009944:	f240 22a7 	movw	r2, #679	@ 0x2a7
 8009948:	490b      	ldr	r1, [pc, #44]	@ (8009978 <netconn_tcp_recvd_msg+0x54>)
 800994a:	480c      	ldr	r0, [pc, #48]	@ (800997c <netconn_tcp_recvd_msg+0x58>)
 800994c:	f00d f96c 	bl	8016c28 <iprintf>
 8009950:	f06f 030f 	mvn.w	r3, #15
 8009954:	e00a      	b.n	800996c <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	68fa      	ldr	r2, [r7, #12]
 800995a:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	68ba      	ldr	r2, [r7, #8]
 8009960:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 8009962:	6879      	ldr	r1, [r7, #4]
 8009964:	4806      	ldr	r0, [pc, #24]	@ (8009980 <netconn_tcp_recvd_msg+0x5c>)
 8009966:	f7ff fd37 	bl	80093d8 <netconn_apimsg>
 800996a:	4603      	mov	r3, r0
}
 800996c:	4618      	mov	r0, r3
 800996e:	3710      	adds	r7, #16
 8009970:	46bd      	mov	sp, r7
 8009972:	bd80      	pop	{r7, pc}
 8009974:	08017d68 	.word	0x08017d68
 8009978:	08017fc8 	.word	0x08017fc8
 800997c:	08017dc0 	.word	0x08017dc0
 8009980:	0800af79 	.word	0x0800af79

08009984 <netconn_recv_data_tcp>:
  return err;
}

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 8009984:	b580      	push	{r7, lr}
 8009986:	b090      	sub	sp, #64	@ 0x40
 8009988:	af00      	add	r7, sp, #0
 800998a:	60f8      	str	r0, [r7, #12]
 800998c:	60b9      	str	r1, [r7, #8]
 800998e:	4613      	mov	r3, r2
 8009990:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	3310      	adds	r3, #16
 8009996:	4618      	mov	r0, r3
 8009998:	f00c ff1e 	bl	80167d8 <sys_mbox_valid>
 800999c:	4603      	mov	r3, r0
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d102      	bne.n	80099a8 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 80099a2:	f06f 030a 	mvn.w	r3, #10
 80099a6:	e072      	b.n	8009a8e <netconn_recv_data_tcp+0x10a>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80099ae:	b25b      	sxtb	r3, r3
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	da09      	bge.n	80099c8 <netconn_recv_data_tcp+0x44>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80099ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80099be:	b2da      	uxtb	r2, r3
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	f883 2020 	strb.w	r2, [r3, #32]
    goto handle_fin;
 80099c6:	e03b      	b.n	8009a40 <netconn_recv_data_tcp+0xbc>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 80099c8:	79fb      	ldrb	r3, [r7, #7]
 80099ca:	461a      	mov	r2, r3
 80099cc:	68b9      	ldr	r1, [r7, #8]
 80099ce:	68f8      	ldr	r0, [r7, #12]
 80099d0:	f7ff fed4 	bl	800977c <netconn_recv_data>
 80099d4:	4603      	mov	r3, r0
 80099d6:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  if (err != ERR_OK) {
 80099da:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d002      	beq.n	80099e8 <netconn_recv_data_tcp+0x64>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 80099e2:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 80099e6:	e052      	b.n	8009a8e <netconn_recv_data_tcp+0x10a>
  }
  buf = *new_buf;
 80099e8:	68bb      	ldr	r3, [r7, #8]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 80099ee:	79fb      	ldrb	r3, [r7, #7]
 80099f0:	f003 0308 	and.w	r3, r3, #8
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d10e      	bne.n	8009a16 <netconn_recv_data_tcp+0x92>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 80099f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d002      	beq.n	8009a04 <netconn_recv_data_tcp+0x80>
 80099fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a00:	891b      	ldrh	r3, [r3, #8]
 8009a02:	e000      	b.n	8009a06 <netconn_recv_data_tcp+0x82>
 8009a04:	2301      	movs	r3, #1
 8009a06:	86fb      	strh	r3, [r7, #54]	@ 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 8009a08:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8009a0a:	f107 0214 	add.w	r2, r7, #20
 8009a0e:	4619      	mov	r1, r3
 8009a10:	68f8      	ldr	r0, [r7, #12]
 8009a12:	f7ff ff87 	bl	8009924 <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 8009a16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d136      	bne.n	8009a8a <netconn_recv_data_tcp+0x106>
    if (apiflags & NETCONN_NOFIN) {
 8009a1c:	79fb      	ldrb	r3, [r7, #7]
 8009a1e:	f003 0310 	and.w	r3, r3, #16
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d00b      	beq.n	8009a3e <netconn_recv_data_tcp+0xba>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009a2c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009a30:	b2da      	uxtb	r2, r3
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	f883 2020 	strb.w	r2, [r3, #32]
      return ERR_WOULDBLOCK;
 8009a38:	f06f 0306 	mvn.w	r3, #6
 8009a3c:	e027      	b.n	8009a8e <netconn_recv_data_tcp+0x10a>
    } else {
handle_fin:
 8009a3e:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d005      	beq.n	8009a54 <netconn_recv_data_tcp+0xd0>
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a4c:	2200      	movs	r2, #0
 8009a4e:	2101      	movs	r1, #1
 8009a50:	68f8      	ldr	r0, [r7, #12]
 8009a52:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	685b      	ldr	r3, [r3, #4]
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d10f      	bne.n	8009a7c <netconn_recv_data_tcp+0xf8>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 8009a5c:	68f8      	ldr	r0, [r7, #12]
 8009a5e:	f000 f9a4 	bl	8009daa <netconn_err>
 8009a62:	4603      	mov	r3, r0
 8009a64:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        if (err != ERR_OK) {
 8009a68:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d002      	beq.n	8009a76 <netconn_recv_data_tcp+0xf2>
          return err;
 8009a70:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8009a74:	e00b      	b.n	8009a8e <netconn_recv_data_tcp+0x10a>
        }
        return ERR_RST;
 8009a76:	f06f 030d 	mvn.w	r3, #13
 8009a7a:	e008      	b.n	8009a8e <netconn_recv_data_tcp+0x10a>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 8009a7c:	2101      	movs	r1, #1
 8009a7e:	68f8      	ldr	r0, [r7, #12]
 8009a80:	f000 f956 	bl	8009d30 <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 8009a84:	f06f 030e 	mvn.w	r3, #14
 8009a88:	e001      	b.n	8009a8e <netconn_recv_data_tcp+0x10a>
    }
  }
  return err;
 8009a8a:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 8009a8e:	4618      	mov	r0, r3
 8009a90:	3740      	adds	r7, #64	@ 0x40
 8009a92:	46bd      	mov	sp, r7
 8009a94:	bd80      	pop	{r7, pc}
	...

08009a98 <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 8009a98:	b580      	push	{r7, lr}
 8009a9a:	b086      	sub	sp, #24
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	6078      	str	r0, [r7, #4]
 8009aa0:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 8009aa2:	2300      	movs	r3, #0
 8009aa4:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8009aa6:	683b      	ldr	r3, [r7, #0]
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d109      	bne.n	8009ac0 <netconn_recv+0x28>
 8009aac:	4b32      	ldr	r3, [pc, #200]	@ (8009b78 <netconn_recv+0xe0>)
 8009aae:	f240 3263 	movw	r2, #867	@ 0x363
 8009ab2:	4932      	ldr	r1, [pc, #200]	@ (8009b7c <netconn_recv+0xe4>)
 8009ab4:	4832      	ldr	r0, [pc, #200]	@ (8009b80 <netconn_recv+0xe8>)
 8009ab6:	f00d f8b7 	bl	8016c28 <iprintf>
 8009aba:	f06f 030f 	mvn.w	r3, #15
 8009abe:	e056      	b.n	8009b6e <netconn_recv+0xd6>
  *new_buf = NULL;
 8009ac0:	683b      	ldr	r3, [r7, #0]
 8009ac2:	2200      	movs	r2, #0
 8009ac4:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d109      	bne.n	8009ae0 <netconn_recv+0x48>
 8009acc:	4b2a      	ldr	r3, [pc, #168]	@ (8009b78 <netconn_recv+0xe0>)
 8009ace:	f240 3265 	movw	r2, #869	@ 0x365
 8009ad2:	492c      	ldr	r1, [pc, #176]	@ (8009b84 <netconn_recv+0xec>)
 8009ad4:	482a      	ldr	r0, [pc, #168]	@ (8009b80 <netconn_recv+0xe8>)
 8009ad6:	f00d f8a7 	bl	8016c28 <iprintf>
 8009ada:	f06f 030f 	mvn.w	r3, #15
 8009ade:	e046      	b.n	8009b6e <netconn_recv+0xd6>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	781b      	ldrb	r3, [r3, #0]
 8009ae4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009ae8:	2b10      	cmp	r3, #16
 8009aea:	d13a      	bne.n	8009b62 <netconn_recv+0xca>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 8009aec:	2300      	movs	r3, #0
 8009aee:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8009af0:	2006      	movs	r0, #6
 8009af2:	f002 fc3f 	bl	800c374 <memp_malloc>
 8009af6:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 8009af8:	697b      	ldr	r3, [r7, #20]
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d102      	bne.n	8009b04 <netconn_recv+0x6c>
      return ERR_MEM;
 8009afe:	f04f 33ff 	mov.w	r3, #4294967295
 8009b02:	e034      	b.n	8009b6e <netconn_recv+0xd6>
    }

    err = netconn_recv_data_tcp(conn, &p, 0);
 8009b04:	f107 030c 	add.w	r3, r7, #12
 8009b08:	2200      	movs	r2, #0
 8009b0a:	4619      	mov	r1, r3
 8009b0c:	6878      	ldr	r0, [r7, #4]
 8009b0e:	f7ff ff39 	bl	8009984 <netconn_recv_data_tcp>
 8009b12:	4603      	mov	r3, r0
 8009b14:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8009b16:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d006      	beq.n	8009b2c <netconn_recv+0x94>
      memp_free(MEMP_NETBUF, buf);
 8009b1e:	6979      	ldr	r1, [r7, #20]
 8009b20:	2006      	movs	r0, #6
 8009b22:	f002 fc9d 	bl	800c460 <memp_free>
      return err;
 8009b26:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009b2a:	e020      	b.n	8009b6e <netconn_recv+0xd6>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d106      	bne.n	8009b40 <netconn_recv+0xa8>
 8009b32:	4b11      	ldr	r3, [pc, #68]	@ (8009b78 <netconn_recv+0xe0>)
 8009b34:	f240 3279 	movw	r2, #889	@ 0x379
 8009b38:	4913      	ldr	r1, [pc, #76]	@ (8009b88 <netconn_recv+0xf0>)
 8009b3a:	4811      	ldr	r0, [pc, #68]	@ (8009b80 <netconn_recv+0xe8>)
 8009b3c:	f00d f874 	bl	8016c28 <iprintf>

    buf->p = p;
 8009b40:	68fa      	ldr	r2, [r7, #12]
 8009b42:	697b      	ldr	r3, [r7, #20]
 8009b44:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 8009b46:	68fa      	ldr	r2, [r7, #12]
 8009b48:	697b      	ldr	r3, [r7, #20]
 8009b4a:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 8009b4c:	697b      	ldr	r3, [r7, #20]
 8009b4e:	2200      	movs	r2, #0
 8009b50:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 8009b52:	697b      	ldr	r3, [r7, #20]
 8009b54:	2200      	movs	r2, #0
 8009b56:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 8009b58:	683b      	ldr	r3, [r7, #0]
 8009b5a:	697a      	ldr	r2, [r7, #20]
 8009b5c:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 8009b5e:	2300      	movs	r3, #0
 8009b60:	e005      	b.n	8009b6e <netconn_recv+0xd6>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf, 0);
 8009b62:	2200      	movs	r2, #0
 8009b64:	6839      	ldr	r1, [r7, #0]
 8009b66:	6878      	ldr	r0, [r7, #4]
 8009b68:	f7ff fe08 	bl	800977c <netconn_recv_data>
 8009b6c:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 8009b6e:	4618      	mov	r0, r3
 8009b70:	3718      	adds	r7, #24
 8009b72:	46bd      	mov	sp, r7
 8009b74:	bd80      	pop	{r7, pc}
 8009b76:	bf00      	nop
 8009b78:	08017d68 	.word	0x08017d68
 8009b7c:	08017f80 	.word	0x08017f80
 8009b80:	08017dc0 	.word	0x08017dc0
 8009b84:	08017fa0 	.word	0x08017fa0
 8009b88:	08018018 	.word	0x08018018

08009b8c <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 8009b8c:	b580      	push	{r7, lr}
 8009b8e:	b088      	sub	sp, #32
 8009b90:	af02      	add	r7, sp, #8
 8009b92:	60f8      	str	r0, [r7, #12]
 8009b94:	60b9      	str	r1, [r7, #8]
 8009b96:	607a      	str	r2, [r7, #4]
 8009b98:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 8009b9a:	68bb      	ldr	r3, [r7, #8]
 8009b9c:	613b      	str	r3, [r7, #16]
  vector.len = size;
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 8009ba2:	78fa      	ldrb	r2, [r7, #3]
 8009ba4:	f107 0110 	add.w	r1, r7, #16
 8009ba8:	6a3b      	ldr	r3, [r7, #32]
 8009baa:	9300      	str	r3, [sp, #0]
 8009bac:	4613      	mov	r3, r2
 8009bae:	2201      	movs	r2, #1
 8009bb0:	68f8      	ldr	r0, [r7, #12]
 8009bb2:	f000 f805 	bl	8009bc0 <netconn_write_vectors_partly>
 8009bb6:	4603      	mov	r3, r0
}
 8009bb8:	4618      	mov	r0, r3
 8009bba:	3718      	adds	r7, #24
 8009bbc:	46bd      	mov	sp, r7
 8009bbe:	bd80      	pop	{r7, pc}

08009bc0 <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 8009bc0:	b580      	push	{r7, lr}
 8009bc2:	b092      	sub	sp, #72	@ 0x48
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	60f8      	str	r0, [r7, #12]
 8009bc8:	60b9      	str	r1, [r7, #8]
 8009bca:	4611      	mov	r1, r2
 8009bcc:	461a      	mov	r2, r3
 8009bce:	460b      	mov	r3, r1
 8009bd0:	80fb      	strh	r3, [r7, #6]
 8009bd2:	4613      	mov	r3, r2
 8009bd4:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d109      	bne.n	8009bf0 <netconn_write_vectors_partly+0x30>
 8009bdc:	4b4e      	ldr	r3, [pc, #312]	@ (8009d18 <netconn_write_vectors_partly+0x158>)
 8009bde:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 8009be2:	494e      	ldr	r1, [pc, #312]	@ (8009d1c <netconn_write_vectors_partly+0x15c>)
 8009be4:	484e      	ldr	r0, [pc, #312]	@ (8009d20 <netconn_write_vectors_partly+0x160>)
 8009be6:	f00d f81f 	bl	8016c28 <iprintf>
 8009bea:	f06f 030f 	mvn.w	r3, #15
 8009bee:	e08f      	b.n	8009d10 <netconn_write_vectors_partly+0x150>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	781b      	ldrb	r3, [r3, #0]
 8009bf4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009bf8:	2b10      	cmp	r3, #16
 8009bfa:	d009      	beq.n	8009c10 <netconn_write_vectors_partly+0x50>
 8009bfc:	4b46      	ldr	r3, [pc, #280]	@ (8009d18 <netconn_write_vectors_partly+0x158>)
 8009bfe:	f240 32ef 	movw	r2, #1007	@ 0x3ef
 8009c02:	4948      	ldr	r1, [pc, #288]	@ (8009d24 <netconn_write_vectors_partly+0x164>)
 8009c04:	4846      	ldr	r0, [pc, #280]	@ (8009d20 <netconn_write_vectors_partly+0x160>)
 8009c06:	f00d f80f 	bl	8016c28 <iprintf>
 8009c0a:	f06f 0305 	mvn.w	r3, #5
 8009c0e:	e07f      	b.n	8009d10 <netconn_write_vectors_partly+0x150>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009c16:	f003 0302 	and.w	r3, r3, #2
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d104      	bne.n	8009c28 <netconn_write_vectors_partly+0x68>
 8009c1e:	797b      	ldrb	r3, [r7, #5]
 8009c20:	f003 0304 	and.w	r3, r3, #4
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d001      	beq.n	8009c2c <netconn_write_vectors_partly+0x6c>
 8009c28:	2301      	movs	r3, #1
 8009c2a:	e000      	b.n	8009c2e <netconn_write_vectors_partly+0x6e>
 8009c2c:	2300      	movs	r3, #0
 8009c2e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 8009c32:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d005      	beq.n	8009c46 <netconn_write_vectors_partly+0x86>
 8009c3a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d102      	bne.n	8009c46 <netconn_write_vectors_partly+0x86>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 8009c40:	f06f 0305 	mvn.w	r3, #5
 8009c44:	e064      	b.n	8009d10 <netconn_write_vectors_partly+0x150>
  }

  /* sum up the total size */
  size = 0;
 8009c46:	2300      	movs	r3, #0
 8009c48:	647b      	str	r3, [r7, #68]	@ 0x44
  for (i = 0; i < vectorcnt; i++) {
 8009c4a:	2300      	movs	r3, #0
 8009c4c:	643b      	str	r3, [r7, #64]	@ 0x40
 8009c4e:	e015      	b.n	8009c7c <netconn_write_vectors_partly+0xbc>
    size += vectors[i].len;
 8009c50:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009c52:	00db      	lsls	r3, r3, #3
 8009c54:	68ba      	ldr	r2, [r7, #8]
 8009c56:	4413      	add	r3, r2
 8009c58:	685b      	ldr	r3, [r3, #4]
 8009c5a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009c5c:	4413      	add	r3, r2
 8009c5e:	647b      	str	r3, [r7, #68]	@ 0x44
    if (size < vectors[i].len) {
 8009c60:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009c62:	00db      	lsls	r3, r3, #3
 8009c64:	68ba      	ldr	r2, [r7, #8]
 8009c66:	4413      	add	r3, r2
 8009c68:	685b      	ldr	r3, [r3, #4]
 8009c6a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009c6c:	429a      	cmp	r2, r3
 8009c6e:	d202      	bcs.n	8009c76 <netconn_write_vectors_partly+0xb6>
      /* overflow */
      return ERR_VAL;
 8009c70:	f06f 0305 	mvn.w	r3, #5
 8009c74:	e04c      	b.n	8009d10 <netconn_write_vectors_partly+0x150>
  for (i = 0; i < vectorcnt; i++) {
 8009c76:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009c78:	3301      	adds	r3, #1
 8009c7a:	643b      	str	r3, [r7, #64]	@ 0x40
 8009c7c:	88fb      	ldrh	r3, [r7, #6]
 8009c7e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009c80:	429a      	cmp	r2, r3
 8009c82:	dbe5      	blt.n	8009c50 <netconn_write_vectors_partly+0x90>
    }
  }
  if (size == 0) {
 8009c84:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d101      	bne.n	8009c8e <netconn_write_vectors_partly+0xce>
    return ERR_OK;
 8009c8a:	2300      	movs	r3, #0
 8009c8c:	e040      	b.n	8009d10 <netconn_write_vectors_partly+0x150>
  } else if (size > SSIZE_MAX) {
 8009c8e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	da0a      	bge.n	8009caa <netconn_write_vectors_partly+0xea>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 8009c94:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d102      	bne.n	8009ca0 <netconn_write_vectors_partly+0xe0>
      return ERR_VAL;
 8009c9a:	f06f 0305 	mvn.w	r3, #5
 8009c9e:	e037      	b.n	8009d10 <netconn_write_vectors_partly+0x150>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 8009ca0:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8009ca4:	63bb      	str	r3, [r7, #56]	@ 0x38
    size = (size_t)limited;
 8009ca6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ca8:	647b      	str	r3, [r7, #68]	@ 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 8009cae:	68bb      	ldr	r3, [r7, #8]
 8009cb0:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 8009cb2:	88fb      	ldrh	r3, [r7, #6]
 8009cb4:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 8009cb6:	2300      	movs	r3, #0
 8009cb8:	627b      	str	r3, [r7, #36]	@ 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 8009cba:	797b      	ldrb	r3, [r7, #5]
 8009cbc:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 8009cc0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009cc2:	62bb      	str	r3, [r7, #40]	@ 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 8009cc4:	2300      	movs	r3, #0
 8009cc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 8009cc8:	f107 0314 	add.w	r3, r7, #20
 8009ccc:	4619      	mov	r1, r3
 8009cce:	4816      	ldr	r0, [pc, #88]	@ (8009d28 <netconn_write_vectors_partly+0x168>)
 8009cd0:	f7ff fb82 	bl	80093d8 <netconn_apimsg>
 8009cd4:	4603      	mov	r3, r0
 8009cd6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  if (err == ERR_OK) {
 8009cda:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d114      	bne.n	8009d0c <netconn_write_vectors_partly+0x14c>
    if (bytes_written != NULL) {
 8009ce2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d002      	beq.n	8009cee <netconn_write_vectors_partly+0x12e>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 8009ce8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009cea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009cec:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 8009cee:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d10a      	bne.n	8009d0c <netconn_write_vectors_partly+0x14c>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 8009cf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009cf8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009cfa:	429a      	cmp	r2, r3
 8009cfc:	d006      	beq.n	8009d0c <netconn_write_vectors_partly+0x14c>
 8009cfe:	4b06      	ldr	r3, [pc, #24]	@ (8009d18 <netconn_write_vectors_partly+0x158>)
 8009d00:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 8009d04:	4909      	ldr	r1, [pc, #36]	@ (8009d2c <netconn_write_vectors_partly+0x16c>)
 8009d06:	4806      	ldr	r0, [pc, #24]	@ (8009d20 <netconn_write_vectors_partly+0x160>)
 8009d08:	f00c ff8e 	bl	8016c28 <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 8009d0c:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 8009d10:	4618      	mov	r0, r3
 8009d12:	3748      	adds	r7, #72	@ 0x48
 8009d14:	46bd      	mov	sp, r7
 8009d16:	bd80      	pop	{r7, pc}
 8009d18:	08017d68 	.word	0x08017d68
 8009d1c:	08018040 	.word	0x08018040
 8009d20:	08017dc0 	.word	0x08017dc0
 8009d24:	0801805c 	.word	0x0801805c
 8009d28:	0800b385 	.word	0x0800b385
 8009d2c:	08018080 	.word	0x08018080

08009d30 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 8009d30:	b580      	push	{r7, lr}
 8009d32:	b08c      	sub	sp, #48	@ 0x30
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	6078      	str	r0, [r7, #4]
 8009d38:	460b      	mov	r3, r1
 8009d3a:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d109      	bne.n	8009d56 <netconn_close_shutdown+0x26>
 8009d42:	4b0f      	ldr	r3, [pc, #60]	@ (8009d80 <netconn_close_shutdown+0x50>)
 8009d44:	f240 4247 	movw	r2, #1095	@ 0x447
 8009d48:	490e      	ldr	r1, [pc, #56]	@ (8009d84 <netconn_close_shutdown+0x54>)
 8009d4a:	480f      	ldr	r0, [pc, #60]	@ (8009d88 <netconn_close_shutdown+0x58>)
 8009d4c:	f00c ff6c 	bl	8016c28 <iprintf>
 8009d50:	f06f 030f 	mvn.w	r3, #15
 8009d54:	e010      	b.n	8009d78 <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 8009d5a:	78fb      	ldrb	r3, [r7, #3]
 8009d5c:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8009d5e:	2329      	movs	r3, #41	@ 0x29
 8009d60:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 8009d62:	f107 030c 	add.w	r3, r7, #12
 8009d66:	4619      	mov	r1, r3
 8009d68:	4808      	ldr	r0, [pc, #32]	@ (8009d8c <netconn_close_shutdown+0x5c>)
 8009d6a:	f7ff fb35 	bl	80093d8 <netconn_apimsg>
 8009d6e:	4603      	mov	r3, r0
 8009d70:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8009d74:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 8009d78:	4618      	mov	r0, r3
 8009d7a:	3730      	adds	r7, #48	@ 0x30
 8009d7c:	46bd      	mov	sp, r7
 8009d7e:	bd80      	pop	{r7, pc}
 8009d80:	08017d68 	.word	0x08017d68
 8009d84:	080180a4 	.word	0x080180a4
 8009d88:	08017dc0 	.word	0x08017dc0
 8009d8c:	0800b49d 	.word	0x0800b49d

08009d90 <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
 8009d90:	b580      	push	{r7, lr}
 8009d92:	b082      	sub	sp, #8
 8009d94:	af00      	add	r7, sp, #0
 8009d96:	6078      	str	r0, [r7, #4]
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 8009d98:	2103      	movs	r1, #3
 8009d9a:	6878      	ldr	r0, [r7, #4]
 8009d9c:	f7ff ffc8 	bl	8009d30 <netconn_close_shutdown>
 8009da0:	4603      	mov	r3, r0
}
 8009da2:	4618      	mov	r0, r3
 8009da4:	3708      	adds	r7, #8
 8009da6:	46bd      	mov	sp, r7
 8009da8:	bd80      	pop	{r7, pc}

08009daa <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 8009daa:	b580      	push	{r7, lr}
 8009dac:	b084      	sub	sp, #16
 8009dae:	af00      	add	r7, sp, #0
 8009db0:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d101      	bne.n	8009dbc <netconn_err+0x12>
    return ERR_OK;
 8009db8:	2300      	movs	r3, #0
 8009dba:	e00d      	b.n	8009dd8 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 8009dbc:	f00c fe16 	bl	80169ec <sys_arch_protect>
 8009dc0:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	7a1b      	ldrb	r3, [r3, #8]
 8009dc6:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	2200      	movs	r2, #0
 8009dcc:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 8009dce:	68f8      	ldr	r0, [r7, #12]
 8009dd0:	f00c fe1a 	bl	8016a08 <sys_arch_unprotect>
  return err;
 8009dd4:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8009dd8:	4618      	mov	r0, r3
 8009dda:	3710      	adds	r7, #16
 8009ddc:	46bd      	mov	sp, r7
 8009dde:	bd80      	pop	{r7, pc}

08009de0 <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 8009de0:	b580      	push	{r7, lr}
 8009de2:	b082      	sub	sp, #8
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	4603      	mov	r3, r0
 8009de8:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 8009dea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009dee:	f113 0f0d 	cmn.w	r3, #13
 8009df2:	d009      	beq.n	8009e08 <lwip_netconn_err_to_msg+0x28>
 8009df4:	f113 0f0d 	cmn.w	r3, #13
 8009df8:	dc0c      	bgt.n	8009e14 <lwip_netconn_err_to_msg+0x34>
 8009dfa:	f113 0f0f 	cmn.w	r3, #15
 8009dfe:	d007      	beq.n	8009e10 <lwip_netconn_err_to_msg+0x30>
 8009e00:	f113 0f0e 	cmn.w	r3, #14
 8009e04:	d002      	beq.n	8009e0c <lwip_netconn_err_to_msg+0x2c>
 8009e06:	e005      	b.n	8009e14 <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 8009e08:	4b0a      	ldr	r3, [pc, #40]	@ (8009e34 <lwip_netconn_err_to_msg+0x54>)
 8009e0a:	e00e      	b.n	8009e2a <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 8009e0c:	4b0a      	ldr	r3, [pc, #40]	@ (8009e38 <lwip_netconn_err_to_msg+0x58>)
 8009e0e:	e00c      	b.n	8009e2a <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 8009e10:	4b0a      	ldr	r3, [pc, #40]	@ (8009e3c <lwip_netconn_err_to_msg+0x5c>)
 8009e12:	e00a      	b.n	8009e2a <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 8009e14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d005      	beq.n	8009e28 <lwip_netconn_err_to_msg+0x48>
 8009e1c:	4b08      	ldr	r3, [pc, #32]	@ (8009e40 <lwip_netconn_err_to_msg+0x60>)
 8009e1e:	227d      	movs	r2, #125	@ 0x7d
 8009e20:	4908      	ldr	r1, [pc, #32]	@ (8009e44 <lwip_netconn_err_to_msg+0x64>)
 8009e22:	4809      	ldr	r0, [pc, #36]	@ (8009e48 <lwip_netconn_err_to_msg+0x68>)
 8009e24:	f00c ff00 	bl	8016c28 <iprintf>
      return NULL;
 8009e28:	2300      	movs	r3, #0
  }
}
 8009e2a:	4618      	mov	r0, r3
 8009e2c:	3708      	adds	r7, #8
 8009e2e:	46bd      	mov	sp, r7
 8009e30:	bd80      	pop	{r7, pc}
 8009e32:	bf00      	nop
 8009e34:	0801b280 	.word	0x0801b280
 8009e38:	0801b281 	.word	0x0801b281
 8009e3c:	0801b282 	.word	0x0801b282
 8009e40:	080180c0 	.word	0x080180c0
 8009e44:	080180f4 	.word	0x080180f4
 8009e48:	08018104 	.word	0x08018104

08009e4c <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 8009e4c:	b580      	push	{r7, lr}
 8009e4e:	b082      	sub	sp, #8
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	6078      	str	r0, [r7, #4]
 8009e54:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 8009e56:	683b      	ldr	r3, [r7, #0]
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d105      	bne.n	8009e68 <lwip_netconn_is_err_msg+0x1c>
 8009e5c:	4b12      	ldr	r3, [pc, #72]	@ (8009ea8 <lwip_netconn_is_err_msg+0x5c>)
 8009e5e:	2285      	movs	r2, #133	@ 0x85
 8009e60:	4912      	ldr	r1, [pc, #72]	@ (8009eac <lwip_netconn_is_err_msg+0x60>)
 8009e62:	4813      	ldr	r0, [pc, #76]	@ (8009eb0 <lwip_netconn_is_err_msg+0x64>)
 8009e64:	f00c fee0 	bl	8016c28 <iprintf>

  if (msg == &netconn_aborted) {
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	4a12      	ldr	r2, [pc, #72]	@ (8009eb4 <lwip_netconn_is_err_msg+0x68>)
 8009e6c:	4293      	cmp	r3, r2
 8009e6e:	d104      	bne.n	8009e7a <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 8009e70:	683b      	ldr	r3, [r7, #0]
 8009e72:	22f3      	movs	r2, #243	@ 0xf3
 8009e74:	701a      	strb	r2, [r3, #0]
    return 1;
 8009e76:	2301      	movs	r3, #1
 8009e78:	e012      	b.n	8009ea0 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	4a0e      	ldr	r2, [pc, #56]	@ (8009eb8 <lwip_netconn_is_err_msg+0x6c>)
 8009e7e:	4293      	cmp	r3, r2
 8009e80:	d104      	bne.n	8009e8c <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 8009e82:	683b      	ldr	r3, [r7, #0]
 8009e84:	22f2      	movs	r2, #242	@ 0xf2
 8009e86:	701a      	strb	r2, [r3, #0]
    return 1;
 8009e88:	2301      	movs	r3, #1
 8009e8a:	e009      	b.n	8009ea0 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	4a0b      	ldr	r2, [pc, #44]	@ (8009ebc <lwip_netconn_is_err_msg+0x70>)
 8009e90:	4293      	cmp	r3, r2
 8009e92:	d104      	bne.n	8009e9e <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 8009e94:	683b      	ldr	r3, [r7, #0]
 8009e96:	22f1      	movs	r2, #241	@ 0xf1
 8009e98:	701a      	strb	r2, [r3, #0]
    return 1;
 8009e9a:	2301      	movs	r3, #1
 8009e9c:	e000      	b.n	8009ea0 <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 8009e9e:	2300      	movs	r3, #0
}
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	3708      	adds	r7, #8
 8009ea4:	46bd      	mov	sp, r7
 8009ea6:	bd80      	pop	{r7, pc}
 8009ea8:	080180c0 	.word	0x080180c0
 8009eac:	0801812c 	.word	0x0801812c
 8009eb0:	08018104 	.word	0x08018104
 8009eb4:	0801b280 	.word	0x0801b280
 8009eb8:	0801b281 	.word	0x0801b281
 8009ebc:	0801b282 	.word	0x0801b282

08009ec0 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 8009ec0:	b580      	push	{r7, lr}
 8009ec2:	b088      	sub	sp, #32
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	60f8      	str	r0, [r7, #12]
 8009ec8:	60b9      	str	r1, [r7, #8]
 8009eca:	607a      	str	r2, [r7, #4]
 8009ecc:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 8009ece:	68bb      	ldr	r3, [r7, #8]
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d105      	bne.n	8009ee0 <recv_udp+0x20>
 8009ed4:	4b34      	ldr	r3, [pc, #208]	@ (8009fa8 <recv_udp+0xe8>)
 8009ed6:	22e5      	movs	r2, #229	@ 0xe5
 8009ed8:	4934      	ldr	r1, [pc, #208]	@ (8009fac <recv_udp+0xec>)
 8009eda:	4835      	ldr	r0, [pc, #212]	@ (8009fb0 <recv_udp+0xf0>)
 8009edc:	f00c fea4 	bl	8016c28 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d105      	bne.n	8009ef2 <recv_udp+0x32>
 8009ee6:	4b30      	ldr	r3, [pc, #192]	@ (8009fa8 <recv_udp+0xe8>)
 8009ee8:	22e6      	movs	r2, #230	@ 0xe6
 8009eea:	4932      	ldr	r1, [pc, #200]	@ (8009fb4 <recv_udp+0xf4>)
 8009eec:	4830      	ldr	r0, [pc, #192]	@ (8009fb0 <recv_udp+0xf0>)
 8009eee:	f00c fe9b 	bl	8016c28 <iprintf>
  conn = (struct netconn *)arg;
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 8009ef6:	69fb      	ldr	r3, [r7, #28]
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d103      	bne.n	8009f04 <recv_udp+0x44>
    pbuf_free(p);
 8009efc:	6878      	ldr	r0, [r7, #4]
 8009efe:	f003 f953 	bl	800d1a8 <pbuf_free>
    return;
 8009f02:	e04d      	b.n	8009fa0 <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 8009f04:	69fb      	ldr	r3, [r7, #28]
 8009f06:	685b      	ldr	r3, [r3, #4]
 8009f08:	68ba      	ldr	r2, [r7, #8]
 8009f0a:	429a      	cmp	r2, r3
 8009f0c:	d005      	beq.n	8009f1a <recv_udp+0x5a>
 8009f0e:	4b26      	ldr	r3, [pc, #152]	@ (8009fa8 <recv_udp+0xe8>)
 8009f10:	22ee      	movs	r2, #238	@ 0xee
 8009f12:	4929      	ldr	r1, [pc, #164]	@ (8009fb8 <recv_udp+0xf8>)
 8009f14:	4826      	ldr	r0, [pc, #152]	@ (8009fb0 <recv_udp+0xf0>)
 8009f16:	f00c fe87 	bl	8016c28 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8009f1a:	69fb      	ldr	r3, [r7, #28]
 8009f1c:	3310      	adds	r3, #16
 8009f1e:	4618      	mov	r0, r3
 8009f20:	f00c fc5a 	bl	80167d8 <sys_mbox_valid>
 8009f24:	4603      	mov	r3, r0
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d103      	bne.n	8009f32 <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 8009f2a:	6878      	ldr	r0, [r7, #4]
 8009f2c:	f003 f93c 	bl	800d1a8 <pbuf_free>
    return;
 8009f30:	e036      	b.n	8009fa0 <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8009f32:	2006      	movs	r0, #6
 8009f34:	f002 fa1e 	bl	800c374 <memp_malloc>
 8009f38:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 8009f3a:	69bb      	ldr	r3, [r7, #24]
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d103      	bne.n	8009f48 <recv_udp+0x88>
    pbuf_free(p);
 8009f40:	6878      	ldr	r0, [r7, #4]
 8009f42:	f003 f931 	bl	800d1a8 <pbuf_free>
    return;
 8009f46:	e02b      	b.n	8009fa0 <recv_udp+0xe0>
  } else {
    buf->p = p;
 8009f48:	69bb      	ldr	r3, [r7, #24]
 8009f4a:	687a      	ldr	r2, [r7, #4]
 8009f4c:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 8009f4e:	69bb      	ldr	r3, [r7, #24]
 8009f50:	687a      	ldr	r2, [r7, #4]
 8009f52:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 8009f54:	683b      	ldr	r3, [r7, #0]
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d002      	beq.n	8009f60 <recv_udp+0xa0>
 8009f5a:	683b      	ldr	r3, [r7, #0]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	e000      	b.n	8009f62 <recv_udp+0xa2>
 8009f60:	2300      	movs	r3, #0
 8009f62:	69ba      	ldr	r2, [r7, #24]
 8009f64:	6093      	str	r3, [r2, #8]
    buf->port = port;
 8009f66:	69bb      	ldr	r3, [r7, #24]
 8009f68:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8009f6a:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	891b      	ldrh	r3, [r3, #8]
 8009f70:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 8009f72:	69fb      	ldr	r3, [r7, #28]
 8009f74:	3310      	adds	r3, #16
 8009f76:	69b9      	ldr	r1, [r7, #24]
 8009f78:	4618      	mov	r0, r3
 8009f7a:	f00c fbcb 	bl	8016714 <sys_mbox_trypost>
 8009f7e:	4603      	mov	r3, r0
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d003      	beq.n	8009f8c <recv_udp+0xcc>
    netbuf_delete(buf);
 8009f84:	69b8      	ldr	r0, [r7, #24]
 8009f86:	f001 fb15 	bl	800b5b4 <netbuf_delete>
    return;
 8009f8a:	e009      	b.n	8009fa0 <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8009f8c:	69fb      	ldr	r3, [r7, #28]
 8009f8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d005      	beq.n	8009fa0 <recv_udp+0xe0>
 8009f94:	69fb      	ldr	r3, [r7, #28]
 8009f96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f98:	8afa      	ldrh	r2, [r7, #22]
 8009f9a:	2100      	movs	r1, #0
 8009f9c:	69f8      	ldr	r0, [r7, #28]
 8009f9e:	4798      	blx	r3
  }
}
 8009fa0:	3720      	adds	r7, #32
 8009fa2:	46bd      	mov	sp, r7
 8009fa4:	bd80      	pop	{r7, pc}
 8009fa6:	bf00      	nop
 8009fa8:	080180c0 	.word	0x080180c0
 8009fac:	08018138 	.word	0x08018138
 8009fb0:	08018104 	.word	0x08018104
 8009fb4:	0801815c 	.word	0x0801815c
 8009fb8:	0801817c 	.word	0x0801817c

08009fbc <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8009fbc:	b580      	push	{r7, lr}
 8009fbe:	b088      	sub	sp, #32
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	60f8      	str	r0, [r7, #12]
 8009fc4:	60b9      	str	r1, [r7, #8]
 8009fc6:	607a      	str	r2, [r7, #4]
 8009fc8:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 8009fca:	68bb      	ldr	r3, [r7, #8]
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d106      	bne.n	8009fde <recv_tcp+0x22>
 8009fd0:	4b36      	ldr	r3, [pc, #216]	@ (800a0ac <recv_tcp+0xf0>)
 8009fd2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8009fd6:	4936      	ldr	r1, [pc, #216]	@ (800a0b0 <recv_tcp+0xf4>)
 8009fd8:	4836      	ldr	r0, [pc, #216]	@ (800a0b4 <recv_tcp+0xf8>)
 8009fda:	f00c fe25 	bl	8016c28 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d106      	bne.n	8009ff2 <recv_tcp+0x36>
 8009fe4:	4b31      	ldr	r3, [pc, #196]	@ (800a0ac <recv_tcp+0xf0>)
 8009fe6:	f240 122d 	movw	r2, #301	@ 0x12d
 8009fea:	4933      	ldr	r1, [pc, #204]	@ (800a0b8 <recv_tcp+0xfc>)
 8009fec:	4831      	ldr	r0, [pc, #196]	@ (800a0b4 <recv_tcp+0xf8>)
 8009fee:	f00c fe1b 	bl	8016c28 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 8009ff2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d006      	beq.n	800a008 <recv_tcp+0x4c>
 8009ffa:	4b2c      	ldr	r3, [pc, #176]	@ (800a0ac <recv_tcp+0xf0>)
 8009ffc:	f44f 7297 	mov.w	r2, #302	@ 0x12e
 800a000:	492e      	ldr	r1, [pc, #184]	@ (800a0bc <recv_tcp+0x100>)
 800a002:	482c      	ldr	r0, [pc, #176]	@ (800a0b4 <recv_tcp+0xf8>)
 800a004:	f00c fe10 	bl	8016c28 <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 800a00c:	697b      	ldr	r3, [r7, #20]
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d102      	bne.n	800a018 <recv_tcp+0x5c>
    return ERR_VAL;
 800a012:	f06f 0305 	mvn.w	r3, #5
 800a016:	e045      	b.n	800a0a4 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 800a018:	697b      	ldr	r3, [r7, #20]
 800a01a:	685b      	ldr	r3, [r3, #4]
 800a01c:	68ba      	ldr	r2, [r7, #8]
 800a01e:	429a      	cmp	r2, r3
 800a020:	d006      	beq.n	800a030 <recv_tcp+0x74>
 800a022:	4b22      	ldr	r3, [pc, #136]	@ (800a0ac <recv_tcp+0xf0>)
 800a024:	f240 1235 	movw	r2, #309	@ 0x135
 800a028:	4925      	ldr	r1, [pc, #148]	@ (800a0c0 <recv_tcp+0x104>)
 800a02a:	4822      	ldr	r0, [pc, #136]	@ (800a0b4 <recv_tcp+0xf8>)
 800a02c:	f00c fdfc 	bl	8016c28 <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800a030:	697b      	ldr	r3, [r7, #20]
 800a032:	3310      	adds	r3, #16
 800a034:	4618      	mov	r0, r3
 800a036:	f00c fbcf 	bl	80167d8 <sys_mbox_valid>
 800a03a:	4603      	mov	r3, r0
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d10d      	bne.n	800a05c <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	2b00      	cmp	r3, #0
 800a044:	d008      	beq.n	800a058 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	891b      	ldrh	r3, [r3, #8]
 800a04a:	4619      	mov	r1, r3
 800a04c:	68b8      	ldr	r0, [r7, #8]
 800a04e:	f004 f885 	bl	800e15c <tcp_recved>
      pbuf_free(p);
 800a052:	6878      	ldr	r0, [r7, #4]
 800a054:	f003 f8a8 	bl	800d1a8 <pbuf_free>
    }
    return ERR_OK;
 800a058:	2300      	movs	r3, #0
 800a05a:	e023      	b.n	800a0a4 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d005      	beq.n	800a06e <recv_tcp+0xb2>
    msg = p;
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	891b      	ldrh	r3, [r3, #8]
 800a06a:	83fb      	strh	r3, [r7, #30]
 800a06c:	e003      	b.n	800a076 <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 800a06e:	4b15      	ldr	r3, [pc, #84]	@ (800a0c4 <recv_tcp+0x108>)
 800a070:	61bb      	str	r3, [r7, #24]
    len = 0;
 800a072:	2300      	movs	r3, #0
 800a074:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 800a076:	697b      	ldr	r3, [r7, #20]
 800a078:	3310      	adds	r3, #16
 800a07a:	69b9      	ldr	r1, [r7, #24]
 800a07c:	4618      	mov	r0, r3
 800a07e:	f00c fb49 	bl	8016714 <sys_mbox_trypost>
 800a082:	4603      	mov	r3, r0
 800a084:	2b00      	cmp	r3, #0
 800a086:	d002      	beq.n	800a08e <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 800a088:	f04f 33ff 	mov.w	r3, #4294967295
 800a08c:	e00a      	b.n	800a0a4 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800a08e:	697b      	ldr	r3, [r7, #20]
 800a090:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a092:	2b00      	cmp	r3, #0
 800a094:	d005      	beq.n	800a0a2 <recv_tcp+0xe6>
 800a096:	697b      	ldr	r3, [r7, #20]
 800a098:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a09a:	8bfa      	ldrh	r2, [r7, #30]
 800a09c:	2100      	movs	r1, #0
 800a09e:	6978      	ldr	r0, [r7, #20]
 800a0a0:	4798      	blx	r3
  }

  return ERR_OK;
 800a0a2:	2300      	movs	r3, #0
}
 800a0a4:	4618      	mov	r0, r3
 800a0a6:	3720      	adds	r7, #32
 800a0a8:	46bd      	mov	sp, r7
 800a0aa:	bd80      	pop	{r7, pc}
 800a0ac:	080180c0 	.word	0x080180c0
 800a0b0:	0801819c 	.word	0x0801819c
 800a0b4:	08018104 	.word	0x08018104
 800a0b8:	080181c0 	.word	0x080181c0
 800a0bc:	080181e0 	.word	0x080181e0
 800a0c0:	080181f8 	.word	0x080181f8
 800a0c4:	0801b282 	.word	0x0801b282

0800a0c8 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 800a0c8:	b580      	push	{r7, lr}
 800a0ca:	b084      	sub	sp, #16
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	6078      	str	r0, [r7, #4]
 800a0d0:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d106      	bne.n	800a0ea <poll_tcp+0x22>
 800a0dc:	4b2b      	ldr	r3, [pc, #172]	@ (800a18c <poll_tcp+0xc4>)
 800a0de:	f44f 72b5 	mov.w	r2, #362	@ 0x16a
 800a0e2:	492b      	ldr	r1, [pc, #172]	@ (800a190 <poll_tcp+0xc8>)
 800a0e4:	482b      	ldr	r0, [pc, #172]	@ (800a194 <poll_tcp+0xcc>)
 800a0e6:	f00c fd9f 	bl	8016c28 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	785b      	ldrb	r3, [r3, #1]
 800a0ee:	2b01      	cmp	r3, #1
 800a0f0:	d104      	bne.n	800a0fc <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800a0f2:	2101      	movs	r1, #1
 800a0f4:	68f8      	ldr	r0, [r7, #12]
 800a0f6:	f000 ff75 	bl	800afe4 <lwip_netconn_do_writemore>
 800a0fa:	e016      	b.n	800a12a <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	785b      	ldrb	r3, [r3, #1]
 800a100:	2b04      	cmp	r3, #4
 800a102:	d112      	bne.n	800a12a <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d00a      	beq.n	800a122 <poll_tcp+0x5a>
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a110:	7a5b      	ldrb	r3, [r3, #9]
 800a112:	2b00      	cmp	r3, #0
 800a114:	d005      	beq.n	800a122 <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a11a:	7a5a      	ldrb	r2, [r3, #9]
 800a11c:	3a01      	subs	r2, #1
 800a11e:	b2d2      	uxtb	r2, r2
 800a120:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800a122:	2101      	movs	r1, #1
 800a124:	68f8      	ldr	r0, [r7, #12]
 800a126:	f000 fc05 	bl	800a934 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a130:	f003 0310 	and.w	r3, r3, #16
 800a134:	2b00      	cmp	r3, #0
 800a136:	d023      	beq.n	800a180 <poll_tcp+0xb8>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	685b      	ldr	r3, [r3, #4]
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d01f      	beq.n	800a180 <poll_tcp+0xb8>
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	685b      	ldr	r3, [r3, #4]
 800a144:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800a148:	f5b3 6f86 	cmp.w	r3, #1072	@ 0x430
 800a14c:	d318      	bcc.n	800a180 <poll_tcp+0xb8>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	685b      	ldr	r3, [r3, #4]
 800a152:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800a156:	2b04      	cmp	r3, #4
 800a158:	d812      	bhi.n	800a180 <poll_tcp+0xb8>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a160:	f023 0310 	bic.w	r3, r3, #16
 800a164:	b2da      	uxtb	r2, r3
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	f883 2020 	strb.w	r2, [r3, #32]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a170:	2b00      	cmp	r3, #0
 800a172:	d005      	beq.n	800a180 <poll_tcp+0xb8>
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a178:	2200      	movs	r2, #0
 800a17a:	2102      	movs	r1, #2
 800a17c:	68f8      	ldr	r0, [r7, #12]
 800a17e:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800a180:	2300      	movs	r3, #0
}
 800a182:	4618      	mov	r0, r3
 800a184:	3710      	adds	r7, #16
 800a186:	46bd      	mov	sp, r7
 800a188:	bd80      	pop	{r7, pc}
 800a18a:	bf00      	nop
 800a18c:	080180c0 	.word	0x080180c0
 800a190:	08018218 	.word	0x08018218
 800a194:	08018104 	.word	0x08018104

0800a198 <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 800a198:	b580      	push	{r7, lr}
 800a19a:	b086      	sub	sp, #24
 800a19c:	af00      	add	r7, sp, #0
 800a19e:	60f8      	str	r0, [r7, #12]
 800a1a0:	60b9      	str	r1, [r7, #8]
 800a1a2:	4613      	mov	r3, r2
 800a1a4:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800a1aa:	697b      	ldr	r3, [r7, #20]
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d106      	bne.n	800a1be <sent_tcp+0x26>
 800a1b0:	4b21      	ldr	r3, [pc, #132]	@ (800a238 <sent_tcp+0xa0>)
 800a1b2:	f240 1293 	movw	r2, #403	@ 0x193
 800a1b6:	4921      	ldr	r1, [pc, #132]	@ (800a23c <sent_tcp+0xa4>)
 800a1b8:	4821      	ldr	r0, [pc, #132]	@ (800a240 <sent_tcp+0xa8>)
 800a1ba:	f00c fd35 	bl	8016c28 <iprintf>

  if (conn) {
 800a1be:	697b      	ldr	r3, [r7, #20]
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d034      	beq.n	800a22e <sent_tcp+0x96>
    if (conn->state == NETCONN_WRITE) {
 800a1c4:	697b      	ldr	r3, [r7, #20]
 800a1c6:	785b      	ldrb	r3, [r3, #1]
 800a1c8:	2b01      	cmp	r3, #1
 800a1ca:	d104      	bne.n	800a1d6 <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800a1cc:	2101      	movs	r1, #1
 800a1ce:	6978      	ldr	r0, [r7, #20]
 800a1d0:	f000 ff08 	bl	800afe4 <lwip_netconn_do_writemore>
 800a1d4:	e007      	b.n	800a1e6 <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 800a1d6:	697b      	ldr	r3, [r7, #20]
 800a1d8:	785b      	ldrb	r3, [r3, #1]
 800a1da:	2b04      	cmp	r3, #4
 800a1dc:	d103      	bne.n	800a1e6 <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800a1de:	2101      	movs	r1, #1
 800a1e0:	6978      	ldr	r0, [r7, #20]
 800a1e2:	f000 fba7 	bl	800a934 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800a1e6:	697b      	ldr	r3, [r7, #20]
 800a1e8:	685b      	ldr	r3, [r3, #4]
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d01f      	beq.n	800a22e <sent_tcp+0x96>
 800a1ee:	697b      	ldr	r3, [r7, #20]
 800a1f0:	685b      	ldr	r3, [r3, #4]
 800a1f2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800a1f6:	f5b3 6f86 	cmp.w	r3, #1072	@ 0x430
 800a1fa:	d318      	bcc.n	800a22e <sent_tcp+0x96>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800a1fc:	697b      	ldr	r3, [r7, #20]
 800a1fe:	685b      	ldr	r3, [r3, #4]
 800a200:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800a204:	2b04      	cmp	r3, #4
 800a206:	d812      	bhi.n	800a22e <sent_tcp+0x96>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800a208:	697b      	ldr	r3, [r7, #20]
 800a20a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a20e:	f023 0310 	bic.w	r3, r3, #16
 800a212:	b2da      	uxtb	r2, r3
 800a214:	697b      	ldr	r3, [r7, #20]
 800a216:	f883 2020 	strb.w	r2, [r3, #32]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 800a21a:	697b      	ldr	r3, [r7, #20]
 800a21c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d005      	beq.n	800a22e <sent_tcp+0x96>
 800a222:	697b      	ldr	r3, [r7, #20]
 800a224:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a226:	88fa      	ldrh	r2, [r7, #6]
 800a228:	2102      	movs	r1, #2
 800a22a:	6978      	ldr	r0, [r7, #20]
 800a22c:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800a22e:	2300      	movs	r3, #0
}
 800a230:	4618      	mov	r0, r3
 800a232:	3718      	adds	r7, #24
 800a234:	46bd      	mov	sp, r7
 800a236:	bd80      	pop	{r7, pc}
 800a238:	080180c0 	.word	0x080180c0
 800a23c:	08018218 	.word	0x08018218
 800a240:	08018104 	.word	0x08018104

0800a244 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 800a244:	b580      	push	{r7, lr}
 800a246:	b088      	sub	sp, #32
 800a248:	af00      	add	r7, sp, #0
 800a24a:	6078      	str	r0, [r7, #4]
 800a24c:	460b      	mov	r3, r1
 800a24e:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800a254:	69fb      	ldr	r3, [r7, #28]
 800a256:	2b00      	cmp	r3, #0
 800a258:	d106      	bne.n	800a268 <err_tcp+0x24>
 800a25a:	4b61      	ldr	r3, [pc, #388]	@ (800a3e0 <err_tcp+0x19c>)
 800a25c:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 800a260:	4960      	ldr	r1, [pc, #384]	@ (800a3e4 <err_tcp+0x1a0>)
 800a262:	4861      	ldr	r0, [pc, #388]	@ (800a3e8 <err_tcp+0x1a4>)
 800a264:	f00c fce0 	bl	8016c28 <iprintf>

  SYS_ARCH_PROTECT(lev);
 800a268:	f00c fbc0 	bl	80169ec <sys_arch_protect>
 800a26c:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 800a26e:	69fb      	ldr	r3, [r7, #28]
 800a270:	2200      	movs	r2, #0
 800a272:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 800a274:	69fb      	ldr	r3, [r7, #28]
 800a276:	78fa      	ldrb	r2, [r7, #3]
 800a278:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 800a27a:	69fb      	ldr	r3, [r7, #28]
 800a27c:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a280:	f043 0301 	orr.w	r3, r3, #1
 800a284:	b2da      	uxtb	r2, r3
 800a286:	69fb      	ldr	r3, [r7, #28]
 800a288:	f883 2020 	strb.w	r2, [r3, #32]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 800a28c:	69fb      	ldr	r3, [r7, #28]
 800a28e:	785b      	ldrb	r3, [r3, #1]
 800a290:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 800a292:	69fb      	ldr	r3, [r7, #28]
 800a294:	2200      	movs	r2, #0
 800a296:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 800a298:	69b8      	ldr	r0, [r7, #24]
 800a29a:	f00c fbb5 	bl	8016a08 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800a29e:	69fb      	ldr	r3, [r7, #28]
 800a2a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d005      	beq.n	800a2b2 <err_tcp+0x6e>
 800a2a6:	69fb      	ldr	r3, [r7, #28]
 800a2a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a2aa:	2200      	movs	r2, #0
 800a2ac:	2104      	movs	r1, #4
 800a2ae:	69f8      	ldr	r0, [r7, #28]
 800a2b0:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800a2b2:	69fb      	ldr	r3, [r7, #28]
 800a2b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d005      	beq.n	800a2c6 <err_tcp+0x82>
 800a2ba:	69fb      	ldr	r3, [r7, #28]
 800a2bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a2be:	2200      	movs	r2, #0
 800a2c0:	2100      	movs	r1, #0
 800a2c2:	69f8      	ldr	r0, [r7, #28]
 800a2c4:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800a2c6:	69fb      	ldr	r3, [r7, #28]
 800a2c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d005      	beq.n	800a2da <err_tcp+0x96>
 800a2ce:	69fb      	ldr	r3, [r7, #28]
 800a2d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a2d2:	2200      	movs	r2, #0
 800a2d4:	2102      	movs	r1, #2
 800a2d6:	69f8      	ldr	r0, [r7, #28]
 800a2d8:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 800a2da:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a2de:	4618      	mov	r0, r3
 800a2e0:	f7ff fd7e 	bl	8009de0 <lwip_netconn_err_to_msg>
 800a2e4:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800a2e6:	69fb      	ldr	r3, [r7, #28]
 800a2e8:	3310      	adds	r3, #16
 800a2ea:	4618      	mov	r0, r3
 800a2ec:	f00c fa74 	bl	80167d8 <sys_mbox_valid>
 800a2f0:	4603      	mov	r3, r0
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d005      	beq.n	800a302 <err_tcp+0xbe>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 800a2f6:	69fb      	ldr	r3, [r7, #28]
 800a2f8:	3310      	adds	r3, #16
 800a2fa:	6939      	ldr	r1, [r7, #16]
 800a2fc:	4618      	mov	r0, r3
 800a2fe:	f00c fa09 	bl	8016714 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800a302:	69fb      	ldr	r3, [r7, #28]
 800a304:	3314      	adds	r3, #20
 800a306:	4618      	mov	r0, r3
 800a308:	f00c fa66 	bl	80167d8 <sys_mbox_valid>
 800a30c:	4603      	mov	r3, r0
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d005      	beq.n	800a31e <err_tcp+0xda>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 800a312:	69fb      	ldr	r3, [r7, #28]
 800a314:	3314      	adds	r3, #20
 800a316:	6939      	ldr	r1, [r7, #16]
 800a318:	4618      	mov	r0, r3
 800a31a:	f00c f9fb 	bl	8016714 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 800a31e:	7dfb      	ldrb	r3, [r7, #23]
 800a320:	2b01      	cmp	r3, #1
 800a322:	d005      	beq.n	800a330 <err_tcp+0xec>
 800a324:	7dfb      	ldrb	r3, [r7, #23]
 800a326:	2b04      	cmp	r3, #4
 800a328:	d002      	beq.n	800a330 <err_tcp+0xec>
 800a32a:	7dfb      	ldrb	r3, [r7, #23]
 800a32c:	2b03      	cmp	r3, #3
 800a32e:	d146      	bne.n	800a3be <err_tcp+0x17a>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 800a330:	69fb      	ldr	r3, [r7, #28]
 800a332:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a336:	f003 0304 	and.w	r3, r3, #4
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	bf14      	ite	ne
 800a33e:	2301      	movne	r3, #1
 800a340:	2300      	moveq	r3, #0
 800a342:	b2db      	uxtb	r3, r3
 800a344:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 800a346:	69fb      	ldr	r3, [r7, #28]
 800a348:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a34c:	f023 0304 	bic.w	r3, r3, #4
 800a350:	b2da      	uxtb	r2, r3
 800a352:	69fb      	ldr	r3, [r7, #28]
 800a354:	f883 2020 	strb.w	r2, [r3, #32]

    if (!was_nonblocking_connect) {
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d13b      	bne.n	800a3d6 <err_tcp+0x192>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800a35e:	69fb      	ldr	r3, [r7, #28]
 800a360:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a362:	2b00      	cmp	r3, #0
 800a364:	d106      	bne.n	800a374 <err_tcp+0x130>
 800a366:	4b1e      	ldr	r3, [pc, #120]	@ (800a3e0 <err_tcp+0x19c>)
 800a368:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 800a36c:	491f      	ldr	r1, [pc, #124]	@ (800a3ec <err_tcp+0x1a8>)
 800a36e:	481e      	ldr	r0, [pc, #120]	@ (800a3e8 <err_tcp+0x1a4>)
 800a370:	f00c fc5a 	bl	8016c28 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 800a374:	7dfb      	ldrb	r3, [r7, #23]
 800a376:	2b04      	cmp	r3, #4
 800a378:	d104      	bne.n	800a384 <err_tcp+0x140>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 800a37a:	69fb      	ldr	r3, [r7, #28]
 800a37c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a37e:	2200      	movs	r2, #0
 800a380:	711a      	strb	r2, [r3, #4]
 800a382:	e003      	b.n	800a38c <err_tcp+0x148>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 800a384:	69fb      	ldr	r3, [r7, #28]
 800a386:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a388:	78fa      	ldrb	r2, [r7, #3]
 800a38a:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800a38c:	69fb      	ldr	r3, [r7, #28]
 800a38e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	330c      	adds	r3, #12
 800a394:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 800a396:	68b8      	ldr	r0, [r7, #8]
 800a398:	f00c faac 	bl	80168f4 <sys_sem_valid>
 800a39c:	4603      	mov	r3, r0
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d106      	bne.n	800a3b0 <err_tcp+0x16c>
 800a3a2:	4b0f      	ldr	r3, [pc, #60]	@ (800a3e0 <err_tcp+0x19c>)
 800a3a4:	f240 12ef 	movw	r2, #495	@ 0x1ef
 800a3a8:	4911      	ldr	r1, [pc, #68]	@ (800a3f0 <err_tcp+0x1ac>)
 800a3aa:	480f      	ldr	r0, [pc, #60]	@ (800a3e8 <err_tcp+0x1a4>)
 800a3ac:	f00c fc3c 	bl	8016c28 <iprintf>
      conn->current_msg = NULL;
 800a3b0:	69fb      	ldr	r3, [r7, #28]
 800a3b2:	2200      	movs	r2, #0
 800a3b4:	625a      	str	r2, [r3, #36]	@ 0x24
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 800a3b6:	68b8      	ldr	r0, [r7, #8]
 800a3b8:	f00c fa82 	bl	80168c0 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 800a3bc:	e00b      	b.n	800a3d6 <err_tcp+0x192>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 800a3be:	69fb      	ldr	r3, [r7, #28]
 800a3c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d008      	beq.n	800a3d8 <err_tcp+0x194>
 800a3c6:	4b06      	ldr	r3, [pc, #24]	@ (800a3e0 <err_tcp+0x19c>)
 800a3c8:	f240 12f7 	movw	r2, #503	@ 0x1f7
 800a3cc:	4909      	ldr	r1, [pc, #36]	@ (800a3f4 <err_tcp+0x1b0>)
 800a3ce:	4806      	ldr	r0, [pc, #24]	@ (800a3e8 <err_tcp+0x1a4>)
 800a3d0:	f00c fc2a 	bl	8016c28 <iprintf>
  }
}
 800a3d4:	e000      	b.n	800a3d8 <err_tcp+0x194>
      (old_state == NETCONN_CONNECT)) {
 800a3d6:	bf00      	nop
}
 800a3d8:	bf00      	nop
 800a3da:	3720      	adds	r7, #32
 800a3dc:	46bd      	mov	sp, r7
 800a3de:	bd80      	pop	{r7, pc}
 800a3e0:	080180c0 	.word	0x080180c0
 800a3e4:	08018218 	.word	0x08018218
 800a3e8:	08018104 	.word	0x08018104
 800a3ec:	08018228 	.word	0x08018228
 800a3f0:	08018244 	.word	0x08018244
 800a3f4:	08018260 	.word	0x08018260

0800a3f8 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 800a3f8:	b580      	push	{r7, lr}
 800a3fa:	b084      	sub	sp, #16
 800a3fc:	af00      	add	r7, sp, #0
 800a3fe:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	685b      	ldr	r3, [r3, #4]
 800a404:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 800a406:	6879      	ldr	r1, [r7, #4]
 800a408:	68f8      	ldr	r0, [r7, #12]
 800a40a:	f004 fd7b 	bl	800ef04 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 800a40e:	490a      	ldr	r1, [pc, #40]	@ (800a438 <setup_tcp+0x40>)
 800a410:	68f8      	ldr	r0, [r7, #12]
 800a412:	f004 fd89 	bl	800ef28 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 800a416:	4909      	ldr	r1, [pc, #36]	@ (800a43c <setup_tcp+0x44>)
 800a418:	68f8      	ldr	r0, [r7, #12]
 800a41a:	f004 fda7 	bl	800ef6c <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 800a41e:	2202      	movs	r2, #2
 800a420:	4907      	ldr	r1, [pc, #28]	@ (800a440 <setup_tcp+0x48>)
 800a422:	68f8      	ldr	r0, [r7, #12]
 800a424:	f004 fdfe 	bl	800f024 <tcp_poll>
  tcp_err(pcb, err_tcp);
 800a428:	4906      	ldr	r1, [pc, #24]	@ (800a444 <setup_tcp+0x4c>)
 800a42a:	68f8      	ldr	r0, [r7, #12]
 800a42c:	f004 fdc0 	bl	800efb0 <tcp_err>
}
 800a430:	bf00      	nop
 800a432:	3710      	adds	r7, #16
 800a434:	46bd      	mov	sp, r7
 800a436:	bd80      	pop	{r7, pc}
 800a438:	08009fbd 	.word	0x08009fbd
 800a43c:	0800a199 	.word	0x0800a199
 800a440:	0800a0c9 	.word	0x0800a0c9
 800a444:	0800a245 	.word	0x0800a245

0800a448 <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 800a448:	b590      	push	{r4, r7, lr}
 800a44a:	b089      	sub	sp, #36	@ 0x24
 800a44c:	af00      	add	r7, sp, #0
 800a44e:	60f8      	str	r0, [r7, #12]
 800a450:	60b9      	str	r1, [r7, #8]
 800a452:	4613      	mov	r3, r2
 800a454:	71fb      	strb	r3, [r7, #7]
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800a45a:	69fb      	ldr	r3, [r7, #28]
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d102      	bne.n	800a466 <accept_function+0x1e>
    return ERR_VAL;
 800a460:	f06f 0305 	mvn.w	r3, #5
 800a464:	e0a1      	b.n	800a5aa <accept_function+0x162>
  }
  if (!NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800a466:	69fb      	ldr	r3, [r7, #28]
 800a468:	3314      	adds	r3, #20
 800a46a:	4618      	mov	r0, r3
 800a46c:	f00c f9b4 	bl	80167d8 <sys_mbox_valid>
 800a470:	4603      	mov	r3, r0
 800a472:	2b00      	cmp	r3, #0
 800a474:	d102      	bne.n	800a47c <accept_function+0x34>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
 800a476:	f06f 0305 	mvn.w	r3, #5
 800a47a:	e096      	b.n	800a5aa <accept_function+0x162>
  }

  if (newpcb == NULL) {
 800a47c:	68bb      	ldr	r3, [r7, #8]
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d11b      	bne.n	800a4ba <accept_function+0x72>
    /* out-of-pcbs during connect: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 800a482:	69fb      	ldr	r3, [r7, #28]
 800a484:	f103 0414 	add.w	r4, r3, #20
 800a488:	f06f 000c 	mvn.w	r0, #12
 800a48c:	f7ff fca8 	bl	8009de0 <lwip_netconn_err_to_msg>
 800a490:	4603      	mov	r3, r0
 800a492:	4619      	mov	r1, r3
 800a494:	4620      	mov	r0, r4
 800a496:	f00c f93d 	bl	8016714 <sys_mbox_trypost>
 800a49a:	4603      	mov	r3, r0
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d109      	bne.n	800a4b4 <accept_function+0x6c>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800a4a0:	69fb      	ldr	r3, [r7, #28]
 800a4a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d005      	beq.n	800a4b4 <accept_function+0x6c>
 800a4a8:	69fb      	ldr	r3, [r7, #28]
 800a4aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a4ac:	2200      	movs	r2, #0
 800a4ae:	2100      	movs	r1, #0
 800a4b0:	69f8      	ldr	r0, [r7, #28]
 800a4b2:	4798      	blx	r3
    }
    return ERR_VAL;
 800a4b4:	f06f 0305 	mvn.w	r3, #5
 800a4b8:	e077      	b.n	800a5aa <accept_function+0x162>
  }
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 800a4ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d006      	beq.n	800a4d0 <accept_function+0x88>
 800a4c2:	4b3c      	ldr	r3, [pc, #240]	@ (800a5b4 <accept_function+0x16c>)
 800a4c4:	f240 222a 	movw	r2, #554	@ 0x22a
 800a4c8:	493b      	ldr	r1, [pc, #236]	@ (800a5b8 <accept_function+0x170>)
 800a4ca:	483c      	ldr	r0, [pc, #240]	@ (800a5bc <accept_function+0x174>)
 800a4cc:	f00c fbac 	bl	8016c28 <iprintf>

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->state: %s\n", tcp_debug_state_str(newpcb->state)));

  /* We have to set the callback here even though
   * the new socket is unknown. newconn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
 800a4d0:	69fb      	ldr	r3, [r7, #28]
 800a4d2:	781a      	ldrb	r2, [r3, #0]
 800a4d4:	69fb      	ldr	r3, [r7, #28]
 800a4d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a4d8:	4619      	mov	r1, r3
 800a4da:	4610      	mov	r0, r2
 800a4dc:	f000 f8f0 	bl	800a6c0 <netconn_alloc>
 800a4e0:	61b8      	str	r0, [r7, #24]
  if (newconn == NULL) {
 800a4e2:	69bb      	ldr	r3, [r7, #24]
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d11b      	bne.n	800a520 <accept_function+0xd8>
    /* outof netconns: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 800a4e8:	69fb      	ldr	r3, [r7, #28]
 800a4ea:	f103 0414 	add.w	r4, r3, #20
 800a4ee:	f06f 000c 	mvn.w	r0, #12
 800a4f2:	f7ff fc75 	bl	8009de0 <lwip_netconn_err_to_msg>
 800a4f6:	4603      	mov	r3, r0
 800a4f8:	4619      	mov	r1, r3
 800a4fa:	4620      	mov	r0, r4
 800a4fc:	f00c f90a 	bl	8016714 <sys_mbox_trypost>
 800a500:	4603      	mov	r3, r0
 800a502:	2b00      	cmp	r3, #0
 800a504:	d109      	bne.n	800a51a <accept_function+0xd2>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800a506:	69fb      	ldr	r3, [r7, #28]
 800a508:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d005      	beq.n	800a51a <accept_function+0xd2>
 800a50e:	69fb      	ldr	r3, [r7, #28]
 800a510:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a512:	2200      	movs	r2, #0
 800a514:	2100      	movs	r1, #0
 800a516:	69f8      	ldr	r0, [r7, #28]
 800a518:	4798      	blx	r3
    }
    return ERR_MEM;
 800a51a:	f04f 33ff 	mov.w	r3, #4294967295
 800a51e:	e044      	b.n	800a5aa <accept_function+0x162>
  }
  newconn->pcb.tcp = newpcb;
 800a520:	69bb      	ldr	r3, [r7, #24]
 800a522:	68ba      	ldr	r2, [r7, #8]
 800a524:	605a      	str	r2, [r3, #4]
  setup_tcp(newconn);
 800a526:	69b8      	ldr	r0, [r7, #24]
 800a528:	f7ff ff66 	bl	800a3f8 <setup_tcp>

  /* handle backlog counter */
  tcp_backlog_delayed(newpcb);

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 800a52c:	69fb      	ldr	r3, [r7, #28]
 800a52e:	3314      	adds	r3, #20
 800a530:	69b9      	ldr	r1, [r7, #24]
 800a532:	4618      	mov	r0, r3
 800a534:	f00c f8ee 	bl	8016714 <sys_mbox_trypost>
 800a538:	4603      	mov	r3, r0
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d02a      	beq.n	800a594 <accept_function+0x14c>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb *pcb = newconn->pcb.tcp;
 800a53e:	69bb      	ldr	r3, [r7, #24]
 800a540:	685b      	ldr	r3, [r3, #4]
 800a542:	617b      	str	r3, [r7, #20]
    tcp_arg(pcb, NULL);
 800a544:	2100      	movs	r1, #0
 800a546:	6978      	ldr	r0, [r7, #20]
 800a548:	f004 fcdc 	bl	800ef04 <tcp_arg>
    tcp_recv(pcb, NULL);
 800a54c:	2100      	movs	r1, #0
 800a54e:	6978      	ldr	r0, [r7, #20]
 800a550:	f004 fcea 	bl	800ef28 <tcp_recv>
    tcp_sent(pcb, NULL);
 800a554:	2100      	movs	r1, #0
 800a556:	6978      	ldr	r0, [r7, #20]
 800a558:	f004 fd08 	bl	800ef6c <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 800a55c:	2200      	movs	r2, #0
 800a55e:	2100      	movs	r1, #0
 800a560:	6978      	ldr	r0, [r7, #20]
 800a562:	f004 fd5f 	bl	800f024 <tcp_poll>
    tcp_err(pcb, NULL);
 800a566:	2100      	movs	r1, #0
 800a568:	6978      	ldr	r0, [r7, #20]
 800a56a:	f004 fd21 	bl	800efb0 <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
 800a56e:	69bb      	ldr	r3, [r7, #24]
 800a570:	2200      	movs	r2, #0
 800a572:	605a      	str	r2, [r3, #4]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
 800a574:	69bb      	ldr	r3, [r7, #24]
 800a576:	3310      	adds	r3, #16
 800a578:	4618      	mov	r0, r3
 800a57a:	f00c f8b9 	bl	80166f0 <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 800a57e:	69bb      	ldr	r3, [r7, #24]
 800a580:	3310      	adds	r3, #16
 800a582:	4618      	mov	r0, r3
 800a584:	f00c f939 	bl	80167fa <sys_mbox_set_invalid>
    netconn_free(newconn);
 800a588:	69b8      	ldr	r0, [r7, #24]
 800a58a:	f000 f90b 	bl	800a7a4 <netconn_free>
    return ERR_MEM;
 800a58e:	f04f 33ff 	mov.w	r3, #4294967295
 800a592:	e00a      	b.n	800a5aa <accept_function+0x162>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800a594:	69fb      	ldr	r3, [r7, #28]
 800a596:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d005      	beq.n	800a5a8 <accept_function+0x160>
 800a59c:	69fb      	ldr	r3, [r7, #28]
 800a59e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a5a0:	2200      	movs	r2, #0
 800a5a2:	2100      	movs	r1, #0
 800a5a4:	69f8      	ldr	r0, [r7, #28]
 800a5a6:	4798      	blx	r3
  }

  return ERR_OK;
 800a5a8:	2300      	movs	r3, #0
}
 800a5aa:	4618      	mov	r0, r3
 800a5ac:	3724      	adds	r7, #36	@ 0x24
 800a5ae:	46bd      	mov	sp, r7
 800a5b0:	bd90      	pop	{r4, r7, pc}
 800a5b2:	bf00      	nop
 800a5b4:	080180c0 	.word	0x080180c0
 800a5b8:	0801827c 	.word	0x0801827c
 800a5bc:	08018104 	.word	0x08018104

0800a5c0 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 800a5c0:	b590      	push	{r4, r7, lr}
 800a5c2:	b085      	sub	sp, #20
 800a5c4:	af00      	add	r7, sp, #0
 800a5c6:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 800a5c8:	2300      	movs	r3, #0
 800a5ca:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	685b      	ldr	r3, [r3, #4]
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d006      	beq.n	800a5e4 <pcb_new+0x24>
 800a5d6:	4b2b      	ldr	r3, [pc, #172]	@ (800a684 <pcb_new+0xc4>)
 800a5d8:	f240 2265 	movw	r2, #613	@ 0x265
 800a5dc:	492a      	ldr	r1, [pc, #168]	@ (800a688 <pcb_new+0xc8>)
 800a5de:	482b      	ldr	r0, [pc, #172]	@ (800a68c <pcb_new+0xcc>)
 800a5e0:	f00c fb22 	bl	8016c28 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	781b      	ldrb	r3, [r3, #0]
 800a5ea:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a5ee:	2b10      	cmp	r3, #16
 800a5f0:	d022      	beq.n	800a638 <pcb_new+0x78>
 800a5f2:	2b20      	cmp	r3, #32
 800a5f4:	d133      	bne.n	800a65e <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	681c      	ldr	r4, [r3, #0]
 800a5fa:	7bfb      	ldrb	r3, [r7, #15]
 800a5fc:	4618      	mov	r0, r3
 800a5fe:	f009 fd5a 	bl	80140b6 <udp_new_ip_type>
 800a602:	4603      	mov	r3, r0
 800a604:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	685b      	ldr	r3, [r3, #4]
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d02a      	beq.n	800a666 <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	781b      	ldrb	r3, [r3, #0]
 800a616:	2b22      	cmp	r3, #34	@ 0x22
 800a618:	d104      	bne.n	800a624 <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	685b      	ldr	r3, [r3, #4]
 800a620:	2201      	movs	r2, #1
 800a622:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	6858      	ldr	r0, [r3, #4]
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	461a      	mov	r2, r3
 800a630:	4917      	ldr	r1, [pc, #92]	@ (800a690 <pcb_new+0xd0>)
 800a632:	f009 fcc7 	bl	8013fc4 <udp_recv>
      }
      break;
 800a636:	e016      	b.n	800a666 <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	681c      	ldr	r4, [r3, #0]
 800a63c:	7bfb      	ldrb	r3, [r7, #15]
 800a63e:	4618      	mov	r0, r3
 800a640:	f004 fc52 	bl	800eee8 <tcp_new_ip_type>
 800a644:	4603      	mov	r3, r0
 800a646:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	685b      	ldr	r3, [r3, #4]
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d00b      	beq.n	800a66a <pcb_new+0xaa>
        setup_tcp(msg->conn);
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	4618      	mov	r0, r3
 800a658:	f7ff fece 	bl	800a3f8 <setup_tcp>
      }
      break;
 800a65c:	e005      	b.n	800a66a <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	22fa      	movs	r2, #250	@ 0xfa
 800a662:	711a      	strb	r2, [r3, #4]
      return;
 800a664:	e00a      	b.n	800a67c <pcb_new+0xbc>
      break;
 800a666:	bf00      	nop
 800a668:	e000      	b.n	800a66c <pcb_new+0xac>
      break;
 800a66a:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	685b      	ldr	r3, [r3, #4]
 800a672:	2b00      	cmp	r3, #0
 800a674:	d102      	bne.n	800a67c <pcb_new+0xbc>
    msg->err = ERR_MEM;
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	22ff      	movs	r2, #255	@ 0xff
 800a67a:	711a      	strb	r2, [r3, #4]
  }
}
 800a67c:	3714      	adds	r7, #20
 800a67e:	46bd      	mov	sp, r7
 800a680:	bd90      	pop	{r4, r7, pc}
 800a682:	bf00      	nop
 800a684:	080180c0 	.word	0x080180c0
 800a688:	080182a4 	.word	0x080182a4
 800a68c:	08018104 	.word	0x08018104
 800a690:	08009ec1 	.word	0x08009ec1

0800a694 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 800a694:	b580      	push	{r7, lr}
 800a696:	b084      	sub	sp, #16
 800a698:	af00      	add	r7, sp, #0
 800a69a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	2200      	movs	r2, #0
 800a6a4:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	685b      	ldr	r3, [r3, #4]
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d102      	bne.n	800a6b6 <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 800a6b0:	68f8      	ldr	r0, [r7, #12]
 800a6b2:	f7ff ff85 	bl	800a5c0 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 800a6b6:	bf00      	nop
 800a6b8:	3710      	adds	r7, #16
 800a6ba:	46bd      	mov	sp, r7
 800a6bc:	bd80      	pop	{r7, pc}
	...

0800a6c0 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 800a6c0:	b580      	push	{r7, lr}
 800a6c2:	b086      	sub	sp, #24
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	4603      	mov	r3, r0
 800a6c8:	6039      	str	r1, [r7, #0]
 800a6ca:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 800a6cc:	2300      	movs	r3, #0
 800a6ce:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 800a6d0:	2007      	movs	r0, #7
 800a6d2:	f001 fe4f 	bl	800c374 <memp_malloc>
 800a6d6:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d101      	bne.n	800a6e2 <netconn_alloc+0x22>
    return NULL;
 800a6de:	2300      	movs	r3, #0
 800a6e0:	e056      	b.n	800a790 <netconn_alloc+0xd0>
  }

  conn->pending_err = ERR_OK;
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	2200      	movs	r2, #0
 800a6e6:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	79fa      	ldrb	r2, [r7, #7]
 800a6ec:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	2200      	movs	r2, #0
 800a6f2:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 800a6f4:	79fb      	ldrb	r3, [r7, #7]
 800a6f6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a6fa:	2b10      	cmp	r3, #16
 800a6fc:	d004      	beq.n	800a708 <netconn_alloc+0x48>
 800a6fe:	2b20      	cmp	r3, #32
 800a700:	d105      	bne.n	800a70e <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 800a702:	2306      	movs	r3, #6
 800a704:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 800a706:	e00a      	b.n	800a71e <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 800a708:	2306      	movs	r3, #6
 800a70a:	617b      	str	r3, [r7, #20]
      break;
 800a70c:	e007      	b.n	800a71e <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 800a70e:	4b22      	ldr	r3, [pc, #136]	@ (800a798 <netconn_alloc+0xd8>)
 800a710:	f240 22e5 	movw	r2, #741	@ 0x2e5
 800a714:	4921      	ldr	r1, [pc, #132]	@ (800a79c <netconn_alloc+0xdc>)
 800a716:	4822      	ldr	r0, [pc, #136]	@ (800a7a0 <netconn_alloc+0xe0>)
 800a718:	f00c fa86 	bl	8016c28 <iprintf>
      goto free_and_return;
 800a71c:	e033      	b.n	800a786 <netconn_alloc+0xc6>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	3310      	adds	r3, #16
 800a722:	6979      	ldr	r1, [r7, #20]
 800a724:	4618      	mov	r0, r3
 800a726:	f00b ffc9 	bl	80166bc <sys_mbox_new>
 800a72a:	4603      	mov	r3, r0
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d129      	bne.n	800a784 <netconn_alloc+0xc4>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	330c      	adds	r3, #12
 800a734:	2100      	movs	r1, #0
 800a736:	4618      	mov	r0, r3
 800a738:	f00c f86c 	bl	8016814 <sys_sem_new>
 800a73c:	4603      	mov	r3, r0
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d005      	beq.n	800a74e <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	3310      	adds	r3, #16
 800a746:	4618      	mov	r0, r3
 800a748:	f00b ffd2 	bl	80166f0 <sys_mbox_free>
    goto free_and_return;
 800a74c:	e01b      	b.n	800a786 <netconn_alloc+0xc6>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	3314      	adds	r3, #20
 800a752:	4618      	mov	r0, r3
 800a754:	f00c f851 	bl	80167fa <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	2200      	movs	r2, #0
 800a75c:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	f04f 32ff 	mov.w	r2, #4294967295
 800a764:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	683a      	ldr	r2, [r7, #0]
 800a76a:	629a      	str	r2, [r3, #40]	@ 0x28
#if LWIP_TCP
  conn->current_msg  = NULL;
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	2200      	movs	r2, #0
 800a770:	625a      	str	r2, [r3, #36]	@ 0x24
#endif /* LWIP_TCP */
#if LWIP_SO_SNDTIMEO
  conn->send_timeout = 0;
#endif /* LWIP_SO_SNDTIMEO */
#if LWIP_SO_RCVTIMEO
  conn->recv_timeout = 0;
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	2200      	movs	r2, #0
 800a776:	61da      	str	r2, [r3, #28]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	7cfa      	ldrb	r2, [r7, #19]
 800a77c:	f883 2020 	strb.w	r2, [r3, #32]
  return conn;
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	e005      	b.n	800a790 <netconn_alloc+0xd0>
    goto free_and_return;
 800a784:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 800a786:	68f9      	ldr	r1, [r7, #12]
 800a788:	2007      	movs	r0, #7
 800a78a:	f001 fe69 	bl	800c460 <memp_free>
  return NULL;
 800a78e:	2300      	movs	r3, #0
}
 800a790:	4618      	mov	r0, r3
 800a792:	3718      	adds	r7, #24
 800a794:	46bd      	mov	sp, r7
 800a796:	bd80      	pop	{r7, pc}
 800a798:	080180c0 	.word	0x080180c0
 800a79c:	080182c4 	.word	0x080182c4
 800a7a0:	08018104 	.word	0x08018104

0800a7a4 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 800a7a4:	b580      	push	{r7, lr}
 800a7a6:	b082      	sub	sp, #8
 800a7a8:	af00      	add	r7, sp, #0
 800a7aa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	685b      	ldr	r3, [r3, #4]
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d006      	beq.n	800a7c2 <netconn_free+0x1e>
 800a7b4:	4b1b      	ldr	r3, [pc, #108]	@ (800a824 <netconn_free+0x80>)
 800a7b6:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 800a7ba:	491b      	ldr	r1, [pc, #108]	@ (800a828 <netconn_free+0x84>)
 800a7bc:	481b      	ldr	r0, [pc, #108]	@ (800a82c <netconn_free+0x88>)
 800a7be:	f00c fa33 	bl	8016c28 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	3310      	adds	r3, #16
 800a7c6:	4618      	mov	r0, r3
 800a7c8:	f00c f806 	bl	80167d8 <sys_mbox_valid>
 800a7cc:	4603      	mov	r3, r0
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d006      	beq.n	800a7e0 <netconn_free+0x3c>
 800a7d2:	4b14      	ldr	r3, [pc, #80]	@ (800a824 <netconn_free+0x80>)
 800a7d4:	f240 3223 	movw	r2, #803	@ 0x323
 800a7d8:	4915      	ldr	r1, [pc, #84]	@ (800a830 <netconn_free+0x8c>)
 800a7da:	4814      	ldr	r0, [pc, #80]	@ (800a82c <netconn_free+0x88>)
 800a7dc:	f00c fa24 	bl	8016c28 <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	3314      	adds	r3, #20
 800a7e4:	4618      	mov	r0, r3
 800a7e6:	f00b fff7 	bl	80167d8 <sys_mbox_valid>
 800a7ea:	4603      	mov	r3, r0
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d006      	beq.n	800a7fe <netconn_free+0x5a>
 800a7f0:	4b0c      	ldr	r3, [pc, #48]	@ (800a824 <netconn_free+0x80>)
 800a7f2:	f240 3226 	movw	r2, #806	@ 0x326
 800a7f6:	490f      	ldr	r1, [pc, #60]	@ (800a834 <netconn_free+0x90>)
 800a7f8:	480c      	ldr	r0, [pc, #48]	@ (800a82c <netconn_free+0x88>)
 800a7fa:	f00c fa15 	bl	8016c28 <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	330c      	adds	r3, #12
 800a802:	4618      	mov	r0, r3
 800a804:	f00c f869 	bl	80168da <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	330c      	adds	r3, #12
 800a80c:	4618      	mov	r0, r3
 800a80e:	f00c f882 	bl	8016916 <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 800a812:	6879      	ldr	r1, [r7, #4]
 800a814:	2007      	movs	r0, #7
 800a816:	f001 fe23 	bl	800c460 <memp_free>
}
 800a81a:	bf00      	nop
 800a81c:	3708      	adds	r7, #8
 800a81e:	46bd      	mov	sp, r7
 800a820:	bd80      	pop	{r7, pc}
 800a822:	bf00      	nop
 800a824:	080180c0 	.word	0x080180c0
 800a828:	080182ec 	.word	0x080182ec
 800a82c:	08018104 	.word	0x08018104
 800a830:	0801831c 	.word	0x0801831c
 800a834:	08018358 	.word	0x08018358

0800a838 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 800a838:	b580      	push	{r7, lr}
 800a83a:	b086      	sub	sp, #24
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	3310      	adds	r3, #16
 800a844:	4618      	mov	r0, r3
 800a846:	f00b ffc7 	bl	80167d8 <sys_mbox_valid>
 800a84a:	4603      	mov	r3, r0
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d02f      	beq.n	800a8b0 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800a850:	e018      	b.n	800a884 <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	781b      	ldrb	r3, [r3, #0]
 800a856:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a85a:	2b10      	cmp	r3, #16
 800a85c:	d10e      	bne.n	800a87c <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 800a85e:	693b      	ldr	r3, [r7, #16]
 800a860:	f107 020f 	add.w	r2, r7, #15
 800a864:	4611      	mov	r1, r2
 800a866:	4618      	mov	r0, r3
 800a868:	f7ff faf0 	bl	8009e4c <lwip_netconn_is_err_msg>
 800a86c:	4603      	mov	r3, r0
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d108      	bne.n	800a884 <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 800a872:	693b      	ldr	r3, [r7, #16]
 800a874:	4618      	mov	r0, r3
 800a876:	f002 fc97 	bl	800d1a8 <pbuf_free>
 800a87a:	e003      	b.n	800a884 <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 800a87c:	693b      	ldr	r3, [r7, #16]
 800a87e:	4618      	mov	r0, r3
 800a880:	f000 fe98 	bl	800b5b4 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	3310      	adds	r3, #16
 800a888:	f107 0210 	add.w	r2, r7, #16
 800a88c:	4611      	mov	r1, r2
 800a88e:	4618      	mov	r0, r3
 800a890:	f00b ff8b 	bl	80167aa <sys_arch_mbox_tryfetch>
 800a894:	4603      	mov	r3, r0
 800a896:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a89a:	d1da      	bne.n	800a852 <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	3310      	adds	r3, #16
 800a8a0:	4618      	mov	r0, r3
 800a8a2:	f00b ff25 	bl	80166f0 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	3310      	adds	r3, #16
 800a8aa:	4618      	mov	r0, r3
 800a8ac:	f00b ffa5 	bl	80167fa <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	3314      	adds	r3, #20
 800a8b4:	4618      	mov	r0, r3
 800a8b6:	f00b ff8f 	bl	80167d8 <sys_mbox_valid>
 800a8ba:	4603      	mov	r3, r0
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d034      	beq.n	800a92a <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800a8c0:	e01d      	b.n	800a8fe <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 800a8c2:	693b      	ldr	r3, [r7, #16]
 800a8c4:	f107 020e 	add.w	r2, r7, #14
 800a8c8:	4611      	mov	r1, r2
 800a8ca:	4618      	mov	r0, r3
 800a8cc:	f7ff fabe 	bl	8009e4c <lwip_netconn_is_err_msg>
 800a8d0:	4603      	mov	r3, r0
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d113      	bne.n	800a8fe <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 800a8d6:	693b      	ldr	r3, [r7, #16]
 800a8d8:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 800a8da:	6978      	ldr	r0, [r7, #20]
 800a8dc:	f7ff ffac 	bl	800a838 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 800a8e0:	697b      	ldr	r3, [r7, #20]
 800a8e2:	685b      	ldr	r3, [r3, #4]
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d007      	beq.n	800a8f8 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 800a8e8:	697b      	ldr	r3, [r7, #20]
 800a8ea:	685b      	ldr	r3, [r3, #4]
 800a8ec:	4618      	mov	r0, r3
 800a8ee:	f003 fa6d 	bl	800ddcc <tcp_abort>
            newconn->pcb.tcp = NULL;
 800a8f2:	697b      	ldr	r3, [r7, #20]
 800a8f4:	2200      	movs	r2, #0
 800a8f6:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 800a8f8:	6978      	ldr	r0, [r7, #20]
 800a8fa:	f7ff ff53 	bl	800a7a4 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	3314      	adds	r3, #20
 800a902:	f107 0210 	add.w	r2, r7, #16
 800a906:	4611      	mov	r1, r2
 800a908:	4618      	mov	r0, r3
 800a90a:	f00b ff4e 	bl	80167aa <sys_arch_mbox_tryfetch>
 800a90e:	4603      	mov	r3, r0
 800a910:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a914:	d1d5      	bne.n	800a8c2 <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	3314      	adds	r3, #20
 800a91a:	4618      	mov	r0, r3
 800a91c:	f00b fee8 	bl	80166f0 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	3314      	adds	r3, #20
 800a924:	4618      	mov	r0, r3
 800a926:	f00b ff68 	bl	80167fa <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 800a92a:	bf00      	nop
 800a92c:	3718      	adds	r7, #24
 800a92e:	46bd      	mov	sp, r7
 800a930:	bd80      	pop	{r7, pc}
	...

0800a934 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800a934:	b580      	push	{r7, lr}
 800a936:	b086      	sub	sp, #24
 800a938:	af00      	add	r7, sp, #0
 800a93a:	6078      	str	r0, [r7, #4]
 800a93c:	460b      	mov	r3, r1
 800a93e:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 800a940:	2300      	movs	r3, #0
 800a942:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	2b00      	cmp	r3, #0
 800a948:	d106      	bne.n	800a958 <lwip_netconn_do_close_internal+0x24>
 800a94a:	4b87      	ldr	r3, [pc, #540]	@ (800ab68 <lwip_netconn_do_close_internal+0x234>)
 800a94c:	f240 32a2 	movw	r2, #930	@ 0x3a2
 800a950:	4986      	ldr	r1, [pc, #536]	@ (800ab6c <lwip_netconn_do_close_internal+0x238>)
 800a952:	4887      	ldr	r0, [pc, #540]	@ (800ab70 <lwip_netconn_do_close_internal+0x23c>)
 800a954:	f00c f968 	bl	8016c28 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	781b      	ldrb	r3, [r3, #0]
 800a95c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a960:	2b10      	cmp	r3, #16
 800a962:	d006      	beq.n	800a972 <lwip_netconn_do_close_internal+0x3e>
 800a964:	4b80      	ldr	r3, [pc, #512]	@ (800ab68 <lwip_netconn_do_close_internal+0x234>)
 800a966:	f240 32a3 	movw	r2, #931	@ 0x3a3
 800a96a:	4982      	ldr	r1, [pc, #520]	@ (800ab74 <lwip_netconn_do_close_internal+0x240>)
 800a96c:	4880      	ldr	r0, [pc, #512]	@ (800ab70 <lwip_netconn_do_close_internal+0x23c>)
 800a96e:	f00c f95b 	bl	8016c28 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	785b      	ldrb	r3, [r3, #1]
 800a976:	2b04      	cmp	r3, #4
 800a978:	d006      	beq.n	800a988 <lwip_netconn_do_close_internal+0x54>
 800a97a:	4b7b      	ldr	r3, [pc, #492]	@ (800ab68 <lwip_netconn_do_close_internal+0x234>)
 800a97c:	f44f 7269 	mov.w	r2, #932	@ 0x3a4
 800a980:	497d      	ldr	r1, [pc, #500]	@ (800ab78 <lwip_netconn_do_close_internal+0x244>)
 800a982:	487b      	ldr	r0, [pc, #492]	@ (800ab70 <lwip_netconn_do_close_internal+0x23c>)
 800a984:	f00c f950 	bl	8016c28 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	685b      	ldr	r3, [r3, #4]
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d106      	bne.n	800a99e <lwip_netconn_do_close_internal+0x6a>
 800a990:	4b75      	ldr	r3, [pc, #468]	@ (800ab68 <lwip_netconn_do_close_internal+0x234>)
 800a992:	f240 32a5 	movw	r2, #933	@ 0x3a5
 800a996:	4979      	ldr	r1, [pc, #484]	@ (800ab7c <lwip_netconn_do_close_internal+0x248>)
 800a998:	4875      	ldr	r0, [pc, #468]	@ (800ab70 <lwip_netconn_do_close_internal+0x23c>)
 800a99a:	f00c f945 	bl	8016c28 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d106      	bne.n	800a9b4 <lwip_netconn_do_close_internal+0x80>
 800a9a6:	4b70      	ldr	r3, [pc, #448]	@ (800ab68 <lwip_netconn_do_close_internal+0x234>)
 800a9a8:	f240 32a6 	movw	r2, #934	@ 0x3a6
 800a9ac:	4974      	ldr	r1, [pc, #464]	@ (800ab80 <lwip_netconn_do_close_internal+0x24c>)
 800a9ae:	4870      	ldr	r0, [pc, #448]	@ (800ab70 <lwip_netconn_do_close_internal+0x23c>)
 800a9b0:	f00c f93a 	bl	8016c28 <iprintf>

  tpcb = conn->pcb.tcp;
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	685b      	ldr	r3, [r3, #4]
 800a9b8:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9be:	7a1b      	ldrb	r3, [r3, #8]
 800a9c0:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 800a9c2:	7bfb      	ldrb	r3, [r7, #15]
 800a9c4:	f003 0301 	and.w	r3, r3, #1
 800a9c8:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 800a9ca:	7bfb      	ldrb	r3, [r7, #15]
 800a9cc:	f003 0302 	and.w	r3, r3, #2
 800a9d0:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 800a9d2:	7bfb      	ldrb	r3, [r7, #15]
 800a9d4:	2b03      	cmp	r3, #3
 800a9d6:	d102      	bne.n	800a9de <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 800a9d8:	2301      	movs	r3, #1
 800a9da:	75bb      	strb	r3, [r7, #22]
 800a9dc:	e01f      	b.n	800aa1e <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 800a9de:	7bbb      	ldrb	r3, [r7, #14]
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d00e      	beq.n	800aa02 <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 800a9e4:	693b      	ldr	r3, [r7, #16]
 800a9e6:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 800a9e8:	2b05      	cmp	r3, #5
 800a9ea:	d007      	beq.n	800a9fc <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 800a9ec:	693b      	ldr	r3, [r7, #16]
 800a9ee:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 800a9f0:	2b06      	cmp	r3, #6
 800a9f2:	d003      	beq.n	800a9fc <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 800a9f4:	693b      	ldr	r3, [r7, #16]
 800a9f6:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 800a9f8:	2b08      	cmp	r3, #8
 800a9fa:	d102      	bne.n	800aa02 <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 800a9fc:	2301      	movs	r3, #1
 800a9fe:	75bb      	strb	r3, [r7, #22]
 800aa00:	e00d      	b.n	800aa1e <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 800aa02:	7b7b      	ldrb	r3, [r7, #13]
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d008      	beq.n	800aa1a <lwip_netconn_do_close_internal+0xe6>
 800aa08:	693b      	ldr	r3, [r7, #16]
 800aa0a:	8b5b      	ldrh	r3, [r3, #26]
 800aa0c:	f003 0310 	and.w	r3, r3, #16
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d002      	beq.n	800aa1a <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 800aa14:	2301      	movs	r3, #1
 800aa16:	75bb      	strb	r3, [r7, #22]
 800aa18:	e001      	b.n	800aa1e <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 800aa1a:	2300      	movs	r3, #0
 800aa1c:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 800aa1e:	7dbb      	ldrb	r3, [r7, #22]
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d003      	beq.n	800aa2c <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 800aa24:	2100      	movs	r1, #0
 800aa26:	6938      	ldr	r0, [r7, #16]
 800aa28:	f004 fa6c 	bl	800ef04 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 800aa2c:	693b      	ldr	r3, [r7, #16]
 800aa2e:	7d1b      	ldrb	r3, [r3, #20]
 800aa30:	2b01      	cmp	r3, #1
 800aa32:	d104      	bne.n	800aa3e <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 800aa34:	2100      	movs	r1, #0
 800aa36:	6938      	ldr	r0, [r7, #16]
 800aa38:	f004 fadc 	bl	800eff4 <tcp_accept>
 800aa3c:	e01d      	b.n	800aa7a <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 800aa3e:	7bbb      	ldrb	r3, [r7, #14]
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d007      	beq.n	800aa54 <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 800aa44:	2100      	movs	r1, #0
 800aa46:	6938      	ldr	r0, [r7, #16]
 800aa48:	f004 fa6e 	bl	800ef28 <tcp_recv>
      tcp_accept(tpcb, NULL);
 800aa4c:	2100      	movs	r1, #0
 800aa4e:	6938      	ldr	r0, [r7, #16]
 800aa50:	f004 fad0 	bl	800eff4 <tcp_accept>
    }
    if (shut_tx) {
 800aa54:	7b7b      	ldrb	r3, [r7, #13]
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d003      	beq.n	800aa62 <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 800aa5a:	2100      	movs	r1, #0
 800aa5c:	6938      	ldr	r0, [r7, #16]
 800aa5e:	f004 fa85 	bl	800ef6c <tcp_sent>
    }
    if (shut_close) {
 800aa62:	7dbb      	ldrb	r3, [r7, #22]
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d008      	beq.n	800aa7a <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 800aa68:	2200      	movs	r2, #0
 800aa6a:	2100      	movs	r1, #0
 800aa6c:	6938      	ldr	r0, [r7, #16]
 800aa6e:	f004 fad9 	bl	800f024 <tcp_poll>
      tcp_err(tpcb, NULL);
 800aa72:	2100      	movs	r1, #0
 800aa74:	6938      	ldr	r0, [r7, #16]
 800aa76:	f004 fa9b 	bl	800efb0 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 800aa7a:	7dbb      	ldrb	r3, [r7, #22]
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d005      	beq.n	800aa8c <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 800aa80:	6938      	ldr	r0, [r7, #16]
 800aa82:	f003 f85d 	bl	800db40 <tcp_close>
 800aa86:	4603      	mov	r3, r0
 800aa88:	75fb      	strb	r3, [r7, #23]
 800aa8a:	e007      	b.n	800aa9c <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 800aa8c:	7bbb      	ldrb	r3, [r7, #14]
 800aa8e:	7b7a      	ldrb	r2, [r7, #13]
 800aa90:	4619      	mov	r1, r3
 800aa92:	6938      	ldr	r0, [r7, #16]
 800aa94:	f003 f880 	bl	800db98 <tcp_shutdown>
 800aa98:	4603      	mov	r3, r0
 800aa9a:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 800aa9c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d102      	bne.n	800aaaa <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 800aaa4:	2301      	movs	r3, #1
 800aaa6:	757b      	strb	r3, [r7, #21]
 800aaa8:	e016      	b.n	800aad8 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 800aaaa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800aaae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aab2:	d10f      	bne.n	800aad4 <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aab8:	7a5b      	ldrb	r3, [r3, #9]
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d10c      	bne.n	800aad8 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 800aabe:	2301      	movs	r3, #1
 800aac0:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 800aac2:	7dbb      	ldrb	r3, [r7, #22]
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d007      	beq.n	800aad8 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 800aac8:	6938      	ldr	r0, [r7, #16]
 800aaca:	f003 f97f 	bl	800ddcc <tcp_abort>
          err = ERR_OK;
 800aace:	2300      	movs	r3, #0
 800aad0:	75fb      	strb	r3, [r7, #23]
 800aad2:	e001      	b.n	800aad8 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 800aad4:	2301      	movs	r3, #1
 800aad6:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 800aad8:	7d7b      	ldrb	r3, [r7, #21]
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d052      	beq.n	800ab84 <lwip_netconn_do_close_internal+0x250>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	330c      	adds	r3, #12
 800aae6:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aaec:	7dfa      	ldrb	r2, [r7, #23]
 800aaee:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	2200      	movs	r2, #0
 800aaf4:	625a      	str	r2, [r3, #36]	@ 0x24
    conn->state = NETCONN_NONE;
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	2200      	movs	r2, #0
 800aafa:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 800aafc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d129      	bne.n	800ab58 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 800ab04:	7dbb      	ldrb	r3, [r7, #22]
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d00c      	beq.n	800ab24 <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	2200      	movs	r2, #0
 800ab0e:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d005      	beq.n	800ab24 <lwip_netconn_do_close_internal+0x1f0>
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab1c:	2200      	movs	r2, #0
 800ab1e:	2104      	movs	r1, #4
 800ab20:	6878      	ldr	r0, [r7, #4]
 800ab22:	4798      	blx	r3
      }
      if (shut_rx) {
 800ab24:	7bbb      	ldrb	r3, [r7, #14]
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d009      	beq.n	800ab3e <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d005      	beq.n	800ab3e <lwip_netconn_do_close_internal+0x20a>
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab36:	2200      	movs	r2, #0
 800ab38:	2100      	movs	r1, #0
 800ab3a:	6878      	ldr	r0, [r7, #4]
 800ab3c:	4798      	blx	r3
      }
      if (shut_tx) {
 800ab3e:	7b7b      	ldrb	r3, [r7, #13]
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d009      	beq.n	800ab58 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d005      	beq.n	800ab58 <lwip_netconn_do_close_internal+0x224>
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab50:	2200      	movs	r2, #0
 800ab52:	2102      	movs	r1, #2
 800ab54:	6878      	ldr	r0, [r7, #4]
 800ab56:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800ab58:	78fb      	ldrb	r3, [r7, #3]
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d002      	beq.n	800ab64 <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 800ab5e:	68b8      	ldr	r0, [r7, #8]
 800ab60:	f00b feae 	bl	80168c0 <sys_sem_signal>
    }
    return ERR_OK;
 800ab64:	2300      	movs	r3, #0
 800ab66:	e03c      	b.n	800abe2 <lwip_netconn_do_close_internal+0x2ae>
 800ab68:	080180c0 	.word	0x080180c0
 800ab6c:	08018394 	.word	0x08018394
 800ab70:	08018104 	.word	0x08018104
 800ab74:	080183a4 	.word	0x080183a4
 800ab78:	080183c4 	.word	0x080183c4
 800ab7c:	080183e8 	.word	0x080183e8
 800ab80:	08018228 	.word	0x08018228
  }
  if (!close_finished) {
 800ab84:	7d7b      	ldrb	r3, [r7, #21]
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d11e      	bne.n	800abc8 <lwip_netconn_do_close_internal+0x294>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 800ab8a:	693b      	ldr	r3, [r7, #16]
 800ab8c:	7d1b      	ldrb	r3, [r3, #20]
 800ab8e:	2b01      	cmp	r3, #1
 800ab90:	d106      	bne.n	800aba0 <lwip_netconn_do_close_internal+0x26c>
 800ab92:	4b16      	ldr	r3, [pc, #88]	@ (800abec <lwip_netconn_do_close_internal+0x2b8>)
 800ab94:	f240 4241 	movw	r2, #1089	@ 0x441
 800ab98:	4915      	ldr	r1, [pc, #84]	@ (800abf0 <lwip_netconn_do_close_internal+0x2bc>)
 800ab9a:	4816      	ldr	r0, [pc, #88]	@ (800abf4 <lwip_netconn_do_close_internal+0x2c0>)
 800ab9c:	f00c f844 	bl	8016c28 <iprintf>
    if (shut_tx) {
 800aba0:	7b7b      	ldrb	r3, [r7, #13]
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d003      	beq.n	800abae <lwip_netconn_do_close_internal+0x27a>
      tcp_sent(tpcb, sent_tcp);
 800aba6:	4914      	ldr	r1, [pc, #80]	@ (800abf8 <lwip_netconn_do_close_internal+0x2c4>)
 800aba8:	6938      	ldr	r0, [r7, #16]
 800abaa:	f004 f9df 	bl	800ef6c <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 800abae:	2201      	movs	r2, #1
 800abb0:	4912      	ldr	r1, [pc, #72]	@ (800abfc <lwip_netconn_do_close_internal+0x2c8>)
 800abb2:	6938      	ldr	r0, [r7, #16]
 800abb4:	f004 fa36 	bl	800f024 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 800abb8:	4911      	ldr	r1, [pc, #68]	@ (800ac00 <lwip_netconn_do_close_internal+0x2cc>)
 800abba:	6938      	ldr	r0, [r7, #16]
 800abbc:	f004 f9f8 	bl	800efb0 <tcp_err>
    tcp_arg(tpcb, conn);
 800abc0:	6879      	ldr	r1, [r7, #4]
 800abc2:	6938      	ldr	r0, [r7, #16]
 800abc4:	f004 f99e 	bl	800ef04 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 800abc8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d106      	bne.n	800abde <lwip_netconn_do_close_internal+0x2aa>
 800abd0:	4b06      	ldr	r3, [pc, #24]	@ (800abec <lwip_netconn_do_close_internal+0x2b8>)
 800abd2:	f240 424d 	movw	r2, #1101	@ 0x44d
 800abd6:	490b      	ldr	r1, [pc, #44]	@ (800ac04 <lwip_netconn_do_close_internal+0x2d0>)
 800abd8:	4806      	ldr	r0, [pc, #24]	@ (800abf4 <lwip_netconn_do_close_internal+0x2c0>)
 800abda:	f00c f825 	bl	8016c28 <iprintf>
  return err;
 800abde:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800abe2:	4618      	mov	r0, r3
 800abe4:	3718      	adds	r7, #24
 800abe6:	46bd      	mov	sp, r7
 800abe8:	bd80      	pop	{r7, pc}
 800abea:	bf00      	nop
 800abec:	080180c0 	.word	0x080180c0
 800abf0:	080183fc 	.word	0x080183fc
 800abf4:	08018104 	.word	0x08018104
 800abf8:	0800a199 	.word	0x0800a199
 800abfc:	0800a0c9 	.word	0x0800a0c9
 800ac00:	0800a245 	.word	0x0800a245
 800ac04:	08018420 	.word	0x08018420

0800ac08 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 800ac08:	b580      	push	{r7, lr}
 800ac0a:	b084      	sub	sp, #16
 800ac0c:	af00      	add	r7, sp, #0
 800ac0e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	785b      	ldrb	r3, [r3, #1]
 800ac1a:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 800ac1c:	7afb      	ldrb	r3, [r7, #11]
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d00d      	beq.n	800ac3e <lwip_netconn_do_delconn+0x36>
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	781b      	ldrb	r3, [r3, #0]
 800ac28:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800ac2c:	2b10      	cmp	r3, #16
 800ac2e:	d006      	beq.n	800ac3e <lwip_netconn_do_delconn+0x36>
 800ac30:	4b61      	ldr	r3, [pc, #388]	@ (800adb8 <lwip_netconn_do_delconn+0x1b0>)
 800ac32:	f240 425e 	movw	r2, #1118	@ 0x45e
 800ac36:	4961      	ldr	r1, [pc, #388]	@ (800adbc <lwip_netconn_do_delconn+0x1b4>)
 800ac38:	4861      	ldr	r0, [pc, #388]	@ (800adc0 <lwip_netconn_do_delconn+0x1b8>)
 800ac3a:	f00b fff5 	bl	8016c28 <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 800ac3e:	7afb      	ldrb	r3, [r7, #11]
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d005      	beq.n	800ac50 <lwip_netconn_do_delconn+0x48>
 800ac44:	7afb      	ldrb	r3, [r7, #11]
 800ac46:	2b02      	cmp	r3, #2
 800ac48:	d002      	beq.n	800ac50 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 800ac4a:	7afb      	ldrb	r3, [r7, #11]
 800ac4c:	2b03      	cmp	r3, #3
 800ac4e:	d10a      	bne.n	800ac66 <lwip_netconn_do_delconn+0x5e>
       (state != NETCONN_CONNECT)) ||
 800ac50:	7afb      	ldrb	r3, [r7, #11]
 800ac52:	2b03      	cmp	r3, #3
 800ac54:	d10b      	bne.n	800ac6e <lwip_netconn_do_delconn+0x66>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ac5e:	f003 0304 	and.w	r3, r3, #4
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d103      	bne.n	800ac6e <lwip_netconn_do_delconn+0x66>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	22fb      	movs	r2, #251	@ 0xfb
 800ac6a:	711a      	strb	r2, [r3, #4]
 800ac6c:	e098      	b.n	800ada0 <lwip_netconn_do_delconn+0x198>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 800ac6e:	7afb      	ldrb	r3, [r7, #11]
 800ac70:	2b03      	cmp	r3, #3
 800ac72:	d10e      	bne.n	800ac92 <lwip_netconn_do_delconn+0x8a>
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ac7c:	f003 0304 	and.w	r3, r3, #4
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d106      	bne.n	800ac92 <lwip_netconn_do_delconn+0x8a>
 800ac84:	4b4c      	ldr	r3, [pc, #304]	@ (800adb8 <lwip_netconn_do_delconn+0x1b0>)
 800ac86:	f240 427a 	movw	r2, #1146	@ 0x47a
 800ac8a:	494e      	ldr	r1, [pc, #312]	@ (800adc4 <lwip_netconn_do_delconn+0x1bc>)
 800ac8c:	484c      	ldr	r0, [pc, #304]	@ (800adc0 <lwip_netconn_do_delconn+0x1b8>)
 800ac8e:	f00b ffcb 	bl	8016c28 <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	2200      	movs	r2, #0
 800ac96:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	4618      	mov	r0, r3
 800ac9e:	f7ff fdcb 	bl	800a838 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	685b      	ldr	r3, [r3, #4]
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d05f      	beq.n	800ad6c <lwip_netconn_do_delconn+0x164>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	781b      	ldrb	r3, [r3, #0]
 800acb2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800acb6:	2b10      	cmp	r3, #16
 800acb8:	d00d      	beq.n	800acd6 <lwip_netconn_do_delconn+0xce>
 800acba:	2b20      	cmp	r3, #32
 800acbc:	d151      	bne.n	800ad62 <lwip_netconn_do_delconn+0x15a>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	685b      	ldr	r3, [r3, #4]
 800acc4:	2200      	movs	r2, #0
 800acc6:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	685b      	ldr	r3, [r3, #4]
 800acce:	4618      	mov	r0, r3
 800acd0:	f009 f998 	bl	8014004 <udp_remove>
          break;
 800acd4:	e046      	b.n	800ad64 <lwip_netconn_do_delconn+0x15c>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d006      	beq.n	800acee <lwip_netconn_do_delconn+0xe6>
 800ace0:	4b35      	ldr	r3, [pc, #212]	@ (800adb8 <lwip_netconn_do_delconn+0x1b0>)
 800ace2:	f240 4294 	movw	r2, #1172	@ 0x494
 800ace6:	4938      	ldr	r1, [pc, #224]	@ (800adc8 <lwip_netconn_do_delconn+0x1c0>)
 800ace8:	4835      	ldr	r0, [pc, #212]	@ (800adc0 <lwip_netconn_do_delconn+0x1b8>)
 800acea:	f00b ff9d 	bl	8016c28 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	2204      	movs	r2, #4
 800acf4:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	2203      	movs	r2, #3
 800acfa:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	68fa      	ldr	r2, [r7, #12]
 800ad02:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	2100      	movs	r1, #0
 800ad0a:	4618      	mov	r0, r3
 800ad0c:	f7ff fe12 	bl	800a934 <lwip_netconn_do_close_internal>
 800ad10:	4603      	mov	r3, r0
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d04b      	beq.n	800adae <lwip_netconn_do_delconn+0x1a6>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	785b      	ldrb	r3, [r3, #1]
 800ad1c:	2b04      	cmp	r3, #4
 800ad1e:	d006      	beq.n	800ad2e <lwip_netconn_do_delconn+0x126>
 800ad20:	4b25      	ldr	r3, [pc, #148]	@ (800adb8 <lwip_netconn_do_delconn+0x1b0>)
 800ad22:	f240 429a 	movw	r2, #1178	@ 0x49a
 800ad26:	4929      	ldr	r1, [pc, #164]	@ (800adcc <lwip_netconn_do_delconn+0x1c4>)
 800ad28:	4825      	ldr	r0, [pc, #148]	@ (800adc0 <lwip_netconn_do_delconn+0x1b8>)
 800ad2a:	f00b ff7d 	bl	8016c28 <iprintf>
            UNLOCK_TCPIP_CORE();
 800ad2e:	4828      	ldr	r0, [pc, #160]	@ (800add0 <lwip_netconn_do_delconn+0x1c8>)
 800ad30:	f00b fe2f 	bl	8016992 <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	330c      	adds	r3, #12
 800ad3a:	2100      	movs	r1, #0
 800ad3c:	4618      	mov	r0, r3
 800ad3e:	f00b fd8e 	bl	801685e <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 800ad42:	4823      	ldr	r0, [pc, #140]	@ (800add0 <lwip_netconn_do_delconn+0x1c8>)
 800ad44:	f00b fe16 	bl	8016974 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	785b      	ldrb	r3, [r3, #1]
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d02d      	beq.n	800adae <lwip_netconn_do_delconn+0x1a6>
 800ad52:	4b19      	ldr	r3, [pc, #100]	@ (800adb8 <lwip_netconn_do_delconn+0x1b0>)
 800ad54:	f240 429e 	movw	r2, #1182	@ 0x49e
 800ad58:	491c      	ldr	r1, [pc, #112]	@ (800adcc <lwip_netconn_do_delconn+0x1c4>)
 800ad5a:	4819      	ldr	r0, [pc, #100]	@ (800adc0 <lwip_netconn_do_delconn+0x1b8>)
 800ad5c:	f00b ff64 	bl	8016c28 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 800ad60:	e025      	b.n	800adae <lwip_netconn_do_delconn+0x1a6>
#endif /* LWIP_TCP */
        default:
          break;
 800ad62:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	2200      	movs	r2, #0
 800ad6a:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d007      	beq.n	800ad86 <lwip_netconn_do_delconn+0x17e>
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad7c:	68fa      	ldr	r2, [r7, #12]
 800ad7e:	6810      	ldr	r0, [r2, #0]
 800ad80:	2200      	movs	r2, #0
 800ad82:	2100      	movs	r1, #0
 800ad84:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d007      	beq.n	800ada0 <lwip_netconn_do_delconn+0x198>
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad96:	68fa      	ldr	r2, [r7, #12]
 800ad98:	6810      	ldr	r0, [r2, #0]
 800ad9a:	2200      	movs	r2, #0
 800ad9c:	2102      	movs	r1, #2
 800ad9e:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	330c      	adds	r3, #12
 800ada6:	4618      	mov	r0, r3
 800ada8:	f00b fda4 	bl	80168f4 <sys_sem_valid>
 800adac:	e000      	b.n	800adb0 <lwip_netconn_do_delconn+0x1a8>
          return;
 800adae:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 800adb0:	3710      	adds	r7, #16
 800adb2:	46bd      	mov	sp, r7
 800adb4:	bd80      	pop	{r7, pc}
 800adb6:	bf00      	nop
 800adb8:	080180c0 	.word	0x080180c0
 800adbc:	08018430 	.word	0x08018430
 800adc0:	08018104 	.word	0x08018104
 800adc4:	08018444 	.word	0x08018444
 800adc8:	08018464 	.word	0x08018464
 800adcc:	08018480 	.word	0x08018480
 800add0:	20009a98 	.word	0x20009a98

0800add4 <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 800add4:	b580      	push	{r7, lr}
 800add6:	b084      	sub	sp, #16
 800add8:	af00      	add	r7, sp, #0
 800adda:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800ade0:	68bb      	ldr	r3, [r7, #8]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	685b      	ldr	r3, [r3, #4]
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d025      	beq.n	800ae36 <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800adea:	68bb      	ldr	r3, [r7, #8]
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	781b      	ldrb	r3, [r3, #0]
 800adf0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800adf4:	2b10      	cmp	r3, #16
 800adf6:	d00e      	beq.n	800ae16 <lwip_netconn_do_bind+0x42>
 800adf8:	2b20      	cmp	r3, #32
 800adfa:	d119      	bne.n	800ae30 <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800adfc:	68bb      	ldr	r3, [r7, #8]
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	6858      	ldr	r0, [r3, #4]
 800ae02:	68bb      	ldr	r3, [r7, #8]
 800ae04:	6899      	ldr	r1, [r3, #8]
 800ae06:	68bb      	ldr	r3, [r7, #8]
 800ae08:	899b      	ldrh	r3, [r3, #12]
 800ae0a:	461a      	mov	r2, r3
 800ae0c:	f009 f852 	bl	8013eb4 <udp_bind>
 800ae10:	4603      	mov	r3, r0
 800ae12:	73fb      	strb	r3, [r7, #15]
        break;
 800ae14:	e011      	b.n	800ae3a <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800ae16:	68bb      	ldr	r3, [r7, #8]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	6858      	ldr	r0, [r3, #4]
 800ae1c:	68bb      	ldr	r3, [r7, #8]
 800ae1e:	6899      	ldr	r1, [r3, #8]
 800ae20:	68bb      	ldr	r3, [r7, #8]
 800ae22:	899b      	ldrh	r3, [r3, #12]
 800ae24:	461a      	mov	r2, r3
 800ae26:	f002 ffdd 	bl	800dde4 <tcp_bind>
 800ae2a:	4603      	mov	r3, r0
 800ae2c:	73fb      	strb	r3, [r7, #15]
        break;
 800ae2e:	e004      	b.n	800ae3a <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 800ae30:	23fa      	movs	r3, #250	@ 0xfa
 800ae32:	73fb      	strb	r3, [r7, #15]
        break;
 800ae34:	e001      	b.n	800ae3a <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
 800ae36:	23fa      	movs	r3, #250	@ 0xfa
 800ae38:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 800ae3a:	68bb      	ldr	r3, [r7, #8]
 800ae3c:	7bfa      	ldrb	r2, [r7, #15]
 800ae3e:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800ae40:	bf00      	nop
 800ae42:	3710      	adds	r7, #16
 800ae44:	46bd      	mov	sp, r7
 800ae46:	bd80      	pop	{r7, pc}

0800ae48 <lwip_netconn_do_listen>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_listen(void *m)
{
 800ae48:	b580      	push	{r7, lr}
 800ae4a:	b086      	sub	sp, #24
 800ae4c:	af00      	add	r7, sp, #0
 800ae4e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	617b      	str	r3, [r7, #20]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800ae54:	697b      	ldr	r3, [r7, #20]
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	685b      	ldr	r3, [r3, #4]
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d07f      	beq.n	800af5e <lwip_netconn_do_listen+0x116>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800ae5e:	697b      	ldr	r3, [r7, #20]
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	781b      	ldrb	r3, [r3, #0]
 800ae64:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800ae68:	2b10      	cmp	r3, #16
 800ae6a:	d175      	bne.n	800af58 <lwip_netconn_do_listen+0x110>
      if (msg->conn->state == NETCONN_NONE) {
 800ae6c:	697b      	ldr	r3, [r7, #20]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	785b      	ldrb	r3, [r3, #1]
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d165      	bne.n	800af42 <lwip_netconn_do_listen+0xfa>
        struct tcp_pcb *lpcb;
        if (msg->conn->pcb.tcp->state != CLOSED) {
 800ae76:	697b      	ldr	r3, [r7, #20]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	685b      	ldr	r3, [r3, #4]
 800ae7c:	7d1b      	ldrb	r3, [r3, #20]
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d002      	beq.n	800ae88 <lwip_netconn_do_listen+0x40>
          /* connection is not closed, cannot listen */
          err = ERR_VAL;
 800ae82:	23fa      	movs	r3, #250	@ 0xfa
 800ae84:	72fb      	strb	r3, [r7, #11]
 800ae86:	e06c      	b.n	800af62 <lwip_netconn_do_listen+0x11a>
        } else {
          u8_t backlog;
#if TCP_LISTEN_BACKLOG
          backlog = msg->msg.lb.backlog;
#else  /* TCP_LISTEN_BACKLOG */
          backlog = TCP_DEFAULT_LISTEN_BACKLOG;
 800ae88:	23ff      	movs	r3, #255	@ 0xff
 800ae8a:	74fb      	strb	r3, [r7, #19]
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->local_ip,  IPADDR_TYPE_ANY);
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->remote_ip, IPADDR_TYPE_ANY);
          }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

          lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 800ae8c:	697b      	ldr	r3, [r7, #20]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	685b      	ldr	r3, [r3, #4]
 800ae92:	f107 020b 	add.w	r2, r7, #11
 800ae96:	7cf9      	ldrb	r1, [r7, #19]
 800ae98:	4618      	mov	r0, r3
 800ae9a:	f003 f85b 	bl	800df54 <tcp_listen_with_backlog_and_err>
 800ae9e:	60f8      	str	r0, [r7, #12]

          if (lpcb == NULL) {
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d05d      	beq.n	800af62 <lwip_netconn_do_listen+0x11a>
            /* in this case, the old pcb is still allocated */
          } else {
            /* delete the recvmbox and allocate the acceptmbox */
            if (sys_mbox_valid(&msg->conn->recvmbox)) {
 800aea6:	697b      	ldr	r3, [r7, #20]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	3310      	adds	r3, #16
 800aeac:	4618      	mov	r0, r3
 800aeae:	f00b fc93 	bl	80167d8 <sys_mbox_valid>
 800aeb2:	4603      	mov	r3, r0
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d00b      	beq.n	800aed0 <lwip_netconn_do_listen+0x88>
              /** @todo: should we drain the recvmbox here? */
              sys_mbox_free(&msg->conn->recvmbox);
 800aeb8:	697b      	ldr	r3, [r7, #20]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	3310      	adds	r3, #16
 800aebe:	4618      	mov	r0, r3
 800aec0:	f00b fc16 	bl	80166f0 <sys_mbox_free>
              sys_mbox_set_invalid(&msg->conn->recvmbox);
 800aec4:	697b      	ldr	r3, [r7, #20]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	3310      	adds	r3, #16
 800aeca:	4618      	mov	r0, r3
 800aecc:	f00b fc95 	bl	80167fa <sys_mbox_set_invalid>
            }
            err = ERR_OK;
 800aed0:	2300      	movs	r3, #0
 800aed2:	72fb      	strb	r3, [r7, #11]
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 800aed4:	697b      	ldr	r3, [r7, #20]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	3314      	adds	r3, #20
 800aeda:	4618      	mov	r0, r3
 800aedc:	f00b fc7c 	bl	80167d8 <sys_mbox_valid>
 800aee0:	4603      	mov	r3, r0
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d108      	bne.n	800aef8 <lwip_netconn_do_listen+0xb0>
              err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 800aee6:	697b      	ldr	r3, [r7, #20]
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	3314      	adds	r3, #20
 800aeec:	2106      	movs	r1, #6
 800aeee:	4618      	mov	r0, r3
 800aef0:	f00b fbe4 	bl	80166bc <sys_mbox_new>
 800aef4:	4603      	mov	r3, r0
 800aef6:	72fb      	strb	r3, [r7, #11]
            }
            if (err == ERR_OK) {
 800aef8:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d118      	bne.n	800af32 <lwip_netconn_do_listen+0xea>
              msg->conn->state = NETCONN_LISTEN;
 800af00:	697b      	ldr	r3, [r7, #20]
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	2202      	movs	r2, #2
 800af06:	705a      	strb	r2, [r3, #1]
              msg->conn->pcb.tcp = lpcb;
 800af08:	697b      	ldr	r3, [r7, #20]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	68fa      	ldr	r2, [r7, #12]
 800af0e:	605a      	str	r2, [r3, #4]
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 800af10:	697b      	ldr	r3, [r7, #20]
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	685a      	ldr	r2, [r3, #4]
 800af16:	697b      	ldr	r3, [r7, #20]
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	4619      	mov	r1, r3
 800af1c:	4610      	mov	r0, r2
 800af1e:	f003 fff1 	bl	800ef04 <tcp_arg>
              tcp_accept(msg->conn->pcb.tcp, accept_function);
 800af22:	697b      	ldr	r3, [r7, #20]
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	685b      	ldr	r3, [r3, #4]
 800af28:	4912      	ldr	r1, [pc, #72]	@ (800af74 <lwip_netconn_do_listen+0x12c>)
 800af2a:	4618      	mov	r0, r3
 800af2c:	f004 f862 	bl	800eff4 <tcp_accept>
 800af30:	e017      	b.n	800af62 <lwip_netconn_do_listen+0x11a>
            } else {
              /* since the old pcb is already deallocated, free lpcb now */
              tcp_close(lpcb);
 800af32:	68f8      	ldr	r0, [r7, #12]
 800af34:	f002 fe04 	bl	800db40 <tcp_close>
              msg->conn->pcb.tcp = NULL;
 800af38:	697b      	ldr	r3, [r7, #20]
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	2200      	movs	r2, #0
 800af3e:	605a      	str	r2, [r3, #4]
 800af40:	e00f      	b.n	800af62 <lwip_netconn_do_listen+0x11a>
            }
          }
        }
      } else if (msg->conn->state == NETCONN_LISTEN) {
 800af42:	697b      	ldr	r3, [r7, #20]
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	785b      	ldrb	r3, [r3, #1]
 800af48:	2b02      	cmp	r3, #2
 800af4a:	d102      	bne.n	800af52 <lwip_netconn_do_listen+0x10a>
        /* already listening, allow updating of the backlog */
        err = ERR_OK;
 800af4c:	2300      	movs	r3, #0
 800af4e:	72fb      	strb	r3, [r7, #11]
 800af50:	e007      	b.n	800af62 <lwip_netconn_do_listen+0x11a>
        tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
      } else {
        err = ERR_CONN;
 800af52:	23f5      	movs	r3, #245	@ 0xf5
 800af54:	72fb      	strb	r3, [r7, #11]
 800af56:	e004      	b.n	800af62 <lwip_netconn_do_listen+0x11a>
      }
    } else {
      err = ERR_ARG;
 800af58:	23f0      	movs	r3, #240	@ 0xf0
 800af5a:	72fb      	strb	r3, [r7, #11]
 800af5c:	e001      	b.n	800af62 <lwip_netconn_do_listen+0x11a>
    }
  } else {
    err = ERR_CONN;
 800af5e:	23f5      	movs	r3, #245	@ 0xf5
 800af60:	72fb      	strb	r3, [r7, #11]
  }
  msg->err = err;
 800af62:	f997 200b 	ldrsb.w	r2, [r7, #11]
 800af66:	697b      	ldr	r3, [r7, #20]
 800af68:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800af6a:	bf00      	nop
 800af6c:	3718      	adds	r7, #24
 800af6e:	46bd      	mov	sp, r7
 800af70:	bd80      	pop	{r7, pc}
 800af72:	bf00      	nop
 800af74:	0800a449 	.word	0x0800a449

0800af78 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 800af78:	b580      	push	{r7, lr}
 800af7a:	b086      	sub	sp, #24
 800af7c:	af00      	add	r7, sp, #0
 800af7e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 800af84:	693b      	ldr	r3, [r7, #16]
 800af86:	2200      	movs	r2, #0
 800af88:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 800af8a:	693b      	ldr	r3, [r7, #16]
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	685b      	ldr	r3, [r3, #4]
 800af90:	2b00      	cmp	r3, #0
 800af92:	d022      	beq.n	800afda <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800af94:	693b      	ldr	r3, [r7, #16]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	781b      	ldrb	r3, [r3, #0]
 800af9a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800af9e:	2b10      	cmp	r3, #16
 800afa0:	d11b      	bne.n	800afda <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 800afa2:	693b      	ldr	r3, [r7, #16]
 800afa4:	689b      	ldr	r3, [r3, #8]
 800afa6:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 800afa8:	697b      	ldr	r3, [r7, #20]
 800afaa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800afae:	d202      	bcs.n	800afb6 <lwip_netconn_do_recv+0x3e>
 800afb0:	697b      	ldr	r3, [r7, #20]
 800afb2:	b29b      	uxth	r3, r3
 800afb4:	e001      	b.n	800afba <lwip_netconn_do_recv+0x42>
 800afb6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800afba:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 800afbc:	693b      	ldr	r3, [r7, #16]
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	685b      	ldr	r3, [r3, #4]
 800afc2:	89fa      	ldrh	r2, [r7, #14]
 800afc4:	4611      	mov	r1, r2
 800afc6:	4618      	mov	r0, r3
 800afc8:	f003 f8c8 	bl	800e15c <tcp_recved>
        remaining -= recved;
 800afcc:	89fb      	ldrh	r3, [r7, #14]
 800afce:	697a      	ldr	r2, [r7, #20]
 800afd0:	1ad3      	subs	r3, r2, r3
 800afd2:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 800afd4:	697b      	ldr	r3, [r7, #20]
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d1e6      	bne.n	800afa8 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 800afda:	bf00      	nop
 800afdc:	3718      	adds	r7, #24
 800afde:	46bd      	mov	sp, r7
 800afe0:	bd80      	pop	{r7, pc}
	...

0800afe4 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800afe4:	b580      	push	{r7, lr}
 800afe6:	b088      	sub	sp, #32
 800afe8:	af00      	add	r7, sp, #0
 800afea:	6078      	str	r0, [r7, #4]
 800afec:	460b      	mov	r3, r1
 800afee:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 800aff0:	2300      	movs	r3, #0
 800aff2:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d106      	bne.n	800b008 <lwip_netconn_do_writemore+0x24>
 800affa:	4b61      	ldr	r3, [pc, #388]	@ (800b180 <lwip_netconn_do_writemore+0x19c>)
 800affc:	f240 6273 	movw	r2, #1651	@ 0x673
 800b000:	4960      	ldr	r1, [pc, #384]	@ (800b184 <lwip_netconn_do_writemore+0x1a0>)
 800b002:	4861      	ldr	r0, [pc, #388]	@ (800b188 <lwip_netconn_do_writemore+0x1a4>)
 800b004:	f00b fe10 	bl	8016c28 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	785b      	ldrb	r3, [r3, #1]
 800b00c:	2b01      	cmp	r3, #1
 800b00e:	d006      	beq.n	800b01e <lwip_netconn_do_writemore+0x3a>
 800b010:	4b5b      	ldr	r3, [pc, #364]	@ (800b180 <lwip_netconn_do_writemore+0x19c>)
 800b012:	f240 6274 	movw	r2, #1652	@ 0x674
 800b016:	495d      	ldr	r1, [pc, #372]	@ (800b18c <lwip_netconn_do_writemore+0x1a8>)
 800b018:	485b      	ldr	r0, [pc, #364]	@ (800b188 <lwip_netconn_do_writemore+0x1a4>)
 800b01a:	f00b fe05 	bl	8016c28 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b022:	2b00      	cmp	r3, #0
 800b024:	d106      	bne.n	800b034 <lwip_netconn_do_writemore+0x50>
 800b026:	4b56      	ldr	r3, [pc, #344]	@ (800b180 <lwip_netconn_do_writemore+0x19c>)
 800b028:	f240 6275 	movw	r2, #1653	@ 0x675
 800b02c:	4958      	ldr	r1, [pc, #352]	@ (800b190 <lwip_netconn_do_writemore+0x1ac>)
 800b02e:	4856      	ldr	r0, [pc, #344]	@ (800b188 <lwip_netconn_do_writemore+0x1a4>)
 800b030:	f00b fdfa 	bl	8016c28 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	685b      	ldr	r3, [r3, #4]
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d106      	bne.n	800b04a <lwip_netconn_do_writemore+0x66>
 800b03c:	4b50      	ldr	r3, [pc, #320]	@ (800b180 <lwip_netconn_do_writemore+0x19c>)
 800b03e:	f240 6276 	movw	r2, #1654	@ 0x676
 800b042:	4954      	ldr	r1, [pc, #336]	@ (800b194 <lwip_netconn_do_writemore+0x1b0>)
 800b044:	4850      	ldr	r0, [pc, #320]	@ (800b188 <lwip_netconn_do_writemore+0x1a4>)
 800b046:	f00b fdef 	bl	8016c28 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b04e:	699a      	ldr	r2, [r3, #24]
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b054:	695b      	ldr	r3, [r3, #20]
 800b056:	429a      	cmp	r2, r3
 800b058:	d306      	bcc.n	800b068 <lwip_netconn_do_writemore+0x84>
 800b05a:	4b49      	ldr	r3, [pc, #292]	@ (800b180 <lwip_netconn_do_writemore+0x19c>)
 800b05c:	f240 6277 	movw	r2, #1655	@ 0x677
 800b060:	494d      	ldr	r1, [pc, #308]	@ (800b198 <lwip_netconn_do_writemore+0x1b4>)
 800b062:	4849      	ldr	r0, [pc, #292]	@ (800b188 <lwip_netconn_do_writemore+0x1a4>)
 800b064:	f00b fde0 	bl	8016c28 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b06c:	899b      	ldrh	r3, [r3, #12]
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d106      	bne.n	800b080 <lwip_netconn_do_writemore+0x9c>
 800b072:	4b43      	ldr	r3, [pc, #268]	@ (800b180 <lwip_netconn_do_writemore+0x19c>)
 800b074:	f240 6279 	movw	r2, #1657	@ 0x679
 800b078:	4948      	ldr	r1, [pc, #288]	@ (800b19c <lwip_netconn_do_writemore+0x1b8>)
 800b07a:	4843      	ldr	r0, [pc, #268]	@ (800b188 <lwip_netconn_do_writemore+0x1a4>)
 800b07c:	f00b fdd4 	bl	8016c28 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b084:	7f1b      	ldrb	r3, [r3, #28]
 800b086:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b08e:	f003 0302 	and.w	r3, r3, #2
 800b092:	2b00      	cmp	r3, #0
 800b094:	d104      	bne.n	800b0a0 <lwip_netconn_do_writemore+0xbc>
 800b096:	7ebb      	ldrb	r3, [r7, #26]
 800b098:	f003 0304 	and.w	r3, r3, #4
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d001      	beq.n	800b0a4 <lwip_netconn_do_writemore+0xc0>
 800b0a0:	2301      	movs	r3, #1
 800b0a2:	e000      	b.n	800b0a6 <lwip_netconn_do_writemore+0xc2>
 800b0a4:	2300      	movs	r3, #0
 800b0a6:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b0ac:	689b      	ldr	r3, [r3, #8]
 800b0ae:	681a      	ldr	r2, [r3, #0]
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b0b4:	691b      	ldr	r3, [r3, #16]
 800b0b6:	4413      	add	r3, r2
 800b0b8:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b0be:	689b      	ldr	r3, [r3, #8]
 800b0c0:	685a      	ldr	r2, [r3, #4]
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b0c6:	691b      	ldr	r3, [r3, #16]
 800b0c8:	1ad3      	subs	r3, r2, r3
 800b0ca:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 800b0cc:	693b      	ldr	r3, [r7, #16]
 800b0ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b0d2:	d307      	bcc.n	800b0e4 <lwip_netconn_do_writemore+0x100>
        len = 0xffff;
 800b0d4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b0d8:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800b0da:	7ebb      	ldrb	r3, [r7, #26]
 800b0dc:	f043 0302 	orr.w	r3, r3, #2
 800b0e0:	76bb      	strb	r3, [r7, #26]
 800b0e2:	e001      	b.n	800b0e8 <lwip_netconn_do_writemore+0x104>
      } else {
        len = (u16_t)diff;
 800b0e4:	693b      	ldr	r3, [r7, #16]
 800b0e6:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	685b      	ldr	r3, [r3, #4]
 800b0ec:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800b0f0:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 800b0f2:	89fa      	ldrh	r2, [r7, #14]
 800b0f4:	8bbb      	ldrh	r3, [r7, #28]
 800b0f6:	429a      	cmp	r2, r3
 800b0f8:	d216      	bcs.n	800b128 <lwip_netconn_do_writemore+0x144>
        /* don't try to write more than sendbuf */
        len = available;
 800b0fa:	89fb      	ldrh	r3, [r7, #14]
 800b0fc:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 800b0fe:	7e3b      	ldrb	r3, [r7, #24]
 800b100:	2b00      	cmp	r3, #0
 800b102:	d00d      	beq.n	800b120 <lwip_netconn_do_writemore+0x13c>
          if (!len) {
 800b104:	8bbb      	ldrh	r3, [r7, #28]
 800b106:	2b00      	cmp	r3, #0
 800b108:	d10e      	bne.n	800b128 <lwip_netconn_do_writemore+0x144>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b10e:	699b      	ldr	r3, [r3, #24]
 800b110:	2b00      	cmp	r3, #0
 800b112:	d102      	bne.n	800b11a <lwip_netconn_do_writemore+0x136>
 800b114:	f06f 0306 	mvn.w	r3, #6
 800b118:	e000      	b.n	800b11c <lwip_netconn_do_writemore+0x138>
 800b11a:	2300      	movs	r3, #0
 800b11c:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 800b11e:	e08f      	b.n	800b240 <lwip_netconn_do_writemore+0x25c>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 800b120:	7ebb      	ldrb	r3, [r7, #26]
 800b122:	f043 0302 	orr.w	r3, r3, #2
 800b126:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b12c:	691a      	ldr	r2, [r3, #16]
 800b12e:	8bbb      	ldrh	r3, [r7, #28]
 800b130:	441a      	add	r2, r3
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b136:	689b      	ldr	r3, [r3, #8]
 800b138:	685b      	ldr	r3, [r3, #4]
 800b13a:	429a      	cmp	r2, r3
 800b13c:	d906      	bls.n	800b14c <lwip_netconn_do_writemore+0x168>
 800b13e:	4b10      	ldr	r3, [pc, #64]	@ (800b180 <lwip_netconn_do_writemore+0x19c>)
 800b140:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 800b144:	4916      	ldr	r1, [pc, #88]	@ (800b1a0 <lwip_netconn_do_writemore+0x1bc>)
 800b146:	4810      	ldr	r0, [pc, #64]	@ (800b188 <lwip_netconn_do_writemore+0x1a4>)
 800b148:	f00b fd6e 	bl	8016c28 <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 800b14c:	8bbb      	ldrh	r3, [r7, #28]
 800b14e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b152:	4293      	cmp	r3, r2
 800b154:	d103      	bne.n	800b15e <lwip_netconn_do_writemore+0x17a>
 800b156:	693b      	ldr	r3, [r7, #16]
 800b158:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b15c:	d209      	bcs.n	800b172 <lwip_netconn_do_writemore+0x18e>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800b15e:	693b      	ldr	r3, [r7, #16]
 800b160:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 800b162:	8bba      	ldrh	r2, [r7, #28]
 800b164:	429a      	cmp	r2, r3
 800b166:	d11d      	bne.n	800b1a4 <lwip_netconn_do_writemore+0x1c0>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b16c:	899b      	ldrh	r3, [r3, #12]
 800b16e:	2b01      	cmp	r3, #1
 800b170:	d918      	bls.n	800b1a4 <lwip_netconn_do_writemore+0x1c0>
        write_more = 1;
 800b172:	2301      	movs	r3, #1
 800b174:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800b176:	7ebb      	ldrb	r3, [r7, #26]
 800b178:	f043 0302 	orr.w	r3, r3, #2
 800b17c:	76bb      	strb	r3, [r7, #26]
 800b17e:	e013      	b.n	800b1a8 <lwip_netconn_do_writemore+0x1c4>
 800b180:	080180c0 	.word	0x080180c0
 800b184:	08018218 	.word	0x08018218
 800b188:	08018104 	.word	0x08018104
 800b18c:	08018520 	.word	0x08018520
 800b190:	08018228 	.word	0x08018228
 800b194:	08018540 	.word	0x08018540
 800b198:	08018558 	.word	0x08018558
 800b19c:	08018598 	.word	0x08018598
 800b1a0:	080185c0 	.word	0x080185c0
      } else {
        write_more = 0;
 800b1a4:	2300      	movs	r3, #0
 800b1a6:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	6858      	ldr	r0, [r3, #4]
 800b1ac:	7ebb      	ldrb	r3, [r7, #26]
 800b1ae:	8bba      	ldrh	r2, [r7, #28]
 800b1b0:	6979      	ldr	r1, [r7, #20]
 800b1b2:	f006 fde3 	bl	8011d7c <tcp_write>
 800b1b6:	4603      	mov	r3, r0
 800b1b8:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 800b1ba:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d12c      	bne.n	800b21c <lwip_netconn_do_writemore+0x238>
        conn->current_msg->msg.w.offset += len;
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b1c6:	6999      	ldr	r1, [r3, #24]
 800b1c8:	8bba      	ldrh	r2, [r7, #28]
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b1ce:	440a      	add	r2, r1
 800b1d0:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b1d6:	6919      	ldr	r1, [r3, #16]
 800b1d8:	8bba      	ldrh	r2, [r7, #28]
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b1de:	440a      	add	r2, r1
 800b1e0:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b1e6:	691a      	ldr	r2, [r3, #16]
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b1ec:	689b      	ldr	r3, [r3, #8]
 800b1ee:	685b      	ldr	r3, [r3, #4]
 800b1f0:	429a      	cmp	r2, r3
 800b1f2:	d113      	bne.n	800b21c <lwip_netconn_do_writemore+0x238>
          conn->current_msg->msg.w.vector_cnt--;
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b1f8:	899a      	ldrh	r2, [r3, #12]
 800b1fa:	3a01      	subs	r2, #1
 800b1fc:	b292      	uxth	r2, r2
 800b1fe:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b204:	899b      	ldrh	r3, [r3, #12]
 800b206:	2b00      	cmp	r3, #0
 800b208:	d008      	beq.n	800b21c <lwip_netconn_do_writemore+0x238>
            conn->current_msg->msg.w.vector++;
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b20e:	689a      	ldr	r2, [r3, #8]
 800b210:	3208      	adds	r2, #8
 800b212:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b218:	2200      	movs	r2, #0
 800b21a:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 800b21c:	7e7b      	ldrb	r3, [r7, #25]
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d004      	beq.n	800b22c <lwip_netconn_do_writemore+0x248>
 800b222:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b226:	2b00      	cmp	r3, #0
 800b228:	f43f af3e 	beq.w	800b0a8 <lwip_netconn_do_writemore+0xc4>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 800b22c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b230:	2b00      	cmp	r3, #0
 800b232:	d004      	beq.n	800b23e <lwip_netconn_do_writemore+0x25a>
 800b234:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b238:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b23c:	d136      	bne.n	800b2ac <lwip_netconn_do_writemore+0x2c8>
err_mem:
 800b23e:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 800b240:	7e3b      	ldrb	r3, [r7, #24]
 800b242:	2b00      	cmp	r3, #0
 800b244:	d01b      	beq.n	800b27e <lwip_netconn_do_writemore+0x29a>
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b24a:	699a      	ldr	r2, [r3, #24]
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b250:	695b      	ldr	r3, [r3, #20]
 800b252:	429a      	cmp	r2, r3
 800b254:	d213      	bcs.n	800b27e <lwip_netconn_do_writemore+0x29a>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d005      	beq.n	800b26a <lwip_netconn_do_writemore+0x286>
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b262:	2200      	movs	r2, #0
 800b264:	2103      	movs	r1, #3
 800b266:	6878      	ldr	r0, [r7, #4]
 800b268:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b270:	f043 0310 	orr.w	r3, r3, #16
 800b274:	b2da      	uxtb	r2, r3
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	f883 2020 	strb.w	r2, [r3, #32]
 800b27c:	e016      	b.n	800b2ac <lwip_netconn_do_writemore+0x2c8>
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	685b      	ldr	r3, [r3, #4]
 800b282:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800b286:	f5b3 6f86 	cmp.w	r3, #1072	@ 0x430
 800b28a:	d305      	bcc.n	800b298 <lwip_netconn_do_writemore+0x2b4>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	685b      	ldr	r3, [r3, #4]
 800b290:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800b294:	2b04      	cmp	r3, #4
 800b296:	d909      	bls.n	800b2ac <lwip_netconn_do_writemore+0x2c8>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d005      	beq.n	800b2ac <lwip_netconn_do_writemore+0x2c8>
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b2a4:	2200      	movs	r2, #0
 800b2a6:	2103      	movs	r1, #3
 800b2a8:	6878      	ldr	r0, [r7, #4]
 800b2aa:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 800b2ac:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d11d      	bne.n	800b2f0 <lwip_netconn_do_writemore+0x30c>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b2b8:	699a      	ldr	r2, [r3, #24]
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b2be:	695b      	ldr	r3, [r3, #20]
 800b2c0:	429a      	cmp	r2, r3
 800b2c2:	d002      	beq.n	800b2ca <lwip_netconn_do_writemore+0x2e6>
 800b2c4:	7e3b      	ldrb	r3, [r7, #24]
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d001      	beq.n	800b2ce <lwip_netconn_do_writemore+0x2ea>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 800b2ca:	2301      	movs	r3, #1
 800b2cc:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	685b      	ldr	r3, [r3, #4]
 800b2d2:	4618      	mov	r0, r3
 800b2d4:	f007 fb3c 	bl	8012950 <tcp_output>
 800b2d8:	4603      	mov	r3, r0
 800b2da:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 800b2dc:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800b2e0:	f113 0f04 	cmn.w	r3, #4
 800b2e4:	d12c      	bne.n	800b340 <lwip_netconn_do_writemore+0x35c>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800b2e6:	7b3b      	ldrb	r3, [r7, #12]
 800b2e8:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800b2ea:	2301      	movs	r3, #1
 800b2ec:	76fb      	strb	r3, [r7, #27]
 800b2ee:	e027      	b.n	800b340 <lwip_netconn_do_writemore+0x35c>
      }
    } else if (err == ERR_MEM) {
 800b2f0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b2f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2f8:	d120      	bne.n	800b33c <lwip_netconn_do_writemore+0x358>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	685b      	ldr	r3, [r3, #4]
 800b2fe:	4618      	mov	r0, r3
 800b300:	f007 fb26 	bl	8012950 <tcp_output>
 800b304:	4603      	mov	r3, r0
 800b306:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 800b308:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800b30c:	f113 0f04 	cmn.w	r3, #4
 800b310:	d104      	bne.n	800b31c <lwip_netconn_do_writemore+0x338>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800b312:	7b7b      	ldrb	r3, [r7, #13]
 800b314:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800b316:	2301      	movs	r3, #1
 800b318:	76fb      	strb	r3, [r7, #27]
 800b31a:	e011      	b.n	800b340 <lwip_netconn_do_writemore+0x35c>
      } else if (dontblock) {
 800b31c:	7e3b      	ldrb	r3, [r7, #24]
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d00e      	beq.n	800b340 <lwip_netconn_do_writemore+0x35c>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b326:	699b      	ldr	r3, [r3, #24]
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d102      	bne.n	800b332 <lwip_netconn_do_writemore+0x34e>
 800b32c:	f06f 0306 	mvn.w	r3, #6
 800b330:	e000      	b.n	800b334 <lwip_netconn_do_writemore+0x350>
 800b332:	2300      	movs	r3, #0
 800b334:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800b336:	2301      	movs	r3, #1
 800b338:	76fb      	strb	r3, [r7, #27]
 800b33a:	e001      	b.n	800b340 <lwip_netconn_do_writemore+0x35c>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 800b33c:	2301      	movs	r3, #1
 800b33e:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 800b340:	7efb      	ldrb	r3, [r7, #27]
 800b342:	2b00      	cmp	r3, #0
 800b344:	d015      	beq.n	800b372 <lwip_netconn_do_writemore+0x38e>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	330c      	adds	r3, #12
 800b34e:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b354:	7ffa      	ldrb	r2, [r7, #31]
 800b356:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	2200      	movs	r2, #0
 800b35c:	625a      	str	r2, [r3, #36]	@ 0x24
    conn->state = NETCONN_NONE;
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	2200      	movs	r2, #0
 800b362:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800b364:	78fb      	ldrb	r3, [r7, #3]
 800b366:	2b00      	cmp	r3, #0
 800b368:	d006      	beq.n	800b378 <lwip_netconn_do_writemore+0x394>
#endif
    {
      sys_sem_signal(op_completed_sem);
 800b36a:	68b8      	ldr	r0, [r7, #8]
 800b36c:	f00b faa8 	bl	80168c0 <sys_sem_signal>
 800b370:	e002      	b.n	800b378 <lwip_netconn_do_writemore+0x394>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 800b372:	f04f 33ff 	mov.w	r3, #4294967295
 800b376:	e000      	b.n	800b37a <lwip_netconn_do_writemore+0x396>
  }
#endif
  return ERR_OK;
 800b378:	2300      	movs	r3, #0
}
 800b37a:	4618      	mov	r0, r3
 800b37c:	3720      	adds	r7, #32
 800b37e:	46bd      	mov	sp, r7
 800b380:	bd80      	pop	{r7, pc}
 800b382:	bf00      	nop

0800b384 <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 800b384:	b580      	push	{r7, lr}
 800b386:	b084      	sub	sp, #16
 800b388:	af00      	add	r7, sp, #0
 800b38a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 800b390:	68bb      	ldr	r3, [r7, #8]
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	4618      	mov	r0, r3
 800b396:	f7fe fd08 	bl	8009daa <netconn_err>
 800b39a:	4603      	mov	r3, r0
 800b39c:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800b39e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d166      	bne.n	800b474 <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800b3a6:	68bb      	ldr	r3, [r7, #8]
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	781b      	ldrb	r3, [r3, #0]
 800b3ac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800b3b0:	2b10      	cmp	r3, #16
 800b3b2:	d15d      	bne.n	800b470 <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 800b3b4:	68bb      	ldr	r3, [r7, #8]
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	785b      	ldrb	r3, [r3, #1]
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d002      	beq.n	800b3c4 <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 800b3be:	23fb      	movs	r3, #251	@ 0xfb
 800b3c0:	73fb      	strb	r3, [r7, #15]
 800b3c2:	e057      	b.n	800b474 <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 800b3c4:	68bb      	ldr	r3, [r7, #8]
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	685b      	ldr	r3, [r3, #4]
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d04d      	beq.n	800b46a <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 800b3ce:	68bb      	ldr	r3, [r7, #8]
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	2201      	movs	r2, #1
 800b3d4:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800b3d6:	68bb      	ldr	r3, [r7, #8]
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d006      	beq.n	800b3ee <lwip_netconn_do_write+0x6a>
 800b3e0:	4b28      	ldr	r3, [pc, #160]	@ (800b484 <lwip_netconn_do_write+0x100>)
 800b3e2:	f240 7223 	movw	r2, #1827	@ 0x723
 800b3e6:	4928      	ldr	r1, [pc, #160]	@ (800b488 <lwip_netconn_do_write+0x104>)
 800b3e8:	4828      	ldr	r0, [pc, #160]	@ (800b48c <lwip_netconn_do_write+0x108>)
 800b3ea:	f00b fc1d 	bl	8016c28 <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 800b3ee:	68bb      	ldr	r3, [r7, #8]
 800b3f0:	695b      	ldr	r3, [r3, #20]
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d106      	bne.n	800b404 <lwip_netconn_do_write+0x80>
 800b3f6:	4b23      	ldr	r3, [pc, #140]	@ (800b484 <lwip_netconn_do_write+0x100>)
 800b3f8:	f240 7224 	movw	r2, #1828	@ 0x724
 800b3fc:	4924      	ldr	r1, [pc, #144]	@ (800b490 <lwip_netconn_do_write+0x10c>)
 800b3fe:	4823      	ldr	r0, [pc, #140]	@ (800b48c <lwip_netconn_do_write+0x108>)
 800b400:	f00b fc12 	bl	8016c28 <iprintf>
        msg->conn->current_msg = msg;
 800b404:	68bb      	ldr	r3, [r7, #8]
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	68ba      	ldr	r2, [r7, #8]
 800b40a:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 800b40c:	68bb      	ldr	r3, [r7, #8]
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	2100      	movs	r1, #0
 800b412:	4618      	mov	r0, r3
 800b414:	f7ff fde6 	bl	800afe4 <lwip_netconn_do_writemore>
 800b418:	4603      	mov	r3, r0
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d02e      	beq.n	800b47c <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 800b41e:	68bb      	ldr	r3, [r7, #8]
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	785b      	ldrb	r3, [r3, #1]
 800b424:	2b01      	cmp	r3, #1
 800b426:	d006      	beq.n	800b436 <lwip_netconn_do_write+0xb2>
 800b428:	4b16      	ldr	r3, [pc, #88]	@ (800b484 <lwip_netconn_do_write+0x100>)
 800b42a:	f44f 62e5 	mov.w	r2, #1832	@ 0x728
 800b42e:	4919      	ldr	r1, [pc, #100]	@ (800b494 <lwip_netconn_do_write+0x110>)
 800b430:	4816      	ldr	r0, [pc, #88]	@ (800b48c <lwip_netconn_do_write+0x108>)
 800b432:	f00b fbf9 	bl	8016c28 <iprintf>
          UNLOCK_TCPIP_CORE();
 800b436:	4818      	ldr	r0, [pc, #96]	@ (800b498 <lwip_netconn_do_write+0x114>)
 800b438:	f00b faab 	bl	8016992 <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800b43c:	68bb      	ldr	r3, [r7, #8]
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	330c      	adds	r3, #12
 800b442:	2100      	movs	r1, #0
 800b444:	4618      	mov	r0, r3
 800b446:	f00b fa0a 	bl	801685e <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 800b44a:	4813      	ldr	r0, [pc, #76]	@ (800b498 <lwip_netconn_do_write+0x114>)
 800b44c:	f00b fa92 	bl	8016974 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 800b450:	68bb      	ldr	r3, [r7, #8]
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	785b      	ldrb	r3, [r3, #1]
 800b456:	2b01      	cmp	r3, #1
 800b458:	d110      	bne.n	800b47c <lwip_netconn_do_write+0xf8>
 800b45a:	4b0a      	ldr	r3, [pc, #40]	@ (800b484 <lwip_netconn_do_write+0x100>)
 800b45c:	f240 722c 	movw	r2, #1836	@ 0x72c
 800b460:	490c      	ldr	r1, [pc, #48]	@ (800b494 <lwip_netconn_do_write+0x110>)
 800b462:	480a      	ldr	r0, [pc, #40]	@ (800b48c <lwip_netconn_do_write+0x108>)
 800b464:	f00b fbe0 	bl	8016c28 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 800b468:	e008      	b.n	800b47c <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 800b46a:	23f5      	movs	r3, #245	@ 0xf5
 800b46c:	73fb      	strb	r3, [r7, #15]
 800b46e:	e001      	b.n	800b474 <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 800b470:	23fa      	movs	r3, #250	@ 0xfa
 800b472:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 800b474:	68bb      	ldr	r3, [r7, #8]
 800b476:	7bfa      	ldrb	r2, [r7, #15]
 800b478:	711a      	strb	r2, [r3, #4]
 800b47a:	e000      	b.n	800b47e <lwip_netconn_do_write+0xfa>
        return;
 800b47c:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 800b47e:	3710      	adds	r7, #16
 800b480:	46bd      	mov	sp, r7
 800b482:	bd80      	pop	{r7, pc}
 800b484:	080180c0 	.word	0x080180c0
 800b488:	08018464 	.word	0x08018464
 800b48c:	08018104 	.word	0x08018104
 800b490:	080185ec 	.word	0x080185ec
 800b494:	08018480 	.word	0x08018480
 800b498:	20009a98 	.word	0x20009a98

0800b49c <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 800b49c:	b580      	push	{r7, lr}
 800b49e:	b084      	sub	sp, #16
 800b4a0:	af00      	add	r7, sp, #0
 800b4a2:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	785b      	ldrb	r3, [r3, #1]
 800b4ae:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	685b      	ldr	r3, [r3, #4]
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d069      	beq.n	800b58e <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	781b      	ldrb	r3, [r3, #0]
 800b4c0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 800b4c4:	2b10      	cmp	r3, #16
 800b4c6:	d162      	bne.n	800b58e <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800b4cc:	2b03      	cmp	r3, #3
 800b4ce:	d002      	beq.n	800b4d6 <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800b4d0:	7afb      	ldrb	r3, [r7, #11]
 800b4d2:	2b02      	cmp	r3, #2
 800b4d4:	d05b      	beq.n	800b58e <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 800b4d6:	7afb      	ldrb	r3, [r7, #11]
 800b4d8:	2b03      	cmp	r3, #3
 800b4da:	d103      	bne.n	800b4e4 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	22f5      	movs	r2, #245	@ 0xf5
 800b4e0:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800b4e2:	e059      	b.n	800b598 <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 800b4e4:	7afb      	ldrb	r3, [r7, #11]
 800b4e6:	2b01      	cmp	r3, #1
 800b4e8:	d103      	bne.n	800b4f2 <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	22fb      	movs	r2, #251	@ 0xfb
 800b4ee:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800b4f0:	e052      	b.n	800b598 <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	7a1b      	ldrb	r3, [r3, #8]
 800b4f6:	f003 0301 	and.w	r3, r3, #1
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d004      	beq.n	800b508 <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	4618      	mov	r0, r3
 800b504:	f7ff f998 	bl	800a838 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d006      	beq.n	800b520 <lwip_netconn_do_close+0x84>
 800b512:	4b23      	ldr	r3, [pc, #140]	@ (800b5a0 <lwip_netconn_do_close+0x104>)
 800b514:	f240 72bd 	movw	r2, #1981	@ 0x7bd
 800b518:	4922      	ldr	r1, [pc, #136]	@ (800b5a4 <lwip_netconn_do_close+0x108>)
 800b51a:	4823      	ldr	r0, [pc, #140]	@ (800b5a8 <lwip_netconn_do_close+0x10c>)
 800b51c:	f00b fb84 	bl	8016c28 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	2204      	movs	r2, #4
 800b526:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	68fa      	ldr	r2, [r7, #12]
 800b52e:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	2100      	movs	r1, #0
 800b536:	4618      	mov	r0, r3
 800b538:	f7ff f9fc 	bl	800a934 <lwip_netconn_do_close_internal>
 800b53c:	4603      	mov	r3, r0
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d029      	beq.n	800b596 <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	785b      	ldrb	r3, [r3, #1]
 800b548:	2b04      	cmp	r3, #4
 800b54a:	d006      	beq.n	800b55a <lwip_netconn_do_close+0xbe>
 800b54c:	4b14      	ldr	r3, [pc, #80]	@ (800b5a0 <lwip_netconn_do_close+0x104>)
 800b54e:	f240 72c2 	movw	r2, #1986	@ 0x7c2
 800b552:	4916      	ldr	r1, [pc, #88]	@ (800b5ac <lwip_netconn_do_close+0x110>)
 800b554:	4814      	ldr	r0, [pc, #80]	@ (800b5a8 <lwip_netconn_do_close+0x10c>)
 800b556:	f00b fb67 	bl	8016c28 <iprintf>
        UNLOCK_TCPIP_CORE();
 800b55a:	4815      	ldr	r0, [pc, #84]	@ (800b5b0 <lwip_netconn_do_close+0x114>)
 800b55c:	f00b fa19 	bl	8016992 <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	330c      	adds	r3, #12
 800b566:	2100      	movs	r1, #0
 800b568:	4618      	mov	r0, r3
 800b56a:	f00b f978 	bl	801685e <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 800b56e:	4810      	ldr	r0, [pc, #64]	@ (800b5b0 <lwip_netconn_do_close+0x114>)
 800b570:	f00b fa00 	bl	8016974 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	785b      	ldrb	r3, [r3, #1]
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d00b      	beq.n	800b596 <lwip_netconn_do_close+0xfa>
 800b57e:	4b08      	ldr	r3, [pc, #32]	@ (800b5a0 <lwip_netconn_do_close+0x104>)
 800b580:	f240 72c6 	movw	r2, #1990	@ 0x7c6
 800b584:	4909      	ldr	r1, [pc, #36]	@ (800b5ac <lwip_netconn_do_close+0x110>)
 800b586:	4808      	ldr	r0, [pc, #32]	@ (800b5a8 <lwip_netconn_do_close+0x10c>)
 800b588:	f00b fb4e 	bl	8016c28 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 800b58c:	e003      	b.n	800b596 <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	22f5      	movs	r2, #245	@ 0xf5
 800b592:	711a      	strb	r2, [r3, #4]
 800b594:	e000      	b.n	800b598 <lwip_netconn_do_close+0xfc>
      return;
 800b596:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 800b598:	3710      	adds	r7, #16
 800b59a:	46bd      	mov	sp, r7
 800b59c:	bd80      	pop	{r7, pc}
 800b59e:	bf00      	nop
 800b5a0:	080180c0 	.word	0x080180c0
 800b5a4:	08018464 	.word	0x08018464
 800b5a8:	08018104 	.word	0x08018104
 800b5ac:	08018480 	.word	0x08018480
 800b5b0:	20009a98 	.word	0x20009a98

0800b5b4 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 800b5b4:	b580      	push	{r7, lr}
 800b5b6:	b082      	sub	sp, #8
 800b5b8:	af00      	add	r7, sp, #0
 800b5ba:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d013      	beq.n	800b5ea <netbuf_delete+0x36>
    if (buf->p != NULL) {
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d00b      	beq.n	800b5e2 <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	4618      	mov	r0, r3
 800b5d0:	f001 fdea 	bl	800d1a8 <pbuf_free>
      buf->p = buf->ptr = NULL;
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	2200      	movs	r2, #0
 800b5d8:	605a      	str	r2, [r3, #4]
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	685a      	ldr	r2, [r3, #4]
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 800b5e2:	6879      	ldr	r1, [r7, #4]
 800b5e4:	2006      	movs	r0, #6
 800b5e6:	f000 ff3b 	bl	800c460 <memp_free>
  }
}
 800b5ea:	bf00      	nop
 800b5ec:	3708      	adds	r7, #8
 800b5ee:	46bd      	mov	sp, r7
 800b5f0:	bd80      	pop	{r7, pc}
	...

0800b5f4 <netbuf_next>:
 *         1  if moved to the next part but now there is no next part
 *         0  if moved to the next part and there are still more parts
 */
s8_t
netbuf_next(struct netbuf *buf)
{
 800b5f4:	b580      	push	{r7, lr}
 800b5f6:	b082      	sub	sp, #8
 800b5f8:	af00      	add	r7, sp, #0
 800b5fa:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_next: invalid buf", (buf != NULL), return -1;);
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d108      	bne.n	800b614 <netbuf_next+0x20>
 800b602:	4b11      	ldr	r3, [pc, #68]	@ (800b648 <netbuf_next+0x54>)
 800b604:	22e0      	movs	r2, #224	@ 0xe0
 800b606:	4911      	ldr	r1, [pc, #68]	@ (800b64c <netbuf_next+0x58>)
 800b608:	4811      	ldr	r0, [pc, #68]	@ (800b650 <netbuf_next+0x5c>)
 800b60a:	f00b fb0d 	bl	8016c28 <iprintf>
 800b60e:	f04f 33ff 	mov.w	r3, #4294967295
 800b612:	e014      	b.n	800b63e <netbuf_next+0x4a>
  if (buf->ptr->next == NULL) {
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	685b      	ldr	r3, [r3, #4]
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d102      	bne.n	800b624 <netbuf_next+0x30>
    return -1;
 800b61e:	f04f 33ff 	mov.w	r3, #4294967295
 800b622:	e00c      	b.n	800b63e <netbuf_next+0x4a>
  }
  buf->ptr = buf->ptr->next;
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	685b      	ldr	r3, [r3, #4]
 800b628:	681a      	ldr	r2, [r3, #0]
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	605a      	str	r2, [r3, #4]
  if (buf->ptr->next == NULL) {
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	685b      	ldr	r3, [r3, #4]
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	2b00      	cmp	r3, #0
 800b636:	d101      	bne.n	800b63c <netbuf_next+0x48>
    return 1;
 800b638:	2301      	movs	r3, #1
 800b63a:	e000      	b.n	800b63e <netbuf_next+0x4a>
  }
  return 0;
 800b63c:	2300      	movs	r3, #0
}
 800b63e:	4618      	mov	r0, r3
 800b640:	3708      	adds	r7, #8
 800b642:	46bd      	mov	sp, r7
 800b644:	bd80      	pop	{r7, pc}
 800b646:	bf00      	nop
 800b648:	08018618 	.word	0x08018618
 800b64c:	08018778 	.word	0x08018778
 800b650:	08018668 	.word	0x08018668

0800b654 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800b654:	b580      	push	{r7, lr}
 800b656:	b084      	sub	sp, #16
 800b658:	af00      	add	r7, sp, #0
 800b65a:	6078      	str	r0, [r7, #4]
 800b65c:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800b65e:	f008 fa2f 	bl	8013ac0 <sys_timeouts_sleeptime>
 800b662:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b66a:	d10b      	bne.n	800b684 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800b66c:	4813      	ldr	r0, [pc, #76]	@ (800b6bc <tcpip_timeouts_mbox_fetch+0x68>)
 800b66e:	f00b f990 	bl	8016992 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800b672:	2200      	movs	r2, #0
 800b674:	6839      	ldr	r1, [r7, #0]
 800b676:	6878      	ldr	r0, [r7, #4]
 800b678:	f00b f866 	bl	8016748 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800b67c:	480f      	ldr	r0, [pc, #60]	@ (800b6bc <tcpip_timeouts_mbox_fetch+0x68>)
 800b67e:	f00b f979 	bl	8016974 <sys_mutex_lock>
    return;
 800b682:	e018      	b.n	800b6b6 <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	2b00      	cmp	r3, #0
 800b688:	d102      	bne.n	800b690 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800b68a:	f008 f9df 	bl	8013a4c <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800b68e:	e7e6      	b.n	800b65e <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800b690:	480a      	ldr	r0, [pc, #40]	@ (800b6bc <tcpip_timeouts_mbox_fetch+0x68>)
 800b692:	f00b f97e 	bl	8016992 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800b696:	68fa      	ldr	r2, [r7, #12]
 800b698:	6839      	ldr	r1, [r7, #0]
 800b69a:	6878      	ldr	r0, [r7, #4]
 800b69c:	f00b f854 	bl	8016748 <sys_arch_mbox_fetch>
 800b6a0:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800b6a2:	4806      	ldr	r0, [pc, #24]	@ (800b6bc <tcpip_timeouts_mbox_fetch+0x68>)
 800b6a4:	f00b f966 	bl	8016974 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800b6a8:	68bb      	ldr	r3, [r7, #8]
 800b6aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6ae:	d102      	bne.n	800b6b6 <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800b6b0:	f008 f9cc 	bl	8013a4c <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800b6b4:	e7d3      	b.n	800b65e <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800b6b6:	3710      	adds	r7, #16
 800b6b8:	46bd      	mov	sp, r7
 800b6ba:	bd80      	pop	{r7, pc}
 800b6bc:	20009a98 	.word	0x20009a98

0800b6c0 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800b6c0:	b580      	push	{r7, lr}
 800b6c2:	b084      	sub	sp, #16
 800b6c4:	af00      	add	r7, sp, #0
 800b6c6:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800b6c8:	4810      	ldr	r0, [pc, #64]	@ (800b70c <tcpip_thread+0x4c>)
 800b6ca:	f00b f953 	bl	8016974 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800b6ce:	4b10      	ldr	r3, [pc, #64]	@ (800b710 <tcpip_thread+0x50>)
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d005      	beq.n	800b6e2 <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800b6d6:	4b0e      	ldr	r3, [pc, #56]	@ (800b710 <tcpip_thread+0x50>)
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	4a0e      	ldr	r2, [pc, #56]	@ (800b714 <tcpip_thread+0x54>)
 800b6dc:	6812      	ldr	r2, [r2, #0]
 800b6de:	4610      	mov	r0, r2
 800b6e0:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800b6e2:	f107 030c 	add.w	r3, r7, #12
 800b6e6:	4619      	mov	r1, r3
 800b6e8:	480b      	ldr	r0, [pc, #44]	@ (800b718 <tcpip_thread+0x58>)
 800b6ea:	f7ff ffb3 	bl	800b654 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d106      	bne.n	800b702 <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800b6f4:	4b09      	ldr	r3, [pc, #36]	@ (800b71c <tcpip_thread+0x5c>)
 800b6f6:	2291      	movs	r2, #145	@ 0x91
 800b6f8:	4909      	ldr	r1, [pc, #36]	@ (800b720 <tcpip_thread+0x60>)
 800b6fa:	480a      	ldr	r0, [pc, #40]	@ (800b724 <tcpip_thread+0x64>)
 800b6fc:	f00b fa94 	bl	8016c28 <iprintf>
      continue;
 800b700:	e003      	b.n	800b70a <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	4618      	mov	r0, r3
 800b706:	f000 f80f 	bl	800b728 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800b70a:	e7ea      	b.n	800b6e2 <tcpip_thread+0x22>
 800b70c:	20009a98 	.word	0x20009a98
 800b710:	20009a8c 	.word	0x20009a8c
 800b714:	20009a90 	.word	0x20009a90
 800b718:	20009a94 	.word	0x20009a94
 800b71c:	080187b0 	.word	0x080187b0
 800b720:	080187e0 	.word	0x080187e0
 800b724:	08018800 	.word	0x08018800

0800b728 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800b728:	b580      	push	{r7, lr}
 800b72a:	b082      	sub	sp, #8
 800b72c:	af00      	add	r7, sp, #0
 800b72e:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	781b      	ldrb	r3, [r3, #0]
 800b734:	2b02      	cmp	r3, #2
 800b736:	d026      	beq.n	800b786 <tcpip_thread_handle_msg+0x5e>
 800b738:	2b02      	cmp	r3, #2
 800b73a:	dc2b      	bgt.n	800b794 <tcpip_thread_handle_msg+0x6c>
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d002      	beq.n	800b746 <tcpip_thread_handle_msg+0x1e>
 800b740:	2b01      	cmp	r3, #1
 800b742:	d015      	beq.n	800b770 <tcpip_thread_handle_msg+0x48>
 800b744:	e026      	b.n	800b794 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	68db      	ldr	r3, [r3, #12]
 800b74a:	687a      	ldr	r2, [r7, #4]
 800b74c:	6850      	ldr	r0, [r2, #4]
 800b74e:	687a      	ldr	r2, [r7, #4]
 800b750:	6892      	ldr	r2, [r2, #8]
 800b752:	4611      	mov	r1, r2
 800b754:	4798      	blx	r3
 800b756:	4603      	mov	r3, r0
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d004      	beq.n	800b766 <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	685b      	ldr	r3, [r3, #4]
 800b760:	4618      	mov	r0, r3
 800b762:	f001 fd21 	bl	800d1a8 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800b766:	6879      	ldr	r1, [r7, #4]
 800b768:	2009      	movs	r0, #9
 800b76a:	f000 fe79 	bl	800c460 <memp_free>
      break;
 800b76e:	e018      	b.n	800b7a2 <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	685b      	ldr	r3, [r3, #4]
 800b774:	687a      	ldr	r2, [r7, #4]
 800b776:	6892      	ldr	r2, [r2, #8]
 800b778:	4610      	mov	r0, r2
 800b77a:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800b77c:	6879      	ldr	r1, [r7, #4]
 800b77e:	2008      	movs	r0, #8
 800b780:	f000 fe6e 	bl	800c460 <memp_free>
      break;
 800b784:	e00d      	b.n	800b7a2 <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	685b      	ldr	r3, [r3, #4]
 800b78a:	687a      	ldr	r2, [r7, #4]
 800b78c:	6892      	ldr	r2, [r2, #8]
 800b78e:	4610      	mov	r0, r2
 800b790:	4798      	blx	r3
      break;
 800b792:	e006      	b.n	800b7a2 <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800b794:	4b05      	ldr	r3, [pc, #20]	@ (800b7ac <tcpip_thread_handle_msg+0x84>)
 800b796:	22cf      	movs	r2, #207	@ 0xcf
 800b798:	4905      	ldr	r1, [pc, #20]	@ (800b7b0 <tcpip_thread_handle_msg+0x88>)
 800b79a:	4806      	ldr	r0, [pc, #24]	@ (800b7b4 <tcpip_thread_handle_msg+0x8c>)
 800b79c:	f00b fa44 	bl	8016c28 <iprintf>
      break;
 800b7a0:	bf00      	nop
  }
}
 800b7a2:	bf00      	nop
 800b7a4:	3708      	adds	r7, #8
 800b7a6:	46bd      	mov	sp, r7
 800b7a8:	bd80      	pop	{r7, pc}
 800b7aa:	bf00      	nop
 800b7ac:	080187b0 	.word	0x080187b0
 800b7b0:	080187e0 	.word	0x080187e0
 800b7b4:	08018800 	.word	0x08018800

0800b7b8 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800b7b8:	b580      	push	{r7, lr}
 800b7ba:	b086      	sub	sp, #24
 800b7bc:	af00      	add	r7, sp, #0
 800b7be:	60f8      	str	r0, [r7, #12]
 800b7c0:	60b9      	str	r1, [r7, #8]
 800b7c2:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800b7c4:	481a      	ldr	r0, [pc, #104]	@ (800b830 <tcpip_inpkt+0x78>)
 800b7c6:	f00b f807 	bl	80167d8 <sys_mbox_valid>
 800b7ca:	4603      	mov	r3, r0
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d105      	bne.n	800b7dc <tcpip_inpkt+0x24>
 800b7d0:	4b18      	ldr	r3, [pc, #96]	@ (800b834 <tcpip_inpkt+0x7c>)
 800b7d2:	22fc      	movs	r2, #252	@ 0xfc
 800b7d4:	4918      	ldr	r1, [pc, #96]	@ (800b838 <tcpip_inpkt+0x80>)
 800b7d6:	4819      	ldr	r0, [pc, #100]	@ (800b83c <tcpip_inpkt+0x84>)
 800b7d8:	f00b fa26 	bl	8016c28 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800b7dc:	2009      	movs	r0, #9
 800b7de:	f000 fdc9 	bl	800c374 <memp_malloc>
 800b7e2:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800b7e4:	697b      	ldr	r3, [r7, #20]
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d102      	bne.n	800b7f0 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800b7ea:	f04f 33ff 	mov.w	r3, #4294967295
 800b7ee:	e01a      	b.n	800b826 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800b7f0:	697b      	ldr	r3, [r7, #20]
 800b7f2:	2200      	movs	r2, #0
 800b7f4:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800b7f6:	697b      	ldr	r3, [r7, #20]
 800b7f8:	68fa      	ldr	r2, [r7, #12]
 800b7fa:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800b7fc:	697b      	ldr	r3, [r7, #20]
 800b7fe:	68ba      	ldr	r2, [r7, #8]
 800b800:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800b802:	697b      	ldr	r3, [r7, #20]
 800b804:	687a      	ldr	r2, [r7, #4]
 800b806:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800b808:	6979      	ldr	r1, [r7, #20]
 800b80a:	4809      	ldr	r0, [pc, #36]	@ (800b830 <tcpip_inpkt+0x78>)
 800b80c:	f00a ff82 	bl	8016714 <sys_mbox_trypost>
 800b810:	4603      	mov	r3, r0
 800b812:	2b00      	cmp	r3, #0
 800b814:	d006      	beq.n	800b824 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800b816:	6979      	ldr	r1, [r7, #20]
 800b818:	2009      	movs	r0, #9
 800b81a:	f000 fe21 	bl	800c460 <memp_free>
    return ERR_MEM;
 800b81e:	f04f 33ff 	mov.w	r3, #4294967295
 800b822:	e000      	b.n	800b826 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800b824:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800b826:	4618      	mov	r0, r3
 800b828:	3718      	adds	r7, #24
 800b82a:	46bd      	mov	sp, r7
 800b82c:	bd80      	pop	{r7, pc}
 800b82e:	bf00      	nop
 800b830:	20009a94 	.word	0x20009a94
 800b834:	080187b0 	.word	0x080187b0
 800b838:	08018828 	.word	0x08018828
 800b83c:	08018800 	.word	0x08018800

0800b840 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800b840:	b580      	push	{r7, lr}
 800b842:	b082      	sub	sp, #8
 800b844:	af00      	add	r7, sp, #0
 800b846:	6078      	str	r0, [r7, #4]
 800b848:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800b84a:	683b      	ldr	r3, [r7, #0]
 800b84c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800b850:	f003 0318 	and.w	r3, r3, #24
 800b854:	2b00      	cmp	r3, #0
 800b856:	d006      	beq.n	800b866 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800b858:	4a08      	ldr	r2, [pc, #32]	@ (800b87c <tcpip_input+0x3c>)
 800b85a:	6839      	ldr	r1, [r7, #0]
 800b85c:	6878      	ldr	r0, [r7, #4]
 800b85e:	f7ff ffab 	bl	800b7b8 <tcpip_inpkt>
 800b862:	4603      	mov	r3, r0
 800b864:	e005      	b.n	800b872 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800b866:	4a06      	ldr	r2, [pc, #24]	@ (800b880 <tcpip_input+0x40>)
 800b868:	6839      	ldr	r1, [r7, #0]
 800b86a:	6878      	ldr	r0, [r7, #4]
 800b86c:	f7ff ffa4 	bl	800b7b8 <tcpip_inpkt>
 800b870:	4603      	mov	r3, r0
}
 800b872:	4618      	mov	r0, r3
 800b874:	3708      	adds	r7, #8
 800b876:	46bd      	mov	sp, r7
 800b878:	bd80      	pop	{r7, pc}
 800b87a:	bf00      	nop
 800b87c:	08016511 	.word	0x08016511
 800b880:	08015419 	.word	0x08015419

0800b884 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800b884:	b580      	push	{r7, lr}
 800b886:	b084      	sub	sp, #16
 800b888:	af00      	add	r7, sp, #0
 800b88a:	6078      	str	r0, [r7, #4]
 800b88c:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800b88e:	4819      	ldr	r0, [pc, #100]	@ (800b8f4 <tcpip_try_callback+0x70>)
 800b890:	f00a ffa2 	bl	80167d8 <sys_mbox_valid>
 800b894:	4603      	mov	r3, r0
 800b896:	2b00      	cmp	r3, #0
 800b898:	d106      	bne.n	800b8a8 <tcpip_try_callback+0x24>
 800b89a:	4b17      	ldr	r3, [pc, #92]	@ (800b8f8 <tcpip_try_callback+0x74>)
 800b89c:	f240 125d 	movw	r2, #349	@ 0x15d
 800b8a0:	4916      	ldr	r1, [pc, #88]	@ (800b8fc <tcpip_try_callback+0x78>)
 800b8a2:	4817      	ldr	r0, [pc, #92]	@ (800b900 <tcpip_try_callback+0x7c>)
 800b8a4:	f00b f9c0 	bl	8016c28 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800b8a8:	2008      	movs	r0, #8
 800b8aa:	f000 fd63 	bl	800c374 <memp_malloc>
 800b8ae:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d102      	bne.n	800b8bc <tcpip_try_callback+0x38>
    return ERR_MEM;
 800b8b6:	f04f 33ff 	mov.w	r3, #4294967295
 800b8ba:	e017      	b.n	800b8ec <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	2201      	movs	r2, #1
 800b8c0:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	687a      	ldr	r2, [r7, #4]
 800b8c6:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	683a      	ldr	r2, [r7, #0]
 800b8cc:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800b8ce:	68f9      	ldr	r1, [r7, #12]
 800b8d0:	4808      	ldr	r0, [pc, #32]	@ (800b8f4 <tcpip_try_callback+0x70>)
 800b8d2:	f00a ff1f 	bl	8016714 <sys_mbox_trypost>
 800b8d6:	4603      	mov	r3, r0
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d006      	beq.n	800b8ea <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800b8dc:	68f9      	ldr	r1, [r7, #12]
 800b8de:	2008      	movs	r0, #8
 800b8e0:	f000 fdbe 	bl	800c460 <memp_free>
    return ERR_MEM;
 800b8e4:	f04f 33ff 	mov.w	r3, #4294967295
 800b8e8:	e000      	b.n	800b8ec <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800b8ea:	2300      	movs	r3, #0
}
 800b8ec:	4618      	mov	r0, r3
 800b8ee:	3710      	adds	r7, #16
 800b8f0:	46bd      	mov	sp, r7
 800b8f2:	bd80      	pop	{r7, pc}
 800b8f4:	20009a94 	.word	0x20009a94
 800b8f8:	080187b0 	.word	0x080187b0
 800b8fc:	08018828 	.word	0x08018828
 800b900:	08018800 	.word	0x08018800

0800b904 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 800b904:	b580      	push	{r7, lr}
 800b906:	b084      	sub	sp, #16
 800b908:	af00      	add	r7, sp, #0
 800b90a:	60f8      	str	r0, [r7, #12]
 800b90c:	60b9      	str	r1, [r7, #8]
 800b90e:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 800b910:	4806      	ldr	r0, [pc, #24]	@ (800b92c <tcpip_send_msg_wait_sem+0x28>)
 800b912:	f00b f82f 	bl	8016974 <sys_mutex_lock>
  fn(apimsg);
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	68b8      	ldr	r0, [r7, #8]
 800b91a:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 800b91c:	4803      	ldr	r0, [pc, #12]	@ (800b92c <tcpip_send_msg_wait_sem+0x28>)
 800b91e:	f00b f838 	bl	8016992 <sys_mutex_unlock>
  return ERR_OK;
 800b922:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800b924:	4618      	mov	r0, r3
 800b926:	3710      	adds	r7, #16
 800b928:	46bd      	mov	sp, r7
 800b92a:	bd80      	pop	{r7, pc}
 800b92c:	20009a98 	.word	0x20009a98

0800b930 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800b930:	b580      	push	{r7, lr}
 800b932:	b084      	sub	sp, #16
 800b934:	af02      	add	r7, sp, #8
 800b936:	6078      	str	r0, [r7, #4]
 800b938:	6039      	str	r1, [r7, #0]
  lwip_init();
 800b93a:	f000 f871 	bl	800ba20 <lwip_init>

  tcpip_init_done = initfunc;
 800b93e:	4a17      	ldr	r2, [pc, #92]	@ (800b99c <tcpip_init+0x6c>)
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800b944:	4a16      	ldr	r2, [pc, #88]	@ (800b9a0 <tcpip_init+0x70>)
 800b946:	683b      	ldr	r3, [r7, #0]
 800b948:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800b94a:	2106      	movs	r1, #6
 800b94c:	4815      	ldr	r0, [pc, #84]	@ (800b9a4 <tcpip_init+0x74>)
 800b94e:	f00a feb5 	bl	80166bc <sys_mbox_new>
 800b952:	4603      	mov	r3, r0
 800b954:	2b00      	cmp	r3, #0
 800b956:	d006      	beq.n	800b966 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800b958:	4b13      	ldr	r3, [pc, #76]	@ (800b9a8 <tcpip_init+0x78>)
 800b95a:	f240 2261 	movw	r2, #609	@ 0x261
 800b95e:	4913      	ldr	r1, [pc, #76]	@ (800b9ac <tcpip_init+0x7c>)
 800b960:	4813      	ldr	r0, [pc, #76]	@ (800b9b0 <tcpip_init+0x80>)
 800b962:	f00b f961 	bl	8016c28 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800b966:	4813      	ldr	r0, [pc, #76]	@ (800b9b4 <tcpip_init+0x84>)
 800b968:	f00a ffee 	bl	8016948 <sys_mutex_new>
 800b96c:	4603      	mov	r3, r0
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d006      	beq.n	800b980 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800b972:	4b0d      	ldr	r3, [pc, #52]	@ (800b9a8 <tcpip_init+0x78>)
 800b974:	f240 2265 	movw	r2, #613	@ 0x265
 800b978:	490f      	ldr	r1, [pc, #60]	@ (800b9b8 <tcpip_init+0x88>)
 800b97a:	480d      	ldr	r0, [pc, #52]	@ (800b9b0 <tcpip_init+0x80>)
 800b97c:	f00b f954 	bl	8016c28 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800b980:	2318      	movs	r3, #24
 800b982:	9300      	str	r3, [sp, #0]
 800b984:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b988:	2200      	movs	r2, #0
 800b98a:	490c      	ldr	r1, [pc, #48]	@ (800b9bc <tcpip_init+0x8c>)
 800b98c:	480c      	ldr	r0, [pc, #48]	@ (800b9c0 <tcpip_init+0x90>)
 800b98e:	f00b f80d 	bl	80169ac <sys_thread_new>
}
 800b992:	bf00      	nop
 800b994:	3708      	adds	r7, #8
 800b996:	46bd      	mov	sp, r7
 800b998:	bd80      	pop	{r7, pc}
 800b99a:	bf00      	nop
 800b99c:	20009a8c 	.word	0x20009a8c
 800b9a0:	20009a90 	.word	0x20009a90
 800b9a4:	20009a94 	.word	0x20009a94
 800b9a8:	080187b0 	.word	0x080187b0
 800b9ac:	08018838 	.word	0x08018838
 800b9b0:	08018800 	.word	0x08018800
 800b9b4:	20009a98 	.word	0x20009a98
 800b9b8:	0801885c 	.word	0x0801885c
 800b9bc:	0800b6c1 	.word	0x0800b6c1
 800b9c0:	08018880 	.word	0x08018880

0800b9c4 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800b9c4:	b480      	push	{r7}
 800b9c6:	b083      	sub	sp, #12
 800b9c8:	af00      	add	r7, sp, #0
 800b9ca:	4603      	mov	r3, r0
 800b9cc:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800b9ce:	88fb      	ldrh	r3, [r7, #6]
 800b9d0:	021b      	lsls	r3, r3, #8
 800b9d2:	b21a      	sxth	r2, r3
 800b9d4:	88fb      	ldrh	r3, [r7, #6]
 800b9d6:	0a1b      	lsrs	r3, r3, #8
 800b9d8:	b29b      	uxth	r3, r3
 800b9da:	b21b      	sxth	r3, r3
 800b9dc:	4313      	orrs	r3, r2
 800b9de:	b21b      	sxth	r3, r3
 800b9e0:	b29b      	uxth	r3, r3
}
 800b9e2:	4618      	mov	r0, r3
 800b9e4:	370c      	adds	r7, #12
 800b9e6:	46bd      	mov	sp, r7
 800b9e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ec:	4770      	bx	lr

0800b9ee <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800b9ee:	b480      	push	{r7}
 800b9f0:	b083      	sub	sp, #12
 800b9f2:	af00      	add	r7, sp, #0
 800b9f4:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	061a      	lsls	r2, r3, #24
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	021b      	lsls	r3, r3, #8
 800b9fe:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800ba02:	431a      	orrs	r2, r3
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	0a1b      	lsrs	r3, r3, #8
 800ba08:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800ba0c:	431a      	orrs	r2, r3
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	0e1b      	lsrs	r3, r3, #24
 800ba12:	4313      	orrs	r3, r2
}
 800ba14:	4618      	mov	r0, r3
 800ba16:	370c      	adds	r7, #12
 800ba18:	46bd      	mov	sp, r7
 800ba1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba1e:	4770      	bx	lr

0800ba20 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800ba20:	b580      	push	{r7, lr}
 800ba22:	b082      	sub	sp, #8
 800ba24:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800ba26:	2300      	movs	r3, #0
 800ba28:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800ba2a:	f00a ff81 	bl	8016930 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800ba2e:	f000 f8d5 	bl	800bbdc <mem_init>
  memp_init();
 800ba32:	f000 fc31 	bl	800c298 <memp_init>
  pbuf_init();
  netif_init();
 800ba36:	f000 fd3d 	bl	800c4b4 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800ba3a:	f008 f879 	bl	8013b30 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800ba3e:	f001 fe6f 	bl	800d720 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800ba42:	f007 ffbb 	bl	80139bc <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800ba46:	bf00      	nop
 800ba48:	3708      	adds	r7, #8
 800ba4a:	46bd      	mov	sp, r7
 800ba4c:	bd80      	pop	{r7, pc}
	...

0800ba50 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800ba50:	b480      	push	{r7}
 800ba52:	b083      	sub	sp, #12
 800ba54:	af00      	add	r7, sp, #0
 800ba56:	4603      	mov	r3, r0
 800ba58:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800ba5a:	4b05      	ldr	r3, [pc, #20]	@ (800ba70 <ptr_to_mem+0x20>)
 800ba5c:	681a      	ldr	r2, [r3, #0]
 800ba5e:	88fb      	ldrh	r3, [r7, #6]
 800ba60:	4413      	add	r3, r2
}
 800ba62:	4618      	mov	r0, r3
 800ba64:	370c      	adds	r7, #12
 800ba66:	46bd      	mov	sp, r7
 800ba68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba6c:	4770      	bx	lr
 800ba6e:	bf00      	nop
 800ba70:	2000c2c8 	.word	0x2000c2c8

0800ba74 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800ba74:	b480      	push	{r7}
 800ba76:	b083      	sub	sp, #12
 800ba78:	af00      	add	r7, sp, #0
 800ba7a:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800ba7c:	4b05      	ldr	r3, [pc, #20]	@ (800ba94 <mem_to_ptr+0x20>)
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	687a      	ldr	r2, [r7, #4]
 800ba82:	1ad3      	subs	r3, r2, r3
 800ba84:	b29b      	uxth	r3, r3
}
 800ba86:	4618      	mov	r0, r3
 800ba88:	370c      	adds	r7, #12
 800ba8a:	46bd      	mov	sp, r7
 800ba8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba90:	4770      	bx	lr
 800ba92:	bf00      	nop
 800ba94:	2000c2c8 	.word	0x2000c2c8

0800ba98 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800ba98:	b590      	push	{r4, r7, lr}
 800ba9a:	b085      	sub	sp, #20
 800ba9c:	af00      	add	r7, sp, #0
 800ba9e:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800baa0:	4b45      	ldr	r3, [pc, #276]	@ (800bbb8 <plug_holes+0x120>)
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	687a      	ldr	r2, [r7, #4]
 800baa6:	429a      	cmp	r2, r3
 800baa8:	d206      	bcs.n	800bab8 <plug_holes+0x20>
 800baaa:	4b44      	ldr	r3, [pc, #272]	@ (800bbbc <plug_holes+0x124>)
 800baac:	f240 12df 	movw	r2, #479	@ 0x1df
 800bab0:	4943      	ldr	r1, [pc, #268]	@ (800bbc0 <plug_holes+0x128>)
 800bab2:	4844      	ldr	r0, [pc, #272]	@ (800bbc4 <plug_holes+0x12c>)
 800bab4:	f00b f8b8 	bl	8016c28 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800bab8:	4b43      	ldr	r3, [pc, #268]	@ (800bbc8 <plug_holes+0x130>)
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	687a      	ldr	r2, [r7, #4]
 800babe:	429a      	cmp	r2, r3
 800bac0:	d306      	bcc.n	800bad0 <plug_holes+0x38>
 800bac2:	4b3e      	ldr	r3, [pc, #248]	@ (800bbbc <plug_holes+0x124>)
 800bac4:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800bac8:	4940      	ldr	r1, [pc, #256]	@ (800bbcc <plug_holes+0x134>)
 800baca:	483e      	ldr	r0, [pc, #248]	@ (800bbc4 <plug_holes+0x12c>)
 800bacc:	f00b f8ac 	bl	8016c28 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	791b      	ldrb	r3, [r3, #4]
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d006      	beq.n	800bae6 <plug_holes+0x4e>
 800bad8:	4b38      	ldr	r3, [pc, #224]	@ (800bbbc <plug_holes+0x124>)
 800bada:	f240 12e1 	movw	r2, #481	@ 0x1e1
 800bade:	493c      	ldr	r1, [pc, #240]	@ (800bbd0 <plug_holes+0x138>)
 800bae0:	4838      	ldr	r0, [pc, #224]	@ (800bbc4 <plug_holes+0x12c>)
 800bae2:	f00b f8a1 	bl	8016c28 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	881b      	ldrh	r3, [r3, #0]
 800baea:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800baee:	d906      	bls.n	800bafe <plug_holes+0x66>
 800baf0:	4b32      	ldr	r3, [pc, #200]	@ (800bbbc <plug_holes+0x124>)
 800baf2:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 800baf6:	4937      	ldr	r1, [pc, #220]	@ (800bbd4 <plug_holes+0x13c>)
 800baf8:	4832      	ldr	r0, [pc, #200]	@ (800bbc4 <plug_holes+0x12c>)
 800bafa:	f00b f895 	bl	8016c28 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	881b      	ldrh	r3, [r3, #0]
 800bb02:	4618      	mov	r0, r3
 800bb04:	f7ff ffa4 	bl	800ba50 <ptr_to_mem>
 800bb08:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800bb0a:	687a      	ldr	r2, [r7, #4]
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	429a      	cmp	r2, r3
 800bb10:	d024      	beq.n	800bb5c <plug_holes+0xc4>
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	791b      	ldrb	r3, [r3, #4]
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d120      	bne.n	800bb5c <plug_holes+0xc4>
 800bb1a:	4b2b      	ldr	r3, [pc, #172]	@ (800bbc8 <plug_holes+0x130>)
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	68fa      	ldr	r2, [r7, #12]
 800bb20:	429a      	cmp	r2, r3
 800bb22:	d01b      	beq.n	800bb5c <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800bb24:	4b2c      	ldr	r3, [pc, #176]	@ (800bbd8 <plug_holes+0x140>)
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	68fa      	ldr	r2, [r7, #12]
 800bb2a:	429a      	cmp	r2, r3
 800bb2c:	d102      	bne.n	800bb34 <plug_holes+0x9c>
      lfree = mem;
 800bb2e:	4a2a      	ldr	r2, [pc, #168]	@ (800bbd8 <plug_holes+0x140>)
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	881a      	ldrh	r2, [r3, #0]
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	881b      	ldrh	r3, [r3, #0]
 800bb40:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800bb44:	d00a      	beq.n	800bb5c <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	881b      	ldrh	r3, [r3, #0]
 800bb4a:	4618      	mov	r0, r3
 800bb4c:	f7ff ff80 	bl	800ba50 <ptr_to_mem>
 800bb50:	4604      	mov	r4, r0
 800bb52:	6878      	ldr	r0, [r7, #4]
 800bb54:	f7ff ff8e 	bl	800ba74 <mem_to_ptr>
 800bb58:	4603      	mov	r3, r0
 800bb5a:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	885b      	ldrh	r3, [r3, #2]
 800bb60:	4618      	mov	r0, r3
 800bb62:	f7ff ff75 	bl	800ba50 <ptr_to_mem>
 800bb66:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800bb68:	68ba      	ldr	r2, [r7, #8]
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	429a      	cmp	r2, r3
 800bb6e:	d01f      	beq.n	800bbb0 <plug_holes+0x118>
 800bb70:	68bb      	ldr	r3, [r7, #8]
 800bb72:	791b      	ldrb	r3, [r3, #4]
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d11b      	bne.n	800bbb0 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800bb78:	4b17      	ldr	r3, [pc, #92]	@ (800bbd8 <plug_holes+0x140>)
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	687a      	ldr	r2, [r7, #4]
 800bb7e:	429a      	cmp	r2, r3
 800bb80:	d102      	bne.n	800bb88 <plug_holes+0xf0>
      lfree = pmem;
 800bb82:	4a15      	ldr	r2, [pc, #84]	@ (800bbd8 <plug_holes+0x140>)
 800bb84:	68bb      	ldr	r3, [r7, #8]
 800bb86:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	881a      	ldrh	r2, [r3, #0]
 800bb8c:	68bb      	ldr	r3, [r7, #8]
 800bb8e:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	881b      	ldrh	r3, [r3, #0]
 800bb94:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800bb98:	d00a      	beq.n	800bbb0 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	881b      	ldrh	r3, [r3, #0]
 800bb9e:	4618      	mov	r0, r3
 800bba0:	f7ff ff56 	bl	800ba50 <ptr_to_mem>
 800bba4:	4604      	mov	r4, r0
 800bba6:	68b8      	ldr	r0, [r7, #8]
 800bba8:	f7ff ff64 	bl	800ba74 <mem_to_ptr>
 800bbac:	4603      	mov	r3, r0
 800bbae:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800bbb0:	bf00      	nop
 800bbb2:	3714      	adds	r7, #20
 800bbb4:	46bd      	mov	sp, r7
 800bbb6:	bd90      	pop	{r4, r7, pc}
 800bbb8:	2000c2c8 	.word	0x2000c2c8
 800bbbc:	08018890 	.word	0x08018890
 800bbc0:	080188c0 	.word	0x080188c0
 800bbc4:	080188d8 	.word	0x080188d8
 800bbc8:	2000c2cc 	.word	0x2000c2cc
 800bbcc:	08018900 	.word	0x08018900
 800bbd0:	0801891c 	.word	0x0801891c
 800bbd4:	08018938 	.word	0x08018938
 800bbd8:	2000c2d4 	.word	0x2000c2d4

0800bbdc <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800bbdc:	b580      	push	{r7, lr}
 800bbde:	b082      	sub	sp, #8
 800bbe0:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800bbe2:	4b1f      	ldr	r3, [pc, #124]	@ (800bc60 <mem_init+0x84>)
 800bbe4:	3303      	adds	r3, #3
 800bbe6:	f023 0303 	bic.w	r3, r3, #3
 800bbea:	461a      	mov	r2, r3
 800bbec:	4b1d      	ldr	r3, [pc, #116]	@ (800bc64 <mem_init+0x88>)
 800bbee:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800bbf0:	4b1c      	ldr	r3, [pc, #112]	@ (800bc64 <mem_init+0x88>)
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 800bbfc:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	2200      	movs	r2, #0
 800bc02:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	2200      	movs	r2, #0
 800bc08:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800bc0a:	f44f 5020 	mov.w	r0, #10240	@ 0x2800
 800bc0e:	f7ff ff1f 	bl	800ba50 <ptr_to_mem>
 800bc12:	4603      	mov	r3, r0
 800bc14:	4a14      	ldr	r2, [pc, #80]	@ (800bc68 <mem_init+0x8c>)
 800bc16:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800bc18:	4b13      	ldr	r3, [pc, #76]	@ (800bc68 <mem_init+0x8c>)
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	2201      	movs	r2, #1
 800bc1e:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800bc20:	4b11      	ldr	r3, [pc, #68]	@ (800bc68 <mem_init+0x8c>)
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 800bc28:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800bc2a:	4b0f      	ldr	r3, [pc, #60]	@ (800bc68 <mem_init+0x8c>)
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 800bc32:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800bc34:	4b0b      	ldr	r3, [pc, #44]	@ (800bc64 <mem_init+0x88>)
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	4a0c      	ldr	r2, [pc, #48]	@ (800bc6c <mem_init+0x90>)
 800bc3a:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800bc3c:	480c      	ldr	r0, [pc, #48]	@ (800bc70 <mem_init+0x94>)
 800bc3e:	f00a fe83 	bl	8016948 <sys_mutex_new>
 800bc42:	4603      	mov	r3, r0
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d006      	beq.n	800bc56 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800bc48:	4b0a      	ldr	r3, [pc, #40]	@ (800bc74 <mem_init+0x98>)
 800bc4a:	f240 221f 	movw	r2, #543	@ 0x21f
 800bc4e:	490a      	ldr	r1, [pc, #40]	@ (800bc78 <mem_init+0x9c>)
 800bc50:	480a      	ldr	r0, [pc, #40]	@ (800bc7c <mem_init+0xa0>)
 800bc52:	f00a ffe9 	bl	8016c28 <iprintf>
  }
}
 800bc56:	bf00      	nop
 800bc58:	3708      	adds	r7, #8
 800bc5a:	46bd      	mov	sp, r7
 800bc5c:	bd80      	pop	{r7, pc}
 800bc5e:	bf00      	nop
 800bc60:	20009ab4 	.word	0x20009ab4
 800bc64:	2000c2c8 	.word	0x2000c2c8
 800bc68:	2000c2cc 	.word	0x2000c2cc
 800bc6c:	2000c2d4 	.word	0x2000c2d4
 800bc70:	2000c2d0 	.word	0x2000c2d0
 800bc74:	08018890 	.word	0x08018890
 800bc78:	08018964 	.word	0x08018964
 800bc7c:	080188d8 	.word	0x080188d8

0800bc80 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800bc80:	b580      	push	{r7, lr}
 800bc82:	b086      	sub	sp, #24
 800bc84:	af00      	add	r7, sp, #0
 800bc86:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800bc88:	6878      	ldr	r0, [r7, #4]
 800bc8a:	f7ff fef3 	bl	800ba74 <mem_to_ptr>
 800bc8e:	4603      	mov	r3, r0
 800bc90:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	881b      	ldrh	r3, [r3, #0]
 800bc96:	4618      	mov	r0, r3
 800bc98:	f7ff feda 	bl	800ba50 <ptr_to_mem>
 800bc9c:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	885b      	ldrh	r3, [r3, #2]
 800bca2:	4618      	mov	r0, r3
 800bca4:	f7ff fed4 	bl	800ba50 <ptr_to_mem>
 800bca8:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	881b      	ldrh	r3, [r3, #0]
 800bcae:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800bcb2:	d818      	bhi.n	800bce6 <mem_link_valid+0x66>
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	885b      	ldrh	r3, [r3, #2]
 800bcb8:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800bcbc:	d813      	bhi.n	800bce6 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800bcc2:	8afa      	ldrh	r2, [r7, #22]
 800bcc4:	429a      	cmp	r2, r3
 800bcc6:	d004      	beq.n	800bcd2 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	881b      	ldrh	r3, [r3, #0]
 800bccc:	8afa      	ldrh	r2, [r7, #22]
 800bcce:	429a      	cmp	r2, r3
 800bcd0:	d109      	bne.n	800bce6 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800bcd2:	4b08      	ldr	r3, [pc, #32]	@ (800bcf4 <mem_link_valid+0x74>)
 800bcd4:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800bcd6:	693a      	ldr	r2, [r7, #16]
 800bcd8:	429a      	cmp	r2, r3
 800bcda:	d006      	beq.n	800bcea <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800bcdc:	693b      	ldr	r3, [r7, #16]
 800bcde:	885b      	ldrh	r3, [r3, #2]
 800bce0:	8afa      	ldrh	r2, [r7, #22]
 800bce2:	429a      	cmp	r2, r3
 800bce4:	d001      	beq.n	800bcea <mem_link_valid+0x6a>
    return 0;
 800bce6:	2300      	movs	r3, #0
 800bce8:	e000      	b.n	800bcec <mem_link_valid+0x6c>
  }
  return 1;
 800bcea:	2301      	movs	r3, #1
}
 800bcec:	4618      	mov	r0, r3
 800bcee:	3718      	adds	r7, #24
 800bcf0:	46bd      	mov	sp, r7
 800bcf2:	bd80      	pop	{r7, pc}
 800bcf4:	2000c2cc 	.word	0x2000c2cc

0800bcf8 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800bcf8:	b580      	push	{r7, lr}
 800bcfa:	b088      	sub	sp, #32
 800bcfc:	af00      	add	r7, sp, #0
 800bcfe:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d070      	beq.n	800bde8 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	f003 0303 	and.w	r3, r3, #3
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d00d      	beq.n	800bd2c <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800bd10:	4b37      	ldr	r3, [pc, #220]	@ (800bdf0 <mem_free+0xf8>)
 800bd12:	f240 2273 	movw	r2, #627	@ 0x273
 800bd16:	4937      	ldr	r1, [pc, #220]	@ (800bdf4 <mem_free+0xfc>)
 800bd18:	4837      	ldr	r0, [pc, #220]	@ (800bdf8 <mem_free+0x100>)
 800bd1a:	f00a ff85 	bl	8016c28 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800bd1e:	f00a fe65 	bl	80169ec <sys_arch_protect>
 800bd22:	60f8      	str	r0, [r7, #12]
 800bd24:	68f8      	ldr	r0, [r7, #12]
 800bd26:	f00a fe6f 	bl	8016a08 <sys_arch_unprotect>
    return;
 800bd2a:	e05e      	b.n	800bdea <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	3b08      	subs	r3, #8
 800bd30:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800bd32:	4b32      	ldr	r3, [pc, #200]	@ (800bdfc <mem_free+0x104>)
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	69fa      	ldr	r2, [r7, #28]
 800bd38:	429a      	cmp	r2, r3
 800bd3a:	d306      	bcc.n	800bd4a <mem_free+0x52>
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	f103 020c 	add.w	r2, r3, #12
 800bd42:	4b2f      	ldr	r3, [pc, #188]	@ (800be00 <mem_free+0x108>)
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	429a      	cmp	r2, r3
 800bd48:	d90d      	bls.n	800bd66 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800bd4a:	4b29      	ldr	r3, [pc, #164]	@ (800bdf0 <mem_free+0xf8>)
 800bd4c:	f240 227f 	movw	r2, #639	@ 0x27f
 800bd50:	492c      	ldr	r1, [pc, #176]	@ (800be04 <mem_free+0x10c>)
 800bd52:	4829      	ldr	r0, [pc, #164]	@ (800bdf8 <mem_free+0x100>)
 800bd54:	f00a ff68 	bl	8016c28 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800bd58:	f00a fe48 	bl	80169ec <sys_arch_protect>
 800bd5c:	6138      	str	r0, [r7, #16]
 800bd5e:	6938      	ldr	r0, [r7, #16]
 800bd60:	f00a fe52 	bl	8016a08 <sys_arch_unprotect>
    return;
 800bd64:	e041      	b.n	800bdea <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800bd66:	4828      	ldr	r0, [pc, #160]	@ (800be08 <mem_free+0x110>)
 800bd68:	f00a fe04 	bl	8016974 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800bd6c:	69fb      	ldr	r3, [r7, #28]
 800bd6e:	791b      	ldrb	r3, [r3, #4]
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	d110      	bne.n	800bd96 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800bd74:	4b1e      	ldr	r3, [pc, #120]	@ (800bdf0 <mem_free+0xf8>)
 800bd76:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 800bd7a:	4924      	ldr	r1, [pc, #144]	@ (800be0c <mem_free+0x114>)
 800bd7c:	481e      	ldr	r0, [pc, #120]	@ (800bdf8 <mem_free+0x100>)
 800bd7e:	f00a ff53 	bl	8016c28 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800bd82:	4821      	ldr	r0, [pc, #132]	@ (800be08 <mem_free+0x110>)
 800bd84:	f00a fe05 	bl	8016992 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800bd88:	f00a fe30 	bl	80169ec <sys_arch_protect>
 800bd8c:	6178      	str	r0, [r7, #20]
 800bd8e:	6978      	ldr	r0, [r7, #20]
 800bd90:	f00a fe3a 	bl	8016a08 <sys_arch_unprotect>
    return;
 800bd94:	e029      	b.n	800bdea <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800bd96:	69f8      	ldr	r0, [r7, #28]
 800bd98:	f7ff ff72 	bl	800bc80 <mem_link_valid>
 800bd9c:	4603      	mov	r3, r0
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d110      	bne.n	800bdc4 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800bda2:	4b13      	ldr	r3, [pc, #76]	@ (800bdf0 <mem_free+0xf8>)
 800bda4:	f240 2295 	movw	r2, #661	@ 0x295
 800bda8:	4919      	ldr	r1, [pc, #100]	@ (800be10 <mem_free+0x118>)
 800bdaa:	4813      	ldr	r0, [pc, #76]	@ (800bdf8 <mem_free+0x100>)
 800bdac:	f00a ff3c 	bl	8016c28 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800bdb0:	4815      	ldr	r0, [pc, #84]	@ (800be08 <mem_free+0x110>)
 800bdb2:	f00a fdee 	bl	8016992 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800bdb6:	f00a fe19 	bl	80169ec <sys_arch_protect>
 800bdba:	61b8      	str	r0, [r7, #24]
 800bdbc:	69b8      	ldr	r0, [r7, #24]
 800bdbe:	f00a fe23 	bl	8016a08 <sys_arch_unprotect>
    return;
 800bdc2:	e012      	b.n	800bdea <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800bdc4:	69fb      	ldr	r3, [r7, #28]
 800bdc6:	2200      	movs	r2, #0
 800bdc8:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800bdca:	4b12      	ldr	r3, [pc, #72]	@ (800be14 <mem_free+0x11c>)
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	69fa      	ldr	r2, [r7, #28]
 800bdd0:	429a      	cmp	r2, r3
 800bdd2:	d202      	bcs.n	800bdda <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800bdd4:	4a0f      	ldr	r2, [pc, #60]	@ (800be14 <mem_free+0x11c>)
 800bdd6:	69fb      	ldr	r3, [r7, #28]
 800bdd8:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800bdda:	69f8      	ldr	r0, [r7, #28]
 800bddc:	f7ff fe5c 	bl	800ba98 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800bde0:	4809      	ldr	r0, [pc, #36]	@ (800be08 <mem_free+0x110>)
 800bde2:	f00a fdd6 	bl	8016992 <sys_mutex_unlock>
 800bde6:	e000      	b.n	800bdea <mem_free+0xf2>
    return;
 800bde8:	bf00      	nop
}
 800bdea:	3720      	adds	r7, #32
 800bdec:	46bd      	mov	sp, r7
 800bdee:	bd80      	pop	{r7, pc}
 800bdf0:	08018890 	.word	0x08018890
 800bdf4:	08018980 	.word	0x08018980
 800bdf8:	080188d8 	.word	0x080188d8
 800bdfc:	2000c2c8 	.word	0x2000c2c8
 800be00:	2000c2cc 	.word	0x2000c2cc
 800be04:	080189a4 	.word	0x080189a4
 800be08:	2000c2d0 	.word	0x2000c2d0
 800be0c:	080189c0 	.word	0x080189c0
 800be10:	080189e8 	.word	0x080189e8
 800be14:	2000c2d4 	.word	0x2000c2d4

0800be18 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800be18:	b580      	push	{r7, lr}
 800be1a:	b088      	sub	sp, #32
 800be1c:	af00      	add	r7, sp, #0
 800be1e:	6078      	str	r0, [r7, #4]
 800be20:	460b      	mov	r3, r1
 800be22:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800be24:	887b      	ldrh	r3, [r7, #2]
 800be26:	3303      	adds	r3, #3
 800be28:	b29b      	uxth	r3, r3
 800be2a:	f023 0303 	bic.w	r3, r3, #3
 800be2e:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800be30:	8bfb      	ldrh	r3, [r7, #30]
 800be32:	2b0b      	cmp	r3, #11
 800be34:	d801      	bhi.n	800be3a <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800be36:	230c      	movs	r3, #12
 800be38:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800be3a:	8bfb      	ldrh	r3, [r7, #30]
 800be3c:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800be40:	d803      	bhi.n	800be4a <mem_trim+0x32>
 800be42:	8bfa      	ldrh	r2, [r7, #30]
 800be44:	887b      	ldrh	r3, [r7, #2]
 800be46:	429a      	cmp	r2, r3
 800be48:	d201      	bcs.n	800be4e <mem_trim+0x36>
    return NULL;
 800be4a:	2300      	movs	r3, #0
 800be4c:	e0d8      	b.n	800c000 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800be4e:	4b6e      	ldr	r3, [pc, #440]	@ (800c008 <mem_trim+0x1f0>)
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	687a      	ldr	r2, [r7, #4]
 800be54:	429a      	cmp	r2, r3
 800be56:	d304      	bcc.n	800be62 <mem_trim+0x4a>
 800be58:	4b6c      	ldr	r3, [pc, #432]	@ (800c00c <mem_trim+0x1f4>)
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	687a      	ldr	r2, [r7, #4]
 800be5e:	429a      	cmp	r2, r3
 800be60:	d306      	bcc.n	800be70 <mem_trim+0x58>
 800be62:	4b6b      	ldr	r3, [pc, #428]	@ (800c010 <mem_trim+0x1f8>)
 800be64:	f240 22d1 	movw	r2, #721	@ 0x2d1
 800be68:	496a      	ldr	r1, [pc, #424]	@ (800c014 <mem_trim+0x1fc>)
 800be6a:	486b      	ldr	r0, [pc, #428]	@ (800c018 <mem_trim+0x200>)
 800be6c:	f00a fedc 	bl	8016c28 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800be70:	4b65      	ldr	r3, [pc, #404]	@ (800c008 <mem_trim+0x1f0>)
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	687a      	ldr	r2, [r7, #4]
 800be76:	429a      	cmp	r2, r3
 800be78:	d304      	bcc.n	800be84 <mem_trim+0x6c>
 800be7a:	4b64      	ldr	r3, [pc, #400]	@ (800c00c <mem_trim+0x1f4>)
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	687a      	ldr	r2, [r7, #4]
 800be80:	429a      	cmp	r2, r3
 800be82:	d307      	bcc.n	800be94 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800be84:	f00a fdb2 	bl	80169ec <sys_arch_protect>
 800be88:	60b8      	str	r0, [r7, #8]
 800be8a:	68b8      	ldr	r0, [r7, #8]
 800be8c:	f00a fdbc 	bl	8016a08 <sys_arch_unprotect>
    return rmem;
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	e0b5      	b.n	800c000 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	3b08      	subs	r3, #8
 800be98:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800be9a:	69b8      	ldr	r0, [r7, #24]
 800be9c:	f7ff fdea 	bl	800ba74 <mem_to_ptr>
 800bea0:	4603      	mov	r3, r0
 800bea2:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800bea4:	69bb      	ldr	r3, [r7, #24]
 800bea6:	881a      	ldrh	r2, [r3, #0]
 800bea8:	8afb      	ldrh	r3, [r7, #22]
 800beaa:	1ad3      	subs	r3, r2, r3
 800beac:	b29b      	uxth	r3, r3
 800beae:	3b08      	subs	r3, #8
 800beb0:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800beb2:	8bfa      	ldrh	r2, [r7, #30]
 800beb4:	8abb      	ldrh	r3, [r7, #20]
 800beb6:	429a      	cmp	r2, r3
 800beb8:	d906      	bls.n	800bec8 <mem_trim+0xb0>
 800beba:	4b55      	ldr	r3, [pc, #340]	@ (800c010 <mem_trim+0x1f8>)
 800bebc:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 800bec0:	4956      	ldr	r1, [pc, #344]	@ (800c01c <mem_trim+0x204>)
 800bec2:	4855      	ldr	r0, [pc, #340]	@ (800c018 <mem_trim+0x200>)
 800bec4:	f00a feb0 	bl	8016c28 <iprintf>
  if (newsize > size) {
 800bec8:	8bfa      	ldrh	r2, [r7, #30]
 800beca:	8abb      	ldrh	r3, [r7, #20]
 800becc:	429a      	cmp	r2, r3
 800bece:	d901      	bls.n	800bed4 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800bed0:	2300      	movs	r3, #0
 800bed2:	e095      	b.n	800c000 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800bed4:	8bfa      	ldrh	r2, [r7, #30]
 800bed6:	8abb      	ldrh	r3, [r7, #20]
 800bed8:	429a      	cmp	r2, r3
 800beda:	d101      	bne.n	800bee0 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	e08f      	b.n	800c000 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800bee0:	484f      	ldr	r0, [pc, #316]	@ (800c020 <mem_trim+0x208>)
 800bee2:	f00a fd47 	bl	8016974 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800bee6:	69bb      	ldr	r3, [r7, #24]
 800bee8:	881b      	ldrh	r3, [r3, #0]
 800beea:	4618      	mov	r0, r3
 800beec:	f7ff fdb0 	bl	800ba50 <ptr_to_mem>
 800bef0:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800bef2:	693b      	ldr	r3, [r7, #16]
 800bef4:	791b      	ldrb	r3, [r3, #4]
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d13f      	bne.n	800bf7a <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800befa:	69bb      	ldr	r3, [r7, #24]
 800befc:	881b      	ldrh	r3, [r3, #0]
 800befe:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800bf02:	d106      	bne.n	800bf12 <mem_trim+0xfa>
 800bf04:	4b42      	ldr	r3, [pc, #264]	@ (800c010 <mem_trim+0x1f8>)
 800bf06:	f240 22f5 	movw	r2, #757	@ 0x2f5
 800bf0a:	4946      	ldr	r1, [pc, #280]	@ (800c024 <mem_trim+0x20c>)
 800bf0c:	4842      	ldr	r0, [pc, #264]	@ (800c018 <mem_trim+0x200>)
 800bf0e:	f00a fe8b 	bl	8016c28 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800bf12:	693b      	ldr	r3, [r7, #16]
 800bf14:	881b      	ldrh	r3, [r3, #0]
 800bf16:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800bf18:	8afa      	ldrh	r2, [r7, #22]
 800bf1a:	8bfb      	ldrh	r3, [r7, #30]
 800bf1c:	4413      	add	r3, r2
 800bf1e:	b29b      	uxth	r3, r3
 800bf20:	3308      	adds	r3, #8
 800bf22:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800bf24:	4b40      	ldr	r3, [pc, #256]	@ (800c028 <mem_trim+0x210>)
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	693a      	ldr	r2, [r7, #16]
 800bf2a:	429a      	cmp	r2, r3
 800bf2c:	d106      	bne.n	800bf3c <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800bf2e:	89fb      	ldrh	r3, [r7, #14]
 800bf30:	4618      	mov	r0, r3
 800bf32:	f7ff fd8d 	bl	800ba50 <ptr_to_mem>
 800bf36:	4603      	mov	r3, r0
 800bf38:	4a3b      	ldr	r2, [pc, #236]	@ (800c028 <mem_trim+0x210>)
 800bf3a:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800bf3c:	89fb      	ldrh	r3, [r7, #14]
 800bf3e:	4618      	mov	r0, r3
 800bf40:	f7ff fd86 	bl	800ba50 <ptr_to_mem>
 800bf44:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800bf46:	693b      	ldr	r3, [r7, #16]
 800bf48:	2200      	movs	r2, #0
 800bf4a:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800bf4c:	693b      	ldr	r3, [r7, #16]
 800bf4e:	89ba      	ldrh	r2, [r7, #12]
 800bf50:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800bf52:	693b      	ldr	r3, [r7, #16]
 800bf54:	8afa      	ldrh	r2, [r7, #22]
 800bf56:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800bf58:	69bb      	ldr	r3, [r7, #24]
 800bf5a:	89fa      	ldrh	r2, [r7, #14]
 800bf5c:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800bf5e:	693b      	ldr	r3, [r7, #16]
 800bf60:	881b      	ldrh	r3, [r3, #0]
 800bf62:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800bf66:	d047      	beq.n	800bff8 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800bf68:	693b      	ldr	r3, [r7, #16]
 800bf6a:	881b      	ldrh	r3, [r3, #0]
 800bf6c:	4618      	mov	r0, r3
 800bf6e:	f7ff fd6f 	bl	800ba50 <ptr_to_mem>
 800bf72:	4602      	mov	r2, r0
 800bf74:	89fb      	ldrh	r3, [r7, #14]
 800bf76:	8053      	strh	r3, [r2, #2]
 800bf78:	e03e      	b.n	800bff8 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800bf7a:	8bfb      	ldrh	r3, [r7, #30]
 800bf7c:	f103 0214 	add.w	r2, r3, #20
 800bf80:	8abb      	ldrh	r3, [r7, #20]
 800bf82:	429a      	cmp	r2, r3
 800bf84:	d838      	bhi.n	800bff8 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800bf86:	8afa      	ldrh	r2, [r7, #22]
 800bf88:	8bfb      	ldrh	r3, [r7, #30]
 800bf8a:	4413      	add	r3, r2
 800bf8c:	b29b      	uxth	r3, r3
 800bf8e:	3308      	adds	r3, #8
 800bf90:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800bf92:	69bb      	ldr	r3, [r7, #24]
 800bf94:	881b      	ldrh	r3, [r3, #0]
 800bf96:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800bf9a:	d106      	bne.n	800bfaa <mem_trim+0x192>
 800bf9c:	4b1c      	ldr	r3, [pc, #112]	@ (800c010 <mem_trim+0x1f8>)
 800bf9e:	f240 3216 	movw	r2, #790	@ 0x316
 800bfa2:	4920      	ldr	r1, [pc, #128]	@ (800c024 <mem_trim+0x20c>)
 800bfa4:	481c      	ldr	r0, [pc, #112]	@ (800c018 <mem_trim+0x200>)
 800bfa6:	f00a fe3f 	bl	8016c28 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800bfaa:	89fb      	ldrh	r3, [r7, #14]
 800bfac:	4618      	mov	r0, r3
 800bfae:	f7ff fd4f 	bl	800ba50 <ptr_to_mem>
 800bfb2:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800bfb4:	4b1c      	ldr	r3, [pc, #112]	@ (800c028 <mem_trim+0x210>)
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	693a      	ldr	r2, [r7, #16]
 800bfba:	429a      	cmp	r2, r3
 800bfbc:	d202      	bcs.n	800bfc4 <mem_trim+0x1ac>
      lfree = mem2;
 800bfbe:	4a1a      	ldr	r2, [pc, #104]	@ (800c028 <mem_trim+0x210>)
 800bfc0:	693b      	ldr	r3, [r7, #16]
 800bfc2:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800bfc4:	693b      	ldr	r3, [r7, #16]
 800bfc6:	2200      	movs	r2, #0
 800bfc8:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800bfca:	69bb      	ldr	r3, [r7, #24]
 800bfcc:	881a      	ldrh	r2, [r3, #0]
 800bfce:	693b      	ldr	r3, [r7, #16]
 800bfd0:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800bfd2:	693b      	ldr	r3, [r7, #16]
 800bfd4:	8afa      	ldrh	r2, [r7, #22]
 800bfd6:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800bfd8:	69bb      	ldr	r3, [r7, #24]
 800bfda:	89fa      	ldrh	r2, [r7, #14]
 800bfdc:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800bfde:	693b      	ldr	r3, [r7, #16]
 800bfe0:	881b      	ldrh	r3, [r3, #0]
 800bfe2:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800bfe6:	d007      	beq.n	800bff8 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800bfe8:	693b      	ldr	r3, [r7, #16]
 800bfea:	881b      	ldrh	r3, [r3, #0]
 800bfec:	4618      	mov	r0, r3
 800bfee:	f7ff fd2f 	bl	800ba50 <ptr_to_mem>
 800bff2:	4602      	mov	r2, r0
 800bff4:	89fb      	ldrh	r3, [r7, #14]
 800bff6:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800bff8:	4809      	ldr	r0, [pc, #36]	@ (800c020 <mem_trim+0x208>)
 800bffa:	f00a fcca 	bl	8016992 <sys_mutex_unlock>
  return rmem;
 800bffe:	687b      	ldr	r3, [r7, #4]
}
 800c000:	4618      	mov	r0, r3
 800c002:	3720      	adds	r7, #32
 800c004:	46bd      	mov	sp, r7
 800c006:	bd80      	pop	{r7, pc}
 800c008:	2000c2c8 	.word	0x2000c2c8
 800c00c:	2000c2cc 	.word	0x2000c2cc
 800c010:	08018890 	.word	0x08018890
 800c014:	08018a1c 	.word	0x08018a1c
 800c018:	080188d8 	.word	0x080188d8
 800c01c:	08018a34 	.word	0x08018a34
 800c020:	2000c2d0 	.word	0x2000c2d0
 800c024:	08018a54 	.word	0x08018a54
 800c028:	2000c2d4 	.word	0x2000c2d4

0800c02c <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800c02c:	b580      	push	{r7, lr}
 800c02e:	b088      	sub	sp, #32
 800c030:	af00      	add	r7, sp, #0
 800c032:	4603      	mov	r3, r0
 800c034:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800c036:	88fb      	ldrh	r3, [r7, #6]
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d101      	bne.n	800c040 <mem_malloc+0x14>
    return NULL;
 800c03c:	2300      	movs	r3, #0
 800c03e:	e0e2      	b.n	800c206 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800c040:	88fb      	ldrh	r3, [r7, #6]
 800c042:	3303      	adds	r3, #3
 800c044:	b29b      	uxth	r3, r3
 800c046:	f023 0303 	bic.w	r3, r3, #3
 800c04a:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800c04c:	8bbb      	ldrh	r3, [r7, #28]
 800c04e:	2b0b      	cmp	r3, #11
 800c050:	d801      	bhi.n	800c056 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800c052:	230c      	movs	r3, #12
 800c054:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800c056:	8bbb      	ldrh	r3, [r7, #28]
 800c058:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800c05c:	d803      	bhi.n	800c066 <mem_malloc+0x3a>
 800c05e:	8bba      	ldrh	r2, [r7, #28]
 800c060:	88fb      	ldrh	r3, [r7, #6]
 800c062:	429a      	cmp	r2, r3
 800c064:	d201      	bcs.n	800c06a <mem_malloc+0x3e>
    return NULL;
 800c066:	2300      	movs	r3, #0
 800c068:	e0cd      	b.n	800c206 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800c06a:	4869      	ldr	r0, [pc, #420]	@ (800c210 <mem_malloc+0x1e4>)
 800c06c:	f00a fc82 	bl	8016974 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800c070:	4b68      	ldr	r3, [pc, #416]	@ (800c214 <mem_malloc+0x1e8>)
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	4618      	mov	r0, r3
 800c076:	f7ff fcfd 	bl	800ba74 <mem_to_ptr>
 800c07a:	4603      	mov	r3, r0
 800c07c:	83fb      	strh	r3, [r7, #30]
 800c07e:	e0b7      	b.n	800c1f0 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800c080:	8bfb      	ldrh	r3, [r7, #30]
 800c082:	4618      	mov	r0, r3
 800c084:	f7ff fce4 	bl	800ba50 <ptr_to_mem>
 800c088:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800c08a:	697b      	ldr	r3, [r7, #20]
 800c08c:	791b      	ldrb	r3, [r3, #4]
 800c08e:	2b00      	cmp	r3, #0
 800c090:	f040 80a7 	bne.w	800c1e2 <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800c094:	697b      	ldr	r3, [r7, #20]
 800c096:	881b      	ldrh	r3, [r3, #0]
 800c098:	461a      	mov	r2, r3
 800c09a:	8bfb      	ldrh	r3, [r7, #30]
 800c09c:	1ad3      	subs	r3, r2, r3
 800c09e:	f1a3 0208 	sub.w	r2, r3, #8
 800c0a2:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800c0a4:	429a      	cmp	r2, r3
 800c0a6:	f0c0 809c 	bcc.w	800c1e2 <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800c0aa:	697b      	ldr	r3, [r7, #20]
 800c0ac:	881b      	ldrh	r3, [r3, #0]
 800c0ae:	461a      	mov	r2, r3
 800c0b0:	8bfb      	ldrh	r3, [r7, #30]
 800c0b2:	1ad3      	subs	r3, r2, r3
 800c0b4:	f1a3 0208 	sub.w	r2, r3, #8
 800c0b8:	8bbb      	ldrh	r3, [r7, #28]
 800c0ba:	3314      	adds	r3, #20
 800c0bc:	429a      	cmp	r2, r3
 800c0be:	d333      	bcc.n	800c128 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800c0c0:	8bfa      	ldrh	r2, [r7, #30]
 800c0c2:	8bbb      	ldrh	r3, [r7, #28]
 800c0c4:	4413      	add	r3, r2
 800c0c6:	b29b      	uxth	r3, r3
 800c0c8:	3308      	adds	r3, #8
 800c0ca:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800c0cc:	8a7b      	ldrh	r3, [r7, #18]
 800c0ce:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800c0d2:	d106      	bne.n	800c0e2 <mem_malloc+0xb6>
 800c0d4:	4b50      	ldr	r3, [pc, #320]	@ (800c218 <mem_malloc+0x1ec>)
 800c0d6:	f240 3287 	movw	r2, #903	@ 0x387
 800c0da:	4950      	ldr	r1, [pc, #320]	@ (800c21c <mem_malloc+0x1f0>)
 800c0dc:	4850      	ldr	r0, [pc, #320]	@ (800c220 <mem_malloc+0x1f4>)
 800c0de:	f00a fda3 	bl	8016c28 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800c0e2:	8a7b      	ldrh	r3, [r7, #18]
 800c0e4:	4618      	mov	r0, r3
 800c0e6:	f7ff fcb3 	bl	800ba50 <ptr_to_mem>
 800c0ea:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	2200      	movs	r2, #0
 800c0f0:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800c0f2:	697b      	ldr	r3, [r7, #20]
 800c0f4:	881a      	ldrh	r2, [r3, #0]
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	8bfa      	ldrh	r2, [r7, #30]
 800c0fe:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800c100:	697b      	ldr	r3, [r7, #20]
 800c102:	8a7a      	ldrh	r2, [r7, #18]
 800c104:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800c106:	697b      	ldr	r3, [r7, #20]
 800c108:	2201      	movs	r2, #1
 800c10a:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	881b      	ldrh	r3, [r3, #0]
 800c110:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800c114:	d00b      	beq.n	800c12e <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800c116:	68fb      	ldr	r3, [r7, #12]
 800c118:	881b      	ldrh	r3, [r3, #0]
 800c11a:	4618      	mov	r0, r3
 800c11c:	f7ff fc98 	bl	800ba50 <ptr_to_mem>
 800c120:	4602      	mov	r2, r0
 800c122:	8a7b      	ldrh	r3, [r7, #18]
 800c124:	8053      	strh	r3, [r2, #2]
 800c126:	e002      	b.n	800c12e <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800c128:	697b      	ldr	r3, [r7, #20]
 800c12a:	2201      	movs	r2, #1
 800c12c:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800c12e:	4b39      	ldr	r3, [pc, #228]	@ (800c214 <mem_malloc+0x1e8>)
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	697a      	ldr	r2, [r7, #20]
 800c134:	429a      	cmp	r2, r3
 800c136:	d127      	bne.n	800c188 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800c138:	4b36      	ldr	r3, [pc, #216]	@ (800c214 <mem_malloc+0x1e8>)
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800c13e:	e005      	b.n	800c14c <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800c140:	69bb      	ldr	r3, [r7, #24]
 800c142:	881b      	ldrh	r3, [r3, #0]
 800c144:	4618      	mov	r0, r3
 800c146:	f7ff fc83 	bl	800ba50 <ptr_to_mem>
 800c14a:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800c14c:	69bb      	ldr	r3, [r7, #24]
 800c14e:	791b      	ldrb	r3, [r3, #4]
 800c150:	2b00      	cmp	r3, #0
 800c152:	d004      	beq.n	800c15e <mem_malloc+0x132>
 800c154:	4b33      	ldr	r3, [pc, #204]	@ (800c224 <mem_malloc+0x1f8>)
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	69ba      	ldr	r2, [r7, #24]
 800c15a:	429a      	cmp	r2, r3
 800c15c:	d1f0      	bne.n	800c140 <mem_malloc+0x114>
          }
          lfree = cur;
 800c15e:	4a2d      	ldr	r2, [pc, #180]	@ (800c214 <mem_malloc+0x1e8>)
 800c160:	69bb      	ldr	r3, [r7, #24]
 800c162:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800c164:	4b2b      	ldr	r3, [pc, #172]	@ (800c214 <mem_malloc+0x1e8>)
 800c166:	681a      	ldr	r2, [r3, #0]
 800c168:	4b2e      	ldr	r3, [pc, #184]	@ (800c224 <mem_malloc+0x1f8>)
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	429a      	cmp	r2, r3
 800c16e:	d00b      	beq.n	800c188 <mem_malloc+0x15c>
 800c170:	4b28      	ldr	r3, [pc, #160]	@ (800c214 <mem_malloc+0x1e8>)
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	791b      	ldrb	r3, [r3, #4]
 800c176:	2b00      	cmp	r3, #0
 800c178:	d006      	beq.n	800c188 <mem_malloc+0x15c>
 800c17a:	4b27      	ldr	r3, [pc, #156]	@ (800c218 <mem_malloc+0x1ec>)
 800c17c:	f240 32b5 	movw	r2, #949	@ 0x3b5
 800c180:	4929      	ldr	r1, [pc, #164]	@ (800c228 <mem_malloc+0x1fc>)
 800c182:	4827      	ldr	r0, [pc, #156]	@ (800c220 <mem_malloc+0x1f4>)
 800c184:	f00a fd50 	bl	8016c28 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800c188:	4821      	ldr	r0, [pc, #132]	@ (800c210 <mem_malloc+0x1e4>)
 800c18a:	f00a fc02 	bl	8016992 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800c18e:	8bba      	ldrh	r2, [r7, #28]
 800c190:	697b      	ldr	r3, [r7, #20]
 800c192:	4413      	add	r3, r2
 800c194:	3308      	adds	r3, #8
 800c196:	4a23      	ldr	r2, [pc, #140]	@ (800c224 <mem_malloc+0x1f8>)
 800c198:	6812      	ldr	r2, [r2, #0]
 800c19a:	4293      	cmp	r3, r2
 800c19c:	d906      	bls.n	800c1ac <mem_malloc+0x180>
 800c19e:	4b1e      	ldr	r3, [pc, #120]	@ (800c218 <mem_malloc+0x1ec>)
 800c1a0:	f240 32b9 	movw	r2, #953	@ 0x3b9
 800c1a4:	4921      	ldr	r1, [pc, #132]	@ (800c22c <mem_malloc+0x200>)
 800c1a6:	481e      	ldr	r0, [pc, #120]	@ (800c220 <mem_malloc+0x1f4>)
 800c1a8:	f00a fd3e 	bl	8016c28 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800c1ac:	697b      	ldr	r3, [r7, #20]
 800c1ae:	f003 0303 	and.w	r3, r3, #3
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d006      	beq.n	800c1c4 <mem_malloc+0x198>
 800c1b6:	4b18      	ldr	r3, [pc, #96]	@ (800c218 <mem_malloc+0x1ec>)
 800c1b8:	f240 32bb 	movw	r2, #955	@ 0x3bb
 800c1bc:	491c      	ldr	r1, [pc, #112]	@ (800c230 <mem_malloc+0x204>)
 800c1be:	4818      	ldr	r0, [pc, #96]	@ (800c220 <mem_malloc+0x1f4>)
 800c1c0:	f00a fd32 	bl	8016c28 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800c1c4:	697b      	ldr	r3, [r7, #20]
 800c1c6:	f003 0303 	and.w	r3, r3, #3
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d006      	beq.n	800c1dc <mem_malloc+0x1b0>
 800c1ce:	4b12      	ldr	r3, [pc, #72]	@ (800c218 <mem_malloc+0x1ec>)
 800c1d0:	f240 32bd 	movw	r2, #957	@ 0x3bd
 800c1d4:	4917      	ldr	r1, [pc, #92]	@ (800c234 <mem_malloc+0x208>)
 800c1d6:	4812      	ldr	r0, [pc, #72]	@ (800c220 <mem_malloc+0x1f4>)
 800c1d8:	f00a fd26 	bl	8016c28 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800c1dc:	697b      	ldr	r3, [r7, #20]
 800c1de:	3308      	adds	r3, #8
 800c1e0:	e011      	b.n	800c206 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800c1e2:	8bfb      	ldrh	r3, [r7, #30]
 800c1e4:	4618      	mov	r0, r3
 800c1e6:	f7ff fc33 	bl	800ba50 <ptr_to_mem>
 800c1ea:	4603      	mov	r3, r0
 800c1ec:	881b      	ldrh	r3, [r3, #0]
 800c1ee:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800c1f0:	8bfa      	ldrh	r2, [r7, #30]
 800c1f2:	8bbb      	ldrh	r3, [r7, #28]
 800c1f4:	f5c3 5320 	rsb	r3, r3, #10240	@ 0x2800
 800c1f8:	429a      	cmp	r2, r3
 800c1fa:	f4ff af41 	bcc.w	800c080 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800c1fe:	4804      	ldr	r0, [pc, #16]	@ (800c210 <mem_malloc+0x1e4>)
 800c200:	f00a fbc7 	bl	8016992 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800c204:	2300      	movs	r3, #0
}
 800c206:	4618      	mov	r0, r3
 800c208:	3720      	adds	r7, #32
 800c20a:	46bd      	mov	sp, r7
 800c20c:	bd80      	pop	{r7, pc}
 800c20e:	bf00      	nop
 800c210:	2000c2d0 	.word	0x2000c2d0
 800c214:	2000c2d4 	.word	0x2000c2d4
 800c218:	08018890 	.word	0x08018890
 800c21c:	08018a54 	.word	0x08018a54
 800c220:	080188d8 	.word	0x080188d8
 800c224:	2000c2cc 	.word	0x2000c2cc
 800c228:	08018a68 	.word	0x08018a68
 800c22c:	08018a84 	.word	0x08018a84
 800c230:	08018ab4 	.word	0x08018ab4
 800c234:	08018ae4 	.word	0x08018ae4

0800c238 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800c238:	b480      	push	{r7}
 800c23a:	b085      	sub	sp, #20
 800c23c:	af00      	add	r7, sp, #0
 800c23e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	689b      	ldr	r3, [r3, #8]
 800c244:	2200      	movs	r2, #0
 800c246:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	685b      	ldr	r3, [r3, #4]
 800c24c:	3303      	adds	r3, #3
 800c24e:	f023 0303 	bic.w	r3, r3, #3
 800c252:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800c254:	2300      	movs	r3, #0
 800c256:	60fb      	str	r3, [r7, #12]
 800c258:	e011      	b.n	800c27e <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	689b      	ldr	r3, [r3, #8]
 800c25e:	681a      	ldr	r2, [r3, #0]
 800c260:	68bb      	ldr	r3, [r7, #8]
 800c262:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	689b      	ldr	r3, [r3, #8]
 800c268:	68ba      	ldr	r2, [r7, #8]
 800c26a:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	881b      	ldrh	r3, [r3, #0]
 800c270:	461a      	mov	r2, r3
 800c272:	68bb      	ldr	r3, [r7, #8]
 800c274:	4413      	add	r3, r2
 800c276:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	3301      	adds	r3, #1
 800c27c:	60fb      	str	r3, [r7, #12]
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	885b      	ldrh	r3, [r3, #2]
 800c282:	461a      	mov	r2, r3
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	4293      	cmp	r3, r2
 800c288:	dbe7      	blt.n	800c25a <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800c28a:	bf00      	nop
 800c28c:	bf00      	nop
 800c28e:	3714      	adds	r7, #20
 800c290:	46bd      	mov	sp, r7
 800c292:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c296:	4770      	bx	lr

0800c298 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800c298:	b580      	push	{r7, lr}
 800c29a:	b082      	sub	sp, #8
 800c29c:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800c29e:	2300      	movs	r3, #0
 800c2a0:	80fb      	strh	r3, [r7, #6]
 800c2a2:	e009      	b.n	800c2b8 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800c2a4:	88fb      	ldrh	r3, [r7, #6]
 800c2a6:	4a08      	ldr	r2, [pc, #32]	@ (800c2c8 <memp_init+0x30>)
 800c2a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c2ac:	4618      	mov	r0, r3
 800c2ae:	f7ff ffc3 	bl	800c238 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800c2b2:	88fb      	ldrh	r3, [r7, #6]
 800c2b4:	3301      	adds	r3, #1
 800c2b6:	80fb      	strh	r3, [r7, #6]
 800c2b8:	88fb      	ldrh	r3, [r7, #6]
 800c2ba:	2b0c      	cmp	r3, #12
 800c2bc:	d9f2      	bls.n	800c2a4 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800c2be:	bf00      	nop
 800c2c0:	bf00      	nop
 800c2c2:	3708      	adds	r7, #8
 800c2c4:	46bd      	mov	sp, r7
 800c2c6:	bd80      	pop	{r7, pc}
 800c2c8:	0801b320 	.word	0x0801b320

0800c2cc <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800c2cc:	b580      	push	{r7, lr}
 800c2ce:	b084      	sub	sp, #16
 800c2d0:	af00      	add	r7, sp, #0
 800c2d2:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800c2d4:	f00a fb8a 	bl	80169ec <sys_arch_protect>
 800c2d8:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	689b      	ldr	r3, [r3, #8]
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800c2e2:	68bb      	ldr	r3, [r7, #8]
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d015      	beq.n	800c314 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	689b      	ldr	r3, [r3, #8]
 800c2ec:	68ba      	ldr	r2, [r7, #8]
 800c2ee:	6812      	ldr	r2, [r2, #0]
 800c2f0:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800c2f2:	68bb      	ldr	r3, [r7, #8]
 800c2f4:	f003 0303 	and.w	r3, r3, #3
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d006      	beq.n	800c30a <do_memp_malloc_pool+0x3e>
 800c2fc:	4b09      	ldr	r3, [pc, #36]	@ (800c324 <do_memp_malloc_pool+0x58>)
 800c2fe:	f44f 728c 	mov.w	r2, #280	@ 0x118
 800c302:	4909      	ldr	r1, [pc, #36]	@ (800c328 <do_memp_malloc_pool+0x5c>)
 800c304:	4809      	ldr	r0, [pc, #36]	@ (800c32c <do_memp_malloc_pool+0x60>)
 800c306:	f00a fc8f 	bl	8016c28 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800c30a:	68f8      	ldr	r0, [r7, #12]
 800c30c:	f00a fb7c 	bl	8016a08 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800c310:	68bb      	ldr	r3, [r7, #8]
 800c312:	e003      	b.n	800c31c <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800c314:	68f8      	ldr	r0, [r7, #12]
 800c316:	f00a fb77 	bl	8016a08 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800c31a:	2300      	movs	r3, #0
}
 800c31c:	4618      	mov	r0, r3
 800c31e:	3710      	adds	r7, #16
 800c320:	46bd      	mov	sp, r7
 800c322:	bd80      	pop	{r7, pc}
 800c324:	08018b08 	.word	0x08018b08
 800c328:	08018b38 	.word	0x08018b38
 800c32c:	08018b5c 	.word	0x08018b5c

0800c330 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800c330:	b580      	push	{r7, lr}
 800c332:	b082      	sub	sp, #8
 800c334:	af00      	add	r7, sp, #0
 800c336:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d106      	bne.n	800c34c <memp_malloc_pool+0x1c>
 800c33e:	4b0a      	ldr	r3, [pc, #40]	@ (800c368 <memp_malloc_pool+0x38>)
 800c340:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 800c344:	4909      	ldr	r1, [pc, #36]	@ (800c36c <memp_malloc_pool+0x3c>)
 800c346:	480a      	ldr	r0, [pc, #40]	@ (800c370 <memp_malloc_pool+0x40>)
 800c348:	f00a fc6e 	bl	8016c28 <iprintf>
  if (desc == NULL) {
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d101      	bne.n	800c356 <memp_malloc_pool+0x26>
    return NULL;
 800c352:	2300      	movs	r3, #0
 800c354:	e003      	b.n	800c35e <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800c356:	6878      	ldr	r0, [r7, #4]
 800c358:	f7ff ffb8 	bl	800c2cc <do_memp_malloc_pool>
 800c35c:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800c35e:	4618      	mov	r0, r3
 800c360:	3708      	adds	r7, #8
 800c362:	46bd      	mov	sp, r7
 800c364:	bd80      	pop	{r7, pc}
 800c366:	bf00      	nop
 800c368:	08018b08 	.word	0x08018b08
 800c36c:	08018b84 	.word	0x08018b84
 800c370:	08018b5c 	.word	0x08018b5c

0800c374 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800c374:	b580      	push	{r7, lr}
 800c376:	b084      	sub	sp, #16
 800c378:	af00      	add	r7, sp, #0
 800c37a:	4603      	mov	r3, r0
 800c37c:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800c37e:	79fb      	ldrb	r3, [r7, #7]
 800c380:	2b0c      	cmp	r3, #12
 800c382:	d908      	bls.n	800c396 <memp_malloc+0x22>
 800c384:	4b0a      	ldr	r3, [pc, #40]	@ (800c3b0 <memp_malloc+0x3c>)
 800c386:	f240 1257 	movw	r2, #343	@ 0x157
 800c38a:	490a      	ldr	r1, [pc, #40]	@ (800c3b4 <memp_malloc+0x40>)
 800c38c:	480a      	ldr	r0, [pc, #40]	@ (800c3b8 <memp_malloc+0x44>)
 800c38e:	f00a fc4b 	bl	8016c28 <iprintf>
 800c392:	2300      	movs	r3, #0
 800c394:	e008      	b.n	800c3a8 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800c396:	79fb      	ldrb	r3, [r7, #7]
 800c398:	4a08      	ldr	r2, [pc, #32]	@ (800c3bc <memp_malloc+0x48>)
 800c39a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c39e:	4618      	mov	r0, r3
 800c3a0:	f7ff ff94 	bl	800c2cc <do_memp_malloc_pool>
 800c3a4:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800c3a6:	68fb      	ldr	r3, [r7, #12]
}
 800c3a8:	4618      	mov	r0, r3
 800c3aa:	3710      	adds	r7, #16
 800c3ac:	46bd      	mov	sp, r7
 800c3ae:	bd80      	pop	{r7, pc}
 800c3b0:	08018b08 	.word	0x08018b08
 800c3b4:	08018b98 	.word	0x08018b98
 800c3b8:	08018b5c 	.word	0x08018b5c
 800c3bc:	0801b320 	.word	0x0801b320

0800c3c0 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800c3c0:	b580      	push	{r7, lr}
 800c3c2:	b084      	sub	sp, #16
 800c3c4:	af00      	add	r7, sp, #0
 800c3c6:	6078      	str	r0, [r7, #4]
 800c3c8:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800c3ca:	683b      	ldr	r3, [r7, #0]
 800c3cc:	f003 0303 	and.w	r3, r3, #3
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d006      	beq.n	800c3e2 <do_memp_free_pool+0x22>
 800c3d4:	4b0d      	ldr	r3, [pc, #52]	@ (800c40c <do_memp_free_pool+0x4c>)
 800c3d6:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 800c3da:	490d      	ldr	r1, [pc, #52]	@ (800c410 <do_memp_free_pool+0x50>)
 800c3dc:	480d      	ldr	r0, [pc, #52]	@ (800c414 <do_memp_free_pool+0x54>)
 800c3de:	f00a fc23 	bl	8016c28 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800c3e2:	683b      	ldr	r3, [r7, #0]
 800c3e4:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800c3e6:	f00a fb01 	bl	80169ec <sys_arch_protect>
 800c3ea:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	689b      	ldr	r3, [r3, #8]
 800c3f0:	681a      	ldr	r2, [r3, #0]
 800c3f2:	68fb      	ldr	r3, [r7, #12]
 800c3f4:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	689b      	ldr	r3, [r3, #8]
 800c3fa:	68fa      	ldr	r2, [r7, #12]
 800c3fc:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800c3fe:	68b8      	ldr	r0, [r7, #8]
 800c400:	f00a fb02 	bl	8016a08 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800c404:	bf00      	nop
 800c406:	3710      	adds	r7, #16
 800c408:	46bd      	mov	sp, r7
 800c40a:	bd80      	pop	{r7, pc}
 800c40c:	08018b08 	.word	0x08018b08
 800c410:	08018bb8 	.word	0x08018bb8
 800c414:	08018b5c 	.word	0x08018b5c

0800c418 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800c418:	b580      	push	{r7, lr}
 800c41a:	b082      	sub	sp, #8
 800c41c:	af00      	add	r7, sp, #0
 800c41e:	6078      	str	r0, [r7, #4]
 800c420:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	2b00      	cmp	r3, #0
 800c426:	d106      	bne.n	800c436 <memp_free_pool+0x1e>
 800c428:	4b0a      	ldr	r3, [pc, #40]	@ (800c454 <memp_free_pool+0x3c>)
 800c42a:	f240 1295 	movw	r2, #405	@ 0x195
 800c42e:	490a      	ldr	r1, [pc, #40]	@ (800c458 <memp_free_pool+0x40>)
 800c430:	480a      	ldr	r0, [pc, #40]	@ (800c45c <memp_free_pool+0x44>)
 800c432:	f00a fbf9 	bl	8016c28 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d007      	beq.n	800c44c <memp_free_pool+0x34>
 800c43c:	683b      	ldr	r3, [r7, #0]
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d004      	beq.n	800c44c <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800c442:	6839      	ldr	r1, [r7, #0]
 800c444:	6878      	ldr	r0, [r7, #4]
 800c446:	f7ff ffbb 	bl	800c3c0 <do_memp_free_pool>
 800c44a:	e000      	b.n	800c44e <memp_free_pool+0x36>
    return;
 800c44c:	bf00      	nop
}
 800c44e:	3708      	adds	r7, #8
 800c450:	46bd      	mov	sp, r7
 800c452:	bd80      	pop	{r7, pc}
 800c454:	08018b08 	.word	0x08018b08
 800c458:	08018b84 	.word	0x08018b84
 800c45c:	08018b5c 	.word	0x08018b5c

0800c460 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800c460:	b580      	push	{r7, lr}
 800c462:	b082      	sub	sp, #8
 800c464:	af00      	add	r7, sp, #0
 800c466:	4603      	mov	r3, r0
 800c468:	6039      	str	r1, [r7, #0]
 800c46a:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800c46c:	79fb      	ldrb	r3, [r7, #7]
 800c46e:	2b0c      	cmp	r3, #12
 800c470:	d907      	bls.n	800c482 <memp_free+0x22>
 800c472:	4b0c      	ldr	r3, [pc, #48]	@ (800c4a4 <memp_free+0x44>)
 800c474:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 800c478:	490b      	ldr	r1, [pc, #44]	@ (800c4a8 <memp_free+0x48>)
 800c47a:	480c      	ldr	r0, [pc, #48]	@ (800c4ac <memp_free+0x4c>)
 800c47c:	f00a fbd4 	bl	8016c28 <iprintf>
 800c480:	e00c      	b.n	800c49c <memp_free+0x3c>

  if (mem == NULL) {
 800c482:	683b      	ldr	r3, [r7, #0]
 800c484:	2b00      	cmp	r3, #0
 800c486:	d008      	beq.n	800c49a <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800c488:	79fb      	ldrb	r3, [r7, #7]
 800c48a:	4a09      	ldr	r2, [pc, #36]	@ (800c4b0 <memp_free+0x50>)
 800c48c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c490:	6839      	ldr	r1, [r7, #0]
 800c492:	4618      	mov	r0, r3
 800c494:	f7ff ff94 	bl	800c3c0 <do_memp_free_pool>
 800c498:	e000      	b.n	800c49c <memp_free+0x3c>
    return;
 800c49a:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800c49c:	3708      	adds	r7, #8
 800c49e:	46bd      	mov	sp, r7
 800c4a0:	bd80      	pop	{r7, pc}
 800c4a2:	bf00      	nop
 800c4a4:	08018b08 	.word	0x08018b08
 800c4a8:	08018bd8 	.word	0x08018bd8
 800c4ac:	08018b5c 	.word	0x08018b5c
 800c4b0:	0801b320 	.word	0x0801b320

0800c4b4 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800c4b4:	b480      	push	{r7}
 800c4b6:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800c4b8:	bf00      	nop
 800c4ba:	46bd      	mov	sp, r7
 800c4bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4c0:	4770      	bx	lr
	...

0800c4c4 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800c4c4:	b580      	push	{r7, lr}
 800c4c6:	b086      	sub	sp, #24
 800c4c8:	af00      	add	r7, sp, #0
 800c4ca:	60f8      	str	r0, [r7, #12]
 800c4cc:	60b9      	str	r1, [r7, #8]
 800c4ce:	607a      	str	r2, [r7, #4]
 800c4d0:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d108      	bne.n	800c4ea <netif_add+0x26>
 800c4d8:	4b57      	ldr	r3, [pc, #348]	@ (800c638 <netif_add+0x174>)
 800c4da:	f240 1227 	movw	r2, #295	@ 0x127
 800c4de:	4957      	ldr	r1, [pc, #348]	@ (800c63c <netif_add+0x178>)
 800c4e0:	4857      	ldr	r0, [pc, #348]	@ (800c640 <netif_add+0x17c>)
 800c4e2:	f00a fba1 	bl	8016c28 <iprintf>
 800c4e6:	2300      	movs	r3, #0
 800c4e8:	e0a2      	b.n	800c630 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800c4ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d108      	bne.n	800c502 <netif_add+0x3e>
 800c4f0:	4b51      	ldr	r3, [pc, #324]	@ (800c638 <netif_add+0x174>)
 800c4f2:	f44f 7294 	mov.w	r2, #296	@ 0x128
 800c4f6:	4953      	ldr	r1, [pc, #332]	@ (800c644 <netif_add+0x180>)
 800c4f8:	4851      	ldr	r0, [pc, #324]	@ (800c640 <netif_add+0x17c>)
 800c4fa:	f00a fb95 	bl	8016c28 <iprintf>
 800c4fe:	2300      	movs	r3, #0
 800c500:	e096      	b.n	800c630 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800c502:	68bb      	ldr	r3, [r7, #8]
 800c504:	2b00      	cmp	r3, #0
 800c506:	d101      	bne.n	800c50c <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800c508:	4b4f      	ldr	r3, [pc, #316]	@ (800c648 <netif_add+0x184>)
 800c50a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d101      	bne.n	800c516 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800c512:	4b4d      	ldr	r3, [pc, #308]	@ (800c648 <netif_add+0x184>)
 800c514:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800c516:	683b      	ldr	r3, [r7, #0]
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d101      	bne.n	800c520 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800c51c:	4b4a      	ldr	r3, [pc, #296]	@ (800c648 <netif_add+0x184>)
 800c51e:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800c520:	68fb      	ldr	r3, [r7, #12]
 800c522:	2200      	movs	r2, #0
 800c524:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800c526:	68fb      	ldr	r3, [r7, #12]
 800c528:	2200      	movs	r2, #0
 800c52a:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	2200      	movs	r2, #0
 800c530:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800c532:	68fb      	ldr	r3, [r7, #12]
 800c534:	4a45      	ldr	r2, [pc, #276]	@ (800c64c <netif_add+0x188>)
 800c536:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800c538:	68fb      	ldr	r3, [r7, #12]
 800c53a:	2200      	movs	r2, #0
 800c53c:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 800c53e:	68fb      	ldr	r3, [r7, #12]
 800c540:	2200      	movs	r2, #0
 800c542:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800c546:	68fb      	ldr	r3, [r7, #12]
 800c548:	2200      	movs	r2, #0
 800c54a:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	6a3a      	ldr	r2, [r7, #32]
 800c550:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800c552:	4b3f      	ldr	r3, [pc, #252]	@ (800c650 <netif_add+0x18c>)
 800c554:	781a      	ldrb	r2, [r3, #0]
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c560:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800c562:	683b      	ldr	r3, [r7, #0]
 800c564:	687a      	ldr	r2, [r7, #4]
 800c566:	68b9      	ldr	r1, [r7, #8]
 800c568:	68f8      	ldr	r0, [r7, #12]
 800c56a:	f000 f913 	bl	800c794 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800c56e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c570:	68f8      	ldr	r0, [r7, #12]
 800c572:	4798      	blx	r3
 800c574:	4603      	mov	r3, r0
 800c576:	2b00      	cmp	r3, #0
 800c578:	d001      	beq.n	800c57e <netif_add+0xba>
    return NULL;
 800c57a:	2300      	movs	r3, #0
 800c57c:	e058      	b.n	800c630 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800c57e:	68fb      	ldr	r3, [r7, #12]
 800c580:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c584:	2bff      	cmp	r3, #255	@ 0xff
 800c586:	d103      	bne.n	800c590 <netif_add+0xcc>
        netif->num = 0;
 800c588:	68fb      	ldr	r3, [r7, #12]
 800c58a:	2200      	movs	r2, #0
 800c58c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 800c590:	2300      	movs	r3, #0
 800c592:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800c594:	4b2f      	ldr	r3, [pc, #188]	@ (800c654 <netif_add+0x190>)
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	617b      	str	r3, [r7, #20]
 800c59a:	e02b      	b.n	800c5f4 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800c59c:	697a      	ldr	r2, [r7, #20]
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	429a      	cmp	r2, r3
 800c5a2:	d106      	bne.n	800c5b2 <netif_add+0xee>
 800c5a4:	4b24      	ldr	r3, [pc, #144]	@ (800c638 <netif_add+0x174>)
 800c5a6:	f240 128b 	movw	r2, #395	@ 0x18b
 800c5aa:	492b      	ldr	r1, [pc, #172]	@ (800c658 <netif_add+0x194>)
 800c5ac:	4824      	ldr	r0, [pc, #144]	@ (800c640 <netif_add+0x17c>)
 800c5ae:	f00a fb3b 	bl	8016c28 <iprintf>
        num_netifs++;
 800c5b2:	693b      	ldr	r3, [r7, #16]
 800c5b4:	3301      	adds	r3, #1
 800c5b6:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800c5b8:	693b      	ldr	r3, [r7, #16]
 800c5ba:	2bff      	cmp	r3, #255	@ 0xff
 800c5bc:	dd06      	ble.n	800c5cc <netif_add+0x108>
 800c5be:	4b1e      	ldr	r3, [pc, #120]	@ (800c638 <netif_add+0x174>)
 800c5c0:	f240 128d 	movw	r2, #397	@ 0x18d
 800c5c4:	4925      	ldr	r1, [pc, #148]	@ (800c65c <netif_add+0x198>)
 800c5c6:	481e      	ldr	r0, [pc, #120]	@ (800c640 <netif_add+0x17c>)
 800c5c8:	f00a fb2e 	bl	8016c28 <iprintf>
        if (netif2->num == netif->num) {
 800c5cc:	697b      	ldr	r3, [r7, #20]
 800c5ce:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c5d8:	429a      	cmp	r2, r3
 800c5da:	d108      	bne.n	800c5ee <netif_add+0x12a>
          netif->num++;
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c5e2:	3301      	adds	r3, #1
 800c5e4:	b2da      	uxtb	r2, r3
 800c5e6:	68fb      	ldr	r3, [r7, #12]
 800c5e8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 800c5ec:	e005      	b.n	800c5fa <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800c5ee:	697b      	ldr	r3, [r7, #20]
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	617b      	str	r3, [r7, #20]
 800c5f4:	697b      	ldr	r3, [r7, #20]
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d1d0      	bne.n	800c59c <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800c5fa:	697b      	ldr	r3, [r7, #20]
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d1be      	bne.n	800c57e <netif_add+0xba>
  }
  if (netif->num == 254) {
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c606:	2bfe      	cmp	r3, #254	@ 0xfe
 800c608:	d103      	bne.n	800c612 <netif_add+0x14e>
    netif_num = 0;
 800c60a:	4b11      	ldr	r3, [pc, #68]	@ (800c650 <netif_add+0x18c>)
 800c60c:	2200      	movs	r2, #0
 800c60e:	701a      	strb	r2, [r3, #0]
 800c610:	e006      	b.n	800c620 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800c612:	68fb      	ldr	r3, [r7, #12]
 800c614:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c618:	3301      	adds	r3, #1
 800c61a:	b2da      	uxtb	r2, r3
 800c61c:	4b0c      	ldr	r3, [pc, #48]	@ (800c650 <netif_add+0x18c>)
 800c61e:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800c620:	4b0c      	ldr	r3, [pc, #48]	@ (800c654 <netif_add+0x190>)
 800c622:	681a      	ldr	r2, [r3, #0]
 800c624:	68fb      	ldr	r3, [r7, #12]
 800c626:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800c628:	4a0a      	ldr	r2, [pc, #40]	@ (800c654 <netif_add+0x190>)
 800c62a:	68fb      	ldr	r3, [r7, #12]
 800c62c:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800c62e:	68fb      	ldr	r3, [r7, #12]
}
 800c630:	4618      	mov	r0, r3
 800c632:	3718      	adds	r7, #24
 800c634:	46bd      	mov	sp, r7
 800c636:	bd80      	pop	{r7, pc}
 800c638:	08018bf4 	.word	0x08018bf4
 800c63c:	08018c88 	.word	0x08018c88
 800c640:	08018c44 	.word	0x08018c44
 800c644:	08018ca4 	.word	0x08018ca4
 800c648:	0801b394 	.word	0x0801b394
 800c64c:	0800ca6f 	.word	0x0800ca6f
 800c650:	2000f3e4 	.word	0x2000f3e4
 800c654:	2000f3dc 	.word	0x2000f3dc
 800c658:	08018cc8 	.word	0x08018cc8
 800c65c:	08018cdc 	.word	0x08018cdc

0800c660 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800c660:	b580      	push	{r7, lr}
 800c662:	b082      	sub	sp, #8
 800c664:	af00      	add	r7, sp, #0
 800c666:	6078      	str	r0, [r7, #4]
 800c668:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800c66a:	6839      	ldr	r1, [r7, #0]
 800c66c:	6878      	ldr	r0, [r7, #4]
 800c66e:	f002 fe7f 	bl	800f370 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800c672:	6839      	ldr	r1, [r7, #0]
 800c674:	6878      	ldr	r0, [r7, #4]
 800c676:	f007 fd2b 	bl	80140d0 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800c67a:	bf00      	nop
 800c67c:	3708      	adds	r7, #8
 800c67e:	46bd      	mov	sp, r7
 800c680:	bd80      	pop	{r7, pc}
	...

0800c684 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800c684:	b580      	push	{r7, lr}
 800c686:	b086      	sub	sp, #24
 800c688:	af00      	add	r7, sp, #0
 800c68a:	60f8      	str	r0, [r7, #12]
 800c68c:	60b9      	str	r1, [r7, #8]
 800c68e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800c690:	68bb      	ldr	r3, [r7, #8]
 800c692:	2b00      	cmp	r3, #0
 800c694:	d106      	bne.n	800c6a4 <netif_do_set_ipaddr+0x20>
 800c696:	4b1d      	ldr	r3, [pc, #116]	@ (800c70c <netif_do_set_ipaddr+0x88>)
 800c698:	f240 12cb 	movw	r2, #459	@ 0x1cb
 800c69c:	491c      	ldr	r1, [pc, #112]	@ (800c710 <netif_do_set_ipaddr+0x8c>)
 800c69e:	481d      	ldr	r0, [pc, #116]	@ (800c714 <netif_do_set_ipaddr+0x90>)
 800c6a0:	f00a fac2 	bl	8016c28 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d106      	bne.n	800c6b8 <netif_do_set_ipaddr+0x34>
 800c6aa:	4b18      	ldr	r3, [pc, #96]	@ (800c70c <netif_do_set_ipaddr+0x88>)
 800c6ac:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 800c6b0:	4917      	ldr	r1, [pc, #92]	@ (800c710 <netif_do_set_ipaddr+0x8c>)
 800c6b2:	4818      	ldr	r0, [pc, #96]	@ (800c714 <netif_do_set_ipaddr+0x90>)
 800c6b4:	f00a fab8 	bl	8016c28 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800c6b8:	68bb      	ldr	r3, [r7, #8]
 800c6ba:	681a      	ldr	r2, [r3, #0]
 800c6bc:	68fb      	ldr	r3, [r7, #12]
 800c6be:	3304      	adds	r3, #4
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	429a      	cmp	r2, r3
 800c6c4:	d01c      	beq.n	800c700 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800c6c6:	68bb      	ldr	r3, [r7, #8]
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	3304      	adds	r3, #4
 800c6d0:	681a      	ldr	r2, [r3, #0]
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800c6d6:	f107 0314 	add.w	r3, r7, #20
 800c6da:	4619      	mov	r1, r3
 800c6dc:	6878      	ldr	r0, [r7, #4]
 800c6de:	f7ff ffbf 	bl	800c660 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800c6e2:	68bb      	ldr	r3, [r7, #8]
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d002      	beq.n	800c6ee <netif_do_set_ipaddr+0x6a>
 800c6e8:	68bb      	ldr	r3, [r7, #8]
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	e000      	b.n	800c6f0 <netif_do_set_ipaddr+0x6c>
 800c6ee:	2300      	movs	r3, #0
 800c6f0:	68fa      	ldr	r2, [r7, #12]
 800c6f2:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800c6f4:	2101      	movs	r1, #1
 800c6f6:	68f8      	ldr	r0, [r7, #12]
 800c6f8:	f000 f8d2 	bl	800c8a0 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800c6fc:	2301      	movs	r3, #1
 800c6fe:	e000      	b.n	800c702 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800c700:	2300      	movs	r3, #0
}
 800c702:	4618      	mov	r0, r3
 800c704:	3718      	adds	r7, #24
 800c706:	46bd      	mov	sp, r7
 800c708:	bd80      	pop	{r7, pc}
 800c70a:	bf00      	nop
 800c70c:	08018bf4 	.word	0x08018bf4
 800c710:	08018d0c 	.word	0x08018d0c
 800c714:	08018c44 	.word	0x08018c44

0800c718 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800c718:	b480      	push	{r7}
 800c71a:	b085      	sub	sp, #20
 800c71c:	af00      	add	r7, sp, #0
 800c71e:	60f8      	str	r0, [r7, #12]
 800c720:	60b9      	str	r1, [r7, #8]
 800c722:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800c724:	68bb      	ldr	r3, [r7, #8]
 800c726:	681a      	ldr	r2, [r3, #0]
 800c728:	68fb      	ldr	r3, [r7, #12]
 800c72a:	3308      	adds	r3, #8
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	429a      	cmp	r2, r3
 800c730:	d00a      	beq.n	800c748 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800c732:	68bb      	ldr	r3, [r7, #8]
 800c734:	2b00      	cmp	r3, #0
 800c736:	d002      	beq.n	800c73e <netif_do_set_netmask+0x26>
 800c738:	68bb      	ldr	r3, [r7, #8]
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	e000      	b.n	800c740 <netif_do_set_netmask+0x28>
 800c73e:	2300      	movs	r3, #0
 800c740:	68fa      	ldr	r2, [r7, #12]
 800c742:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800c744:	2301      	movs	r3, #1
 800c746:	e000      	b.n	800c74a <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800c748:	2300      	movs	r3, #0
}
 800c74a:	4618      	mov	r0, r3
 800c74c:	3714      	adds	r7, #20
 800c74e:	46bd      	mov	sp, r7
 800c750:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c754:	4770      	bx	lr

0800c756 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800c756:	b480      	push	{r7}
 800c758:	b085      	sub	sp, #20
 800c75a:	af00      	add	r7, sp, #0
 800c75c:	60f8      	str	r0, [r7, #12]
 800c75e:	60b9      	str	r1, [r7, #8]
 800c760:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800c762:	68bb      	ldr	r3, [r7, #8]
 800c764:	681a      	ldr	r2, [r3, #0]
 800c766:	68fb      	ldr	r3, [r7, #12]
 800c768:	330c      	adds	r3, #12
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	429a      	cmp	r2, r3
 800c76e:	d00a      	beq.n	800c786 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800c770:	68bb      	ldr	r3, [r7, #8]
 800c772:	2b00      	cmp	r3, #0
 800c774:	d002      	beq.n	800c77c <netif_do_set_gw+0x26>
 800c776:	68bb      	ldr	r3, [r7, #8]
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	e000      	b.n	800c77e <netif_do_set_gw+0x28>
 800c77c:	2300      	movs	r3, #0
 800c77e:	68fa      	ldr	r2, [r7, #12]
 800c780:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800c782:	2301      	movs	r3, #1
 800c784:	e000      	b.n	800c788 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800c786:	2300      	movs	r3, #0
}
 800c788:	4618      	mov	r0, r3
 800c78a:	3714      	adds	r7, #20
 800c78c:	46bd      	mov	sp, r7
 800c78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c792:	4770      	bx	lr

0800c794 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800c794:	b580      	push	{r7, lr}
 800c796:	b088      	sub	sp, #32
 800c798:	af00      	add	r7, sp, #0
 800c79a:	60f8      	str	r0, [r7, #12]
 800c79c:	60b9      	str	r1, [r7, #8]
 800c79e:	607a      	str	r2, [r7, #4]
 800c7a0:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800c7a2:	2300      	movs	r3, #0
 800c7a4:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800c7a6:	2300      	movs	r3, #0
 800c7a8:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800c7aa:	68bb      	ldr	r3, [r7, #8]
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d101      	bne.n	800c7b4 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800c7b0:	4b1c      	ldr	r3, [pc, #112]	@ (800c824 <netif_set_addr+0x90>)
 800c7b2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d101      	bne.n	800c7be <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800c7ba:	4b1a      	ldr	r3, [pc, #104]	@ (800c824 <netif_set_addr+0x90>)
 800c7bc:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800c7be:	683b      	ldr	r3, [r7, #0]
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	d101      	bne.n	800c7c8 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800c7c4:	4b17      	ldr	r3, [pc, #92]	@ (800c824 <netif_set_addr+0x90>)
 800c7c6:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800c7c8:	68bb      	ldr	r3, [r7, #8]
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d003      	beq.n	800c7d6 <netif_set_addr+0x42>
 800c7ce:	68bb      	ldr	r3, [r7, #8]
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d101      	bne.n	800c7da <netif_set_addr+0x46>
 800c7d6:	2301      	movs	r3, #1
 800c7d8:	e000      	b.n	800c7dc <netif_set_addr+0x48>
 800c7da:	2300      	movs	r3, #0
 800c7dc:	617b      	str	r3, [r7, #20]
  if (remove) {
 800c7de:	697b      	ldr	r3, [r7, #20]
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	d006      	beq.n	800c7f2 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800c7e4:	f107 0310 	add.w	r3, r7, #16
 800c7e8:	461a      	mov	r2, r3
 800c7ea:	68b9      	ldr	r1, [r7, #8]
 800c7ec:	68f8      	ldr	r0, [r7, #12]
 800c7ee:	f7ff ff49 	bl	800c684 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800c7f2:	69fa      	ldr	r2, [r7, #28]
 800c7f4:	6879      	ldr	r1, [r7, #4]
 800c7f6:	68f8      	ldr	r0, [r7, #12]
 800c7f8:	f7ff ff8e 	bl	800c718 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800c7fc:	69ba      	ldr	r2, [r7, #24]
 800c7fe:	6839      	ldr	r1, [r7, #0]
 800c800:	68f8      	ldr	r0, [r7, #12]
 800c802:	f7ff ffa8 	bl	800c756 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800c806:	697b      	ldr	r3, [r7, #20]
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d106      	bne.n	800c81a <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800c80c:	f107 0310 	add.w	r3, r7, #16
 800c810:	461a      	mov	r2, r3
 800c812:	68b9      	ldr	r1, [r7, #8]
 800c814:	68f8      	ldr	r0, [r7, #12]
 800c816:	f7ff ff35 	bl	800c684 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800c81a:	bf00      	nop
 800c81c:	3720      	adds	r7, #32
 800c81e:	46bd      	mov	sp, r7
 800c820:	bd80      	pop	{r7, pc}
 800c822:	bf00      	nop
 800c824:	0801b394 	.word	0x0801b394

0800c828 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800c828:	b480      	push	{r7}
 800c82a:	b083      	sub	sp, #12
 800c82c:	af00      	add	r7, sp, #0
 800c82e:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800c830:	4a04      	ldr	r2, [pc, #16]	@ (800c844 <netif_set_default+0x1c>)
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800c836:	bf00      	nop
 800c838:	370c      	adds	r7, #12
 800c83a:	46bd      	mov	sp, r7
 800c83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c840:	4770      	bx	lr
 800c842:	bf00      	nop
 800c844:	2000f3e0 	.word	0x2000f3e0

0800c848 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800c848:	b580      	push	{r7, lr}
 800c84a:	b082      	sub	sp, #8
 800c84c:	af00      	add	r7, sp, #0
 800c84e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	2b00      	cmp	r3, #0
 800c854:	d107      	bne.n	800c866 <netif_set_up+0x1e>
 800c856:	4b0f      	ldr	r3, [pc, #60]	@ (800c894 <netif_set_up+0x4c>)
 800c858:	f44f 7254 	mov.w	r2, #848	@ 0x350
 800c85c:	490e      	ldr	r1, [pc, #56]	@ (800c898 <netif_set_up+0x50>)
 800c85e:	480f      	ldr	r0, [pc, #60]	@ (800c89c <netif_set_up+0x54>)
 800c860:	f00a f9e2 	bl	8016c28 <iprintf>
 800c864:	e013      	b.n	800c88e <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c86c:	f003 0301 	and.w	r3, r3, #1
 800c870:	2b00      	cmp	r3, #0
 800c872:	d10c      	bne.n	800c88e <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c87a:	f043 0301 	orr.w	r3, r3, #1
 800c87e:	b2da      	uxtb	r2, r3
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800c886:	2103      	movs	r1, #3
 800c888:	6878      	ldr	r0, [r7, #4]
 800c88a:	f000 f809 	bl	800c8a0 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800c88e:	3708      	adds	r7, #8
 800c890:	46bd      	mov	sp, r7
 800c892:	bd80      	pop	{r7, pc}
 800c894:	08018bf4 	.word	0x08018bf4
 800c898:	08018d7c 	.word	0x08018d7c
 800c89c:	08018c44 	.word	0x08018c44

0800c8a0 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800c8a0:	b580      	push	{r7, lr}
 800c8a2:	b082      	sub	sp, #8
 800c8a4:	af00      	add	r7, sp, #0
 800c8a6:	6078      	str	r0, [r7, #4]
 800c8a8:	460b      	mov	r3, r1
 800c8aa:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d106      	bne.n	800c8c0 <netif_issue_reports+0x20>
 800c8b2:	4b18      	ldr	r3, [pc, #96]	@ (800c914 <netif_issue_reports+0x74>)
 800c8b4:	f240 326d 	movw	r2, #877	@ 0x36d
 800c8b8:	4917      	ldr	r1, [pc, #92]	@ (800c918 <netif_issue_reports+0x78>)
 800c8ba:	4818      	ldr	r0, [pc, #96]	@ (800c91c <netif_issue_reports+0x7c>)
 800c8bc:	f00a f9b4 	bl	8016c28 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c8c6:	f003 0304 	and.w	r3, r3, #4
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d01e      	beq.n	800c90c <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c8d4:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d017      	beq.n	800c90c <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800c8dc:	78fb      	ldrb	r3, [r7, #3]
 800c8de:	f003 0301 	and.w	r3, r3, #1
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d013      	beq.n	800c90e <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	3304      	adds	r3, #4
 800c8ea:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	d00e      	beq.n	800c90e <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c8f6:	f003 0308 	and.w	r3, r3, #8
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d007      	beq.n	800c90e <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	3304      	adds	r3, #4
 800c902:	4619      	mov	r1, r3
 800c904:	6878      	ldr	r0, [r7, #4]
 800c906:	f008 fb4d 	bl	8014fa4 <etharp_request>
 800c90a:	e000      	b.n	800c90e <netif_issue_reports+0x6e>
    return;
 800c90c:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800c90e:	3708      	adds	r7, #8
 800c910:	46bd      	mov	sp, r7
 800c912:	bd80      	pop	{r7, pc}
 800c914:	08018bf4 	.word	0x08018bf4
 800c918:	08018d98 	.word	0x08018d98
 800c91c:	08018c44 	.word	0x08018c44

0800c920 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800c920:	b580      	push	{r7, lr}
 800c922:	b082      	sub	sp, #8
 800c924:	af00      	add	r7, sp, #0
 800c926:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d107      	bne.n	800c93e <netif_set_down+0x1e>
 800c92e:	4b12      	ldr	r3, [pc, #72]	@ (800c978 <netif_set_down+0x58>)
 800c930:	f240 329b 	movw	r2, #923	@ 0x39b
 800c934:	4911      	ldr	r1, [pc, #68]	@ (800c97c <netif_set_down+0x5c>)
 800c936:	4812      	ldr	r0, [pc, #72]	@ (800c980 <netif_set_down+0x60>)
 800c938:	f00a f976 	bl	8016c28 <iprintf>
 800c93c:	e019      	b.n	800c972 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c944:	f003 0301 	and.w	r3, r3, #1
 800c948:	2b00      	cmp	r3, #0
 800c94a:	d012      	beq.n	800c972 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c952:	f023 0301 	bic.w	r3, r3, #1
 800c956:	b2da      	uxtb	r2, r3
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c964:	f003 0308 	and.w	r3, r3, #8
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d002      	beq.n	800c972 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800c96c:	6878      	ldr	r0, [r7, #4]
 800c96e:	f007 fed7 	bl	8014720 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800c972:	3708      	adds	r7, #8
 800c974:	46bd      	mov	sp, r7
 800c976:	bd80      	pop	{r7, pc}
 800c978:	08018bf4 	.word	0x08018bf4
 800c97c:	08018dbc 	.word	0x08018dbc
 800c980:	08018c44 	.word	0x08018c44

0800c984 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800c984:	b580      	push	{r7, lr}
 800c986:	b082      	sub	sp, #8
 800c988:	af00      	add	r7, sp, #0
 800c98a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	2b00      	cmp	r3, #0
 800c990:	d107      	bne.n	800c9a2 <netif_set_link_up+0x1e>
 800c992:	4b13      	ldr	r3, [pc, #76]	@ (800c9e0 <netif_set_link_up+0x5c>)
 800c994:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 800c998:	4912      	ldr	r1, [pc, #72]	@ (800c9e4 <netif_set_link_up+0x60>)
 800c99a:	4813      	ldr	r0, [pc, #76]	@ (800c9e8 <netif_set_link_up+0x64>)
 800c99c:	f00a f944 	bl	8016c28 <iprintf>
 800c9a0:	e01b      	b.n	800c9da <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c9a8:	f003 0304 	and.w	r3, r3, #4
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d114      	bne.n	800c9da <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c9b6:	f043 0304 	orr.w	r3, r3, #4
 800c9ba:	b2da      	uxtb	r2, r3
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800c9c2:	2103      	movs	r1, #3
 800c9c4:	6878      	ldr	r0, [r7, #4]
 800c9c6:	f7ff ff6b 	bl	800c8a0 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	69db      	ldr	r3, [r3, #28]
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	d003      	beq.n	800c9da <netif_set_link_up+0x56>
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	69db      	ldr	r3, [r3, #28]
 800c9d6:	6878      	ldr	r0, [r7, #4]
 800c9d8:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800c9da:	3708      	adds	r7, #8
 800c9dc:	46bd      	mov	sp, r7
 800c9de:	bd80      	pop	{r7, pc}
 800c9e0:	08018bf4 	.word	0x08018bf4
 800c9e4:	08018ddc 	.word	0x08018ddc
 800c9e8:	08018c44 	.word	0x08018c44

0800c9ec <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800c9ec:	b580      	push	{r7, lr}
 800c9ee:	b082      	sub	sp, #8
 800c9f0:	af00      	add	r7, sp, #0
 800c9f2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	d107      	bne.n	800ca0a <netif_set_link_down+0x1e>
 800c9fa:	4b11      	ldr	r3, [pc, #68]	@ (800ca40 <netif_set_link_down+0x54>)
 800c9fc:	f240 4206 	movw	r2, #1030	@ 0x406
 800ca00:	4910      	ldr	r1, [pc, #64]	@ (800ca44 <netif_set_link_down+0x58>)
 800ca02:	4811      	ldr	r0, [pc, #68]	@ (800ca48 <netif_set_link_down+0x5c>)
 800ca04:	f00a f910 	bl	8016c28 <iprintf>
 800ca08:	e017      	b.n	800ca3a <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800ca10:	f003 0304 	and.w	r3, r3, #4
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d010      	beq.n	800ca3a <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800ca1e:	f023 0304 	bic.w	r3, r3, #4
 800ca22:	b2da      	uxtb	r2, r3
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	69db      	ldr	r3, [r3, #28]
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d003      	beq.n	800ca3a <netif_set_link_down+0x4e>
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	69db      	ldr	r3, [r3, #28]
 800ca36:	6878      	ldr	r0, [r7, #4]
 800ca38:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800ca3a:	3708      	adds	r7, #8
 800ca3c:	46bd      	mov	sp, r7
 800ca3e:	bd80      	pop	{r7, pc}
 800ca40:	08018bf4 	.word	0x08018bf4
 800ca44:	08018e00 	.word	0x08018e00
 800ca48:	08018c44 	.word	0x08018c44

0800ca4c <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800ca4c:	b480      	push	{r7}
 800ca4e:	b083      	sub	sp, #12
 800ca50:	af00      	add	r7, sp, #0
 800ca52:	6078      	str	r0, [r7, #4]
 800ca54:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d002      	beq.n	800ca62 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	683a      	ldr	r2, [r7, #0]
 800ca60:	61da      	str	r2, [r3, #28]
  }
}
 800ca62:	bf00      	nop
 800ca64:	370c      	adds	r7, #12
 800ca66:	46bd      	mov	sp, r7
 800ca68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca6c:	4770      	bx	lr

0800ca6e <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800ca6e:	b480      	push	{r7}
 800ca70:	b085      	sub	sp, #20
 800ca72:	af00      	add	r7, sp, #0
 800ca74:	60f8      	str	r0, [r7, #12]
 800ca76:	60b9      	str	r1, [r7, #8]
 800ca78:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800ca7a:	f06f 030b 	mvn.w	r3, #11
}
 800ca7e:	4618      	mov	r0, r3
 800ca80:	3714      	adds	r7, #20
 800ca82:	46bd      	mov	sp, r7
 800ca84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca88:	4770      	bx	lr
	...

0800ca8c <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800ca8c:	b480      	push	{r7}
 800ca8e:	b085      	sub	sp, #20
 800ca90:	af00      	add	r7, sp, #0
 800ca92:	4603      	mov	r3, r0
 800ca94:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800ca96:	79fb      	ldrb	r3, [r7, #7]
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d013      	beq.n	800cac4 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800ca9c:	4b0d      	ldr	r3, [pc, #52]	@ (800cad4 <netif_get_by_index+0x48>)
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	60fb      	str	r3, [r7, #12]
 800caa2:	e00c      	b.n	800cabe <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800caa4:	68fb      	ldr	r3, [r7, #12]
 800caa6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800caaa:	3301      	adds	r3, #1
 800caac:	b2db      	uxtb	r3, r3
 800caae:	79fa      	ldrb	r2, [r7, #7]
 800cab0:	429a      	cmp	r2, r3
 800cab2:	d101      	bne.n	800cab8 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800cab4:	68fb      	ldr	r3, [r7, #12]
 800cab6:	e006      	b.n	800cac6 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800cab8:	68fb      	ldr	r3, [r7, #12]
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	60fb      	str	r3, [r7, #12]
 800cabe:	68fb      	ldr	r3, [r7, #12]
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d1ef      	bne.n	800caa4 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800cac4:	2300      	movs	r3, #0
}
 800cac6:	4618      	mov	r0, r3
 800cac8:	3714      	adds	r7, #20
 800caca:	46bd      	mov	sp, r7
 800cacc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cad0:	4770      	bx	lr
 800cad2:	bf00      	nop
 800cad4:	2000f3dc 	.word	0x2000f3dc

0800cad8 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800cad8:	b580      	push	{r7, lr}
 800cada:	b082      	sub	sp, #8
 800cadc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800cade:	f009 ff85 	bl	80169ec <sys_arch_protect>
 800cae2:	6038      	str	r0, [r7, #0]
 800cae4:	4b0d      	ldr	r3, [pc, #52]	@ (800cb1c <pbuf_free_ooseq+0x44>)
 800cae6:	2200      	movs	r2, #0
 800cae8:	701a      	strb	r2, [r3, #0]
 800caea:	6838      	ldr	r0, [r7, #0]
 800caec:	f009 ff8c 	bl	8016a08 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800caf0:	4b0b      	ldr	r3, [pc, #44]	@ (800cb20 <pbuf_free_ooseq+0x48>)
 800caf2:	681b      	ldr	r3, [r3, #0]
 800caf4:	607b      	str	r3, [r7, #4]
 800caf6:	e00a      	b.n	800cb0e <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d003      	beq.n	800cb08 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800cb00:	6878      	ldr	r0, [r7, #4]
 800cb02:	f002 fc73 	bl	800f3ec <tcp_free_ooseq>
      return;
 800cb06:	e005      	b.n	800cb14 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	68db      	ldr	r3, [r3, #12]
 800cb0c:	607b      	str	r3, [r7, #4]
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	d1f1      	bne.n	800caf8 <pbuf_free_ooseq+0x20>
    }
  }
}
 800cb14:	3708      	adds	r7, #8
 800cb16:	46bd      	mov	sp, r7
 800cb18:	bd80      	pop	{r7, pc}
 800cb1a:	bf00      	nop
 800cb1c:	2000f3e5 	.word	0x2000f3e5
 800cb20:	2000f3f4 	.word	0x2000f3f4

0800cb24 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800cb24:	b580      	push	{r7, lr}
 800cb26:	b082      	sub	sp, #8
 800cb28:	af00      	add	r7, sp, #0
 800cb2a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800cb2c:	f7ff ffd4 	bl	800cad8 <pbuf_free_ooseq>
}
 800cb30:	bf00      	nop
 800cb32:	3708      	adds	r7, #8
 800cb34:	46bd      	mov	sp, r7
 800cb36:	bd80      	pop	{r7, pc}

0800cb38 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800cb38:	b580      	push	{r7, lr}
 800cb3a:	b082      	sub	sp, #8
 800cb3c:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800cb3e:	f009 ff55 	bl	80169ec <sys_arch_protect>
 800cb42:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800cb44:	4b0f      	ldr	r3, [pc, #60]	@ (800cb84 <pbuf_pool_is_empty+0x4c>)
 800cb46:	781b      	ldrb	r3, [r3, #0]
 800cb48:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800cb4a:	4b0e      	ldr	r3, [pc, #56]	@ (800cb84 <pbuf_pool_is_empty+0x4c>)
 800cb4c:	2201      	movs	r2, #1
 800cb4e:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800cb50:	6878      	ldr	r0, [r7, #4]
 800cb52:	f009 ff59 	bl	8016a08 <sys_arch_unprotect>

  if (!queued) {
 800cb56:	78fb      	ldrb	r3, [r7, #3]
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	d10f      	bne.n	800cb7c <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800cb5c:	2100      	movs	r1, #0
 800cb5e:	480a      	ldr	r0, [pc, #40]	@ (800cb88 <pbuf_pool_is_empty+0x50>)
 800cb60:	f7fe fe90 	bl	800b884 <tcpip_try_callback>
 800cb64:	4603      	mov	r3, r0
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	d008      	beq.n	800cb7c <pbuf_pool_is_empty+0x44>
 800cb6a:	f009 ff3f 	bl	80169ec <sys_arch_protect>
 800cb6e:	6078      	str	r0, [r7, #4]
 800cb70:	4b04      	ldr	r3, [pc, #16]	@ (800cb84 <pbuf_pool_is_empty+0x4c>)
 800cb72:	2200      	movs	r2, #0
 800cb74:	701a      	strb	r2, [r3, #0]
 800cb76:	6878      	ldr	r0, [r7, #4]
 800cb78:	f009 ff46 	bl	8016a08 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800cb7c:	bf00      	nop
 800cb7e:	3708      	adds	r7, #8
 800cb80:	46bd      	mov	sp, r7
 800cb82:	bd80      	pop	{r7, pc}
 800cb84:	2000f3e5 	.word	0x2000f3e5
 800cb88:	0800cb25 	.word	0x0800cb25

0800cb8c <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800cb8c:	b480      	push	{r7}
 800cb8e:	b085      	sub	sp, #20
 800cb90:	af00      	add	r7, sp, #0
 800cb92:	60f8      	str	r0, [r7, #12]
 800cb94:	60b9      	str	r1, [r7, #8]
 800cb96:	4611      	mov	r1, r2
 800cb98:	461a      	mov	r2, r3
 800cb9a:	460b      	mov	r3, r1
 800cb9c:	80fb      	strh	r3, [r7, #6]
 800cb9e:	4613      	mov	r3, r2
 800cba0:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800cba2:	68fb      	ldr	r3, [r7, #12]
 800cba4:	2200      	movs	r2, #0
 800cba6:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800cba8:	68fb      	ldr	r3, [r7, #12]
 800cbaa:	68ba      	ldr	r2, [r7, #8]
 800cbac:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800cbae:	68fb      	ldr	r3, [r7, #12]
 800cbb0:	88fa      	ldrh	r2, [r7, #6]
 800cbb2:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800cbb4:	68fb      	ldr	r3, [r7, #12]
 800cbb6:	88ba      	ldrh	r2, [r7, #4]
 800cbb8:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800cbba:	8b3b      	ldrh	r3, [r7, #24]
 800cbbc:	b2da      	uxtb	r2, r3
 800cbbe:	68fb      	ldr	r3, [r7, #12]
 800cbc0:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800cbc2:	68fb      	ldr	r3, [r7, #12]
 800cbc4:	7f3a      	ldrb	r2, [r7, #28]
 800cbc6:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800cbc8:	68fb      	ldr	r3, [r7, #12]
 800cbca:	2201      	movs	r2, #1
 800cbcc:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	2200      	movs	r2, #0
 800cbd2:	73da      	strb	r2, [r3, #15]
}
 800cbd4:	bf00      	nop
 800cbd6:	3714      	adds	r7, #20
 800cbd8:	46bd      	mov	sp, r7
 800cbda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbde:	4770      	bx	lr

0800cbe0 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800cbe0:	b580      	push	{r7, lr}
 800cbe2:	b08c      	sub	sp, #48	@ 0x30
 800cbe4:	af02      	add	r7, sp, #8
 800cbe6:	4603      	mov	r3, r0
 800cbe8:	71fb      	strb	r3, [r7, #7]
 800cbea:	460b      	mov	r3, r1
 800cbec:	80bb      	strh	r3, [r7, #4]
 800cbee:	4613      	mov	r3, r2
 800cbf0:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800cbf2:	79fb      	ldrb	r3, [r7, #7]
 800cbf4:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800cbf6:	887b      	ldrh	r3, [r7, #2]
 800cbf8:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800cbfc:	d07f      	beq.n	800ccfe <pbuf_alloc+0x11e>
 800cbfe:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800cc02:	f300 80c8 	bgt.w	800cd96 <pbuf_alloc+0x1b6>
 800cc06:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800cc0a:	d010      	beq.n	800cc2e <pbuf_alloc+0x4e>
 800cc0c:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800cc10:	f300 80c1 	bgt.w	800cd96 <pbuf_alloc+0x1b6>
 800cc14:	2b01      	cmp	r3, #1
 800cc16:	d002      	beq.n	800cc1e <pbuf_alloc+0x3e>
 800cc18:	2b41      	cmp	r3, #65	@ 0x41
 800cc1a:	f040 80bc 	bne.w	800cd96 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800cc1e:	887a      	ldrh	r2, [r7, #2]
 800cc20:	88bb      	ldrh	r3, [r7, #4]
 800cc22:	4619      	mov	r1, r3
 800cc24:	2000      	movs	r0, #0
 800cc26:	f000 f8d1 	bl	800cdcc <pbuf_alloc_reference>
 800cc2a:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 800cc2c:	e0bd      	b.n	800cdaa <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800cc2e:	2300      	movs	r3, #0
 800cc30:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 800cc32:	2300      	movs	r3, #0
 800cc34:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800cc36:	88bb      	ldrh	r3, [r7, #4]
 800cc38:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800cc3a:	200c      	movs	r0, #12
 800cc3c:	f7ff fb9a 	bl	800c374 <memp_malloc>
 800cc40:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800cc42:	693b      	ldr	r3, [r7, #16]
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d109      	bne.n	800cc5c <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800cc48:	f7ff ff76 	bl	800cb38 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800cc4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc4e:	2b00      	cmp	r3, #0
 800cc50:	d002      	beq.n	800cc58 <pbuf_alloc+0x78>
            pbuf_free(p);
 800cc52:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800cc54:	f000 faa8 	bl	800d1a8 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800cc58:	2300      	movs	r3, #0
 800cc5a:	e0a7      	b.n	800cdac <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800cc5c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800cc5e:	3303      	adds	r3, #3
 800cc60:	b29b      	uxth	r3, r3
 800cc62:	f023 0303 	bic.w	r3, r3, #3
 800cc66:	b29b      	uxth	r3, r3
 800cc68:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 800cc6c:	b29b      	uxth	r3, r3
 800cc6e:	8b7a      	ldrh	r2, [r7, #26]
 800cc70:	4293      	cmp	r3, r2
 800cc72:	bf28      	it	cs
 800cc74:	4613      	movcs	r3, r2
 800cc76:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800cc78:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800cc7a:	3310      	adds	r3, #16
 800cc7c:	693a      	ldr	r2, [r7, #16]
 800cc7e:	4413      	add	r3, r2
 800cc80:	3303      	adds	r3, #3
 800cc82:	f023 0303 	bic.w	r3, r3, #3
 800cc86:	4618      	mov	r0, r3
 800cc88:	89f9      	ldrh	r1, [r7, #14]
 800cc8a:	8b7a      	ldrh	r2, [r7, #26]
 800cc8c:	2300      	movs	r3, #0
 800cc8e:	9301      	str	r3, [sp, #4]
 800cc90:	887b      	ldrh	r3, [r7, #2]
 800cc92:	9300      	str	r3, [sp, #0]
 800cc94:	460b      	mov	r3, r1
 800cc96:	4601      	mov	r1, r0
 800cc98:	6938      	ldr	r0, [r7, #16]
 800cc9a:	f7ff ff77 	bl	800cb8c <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800cc9e:	693b      	ldr	r3, [r7, #16]
 800cca0:	685b      	ldr	r3, [r3, #4]
 800cca2:	f003 0303 	and.w	r3, r3, #3
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	d006      	beq.n	800ccb8 <pbuf_alloc+0xd8>
 800ccaa:	4b42      	ldr	r3, [pc, #264]	@ (800cdb4 <pbuf_alloc+0x1d4>)
 800ccac:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800ccb0:	4941      	ldr	r1, [pc, #260]	@ (800cdb8 <pbuf_alloc+0x1d8>)
 800ccb2:	4842      	ldr	r0, [pc, #264]	@ (800cdbc <pbuf_alloc+0x1dc>)
 800ccb4:	f009 ffb8 	bl	8016c28 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800ccb8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800ccba:	3303      	adds	r3, #3
 800ccbc:	f023 0303 	bic.w	r3, r3, #3
 800ccc0:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 800ccc4:	d106      	bne.n	800ccd4 <pbuf_alloc+0xf4>
 800ccc6:	4b3b      	ldr	r3, [pc, #236]	@ (800cdb4 <pbuf_alloc+0x1d4>)
 800ccc8:	f44f 7281 	mov.w	r2, #258	@ 0x102
 800cccc:	493c      	ldr	r1, [pc, #240]	@ (800cdc0 <pbuf_alloc+0x1e0>)
 800ccce:	483b      	ldr	r0, [pc, #236]	@ (800cdbc <pbuf_alloc+0x1dc>)
 800ccd0:	f009 ffaa 	bl	8016c28 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800ccd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d102      	bne.n	800cce0 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800ccda:	693b      	ldr	r3, [r7, #16]
 800ccdc:	627b      	str	r3, [r7, #36]	@ 0x24
 800ccde:	e002      	b.n	800cce6 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800cce0:	69fb      	ldr	r3, [r7, #28]
 800cce2:	693a      	ldr	r2, [r7, #16]
 800cce4:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800cce6:	693b      	ldr	r3, [r7, #16]
 800cce8:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800ccea:	8b7a      	ldrh	r2, [r7, #26]
 800ccec:	89fb      	ldrh	r3, [r7, #14]
 800ccee:	1ad3      	subs	r3, r2, r3
 800ccf0:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800ccf2:	2300      	movs	r3, #0
 800ccf4:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 800ccf6:	8b7b      	ldrh	r3, [r7, #26]
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	d19e      	bne.n	800cc3a <pbuf_alloc+0x5a>
      break;
 800ccfc:	e055      	b.n	800cdaa <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800ccfe:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800cd00:	3303      	adds	r3, #3
 800cd02:	b29b      	uxth	r3, r3
 800cd04:	f023 0303 	bic.w	r3, r3, #3
 800cd08:	b29a      	uxth	r2, r3
 800cd0a:	88bb      	ldrh	r3, [r7, #4]
 800cd0c:	3303      	adds	r3, #3
 800cd0e:	b29b      	uxth	r3, r3
 800cd10:	f023 0303 	bic.w	r3, r3, #3
 800cd14:	b29b      	uxth	r3, r3
 800cd16:	4413      	add	r3, r2
 800cd18:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800cd1a:	8b3b      	ldrh	r3, [r7, #24]
 800cd1c:	3310      	adds	r3, #16
 800cd1e:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800cd20:	8b3a      	ldrh	r2, [r7, #24]
 800cd22:	88bb      	ldrh	r3, [r7, #4]
 800cd24:	3303      	adds	r3, #3
 800cd26:	f023 0303 	bic.w	r3, r3, #3
 800cd2a:	429a      	cmp	r2, r3
 800cd2c:	d306      	bcc.n	800cd3c <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800cd2e:	8afa      	ldrh	r2, [r7, #22]
 800cd30:	88bb      	ldrh	r3, [r7, #4]
 800cd32:	3303      	adds	r3, #3
 800cd34:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800cd38:	429a      	cmp	r2, r3
 800cd3a:	d201      	bcs.n	800cd40 <pbuf_alloc+0x160>
        return NULL;
 800cd3c:	2300      	movs	r3, #0
 800cd3e:	e035      	b.n	800cdac <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800cd40:	8afb      	ldrh	r3, [r7, #22]
 800cd42:	4618      	mov	r0, r3
 800cd44:	f7ff f972 	bl	800c02c <mem_malloc>
 800cd48:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 800cd4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d101      	bne.n	800cd54 <pbuf_alloc+0x174>
        return NULL;
 800cd50:	2300      	movs	r3, #0
 800cd52:	e02b      	b.n	800cdac <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800cd54:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800cd56:	3310      	adds	r3, #16
 800cd58:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cd5a:	4413      	add	r3, r2
 800cd5c:	3303      	adds	r3, #3
 800cd5e:	f023 0303 	bic.w	r3, r3, #3
 800cd62:	4618      	mov	r0, r3
 800cd64:	88b9      	ldrh	r1, [r7, #4]
 800cd66:	88ba      	ldrh	r2, [r7, #4]
 800cd68:	2300      	movs	r3, #0
 800cd6a:	9301      	str	r3, [sp, #4]
 800cd6c:	887b      	ldrh	r3, [r7, #2]
 800cd6e:	9300      	str	r3, [sp, #0]
 800cd70:	460b      	mov	r3, r1
 800cd72:	4601      	mov	r1, r0
 800cd74:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800cd76:	f7ff ff09 	bl	800cb8c <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800cd7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd7c:	685b      	ldr	r3, [r3, #4]
 800cd7e:	f003 0303 	and.w	r3, r3, #3
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	d010      	beq.n	800cda8 <pbuf_alloc+0x1c8>
 800cd86:	4b0b      	ldr	r3, [pc, #44]	@ (800cdb4 <pbuf_alloc+0x1d4>)
 800cd88:	f44f 7291 	mov.w	r2, #290	@ 0x122
 800cd8c:	490d      	ldr	r1, [pc, #52]	@ (800cdc4 <pbuf_alloc+0x1e4>)
 800cd8e:	480b      	ldr	r0, [pc, #44]	@ (800cdbc <pbuf_alloc+0x1dc>)
 800cd90:	f009 ff4a 	bl	8016c28 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800cd94:	e008      	b.n	800cda8 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800cd96:	4b07      	ldr	r3, [pc, #28]	@ (800cdb4 <pbuf_alloc+0x1d4>)
 800cd98:	f240 1227 	movw	r2, #295	@ 0x127
 800cd9c:	490a      	ldr	r1, [pc, #40]	@ (800cdc8 <pbuf_alloc+0x1e8>)
 800cd9e:	4807      	ldr	r0, [pc, #28]	@ (800cdbc <pbuf_alloc+0x1dc>)
 800cda0:	f009 ff42 	bl	8016c28 <iprintf>
      return NULL;
 800cda4:	2300      	movs	r3, #0
 800cda6:	e001      	b.n	800cdac <pbuf_alloc+0x1cc>
      break;
 800cda8:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800cdaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800cdac:	4618      	mov	r0, r3
 800cdae:	3728      	adds	r7, #40	@ 0x28
 800cdb0:	46bd      	mov	sp, r7
 800cdb2:	bd80      	pop	{r7, pc}
 800cdb4:	08018e24 	.word	0x08018e24
 800cdb8:	08018e54 	.word	0x08018e54
 800cdbc:	08018e84 	.word	0x08018e84
 800cdc0:	08018eac 	.word	0x08018eac
 800cdc4:	08018ee0 	.word	0x08018ee0
 800cdc8:	08018f0c 	.word	0x08018f0c

0800cdcc <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800cdcc:	b580      	push	{r7, lr}
 800cdce:	b086      	sub	sp, #24
 800cdd0:	af02      	add	r7, sp, #8
 800cdd2:	6078      	str	r0, [r7, #4]
 800cdd4:	460b      	mov	r3, r1
 800cdd6:	807b      	strh	r3, [r7, #2]
 800cdd8:	4613      	mov	r3, r2
 800cdda:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800cddc:	883b      	ldrh	r3, [r7, #0]
 800cdde:	2b41      	cmp	r3, #65	@ 0x41
 800cde0:	d009      	beq.n	800cdf6 <pbuf_alloc_reference+0x2a>
 800cde2:	883b      	ldrh	r3, [r7, #0]
 800cde4:	2b01      	cmp	r3, #1
 800cde6:	d006      	beq.n	800cdf6 <pbuf_alloc_reference+0x2a>
 800cde8:	4b0f      	ldr	r3, [pc, #60]	@ (800ce28 <pbuf_alloc_reference+0x5c>)
 800cdea:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 800cdee:	490f      	ldr	r1, [pc, #60]	@ (800ce2c <pbuf_alloc_reference+0x60>)
 800cdf0:	480f      	ldr	r0, [pc, #60]	@ (800ce30 <pbuf_alloc_reference+0x64>)
 800cdf2:	f009 ff19 	bl	8016c28 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800cdf6:	200b      	movs	r0, #11
 800cdf8:	f7ff fabc 	bl	800c374 <memp_malloc>
 800cdfc:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800cdfe:	68fb      	ldr	r3, [r7, #12]
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	d101      	bne.n	800ce08 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800ce04:	2300      	movs	r3, #0
 800ce06:	e00b      	b.n	800ce20 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800ce08:	8879      	ldrh	r1, [r7, #2]
 800ce0a:	887a      	ldrh	r2, [r7, #2]
 800ce0c:	2300      	movs	r3, #0
 800ce0e:	9301      	str	r3, [sp, #4]
 800ce10:	883b      	ldrh	r3, [r7, #0]
 800ce12:	9300      	str	r3, [sp, #0]
 800ce14:	460b      	mov	r3, r1
 800ce16:	6879      	ldr	r1, [r7, #4]
 800ce18:	68f8      	ldr	r0, [r7, #12]
 800ce1a:	f7ff feb7 	bl	800cb8c <pbuf_init_alloced_pbuf>
  return p;
 800ce1e:	68fb      	ldr	r3, [r7, #12]
}
 800ce20:	4618      	mov	r0, r3
 800ce22:	3710      	adds	r7, #16
 800ce24:	46bd      	mov	sp, r7
 800ce26:	bd80      	pop	{r7, pc}
 800ce28:	08018e24 	.word	0x08018e24
 800ce2c:	08018f28 	.word	0x08018f28
 800ce30:	08018e84 	.word	0x08018e84

0800ce34 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800ce34:	b580      	push	{r7, lr}
 800ce36:	b088      	sub	sp, #32
 800ce38:	af02      	add	r7, sp, #8
 800ce3a:	607b      	str	r3, [r7, #4]
 800ce3c:	4603      	mov	r3, r0
 800ce3e:	73fb      	strb	r3, [r7, #15]
 800ce40:	460b      	mov	r3, r1
 800ce42:	81bb      	strh	r3, [r7, #12]
 800ce44:	4613      	mov	r3, r2
 800ce46:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800ce48:	7bfb      	ldrb	r3, [r7, #15]
 800ce4a:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800ce4c:	8a7b      	ldrh	r3, [r7, #18]
 800ce4e:	3303      	adds	r3, #3
 800ce50:	f023 0203 	bic.w	r2, r3, #3
 800ce54:	89bb      	ldrh	r3, [r7, #12]
 800ce56:	441a      	add	r2, r3
 800ce58:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ce5a:	429a      	cmp	r2, r3
 800ce5c:	d901      	bls.n	800ce62 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800ce5e:	2300      	movs	r3, #0
 800ce60:	e018      	b.n	800ce94 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800ce62:	6a3b      	ldr	r3, [r7, #32]
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d007      	beq.n	800ce78 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800ce68:	8a7b      	ldrh	r3, [r7, #18]
 800ce6a:	3303      	adds	r3, #3
 800ce6c:	f023 0303 	bic.w	r3, r3, #3
 800ce70:	6a3a      	ldr	r2, [r7, #32]
 800ce72:	4413      	add	r3, r2
 800ce74:	617b      	str	r3, [r7, #20]
 800ce76:	e001      	b.n	800ce7c <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800ce78:	2300      	movs	r3, #0
 800ce7a:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800ce7c:	6878      	ldr	r0, [r7, #4]
 800ce7e:	89b9      	ldrh	r1, [r7, #12]
 800ce80:	89ba      	ldrh	r2, [r7, #12]
 800ce82:	2302      	movs	r3, #2
 800ce84:	9301      	str	r3, [sp, #4]
 800ce86:	897b      	ldrh	r3, [r7, #10]
 800ce88:	9300      	str	r3, [sp, #0]
 800ce8a:	460b      	mov	r3, r1
 800ce8c:	6979      	ldr	r1, [r7, #20]
 800ce8e:	f7ff fe7d 	bl	800cb8c <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800ce92:	687b      	ldr	r3, [r7, #4]
}
 800ce94:	4618      	mov	r0, r3
 800ce96:	3718      	adds	r7, #24
 800ce98:	46bd      	mov	sp, r7
 800ce9a:	bd80      	pop	{r7, pc}

0800ce9c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800ce9c:	b580      	push	{r7, lr}
 800ce9e:	b084      	sub	sp, #16
 800cea0:	af00      	add	r7, sp, #0
 800cea2:	6078      	str	r0, [r7, #4]
 800cea4:	460b      	mov	r3, r1
 800cea6:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d106      	bne.n	800cebc <pbuf_realloc+0x20>
 800ceae:	4b3a      	ldr	r3, [pc, #232]	@ (800cf98 <pbuf_realloc+0xfc>)
 800ceb0:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 800ceb4:	4939      	ldr	r1, [pc, #228]	@ (800cf9c <pbuf_realloc+0x100>)
 800ceb6:	483a      	ldr	r0, [pc, #232]	@ (800cfa0 <pbuf_realloc+0x104>)
 800ceb8:	f009 feb6 	bl	8016c28 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	891b      	ldrh	r3, [r3, #8]
 800cec0:	887a      	ldrh	r2, [r7, #2]
 800cec2:	429a      	cmp	r2, r3
 800cec4:	d263      	bcs.n	800cf8e <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	891a      	ldrh	r2, [r3, #8]
 800ceca:	887b      	ldrh	r3, [r7, #2]
 800cecc:	1ad3      	subs	r3, r2, r3
 800cece:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800ced0:	887b      	ldrh	r3, [r7, #2]
 800ced2:	817b      	strh	r3, [r7, #10]
  q = p;
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800ced8:	e018      	b.n	800cf0c <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800ceda:	68fb      	ldr	r3, [r7, #12]
 800cedc:	895b      	ldrh	r3, [r3, #10]
 800cede:	897a      	ldrh	r2, [r7, #10]
 800cee0:	1ad3      	subs	r3, r2, r3
 800cee2:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800cee4:	68fb      	ldr	r3, [r7, #12]
 800cee6:	891a      	ldrh	r2, [r3, #8]
 800cee8:	893b      	ldrh	r3, [r7, #8]
 800ceea:	1ad3      	subs	r3, r2, r3
 800ceec:	b29a      	uxth	r2, r3
 800ceee:	68fb      	ldr	r3, [r7, #12]
 800cef0:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800cef2:	68fb      	ldr	r3, [r7, #12]
 800cef4:	681b      	ldr	r3, [r3, #0]
 800cef6:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800cef8:	68fb      	ldr	r3, [r7, #12]
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d106      	bne.n	800cf0c <pbuf_realloc+0x70>
 800cefe:	4b26      	ldr	r3, [pc, #152]	@ (800cf98 <pbuf_realloc+0xfc>)
 800cf00:	f240 12af 	movw	r2, #431	@ 0x1af
 800cf04:	4927      	ldr	r1, [pc, #156]	@ (800cfa4 <pbuf_realloc+0x108>)
 800cf06:	4826      	ldr	r0, [pc, #152]	@ (800cfa0 <pbuf_realloc+0x104>)
 800cf08:	f009 fe8e 	bl	8016c28 <iprintf>
  while (rem_len > q->len) {
 800cf0c:	68fb      	ldr	r3, [r7, #12]
 800cf0e:	895b      	ldrh	r3, [r3, #10]
 800cf10:	897a      	ldrh	r2, [r7, #10]
 800cf12:	429a      	cmp	r2, r3
 800cf14:	d8e1      	bhi.n	800ceda <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800cf16:	68fb      	ldr	r3, [r7, #12]
 800cf18:	7b1b      	ldrb	r3, [r3, #12]
 800cf1a:	f003 030f 	and.w	r3, r3, #15
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	d121      	bne.n	800cf66 <pbuf_realloc+0xca>
 800cf22:	68fb      	ldr	r3, [r7, #12]
 800cf24:	895b      	ldrh	r3, [r3, #10]
 800cf26:	897a      	ldrh	r2, [r7, #10]
 800cf28:	429a      	cmp	r2, r3
 800cf2a:	d01c      	beq.n	800cf66 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800cf2c:	68fb      	ldr	r3, [r7, #12]
 800cf2e:	7b5b      	ldrb	r3, [r3, #13]
 800cf30:	f003 0302 	and.w	r3, r3, #2
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	d116      	bne.n	800cf66 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800cf38:	68fb      	ldr	r3, [r7, #12]
 800cf3a:	685a      	ldr	r2, [r3, #4]
 800cf3c:	68fb      	ldr	r3, [r7, #12]
 800cf3e:	1ad3      	subs	r3, r2, r3
 800cf40:	b29a      	uxth	r2, r3
 800cf42:	897b      	ldrh	r3, [r7, #10]
 800cf44:	4413      	add	r3, r2
 800cf46:	b29b      	uxth	r3, r3
 800cf48:	4619      	mov	r1, r3
 800cf4a:	68f8      	ldr	r0, [r7, #12]
 800cf4c:	f7fe ff64 	bl	800be18 <mem_trim>
 800cf50:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800cf52:	68fb      	ldr	r3, [r7, #12]
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d106      	bne.n	800cf66 <pbuf_realloc+0xca>
 800cf58:	4b0f      	ldr	r3, [pc, #60]	@ (800cf98 <pbuf_realloc+0xfc>)
 800cf5a:	f240 12bd 	movw	r2, #445	@ 0x1bd
 800cf5e:	4912      	ldr	r1, [pc, #72]	@ (800cfa8 <pbuf_realloc+0x10c>)
 800cf60:	480f      	ldr	r0, [pc, #60]	@ (800cfa0 <pbuf_realloc+0x104>)
 800cf62:	f009 fe61 	bl	8016c28 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800cf66:	68fb      	ldr	r3, [r7, #12]
 800cf68:	897a      	ldrh	r2, [r7, #10]
 800cf6a:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800cf6c:	68fb      	ldr	r3, [r7, #12]
 800cf6e:	895a      	ldrh	r2, [r3, #10]
 800cf70:	68fb      	ldr	r3, [r7, #12]
 800cf72:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800cf74:	68fb      	ldr	r3, [r7, #12]
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d004      	beq.n	800cf86 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800cf7c:	68fb      	ldr	r3, [r7, #12]
 800cf7e:	681b      	ldr	r3, [r3, #0]
 800cf80:	4618      	mov	r0, r3
 800cf82:	f000 f911 	bl	800d1a8 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800cf86:	68fb      	ldr	r3, [r7, #12]
 800cf88:	2200      	movs	r2, #0
 800cf8a:	601a      	str	r2, [r3, #0]
 800cf8c:	e000      	b.n	800cf90 <pbuf_realloc+0xf4>
    return;
 800cf8e:	bf00      	nop

}
 800cf90:	3710      	adds	r7, #16
 800cf92:	46bd      	mov	sp, r7
 800cf94:	bd80      	pop	{r7, pc}
 800cf96:	bf00      	nop
 800cf98:	08018e24 	.word	0x08018e24
 800cf9c:	08018f3c 	.word	0x08018f3c
 800cfa0:	08018e84 	.word	0x08018e84
 800cfa4:	08018f54 	.word	0x08018f54
 800cfa8:	08018f6c 	.word	0x08018f6c

0800cfac <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800cfac:	b580      	push	{r7, lr}
 800cfae:	b086      	sub	sp, #24
 800cfb0:	af00      	add	r7, sp, #0
 800cfb2:	60f8      	str	r0, [r7, #12]
 800cfb4:	60b9      	str	r1, [r7, #8]
 800cfb6:	4613      	mov	r3, r2
 800cfb8:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800cfba:	68fb      	ldr	r3, [r7, #12]
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d106      	bne.n	800cfce <pbuf_add_header_impl+0x22>
 800cfc0:	4b2b      	ldr	r3, [pc, #172]	@ (800d070 <pbuf_add_header_impl+0xc4>)
 800cfc2:	f240 12df 	movw	r2, #479	@ 0x1df
 800cfc6:	492b      	ldr	r1, [pc, #172]	@ (800d074 <pbuf_add_header_impl+0xc8>)
 800cfc8:	482b      	ldr	r0, [pc, #172]	@ (800d078 <pbuf_add_header_impl+0xcc>)
 800cfca:	f009 fe2d 	bl	8016c28 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800cfce:	68fb      	ldr	r3, [r7, #12]
 800cfd0:	2b00      	cmp	r3, #0
 800cfd2:	d003      	beq.n	800cfdc <pbuf_add_header_impl+0x30>
 800cfd4:	68bb      	ldr	r3, [r7, #8]
 800cfd6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cfda:	d301      	bcc.n	800cfe0 <pbuf_add_header_impl+0x34>
    return 1;
 800cfdc:	2301      	movs	r3, #1
 800cfde:	e043      	b.n	800d068 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800cfe0:	68bb      	ldr	r3, [r7, #8]
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	d101      	bne.n	800cfea <pbuf_add_header_impl+0x3e>
    return 0;
 800cfe6:	2300      	movs	r3, #0
 800cfe8:	e03e      	b.n	800d068 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800cfea:	68bb      	ldr	r3, [r7, #8]
 800cfec:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800cfee:	68fb      	ldr	r3, [r7, #12]
 800cff0:	891a      	ldrh	r2, [r3, #8]
 800cff2:	8a7b      	ldrh	r3, [r7, #18]
 800cff4:	4413      	add	r3, r2
 800cff6:	b29b      	uxth	r3, r3
 800cff8:	8a7a      	ldrh	r2, [r7, #18]
 800cffa:	429a      	cmp	r2, r3
 800cffc:	d901      	bls.n	800d002 <pbuf_add_header_impl+0x56>
    return 1;
 800cffe:	2301      	movs	r3, #1
 800d000:	e032      	b.n	800d068 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800d002:	68fb      	ldr	r3, [r7, #12]
 800d004:	7b1b      	ldrb	r3, [r3, #12]
 800d006:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800d008:	8a3b      	ldrh	r3, [r7, #16]
 800d00a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d00e:	2b00      	cmp	r3, #0
 800d010:	d00c      	beq.n	800d02c <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800d012:	68fb      	ldr	r3, [r7, #12]
 800d014:	685a      	ldr	r2, [r3, #4]
 800d016:	68bb      	ldr	r3, [r7, #8]
 800d018:	425b      	negs	r3, r3
 800d01a:	4413      	add	r3, r2
 800d01c:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800d01e:	68fb      	ldr	r3, [r7, #12]
 800d020:	3310      	adds	r3, #16
 800d022:	697a      	ldr	r2, [r7, #20]
 800d024:	429a      	cmp	r2, r3
 800d026:	d20d      	bcs.n	800d044 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800d028:	2301      	movs	r3, #1
 800d02a:	e01d      	b.n	800d068 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800d02c:	79fb      	ldrb	r3, [r7, #7]
 800d02e:	2b00      	cmp	r3, #0
 800d030:	d006      	beq.n	800d040 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800d032:	68fb      	ldr	r3, [r7, #12]
 800d034:	685a      	ldr	r2, [r3, #4]
 800d036:	68bb      	ldr	r3, [r7, #8]
 800d038:	425b      	negs	r3, r3
 800d03a:	4413      	add	r3, r2
 800d03c:	617b      	str	r3, [r7, #20]
 800d03e:	e001      	b.n	800d044 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800d040:	2301      	movs	r3, #1
 800d042:	e011      	b.n	800d068 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	697a      	ldr	r2, [r7, #20]
 800d048:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800d04a:	68fb      	ldr	r3, [r7, #12]
 800d04c:	895a      	ldrh	r2, [r3, #10]
 800d04e:	8a7b      	ldrh	r3, [r7, #18]
 800d050:	4413      	add	r3, r2
 800d052:	b29a      	uxth	r2, r3
 800d054:	68fb      	ldr	r3, [r7, #12]
 800d056:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800d058:	68fb      	ldr	r3, [r7, #12]
 800d05a:	891a      	ldrh	r2, [r3, #8]
 800d05c:	8a7b      	ldrh	r3, [r7, #18]
 800d05e:	4413      	add	r3, r2
 800d060:	b29a      	uxth	r2, r3
 800d062:	68fb      	ldr	r3, [r7, #12]
 800d064:	811a      	strh	r2, [r3, #8]


  return 0;
 800d066:	2300      	movs	r3, #0
}
 800d068:	4618      	mov	r0, r3
 800d06a:	3718      	adds	r7, #24
 800d06c:	46bd      	mov	sp, r7
 800d06e:	bd80      	pop	{r7, pc}
 800d070:	08018e24 	.word	0x08018e24
 800d074:	08018f88 	.word	0x08018f88
 800d078:	08018e84 	.word	0x08018e84

0800d07c <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800d07c:	b580      	push	{r7, lr}
 800d07e:	b082      	sub	sp, #8
 800d080:	af00      	add	r7, sp, #0
 800d082:	6078      	str	r0, [r7, #4]
 800d084:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800d086:	2200      	movs	r2, #0
 800d088:	6839      	ldr	r1, [r7, #0]
 800d08a:	6878      	ldr	r0, [r7, #4]
 800d08c:	f7ff ff8e 	bl	800cfac <pbuf_add_header_impl>
 800d090:	4603      	mov	r3, r0
}
 800d092:	4618      	mov	r0, r3
 800d094:	3708      	adds	r7, #8
 800d096:	46bd      	mov	sp, r7
 800d098:	bd80      	pop	{r7, pc}
	...

0800d09c <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800d09c:	b580      	push	{r7, lr}
 800d09e:	b084      	sub	sp, #16
 800d0a0:	af00      	add	r7, sp, #0
 800d0a2:	6078      	str	r0, [r7, #4]
 800d0a4:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	d106      	bne.n	800d0ba <pbuf_remove_header+0x1e>
 800d0ac:	4b20      	ldr	r3, [pc, #128]	@ (800d130 <pbuf_remove_header+0x94>)
 800d0ae:	f240 224b 	movw	r2, #587	@ 0x24b
 800d0b2:	4920      	ldr	r1, [pc, #128]	@ (800d134 <pbuf_remove_header+0x98>)
 800d0b4:	4820      	ldr	r0, [pc, #128]	@ (800d138 <pbuf_remove_header+0x9c>)
 800d0b6:	f009 fdb7 	bl	8016c28 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d003      	beq.n	800d0c8 <pbuf_remove_header+0x2c>
 800d0c0:	683b      	ldr	r3, [r7, #0]
 800d0c2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d0c6:	d301      	bcc.n	800d0cc <pbuf_remove_header+0x30>
    return 1;
 800d0c8:	2301      	movs	r3, #1
 800d0ca:	e02c      	b.n	800d126 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800d0cc:	683b      	ldr	r3, [r7, #0]
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	d101      	bne.n	800d0d6 <pbuf_remove_header+0x3a>
    return 0;
 800d0d2:	2300      	movs	r3, #0
 800d0d4:	e027      	b.n	800d126 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800d0d6:	683b      	ldr	r3, [r7, #0]
 800d0d8:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	895b      	ldrh	r3, [r3, #10]
 800d0de:	89fa      	ldrh	r2, [r7, #14]
 800d0e0:	429a      	cmp	r2, r3
 800d0e2:	d908      	bls.n	800d0f6 <pbuf_remove_header+0x5a>
 800d0e4:	4b12      	ldr	r3, [pc, #72]	@ (800d130 <pbuf_remove_header+0x94>)
 800d0e6:	f240 2255 	movw	r2, #597	@ 0x255
 800d0ea:	4914      	ldr	r1, [pc, #80]	@ (800d13c <pbuf_remove_header+0xa0>)
 800d0ec:	4812      	ldr	r0, [pc, #72]	@ (800d138 <pbuf_remove_header+0x9c>)
 800d0ee:	f009 fd9b 	bl	8016c28 <iprintf>
 800d0f2:	2301      	movs	r3, #1
 800d0f4:	e017      	b.n	800d126 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	685b      	ldr	r3, [r3, #4]
 800d0fa:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	685a      	ldr	r2, [r3, #4]
 800d100:	683b      	ldr	r3, [r7, #0]
 800d102:	441a      	add	r2, r3
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	895a      	ldrh	r2, [r3, #10]
 800d10c:	89fb      	ldrh	r3, [r7, #14]
 800d10e:	1ad3      	subs	r3, r2, r3
 800d110:	b29a      	uxth	r2, r3
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	891a      	ldrh	r2, [r3, #8]
 800d11a:	89fb      	ldrh	r3, [r7, #14]
 800d11c:	1ad3      	subs	r3, r2, r3
 800d11e:	b29a      	uxth	r2, r3
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800d124:	2300      	movs	r3, #0
}
 800d126:	4618      	mov	r0, r3
 800d128:	3710      	adds	r7, #16
 800d12a:	46bd      	mov	sp, r7
 800d12c:	bd80      	pop	{r7, pc}
 800d12e:	bf00      	nop
 800d130:	08018e24 	.word	0x08018e24
 800d134:	08018f88 	.word	0x08018f88
 800d138:	08018e84 	.word	0x08018e84
 800d13c:	08018f94 	.word	0x08018f94

0800d140 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800d140:	b580      	push	{r7, lr}
 800d142:	b082      	sub	sp, #8
 800d144:	af00      	add	r7, sp, #0
 800d146:	6078      	str	r0, [r7, #4]
 800d148:	460b      	mov	r3, r1
 800d14a:	807b      	strh	r3, [r7, #2]
 800d14c:	4613      	mov	r3, r2
 800d14e:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800d150:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d154:	2b00      	cmp	r3, #0
 800d156:	da08      	bge.n	800d16a <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800d158:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d15c:	425b      	negs	r3, r3
 800d15e:	4619      	mov	r1, r3
 800d160:	6878      	ldr	r0, [r7, #4]
 800d162:	f7ff ff9b 	bl	800d09c <pbuf_remove_header>
 800d166:	4603      	mov	r3, r0
 800d168:	e007      	b.n	800d17a <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800d16a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d16e:	787a      	ldrb	r2, [r7, #1]
 800d170:	4619      	mov	r1, r3
 800d172:	6878      	ldr	r0, [r7, #4]
 800d174:	f7ff ff1a 	bl	800cfac <pbuf_add_header_impl>
 800d178:	4603      	mov	r3, r0
  }
}
 800d17a:	4618      	mov	r0, r3
 800d17c:	3708      	adds	r7, #8
 800d17e:	46bd      	mov	sp, r7
 800d180:	bd80      	pop	{r7, pc}

0800d182 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800d182:	b580      	push	{r7, lr}
 800d184:	b082      	sub	sp, #8
 800d186:	af00      	add	r7, sp, #0
 800d188:	6078      	str	r0, [r7, #4]
 800d18a:	460b      	mov	r3, r1
 800d18c:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800d18e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d192:	2201      	movs	r2, #1
 800d194:	4619      	mov	r1, r3
 800d196:	6878      	ldr	r0, [r7, #4]
 800d198:	f7ff ffd2 	bl	800d140 <pbuf_header_impl>
 800d19c:	4603      	mov	r3, r0
}
 800d19e:	4618      	mov	r0, r3
 800d1a0:	3708      	adds	r7, #8
 800d1a2:	46bd      	mov	sp, r7
 800d1a4:	bd80      	pop	{r7, pc}
	...

0800d1a8 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800d1a8:	b580      	push	{r7, lr}
 800d1aa:	b088      	sub	sp, #32
 800d1ac:	af00      	add	r7, sp, #0
 800d1ae:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	d10b      	bne.n	800d1ce <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	d106      	bne.n	800d1ca <pbuf_free+0x22>
 800d1bc:	4b3b      	ldr	r3, [pc, #236]	@ (800d2ac <pbuf_free+0x104>)
 800d1be:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 800d1c2:	493b      	ldr	r1, [pc, #236]	@ (800d2b0 <pbuf_free+0x108>)
 800d1c4:	483b      	ldr	r0, [pc, #236]	@ (800d2b4 <pbuf_free+0x10c>)
 800d1c6:	f009 fd2f 	bl	8016c28 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800d1ca:	2300      	movs	r3, #0
 800d1cc:	e069      	b.n	800d2a2 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800d1ce:	2300      	movs	r3, #0
 800d1d0:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800d1d2:	e062      	b.n	800d29a <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800d1d4:	f009 fc0a 	bl	80169ec <sys_arch_protect>
 800d1d8:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	7b9b      	ldrb	r3, [r3, #14]
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	d106      	bne.n	800d1f0 <pbuf_free+0x48>
 800d1e2:	4b32      	ldr	r3, [pc, #200]	@ (800d2ac <pbuf_free+0x104>)
 800d1e4:	f240 22f1 	movw	r2, #753	@ 0x2f1
 800d1e8:	4933      	ldr	r1, [pc, #204]	@ (800d2b8 <pbuf_free+0x110>)
 800d1ea:	4832      	ldr	r0, [pc, #200]	@ (800d2b4 <pbuf_free+0x10c>)
 800d1ec:	f009 fd1c 	bl	8016c28 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	7b9b      	ldrb	r3, [r3, #14]
 800d1f4:	3b01      	subs	r3, #1
 800d1f6:	b2da      	uxtb	r2, r3
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	739a      	strb	r2, [r3, #14]
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	7b9b      	ldrb	r3, [r3, #14]
 800d200:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800d202:	69b8      	ldr	r0, [r7, #24]
 800d204:	f009 fc00 	bl	8016a08 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800d208:	7dfb      	ldrb	r3, [r7, #23]
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	d143      	bne.n	800d296 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	681b      	ldr	r3, [r3, #0]
 800d212:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	7b1b      	ldrb	r3, [r3, #12]
 800d218:	f003 030f 	and.w	r3, r3, #15
 800d21c:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	7b5b      	ldrb	r3, [r3, #13]
 800d222:	f003 0302 	and.w	r3, r3, #2
 800d226:	2b00      	cmp	r3, #0
 800d228:	d011      	beq.n	800d24e <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800d22e:	68bb      	ldr	r3, [r7, #8]
 800d230:	691b      	ldr	r3, [r3, #16]
 800d232:	2b00      	cmp	r3, #0
 800d234:	d106      	bne.n	800d244 <pbuf_free+0x9c>
 800d236:	4b1d      	ldr	r3, [pc, #116]	@ (800d2ac <pbuf_free+0x104>)
 800d238:	f240 22ff 	movw	r2, #767	@ 0x2ff
 800d23c:	491f      	ldr	r1, [pc, #124]	@ (800d2bc <pbuf_free+0x114>)
 800d23e:	481d      	ldr	r0, [pc, #116]	@ (800d2b4 <pbuf_free+0x10c>)
 800d240:	f009 fcf2 	bl	8016c28 <iprintf>
        pc->custom_free_function(p);
 800d244:	68bb      	ldr	r3, [r7, #8]
 800d246:	691b      	ldr	r3, [r3, #16]
 800d248:	6878      	ldr	r0, [r7, #4]
 800d24a:	4798      	blx	r3
 800d24c:	e01d      	b.n	800d28a <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800d24e:	7bfb      	ldrb	r3, [r7, #15]
 800d250:	2b02      	cmp	r3, #2
 800d252:	d104      	bne.n	800d25e <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800d254:	6879      	ldr	r1, [r7, #4]
 800d256:	200c      	movs	r0, #12
 800d258:	f7ff f902 	bl	800c460 <memp_free>
 800d25c:	e015      	b.n	800d28a <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800d25e:	7bfb      	ldrb	r3, [r7, #15]
 800d260:	2b01      	cmp	r3, #1
 800d262:	d104      	bne.n	800d26e <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800d264:	6879      	ldr	r1, [r7, #4]
 800d266:	200b      	movs	r0, #11
 800d268:	f7ff f8fa 	bl	800c460 <memp_free>
 800d26c:	e00d      	b.n	800d28a <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800d26e:	7bfb      	ldrb	r3, [r7, #15]
 800d270:	2b00      	cmp	r3, #0
 800d272:	d103      	bne.n	800d27c <pbuf_free+0xd4>
          mem_free(p);
 800d274:	6878      	ldr	r0, [r7, #4]
 800d276:	f7fe fd3f 	bl	800bcf8 <mem_free>
 800d27a:	e006      	b.n	800d28a <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800d27c:	4b0b      	ldr	r3, [pc, #44]	@ (800d2ac <pbuf_free+0x104>)
 800d27e:	f240 320f 	movw	r2, #783	@ 0x30f
 800d282:	490f      	ldr	r1, [pc, #60]	@ (800d2c0 <pbuf_free+0x118>)
 800d284:	480b      	ldr	r0, [pc, #44]	@ (800d2b4 <pbuf_free+0x10c>)
 800d286:	f009 fccf 	bl	8016c28 <iprintf>
        }
      }
      count++;
 800d28a:	7ffb      	ldrb	r3, [r7, #31]
 800d28c:	3301      	adds	r3, #1
 800d28e:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800d290:	693b      	ldr	r3, [r7, #16]
 800d292:	607b      	str	r3, [r7, #4]
 800d294:	e001      	b.n	800d29a <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800d296:	2300      	movs	r3, #0
 800d298:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	d199      	bne.n	800d1d4 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800d2a0:	7ffb      	ldrb	r3, [r7, #31]
}
 800d2a2:	4618      	mov	r0, r3
 800d2a4:	3720      	adds	r7, #32
 800d2a6:	46bd      	mov	sp, r7
 800d2a8:	bd80      	pop	{r7, pc}
 800d2aa:	bf00      	nop
 800d2ac:	08018e24 	.word	0x08018e24
 800d2b0:	08018f88 	.word	0x08018f88
 800d2b4:	08018e84 	.word	0x08018e84
 800d2b8:	08018fb4 	.word	0x08018fb4
 800d2bc:	08018fcc 	.word	0x08018fcc
 800d2c0:	08018ff0 	.word	0x08018ff0

0800d2c4 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800d2c4:	b480      	push	{r7}
 800d2c6:	b085      	sub	sp, #20
 800d2c8:	af00      	add	r7, sp, #0
 800d2ca:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800d2cc:	2300      	movs	r3, #0
 800d2ce:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800d2d0:	e005      	b.n	800d2de <pbuf_clen+0x1a>
    ++len;
 800d2d2:	89fb      	ldrh	r3, [r7, #14]
 800d2d4:	3301      	adds	r3, #1
 800d2d6:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	681b      	ldr	r3, [r3, #0]
 800d2dc:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	d1f6      	bne.n	800d2d2 <pbuf_clen+0xe>
  }
  return len;
 800d2e4:	89fb      	ldrh	r3, [r7, #14]
}
 800d2e6:	4618      	mov	r0, r3
 800d2e8:	3714      	adds	r7, #20
 800d2ea:	46bd      	mov	sp, r7
 800d2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2f0:	4770      	bx	lr
	...

0800d2f4 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800d2f4:	b580      	push	{r7, lr}
 800d2f6:	b084      	sub	sp, #16
 800d2f8:	af00      	add	r7, sp, #0
 800d2fa:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	d016      	beq.n	800d330 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800d302:	f009 fb73 	bl	80169ec <sys_arch_protect>
 800d306:	60f8      	str	r0, [r7, #12]
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	7b9b      	ldrb	r3, [r3, #14]
 800d30c:	3301      	adds	r3, #1
 800d30e:	b2da      	uxtb	r2, r3
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	739a      	strb	r2, [r3, #14]
 800d314:	68f8      	ldr	r0, [r7, #12]
 800d316:	f009 fb77 	bl	8016a08 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	7b9b      	ldrb	r3, [r3, #14]
 800d31e:	2b00      	cmp	r3, #0
 800d320:	d106      	bne.n	800d330 <pbuf_ref+0x3c>
 800d322:	4b05      	ldr	r3, [pc, #20]	@ (800d338 <pbuf_ref+0x44>)
 800d324:	f240 3242 	movw	r2, #834	@ 0x342
 800d328:	4904      	ldr	r1, [pc, #16]	@ (800d33c <pbuf_ref+0x48>)
 800d32a:	4805      	ldr	r0, [pc, #20]	@ (800d340 <pbuf_ref+0x4c>)
 800d32c:	f009 fc7c 	bl	8016c28 <iprintf>
  }
}
 800d330:	bf00      	nop
 800d332:	3710      	adds	r7, #16
 800d334:	46bd      	mov	sp, r7
 800d336:	bd80      	pop	{r7, pc}
 800d338:	08018e24 	.word	0x08018e24
 800d33c:	08019004 	.word	0x08019004
 800d340:	08018e84 	.word	0x08018e84

0800d344 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800d344:	b580      	push	{r7, lr}
 800d346:	b084      	sub	sp, #16
 800d348:	af00      	add	r7, sp, #0
 800d34a:	6078      	str	r0, [r7, #4]
 800d34c:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	2b00      	cmp	r3, #0
 800d352:	d002      	beq.n	800d35a <pbuf_cat+0x16>
 800d354:	683b      	ldr	r3, [r7, #0]
 800d356:	2b00      	cmp	r3, #0
 800d358:	d107      	bne.n	800d36a <pbuf_cat+0x26>
 800d35a:	4b20      	ldr	r3, [pc, #128]	@ (800d3dc <pbuf_cat+0x98>)
 800d35c:	f240 3259 	movw	r2, #857	@ 0x359
 800d360:	491f      	ldr	r1, [pc, #124]	@ (800d3e0 <pbuf_cat+0x9c>)
 800d362:	4820      	ldr	r0, [pc, #128]	@ (800d3e4 <pbuf_cat+0xa0>)
 800d364:	f009 fc60 	bl	8016c28 <iprintf>
 800d368:	e034      	b.n	800d3d4 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	60fb      	str	r3, [r7, #12]
 800d36e:	e00a      	b.n	800d386 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800d370:	68fb      	ldr	r3, [r7, #12]
 800d372:	891a      	ldrh	r2, [r3, #8]
 800d374:	683b      	ldr	r3, [r7, #0]
 800d376:	891b      	ldrh	r3, [r3, #8]
 800d378:	4413      	add	r3, r2
 800d37a:	b29a      	uxth	r2, r3
 800d37c:	68fb      	ldr	r3, [r7, #12]
 800d37e:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800d380:	68fb      	ldr	r3, [r7, #12]
 800d382:	681b      	ldr	r3, [r3, #0]
 800d384:	60fb      	str	r3, [r7, #12]
 800d386:	68fb      	ldr	r3, [r7, #12]
 800d388:	681b      	ldr	r3, [r3, #0]
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	d1f0      	bne.n	800d370 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800d38e:	68fb      	ldr	r3, [r7, #12]
 800d390:	891a      	ldrh	r2, [r3, #8]
 800d392:	68fb      	ldr	r3, [r7, #12]
 800d394:	895b      	ldrh	r3, [r3, #10]
 800d396:	429a      	cmp	r2, r3
 800d398:	d006      	beq.n	800d3a8 <pbuf_cat+0x64>
 800d39a:	4b10      	ldr	r3, [pc, #64]	@ (800d3dc <pbuf_cat+0x98>)
 800d39c:	f240 3262 	movw	r2, #866	@ 0x362
 800d3a0:	4911      	ldr	r1, [pc, #68]	@ (800d3e8 <pbuf_cat+0xa4>)
 800d3a2:	4810      	ldr	r0, [pc, #64]	@ (800d3e4 <pbuf_cat+0xa0>)
 800d3a4:	f009 fc40 	bl	8016c28 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800d3a8:	68fb      	ldr	r3, [r7, #12]
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	d006      	beq.n	800d3be <pbuf_cat+0x7a>
 800d3b0:	4b0a      	ldr	r3, [pc, #40]	@ (800d3dc <pbuf_cat+0x98>)
 800d3b2:	f240 3263 	movw	r2, #867	@ 0x363
 800d3b6:	490d      	ldr	r1, [pc, #52]	@ (800d3ec <pbuf_cat+0xa8>)
 800d3b8:	480a      	ldr	r0, [pc, #40]	@ (800d3e4 <pbuf_cat+0xa0>)
 800d3ba:	f009 fc35 	bl	8016c28 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800d3be:	68fb      	ldr	r3, [r7, #12]
 800d3c0:	891a      	ldrh	r2, [r3, #8]
 800d3c2:	683b      	ldr	r3, [r7, #0]
 800d3c4:	891b      	ldrh	r3, [r3, #8]
 800d3c6:	4413      	add	r3, r2
 800d3c8:	b29a      	uxth	r2, r3
 800d3ca:	68fb      	ldr	r3, [r7, #12]
 800d3cc:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800d3ce:	68fb      	ldr	r3, [r7, #12]
 800d3d0:	683a      	ldr	r2, [r7, #0]
 800d3d2:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800d3d4:	3710      	adds	r7, #16
 800d3d6:	46bd      	mov	sp, r7
 800d3d8:	bd80      	pop	{r7, pc}
 800d3da:	bf00      	nop
 800d3dc:	08018e24 	.word	0x08018e24
 800d3e0:	08019018 	.word	0x08019018
 800d3e4:	08018e84 	.word	0x08018e84
 800d3e8:	08019050 	.word	0x08019050
 800d3ec:	08019080 	.word	0x08019080

0800d3f0 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800d3f0:	b580      	push	{r7, lr}
 800d3f2:	b086      	sub	sp, #24
 800d3f4:	af00      	add	r7, sp, #0
 800d3f6:	6078      	str	r0, [r7, #4]
 800d3f8:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800d3fa:	2300      	movs	r3, #0
 800d3fc:	617b      	str	r3, [r7, #20]
 800d3fe:	2300      	movs	r3, #0
 800d400:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	2b00      	cmp	r3, #0
 800d406:	d008      	beq.n	800d41a <pbuf_copy+0x2a>
 800d408:	683b      	ldr	r3, [r7, #0]
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	d005      	beq.n	800d41a <pbuf_copy+0x2a>
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	891a      	ldrh	r2, [r3, #8]
 800d412:	683b      	ldr	r3, [r7, #0]
 800d414:	891b      	ldrh	r3, [r3, #8]
 800d416:	429a      	cmp	r2, r3
 800d418:	d209      	bcs.n	800d42e <pbuf_copy+0x3e>
 800d41a:	4b57      	ldr	r3, [pc, #348]	@ (800d578 <pbuf_copy+0x188>)
 800d41c:	f240 32c9 	movw	r2, #969	@ 0x3c9
 800d420:	4956      	ldr	r1, [pc, #344]	@ (800d57c <pbuf_copy+0x18c>)
 800d422:	4857      	ldr	r0, [pc, #348]	@ (800d580 <pbuf_copy+0x190>)
 800d424:	f009 fc00 	bl	8016c28 <iprintf>
 800d428:	f06f 030f 	mvn.w	r3, #15
 800d42c:	e09f      	b.n	800d56e <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	895b      	ldrh	r3, [r3, #10]
 800d432:	461a      	mov	r2, r3
 800d434:	697b      	ldr	r3, [r7, #20]
 800d436:	1ad2      	subs	r2, r2, r3
 800d438:	683b      	ldr	r3, [r7, #0]
 800d43a:	895b      	ldrh	r3, [r3, #10]
 800d43c:	4619      	mov	r1, r3
 800d43e:	693b      	ldr	r3, [r7, #16]
 800d440:	1acb      	subs	r3, r1, r3
 800d442:	429a      	cmp	r2, r3
 800d444:	d306      	bcc.n	800d454 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800d446:	683b      	ldr	r3, [r7, #0]
 800d448:	895b      	ldrh	r3, [r3, #10]
 800d44a:	461a      	mov	r2, r3
 800d44c:	693b      	ldr	r3, [r7, #16]
 800d44e:	1ad3      	subs	r3, r2, r3
 800d450:	60fb      	str	r3, [r7, #12]
 800d452:	e005      	b.n	800d460 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	895b      	ldrh	r3, [r3, #10]
 800d458:	461a      	mov	r2, r3
 800d45a:	697b      	ldr	r3, [r7, #20]
 800d45c:	1ad3      	subs	r3, r2, r3
 800d45e:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	685a      	ldr	r2, [r3, #4]
 800d464:	697b      	ldr	r3, [r7, #20]
 800d466:	18d0      	adds	r0, r2, r3
 800d468:	683b      	ldr	r3, [r7, #0]
 800d46a:	685a      	ldr	r2, [r3, #4]
 800d46c:	693b      	ldr	r3, [r7, #16]
 800d46e:	4413      	add	r3, r2
 800d470:	68fa      	ldr	r2, [r7, #12]
 800d472:	4619      	mov	r1, r3
 800d474:	f009 fd09 	bl	8016e8a <memcpy>
    offset_to += len;
 800d478:	697a      	ldr	r2, [r7, #20]
 800d47a:	68fb      	ldr	r3, [r7, #12]
 800d47c:	4413      	add	r3, r2
 800d47e:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800d480:	693a      	ldr	r2, [r7, #16]
 800d482:	68fb      	ldr	r3, [r7, #12]
 800d484:	4413      	add	r3, r2
 800d486:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	895b      	ldrh	r3, [r3, #10]
 800d48c:	461a      	mov	r2, r3
 800d48e:	697b      	ldr	r3, [r7, #20]
 800d490:	4293      	cmp	r3, r2
 800d492:	d906      	bls.n	800d4a2 <pbuf_copy+0xb2>
 800d494:	4b38      	ldr	r3, [pc, #224]	@ (800d578 <pbuf_copy+0x188>)
 800d496:	f240 32d9 	movw	r2, #985	@ 0x3d9
 800d49a:	493a      	ldr	r1, [pc, #232]	@ (800d584 <pbuf_copy+0x194>)
 800d49c:	4838      	ldr	r0, [pc, #224]	@ (800d580 <pbuf_copy+0x190>)
 800d49e:	f009 fbc3 	bl	8016c28 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800d4a2:	683b      	ldr	r3, [r7, #0]
 800d4a4:	895b      	ldrh	r3, [r3, #10]
 800d4a6:	461a      	mov	r2, r3
 800d4a8:	693b      	ldr	r3, [r7, #16]
 800d4aa:	4293      	cmp	r3, r2
 800d4ac:	d906      	bls.n	800d4bc <pbuf_copy+0xcc>
 800d4ae:	4b32      	ldr	r3, [pc, #200]	@ (800d578 <pbuf_copy+0x188>)
 800d4b0:	f240 32da 	movw	r2, #986	@ 0x3da
 800d4b4:	4934      	ldr	r1, [pc, #208]	@ (800d588 <pbuf_copy+0x198>)
 800d4b6:	4832      	ldr	r0, [pc, #200]	@ (800d580 <pbuf_copy+0x190>)
 800d4b8:	f009 fbb6 	bl	8016c28 <iprintf>
    if (offset_from >= p_from->len) {
 800d4bc:	683b      	ldr	r3, [r7, #0]
 800d4be:	895b      	ldrh	r3, [r3, #10]
 800d4c0:	461a      	mov	r2, r3
 800d4c2:	693b      	ldr	r3, [r7, #16]
 800d4c4:	4293      	cmp	r3, r2
 800d4c6:	d304      	bcc.n	800d4d2 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800d4c8:	2300      	movs	r3, #0
 800d4ca:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800d4cc:	683b      	ldr	r3, [r7, #0]
 800d4ce:	681b      	ldr	r3, [r3, #0]
 800d4d0:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	895b      	ldrh	r3, [r3, #10]
 800d4d6:	461a      	mov	r2, r3
 800d4d8:	697b      	ldr	r3, [r7, #20]
 800d4da:	4293      	cmp	r3, r2
 800d4dc:	d114      	bne.n	800d508 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800d4de:	2300      	movs	r3, #0
 800d4e0:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	681b      	ldr	r3, [r3, #0]
 800d4e6:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	d10c      	bne.n	800d508 <pbuf_copy+0x118>
 800d4ee:	683b      	ldr	r3, [r7, #0]
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	d009      	beq.n	800d508 <pbuf_copy+0x118>
 800d4f4:	4b20      	ldr	r3, [pc, #128]	@ (800d578 <pbuf_copy+0x188>)
 800d4f6:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 800d4fa:	4924      	ldr	r1, [pc, #144]	@ (800d58c <pbuf_copy+0x19c>)
 800d4fc:	4820      	ldr	r0, [pc, #128]	@ (800d580 <pbuf_copy+0x190>)
 800d4fe:	f009 fb93 	bl	8016c28 <iprintf>
 800d502:	f06f 030f 	mvn.w	r3, #15
 800d506:	e032      	b.n	800d56e <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800d508:	683b      	ldr	r3, [r7, #0]
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	d013      	beq.n	800d536 <pbuf_copy+0x146>
 800d50e:	683b      	ldr	r3, [r7, #0]
 800d510:	895a      	ldrh	r2, [r3, #10]
 800d512:	683b      	ldr	r3, [r7, #0]
 800d514:	891b      	ldrh	r3, [r3, #8]
 800d516:	429a      	cmp	r2, r3
 800d518:	d10d      	bne.n	800d536 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800d51a:	683b      	ldr	r3, [r7, #0]
 800d51c:	681b      	ldr	r3, [r3, #0]
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d009      	beq.n	800d536 <pbuf_copy+0x146>
 800d522:	4b15      	ldr	r3, [pc, #84]	@ (800d578 <pbuf_copy+0x188>)
 800d524:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 800d528:	4919      	ldr	r1, [pc, #100]	@ (800d590 <pbuf_copy+0x1a0>)
 800d52a:	4815      	ldr	r0, [pc, #84]	@ (800d580 <pbuf_copy+0x190>)
 800d52c:	f009 fb7c 	bl	8016c28 <iprintf>
 800d530:	f06f 0305 	mvn.w	r3, #5
 800d534:	e01b      	b.n	800d56e <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	2b00      	cmp	r3, #0
 800d53a:	d013      	beq.n	800d564 <pbuf_copy+0x174>
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	895a      	ldrh	r2, [r3, #10]
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	891b      	ldrh	r3, [r3, #8]
 800d544:	429a      	cmp	r2, r3
 800d546:	d10d      	bne.n	800d564 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	681b      	ldr	r3, [r3, #0]
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	d009      	beq.n	800d564 <pbuf_copy+0x174>
 800d550:	4b09      	ldr	r3, [pc, #36]	@ (800d578 <pbuf_copy+0x188>)
 800d552:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 800d556:	490e      	ldr	r1, [pc, #56]	@ (800d590 <pbuf_copy+0x1a0>)
 800d558:	4809      	ldr	r0, [pc, #36]	@ (800d580 <pbuf_copy+0x190>)
 800d55a:	f009 fb65 	bl	8016c28 <iprintf>
 800d55e:	f06f 0305 	mvn.w	r3, #5
 800d562:	e004      	b.n	800d56e <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800d564:	683b      	ldr	r3, [r7, #0]
 800d566:	2b00      	cmp	r3, #0
 800d568:	f47f af61 	bne.w	800d42e <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800d56c:	2300      	movs	r3, #0
}
 800d56e:	4618      	mov	r0, r3
 800d570:	3718      	adds	r7, #24
 800d572:	46bd      	mov	sp, r7
 800d574:	bd80      	pop	{r7, pc}
 800d576:	bf00      	nop
 800d578:	08018e24 	.word	0x08018e24
 800d57c:	080190cc 	.word	0x080190cc
 800d580:	08018e84 	.word	0x08018e84
 800d584:	080190fc 	.word	0x080190fc
 800d588:	08019114 	.word	0x08019114
 800d58c:	08019130 	.word	0x08019130
 800d590:	08019140 	.word	0x08019140

0800d594 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800d594:	b580      	push	{r7, lr}
 800d596:	b088      	sub	sp, #32
 800d598:	af00      	add	r7, sp, #0
 800d59a:	60f8      	str	r0, [r7, #12]
 800d59c:	60b9      	str	r1, [r7, #8]
 800d59e:	4611      	mov	r1, r2
 800d5a0:	461a      	mov	r2, r3
 800d5a2:	460b      	mov	r3, r1
 800d5a4:	80fb      	strh	r3, [r7, #6]
 800d5a6:	4613      	mov	r3, r2
 800d5a8:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800d5aa:	2300      	movs	r3, #0
 800d5ac:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800d5ae:	2300      	movs	r3, #0
 800d5b0:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800d5b2:	68fb      	ldr	r3, [r7, #12]
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d108      	bne.n	800d5ca <pbuf_copy_partial+0x36>
 800d5b8:	4b2b      	ldr	r3, [pc, #172]	@ (800d668 <pbuf_copy_partial+0xd4>)
 800d5ba:	f240 420a 	movw	r2, #1034	@ 0x40a
 800d5be:	492b      	ldr	r1, [pc, #172]	@ (800d66c <pbuf_copy_partial+0xd8>)
 800d5c0:	482b      	ldr	r0, [pc, #172]	@ (800d670 <pbuf_copy_partial+0xdc>)
 800d5c2:	f009 fb31 	bl	8016c28 <iprintf>
 800d5c6:	2300      	movs	r3, #0
 800d5c8:	e04a      	b.n	800d660 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800d5ca:	68bb      	ldr	r3, [r7, #8]
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	d108      	bne.n	800d5e2 <pbuf_copy_partial+0x4e>
 800d5d0:	4b25      	ldr	r3, [pc, #148]	@ (800d668 <pbuf_copy_partial+0xd4>)
 800d5d2:	f240 420b 	movw	r2, #1035	@ 0x40b
 800d5d6:	4927      	ldr	r1, [pc, #156]	@ (800d674 <pbuf_copy_partial+0xe0>)
 800d5d8:	4825      	ldr	r0, [pc, #148]	@ (800d670 <pbuf_copy_partial+0xdc>)
 800d5da:	f009 fb25 	bl	8016c28 <iprintf>
 800d5de:	2300      	movs	r3, #0
 800d5e0:	e03e      	b.n	800d660 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800d5e2:	68fb      	ldr	r3, [r7, #12]
 800d5e4:	61fb      	str	r3, [r7, #28]
 800d5e6:	e034      	b.n	800d652 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800d5e8:	88bb      	ldrh	r3, [r7, #4]
 800d5ea:	2b00      	cmp	r3, #0
 800d5ec:	d00a      	beq.n	800d604 <pbuf_copy_partial+0x70>
 800d5ee:	69fb      	ldr	r3, [r7, #28]
 800d5f0:	895b      	ldrh	r3, [r3, #10]
 800d5f2:	88ba      	ldrh	r2, [r7, #4]
 800d5f4:	429a      	cmp	r2, r3
 800d5f6:	d305      	bcc.n	800d604 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800d5f8:	69fb      	ldr	r3, [r7, #28]
 800d5fa:	895b      	ldrh	r3, [r3, #10]
 800d5fc:	88ba      	ldrh	r2, [r7, #4]
 800d5fe:	1ad3      	subs	r3, r2, r3
 800d600:	80bb      	strh	r3, [r7, #4]
 800d602:	e023      	b.n	800d64c <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800d604:	69fb      	ldr	r3, [r7, #28]
 800d606:	895a      	ldrh	r2, [r3, #10]
 800d608:	88bb      	ldrh	r3, [r7, #4]
 800d60a:	1ad3      	subs	r3, r2, r3
 800d60c:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800d60e:	8b3a      	ldrh	r2, [r7, #24]
 800d610:	88fb      	ldrh	r3, [r7, #6]
 800d612:	429a      	cmp	r2, r3
 800d614:	d901      	bls.n	800d61a <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800d616:	88fb      	ldrh	r3, [r7, #6]
 800d618:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800d61a:	8b7b      	ldrh	r3, [r7, #26]
 800d61c:	68ba      	ldr	r2, [r7, #8]
 800d61e:	18d0      	adds	r0, r2, r3
 800d620:	69fb      	ldr	r3, [r7, #28]
 800d622:	685a      	ldr	r2, [r3, #4]
 800d624:	88bb      	ldrh	r3, [r7, #4]
 800d626:	4413      	add	r3, r2
 800d628:	8b3a      	ldrh	r2, [r7, #24]
 800d62a:	4619      	mov	r1, r3
 800d62c:	f009 fc2d 	bl	8016e8a <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800d630:	8afa      	ldrh	r2, [r7, #22]
 800d632:	8b3b      	ldrh	r3, [r7, #24]
 800d634:	4413      	add	r3, r2
 800d636:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800d638:	8b7a      	ldrh	r2, [r7, #26]
 800d63a:	8b3b      	ldrh	r3, [r7, #24]
 800d63c:	4413      	add	r3, r2
 800d63e:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800d640:	88fa      	ldrh	r2, [r7, #6]
 800d642:	8b3b      	ldrh	r3, [r7, #24]
 800d644:	1ad3      	subs	r3, r2, r3
 800d646:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800d648:	2300      	movs	r3, #0
 800d64a:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800d64c:	69fb      	ldr	r3, [r7, #28]
 800d64e:	681b      	ldr	r3, [r3, #0]
 800d650:	61fb      	str	r3, [r7, #28]
 800d652:	88fb      	ldrh	r3, [r7, #6]
 800d654:	2b00      	cmp	r3, #0
 800d656:	d002      	beq.n	800d65e <pbuf_copy_partial+0xca>
 800d658:	69fb      	ldr	r3, [r7, #28]
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	d1c4      	bne.n	800d5e8 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800d65e:	8afb      	ldrh	r3, [r7, #22]
}
 800d660:	4618      	mov	r0, r3
 800d662:	3720      	adds	r7, #32
 800d664:	46bd      	mov	sp, r7
 800d666:	bd80      	pop	{r7, pc}
 800d668:	08018e24 	.word	0x08018e24
 800d66c:	0801916c 	.word	0x0801916c
 800d670:	08018e84 	.word	0x08018e84
 800d674:	0801918c 	.word	0x0801918c

0800d678 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800d678:	b580      	push	{r7, lr}
 800d67a:	b084      	sub	sp, #16
 800d67c:	af00      	add	r7, sp, #0
 800d67e:	4603      	mov	r3, r0
 800d680:	603a      	str	r2, [r7, #0]
 800d682:	71fb      	strb	r3, [r7, #7]
 800d684:	460b      	mov	r3, r1
 800d686:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800d688:	683b      	ldr	r3, [r7, #0]
 800d68a:	8919      	ldrh	r1, [r3, #8]
 800d68c:	88ba      	ldrh	r2, [r7, #4]
 800d68e:	79fb      	ldrb	r3, [r7, #7]
 800d690:	4618      	mov	r0, r3
 800d692:	f7ff faa5 	bl	800cbe0 <pbuf_alloc>
 800d696:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800d698:	68fb      	ldr	r3, [r7, #12]
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d101      	bne.n	800d6a2 <pbuf_clone+0x2a>
    return NULL;
 800d69e:	2300      	movs	r3, #0
 800d6a0:	e011      	b.n	800d6c6 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800d6a2:	6839      	ldr	r1, [r7, #0]
 800d6a4:	68f8      	ldr	r0, [r7, #12]
 800d6a6:	f7ff fea3 	bl	800d3f0 <pbuf_copy>
 800d6aa:	4603      	mov	r3, r0
 800d6ac:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800d6ae:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	d006      	beq.n	800d6c4 <pbuf_clone+0x4c>
 800d6b6:	4b06      	ldr	r3, [pc, #24]	@ (800d6d0 <pbuf_clone+0x58>)
 800d6b8:	f240 5224 	movw	r2, #1316	@ 0x524
 800d6bc:	4905      	ldr	r1, [pc, #20]	@ (800d6d4 <pbuf_clone+0x5c>)
 800d6be:	4806      	ldr	r0, [pc, #24]	@ (800d6d8 <pbuf_clone+0x60>)
 800d6c0:	f009 fab2 	bl	8016c28 <iprintf>
  return q;
 800d6c4:	68fb      	ldr	r3, [r7, #12]
}
 800d6c6:	4618      	mov	r0, r3
 800d6c8:	3710      	adds	r7, #16
 800d6ca:	46bd      	mov	sp, r7
 800d6cc:	bd80      	pop	{r7, pc}
 800d6ce:	bf00      	nop
 800d6d0:	08018e24 	.word	0x08018e24
 800d6d4:	08019298 	.word	0x08019298
 800d6d8:	08018e84 	.word	0x08018e84

0800d6dc <sys_msleep>:
 *
 * @param ms number of milliseconds to sleep
 */
void
sys_msleep(u32_t ms)
{
 800d6dc:	b580      	push	{r7, lr}
 800d6de:	b084      	sub	sp, #16
 800d6e0:	af00      	add	r7, sp, #0
 800d6e2:	6078      	str	r0, [r7, #4]
  if (ms > 0) {
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	d016      	beq.n	800d718 <sys_msleep+0x3c>
    sys_sem_t delaysem;
    err_t err = sys_sem_new(&delaysem, 0);
 800d6ea:	f107 0308 	add.w	r3, r7, #8
 800d6ee:	2100      	movs	r1, #0
 800d6f0:	4618      	mov	r0, r3
 800d6f2:	f009 f88f 	bl	8016814 <sys_sem_new>
 800d6f6:	4603      	mov	r3, r0
 800d6f8:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800d6fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d6fe:	2b00      	cmp	r3, #0
 800d700:	d10a      	bne.n	800d718 <sys_msleep+0x3c>
      sys_arch_sem_wait(&delaysem, ms);
 800d702:	f107 0308 	add.w	r3, r7, #8
 800d706:	6879      	ldr	r1, [r7, #4]
 800d708:	4618      	mov	r0, r3
 800d70a:	f009 f8a8 	bl	801685e <sys_arch_sem_wait>
      sys_sem_free(&delaysem);
 800d70e:	f107 0308 	add.w	r3, r7, #8
 800d712:	4618      	mov	r0, r3
 800d714:	f009 f8e1 	bl	80168da <sys_sem_free>
    }
  }
}
 800d718:	bf00      	nop
 800d71a:	3710      	adds	r7, #16
 800d71c:	46bd      	mov	sp, r7
 800d71e:	bd80      	pop	{r7, pc}

0800d720 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800d720:	b580      	push	{r7, lr}
 800d722:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800d724:	f009 f980 	bl	8016a28 <rand>
 800d728:	4603      	mov	r3, r0
 800d72a:	b29b      	uxth	r3, r3
 800d72c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800d730:	b29b      	uxth	r3, r3
 800d732:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800d736:	b29a      	uxth	r2, r3
 800d738:	4b01      	ldr	r3, [pc, #4]	@ (800d740 <tcp_init+0x20>)
 800d73a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800d73c:	bf00      	nop
 800d73e:	bd80      	pop	{r7, pc}
 800d740:	20000124 	.word	0x20000124

0800d744 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800d744:	b580      	push	{r7, lr}
 800d746:	b082      	sub	sp, #8
 800d748:	af00      	add	r7, sp, #0
 800d74a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	7d1b      	ldrb	r3, [r3, #20]
 800d750:	2b01      	cmp	r3, #1
 800d752:	d105      	bne.n	800d760 <tcp_free+0x1c>
 800d754:	4b06      	ldr	r3, [pc, #24]	@ (800d770 <tcp_free+0x2c>)
 800d756:	22d4      	movs	r2, #212	@ 0xd4
 800d758:	4906      	ldr	r1, [pc, #24]	@ (800d774 <tcp_free+0x30>)
 800d75a:	4807      	ldr	r0, [pc, #28]	@ (800d778 <tcp_free+0x34>)
 800d75c:	f009 fa64 	bl	8016c28 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800d760:	6879      	ldr	r1, [r7, #4]
 800d762:	2001      	movs	r0, #1
 800d764:	f7fe fe7c 	bl	800c460 <memp_free>
}
 800d768:	bf00      	nop
 800d76a:	3708      	adds	r7, #8
 800d76c:	46bd      	mov	sp, r7
 800d76e:	bd80      	pop	{r7, pc}
 800d770:	08019324 	.word	0x08019324
 800d774:	08019354 	.word	0x08019354
 800d778:	08019368 	.word	0x08019368

0800d77c <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800d77c:	b580      	push	{r7, lr}
 800d77e:	b082      	sub	sp, #8
 800d780:	af00      	add	r7, sp, #0
 800d782:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	7d1b      	ldrb	r3, [r3, #20]
 800d788:	2b01      	cmp	r3, #1
 800d78a:	d105      	bne.n	800d798 <tcp_free_listen+0x1c>
 800d78c:	4b06      	ldr	r3, [pc, #24]	@ (800d7a8 <tcp_free_listen+0x2c>)
 800d78e:	22df      	movs	r2, #223	@ 0xdf
 800d790:	4906      	ldr	r1, [pc, #24]	@ (800d7ac <tcp_free_listen+0x30>)
 800d792:	4807      	ldr	r0, [pc, #28]	@ (800d7b0 <tcp_free_listen+0x34>)
 800d794:	f009 fa48 	bl	8016c28 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800d798:	6879      	ldr	r1, [r7, #4]
 800d79a:	2002      	movs	r0, #2
 800d79c:	f7fe fe60 	bl	800c460 <memp_free>
}
 800d7a0:	bf00      	nop
 800d7a2:	3708      	adds	r7, #8
 800d7a4:	46bd      	mov	sp, r7
 800d7a6:	bd80      	pop	{r7, pc}
 800d7a8:	08019324 	.word	0x08019324
 800d7ac:	08019390 	.word	0x08019390
 800d7b0:	08019368 	.word	0x08019368

0800d7b4 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800d7b4:	b580      	push	{r7, lr}
 800d7b6:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800d7b8:	f001 f8ac 	bl	800e914 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800d7bc:	4b07      	ldr	r3, [pc, #28]	@ (800d7dc <tcp_tmr+0x28>)
 800d7be:	781b      	ldrb	r3, [r3, #0]
 800d7c0:	3301      	adds	r3, #1
 800d7c2:	b2da      	uxtb	r2, r3
 800d7c4:	4b05      	ldr	r3, [pc, #20]	@ (800d7dc <tcp_tmr+0x28>)
 800d7c6:	701a      	strb	r2, [r3, #0]
 800d7c8:	4b04      	ldr	r3, [pc, #16]	@ (800d7dc <tcp_tmr+0x28>)
 800d7ca:	781b      	ldrb	r3, [r3, #0]
 800d7cc:	f003 0301 	and.w	r3, r3, #1
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	d001      	beq.n	800d7d8 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800d7d4:	f000 fd58 	bl	800e288 <tcp_slowtmr>
  }
}
 800d7d8:	bf00      	nop
 800d7da:	bd80      	pop	{r7, pc}
 800d7dc:	2000f3fd 	.word	0x2000f3fd

0800d7e0 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800d7e0:	b580      	push	{r7, lr}
 800d7e2:	b084      	sub	sp, #16
 800d7e4:	af00      	add	r7, sp, #0
 800d7e6:	6078      	str	r0, [r7, #4]
 800d7e8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800d7ea:	683b      	ldr	r3, [r7, #0]
 800d7ec:	2b00      	cmp	r3, #0
 800d7ee:	d105      	bne.n	800d7fc <tcp_remove_listener+0x1c>
 800d7f0:	4b0d      	ldr	r3, [pc, #52]	@ (800d828 <tcp_remove_listener+0x48>)
 800d7f2:	22ff      	movs	r2, #255	@ 0xff
 800d7f4:	490d      	ldr	r1, [pc, #52]	@ (800d82c <tcp_remove_listener+0x4c>)
 800d7f6:	480e      	ldr	r0, [pc, #56]	@ (800d830 <tcp_remove_listener+0x50>)
 800d7f8:	f009 fa16 	bl	8016c28 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	60fb      	str	r3, [r7, #12]
 800d800:	e00a      	b.n	800d818 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800d802:	68fb      	ldr	r3, [r7, #12]
 800d804:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d806:	683a      	ldr	r2, [r7, #0]
 800d808:	429a      	cmp	r2, r3
 800d80a:	d102      	bne.n	800d812 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800d80c:	68fb      	ldr	r3, [r7, #12]
 800d80e:	2200      	movs	r2, #0
 800d810:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800d812:	68fb      	ldr	r3, [r7, #12]
 800d814:	68db      	ldr	r3, [r3, #12]
 800d816:	60fb      	str	r3, [r7, #12]
 800d818:	68fb      	ldr	r3, [r7, #12]
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	d1f1      	bne.n	800d802 <tcp_remove_listener+0x22>
    }
  }
}
 800d81e:	bf00      	nop
 800d820:	bf00      	nop
 800d822:	3710      	adds	r7, #16
 800d824:	46bd      	mov	sp, r7
 800d826:	bd80      	pop	{r7, pc}
 800d828:	08019324 	.word	0x08019324
 800d82c:	080193ac 	.word	0x080193ac
 800d830:	08019368 	.word	0x08019368

0800d834 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800d834:	b580      	push	{r7, lr}
 800d836:	b084      	sub	sp, #16
 800d838:	af00      	add	r7, sp, #0
 800d83a:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	2b00      	cmp	r3, #0
 800d840:	d106      	bne.n	800d850 <tcp_listen_closed+0x1c>
 800d842:	4b14      	ldr	r3, [pc, #80]	@ (800d894 <tcp_listen_closed+0x60>)
 800d844:	f240 1211 	movw	r2, #273	@ 0x111
 800d848:	4913      	ldr	r1, [pc, #76]	@ (800d898 <tcp_listen_closed+0x64>)
 800d84a:	4814      	ldr	r0, [pc, #80]	@ (800d89c <tcp_listen_closed+0x68>)
 800d84c:	f009 f9ec 	bl	8016c28 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	7d1b      	ldrb	r3, [r3, #20]
 800d854:	2b01      	cmp	r3, #1
 800d856:	d006      	beq.n	800d866 <tcp_listen_closed+0x32>
 800d858:	4b0e      	ldr	r3, [pc, #56]	@ (800d894 <tcp_listen_closed+0x60>)
 800d85a:	f44f 7289 	mov.w	r2, #274	@ 0x112
 800d85e:	4910      	ldr	r1, [pc, #64]	@ (800d8a0 <tcp_listen_closed+0x6c>)
 800d860:	480e      	ldr	r0, [pc, #56]	@ (800d89c <tcp_listen_closed+0x68>)
 800d862:	f009 f9e1 	bl	8016c28 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800d866:	2301      	movs	r3, #1
 800d868:	60fb      	str	r3, [r7, #12]
 800d86a:	e00b      	b.n	800d884 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800d86c:	4a0d      	ldr	r2, [pc, #52]	@ (800d8a4 <tcp_listen_closed+0x70>)
 800d86e:	68fb      	ldr	r3, [r7, #12]
 800d870:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d874:	681b      	ldr	r3, [r3, #0]
 800d876:	6879      	ldr	r1, [r7, #4]
 800d878:	4618      	mov	r0, r3
 800d87a:	f7ff ffb1 	bl	800d7e0 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800d87e:	68fb      	ldr	r3, [r7, #12]
 800d880:	3301      	adds	r3, #1
 800d882:	60fb      	str	r3, [r7, #12]
 800d884:	68fb      	ldr	r3, [r7, #12]
 800d886:	2b03      	cmp	r3, #3
 800d888:	d9f0      	bls.n	800d86c <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800d88a:	bf00      	nop
 800d88c:	bf00      	nop
 800d88e:	3710      	adds	r7, #16
 800d890:	46bd      	mov	sp, r7
 800d892:	bd80      	pop	{r7, pc}
 800d894:	08019324 	.word	0x08019324
 800d898:	080193d4 	.word	0x080193d4
 800d89c:	08019368 	.word	0x08019368
 800d8a0:	080193e0 	.word	0x080193e0
 800d8a4:	0801b36c 	.word	0x0801b36c

0800d8a8 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800d8a8:	b5b0      	push	{r4, r5, r7, lr}
 800d8aa:	b088      	sub	sp, #32
 800d8ac:	af04      	add	r7, sp, #16
 800d8ae:	6078      	str	r0, [r7, #4]
 800d8b0:	460b      	mov	r3, r1
 800d8b2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	2b00      	cmp	r3, #0
 800d8b8:	d106      	bne.n	800d8c8 <tcp_close_shutdown+0x20>
 800d8ba:	4b63      	ldr	r3, [pc, #396]	@ (800da48 <tcp_close_shutdown+0x1a0>)
 800d8bc:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 800d8c0:	4962      	ldr	r1, [pc, #392]	@ (800da4c <tcp_close_shutdown+0x1a4>)
 800d8c2:	4863      	ldr	r0, [pc, #396]	@ (800da50 <tcp_close_shutdown+0x1a8>)
 800d8c4:	f009 f9b0 	bl	8016c28 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800d8c8:	78fb      	ldrb	r3, [r7, #3]
 800d8ca:	2b00      	cmp	r3, #0
 800d8cc:	d066      	beq.n	800d99c <tcp_close_shutdown+0xf4>
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	7d1b      	ldrb	r3, [r3, #20]
 800d8d2:	2b04      	cmp	r3, #4
 800d8d4:	d003      	beq.n	800d8de <tcp_close_shutdown+0x36>
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	7d1b      	ldrb	r3, [r3, #20]
 800d8da:	2b07      	cmp	r3, #7
 800d8dc:	d15e      	bne.n	800d99c <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	d104      	bne.n	800d8f0 <tcp_close_shutdown+0x48>
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d8ea:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800d8ee:	d055      	beq.n	800d99c <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	8b5b      	ldrh	r3, [r3, #26]
 800d8f4:	f003 0310 	and.w	r3, r3, #16
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	d106      	bne.n	800d90a <tcp_close_shutdown+0x62>
 800d8fc:	4b52      	ldr	r3, [pc, #328]	@ (800da48 <tcp_close_shutdown+0x1a0>)
 800d8fe:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 800d902:	4954      	ldr	r1, [pc, #336]	@ (800da54 <tcp_close_shutdown+0x1ac>)
 800d904:	4852      	ldr	r0, [pc, #328]	@ (800da50 <tcp_close_shutdown+0x1a8>)
 800d906:	f009 f98f 	bl	8016c28 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800d912:	687d      	ldr	r5, [r7, #4]
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	3304      	adds	r3, #4
 800d918:	687a      	ldr	r2, [r7, #4]
 800d91a:	8ad2      	ldrh	r2, [r2, #22]
 800d91c:	6879      	ldr	r1, [r7, #4]
 800d91e:	8b09      	ldrh	r1, [r1, #24]
 800d920:	9102      	str	r1, [sp, #8]
 800d922:	9201      	str	r2, [sp, #4]
 800d924:	9300      	str	r3, [sp, #0]
 800d926:	462b      	mov	r3, r5
 800d928:	4622      	mov	r2, r4
 800d92a:	4601      	mov	r1, r0
 800d92c:	6878      	ldr	r0, [r7, #4]
 800d92e:	f005 fdc3 	bl	80134b8 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800d932:	6878      	ldr	r0, [r7, #4]
 800d934:	f001 fba6 	bl	800f084 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800d938:	4b47      	ldr	r3, [pc, #284]	@ (800da58 <tcp_close_shutdown+0x1b0>)
 800d93a:	681b      	ldr	r3, [r3, #0]
 800d93c:	687a      	ldr	r2, [r7, #4]
 800d93e:	429a      	cmp	r2, r3
 800d940:	d105      	bne.n	800d94e <tcp_close_shutdown+0xa6>
 800d942:	4b45      	ldr	r3, [pc, #276]	@ (800da58 <tcp_close_shutdown+0x1b0>)
 800d944:	681b      	ldr	r3, [r3, #0]
 800d946:	68db      	ldr	r3, [r3, #12]
 800d948:	4a43      	ldr	r2, [pc, #268]	@ (800da58 <tcp_close_shutdown+0x1b0>)
 800d94a:	6013      	str	r3, [r2, #0]
 800d94c:	e013      	b.n	800d976 <tcp_close_shutdown+0xce>
 800d94e:	4b42      	ldr	r3, [pc, #264]	@ (800da58 <tcp_close_shutdown+0x1b0>)
 800d950:	681b      	ldr	r3, [r3, #0]
 800d952:	60fb      	str	r3, [r7, #12]
 800d954:	e00c      	b.n	800d970 <tcp_close_shutdown+0xc8>
 800d956:	68fb      	ldr	r3, [r7, #12]
 800d958:	68db      	ldr	r3, [r3, #12]
 800d95a:	687a      	ldr	r2, [r7, #4]
 800d95c:	429a      	cmp	r2, r3
 800d95e:	d104      	bne.n	800d96a <tcp_close_shutdown+0xc2>
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	68da      	ldr	r2, [r3, #12]
 800d964:	68fb      	ldr	r3, [r7, #12]
 800d966:	60da      	str	r2, [r3, #12]
 800d968:	e005      	b.n	800d976 <tcp_close_shutdown+0xce>
 800d96a:	68fb      	ldr	r3, [r7, #12]
 800d96c:	68db      	ldr	r3, [r3, #12]
 800d96e:	60fb      	str	r3, [r7, #12]
 800d970:	68fb      	ldr	r3, [r7, #12]
 800d972:	2b00      	cmp	r3, #0
 800d974:	d1ef      	bne.n	800d956 <tcp_close_shutdown+0xae>
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	2200      	movs	r2, #0
 800d97a:	60da      	str	r2, [r3, #12]
 800d97c:	4b37      	ldr	r3, [pc, #220]	@ (800da5c <tcp_close_shutdown+0x1b4>)
 800d97e:	2201      	movs	r2, #1
 800d980:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800d982:	4b37      	ldr	r3, [pc, #220]	@ (800da60 <tcp_close_shutdown+0x1b8>)
 800d984:	681b      	ldr	r3, [r3, #0]
 800d986:	687a      	ldr	r2, [r7, #4]
 800d988:	429a      	cmp	r2, r3
 800d98a:	d102      	bne.n	800d992 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800d98c:	f004 f83a 	bl	8011a04 <tcp_trigger_input_pcb_close>
 800d990:	e002      	b.n	800d998 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800d992:	6878      	ldr	r0, [r7, #4]
 800d994:	f7ff fed6 	bl	800d744 <tcp_free>
      }
      return ERR_OK;
 800d998:	2300      	movs	r3, #0
 800d99a:	e050      	b.n	800da3e <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	7d1b      	ldrb	r3, [r3, #20]
 800d9a0:	2b02      	cmp	r3, #2
 800d9a2:	d03b      	beq.n	800da1c <tcp_close_shutdown+0x174>
 800d9a4:	2b02      	cmp	r3, #2
 800d9a6:	dc44      	bgt.n	800da32 <tcp_close_shutdown+0x18a>
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	d002      	beq.n	800d9b2 <tcp_close_shutdown+0x10a>
 800d9ac:	2b01      	cmp	r3, #1
 800d9ae:	d02a      	beq.n	800da06 <tcp_close_shutdown+0x15e>
 800d9b0:	e03f      	b.n	800da32 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	8adb      	ldrh	r3, [r3, #22]
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	d021      	beq.n	800d9fe <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800d9ba:	4b2a      	ldr	r3, [pc, #168]	@ (800da64 <tcp_close_shutdown+0x1bc>)
 800d9bc:	681b      	ldr	r3, [r3, #0]
 800d9be:	687a      	ldr	r2, [r7, #4]
 800d9c0:	429a      	cmp	r2, r3
 800d9c2:	d105      	bne.n	800d9d0 <tcp_close_shutdown+0x128>
 800d9c4:	4b27      	ldr	r3, [pc, #156]	@ (800da64 <tcp_close_shutdown+0x1bc>)
 800d9c6:	681b      	ldr	r3, [r3, #0]
 800d9c8:	68db      	ldr	r3, [r3, #12]
 800d9ca:	4a26      	ldr	r2, [pc, #152]	@ (800da64 <tcp_close_shutdown+0x1bc>)
 800d9cc:	6013      	str	r3, [r2, #0]
 800d9ce:	e013      	b.n	800d9f8 <tcp_close_shutdown+0x150>
 800d9d0:	4b24      	ldr	r3, [pc, #144]	@ (800da64 <tcp_close_shutdown+0x1bc>)
 800d9d2:	681b      	ldr	r3, [r3, #0]
 800d9d4:	60bb      	str	r3, [r7, #8]
 800d9d6:	e00c      	b.n	800d9f2 <tcp_close_shutdown+0x14a>
 800d9d8:	68bb      	ldr	r3, [r7, #8]
 800d9da:	68db      	ldr	r3, [r3, #12]
 800d9dc:	687a      	ldr	r2, [r7, #4]
 800d9de:	429a      	cmp	r2, r3
 800d9e0:	d104      	bne.n	800d9ec <tcp_close_shutdown+0x144>
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	68da      	ldr	r2, [r3, #12]
 800d9e6:	68bb      	ldr	r3, [r7, #8]
 800d9e8:	60da      	str	r2, [r3, #12]
 800d9ea:	e005      	b.n	800d9f8 <tcp_close_shutdown+0x150>
 800d9ec:	68bb      	ldr	r3, [r7, #8]
 800d9ee:	68db      	ldr	r3, [r3, #12]
 800d9f0:	60bb      	str	r3, [r7, #8]
 800d9f2:	68bb      	ldr	r3, [r7, #8]
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	d1ef      	bne.n	800d9d8 <tcp_close_shutdown+0x130>
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	2200      	movs	r2, #0
 800d9fc:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800d9fe:	6878      	ldr	r0, [r7, #4]
 800da00:	f7ff fea0 	bl	800d744 <tcp_free>
      break;
 800da04:	e01a      	b.n	800da3c <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800da06:	6878      	ldr	r0, [r7, #4]
 800da08:	f7ff ff14 	bl	800d834 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800da0c:	6879      	ldr	r1, [r7, #4]
 800da0e:	4816      	ldr	r0, [pc, #88]	@ (800da68 <tcp_close_shutdown+0x1c0>)
 800da10:	f001 fb88 	bl	800f124 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800da14:	6878      	ldr	r0, [r7, #4]
 800da16:	f7ff feb1 	bl	800d77c <tcp_free_listen>
      break;
 800da1a:	e00f      	b.n	800da3c <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800da1c:	6879      	ldr	r1, [r7, #4]
 800da1e:	480e      	ldr	r0, [pc, #56]	@ (800da58 <tcp_close_shutdown+0x1b0>)
 800da20:	f001 fb80 	bl	800f124 <tcp_pcb_remove>
 800da24:	4b0d      	ldr	r3, [pc, #52]	@ (800da5c <tcp_close_shutdown+0x1b4>)
 800da26:	2201      	movs	r2, #1
 800da28:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800da2a:	6878      	ldr	r0, [r7, #4]
 800da2c:	f7ff fe8a 	bl	800d744 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800da30:	e004      	b.n	800da3c <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800da32:	6878      	ldr	r0, [r7, #4]
 800da34:	f000 f81a 	bl	800da6c <tcp_close_shutdown_fin>
 800da38:	4603      	mov	r3, r0
 800da3a:	e000      	b.n	800da3e <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800da3c:	2300      	movs	r3, #0
}
 800da3e:	4618      	mov	r0, r3
 800da40:	3710      	adds	r7, #16
 800da42:	46bd      	mov	sp, r7
 800da44:	bdb0      	pop	{r4, r5, r7, pc}
 800da46:	bf00      	nop
 800da48:	08019324 	.word	0x08019324
 800da4c:	080193f8 	.word	0x080193f8
 800da50:	08019368 	.word	0x08019368
 800da54:	08019418 	.word	0x08019418
 800da58:	2000f3f4 	.word	0x2000f3f4
 800da5c:	2000f3fc 	.word	0x2000f3fc
 800da60:	2000f434 	.word	0x2000f434
 800da64:	2000f3ec 	.word	0x2000f3ec
 800da68:	2000f3f0 	.word	0x2000f3f0

0800da6c <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800da6c:	b580      	push	{r7, lr}
 800da6e:	b084      	sub	sp, #16
 800da70:	af00      	add	r7, sp, #0
 800da72:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	2b00      	cmp	r3, #0
 800da78:	d106      	bne.n	800da88 <tcp_close_shutdown_fin+0x1c>
 800da7a:	4b2e      	ldr	r3, [pc, #184]	@ (800db34 <tcp_close_shutdown_fin+0xc8>)
 800da7c:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 800da80:	492d      	ldr	r1, [pc, #180]	@ (800db38 <tcp_close_shutdown_fin+0xcc>)
 800da82:	482e      	ldr	r0, [pc, #184]	@ (800db3c <tcp_close_shutdown_fin+0xd0>)
 800da84:	f009 f8d0 	bl	8016c28 <iprintf>

  switch (pcb->state) {
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	7d1b      	ldrb	r3, [r3, #20]
 800da8c:	2b07      	cmp	r3, #7
 800da8e:	d020      	beq.n	800dad2 <tcp_close_shutdown_fin+0x66>
 800da90:	2b07      	cmp	r3, #7
 800da92:	dc2b      	bgt.n	800daec <tcp_close_shutdown_fin+0x80>
 800da94:	2b03      	cmp	r3, #3
 800da96:	d002      	beq.n	800da9e <tcp_close_shutdown_fin+0x32>
 800da98:	2b04      	cmp	r3, #4
 800da9a:	d00d      	beq.n	800dab8 <tcp_close_shutdown_fin+0x4c>
 800da9c:	e026      	b.n	800daec <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800da9e:	6878      	ldr	r0, [r7, #4]
 800daa0:	f004 fe18 	bl	80126d4 <tcp_send_fin>
 800daa4:	4603      	mov	r3, r0
 800daa6:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800daa8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800daac:	2b00      	cmp	r3, #0
 800daae:	d11f      	bne.n	800daf0 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	2205      	movs	r2, #5
 800dab4:	751a      	strb	r2, [r3, #20]
      }
      break;
 800dab6:	e01b      	b.n	800daf0 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800dab8:	6878      	ldr	r0, [r7, #4]
 800daba:	f004 fe0b 	bl	80126d4 <tcp_send_fin>
 800dabe:	4603      	mov	r3, r0
 800dac0:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800dac2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dac6:	2b00      	cmp	r3, #0
 800dac8:	d114      	bne.n	800daf4 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	2205      	movs	r2, #5
 800dace:	751a      	strb	r2, [r3, #20]
      }
      break;
 800dad0:	e010      	b.n	800daf4 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800dad2:	6878      	ldr	r0, [r7, #4]
 800dad4:	f004 fdfe 	bl	80126d4 <tcp_send_fin>
 800dad8:	4603      	mov	r3, r0
 800dada:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800dadc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	d109      	bne.n	800daf8 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	2209      	movs	r2, #9
 800dae8:	751a      	strb	r2, [r3, #20]
      }
      break;
 800daea:	e005      	b.n	800daf8 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800daec:	2300      	movs	r3, #0
 800daee:	e01c      	b.n	800db2a <tcp_close_shutdown_fin+0xbe>
      break;
 800daf0:	bf00      	nop
 800daf2:	e002      	b.n	800dafa <tcp_close_shutdown_fin+0x8e>
      break;
 800daf4:	bf00      	nop
 800daf6:	e000      	b.n	800dafa <tcp_close_shutdown_fin+0x8e>
      break;
 800daf8:	bf00      	nop
  }

  if (err == ERR_OK) {
 800dafa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dafe:	2b00      	cmp	r3, #0
 800db00:	d103      	bne.n	800db0a <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800db02:	6878      	ldr	r0, [r7, #4]
 800db04:	f004 ff24 	bl	8012950 <tcp_output>
 800db08:	e00d      	b.n	800db26 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800db0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800db0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db12:	d108      	bne.n	800db26 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	8b5b      	ldrh	r3, [r3, #26]
 800db18:	f043 0308 	orr.w	r3, r3, #8
 800db1c:	b29a      	uxth	r2, r3
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800db22:	2300      	movs	r3, #0
 800db24:	e001      	b.n	800db2a <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800db26:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800db2a:	4618      	mov	r0, r3
 800db2c:	3710      	adds	r7, #16
 800db2e:	46bd      	mov	sp, r7
 800db30:	bd80      	pop	{r7, pc}
 800db32:	bf00      	nop
 800db34:	08019324 	.word	0x08019324
 800db38:	080193d4 	.word	0x080193d4
 800db3c:	08019368 	.word	0x08019368

0800db40 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800db40:	b580      	push	{r7, lr}
 800db42:	b082      	sub	sp, #8
 800db44:	af00      	add	r7, sp, #0
 800db46:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	2b00      	cmp	r3, #0
 800db4c:	d109      	bne.n	800db62 <tcp_close+0x22>
 800db4e:	4b0f      	ldr	r3, [pc, #60]	@ (800db8c <tcp_close+0x4c>)
 800db50:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 800db54:	490e      	ldr	r1, [pc, #56]	@ (800db90 <tcp_close+0x50>)
 800db56:	480f      	ldr	r0, [pc, #60]	@ (800db94 <tcp_close+0x54>)
 800db58:	f009 f866 	bl	8016c28 <iprintf>
 800db5c:	f06f 030f 	mvn.w	r3, #15
 800db60:	e00f      	b.n	800db82 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	7d1b      	ldrb	r3, [r3, #20]
 800db66:	2b01      	cmp	r3, #1
 800db68:	d006      	beq.n	800db78 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	8b5b      	ldrh	r3, [r3, #26]
 800db6e:	f043 0310 	orr.w	r3, r3, #16
 800db72:	b29a      	uxth	r2, r3
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800db78:	2101      	movs	r1, #1
 800db7a:	6878      	ldr	r0, [r7, #4]
 800db7c:	f7ff fe94 	bl	800d8a8 <tcp_close_shutdown>
 800db80:	4603      	mov	r3, r0
}
 800db82:	4618      	mov	r0, r3
 800db84:	3708      	adds	r7, #8
 800db86:	46bd      	mov	sp, r7
 800db88:	bd80      	pop	{r7, pc}
 800db8a:	bf00      	nop
 800db8c:	08019324 	.word	0x08019324
 800db90:	08019434 	.word	0x08019434
 800db94:	08019368 	.word	0x08019368

0800db98 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 800db98:	b580      	push	{r7, lr}
 800db9a:	b084      	sub	sp, #16
 800db9c:	af00      	add	r7, sp, #0
 800db9e:	60f8      	str	r0, [r7, #12]
 800dba0:	60b9      	str	r1, [r7, #8]
 800dba2:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 800dba4:	68fb      	ldr	r3, [r7, #12]
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	d109      	bne.n	800dbbe <tcp_shutdown+0x26>
 800dbaa:	4b26      	ldr	r3, [pc, #152]	@ (800dc44 <tcp_shutdown+0xac>)
 800dbac:	f240 2207 	movw	r2, #519	@ 0x207
 800dbb0:	4925      	ldr	r1, [pc, #148]	@ (800dc48 <tcp_shutdown+0xb0>)
 800dbb2:	4826      	ldr	r0, [pc, #152]	@ (800dc4c <tcp_shutdown+0xb4>)
 800dbb4:	f009 f838 	bl	8016c28 <iprintf>
 800dbb8:	f06f 030f 	mvn.w	r3, #15
 800dbbc:	e03d      	b.n	800dc3a <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 800dbbe:	68fb      	ldr	r3, [r7, #12]
 800dbc0:	7d1b      	ldrb	r3, [r3, #20]
 800dbc2:	2b01      	cmp	r3, #1
 800dbc4:	d102      	bne.n	800dbcc <tcp_shutdown+0x34>
    return ERR_CONN;
 800dbc6:	f06f 030a 	mvn.w	r3, #10
 800dbca:	e036      	b.n	800dc3a <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 800dbcc:	68bb      	ldr	r3, [r7, #8]
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	d01b      	beq.n	800dc0a <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800dbd2:	68fb      	ldr	r3, [r7, #12]
 800dbd4:	8b5b      	ldrh	r3, [r3, #26]
 800dbd6:	f043 0310 	orr.w	r3, r3, #16
 800dbda:	b29a      	uxth	r2, r3
 800dbdc:	68fb      	ldr	r3, [r7, #12]
 800dbde:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	d005      	beq.n	800dbf2 <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 800dbe6:	2101      	movs	r1, #1
 800dbe8:	68f8      	ldr	r0, [r7, #12]
 800dbea:	f7ff fe5d 	bl	800d8a8 <tcp_close_shutdown>
 800dbee:	4603      	mov	r3, r0
 800dbf0:	e023      	b.n	800dc3a <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 800dbf2:	68fb      	ldr	r3, [r7, #12]
 800dbf4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	d007      	beq.n	800dc0a <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 800dbfa:	68fb      	ldr	r3, [r7, #12]
 800dbfc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800dbfe:	4618      	mov	r0, r3
 800dc00:	f7ff fad2 	bl	800d1a8 <pbuf_free>
      pcb->refused_data = NULL;
 800dc04:	68fb      	ldr	r3, [r7, #12]
 800dc06:	2200      	movs	r2, #0
 800dc08:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }
  if (shut_tx) {
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	2b00      	cmp	r3, #0
 800dc0e:	d013      	beq.n	800dc38 <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 800dc10:	68fb      	ldr	r3, [r7, #12]
 800dc12:	7d1b      	ldrb	r3, [r3, #20]
 800dc14:	2b04      	cmp	r3, #4
 800dc16:	dc02      	bgt.n	800dc1e <tcp_shutdown+0x86>
 800dc18:	2b03      	cmp	r3, #3
 800dc1a:	da02      	bge.n	800dc22 <tcp_shutdown+0x8a>
 800dc1c:	e009      	b.n	800dc32 <tcp_shutdown+0x9a>
 800dc1e:	2b07      	cmp	r3, #7
 800dc20:	d107      	bne.n	800dc32 <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800dc22:	68bb      	ldr	r3, [r7, #8]
 800dc24:	b2db      	uxtb	r3, r3
 800dc26:	4619      	mov	r1, r3
 800dc28:	68f8      	ldr	r0, [r7, #12]
 800dc2a:	f7ff fe3d 	bl	800d8a8 <tcp_close_shutdown>
 800dc2e:	4603      	mov	r3, r0
 800dc30:	e003      	b.n	800dc3a <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 800dc32:	f06f 030a 	mvn.w	r3, #10
 800dc36:	e000      	b.n	800dc3a <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 800dc38:	2300      	movs	r3, #0
}
 800dc3a:	4618      	mov	r0, r3
 800dc3c:	3710      	adds	r7, #16
 800dc3e:	46bd      	mov	sp, r7
 800dc40:	bd80      	pop	{r7, pc}
 800dc42:	bf00      	nop
 800dc44:	08019324 	.word	0x08019324
 800dc48:	0801944c 	.word	0x0801944c
 800dc4c:	08019368 	.word	0x08019368

0800dc50 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800dc50:	b580      	push	{r7, lr}
 800dc52:	b08e      	sub	sp, #56	@ 0x38
 800dc54:	af04      	add	r7, sp, #16
 800dc56:	6078      	str	r0, [r7, #4]
 800dc58:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	d107      	bne.n	800dc70 <tcp_abandon+0x20>
 800dc60:	4b52      	ldr	r3, [pc, #328]	@ (800ddac <tcp_abandon+0x15c>)
 800dc62:	f240 223d 	movw	r2, #573	@ 0x23d
 800dc66:	4952      	ldr	r1, [pc, #328]	@ (800ddb0 <tcp_abandon+0x160>)
 800dc68:	4852      	ldr	r0, [pc, #328]	@ (800ddb4 <tcp_abandon+0x164>)
 800dc6a:	f008 ffdd 	bl	8016c28 <iprintf>
 800dc6e:	e099      	b.n	800dda4 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	7d1b      	ldrb	r3, [r3, #20]
 800dc74:	2b01      	cmp	r3, #1
 800dc76:	d106      	bne.n	800dc86 <tcp_abandon+0x36>
 800dc78:	4b4c      	ldr	r3, [pc, #304]	@ (800ddac <tcp_abandon+0x15c>)
 800dc7a:	f44f 7210 	mov.w	r2, #576	@ 0x240
 800dc7e:	494e      	ldr	r1, [pc, #312]	@ (800ddb8 <tcp_abandon+0x168>)
 800dc80:	484c      	ldr	r0, [pc, #304]	@ (800ddb4 <tcp_abandon+0x164>)
 800dc82:	f008 ffd1 	bl	8016c28 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	7d1b      	ldrb	r3, [r3, #20]
 800dc8a:	2b0a      	cmp	r3, #10
 800dc8c:	d107      	bne.n	800dc9e <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800dc8e:	6879      	ldr	r1, [r7, #4]
 800dc90:	484a      	ldr	r0, [pc, #296]	@ (800ddbc <tcp_abandon+0x16c>)
 800dc92:	f001 fa47 	bl	800f124 <tcp_pcb_remove>
    tcp_free(pcb);
 800dc96:	6878      	ldr	r0, [r7, #4]
 800dc98:	f7ff fd54 	bl	800d744 <tcp_free>
 800dc9c:	e082      	b.n	800dda4 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800dc9e:	2300      	movs	r3, #0
 800dca0:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 800dca2:	2300      	movs	r3, #0
 800dca4:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dcaa:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dcb0:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800dcb8:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	691b      	ldr	r3, [r3, #16]
 800dcbe:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	7d1b      	ldrb	r3, [r3, #20]
 800dcc4:	2b00      	cmp	r3, #0
 800dcc6:	d126      	bne.n	800dd16 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	8adb      	ldrh	r3, [r3, #22]
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	d02e      	beq.n	800dd2e <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800dcd0:	4b3b      	ldr	r3, [pc, #236]	@ (800ddc0 <tcp_abandon+0x170>)
 800dcd2:	681b      	ldr	r3, [r3, #0]
 800dcd4:	687a      	ldr	r2, [r7, #4]
 800dcd6:	429a      	cmp	r2, r3
 800dcd8:	d105      	bne.n	800dce6 <tcp_abandon+0x96>
 800dcda:	4b39      	ldr	r3, [pc, #228]	@ (800ddc0 <tcp_abandon+0x170>)
 800dcdc:	681b      	ldr	r3, [r3, #0]
 800dcde:	68db      	ldr	r3, [r3, #12]
 800dce0:	4a37      	ldr	r2, [pc, #220]	@ (800ddc0 <tcp_abandon+0x170>)
 800dce2:	6013      	str	r3, [r2, #0]
 800dce4:	e013      	b.n	800dd0e <tcp_abandon+0xbe>
 800dce6:	4b36      	ldr	r3, [pc, #216]	@ (800ddc0 <tcp_abandon+0x170>)
 800dce8:	681b      	ldr	r3, [r3, #0]
 800dcea:	61fb      	str	r3, [r7, #28]
 800dcec:	e00c      	b.n	800dd08 <tcp_abandon+0xb8>
 800dcee:	69fb      	ldr	r3, [r7, #28]
 800dcf0:	68db      	ldr	r3, [r3, #12]
 800dcf2:	687a      	ldr	r2, [r7, #4]
 800dcf4:	429a      	cmp	r2, r3
 800dcf6:	d104      	bne.n	800dd02 <tcp_abandon+0xb2>
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	68da      	ldr	r2, [r3, #12]
 800dcfc:	69fb      	ldr	r3, [r7, #28]
 800dcfe:	60da      	str	r2, [r3, #12]
 800dd00:	e005      	b.n	800dd0e <tcp_abandon+0xbe>
 800dd02:	69fb      	ldr	r3, [r7, #28]
 800dd04:	68db      	ldr	r3, [r3, #12]
 800dd06:	61fb      	str	r3, [r7, #28]
 800dd08:	69fb      	ldr	r3, [r7, #28]
 800dd0a:	2b00      	cmp	r3, #0
 800dd0c:	d1ef      	bne.n	800dcee <tcp_abandon+0x9e>
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	2200      	movs	r2, #0
 800dd12:	60da      	str	r2, [r3, #12]
 800dd14:	e00b      	b.n	800dd2e <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800dd16:	683b      	ldr	r3, [r7, #0]
 800dd18:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	8adb      	ldrh	r3, [r3, #22]
 800dd1e:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800dd20:	6879      	ldr	r1, [r7, #4]
 800dd22:	4828      	ldr	r0, [pc, #160]	@ (800ddc4 <tcp_abandon+0x174>)
 800dd24:	f001 f9fe 	bl	800f124 <tcp_pcb_remove>
 800dd28:	4b27      	ldr	r3, [pc, #156]	@ (800ddc8 <tcp_abandon+0x178>)
 800dd2a:	2201      	movs	r2, #1
 800dd2c:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800dd32:	2b00      	cmp	r3, #0
 800dd34:	d004      	beq.n	800dd40 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800dd3a:	4618      	mov	r0, r3
 800dd3c:	f000 feca 	bl	800ead4 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	d004      	beq.n	800dd52 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800dd4c:	4618      	mov	r0, r3
 800dd4e:	f000 fec1 	bl	800ead4 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	d004      	beq.n	800dd64 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800dd5e:	4618      	mov	r0, r3
 800dd60:	f000 feb8 	bl	800ead4 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800dd64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd66:	2b00      	cmp	r3, #0
 800dd68:	d00e      	beq.n	800dd88 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800dd6a:	6879      	ldr	r1, [r7, #4]
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	3304      	adds	r3, #4
 800dd70:	687a      	ldr	r2, [r7, #4]
 800dd72:	8b12      	ldrh	r2, [r2, #24]
 800dd74:	9202      	str	r2, [sp, #8]
 800dd76:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800dd78:	9201      	str	r2, [sp, #4]
 800dd7a:	9300      	str	r3, [sp, #0]
 800dd7c:	460b      	mov	r3, r1
 800dd7e:	697a      	ldr	r2, [r7, #20]
 800dd80:	69b9      	ldr	r1, [r7, #24]
 800dd82:	6878      	ldr	r0, [r7, #4]
 800dd84:	f005 fb98 	bl	80134b8 <tcp_rst>
    }
    last_state = pcb->state;
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	7d1b      	ldrb	r3, [r3, #20]
 800dd8c:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800dd8e:	6878      	ldr	r0, [r7, #4]
 800dd90:	f7ff fcd8 	bl	800d744 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800dd94:	693b      	ldr	r3, [r7, #16]
 800dd96:	2b00      	cmp	r3, #0
 800dd98:	d004      	beq.n	800dda4 <tcp_abandon+0x154>
 800dd9a:	693b      	ldr	r3, [r7, #16]
 800dd9c:	f06f 010c 	mvn.w	r1, #12
 800dda0:	68f8      	ldr	r0, [r7, #12]
 800dda2:	4798      	blx	r3
  }
}
 800dda4:	3728      	adds	r7, #40	@ 0x28
 800dda6:	46bd      	mov	sp, r7
 800dda8:	bd80      	pop	{r7, pc}
 800ddaa:	bf00      	nop
 800ddac:	08019324 	.word	0x08019324
 800ddb0:	08019468 	.word	0x08019468
 800ddb4:	08019368 	.word	0x08019368
 800ddb8:	08019484 	.word	0x08019484
 800ddbc:	2000f3f8 	.word	0x2000f3f8
 800ddc0:	2000f3ec 	.word	0x2000f3ec
 800ddc4:	2000f3f4 	.word	0x2000f3f4
 800ddc8:	2000f3fc 	.word	0x2000f3fc

0800ddcc <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800ddcc:	b580      	push	{r7, lr}
 800ddce:	b082      	sub	sp, #8
 800ddd0:	af00      	add	r7, sp, #0
 800ddd2:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800ddd4:	2101      	movs	r1, #1
 800ddd6:	6878      	ldr	r0, [r7, #4]
 800ddd8:	f7ff ff3a 	bl	800dc50 <tcp_abandon>
}
 800dddc:	bf00      	nop
 800ddde:	3708      	adds	r7, #8
 800dde0:	46bd      	mov	sp, r7
 800dde2:	bd80      	pop	{r7, pc}

0800dde4 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800dde4:	b580      	push	{r7, lr}
 800dde6:	b088      	sub	sp, #32
 800dde8:	af00      	add	r7, sp, #0
 800ddea:	60f8      	str	r0, [r7, #12]
 800ddec:	60b9      	str	r1, [r7, #8]
 800ddee:	4613      	mov	r3, r2
 800ddf0:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800ddf2:	2304      	movs	r3, #4
 800ddf4:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800ddf6:	68bb      	ldr	r3, [r7, #8]
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	d101      	bne.n	800de00 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800ddfc:	4b3e      	ldr	r3, [pc, #248]	@ (800def8 <tcp_bind+0x114>)
 800ddfe:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800de00:	68fb      	ldr	r3, [r7, #12]
 800de02:	2b00      	cmp	r3, #0
 800de04:	d109      	bne.n	800de1a <tcp_bind+0x36>
 800de06:	4b3d      	ldr	r3, [pc, #244]	@ (800defc <tcp_bind+0x118>)
 800de08:	f240 22a9 	movw	r2, #681	@ 0x2a9
 800de0c:	493c      	ldr	r1, [pc, #240]	@ (800df00 <tcp_bind+0x11c>)
 800de0e:	483d      	ldr	r0, [pc, #244]	@ (800df04 <tcp_bind+0x120>)
 800de10:	f008 ff0a 	bl	8016c28 <iprintf>
 800de14:	f06f 030f 	mvn.w	r3, #15
 800de18:	e06a      	b.n	800def0 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800de1a:	68fb      	ldr	r3, [r7, #12]
 800de1c:	7d1b      	ldrb	r3, [r3, #20]
 800de1e:	2b00      	cmp	r3, #0
 800de20:	d009      	beq.n	800de36 <tcp_bind+0x52>
 800de22:	4b36      	ldr	r3, [pc, #216]	@ (800defc <tcp_bind+0x118>)
 800de24:	f240 22ab 	movw	r2, #683	@ 0x2ab
 800de28:	4937      	ldr	r1, [pc, #220]	@ (800df08 <tcp_bind+0x124>)
 800de2a:	4836      	ldr	r0, [pc, #216]	@ (800df04 <tcp_bind+0x120>)
 800de2c:	f008 fefc 	bl	8016c28 <iprintf>
 800de30:	f06f 0305 	mvn.w	r3, #5
 800de34:	e05c      	b.n	800def0 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800de36:	88fb      	ldrh	r3, [r7, #6]
 800de38:	2b00      	cmp	r3, #0
 800de3a:	d109      	bne.n	800de50 <tcp_bind+0x6c>
    port = tcp_new_port();
 800de3c:	f000 f9de 	bl	800e1fc <tcp_new_port>
 800de40:	4603      	mov	r3, r0
 800de42:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800de44:	88fb      	ldrh	r3, [r7, #6]
 800de46:	2b00      	cmp	r3, #0
 800de48:	d135      	bne.n	800deb6 <tcp_bind+0xd2>
      return ERR_BUF;
 800de4a:	f06f 0301 	mvn.w	r3, #1
 800de4e:	e04f      	b.n	800def0 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800de50:	2300      	movs	r3, #0
 800de52:	61fb      	str	r3, [r7, #28]
 800de54:	e02b      	b.n	800deae <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800de56:	4a2d      	ldr	r2, [pc, #180]	@ (800df0c <tcp_bind+0x128>)
 800de58:	69fb      	ldr	r3, [r7, #28]
 800de5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800de5e:	681b      	ldr	r3, [r3, #0]
 800de60:	61bb      	str	r3, [r7, #24]
 800de62:	e01e      	b.n	800dea2 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 800de64:	69bb      	ldr	r3, [r7, #24]
 800de66:	8adb      	ldrh	r3, [r3, #22]
 800de68:	88fa      	ldrh	r2, [r7, #6]
 800de6a:	429a      	cmp	r2, r3
 800de6c:	d116      	bne.n	800de9c <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800de6e:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800de70:	2b00      	cmp	r3, #0
 800de72:	d010      	beq.n	800de96 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 800de74:	69bb      	ldr	r3, [r7, #24]
 800de76:	681b      	ldr	r3, [r3, #0]
 800de78:	2b00      	cmp	r3, #0
 800de7a:	d00c      	beq.n	800de96 <tcp_bind+0xb2>
 800de7c:	68bb      	ldr	r3, [r7, #8]
 800de7e:	2b00      	cmp	r3, #0
 800de80:	d009      	beq.n	800de96 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 800de82:	68bb      	ldr	r3, [r7, #8]
 800de84:	681b      	ldr	r3, [r3, #0]
 800de86:	2b00      	cmp	r3, #0
 800de88:	d005      	beq.n	800de96 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800de8a:	69bb      	ldr	r3, [r7, #24]
 800de8c:	681a      	ldr	r2, [r3, #0]
 800de8e:	68bb      	ldr	r3, [r7, #8]
 800de90:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800de92:	429a      	cmp	r2, r3
 800de94:	d102      	bne.n	800de9c <tcp_bind+0xb8>
              return ERR_USE;
 800de96:	f06f 0307 	mvn.w	r3, #7
 800de9a:	e029      	b.n	800def0 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800de9c:	69bb      	ldr	r3, [r7, #24]
 800de9e:	68db      	ldr	r3, [r3, #12]
 800dea0:	61bb      	str	r3, [r7, #24]
 800dea2:	69bb      	ldr	r3, [r7, #24]
 800dea4:	2b00      	cmp	r3, #0
 800dea6:	d1dd      	bne.n	800de64 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 800dea8:	69fb      	ldr	r3, [r7, #28]
 800deaa:	3301      	adds	r3, #1
 800deac:	61fb      	str	r3, [r7, #28]
 800deae:	69fa      	ldr	r2, [r7, #28]
 800deb0:	697b      	ldr	r3, [r7, #20]
 800deb2:	429a      	cmp	r2, r3
 800deb4:	dbcf      	blt.n	800de56 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800deb6:	68bb      	ldr	r3, [r7, #8]
 800deb8:	2b00      	cmp	r3, #0
 800deba:	d00c      	beq.n	800ded6 <tcp_bind+0xf2>
 800debc:	68bb      	ldr	r3, [r7, #8]
 800debe:	681b      	ldr	r3, [r3, #0]
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	d008      	beq.n	800ded6 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 800dec4:	68bb      	ldr	r3, [r7, #8]
 800dec6:	2b00      	cmp	r3, #0
 800dec8:	d002      	beq.n	800ded0 <tcp_bind+0xec>
 800deca:	68bb      	ldr	r3, [r7, #8]
 800decc:	681b      	ldr	r3, [r3, #0]
 800dece:	e000      	b.n	800ded2 <tcp_bind+0xee>
 800ded0:	2300      	movs	r3, #0
 800ded2:	68fa      	ldr	r2, [r7, #12]
 800ded4:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800ded6:	68fb      	ldr	r3, [r7, #12]
 800ded8:	88fa      	ldrh	r2, [r7, #6]
 800deda:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800dedc:	4b0c      	ldr	r3, [pc, #48]	@ (800df10 <tcp_bind+0x12c>)
 800dede:	681a      	ldr	r2, [r3, #0]
 800dee0:	68fb      	ldr	r3, [r7, #12]
 800dee2:	60da      	str	r2, [r3, #12]
 800dee4:	4a0a      	ldr	r2, [pc, #40]	@ (800df10 <tcp_bind+0x12c>)
 800dee6:	68fb      	ldr	r3, [r7, #12]
 800dee8:	6013      	str	r3, [r2, #0]
 800deea:	f005 fca7 	bl	801383c <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800deee:	2300      	movs	r3, #0
}
 800def0:	4618      	mov	r0, r3
 800def2:	3720      	adds	r7, #32
 800def4:	46bd      	mov	sp, r7
 800def6:	bd80      	pop	{r7, pc}
 800def8:	0801b394 	.word	0x0801b394
 800defc:	08019324 	.word	0x08019324
 800df00:	080194b8 	.word	0x080194b8
 800df04:	08019368 	.word	0x08019368
 800df08:	080194d0 	.word	0x080194d0
 800df0c:	0801b36c 	.word	0x0801b36c
 800df10:	2000f3ec 	.word	0x2000f3ec

0800df14 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800df14:	b580      	push	{r7, lr}
 800df16:	b084      	sub	sp, #16
 800df18:	af00      	add	r7, sp, #0
 800df1a:	60f8      	str	r0, [r7, #12]
 800df1c:	60b9      	str	r1, [r7, #8]
 800df1e:	4613      	mov	r3, r2
 800df20:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 800df22:	68bb      	ldr	r3, [r7, #8]
 800df24:	2b00      	cmp	r3, #0
 800df26:	d106      	bne.n	800df36 <tcp_accept_null+0x22>
 800df28:	4b07      	ldr	r3, [pc, #28]	@ (800df48 <tcp_accept_null+0x34>)
 800df2a:	f240 320f 	movw	r2, #783	@ 0x30f
 800df2e:	4907      	ldr	r1, [pc, #28]	@ (800df4c <tcp_accept_null+0x38>)
 800df30:	4807      	ldr	r0, [pc, #28]	@ (800df50 <tcp_accept_null+0x3c>)
 800df32:	f008 fe79 	bl	8016c28 <iprintf>

  tcp_abort(pcb);
 800df36:	68b8      	ldr	r0, [r7, #8]
 800df38:	f7ff ff48 	bl	800ddcc <tcp_abort>

  return ERR_ABRT;
 800df3c:	f06f 030c 	mvn.w	r3, #12
}
 800df40:	4618      	mov	r0, r3
 800df42:	3710      	adds	r7, #16
 800df44:	46bd      	mov	sp, r7
 800df46:	bd80      	pop	{r7, pc}
 800df48:	08019324 	.word	0x08019324
 800df4c:	080194f8 	.word	0x080194f8
 800df50:	08019368 	.word	0x08019368

0800df54 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 800df54:	b580      	push	{r7, lr}
 800df56:	b088      	sub	sp, #32
 800df58:	af00      	add	r7, sp, #0
 800df5a:	60f8      	str	r0, [r7, #12]
 800df5c:	460b      	mov	r3, r1
 800df5e:	607a      	str	r2, [r7, #4]
 800df60:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 800df62:	2300      	movs	r3, #0
 800df64:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800df66:	68fb      	ldr	r3, [r7, #12]
 800df68:	2b00      	cmp	r3, #0
 800df6a:	d109      	bne.n	800df80 <tcp_listen_with_backlog_and_err+0x2c>
 800df6c:	4b47      	ldr	r3, [pc, #284]	@ (800e08c <tcp_listen_with_backlog_and_err+0x138>)
 800df6e:	f240 3259 	movw	r2, #857	@ 0x359
 800df72:	4947      	ldr	r1, [pc, #284]	@ (800e090 <tcp_listen_with_backlog_and_err+0x13c>)
 800df74:	4847      	ldr	r0, [pc, #284]	@ (800e094 <tcp_listen_with_backlog_and_err+0x140>)
 800df76:	f008 fe57 	bl	8016c28 <iprintf>
 800df7a:	23f0      	movs	r3, #240	@ 0xf0
 800df7c:	76fb      	strb	r3, [r7, #27]
 800df7e:	e079      	b.n	800e074 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800df80:	68fb      	ldr	r3, [r7, #12]
 800df82:	7d1b      	ldrb	r3, [r3, #20]
 800df84:	2b00      	cmp	r3, #0
 800df86:	d009      	beq.n	800df9c <tcp_listen_with_backlog_and_err+0x48>
 800df88:	4b40      	ldr	r3, [pc, #256]	@ (800e08c <tcp_listen_with_backlog_and_err+0x138>)
 800df8a:	f240 325a 	movw	r2, #858	@ 0x35a
 800df8e:	4942      	ldr	r1, [pc, #264]	@ (800e098 <tcp_listen_with_backlog_and_err+0x144>)
 800df90:	4840      	ldr	r0, [pc, #256]	@ (800e094 <tcp_listen_with_backlog_and_err+0x140>)
 800df92:	f008 fe49 	bl	8016c28 <iprintf>
 800df96:	23f1      	movs	r3, #241	@ 0xf1
 800df98:	76fb      	strb	r3, [r7, #27]
 800df9a:	e06b      	b.n	800e074 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 800df9c:	68fb      	ldr	r3, [r7, #12]
 800df9e:	7d1b      	ldrb	r3, [r3, #20]
 800dfa0:	2b01      	cmp	r3, #1
 800dfa2:	d104      	bne.n	800dfae <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 800dfa4:	68fb      	ldr	r3, [r7, #12]
 800dfa6:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 800dfa8:	23f7      	movs	r3, #247	@ 0xf7
 800dfaa:	76fb      	strb	r3, [r7, #27]
    goto done;
 800dfac:	e062      	b.n	800e074 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800dfae:	2002      	movs	r0, #2
 800dfb0:	f7fe f9e0 	bl	800c374 <memp_malloc>
 800dfb4:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 800dfb6:	69fb      	ldr	r3, [r7, #28]
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	d102      	bne.n	800dfc2 <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 800dfbc:	23ff      	movs	r3, #255	@ 0xff
 800dfbe:	76fb      	strb	r3, [r7, #27]
    goto done;
 800dfc0:	e058      	b.n	800e074 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 800dfc2:	68fb      	ldr	r3, [r7, #12]
 800dfc4:	691a      	ldr	r2, [r3, #16]
 800dfc6:	69fb      	ldr	r3, [r7, #28]
 800dfc8:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 800dfca:	68fb      	ldr	r3, [r7, #12]
 800dfcc:	8ada      	ldrh	r2, [r3, #22]
 800dfce:	69fb      	ldr	r3, [r7, #28]
 800dfd0:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 800dfd2:	69fb      	ldr	r3, [r7, #28]
 800dfd4:	2201      	movs	r2, #1
 800dfd6:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 800dfd8:	68fb      	ldr	r3, [r7, #12]
 800dfda:	7d5a      	ldrb	r2, [r3, #21]
 800dfdc:	69fb      	ldr	r3, [r7, #28]
 800dfde:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 800dfe0:	68fb      	ldr	r3, [r7, #12]
 800dfe2:	7a5a      	ldrb	r2, [r3, #9]
 800dfe4:	69fb      	ldr	r3, [r7, #28]
 800dfe6:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 800dfe8:	69fb      	ldr	r3, [r7, #28]
 800dfea:	2200      	movs	r2, #0
 800dfec:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 800dfee:	68fb      	ldr	r3, [r7, #12]
 800dff0:	7ada      	ldrb	r2, [r3, #11]
 800dff2:	69fb      	ldr	r3, [r7, #28]
 800dff4:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 800dff6:	68fb      	ldr	r3, [r7, #12]
 800dff8:	7a9a      	ldrb	r2, [r3, #10]
 800dffa:	69fb      	ldr	r3, [r7, #28]
 800dffc:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800dffe:	68fb      	ldr	r3, [r7, #12]
 800e000:	681a      	ldr	r2, [r3, #0]
 800e002:	69fb      	ldr	r3, [r7, #28]
 800e004:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 800e006:	68fb      	ldr	r3, [r7, #12]
 800e008:	8adb      	ldrh	r3, [r3, #22]
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	d021      	beq.n	800e052 <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800e00e:	4b23      	ldr	r3, [pc, #140]	@ (800e09c <tcp_listen_with_backlog_and_err+0x148>)
 800e010:	681b      	ldr	r3, [r3, #0]
 800e012:	68fa      	ldr	r2, [r7, #12]
 800e014:	429a      	cmp	r2, r3
 800e016:	d105      	bne.n	800e024 <tcp_listen_with_backlog_and_err+0xd0>
 800e018:	4b20      	ldr	r3, [pc, #128]	@ (800e09c <tcp_listen_with_backlog_and_err+0x148>)
 800e01a:	681b      	ldr	r3, [r3, #0]
 800e01c:	68db      	ldr	r3, [r3, #12]
 800e01e:	4a1f      	ldr	r2, [pc, #124]	@ (800e09c <tcp_listen_with_backlog_and_err+0x148>)
 800e020:	6013      	str	r3, [r2, #0]
 800e022:	e013      	b.n	800e04c <tcp_listen_with_backlog_and_err+0xf8>
 800e024:	4b1d      	ldr	r3, [pc, #116]	@ (800e09c <tcp_listen_with_backlog_and_err+0x148>)
 800e026:	681b      	ldr	r3, [r3, #0]
 800e028:	617b      	str	r3, [r7, #20]
 800e02a:	e00c      	b.n	800e046 <tcp_listen_with_backlog_and_err+0xf2>
 800e02c:	697b      	ldr	r3, [r7, #20]
 800e02e:	68db      	ldr	r3, [r3, #12]
 800e030:	68fa      	ldr	r2, [r7, #12]
 800e032:	429a      	cmp	r2, r3
 800e034:	d104      	bne.n	800e040 <tcp_listen_with_backlog_and_err+0xec>
 800e036:	68fb      	ldr	r3, [r7, #12]
 800e038:	68da      	ldr	r2, [r3, #12]
 800e03a:	697b      	ldr	r3, [r7, #20]
 800e03c:	60da      	str	r2, [r3, #12]
 800e03e:	e005      	b.n	800e04c <tcp_listen_with_backlog_and_err+0xf8>
 800e040:	697b      	ldr	r3, [r7, #20]
 800e042:	68db      	ldr	r3, [r3, #12]
 800e044:	617b      	str	r3, [r7, #20]
 800e046:	697b      	ldr	r3, [r7, #20]
 800e048:	2b00      	cmp	r3, #0
 800e04a:	d1ef      	bne.n	800e02c <tcp_listen_with_backlog_and_err+0xd8>
 800e04c:	68fb      	ldr	r3, [r7, #12]
 800e04e:	2200      	movs	r2, #0
 800e050:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 800e052:	68f8      	ldr	r0, [r7, #12]
 800e054:	f7ff fb76 	bl	800d744 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 800e058:	69fb      	ldr	r3, [r7, #28]
 800e05a:	4a11      	ldr	r2, [pc, #68]	@ (800e0a0 <tcp_listen_with_backlog_and_err+0x14c>)
 800e05c:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800e05e:	4b11      	ldr	r3, [pc, #68]	@ (800e0a4 <tcp_listen_with_backlog_and_err+0x150>)
 800e060:	681a      	ldr	r2, [r3, #0]
 800e062:	69fb      	ldr	r3, [r7, #28]
 800e064:	60da      	str	r2, [r3, #12]
 800e066:	4a0f      	ldr	r2, [pc, #60]	@ (800e0a4 <tcp_listen_with_backlog_and_err+0x150>)
 800e068:	69fb      	ldr	r3, [r7, #28]
 800e06a:	6013      	str	r3, [r2, #0]
 800e06c:	f005 fbe6 	bl	801383c <tcp_timer_needed>
  res = ERR_OK;
 800e070:	2300      	movs	r3, #0
 800e072:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	2b00      	cmp	r3, #0
 800e078:	d002      	beq.n	800e080 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	7efa      	ldrb	r2, [r7, #27]
 800e07e:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 800e080:	69fb      	ldr	r3, [r7, #28]
}
 800e082:	4618      	mov	r0, r3
 800e084:	3720      	adds	r7, #32
 800e086:	46bd      	mov	sp, r7
 800e088:	bd80      	pop	{r7, pc}
 800e08a:	bf00      	nop
 800e08c:	08019324 	.word	0x08019324
 800e090:	08019518 	.word	0x08019518
 800e094:	08019368 	.word	0x08019368
 800e098:	08019548 	.word	0x08019548
 800e09c:	2000f3ec 	.word	0x2000f3ec
 800e0a0:	0800df15 	.word	0x0800df15
 800e0a4:	2000f3f0 	.word	0x2000f3f0

0800e0a8 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800e0a8:	b580      	push	{r7, lr}
 800e0aa:	b084      	sub	sp, #16
 800e0ac:	af00      	add	r7, sp, #0
 800e0ae:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	2b00      	cmp	r3, #0
 800e0b4:	d106      	bne.n	800e0c4 <tcp_update_rcv_ann_wnd+0x1c>
 800e0b6:	4b25      	ldr	r3, [pc, #148]	@ (800e14c <tcp_update_rcv_ann_wnd+0xa4>)
 800e0b8:	f240 32a6 	movw	r2, #934	@ 0x3a6
 800e0bc:	4924      	ldr	r1, [pc, #144]	@ (800e150 <tcp_update_rcv_ann_wnd+0xa8>)
 800e0be:	4825      	ldr	r0, [pc, #148]	@ (800e154 <tcp_update_rcv_ann_wnd+0xac>)
 800e0c0:	f008 fdb2 	bl	8016c28 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e0c8:	687a      	ldr	r2, [r7, #4]
 800e0ca:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800e0cc:	4413      	add	r3, r2
 800e0ce:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e0d4:	687a      	ldr	r2, [r7, #4]
 800e0d6:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 800e0d8:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 800e0dc:	bf28      	it	cs
 800e0de:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 800e0e2:	b292      	uxth	r2, r2
 800e0e4:	4413      	add	r3, r2
 800e0e6:	68fa      	ldr	r2, [r7, #12]
 800e0e8:	1ad3      	subs	r3, r2, r3
 800e0ea:	2b00      	cmp	r3, #0
 800e0ec:	db08      	blt.n	800e100 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e0fa:	68fa      	ldr	r2, [r7, #12]
 800e0fc:	1ad3      	subs	r3, r2, r3
 800e0fe:	e020      	b.n	800e142 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e108:	1ad3      	subs	r3, r2, r3
 800e10a:	2b00      	cmp	r3, #0
 800e10c:	dd03      	ble.n	800e116 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	2200      	movs	r2, #0
 800e112:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800e114:	e014      	b.n	800e140 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e11e:	1ad3      	subs	r3, r2, r3
 800e120:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800e122:	68bb      	ldr	r3, [r7, #8]
 800e124:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e128:	d306      	bcc.n	800e138 <tcp_update_rcv_ann_wnd+0x90>
 800e12a:	4b08      	ldr	r3, [pc, #32]	@ (800e14c <tcp_update_rcv_ann_wnd+0xa4>)
 800e12c:	f240 32b6 	movw	r2, #950	@ 0x3b6
 800e130:	4909      	ldr	r1, [pc, #36]	@ (800e158 <tcp_update_rcv_ann_wnd+0xb0>)
 800e132:	4808      	ldr	r0, [pc, #32]	@ (800e154 <tcp_update_rcv_ann_wnd+0xac>)
 800e134:	f008 fd78 	bl	8016c28 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800e138:	68bb      	ldr	r3, [r7, #8]
 800e13a:	b29a      	uxth	r2, r3
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 800e140:	2300      	movs	r3, #0
  }
}
 800e142:	4618      	mov	r0, r3
 800e144:	3710      	adds	r7, #16
 800e146:	46bd      	mov	sp, r7
 800e148:	bd80      	pop	{r7, pc}
 800e14a:	bf00      	nop
 800e14c:	08019324 	.word	0x08019324
 800e150:	08019580 	.word	0x08019580
 800e154:	08019368 	.word	0x08019368
 800e158:	080195a4 	.word	0x080195a4

0800e15c <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800e15c:	b580      	push	{r7, lr}
 800e15e:	b084      	sub	sp, #16
 800e160:	af00      	add	r7, sp, #0
 800e162:	6078      	str	r0, [r7, #4]
 800e164:	460b      	mov	r3, r1
 800e166:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	2b00      	cmp	r3, #0
 800e16c:	d107      	bne.n	800e17e <tcp_recved+0x22>
 800e16e:	4b1f      	ldr	r3, [pc, #124]	@ (800e1ec <tcp_recved+0x90>)
 800e170:	f240 32cf 	movw	r2, #975	@ 0x3cf
 800e174:	491e      	ldr	r1, [pc, #120]	@ (800e1f0 <tcp_recved+0x94>)
 800e176:	481f      	ldr	r0, [pc, #124]	@ (800e1f4 <tcp_recved+0x98>)
 800e178:	f008 fd56 	bl	8016c28 <iprintf>
 800e17c:	e032      	b.n	800e1e4 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	7d1b      	ldrb	r3, [r3, #20]
 800e182:	2b01      	cmp	r3, #1
 800e184:	d106      	bne.n	800e194 <tcp_recved+0x38>
 800e186:	4b19      	ldr	r3, [pc, #100]	@ (800e1ec <tcp_recved+0x90>)
 800e188:	f240 32d2 	movw	r2, #978	@ 0x3d2
 800e18c:	491a      	ldr	r1, [pc, #104]	@ (800e1f8 <tcp_recved+0x9c>)
 800e18e:	4819      	ldr	r0, [pc, #100]	@ (800e1f4 <tcp_recved+0x98>)
 800e190:	f008 fd4a 	bl	8016c28 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800e198:	887b      	ldrh	r3, [r7, #2]
 800e19a:	4413      	add	r3, r2
 800e19c:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800e19e:	89fb      	ldrh	r3, [r7, #14]
 800e1a0:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800e1a4:	d804      	bhi.n	800e1b0 <tcp_recved+0x54>
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e1aa:	89fa      	ldrh	r2, [r7, #14]
 800e1ac:	429a      	cmp	r2, r3
 800e1ae:	d204      	bcs.n	800e1ba <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800e1b6:	851a      	strh	r2, [r3, #40]	@ 0x28
 800e1b8:	e002      	b.n	800e1c0 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	89fa      	ldrh	r2, [r7, #14]
 800e1be:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800e1c0:	6878      	ldr	r0, [r7, #4]
 800e1c2:	f7ff ff71 	bl	800e0a8 <tcp_update_rcv_ann_wnd>
 800e1c6:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800e1c8:	68bb      	ldr	r3, [r7, #8]
 800e1ca:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 800e1ce:	d309      	bcc.n	800e1e4 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	8b5b      	ldrh	r3, [r3, #26]
 800e1d4:	f043 0302 	orr.w	r3, r3, #2
 800e1d8:	b29a      	uxth	r2, r3
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800e1de:	6878      	ldr	r0, [r7, #4]
 800e1e0:	f004 fbb6 	bl	8012950 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800e1e4:	3710      	adds	r7, #16
 800e1e6:	46bd      	mov	sp, r7
 800e1e8:	bd80      	pop	{r7, pc}
 800e1ea:	bf00      	nop
 800e1ec:	08019324 	.word	0x08019324
 800e1f0:	080195c0 	.word	0x080195c0
 800e1f4:	08019368 	.word	0x08019368
 800e1f8:	080195d8 	.word	0x080195d8

0800e1fc <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800e1fc:	b480      	push	{r7}
 800e1fe:	b083      	sub	sp, #12
 800e200:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800e202:	2300      	movs	r3, #0
 800e204:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800e206:	4b1e      	ldr	r3, [pc, #120]	@ (800e280 <tcp_new_port+0x84>)
 800e208:	881b      	ldrh	r3, [r3, #0]
 800e20a:	3301      	adds	r3, #1
 800e20c:	b29a      	uxth	r2, r3
 800e20e:	4b1c      	ldr	r3, [pc, #112]	@ (800e280 <tcp_new_port+0x84>)
 800e210:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800e212:	4b1b      	ldr	r3, [pc, #108]	@ (800e280 <tcp_new_port+0x84>)
 800e214:	881b      	ldrh	r3, [r3, #0]
 800e216:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e21a:	4293      	cmp	r3, r2
 800e21c:	d103      	bne.n	800e226 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800e21e:	4b18      	ldr	r3, [pc, #96]	@ (800e280 <tcp_new_port+0x84>)
 800e220:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 800e224:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800e226:	2300      	movs	r3, #0
 800e228:	71fb      	strb	r3, [r7, #7]
 800e22a:	e01e      	b.n	800e26a <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800e22c:	79fb      	ldrb	r3, [r7, #7]
 800e22e:	4a15      	ldr	r2, [pc, #84]	@ (800e284 <tcp_new_port+0x88>)
 800e230:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e234:	681b      	ldr	r3, [r3, #0]
 800e236:	603b      	str	r3, [r7, #0]
 800e238:	e011      	b.n	800e25e <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800e23a:	683b      	ldr	r3, [r7, #0]
 800e23c:	8ada      	ldrh	r2, [r3, #22]
 800e23e:	4b10      	ldr	r3, [pc, #64]	@ (800e280 <tcp_new_port+0x84>)
 800e240:	881b      	ldrh	r3, [r3, #0]
 800e242:	429a      	cmp	r2, r3
 800e244:	d108      	bne.n	800e258 <tcp_new_port+0x5c>
        n++;
 800e246:	88bb      	ldrh	r3, [r7, #4]
 800e248:	3301      	adds	r3, #1
 800e24a:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800e24c:	88bb      	ldrh	r3, [r7, #4]
 800e24e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e252:	d3d8      	bcc.n	800e206 <tcp_new_port+0xa>
          return 0;
 800e254:	2300      	movs	r3, #0
 800e256:	e00d      	b.n	800e274 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800e258:	683b      	ldr	r3, [r7, #0]
 800e25a:	68db      	ldr	r3, [r3, #12]
 800e25c:	603b      	str	r3, [r7, #0]
 800e25e:	683b      	ldr	r3, [r7, #0]
 800e260:	2b00      	cmp	r3, #0
 800e262:	d1ea      	bne.n	800e23a <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800e264:	79fb      	ldrb	r3, [r7, #7]
 800e266:	3301      	adds	r3, #1
 800e268:	71fb      	strb	r3, [r7, #7]
 800e26a:	79fb      	ldrb	r3, [r7, #7]
 800e26c:	2b03      	cmp	r3, #3
 800e26e:	d9dd      	bls.n	800e22c <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800e270:	4b03      	ldr	r3, [pc, #12]	@ (800e280 <tcp_new_port+0x84>)
 800e272:	881b      	ldrh	r3, [r3, #0]
}
 800e274:	4618      	mov	r0, r3
 800e276:	370c      	adds	r7, #12
 800e278:	46bd      	mov	sp, r7
 800e27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e27e:	4770      	bx	lr
 800e280:	20000124 	.word	0x20000124
 800e284:	0801b36c 	.word	0x0801b36c

0800e288 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800e288:	b5b0      	push	{r4, r5, r7, lr}
 800e28a:	b090      	sub	sp, #64	@ 0x40
 800e28c:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800e28e:	2300      	movs	r3, #0
 800e290:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 800e294:	4b95      	ldr	r3, [pc, #596]	@ (800e4ec <tcp_slowtmr+0x264>)
 800e296:	681b      	ldr	r3, [r3, #0]
 800e298:	3301      	adds	r3, #1
 800e29a:	4a94      	ldr	r2, [pc, #592]	@ (800e4ec <tcp_slowtmr+0x264>)
 800e29c:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800e29e:	4b94      	ldr	r3, [pc, #592]	@ (800e4f0 <tcp_slowtmr+0x268>)
 800e2a0:	781b      	ldrb	r3, [r3, #0]
 800e2a2:	3301      	adds	r3, #1
 800e2a4:	b2da      	uxtb	r2, r3
 800e2a6:	4b92      	ldr	r3, [pc, #584]	@ (800e4f0 <tcp_slowtmr+0x268>)
 800e2a8:	701a      	strb	r2, [r3, #0]
 800e2aa:	e000      	b.n	800e2ae <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 800e2ac:	bf00      	nop
  prev = NULL;
 800e2ae:	2300      	movs	r3, #0
 800e2b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 800e2b2:	4b90      	ldr	r3, [pc, #576]	@ (800e4f4 <tcp_slowtmr+0x26c>)
 800e2b4:	681b      	ldr	r3, [r3, #0]
 800e2b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800e2b8:	e2b7      	b.n	800e82a <tcp_slowtmr+0x5a2>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800e2ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e2bc:	7d1b      	ldrb	r3, [r3, #20]
 800e2be:	2b00      	cmp	r3, #0
 800e2c0:	d106      	bne.n	800e2d0 <tcp_slowtmr+0x48>
 800e2c2:	4b8d      	ldr	r3, [pc, #564]	@ (800e4f8 <tcp_slowtmr+0x270>)
 800e2c4:	f240 42be 	movw	r2, #1214	@ 0x4be
 800e2c8:	498c      	ldr	r1, [pc, #560]	@ (800e4fc <tcp_slowtmr+0x274>)
 800e2ca:	488d      	ldr	r0, [pc, #564]	@ (800e500 <tcp_slowtmr+0x278>)
 800e2cc:	f008 fcac 	bl	8016c28 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800e2d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e2d2:	7d1b      	ldrb	r3, [r3, #20]
 800e2d4:	2b01      	cmp	r3, #1
 800e2d6:	d106      	bne.n	800e2e6 <tcp_slowtmr+0x5e>
 800e2d8:	4b87      	ldr	r3, [pc, #540]	@ (800e4f8 <tcp_slowtmr+0x270>)
 800e2da:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 800e2de:	4989      	ldr	r1, [pc, #548]	@ (800e504 <tcp_slowtmr+0x27c>)
 800e2e0:	4887      	ldr	r0, [pc, #540]	@ (800e500 <tcp_slowtmr+0x278>)
 800e2e2:	f008 fca1 	bl	8016c28 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800e2e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e2e8:	7d1b      	ldrb	r3, [r3, #20]
 800e2ea:	2b0a      	cmp	r3, #10
 800e2ec:	d106      	bne.n	800e2fc <tcp_slowtmr+0x74>
 800e2ee:	4b82      	ldr	r3, [pc, #520]	@ (800e4f8 <tcp_slowtmr+0x270>)
 800e2f0:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 800e2f4:	4984      	ldr	r1, [pc, #528]	@ (800e508 <tcp_slowtmr+0x280>)
 800e2f6:	4882      	ldr	r0, [pc, #520]	@ (800e500 <tcp_slowtmr+0x278>)
 800e2f8:	f008 fc96 	bl	8016c28 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800e2fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e2fe:	7f9a      	ldrb	r2, [r3, #30]
 800e300:	4b7b      	ldr	r3, [pc, #492]	@ (800e4f0 <tcp_slowtmr+0x268>)
 800e302:	781b      	ldrb	r3, [r3, #0]
 800e304:	429a      	cmp	r2, r3
 800e306:	d105      	bne.n	800e314 <tcp_slowtmr+0x8c>
      prev = pcb;
 800e308:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e30a:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800e30c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e30e:	68db      	ldr	r3, [r3, #12]
 800e310:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 800e312:	e28a      	b.n	800e82a <tcp_slowtmr+0x5a2>
    pcb->last_timer = tcp_timer_ctr;
 800e314:	4b76      	ldr	r3, [pc, #472]	@ (800e4f0 <tcp_slowtmr+0x268>)
 800e316:	781a      	ldrb	r2, [r3, #0]
 800e318:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e31a:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 800e31c:	2300      	movs	r3, #0
 800e31e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 800e322:	2300      	movs	r3, #0
 800e324:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800e328:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e32a:	7d1b      	ldrb	r3, [r3, #20]
 800e32c:	2b02      	cmp	r3, #2
 800e32e:	d10a      	bne.n	800e346 <tcp_slowtmr+0xbe>
 800e330:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e332:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800e336:	2b05      	cmp	r3, #5
 800e338:	d905      	bls.n	800e346 <tcp_slowtmr+0xbe>
      ++pcb_remove;
 800e33a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e33e:	3301      	adds	r3, #1
 800e340:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800e344:	e11e      	b.n	800e584 <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800e346:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e348:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800e34c:	2b0b      	cmp	r3, #11
 800e34e:	d905      	bls.n	800e35c <tcp_slowtmr+0xd4>
      ++pcb_remove;
 800e350:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e354:	3301      	adds	r3, #1
 800e356:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800e35a:	e113      	b.n	800e584 <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 800e35c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e35e:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 800e362:	2b00      	cmp	r3, #0
 800e364:	d075      	beq.n	800e452 <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800e366:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e368:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e36a:	2b00      	cmp	r3, #0
 800e36c:	d006      	beq.n	800e37c <tcp_slowtmr+0xf4>
 800e36e:	4b62      	ldr	r3, [pc, #392]	@ (800e4f8 <tcp_slowtmr+0x270>)
 800e370:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 800e374:	4965      	ldr	r1, [pc, #404]	@ (800e50c <tcp_slowtmr+0x284>)
 800e376:	4862      	ldr	r0, [pc, #392]	@ (800e500 <tcp_slowtmr+0x278>)
 800e378:	f008 fc56 	bl	8016c28 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800e37c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e37e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e380:	2b00      	cmp	r3, #0
 800e382:	d106      	bne.n	800e392 <tcp_slowtmr+0x10a>
 800e384:	4b5c      	ldr	r3, [pc, #368]	@ (800e4f8 <tcp_slowtmr+0x270>)
 800e386:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 800e38a:	4961      	ldr	r1, [pc, #388]	@ (800e510 <tcp_slowtmr+0x288>)
 800e38c:	485c      	ldr	r0, [pc, #368]	@ (800e500 <tcp_slowtmr+0x278>)
 800e38e:	f008 fc4b 	bl	8016c28 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800e392:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e394:	f893 30a2 	ldrb.w	r3, [r3, #162]	@ 0xa2
 800e398:	2b0b      	cmp	r3, #11
 800e39a:	d905      	bls.n	800e3a8 <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 800e39c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e3a0:	3301      	adds	r3, #1
 800e3a2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800e3a6:	e0ed      	b.n	800e584 <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800e3a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e3aa:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 800e3ae:	3b01      	subs	r3, #1
 800e3b0:	4a58      	ldr	r2, [pc, #352]	@ (800e514 <tcp_slowtmr+0x28c>)
 800e3b2:	5cd3      	ldrb	r3, [r2, r3]
 800e3b4:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800e3b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e3b8:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 800e3bc:	7c7a      	ldrb	r2, [r7, #17]
 800e3be:	429a      	cmp	r2, r3
 800e3c0:	d907      	bls.n	800e3d2 <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 800e3c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e3c4:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 800e3c8:	3301      	adds	r3, #1
 800e3ca:	b2da      	uxtb	r2, r3
 800e3cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e3ce:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
          if (pcb->persist_cnt >= backoff_cnt) {
 800e3d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e3d4:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 800e3d8:	7c7a      	ldrb	r2, [r7, #17]
 800e3da:	429a      	cmp	r2, r3
 800e3dc:	f200 80d2 	bhi.w	800e584 <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 800e3e0:	2301      	movs	r3, #1
 800e3e2:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 800e3e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e3e6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800e3ea:	2b00      	cmp	r3, #0
 800e3ec:	d108      	bne.n	800e400 <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800e3ee:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e3f0:	f005 f956 	bl	80136a0 <tcp_zero_window_probe>
 800e3f4:	4603      	mov	r3, r0
 800e3f6:	2b00      	cmp	r3, #0
 800e3f8:	d014      	beq.n	800e424 <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 800e3fa:	2300      	movs	r3, #0
 800e3fc:	623b      	str	r3, [r7, #32]
 800e3fe:	e011      	b.n	800e424 <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800e400:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e402:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800e406:	4619      	mov	r1, r3
 800e408:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e40a:	f004 f81b 	bl	8012444 <tcp_split_unsent_seg>
 800e40e:	4603      	mov	r3, r0
 800e410:	2b00      	cmp	r3, #0
 800e412:	d107      	bne.n	800e424 <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 800e414:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e416:	f004 fa9b 	bl	8012950 <tcp_output>
 800e41a:	4603      	mov	r3, r0
 800e41c:	2b00      	cmp	r3, #0
 800e41e:	d101      	bne.n	800e424 <tcp_slowtmr+0x19c>
                  next_slot = 0;
 800e420:	2300      	movs	r3, #0
 800e422:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 800e424:	6a3b      	ldr	r3, [r7, #32]
 800e426:	2b00      	cmp	r3, #0
 800e428:	f000 80ac 	beq.w	800e584 <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 800e42c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e42e:	2200      	movs	r2, #0
 800e430:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800e434:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e436:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 800e43a:	2b06      	cmp	r3, #6
 800e43c:	f200 80a2 	bhi.w	800e584 <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 800e440:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e442:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 800e446:	3301      	adds	r3, #1
 800e448:	b2da      	uxtb	r2, r3
 800e44a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e44c:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1
 800e450:	e098      	b.n	800e584 <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800e452:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e454:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800e458:	2b00      	cmp	r3, #0
 800e45a:	db0f      	blt.n	800e47c <tcp_slowtmr+0x1f4>
 800e45c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e45e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800e462:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800e466:	4293      	cmp	r3, r2
 800e468:	d008      	beq.n	800e47c <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 800e46a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e46c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800e470:	b29b      	uxth	r3, r3
 800e472:	3301      	adds	r3, #1
 800e474:	b29b      	uxth	r3, r3
 800e476:	b21a      	sxth	r2, r3
 800e478:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e47a:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 800e47c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e47e:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 800e482:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e484:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800e488:	429a      	cmp	r2, r3
 800e48a:	db7b      	blt.n	800e584 <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800e48c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e48e:	f004 fd53 	bl	8012f38 <tcp_rexmit_rto_prepare>
 800e492:	4603      	mov	r3, r0
 800e494:	2b00      	cmp	r3, #0
 800e496:	d007      	beq.n	800e4a8 <tcp_slowtmr+0x220>
 800e498:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e49a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e49c:	2b00      	cmp	r3, #0
 800e49e:	d171      	bne.n	800e584 <tcp_slowtmr+0x2fc>
 800e4a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e4a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	d06d      	beq.n	800e584 <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 800e4a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e4aa:	7d1b      	ldrb	r3, [r3, #20]
 800e4ac:	2b02      	cmp	r3, #2
 800e4ae:	d03a      	beq.n	800e526 <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800e4b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e4b2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800e4b6:	2b0c      	cmp	r3, #12
 800e4b8:	bf28      	it	cs
 800e4ba:	230c      	movcs	r3, #12
 800e4bc:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800e4be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e4c0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800e4c4:	10db      	asrs	r3, r3, #3
 800e4c6:	b21b      	sxth	r3, r3
 800e4c8:	461a      	mov	r2, r3
 800e4ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e4cc:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800e4d0:	4413      	add	r3, r2
 800e4d2:	7efa      	ldrb	r2, [r7, #27]
 800e4d4:	4910      	ldr	r1, [pc, #64]	@ (800e518 <tcp_slowtmr+0x290>)
 800e4d6:	5c8a      	ldrb	r2, [r1, r2]
 800e4d8:	4093      	lsls	r3, r2
 800e4da:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800e4dc:	697b      	ldr	r3, [r7, #20]
 800e4de:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 800e4e2:	4293      	cmp	r3, r2
 800e4e4:	dc1a      	bgt.n	800e51c <tcp_slowtmr+0x294>
 800e4e6:	697b      	ldr	r3, [r7, #20]
 800e4e8:	b21a      	sxth	r2, r3
 800e4ea:	e019      	b.n	800e520 <tcp_slowtmr+0x298>
 800e4ec:	2000f3e8 	.word	0x2000f3e8
 800e4f0:	2000f3fe 	.word	0x2000f3fe
 800e4f4:	2000f3f4 	.word	0x2000f3f4
 800e4f8:	08019324 	.word	0x08019324
 800e4fc:	08019668 	.word	0x08019668
 800e500:	08019368 	.word	0x08019368
 800e504:	08019694 	.word	0x08019694
 800e508:	080196c0 	.word	0x080196c0
 800e50c:	080196f0 	.word	0x080196f0
 800e510:	08019724 	.word	0x08019724
 800e514:	0801b364 	.word	0x0801b364
 800e518:	0801b354 	.word	0x0801b354
 800e51c:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800e520:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e522:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 800e526:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e528:	2200      	movs	r2, #0
 800e52a:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800e52c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e52e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800e532:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e534:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800e538:	4293      	cmp	r3, r2
 800e53a:	bf28      	it	cs
 800e53c:	4613      	movcs	r3, r2
 800e53e:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800e540:	8a7b      	ldrh	r3, [r7, #18]
 800e542:	085b      	lsrs	r3, r3, #1
 800e544:	b29a      	uxth	r2, r3
 800e546:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e548:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800e54c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e54e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800e552:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e554:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e556:	005b      	lsls	r3, r3, #1
 800e558:	b29b      	uxth	r3, r3
 800e55a:	429a      	cmp	r2, r3
 800e55c:	d206      	bcs.n	800e56c <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800e55e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e560:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e562:	005b      	lsls	r3, r3, #1
 800e564:	b29a      	uxth	r2, r3
 800e566:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e568:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 800e56c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e56e:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 800e570:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e572:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 800e576:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e578:	2200      	movs	r2, #0
 800e57a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 800e57e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e580:	f004 fd4a 	bl	8013018 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 800e584:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e586:	7d1b      	ldrb	r3, [r3, #20]
 800e588:	2b06      	cmp	r3, #6
 800e58a:	d111      	bne.n	800e5b0 <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 800e58c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e58e:	8b5b      	ldrh	r3, [r3, #26]
 800e590:	f003 0310 	and.w	r3, r3, #16
 800e594:	2b00      	cmp	r3, #0
 800e596:	d00b      	beq.n	800e5b0 <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e598:	4b94      	ldr	r3, [pc, #592]	@ (800e7ec <tcp_slowtmr+0x564>)
 800e59a:	681a      	ldr	r2, [r3, #0]
 800e59c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e59e:	6a1b      	ldr	r3, [r3, #32]
 800e5a0:	1ad3      	subs	r3, r2, r3
 800e5a2:	2b28      	cmp	r3, #40	@ 0x28
 800e5a4:	d904      	bls.n	800e5b0 <tcp_slowtmr+0x328>
          ++pcb_remove;
 800e5a6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e5aa:	3301      	adds	r3, #1
 800e5ac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800e5b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e5b2:	7a5b      	ldrb	r3, [r3, #9]
 800e5b4:	f003 0308 	and.w	r3, r3, #8
 800e5b8:	2b00      	cmp	r3, #0
 800e5ba:	d053      	beq.n	800e664 <tcp_slowtmr+0x3dc>
        ((pcb->state == ESTABLISHED) ||
 800e5bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e5be:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800e5c0:	2b04      	cmp	r3, #4
 800e5c2:	d003      	beq.n	800e5cc <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 800e5c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e5c6:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800e5c8:	2b07      	cmp	r3, #7
 800e5ca:	d14b      	bne.n	800e664 <tcp_slowtmr+0x3dc>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e5cc:	4b87      	ldr	r3, [pc, #540]	@ (800e7ec <tcp_slowtmr+0x564>)
 800e5ce:	681a      	ldr	r2, [r3, #0]
 800e5d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e5d2:	6a1b      	ldr	r3, [r3, #32]
 800e5d4:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800e5d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e5d8:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 800e5dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e5de:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800e5e2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e5e4:	f8d0 0098 	ldr.w	r0, [r0, #152]	@ 0x98
 800e5e8:	fb00 f303 	mul.w	r3, r0, r3
 800e5ec:	440b      	add	r3, r1
 800e5ee:	4980      	ldr	r1, [pc, #512]	@ (800e7f0 <tcp_slowtmr+0x568>)
 800e5f0:	fba1 1303 	umull	r1, r3, r1, r3
 800e5f4:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e5f6:	429a      	cmp	r2, r3
 800e5f8:	d90a      	bls.n	800e610 <tcp_slowtmr+0x388>
        ++pcb_remove;
 800e5fa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e5fe:	3301      	adds	r3, #1
 800e600:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 800e604:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e608:	3301      	adds	r3, #1
 800e60a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800e60e:	e029      	b.n	800e664 <tcp_slowtmr+0x3dc>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e610:	4b76      	ldr	r3, [pc, #472]	@ (800e7ec <tcp_slowtmr+0x564>)
 800e612:	681a      	ldr	r2, [r3, #0]
 800e614:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e616:	6a1b      	ldr	r3, [r3, #32]
 800e618:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800e61a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e61c:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 800e620:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e622:	f893 30a3 	ldrb.w	r3, [r3, #163]	@ 0xa3
 800e626:	4618      	mov	r0, r3
 800e628:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e62a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800e62e:	fb00 f303 	mul.w	r3, r0, r3
 800e632:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800e634:	496e      	ldr	r1, [pc, #440]	@ (800e7f0 <tcp_slowtmr+0x568>)
 800e636:	fba1 1303 	umull	r1, r3, r1, r3
 800e63a:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e63c:	429a      	cmp	r2, r3
 800e63e:	d911      	bls.n	800e664 <tcp_slowtmr+0x3dc>
        err = tcp_keepalive(pcb);
 800e640:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e642:	f004 ffed 	bl	8013620 <tcp_keepalive>
 800e646:	4603      	mov	r3, r0
 800e648:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 800e64c:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800e650:	2b00      	cmp	r3, #0
 800e652:	d107      	bne.n	800e664 <tcp_slowtmr+0x3dc>
          pcb->keep_cnt_sent++;
 800e654:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e656:	f893 30a3 	ldrb.w	r3, [r3, #163]	@ 0xa3
 800e65a:	3301      	adds	r3, #1
 800e65c:	b2da      	uxtb	r2, r3
 800e65e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e660:	f883 20a3 	strb.w	r2, [r3, #163]	@ 0xa3
    if (pcb->ooseq != NULL &&
 800e664:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e666:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e668:	2b00      	cmp	r3, #0
 800e66a:	d011      	beq.n	800e690 <tcp_slowtmr+0x408>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800e66c:	4b5f      	ldr	r3, [pc, #380]	@ (800e7ec <tcp_slowtmr+0x564>)
 800e66e:	681a      	ldr	r2, [r3, #0]
 800e670:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e672:	6a1b      	ldr	r3, [r3, #32]
 800e674:	1ad2      	subs	r2, r2, r3
 800e676:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e678:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800e67c:	4619      	mov	r1, r3
 800e67e:	460b      	mov	r3, r1
 800e680:	005b      	lsls	r3, r3, #1
 800e682:	440b      	add	r3, r1
 800e684:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800e686:	429a      	cmp	r2, r3
 800e688:	d302      	bcc.n	800e690 <tcp_slowtmr+0x408>
      tcp_free_ooseq(pcb);
 800e68a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e68c:	f000 feae 	bl	800f3ec <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 800e690:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e692:	7d1b      	ldrb	r3, [r3, #20]
 800e694:	2b03      	cmp	r3, #3
 800e696:	d10b      	bne.n	800e6b0 <tcp_slowtmr+0x428>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e698:	4b54      	ldr	r3, [pc, #336]	@ (800e7ec <tcp_slowtmr+0x564>)
 800e69a:	681a      	ldr	r2, [r3, #0]
 800e69c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e69e:	6a1b      	ldr	r3, [r3, #32]
 800e6a0:	1ad3      	subs	r3, r2, r3
 800e6a2:	2b28      	cmp	r3, #40	@ 0x28
 800e6a4:	d904      	bls.n	800e6b0 <tcp_slowtmr+0x428>
        ++pcb_remove;
 800e6a6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e6aa:	3301      	adds	r3, #1
 800e6ac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 800e6b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e6b2:	7d1b      	ldrb	r3, [r3, #20]
 800e6b4:	2b09      	cmp	r3, #9
 800e6b6:	d10b      	bne.n	800e6d0 <tcp_slowtmr+0x448>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800e6b8:	4b4c      	ldr	r3, [pc, #304]	@ (800e7ec <tcp_slowtmr+0x564>)
 800e6ba:	681a      	ldr	r2, [r3, #0]
 800e6bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e6be:	6a1b      	ldr	r3, [r3, #32]
 800e6c0:	1ad3      	subs	r3, r2, r3
 800e6c2:	2bf0      	cmp	r3, #240	@ 0xf0
 800e6c4:	d904      	bls.n	800e6d0 <tcp_slowtmr+0x448>
        ++pcb_remove;
 800e6c6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e6ca:	3301      	adds	r3, #1
 800e6cc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 800e6d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	d060      	beq.n	800e79a <tcp_slowtmr+0x512>
      tcp_err_fn err_fn = pcb->errf;
 800e6d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e6da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e6de:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 800e6e0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e6e2:	f000 fccf 	bl	800f084 <tcp_pcb_purge>
      if (prev != NULL) {
 800e6e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e6e8:	2b00      	cmp	r3, #0
 800e6ea:	d010      	beq.n	800e70e <tcp_slowtmr+0x486>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800e6ec:	4b41      	ldr	r3, [pc, #260]	@ (800e7f4 <tcp_slowtmr+0x56c>)
 800e6ee:	681b      	ldr	r3, [r3, #0]
 800e6f0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e6f2:	429a      	cmp	r2, r3
 800e6f4:	d106      	bne.n	800e704 <tcp_slowtmr+0x47c>
 800e6f6:	4b40      	ldr	r3, [pc, #256]	@ (800e7f8 <tcp_slowtmr+0x570>)
 800e6f8:	f240 526d 	movw	r2, #1389	@ 0x56d
 800e6fc:	493f      	ldr	r1, [pc, #252]	@ (800e7fc <tcp_slowtmr+0x574>)
 800e6fe:	4840      	ldr	r0, [pc, #256]	@ (800e800 <tcp_slowtmr+0x578>)
 800e700:	f008 fa92 	bl	8016c28 <iprintf>
        prev->next = pcb->next;
 800e704:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e706:	68da      	ldr	r2, [r3, #12]
 800e708:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e70a:	60da      	str	r2, [r3, #12]
 800e70c:	e00f      	b.n	800e72e <tcp_slowtmr+0x4a6>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800e70e:	4b39      	ldr	r3, [pc, #228]	@ (800e7f4 <tcp_slowtmr+0x56c>)
 800e710:	681b      	ldr	r3, [r3, #0]
 800e712:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e714:	429a      	cmp	r2, r3
 800e716:	d006      	beq.n	800e726 <tcp_slowtmr+0x49e>
 800e718:	4b37      	ldr	r3, [pc, #220]	@ (800e7f8 <tcp_slowtmr+0x570>)
 800e71a:	f240 5271 	movw	r2, #1393	@ 0x571
 800e71e:	4939      	ldr	r1, [pc, #228]	@ (800e804 <tcp_slowtmr+0x57c>)
 800e720:	4837      	ldr	r0, [pc, #220]	@ (800e800 <tcp_slowtmr+0x578>)
 800e722:	f008 fa81 	bl	8016c28 <iprintf>
        tcp_active_pcbs = pcb->next;
 800e726:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e728:	68db      	ldr	r3, [r3, #12]
 800e72a:	4a32      	ldr	r2, [pc, #200]	@ (800e7f4 <tcp_slowtmr+0x56c>)
 800e72c:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 800e72e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e732:	2b00      	cmp	r3, #0
 800e734:	d013      	beq.n	800e75e <tcp_slowtmr+0x4d6>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800e736:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e738:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800e73a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e73c:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800e73e:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 800e740:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e742:	3304      	adds	r3, #4
 800e744:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e746:	8ad2      	ldrh	r2, [r2, #22]
 800e748:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e74a:	8b09      	ldrh	r1, [r1, #24]
 800e74c:	9102      	str	r1, [sp, #8]
 800e74e:	9201      	str	r2, [sp, #4]
 800e750:	9300      	str	r3, [sp, #0]
 800e752:	462b      	mov	r3, r5
 800e754:	4622      	mov	r2, r4
 800e756:	4601      	mov	r1, r0
 800e758:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e75a:	f004 fead 	bl	80134b8 <tcp_rst>
      err_arg = pcb->callback_arg;
 800e75e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e760:	691b      	ldr	r3, [r3, #16]
 800e762:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800e764:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e766:	7d1b      	ldrb	r3, [r3, #20]
 800e768:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800e76a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e76c:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800e76e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e770:	68db      	ldr	r3, [r3, #12]
 800e772:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800e774:	6838      	ldr	r0, [r7, #0]
 800e776:	f7fe ffe5 	bl	800d744 <tcp_free>
      tcp_active_pcbs_changed = 0;
 800e77a:	4b23      	ldr	r3, [pc, #140]	@ (800e808 <tcp_slowtmr+0x580>)
 800e77c:	2200      	movs	r2, #0
 800e77e:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800e780:	68fb      	ldr	r3, [r7, #12]
 800e782:	2b00      	cmp	r3, #0
 800e784:	d004      	beq.n	800e790 <tcp_slowtmr+0x508>
 800e786:	68fb      	ldr	r3, [r7, #12]
 800e788:	f06f 010c 	mvn.w	r1, #12
 800e78c:	68b8      	ldr	r0, [r7, #8]
 800e78e:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800e790:	4b1d      	ldr	r3, [pc, #116]	@ (800e808 <tcp_slowtmr+0x580>)
 800e792:	781b      	ldrb	r3, [r3, #0]
 800e794:	2b00      	cmp	r3, #0
 800e796:	d048      	beq.n	800e82a <tcp_slowtmr+0x5a2>
        goto tcp_slowtmr_start;
 800e798:	e589      	b.n	800e2ae <tcp_slowtmr+0x26>
      prev = pcb;
 800e79a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e79c:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800e79e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e7a0:	68db      	ldr	r3, [r3, #12]
 800e7a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 800e7a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e7a6:	7f1b      	ldrb	r3, [r3, #28]
 800e7a8:	3301      	adds	r3, #1
 800e7aa:	b2da      	uxtb	r2, r3
 800e7ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e7ae:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800e7b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e7b2:	7f1a      	ldrb	r2, [r3, #28]
 800e7b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e7b6:	7f5b      	ldrb	r3, [r3, #29]
 800e7b8:	429a      	cmp	r2, r3
 800e7ba:	d336      	bcc.n	800e82a <tcp_slowtmr+0x5a2>
        prev->polltmr = 0;
 800e7bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e7be:	2200      	movs	r2, #0
 800e7c0:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 800e7c2:	4b11      	ldr	r3, [pc, #68]	@ (800e808 <tcp_slowtmr+0x580>)
 800e7c4:	2200      	movs	r2, #0
 800e7c6:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800e7c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e7ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e7ce:	2b00      	cmp	r3, #0
 800e7d0:	d01c      	beq.n	800e80c <tcp_slowtmr+0x584>
 800e7d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e7d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e7d8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e7da:	6912      	ldr	r2, [r2, #16]
 800e7dc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e7de:	4610      	mov	r0, r2
 800e7e0:	4798      	blx	r3
 800e7e2:	4603      	mov	r3, r0
 800e7e4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 800e7e8:	e013      	b.n	800e812 <tcp_slowtmr+0x58a>
 800e7ea:	bf00      	nop
 800e7ec:	2000f3e8 	.word	0x2000f3e8
 800e7f0:	10624dd3 	.word	0x10624dd3
 800e7f4:	2000f3f4 	.word	0x2000f3f4
 800e7f8:	08019324 	.word	0x08019324
 800e7fc:	0801975c 	.word	0x0801975c
 800e800:	08019368 	.word	0x08019368
 800e804:	08019788 	.word	0x08019788
 800e808:	2000f3fc 	.word	0x2000f3fc
 800e80c:	2300      	movs	r3, #0
 800e80e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 800e812:	4b38      	ldr	r3, [pc, #224]	@ (800e8f4 <tcp_slowtmr+0x66c>)
 800e814:	781b      	ldrb	r3, [r3, #0]
 800e816:	2b00      	cmp	r3, #0
 800e818:	f47f ad48 	bne.w	800e2ac <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800e81c:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800e820:	2b00      	cmp	r3, #0
 800e822:	d102      	bne.n	800e82a <tcp_slowtmr+0x5a2>
          tcp_output(prev);
 800e824:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e826:	f004 f893 	bl	8012950 <tcp_output>
  while (pcb != NULL) {
 800e82a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e82c:	2b00      	cmp	r3, #0
 800e82e:	f47f ad44 	bne.w	800e2ba <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800e832:	2300      	movs	r3, #0
 800e834:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 800e836:	4b30      	ldr	r3, [pc, #192]	@ (800e8f8 <tcp_slowtmr+0x670>)
 800e838:	681b      	ldr	r3, [r3, #0]
 800e83a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800e83c:	e052      	b.n	800e8e4 <tcp_slowtmr+0x65c>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800e83e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e840:	7d1b      	ldrb	r3, [r3, #20]
 800e842:	2b0a      	cmp	r3, #10
 800e844:	d006      	beq.n	800e854 <tcp_slowtmr+0x5cc>
 800e846:	4b2d      	ldr	r3, [pc, #180]	@ (800e8fc <tcp_slowtmr+0x674>)
 800e848:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 800e84c:	492c      	ldr	r1, [pc, #176]	@ (800e900 <tcp_slowtmr+0x678>)
 800e84e:	482d      	ldr	r0, [pc, #180]	@ (800e904 <tcp_slowtmr+0x67c>)
 800e850:	f008 f9ea 	bl	8016c28 <iprintf>
    pcb_remove = 0;
 800e854:	2300      	movs	r3, #0
 800e856:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800e85a:	4b2b      	ldr	r3, [pc, #172]	@ (800e908 <tcp_slowtmr+0x680>)
 800e85c:	681a      	ldr	r2, [r3, #0]
 800e85e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e860:	6a1b      	ldr	r3, [r3, #32]
 800e862:	1ad3      	subs	r3, r2, r3
 800e864:	2bf0      	cmp	r3, #240	@ 0xf0
 800e866:	d904      	bls.n	800e872 <tcp_slowtmr+0x5ea>
      ++pcb_remove;
 800e868:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e86c:	3301      	adds	r3, #1
 800e86e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800e872:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e876:	2b00      	cmp	r3, #0
 800e878:	d02f      	beq.n	800e8da <tcp_slowtmr+0x652>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800e87a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e87c:	f000 fc02 	bl	800f084 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800e880:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e882:	2b00      	cmp	r3, #0
 800e884:	d010      	beq.n	800e8a8 <tcp_slowtmr+0x620>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800e886:	4b1c      	ldr	r3, [pc, #112]	@ (800e8f8 <tcp_slowtmr+0x670>)
 800e888:	681b      	ldr	r3, [r3, #0]
 800e88a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e88c:	429a      	cmp	r2, r3
 800e88e:	d106      	bne.n	800e89e <tcp_slowtmr+0x616>
 800e890:	4b1a      	ldr	r3, [pc, #104]	@ (800e8fc <tcp_slowtmr+0x674>)
 800e892:	f240 52af 	movw	r2, #1455	@ 0x5af
 800e896:	491d      	ldr	r1, [pc, #116]	@ (800e90c <tcp_slowtmr+0x684>)
 800e898:	481a      	ldr	r0, [pc, #104]	@ (800e904 <tcp_slowtmr+0x67c>)
 800e89a:	f008 f9c5 	bl	8016c28 <iprintf>
        prev->next = pcb->next;
 800e89e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e8a0:	68da      	ldr	r2, [r3, #12]
 800e8a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e8a4:	60da      	str	r2, [r3, #12]
 800e8a6:	e00f      	b.n	800e8c8 <tcp_slowtmr+0x640>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800e8a8:	4b13      	ldr	r3, [pc, #76]	@ (800e8f8 <tcp_slowtmr+0x670>)
 800e8aa:	681b      	ldr	r3, [r3, #0]
 800e8ac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e8ae:	429a      	cmp	r2, r3
 800e8b0:	d006      	beq.n	800e8c0 <tcp_slowtmr+0x638>
 800e8b2:	4b12      	ldr	r3, [pc, #72]	@ (800e8fc <tcp_slowtmr+0x674>)
 800e8b4:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 800e8b8:	4915      	ldr	r1, [pc, #84]	@ (800e910 <tcp_slowtmr+0x688>)
 800e8ba:	4812      	ldr	r0, [pc, #72]	@ (800e904 <tcp_slowtmr+0x67c>)
 800e8bc:	f008 f9b4 	bl	8016c28 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800e8c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e8c2:	68db      	ldr	r3, [r3, #12]
 800e8c4:	4a0c      	ldr	r2, [pc, #48]	@ (800e8f8 <tcp_slowtmr+0x670>)
 800e8c6:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800e8c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e8ca:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800e8cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e8ce:	68db      	ldr	r3, [r3, #12]
 800e8d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800e8d2:	69f8      	ldr	r0, [r7, #28]
 800e8d4:	f7fe ff36 	bl	800d744 <tcp_free>
 800e8d8:	e004      	b.n	800e8e4 <tcp_slowtmr+0x65c>
    } else {
      prev = pcb;
 800e8da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e8dc:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800e8de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e8e0:	68db      	ldr	r3, [r3, #12]
 800e8e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800e8e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e8e6:	2b00      	cmp	r3, #0
 800e8e8:	d1a9      	bne.n	800e83e <tcp_slowtmr+0x5b6>
    }
  }
}
 800e8ea:	bf00      	nop
 800e8ec:	bf00      	nop
 800e8ee:	3730      	adds	r7, #48	@ 0x30
 800e8f0:	46bd      	mov	sp, r7
 800e8f2:	bdb0      	pop	{r4, r5, r7, pc}
 800e8f4:	2000f3fc 	.word	0x2000f3fc
 800e8f8:	2000f3f8 	.word	0x2000f3f8
 800e8fc:	08019324 	.word	0x08019324
 800e900:	080197b4 	.word	0x080197b4
 800e904:	08019368 	.word	0x08019368
 800e908:	2000f3e8 	.word	0x2000f3e8
 800e90c:	080197e4 	.word	0x080197e4
 800e910:	0801980c 	.word	0x0801980c

0800e914 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800e914:	b580      	push	{r7, lr}
 800e916:	b082      	sub	sp, #8
 800e918:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800e91a:	4b2d      	ldr	r3, [pc, #180]	@ (800e9d0 <tcp_fasttmr+0xbc>)
 800e91c:	781b      	ldrb	r3, [r3, #0]
 800e91e:	3301      	adds	r3, #1
 800e920:	b2da      	uxtb	r2, r3
 800e922:	4b2b      	ldr	r3, [pc, #172]	@ (800e9d0 <tcp_fasttmr+0xbc>)
 800e924:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800e926:	4b2b      	ldr	r3, [pc, #172]	@ (800e9d4 <tcp_fasttmr+0xc0>)
 800e928:	681b      	ldr	r3, [r3, #0]
 800e92a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800e92c:	e048      	b.n	800e9c0 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	7f9a      	ldrb	r2, [r3, #30]
 800e932:	4b27      	ldr	r3, [pc, #156]	@ (800e9d0 <tcp_fasttmr+0xbc>)
 800e934:	781b      	ldrb	r3, [r3, #0]
 800e936:	429a      	cmp	r2, r3
 800e938:	d03f      	beq.n	800e9ba <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800e93a:	4b25      	ldr	r3, [pc, #148]	@ (800e9d0 <tcp_fasttmr+0xbc>)
 800e93c:	781a      	ldrb	r2, [r3, #0]
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	8b5b      	ldrh	r3, [r3, #26]
 800e946:	f003 0301 	and.w	r3, r3, #1
 800e94a:	2b00      	cmp	r3, #0
 800e94c:	d010      	beq.n	800e970 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	8b5b      	ldrh	r3, [r3, #26]
 800e952:	f043 0302 	orr.w	r3, r3, #2
 800e956:	b29a      	uxth	r2, r3
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800e95c:	6878      	ldr	r0, [r7, #4]
 800e95e:	f003 fff7 	bl	8012950 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	8b5b      	ldrh	r3, [r3, #26]
 800e966:	f023 0303 	bic.w	r3, r3, #3
 800e96a:	b29a      	uxth	r2, r3
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	8b5b      	ldrh	r3, [r3, #26]
 800e974:	f003 0308 	and.w	r3, r3, #8
 800e978:	2b00      	cmp	r3, #0
 800e97a:	d009      	beq.n	800e990 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	8b5b      	ldrh	r3, [r3, #26]
 800e980:	f023 0308 	bic.w	r3, r3, #8
 800e984:	b29a      	uxth	r2, r3
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800e98a:	6878      	ldr	r0, [r7, #4]
 800e98c:	f7ff f86e 	bl	800da6c <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	68db      	ldr	r3, [r3, #12]
 800e994:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e99a:	2b00      	cmp	r3, #0
 800e99c:	d00a      	beq.n	800e9b4 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800e99e:	4b0e      	ldr	r3, [pc, #56]	@ (800e9d8 <tcp_fasttmr+0xc4>)
 800e9a0:	2200      	movs	r2, #0
 800e9a2:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800e9a4:	6878      	ldr	r0, [r7, #4]
 800e9a6:	f000 f819 	bl	800e9dc <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800e9aa:	4b0b      	ldr	r3, [pc, #44]	@ (800e9d8 <tcp_fasttmr+0xc4>)
 800e9ac:	781b      	ldrb	r3, [r3, #0]
 800e9ae:	2b00      	cmp	r3, #0
 800e9b0:	d000      	beq.n	800e9b4 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800e9b2:	e7b8      	b.n	800e926 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800e9b4:	683b      	ldr	r3, [r7, #0]
 800e9b6:	607b      	str	r3, [r7, #4]
 800e9b8:	e002      	b.n	800e9c0 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	68db      	ldr	r3, [r3, #12]
 800e9be:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	2b00      	cmp	r3, #0
 800e9c4:	d1b3      	bne.n	800e92e <tcp_fasttmr+0x1a>
    }
  }
}
 800e9c6:	bf00      	nop
 800e9c8:	bf00      	nop
 800e9ca:	3708      	adds	r7, #8
 800e9cc:	46bd      	mov	sp, r7
 800e9ce:	bd80      	pop	{r7, pc}
 800e9d0:	2000f3fe 	.word	0x2000f3fe
 800e9d4:	2000f3f4 	.word	0x2000f3f4
 800e9d8:	2000f3fc 	.word	0x2000f3fc

0800e9dc <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800e9dc:	b590      	push	{r4, r7, lr}
 800e9de:	b085      	sub	sp, #20
 800e9e0:	af00      	add	r7, sp, #0
 800e9e2:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	2b00      	cmp	r3, #0
 800e9e8:	d109      	bne.n	800e9fe <tcp_process_refused_data+0x22>
 800e9ea:	4b37      	ldr	r3, [pc, #220]	@ (800eac8 <tcp_process_refused_data+0xec>)
 800e9ec:	f240 6209 	movw	r2, #1545	@ 0x609
 800e9f0:	4936      	ldr	r1, [pc, #216]	@ (800eacc <tcp_process_refused_data+0xf0>)
 800e9f2:	4837      	ldr	r0, [pc, #220]	@ (800ead0 <tcp_process_refused_data+0xf4>)
 800e9f4:	f008 f918 	bl	8016c28 <iprintf>
 800e9f8:	f06f 030f 	mvn.w	r3, #15
 800e9fc:	e060      	b.n	800eac0 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ea02:	7b5b      	ldrb	r3, [r3, #13]
 800ea04:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ea0a:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	2200      	movs	r2, #0
 800ea10:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ea18:	2b00      	cmp	r3, #0
 800ea1a:	d00b      	beq.n	800ea34 <tcp_process_refused_data+0x58>
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	6918      	ldr	r0, [r3, #16]
 800ea26:	2300      	movs	r3, #0
 800ea28:	68ba      	ldr	r2, [r7, #8]
 800ea2a:	6879      	ldr	r1, [r7, #4]
 800ea2c:	47a0      	blx	r4
 800ea2e:	4603      	mov	r3, r0
 800ea30:	73fb      	strb	r3, [r7, #15]
 800ea32:	e007      	b.n	800ea44 <tcp_process_refused_data+0x68>
 800ea34:	2300      	movs	r3, #0
 800ea36:	68ba      	ldr	r2, [r7, #8]
 800ea38:	6879      	ldr	r1, [r7, #4]
 800ea3a:	2000      	movs	r0, #0
 800ea3c:	f000 f8a4 	bl	800eb88 <tcp_recv_null>
 800ea40:	4603      	mov	r3, r0
 800ea42:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800ea44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ea48:	2b00      	cmp	r3, #0
 800ea4a:	d12a      	bne.n	800eaa2 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800ea4c:	7bbb      	ldrb	r3, [r7, #14]
 800ea4e:	f003 0320 	and.w	r3, r3, #32
 800ea52:	2b00      	cmp	r3, #0
 800ea54:	d033      	beq.n	800eabe <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ea5a:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800ea5e:	d005      	beq.n	800ea6c <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ea64:	3301      	adds	r3, #1
 800ea66:	b29a      	uxth	r2, r3
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ea72:	2b00      	cmp	r3, #0
 800ea74:	d00b      	beq.n	800ea8e <tcp_process_refused_data+0xb2>
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	6918      	ldr	r0, [r3, #16]
 800ea80:	2300      	movs	r3, #0
 800ea82:	2200      	movs	r2, #0
 800ea84:	6879      	ldr	r1, [r7, #4]
 800ea86:	47a0      	blx	r4
 800ea88:	4603      	mov	r3, r0
 800ea8a:	73fb      	strb	r3, [r7, #15]
 800ea8c:	e001      	b.n	800ea92 <tcp_process_refused_data+0xb6>
 800ea8e:	2300      	movs	r3, #0
 800ea90:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800ea92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ea96:	f113 0f0d 	cmn.w	r3, #13
 800ea9a:	d110      	bne.n	800eabe <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800ea9c:	f06f 030c 	mvn.w	r3, #12
 800eaa0:	e00e      	b.n	800eac0 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800eaa2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800eaa6:	f113 0f0d 	cmn.w	r3, #13
 800eaaa:	d102      	bne.n	800eab2 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800eaac:	f06f 030c 	mvn.w	r3, #12
 800eab0:	e006      	b.n	800eac0 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	68ba      	ldr	r2, [r7, #8]
 800eab6:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 800eab8:	f06f 0304 	mvn.w	r3, #4
 800eabc:	e000      	b.n	800eac0 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800eabe:	2300      	movs	r3, #0
}
 800eac0:	4618      	mov	r0, r3
 800eac2:	3714      	adds	r7, #20
 800eac4:	46bd      	mov	sp, r7
 800eac6:	bd90      	pop	{r4, r7, pc}
 800eac8:	08019324 	.word	0x08019324
 800eacc:	08019834 	.word	0x08019834
 800ead0:	08019368 	.word	0x08019368

0800ead4 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800ead4:	b580      	push	{r7, lr}
 800ead6:	b084      	sub	sp, #16
 800ead8:	af00      	add	r7, sp, #0
 800eada:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800eadc:	e007      	b.n	800eaee <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	681b      	ldr	r3, [r3, #0]
 800eae2:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800eae4:	6878      	ldr	r0, [r7, #4]
 800eae6:	f000 f80a 	bl	800eafe <tcp_seg_free>
    seg = next;
 800eaea:	68fb      	ldr	r3, [r7, #12]
 800eaec:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	2b00      	cmp	r3, #0
 800eaf2:	d1f4      	bne.n	800eade <tcp_segs_free+0xa>
  }
}
 800eaf4:	bf00      	nop
 800eaf6:	bf00      	nop
 800eaf8:	3710      	adds	r7, #16
 800eafa:	46bd      	mov	sp, r7
 800eafc:	bd80      	pop	{r7, pc}

0800eafe <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800eafe:	b580      	push	{r7, lr}
 800eb00:	b082      	sub	sp, #8
 800eb02:	af00      	add	r7, sp, #0
 800eb04:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	2b00      	cmp	r3, #0
 800eb0a:	d00c      	beq.n	800eb26 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	685b      	ldr	r3, [r3, #4]
 800eb10:	2b00      	cmp	r3, #0
 800eb12:	d004      	beq.n	800eb1e <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	685b      	ldr	r3, [r3, #4]
 800eb18:	4618      	mov	r0, r3
 800eb1a:	f7fe fb45 	bl	800d1a8 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800eb1e:	6879      	ldr	r1, [r7, #4]
 800eb20:	2003      	movs	r0, #3
 800eb22:	f7fd fc9d 	bl	800c460 <memp_free>
  }
}
 800eb26:	bf00      	nop
 800eb28:	3708      	adds	r7, #8
 800eb2a:	46bd      	mov	sp, r7
 800eb2c:	bd80      	pop	{r7, pc}
	...

0800eb30 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800eb30:	b580      	push	{r7, lr}
 800eb32:	b084      	sub	sp, #16
 800eb34:	af00      	add	r7, sp, #0
 800eb36:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	2b00      	cmp	r3, #0
 800eb3c:	d106      	bne.n	800eb4c <tcp_seg_copy+0x1c>
 800eb3e:	4b0f      	ldr	r3, [pc, #60]	@ (800eb7c <tcp_seg_copy+0x4c>)
 800eb40:	f240 6282 	movw	r2, #1666	@ 0x682
 800eb44:	490e      	ldr	r1, [pc, #56]	@ (800eb80 <tcp_seg_copy+0x50>)
 800eb46:	480f      	ldr	r0, [pc, #60]	@ (800eb84 <tcp_seg_copy+0x54>)
 800eb48:	f008 f86e 	bl	8016c28 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800eb4c:	2003      	movs	r0, #3
 800eb4e:	f7fd fc11 	bl	800c374 <memp_malloc>
 800eb52:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800eb54:	68fb      	ldr	r3, [r7, #12]
 800eb56:	2b00      	cmp	r3, #0
 800eb58:	d101      	bne.n	800eb5e <tcp_seg_copy+0x2e>
    return NULL;
 800eb5a:	2300      	movs	r3, #0
 800eb5c:	e00a      	b.n	800eb74 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800eb5e:	2210      	movs	r2, #16
 800eb60:	6879      	ldr	r1, [r7, #4]
 800eb62:	68f8      	ldr	r0, [r7, #12]
 800eb64:	f008 f991 	bl	8016e8a <memcpy>
  pbuf_ref(cseg->p);
 800eb68:	68fb      	ldr	r3, [r7, #12]
 800eb6a:	685b      	ldr	r3, [r3, #4]
 800eb6c:	4618      	mov	r0, r3
 800eb6e:	f7fe fbc1 	bl	800d2f4 <pbuf_ref>
  return cseg;
 800eb72:	68fb      	ldr	r3, [r7, #12]
}
 800eb74:	4618      	mov	r0, r3
 800eb76:	3710      	adds	r7, #16
 800eb78:	46bd      	mov	sp, r7
 800eb7a:	bd80      	pop	{r7, pc}
 800eb7c:	08019324 	.word	0x08019324
 800eb80:	08019878 	.word	0x08019878
 800eb84:	08019368 	.word	0x08019368

0800eb88 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800eb88:	b580      	push	{r7, lr}
 800eb8a:	b084      	sub	sp, #16
 800eb8c:	af00      	add	r7, sp, #0
 800eb8e:	60f8      	str	r0, [r7, #12]
 800eb90:	60b9      	str	r1, [r7, #8]
 800eb92:	607a      	str	r2, [r7, #4]
 800eb94:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800eb96:	68bb      	ldr	r3, [r7, #8]
 800eb98:	2b00      	cmp	r3, #0
 800eb9a:	d109      	bne.n	800ebb0 <tcp_recv_null+0x28>
 800eb9c:	4b12      	ldr	r3, [pc, #72]	@ (800ebe8 <tcp_recv_null+0x60>)
 800eb9e:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 800eba2:	4912      	ldr	r1, [pc, #72]	@ (800ebec <tcp_recv_null+0x64>)
 800eba4:	4812      	ldr	r0, [pc, #72]	@ (800ebf0 <tcp_recv_null+0x68>)
 800eba6:	f008 f83f 	bl	8016c28 <iprintf>
 800ebaa:	f06f 030f 	mvn.w	r3, #15
 800ebae:	e016      	b.n	800ebde <tcp_recv_null+0x56>

  if (p != NULL) {
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	2b00      	cmp	r3, #0
 800ebb4:	d009      	beq.n	800ebca <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	891b      	ldrh	r3, [r3, #8]
 800ebba:	4619      	mov	r1, r3
 800ebbc:	68b8      	ldr	r0, [r7, #8]
 800ebbe:	f7ff facd 	bl	800e15c <tcp_recved>
    pbuf_free(p);
 800ebc2:	6878      	ldr	r0, [r7, #4]
 800ebc4:	f7fe faf0 	bl	800d1a8 <pbuf_free>
 800ebc8:	e008      	b.n	800ebdc <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800ebca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ebce:	2b00      	cmp	r3, #0
 800ebd0:	d104      	bne.n	800ebdc <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800ebd2:	68b8      	ldr	r0, [r7, #8]
 800ebd4:	f7fe ffb4 	bl	800db40 <tcp_close>
 800ebd8:	4603      	mov	r3, r0
 800ebda:	e000      	b.n	800ebde <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800ebdc:	2300      	movs	r3, #0
}
 800ebde:	4618      	mov	r0, r3
 800ebe0:	3710      	adds	r7, #16
 800ebe2:	46bd      	mov	sp, r7
 800ebe4:	bd80      	pop	{r7, pc}
 800ebe6:	bf00      	nop
 800ebe8:	08019324 	.word	0x08019324
 800ebec:	08019894 	.word	0x08019894
 800ebf0:	08019368 	.word	0x08019368

0800ebf4 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800ebf4:	b580      	push	{r7, lr}
 800ebf6:	b086      	sub	sp, #24
 800ebf8:	af00      	add	r7, sp, #0
 800ebfa:	4603      	mov	r3, r0
 800ebfc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800ebfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ec02:	2b00      	cmp	r3, #0
 800ec04:	db01      	blt.n	800ec0a <tcp_kill_prio+0x16>
 800ec06:	79fb      	ldrb	r3, [r7, #7]
 800ec08:	e000      	b.n	800ec0c <tcp_kill_prio+0x18>
 800ec0a:	237f      	movs	r3, #127	@ 0x7f
 800ec0c:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800ec0e:	7afb      	ldrb	r3, [r7, #11]
 800ec10:	2b00      	cmp	r3, #0
 800ec12:	d034      	beq.n	800ec7e <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800ec14:	7afb      	ldrb	r3, [r7, #11]
 800ec16:	3b01      	subs	r3, #1
 800ec18:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800ec1a:	2300      	movs	r3, #0
 800ec1c:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800ec1e:	2300      	movs	r3, #0
 800ec20:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ec22:	4b19      	ldr	r3, [pc, #100]	@ (800ec88 <tcp_kill_prio+0x94>)
 800ec24:	681b      	ldr	r3, [r3, #0]
 800ec26:	617b      	str	r3, [r7, #20]
 800ec28:	e01f      	b.n	800ec6a <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800ec2a:	697b      	ldr	r3, [r7, #20]
 800ec2c:	7d5b      	ldrb	r3, [r3, #21]
 800ec2e:	7afa      	ldrb	r2, [r7, #11]
 800ec30:	429a      	cmp	r2, r3
 800ec32:	d80c      	bhi.n	800ec4e <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800ec34:	697b      	ldr	r3, [r7, #20]
 800ec36:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800ec38:	7afa      	ldrb	r2, [r7, #11]
 800ec3a:	429a      	cmp	r2, r3
 800ec3c:	d112      	bne.n	800ec64 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800ec3e:	4b13      	ldr	r3, [pc, #76]	@ (800ec8c <tcp_kill_prio+0x98>)
 800ec40:	681a      	ldr	r2, [r3, #0]
 800ec42:	697b      	ldr	r3, [r7, #20]
 800ec44:	6a1b      	ldr	r3, [r3, #32]
 800ec46:	1ad3      	subs	r3, r2, r3
 800ec48:	68fa      	ldr	r2, [r7, #12]
 800ec4a:	429a      	cmp	r2, r3
 800ec4c:	d80a      	bhi.n	800ec64 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800ec4e:	4b0f      	ldr	r3, [pc, #60]	@ (800ec8c <tcp_kill_prio+0x98>)
 800ec50:	681a      	ldr	r2, [r3, #0]
 800ec52:	697b      	ldr	r3, [r7, #20]
 800ec54:	6a1b      	ldr	r3, [r3, #32]
 800ec56:	1ad3      	subs	r3, r2, r3
 800ec58:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800ec5a:	697b      	ldr	r3, [r7, #20]
 800ec5c:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800ec5e:	697b      	ldr	r3, [r7, #20]
 800ec60:	7d5b      	ldrb	r3, [r3, #21]
 800ec62:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ec64:	697b      	ldr	r3, [r7, #20]
 800ec66:	68db      	ldr	r3, [r3, #12]
 800ec68:	617b      	str	r3, [r7, #20]
 800ec6a:	697b      	ldr	r3, [r7, #20]
 800ec6c:	2b00      	cmp	r3, #0
 800ec6e:	d1dc      	bne.n	800ec2a <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800ec70:	693b      	ldr	r3, [r7, #16]
 800ec72:	2b00      	cmp	r3, #0
 800ec74:	d004      	beq.n	800ec80 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800ec76:	6938      	ldr	r0, [r7, #16]
 800ec78:	f7ff f8a8 	bl	800ddcc <tcp_abort>
 800ec7c:	e000      	b.n	800ec80 <tcp_kill_prio+0x8c>
    return;
 800ec7e:	bf00      	nop
  }
}
 800ec80:	3718      	adds	r7, #24
 800ec82:	46bd      	mov	sp, r7
 800ec84:	bd80      	pop	{r7, pc}
 800ec86:	bf00      	nop
 800ec88:	2000f3f4 	.word	0x2000f3f4
 800ec8c:	2000f3e8 	.word	0x2000f3e8

0800ec90 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800ec90:	b580      	push	{r7, lr}
 800ec92:	b086      	sub	sp, #24
 800ec94:	af00      	add	r7, sp, #0
 800ec96:	4603      	mov	r3, r0
 800ec98:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800ec9a:	79fb      	ldrb	r3, [r7, #7]
 800ec9c:	2b08      	cmp	r3, #8
 800ec9e:	d009      	beq.n	800ecb4 <tcp_kill_state+0x24>
 800eca0:	79fb      	ldrb	r3, [r7, #7]
 800eca2:	2b09      	cmp	r3, #9
 800eca4:	d006      	beq.n	800ecb4 <tcp_kill_state+0x24>
 800eca6:	4b1a      	ldr	r3, [pc, #104]	@ (800ed10 <tcp_kill_state+0x80>)
 800eca8:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 800ecac:	4919      	ldr	r1, [pc, #100]	@ (800ed14 <tcp_kill_state+0x84>)
 800ecae:	481a      	ldr	r0, [pc, #104]	@ (800ed18 <tcp_kill_state+0x88>)
 800ecb0:	f007 ffba 	bl	8016c28 <iprintf>

  inactivity = 0;
 800ecb4:	2300      	movs	r3, #0
 800ecb6:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800ecb8:	2300      	movs	r3, #0
 800ecba:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ecbc:	4b17      	ldr	r3, [pc, #92]	@ (800ed1c <tcp_kill_state+0x8c>)
 800ecbe:	681b      	ldr	r3, [r3, #0]
 800ecc0:	617b      	str	r3, [r7, #20]
 800ecc2:	e017      	b.n	800ecf4 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800ecc4:	697b      	ldr	r3, [r7, #20]
 800ecc6:	7d1b      	ldrb	r3, [r3, #20]
 800ecc8:	79fa      	ldrb	r2, [r7, #7]
 800ecca:	429a      	cmp	r2, r3
 800eccc:	d10f      	bne.n	800ecee <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800ecce:	4b14      	ldr	r3, [pc, #80]	@ (800ed20 <tcp_kill_state+0x90>)
 800ecd0:	681a      	ldr	r2, [r3, #0]
 800ecd2:	697b      	ldr	r3, [r7, #20]
 800ecd4:	6a1b      	ldr	r3, [r3, #32]
 800ecd6:	1ad3      	subs	r3, r2, r3
 800ecd8:	68fa      	ldr	r2, [r7, #12]
 800ecda:	429a      	cmp	r2, r3
 800ecdc:	d807      	bhi.n	800ecee <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800ecde:	4b10      	ldr	r3, [pc, #64]	@ (800ed20 <tcp_kill_state+0x90>)
 800ece0:	681a      	ldr	r2, [r3, #0]
 800ece2:	697b      	ldr	r3, [r7, #20]
 800ece4:	6a1b      	ldr	r3, [r3, #32]
 800ece6:	1ad3      	subs	r3, r2, r3
 800ece8:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800ecea:	697b      	ldr	r3, [r7, #20]
 800ecec:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ecee:	697b      	ldr	r3, [r7, #20]
 800ecf0:	68db      	ldr	r3, [r3, #12]
 800ecf2:	617b      	str	r3, [r7, #20]
 800ecf4:	697b      	ldr	r3, [r7, #20]
 800ecf6:	2b00      	cmp	r3, #0
 800ecf8:	d1e4      	bne.n	800ecc4 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800ecfa:	693b      	ldr	r3, [r7, #16]
 800ecfc:	2b00      	cmp	r3, #0
 800ecfe:	d003      	beq.n	800ed08 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800ed00:	2100      	movs	r1, #0
 800ed02:	6938      	ldr	r0, [r7, #16]
 800ed04:	f7fe ffa4 	bl	800dc50 <tcp_abandon>
  }
}
 800ed08:	bf00      	nop
 800ed0a:	3718      	adds	r7, #24
 800ed0c:	46bd      	mov	sp, r7
 800ed0e:	bd80      	pop	{r7, pc}
 800ed10:	08019324 	.word	0x08019324
 800ed14:	080198b0 	.word	0x080198b0
 800ed18:	08019368 	.word	0x08019368
 800ed1c:	2000f3f4 	.word	0x2000f3f4
 800ed20:	2000f3e8 	.word	0x2000f3e8

0800ed24 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800ed24:	b580      	push	{r7, lr}
 800ed26:	b084      	sub	sp, #16
 800ed28:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800ed2a:	2300      	movs	r3, #0
 800ed2c:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800ed2e:	2300      	movs	r3, #0
 800ed30:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800ed32:	4b12      	ldr	r3, [pc, #72]	@ (800ed7c <tcp_kill_timewait+0x58>)
 800ed34:	681b      	ldr	r3, [r3, #0]
 800ed36:	60fb      	str	r3, [r7, #12]
 800ed38:	e012      	b.n	800ed60 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800ed3a:	4b11      	ldr	r3, [pc, #68]	@ (800ed80 <tcp_kill_timewait+0x5c>)
 800ed3c:	681a      	ldr	r2, [r3, #0]
 800ed3e:	68fb      	ldr	r3, [r7, #12]
 800ed40:	6a1b      	ldr	r3, [r3, #32]
 800ed42:	1ad3      	subs	r3, r2, r3
 800ed44:	687a      	ldr	r2, [r7, #4]
 800ed46:	429a      	cmp	r2, r3
 800ed48:	d807      	bhi.n	800ed5a <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800ed4a:	4b0d      	ldr	r3, [pc, #52]	@ (800ed80 <tcp_kill_timewait+0x5c>)
 800ed4c:	681a      	ldr	r2, [r3, #0]
 800ed4e:	68fb      	ldr	r3, [r7, #12]
 800ed50:	6a1b      	ldr	r3, [r3, #32]
 800ed52:	1ad3      	subs	r3, r2, r3
 800ed54:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800ed56:	68fb      	ldr	r3, [r7, #12]
 800ed58:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800ed5a:	68fb      	ldr	r3, [r7, #12]
 800ed5c:	68db      	ldr	r3, [r3, #12]
 800ed5e:	60fb      	str	r3, [r7, #12]
 800ed60:	68fb      	ldr	r3, [r7, #12]
 800ed62:	2b00      	cmp	r3, #0
 800ed64:	d1e9      	bne.n	800ed3a <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800ed66:	68bb      	ldr	r3, [r7, #8]
 800ed68:	2b00      	cmp	r3, #0
 800ed6a:	d002      	beq.n	800ed72 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800ed6c:	68b8      	ldr	r0, [r7, #8]
 800ed6e:	f7ff f82d 	bl	800ddcc <tcp_abort>
  }
}
 800ed72:	bf00      	nop
 800ed74:	3710      	adds	r7, #16
 800ed76:	46bd      	mov	sp, r7
 800ed78:	bd80      	pop	{r7, pc}
 800ed7a:	bf00      	nop
 800ed7c:	2000f3f8 	.word	0x2000f3f8
 800ed80:	2000f3e8 	.word	0x2000f3e8

0800ed84 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800ed84:	b580      	push	{r7, lr}
 800ed86:	b082      	sub	sp, #8
 800ed88:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800ed8a:	4b10      	ldr	r3, [pc, #64]	@ (800edcc <tcp_handle_closepend+0x48>)
 800ed8c:	681b      	ldr	r3, [r3, #0]
 800ed8e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800ed90:	e014      	b.n	800edbc <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	68db      	ldr	r3, [r3, #12]
 800ed96:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	8b5b      	ldrh	r3, [r3, #26]
 800ed9c:	f003 0308 	and.w	r3, r3, #8
 800eda0:	2b00      	cmp	r3, #0
 800eda2:	d009      	beq.n	800edb8 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	8b5b      	ldrh	r3, [r3, #26]
 800eda8:	f023 0308 	bic.w	r3, r3, #8
 800edac:	b29a      	uxth	r2, r3
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800edb2:	6878      	ldr	r0, [r7, #4]
 800edb4:	f7fe fe5a 	bl	800da6c <tcp_close_shutdown_fin>
    }
    pcb = next;
 800edb8:	683b      	ldr	r3, [r7, #0]
 800edba:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	2b00      	cmp	r3, #0
 800edc0:	d1e7      	bne.n	800ed92 <tcp_handle_closepend+0xe>
  }
}
 800edc2:	bf00      	nop
 800edc4:	bf00      	nop
 800edc6:	3708      	adds	r7, #8
 800edc8:	46bd      	mov	sp, r7
 800edca:	bd80      	pop	{r7, pc}
 800edcc:	2000f3f4 	.word	0x2000f3f4

0800edd0 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800edd0:	b580      	push	{r7, lr}
 800edd2:	b084      	sub	sp, #16
 800edd4:	af00      	add	r7, sp, #0
 800edd6:	4603      	mov	r3, r0
 800edd8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800edda:	2001      	movs	r0, #1
 800eddc:	f7fd faca 	bl	800c374 <memp_malloc>
 800ede0:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800ede2:	68fb      	ldr	r3, [r7, #12]
 800ede4:	2b00      	cmp	r3, #0
 800ede6:	d126      	bne.n	800ee36 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800ede8:	f7ff ffcc 	bl	800ed84 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800edec:	f7ff ff9a 	bl	800ed24 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800edf0:	2001      	movs	r0, #1
 800edf2:	f7fd fabf 	bl	800c374 <memp_malloc>
 800edf6:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800edf8:	68fb      	ldr	r3, [r7, #12]
 800edfa:	2b00      	cmp	r3, #0
 800edfc:	d11b      	bne.n	800ee36 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800edfe:	2009      	movs	r0, #9
 800ee00:	f7ff ff46 	bl	800ec90 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ee04:	2001      	movs	r0, #1
 800ee06:	f7fd fab5 	bl	800c374 <memp_malloc>
 800ee0a:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800ee0c:	68fb      	ldr	r3, [r7, #12]
 800ee0e:	2b00      	cmp	r3, #0
 800ee10:	d111      	bne.n	800ee36 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800ee12:	2008      	movs	r0, #8
 800ee14:	f7ff ff3c 	bl	800ec90 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ee18:	2001      	movs	r0, #1
 800ee1a:	f7fd faab 	bl	800c374 <memp_malloc>
 800ee1e:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800ee20:	68fb      	ldr	r3, [r7, #12]
 800ee22:	2b00      	cmp	r3, #0
 800ee24:	d107      	bne.n	800ee36 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800ee26:	79fb      	ldrb	r3, [r7, #7]
 800ee28:	4618      	mov	r0, r3
 800ee2a:	f7ff fee3 	bl	800ebf4 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ee2e:	2001      	movs	r0, #1
 800ee30:	f7fd faa0 	bl	800c374 <memp_malloc>
 800ee34:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800ee36:	68fb      	ldr	r3, [r7, #12]
 800ee38:	2b00      	cmp	r3, #0
 800ee3a:	d049      	beq.n	800eed0 <tcp_alloc+0x100>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800ee3c:	22a4      	movs	r2, #164	@ 0xa4
 800ee3e:	2100      	movs	r1, #0
 800ee40:	68f8      	ldr	r0, [r7, #12]
 800ee42:	f007 ff56 	bl	8016cf2 <memset>
    pcb->prio = prio;
 800ee46:	68fb      	ldr	r3, [r7, #12]
 800ee48:	79fa      	ldrb	r2, [r7, #7]
 800ee4a:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800ee4c:	68fb      	ldr	r3, [r7, #12]
 800ee4e:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800ee52:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800ee56:	68fb      	ldr	r3, [r7, #12]
 800ee58:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800ee5c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800ee5e:	68fb      	ldr	r3, [r7, #12]
 800ee60:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800ee62:	68fb      	ldr	r3, [r7, #12]
 800ee64:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 800ee66:	68fb      	ldr	r3, [r7, #12]
 800ee68:	22ff      	movs	r2, #255	@ 0xff
 800ee6a:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800ee6c:	68fb      	ldr	r3, [r7, #12]
 800ee6e:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800ee72:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800ee74:	68fb      	ldr	r3, [r7, #12]
 800ee76:	2206      	movs	r2, #6
 800ee78:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800ee7c:	68fb      	ldr	r3, [r7, #12]
 800ee7e:	2206      	movs	r2, #6
 800ee80:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 800ee82:	68fb      	ldr	r3, [r7, #12]
 800ee84:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ee88:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 800ee8a:	68fb      	ldr	r3, [r7, #12]
 800ee8c:	2201      	movs	r2, #1
 800ee8e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 800ee92:	4b12      	ldr	r3, [pc, #72]	@ (800eedc <tcp_alloc+0x10c>)
 800ee94:	681a      	ldr	r2, [r3, #0]
 800ee96:	68fb      	ldr	r3, [r7, #12]
 800ee98:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800ee9a:	4b11      	ldr	r3, [pc, #68]	@ (800eee0 <tcp_alloc+0x110>)
 800ee9c:	781a      	ldrb	r2, [r3, #0]
 800ee9e:	68fb      	ldr	r3, [r7, #12]
 800eea0:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800eea2:	68fb      	ldr	r3, [r7, #12]
 800eea4:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800eea8:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800eeac:	68fb      	ldr	r3, [r7, #12]
 800eeae:	4a0d      	ldr	r2, [pc, #52]	@ (800eee4 <tcp_alloc+0x114>)
 800eeb0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800eeb4:	68fb      	ldr	r3, [r7, #12]
 800eeb6:	f242 7210 	movw	r2, #10000	@ 0x2710
 800eeba:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
 800eebe:	68fb      	ldr	r3, [r7, #12]
 800eec0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800eec4:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
 800eec8:	68fb      	ldr	r3, [r7, #12]
 800eeca:	2203      	movs	r2, #3
 800eecc:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800eed0:	68fb      	ldr	r3, [r7, #12]
}
 800eed2:	4618      	mov	r0, r3
 800eed4:	3710      	adds	r7, #16
 800eed6:	46bd      	mov	sp, r7
 800eed8:	bd80      	pop	{r7, pc}
 800eeda:	bf00      	nop
 800eedc:	2000f3e8 	.word	0x2000f3e8
 800eee0:	2000f3fe 	.word	0x2000f3fe
 800eee4:	0800eb89 	.word	0x0800eb89

0800eee8 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 800eee8:	b580      	push	{r7, lr}
 800eeea:	b084      	sub	sp, #16
 800eeec:	af00      	add	r7, sp, #0
 800eeee:	4603      	mov	r3, r0
 800eef0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800eef2:	2040      	movs	r0, #64	@ 0x40
 800eef4:	f7ff ff6c 	bl	800edd0 <tcp_alloc>
 800eef8:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 800eefa:	68fb      	ldr	r3, [r7, #12]
}
 800eefc:	4618      	mov	r0, r3
 800eefe:	3710      	adds	r7, #16
 800ef00:	46bd      	mov	sp, r7
 800ef02:	bd80      	pop	{r7, pc}

0800ef04 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800ef04:	b480      	push	{r7}
 800ef06:	b083      	sub	sp, #12
 800ef08:	af00      	add	r7, sp, #0
 800ef0a:	6078      	str	r0, [r7, #4]
 800ef0c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	2b00      	cmp	r3, #0
 800ef12:	d002      	beq.n	800ef1a <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	683a      	ldr	r2, [r7, #0]
 800ef18:	611a      	str	r2, [r3, #16]
  }
}
 800ef1a:	bf00      	nop
 800ef1c:	370c      	adds	r7, #12
 800ef1e:	46bd      	mov	sp, r7
 800ef20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef24:	4770      	bx	lr
	...

0800ef28 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800ef28:	b580      	push	{r7, lr}
 800ef2a:	b082      	sub	sp, #8
 800ef2c:	af00      	add	r7, sp, #0
 800ef2e:	6078      	str	r0, [r7, #4]
 800ef30:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	2b00      	cmp	r3, #0
 800ef36:	d00e      	beq.n	800ef56 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	7d1b      	ldrb	r3, [r3, #20]
 800ef3c:	2b01      	cmp	r3, #1
 800ef3e:	d106      	bne.n	800ef4e <tcp_recv+0x26>
 800ef40:	4b07      	ldr	r3, [pc, #28]	@ (800ef60 <tcp_recv+0x38>)
 800ef42:	f240 72df 	movw	r2, #2015	@ 0x7df
 800ef46:	4907      	ldr	r1, [pc, #28]	@ (800ef64 <tcp_recv+0x3c>)
 800ef48:	4807      	ldr	r0, [pc, #28]	@ (800ef68 <tcp_recv+0x40>)
 800ef4a:	f007 fe6d 	bl	8016c28 <iprintf>
    pcb->recv = recv;
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	683a      	ldr	r2, [r7, #0]
 800ef52:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }
}
 800ef56:	bf00      	nop
 800ef58:	3708      	adds	r7, #8
 800ef5a:	46bd      	mov	sp, r7
 800ef5c:	bd80      	pop	{r7, pc}
 800ef5e:	bf00      	nop
 800ef60:	08019324 	.word	0x08019324
 800ef64:	080198c0 	.word	0x080198c0
 800ef68:	08019368 	.word	0x08019368

0800ef6c <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800ef6c:	b580      	push	{r7, lr}
 800ef6e:	b082      	sub	sp, #8
 800ef70:	af00      	add	r7, sp, #0
 800ef72:	6078      	str	r0, [r7, #4]
 800ef74:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	2b00      	cmp	r3, #0
 800ef7a:	d00e      	beq.n	800ef9a <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	7d1b      	ldrb	r3, [r3, #20]
 800ef80:	2b01      	cmp	r3, #1
 800ef82:	d106      	bne.n	800ef92 <tcp_sent+0x26>
 800ef84:	4b07      	ldr	r3, [pc, #28]	@ (800efa4 <tcp_sent+0x38>)
 800ef86:	f240 72f3 	movw	r2, #2035	@ 0x7f3
 800ef8a:	4907      	ldr	r1, [pc, #28]	@ (800efa8 <tcp_sent+0x3c>)
 800ef8c:	4807      	ldr	r0, [pc, #28]	@ (800efac <tcp_sent+0x40>)
 800ef8e:	f007 fe4b 	bl	8016c28 <iprintf>
    pcb->sent = sent;
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	683a      	ldr	r2, [r7, #0]
 800ef96:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  }
}
 800ef9a:	bf00      	nop
 800ef9c:	3708      	adds	r7, #8
 800ef9e:	46bd      	mov	sp, r7
 800efa0:	bd80      	pop	{r7, pc}
 800efa2:	bf00      	nop
 800efa4:	08019324 	.word	0x08019324
 800efa8:	080198e8 	.word	0x080198e8
 800efac:	08019368 	.word	0x08019368

0800efb0 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800efb0:	b580      	push	{r7, lr}
 800efb2:	b082      	sub	sp, #8
 800efb4:	af00      	add	r7, sp, #0
 800efb6:	6078      	str	r0, [r7, #4]
 800efb8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	2b00      	cmp	r3, #0
 800efbe:	d00e      	beq.n	800efde <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	7d1b      	ldrb	r3, [r3, #20]
 800efc4:	2b01      	cmp	r3, #1
 800efc6:	d106      	bne.n	800efd6 <tcp_err+0x26>
 800efc8:	4b07      	ldr	r3, [pc, #28]	@ (800efe8 <tcp_err+0x38>)
 800efca:	f640 020d 	movw	r2, #2061	@ 0x80d
 800efce:	4907      	ldr	r1, [pc, #28]	@ (800efec <tcp_err+0x3c>)
 800efd0:	4807      	ldr	r0, [pc, #28]	@ (800eff0 <tcp_err+0x40>)
 800efd2:	f007 fe29 	bl	8016c28 <iprintf>
    pcb->errf = err;
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	683a      	ldr	r2, [r7, #0]
 800efda:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  }
}
 800efde:	bf00      	nop
 800efe0:	3708      	adds	r7, #8
 800efe2:	46bd      	mov	sp, r7
 800efe4:	bd80      	pop	{r7, pc}
 800efe6:	bf00      	nop
 800efe8:	08019324 	.word	0x08019324
 800efec:	08019910 	.word	0x08019910
 800eff0:	08019368 	.word	0x08019368

0800eff4 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800eff4:	b480      	push	{r7}
 800eff6:	b085      	sub	sp, #20
 800eff8:	af00      	add	r7, sp, #0
 800effa:	6078      	str	r0, [r7, #4]
 800effc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	2b00      	cmp	r3, #0
 800f002:	d008      	beq.n	800f016 <tcp_accept+0x22>
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	7d1b      	ldrb	r3, [r3, #20]
 800f008:	2b01      	cmp	r3, #1
 800f00a:	d104      	bne.n	800f016 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800f010:	68fb      	ldr	r3, [r7, #12]
 800f012:	683a      	ldr	r2, [r7, #0]
 800f014:	619a      	str	r2, [r3, #24]
  }
}
 800f016:	bf00      	nop
 800f018:	3714      	adds	r7, #20
 800f01a:	46bd      	mov	sp, r7
 800f01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f020:	4770      	bx	lr
	...

0800f024 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800f024:	b580      	push	{r7, lr}
 800f026:	b084      	sub	sp, #16
 800f028:	af00      	add	r7, sp, #0
 800f02a:	60f8      	str	r0, [r7, #12]
 800f02c:	60b9      	str	r1, [r7, #8]
 800f02e:	4613      	mov	r3, r2
 800f030:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800f032:	68fb      	ldr	r3, [r7, #12]
 800f034:	2b00      	cmp	r3, #0
 800f036:	d107      	bne.n	800f048 <tcp_poll+0x24>
 800f038:	4b0e      	ldr	r3, [pc, #56]	@ (800f074 <tcp_poll+0x50>)
 800f03a:	f640 023d 	movw	r2, #2109	@ 0x83d
 800f03e:	490e      	ldr	r1, [pc, #56]	@ (800f078 <tcp_poll+0x54>)
 800f040:	480e      	ldr	r0, [pc, #56]	@ (800f07c <tcp_poll+0x58>)
 800f042:	f007 fdf1 	bl	8016c28 <iprintf>
 800f046:	e011      	b.n	800f06c <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800f048:	68fb      	ldr	r3, [r7, #12]
 800f04a:	7d1b      	ldrb	r3, [r3, #20]
 800f04c:	2b01      	cmp	r3, #1
 800f04e:	d106      	bne.n	800f05e <tcp_poll+0x3a>
 800f050:	4b08      	ldr	r3, [pc, #32]	@ (800f074 <tcp_poll+0x50>)
 800f052:	f640 023e 	movw	r2, #2110	@ 0x83e
 800f056:	490a      	ldr	r1, [pc, #40]	@ (800f080 <tcp_poll+0x5c>)
 800f058:	4808      	ldr	r0, [pc, #32]	@ (800f07c <tcp_poll+0x58>)
 800f05a:	f007 fde5 	bl	8016c28 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800f05e:	68fb      	ldr	r3, [r7, #12]
 800f060:	68ba      	ldr	r2, [r7, #8]
 800f062:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800f066:	68fb      	ldr	r3, [r7, #12]
 800f068:	79fa      	ldrb	r2, [r7, #7]
 800f06a:	775a      	strb	r2, [r3, #29]
}
 800f06c:	3710      	adds	r7, #16
 800f06e:	46bd      	mov	sp, r7
 800f070:	bd80      	pop	{r7, pc}
 800f072:	bf00      	nop
 800f074:	08019324 	.word	0x08019324
 800f078:	08019938 	.word	0x08019938
 800f07c:	08019368 	.word	0x08019368
 800f080:	08019950 	.word	0x08019950

0800f084 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800f084:	b580      	push	{r7, lr}
 800f086:	b082      	sub	sp, #8
 800f088:	af00      	add	r7, sp, #0
 800f08a:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	2b00      	cmp	r3, #0
 800f090:	d107      	bne.n	800f0a2 <tcp_pcb_purge+0x1e>
 800f092:	4b21      	ldr	r3, [pc, #132]	@ (800f118 <tcp_pcb_purge+0x94>)
 800f094:	f640 0251 	movw	r2, #2129	@ 0x851
 800f098:	4920      	ldr	r1, [pc, #128]	@ (800f11c <tcp_pcb_purge+0x98>)
 800f09a:	4821      	ldr	r0, [pc, #132]	@ (800f120 <tcp_pcb_purge+0x9c>)
 800f09c:	f007 fdc4 	bl	8016c28 <iprintf>
 800f0a0:	e037      	b.n	800f112 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	7d1b      	ldrb	r3, [r3, #20]
 800f0a6:	2b00      	cmp	r3, #0
 800f0a8:	d033      	beq.n	800f112 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800f0ae:	2b0a      	cmp	r3, #10
 800f0b0:	d02f      	beq.n	800f112 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800f0b6:	2b01      	cmp	r3, #1
 800f0b8:	d02b      	beq.n	800f112 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f0be:	2b00      	cmp	r3, #0
 800f0c0:	d007      	beq.n	800f0d2 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f0c6:	4618      	mov	r0, r3
 800f0c8:	f7fe f86e 	bl	800d1a8 <pbuf_free>
      pcb->refused_data = NULL;
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	2200      	movs	r2, #0
 800f0d0:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f0d6:	2b00      	cmp	r3, #0
 800f0d8:	d002      	beq.n	800f0e0 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800f0da:	6878      	ldr	r0, [r7, #4]
 800f0dc:	f000 f986 	bl	800f3ec <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f0e6:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f0ec:	4618      	mov	r0, r3
 800f0ee:	f7ff fcf1 	bl	800ead4 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f0f6:	4618      	mov	r0, r3
 800f0f8:	f7ff fcec 	bl	800ead4 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	2200      	movs	r2, #0
 800f100:	66da      	str	r2, [r3, #108]	@ 0x6c
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	2200      	movs	r2, #0
 800f10e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800f112:	3708      	adds	r7, #8
 800f114:	46bd      	mov	sp, r7
 800f116:	bd80      	pop	{r7, pc}
 800f118:	08019324 	.word	0x08019324
 800f11c:	08019970 	.word	0x08019970
 800f120:	08019368 	.word	0x08019368

0800f124 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800f124:	b580      	push	{r7, lr}
 800f126:	b084      	sub	sp, #16
 800f128:	af00      	add	r7, sp, #0
 800f12a:	6078      	str	r0, [r7, #4]
 800f12c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800f12e:	683b      	ldr	r3, [r7, #0]
 800f130:	2b00      	cmp	r3, #0
 800f132:	d106      	bne.n	800f142 <tcp_pcb_remove+0x1e>
 800f134:	4b3e      	ldr	r3, [pc, #248]	@ (800f230 <tcp_pcb_remove+0x10c>)
 800f136:	f640 0283 	movw	r2, #2179	@ 0x883
 800f13a:	493e      	ldr	r1, [pc, #248]	@ (800f234 <tcp_pcb_remove+0x110>)
 800f13c:	483e      	ldr	r0, [pc, #248]	@ (800f238 <tcp_pcb_remove+0x114>)
 800f13e:	f007 fd73 	bl	8016c28 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	2b00      	cmp	r3, #0
 800f146:	d106      	bne.n	800f156 <tcp_pcb_remove+0x32>
 800f148:	4b39      	ldr	r3, [pc, #228]	@ (800f230 <tcp_pcb_remove+0x10c>)
 800f14a:	f640 0284 	movw	r2, #2180	@ 0x884
 800f14e:	493b      	ldr	r1, [pc, #236]	@ (800f23c <tcp_pcb_remove+0x118>)
 800f150:	4839      	ldr	r0, [pc, #228]	@ (800f238 <tcp_pcb_remove+0x114>)
 800f152:	f007 fd69 	bl	8016c28 <iprintf>

  TCP_RMV(pcblist, pcb);
 800f156:	687b      	ldr	r3, [r7, #4]
 800f158:	681b      	ldr	r3, [r3, #0]
 800f15a:	683a      	ldr	r2, [r7, #0]
 800f15c:	429a      	cmp	r2, r3
 800f15e:	d105      	bne.n	800f16c <tcp_pcb_remove+0x48>
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	681b      	ldr	r3, [r3, #0]
 800f164:	68da      	ldr	r2, [r3, #12]
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	601a      	str	r2, [r3, #0]
 800f16a:	e013      	b.n	800f194 <tcp_pcb_remove+0x70>
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	681b      	ldr	r3, [r3, #0]
 800f170:	60fb      	str	r3, [r7, #12]
 800f172:	e00c      	b.n	800f18e <tcp_pcb_remove+0x6a>
 800f174:	68fb      	ldr	r3, [r7, #12]
 800f176:	68db      	ldr	r3, [r3, #12]
 800f178:	683a      	ldr	r2, [r7, #0]
 800f17a:	429a      	cmp	r2, r3
 800f17c:	d104      	bne.n	800f188 <tcp_pcb_remove+0x64>
 800f17e:	683b      	ldr	r3, [r7, #0]
 800f180:	68da      	ldr	r2, [r3, #12]
 800f182:	68fb      	ldr	r3, [r7, #12]
 800f184:	60da      	str	r2, [r3, #12]
 800f186:	e005      	b.n	800f194 <tcp_pcb_remove+0x70>
 800f188:	68fb      	ldr	r3, [r7, #12]
 800f18a:	68db      	ldr	r3, [r3, #12]
 800f18c:	60fb      	str	r3, [r7, #12]
 800f18e:	68fb      	ldr	r3, [r7, #12]
 800f190:	2b00      	cmp	r3, #0
 800f192:	d1ef      	bne.n	800f174 <tcp_pcb_remove+0x50>
 800f194:	683b      	ldr	r3, [r7, #0]
 800f196:	2200      	movs	r2, #0
 800f198:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800f19a:	6838      	ldr	r0, [r7, #0]
 800f19c:	f7ff ff72 	bl	800f084 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800f1a0:	683b      	ldr	r3, [r7, #0]
 800f1a2:	7d1b      	ldrb	r3, [r3, #20]
 800f1a4:	2b0a      	cmp	r3, #10
 800f1a6:	d013      	beq.n	800f1d0 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800f1a8:	683b      	ldr	r3, [r7, #0]
 800f1aa:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800f1ac:	2b01      	cmp	r3, #1
 800f1ae:	d00f      	beq.n	800f1d0 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800f1b0:	683b      	ldr	r3, [r7, #0]
 800f1b2:	8b5b      	ldrh	r3, [r3, #26]
 800f1b4:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800f1b8:	2b00      	cmp	r3, #0
 800f1ba:	d009      	beq.n	800f1d0 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800f1bc:	683b      	ldr	r3, [r7, #0]
 800f1be:	8b5b      	ldrh	r3, [r3, #26]
 800f1c0:	f043 0302 	orr.w	r3, r3, #2
 800f1c4:	b29a      	uxth	r2, r3
 800f1c6:	683b      	ldr	r3, [r7, #0]
 800f1c8:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800f1ca:	6838      	ldr	r0, [r7, #0]
 800f1cc:	f003 fbc0 	bl	8012950 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800f1d0:	683b      	ldr	r3, [r7, #0]
 800f1d2:	7d1b      	ldrb	r3, [r3, #20]
 800f1d4:	2b01      	cmp	r3, #1
 800f1d6:	d020      	beq.n	800f21a <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800f1d8:	683b      	ldr	r3, [r7, #0]
 800f1da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f1dc:	2b00      	cmp	r3, #0
 800f1de:	d006      	beq.n	800f1ee <tcp_pcb_remove+0xca>
 800f1e0:	4b13      	ldr	r3, [pc, #76]	@ (800f230 <tcp_pcb_remove+0x10c>)
 800f1e2:	f640 0293 	movw	r2, #2195	@ 0x893
 800f1e6:	4916      	ldr	r1, [pc, #88]	@ (800f240 <tcp_pcb_remove+0x11c>)
 800f1e8:	4813      	ldr	r0, [pc, #76]	@ (800f238 <tcp_pcb_remove+0x114>)
 800f1ea:	f007 fd1d 	bl	8016c28 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800f1ee:	683b      	ldr	r3, [r7, #0]
 800f1f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f1f2:	2b00      	cmp	r3, #0
 800f1f4:	d006      	beq.n	800f204 <tcp_pcb_remove+0xe0>
 800f1f6:	4b0e      	ldr	r3, [pc, #56]	@ (800f230 <tcp_pcb_remove+0x10c>)
 800f1f8:	f640 0294 	movw	r2, #2196	@ 0x894
 800f1fc:	4911      	ldr	r1, [pc, #68]	@ (800f244 <tcp_pcb_remove+0x120>)
 800f1fe:	480e      	ldr	r0, [pc, #56]	@ (800f238 <tcp_pcb_remove+0x114>)
 800f200:	f007 fd12 	bl	8016c28 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800f204:	683b      	ldr	r3, [r7, #0]
 800f206:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f208:	2b00      	cmp	r3, #0
 800f20a:	d006      	beq.n	800f21a <tcp_pcb_remove+0xf6>
 800f20c:	4b08      	ldr	r3, [pc, #32]	@ (800f230 <tcp_pcb_remove+0x10c>)
 800f20e:	f640 0296 	movw	r2, #2198	@ 0x896
 800f212:	490d      	ldr	r1, [pc, #52]	@ (800f248 <tcp_pcb_remove+0x124>)
 800f214:	4808      	ldr	r0, [pc, #32]	@ (800f238 <tcp_pcb_remove+0x114>)
 800f216:	f007 fd07 	bl	8016c28 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800f21a:	683b      	ldr	r3, [r7, #0]
 800f21c:	2200      	movs	r2, #0
 800f21e:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800f220:	683b      	ldr	r3, [r7, #0]
 800f222:	2200      	movs	r2, #0
 800f224:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800f226:	bf00      	nop
 800f228:	3710      	adds	r7, #16
 800f22a:	46bd      	mov	sp, r7
 800f22c:	bd80      	pop	{r7, pc}
 800f22e:	bf00      	nop
 800f230:	08019324 	.word	0x08019324
 800f234:	0801998c 	.word	0x0801998c
 800f238:	08019368 	.word	0x08019368
 800f23c:	080199a8 	.word	0x080199a8
 800f240:	080199c8 	.word	0x080199c8
 800f244:	080199e0 	.word	0x080199e0
 800f248:	080199fc 	.word	0x080199fc

0800f24c <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800f24c:	b580      	push	{r7, lr}
 800f24e:	b082      	sub	sp, #8
 800f250:	af00      	add	r7, sp, #0
 800f252:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	2b00      	cmp	r3, #0
 800f258:	d106      	bne.n	800f268 <tcp_next_iss+0x1c>
 800f25a:	4b0a      	ldr	r3, [pc, #40]	@ (800f284 <tcp_next_iss+0x38>)
 800f25c:	f640 02af 	movw	r2, #2223	@ 0x8af
 800f260:	4909      	ldr	r1, [pc, #36]	@ (800f288 <tcp_next_iss+0x3c>)
 800f262:	480a      	ldr	r0, [pc, #40]	@ (800f28c <tcp_next_iss+0x40>)
 800f264:	f007 fce0 	bl	8016c28 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800f268:	4b09      	ldr	r3, [pc, #36]	@ (800f290 <tcp_next_iss+0x44>)
 800f26a:	681a      	ldr	r2, [r3, #0]
 800f26c:	4b09      	ldr	r3, [pc, #36]	@ (800f294 <tcp_next_iss+0x48>)
 800f26e:	681b      	ldr	r3, [r3, #0]
 800f270:	4413      	add	r3, r2
 800f272:	4a07      	ldr	r2, [pc, #28]	@ (800f290 <tcp_next_iss+0x44>)
 800f274:	6013      	str	r3, [r2, #0]
  return iss;
 800f276:	4b06      	ldr	r3, [pc, #24]	@ (800f290 <tcp_next_iss+0x44>)
 800f278:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800f27a:	4618      	mov	r0, r3
 800f27c:	3708      	adds	r7, #8
 800f27e:	46bd      	mov	sp, r7
 800f280:	bd80      	pop	{r7, pc}
 800f282:	bf00      	nop
 800f284:	08019324 	.word	0x08019324
 800f288:	08019a14 	.word	0x08019a14
 800f28c:	08019368 	.word	0x08019368
 800f290:	20000128 	.word	0x20000128
 800f294:	2000f3e8 	.word	0x2000f3e8

0800f298 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800f298:	b580      	push	{r7, lr}
 800f29a:	b086      	sub	sp, #24
 800f29c:	af00      	add	r7, sp, #0
 800f29e:	4603      	mov	r3, r0
 800f2a0:	60b9      	str	r1, [r7, #8]
 800f2a2:	607a      	str	r2, [r7, #4]
 800f2a4:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800f2a6:	687b      	ldr	r3, [r7, #4]
 800f2a8:	2b00      	cmp	r3, #0
 800f2aa:	d106      	bne.n	800f2ba <tcp_eff_send_mss_netif+0x22>
 800f2ac:	4b14      	ldr	r3, [pc, #80]	@ (800f300 <tcp_eff_send_mss_netif+0x68>)
 800f2ae:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 800f2b2:	4914      	ldr	r1, [pc, #80]	@ (800f304 <tcp_eff_send_mss_netif+0x6c>)
 800f2b4:	4814      	ldr	r0, [pc, #80]	@ (800f308 <tcp_eff_send_mss_netif+0x70>)
 800f2b6:	f007 fcb7 	bl	8016c28 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800f2ba:	68bb      	ldr	r3, [r7, #8]
 800f2bc:	2b00      	cmp	r3, #0
 800f2be:	d101      	bne.n	800f2c4 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800f2c0:	89fb      	ldrh	r3, [r7, #14]
 800f2c2:	e019      	b.n	800f2f8 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800f2c4:	68bb      	ldr	r3, [r7, #8]
 800f2c6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800f2c8:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800f2ca:	8afb      	ldrh	r3, [r7, #22]
 800f2cc:	2b00      	cmp	r3, #0
 800f2ce:	d012      	beq.n	800f2f6 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800f2d0:	2328      	movs	r3, #40	@ 0x28
 800f2d2:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800f2d4:	8afa      	ldrh	r2, [r7, #22]
 800f2d6:	8abb      	ldrh	r3, [r7, #20]
 800f2d8:	429a      	cmp	r2, r3
 800f2da:	d904      	bls.n	800f2e6 <tcp_eff_send_mss_netif+0x4e>
 800f2dc:	8afa      	ldrh	r2, [r7, #22]
 800f2de:	8abb      	ldrh	r3, [r7, #20]
 800f2e0:	1ad3      	subs	r3, r2, r3
 800f2e2:	b29b      	uxth	r3, r3
 800f2e4:	e000      	b.n	800f2e8 <tcp_eff_send_mss_netif+0x50>
 800f2e6:	2300      	movs	r3, #0
 800f2e8:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800f2ea:	8a7a      	ldrh	r2, [r7, #18]
 800f2ec:	89fb      	ldrh	r3, [r7, #14]
 800f2ee:	4293      	cmp	r3, r2
 800f2f0:	bf28      	it	cs
 800f2f2:	4613      	movcs	r3, r2
 800f2f4:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800f2f6:	89fb      	ldrh	r3, [r7, #14]
}
 800f2f8:	4618      	mov	r0, r3
 800f2fa:	3718      	adds	r7, #24
 800f2fc:	46bd      	mov	sp, r7
 800f2fe:	bd80      	pop	{r7, pc}
 800f300:	08019324 	.word	0x08019324
 800f304:	08019a30 	.word	0x08019a30
 800f308:	08019368 	.word	0x08019368

0800f30c <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800f30c:	b580      	push	{r7, lr}
 800f30e:	b084      	sub	sp, #16
 800f310:	af00      	add	r7, sp, #0
 800f312:	6078      	str	r0, [r7, #4]
 800f314:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800f316:	683b      	ldr	r3, [r7, #0]
 800f318:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	2b00      	cmp	r3, #0
 800f31e:	d119      	bne.n	800f354 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800f320:	4b10      	ldr	r3, [pc, #64]	@ (800f364 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800f322:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 800f326:	4910      	ldr	r1, [pc, #64]	@ (800f368 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800f328:	4810      	ldr	r0, [pc, #64]	@ (800f36c <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800f32a:	f007 fc7d 	bl	8016c28 <iprintf>

  while (pcb != NULL) {
 800f32e:	e011      	b.n	800f354 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800f330:	68fb      	ldr	r3, [r7, #12]
 800f332:	681a      	ldr	r2, [r3, #0]
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	681b      	ldr	r3, [r3, #0]
 800f338:	429a      	cmp	r2, r3
 800f33a:	d108      	bne.n	800f34e <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800f33c:	68fb      	ldr	r3, [r7, #12]
 800f33e:	68db      	ldr	r3, [r3, #12]
 800f340:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800f342:	68f8      	ldr	r0, [r7, #12]
 800f344:	f7fe fd42 	bl	800ddcc <tcp_abort>
      pcb = next;
 800f348:	68bb      	ldr	r3, [r7, #8]
 800f34a:	60fb      	str	r3, [r7, #12]
 800f34c:	e002      	b.n	800f354 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800f34e:	68fb      	ldr	r3, [r7, #12]
 800f350:	68db      	ldr	r3, [r3, #12]
 800f352:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800f354:	68fb      	ldr	r3, [r7, #12]
 800f356:	2b00      	cmp	r3, #0
 800f358:	d1ea      	bne.n	800f330 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800f35a:	bf00      	nop
 800f35c:	bf00      	nop
 800f35e:	3710      	adds	r7, #16
 800f360:	46bd      	mov	sp, r7
 800f362:	bd80      	pop	{r7, pc}
 800f364:	08019324 	.word	0x08019324
 800f368:	08019a58 	.word	0x08019a58
 800f36c:	08019368 	.word	0x08019368

0800f370 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800f370:	b580      	push	{r7, lr}
 800f372:	b084      	sub	sp, #16
 800f374:	af00      	add	r7, sp, #0
 800f376:	6078      	str	r0, [r7, #4]
 800f378:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	2b00      	cmp	r3, #0
 800f37e:	d02a      	beq.n	800f3d6 <tcp_netif_ip_addr_changed+0x66>
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	681b      	ldr	r3, [r3, #0]
 800f384:	2b00      	cmp	r3, #0
 800f386:	d026      	beq.n	800f3d6 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800f388:	4b15      	ldr	r3, [pc, #84]	@ (800f3e0 <tcp_netif_ip_addr_changed+0x70>)
 800f38a:	681b      	ldr	r3, [r3, #0]
 800f38c:	4619      	mov	r1, r3
 800f38e:	6878      	ldr	r0, [r7, #4]
 800f390:	f7ff ffbc 	bl	800f30c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800f394:	4b13      	ldr	r3, [pc, #76]	@ (800f3e4 <tcp_netif_ip_addr_changed+0x74>)
 800f396:	681b      	ldr	r3, [r3, #0]
 800f398:	4619      	mov	r1, r3
 800f39a:	6878      	ldr	r0, [r7, #4]
 800f39c:	f7ff ffb6 	bl	800f30c <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800f3a0:	683b      	ldr	r3, [r7, #0]
 800f3a2:	2b00      	cmp	r3, #0
 800f3a4:	d017      	beq.n	800f3d6 <tcp_netif_ip_addr_changed+0x66>
 800f3a6:	683b      	ldr	r3, [r7, #0]
 800f3a8:	681b      	ldr	r3, [r3, #0]
 800f3aa:	2b00      	cmp	r3, #0
 800f3ac:	d013      	beq.n	800f3d6 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f3ae:	4b0e      	ldr	r3, [pc, #56]	@ (800f3e8 <tcp_netif_ip_addr_changed+0x78>)
 800f3b0:	681b      	ldr	r3, [r3, #0]
 800f3b2:	60fb      	str	r3, [r7, #12]
 800f3b4:	e00c      	b.n	800f3d0 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800f3b6:	68fb      	ldr	r3, [r7, #12]
 800f3b8:	681a      	ldr	r2, [r3, #0]
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	681b      	ldr	r3, [r3, #0]
 800f3be:	429a      	cmp	r2, r3
 800f3c0:	d103      	bne.n	800f3ca <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800f3c2:	683b      	ldr	r3, [r7, #0]
 800f3c4:	681a      	ldr	r2, [r3, #0]
 800f3c6:	68fb      	ldr	r3, [r7, #12]
 800f3c8:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f3ca:	68fb      	ldr	r3, [r7, #12]
 800f3cc:	68db      	ldr	r3, [r3, #12]
 800f3ce:	60fb      	str	r3, [r7, #12]
 800f3d0:	68fb      	ldr	r3, [r7, #12]
 800f3d2:	2b00      	cmp	r3, #0
 800f3d4:	d1ef      	bne.n	800f3b6 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800f3d6:	bf00      	nop
 800f3d8:	3710      	adds	r7, #16
 800f3da:	46bd      	mov	sp, r7
 800f3dc:	bd80      	pop	{r7, pc}
 800f3de:	bf00      	nop
 800f3e0:	2000f3f4 	.word	0x2000f3f4
 800f3e4:	2000f3ec 	.word	0x2000f3ec
 800f3e8:	2000f3f0 	.word	0x2000f3f0

0800f3ec <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800f3ec:	b580      	push	{r7, lr}
 800f3ee:	b082      	sub	sp, #8
 800f3f0:	af00      	add	r7, sp, #0
 800f3f2:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f3f8:	2b00      	cmp	r3, #0
 800f3fa:	d007      	beq.n	800f40c <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f400:	4618      	mov	r0, r3
 800f402:	f7ff fb67 	bl	800ead4 <tcp_segs_free>
    pcb->ooseq = NULL;
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	2200      	movs	r2, #0
 800f40a:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800f40c:	bf00      	nop
 800f40e:	3708      	adds	r7, #8
 800f410:	46bd      	mov	sp, r7
 800f412:	bd80      	pop	{r7, pc}

0800f414 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800f414:	b590      	push	{r4, r7, lr}
 800f416:	b08d      	sub	sp, #52	@ 0x34
 800f418:	af04      	add	r7, sp, #16
 800f41a:	6078      	str	r0, [r7, #4]
 800f41c:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	2b00      	cmp	r3, #0
 800f422:	d105      	bne.n	800f430 <tcp_input+0x1c>
 800f424:	4b9b      	ldr	r3, [pc, #620]	@ (800f694 <tcp_input+0x280>)
 800f426:	2283      	movs	r2, #131	@ 0x83
 800f428:	499b      	ldr	r1, [pc, #620]	@ (800f698 <tcp_input+0x284>)
 800f42a:	489c      	ldr	r0, [pc, #624]	@ (800f69c <tcp_input+0x288>)
 800f42c:	f007 fbfc 	bl	8016c28 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800f430:	687b      	ldr	r3, [r7, #4]
 800f432:	685b      	ldr	r3, [r3, #4]
 800f434:	4a9a      	ldr	r2, [pc, #616]	@ (800f6a0 <tcp_input+0x28c>)
 800f436:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	895b      	ldrh	r3, [r3, #10]
 800f43c:	2b13      	cmp	r3, #19
 800f43e:	f240 83d1 	bls.w	800fbe4 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800f442:	4b98      	ldr	r3, [pc, #608]	@ (800f6a4 <tcp_input+0x290>)
 800f444:	695b      	ldr	r3, [r3, #20]
 800f446:	4a97      	ldr	r2, [pc, #604]	@ (800f6a4 <tcp_input+0x290>)
 800f448:	6812      	ldr	r2, [r2, #0]
 800f44a:	4611      	mov	r1, r2
 800f44c:	4618      	mov	r0, r3
 800f44e:	f006 f9df 	bl	8015810 <ip4_addr_isbroadcast_u32>
 800f452:	4603      	mov	r3, r0
 800f454:	2b00      	cmp	r3, #0
 800f456:	f040 83c7 	bne.w	800fbe8 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800f45a:	4b92      	ldr	r3, [pc, #584]	@ (800f6a4 <tcp_input+0x290>)
 800f45c:	695b      	ldr	r3, [r3, #20]
 800f45e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800f462:	2be0      	cmp	r3, #224	@ 0xe0
 800f464:	f000 83c0 	beq.w	800fbe8 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800f468:	4b8d      	ldr	r3, [pc, #564]	@ (800f6a0 <tcp_input+0x28c>)
 800f46a:	681b      	ldr	r3, [r3, #0]
 800f46c:	899b      	ldrh	r3, [r3, #12]
 800f46e:	b29b      	uxth	r3, r3
 800f470:	4618      	mov	r0, r3
 800f472:	f7fc faa7 	bl	800b9c4 <lwip_htons>
 800f476:	4603      	mov	r3, r0
 800f478:	0b1b      	lsrs	r3, r3, #12
 800f47a:	b29b      	uxth	r3, r3
 800f47c:	b2db      	uxtb	r3, r3
 800f47e:	009b      	lsls	r3, r3, #2
 800f480:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800f482:	7cbb      	ldrb	r3, [r7, #18]
 800f484:	2b13      	cmp	r3, #19
 800f486:	f240 83b1 	bls.w	800fbec <tcp_input+0x7d8>
 800f48a:	7cbb      	ldrb	r3, [r7, #18]
 800f48c:	b29a      	uxth	r2, r3
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	891b      	ldrh	r3, [r3, #8]
 800f492:	429a      	cmp	r2, r3
 800f494:	f200 83aa 	bhi.w	800fbec <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800f498:	7cbb      	ldrb	r3, [r7, #18]
 800f49a:	b29b      	uxth	r3, r3
 800f49c:	3b14      	subs	r3, #20
 800f49e:	b29a      	uxth	r2, r3
 800f4a0:	4b81      	ldr	r3, [pc, #516]	@ (800f6a8 <tcp_input+0x294>)
 800f4a2:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800f4a4:	4b81      	ldr	r3, [pc, #516]	@ (800f6ac <tcp_input+0x298>)
 800f4a6:	2200      	movs	r2, #0
 800f4a8:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	895a      	ldrh	r2, [r3, #10]
 800f4ae:	7cbb      	ldrb	r3, [r7, #18]
 800f4b0:	b29b      	uxth	r3, r3
 800f4b2:	429a      	cmp	r2, r3
 800f4b4:	d309      	bcc.n	800f4ca <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800f4b6:	4b7c      	ldr	r3, [pc, #496]	@ (800f6a8 <tcp_input+0x294>)
 800f4b8:	881a      	ldrh	r2, [r3, #0]
 800f4ba:	4b7d      	ldr	r3, [pc, #500]	@ (800f6b0 <tcp_input+0x29c>)
 800f4bc:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800f4be:	7cbb      	ldrb	r3, [r7, #18]
 800f4c0:	4619      	mov	r1, r3
 800f4c2:	6878      	ldr	r0, [r7, #4]
 800f4c4:	f7fd fdea 	bl	800d09c <pbuf_remove_header>
 800f4c8:	e04e      	b.n	800f568 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	681b      	ldr	r3, [r3, #0]
 800f4ce:	2b00      	cmp	r3, #0
 800f4d0:	d105      	bne.n	800f4de <tcp_input+0xca>
 800f4d2:	4b70      	ldr	r3, [pc, #448]	@ (800f694 <tcp_input+0x280>)
 800f4d4:	22c2      	movs	r2, #194	@ 0xc2
 800f4d6:	4977      	ldr	r1, [pc, #476]	@ (800f6b4 <tcp_input+0x2a0>)
 800f4d8:	4870      	ldr	r0, [pc, #448]	@ (800f69c <tcp_input+0x288>)
 800f4da:	f007 fba5 	bl	8016c28 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800f4de:	2114      	movs	r1, #20
 800f4e0:	6878      	ldr	r0, [r7, #4]
 800f4e2:	f7fd fddb 	bl	800d09c <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	895a      	ldrh	r2, [r3, #10]
 800f4ea:	4b71      	ldr	r3, [pc, #452]	@ (800f6b0 <tcp_input+0x29c>)
 800f4ec:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800f4ee:	4b6e      	ldr	r3, [pc, #440]	@ (800f6a8 <tcp_input+0x294>)
 800f4f0:	881a      	ldrh	r2, [r3, #0]
 800f4f2:	4b6f      	ldr	r3, [pc, #444]	@ (800f6b0 <tcp_input+0x29c>)
 800f4f4:	881b      	ldrh	r3, [r3, #0]
 800f4f6:	1ad3      	subs	r3, r2, r3
 800f4f8:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800f4fa:	4b6d      	ldr	r3, [pc, #436]	@ (800f6b0 <tcp_input+0x29c>)
 800f4fc:	881b      	ldrh	r3, [r3, #0]
 800f4fe:	4619      	mov	r1, r3
 800f500:	6878      	ldr	r0, [r7, #4]
 800f502:	f7fd fdcb 	bl	800d09c <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	681b      	ldr	r3, [r3, #0]
 800f50a:	895b      	ldrh	r3, [r3, #10]
 800f50c:	8a3a      	ldrh	r2, [r7, #16]
 800f50e:	429a      	cmp	r2, r3
 800f510:	f200 836e 	bhi.w	800fbf0 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	681b      	ldr	r3, [r3, #0]
 800f518:	685b      	ldr	r3, [r3, #4]
 800f51a:	4a64      	ldr	r2, [pc, #400]	@ (800f6ac <tcp_input+0x298>)
 800f51c:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800f51e:	687b      	ldr	r3, [r7, #4]
 800f520:	681b      	ldr	r3, [r3, #0]
 800f522:	8a3a      	ldrh	r2, [r7, #16]
 800f524:	4611      	mov	r1, r2
 800f526:	4618      	mov	r0, r3
 800f528:	f7fd fdb8 	bl	800d09c <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	891a      	ldrh	r2, [r3, #8]
 800f530:	8a3b      	ldrh	r3, [r7, #16]
 800f532:	1ad3      	subs	r3, r2, r3
 800f534:	b29a      	uxth	r2, r3
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	895b      	ldrh	r3, [r3, #10]
 800f53e:	2b00      	cmp	r3, #0
 800f540:	d005      	beq.n	800f54e <tcp_input+0x13a>
 800f542:	4b54      	ldr	r3, [pc, #336]	@ (800f694 <tcp_input+0x280>)
 800f544:	22df      	movs	r2, #223	@ 0xdf
 800f546:	495c      	ldr	r1, [pc, #368]	@ (800f6b8 <tcp_input+0x2a4>)
 800f548:	4854      	ldr	r0, [pc, #336]	@ (800f69c <tcp_input+0x288>)
 800f54a:	f007 fb6d 	bl	8016c28 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	891a      	ldrh	r2, [r3, #8]
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	681b      	ldr	r3, [r3, #0]
 800f556:	891b      	ldrh	r3, [r3, #8]
 800f558:	429a      	cmp	r2, r3
 800f55a:	d005      	beq.n	800f568 <tcp_input+0x154>
 800f55c:	4b4d      	ldr	r3, [pc, #308]	@ (800f694 <tcp_input+0x280>)
 800f55e:	22e0      	movs	r2, #224	@ 0xe0
 800f560:	4956      	ldr	r1, [pc, #344]	@ (800f6bc <tcp_input+0x2a8>)
 800f562:	484e      	ldr	r0, [pc, #312]	@ (800f69c <tcp_input+0x288>)
 800f564:	f007 fb60 	bl	8016c28 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800f568:	4b4d      	ldr	r3, [pc, #308]	@ (800f6a0 <tcp_input+0x28c>)
 800f56a:	681b      	ldr	r3, [r3, #0]
 800f56c:	881b      	ldrh	r3, [r3, #0]
 800f56e:	b29b      	uxth	r3, r3
 800f570:	4a4b      	ldr	r2, [pc, #300]	@ (800f6a0 <tcp_input+0x28c>)
 800f572:	6814      	ldr	r4, [r2, #0]
 800f574:	4618      	mov	r0, r3
 800f576:	f7fc fa25 	bl	800b9c4 <lwip_htons>
 800f57a:	4603      	mov	r3, r0
 800f57c:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800f57e:	4b48      	ldr	r3, [pc, #288]	@ (800f6a0 <tcp_input+0x28c>)
 800f580:	681b      	ldr	r3, [r3, #0]
 800f582:	885b      	ldrh	r3, [r3, #2]
 800f584:	b29b      	uxth	r3, r3
 800f586:	4a46      	ldr	r2, [pc, #280]	@ (800f6a0 <tcp_input+0x28c>)
 800f588:	6814      	ldr	r4, [r2, #0]
 800f58a:	4618      	mov	r0, r3
 800f58c:	f7fc fa1a 	bl	800b9c4 <lwip_htons>
 800f590:	4603      	mov	r3, r0
 800f592:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800f594:	4b42      	ldr	r3, [pc, #264]	@ (800f6a0 <tcp_input+0x28c>)
 800f596:	681b      	ldr	r3, [r3, #0]
 800f598:	685b      	ldr	r3, [r3, #4]
 800f59a:	4a41      	ldr	r2, [pc, #260]	@ (800f6a0 <tcp_input+0x28c>)
 800f59c:	6814      	ldr	r4, [r2, #0]
 800f59e:	4618      	mov	r0, r3
 800f5a0:	f7fc fa25 	bl	800b9ee <lwip_htonl>
 800f5a4:	4603      	mov	r3, r0
 800f5a6:	6063      	str	r3, [r4, #4]
 800f5a8:	6863      	ldr	r3, [r4, #4]
 800f5aa:	4a45      	ldr	r2, [pc, #276]	@ (800f6c0 <tcp_input+0x2ac>)
 800f5ac:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800f5ae:	4b3c      	ldr	r3, [pc, #240]	@ (800f6a0 <tcp_input+0x28c>)
 800f5b0:	681b      	ldr	r3, [r3, #0]
 800f5b2:	689b      	ldr	r3, [r3, #8]
 800f5b4:	4a3a      	ldr	r2, [pc, #232]	@ (800f6a0 <tcp_input+0x28c>)
 800f5b6:	6814      	ldr	r4, [r2, #0]
 800f5b8:	4618      	mov	r0, r3
 800f5ba:	f7fc fa18 	bl	800b9ee <lwip_htonl>
 800f5be:	4603      	mov	r3, r0
 800f5c0:	60a3      	str	r3, [r4, #8]
 800f5c2:	68a3      	ldr	r3, [r4, #8]
 800f5c4:	4a3f      	ldr	r2, [pc, #252]	@ (800f6c4 <tcp_input+0x2b0>)
 800f5c6:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800f5c8:	4b35      	ldr	r3, [pc, #212]	@ (800f6a0 <tcp_input+0x28c>)
 800f5ca:	681b      	ldr	r3, [r3, #0]
 800f5cc:	89db      	ldrh	r3, [r3, #14]
 800f5ce:	b29b      	uxth	r3, r3
 800f5d0:	4a33      	ldr	r2, [pc, #204]	@ (800f6a0 <tcp_input+0x28c>)
 800f5d2:	6814      	ldr	r4, [r2, #0]
 800f5d4:	4618      	mov	r0, r3
 800f5d6:	f7fc f9f5 	bl	800b9c4 <lwip_htons>
 800f5da:	4603      	mov	r3, r0
 800f5dc:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800f5de:	4b30      	ldr	r3, [pc, #192]	@ (800f6a0 <tcp_input+0x28c>)
 800f5e0:	681b      	ldr	r3, [r3, #0]
 800f5e2:	899b      	ldrh	r3, [r3, #12]
 800f5e4:	b29b      	uxth	r3, r3
 800f5e6:	4618      	mov	r0, r3
 800f5e8:	f7fc f9ec 	bl	800b9c4 <lwip_htons>
 800f5ec:	4603      	mov	r3, r0
 800f5ee:	b2db      	uxtb	r3, r3
 800f5f0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800f5f4:	b2da      	uxtb	r2, r3
 800f5f6:	4b34      	ldr	r3, [pc, #208]	@ (800f6c8 <tcp_input+0x2b4>)
 800f5f8:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	891a      	ldrh	r2, [r3, #8]
 800f5fe:	4b33      	ldr	r3, [pc, #204]	@ (800f6cc <tcp_input+0x2b8>)
 800f600:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800f602:	4b31      	ldr	r3, [pc, #196]	@ (800f6c8 <tcp_input+0x2b4>)
 800f604:	781b      	ldrb	r3, [r3, #0]
 800f606:	f003 0303 	and.w	r3, r3, #3
 800f60a:	2b00      	cmp	r3, #0
 800f60c:	d00c      	beq.n	800f628 <tcp_input+0x214>
    tcplen++;
 800f60e:	4b2f      	ldr	r3, [pc, #188]	@ (800f6cc <tcp_input+0x2b8>)
 800f610:	881b      	ldrh	r3, [r3, #0]
 800f612:	3301      	adds	r3, #1
 800f614:	b29a      	uxth	r2, r3
 800f616:	4b2d      	ldr	r3, [pc, #180]	@ (800f6cc <tcp_input+0x2b8>)
 800f618:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	891a      	ldrh	r2, [r3, #8]
 800f61e:	4b2b      	ldr	r3, [pc, #172]	@ (800f6cc <tcp_input+0x2b8>)
 800f620:	881b      	ldrh	r3, [r3, #0]
 800f622:	429a      	cmp	r2, r3
 800f624:	f200 82e6 	bhi.w	800fbf4 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800f628:	2300      	movs	r3, #0
 800f62a:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f62c:	4b28      	ldr	r3, [pc, #160]	@ (800f6d0 <tcp_input+0x2bc>)
 800f62e:	681b      	ldr	r3, [r3, #0]
 800f630:	61fb      	str	r3, [r7, #28]
 800f632:	e09d      	b.n	800f770 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800f634:	69fb      	ldr	r3, [r7, #28]
 800f636:	7d1b      	ldrb	r3, [r3, #20]
 800f638:	2b00      	cmp	r3, #0
 800f63a:	d105      	bne.n	800f648 <tcp_input+0x234>
 800f63c:	4b15      	ldr	r3, [pc, #84]	@ (800f694 <tcp_input+0x280>)
 800f63e:	22fb      	movs	r2, #251	@ 0xfb
 800f640:	4924      	ldr	r1, [pc, #144]	@ (800f6d4 <tcp_input+0x2c0>)
 800f642:	4816      	ldr	r0, [pc, #88]	@ (800f69c <tcp_input+0x288>)
 800f644:	f007 faf0 	bl	8016c28 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800f648:	69fb      	ldr	r3, [r7, #28]
 800f64a:	7d1b      	ldrb	r3, [r3, #20]
 800f64c:	2b0a      	cmp	r3, #10
 800f64e:	d105      	bne.n	800f65c <tcp_input+0x248>
 800f650:	4b10      	ldr	r3, [pc, #64]	@ (800f694 <tcp_input+0x280>)
 800f652:	22fc      	movs	r2, #252	@ 0xfc
 800f654:	4920      	ldr	r1, [pc, #128]	@ (800f6d8 <tcp_input+0x2c4>)
 800f656:	4811      	ldr	r0, [pc, #68]	@ (800f69c <tcp_input+0x288>)
 800f658:	f007 fae6 	bl	8016c28 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800f65c:	69fb      	ldr	r3, [r7, #28]
 800f65e:	7d1b      	ldrb	r3, [r3, #20]
 800f660:	2b01      	cmp	r3, #1
 800f662:	d105      	bne.n	800f670 <tcp_input+0x25c>
 800f664:	4b0b      	ldr	r3, [pc, #44]	@ (800f694 <tcp_input+0x280>)
 800f666:	22fd      	movs	r2, #253	@ 0xfd
 800f668:	491c      	ldr	r1, [pc, #112]	@ (800f6dc <tcp_input+0x2c8>)
 800f66a:	480c      	ldr	r0, [pc, #48]	@ (800f69c <tcp_input+0x288>)
 800f66c:	f007 fadc 	bl	8016c28 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f670:	69fb      	ldr	r3, [r7, #28]
 800f672:	7a1b      	ldrb	r3, [r3, #8]
 800f674:	2b00      	cmp	r3, #0
 800f676:	d033      	beq.n	800f6e0 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f678:	69fb      	ldr	r3, [r7, #28]
 800f67a:	7a1a      	ldrb	r2, [r3, #8]
 800f67c:	4b09      	ldr	r3, [pc, #36]	@ (800f6a4 <tcp_input+0x290>)
 800f67e:	685b      	ldr	r3, [r3, #4]
 800f680:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800f684:	3301      	adds	r3, #1
 800f686:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f688:	429a      	cmp	r2, r3
 800f68a:	d029      	beq.n	800f6e0 <tcp_input+0x2cc>
      prev = pcb;
 800f68c:	69fb      	ldr	r3, [r7, #28]
 800f68e:	61bb      	str	r3, [r7, #24]
      continue;
 800f690:	e06b      	b.n	800f76a <tcp_input+0x356>
 800f692:	bf00      	nop
 800f694:	08019a8c 	.word	0x08019a8c
 800f698:	08019ac0 	.word	0x08019ac0
 800f69c:	08019ad8 	.word	0x08019ad8
 800f6a0:	2000f410 	.word	0x2000f410
 800f6a4:	20009a9c 	.word	0x20009a9c
 800f6a8:	2000f414 	.word	0x2000f414
 800f6ac:	2000f418 	.word	0x2000f418
 800f6b0:	2000f416 	.word	0x2000f416
 800f6b4:	08019b00 	.word	0x08019b00
 800f6b8:	08019b10 	.word	0x08019b10
 800f6bc:	08019b1c 	.word	0x08019b1c
 800f6c0:	2000f420 	.word	0x2000f420
 800f6c4:	2000f424 	.word	0x2000f424
 800f6c8:	2000f42c 	.word	0x2000f42c
 800f6cc:	2000f42a 	.word	0x2000f42a
 800f6d0:	2000f3f4 	.word	0x2000f3f4
 800f6d4:	08019b3c 	.word	0x08019b3c
 800f6d8:	08019b64 	.word	0x08019b64
 800f6dc:	08019b90 	.word	0x08019b90
    }

    if (pcb->remote_port == tcphdr->src &&
 800f6e0:	69fb      	ldr	r3, [r7, #28]
 800f6e2:	8b1a      	ldrh	r2, [r3, #24]
 800f6e4:	4b72      	ldr	r3, [pc, #456]	@ (800f8b0 <tcp_input+0x49c>)
 800f6e6:	681b      	ldr	r3, [r3, #0]
 800f6e8:	881b      	ldrh	r3, [r3, #0]
 800f6ea:	b29b      	uxth	r3, r3
 800f6ec:	429a      	cmp	r2, r3
 800f6ee:	d13a      	bne.n	800f766 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800f6f0:	69fb      	ldr	r3, [r7, #28]
 800f6f2:	8ada      	ldrh	r2, [r3, #22]
 800f6f4:	4b6e      	ldr	r3, [pc, #440]	@ (800f8b0 <tcp_input+0x49c>)
 800f6f6:	681b      	ldr	r3, [r3, #0]
 800f6f8:	885b      	ldrh	r3, [r3, #2]
 800f6fa:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800f6fc:	429a      	cmp	r2, r3
 800f6fe:	d132      	bne.n	800f766 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f700:	69fb      	ldr	r3, [r7, #28]
 800f702:	685a      	ldr	r2, [r3, #4]
 800f704:	4b6b      	ldr	r3, [pc, #428]	@ (800f8b4 <tcp_input+0x4a0>)
 800f706:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800f708:	429a      	cmp	r2, r3
 800f70a:	d12c      	bne.n	800f766 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800f70c:	69fb      	ldr	r3, [r7, #28]
 800f70e:	681a      	ldr	r2, [r3, #0]
 800f710:	4b68      	ldr	r3, [pc, #416]	@ (800f8b4 <tcp_input+0x4a0>)
 800f712:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f714:	429a      	cmp	r2, r3
 800f716:	d126      	bne.n	800f766 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800f718:	69fb      	ldr	r3, [r7, #28]
 800f71a:	68db      	ldr	r3, [r3, #12]
 800f71c:	69fa      	ldr	r2, [r7, #28]
 800f71e:	429a      	cmp	r2, r3
 800f720:	d106      	bne.n	800f730 <tcp_input+0x31c>
 800f722:	4b65      	ldr	r3, [pc, #404]	@ (800f8b8 <tcp_input+0x4a4>)
 800f724:	f240 120d 	movw	r2, #269	@ 0x10d
 800f728:	4964      	ldr	r1, [pc, #400]	@ (800f8bc <tcp_input+0x4a8>)
 800f72a:	4865      	ldr	r0, [pc, #404]	@ (800f8c0 <tcp_input+0x4ac>)
 800f72c:	f007 fa7c 	bl	8016c28 <iprintf>
      if (prev != NULL) {
 800f730:	69bb      	ldr	r3, [r7, #24]
 800f732:	2b00      	cmp	r3, #0
 800f734:	d00a      	beq.n	800f74c <tcp_input+0x338>
        prev->next = pcb->next;
 800f736:	69fb      	ldr	r3, [r7, #28]
 800f738:	68da      	ldr	r2, [r3, #12]
 800f73a:	69bb      	ldr	r3, [r7, #24]
 800f73c:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800f73e:	4b61      	ldr	r3, [pc, #388]	@ (800f8c4 <tcp_input+0x4b0>)
 800f740:	681a      	ldr	r2, [r3, #0]
 800f742:	69fb      	ldr	r3, [r7, #28]
 800f744:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800f746:	4a5f      	ldr	r2, [pc, #380]	@ (800f8c4 <tcp_input+0x4b0>)
 800f748:	69fb      	ldr	r3, [r7, #28]
 800f74a:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800f74c:	69fb      	ldr	r3, [r7, #28]
 800f74e:	68db      	ldr	r3, [r3, #12]
 800f750:	69fa      	ldr	r2, [r7, #28]
 800f752:	429a      	cmp	r2, r3
 800f754:	d111      	bne.n	800f77a <tcp_input+0x366>
 800f756:	4b58      	ldr	r3, [pc, #352]	@ (800f8b8 <tcp_input+0x4a4>)
 800f758:	f240 1215 	movw	r2, #277	@ 0x115
 800f75c:	495a      	ldr	r1, [pc, #360]	@ (800f8c8 <tcp_input+0x4b4>)
 800f75e:	4858      	ldr	r0, [pc, #352]	@ (800f8c0 <tcp_input+0x4ac>)
 800f760:	f007 fa62 	bl	8016c28 <iprintf>
      break;
 800f764:	e009      	b.n	800f77a <tcp_input+0x366>
    }
    prev = pcb;
 800f766:	69fb      	ldr	r3, [r7, #28]
 800f768:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f76a:	69fb      	ldr	r3, [r7, #28]
 800f76c:	68db      	ldr	r3, [r3, #12]
 800f76e:	61fb      	str	r3, [r7, #28]
 800f770:	69fb      	ldr	r3, [r7, #28]
 800f772:	2b00      	cmp	r3, #0
 800f774:	f47f af5e 	bne.w	800f634 <tcp_input+0x220>
 800f778:	e000      	b.n	800f77c <tcp_input+0x368>
      break;
 800f77a:	bf00      	nop
  }

  if (pcb == NULL) {
 800f77c:	69fb      	ldr	r3, [r7, #28]
 800f77e:	2b00      	cmp	r3, #0
 800f780:	f040 80aa 	bne.w	800f8d8 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f784:	4b51      	ldr	r3, [pc, #324]	@ (800f8cc <tcp_input+0x4b8>)
 800f786:	681b      	ldr	r3, [r3, #0]
 800f788:	61fb      	str	r3, [r7, #28]
 800f78a:	e03f      	b.n	800f80c <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800f78c:	69fb      	ldr	r3, [r7, #28]
 800f78e:	7d1b      	ldrb	r3, [r3, #20]
 800f790:	2b0a      	cmp	r3, #10
 800f792:	d006      	beq.n	800f7a2 <tcp_input+0x38e>
 800f794:	4b48      	ldr	r3, [pc, #288]	@ (800f8b8 <tcp_input+0x4a4>)
 800f796:	f240 121f 	movw	r2, #287	@ 0x11f
 800f79a:	494d      	ldr	r1, [pc, #308]	@ (800f8d0 <tcp_input+0x4bc>)
 800f79c:	4848      	ldr	r0, [pc, #288]	@ (800f8c0 <tcp_input+0x4ac>)
 800f79e:	f007 fa43 	bl	8016c28 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f7a2:	69fb      	ldr	r3, [r7, #28]
 800f7a4:	7a1b      	ldrb	r3, [r3, #8]
 800f7a6:	2b00      	cmp	r3, #0
 800f7a8:	d009      	beq.n	800f7be <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f7aa:	69fb      	ldr	r3, [r7, #28]
 800f7ac:	7a1a      	ldrb	r2, [r3, #8]
 800f7ae:	4b41      	ldr	r3, [pc, #260]	@ (800f8b4 <tcp_input+0x4a0>)
 800f7b0:	685b      	ldr	r3, [r3, #4]
 800f7b2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800f7b6:	3301      	adds	r3, #1
 800f7b8:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f7ba:	429a      	cmp	r2, r3
 800f7bc:	d122      	bne.n	800f804 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800f7be:	69fb      	ldr	r3, [r7, #28]
 800f7c0:	8b1a      	ldrh	r2, [r3, #24]
 800f7c2:	4b3b      	ldr	r3, [pc, #236]	@ (800f8b0 <tcp_input+0x49c>)
 800f7c4:	681b      	ldr	r3, [r3, #0]
 800f7c6:	881b      	ldrh	r3, [r3, #0]
 800f7c8:	b29b      	uxth	r3, r3
 800f7ca:	429a      	cmp	r2, r3
 800f7cc:	d11b      	bne.n	800f806 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800f7ce:	69fb      	ldr	r3, [r7, #28]
 800f7d0:	8ada      	ldrh	r2, [r3, #22]
 800f7d2:	4b37      	ldr	r3, [pc, #220]	@ (800f8b0 <tcp_input+0x49c>)
 800f7d4:	681b      	ldr	r3, [r3, #0]
 800f7d6:	885b      	ldrh	r3, [r3, #2]
 800f7d8:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800f7da:	429a      	cmp	r2, r3
 800f7dc:	d113      	bne.n	800f806 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f7de:	69fb      	ldr	r3, [r7, #28]
 800f7e0:	685a      	ldr	r2, [r3, #4]
 800f7e2:	4b34      	ldr	r3, [pc, #208]	@ (800f8b4 <tcp_input+0x4a0>)
 800f7e4:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800f7e6:	429a      	cmp	r2, r3
 800f7e8:	d10d      	bne.n	800f806 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800f7ea:	69fb      	ldr	r3, [r7, #28]
 800f7ec:	681a      	ldr	r2, [r3, #0]
 800f7ee:	4b31      	ldr	r3, [pc, #196]	@ (800f8b4 <tcp_input+0x4a0>)
 800f7f0:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f7f2:	429a      	cmp	r2, r3
 800f7f4:	d107      	bne.n	800f806 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800f7f6:	69f8      	ldr	r0, [r7, #28]
 800f7f8:	f000 fb56 	bl	800fea8 <tcp_timewait_input>
        }
        pbuf_free(p);
 800f7fc:	6878      	ldr	r0, [r7, #4]
 800f7fe:	f7fd fcd3 	bl	800d1a8 <pbuf_free>
        return;
 800f802:	e1fd      	b.n	800fc00 <tcp_input+0x7ec>
        continue;
 800f804:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f806:	69fb      	ldr	r3, [r7, #28]
 800f808:	68db      	ldr	r3, [r3, #12]
 800f80a:	61fb      	str	r3, [r7, #28]
 800f80c:	69fb      	ldr	r3, [r7, #28]
 800f80e:	2b00      	cmp	r3, #0
 800f810:	d1bc      	bne.n	800f78c <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800f812:	2300      	movs	r3, #0
 800f814:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f816:	4b2f      	ldr	r3, [pc, #188]	@ (800f8d4 <tcp_input+0x4c0>)
 800f818:	681b      	ldr	r3, [r3, #0]
 800f81a:	617b      	str	r3, [r7, #20]
 800f81c:	e02a      	b.n	800f874 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800f81e:	697b      	ldr	r3, [r7, #20]
 800f820:	7a1b      	ldrb	r3, [r3, #8]
 800f822:	2b00      	cmp	r3, #0
 800f824:	d00c      	beq.n	800f840 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f826:	697b      	ldr	r3, [r7, #20]
 800f828:	7a1a      	ldrb	r2, [r3, #8]
 800f82a:	4b22      	ldr	r3, [pc, #136]	@ (800f8b4 <tcp_input+0x4a0>)
 800f82c:	685b      	ldr	r3, [r3, #4]
 800f82e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800f832:	3301      	adds	r3, #1
 800f834:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800f836:	429a      	cmp	r2, r3
 800f838:	d002      	beq.n	800f840 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800f83a:	697b      	ldr	r3, [r7, #20]
 800f83c:	61bb      	str	r3, [r7, #24]
        continue;
 800f83e:	e016      	b.n	800f86e <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800f840:	697b      	ldr	r3, [r7, #20]
 800f842:	8ada      	ldrh	r2, [r3, #22]
 800f844:	4b1a      	ldr	r3, [pc, #104]	@ (800f8b0 <tcp_input+0x49c>)
 800f846:	681b      	ldr	r3, [r3, #0]
 800f848:	885b      	ldrh	r3, [r3, #2]
 800f84a:	b29b      	uxth	r3, r3
 800f84c:	429a      	cmp	r2, r3
 800f84e:	d10c      	bne.n	800f86a <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800f850:	697b      	ldr	r3, [r7, #20]
 800f852:	681a      	ldr	r2, [r3, #0]
 800f854:	4b17      	ldr	r3, [pc, #92]	@ (800f8b4 <tcp_input+0x4a0>)
 800f856:	695b      	ldr	r3, [r3, #20]
 800f858:	429a      	cmp	r2, r3
 800f85a:	d00f      	beq.n	800f87c <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800f85c:	697b      	ldr	r3, [r7, #20]
 800f85e:	2b00      	cmp	r3, #0
 800f860:	d00d      	beq.n	800f87e <tcp_input+0x46a>
 800f862:	697b      	ldr	r3, [r7, #20]
 800f864:	681b      	ldr	r3, [r3, #0]
 800f866:	2b00      	cmp	r3, #0
 800f868:	d009      	beq.n	800f87e <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800f86a:	697b      	ldr	r3, [r7, #20]
 800f86c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f86e:	697b      	ldr	r3, [r7, #20]
 800f870:	68db      	ldr	r3, [r3, #12]
 800f872:	617b      	str	r3, [r7, #20]
 800f874:	697b      	ldr	r3, [r7, #20]
 800f876:	2b00      	cmp	r3, #0
 800f878:	d1d1      	bne.n	800f81e <tcp_input+0x40a>
 800f87a:	e000      	b.n	800f87e <tcp_input+0x46a>
            break;
 800f87c:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800f87e:	697b      	ldr	r3, [r7, #20]
 800f880:	2b00      	cmp	r3, #0
 800f882:	d029      	beq.n	800f8d8 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800f884:	69bb      	ldr	r3, [r7, #24]
 800f886:	2b00      	cmp	r3, #0
 800f888:	d00a      	beq.n	800f8a0 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800f88a:	697b      	ldr	r3, [r7, #20]
 800f88c:	68da      	ldr	r2, [r3, #12]
 800f88e:	69bb      	ldr	r3, [r7, #24]
 800f890:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800f892:	4b10      	ldr	r3, [pc, #64]	@ (800f8d4 <tcp_input+0x4c0>)
 800f894:	681a      	ldr	r2, [r3, #0]
 800f896:	697b      	ldr	r3, [r7, #20]
 800f898:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800f89a:	4a0e      	ldr	r2, [pc, #56]	@ (800f8d4 <tcp_input+0x4c0>)
 800f89c:	697b      	ldr	r3, [r7, #20]
 800f89e:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800f8a0:	6978      	ldr	r0, [r7, #20]
 800f8a2:	f000 fa03 	bl	800fcac <tcp_listen_input>
      }
      pbuf_free(p);
 800f8a6:	6878      	ldr	r0, [r7, #4]
 800f8a8:	f7fd fc7e 	bl	800d1a8 <pbuf_free>
      return;
 800f8ac:	e1a8      	b.n	800fc00 <tcp_input+0x7ec>
 800f8ae:	bf00      	nop
 800f8b0:	2000f410 	.word	0x2000f410
 800f8b4:	20009a9c 	.word	0x20009a9c
 800f8b8:	08019a8c 	.word	0x08019a8c
 800f8bc:	08019bb8 	.word	0x08019bb8
 800f8c0:	08019ad8 	.word	0x08019ad8
 800f8c4:	2000f3f4 	.word	0x2000f3f4
 800f8c8:	08019be4 	.word	0x08019be4
 800f8cc:	2000f3f8 	.word	0x2000f3f8
 800f8d0:	08019c10 	.word	0x08019c10
 800f8d4:	2000f3f0 	.word	0x2000f3f0
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800f8d8:	69fb      	ldr	r3, [r7, #28]
 800f8da:	2b00      	cmp	r3, #0
 800f8dc:	f000 8158 	beq.w	800fb90 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800f8e0:	4b95      	ldr	r3, [pc, #596]	@ (800fb38 <tcp_input+0x724>)
 800f8e2:	2200      	movs	r2, #0
 800f8e4:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	891a      	ldrh	r2, [r3, #8]
 800f8ea:	4b93      	ldr	r3, [pc, #588]	@ (800fb38 <tcp_input+0x724>)
 800f8ec:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800f8ee:	4a92      	ldr	r2, [pc, #584]	@ (800fb38 <tcp_input+0x724>)
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800f8f4:	4b91      	ldr	r3, [pc, #580]	@ (800fb3c <tcp_input+0x728>)
 800f8f6:	681b      	ldr	r3, [r3, #0]
 800f8f8:	4a8f      	ldr	r2, [pc, #572]	@ (800fb38 <tcp_input+0x724>)
 800f8fa:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800f8fc:	4b90      	ldr	r3, [pc, #576]	@ (800fb40 <tcp_input+0x72c>)
 800f8fe:	2200      	movs	r2, #0
 800f900:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800f902:	4b90      	ldr	r3, [pc, #576]	@ (800fb44 <tcp_input+0x730>)
 800f904:	2200      	movs	r2, #0
 800f906:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800f908:	4b8f      	ldr	r3, [pc, #572]	@ (800fb48 <tcp_input+0x734>)
 800f90a:	2200      	movs	r2, #0
 800f90c:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800f90e:	4b8f      	ldr	r3, [pc, #572]	@ (800fb4c <tcp_input+0x738>)
 800f910:	781b      	ldrb	r3, [r3, #0]
 800f912:	f003 0308 	and.w	r3, r3, #8
 800f916:	2b00      	cmp	r3, #0
 800f918:	d006      	beq.n	800f928 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800f91a:	687b      	ldr	r3, [r7, #4]
 800f91c:	7b5b      	ldrb	r3, [r3, #13]
 800f91e:	f043 0301 	orr.w	r3, r3, #1
 800f922:	b2da      	uxtb	r2, r3
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800f928:	69fb      	ldr	r3, [r7, #28]
 800f92a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f92c:	2b00      	cmp	r3, #0
 800f92e:	d017      	beq.n	800f960 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800f930:	69f8      	ldr	r0, [r7, #28]
 800f932:	f7ff f853 	bl	800e9dc <tcp_process_refused_data>
 800f936:	4603      	mov	r3, r0
 800f938:	f113 0f0d 	cmn.w	r3, #13
 800f93c:	d007      	beq.n	800f94e <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800f93e:	69fb      	ldr	r3, [r7, #28]
 800f940:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800f942:	2b00      	cmp	r3, #0
 800f944:	d00c      	beq.n	800f960 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800f946:	4b82      	ldr	r3, [pc, #520]	@ (800fb50 <tcp_input+0x73c>)
 800f948:	881b      	ldrh	r3, [r3, #0]
 800f94a:	2b00      	cmp	r3, #0
 800f94c:	d008      	beq.n	800f960 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800f94e:	69fb      	ldr	r3, [r7, #28]
 800f950:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f952:	2b00      	cmp	r3, #0
 800f954:	f040 80e3 	bne.w	800fb1e <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800f958:	69f8      	ldr	r0, [r7, #28]
 800f95a:	f003 fdff 	bl	801355c <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800f95e:	e0de      	b.n	800fb1e <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800f960:	4a7c      	ldr	r2, [pc, #496]	@ (800fb54 <tcp_input+0x740>)
 800f962:	69fb      	ldr	r3, [r7, #28]
 800f964:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800f966:	69f8      	ldr	r0, [r7, #28]
 800f968:	f000 fb18 	bl	800ff9c <tcp_process>
 800f96c:	4603      	mov	r3, r0
 800f96e:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800f970:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f974:	f113 0f0d 	cmn.w	r3, #13
 800f978:	f000 80d3 	beq.w	800fb22 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800f97c:	4b71      	ldr	r3, [pc, #452]	@ (800fb44 <tcp_input+0x730>)
 800f97e:	781b      	ldrb	r3, [r3, #0]
 800f980:	f003 0308 	and.w	r3, r3, #8
 800f984:	2b00      	cmp	r3, #0
 800f986:	d015      	beq.n	800f9b4 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800f988:	69fb      	ldr	r3, [r7, #28]
 800f98a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f98e:	2b00      	cmp	r3, #0
 800f990:	d008      	beq.n	800f9a4 <tcp_input+0x590>
 800f992:	69fb      	ldr	r3, [r7, #28]
 800f994:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f998:	69fa      	ldr	r2, [r7, #28]
 800f99a:	6912      	ldr	r2, [r2, #16]
 800f99c:	f06f 010d 	mvn.w	r1, #13
 800f9a0:	4610      	mov	r0, r2
 800f9a2:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800f9a4:	69f9      	ldr	r1, [r7, #28]
 800f9a6:	486c      	ldr	r0, [pc, #432]	@ (800fb58 <tcp_input+0x744>)
 800f9a8:	f7ff fbbc 	bl	800f124 <tcp_pcb_remove>
        tcp_free(pcb);
 800f9ac:	69f8      	ldr	r0, [r7, #28]
 800f9ae:	f7fd fec9 	bl	800d744 <tcp_free>
 800f9b2:	e0da      	b.n	800fb6a <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800f9b4:	2300      	movs	r3, #0
 800f9b6:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800f9b8:	4b63      	ldr	r3, [pc, #396]	@ (800fb48 <tcp_input+0x734>)
 800f9ba:	881b      	ldrh	r3, [r3, #0]
 800f9bc:	2b00      	cmp	r3, #0
 800f9be:	d01d      	beq.n	800f9fc <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800f9c0:	4b61      	ldr	r3, [pc, #388]	@ (800fb48 <tcp_input+0x734>)
 800f9c2:	881b      	ldrh	r3, [r3, #0]
 800f9c4:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800f9c6:	69fb      	ldr	r3, [r7, #28]
 800f9c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f9cc:	2b00      	cmp	r3, #0
 800f9ce:	d00a      	beq.n	800f9e6 <tcp_input+0x5d2>
 800f9d0:	69fb      	ldr	r3, [r7, #28]
 800f9d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f9d6:	69fa      	ldr	r2, [r7, #28]
 800f9d8:	6910      	ldr	r0, [r2, #16]
 800f9da:	89fa      	ldrh	r2, [r7, #14]
 800f9dc:	69f9      	ldr	r1, [r7, #28]
 800f9de:	4798      	blx	r3
 800f9e0:	4603      	mov	r3, r0
 800f9e2:	74fb      	strb	r3, [r7, #19]
 800f9e4:	e001      	b.n	800f9ea <tcp_input+0x5d6>
 800f9e6:	2300      	movs	r3, #0
 800f9e8:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800f9ea:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f9ee:	f113 0f0d 	cmn.w	r3, #13
 800f9f2:	f000 8098 	beq.w	800fb26 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800f9f6:	4b54      	ldr	r3, [pc, #336]	@ (800fb48 <tcp_input+0x734>)
 800f9f8:	2200      	movs	r2, #0
 800f9fa:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800f9fc:	69f8      	ldr	r0, [r7, #28]
 800f9fe:	f000 f915 	bl	800fc2c <tcp_input_delayed_close>
 800fa02:	4603      	mov	r3, r0
 800fa04:	2b00      	cmp	r3, #0
 800fa06:	f040 8090 	bne.w	800fb2a <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800fa0a:	4b4d      	ldr	r3, [pc, #308]	@ (800fb40 <tcp_input+0x72c>)
 800fa0c:	681b      	ldr	r3, [r3, #0]
 800fa0e:	2b00      	cmp	r3, #0
 800fa10:	d041      	beq.n	800fa96 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800fa12:	69fb      	ldr	r3, [r7, #28]
 800fa14:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800fa16:	2b00      	cmp	r3, #0
 800fa18:	d006      	beq.n	800fa28 <tcp_input+0x614>
 800fa1a:	4b50      	ldr	r3, [pc, #320]	@ (800fb5c <tcp_input+0x748>)
 800fa1c:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 800fa20:	494f      	ldr	r1, [pc, #316]	@ (800fb60 <tcp_input+0x74c>)
 800fa22:	4850      	ldr	r0, [pc, #320]	@ (800fb64 <tcp_input+0x750>)
 800fa24:	f007 f900 	bl	8016c28 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800fa28:	69fb      	ldr	r3, [r7, #28]
 800fa2a:	8b5b      	ldrh	r3, [r3, #26]
 800fa2c:	f003 0310 	and.w	r3, r3, #16
 800fa30:	2b00      	cmp	r3, #0
 800fa32:	d008      	beq.n	800fa46 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800fa34:	4b42      	ldr	r3, [pc, #264]	@ (800fb40 <tcp_input+0x72c>)
 800fa36:	681b      	ldr	r3, [r3, #0]
 800fa38:	4618      	mov	r0, r3
 800fa3a:	f7fd fbb5 	bl	800d1a8 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800fa3e:	69f8      	ldr	r0, [r7, #28]
 800fa40:	f7fe f9c4 	bl	800ddcc <tcp_abort>
            goto aborted;
 800fa44:	e091      	b.n	800fb6a <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800fa46:	69fb      	ldr	r3, [r7, #28]
 800fa48:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800fa4c:	2b00      	cmp	r3, #0
 800fa4e:	d00c      	beq.n	800fa6a <tcp_input+0x656>
 800fa50:	69fb      	ldr	r3, [r7, #28]
 800fa52:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800fa56:	69fb      	ldr	r3, [r7, #28]
 800fa58:	6918      	ldr	r0, [r3, #16]
 800fa5a:	4b39      	ldr	r3, [pc, #228]	@ (800fb40 <tcp_input+0x72c>)
 800fa5c:	681a      	ldr	r2, [r3, #0]
 800fa5e:	2300      	movs	r3, #0
 800fa60:	69f9      	ldr	r1, [r7, #28]
 800fa62:	47a0      	blx	r4
 800fa64:	4603      	mov	r3, r0
 800fa66:	74fb      	strb	r3, [r7, #19]
 800fa68:	e008      	b.n	800fa7c <tcp_input+0x668>
 800fa6a:	4b35      	ldr	r3, [pc, #212]	@ (800fb40 <tcp_input+0x72c>)
 800fa6c:	681a      	ldr	r2, [r3, #0]
 800fa6e:	2300      	movs	r3, #0
 800fa70:	69f9      	ldr	r1, [r7, #28]
 800fa72:	2000      	movs	r0, #0
 800fa74:	f7ff f888 	bl	800eb88 <tcp_recv_null>
 800fa78:	4603      	mov	r3, r0
 800fa7a:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800fa7c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fa80:	f113 0f0d 	cmn.w	r3, #13
 800fa84:	d053      	beq.n	800fb2e <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800fa86:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fa8a:	2b00      	cmp	r3, #0
 800fa8c:	d003      	beq.n	800fa96 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800fa8e:	4b2c      	ldr	r3, [pc, #176]	@ (800fb40 <tcp_input+0x72c>)
 800fa90:	681a      	ldr	r2, [r3, #0]
 800fa92:	69fb      	ldr	r3, [r7, #28]
 800fa94:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800fa96:	4b2b      	ldr	r3, [pc, #172]	@ (800fb44 <tcp_input+0x730>)
 800fa98:	781b      	ldrb	r3, [r3, #0]
 800fa9a:	f003 0320 	and.w	r3, r3, #32
 800fa9e:	2b00      	cmp	r3, #0
 800faa0:	d030      	beq.n	800fb04 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800faa2:	69fb      	ldr	r3, [r7, #28]
 800faa4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800faa6:	2b00      	cmp	r3, #0
 800faa8:	d009      	beq.n	800fabe <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800faaa:	69fb      	ldr	r3, [r7, #28]
 800faac:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800faae:	7b5a      	ldrb	r2, [r3, #13]
 800fab0:	69fb      	ldr	r3, [r7, #28]
 800fab2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800fab4:	f042 0220 	orr.w	r2, r2, #32
 800fab8:	b2d2      	uxtb	r2, r2
 800faba:	735a      	strb	r2, [r3, #13]
 800fabc:	e022      	b.n	800fb04 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800fabe:	69fb      	ldr	r3, [r7, #28]
 800fac0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fac2:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800fac6:	d005      	beq.n	800fad4 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800fac8:	69fb      	ldr	r3, [r7, #28]
 800faca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800facc:	3301      	adds	r3, #1
 800face:	b29a      	uxth	r2, r3
 800fad0:	69fb      	ldr	r3, [r7, #28]
 800fad2:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800fad4:	69fb      	ldr	r3, [r7, #28]
 800fad6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800fada:	2b00      	cmp	r3, #0
 800fadc:	d00b      	beq.n	800faf6 <tcp_input+0x6e2>
 800fade:	69fb      	ldr	r3, [r7, #28]
 800fae0:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800fae4:	69fb      	ldr	r3, [r7, #28]
 800fae6:	6918      	ldr	r0, [r3, #16]
 800fae8:	2300      	movs	r3, #0
 800faea:	2200      	movs	r2, #0
 800faec:	69f9      	ldr	r1, [r7, #28]
 800faee:	47a0      	blx	r4
 800faf0:	4603      	mov	r3, r0
 800faf2:	74fb      	strb	r3, [r7, #19]
 800faf4:	e001      	b.n	800fafa <tcp_input+0x6e6>
 800faf6:	2300      	movs	r3, #0
 800faf8:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800fafa:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fafe:	f113 0f0d 	cmn.w	r3, #13
 800fb02:	d016      	beq.n	800fb32 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800fb04:	4b13      	ldr	r3, [pc, #76]	@ (800fb54 <tcp_input+0x740>)
 800fb06:	2200      	movs	r2, #0
 800fb08:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800fb0a:	69f8      	ldr	r0, [r7, #28]
 800fb0c:	f000 f88e 	bl	800fc2c <tcp_input_delayed_close>
 800fb10:	4603      	mov	r3, r0
 800fb12:	2b00      	cmp	r3, #0
 800fb14:	d128      	bne.n	800fb68 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800fb16:	69f8      	ldr	r0, [r7, #28]
 800fb18:	f002 ff1a 	bl	8012950 <tcp_output>
 800fb1c:	e025      	b.n	800fb6a <tcp_input+0x756>
        goto aborted;
 800fb1e:	bf00      	nop
 800fb20:	e023      	b.n	800fb6a <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800fb22:	bf00      	nop
 800fb24:	e021      	b.n	800fb6a <tcp_input+0x756>
              goto aborted;
 800fb26:	bf00      	nop
 800fb28:	e01f      	b.n	800fb6a <tcp_input+0x756>
          goto aborted;
 800fb2a:	bf00      	nop
 800fb2c:	e01d      	b.n	800fb6a <tcp_input+0x756>
            goto aborted;
 800fb2e:	bf00      	nop
 800fb30:	e01b      	b.n	800fb6a <tcp_input+0x756>
              goto aborted;
 800fb32:	bf00      	nop
 800fb34:	e019      	b.n	800fb6a <tcp_input+0x756>
 800fb36:	bf00      	nop
 800fb38:	2000f400 	.word	0x2000f400
 800fb3c:	2000f410 	.word	0x2000f410
 800fb40:	2000f430 	.word	0x2000f430
 800fb44:	2000f42d 	.word	0x2000f42d
 800fb48:	2000f428 	.word	0x2000f428
 800fb4c:	2000f42c 	.word	0x2000f42c
 800fb50:	2000f42a 	.word	0x2000f42a
 800fb54:	2000f434 	.word	0x2000f434
 800fb58:	2000f3f4 	.word	0x2000f3f4
 800fb5c:	08019a8c 	.word	0x08019a8c
 800fb60:	08019c40 	.word	0x08019c40
 800fb64:	08019ad8 	.word	0x08019ad8
          goto aborted;
 800fb68:	bf00      	nop
    tcp_input_pcb = NULL;
 800fb6a:	4b27      	ldr	r3, [pc, #156]	@ (800fc08 <tcp_input+0x7f4>)
 800fb6c:	2200      	movs	r2, #0
 800fb6e:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800fb70:	4b26      	ldr	r3, [pc, #152]	@ (800fc0c <tcp_input+0x7f8>)
 800fb72:	2200      	movs	r2, #0
 800fb74:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800fb76:	4b26      	ldr	r3, [pc, #152]	@ (800fc10 <tcp_input+0x7fc>)
 800fb78:	685b      	ldr	r3, [r3, #4]
 800fb7a:	2b00      	cmp	r3, #0
 800fb7c:	d03f      	beq.n	800fbfe <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800fb7e:	4b24      	ldr	r3, [pc, #144]	@ (800fc10 <tcp_input+0x7fc>)
 800fb80:	685b      	ldr	r3, [r3, #4]
 800fb82:	4618      	mov	r0, r3
 800fb84:	f7fd fb10 	bl	800d1a8 <pbuf_free>
      inseg.p = NULL;
 800fb88:	4b21      	ldr	r3, [pc, #132]	@ (800fc10 <tcp_input+0x7fc>)
 800fb8a:	2200      	movs	r2, #0
 800fb8c:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800fb8e:	e036      	b.n	800fbfe <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800fb90:	4b20      	ldr	r3, [pc, #128]	@ (800fc14 <tcp_input+0x800>)
 800fb92:	681b      	ldr	r3, [r3, #0]
 800fb94:	899b      	ldrh	r3, [r3, #12]
 800fb96:	b29b      	uxth	r3, r3
 800fb98:	4618      	mov	r0, r3
 800fb9a:	f7fb ff13 	bl	800b9c4 <lwip_htons>
 800fb9e:	4603      	mov	r3, r0
 800fba0:	b2db      	uxtb	r3, r3
 800fba2:	f003 0304 	and.w	r3, r3, #4
 800fba6:	2b00      	cmp	r3, #0
 800fba8:	d118      	bne.n	800fbdc <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fbaa:	4b1b      	ldr	r3, [pc, #108]	@ (800fc18 <tcp_input+0x804>)
 800fbac:	6819      	ldr	r1, [r3, #0]
 800fbae:	4b1b      	ldr	r3, [pc, #108]	@ (800fc1c <tcp_input+0x808>)
 800fbb0:	881b      	ldrh	r3, [r3, #0]
 800fbb2:	461a      	mov	r2, r3
 800fbb4:	4b1a      	ldr	r3, [pc, #104]	@ (800fc20 <tcp_input+0x80c>)
 800fbb6:	681b      	ldr	r3, [r3, #0]
 800fbb8:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fbba:	4b16      	ldr	r3, [pc, #88]	@ (800fc14 <tcp_input+0x800>)
 800fbbc:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fbbe:	885b      	ldrh	r3, [r3, #2]
 800fbc0:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fbc2:	4a14      	ldr	r2, [pc, #80]	@ (800fc14 <tcp_input+0x800>)
 800fbc4:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fbc6:	8812      	ldrh	r2, [r2, #0]
 800fbc8:	b292      	uxth	r2, r2
 800fbca:	9202      	str	r2, [sp, #8]
 800fbcc:	9301      	str	r3, [sp, #4]
 800fbce:	4b15      	ldr	r3, [pc, #84]	@ (800fc24 <tcp_input+0x810>)
 800fbd0:	9300      	str	r3, [sp, #0]
 800fbd2:	4b15      	ldr	r3, [pc, #84]	@ (800fc28 <tcp_input+0x814>)
 800fbd4:	4602      	mov	r2, r0
 800fbd6:	2000      	movs	r0, #0
 800fbd8:	f003 fc6e 	bl	80134b8 <tcp_rst>
    pbuf_free(p);
 800fbdc:	6878      	ldr	r0, [r7, #4]
 800fbde:	f7fd fae3 	bl	800d1a8 <pbuf_free>
  return;
 800fbe2:	e00c      	b.n	800fbfe <tcp_input+0x7ea>
    goto dropped;
 800fbe4:	bf00      	nop
 800fbe6:	e006      	b.n	800fbf6 <tcp_input+0x7e2>
    goto dropped;
 800fbe8:	bf00      	nop
 800fbea:	e004      	b.n	800fbf6 <tcp_input+0x7e2>
    goto dropped;
 800fbec:	bf00      	nop
 800fbee:	e002      	b.n	800fbf6 <tcp_input+0x7e2>
      goto dropped;
 800fbf0:	bf00      	nop
 800fbf2:	e000      	b.n	800fbf6 <tcp_input+0x7e2>
      goto dropped;
 800fbf4:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800fbf6:	6878      	ldr	r0, [r7, #4]
 800fbf8:	f7fd fad6 	bl	800d1a8 <pbuf_free>
 800fbfc:	e000      	b.n	800fc00 <tcp_input+0x7ec>
  return;
 800fbfe:	bf00      	nop
}
 800fc00:	3724      	adds	r7, #36	@ 0x24
 800fc02:	46bd      	mov	sp, r7
 800fc04:	bd90      	pop	{r4, r7, pc}
 800fc06:	bf00      	nop
 800fc08:	2000f434 	.word	0x2000f434
 800fc0c:	2000f430 	.word	0x2000f430
 800fc10:	2000f400 	.word	0x2000f400
 800fc14:	2000f410 	.word	0x2000f410
 800fc18:	2000f424 	.word	0x2000f424
 800fc1c:	2000f42a 	.word	0x2000f42a
 800fc20:	2000f420 	.word	0x2000f420
 800fc24:	20009aac 	.word	0x20009aac
 800fc28:	20009ab0 	.word	0x20009ab0

0800fc2c <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800fc2c:	b580      	push	{r7, lr}
 800fc2e:	b082      	sub	sp, #8
 800fc30:	af00      	add	r7, sp, #0
 800fc32:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800fc34:	687b      	ldr	r3, [r7, #4]
 800fc36:	2b00      	cmp	r3, #0
 800fc38:	d106      	bne.n	800fc48 <tcp_input_delayed_close+0x1c>
 800fc3a:	4b17      	ldr	r3, [pc, #92]	@ (800fc98 <tcp_input_delayed_close+0x6c>)
 800fc3c:	f240 225a 	movw	r2, #602	@ 0x25a
 800fc40:	4916      	ldr	r1, [pc, #88]	@ (800fc9c <tcp_input_delayed_close+0x70>)
 800fc42:	4817      	ldr	r0, [pc, #92]	@ (800fca0 <tcp_input_delayed_close+0x74>)
 800fc44:	f006 fff0 	bl	8016c28 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800fc48:	4b16      	ldr	r3, [pc, #88]	@ (800fca4 <tcp_input_delayed_close+0x78>)
 800fc4a:	781b      	ldrb	r3, [r3, #0]
 800fc4c:	f003 0310 	and.w	r3, r3, #16
 800fc50:	2b00      	cmp	r3, #0
 800fc52:	d01c      	beq.n	800fc8e <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	8b5b      	ldrh	r3, [r3, #26]
 800fc58:	f003 0310 	and.w	r3, r3, #16
 800fc5c:	2b00      	cmp	r3, #0
 800fc5e:	d10d      	bne.n	800fc7c <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800fc60:	687b      	ldr	r3, [r7, #4]
 800fc62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fc66:	2b00      	cmp	r3, #0
 800fc68:	d008      	beq.n	800fc7c <tcp_input_delayed_close+0x50>
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fc70:	687a      	ldr	r2, [r7, #4]
 800fc72:	6912      	ldr	r2, [r2, #16]
 800fc74:	f06f 010e 	mvn.w	r1, #14
 800fc78:	4610      	mov	r0, r2
 800fc7a:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800fc7c:	6879      	ldr	r1, [r7, #4]
 800fc7e:	480a      	ldr	r0, [pc, #40]	@ (800fca8 <tcp_input_delayed_close+0x7c>)
 800fc80:	f7ff fa50 	bl	800f124 <tcp_pcb_remove>
    tcp_free(pcb);
 800fc84:	6878      	ldr	r0, [r7, #4]
 800fc86:	f7fd fd5d 	bl	800d744 <tcp_free>
    return 1;
 800fc8a:	2301      	movs	r3, #1
 800fc8c:	e000      	b.n	800fc90 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800fc8e:	2300      	movs	r3, #0
}
 800fc90:	4618      	mov	r0, r3
 800fc92:	3708      	adds	r7, #8
 800fc94:	46bd      	mov	sp, r7
 800fc96:	bd80      	pop	{r7, pc}
 800fc98:	08019a8c 	.word	0x08019a8c
 800fc9c:	08019c5c 	.word	0x08019c5c
 800fca0:	08019ad8 	.word	0x08019ad8
 800fca4:	2000f42d 	.word	0x2000f42d
 800fca8:	2000f3f4 	.word	0x2000f3f4

0800fcac <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800fcac:	b590      	push	{r4, r7, lr}
 800fcae:	b08b      	sub	sp, #44	@ 0x2c
 800fcb0:	af04      	add	r7, sp, #16
 800fcb2:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800fcb4:	4b6f      	ldr	r3, [pc, #444]	@ (800fe74 <tcp_listen_input+0x1c8>)
 800fcb6:	781b      	ldrb	r3, [r3, #0]
 800fcb8:	f003 0304 	and.w	r3, r3, #4
 800fcbc:	2b00      	cmp	r3, #0
 800fcbe:	f040 80d2 	bne.w	800fe66 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800fcc2:	687b      	ldr	r3, [r7, #4]
 800fcc4:	2b00      	cmp	r3, #0
 800fcc6:	d106      	bne.n	800fcd6 <tcp_listen_input+0x2a>
 800fcc8:	4b6b      	ldr	r3, [pc, #428]	@ (800fe78 <tcp_listen_input+0x1cc>)
 800fcca:	f240 2281 	movw	r2, #641	@ 0x281
 800fcce:	496b      	ldr	r1, [pc, #428]	@ (800fe7c <tcp_listen_input+0x1d0>)
 800fcd0:	486b      	ldr	r0, [pc, #428]	@ (800fe80 <tcp_listen_input+0x1d4>)
 800fcd2:	f006 ffa9 	bl	8016c28 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800fcd6:	4b67      	ldr	r3, [pc, #412]	@ (800fe74 <tcp_listen_input+0x1c8>)
 800fcd8:	781b      	ldrb	r3, [r3, #0]
 800fcda:	f003 0310 	and.w	r3, r3, #16
 800fcde:	2b00      	cmp	r3, #0
 800fce0:	d019      	beq.n	800fd16 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fce2:	4b68      	ldr	r3, [pc, #416]	@ (800fe84 <tcp_listen_input+0x1d8>)
 800fce4:	6819      	ldr	r1, [r3, #0]
 800fce6:	4b68      	ldr	r3, [pc, #416]	@ (800fe88 <tcp_listen_input+0x1dc>)
 800fce8:	881b      	ldrh	r3, [r3, #0]
 800fcea:	461a      	mov	r2, r3
 800fcec:	4b67      	ldr	r3, [pc, #412]	@ (800fe8c <tcp_listen_input+0x1e0>)
 800fcee:	681b      	ldr	r3, [r3, #0]
 800fcf0:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fcf2:	4b67      	ldr	r3, [pc, #412]	@ (800fe90 <tcp_listen_input+0x1e4>)
 800fcf4:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fcf6:	885b      	ldrh	r3, [r3, #2]
 800fcf8:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fcfa:	4a65      	ldr	r2, [pc, #404]	@ (800fe90 <tcp_listen_input+0x1e4>)
 800fcfc:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fcfe:	8812      	ldrh	r2, [r2, #0]
 800fd00:	b292      	uxth	r2, r2
 800fd02:	9202      	str	r2, [sp, #8]
 800fd04:	9301      	str	r3, [sp, #4]
 800fd06:	4b63      	ldr	r3, [pc, #396]	@ (800fe94 <tcp_listen_input+0x1e8>)
 800fd08:	9300      	str	r3, [sp, #0]
 800fd0a:	4b63      	ldr	r3, [pc, #396]	@ (800fe98 <tcp_listen_input+0x1ec>)
 800fd0c:	4602      	mov	r2, r0
 800fd0e:	6878      	ldr	r0, [r7, #4]
 800fd10:	f003 fbd2 	bl	80134b8 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800fd14:	e0a9      	b.n	800fe6a <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800fd16:	4b57      	ldr	r3, [pc, #348]	@ (800fe74 <tcp_listen_input+0x1c8>)
 800fd18:	781b      	ldrb	r3, [r3, #0]
 800fd1a:	f003 0302 	and.w	r3, r3, #2
 800fd1e:	2b00      	cmp	r3, #0
 800fd20:	f000 80a3 	beq.w	800fe6a <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	7d5b      	ldrb	r3, [r3, #21]
 800fd28:	4618      	mov	r0, r3
 800fd2a:	f7ff f851 	bl	800edd0 <tcp_alloc>
 800fd2e:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800fd30:	697b      	ldr	r3, [r7, #20]
 800fd32:	2b00      	cmp	r3, #0
 800fd34:	d111      	bne.n	800fd5a <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	699b      	ldr	r3, [r3, #24]
 800fd3a:	2b00      	cmp	r3, #0
 800fd3c:	d00a      	beq.n	800fd54 <tcp_listen_input+0xa8>
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	699b      	ldr	r3, [r3, #24]
 800fd42:	687a      	ldr	r2, [r7, #4]
 800fd44:	6910      	ldr	r0, [r2, #16]
 800fd46:	f04f 32ff 	mov.w	r2, #4294967295
 800fd4a:	2100      	movs	r1, #0
 800fd4c:	4798      	blx	r3
 800fd4e:	4603      	mov	r3, r0
 800fd50:	73bb      	strb	r3, [r7, #14]
      return;
 800fd52:	e08b      	b.n	800fe6c <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800fd54:	23f0      	movs	r3, #240	@ 0xf0
 800fd56:	73bb      	strb	r3, [r7, #14]
      return;
 800fd58:	e088      	b.n	800fe6c <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800fd5a:	4b50      	ldr	r3, [pc, #320]	@ (800fe9c <tcp_listen_input+0x1f0>)
 800fd5c:	695a      	ldr	r2, [r3, #20]
 800fd5e:	697b      	ldr	r3, [r7, #20]
 800fd60:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800fd62:	4b4e      	ldr	r3, [pc, #312]	@ (800fe9c <tcp_listen_input+0x1f0>)
 800fd64:	691a      	ldr	r2, [r3, #16]
 800fd66:	697b      	ldr	r3, [r7, #20]
 800fd68:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800fd6a:	687b      	ldr	r3, [r7, #4]
 800fd6c:	8ada      	ldrh	r2, [r3, #22]
 800fd6e:	697b      	ldr	r3, [r7, #20]
 800fd70:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800fd72:	4b47      	ldr	r3, [pc, #284]	@ (800fe90 <tcp_listen_input+0x1e4>)
 800fd74:	681b      	ldr	r3, [r3, #0]
 800fd76:	881b      	ldrh	r3, [r3, #0]
 800fd78:	b29a      	uxth	r2, r3
 800fd7a:	697b      	ldr	r3, [r7, #20]
 800fd7c:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800fd7e:	697b      	ldr	r3, [r7, #20]
 800fd80:	2203      	movs	r2, #3
 800fd82:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800fd84:	4b41      	ldr	r3, [pc, #260]	@ (800fe8c <tcp_listen_input+0x1e0>)
 800fd86:	681b      	ldr	r3, [r3, #0]
 800fd88:	1c5a      	adds	r2, r3, #1
 800fd8a:	697b      	ldr	r3, [r7, #20]
 800fd8c:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800fd8e:	697b      	ldr	r3, [r7, #20]
 800fd90:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800fd92:	697b      	ldr	r3, [r7, #20]
 800fd94:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 800fd96:	6978      	ldr	r0, [r7, #20]
 800fd98:	f7ff fa58 	bl	800f24c <tcp_next_iss>
 800fd9c:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800fd9e:	697b      	ldr	r3, [r7, #20]
 800fda0:	693a      	ldr	r2, [r7, #16]
 800fda2:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 800fda4:	697b      	ldr	r3, [r7, #20]
 800fda6:	693a      	ldr	r2, [r7, #16]
 800fda8:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 800fdaa:	697b      	ldr	r3, [r7, #20]
 800fdac:	693a      	ldr	r2, [r7, #16]
 800fdae:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 800fdb0:	697b      	ldr	r3, [r7, #20]
 800fdb2:	693a      	ldr	r2, [r7, #16]
 800fdb4:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800fdb6:	4b35      	ldr	r3, [pc, #212]	@ (800fe8c <tcp_listen_input+0x1e0>)
 800fdb8:	681b      	ldr	r3, [r3, #0]
 800fdba:	1e5a      	subs	r2, r3, #1
 800fdbc:	697b      	ldr	r3, [r7, #20]
 800fdbe:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	691a      	ldr	r2, [r3, #16]
 800fdc4:	697b      	ldr	r3, [r7, #20]
 800fdc6:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800fdc8:	697b      	ldr	r3, [r7, #20]
 800fdca:	687a      	ldr	r2, [r7, #4]
 800fdcc:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	7a5b      	ldrb	r3, [r3, #9]
 800fdd2:	f003 030c 	and.w	r3, r3, #12
 800fdd6:	b2da      	uxtb	r2, r3
 800fdd8:	697b      	ldr	r3, [r7, #20]
 800fdda:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	7a1a      	ldrb	r2, [r3, #8]
 800fde0:	697b      	ldr	r3, [r7, #20]
 800fde2:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800fde4:	4b2e      	ldr	r3, [pc, #184]	@ (800fea0 <tcp_listen_input+0x1f4>)
 800fde6:	681a      	ldr	r2, [r3, #0]
 800fde8:	697b      	ldr	r3, [r7, #20]
 800fdea:	60da      	str	r2, [r3, #12]
 800fdec:	4a2c      	ldr	r2, [pc, #176]	@ (800fea0 <tcp_listen_input+0x1f4>)
 800fdee:	697b      	ldr	r3, [r7, #20]
 800fdf0:	6013      	str	r3, [r2, #0]
 800fdf2:	f003 fd23 	bl	801383c <tcp_timer_needed>
 800fdf6:	4b2b      	ldr	r3, [pc, #172]	@ (800fea4 <tcp_listen_input+0x1f8>)
 800fdf8:	2201      	movs	r2, #1
 800fdfa:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800fdfc:	6978      	ldr	r0, [r7, #20]
 800fdfe:	f001 fd8b 	bl	8011918 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800fe02:	4b23      	ldr	r3, [pc, #140]	@ (800fe90 <tcp_listen_input+0x1e4>)
 800fe04:	681b      	ldr	r3, [r3, #0]
 800fe06:	89db      	ldrh	r3, [r3, #14]
 800fe08:	b29a      	uxth	r2, r3
 800fe0a:	697b      	ldr	r3, [r7, #20]
 800fe0c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800fe10:	697b      	ldr	r3, [r7, #20]
 800fe12:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800fe16:	697b      	ldr	r3, [r7, #20]
 800fe18:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800fe1c:	697b      	ldr	r3, [r7, #20]
 800fe1e:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 800fe20:	697b      	ldr	r3, [r7, #20]
 800fe22:	3304      	adds	r3, #4
 800fe24:	4618      	mov	r0, r3
 800fe26:	f005 fa5d 	bl	80152e4 <ip4_route>
 800fe2a:	4601      	mov	r1, r0
 800fe2c:	697b      	ldr	r3, [r7, #20]
 800fe2e:	3304      	adds	r3, #4
 800fe30:	461a      	mov	r2, r3
 800fe32:	4620      	mov	r0, r4
 800fe34:	f7ff fa30 	bl	800f298 <tcp_eff_send_mss_netif>
 800fe38:	4603      	mov	r3, r0
 800fe3a:	461a      	mov	r2, r3
 800fe3c:	697b      	ldr	r3, [r7, #20]
 800fe3e:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800fe40:	2112      	movs	r1, #18
 800fe42:	6978      	ldr	r0, [r7, #20]
 800fe44:	f002 fc96 	bl	8012774 <tcp_enqueue_flags>
 800fe48:	4603      	mov	r3, r0
 800fe4a:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800fe4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fe50:	2b00      	cmp	r3, #0
 800fe52:	d004      	beq.n	800fe5e <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800fe54:	2100      	movs	r1, #0
 800fe56:	6978      	ldr	r0, [r7, #20]
 800fe58:	f7fd fefa 	bl	800dc50 <tcp_abandon>
      return;
 800fe5c:	e006      	b.n	800fe6c <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800fe5e:	6978      	ldr	r0, [r7, #20]
 800fe60:	f002 fd76 	bl	8012950 <tcp_output>
  return;
 800fe64:	e001      	b.n	800fe6a <tcp_listen_input+0x1be>
    return;
 800fe66:	bf00      	nop
 800fe68:	e000      	b.n	800fe6c <tcp_listen_input+0x1c0>
  return;
 800fe6a:	bf00      	nop
}
 800fe6c:	371c      	adds	r7, #28
 800fe6e:	46bd      	mov	sp, r7
 800fe70:	bd90      	pop	{r4, r7, pc}
 800fe72:	bf00      	nop
 800fe74:	2000f42c 	.word	0x2000f42c
 800fe78:	08019a8c 	.word	0x08019a8c
 800fe7c:	08019c84 	.word	0x08019c84
 800fe80:	08019ad8 	.word	0x08019ad8
 800fe84:	2000f424 	.word	0x2000f424
 800fe88:	2000f42a 	.word	0x2000f42a
 800fe8c:	2000f420 	.word	0x2000f420
 800fe90:	2000f410 	.word	0x2000f410
 800fe94:	20009aac 	.word	0x20009aac
 800fe98:	20009ab0 	.word	0x20009ab0
 800fe9c:	20009a9c 	.word	0x20009a9c
 800fea0:	2000f3f4 	.word	0x2000f3f4
 800fea4:	2000f3fc 	.word	0x2000f3fc

0800fea8 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800fea8:	b580      	push	{r7, lr}
 800feaa:	b086      	sub	sp, #24
 800feac:	af04      	add	r7, sp, #16
 800feae:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800feb0:	4b2f      	ldr	r3, [pc, #188]	@ (800ff70 <tcp_timewait_input+0xc8>)
 800feb2:	781b      	ldrb	r3, [r3, #0]
 800feb4:	f003 0304 	and.w	r3, r3, #4
 800feb8:	2b00      	cmp	r3, #0
 800feba:	d153      	bne.n	800ff64 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	2b00      	cmp	r3, #0
 800fec0:	d106      	bne.n	800fed0 <tcp_timewait_input+0x28>
 800fec2:	4b2c      	ldr	r3, [pc, #176]	@ (800ff74 <tcp_timewait_input+0xcc>)
 800fec4:	f240 22ee 	movw	r2, #750	@ 0x2ee
 800fec8:	492b      	ldr	r1, [pc, #172]	@ (800ff78 <tcp_timewait_input+0xd0>)
 800feca:	482c      	ldr	r0, [pc, #176]	@ (800ff7c <tcp_timewait_input+0xd4>)
 800fecc:	f006 feac 	bl	8016c28 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800fed0:	4b27      	ldr	r3, [pc, #156]	@ (800ff70 <tcp_timewait_input+0xc8>)
 800fed2:	781b      	ldrb	r3, [r3, #0]
 800fed4:	f003 0302 	and.w	r3, r3, #2
 800fed8:	2b00      	cmp	r3, #0
 800feda:	d02a      	beq.n	800ff32 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800fedc:	4b28      	ldr	r3, [pc, #160]	@ (800ff80 <tcp_timewait_input+0xd8>)
 800fede:	681a      	ldr	r2, [r3, #0]
 800fee0:	687b      	ldr	r3, [r7, #4]
 800fee2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fee4:	1ad3      	subs	r3, r2, r3
 800fee6:	2b00      	cmp	r3, #0
 800fee8:	db2d      	blt.n	800ff46 <tcp_timewait_input+0x9e>
 800feea:	4b25      	ldr	r3, [pc, #148]	@ (800ff80 <tcp_timewait_input+0xd8>)
 800feec:	681a      	ldr	r2, [r3, #0]
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fef2:	6879      	ldr	r1, [r7, #4]
 800fef4:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800fef6:	440b      	add	r3, r1
 800fef8:	1ad3      	subs	r3, r2, r3
 800fefa:	2b00      	cmp	r3, #0
 800fefc:	dc23      	bgt.n	800ff46 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fefe:	4b21      	ldr	r3, [pc, #132]	@ (800ff84 <tcp_timewait_input+0xdc>)
 800ff00:	6819      	ldr	r1, [r3, #0]
 800ff02:	4b21      	ldr	r3, [pc, #132]	@ (800ff88 <tcp_timewait_input+0xe0>)
 800ff04:	881b      	ldrh	r3, [r3, #0]
 800ff06:	461a      	mov	r2, r3
 800ff08:	4b1d      	ldr	r3, [pc, #116]	@ (800ff80 <tcp_timewait_input+0xd8>)
 800ff0a:	681b      	ldr	r3, [r3, #0]
 800ff0c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ff0e:	4b1f      	ldr	r3, [pc, #124]	@ (800ff8c <tcp_timewait_input+0xe4>)
 800ff10:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ff12:	885b      	ldrh	r3, [r3, #2]
 800ff14:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ff16:	4a1d      	ldr	r2, [pc, #116]	@ (800ff8c <tcp_timewait_input+0xe4>)
 800ff18:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ff1a:	8812      	ldrh	r2, [r2, #0]
 800ff1c:	b292      	uxth	r2, r2
 800ff1e:	9202      	str	r2, [sp, #8]
 800ff20:	9301      	str	r3, [sp, #4]
 800ff22:	4b1b      	ldr	r3, [pc, #108]	@ (800ff90 <tcp_timewait_input+0xe8>)
 800ff24:	9300      	str	r3, [sp, #0]
 800ff26:	4b1b      	ldr	r3, [pc, #108]	@ (800ff94 <tcp_timewait_input+0xec>)
 800ff28:	4602      	mov	r2, r0
 800ff2a:	6878      	ldr	r0, [r7, #4]
 800ff2c:	f003 fac4 	bl	80134b8 <tcp_rst>
      return;
 800ff30:	e01b      	b.n	800ff6a <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800ff32:	4b0f      	ldr	r3, [pc, #60]	@ (800ff70 <tcp_timewait_input+0xc8>)
 800ff34:	781b      	ldrb	r3, [r3, #0]
 800ff36:	f003 0301 	and.w	r3, r3, #1
 800ff3a:	2b00      	cmp	r3, #0
 800ff3c:	d003      	beq.n	800ff46 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800ff3e:	4b16      	ldr	r3, [pc, #88]	@ (800ff98 <tcp_timewait_input+0xf0>)
 800ff40:	681a      	ldr	r2, [r3, #0]
 800ff42:	687b      	ldr	r3, [r7, #4]
 800ff44:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800ff46:	4b10      	ldr	r3, [pc, #64]	@ (800ff88 <tcp_timewait_input+0xe0>)
 800ff48:	881b      	ldrh	r3, [r3, #0]
 800ff4a:	2b00      	cmp	r3, #0
 800ff4c:	d00c      	beq.n	800ff68 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800ff4e:	687b      	ldr	r3, [r7, #4]
 800ff50:	8b5b      	ldrh	r3, [r3, #26]
 800ff52:	f043 0302 	orr.w	r3, r3, #2
 800ff56:	b29a      	uxth	r2, r3
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800ff5c:	6878      	ldr	r0, [r7, #4]
 800ff5e:	f002 fcf7 	bl	8012950 <tcp_output>
  }
  return;
 800ff62:	e001      	b.n	800ff68 <tcp_timewait_input+0xc0>
    return;
 800ff64:	bf00      	nop
 800ff66:	e000      	b.n	800ff6a <tcp_timewait_input+0xc2>
  return;
 800ff68:	bf00      	nop
}
 800ff6a:	3708      	adds	r7, #8
 800ff6c:	46bd      	mov	sp, r7
 800ff6e:	bd80      	pop	{r7, pc}
 800ff70:	2000f42c 	.word	0x2000f42c
 800ff74:	08019a8c 	.word	0x08019a8c
 800ff78:	08019ca4 	.word	0x08019ca4
 800ff7c:	08019ad8 	.word	0x08019ad8
 800ff80:	2000f420 	.word	0x2000f420
 800ff84:	2000f424 	.word	0x2000f424
 800ff88:	2000f42a 	.word	0x2000f42a
 800ff8c:	2000f410 	.word	0x2000f410
 800ff90:	20009aac 	.word	0x20009aac
 800ff94:	20009ab0 	.word	0x20009ab0
 800ff98:	2000f3e8 	.word	0x2000f3e8

0800ff9c <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800ff9c:	b590      	push	{r4, r7, lr}
 800ff9e:	b08d      	sub	sp, #52	@ 0x34
 800ffa0:	af04      	add	r7, sp, #16
 800ffa2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800ffa4:	2300      	movs	r3, #0
 800ffa6:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800ffa8:	2300      	movs	r3, #0
 800ffaa:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800ffac:	687b      	ldr	r3, [r7, #4]
 800ffae:	2b00      	cmp	r3, #0
 800ffb0:	d106      	bne.n	800ffc0 <tcp_process+0x24>
 800ffb2:	4b9d      	ldr	r3, [pc, #628]	@ (8010228 <tcp_process+0x28c>)
 800ffb4:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 800ffb8:	499c      	ldr	r1, [pc, #624]	@ (801022c <tcp_process+0x290>)
 800ffba:	489d      	ldr	r0, [pc, #628]	@ (8010230 <tcp_process+0x294>)
 800ffbc:	f006 fe34 	bl	8016c28 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800ffc0:	4b9c      	ldr	r3, [pc, #624]	@ (8010234 <tcp_process+0x298>)
 800ffc2:	781b      	ldrb	r3, [r3, #0]
 800ffc4:	f003 0304 	and.w	r3, r3, #4
 800ffc8:	2b00      	cmp	r3, #0
 800ffca:	d04e      	beq.n	801006a <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800ffcc:	687b      	ldr	r3, [r7, #4]
 800ffce:	7d1b      	ldrb	r3, [r3, #20]
 800ffd0:	2b02      	cmp	r3, #2
 800ffd2:	d108      	bne.n	800ffe6 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ffd8:	4b97      	ldr	r3, [pc, #604]	@ (8010238 <tcp_process+0x29c>)
 800ffda:	681b      	ldr	r3, [r3, #0]
 800ffdc:	429a      	cmp	r2, r3
 800ffde:	d123      	bne.n	8010028 <tcp_process+0x8c>
        acceptable = 1;
 800ffe0:	2301      	movs	r3, #1
 800ffe2:	76fb      	strb	r3, [r7, #27]
 800ffe4:	e020      	b.n	8010028 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800ffe6:	687b      	ldr	r3, [r7, #4]
 800ffe8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ffea:	4b94      	ldr	r3, [pc, #592]	@ (801023c <tcp_process+0x2a0>)
 800ffec:	681b      	ldr	r3, [r3, #0]
 800ffee:	429a      	cmp	r2, r3
 800fff0:	d102      	bne.n	800fff8 <tcp_process+0x5c>
        acceptable = 1;
 800fff2:	2301      	movs	r3, #1
 800fff4:	76fb      	strb	r3, [r7, #27]
 800fff6:	e017      	b.n	8010028 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800fff8:	4b90      	ldr	r3, [pc, #576]	@ (801023c <tcp_process+0x2a0>)
 800fffa:	681a      	ldr	r2, [r3, #0]
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010000:	1ad3      	subs	r3, r2, r3
 8010002:	2b00      	cmp	r3, #0
 8010004:	db10      	blt.n	8010028 <tcp_process+0x8c>
 8010006:	4b8d      	ldr	r3, [pc, #564]	@ (801023c <tcp_process+0x2a0>)
 8010008:	681a      	ldr	r2, [r3, #0]
 801000a:	687b      	ldr	r3, [r7, #4]
 801000c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801000e:	6879      	ldr	r1, [r7, #4]
 8010010:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8010012:	440b      	add	r3, r1
 8010014:	1ad3      	subs	r3, r2, r3
 8010016:	2b00      	cmp	r3, #0
 8010018:	dc06      	bgt.n	8010028 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	8b5b      	ldrh	r3, [r3, #26]
 801001e:	f043 0302 	orr.w	r3, r3, #2
 8010022:	b29a      	uxth	r2, r3
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8010028:	7efb      	ldrb	r3, [r7, #27]
 801002a:	2b00      	cmp	r3, #0
 801002c:	d01b      	beq.n	8010066 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	7d1b      	ldrb	r3, [r3, #20]
 8010032:	2b00      	cmp	r3, #0
 8010034:	d106      	bne.n	8010044 <tcp_process+0xa8>
 8010036:	4b7c      	ldr	r3, [pc, #496]	@ (8010228 <tcp_process+0x28c>)
 8010038:	f44f 724e 	mov.w	r2, #824	@ 0x338
 801003c:	4980      	ldr	r1, [pc, #512]	@ (8010240 <tcp_process+0x2a4>)
 801003e:	487c      	ldr	r0, [pc, #496]	@ (8010230 <tcp_process+0x294>)
 8010040:	f006 fdf2 	bl	8016c28 <iprintf>
      recv_flags |= TF_RESET;
 8010044:	4b7f      	ldr	r3, [pc, #508]	@ (8010244 <tcp_process+0x2a8>)
 8010046:	781b      	ldrb	r3, [r3, #0]
 8010048:	f043 0308 	orr.w	r3, r3, #8
 801004c:	b2da      	uxtb	r2, r3
 801004e:	4b7d      	ldr	r3, [pc, #500]	@ (8010244 <tcp_process+0x2a8>)
 8010050:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8010052:	687b      	ldr	r3, [r7, #4]
 8010054:	8b5b      	ldrh	r3, [r3, #26]
 8010056:	f023 0301 	bic.w	r3, r3, #1
 801005a:	b29a      	uxth	r2, r3
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8010060:	f06f 030d 	mvn.w	r3, #13
 8010064:	e37a      	b.n	801075c <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8010066:	2300      	movs	r3, #0
 8010068:	e378      	b.n	801075c <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 801006a:	4b72      	ldr	r3, [pc, #456]	@ (8010234 <tcp_process+0x298>)
 801006c:	781b      	ldrb	r3, [r3, #0]
 801006e:	f003 0302 	and.w	r3, r3, #2
 8010072:	2b00      	cmp	r3, #0
 8010074:	d010      	beq.n	8010098 <tcp_process+0xfc>
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	7d1b      	ldrb	r3, [r3, #20]
 801007a:	2b02      	cmp	r3, #2
 801007c:	d00c      	beq.n	8010098 <tcp_process+0xfc>
 801007e:	687b      	ldr	r3, [r7, #4]
 8010080:	7d1b      	ldrb	r3, [r3, #20]
 8010082:	2b03      	cmp	r3, #3
 8010084:	d008      	beq.n	8010098 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8010086:	687b      	ldr	r3, [r7, #4]
 8010088:	8b5b      	ldrh	r3, [r3, #26]
 801008a:	f043 0302 	orr.w	r3, r3, #2
 801008e:	b29a      	uxth	r2, r3
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8010094:	2300      	movs	r3, #0
 8010096:	e361      	b.n	801075c <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8010098:	687b      	ldr	r3, [r7, #4]
 801009a:	8b5b      	ldrh	r3, [r3, #26]
 801009c:	f003 0310 	and.w	r3, r3, #16
 80100a0:	2b00      	cmp	r3, #0
 80100a2:	d103      	bne.n	80100ac <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 80100a4:	4b68      	ldr	r3, [pc, #416]	@ (8010248 <tcp_process+0x2ac>)
 80100a6:	681a      	ldr	r2, [r3, #0]
 80100a8:	687b      	ldr	r3, [r7, #4]
 80100aa:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 80100ac:	687b      	ldr	r3, [r7, #4]
 80100ae:	2200      	movs	r2, #0
 80100b0:	f883 20a3 	strb.w	r2, [r3, #163]	@ 0xa3
  pcb->persist_probe = 0;
 80100b4:	687b      	ldr	r3, [r7, #4]
 80100b6:	2200      	movs	r2, #0
 80100b8:	f883 20a2 	strb.w	r2, [r3, #162]	@ 0xa2

  tcp_parseopt(pcb);
 80100bc:	6878      	ldr	r0, [r7, #4]
 80100be:	f001 fc2b 	bl	8011918 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 80100c2:	687b      	ldr	r3, [r7, #4]
 80100c4:	7d1b      	ldrb	r3, [r3, #20]
 80100c6:	3b02      	subs	r3, #2
 80100c8:	2b07      	cmp	r3, #7
 80100ca:	f200 8337 	bhi.w	801073c <tcp_process+0x7a0>
 80100ce:	a201      	add	r2, pc, #4	@ (adr r2, 80100d4 <tcp_process+0x138>)
 80100d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80100d4:	080100f5 	.word	0x080100f5
 80100d8:	08010325 	.word	0x08010325
 80100dc:	0801049d 	.word	0x0801049d
 80100e0:	080104c7 	.word	0x080104c7
 80100e4:	080105eb 	.word	0x080105eb
 80100e8:	0801049d 	.word	0x0801049d
 80100ec:	08010677 	.word	0x08010677
 80100f0:	08010707 	.word	0x08010707
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 80100f4:	4b4f      	ldr	r3, [pc, #316]	@ (8010234 <tcp_process+0x298>)
 80100f6:	781b      	ldrb	r3, [r3, #0]
 80100f8:	f003 0310 	and.w	r3, r3, #16
 80100fc:	2b00      	cmp	r3, #0
 80100fe:	f000 80e4 	beq.w	80102ca <tcp_process+0x32e>
 8010102:	4b4c      	ldr	r3, [pc, #304]	@ (8010234 <tcp_process+0x298>)
 8010104:	781b      	ldrb	r3, [r3, #0]
 8010106:	f003 0302 	and.w	r3, r3, #2
 801010a:	2b00      	cmp	r3, #0
 801010c:	f000 80dd 	beq.w	80102ca <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8010110:	687b      	ldr	r3, [r7, #4]
 8010112:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010114:	1c5a      	adds	r2, r3, #1
 8010116:	4b48      	ldr	r3, [pc, #288]	@ (8010238 <tcp_process+0x29c>)
 8010118:	681b      	ldr	r3, [r3, #0]
 801011a:	429a      	cmp	r2, r3
 801011c:	f040 80d5 	bne.w	80102ca <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8010120:	4b46      	ldr	r3, [pc, #280]	@ (801023c <tcp_process+0x2a0>)
 8010122:	681b      	ldr	r3, [r3, #0]
 8010124:	1c5a      	adds	r2, r3, #1
 8010126:	687b      	ldr	r3, [r7, #4]
 8010128:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 801012a:	687b      	ldr	r3, [r7, #4]
 801012c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801012e:	687b      	ldr	r3, [r7, #4]
 8010130:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 8010132:	4b41      	ldr	r3, [pc, #260]	@ (8010238 <tcp_process+0x29c>)
 8010134:	681a      	ldr	r2, [r3, #0]
 8010136:	687b      	ldr	r3, [r7, #4]
 8010138:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 801013a:	4b44      	ldr	r3, [pc, #272]	@ (801024c <tcp_process+0x2b0>)
 801013c:	681b      	ldr	r3, [r3, #0]
 801013e:	89db      	ldrh	r3, [r3, #14]
 8010140:	b29a      	uxth	r2, r3
 8010142:	687b      	ldr	r3, [r7, #4]
 8010144:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8010148:	687b      	ldr	r3, [r7, #4]
 801014a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 801014e:	687b      	ldr	r3, [r7, #4]
 8010150:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8010154:	4b39      	ldr	r3, [pc, #228]	@ (801023c <tcp_process+0x2a0>)
 8010156:	681b      	ldr	r3, [r3, #0]
 8010158:	1e5a      	subs	r2, r3, #1
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 801015e:	687b      	ldr	r3, [r7, #4]
 8010160:	2204      	movs	r2, #4
 8010162:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8010164:	687b      	ldr	r3, [r7, #4]
 8010166:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8010168:	687b      	ldr	r3, [r7, #4]
 801016a:	3304      	adds	r3, #4
 801016c:	4618      	mov	r0, r3
 801016e:	f005 f8b9 	bl	80152e4 <ip4_route>
 8010172:	4601      	mov	r1, r0
 8010174:	687b      	ldr	r3, [r7, #4]
 8010176:	3304      	adds	r3, #4
 8010178:	461a      	mov	r2, r3
 801017a:	4620      	mov	r0, r4
 801017c:	f7ff f88c 	bl	800f298 <tcp_eff_send_mss_netif>
 8010180:	4603      	mov	r3, r0
 8010182:	461a      	mov	r2, r3
 8010184:	687b      	ldr	r3, [r7, #4]
 8010186:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8010188:	687b      	ldr	r3, [r7, #4]
 801018a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801018c:	009a      	lsls	r2, r3, #2
 801018e:	687b      	ldr	r3, [r7, #4]
 8010190:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010192:	005b      	lsls	r3, r3, #1
 8010194:	f241 111c 	movw	r1, #4380	@ 0x111c
 8010198:	428b      	cmp	r3, r1
 801019a:	bf38      	it	cc
 801019c:	460b      	movcc	r3, r1
 801019e:	429a      	cmp	r2, r3
 80101a0:	d204      	bcs.n	80101ac <tcp_process+0x210>
 80101a2:	687b      	ldr	r3, [r7, #4]
 80101a4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80101a6:	009b      	lsls	r3, r3, #2
 80101a8:	b29b      	uxth	r3, r3
 80101aa:	e00d      	b.n	80101c8 <tcp_process+0x22c>
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80101b0:	005b      	lsls	r3, r3, #1
 80101b2:	f241 121c 	movw	r2, #4380	@ 0x111c
 80101b6:	4293      	cmp	r3, r2
 80101b8:	d904      	bls.n	80101c4 <tcp_process+0x228>
 80101ba:	687b      	ldr	r3, [r7, #4]
 80101bc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80101be:	005b      	lsls	r3, r3, #1
 80101c0:	b29b      	uxth	r3, r3
 80101c2:	e001      	b.n	80101c8 <tcp_process+0x22c>
 80101c4:	f241 131c 	movw	r3, #4380	@ 0x111c
 80101c8:	687a      	ldr	r2, [r7, #4]
 80101ca:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 80101ce:	687b      	ldr	r3, [r7, #4]
 80101d0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80101d4:	2b00      	cmp	r3, #0
 80101d6:	d106      	bne.n	80101e6 <tcp_process+0x24a>
 80101d8:	4b13      	ldr	r3, [pc, #76]	@ (8010228 <tcp_process+0x28c>)
 80101da:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 80101de:	491c      	ldr	r1, [pc, #112]	@ (8010250 <tcp_process+0x2b4>)
 80101e0:	4813      	ldr	r0, [pc, #76]	@ (8010230 <tcp_process+0x294>)
 80101e2:	f006 fd21 	bl	8016c28 <iprintf>
        --pcb->snd_queuelen;
 80101e6:	687b      	ldr	r3, [r7, #4]
 80101e8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80101ec:	3b01      	subs	r3, #1
 80101ee:	b29a      	uxth	r2, r3
 80101f0:	687b      	ldr	r3, [r7, #4]
 80101f2:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80101fa:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 80101fc:	69fb      	ldr	r3, [r7, #28]
 80101fe:	2b00      	cmp	r3, #0
 8010200:	d12a      	bne.n	8010258 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8010202:	687b      	ldr	r3, [r7, #4]
 8010204:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010206:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8010208:	69fb      	ldr	r3, [r7, #28]
 801020a:	2b00      	cmp	r3, #0
 801020c:	d106      	bne.n	801021c <tcp_process+0x280>
 801020e:	4b06      	ldr	r3, [pc, #24]	@ (8010228 <tcp_process+0x28c>)
 8010210:	f44f 725d 	mov.w	r2, #884	@ 0x374
 8010214:	490f      	ldr	r1, [pc, #60]	@ (8010254 <tcp_process+0x2b8>)
 8010216:	4806      	ldr	r0, [pc, #24]	@ (8010230 <tcp_process+0x294>)
 8010218:	f006 fd06 	bl	8016c28 <iprintf>
          pcb->unsent = rseg->next;
 801021c:	69fb      	ldr	r3, [r7, #28]
 801021e:	681a      	ldr	r2, [r3, #0]
 8010220:	687b      	ldr	r3, [r7, #4]
 8010222:	66da      	str	r2, [r3, #108]	@ 0x6c
 8010224:	e01c      	b.n	8010260 <tcp_process+0x2c4>
 8010226:	bf00      	nop
 8010228:	08019a8c 	.word	0x08019a8c
 801022c:	08019cc4 	.word	0x08019cc4
 8010230:	08019ad8 	.word	0x08019ad8
 8010234:	2000f42c 	.word	0x2000f42c
 8010238:	2000f424 	.word	0x2000f424
 801023c:	2000f420 	.word	0x2000f420
 8010240:	08019ce0 	.word	0x08019ce0
 8010244:	2000f42d 	.word	0x2000f42d
 8010248:	2000f3e8 	.word	0x2000f3e8
 801024c:	2000f410 	.word	0x2000f410
 8010250:	08019d00 	.word	0x08019d00
 8010254:	08019d18 	.word	0x08019d18
        } else {
          pcb->unacked = rseg->next;
 8010258:	69fb      	ldr	r3, [r7, #28]
 801025a:	681a      	ldr	r2, [r3, #0]
 801025c:	687b      	ldr	r3, [r7, #4]
 801025e:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 8010260:	69f8      	ldr	r0, [r7, #28]
 8010262:	f7fe fc4c 	bl	800eafe <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8010266:	687b      	ldr	r3, [r7, #4]
 8010268:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801026a:	2b00      	cmp	r3, #0
 801026c:	d104      	bne.n	8010278 <tcp_process+0x2dc>
          pcb->rtime = -1;
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010274:	861a      	strh	r2, [r3, #48]	@ 0x30
 8010276:	e006      	b.n	8010286 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8010278:	687b      	ldr	r3, [r7, #4]
 801027a:	2200      	movs	r2, #0
 801027c:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 801027e:	687b      	ldr	r3, [r7, #4]
 8010280:	2200      	movs	r2, #0
 8010282:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8010286:	687b      	ldr	r3, [r7, #4]
 8010288:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801028c:	2b00      	cmp	r3, #0
 801028e:	d00a      	beq.n	80102a6 <tcp_process+0x30a>
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010296:	687a      	ldr	r2, [r7, #4]
 8010298:	6910      	ldr	r0, [r2, #16]
 801029a:	2200      	movs	r2, #0
 801029c:	6879      	ldr	r1, [r7, #4]
 801029e:	4798      	blx	r3
 80102a0:	4603      	mov	r3, r0
 80102a2:	76bb      	strb	r3, [r7, #26]
 80102a4:	e001      	b.n	80102aa <tcp_process+0x30e>
 80102a6:	2300      	movs	r3, #0
 80102a8:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 80102aa:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80102ae:	f113 0f0d 	cmn.w	r3, #13
 80102b2:	d102      	bne.n	80102ba <tcp_process+0x31e>
          return ERR_ABRT;
 80102b4:	f06f 030c 	mvn.w	r3, #12
 80102b8:	e250      	b.n	801075c <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 80102ba:	687b      	ldr	r3, [r7, #4]
 80102bc:	8b5b      	ldrh	r3, [r3, #26]
 80102be:	f043 0302 	orr.w	r3, r3, #2
 80102c2:	b29a      	uxth	r2, r3
 80102c4:	687b      	ldr	r3, [r7, #4]
 80102c6:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 80102c8:	e23a      	b.n	8010740 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 80102ca:	4b98      	ldr	r3, [pc, #608]	@ (801052c <tcp_process+0x590>)
 80102cc:	781b      	ldrb	r3, [r3, #0]
 80102ce:	f003 0310 	and.w	r3, r3, #16
 80102d2:	2b00      	cmp	r3, #0
 80102d4:	f000 8234 	beq.w	8010740 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80102d8:	4b95      	ldr	r3, [pc, #596]	@ (8010530 <tcp_process+0x594>)
 80102da:	6819      	ldr	r1, [r3, #0]
 80102dc:	4b95      	ldr	r3, [pc, #596]	@ (8010534 <tcp_process+0x598>)
 80102de:	881b      	ldrh	r3, [r3, #0]
 80102e0:	461a      	mov	r2, r3
 80102e2:	4b95      	ldr	r3, [pc, #596]	@ (8010538 <tcp_process+0x59c>)
 80102e4:	681b      	ldr	r3, [r3, #0]
 80102e6:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80102e8:	4b94      	ldr	r3, [pc, #592]	@ (801053c <tcp_process+0x5a0>)
 80102ea:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80102ec:	885b      	ldrh	r3, [r3, #2]
 80102ee:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80102f0:	4a92      	ldr	r2, [pc, #584]	@ (801053c <tcp_process+0x5a0>)
 80102f2:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80102f4:	8812      	ldrh	r2, [r2, #0]
 80102f6:	b292      	uxth	r2, r2
 80102f8:	9202      	str	r2, [sp, #8]
 80102fa:	9301      	str	r3, [sp, #4]
 80102fc:	4b90      	ldr	r3, [pc, #576]	@ (8010540 <tcp_process+0x5a4>)
 80102fe:	9300      	str	r3, [sp, #0]
 8010300:	4b90      	ldr	r3, [pc, #576]	@ (8010544 <tcp_process+0x5a8>)
 8010302:	4602      	mov	r2, r0
 8010304:	6878      	ldr	r0, [r7, #4]
 8010306:	f003 f8d7 	bl	80134b8 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 801030a:	687b      	ldr	r3, [r7, #4]
 801030c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8010310:	2b05      	cmp	r3, #5
 8010312:	f200 8215 	bhi.w	8010740 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8010316:	687b      	ldr	r3, [r7, #4]
 8010318:	2200      	movs	r2, #0
 801031a:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 801031c:	6878      	ldr	r0, [r7, #4]
 801031e:	f002 fea3 	bl	8013068 <tcp_rexmit_rto>
      break;
 8010322:	e20d      	b.n	8010740 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8010324:	4b81      	ldr	r3, [pc, #516]	@ (801052c <tcp_process+0x590>)
 8010326:	781b      	ldrb	r3, [r3, #0]
 8010328:	f003 0310 	and.w	r3, r3, #16
 801032c:	2b00      	cmp	r3, #0
 801032e:	f000 80a1 	beq.w	8010474 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010332:	4b7f      	ldr	r3, [pc, #508]	@ (8010530 <tcp_process+0x594>)
 8010334:	681a      	ldr	r2, [r3, #0]
 8010336:	687b      	ldr	r3, [r7, #4]
 8010338:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801033a:	1ad3      	subs	r3, r2, r3
 801033c:	3b01      	subs	r3, #1
 801033e:	2b00      	cmp	r3, #0
 8010340:	db7e      	blt.n	8010440 <tcp_process+0x4a4>
 8010342:	4b7b      	ldr	r3, [pc, #492]	@ (8010530 <tcp_process+0x594>)
 8010344:	681a      	ldr	r2, [r3, #0]
 8010346:	687b      	ldr	r3, [r7, #4]
 8010348:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801034a:	1ad3      	subs	r3, r2, r3
 801034c:	2b00      	cmp	r3, #0
 801034e:	dc77      	bgt.n	8010440 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8010350:	687b      	ldr	r3, [r7, #4]
 8010352:	2204      	movs	r2, #4
 8010354:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8010356:	687b      	ldr	r3, [r7, #4]
 8010358:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801035a:	2b00      	cmp	r3, #0
 801035c:	d102      	bne.n	8010364 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 801035e:	23fa      	movs	r3, #250	@ 0xfa
 8010360:	76bb      	strb	r3, [r7, #26]
 8010362:	e01d      	b.n	80103a0 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8010364:	687b      	ldr	r3, [r7, #4]
 8010366:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010368:	699b      	ldr	r3, [r3, #24]
 801036a:	2b00      	cmp	r3, #0
 801036c:	d106      	bne.n	801037c <tcp_process+0x3e0>
 801036e:	4b76      	ldr	r3, [pc, #472]	@ (8010548 <tcp_process+0x5ac>)
 8010370:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 8010374:	4975      	ldr	r1, [pc, #468]	@ (801054c <tcp_process+0x5b0>)
 8010376:	4876      	ldr	r0, [pc, #472]	@ (8010550 <tcp_process+0x5b4>)
 8010378:	f006 fc56 	bl	8016c28 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010380:	699b      	ldr	r3, [r3, #24]
 8010382:	2b00      	cmp	r3, #0
 8010384:	d00a      	beq.n	801039c <tcp_process+0x400>
 8010386:	687b      	ldr	r3, [r7, #4]
 8010388:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801038a:	699b      	ldr	r3, [r3, #24]
 801038c:	687a      	ldr	r2, [r7, #4]
 801038e:	6910      	ldr	r0, [r2, #16]
 8010390:	2200      	movs	r2, #0
 8010392:	6879      	ldr	r1, [r7, #4]
 8010394:	4798      	blx	r3
 8010396:	4603      	mov	r3, r0
 8010398:	76bb      	strb	r3, [r7, #26]
 801039a:	e001      	b.n	80103a0 <tcp_process+0x404>
 801039c:	23f0      	movs	r3, #240	@ 0xf0
 801039e:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 80103a0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80103a4:	2b00      	cmp	r3, #0
 80103a6:	d00a      	beq.n	80103be <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 80103a8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80103ac:	f113 0f0d 	cmn.w	r3, #13
 80103b0:	d002      	beq.n	80103b8 <tcp_process+0x41c>
              tcp_abort(pcb);
 80103b2:	6878      	ldr	r0, [r7, #4]
 80103b4:	f7fd fd0a 	bl	800ddcc <tcp_abort>
            }
            return ERR_ABRT;
 80103b8:	f06f 030c 	mvn.w	r3, #12
 80103bc:	e1ce      	b.n	801075c <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 80103be:	6878      	ldr	r0, [r7, #4]
 80103c0:	f000 fae0 	bl	8010984 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 80103c4:	4b63      	ldr	r3, [pc, #396]	@ (8010554 <tcp_process+0x5b8>)
 80103c6:	881b      	ldrh	r3, [r3, #0]
 80103c8:	2b00      	cmp	r3, #0
 80103ca:	d005      	beq.n	80103d8 <tcp_process+0x43c>
            recv_acked--;
 80103cc:	4b61      	ldr	r3, [pc, #388]	@ (8010554 <tcp_process+0x5b8>)
 80103ce:	881b      	ldrh	r3, [r3, #0]
 80103d0:	3b01      	subs	r3, #1
 80103d2:	b29a      	uxth	r2, r3
 80103d4:	4b5f      	ldr	r3, [pc, #380]	@ (8010554 <tcp_process+0x5b8>)
 80103d6:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80103d8:	687b      	ldr	r3, [r7, #4]
 80103da:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80103dc:	009a      	lsls	r2, r3, #2
 80103de:	687b      	ldr	r3, [r7, #4]
 80103e0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80103e2:	005b      	lsls	r3, r3, #1
 80103e4:	f241 111c 	movw	r1, #4380	@ 0x111c
 80103e8:	428b      	cmp	r3, r1
 80103ea:	bf38      	it	cc
 80103ec:	460b      	movcc	r3, r1
 80103ee:	429a      	cmp	r2, r3
 80103f0:	d204      	bcs.n	80103fc <tcp_process+0x460>
 80103f2:	687b      	ldr	r3, [r7, #4]
 80103f4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80103f6:	009b      	lsls	r3, r3, #2
 80103f8:	b29b      	uxth	r3, r3
 80103fa:	e00d      	b.n	8010418 <tcp_process+0x47c>
 80103fc:	687b      	ldr	r3, [r7, #4]
 80103fe:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010400:	005b      	lsls	r3, r3, #1
 8010402:	f241 121c 	movw	r2, #4380	@ 0x111c
 8010406:	4293      	cmp	r3, r2
 8010408:	d904      	bls.n	8010414 <tcp_process+0x478>
 801040a:	687b      	ldr	r3, [r7, #4]
 801040c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801040e:	005b      	lsls	r3, r3, #1
 8010410:	b29b      	uxth	r3, r3
 8010412:	e001      	b.n	8010418 <tcp_process+0x47c>
 8010414:	f241 131c 	movw	r3, #4380	@ 0x111c
 8010418:	687a      	ldr	r2, [r7, #4]
 801041a:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 801041e:	4b4e      	ldr	r3, [pc, #312]	@ (8010558 <tcp_process+0x5bc>)
 8010420:	781b      	ldrb	r3, [r3, #0]
 8010422:	f003 0320 	and.w	r3, r3, #32
 8010426:	2b00      	cmp	r3, #0
 8010428:	d037      	beq.n	801049a <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 801042a:	687b      	ldr	r3, [r7, #4]
 801042c:	8b5b      	ldrh	r3, [r3, #26]
 801042e:	f043 0302 	orr.w	r3, r3, #2
 8010432:	b29a      	uxth	r2, r3
 8010434:	687b      	ldr	r3, [r7, #4]
 8010436:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8010438:	687b      	ldr	r3, [r7, #4]
 801043a:	2207      	movs	r2, #7
 801043c:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 801043e:	e02c      	b.n	801049a <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010440:	4b3b      	ldr	r3, [pc, #236]	@ (8010530 <tcp_process+0x594>)
 8010442:	6819      	ldr	r1, [r3, #0]
 8010444:	4b3b      	ldr	r3, [pc, #236]	@ (8010534 <tcp_process+0x598>)
 8010446:	881b      	ldrh	r3, [r3, #0]
 8010448:	461a      	mov	r2, r3
 801044a:	4b3b      	ldr	r3, [pc, #236]	@ (8010538 <tcp_process+0x59c>)
 801044c:	681b      	ldr	r3, [r3, #0]
 801044e:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010450:	4b3a      	ldr	r3, [pc, #232]	@ (801053c <tcp_process+0x5a0>)
 8010452:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010454:	885b      	ldrh	r3, [r3, #2]
 8010456:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010458:	4a38      	ldr	r2, [pc, #224]	@ (801053c <tcp_process+0x5a0>)
 801045a:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801045c:	8812      	ldrh	r2, [r2, #0]
 801045e:	b292      	uxth	r2, r2
 8010460:	9202      	str	r2, [sp, #8]
 8010462:	9301      	str	r3, [sp, #4]
 8010464:	4b36      	ldr	r3, [pc, #216]	@ (8010540 <tcp_process+0x5a4>)
 8010466:	9300      	str	r3, [sp, #0]
 8010468:	4b36      	ldr	r3, [pc, #216]	@ (8010544 <tcp_process+0x5a8>)
 801046a:	4602      	mov	r2, r0
 801046c:	6878      	ldr	r0, [r7, #4]
 801046e:	f003 f823 	bl	80134b8 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8010472:	e167      	b.n	8010744 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8010474:	4b2d      	ldr	r3, [pc, #180]	@ (801052c <tcp_process+0x590>)
 8010476:	781b      	ldrb	r3, [r3, #0]
 8010478:	f003 0302 	and.w	r3, r3, #2
 801047c:	2b00      	cmp	r3, #0
 801047e:	f000 8161 	beq.w	8010744 <tcp_process+0x7a8>
 8010482:	687b      	ldr	r3, [r7, #4]
 8010484:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010486:	1e5a      	subs	r2, r3, #1
 8010488:	4b2b      	ldr	r3, [pc, #172]	@ (8010538 <tcp_process+0x59c>)
 801048a:	681b      	ldr	r3, [r3, #0]
 801048c:	429a      	cmp	r2, r3
 801048e:	f040 8159 	bne.w	8010744 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8010492:	6878      	ldr	r0, [r7, #4]
 8010494:	f002 fe0a 	bl	80130ac <tcp_rexmit>
      break;
 8010498:	e154      	b.n	8010744 <tcp_process+0x7a8>
 801049a:	e153      	b.n	8010744 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 801049c:	6878      	ldr	r0, [r7, #4]
 801049e:	f000 fa71 	bl	8010984 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 80104a2:	4b2d      	ldr	r3, [pc, #180]	@ (8010558 <tcp_process+0x5bc>)
 80104a4:	781b      	ldrb	r3, [r3, #0]
 80104a6:	f003 0320 	and.w	r3, r3, #32
 80104aa:	2b00      	cmp	r3, #0
 80104ac:	f000 814c 	beq.w	8010748 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 80104b0:	687b      	ldr	r3, [r7, #4]
 80104b2:	8b5b      	ldrh	r3, [r3, #26]
 80104b4:	f043 0302 	orr.w	r3, r3, #2
 80104b8:	b29a      	uxth	r2, r3
 80104ba:	687b      	ldr	r3, [r7, #4]
 80104bc:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 80104be:	687b      	ldr	r3, [r7, #4]
 80104c0:	2207      	movs	r2, #7
 80104c2:	751a      	strb	r2, [r3, #20]
      }
      break;
 80104c4:	e140      	b.n	8010748 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 80104c6:	6878      	ldr	r0, [r7, #4]
 80104c8:	f000 fa5c 	bl	8010984 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80104cc:	4b22      	ldr	r3, [pc, #136]	@ (8010558 <tcp_process+0x5bc>)
 80104ce:	781b      	ldrb	r3, [r3, #0]
 80104d0:	f003 0320 	and.w	r3, r3, #32
 80104d4:	2b00      	cmp	r3, #0
 80104d6:	d071      	beq.n	80105bc <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80104d8:	4b14      	ldr	r3, [pc, #80]	@ (801052c <tcp_process+0x590>)
 80104da:	781b      	ldrb	r3, [r3, #0]
 80104dc:	f003 0310 	and.w	r3, r3, #16
 80104e0:	2b00      	cmp	r3, #0
 80104e2:	d060      	beq.n	80105a6 <tcp_process+0x60a>
 80104e4:	687b      	ldr	r3, [r7, #4]
 80104e6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80104e8:	4b11      	ldr	r3, [pc, #68]	@ (8010530 <tcp_process+0x594>)
 80104ea:	681b      	ldr	r3, [r3, #0]
 80104ec:	429a      	cmp	r2, r3
 80104ee:	d15a      	bne.n	80105a6 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 80104f0:	687b      	ldr	r3, [r7, #4]
 80104f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80104f4:	2b00      	cmp	r3, #0
 80104f6:	d156      	bne.n	80105a6 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 80104f8:	687b      	ldr	r3, [r7, #4]
 80104fa:	8b5b      	ldrh	r3, [r3, #26]
 80104fc:	f043 0302 	orr.w	r3, r3, #2
 8010500:	b29a      	uxth	r2, r3
 8010502:	687b      	ldr	r3, [r7, #4]
 8010504:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8010506:	6878      	ldr	r0, [r7, #4]
 8010508:	f7fe fdbc 	bl	800f084 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 801050c:	4b13      	ldr	r3, [pc, #76]	@ (801055c <tcp_process+0x5c0>)
 801050e:	681b      	ldr	r3, [r3, #0]
 8010510:	687a      	ldr	r2, [r7, #4]
 8010512:	429a      	cmp	r2, r3
 8010514:	d105      	bne.n	8010522 <tcp_process+0x586>
 8010516:	4b11      	ldr	r3, [pc, #68]	@ (801055c <tcp_process+0x5c0>)
 8010518:	681b      	ldr	r3, [r3, #0]
 801051a:	68db      	ldr	r3, [r3, #12]
 801051c:	4a0f      	ldr	r2, [pc, #60]	@ (801055c <tcp_process+0x5c0>)
 801051e:	6013      	str	r3, [r2, #0]
 8010520:	e02e      	b.n	8010580 <tcp_process+0x5e4>
 8010522:	4b0e      	ldr	r3, [pc, #56]	@ (801055c <tcp_process+0x5c0>)
 8010524:	681b      	ldr	r3, [r3, #0]
 8010526:	617b      	str	r3, [r7, #20]
 8010528:	e027      	b.n	801057a <tcp_process+0x5de>
 801052a:	bf00      	nop
 801052c:	2000f42c 	.word	0x2000f42c
 8010530:	2000f424 	.word	0x2000f424
 8010534:	2000f42a 	.word	0x2000f42a
 8010538:	2000f420 	.word	0x2000f420
 801053c:	2000f410 	.word	0x2000f410
 8010540:	20009aac 	.word	0x20009aac
 8010544:	20009ab0 	.word	0x20009ab0
 8010548:	08019a8c 	.word	0x08019a8c
 801054c:	08019d2c 	.word	0x08019d2c
 8010550:	08019ad8 	.word	0x08019ad8
 8010554:	2000f428 	.word	0x2000f428
 8010558:	2000f42d 	.word	0x2000f42d
 801055c:	2000f3f4 	.word	0x2000f3f4
 8010560:	697b      	ldr	r3, [r7, #20]
 8010562:	68db      	ldr	r3, [r3, #12]
 8010564:	687a      	ldr	r2, [r7, #4]
 8010566:	429a      	cmp	r2, r3
 8010568:	d104      	bne.n	8010574 <tcp_process+0x5d8>
 801056a:	687b      	ldr	r3, [r7, #4]
 801056c:	68da      	ldr	r2, [r3, #12]
 801056e:	697b      	ldr	r3, [r7, #20]
 8010570:	60da      	str	r2, [r3, #12]
 8010572:	e005      	b.n	8010580 <tcp_process+0x5e4>
 8010574:	697b      	ldr	r3, [r7, #20]
 8010576:	68db      	ldr	r3, [r3, #12]
 8010578:	617b      	str	r3, [r7, #20]
 801057a:	697b      	ldr	r3, [r7, #20]
 801057c:	2b00      	cmp	r3, #0
 801057e:	d1ef      	bne.n	8010560 <tcp_process+0x5c4>
 8010580:	687b      	ldr	r3, [r7, #4]
 8010582:	2200      	movs	r2, #0
 8010584:	60da      	str	r2, [r3, #12]
 8010586:	4b77      	ldr	r3, [pc, #476]	@ (8010764 <tcp_process+0x7c8>)
 8010588:	2201      	movs	r2, #1
 801058a:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 801058c:	687b      	ldr	r3, [r7, #4]
 801058e:	220a      	movs	r2, #10
 8010590:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8010592:	4b75      	ldr	r3, [pc, #468]	@ (8010768 <tcp_process+0x7cc>)
 8010594:	681a      	ldr	r2, [r3, #0]
 8010596:	687b      	ldr	r3, [r7, #4]
 8010598:	60da      	str	r2, [r3, #12]
 801059a:	4a73      	ldr	r2, [pc, #460]	@ (8010768 <tcp_process+0x7cc>)
 801059c:	687b      	ldr	r3, [r7, #4]
 801059e:	6013      	str	r3, [r2, #0]
 80105a0:	f003 f94c 	bl	801383c <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 80105a4:	e0d2      	b.n	801074c <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 80105a6:	687b      	ldr	r3, [r7, #4]
 80105a8:	8b5b      	ldrh	r3, [r3, #26]
 80105aa:	f043 0302 	orr.w	r3, r3, #2
 80105ae:	b29a      	uxth	r2, r3
 80105b0:	687b      	ldr	r3, [r7, #4]
 80105b2:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 80105b4:	687b      	ldr	r3, [r7, #4]
 80105b6:	2208      	movs	r2, #8
 80105b8:	751a      	strb	r2, [r3, #20]
      break;
 80105ba:	e0c7      	b.n	801074c <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80105bc:	4b6b      	ldr	r3, [pc, #428]	@ (801076c <tcp_process+0x7d0>)
 80105be:	781b      	ldrb	r3, [r3, #0]
 80105c0:	f003 0310 	and.w	r3, r3, #16
 80105c4:	2b00      	cmp	r3, #0
 80105c6:	f000 80c1 	beq.w	801074c <tcp_process+0x7b0>
 80105ca:	687b      	ldr	r3, [r7, #4]
 80105cc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80105ce:	4b68      	ldr	r3, [pc, #416]	@ (8010770 <tcp_process+0x7d4>)
 80105d0:	681b      	ldr	r3, [r3, #0]
 80105d2:	429a      	cmp	r2, r3
 80105d4:	f040 80ba 	bne.w	801074c <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80105dc:	2b00      	cmp	r3, #0
 80105de:	f040 80b5 	bne.w	801074c <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 80105e2:	687b      	ldr	r3, [r7, #4]
 80105e4:	2206      	movs	r2, #6
 80105e6:	751a      	strb	r2, [r3, #20]
      break;
 80105e8:	e0b0      	b.n	801074c <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 80105ea:	6878      	ldr	r0, [r7, #4]
 80105ec:	f000 f9ca 	bl	8010984 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80105f0:	4b60      	ldr	r3, [pc, #384]	@ (8010774 <tcp_process+0x7d8>)
 80105f2:	781b      	ldrb	r3, [r3, #0]
 80105f4:	f003 0320 	and.w	r3, r3, #32
 80105f8:	2b00      	cmp	r3, #0
 80105fa:	f000 80a9 	beq.w	8010750 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 80105fe:	687b      	ldr	r3, [r7, #4]
 8010600:	8b5b      	ldrh	r3, [r3, #26]
 8010602:	f043 0302 	orr.w	r3, r3, #2
 8010606:	b29a      	uxth	r2, r3
 8010608:	687b      	ldr	r3, [r7, #4]
 801060a:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 801060c:	6878      	ldr	r0, [r7, #4]
 801060e:	f7fe fd39 	bl	800f084 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8010612:	4b59      	ldr	r3, [pc, #356]	@ (8010778 <tcp_process+0x7dc>)
 8010614:	681b      	ldr	r3, [r3, #0]
 8010616:	687a      	ldr	r2, [r7, #4]
 8010618:	429a      	cmp	r2, r3
 801061a:	d105      	bne.n	8010628 <tcp_process+0x68c>
 801061c:	4b56      	ldr	r3, [pc, #344]	@ (8010778 <tcp_process+0x7dc>)
 801061e:	681b      	ldr	r3, [r3, #0]
 8010620:	68db      	ldr	r3, [r3, #12]
 8010622:	4a55      	ldr	r2, [pc, #340]	@ (8010778 <tcp_process+0x7dc>)
 8010624:	6013      	str	r3, [r2, #0]
 8010626:	e013      	b.n	8010650 <tcp_process+0x6b4>
 8010628:	4b53      	ldr	r3, [pc, #332]	@ (8010778 <tcp_process+0x7dc>)
 801062a:	681b      	ldr	r3, [r3, #0]
 801062c:	613b      	str	r3, [r7, #16]
 801062e:	e00c      	b.n	801064a <tcp_process+0x6ae>
 8010630:	693b      	ldr	r3, [r7, #16]
 8010632:	68db      	ldr	r3, [r3, #12]
 8010634:	687a      	ldr	r2, [r7, #4]
 8010636:	429a      	cmp	r2, r3
 8010638:	d104      	bne.n	8010644 <tcp_process+0x6a8>
 801063a:	687b      	ldr	r3, [r7, #4]
 801063c:	68da      	ldr	r2, [r3, #12]
 801063e:	693b      	ldr	r3, [r7, #16]
 8010640:	60da      	str	r2, [r3, #12]
 8010642:	e005      	b.n	8010650 <tcp_process+0x6b4>
 8010644:	693b      	ldr	r3, [r7, #16]
 8010646:	68db      	ldr	r3, [r3, #12]
 8010648:	613b      	str	r3, [r7, #16]
 801064a:	693b      	ldr	r3, [r7, #16]
 801064c:	2b00      	cmp	r3, #0
 801064e:	d1ef      	bne.n	8010630 <tcp_process+0x694>
 8010650:	687b      	ldr	r3, [r7, #4]
 8010652:	2200      	movs	r2, #0
 8010654:	60da      	str	r2, [r3, #12]
 8010656:	4b43      	ldr	r3, [pc, #268]	@ (8010764 <tcp_process+0x7c8>)
 8010658:	2201      	movs	r2, #1
 801065a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801065c:	687b      	ldr	r3, [r7, #4]
 801065e:	220a      	movs	r2, #10
 8010660:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8010662:	4b41      	ldr	r3, [pc, #260]	@ (8010768 <tcp_process+0x7cc>)
 8010664:	681a      	ldr	r2, [r3, #0]
 8010666:	687b      	ldr	r3, [r7, #4]
 8010668:	60da      	str	r2, [r3, #12]
 801066a:	4a3f      	ldr	r2, [pc, #252]	@ (8010768 <tcp_process+0x7cc>)
 801066c:	687b      	ldr	r3, [r7, #4]
 801066e:	6013      	str	r3, [r2, #0]
 8010670:	f003 f8e4 	bl	801383c <tcp_timer_needed>
      }
      break;
 8010674:	e06c      	b.n	8010750 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8010676:	6878      	ldr	r0, [r7, #4]
 8010678:	f000 f984 	bl	8010984 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801067c:	4b3b      	ldr	r3, [pc, #236]	@ (801076c <tcp_process+0x7d0>)
 801067e:	781b      	ldrb	r3, [r3, #0]
 8010680:	f003 0310 	and.w	r3, r3, #16
 8010684:	2b00      	cmp	r3, #0
 8010686:	d065      	beq.n	8010754 <tcp_process+0x7b8>
 8010688:	687b      	ldr	r3, [r7, #4]
 801068a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801068c:	4b38      	ldr	r3, [pc, #224]	@ (8010770 <tcp_process+0x7d4>)
 801068e:	681b      	ldr	r3, [r3, #0]
 8010690:	429a      	cmp	r2, r3
 8010692:	d15f      	bne.n	8010754 <tcp_process+0x7b8>
 8010694:	687b      	ldr	r3, [r7, #4]
 8010696:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010698:	2b00      	cmp	r3, #0
 801069a:	d15b      	bne.n	8010754 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 801069c:	6878      	ldr	r0, [r7, #4]
 801069e:	f7fe fcf1 	bl	800f084 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80106a2:	4b35      	ldr	r3, [pc, #212]	@ (8010778 <tcp_process+0x7dc>)
 80106a4:	681b      	ldr	r3, [r3, #0]
 80106a6:	687a      	ldr	r2, [r7, #4]
 80106a8:	429a      	cmp	r2, r3
 80106aa:	d105      	bne.n	80106b8 <tcp_process+0x71c>
 80106ac:	4b32      	ldr	r3, [pc, #200]	@ (8010778 <tcp_process+0x7dc>)
 80106ae:	681b      	ldr	r3, [r3, #0]
 80106b0:	68db      	ldr	r3, [r3, #12]
 80106b2:	4a31      	ldr	r2, [pc, #196]	@ (8010778 <tcp_process+0x7dc>)
 80106b4:	6013      	str	r3, [r2, #0]
 80106b6:	e013      	b.n	80106e0 <tcp_process+0x744>
 80106b8:	4b2f      	ldr	r3, [pc, #188]	@ (8010778 <tcp_process+0x7dc>)
 80106ba:	681b      	ldr	r3, [r3, #0]
 80106bc:	60fb      	str	r3, [r7, #12]
 80106be:	e00c      	b.n	80106da <tcp_process+0x73e>
 80106c0:	68fb      	ldr	r3, [r7, #12]
 80106c2:	68db      	ldr	r3, [r3, #12]
 80106c4:	687a      	ldr	r2, [r7, #4]
 80106c6:	429a      	cmp	r2, r3
 80106c8:	d104      	bne.n	80106d4 <tcp_process+0x738>
 80106ca:	687b      	ldr	r3, [r7, #4]
 80106cc:	68da      	ldr	r2, [r3, #12]
 80106ce:	68fb      	ldr	r3, [r7, #12]
 80106d0:	60da      	str	r2, [r3, #12]
 80106d2:	e005      	b.n	80106e0 <tcp_process+0x744>
 80106d4:	68fb      	ldr	r3, [r7, #12]
 80106d6:	68db      	ldr	r3, [r3, #12]
 80106d8:	60fb      	str	r3, [r7, #12]
 80106da:	68fb      	ldr	r3, [r7, #12]
 80106dc:	2b00      	cmp	r3, #0
 80106de:	d1ef      	bne.n	80106c0 <tcp_process+0x724>
 80106e0:	687b      	ldr	r3, [r7, #4]
 80106e2:	2200      	movs	r2, #0
 80106e4:	60da      	str	r2, [r3, #12]
 80106e6:	4b1f      	ldr	r3, [pc, #124]	@ (8010764 <tcp_process+0x7c8>)
 80106e8:	2201      	movs	r2, #1
 80106ea:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80106ec:	687b      	ldr	r3, [r7, #4]
 80106ee:	220a      	movs	r2, #10
 80106f0:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80106f2:	4b1d      	ldr	r3, [pc, #116]	@ (8010768 <tcp_process+0x7cc>)
 80106f4:	681a      	ldr	r2, [r3, #0]
 80106f6:	687b      	ldr	r3, [r7, #4]
 80106f8:	60da      	str	r2, [r3, #12]
 80106fa:	4a1b      	ldr	r2, [pc, #108]	@ (8010768 <tcp_process+0x7cc>)
 80106fc:	687b      	ldr	r3, [r7, #4]
 80106fe:	6013      	str	r3, [r2, #0]
 8010700:	f003 f89c 	bl	801383c <tcp_timer_needed>
      }
      break;
 8010704:	e026      	b.n	8010754 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8010706:	6878      	ldr	r0, [r7, #4]
 8010708:	f000 f93c 	bl	8010984 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801070c:	4b17      	ldr	r3, [pc, #92]	@ (801076c <tcp_process+0x7d0>)
 801070e:	781b      	ldrb	r3, [r3, #0]
 8010710:	f003 0310 	and.w	r3, r3, #16
 8010714:	2b00      	cmp	r3, #0
 8010716:	d01f      	beq.n	8010758 <tcp_process+0x7bc>
 8010718:	687b      	ldr	r3, [r7, #4]
 801071a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801071c:	4b14      	ldr	r3, [pc, #80]	@ (8010770 <tcp_process+0x7d4>)
 801071e:	681b      	ldr	r3, [r3, #0]
 8010720:	429a      	cmp	r2, r3
 8010722:	d119      	bne.n	8010758 <tcp_process+0x7bc>
 8010724:	687b      	ldr	r3, [r7, #4]
 8010726:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010728:	2b00      	cmp	r3, #0
 801072a:	d115      	bne.n	8010758 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 801072c:	4b11      	ldr	r3, [pc, #68]	@ (8010774 <tcp_process+0x7d8>)
 801072e:	781b      	ldrb	r3, [r3, #0]
 8010730:	f043 0310 	orr.w	r3, r3, #16
 8010734:	b2da      	uxtb	r2, r3
 8010736:	4b0f      	ldr	r3, [pc, #60]	@ (8010774 <tcp_process+0x7d8>)
 8010738:	701a      	strb	r2, [r3, #0]
      }
      break;
 801073a:	e00d      	b.n	8010758 <tcp_process+0x7bc>
    default:
      break;
 801073c:	bf00      	nop
 801073e:	e00c      	b.n	801075a <tcp_process+0x7be>
      break;
 8010740:	bf00      	nop
 8010742:	e00a      	b.n	801075a <tcp_process+0x7be>
      break;
 8010744:	bf00      	nop
 8010746:	e008      	b.n	801075a <tcp_process+0x7be>
      break;
 8010748:	bf00      	nop
 801074a:	e006      	b.n	801075a <tcp_process+0x7be>
      break;
 801074c:	bf00      	nop
 801074e:	e004      	b.n	801075a <tcp_process+0x7be>
      break;
 8010750:	bf00      	nop
 8010752:	e002      	b.n	801075a <tcp_process+0x7be>
      break;
 8010754:	bf00      	nop
 8010756:	e000      	b.n	801075a <tcp_process+0x7be>
      break;
 8010758:	bf00      	nop
  }
  return ERR_OK;
 801075a:	2300      	movs	r3, #0
}
 801075c:	4618      	mov	r0, r3
 801075e:	3724      	adds	r7, #36	@ 0x24
 8010760:	46bd      	mov	sp, r7
 8010762:	bd90      	pop	{r4, r7, pc}
 8010764:	2000f3fc 	.word	0x2000f3fc
 8010768:	2000f3f8 	.word	0x2000f3f8
 801076c:	2000f42c 	.word	0x2000f42c
 8010770:	2000f424 	.word	0x2000f424
 8010774:	2000f42d 	.word	0x2000f42d
 8010778:	2000f3f4 	.word	0x2000f3f4

0801077c <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 801077c:	b590      	push	{r4, r7, lr}
 801077e:	b085      	sub	sp, #20
 8010780:	af00      	add	r7, sp, #0
 8010782:	6078      	str	r0, [r7, #4]
 8010784:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8010786:	687b      	ldr	r3, [r7, #4]
 8010788:	2b00      	cmp	r3, #0
 801078a:	d106      	bne.n	801079a <tcp_oos_insert_segment+0x1e>
 801078c:	4b3b      	ldr	r3, [pc, #236]	@ (801087c <tcp_oos_insert_segment+0x100>)
 801078e:	f240 421f 	movw	r2, #1055	@ 0x41f
 8010792:	493b      	ldr	r1, [pc, #236]	@ (8010880 <tcp_oos_insert_segment+0x104>)
 8010794:	483b      	ldr	r0, [pc, #236]	@ (8010884 <tcp_oos_insert_segment+0x108>)
 8010796:	f006 fa47 	bl	8016c28 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801079a:	687b      	ldr	r3, [r7, #4]
 801079c:	68db      	ldr	r3, [r3, #12]
 801079e:	899b      	ldrh	r3, [r3, #12]
 80107a0:	b29b      	uxth	r3, r3
 80107a2:	4618      	mov	r0, r3
 80107a4:	f7fb f90e 	bl	800b9c4 <lwip_htons>
 80107a8:	4603      	mov	r3, r0
 80107aa:	b2db      	uxtb	r3, r3
 80107ac:	f003 0301 	and.w	r3, r3, #1
 80107b0:	2b00      	cmp	r3, #0
 80107b2:	d028      	beq.n	8010806 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 80107b4:	6838      	ldr	r0, [r7, #0]
 80107b6:	f7fe f98d 	bl	800ead4 <tcp_segs_free>
    next = NULL;
 80107ba:	2300      	movs	r3, #0
 80107bc:	603b      	str	r3, [r7, #0]
 80107be:	e056      	b.n	801086e <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80107c0:	683b      	ldr	r3, [r7, #0]
 80107c2:	68db      	ldr	r3, [r3, #12]
 80107c4:	899b      	ldrh	r3, [r3, #12]
 80107c6:	b29b      	uxth	r3, r3
 80107c8:	4618      	mov	r0, r3
 80107ca:	f7fb f8fb 	bl	800b9c4 <lwip_htons>
 80107ce:	4603      	mov	r3, r0
 80107d0:	b2db      	uxtb	r3, r3
 80107d2:	f003 0301 	and.w	r3, r3, #1
 80107d6:	2b00      	cmp	r3, #0
 80107d8:	d00d      	beq.n	80107f6 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 80107da:	687b      	ldr	r3, [r7, #4]
 80107dc:	68db      	ldr	r3, [r3, #12]
 80107de:	899b      	ldrh	r3, [r3, #12]
 80107e0:	b29c      	uxth	r4, r3
 80107e2:	2001      	movs	r0, #1
 80107e4:	f7fb f8ee 	bl	800b9c4 <lwip_htons>
 80107e8:	4603      	mov	r3, r0
 80107ea:	461a      	mov	r2, r3
 80107ec:	687b      	ldr	r3, [r7, #4]
 80107ee:	68db      	ldr	r3, [r3, #12]
 80107f0:	4322      	orrs	r2, r4
 80107f2:	b292      	uxth	r2, r2
 80107f4:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 80107f6:	683b      	ldr	r3, [r7, #0]
 80107f8:	60fb      	str	r3, [r7, #12]
      next = next->next;
 80107fa:	683b      	ldr	r3, [r7, #0]
 80107fc:	681b      	ldr	r3, [r3, #0]
 80107fe:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8010800:	68f8      	ldr	r0, [r7, #12]
 8010802:	f7fe f97c 	bl	800eafe <tcp_seg_free>
    while (next &&
 8010806:	683b      	ldr	r3, [r7, #0]
 8010808:	2b00      	cmp	r3, #0
 801080a:	d00e      	beq.n	801082a <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 801080c:	687b      	ldr	r3, [r7, #4]
 801080e:	891b      	ldrh	r3, [r3, #8]
 8010810:	461a      	mov	r2, r3
 8010812:	4b1d      	ldr	r3, [pc, #116]	@ (8010888 <tcp_oos_insert_segment+0x10c>)
 8010814:	681b      	ldr	r3, [r3, #0]
 8010816:	441a      	add	r2, r3
 8010818:	683b      	ldr	r3, [r7, #0]
 801081a:	68db      	ldr	r3, [r3, #12]
 801081c:	685b      	ldr	r3, [r3, #4]
 801081e:	6839      	ldr	r1, [r7, #0]
 8010820:	8909      	ldrh	r1, [r1, #8]
 8010822:	440b      	add	r3, r1
 8010824:	1ad3      	subs	r3, r2, r3
    while (next &&
 8010826:	2b00      	cmp	r3, #0
 8010828:	daca      	bge.n	80107c0 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 801082a:	683b      	ldr	r3, [r7, #0]
 801082c:	2b00      	cmp	r3, #0
 801082e:	d01e      	beq.n	801086e <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8010830:	687b      	ldr	r3, [r7, #4]
 8010832:	891b      	ldrh	r3, [r3, #8]
 8010834:	461a      	mov	r2, r3
 8010836:	4b14      	ldr	r3, [pc, #80]	@ (8010888 <tcp_oos_insert_segment+0x10c>)
 8010838:	681b      	ldr	r3, [r3, #0]
 801083a:	441a      	add	r2, r3
 801083c:	683b      	ldr	r3, [r7, #0]
 801083e:	68db      	ldr	r3, [r3, #12]
 8010840:	685b      	ldr	r3, [r3, #4]
 8010842:	1ad3      	subs	r3, r2, r3
    if (next &&
 8010844:	2b00      	cmp	r3, #0
 8010846:	dd12      	ble.n	801086e <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8010848:	683b      	ldr	r3, [r7, #0]
 801084a:	68db      	ldr	r3, [r3, #12]
 801084c:	685b      	ldr	r3, [r3, #4]
 801084e:	b29a      	uxth	r2, r3
 8010850:	4b0d      	ldr	r3, [pc, #52]	@ (8010888 <tcp_oos_insert_segment+0x10c>)
 8010852:	681b      	ldr	r3, [r3, #0]
 8010854:	b29b      	uxth	r3, r3
 8010856:	1ad3      	subs	r3, r2, r3
 8010858:	b29a      	uxth	r2, r3
 801085a:	687b      	ldr	r3, [r7, #4]
 801085c:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 801085e:	687b      	ldr	r3, [r7, #4]
 8010860:	685a      	ldr	r2, [r3, #4]
 8010862:	687b      	ldr	r3, [r7, #4]
 8010864:	891b      	ldrh	r3, [r3, #8]
 8010866:	4619      	mov	r1, r3
 8010868:	4610      	mov	r0, r2
 801086a:	f7fc fb17 	bl	800ce9c <pbuf_realloc>
    }
  }
  cseg->next = next;
 801086e:	687b      	ldr	r3, [r7, #4]
 8010870:	683a      	ldr	r2, [r7, #0]
 8010872:	601a      	str	r2, [r3, #0]
}
 8010874:	bf00      	nop
 8010876:	3714      	adds	r7, #20
 8010878:	46bd      	mov	sp, r7
 801087a:	bd90      	pop	{r4, r7, pc}
 801087c:	08019a8c 	.word	0x08019a8c
 8010880:	08019d4c 	.word	0x08019d4c
 8010884:	08019ad8 	.word	0x08019ad8
 8010888:	2000f420 	.word	0x2000f420

0801088c <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 801088c:	b5b0      	push	{r4, r5, r7, lr}
 801088e:	b086      	sub	sp, #24
 8010890:	af00      	add	r7, sp, #0
 8010892:	60f8      	str	r0, [r7, #12]
 8010894:	60b9      	str	r1, [r7, #8]
 8010896:	607a      	str	r2, [r7, #4]
 8010898:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 801089a:	e03e      	b.n	801091a <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 801089c:	68bb      	ldr	r3, [r7, #8]
 801089e:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 80108a0:	68bb      	ldr	r3, [r7, #8]
 80108a2:	681b      	ldr	r3, [r3, #0]
 80108a4:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 80108a6:	697b      	ldr	r3, [r7, #20]
 80108a8:	685b      	ldr	r3, [r3, #4]
 80108aa:	4618      	mov	r0, r3
 80108ac:	f7fc fd0a 	bl	800d2c4 <pbuf_clen>
 80108b0:	4603      	mov	r3, r0
 80108b2:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 80108b4:	68fb      	ldr	r3, [r7, #12]
 80108b6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80108ba:	8a7a      	ldrh	r2, [r7, #18]
 80108bc:	429a      	cmp	r2, r3
 80108be:	d906      	bls.n	80108ce <tcp_free_acked_segments+0x42>
 80108c0:	4b2a      	ldr	r3, [pc, #168]	@ (801096c <tcp_free_acked_segments+0xe0>)
 80108c2:	f240 4257 	movw	r2, #1111	@ 0x457
 80108c6:	492a      	ldr	r1, [pc, #168]	@ (8010970 <tcp_free_acked_segments+0xe4>)
 80108c8:	482a      	ldr	r0, [pc, #168]	@ (8010974 <tcp_free_acked_segments+0xe8>)
 80108ca:	f006 f9ad 	bl	8016c28 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 80108ce:	68fb      	ldr	r3, [r7, #12]
 80108d0:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 80108d4:	8a7b      	ldrh	r3, [r7, #18]
 80108d6:	1ad3      	subs	r3, r2, r3
 80108d8:	b29a      	uxth	r2, r3
 80108da:	68fb      	ldr	r3, [r7, #12]
 80108dc:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 80108e0:	697b      	ldr	r3, [r7, #20]
 80108e2:	891a      	ldrh	r2, [r3, #8]
 80108e4:	4b24      	ldr	r3, [pc, #144]	@ (8010978 <tcp_free_acked_segments+0xec>)
 80108e6:	881b      	ldrh	r3, [r3, #0]
 80108e8:	4413      	add	r3, r2
 80108ea:	b29a      	uxth	r2, r3
 80108ec:	4b22      	ldr	r3, [pc, #136]	@ (8010978 <tcp_free_acked_segments+0xec>)
 80108ee:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 80108f0:	6978      	ldr	r0, [r7, #20]
 80108f2:	f7fe f904 	bl	800eafe <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 80108f6:	68fb      	ldr	r3, [r7, #12]
 80108f8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80108fc:	2b00      	cmp	r3, #0
 80108fe:	d00c      	beq.n	801091a <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8010900:	68bb      	ldr	r3, [r7, #8]
 8010902:	2b00      	cmp	r3, #0
 8010904:	d109      	bne.n	801091a <tcp_free_acked_segments+0x8e>
 8010906:	683b      	ldr	r3, [r7, #0]
 8010908:	2b00      	cmp	r3, #0
 801090a:	d106      	bne.n	801091a <tcp_free_acked_segments+0x8e>
 801090c:	4b17      	ldr	r3, [pc, #92]	@ (801096c <tcp_free_acked_segments+0xe0>)
 801090e:	f240 4261 	movw	r2, #1121	@ 0x461
 8010912:	491a      	ldr	r1, [pc, #104]	@ (801097c <tcp_free_acked_segments+0xf0>)
 8010914:	4817      	ldr	r0, [pc, #92]	@ (8010974 <tcp_free_acked_segments+0xe8>)
 8010916:	f006 f987 	bl	8016c28 <iprintf>
  while (seg_list != NULL &&
 801091a:	68bb      	ldr	r3, [r7, #8]
 801091c:	2b00      	cmp	r3, #0
 801091e:	d020      	beq.n	8010962 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8010920:	68bb      	ldr	r3, [r7, #8]
 8010922:	68db      	ldr	r3, [r3, #12]
 8010924:	685b      	ldr	r3, [r3, #4]
 8010926:	4618      	mov	r0, r3
 8010928:	f7fb f861 	bl	800b9ee <lwip_htonl>
 801092c:	4604      	mov	r4, r0
 801092e:	68bb      	ldr	r3, [r7, #8]
 8010930:	891b      	ldrh	r3, [r3, #8]
 8010932:	461d      	mov	r5, r3
 8010934:	68bb      	ldr	r3, [r7, #8]
 8010936:	68db      	ldr	r3, [r3, #12]
 8010938:	899b      	ldrh	r3, [r3, #12]
 801093a:	b29b      	uxth	r3, r3
 801093c:	4618      	mov	r0, r3
 801093e:	f7fb f841 	bl	800b9c4 <lwip_htons>
 8010942:	4603      	mov	r3, r0
 8010944:	b2db      	uxtb	r3, r3
 8010946:	f003 0303 	and.w	r3, r3, #3
 801094a:	2b00      	cmp	r3, #0
 801094c:	d001      	beq.n	8010952 <tcp_free_acked_segments+0xc6>
 801094e:	2301      	movs	r3, #1
 8010950:	e000      	b.n	8010954 <tcp_free_acked_segments+0xc8>
 8010952:	2300      	movs	r3, #0
 8010954:	442b      	add	r3, r5
 8010956:	18e2      	adds	r2, r4, r3
 8010958:	4b09      	ldr	r3, [pc, #36]	@ (8010980 <tcp_free_acked_segments+0xf4>)
 801095a:	681b      	ldr	r3, [r3, #0]
 801095c:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 801095e:	2b00      	cmp	r3, #0
 8010960:	dd9c      	ble.n	801089c <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8010962:	68bb      	ldr	r3, [r7, #8]
}
 8010964:	4618      	mov	r0, r3
 8010966:	3718      	adds	r7, #24
 8010968:	46bd      	mov	sp, r7
 801096a:	bdb0      	pop	{r4, r5, r7, pc}
 801096c:	08019a8c 	.word	0x08019a8c
 8010970:	08019d74 	.word	0x08019d74
 8010974:	08019ad8 	.word	0x08019ad8
 8010978:	2000f428 	.word	0x2000f428
 801097c:	08019d9c 	.word	0x08019d9c
 8010980:	2000f424 	.word	0x2000f424

08010984 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8010984:	b5b0      	push	{r4, r5, r7, lr}
 8010986:	b094      	sub	sp, #80	@ 0x50
 8010988:	af00      	add	r7, sp, #0
 801098a:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 801098c:	2300      	movs	r3, #0
 801098e:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8010990:	687b      	ldr	r3, [r7, #4]
 8010992:	2b00      	cmp	r3, #0
 8010994:	d106      	bne.n	80109a4 <tcp_receive+0x20>
 8010996:	4b91      	ldr	r3, [pc, #580]	@ (8010bdc <tcp_receive+0x258>)
 8010998:	f240 427b 	movw	r2, #1147	@ 0x47b
 801099c:	4990      	ldr	r1, [pc, #576]	@ (8010be0 <tcp_receive+0x25c>)
 801099e:	4891      	ldr	r0, [pc, #580]	@ (8010be4 <tcp_receive+0x260>)
 80109a0:	f006 f942 	bl	8016c28 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 80109a4:	687b      	ldr	r3, [r7, #4]
 80109a6:	7d1b      	ldrb	r3, [r3, #20]
 80109a8:	2b03      	cmp	r3, #3
 80109aa:	d806      	bhi.n	80109ba <tcp_receive+0x36>
 80109ac:	4b8b      	ldr	r3, [pc, #556]	@ (8010bdc <tcp_receive+0x258>)
 80109ae:	f240 427c 	movw	r2, #1148	@ 0x47c
 80109b2:	498d      	ldr	r1, [pc, #564]	@ (8010be8 <tcp_receive+0x264>)
 80109b4:	488b      	ldr	r0, [pc, #556]	@ (8010be4 <tcp_receive+0x260>)
 80109b6:	f006 f937 	bl	8016c28 <iprintf>

  if (flags & TCP_ACK) {
 80109ba:	4b8c      	ldr	r3, [pc, #560]	@ (8010bec <tcp_receive+0x268>)
 80109bc:	781b      	ldrb	r3, [r3, #0]
 80109be:	f003 0310 	and.w	r3, r3, #16
 80109c2:	2b00      	cmp	r3, #0
 80109c4:	f000 8264 	beq.w	8010e90 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 80109c8:	687b      	ldr	r3, [r7, #4]
 80109ca:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80109ce:	461a      	mov	r2, r3
 80109d0:	687b      	ldr	r3, [r7, #4]
 80109d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80109d4:	4413      	add	r3, r2
 80109d6:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80109d8:	687b      	ldr	r3, [r7, #4]
 80109da:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80109dc:	4b84      	ldr	r3, [pc, #528]	@ (8010bf0 <tcp_receive+0x26c>)
 80109de:	681b      	ldr	r3, [r3, #0]
 80109e0:	1ad3      	subs	r3, r2, r3
 80109e2:	2b00      	cmp	r3, #0
 80109e4:	db1b      	blt.n	8010a1e <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80109e6:	687b      	ldr	r3, [r7, #4]
 80109e8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80109ea:	4b81      	ldr	r3, [pc, #516]	@ (8010bf0 <tcp_receive+0x26c>)
 80109ec:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80109ee:	429a      	cmp	r2, r3
 80109f0:	d106      	bne.n	8010a00 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80109f2:	687b      	ldr	r3, [r7, #4]
 80109f4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80109f6:	4b7f      	ldr	r3, [pc, #508]	@ (8010bf4 <tcp_receive+0x270>)
 80109f8:	681b      	ldr	r3, [r3, #0]
 80109fa:	1ad3      	subs	r3, r2, r3
 80109fc:	2b00      	cmp	r3, #0
 80109fe:	db0e      	blt.n	8010a1e <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8010a00:	687b      	ldr	r3, [r7, #4]
 8010a02:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8010a04:	4b7b      	ldr	r3, [pc, #492]	@ (8010bf4 <tcp_receive+0x270>)
 8010a06:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8010a08:	429a      	cmp	r2, r3
 8010a0a:	d125      	bne.n	8010a58 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8010a0c:	4b7a      	ldr	r3, [pc, #488]	@ (8010bf8 <tcp_receive+0x274>)
 8010a0e:	681b      	ldr	r3, [r3, #0]
 8010a10:	89db      	ldrh	r3, [r3, #14]
 8010a12:	b29a      	uxth	r2, r3
 8010a14:	687b      	ldr	r3, [r7, #4]
 8010a16:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8010a1a:	429a      	cmp	r2, r3
 8010a1c:	d91c      	bls.n	8010a58 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8010a1e:	4b76      	ldr	r3, [pc, #472]	@ (8010bf8 <tcp_receive+0x274>)
 8010a20:	681b      	ldr	r3, [r3, #0]
 8010a22:	89db      	ldrh	r3, [r3, #14]
 8010a24:	b29a      	uxth	r2, r3
 8010a26:	687b      	ldr	r3, [r7, #4]
 8010a28:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8010a2c:	687b      	ldr	r3, [r7, #4]
 8010a2e:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 8010a32:	687b      	ldr	r3, [r7, #4]
 8010a34:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8010a38:	429a      	cmp	r2, r3
 8010a3a:	d205      	bcs.n	8010a48 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8010a42:	687b      	ldr	r3, [r7, #4]
 8010a44:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 8010a48:	4b69      	ldr	r3, [pc, #420]	@ (8010bf0 <tcp_receive+0x26c>)
 8010a4a:	681a      	ldr	r2, [r3, #0]
 8010a4c:	687b      	ldr	r3, [r7, #4]
 8010a4e:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 8010a50:	4b68      	ldr	r3, [pc, #416]	@ (8010bf4 <tcp_receive+0x270>)
 8010a52:	681a      	ldr	r2, [r3, #0]
 8010a54:	687b      	ldr	r3, [r7, #4]
 8010a56:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8010a58:	4b66      	ldr	r3, [pc, #408]	@ (8010bf4 <tcp_receive+0x270>)
 8010a5a:	681a      	ldr	r2, [r3, #0]
 8010a5c:	687b      	ldr	r3, [r7, #4]
 8010a5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010a60:	1ad3      	subs	r3, r2, r3
 8010a62:	2b00      	cmp	r3, #0
 8010a64:	dc58      	bgt.n	8010b18 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8010a66:	4b65      	ldr	r3, [pc, #404]	@ (8010bfc <tcp_receive+0x278>)
 8010a68:	881b      	ldrh	r3, [r3, #0]
 8010a6a:	2b00      	cmp	r3, #0
 8010a6c:	d14b      	bne.n	8010b06 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8010a6e:	687b      	ldr	r3, [r7, #4]
 8010a70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010a72:	687a      	ldr	r2, [r7, #4]
 8010a74:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 8010a78:	4413      	add	r3, r2
 8010a7a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010a7c:	429a      	cmp	r2, r3
 8010a7e:	d142      	bne.n	8010b06 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8010a80:	687b      	ldr	r3, [r7, #4]
 8010a82:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8010a86:	2b00      	cmp	r3, #0
 8010a88:	db3d      	blt.n	8010b06 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8010a8a:	687b      	ldr	r3, [r7, #4]
 8010a8c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8010a8e:	4b59      	ldr	r3, [pc, #356]	@ (8010bf4 <tcp_receive+0x270>)
 8010a90:	681b      	ldr	r3, [r3, #0]
 8010a92:	429a      	cmp	r2, r3
 8010a94:	d137      	bne.n	8010b06 <tcp_receive+0x182>
              found_dupack = 1;
 8010a96:	2301      	movs	r3, #1
 8010a98:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8010a9a:	687b      	ldr	r3, [r7, #4]
 8010a9c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8010aa0:	2bff      	cmp	r3, #255	@ 0xff
 8010aa2:	d007      	beq.n	8010ab4 <tcp_receive+0x130>
                ++pcb->dupacks;
 8010aa4:	687b      	ldr	r3, [r7, #4]
 8010aa6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8010aaa:	3301      	adds	r3, #1
 8010aac:	b2da      	uxtb	r2, r3
 8010aae:	687b      	ldr	r3, [r7, #4]
 8010ab0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 8010ab4:	687b      	ldr	r3, [r7, #4]
 8010ab6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8010aba:	2b03      	cmp	r3, #3
 8010abc:	d91b      	bls.n	8010af6 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8010abe:	687b      	ldr	r3, [r7, #4]
 8010ac0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010ac8:	4413      	add	r3, r2
 8010aca:	b29a      	uxth	r2, r3
 8010acc:	687b      	ldr	r3, [r7, #4]
 8010ace:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8010ad2:	429a      	cmp	r2, r3
 8010ad4:	d30a      	bcc.n	8010aec <tcp_receive+0x168>
 8010ad6:	687b      	ldr	r3, [r7, #4]
 8010ad8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8010adc:	687b      	ldr	r3, [r7, #4]
 8010ade:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010ae0:	4413      	add	r3, r2
 8010ae2:	b29a      	uxth	r2, r3
 8010ae4:	687b      	ldr	r3, [r7, #4]
 8010ae6:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8010aea:	e004      	b.n	8010af6 <tcp_receive+0x172>
 8010aec:	687b      	ldr	r3, [r7, #4]
 8010aee:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010af2:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 8010af6:	687b      	ldr	r3, [r7, #4]
 8010af8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8010afc:	2b02      	cmp	r3, #2
 8010afe:	d902      	bls.n	8010b06 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8010b00:	6878      	ldr	r0, [r7, #4]
 8010b02:	f002 fb3f 	bl	8013184 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8010b06:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010b08:	2b00      	cmp	r3, #0
 8010b0a:	f040 8161 	bne.w	8010dd0 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8010b0e:	687b      	ldr	r3, [r7, #4]
 8010b10:	2200      	movs	r2, #0
 8010b12:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8010b16:	e15b      	b.n	8010dd0 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010b18:	4b36      	ldr	r3, [pc, #216]	@ (8010bf4 <tcp_receive+0x270>)
 8010b1a:	681a      	ldr	r2, [r3, #0]
 8010b1c:	687b      	ldr	r3, [r7, #4]
 8010b1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010b20:	1ad3      	subs	r3, r2, r3
 8010b22:	3b01      	subs	r3, #1
 8010b24:	2b00      	cmp	r3, #0
 8010b26:	f2c0 814e 	blt.w	8010dc6 <tcp_receive+0x442>
 8010b2a:	4b32      	ldr	r3, [pc, #200]	@ (8010bf4 <tcp_receive+0x270>)
 8010b2c:	681a      	ldr	r2, [r3, #0]
 8010b2e:	687b      	ldr	r3, [r7, #4]
 8010b30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010b32:	1ad3      	subs	r3, r2, r3
 8010b34:	2b00      	cmp	r3, #0
 8010b36:	f300 8146 	bgt.w	8010dc6 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8010b3a:	687b      	ldr	r3, [r7, #4]
 8010b3c:	8b5b      	ldrh	r3, [r3, #26]
 8010b3e:	f003 0304 	and.w	r3, r3, #4
 8010b42:	2b00      	cmp	r3, #0
 8010b44:	d010      	beq.n	8010b68 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8010b46:	687b      	ldr	r3, [r7, #4]
 8010b48:	8b5b      	ldrh	r3, [r3, #26]
 8010b4a:	f023 0304 	bic.w	r3, r3, #4
 8010b4e:	b29a      	uxth	r2, r3
 8010b50:	687b      	ldr	r3, [r7, #4]
 8010b52:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8010b54:	687b      	ldr	r3, [r7, #4]
 8010b56:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8010b5a:	687b      	ldr	r3, [r7, #4]
 8010b5c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 8010b60:	687b      	ldr	r3, [r7, #4]
 8010b62:	2200      	movs	r2, #0
 8010b64:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8010b68:	687b      	ldr	r3, [r7, #4]
 8010b6a:	2200      	movs	r2, #0
 8010b6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8010b70:	687b      	ldr	r3, [r7, #4]
 8010b72:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8010b76:	10db      	asrs	r3, r3, #3
 8010b78:	b21b      	sxth	r3, r3
 8010b7a:	b29a      	uxth	r2, r3
 8010b7c:	687b      	ldr	r3, [r7, #4]
 8010b7e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8010b82:	b29b      	uxth	r3, r3
 8010b84:	4413      	add	r3, r2
 8010b86:	b29b      	uxth	r3, r3
 8010b88:	b21a      	sxth	r2, r3
 8010b8a:	687b      	ldr	r3, [r7, #4]
 8010b8c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8010b90:	4b18      	ldr	r3, [pc, #96]	@ (8010bf4 <tcp_receive+0x270>)
 8010b92:	681b      	ldr	r3, [r3, #0]
 8010b94:	b29a      	uxth	r2, r3
 8010b96:	687b      	ldr	r3, [r7, #4]
 8010b98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010b9a:	b29b      	uxth	r3, r3
 8010b9c:	1ad3      	subs	r3, r2, r3
 8010b9e:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8010ba0:	687b      	ldr	r3, [r7, #4]
 8010ba2:	2200      	movs	r2, #0
 8010ba4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 8010ba8:	4b12      	ldr	r3, [pc, #72]	@ (8010bf4 <tcp_receive+0x270>)
 8010baa:	681a      	ldr	r2, [r3, #0]
 8010bac:	687b      	ldr	r3, [r7, #4]
 8010bae:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	7d1b      	ldrb	r3, [r3, #20]
 8010bb4:	2b03      	cmp	r3, #3
 8010bb6:	f240 8097 	bls.w	8010ce8 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 8010bba:	687b      	ldr	r3, [r7, #4]
 8010bbc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8010bc0:	687b      	ldr	r3, [r7, #4]
 8010bc2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8010bc6:	429a      	cmp	r2, r3
 8010bc8:	d245      	bcs.n	8010c56 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8010bca:	687b      	ldr	r3, [r7, #4]
 8010bcc:	8b5b      	ldrh	r3, [r3, #26]
 8010bce:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8010bd2:	2b00      	cmp	r3, #0
 8010bd4:	d014      	beq.n	8010c00 <tcp_receive+0x27c>
 8010bd6:	2301      	movs	r3, #1
 8010bd8:	e013      	b.n	8010c02 <tcp_receive+0x27e>
 8010bda:	bf00      	nop
 8010bdc:	08019a8c 	.word	0x08019a8c
 8010be0:	08019dbc 	.word	0x08019dbc
 8010be4:	08019ad8 	.word	0x08019ad8
 8010be8:	08019dd8 	.word	0x08019dd8
 8010bec:	2000f42c 	.word	0x2000f42c
 8010bf0:	2000f420 	.word	0x2000f420
 8010bf4:	2000f424 	.word	0x2000f424
 8010bf8:	2000f410 	.word	0x2000f410
 8010bfc:	2000f42a 	.word	0x2000f42a
 8010c00:	2302      	movs	r3, #2
 8010c02:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8010c06:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8010c0a:	b29a      	uxth	r2, r3
 8010c0c:	687b      	ldr	r3, [r7, #4]
 8010c0e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010c10:	fb12 f303 	smulbb	r3, r2, r3
 8010c14:	b29b      	uxth	r3, r3
 8010c16:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8010c18:	4293      	cmp	r3, r2
 8010c1a:	bf28      	it	cs
 8010c1c:	4613      	movcs	r3, r2
 8010c1e:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8010c20:	687b      	ldr	r3, [r7, #4]
 8010c22:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8010c26:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8010c28:	4413      	add	r3, r2
 8010c2a:	b29a      	uxth	r2, r3
 8010c2c:	687b      	ldr	r3, [r7, #4]
 8010c2e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8010c32:	429a      	cmp	r2, r3
 8010c34:	d309      	bcc.n	8010c4a <tcp_receive+0x2c6>
 8010c36:	687b      	ldr	r3, [r7, #4]
 8010c38:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8010c3c:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8010c3e:	4413      	add	r3, r2
 8010c40:	b29a      	uxth	r2, r3
 8010c42:	687b      	ldr	r3, [r7, #4]
 8010c44:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8010c48:	e04e      	b.n	8010ce8 <tcp_receive+0x364>
 8010c4a:	687b      	ldr	r3, [r7, #4]
 8010c4c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010c50:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8010c54:	e048      	b.n	8010ce8 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8010c56:	687b      	ldr	r3, [r7, #4]
 8010c58:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8010c5c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8010c5e:	4413      	add	r3, r2
 8010c60:	b29a      	uxth	r2, r3
 8010c62:	687b      	ldr	r3, [r7, #4]
 8010c64:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8010c68:	429a      	cmp	r2, r3
 8010c6a:	d309      	bcc.n	8010c80 <tcp_receive+0x2fc>
 8010c6c:	687b      	ldr	r3, [r7, #4]
 8010c6e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8010c72:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8010c74:	4413      	add	r3, r2
 8010c76:	b29a      	uxth	r2, r3
 8010c78:	687b      	ldr	r3, [r7, #4]
 8010c7a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8010c7e:	e004      	b.n	8010c8a <tcp_receive+0x306>
 8010c80:	687b      	ldr	r3, [r7, #4]
 8010c82:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010c86:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8010c8a:	687b      	ldr	r3, [r7, #4]
 8010c8c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8010c90:	687b      	ldr	r3, [r7, #4]
 8010c92:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8010c96:	429a      	cmp	r2, r3
 8010c98:	d326      	bcc.n	8010ce8 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8010c9a:	687b      	ldr	r3, [r7, #4]
 8010c9c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8010ca0:	687b      	ldr	r3, [r7, #4]
 8010ca2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8010ca6:	1ad3      	subs	r3, r2, r3
 8010ca8:	b29a      	uxth	r2, r3
 8010caa:	687b      	ldr	r3, [r7, #4]
 8010cac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8010cb0:	687b      	ldr	r3, [r7, #4]
 8010cb2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8010cb6:	687b      	ldr	r3, [r7, #4]
 8010cb8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010cba:	4413      	add	r3, r2
 8010cbc:	b29a      	uxth	r2, r3
 8010cbe:	687b      	ldr	r3, [r7, #4]
 8010cc0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8010cc4:	429a      	cmp	r2, r3
 8010cc6:	d30a      	bcc.n	8010cde <tcp_receive+0x35a>
 8010cc8:	687b      	ldr	r3, [r7, #4]
 8010cca:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8010cce:	687b      	ldr	r3, [r7, #4]
 8010cd0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010cd2:	4413      	add	r3, r2
 8010cd4:	b29a      	uxth	r2, r3
 8010cd6:	687b      	ldr	r3, [r7, #4]
 8010cd8:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8010cdc:	e004      	b.n	8010ce8 <tcp_receive+0x364>
 8010cde:	687b      	ldr	r3, [r7, #4]
 8010ce0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010ce4:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8010ce8:	687b      	ldr	r3, [r7, #4]
 8010cea:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8010cec:	687b      	ldr	r3, [r7, #4]
 8010cee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010cf0:	4a98      	ldr	r2, [pc, #608]	@ (8010f54 <tcp_receive+0x5d0>)
 8010cf2:	6878      	ldr	r0, [r7, #4]
 8010cf4:	f7ff fdca 	bl	801088c <tcp_free_acked_segments>
 8010cf8:	4602      	mov	r2, r0
 8010cfa:	687b      	ldr	r3, [r7, #4]
 8010cfc:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8010cfe:	687b      	ldr	r3, [r7, #4]
 8010d00:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 8010d02:	687b      	ldr	r3, [r7, #4]
 8010d04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010d06:	4a94      	ldr	r2, [pc, #592]	@ (8010f58 <tcp_receive+0x5d4>)
 8010d08:	6878      	ldr	r0, [r7, #4]
 8010d0a:	f7ff fdbf 	bl	801088c <tcp_free_acked_segments>
 8010d0e:	4602      	mov	r2, r0
 8010d10:	687b      	ldr	r3, [r7, #4]
 8010d12:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8010d14:	687b      	ldr	r3, [r7, #4]
 8010d16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010d18:	2b00      	cmp	r3, #0
 8010d1a:	d104      	bne.n	8010d26 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8010d1c:	687b      	ldr	r3, [r7, #4]
 8010d1e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010d22:	861a      	strh	r2, [r3, #48]	@ 0x30
 8010d24:	e002      	b.n	8010d2c <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8010d26:	687b      	ldr	r3, [r7, #4]
 8010d28:	2200      	movs	r2, #0
 8010d2a:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 8010d2c:	687b      	ldr	r3, [r7, #4]
 8010d2e:	2200      	movs	r2, #0
 8010d30:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8010d32:	687b      	ldr	r3, [r7, #4]
 8010d34:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010d36:	2b00      	cmp	r3, #0
 8010d38:	d103      	bne.n	8010d42 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 8010d3a:	687b      	ldr	r3, [r7, #4]
 8010d3c:	2200      	movs	r2, #0
 8010d3e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8010d42:	687b      	ldr	r3, [r7, #4]
 8010d44:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 8010d48:	4b84      	ldr	r3, [pc, #528]	@ (8010f5c <tcp_receive+0x5d8>)
 8010d4a:	881b      	ldrh	r3, [r3, #0]
 8010d4c:	4413      	add	r3, r2
 8010d4e:	b29a      	uxth	r2, r3
 8010d50:	687b      	ldr	r3, [r7, #4]
 8010d52:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8010d56:	687b      	ldr	r3, [r7, #4]
 8010d58:	8b5b      	ldrh	r3, [r3, #26]
 8010d5a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8010d5e:	2b00      	cmp	r3, #0
 8010d60:	d035      	beq.n	8010dce <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8010d62:	687b      	ldr	r3, [r7, #4]
 8010d64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010d66:	2b00      	cmp	r3, #0
 8010d68:	d118      	bne.n	8010d9c <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8010d6a:	687b      	ldr	r3, [r7, #4]
 8010d6c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010d6e:	2b00      	cmp	r3, #0
 8010d70:	d00c      	beq.n	8010d8c <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8010d72:	687b      	ldr	r3, [r7, #4]
 8010d74:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8010d76:	687b      	ldr	r3, [r7, #4]
 8010d78:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010d7a:	68db      	ldr	r3, [r3, #12]
 8010d7c:	685b      	ldr	r3, [r3, #4]
 8010d7e:	4618      	mov	r0, r3
 8010d80:	f7fa fe35 	bl	800b9ee <lwip_htonl>
 8010d84:	4603      	mov	r3, r0
 8010d86:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8010d88:	2b00      	cmp	r3, #0
 8010d8a:	dc20      	bgt.n	8010dce <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8010d8c:	687b      	ldr	r3, [r7, #4]
 8010d8e:	8b5b      	ldrh	r3, [r3, #26]
 8010d90:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8010d94:	b29a      	uxth	r2, r3
 8010d96:	687b      	ldr	r3, [r7, #4]
 8010d98:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010d9a:	e018      	b.n	8010dce <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8010d9c:	687b      	ldr	r3, [r7, #4]
 8010d9e:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8010da0:	687b      	ldr	r3, [r7, #4]
 8010da2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010da4:	68db      	ldr	r3, [r3, #12]
 8010da6:	685b      	ldr	r3, [r3, #4]
 8010da8:	4618      	mov	r0, r3
 8010daa:	f7fa fe20 	bl	800b9ee <lwip_htonl>
 8010dae:	4603      	mov	r3, r0
 8010db0:	1ae3      	subs	r3, r4, r3
 8010db2:	2b00      	cmp	r3, #0
 8010db4:	dc0b      	bgt.n	8010dce <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8010db6:	687b      	ldr	r3, [r7, #4]
 8010db8:	8b5b      	ldrh	r3, [r3, #26]
 8010dba:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8010dbe:	b29a      	uxth	r2, r3
 8010dc0:	687b      	ldr	r3, [r7, #4]
 8010dc2:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010dc4:	e003      	b.n	8010dce <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8010dc6:	6878      	ldr	r0, [r7, #4]
 8010dc8:	f002 fbc8 	bl	801355c <tcp_send_empty_ack>
 8010dcc:	e000      	b.n	8010dd0 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010dce:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8010dd0:	687b      	ldr	r3, [r7, #4]
 8010dd2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010dd4:	2b00      	cmp	r3, #0
 8010dd6:	d05b      	beq.n	8010e90 <tcp_receive+0x50c>
 8010dd8:	687b      	ldr	r3, [r7, #4]
 8010dda:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010ddc:	4b60      	ldr	r3, [pc, #384]	@ (8010f60 <tcp_receive+0x5dc>)
 8010dde:	681b      	ldr	r3, [r3, #0]
 8010de0:	1ad3      	subs	r3, r2, r3
 8010de2:	2b00      	cmp	r3, #0
 8010de4:	da54      	bge.n	8010e90 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8010de6:	4b5f      	ldr	r3, [pc, #380]	@ (8010f64 <tcp_receive+0x5e0>)
 8010de8:	681b      	ldr	r3, [r3, #0]
 8010dea:	b29a      	uxth	r2, r3
 8010dec:	687b      	ldr	r3, [r7, #4]
 8010dee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010df0:	b29b      	uxth	r3, r3
 8010df2:	1ad3      	subs	r3, r2, r3
 8010df4:	b29b      	uxth	r3, r3
 8010df6:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8010dfa:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8010dfe:	687b      	ldr	r3, [r7, #4]
 8010e00:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8010e04:	10db      	asrs	r3, r3, #3
 8010e06:	b21b      	sxth	r3, r3
 8010e08:	b29b      	uxth	r3, r3
 8010e0a:	1ad3      	subs	r3, r2, r3
 8010e0c:	b29b      	uxth	r3, r3
 8010e0e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8010e12:	687b      	ldr	r3, [r7, #4]
 8010e14:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8010e18:	b29a      	uxth	r2, r3
 8010e1a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8010e1e:	4413      	add	r3, r2
 8010e20:	b29b      	uxth	r3, r3
 8010e22:	b21a      	sxth	r2, r3
 8010e24:	687b      	ldr	r3, [r7, #4]
 8010e26:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 8010e28:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 8010e2c:	2b00      	cmp	r3, #0
 8010e2e:	da05      	bge.n	8010e3c <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8010e30:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8010e34:	425b      	negs	r3, r3
 8010e36:	b29b      	uxth	r3, r3
 8010e38:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8010e3c:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8010e40:	687b      	ldr	r3, [r7, #4]
 8010e42:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8010e46:	109b      	asrs	r3, r3, #2
 8010e48:	b21b      	sxth	r3, r3
 8010e4a:	b29b      	uxth	r3, r3
 8010e4c:	1ad3      	subs	r3, r2, r3
 8010e4e:	b29b      	uxth	r3, r3
 8010e50:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8010e54:	687b      	ldr	r3, [r7, #4]
 8010e56:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8010e5a:	b29a      	uxth	r2, r3
 8010e5c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8010e60:	4413      	add	r3, r2
 8010e62:	b29b      	uxth	r3, r3
 8010e64:	b21a      	sxth	r2, r3
 8010e66:	687b      	ldr	r3, [r7, #4]
 8010e68:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8010e6a:	687b      	ldr	r3, [r7, #4]
 8010e6c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8010e70:	10db      	asrs	r3, r3, #3
 8010e72:	b21b      	sxth	r3, r3
 8010e74:	b29a      	uxth	r2, r3
 8010e76:	687b      	ldr	r3, [r7, #4]
 8010e78:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8010e7c:	b29b      	uxth	r3, r3
 8010e7e:	4413      	add	r3, r2
 8010e80:	b29b      	uxth	r3, r3
 8010e82:	b21a      	sxth	r2, r3
 8010e84:	687b      	ldr	r3, [r7, #4]
 8010e86:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8010e8a:	687b      	ldr	r3, [r7, #4]
 8010e8c:	2200      	movs	r2, #0
 8010e8e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8010e90:	4b35      	ldr	r3, [pc, #212]	@ (8010f68 <tcp_receive+0x5e4>)
 8010e92:	881b      	ldrh	r3, [r3, #0]
 8010e94:	2b00      	cmp	r3, #0
 8010e96:	f000 84df 	beq.w	8011858 <tcp_receive+0xed4>
 8010e9a:	687b      	ldr	r3, [r7, #4]
 8010e9c:	7d1b      	ldrb	r3, [r3, #20]
 8010e9e:	2b06      	cmp	r3, #6
 8010ea0:	f200 84da 	bhi.w	8011858 <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8010ea4:	687b      	ldr	r3, [r7, #4]
 8010ea6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010ea8:	4b30      	ldr	r3, [pc, #192]	@ (8010f6c <tcp_receive+0x5e8>)
 8010eaa:	681b      	ldr	r3, [r3, #0]
 8010eac:	1ad3      	subs	r3, r2, r3
 8010eae:	3b01      	subs	r3, #1
 8010eb0:	2b00      	cmp	r3, #0
 8010eb2:	f2c0 808f 	blt.w	8010fd4 <tcp_receive+0x650>
 8010eb6:	687b      	ldr	r3, [r7, #4]
 8010eb8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010eba:	4b2b      	ldr	r3, [pc, #172]	@ (8010f68 <tcp_receive+0x5e4>)
 8010ebc:	881b      	ldrh	r3, [r3, #0]
 8010ebe:	4619      	mov	r1, r3
 8010ec0:	4b2a      	ldr	r3, [pc, #168]	@ (8010f6c <tcp_receive+0x5e8>)
 8010ec2:	681b      	ldr	r3, [r3, #0]
 8010ec4:	440b      	add	r3, r1
 8010ec6:	1ad3      	subs	r3, r2, r3
 8010ec8:	3301      	adds	r3, #1
 8010eca:	2b00      	cmp	r3, #0
 8010ecc:	f300 8082 	bgt.w	8010fd4 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8010ed0:	4b27      	ldr	r3, [pc, #156]	@ (8010f70 <tcp_receive+0x5ec>)
 8010ed2:	685b      	ldr	r3, [r3, #4]
 8010ed4:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8010ed6:	687b      	ldr	r3, [r7, #4]
 8010ed8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010eda:	4b24      	ldr	r3, [pc, #144]	@ (8010f6c <tcp_receive+0x5e8>)
 8010edc:	681b      	ldr	r3, [r3, #0]
 8010ede:	1ad3      	subs	r3, r2, r3
 8010ee0:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8010ee2:	4b23      	ldr	r3, [pc, #140]	@ (8010f70 <tcp_receive+0x5ec>)
 8010ee4:	685b      	ldr	r3, [r3, #4]
 8010ee6:	2b00      	cmp	r3, #0
 8010ee8:	d106      	bne.n	8010ef8 <tcp_receive+0x574>
 8010eea:	4b22      	ldr	r3, [pc, #136]	@ (8010f74 <tcp_receive+0x5f0>)
 8010eec:	f240 5294 	movw	r2, #1428	@ 0x594
 8010ef0:	4921      	ldr	r1, [pc, #132]	@ (8010f78 <tcp_receive+0x5f4>)
 8010ef2:	4822      	ldr	r0, [pc, #136]	@ (8010f7c <tcp_receive+0x5f8>)
 8010ef4:	f005 fe98 	bl	8016c28 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8010ef8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010efa:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8010efe:	4293      	cmp	r3, r2
 8010f00:	d906      	bls.n	8010f10 <tcp_receive+0x58c>
 8010f02:	4b1c      	ldr	r3, [pc, #112]	@ (8010f74 <tcp_receive+0x5f0>)
 8010f04:	f240 5295 	movw	r2, #1429	@ 0x595
 8010f08:	491d      	ldr	r1, [pc, #116]	@ (8010f80 <tcp_receive+0x5fc>)
 8010f0a:	481c      	ldr	r0, [pc, #112]	@ (8010f7c <tcp_receive+0x5f8>)
 8010f0c:	f005 fe8c 	bl	8016c28 <iprintf>
      off = (u16_t)off32;
 8010f10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010f12:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8010f16:	4b16      	ldr	r3, [pc, #88]	@ (8010f70 <tcp_receive+0x5ec>)
 8010f18:	685b      	ldr	r3, [r3, #4]
 8010f1a:	891b      	ldrh	r3, [r3, #8]
 8010f1c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8010f20:	429a      	cmp	r2, r3
 8010f22:	d906      	bls.n	8010f32 <tcp_receive+0x5ae>
 8010f24:	4b13      	ldr	r3, [pc, #76]	@ (8010f74 <tcp_receive+0x5f0>)
 8010f26:	f240 5297 	movw	r2, #1431	@ 0x597
 8010f2a:	4916      	ldr	r1, [pc, #88]	@ (8010f84 <tcp_receive+0x600>)
 8010f2c:	4813      	ldr	r0, [pc, #76]	@ (8010f7c <tcp_receive+0x5f8>)
 8010f2e:	f005 fe7b 	bl	8016c28 <iprintf>
      inseg.len -= off;
 8010f32:	4b0f      	ldr	r3, [pc, #60]	@ (8010f70 <tcp_receive+0x5ec>)
 8010f34:	891a      	ldrh	r2, [r3, #8]
 8010f36:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8010f3a:	1ad3      	subs	r3, r2, r3
 8010f3c:	b29a      	uxth	r2, r3
 8010f3e:	4b0c      	ldr	r3, [pc, #48]	@ (8010f70 <tcp_receive+0x5ec>)
 8010f40:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8010f42:	4b0b      	ldr	r3, [pc, #44]	@ (8010f70 <tcp_receive+0x5ec>)
 8010f44:	685b      	ldr	r3, [r3, #4]
 8010f46:	891a      	ldrh	r2, [r3, #8]
 8010f48:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8010f4c:	1ad3      	subs	r3, r2, r3
 8010f4e:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 8010f50:	e02a      	b.n	8010fa8 <tcp_receive+0x624>
 8010f52:	bf00      	nop
 8010f54:	08019df4 	.word	0x08019df4
 8010f58:	08019dfc 	.word	0x08019dfc
 8010f5c:	2000f428 	.word	0x2000f428
 8010f60:	2000f424 	.word	0x2000f424
 8010f64:	2000f3e8 	.word	0x2000f3e8
 8010f68:	2000f42a 	.word	0x2000f42a
 8010f6c:	2000f420 	.word	0x2000f420
 8010f70:	2000f400 	.word	0x2000f400
 8010f74:	08019a8c 	.word	0x08019a8c
 8010f78:	08019e04 	.word	0x08019e04
 8010f7c:	08019ad8 	.word	0x08019ad8
 8010f80:	08019e14 	.word	0x08019e14
 8010f84:	08019e24 	.word	0x08019e24
        off -= p->len;
 8010f88:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010f8a:	895b      	ldrh	r3, [r3, #10]
 8010f8c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8010f90:	1ad3      	subs	r3, r2, r3
 8010f92:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8010f96:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010f98:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8010f9a:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8010f9c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010f9e:	2200      	movs	r2, #0
 8010fa0:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8010fa2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010fa4:	681b      	ldr	r3, [r3, #0]
 8010fa6:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 8010fa8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010faa:	895b      	ldrh	r3, [r3, #10]
 8010fac:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8010fb0:	429a      	cmp	r2, r3
 8010fb2:	d8e9      	bhi.n	8010f88 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8010fb4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8010fb8:	4619      	mov	r1, r3
 8010fba:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8010fbc:	f7fc f86e 	bl	800d09c <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8010fc0:	687b      	ldr	r3, [r7, #4]
 8010fc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010fc4:	4a90      	ldr	r2, [pc, #576]	@ (8011208 <tcp_receive+0x884>)
 8010fc6:	6013      	str	r3, [r2, #0]
 8010fc8:	4b90      	ldr	r3, [pc, #576]	@ (801120c <tcp_receive+0x888>)
 8010fca:	68db      	ldr	r3, [r3, #12]
 8010fcc:	4a8e      	ldr	r2, [pc, #568]	@ (8011208 <tcp_receive+0x884>)
 8010fce:	6812      	ldr	r2, [r2, #0]
 8010fd0:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8010fd2:	e00d      	b.n	8010ff0 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8010fd4:	4b8c      	ldr	r3, [pc, #560]	@ (8011208 <tcp_receive+0x884>)
 8010fd6:	681a      	ldr	r2, [r3, #0]
 8010fd8:	687b      	ldr	r3, [r7, #4]
 8010fda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010fdc:	1ad3      	subs	r3, r2, r3
 8010fde:	2b00      	cmp	r3, #0
 8010fe0:	da06      	bge.n	8010ff0 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8010fe2:	687b      	ldr	r3, [r7, #4]
 8010fe4:	8b5b      	ldrh	r3, [r3, #26]
 8010fe6:	f043 0302 	orr.w	r3, r3, #2
 8010fea:	b29a      	uxth	r2, r3
 8010fec:	687b      	ldr	r3, [r7, #4]
 8010fee:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8010ff0:	4b85      	ldr	r3, [pc, #532]	@ (8011208 <tcp_receive+0x884>)
 8010ff2:	681a      	ldr	r2, [r3, #0]
 8010ff4:	687b      	ldr	r3, [r7, #4]
 8010ff6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010ff8:	1ad3      	subs	r3, r2, r3
 8010ffa:	2b00      	cmp	r3, #0
 8010ffc:	f2c0 8427 	blt.w	801184e <tcp_receive+0xeca>
 8011000:	4b81      	ldr	r3, [pc, #516]	@ (8011208 <tcp_receive+0x884>)
 8011002:	681a      	ldr	r2, [r3, #0]
 8011004:	687b      	ldr	r3, [r7, #4]
 8011006:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011008:	6879      	ldr	r1, [r7, #4]
 801100a:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801100c:	440b      	add	r3, r1
 801100e:	1ad3      	subs	r3, r2, r3
 8011010:	3301      	adds	r3, #1
 8011012:	2b00      	cmp	r3, #0
 8011014:	f300 841b 	bgt.w	801184e <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8011018:	687b      	ldr	r3, [r7, #4]
 801101a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801101c:	4b7a      	ldr	r3, [pc, #488]	@ (8011208 <tcp_receive+0x884>)
 801101e:	681b      	ldr	r3, [r3, #0]
 8011020:	429a      	cmp	r2, r3
 8011022:	f040 8298 	bne.w	8011556 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8011026:	4b79      	ldr	r3, [pc, #484]	@ (801120c <tcp_receive+0x888>)
 8011028:	891c      	ldrh	r4, [r3, #8]
 801102a:	4b78      	ldr	r3, [pc, #480]	@ (801120c <tcp_receive+0x888>)
 801102c:	68db      	ldr	r3, [r3, #12]
 801102e:	899b      	ldrh	r3, [r3, #12]
 8011030:	b29b      	uxth	r3, r3
 8011032:	4618      	mov	r0, r3
 8011034:	f7fa fcc6 	bl	800b9c4 <lwip_htons>
 8011038:	4603      	mov	r3, r0
 801103a:	b2db      	uxtb	r3, r3
 801103c:	f003 0303 	and.w	r3, r3, #3
 8011040:	2b00      	cmp	r3, #0
 8011042:	d001      	beq.n	8011048 <tcp_receive+0x6c4>
 8011044:	2301      	movs	r3, #1
 8011046:	e000      	b.n	801104a <tcp_receive+0x6c6>
 8011048:	2300      	movs	r3, #0
 801104a:	4423      	add	r3, r4
 801104c:	b29a      	uxth	r2, r3
 801104e:	4b70      	ldr	r3, [pc, #448]	@ (8011210 <tcp_receive+0x88c>)
 8011050:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8011052:	687b      	ldr	r3, [r7, #4]
 8011054:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8011056:	4b6e      	ldr	r3, [pc, #440]	@ (8011210 <tcp_receive+0x88c>)
 8011058:	881b      	ldrh	r3, [r3, #0]
 801105a:	429a      	cmp	r2, r3
 801105c:	d274      	bcs.n	8011148 <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801105e:	4b6b      	ldr	r3, [pc, #428]	@ (801120c <tcp_receive+0x888>)
 8011060:	68db      	ldr	r3, [r3, #12]
 8011062:	899b      	ldrh	r3, [r3, #12]
 8011064:	b29b      	uxth	r3, r3
 8011066:	4618      	mov	r0, r3
 8011068:	f7fa fcac 	bl	800b9c4 <lwip_htons>
 801106c:	4603      	mov	r3, r0
 801106e:	b2db      	uxtb	r3, r3
 8011070:	f003 0301 	and.w	r3, r3, #1
 8011074:	2b00      	cmp	r3, #0
 8011076:	d01e      	beq.n	80110b6 <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8011078:	4b64      	ldr	r3, [pc, #400]	@ (801120c <tcp_receive+0x888>)
 801107a:	68db      	ldr	r3, [r3, #12]
 801107c:	899b      	ldrh	r3, [r3, #12]
 801107e:	b29b      	uxth	r3, r3
 8011080:	b21b      	sxth	r3, r3
 8011082:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8011086:	b21c      	sxth	r4, r3
 8011088:	4b60      	ldr	r3, [pc, #384]	@ (801120c <tcp_receive+0x888>)
 801108a:	68db      	ldr	r3, [r3, #12]
 801108c:	899b      	ldrh	r3, [r3, #12]
 801108e:	b29b      	uxth	r3, r3
 8011090:	4618      	mov	r0, r3
 8011092:	f7fa fc97 	bl	800b9c4 <lwip_htons>
 8011096:	4603      	mov	r3, r0
 8011098:	b2db      	uxtb	r3, r3
 801109a:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 801109e:	b29b      	uxth	r3, r3
 80110a0:	4618      	mov	r0, r3
 80110a2:	f7fa fc8f 	bl	800b9c4 <lwip_htons>
 80110a6:	4603      	mov	r3, r0
 80110a8:	b21b      	sxth	r3, r3
 80110aa:	4323      	orrs	r3, r4
 80110ac:	b21a      	sxth	r2, r3
 80110ae:	4b57      	ldr	r3, [pc, #348]	@ (801120c <tcp_receive+0x888>)
 80110b0:	68db      	ldr	r3, [r3, #12]
 80110b2:	b292      	uxth	r2, r2
 80110b4:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 80110b6:	687b      	ldr	r3, [r7, #4]
 80110b8:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80110ba:	4b54      	ldr	r3, [pc, #336]	@ (801120c <tcp_receive+0x888>)
 80110bc:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80110be:	4b53      	ldr	r3, [pc, #332]	@ (801120c <tcp_receive+0x888>)
 80110c0:	68db      	ldr	r3, [r3, #12]
 80110c2:	899b      	ldrh	r3, [r3, #12]
 80110c4:	b29b      	uxth	r3, r3
 80110c6:	4618      	mov	r0, r3
 80110c8:	f7fa fc7c 	bl	800b9c4 <lwip_htons>
 80110cc:	4603      	mov	r3, r0
 80110ce:	b2db      	uxtb	r3, r3
 80110d0:	f003 0302 	and.w	r3, r3, #2
 80110d4:	2b00      	cmp	r3, #0
 80110d6:	d005      	beq.n	80110e4 <tcp_receive+0x760>
            inseg.len -= 1;
 80110d8:	4b4c      	ldr	r3, [pc, #304]	@ (801120c <tcp_receive+0x888>)
 80110da:	891b      	ldrh	r3, [r3, #8]
 80110dc:	3b01      	subs	r3, #1
 80110de:	b29a      	uxth	r2, r3
 80110e0:	4b4a      	ldr	r3, [pc, #296]	@ (801120c <tcp_receive+0x888>)
 80110e2:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 80110e4:	4b49      	ldr	r3, [pc, #292]	@ (801120c <tcp_receive+0x888>)
 80110e6:	685b      	ldr	r3, [r3, #4]
 80110e8:	4a48      	ldr	r2, [pc, #288]	@ (801120c <tcp_receive+0x888>)
 80110ea:	8912      	ldrh	r2, [r2, #8]
 80110ec:	4611      	mov	r1, r2
 80110ee:	4618      	mov	r0, r3
 80110f0:	f7fb fed4 	bl	800ce9c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 80110f4:	4b45      	ldr	r3, [pc, #276]	@ (801120c <tcp_receive+0x888>)
 80110f6:	891c      	ldrh	r4, [r3, #8]
 80110f8:	4b44      	ldr	r3, [pc, #272]	@ (801120c <tcp_receive+0x888>)
 80110fa:	68db      	ldr	r3, [r3, #12]
 80110fc:	899b      	ldrh	r3, [r3, #12]
 80110fe:	b29b      	uxth	r3, r3
 8011100:	4618      	mov	r0, r3
 8011102:	f7fa fc5f 	bl	800b9c4 <lwip_htons>
 8011106:	4603      	mov	r3, r0
 8011108:	b2db      	uxtb	r3, r3
 801110a:	f003 0303 	and.w	r3, r3, #3
 801110e:	2b00      	cmp	r3, #0
 8011110:	d001      	beq.n	8011116 <tcp_receive+0x792>
 8011112:	2301      	movs	r3, #1
 8011114:	e000      	b.n	8011118 <tcp_receive+0x794>
 8011116:	2300      	movs	r3, #0
 8011118:	4423      	add	r3, r4
 801111a:	b29a      	uxth	r2, r3
 801111c:	4b3c      	ldr	r3, [pc, #240]	@ (8011210 <tcp_receive+0x88c>)
 801111e:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8011120:	4b3b      	ldr	r3, [pc, #236]	@ (8011210 <tcp_receive+0x88c>)
 8011122:	881b      	ldrh	r3, [r3, #0]
 8011124:	461a      	mov	r2, r3
 8011126:	4b38      	ldr	r3, [pc, #224]	@ (8011208 <tcp_receive+0x884>)
 8011128:	681b      	ldr	r3, [r3, #0]
 801112a:	441a      	add	r2, r3
 801112c:	687b      	ldr	r3, [r7, #4]
 801112e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011130:	6879      	ldr	r1, [r7, #4]
 8011132:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8011134:	440b      	add	r3, r1
 8011136:	429a      	cmp	r2, r3
 8011138:	d006      	beq.n	8011148 <tcp_receive+0x7c4>
 801113a:	4b36      	ldr	r3, [pc, #216]	@ (8011214 <tcp_receive+0x890>)
 801113c:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 8011140:	4935      	ldr	r1, [pc, #212]	@ (8011218 <tcp_receive+0x894>)
 8011142:	4836      	ldr	r0, [pc, #216]	@ (801121c <tcp_receive+0x898>)
 8011144:	f005 fd70 	bl	8016c28 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8011148:	687b      	ldr	r3, [r7, #4]
 801114a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801114c:	2b00      	cmp	r3, #0
 801114e:	f000 80e6 	beq.w	801131e <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8011152:	4b2e      	ldr	r3, [pc, #184]	@ (801120c <tcp_receive+0x888>)
 8011154:	68db      	ldr	r3, [r3, #12]
 8011156:	899b      	ldrh	r3, [r3, #12]
 8011158:	b29b      	uxth	r3, r3
 801115a:	4618      	mov	r0, r3
 801115c:	f7fa fc32 	bl	800b9c4 <lwip_htons>
 8011160:	4603      	mov	r3, r0
 8011162:	b2db      	uxtb	r3, r3
 8011164:	f003 0301 	and.w	r3, r3, #1
 8011168:	2b00      	cmp	r3, #0
 801116a:	d010      	beq.n	801118e <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 801116c:	e00a      	b.n	8011184 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 801116e:	687b      	ldr	r3, [r7, #4]
 8011170:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011172:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8011174:	687b      	ldr	r3, [r7, #4]
 8011176:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011178:	681a      	ldr	r2, [r3, #0]
 801117a:	687b      	ldr	r3, [r7, #4]
 801117c:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 801117e:	68f8      	ldr	r0, [r7, #12]
 8011180:	f7fd fcbd 	bl	800eafe <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011188:	2b00      	cmp	r3, #0
 801118a:	d1f0      	bne.n	801116e <tcp_receive+0x7ea>
 801118c:	e0c7      	b.n	801131e <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 801118e:	687b      	ldr	r3, [r7, #4]
 8011190:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011192:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8011194:	e051      	b.n	801123a <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8011196:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011198:	68db      	ldr	r3, [r3, #12]
 801119a:	899b      	ldrh	r3, [r3, #12]
 801119c:	b29b      	uxth	r3, r3
 801119e:	4618      	mov	r0, r3
 80111a0:	f7fa fc10 	bl	800b9c4 <lwip_htons>
 80111a4:	4603      	mov	r3, r0
 80111a6:	b2db      	uxtb	r3, r3
 80111a8:	f003 0301 	and.w	r3, r3, #1
 80111ac:	2b00      	cmp	r3, #0
 80111ae:	d03c      	beq.n	801122a <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 80111b0:	4b16      	ldr	r3, [pc, #88]	@ (801120c <tcp_receive+0x888>)
 80111b2:	68db      	ldr	r3, [r3, #12]
 80111b4:	899b      	ldrh	r3, [r3, #12]
 80111b6:	b29b      	uxth	r3, r3
 80111b8:	4618      	mov	r0, r3
 80111ba:	f7fa fc03 	bl	800b9c4 <lwip_htons>
 80111be:	4603      	mov	r3, r0
 80111c0:	b2db      	uxtb	r3, r3
 80111c2:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80111c6:	2b00      	cmp	r3, #0
 80111c8:	d12f      	bne.n	801122a <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 80111ca:	4b10      	ldr	r3, [pc, #64]	@ (801120c <tcp_receive+0x888>)
 80111cc:	68db      	ldr	r3, [r3, #12]
 80111ce:	899b      	ldrh	r3, [r3, #12]
 80111d0:	b29c      	uxth	r4, r3
 80111d2:	2001      	movs	r0, #1
 80111d4:	f7fa fbf6 	bl	800b9c4 <lwip_htons>
 80111d8:	4603      	mov	r3, r0
 80111da:	461a      	mov	r2, r3
 80111dc:	4b0b      	ldr	r3, [pc, #44]	@ (801120c <tcp_receive+0x888>)
 80111de:	68db      	ldr	r3, [r3, #12]
 80111e0:	4322      	orrs	r2, r4
 80111e2:	b292      	uxth	r2, r2
 80111e4:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 80111e6:	4b09      	ldr	r3, [pc, #36]	@ (801120c <tcp_receive+0x888>)
 80111e8:	891c      	ldrh	r4, [r3, #8]
 80111ea:	4b08      	ldr	r3, [pc, #32]	@ (801120c <tcp_receive+0x888>)
 80111ec:	68db      	ldr	r3, [r3, #12]
 80111ee:	899b      	ldrh	r3, [r3, #12]
 80111f0:	b29b      	uxth	r3, r3
 80111f2:	4618      	mov	r0, r3
 80111f4:	f7fa fbe6 	bl	800b9c4 <lwip_htons>
 80111f8:	4603      	mov	r3, r0
 80111fa:	b2db      	uxtb	r3, r3
 80111fc:	f003 0303 	and.w	r3, r3, #3
 8011200:	2b00      	cmp	r3, #0
 8011202:	d00d      	beq.n	8011220 <tcp_receive+0x89c>
 8011204:	2301      	movs	r3, #1
 8011206:	e00c      	b.n	8011222 <tcp_receive+0x89e>
 8011208:	2000f420 	.word	0x2000f420
 801120c:	2000f400 	.word	0x2000f400
 8011210:	2000f42a 	.word	0x2000f42a
 8011214:	08019a8c 	.word	0x08019a8c
 8011218:	08019e34 	.word	0x08019e34
 801121c:	08019ad8 	.word	0x08019ad8
 8011220:	2300      	movs	r3, #0
 8011222:	4423      	add	r3, r4
 8011224:	b29a      	uxth	r2, r3
 8011226:	4b98      	ldr	r3, [pc, #608]	@ (8011488 <tcp_receive+0xb04>)
 8011228:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 801122a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801122c:	613b      	str	r3, [r7, #16]
              next = next->next;
 801122e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011230:	681b      	ldr	r3, [r3, #0]
 8011232:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 8011234:	6938      	ldr	r0, [r7, #16]
 8011236:	f7fd fc62 	bl	800eafe <tcp_seg_free>
            while (next &&
 801123a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801123c:	2b00      	cmp	r3, #0
 801123e:	d00e      	beq.n	801125e <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8011240:	4b91      	ldr	r3, [pc, #580]	@ (8011488 <tcp_receive+0xb04>)
 8011242:	881b      	ldrh	r3, [r3, #0]
 8011244:	461a      	mov	r2, r3
 8011246:	4b91      	ldr	r3, [pc, #580]	@ (801148c <tcp_receive+0xb08>)
 8011248:	681b      	ldr	r3, [r3, #0]
 801124a:	441a      	add	r2, r3
 801124c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801124e:	68db      	ldr	r3, [r3, #12]
 8011250:	685b      	ldr	r3, [r3, #4]
 8011252:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8011254:	8909      	ldrh	r1, [r1, #8]
 8011256:	440b      	add	r3, r1
 8011258:	1ad3      	subs	r3, r2, r3
            while (next &&
 801125a:	2b00      	cmp	r3, #0
 801125c:	da9b      	bge.n	8011196 <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 801125e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011260:	2b00      	cmp	r3, #0
 8011262:	d059      	beq.n	8011318 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8011264:	4b88      	ldr	r3, [pc, #544]	@ (8011488 <tcp_receive+0xb04>)
 8011266:	881b      	ldrh	r3, [r3, #0]
 8011268:	461a      	mov	r2, r3
 801126a:	4b88      	ldr	r3, [pc, #544]	@ (801148c <tcp_receive+0xb08>)
 801126c:	681b      	ldr	r3, [r3, #0]
 801126e:	441a      	add	r2, r3
 8011270:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011272:	68db      	ldr	r3, [r3, #12]
 8011274:	685b      	ldr	r3, [r3, #4]
 8011276:	1ad3      	subs	r3, r2, r3
            if (next &&
 8011278:	2b00      	cmp	r3, #0
 801127a:	dd4d      	ble.n	8011318 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 801127c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801127e:	68db      	ldr	r3, [r3, #12]
 8011280:	685b      	ldr	r3, [r3, #4]
 8011282:	b29a      	uxth	r2, r3
 8011284:	4b81      	ldr	r3, [pc, #516]	@ (801148c <tcp_receive+0xb08>)
 8011286:	681b      	ldr	r3, [r3, #0]
 8011288:	b29b      	uxth	r3, r3
 801128a:	1ad3      	subs	r3, r2, r3
 801128c:	b29a      	uxth	r2, r3
 801128e:	4b80      	ldr	r3, [pc, #512]	@ (8011490 <tcp_receive+0xb0c>)
 8011290:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8011292:	4b7f      	ldr	r3, [pc, #508]	@ (8011490 <tcp_receive+0xb0c>)
 8011294:	68db      	ldr	r3, [r3, #12]
 8011296:	899b      	ldrh	r3, [r3, #12]
 8011298:	b29b      	uxth	r3, r3
 801129a:	4618      	mov	r0, r3
 801129c:	f7fa fb92 	bl	800b9c4 <lwip_htons>
 80112a0:	4603      	mov	r3, r0
 80112a2:	b2db      	uxtb	r3, r3
 80112a4:	f003 0302 	and.w	r3, r3, #2
 80112a8:	2b00      	cmp	r3, #0
 80112aa:	d005      	beq.n	80112b8 <tcp_receive+0x934>
                inseg.len -= 1;
 80112ac:	4b78      	ldr	r3, [pc, #480]	@ (8011490 <tcp_receive+0xb0c>)
 80112ae:	891b      	ldrh	r3, [r3, #8]
 80112b0:	3b01      	subs	r3, #1
 80112b2:	b29a      	uxth	r2, r3
 80112b4:	4b76      	ldr	r3, [pc, #472]	@ (8011490 <tcp_receive+0xb0c>)
 80112b6:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 80112b8:	4b75      	ldr	r3, [pc, #468]	@ (8011490 <tcp_receive+0xb0c>)
 80112ba:	685b      	ldr	r3, [r3, #4]
 80112bc:	4a74      	ldr	r2, [pc, #464]	@ (8011490 <tcp_receive+0xb0c>)
 80112be:	8912      	ldrh	r2, [r2, #8]
 80112c0:	4611      	mov	r1, r2
 80112c2:	4618      	mov	r0, r3
 80112c4:	f7fb fdea 	bl	800ce9c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 80112c8:	4b71      	ldr	r3, [pc, #452]	@ (8011490 <tcp_receive+0xb0c>)
 80112ca:	891c      	ldrh	r4, [r3, #8]
 80112cc:	4b70      	ldr	r3, [pc, #448]	@ (8011490 <tcp_receive+0xb0c>)
 80112ce:	68db      	ldr	r3, [r3, #12]
 80112d0:	899b      	ldrh	r3, [r3, #12]
 80112d2:	b29b      	uxth	r3, r3
 80112d4:	4618      	mov	r0, r3
 80112d6:	f7fa fb75 	bl	800b9c4 <lwip_htons>
 80112da:	4603      	mov	r3, r0
 80112dc:	b2db      	uxtb	r3, r3
 80112de:	f003 0303 	and.w	r3, r3, #3
 80112e2:	2b00      	cmp	r3, #0
 80112e4:	d001      	beq.n	80112ea <tcp_receive+0x966>
 80112e6:	2301      	movs	r3, #1
 80112e8:	e000      	b.n	80112ec <tcp_receive+0x968>
 80112ea:	2300      	movs	r3, #0
 80112ec:	4423      	add	r3, r4
 80112ee:	b29a      	uxth	r2, r3
 80112f0:	4b65      	ldr	r3, [pc, #404]	@ (8011488 <tcp_receive+0xb04>)
 80112f2:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 80112f4:	4b64      	ldr	r3, [pc, #400]	@ (8011488 <tcp_receive+0xb04>)
 80112f6:	881b      	ldrh	r3, [r3, #0]
 80112f8:	461a      	mov	r2, r3
 80112fa:	4b64      	ldr	r3, [pc, #400]	@ (801148c <tcp_receive+0xb08>)
 80112fc:	681b      	ldr	r3, [r3, #0]
 80112fe:	441a      	add	r2, r3
 8011300:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011302:	68db      	ldr	r3, [r3, #12]
 8011304:	685b      	ldr	r3, [r3, #4]
 8011306:	429a      	cmp	r2, r3
 8011308:	d006      	beq.n	8011318 <tcp_receive+0x994>
 801130a:	4b62      	ldr	r3, [pc, #392]	@ (8011494 <tcp_receive+0xb10>)
 801130c:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 8011310:	4961      	ldr	r1, [pc, #388]	@ (8011498 <tcp_receive+0xb14>)
 8011312:	4862      	ldr	r0, [pc, #392]	@ (801149c <tcp_receive+0xb18>)
 8011314:	f005 fc88 	bl	8016c28 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8011318:	687b      	ldr	r3, [r7, #4]
 801131a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801131c:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 801131e:	4b5a      	ldr	r3, [pc, #360]	@ (8011488 <tcp_receive+0xb04>)
 8011320:	881b      	ldrh	r3, [r3, #0]
 8011322:	461a      	mov	r2, r3
 8011324:	4b59      	ldr	r3, [pc, #356]	@ (801148c <tcp_receive+0xb08>)
 8011326:	681b      	ldr	r3, [r3, #0]
 8011328:	441a      	add	r2, r3
 801132a:	687b      	ldr	r3, [r7, #4]
 801132c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801132e:	687b      	ldr	r3, [r7, #4]
 8011330:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8011332:	4b55      	ldr	r3, [pc, #340]	@ (8011488 <tcp_receive+0xb04>)
 8011334:	881b      	ldrh	r3, [r3, #0]
 8011336:	429a      	cmp	r2, r3
 8011338:	d206      	bcs.n	8011348 <tcp_receive+0x9c4>
 801133a:	4b56      	ldr	r3, [pc, #344]	@ (8011494 <tcp_receive+0xb10>)
 801133c:	f240 6207 	movw	r2, #1543	@ 0x607
 8011340:	4957      	ldr	r1, [pc, #348]	@ (80114a0 <tcp_receive+0xb1c>)
 8011342:	4856      	ldr	r0, [pc, #344]	@ (801149c <tcp_receive+0xb18>)
 8011344:	f005 fc70 	bl	8016c28 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8011348:	687b      	ldr	r3, [r7, #4]
 801134a:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801134c:	4b4e      	ldr	r3, [pc, #312]	@ (8011488 <tcp_receive+0xb04>)
 801134e:	881b      	ldrh	r3, [r3, #0]
 8011350:	1ad3      	subs	r3, r2, r3
 8011352:	b29a      	uxth	r2, r3
 8011354:	687b      	ldr	r3, [r7, #4]
 8011356:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8011358:	6878      	ldr	r0, [r7, #4]
 801135a:	f7fc fea5 	bl	800e0a8 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 801135e:	4b4c      	ldr	r3, [pc, #304]	@ (8011490 <tcp_receive+0xb0c>)
 8011360:	685b      	ldr	r3, [r3, #4]
 8011362:	891b      	ldrh	r3, [r3, #8]
 8011364:	2b00      	cmp	r3, #0
 8011366:	d006      	beq.n	8011376 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8011368:	4b49      	ldr	r3, [pc, #292]	@ (8011490 <tcp_receive+0xb0c>)
 801136a:	685b      	ldr	r3, [r3, #4]
 801136c:	4a4d      	ldr	r2, [pc, #308]	@ (80114a4 <tcp_receive+0xb20>)
 801136e:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8011370:	4b47      	ldr	r3, [pc, #284]	@ (8011490 <tcp_receive+0xb0c>)
 8011372:	2200      	movs	r2, #0
 8011374:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8011376:	4b46      	ldr	r3, [pc, #280]	@ (8011490 <tcp_receive+0xb0c>)
 8011378:	68db      	ldr	r3, [r3, #12]
 801137a:	899b      	ldrh	r3, [r3, #12]
 801137c:	b29b      	uxth	r3, r3
 801137e:	4618      	mov	r0, r3
 8011380:	f7fa fb20 	bl	800b9c4 <lwip_htons>
 8011384:	4603      	mov	r3, r0
 8011386:	b2db      	uxtb	r3, r3
 8011388:	f003 0301 	and.w	r3, r3, #1
 801138c:	2b00      	cmp	r3, #0
 801138e:	f000 80b8 	beq.w	8011502 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8011392:	4b45      	ldr	r3, [pc, #276]	@ (80114a8 <tcp_receive+0xb24>)
 8011394:	781b      	ldrb	r3, [r3, #0]
 8011396:	f043 0320 	orr.w	r3, r3, #32
 801139a:	b2da      	uxtb	r2, r3
 801139c:	4b42      	ldr	r3, [pc, #264]	@ (80114a8 <tcp_receive+0xb24>)
 801139e:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 80113a0:	e0af      	b.n	8011502 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 80113a2:	687b      	ldr	r3, [r7, #4]
 80113a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80113a6:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 80113a8:	687b      	ldr	r3, [r7, #4]
 80113aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80113ac:	68db      	ldr	r3, [r3, #12]
 80113ae:	685b      	ldr	r3, [r3, #4]
 80113b0:	4a36      	ldr	r2, [pc, #216]	@ (801148c <tcp_receive+0xb08>)
 80113b2:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 80113b4:	68bb      	ldr	r3, [r7, #8]
 80113b6:	891b      	ldrh	r3, [r3, #8]
 80113b8:	461c      	mov	r4, r3
 80113ba:	68bb      	ldr	r3, [r7, #8]
 80113bc:	68db      	ldr	r3, [r3, #12]
 80113be:	899b      	ldrh	r3, [r3, #12]
 80113c0:	b29b      	uxth	r3, r3
 80113c2:	4618      	mov	r0, r3
 80113c4:	f7fa fafe 	bl	800b9c4 <lwip_htons>
 80113c8:	4603      	mov	r3, r0
 80113ca:	b2db      	uxtb	r3, r3
 80113cc:	f003 0303 	and.w	r3, r3, #3
 80113d0:	2b00      	cmp	r3, #0
 80113d2:	d001      	beq.n	80113d8 <tcp_receive+0xa54>
 80113d4:	2301      	movs	r3, #1
 80113d6:	e000      	b.n	80113da <tcp_receive+0xa56>
 80113d8:	2300      	movs	r3, #0
 80113da:	191a      	adds	r2, r3, r4
 80113dc:	687b      	ldr	r3, [r7, #4]
 80113de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80113e0:	441a      	add	r2, r3
 80113e2:	687b      	ldr	r3, [r7, #4]
 80113e4:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 80113e6:	687b      	ldr	r3, [r7, #4]
 80113e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80113ea:	461c      	mov	r4, r3
 80113ec:	68bb      	ldr	r3, [r7, #8]
 80113ee:	891b      	ldrh	r3, [r3, #8]
 80113f0:	461d      	mov	r5, r3
 80113f2:	68bb      	ldr	r3, [r7, #8]
 80113f4:	68db      	ldr	r3, [r3, #12]
 80113f6:	899b      	ldrh	r3, [r3, #12]
 80113f8:	b29b      	uxth	r3, r3
 80113fa:	4618      	mov	r0, r3
 80113fc:	f7fa fae2 	bl	800b9c4 <lwip_htons>
 8011400:	4603      	mov	r3, r0
 8011402:	b2db      	uxtb	r3, r3
 8011404:	f003 0303 	and.w	r3, r3, #3
 8011408:	2b00      	cmp	r3, #0
 801140a:	d001      	beq.n	8011410 <tcp_receive+0xa8c>
 801140c:	2301      	movs	r3, #1
 801140e:	e000      	b.n	8011412 <tcp_receive+0xa8e>
 8011410:	2300      	movs	r3, #0
 8011412:	442b      	add	r3, r5
 8011414:	429c      	cmp	r4, r3
 8011416:	d206      	bcs.n	8011426 <tcp_receive+0xaa2>
 8011418:	4b1e      	ldr	r3, [pc, #120]	@ (8011494 <tcp_receive+0xb10>)
 801141a:	f240 622b 	movw	r2, #1579	@ 0x62b
 801141e:	4923      	ldr	r1, [pc, #140]	@ (80114ac <tcp_receive+0xb28>)
 8011420:	481e      	ldr	r0, [pc, #120]	@ (801149c <tcp_receive+0xb18>)
 8011422:	f005 fc01 	bl	8016c28 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8011426:	68bb      	ldr	r3, [r7, #8]
 8011428:	891b      	ldrh	r3, [r3, #8]
 801142a:	461c      	mov	r4, r3
 801142c:	68bb      	ldr	r3, [r7, #8]
 801142e:	68db      	ldr	r3, [r3, #12]
 8011430:	899b      	ldrh	r3, [r3, #12]
 8011432:	b29b      	uxth	r3, r3
 8011434:	4618      	mov	r0, r3
 8011436:	f7fa fac5 	bl	800b9c4 <lwip_htons>
 801143a:	4603      	mov	r3, r0
 801143c:	b2db      	uxtb	r3, r3
 801143e:	f003 0303 	and.w	r3, r3, #3
 8011442:	2b00      	cmp	r3, #0
 8011444:	d001      	beq.n	801144a <tcp_receive+0xac6>
 8011446:	2301      	movs	r3, #1
 8011448:	e000      	b.n	801144c <tcp_receive+0xac8>
 801144a:	2300      	movs	r3, #0
 801144c:	1919      	adds	r1, r3, r4
 801144e:	687b      	ldr	r3, [r7, #4]
 8011450:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8011452:	b28b      	uxth	r3, r1
 8011454:	1ad3      	subs	r3, r2, r3
 8011456:	b29a      	uxth	r2, r3
 8011458:	687b      	ldr	r3, [r7, #4]
 801145a:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 801145c:	6878      	ldr	r0, [r7, #4]
 801145e:	f7fc fe23 	bl	800e0a8 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8011462:	68bb      	ldr	r3, [r7, #8]
 8011464:	685b      	ldr	r3, [r3, #4]
 8011466:	891b      	ldrh	r3, [r3, #8]
 8011468:	2b00      	cmp	r3, #0
 801146a:	d028      	beq.n	80114be <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 801146c:	4b0d      	ldr	r3, [pc, #52]	@ (80114a4 <tcp_receive+0xb20>)
 801146e:	681b      	ldr	r3, [r3, #0]
 8011470:	2b00      	cmp	r3, #0
 8011472:	d01d      	beq.n	80114b0 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8011474:	4b0b      	ldr	r3, [pc, #44]	@ (80114a4 <tcp_receive+0xb20>)
 8011476:	681a      	ldr	r2, [r3, #0]
 8011478:	68bb      	ldr	r3, [r7, #8]
 801147a:	685b      	ldr	r3, [r3, #4]
 801147c:	4619      	mov	r1, r3
 801147e:	4610      	mov	r0, r2
 8011480:	f7fb ff60 	bl	800d344 <pbuf_cat>
 8011484:	e018      	b.n	80114b8 <tcp_receive+0xb34>
 8011486:	bf00      	nop
 8011488:	2000f42a 	.word	0x2000f42a
 801148c:	2000f420 	.word	0x2000f420
 8011490:	2000f400 	.word	0x2000f400
 8011494:	08019a8c 	.word	0x08019a8c
 8011498:	08019e6c 	.word	0x08019e6c
 801149c:	08019ad8 	.word	0x08019ad8
 80114a0:	08019ea8 	.word	0x08019ea8
 80114a4:	2000f430 	.word	0x2000f430
 80114a8:	2000f42d 	.word	0x2000f42d
 80114ac:	08019ec8 	.word	0x08019ec8
            } else {
              recv_data = cseg->p;
 80114b0:	68bb      	ldr	r3, [r7, #8]
 80114b2:	685b      	ldr	r3, [r3, #4]
 80114b4:	4a70      	ldr	r2, [pc, #448]	@ (8011678 <tcp_receive+0xcf4>)
 80114b6:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 80114b8:	68bb      	ldr	r3, [r7, #8]
 80114ba:	2200      	movs	r2, #0
 80114bc:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80114be:	68bb      	ldr	r3, [r7, #8]
 80114c0:	68db      	ldr	r3, [r3, #12]
 80114c2:	899b      	ldrh	r3, [r3, #12]
 80114c4:	b29b      	uxth	r3, r3
 80114c6:	4618      	mov	r0, r3
 80114c8:	f7fa fa7c 	bl	800b9c4 <lwip_htons>
 80114cc:	4603      	mov	r3, r0
 80114ce:	b2db      	uxtb	r3, r3
 80114d0:	f003 0301 	and.w	r3, r3, #1
 80114d4:	2b00      	cmp	r3, #0
 80114d6:	d00d      	beq.n	80114f4 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 80114d8:	4b68      	ldr	r3, [pc, #416]	@ (801167c <tcp_receive+0xcf8>)
 80114da:	781b      	ldrb	r3, [r3, #0]
 80114dc:	f043 0320 	orr.w	r3, r3, #32
 80114e0:	b2da      	uxtb	r2, r3
 80114e2:	4b66      	ldr	r3, [pc, #408]	@ (801167c <tcp_receive+0xcf8>)
 80114e4:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 80114e6:	687b      	ldr	r3, [r7, #4]
 80114e8:	7d1b      	ldrb	r3, [r3, #20]
 80114ea:	2b04      	cmp	r3, #4
 80114ec:	d102      	bne.n	80114f4 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 80114ee:	687b      	ldr	r3, [r7, #4]
 80114f0:	2207      	movs	r2, #7
 80114f2:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 80114f4:	68bb      	ldr	r3, [r7, #8]
 80114f6:	681a      	ldr	r2, [r3, #0]
 80114f8:	687b      	ldr	r3, [r7, #4]
 80114fa:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 80114fc:	68b8      	ldr	r0, [r7, #8]
 80114fe:	f7fd fafe 	bl	800eafe <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8011502:	687b      	ldr	r3, [r7, #4]
 8011504:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011506:	2b00      	cmp	r3, #0
 8011508:	d008      	beq.n	801151c <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801150a:	687b      	ldr	r3, [r7, #4]
 801150c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801150e:	68db      	ldr	r3, [r3, #12]
 8011510:	685a      	ldr	r2, [r3, #4]
 8011512:	687b      	ldr	r3, [r7, #4]
 8011514:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 8011516:	429a      	cmp	r2, r3
 8011518:	f43f af43 	beq.w	80113a2 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 801151c:	687b      	ldr	r3, [r7, #4]
 801151e:	8b5b      	ldrh	r3, [r3, #26]
 8011520:	f003 0301 	and.w	r3, r3, #1
 8011524:	2b00      	cmp	r3, #0
 8011526:	d00e      	beq.n	8011546 <tcp_receive+0xbc2>
 8011528:	687b      	ldr	r3, [r7, #4]
 801152a:	8b5b      	ldrh	r3, [r3, #26]
 801152c:	f023 0301 	bic.w	r3, r3, #1
 8011530:	b29a      	uxth	r2, r3
 8011532:	687b      	ldr	r3, [r7, #4]
 8011534:	835a      	strh	r2, [r3, #26]
 8011536:	687b      	ldr	r3, [r7, #4]
 8011538:	8b5b      	ldrh	r3, [r3, #26]
 801153a:	f043 0302 	orr.w	r3, r3, #2
 801153e:	b29a      	uxth	r2, r3
 8011540:	687b      	ldr	r3, [r7, #4]
 8011542:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8011544:	e187      	b.n	8011856 <tcp_receive+0xed2>
        tcp_ack(pcb);
 8011546:	687b      	ldr	r3, [r7, #4]
 8011548:	8b5b      	ldrh	r3, [r3, #26]
 801154a:	f043 0301 	orr.w	r3, r3, #1
 801154e:	b29a      	uxth	r2, r3
 8011550:	687b      	ldr	r3, [r7, #4]
 8011552:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8011554:	e17f      	b.n	8011856 <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8011556:	687b      	ldr	r3, [r7, #4]
 8011558:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801155a:	2b00      	cmp	r3, #0
 801155c:	d106      	bne.n	801156c <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 801155e:	4848      	ldr	r0, [pc, #288]	@ (8011680 <tcp_receive+0xcfc>)
 8011560:	f7fd fae6 	bl	800eb30 <tcp_seg_copy>
 8011564:	4602      	mov	r2, r0
 8011566:	687b      	ldr	r3, [r7, #4]
 8011568:	675a      	str	r2, [r3, #116]	@ 0x74
 801156a:	e16c      	b.n	8011846 <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 801156c:	2300      	movs	r3, #0
 801156e:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8011570:	687b      	ldr	r3, [r7, #4]
 8011572:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011574:	63bb      	str	r3, [r7, #56]	@ 0x38
 8011576:	e156      	b.n	8011826 <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 8011578:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801157a:	68db      	ldr	r3, [r3, #12]
 801157c:	685a      	ldr	r2, [r3, #4]
 801157e:	4b41      	ldr	r3, [pc, #260]	@ (8011684 <tcp_receive+0xd00>)
 8011580:	681b      	ldr	r3, [r3, #0]
 8011582:	429a      	cmp	r2, r3
 8011584:	d11d      	bne.n	80115c2 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8011586:	4b3e      	ldr	r3, [pc, #248]	@ (8011680 <tcp_receive+0xcfc>)
 8011588:	891a      	ldrh	r2, [r3, #8]
 801158a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801158c:	891b      	ldrh	r3, [r3, #8]
 801158e:	429a      	cmp	r2, r3
 8011590:	f240 814e 	bls.w	8011830 <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8011594:	483a      	ldr	r0, [pc, #232]	@ (8011680 <tcp_receive+0xcfc>)
 8011596:	f7fd facb 	bl	800eb30 <tcp_seg_copy>
 801159a:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 801159c:	697b      	ldr	r3, [r7, #20]
 801159e:	2b00      	cmp	r3, #0
 80115a0:	f000 8148 	beq.w	8011834 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 80115a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80115a6:	2b00      	cmp	r3, #0
 80115a8:	d003      	beq.n	80115b2 <tcp_receive+0xc2e>
                    prev->next = cseg;
 80115aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80115ac:	697a      	ldr	r2, [r7, #20]
 80115ae:	601a      	str	r2, [r3, #0]
 80115b0:	e002      	b.n	80115b8 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 80115b2:	687b      	ldr	r3, [r7, #4]
 80115b4:	697a      	ldr	r2, [r7, #20]
 80115b6:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 80115b8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80115ba:	6978      	ldr	r0, [r7, #20]
 80115bc:	f7ff f8de 	bl	801077c <tcp_oos_insert_segment>
                }
                break;
 80115c0:	e138      	b.n	8011834 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 80115c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80115c4:	2b00      	cmp	r3, #0
 80115c6:	d117      	bne.n	80115f8 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 80115c8:	4b2e      	ldr	r3, [pc, #184]	@ (8011684 <tcp_receive+0xd00>)
 80115ca:	681a      	ldr	r2, [r3, #0]
 80115cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80115ce:	68db      	ldr	r3, [r3, #12]
 80115d0:	685b      	ldr	r3, [r3, #4]
 80115d2:	1ad3      	subs	r3, r2, r3
 80115d4:	2b00      	cmp	r3, #0
 80115d6:	da57      	bge.n	8011688 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80115d8:	4829      	ldr	r0, [pc, #164]	@ (8011680 <tcp_receive+0xcfc>)
 80115da:	f7fd faa9 	bl	800eb30 <tcp_seg_copy>
 80115de:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 80115e0:	69bb      	ldr	r3, [r7, #24]
 80115e2:	2b00      	cmp	r3, #0
 80115e4:	f000 8128 	beq.w	8011838 <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 80115e8:	687b      	ldr	r3, [r7, #4]
 80115ea:	69ba      	ldr	r2, [r7, #24]
 80115ec:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 80115ee:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80115f0:	69b8      	ldr	r0, [r7, #24]
 80115f2:	f7ff f8c3 	bl	801077c <tcp_oos_insert_segment>
                  }
                  break;
 80115f6:	e11f      	b.n	8011838 <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 80115f8:	4b22      	ldr	r3, [pc, #136]	@ (8011684 <tcp_receive+0xd00>)
 80115fa:	681a      	ldr	r2, [r3, #0]
 80115fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80115fe:	68db      	ldr	r3, [r3, #12]
 8011600:	685b      	ldr	r3, [r3, #4]
 8011602:	1ad3      	subs	r3, r2, r3
 8011604:	3b01      	subs	r3, #1
 8011606:	2b00      	cmp	r3, #0
 8011608:	db3e      	blt.n	8011688 <tcp_receive+0xd04>
 801160a:	4b1e      	ldr	r3, [pc, #120]	@ (8011684 <tcp_receive+0xd00>)
 801160c:	681a      	ldr	r2, [r3, #0]
 801160e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011610:	68db      	ldr	r3, [r3, #12]
 8011612:	685b      	ldr	r3, [r3, #4]
 8011614:	1ad3      	subs	r3, r2, r3
 8011616:	3301      	adds	r3, #1
 8011618:	2b00      	cmp	r3, #0
 801161a:	dc35      	bgt.n	8011688 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801161c:	4818      	ldr	r0, [pc, #96]	@ (8011680 <tcp_receive+0xcfc>)
 801161e:	f7fd fa87 	bl	800eb30 <tcp_seg_copy>
 8011622:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8011624:	69fb      	ldr	r3, [r7, #28]
 8011626:	2b00      	cmp	r3, #0
 8011628:	f000 8108 	beq.w	801183c <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 801162c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801162e:	68db      	ldr	r3, [r3, #12]
 8011630:	685b      	ldr	r3, [r3, #4]
 8011632:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011634:	8912      	ldrh	r2, [r2, #8]
 8011636:	441a      	add	r2, r3
 8011638:	4b12      	ldr	r3, [pc, #72]	@ (8011684 <tcp_receive+0xd00>)
 801163a:	681b      	ldr	r3, [r3, #0]
 801163c:	1ad3      	subs	r3, r2, r3
 801163e:	2b00      	cmp	r3, #0
 8011640:	dd12      	ble.n	8011668 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8011642:	4b10      	ldr	r3, [pc, #64]	@ (8011684 <tcp_receive+0xd00>)
 8011644:	681b      	ldr	r3, [r3, #0]
 8011646:	b29a      	uxth	r2, r3
 8011648:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801164a:	68db      	ldr	r3, [r3, #12]
 801164c:	685b      	ldr	r3, [r3, #4]
 801164e:	b29b      	uxth	r3, r3
 8011650:	1ad3      	subs	r3, r2, r3
 8011652:	b29a      	uxth	r2, r3
 8011654:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011656:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8011658:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801165a:	685a      	ldr	r2, [r3, #4]
 801165c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801165e:	891b      	ldrh	r3, [r3, #8]
 8011660:	4619      	mov	r1, r3
 8011662:	4610      	mov	r0, r2
 8011664:	f7fb fc1a 	bl	800ce9c <pbuf_realloc>
                    }
                    prev->next = cseg;
 8011668:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801166a:	69fa      	ldr	r2, [r7, #28]
 801166c:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 801166e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8011670:	69f8      	ldr	r0, [r7, #28]
 8011672:	f7ff f883 	bl	801077c <tcp_oos_insert_segment>
                  }
                  break;
 8011676:	e0e1      	b.n	801183c <tcp_receive+0xeb8>
 8011678:	2000f430 	.word	0x2000f430
 801167c:	2000f42d 	.word	0x2000f42d
 8011680:	2000f400 	.word	0x2000f400
 8011684:	2000f420 	.word	0x2000f420
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8011688:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801168a:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 801168c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801168e:	681b      	ldr	r3, [r3, #0]
 8011690:	2b00      	cmp	r3, #0
 8011692:	f040 80c5 	bne.w	8011820 <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8011696:	4b7f      	ldr	r3, [pc, #508]	@ (8011894 <tcp_receive+0xf10>)
 8011698:	681a      	ldr	r2, [r3, #0]
 801169a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801169c:	68db      	ldr	r3, [r3, #12]
 801169e:	685b      	ldr	r3, [r3, #4]
 80116a0:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 80116a2:	2b00      	cmp	r3, #0
 80116a4:	f340 80bc 	ble.w	8011820 <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80116a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80116aa:	68db      	ldr	r3, [r3, #12]
 80116ac:	899b      	ldrh	r3, [r3, #12]
 80116ae:	b29b      	uxth	r3, r3
 80116b0:	4618      	mov	r0, r3
 80116b2:	f7fa f987 	bl	800b9c4 <lwip_htons>
 80116b6:	4603      	mov	r3, r0
 80116b8:	b2db      	uxtb	r3, r3
 80116ba:	f003 0301 	and.w	r3, r3, #1
 80116be:	2b00      	cmp	r3, #0
 80116c0:	f040 80be 	bne.w	8011840 <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 80116c4:	4874      	ldr	r0, [pc, #464]	@ (8011898 <tcp_receive+0xf14>)
 80116c6:	f7fd fa33 	bl	800eb30 <tcp_seg_copy>
 80116ca:	4602      	mov	r2, r0
 80116cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80116ce:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 80116d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80116d2:	681b      	ldr	r3, [r3, #0]
 80116d4:	2b00      	cmp	r3, #0
 80116d6:	f000 80b5 	beq.w	8011844 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 80116da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80116dc:	68db      	ldr	r3, [r3, #12]
 80116de:	685b      	ldr	r3, [r3, #4]
 80116e0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80116e2:	8912      	ldrh	r2, [r2, #8]
 80116e4:	441a      	add	r2, r3
 80116e6:	4b6b      	ldr	r3, [pc, #428]	@ (8011894 <tcp_receive+0xf10>)
 80116e8:	681b      	ldr	r3, [r3, #0]
 80116ea:	1ad3      	subs	r3, r2, r3
 80116ec:	2b00      	cmp	r3, #0
 80116ee:	dd12      	ble.n	8011716 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 80116f0:	4b68      	ldr	r3, [pc, #416]	@ (8011894 <tcp_receive+0xf10>)
 80116f2:	681b      	ldr	r3, [r3, #0]
 80116f4:	b29a      	uxth	r2, r3
 80116f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80116f8:	68db      	ldr	r3, [r3, #12]
 80116fa:	685b      	ldr	r3, [r3, #4]
 80116fc:	b29b      	uxth	r3, r3
 80116fe:	1ad3      	subs	r3, r2, r3
 8011700:	b29a      	uxth	r2, r3
 8011702:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011704:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8011706:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011708:	685a      	ldr	r2, [r3, #4]
 801170a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801170c:	891b      	ldrh	r3, [r3, #8]
 801170e:	4619      	mov	r1, r3
 8011710:	4610      	mov	r0, r2
 8011712:	f7fb fbc3 	bl	800ce9c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8011716:	4b61      	ldr	r3, [pc, #388]	@ (801189c <tcp_receive+0xf18>)
 8011718:	881b      	ldrh	r3, [r3, #0]
 801171a:	461a      	mov	r2, r3
 801171c:	4b5d      	ldr	r3, [pc, #372]	@ (8011894 <tcp_receive+0xf10>)
 801171e:	681b      	ldr	r3, [r3, #0]
 8011720:	441a      	add	r2, r3
 8011722:	687b      	ldr	r3, [r7, #4]
 8011724:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011726:	6879      	ldr	r1, [r7, #4]
 8011728:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801172a:	440b      	add	r3, r1
 801172c:	1ad3      	subs	r3, r2, r3
 801172e:	2b00      	cmp	r3, #0
 8011730:	f340 8088 	ble.w	8011844 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8011734:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011736:	681b      	ldr	r3, [r3, #0]
 8011738:	68db      	ldr	r3, [r3, #12]
 801173a:	899b      	ldrh	r3, [r3, #12]
 801173c:	b29b      	uxth	r3, r3
 801173e:	4618      	mov	r0, r3
 8011740:	f7fa f940 	bl	800b9c4 <lwip_htons>
 8011744:	4603      	mov	r3, r0
 8011746:	b2db      	uxtb	r3, r3
 8011748:	f003 0301 	and.w	r3, r3, #1
 801174c:	2b00      	cmp	r3, #0
 801174e:	d021      	beq.n	8011794 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8011750:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011752:	681b      	ldr	r3, [r3, #0]
 8011754:	68db      	ldr	r3, [r3, #12]
 8011756:	899b      	ldrh	r3, [r3, #12]
 8011758:	b29b      	uxth	r3, r3
 801175a:	b21b      	sxth	r3, r3
 801175c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8011760:	b21c      	sxth	r4, r3
 8011762:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011764:	681b      	ldr	r3, [r3, #0]
 8011766:	68db      	ldr	r3, [r3, #12]
 8011768:	899b      	ldrh	r3, [r3, #12]
 801176a:	b29b      	uxth	r3, r3
 801176c:	4618      	mov	r0, r3
 801176e:	f7fa f929 	bl	800b9c4 <lwip_htons>
 8011772:	4603      	mov	r3, r0
 8011774:	b2db      	uxtb	r3, r3
 8011776:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 801177a:	b29b      	uxth	r3, r3
 801177c:	4618      	mov	r0, r3
 801177e:	f7fa f921 	bl	800b9c4 <lwip_htons>
 8011782:	4603      	mov	r3, r0
 8011784:	b21b      	sxth	r3, r3
 8011786:	4323      	orrs	r3, r4
 8011788:	b21a      	sxth	r2, r3
 801178a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801178c:	681b      	ldr	r3, [r3, #0]
 801178e:	68db      	ldr	r3, [r3, #12]
 8011790:	b292      	uxth	r2, r2
 8011792:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8011794:	687b      	ldr	r3, [r7, #4]
 8011796:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011798:	b29a      	uxth	r2, r3
 801179a:	687b      	ldr	r3, [r7, #4]
 801179c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801179e:	4413      	add	r3, r2
 80117a0:	b299      	uxth	r1, r3
 80117a2:	4b3c      	ldr	r3, [pc, #240]	@ (8011894 <tcp_receive+0xf10>)
 80117a4:	681b      	ldr	r3, [r3, #0]
 80117a6:	b29a      	uxth	r2, r3
 80117a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80117aa:	681b      	ldr	r3, [r3, #0]
 80117ac:	1a8a      	subs	r2, r1, r2
 80117ae:	b292      	uxth	r2, r2
 80117b0:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 80117b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80117b4:	681b      	ldr	r3, [r3, #0]
 80117b6:	685a      	ldr	r2, [r3, #4]
 80117b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80117ba:	681b      	ldr	r3, [r3, #0]
 80117bc:	891b      	ldrh	r3, [r3, #8]
 80117be:	4619      	mov	r1, r3
 80117c0:	4610      	mov	r0, r2
 80117c2:	f7fb fb6b 	bl	800ce9c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 80117c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80117c8:	681b      	ldr	r3, [r3, #0]
 80117ca:	891c      	ldrh	r4, [r3, #8]
 80117cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80117ce:	681b      	ldr	r3, [r3, #0]
 80117d0:	68db      	ldr	r3, [r3, #12]
 80117d2:	899b      	ldrh	r3, [r3, #12]
 80117d4:	b29b      	uxth	r3, r3
 80117d6:	4618      	mov	r0, r3
 80117d8:	f7fa f8f4 	bl	800b9c4 <lwip_htons>
 80117dc:	4603      	mov	r3, r0
 80117de:	b2db      	uxtb	r3, r3
 80117e0:	f003 0303 	and.w	r3, r3, #3
 80117e4:	2b00      	cmp	r3, #0
 80117e6:	d001      	beq.n	80117ec <tcp_receive+0xe68>
 80117e8:	2301      	movs	r3, #1
 80117ea:	e000      	b.n	80117ee <tcp_receive+0xe6a>
 80117ec:	2300      	movs	r3, #0
 80117ee:	4423      	add	r3, r4
 80117f0:	b29a      	uxth	r2, r3
 80117f2:	4b2a      	ldr	r3, [pc, #168]	@ (801189c <tcp_receive+0xf18>)
 80117f4:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80117f6:	4b29      	ldr	r3, [pc, #164]	@ (801189c <tcp_receive+0xf18>)
 80117f8:	881b      	ldrh	r3, [r3, #0]
 80117fa:	461a      	mov	r2, r3
 80117fc:	4b25      	ldr	r3, [pc, #148]	@ (8011894 <tcp_receive+0xf10>)
 80117fe:	681b      	ldr	r3, [r3, #0]
 8011800:	441a      	add	r2, r3
 8011802:	687b      	ldr	r3, [r7, #4]
 8011804:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011806:	6879      	ldr	r1, [r7, #4]
 8011808:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801180a:	440b      	add	r3, r1
 801180c:	429a      	cmp	r2, r3
 801180e:	d019      	beq.n	8011844 <tcp_receive+0xec0>
 8011810:	4b23      	ldr	r3, [pc, #140]	@ (80118a0 <tcp_receive+0xf1c>)
 8011812:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 8011816:	4923      	ldr	r1, [pc, #140]	@ (80118a4 <tcp_receive+0xf20>)
 8011818:	4823      	ldr	r0, [pc, #140]	@ (80118a8 <tcp_receive+0xf24>)
 801181a:	f005 fa05 	bl	8016c28 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 801181e:	e011      	b.n	8011844 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8011820:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011822:	681b      	ldr	r3, [r3, #0]
 8011824:	63bb      	str	r3, [r7, #56]	@ 0x38
 8011826:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011828:	2b00      	cmp	r3, #0
 801182a:	f47f aea5 	bne.w	8011578 <tcp_receive+0xbf4>
 801182e:	e00a      	b.n	8011846 <tcp_receive+0xec2>
                break;
 8011830:	bf00      	nop
 8011832:	e008      	b.n	8011846 <tcp_receive+0xec2>
                break;
 8011834:	bf00      	nop
 8011836:	e006      	b.n	8011846 <tcp_receive+0xec2>
                  break;
 8011838:	bf00      	nop
 801183a:	e004      	b.n	8011846 <tcp_receive+0xec2>
                  break;
 801183c:	bf00      	nop
 801183e:	e002      	b.n	8011846 <tcp_receive+0xec2>
                  break;
 8011840:	bf00      	nop
 8011842:	e000      	b.n	8011846 <tcp_receive+0xec2>
                break;
 8011844:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8011846:	6878      	ldr	r0, [r7, #4]
 8011848:	f001 fe88 	bl	801355c <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 801184c:	e003      	b.n	8011856 <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 801184e:	6878      	ldr	r0, [r7, #4]
 8011850:	f001 fe84 	bl	801355c <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8011854:	e01a      	b.n	801188c <tcp_receive+0xf08>
 8011856:	e019      	b.n	801188c <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8011858:	4b0e      	ldr	r3, [pc, #56]	@ (8011894 <tcp_receive+0xf10>)
 801185a:	681a      	ldr	r2, [r3, #0]
 801185c:	687b      	ldr	r3, [r7, #4]
 801185e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011860:	1ad3      	subs	r3, r2, r3
 8011862:	2b00      	cmp	r3, #0
 8011864:	db0a      	blt.n	801187c <tcp_receive+0xef8>
 8011866:	4b0b      	ldr	r3, [pc, #44]	@ (8011894 <tcp_receive+0xf10>)
 8011868:	681a      	ldr	r2, [r3, #0]
 801186a:	687b      	ldr	r3, [r7, #4]
 801186c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801186e:	6879      	ldr	r1, [r7, #4]
 8011870:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8011872:	440b      	add	r3, r1
 8011874:	1ad3      	subs	r3, r2, r3
 8011876:	3301      	adds	r3, #1
 8011878:	2b00      	cmp	r3, #0
 801187a:	dd07      	ble.n	801188c <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 801187c:	687b      	ldr	r3, [r7, #4]
 801187e:	8b5b      	ldrh	r3, [r3, #26]
 8011880:	f043 0302 	orr.w	r3, r3, #2
 8011884:	b29a      	uxth	r2, r3
 8011886:	687b      	ldr	r3, [r7, #4]
 8011888:	835a      	strh	r2, [r3, #26]
    }
  }
}
 801188a:	e7ff      	b.n	801188c <tcp_receive+0xf08>
 801188c:	bf00      	nop
 801188e:	3750      	adds	r7, #80	@ 0x50
 8011890:	46bd      	mov	sp, r7
 8011892:	bdb0      	pop	{r4, r5, r7, pc}
 8011894:	2000f420 	.word	0x2000f420
 8011898:	2000f400 	.word	0x2000f400
 801189c:	2000f42a 	.word	0x2000f42a
 80118a0:	08019a8c 	.word	0x08019a8c
 80118a4:	08019e34 	.word	0x08019e34
 80118a8:	08019ad8 	.word	0x08019ad8

080118ac <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 80118ac:	b480      	push	{r7}
 80118ae:	b083      	sub	sp, #12
 80118b0:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 80118b2:	4b15      	ldr	r3, [pc, #84]	@ (8011908 <tcp_get_next_optbyte+0x5c>)
 80118b4:	881b      	ldrh	r3, [r3, #0]
 80118b6:	1c5a      	adds	r2, r3, #1
 80118b8:	b291      	uxth	r1, r2
 80118ba:	4a13      	ldr	r2, [pc, #76]	@ (8011908 <tcp_get_next_optbyte+0x5c>)
 80118bc:	8011      	strh	r1, [r2, #0]
 80118be:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 80118c0:	4b12      	ldr	r3, [pc, #72]	@ (801190c <tcp_get_next_optbyte+0x60>)
 80118c2:	681b      	ldr	r3, [r3, #0]
 80118c4:	2b00      	cmp	r3, #0
 80118c6:	d004      	beq.n	80118d2 <tcp_get_next_optbyte+0x26>
 80118c8:	4b11      	ldr	r3, [pc, #68]	@ (8011910 <tcp_get_next_optbyte+0x64>)
 80118ca:	881b      	ldrh	r3, [r3, #0]
 80118cc:	88fa      	ldrh	r2, [r7, #6]
 80118ce:	429a      	cmp	r2, r3
 80118d0:	d208      	bcs.n	80118e4 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 80118d2:	4b10      	ldr	r3, [pc, #64]	@ (8011914 <tcp_get_next_optbyte+0x68>)
 80118d4:	681b      	ldr	r3, [r3, #0]
 80118d6:	3314      	adds	r3, #20
 80118d8:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 80118da:	88fb      	ldrh	r3, [r7, #6]
 80118dc:	683a      	ldr	r2, [r7, #0]
 80118de:	4413      	add	r3, r2
 80118e0:	781b      	ldrb	r3, [r3, #0]
 80118e2:	e00b      	b.n	80118fc <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 80118e4:	88fb      	ldrh	r3, [r7, #6]
 80118e6:	b2da      	uxtb	r2, r3
 80118e8:	4b09      	ldr	r3, [pc, #36]	@ (8011910 <tcp_get_next_optbyte+0x64>)
 80118ea:	881b      	ldrh	r3, [r3, #0]
 80118ec:	b2db      	uxtb	r3, r3
 80118ee:	1ad3      	subs	r3, r2, r3
 80118f0:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 80118f2:	4b06      	ldr	r3, [pc, #24]	@ (801190c <tcp_get_next_optbyte+0x60>)
 80118f4:	681a      	ldr	r2, [r3, #0]
 80118f6:	797b      	ldrb	r3, [r7, #5]
 80118f8:	4413      	add	r3, r2
 80118fa:	781b      	ldrb	r3, [r3, #0]
  }
}
 80118fc:	4618      	mov	r0, r3
 80118fe:	370c      	adds	r7, #12
 8011900:	46bd      	mov	sp, r7
 8011902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011906:	4770      	bx	lr
 8011908:	2000f41c 	.word	0x2000f41c
 801190c:	2000f418 	.word	0x2000f418
 8011910:	2000f416 	.word	0x2000f416
 8011914:	2000f410 	.word	0x2000f410

08011918 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8011918:	b580      	push	{r7, lr}
 801191a:	b084      	sub	sp, #16
 801191c:	af00      	add	r7, sp, #0
 801191e:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8011920:	687b      	ldr	r3, [r7, #4]
 8011922:	2b00      	cmp	r3, #0
 8011924:	d106      	bne.n	8011934 <tcp_parseopt+0x1c>
 8011926:	4b32      	ldr	r3, [pc, #200]	@ (80119f0 <tcp_parseopt+0xd8>)
 8011928:	f240 727d 	movw	r2, #1917	@ 0x77d
 801192c:	4931      	ldr	r1, [pc, #196]	@ (80119f4 <tcp_parseopt+0xdc>)
 801192e:	4832      	ldr	r0, [pc, #200]	@ (80119f8 <tcp_parseopt+0xe0>)
 8011930:	f005 f97a 	bl	8016c28 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8011934:	4b31      	ldr	r3, [pc, #196]	@ (80119fc <tcp_parseopt+0xe4>)
 8011936:	881b      	ldrh	r3, [r3, #0]
 8011938:	2b00      	cmp	r3, #0
 801193a:	d056      	beq.n	80119ea <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801193c:	4b30      	ldr	r3, [pc, #192]	@ (8011a00 <tcp_parseopt+0xe8>)
 801193e:	2200      	movs	r2, #0
 8011940:	801a      	strh	r2, [r3, #0]
 8011942:	e046      	b.n	80119d2 <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 8011944:	f7ff ffb2 	bl	80118ac <tcp_get_next_optbyte>
 8011948:	4603      	mov	r3, r0
 801194a:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 801194c:	7bfb      	ldrb	r3, [r7, #15]
 801194e:	2b02      	cmp	r3, #2
 8011950:	d006      	beq.n	8011960 <tcp_parseopt+0x48>
 8011952:	2b02      	cmp	r3, #2
 8011954:	dc2a      	bgt.n	80119ac <tcp_parseopt+0x94>
 8011956:	2b00      	cmp	r3, #0
 8011958:	d042      	beq.n	80119e0 <tcp_parseopt+0xc8>
 801195a:	2b01      	cmp	r3, #1
 801195c:	d038      	beq.n	80119d0 <tcp_parseopt+0xb8>
 801195e:	e025      	b.n	80119ac <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8011960:	f7ff ffa4 	bl	80118ac <tcp_get_next_optbyte>
 8011964:	4603      	mov	r3, r0
 8011966:	2b04      	cmp	r3, #4
 8011968:	d13c      	bne.n	80119e4 <tcp_parseopt+0xcc>
 801196a:	4b25      	ldr	r3, [pc, #148]	@ (8011a00 <tcp_parseopt+0xe8>)
 801196c:	881b      	ldrh	r3, [r3, #0]
 801196e:	3301      	adds	r3, #1
 8011970:	4a22      	ldr	r2, [pc, #136]	@ (80119fc <tcp_parseopt+0xe4>)
 8011972:	8812      	ldrh	r2, [r2, #0]
 8011974:	4293      	cmp	r3, r2
 8011976:	da35      	bge.n	80119e4 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8011978:	f7ff ff98 	bl	80118ac <tcp_get_next_optbyte>
 801197c:	4603      	mov	r3, r0
 801197e:	021b      	lsls	r3, r3, #8
 8011980:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8011982:	f7ff ff93 	bl	80118ac <tcp_get_next_optbyte>
 8011986:	4603      	mov	r3, r0
 8011988:	461a      	mov	r2, r3
 801198a:	89bb      	ldrh	r3, [r7, #12]
 801198c:	4313      	orrs	r3, r2
 801198e:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8011990:	89bb      	ldrh	r3, [r7, #12]
 8011992:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8011996:	d804      	bhi.n	80119a2 <tcp_parseopt+0x8a>
 8011998:	89bb      	ldrh	r3, [r7, #12]
 801199a:	2b00      	cmp	r3, #0
 801199c:	d001      	beq.n	80119a2 <tcp_parseopt+0x8a>
 801199e:	89ba      	ldrh	r2, [r7, #12]
 80119a0:	e001      	b.n	80119a6 <tcp_parseopt+0x8e>
 80119a2:	f44f 7206 	mov.w	r2, #536	@ 0x218
 80119a6:	687b      	ldr	r3, [r7, #4]
 80119a8:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 80119aa:	e012      	b.n	80119d2 <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 80119ac:	f7ff ff7e 	bl	80118ac <tcp_get_next_optbyte>
 80119b0:	4603      	mov	r3, r0
 80119b2:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 80119b4:	7afb      	ldrb	r3, [r7, #11]
 80119b6:	2b01      	cmp	r3, #1
 80119b8:	d916      	bls.n	80119e8 <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 80119ba:	7afb      	ldrb	r3, [r7, #11]
 80119bc:	b29a      	uxth	r2, r3
 80119be:	4b10      	ldr	r3, [pc, #64]	@ (8011a00 <tcp_parseopt+0xe8>)
 80119c0:	881b      	ldrh	r3, [r3, #0]
 80119c2:	4413      	add	r3, r2
 80119c4:	b29b      	uxth	r3, r3
 80119c6:	3b02      	subs	r3, #2
 80119c8:	b29a      	uxth	r2, r3
 80119ca:	4b0d      	ldr	r3, [pc, #52]	@ (8011a00 <tcp_parseopt+0xe8>)
 80119cc:	801a      	strh	r2, [r3, #0]
 80119ce:	e000      	b.n	80119d2 <tcp_parseopt+0xba>
          break;
 80119d0:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80119d2:	4b0b      	ldr	r3, [pc, #44]	@ (8011a00 <tcp_parseopt+0xe8>)
 80119d4:	881a      	ldrh	r2, [r3, #0]
 80119d6:	4b09      	ldr	r3, [pc, #36]	@ (80119fc <tcp_parseopt+0xe4>)
 80119d8:	881b      	ldrh	r3, [r3, #0]
 80119da:	429a      	cmp	r2, r3
 80119dc:	d3b2      	bcc.n	8011944 <tcp_parseopt+0x2c>
 80119de:	e004      	b.n	80119ea <tcp_parseopt+0xd2>
          return;
 80119e0:	bf00      	nop
 80119e2:	e002      	b.n	80119ea <tcp_parseopt+0xd2>
            return;
 80119e4:	bf00      	nop
 80119e6:	e000      	b.n	80119ea <tcp_parseopt+0xd2>
            return;
 80119e8:	bf00      	nop
      }
    }
  }
}
 80119ea:	3710      	adds	r7, #16
 80119ec:	46bd      	mov	sp, r7
 80119ee:	bd80      	pop	{r7, pc}
 80119f0:	08019a8c 	.word	0x08019a8c
 80119f4:	08019ef0 	.word	0x08019ef0
 80119f8:	08019ad8 	.word	0x08019ad8
 80119fc:	2000f414 	.word	0x2000f414
 8011a00:	2000f41c 	.word	0x2000f41c

08011a04 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8011a04:	b480      	push	{r7}
 8011a06:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8011a08:	4b05      	ldr	r3, [pc, #20]	@ (8011a20 <tcp_trigger_input_pcb_close+0x1c>)
 8011a0a:	781b      	ldrb	r3, [r3, #0]
 8011a0c:	f043 0310 	orr.w	r3, r3, #16
 8011a10:	b2da      	uxtb	r2, r3
 8011a12:	4b03      	ldr	r3, [pc, #12]	@ (8011a20 <tcp_trigger_input_pcb_close+0x1c>)
 8011a14:	701a      	strb	r2, [r3, #0]
}
 8011a16:	bf00      	nop
 8011a18:	46bd      	mov	sp, r7
 8011a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a1e:	4770      	bx	lr
 8011a20:	2000f42d 	.word	0x2000f42d

08011a24 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8011a24:	b580      	push	{r7, lr}
 8011a26:	b084      	sub	sp, #16
 8011a28:	af00      	add	r7, sp, #0
 8011a2a:	60f8      	str	r0, [r7, #12]
 8011a2c:	60b9      	str	r1, [r7, #8]
 8011a2e:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8011a30:	68fb      	ldr	r3, [r7, #12]
 8011a32:	2b00      	cmp	r3, #0
 8011a34:	d00a      	beq.n	8011a4c <tcp_route+0x28>
 8011a36:	68fb      	ldr	r3, [r7, #12]
 8011a38:	7a1b      	ldrb	r3, [r3, #8]
 8011a3a:	2b00      	cmp	r3, #0
 8011a3c:	d006      	beq.n	8011a4c <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8011a3e:	68fb      	ldr	r3, [r7, #12]
 8011a40:	7a1b      	ldrb	r3, [r3, #8]
 8011a42:	4618      	mov	r0, r3
 8011a44:	f7fb f822 	bl	800ca8c <netif_get_by_index>
 8011a48:	4603      	mov	r3, r0
 8011a4a:	e003      	b.n	8011a54 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8011a4c:	6878      	ldr	r0, [r7, #4]
 8011a4e:	f003 fc49 	bl	80152e4 <ip4_route>
 8011a52:	4603      	mov	r3, r0
  }
}
 8011a54:	4618      	mov	r0, r3
 8011a56:	3710      	adds	r7, #16
 8011a58:	46bd      	mov	sp, r7
 8011a5a:	bd80      	pop	{r7, pc}

08011a5c <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8011a5c:	b590      	push	{r4, r7, lr}
 8011a5e:	b087      	sub	sp, #28
 8011a60:	af00      	add	r7, sp, #0
 8011a62:	60f8      	str	r0, [r7, #12]
 8011a64:	60b9      	str	r1, [r7, #8]
 8011a66:	603b      	str	r3, [r7, #0]
 8011a68:	4613      	mov	r3, r2
 8011a6a:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8011a6c:	68fb      	ldr	r3, [r7, #12]
 8011a6e:	2b00      	cmp	r3, #0
 8011a70:	d105      	bne.n	8011a7e <tcp_create_segment+0x22>
 8011a72:	4b43      	ldr	r3, [pc, #268]	@ (8011b80 <tcp_create_segment+0x124>)
 8011a74:	22a3      	movs	r2, #163	@ 0xa3
 8011a76:	4943      	ldr	r1, [pc, #268]	@ (8011b84 <tcp_create_segment+0x128>)
 8011a78:	4843      	ldr	r0, [pc, #268]	@ (8011b88 <tcp_create_segment+0x12c>)
 8011a7a:	f005 f8d5 	bl	8016c28 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8011a7e:	68bb      	ldr	r3, [r7, #8]
 8011a80:	2b00      	cmp	r3, #0
 8011a82:	d105      	bne.n	8011a90 <tcp_create_segment+0x34>
 8011a84:	4b3e      	ldr	r3, [pc, #248]	@ (8011b80 <tcp_create_segment+0x124>)
 8011a86:	22a4      	movs	r2, #164	@ 0xa4
 8011a88:	4940      	ldr	r1, [pc, #256]	@ (8011b8c <tcp_create_segment+0x130>)
 8011a8a:	483f      	ldr	r0, [pc, #252]	@ (8011b88 <tcp_create_segment+0x12c>)
 8011a8c:	f005 f8cc 	bl	8016c28 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8011a90:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8011a94:	009b      	lsls	r3, r3, #2
 8011a96:	b2db      	uxtb	r3, r3
 8011a98:	f003 0304 	and.w	r3, r3, #4
 8011a9c:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8011a9e:	2003      	movs	r0, #3
 8011aa0:	f7fa fc68 	bl	800c374 <memp_malloc>
 8011aa4:	6138      	str	r0, [r7, #16]
 8011aa6:	693b      	ldr	r3, [r7, #16]
 8011aa8:	2b00      	cmp	r3, #0
 8011aaa:	d104      	bne.n	8011ab6 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8011aac:	68b8      	ldr	r0, [r7, #8]
 8011aae:	f7fb fb7b 	bl	800d1a8 <pbuf_free>
    return NULL;
 8011ab2:	2300      	movs	r3, #0
 8011ab4:	e060      	b.n	8011b78 <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 8011ab6:	693b      	ldr	r3, [r7, #16]
 8011ab8:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8011abc:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8011abe:	693b      	ldr	r3, [r7, #16]
 8011ac0:	2200      	movs	r2, #0
 8011ac2:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8011ac4:	693b      	ldr	r3, [r7, #16]
 8011ac6:	68ba      	ldr	r2, [r7, #8]
 8011ac8:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8011aca:	68bb      	ldr	r3, [r7, #8]
 8011acc:	891a      	ldrh	r2, [r3, #8]
 8011ace:	7dfb      	ldrb	r3, [r7, #23]
 8011ad0:	b29b      	uxth	r3, r3
 8011ad2:	429a      	cmp	r2, r3
 8011ad4:	d205      	bcs.n	8011ae2 <tcp_create_segment+0x86>
 8011ad6:	4b2a      	ldr	r3, [pc, #168]	@ (8011b80 <tcp_create_segment+0x124>)
 8011ad8:	22b0      	movs	r2, #176	@ 0xb0
 8011ada:	492d      	ldr	r1, [pc, #180]	@ (8011b90 <tcp_create_segment+0x134>)
 8011adc:	482a      	ldr	r0, [pc, #168]	@ (8011b88 <tcp_create_segment+0x12c>)
 8011ade:	f005 f8a3 	bl	8016c28 <iprintf>
  seg->len = p->tot_len - optlen;
 8011ae2:	68bb      	ldr	r3, [r7, #8]
 8011ae4:	891a      	ldrh	r2, [r3, #8]
 8011ae6:	7dfb      	ldrb	r3, [r7, #23]
 8011ae8:	b29b      	uxth	r3, r3
 8011aea:	1ad3      	subs	r3, r2, r3
 8011aec:	b29a      	uxth	r2, r3
 8011aee:	693b      	ldr	r3, [r7, #16]
 8011af0:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8011af2:	2114      	movs	r1, #20
 8011af4:	68b8      	ldr	r0, [r7, #8]
 8011af6:	f7fb fac1 	bl	800d07c <pbuf_add_header>
 8011afa:	4603      	mov	r3, r0
 8011afc:	2b00      	cmp	r3, #0
 8011afe:	d004      	beq.n	8011b0a <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8011b00:	6938      	ldr	r0, [r7, #16]
 8011b02:	f7fc fffc 	bl	800eafe <tcp_seg_free>
    return NULL;
 8011b06:	2300      	movs	r3, #0
 8011b08:	e036      	b.n	8011b78 <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8011b0a:	693b      	ldr	r3, [r7, #16]
 8011b0c:	685b      	ldr	r3, [r3, #4]
 8011b0e:	685a      	ldr	r2, [r3, #4]
 8011b10:	693b      	ldr	r3, [r7, #16]
 8011b12:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8011b14:	68fb      	ldr	r3, [r7, #12]
 8011b16:	8ada      	ldrh	r2, [r3, #22]
 8011b18:	693b      	ldr	r3, [r7, #16]
 8011b1a:	68dc      	ldr	r4, [r3, #12]
 8011b1c:	4610      	mov	r0, r2
 8011b1e:	f7f9 ff51 	bl	800b9c4 <lwip_htons>
 8011b22:	4603      	mov	r3, r0
 8011b24:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8011b26:	68fb      	ldr	r3, [r7, #12]
 8011b28:	8b1a      	ldrh	r2, [r3, #24]
 8011b2a:	693b      	ldr	r3, [r7, #16]
 8011b2c:	68dc      	ldr	r4, [r3, #12]
 8011b2e:	4610      	mov	r0, r2
 8011b30:	f7f9 ff48 	bl	800b9c4 <lwip_htons>
 8011b34:	4603      	mov	r3, r0
 8011b36:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8011b38:	693b      	ldr	r3, [r7, #16]
 8011b3a:	68dc      	ldr	r4, [r3, #12]
 8011b3c:	6838      	ldr	r0, [r7, #0]
 8011b3e:	f7f9 ff56 	bl	800b9ee <lwip_htonl>
 8011b42:	4603      	mov	r3, r0
 8011b44:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8011b46:	7dfb      	ldrb	r3, [r7, #23]
 8011b48:	089b      	lsrs	r3, r3, #2
 8011b4a:	b2db      	uxtb	r3, r3
 8011b4c:	3305      	adds	r3, #5
 8011b4e:	b29b      	uxth	r3, r3
 8011b50:	031b      	lsls	r3, r3, #12
 8011b52:	b29a      	uxth	r2, r3
 8011b54:	79fb      	ldrb	r3, [r7, #7]
 8011b56:	b29b      	uxth	r3, r3
 8011b58:	4313      	orrs	r3, r2
 8011b5a:	b29a      	uxth	r2, r3
 8011b5c:	693b      	ldr	r3, [r7, #16]
 8011b5e:	68dc      	ldr	r4, [r3, #12]
 8011b60:	4610      	mov	r0, r2
 8011b62:	f7f9 ff2f 	bl	800b9c4 <lwip_htons>
 8011b66:	4603      	mov	r3, r0
 8011b68:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8011b6a:	693b      	ldr	r3, [r7, #16]
 8011b6c:	68db      	ldr	r3, [r3, #12]
 8011b6e:	2200      	movs	r2, #0
 8011b70:	749a      	strb	r2, [r3, #18]
 8011b72:	2200      	movs	r2, #0
 8011b74:	74da      	strb	r2, [r3, #19]
  return seg;
 8011b76:	693b      	ldr	r3, [r7, #16]
}
 8011b78:	4618      	mov	r0, r3
 8011b7a:	371c      	adds	r7, #28
 8011b7c:	46bd      	mov	sp, r7
 8011b7e:	bd90      	pop	{r4, r7, pc}
 8011b80:	08019f0c 	.word	0x08019f0c
 8011b84:	08019f40 	.word	0x08019f40
 8011b88:	08019f60 	.word	0x08019f60
 8011b8c:	08019f88 	.word	0x08019f88
 8011b90:	08019fac 	.word	0x08019fac

08011b94 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8011b94:	b580      	push	{r7, lr}
 8011b96:	b086      	sub	sp, #24
 8011b98:	af00      	add	r7, sp, #0
 8011b9a:	607b      	str	r3, [r7, #4]
 8011b9c:	4603      	mov	r3, r0
 8011b9e:	73fb      	strb	r3, [r7, #15]
 8011ba0:	460b      	mov	r3, r1
 8011ba2:	81bb      	strh	r3, [r7, #12]
 8011ba4:	4613      	mov	r3, r2
 8011ba6:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8011ba8:	89bb      	ldrh	r3, [r7, #12]
 8011baa:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8011bac:	687b      	ldr	r3, [r7, #4]
 8011bae:	2b00      	cmp	r3, #0
 8011bb0:	d105      	bne.n	8011bbe <tcp_pbuf_prealloc+0x2a>
 8011bb2:	4b30      	ldr	r3, [pc, #192]	@ (8011c74 <tcp_pbuf_prealloc+0xe0>)
 8011bb4:	22e8      	movs	r2, #232	@ 0xe8
 8011bb6:	4930      	ldr	r1, [pc, #192]	@ (8011c78 <tcp_pbuf_prealloc+0xe4>)
 8011bb8:	4830      	ldr	r0, [pc, #192]	@ (8011c7c <tcp_pbuf_prealloc+0xe8>)
 8011bba:	f005 f835 	bl	8016c28 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8011bbe:	6a3b      	ldr	r3, [r7, #32]
 8011bc0:	2b00      	cmp	r3, #0
 8011bc2:	d105      	bne.n	8011bd0 <tcp_pbuf_prealloc+0x3c>
 8011bc4:	4b2b      	ldr	r3, [pc, #172]	@ (8011c74 <tcp_pbuf_prealloc+0xe0>)
 8011bc6:	22e9      	movs	r2, #233	@ 0xe9
 8011bc8:	492d      	ldr	r1, [pc, #180]	@ (8011c80 <tcp_pbuf_prealloc+0xec>)
 8011bca:	482c      	ldr	r0, [pc, #176]	@ (8011c7c <tcp_pbuf_prealloc+0xe8>)
 8011bcc:	f005 f82c 	bl	8016c28 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8011bd0:	89ba      	ldrh	r2, [r7, #12]
 8011bd2:	897b      	ldrh	r3, [r7, #10]
 8011bd4:	429a      	cmp	r2, r3
 8011bd6:	d221      	bcs.n	8011c1c <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8011bd8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8011bdc:	f003 0302 	and.w	r3, r3, #2
 8011be0:	2b00      	cmp	r3, #0
 8011be2:	d111      	bne.n	8011c08 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8011be4:	6a3b      	ldr	r3, [r7, #32]
 8011be6:	8b5b      	ldrh	r3, [r3, #26]
 8011be8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8011bec:	2b00      	cmp	r3, #0
 8011bee:	d115      	bne.n	8011c1c <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8011bf0:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8011bf4:	2b00      	cmp	r3, #0
 8011bf6:	d007      	beq.n	8011c08 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8011bf8:	6a3b      	ldr	r3, [r7, #32]
 8011bfa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
         (!first_seg ||
 8011bfc:	2b00      	cmp	r3, #0
 8011bfe:	d103      	bne.n	8011c08 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8011c00:	6a3b      	ldr	r3, [r7, #32]
 8011c02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
          pcb->unsent != NULL ||
 8011c04:	2b00      	cmp	r3, #0
 8011c06:	d009      	beq.n	8011c1c <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8011c08:	89bb      	ldrh	r3, [r7, #12]
 8011c0a:	f203 231b 	addw	r3, r3, #539	@ 0x21b
 8011c0e:	f023 0203 	bic.w	r2, r3, #3
 8011c12:	897b      	ldrh	r3, [r7, #10]
 8011c14:	4293      	cmp	r3, r2
 8011c16:	bf28      	it	cs
 8011c18:	4613      	movcs	r3, r2
 8011c1a:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8011c1c:	8af9      	ldrh	r1, [r7, #22]
 8011c1e:	7bfb      	ldrb	r3, [r7, #15]
 8011c20:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8011c24:	4618      	mov	r0, r3
 8011c26:	f7fa ffdb 	bl	800cbe0 <pbuf_alloc>
 8011c2a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011c2c:	693b      	ldr	r3, [r7, #16]
 8011c2e:	2b00      	cmp	r3, #0
 8011c30:	d101      	bne.n	8011c36 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 8011c32:	2300      	movs	r3, #0
 8011c34:	e019      	b.n	8011c6a <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8011c36:	693b      	ldr	r3, [r7, #16]
 8011c38:	681b      	ldr	r3, [r3, #0]
 8011c3a:	2b00      	cmp	r3, #0
 8011c3c:	d006      	beq.n	8011c4c <tcp_pbuf_prealloc+0xb8>
 8011c3e:	4b0d      	ldr	r3, [pc, #52]	@ (8011c74 <tcp_pbuf_prealloc+0xe0>)
 8011c40:	f240 120b 	movw	r2, #267	@ 0x10b
 8011c44:	490f      	ldr	r1, [pc, #60]	@ (8011c84 <tcp_pbuf_prealloc+0xf0>)
 8011c46:	480d      	ldr	r0, [pc, #52]	@ (8011c7c <tcp_pbuf_prealloc+0xe8>)
 8011c48:	f004 ffee 	bl	8016c28 <iprintf>
  *oversize = p->len - length;
 8011c4c:	693b      	ldr	r3, [r7, #16]
 8011c4e:	895a      	ldrh	r2, [r3, #10]
 8011c50:	89bb      	ldrh	r3, [r7, #12]
 8011c52:	1ad3      	subs	r3, r2, r3
 8011c54:	b29a      	uxth	r2, r3
 8011c56:	687b      	ldr	r3, [r7, #4]
 8011c58:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8011c5a:	693b      	ldr	r3, [r7, #16]
 8011c5c:	89ba      	ldrh	r2, [r7, #12]
 8011c5e:	811a      	strh	r2, [r3, #8]
 8011c60:	693b      	ldr	r3, [r7, #16]
 8011c62:	891a      	ldrh	r2, [r3, #8]
 8011c64:	693b      	ldr	r3, [r7, #16]
 8011c66:	815a      	strh	r2, [r3, #10]
  return p;
 8011c68:	693b      	ldr	r3, [r7, #16]
}
 8011c6a:	4618      	mov	r0, r3
 8011c6c:	3718      	adds	r7, #24
 8011c6e:	46bd      	mov	sp, r7
 8011c70:	bd80      	pop	{r7, pc}
 8011c72:	bf00      	nop
 8011c74:	08019f0c 	.word	0x08019f0c
 8011c78:	08019fc4 	.word	0x08019fc4
 8011c7c:	08019f60 	.word	0x08019f60
 8011c80:	08019fe8 	.word	0x08019fe8
 8011c84:	0801a008 	.word	0x0801a008

08011c88 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8011c88:	b580      	push	{r7, lr}
 8011c8a:	b082      	sub	sp, #8
 8011c8c:	af00      	add	r7, sp, #0
 8011c8e:	6078      	str	r0, [r7, #4]
 8011c90:	460b      	mov	r3, r1
 8011c92:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8011c94:	687b      	ldr	r3, [r7, #4]
 8011c96:	2b00      	cmp	r3, #0
 8011c98:	d106      	bne.n	8011ca8 <tcp_write_checks+0x20>
 8011c9a:	4b33      	ldr	r3, [pc, #204]	@ (8011d68 <tcp_write_checks+0xe0>)
 8011c9c:	f240 1233 	movw	r2, #307	@ 0x133
 8011ca0:	4932      	ldr	r1, [pc, #200]	@ (8011d6c <tcp_write_checks+0xe4>)
 8011ca2:	4833      	ldr	r0, [pc, #204]	@ (8011d70 <tcp_write_checks+0xe8>)
 8011ca4:	f004 ffc0 	bl	8016c28 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8011ca8:	687b      	ldr	r3, [r7, #4]
 8011caa:	7d1b      	ldrb	r3, [r3, #20]
 8011cac:	2b04      	cmp	r3, #4
 8011cae:	d00e      	beq.n	8011cce <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8011cb0:	687b      	ldr	r3, [r7, #4]
 8011cb2:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8011cb4:	2b07      	cmp	r3, #7
 8011cb6:	d00a      	beq.n	8011cce <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8011cb8:	687b      	ldr	r3, [r7, #4]
 8011cba:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8011cbc:	2b02      	cmp	r3, #2
 8011cbe:	d006      	beq.n	8011cce <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8011cc0:	687b      	ldr	r3, [r7, #4]
 8011cc2:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8011cc4:	2b03      	cmp	r3, #3
 8011cc6:	d002      	beq.n	8011cce <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8011cc8:	f06f 030a 	mvn.w	r3, #10
 8011ccc:	e048      	b.n	8011d60 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 8011cce:	887b      	ldrh	r3, [r7, #2]
 8011cd0:	2b00      	cmp	r3, #0
 8011cd2:	d101      	bne.n	8011cd8 <tcp_write_checks+0x50>
    return ERR_OK;
 8011cd4:	2300      	movs	r3, #0
 8011cd6:	e043      	b.n	8011d60 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8011cd8:	687b      	ldr	r3, [r7, #4]
 8011cda:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8011cde:	887a      	ldrh	r2, [r7, #2]
 8011ce0:	429a      	cmp	r2, r3
 8011ce2:	d909      	bls.n	8011cf8 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011ce4:	687b      	ldr	r3, [r7, #4]
 8011ce6:	8b5b      	ldrh	r3, [r3, #26]
 8011ce8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011cec:	b29a      	uxth	r2, r3
 8011cee:	687b      	ldr	r3, [r7, #4]
 8011cf0:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8011cf2:	f04f 33ff 	mov.w	r3, #4294967295
 8011cf6:	e033      	b.n	8011d60 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8011cf8:	687b      	ldr	r3, [r7, #4]
 8011cfa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8011cfe:	2b08      	cmp	r3, #8
 8011d00:	d909      	bls.n	8011d16 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011d02:	687b      	ldr	r3, [r7, #4]
 8011d04:	8b5b      	ldrh	r3, [r3, #26]
 8011d06:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011d0a:	b29a      	uxth	r2, r3
 8011d0c:	687b      	ldr	r3, [r7, #4]
 8011d0e:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8011d10:	f04f 33ff 	mov.w	r3, #4294967295
 8011d14:	e024      	b.n	8011d60 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 8011d16:	687b      	ldr	r3, [r7, #4]
 8011d18:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8011d1c:	2b00      	cmp	r3, #0
 8011d1e:	d00f      	beq.n	8011d40 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8011d20:	687b      	ldr	r3, [r7, #4]
 8011d22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011d24:	2b00      	cmp	r3, #0
 8011d26:	d11a      	bne.n	8011d5e <tcp_write_checks+0xd6>
 8011d28:	687b      	ldr	r3, [r7, #4]
 8011d2a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011d2c:	2b00      	cmp	r3, #0
 8011d2e:	d116      	bne.n	8011d5e <tcp_write_checks+0xd6>
 8011d30:	4b0d      	ldr	r3, [pc, #52]	@ (8011d68 <tcp_write_checks+0xe0>)
 8011d32:	f240 1255 	movw	r2, #341	@ 0x155
 8011d36:	490f      	ldr	r1, [pc, #60]	@ (8011d74 <tcp_write_checks+0xec>)
 8011d38:	480d      	ldr	r0, [pc, #52]	@ (8011d70 <tcp_write_checks+0xe8>)
 8011d3a:	f004 ff75 	bl	8016c28 <iprintf>
 8011d3e:	e00e      	b.n	8011d5e <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8011d40:	687b      	ldr	r3, [r7, #4]
 8011d42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011d44:	2b00      	cmp	r3, #0
 8011d46:	d103      	bne.n	8011d50 <tcp_write_checks+0xc8>
 8011d48:	687b      	ldr	r3, [r7, #4]
 8011d4a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011d4c:	2b00      	cmp	r3, #0
 8011d4e:	d006      	beq.n	8011d5e <tcp_write_checks+0xd6>
 8011d50:	4b05      	ldr	r3, [pc, #20]	@ (8011d68 <tcp_write_checks+0xe0>)
 8011d52:	f44f 72ac 	mov.w	r2, #344	@ 0x158
 8011d56:	4908      	ldr	r1, [pc, #32]	@ (8011d78 <tcp_write_checks+0xf0>)
 8011d58:	4805      	ldr	r0, [pc, #20]	@ (8011d70 <tcp_write_checks+0xe8>)
 8011d5a:	f004 ff65 	bl	8016c28 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8011d5e:	2300      	movs	r3, #0
}
 8011d60:	4618      	mov	r0, r3
 8011d62:	3708      	adds	r7, #8
 8011d64:	46bd      	mov	sp, r7
 8011d66:	bd80      	pop	{r7, pc}
 8011d68:	08019f0c 	.word	0x08019f0c
 8011d6c:	0801a01c 	.word	0x0801a01c
 8011d70:	08019f60 	.word	0x08019f60
 8011d74:	0801a03c 	.word	0x0801a03c
 8011d78:	0801a078 	.word	0x0801a078

08011d7c <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8011d7c:	b590      	push	{r4, r7, lr}
 8011d7e:	b09b      	sub	sp, #108	@ 0x6c
 8011d80:	af04      	add	r7, sp, #16
 8011d82:	60f8      	str	r0, [r7, #12]
 8011d84:	60b9      	str	r1, [r7, #8]
 8011d86:	4611      	mov	r1, r2
 8011d88:	461a      	mov	r2, r3
 8011d8a:	460b      	mov	r3, r1
 8011d8c:	80fb      	strh	r3, [r7, #6]
 8011d8e:	4613      	mov	r3, r2
 8011d90:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8011d92:	2300      	movs	r3, #0
 8011d94:	657b      	str	r3, [r7, #84]	@ 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8011d96:	2300      	movs	r3, #0
 8011d98:	653b      	str	r3, [r7, #80]	@ 0x50
 8011d9a:	2300      	movs	r3, #0
 8011d9c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8011d9e:	2300      	movs	r3, #0
 8011da0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8011da2:	2300      	movs	r3, #0
 8011da4:	647b      	str	r3, [r7, #68]	@ 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8011da6:	2300      	movs	r3, #0
 8011da8:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8011dac:	2300      	movs	r3, #0
 8011dae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8011db2:	2300      	movs	r3, #0
 8011db4:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8011db6:	2300      	movs	r3, #0
 8011db8:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8011dba:	2300      	movs	r3, #0
 8011dbc:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8011dbe:	68fb      	ldr	r3, [r7, #12]
 8011dc0:	2b00      	cmp	r3, #0
 8011dc2:	d109      	bne.n	8011dd8 <tcp_write+0x5c>
 8011dc4:	4ba4      	ldr	r3, [pc, #656]	@ (8012058 <tcp_write+0x2dc>)
 8011dc6:	f44f 72cf 	mov.w	r2, #414	@ 0x19e
 8011dca:	49a4      	ldr	r1, [pc, #656]	@ (801205c <tcp_write+0x2e0>)
 8011dcc:	48a4      	ldr	r0, [pc, #656]	@ (8012060 <tcp_write+0x2e4>)
 8011dce:	f004 ff2b 	bl	8016c28 <iprintf>
 8011dd2:	f06f 030f 	mvn.w	r3, #15
 8011dd6:	e32a      	b.n	801242e <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8011dd8:	68fb      	ldr	r3, [r7, #12]
 8011dda:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8011dde:	085b      	lsrs	r3, r3, #1
 8011de0:	b29a      	uxth	r2, r3
 8011de2:	68fb      	ldr	r3, [r7, #12]
 8011de4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011de6:	4293      	cmp	r3, r2
 8011de8:	bf28      	it	cs
 8011dea:	4613      	movcs	r3, r2
 8011dec:	84bb      	strh	r3, [r7, #36]	@ 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8011dee:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8011df0:	2b00      	cmp	r3, #0
 8011df2:	d102      	bne.n	8011dfa <tcp_write+0x7e>
 8011df4:	68fb      	ldr	r3, [r7, #12]
 8011df6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011df8:	e000      	b.n	8011dfc <tcp_write+0x80>
 8011dfa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8011dfc:	84bb      	strh	r3, [r7, #36]	@ 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8011dfe:	68bb      	ldr	r3, [r7, #8]
 8011e00:	2b00      	cmp	r3, #0
 8011e02:	d109      	bne.n	8011e18 <tcp_write+0x9c>
 8011e04:	4b94      	ldr	r3, [pc, #592]	@ (8012058 <tcp_write+0x2dc>)
 8011e06:	f240 12ad 	movw	r2, #429	@ 0x1ad
 8011e0a:	4996      	ldr	r1, [pc, #600]	@ (8012064 <tcp_write+0x2e8>)
 8011e0c:	4894      	ldr	r0, [pc, #592]	@ (8012060 <tcp_write+0x2e4>)
 8011e0e:	f004 ff0b 	bl	8016c28 <iprintf>
 8011e12:	f06f 030f 	mvn.w	r3, #15
 8011e16:	e30a      	b.n	801242e <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8011e18:	88fb      	ldrh	r3, [r7, #6]
 8011e1a:	4619      	mov	r1, r3
 8011e1c:	68f8      	ldr	r0, [r7, #12]
 8011e1e:	f7ff ff33 	bl	8011c88 <tcp_write_checks>
 8011e22:	4603      	mov	r3, r0
 8011e24:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (err != ERR_OK) {
 8011e28:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8011e2c:	2b00      	cmp	r3, #0
 8011e2e:	d002      	beq.n	8011e36 <tcp_write+0xba>
    return err;
 8011e30:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8011e34:	e2fb      	b.n	801242e <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 8011e36:	68fb      	ldr	r3, [r7, #12]
 8011e38:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8011e3c:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8011e40:	2300      	movs	r3, #0
 8011e42:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8011e46:	68fb      	ldr	r3, [r7, #12]
 8011e48:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011e4a:	2b00      	cmp	r3, #0
 8011e4c:	f000 80f6 	beq.w	801203c <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8011e50:	68fb      	ldr	r3, [r7, #12]
 8011e52:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011e54:	653b      	str	r3, [r7, #80]	@ 0x50
 8011e56:	e002      	b.n	8011e5e <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8011e58:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011e5a:	681b      	ldr	r3, [r3, #0]
 8011e5c:	653b      	str	r3, [r7, #80]	@ 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8011e5e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011e60:	681b      	ldr	r3, [r3, #0]
 8011e62:	2b00      	cmp	r3, #0
 8011e64:	d1f8      	bne.n	8011e58 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8011e66:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011e68:	7a9b      	ldrb	r3, [r3, #10]
 8011e6a:	009b      	lsls	r3, r3, #2
 8011e6c:	b29b      	uxth	r3, r3
 8011e6e:	f003 0304 	and.w	r3, r3, #4
 8011e72:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8011e74:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8011e76:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011e78:	891b      	ldrh	r3, [r3, #8]
 8011e7a:	4619      	mov	r1, r3
 8011e7c:	8c3b      	ldrh	r3, [r7, #32]
 8011e7e:	440b      	add	r3, r1
 8011e80:	429a      	cmp	r2, r3
 8011e82:	da06      	bge.n	8011e92 <tcp_write+0x116>
 8011e84:	4b74      	ldr	r3, [pc, #464]	@ (8012058 <tcp_write+0x2dc>)
 8011e86:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 8011e8a:	4977      	ldr	r1, [pc, #476]	@ (8012068 <tcp_write+0x2ec>)
 8011e8c:	4874      	ldr	r0, [pc, #464]	@ (8012060 <tcp_write+0x2e4>)
 8011e8e:	f004 fecb 	bl	8016c28 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8011e92:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011e94:	891a      	ldrh	r2, [r3, #8]
 8011e96:	8c3b      	ldrh	r3, [r7, #32]
 8011e98:	4413      	add	r3, r2
 8011e9a:	b29b      	uxth	r3, r3
 8011e9c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8011e9e:	1ad3      	subs	r3, r2, r3
 8011ea0:	877b      	strh	r3, [r7, #58]	@ 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8011ea2:	68fb      	ldr	r3, [r7, #12]
 8011ea4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8011ea8:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8011eaa:	8a7b      	ldrh	r3, [r7, #18]
 8011eac:	2b00      	cmp	r3, #0
 8011eae:	d026      	beq.n	8011efe <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8011eb0:	8a7b      	ldrh	r3, [r7, #18]
 8011eb2:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8011eb4:	429a      	cmp	r2, r3
 8011eb6:	d206      	bcs.n	8011ec6 <tcp_write+0x14a>
 8011eb8:	4b67      	ldr	r3, [pc, #412]	@ (8012058 <tcp_write+0x2dc>)
 8011eba:	f44f 72fc 	mov.w	r2, #504	@ 0x1f8
 8011ebe:	496b      	ldr	r1, [pc, #428]	@ (801206c <tcp_write+0x2f0>)
 8011ec0:	4867      	ldr	r0, [pc, #412]	@ (8012060 <tcp_write+0x2e4>)
 8011ec2:	f004 feb1 	bl	8016c28 <iprintf>
      seg = last_unsent;
 8011ec6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011ec8:	64fb      	str	r3, [r7, #76]	@ 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8011eca:	8a7b      	ldrh	r3, [r7, #18]
 8011ecc:	88fa      	ldrh	r2, [r7, #6]
 8011ece:	4293      	cmp	r3, r2
 8011ed0:	bf28      	it	cs
 8011ed2:	4613      	movcs	r3, r2
 8011ed4:	b29b      	uxth	r3, r3
 8011ed6:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8011ed8:	4293      	cmp	r3, r2
 8011eda:	bf28      	it	cs
 8011edc:	4613      	movcs	r3, r2
 8011ede:	87fb      	strh	r3, [r7, #62]	@ 0x3e
      pos += oversize_used;
 8011ee0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8011ee4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8011ee6:	4413      	add	r3, r2
 8011ee8:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      oversize -= oversize_used;
 8011eec:	8a7a      	ldrh	r2, [r7, #18]
 8011eee:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8011ef0:	1ad3      	subs	r3, r2, r3
 8011ef2:	b29b      	uxth	r3, r3
 8011ef4:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8011ef6:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8011ef8:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8011efa:	1ad3      	subs	r3, r2, r3
 8011efc:	877b      	strh	r3, [r7, #58]	@ 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8011efe:	8a7b      	ldrh	r3, [r7, #18]
 8011f00:	2b00      	cmp	r3, #0
 8011f02:	d00b      	beq.n	8011f1c <tcp_write+0x1a0>
 8011f04:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8011f08:	88fb      	ldrh	r3, [r7, #6]
 8011f0a:	429a      	cmp	r2, r3
 8011f0c:	d006      	beq.n	8011f1c <tcp_write+0x1a0>
 8011f0e:	4b52      	ldr	r3, [pc, #328]	@ (8012058 <tcp_write+0x2dc>)
 8011f10:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011f14:	4956      	ldr	r1, [pc, #344]	@ (8012070 <tcp_write+0x2f4>)
 8011f16:	4852      	ldr	r0, [pc, #328]	@ (8012060 <tcp_write+0x2e4>)
 8011f18:	f004 fe86 	bl	8016c28 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8011f1c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8011f20:	88fb      	ldrh	r3, [r7, #6]
 8011f22:	429a      	cmp	r2, r3
 8011f24:	f080 8167 	bcs.w	80121f6 <tcp_write+0x47a>
 8011f28:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8011f2a:	2b00      	cmp	r3, #0
 8011f2c:	f000 8163 	beq.w	80121f6 <tcp_write+0x47a>
 8011f30:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011f32:	891b      	ldrh	r3, [r3, #8]
 8011f34:	2b00      	cmp	r3, #0
 8011f36:	f000 815e 	beq.w	80121f6 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8011f3a:	88fa      	ldrh	r2, [r7, #6]
 8011f3c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8011f40:	1ad2      	subs	r2, r2, r3
 8011f42:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8011f44:	4293      	cmp	r3, r2
 8011f46:	bfa8      	it	ge
 8011f48:	4613      	movge	r3, r2
 8011f4a:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8011f4c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011f4e:	64fb      	str	r3, [r7, #76]	@ 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8011f50:	797b      	ldrb	r3, [r7, #5]
 8011f52:	f003 0301 	and.w	r3, r3, #1
 8011f56:	2b00      	cmp	r3, #0
 8011f58:	d027      	beq.n	8011faa <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8011f5a:	f107 0012 	add.w	r0, r7, #18
 8011f5e:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8011f60:	8bf9      	ldrh	r1, [r7, #30]
 8011f62:	2301      	movs	r3, #1
 8011f64:	9302      	str	r3, [sp, #8]
 8011f66:	797b      	ldrb	r3, [r7, #5]
 8011f68:	9301      	str	r3, [sp, #4]
 8011f6a:	68fb      	ldr	r3, [r7, #12]
 8011f6c:	9300      	str	r3, [sp, #0]
 8011f6e:	4603      	mov	r3, r0
 8011f70:	2000      	movs	r0, #0
 8011f72:	f7ff fe0f 	bl	8011b94 <tcp_pbuf_prealloc>
 8011f76:	6578      	str	r0, [r7, #84]	@ 0x54
 8011f78:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011f7a:	2b00      	cmp	r3, #0
 8011f7c:	f000 8225 	beq.w	80123ca <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8011f80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011f82:	6858      	ldr	r0, [r3, #4]
 8011f84:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8011f88:	68ba      	ldr	r2, [r7, #8]
 8011f8a:	4413      	add	r3, r2
 8011f8c:	8bfa      	ldrh	r2, [r7, #30]
 8011f8e:	4619      	mov	r1, r3
 8011f90:	f004 ff7b 	bl	8016e8a <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8011f94:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8011f96:	f7fb f995 	bl	800d2c4 <pbuf_clen>
 8011f9a:	4603      	mov	r3, r0
 8011f9c:	461a      	mov	r2, r3
 8011f9e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8011fa2:	4413      	add	r3, r2
 8011fa4:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8011fa8:	e041      	b.n	801202e <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8011faa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011fac:	685b      	ldr	r3, [r3, #4]
 8011fae:	637b      	str	r3, [r7, #52]	@ 0x34
 8011fb0:	e002      	b.n	8011fb8 <tcp_write+0x23c>
 8011fb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011fb4:	681b      	ldr	r3, [r3, #0]
 8011fb6:	637b      	str	r3, [r7, #52]	@ 0x34
 8011fb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011fba:	681b      	ldr	r3, [r3, #0]
 8011fbc:	2b00      	cmp	r3, #0
 8011fbe:	d1f8      	bne.n	8011fb2 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8011fc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011fc2:	7b1b      	ldrb	r3, [r3, #12]
 8011fc4:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8011fc8:	2b00      	cmp	r3, #0
 8011fca:	d115      	bne.n	8011ff8 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8011fcc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011fce:	685b      	ldr	r3, [r3, #4]
 8011fd0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011fd2:	8952      	ldrh	r2, [r2, #10]
 8011fd4:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8011fd6:	68ba      	ldr	r2, [r7, #8]
 8011fd8:	429a      	cmp	r2, r3
 8011fda:	d10d      	bne.n	8011ff8 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8011fdc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8011fe0:	2b00      	cmp	r3, #0
 8011fe2:	d006      	beq.n	8011ff2 <tcp_write+0x276>
 8011fe4:	4b1c      	ldr	r3, [pc, #112]	@ (8012058 <tcp_write+0x2dc>)
 8011fe6:	f240 2231 	movw	r2, #561	@ 0x231
 8011fea:	4922      	ldr	r1, [pc, #136]	@ (8012074 <tcp_write+0x2f8>)
 8011fec:	481c      	ldr	r0, [pc, #112]	@ (8012060 <tcp_write+0x2e4>)
 8011fee:	f004 fe1b 	bl	8016c28 <iprintf>
          extendlen = seglen;
 8011ff2:	8bfb      	ldrh	r3, [r7, #30]
 8011ff4:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8011ff6:	e01a      	b.n	801202e <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8011ff8:	8bfb      	ldrh	r3, [r7, #30]
 8011ffa:	2201      	movs	r2, #1
 8011ffc:	4619      	mov	r1, r3
 8011ffe:	2000      	movs	r0, #0
 8012000:	f7fa fdee 	bl	800cbe0 <pbuf_alloc>
 8012004:	6578      	str	r0, [r7, #84]	@ 0x54
 8012006:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012008:	2b00      	cmp	r3, #0
 801200a:	f000 81e0 	beq.w	80123ce <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 801200e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8012012:	68ba      	ldr	r2, [r7, #8]
 8012014:	441a      	add	r2, r3
 8012016:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012018:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 801201a:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 801201c:	f7fb f952 	bl	800d2c4 <pbuf_clen>
 8012020:	4603      	mov	r3, r0
 8012022:	461a      	mov	r2, r3
 8012024:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8012028:	4413      	add	r3, r2
 801202a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 801202e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8012032:	8bfb      	ldrh	r3, [r7, #30]
 8012034:	4413      	add	r3, r2
 8012036:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 801203a:	e0dc      	b.n	80121f6 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 801203c:	68fb      	ldr	r3, [r7, #12]
 801203e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8012042:	2b00      	cmp	r3, #0
 8012044:	f000 80d7 	beq.w	80121f6 <tcp_write+0x47a>
 8012048:	4b03      	ldr	r3, [pc, #12]	@ (8012058 <tcp_write+0x2dc>)
 801204a:	f240 224a 	movw	r2, #586	@ 0x24a
 801204e:	490a      	ldr	r1, [pc, #40]	@ (8012078 <tcp_write+0x2fc>)
 8012050:	4803      	ldr	r0, [pc, #12]	@ (8012060 <tcp_write+0x2e4>)
 8012052:	f004 fde9 	bl	8016c28 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8012056:	e0ce      	b.n	80121f6 <tcp_write+0x47a>
 8012058:	08019f0c 	.word	0x08019f0c
 801205c:	0801a0ac 	.word	0x0801a0ac
 8012060:	08019f60 	.word	0x08019f60
 8012064:	0801a0c4 	.word	0x0801a0c4
 8012068:	0801a0f8 	.word	0x0801a0f8
 801206c:	0801a110 	.word	0x0801a110
 8012070:	0801a130 	.word	0x0801a130
 8012074:	0801a150 	.word	0x0801a150
 8012078:	0801a17c 	.word	0x0801a17c
    struct pbuf *p;
    u16_t left = len - pos;
 801207c:	88fa      	ldrh	r2, [r7, #6]
 801207e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8012082:	1ad3      	subs	r3, r2, r3
 8012084:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8012086:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801208a:	b29b      	uxth	r3, r3
 801208c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801208e:	1ad3      	subs	r3, r2, r3
 8012090:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 8012092:	8b7a      	ldrh	r2, [r7, #26]
 8012094:	8bbb      	ldrh	r3, [r7, #28]
 8012096:	4293      	cmp	r3, r2
 8012098:	bf28      	it	cs
 801209a:	4613      	movcs	r3, r2
 801209c:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 801209e:	797b      	ldrb	r3, [r7, #5]
 80120a0:	f003 0301 	and.w	r3, r3, #1
 80120a4:	2b00      	cmp	r3, #0
 80120a6:	d036      	beq.n	8012116 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 80120a8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80120ac:	b29a      	uxth	r2, r3
 80120ae:	8b3b      	ldrh	r3, [r7, #24]
 80120b0:	4413      	add	r3, r2
 80120b2:	b299      	uxth	r1, r3
 80120b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80120b6:	2b00      	cmp	r3, #0
 80120b8:	bf0c      	ite	eq
 80120ba:	2301      	moveq	r3, #1
 80120bc:	2300      	movne	r3, #0
 80120be:	b2db      	uxtb	r3, r3
 80120c0:	f107 0012 	add.w	r0, r7, #18
 80120c4:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80120c6:	9302      	str	r3, [sp, #8]
 80120c8:	797b      	ldrb	r3, [r7, #5]
 80120ca:	9301      	str	r3, [sp, #4]
 80120cc:	68fb      	ldr	r3, [r7, #12]
 80120ce:	9300      	str	r3, [sp, #0]
 80120d0:	4603      	mov	r3, r0
 80120d2:	2036      	movs	r0, #54	@ 0x36
 80120d4:	f7ff fd5e 	bl	8011b94 <tcp_pbuf_prealloc>
 80120d8:	6338      	str	r0, [r7, #48]	@ 0x30
 80120da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80120dc:	2b00      	cmp	r3, #0
 80120de:	f000 8178 	beq.w	80123d2 <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 80120e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80120e4:	895b      	ldrh	r3, [r3, #10]
 80120e6:	8b3a      	ldrh	r2, [r7, #24]
 80120e8:	429a      	cmp	r2, r3
 80120ea:	d906      	bls.n	80120fa <tcp_write+0x37e>
 80120ec:	4b8c      	ldr	r3, [pc, #560]	@ (8012320 <tcp_write+0x5a4>)
 80120ee:	f240 2266 	movw	r2, #614	@ 0x266
 80120f2:	498c      	ldr	r1, [pc, #560]	@ (8012324 <tcp_write+0x5a8>)
 80120f4:	488c      	ldr	r0, [pc, #560]	@ (8012328 <tcp_write+0x5ac>)
 80120f6:	f004 fd97 	bl	8016c28 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 80120fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80120fc:	685a      	ldr	r2, [r3, #4]
 80120fe:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8012102:	18d0      	adds	r0, r2, r3
 8012104:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8012108:	68ba      	ldr	r2, [r7, #8]
 801210a:	4413      	add	r3, r2
 801210c:	8b3a      	ldrh	r2, [r7, #24]
 801210e:	4619      	mov	r1, r3
 8012110:	f004 febb 	bl	8016e8a <memcpy>
 8012114:	e02f      	b.n	8012176 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8012116:	8a7b      	ldrh	r3, [r7, #18]
 8012118:	2b00      	cmp	r3, #0
 801211a:	d006      	beq.n	801212a <tcp_write+0x3ae>
 801211c:	4b80      	ldr	r3, [pc, #512]	@ (8012320 <tcp_write+0x5a4>)
 801211e:	f240 2271 	movw	r2, #625	@ 0x271
 8012122:	4982      	ldr	r1, [pc, #520]	@ (801232c <tcp_write+0x5b0>)
 8012124:	4880      	ldr	r0, [pc, #512]	@ (8012328 <tcp_write+0x5ac>)
 8012126:	f004 fd7f 	bl	8016c28 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 801212a:	8b3b      	ldrh	r3, [r7, #24]
 801212c:	2201      	movs	r2, #1
 801212e:	4619      	mov	r1, r3
 8012130:	2036      	movs	r0, #54	@ 0x36
 8012132:	f7fa fd55 	bl	800cbe0 <pbuf_alloc>
 8012136:	6178      	str	r0, [r7, #20]
 8012138:	697b      	ldr	r3, [r7, #20]
 801213a:	2b00      	cmp	r3, #0
 801213c:	f000 814b 	beq.w	80123d6 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8012140:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8012144:	68ba      	ldr	r2, [r7, #8]
 8012146:	441a      	add	r2, r3
 8012148:	697b      	ldr	r3, [r7, #20]
 801214a:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801214c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8012150:	b29b      	uxth	r3, r3
 8012152:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8012156:	4619      	mov	r1, r3
 8012158:	2036      	movs	r0, #54	@ 0x36
 801215a:	f7fa fd41 	bl	800cbe0 <pbuf_alloc>
 801215e:	6338      	str	r0, [r7, #48]	@ 0x30
 8012160:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012162:	2b00      	cmp	r3, #0
 8012164:	d103      	bne.n	801216e <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8012166:	6978      	ldr	r0, [r7, #20]
 8012168:	f7fb f81e 	bl	800d1a8 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 801216c:	e136      	b.n	80123dc <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 801216e:	6979      	ldr	r1, [r7, #20]
 8012170:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8012172:	f7fb f8e7 	bl	800d344 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8012176:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8012178:	f7fb f8a4 	bl	800d2c4 <pbuf_clen>
 801217c:	4603      	mov	r3, r0
 801217e:	461a      	mov	r2, r3
 8012180:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8012184:	4413      	add	r3, r2
 8012186:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 801218a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 801218e:	2b09      	cmp	r3, #9
 8012190:	d903      	bls.n	801219a <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8012192:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8012194:	f7fb f808 	bl	800d1a8 <pbuf_free>
      goto memerr;
 8012198:	e120      	b.n	80123dc <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 801219a:	68fb      	ldr	r3, [r7, #12]
 801219c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 801219e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80121a2:	441a      	add	r2, r3
 80121a4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80121a8:	9300      	str	r3, [sp, #0]
 80121aa:	4613      	mov	r3, r2
 80121ac:	2200      	movs	r2, #0
 80121ae:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80121b0:	68f8      	ldr	r0, [r7, #12]
 80121b2:	f7ff fc53 	bl	8011a5c <tcp_create_segment>
 80121b6:	64f8      	str	r0, [r7, #76]	@ 0x4c
 80121b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80121ba:	2b00      	cmp	r3, #0
 80121bc:	f000 810d 	beq.w	80123da <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 80121c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80121c2:	2b00      	cmp	r3, #0
 80121c4:	d102      	bne.n	80121cc <tcp_write+0x450>
      queue = seg;
 80121c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80121c8:	647b      	str	r3, [r7, #68]	@ 0x44
 80121ca:	e00c      	b.n	80121e6 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 80121cc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80121ce:	2b00      	cmp	r3, #0
 80121d0:	d106      	bne.n	80121e0 <tcp_write+0x464>
 80121d2:	4b53      	ldr	r3, [pc, #332]	@ (8012320 <tcp_write+0x5a4>)
 80121d4:	f240 22ab 	movw	r2, #683	@ 0x2ab
 80121d8:	4955      	ldr	r1, [pc, #340]	@ (8012330 <tcp_write+0x5b4>)
 80121da:	4853      	ldr	r0, [pc, #332]	@ (8012328 <tcp_write+0x5ac>)
 80121dc:	f004 fd24 	bl	8016c28 <iprintf>
      prev_seg->next = seg;
 80121e0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80121e2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80121e4:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 80121e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80121e8:	64bb      	str	r3, [r7, #72]	@ 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 80121ea:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80121ee:	8b3b      	ldrh	r3, [r7, #24]
 80121f0:	4413      	add	r3, r2
 80121f2:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  while (pos < len) {
 80121f6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80121fa:	88fb      	ldrh	r3, [r7, #6]
 80121fc:	429a      	cmp	r2, r3
 80121fe:	f4ff af3d 	bcc.w	801207c <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8012202:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8012204:	2b00      	cmp	r3, #0
 8012206:	d02c      	beq.n	8012262 <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8012208:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801220a:	685b      	ldr	r3, [r3, #4]
 801220c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801220e:	e01e      	b.n	801224e <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 8012210:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012212:	891a      	ldrh	r2, [r3, #8]
 8012214:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8012216:	4413      	add	r3, r2
 8012218:	b29a      	uxth	r2, r3
 801221a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801221c:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 801221e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012220:	681b      	ldr	r3, [r3, #0]
 8012222:	2b00      	cmp	r3, #0
 8012224:	d110      	bne.n	8012248 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8012226:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012228:	685b      	ldr	r3, [r3, #4]
 801222a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801222c:	8952      	ldrh	r2, [r2, #10]
 801222e:	4413      	add	r3, r2
 8012230:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8012232:	68b9      	ldr	r1, [r7, #8]
 8012234:	4618      	mov	r0, r3
 8012236:	f004 fe28 	bl	8016e8a <memcpy>
        p->len += oversize_used;
 801223a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801223c:	895a      	ldrh	r2, [r3, #10]
 801223e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8012240:	4413      	add	r3, r2
 8012242:	b29a      	uxth	r2, r3
 8012244:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012246:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8012248:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801224a:	681b      	ldr	r3, [r3, #0]
 801224c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801224e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012250:	2b00      	cmp	r3, #0
 8012252:	d1dd      	bne.n	8012210 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 8012254:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012256:	891a      	ldrh	r2, [r3, #8]
 8012258:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801225a:	4413      	add	r3, r2
 801225c:	b29a      	uxth	r2, r3
 801225e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012260:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8012262:	8a7a      	ldrh	r2, [r7, #18]
 8012264:	68fb      	ldr	r3, [r7, #12]
 8012266:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 801226a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801226c:	2b00      	cmp	r3, #0
 801226e:	d018      	beq.n	80122a2 <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8012270:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012272:	2b00      	cmp	r3, #0
 8012274:	d106      	bne.n	8012284 <tcp_write+0x508>
 8012276:	4b2a      	ldr	r3, [pc, #168]	@ (8012320 <tcp_write+0x5a4>)
 8012278:	f44f 7238 	mov.w	r2, #736	@ 0x2e0
 801227c:	492d      	ldr	r1, [pc, #180]	@ (8012334 <tcp_write+0x5b8>)
 801227e:	482a      	ldr	r0, [pc, #168]	@ (8012328 <tcp_write+0x5ac>)
 8012280:	f004 fcd2 	bl	8016c28 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8012284:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012286:	685b      	ldr	r3, [r3, #4]
 8012288:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801228a:	4618      	mov	r0, r3
 801228c:	f7fb f85a 	bl	800d344 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8012290:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012292:	891a      	ldrh	r2, [r3, #8]
 8012294:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012296:	891b      	ldrh	r3, [r3, #8]
 8012298:	4413      	add	r3, r2
 801229a:	b29a      	uxth	r2, r3
 801229c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801229e:	811a      	strh	r2, [r3, #8]
 80122a0:	e037      	b.n	8012312 <tcp_write+0x596>
  } else if (extendlen > 0) {
 80122a2:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80122a4:	2b00      	cmp	r3, #0
 80122a6:	d034      	beq.n	8012312 <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 80122a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80122aa:	2b00      	cmp	r3, #0
 80122ac:	d003      	beq.n	80122b6 <tcp_write+0x53a>
 80122ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80122b0:	685b      	ldr	r3, [r3, #4]
 80122b2:	2b00      	cmp	r3, #0
 80122b4:	d106      	bne.n	80122c4 <tcp_write+0x548>
 80122b6:	4b1a      	ldr	r3, [pc, #104]	@ (8012320 <tcp_write+0x5a4>)
 80122b8:	f240 22e6 	movw	r2, #742	@ 0x2e6
 80122bc:	491e      	ldr	r1, [pc, #120]	@ (8012338 <tcp_write+0x5bc>)
 80122be:	481a      	ldr	r0, [pc, #104]	@ (8012328 <tcp_write+0x5ac>)
 80122c0:	f004 fcb2 	bl	8016c28 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80122c4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80122c6:	685b      	ldr	r3, [r3, #4]
 80122c8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80122ca:	e009      	b.n	80122e0 <tcp_write+0x564>
      p->tot_len += extendlen;
 80122cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80122ce:	891a      	ldrh	r2, [r3, #8]
 80122d0:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80122d2:	4413      	add	r3, r2
 80122d4:	b29a      	uxth	r2, r3
 80122d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80122d8:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80122da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80122dc:	681b      	ldr	r3, [r3, #0]
 80122de:	62bb      	str	r3, [r7, #40]	@ 0x28
 80122e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80122e2:	681b      	ldr	r3, [r3, #0]
 80122e4:	2b00      	cmp	r3, #0
 80122e6:	d1f1      	bne.n	80122cc <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 80122e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80122ea:	891a      	ldrh	r2, [r3, #8]
 80122ec:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80122ee:	4413      	add	r3, r2
 80122f0:	b29a      	uxth	r2, r3
 80122f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80122f4:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 80122f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80122f8:	895a      	ldrh	r2, [r3, #10]
 80122fa:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80122fc:	4413      	add	r3, r2
 80122fe:	b29a      	uxth	r2, r3
 8012300:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012302:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8012304:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012306:	891a      	ldrh	r2, [r3, #8]
 8012308:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801230a:	4413      	add	r3, r2
 801230c:	b29a      	uxth	r2, r3
 801230e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012310:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8012312:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012314:	2b00      	cmp	r3, #0
 8012316:	d111      	bne.n	801233c <tcp_write+0x5c0>
    pcb->unsent = queue;
 8012318:	68fb      	ldr	r3, [r7, #12]
 801231a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801231c:	66da      	str	r2, [r3, #108]	@ 0x6c
 801231e:	e010      	b.n	8012342 <tcp_write+0x5c6>
 8012320:	08019f0c 	.word	0x08019f0c
 8012324:	0801a1ac 	.word	0x0801a1ac
 8012328:	08019f60 	.word	0x08019f60
 801232c:	0801a1ec 	.word	0x0801a1ec
 8012330:	0801a1fc 	.word	0x0801a1fc
 8012334:	0801a210 	.word	0x0801a210
 8012338:	0801a248 	.word	0x0801a248
  } else {
    last_unsent->next = queue;
 801233c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801233e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8012340:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8012342:	68fb      	ldr	r3, [r7, #12]
 8012344:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8012346:	88fb      	ldrh	r3, [r7, #6]
 8012348:	441a      	add	r2, r3
 801234a:	68fb      	ldr	r3, [r7, #12]
 801234c:	65da      	str	r2, [r3, #92]	@ 0x5c
  pcb->snd_buf -= len;
 801234e:	68fb      	ldr	r3, [r7, #12]
 8012350:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 8012354:	88fb      	ldrh	r3, [r7, #6]
 8012356:	1ad3      	subs	r3, r2, r3
 8012358:	b29a      	uxth	r2, r3
 801235a:	68fb      	ldr	r3, [r7, #12]
 801235c:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  pcb->snd_queuelen = queuelen;
 8012360:	68fb      	ldr	r3, [r7, #12]
 8012362:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8012366:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801236a:	68fb      	ldr	r3, [r7, #12]
 801236c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8012370:	2b00      	cmp	r3, #0
 8012372:	d00e      	beq.n	8012392 <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 8012374:	68fb      	ldr	r3, [r7, #12]
 8012376:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012378:	2b00      	cmp	r3, #0
 801237a:	d10a      	bne.n	8012392 <tcp_write+0x616>
 801237c:	68fb      	ldr	r3, [r7, #12]
 801237e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012380:	2b00      	cmp	r3, #0
 8012382:	d106      	bne.n	8012392 <tcp_write+0x616>
 8012384:	4b2c      	ldr	r3, [pc, #176]	@ (8012438 <tcp_write+0x6bc>)
 8012386:	f240 3212 	movw	r2, #786	@ 0x312
 801238a:	492c      	ldr	r1, [pc, #176]	@ (801243c <tcp_write+0x6c0>)
 801238c:	482c      	ldr	r0, [pc, #176]	@ (8012440 <tcp_write+0x6c4>)
 801238e:	f004 fc4b 	bl	8016c28 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 8012392:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012394:	2b00      	cmp	r3, #0
 8012396:	d016      	beq.n	80123c6 <tcp_write+0x64a>
 8012398:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801239a:	68db      	ldr	r3, [r3, #12]
 801239c:	2b00      	cmp	r3, #0
 801239e:	d012      	beq.n	80123c6 <tcp_write+0x64a>
 80123a0:	797b      	ldrb	r3, [r7, #5]
 80123a2:	f003 0302 	and.w	r3, r3, #2
 80123a6:	2b00      	cmp	r3, #0
 80123a8:	d10d      	bne.n	80123c6 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 80123aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80123ac:	68db      	ldr	r3, [r3, #12]
 80123ae:	899b      	ldrh	r3, [r3, #12]
 80123b0:	b29c      	uxth	r4, r3
 80123b2:	2008      	movs	r0, #8
 80123b4:	f7f9 fb06 	bl	800b9c4 <lwip_htons>
 80123b8:	4603      	mov	r3, r0
 80123ba:	461a      	mov	r2, r3
 80123bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80123be:	68db      	ldr	r3, [r3, #12]
 80123c0:	4322      	orrs	r2, r4
 80123c2:	b292      	uxth	r2, r2
 80123c4:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 80123c6:	2300      	movs	r3, #0
 80123c8:	e031      	b.n	801242e <tcp_write+0x6b2>
          goto memerr;
 80123ca:	bf00      	nop
 80123cc:	e006      	b.n	80123dc <tcp_write+0x660>
            goto memerr;
 80123ce:	bf00      	nop
 80123d0:	e004      	b.n	80123dc <tcp_write+0x660>
        goto memerr;
 80123d2:	bf00      	nop
 80123d4:	e002      	b.n	80123dc <tcp_write+0x660>
        goto memerr;
 80123d6:	bf00      	nop
 80123d8:	e000      	b.n	80123dc <tcp_write+0x660>
      goto memerr;
 80123da:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80123dc:	68fb      	ldr	r3, [r7, #12]
 80123de:	8b5b      	ldrh	r3, [r3, #26]
 80123e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80123e4:	b29a      	uxth	r2, r3
 80123e6:	68fb      	ldr	r3, [r7, #12]
 80123e8:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 80123ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80123ec:	2b00      	cmp	r3, #0
 80123ee:	d002      	beq.n	80123f6 <tcp_write+0x67a>
    pbuf_free(concat_p);
 80123f0:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 80123f2:	f7fa fed9 	bl	800d1a8 <pbuf_free>
  }
  if (queue != NULL) {
 80123f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80123f8:	2b00      	cmp	r3, #0
 80123fa:	d002      	beq.n	8012402 <tcp_write+0x686>
    tcp_segs_free(queue);
 80123fc:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80123fe:	f7fc fb69 	bl	800ead4 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8012402:	68fb      	ldr	r3, [r7, #12]
 8012404:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8012408:	2b00      	cmp	r3, #0
 801240a:	d00e      	beq.n	801242a <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 801240c:	68fb      	ldr	r3, [r7, #12]
 801240e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012410:	2b00      	cmp	r3, #0
 8012412:	d10a      	bne.n	801242a <tcp_write+0x6ae>
 8012414:	68fb      	ldr	r3, [r7, #12]
 8012416:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012418:	2b00      	cmp	r3, #0
 801241a:	d106      	bne.n	801242a <tcp_write+0x6ae>
 801241c:	4b06      	ldr	r3, [pc, #24]	@ (8012438 <tcp_write+0x6bc>)
 801241e:	f240 3227 	movw	r2, #807	@ 0x327
 8012422:	4906      	ldr	r1, [pc, #24]	@ (801243c <tcp_write+0x6c0>)
 8012424:	4806      	ldr	r0, [pc, #24]	@ (8012440 <tcp_write+0x6c4>)
 8012426:	f004 fbff 	bl	8016c28 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 801242a:	f04f 33ff 	mov.w	r3, #4294967295
}
 801242e:	4618      	mov	r0, r3
 8012430:	375c      	adds	r7, #92	@ 0x5c
 8012432:	46bd      	mov	sp, r7
 8012434:	bd90      	pop	{r4, r7, pc}
 8012436:	bf00      	nop
 8012438:	08019f0c 	.word	0x08019f0c
 801243c:	0801a280 	.word	0x0801a280
 8012440:	08019f60 	.word	0x08019f60

08012444 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8012444:	b590      	push	{r4, r7, lr}
 8012446:	b08b      	sub	sp, #44	@ 0x2c
 8012448:	af02      	add	r7, sp, #8
 801244a:	6078      	str	r0, [r7, #4]
 801244c:	460b      	mov	r3, r1
 801244e:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8012450:	2300      	movs	r3, #0
 8012452:	61fb      	str	r3, [r7, #28]
 8012454:	2300      	movs	r3, #0
 8012456:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8012458:	2300      	movs	r3, #0
 801245a:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 801245c:	687b      	ldr	r3, [r7, #4]
 801245e:	2b00      	cmp	r3, #0
 8012460:	d106      	bne.n	8012470 <tcp_split_unsent_seg+0x2c>
 8012462:	4b95      	ldr	r3, [pc, #596]	@ (80126b8 <tcp_split_unsent_seg+0x274>)
 8012464:	f240 324b 	movw	r2, #843	@ 0x34b
 8012468:	4994      	ldr	r1, [pc, #592]	@ (80126bc <tcp_split_unsent_seg+0x278>)
 801246a:	4895      	ldr	r0, [pc, #596]	@ (80126c0 <tcp_split_unsent_seg+0x27c>)
 801246c:	f004 fbdc 	bl	8016c28 <iprintf>

  useg = pcb->unsent;
 8012470:	687b      	ldr	r3, [r7, #4]
 8012472:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012474:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8012476:	697b      	ldr	r3, [r7, #20]
 8012478:	2b00      	cmp	r3, #0
 801247a:	d102      	bne.n	8012482 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 801247c:	f04f 33ff 	mov.w	r3, #4294967295
 8012480:	e116      	b.n	80126b0 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8012482:	887b      	ldrh	r3, [r7, #2]
 8012484:	2b00      	cmp	r3, #0
 8012486:	d109      	bne.n	801249c <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8012488:	4b8b      	ldr	r3, [pc, #556]	@ (80126b8 <tcp_split_unsent_seg+0x274>)
 801248a:	f240 3253 	movw	r2, #851	@ 0x353
 801248e:	498d      	ldr	r1, [pc, #564]	@ (80126c4 <tcp_split_unsent_seg+0x280>)
 8012490:	488b      	ldr	r0, [pc, #556]	@ (80126c0 <tcp_split_unsent_seg+0x27c>)
 8012492:	f004 fbc9 	bl	8016c28 <iprintf>
    return ERR_VAL;
 8012496:	f06f 0305 	mvn.w	r3, #5
 801249a:	e109      	b.n	80126b0 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 801249c:	697b      	ldr	r3, [r7, #20]
 801249e:	891b      	ldrh	r3, [r3, #8]
 80124a0:	887a      	ldrh	r2, [r7, #2]
 80124a2:	429a      	cmp	r2, r3
 80124a4:	d301      	bcc.n	80124aa <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 80124a6:	2300      	movs	r3, #0
 80124a8:	e102      	b.n	80126b0 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 80124aa:	687b      	ldr	r3, [r7, #4]
 80124ac:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80124ae:	887a      	ldrh	r2, [r7, #2]
 80124b0:	429a      	cmp	r2, r3
 80124b2:	d906      	bls.n	80124c2 <tcp_split_unsent_seg+0x7e>
 80124b4:	4b80      	ldr	r3, [pc, #512]	@ (80126b8 <tcp_split_unsent_seg+0x274>)
 80124b6:	f240 325b 	movw	r2, #859	@ 0x35b
 80124ba:	4983      	ldr	r1, [pc, #524]	@ (80126c8 <tcp_split_unsent_seg+0x284>)
 80124bc:	4880      	ldr	r0, [pc, #512]	@ (80126c0 <tcp_split_unsent_seg+0x27c>)
 80124be:	f004 fbb3 	bl	8016c28 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 80124c2:	697b      	ldr	r3, [r7, #20]
 80124c4:	891b      	ldrh	r3, [r3, #8]
 80124c6:	2b00      	cmp	r3, #0
 80124c8:	d106      	bne.n	80124d8 <tcp_split_unsent_seg+0x94>
 80124ca:	4b7b      	ldr	r3, [pc, #492]	@ (80126b8 <tcp_split_unsent_seg+0x274>)
 80124cc:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 80124d0:	497e      	ldr	r1, [pc, #504]	@ (80126cc <tcp_split_unsent_seg+0x288>)
 80124d2:	487b      	ldr	r0, [pc, #492]	@ (80126c0 <tcp_split_unsent_seg+0x27c>)
 80124d4:	f004 fba8 	bl	8016c28 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 80124d8:	697b      	ldr	r3, [r7, #20]
 80124da:	7a9b      	ldrb	r3, [r3, #10]
 80124dc:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 80124de:	7bfb      	ldrb	r3, [r7, #15]
 80124e0:	009b      	lsls	r3, r3, #2
 80124e2:	b2db      	uxtb	r3, r3
 80124e4:	f003 0304 	and.w	r3, r3, #4
 80124e8:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 80124ea:	697b      	ldr	r3, [r7, #20]
 80124ec:	891a      	ldrh	r2, [r3, #8]
 80124ee:	887b      	ldrh	r3, [r7, #2]
 80124f0:	1ad3      	subs	r3, r2, r3
 80124f2:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 80124f4:	7bbb      	ldrb	r3, [r7, #14]
 80124f6:	b29a      	uxth	r2, r3
 80124f8:	89bb      	ldrh	r3, [r7, #12]
 80124fa:	4413      	add	r3, r2
 80124fc:	b29b      	uxth	r3, r3
 80124fe:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8012502:	4619      	mov	r1, r3
 8012504:	2036      	movs	r0, #54	@ 0x36
 8012506:	f7fa fb6b 	bl	800cbe0 <pbuf_alloc>
 801250a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801250c:	693b      	ldr	r3, [r7, #16]
 801250e:	2b00      	cmp	r3, #0
 8012510:	f000 80b7 	beq.w	8012682 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8012514:	697b      	ldr	r3, [r7, #20]
 8012516:	685b      	ldr	r3, [r3, #4]
 8012518:	891a      	ldrh	r2, [r3, #8]
 801251a:	697b      	ldr	r3, [r7, #20]
 801251c:	891b      	ldrh	r3, [r3, #8]
 801251e:	1ad3      	subs	r3, r2, r3
 8012520:	b29a      	uxth	r2, r3
 8012522:	887b      	ldrh	r3, [r7, #2]
 8012524:	4413      	add	r3, r2
 8012526:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8012528:	697b      	ldr	r3, [r7, #20]
 801252a:	6858      	ldr	r0, [r3, #4]
 801252c:	693b      	ldr	r3, [r7, #16]
 801252e:	685a      	ldr	r2, [r3, #4]
 8012530:	7bbb      	ldrb	r3, [r7, #14]
 8012532:	18d1      	adds	r1, r2, r3
 8012534:	897b      	ldrh	r3, [r7, #10]
 8012536:	89ba      	ldrh	r2, [r7, #12]
 8012538:	f7fb f82c 	bl	800d594 <pbuf_copy_partial>
 801253c:	4603      	mov	r3, r0
 801253e:	461a      	mov	r2, r3
 8012540:	89bb      	ldrh	r3, [r7, #12]
 8012542:	4293      	cmp	r3, r2
 8012544:	f040 809f 	bne.w	8012686 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8012548:	697b      	ldr	r3, [r7, #20]
 801254a:	68db      	ldr	r3, [r3, #12]
 801254c:	899b      	ldrh	r3, [r3, #12]
 801254e:	b29b      	uxth	r3, r3
 8012550:	4618      	mov	r0, r3
 8012552:	f7f9 fa37 	bl	800b9c4 <lwip_htons>
 8012556:	4603      	mov	r3, r0
 8012558:	b2db      	uxtb	r3, r3
 801255a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801255e:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8012560:	2300      	movs	r3, #0
 8012562:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8012564:	7efb      	ldrb	r3, [r7, #27]
 8012566:	f003 0308 	and.w	r3, r3, #8
 801256a:	2b00      	cmp	r3, #0
 801256c:	d007      	beq.n	801257e <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 801256e:	7efb      	ldrb	r3, [r7, #27]
 8012570:	f023 0308 	bic.w	r3, r3, #8
 8012574:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8012576:	7ebb      	ldrb	r3, [r7, #26]
 8012578:	f043 0308 	orr.w	r3, r3, #8
 801257c:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 801257e:	7efb      	ldrb	r3, [r7, #27]
 8012580:	f003 0301 	and.w	r3, r3, #1
 8012584:	2b00      	cmp	r3, #0
 8012586:	d007      	beq.n	8012598 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8012588:	7efb      	ldrb	r3, [r7, #27]
 801258a:	f023 0301 	bic.w	r3, r3, #1
 801258e:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8012590:	7ebb      	ldrb	r3, [r7, #26]
 8012592:	f043 0301 	orr.w	r3, r3, #1
 8012596:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8012598:	697b      	ldr	r3, [r7, #20]
 801259a:	68db      	ldr	r3, [r3, #12]
 801259c:	685b      	ldr	r3, [r3, #4]
 801259e:	4618      	mov	r0, r3
 80125a0:	f7f9 fa25 	bl	800b9ee <lwip_htonl>
 80125a4:	4602      	mov	r2, r0
 80125a6:	887b      	ldrh	r3, [r7, #2]
 80125a8:	18d1      	adds	r1, r2, r3
 80125aa:	7eba      	ldrb	r2, [r7, #26]
 80125ac:	7bfb      	ldrb	r3, [r7, #15]
 80125ae:	9300      	str	r3, [sp, #0]
 80125b0:	460b      	mov	r3, r1
 80125b2:	6939      	ldr	r1, [r7, #16]
 80125b4:	6878      	ldr	r0, [r7, #4]
 80125b6:	f7ff fa51 	bl	8011a5c <tcp_create_segment>
 80125ba:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 80125bc:	69fb      	ldr	r3, [r7, #28]
 80125be:	2b00      	cmp	r3, #0
 80125c0:	d063      	beq.n	801268a <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 80125c2:	697b      	ldr	r3, [r7, #20]
 80125c4:	685b      	ldr	r3, [r3, #4]
 80125c6:	4618      	mov	r0, r3
 80125c8:	f7fa fe7c 	bl	800d2c4 <pbuf_clen>
 80125cc:	4603      	mov	r3, r0
 80125ce:	461a      	mov	r2, r3
 80125d0:	687b      	ldr	r3, [r7, #4]
 80125d2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80125d6:	1a9b      	subs	r3, r3, r2
 80125d8:	b29a      	uxth	r2, r3
 80125da:	687b      	ldr	r3, [r7, #4]
 80125dc:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 80125e0:	697b      	ldr	r3, [r7, #20]
 80125e2:	6858      	ldr	r0, [r3, #4]
 80125e4:	697b      	ldr	r3, [r7, #20]
 80125e6:	685b      	ldr	r3, [r3, #4]
 80125e8:	891a      	ldrh	r2, [r3, #8]
 80125ea:	89bb      	ldrh	r3, [r7, #12]
 80125ec:	1ad3      	subs	r3, r2, r3
 80125ee:	b29b      	uxth	r3, r3
 80125f0:	4619      	mov	r1, r3
 80125f2:	f7fa fc53 	bl	800ce9c <pbuf_realloc>
  useg->len -= remainder;
 80125f6:	697b      	ldr	r3, [r7, #20]
 80125f8:	891a      	ldrh	r2, [r3, #8]
 80125fa:	89bb      	ldrh	r3, [r7, #12]
 80125fc:	1ad3      	subs	r3, r2, r3
 80125fe:	b29a      	uxth	r2, r3
 8012600:	697b      	ldr	r3, [r7, #20]
 8012602:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8012604:	697b      	ldr	r3, [r7, #20]
 8012606:	68db      	ldr	r3, [r3, #12]
 8012608:	899b      	ldrh	r3, [r3, #12]
 801260a:	b29c      	uxth	r4, r3
 801260c:	7efb      	ldrb	r3, [r7, #27]
 801260e:	b29b      	uxth	r3, r3
 8012610:	4618      	mov	r0, r3
 8012612:	f7f9 f9d7 	bl	800b9c4 <lwip_htons>
 8012616:	4603      	mov	r3, r0
 8012618:	461a      	mov	r2, r3
 801261a:	697b      	ldr	r3, [r7, #20]
 801261c:	68db      	ldr	r3, [r3, #12]
 801261e:	4322      	orrs	r2, r4
 8012620:	b292      	uxth	r2, r2
 8012622:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8012624:	697b      	ldr	r3, [r7, #20]
 8012626:	685b      	ldr	r3, [r3, #4]
 8012628:	4618      	mov	r0, r3
 801262a:	f7fa fe4b 	bl	800d2c4 <pbuf_clen>
 801262e:	4603      	mov	r3, r0
 8012630:	461a      	mov	r2, r3
 8012632:	687b      	ldr	r3, [r7, #4]
 8012634:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8012638:	4413      	add	r3, r2
 801263a:	b29a      	uxth	r2, r3
 801263c:	687b      	ldr	r3, [r7, #4]
 801263e:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8012642:	69fb      	ldr	r3, [r7, #28]
 8012644:	685b      	ldr	r3, [r3, #4]
 8012646:	4618      	mov	r0, r3
 8012648:	f7fa fe3c 	bl	800d2c4 <pbuf_clen>
 801264c:	4603      	mov	r3, r0
 801264e:	461a      	mov	r2, r3
 8012650:	687b      	ldr	r3, [r7, #4]
 8012652:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8012656:	4413      	add	r3, r2
 8012658:	b29a      	uxth	r2, r3
 801265a:	687b      	ldr	r3, [r7, #4]
 801265c:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8012660:	697b      	ldr	r3, [r7, #20]
 8012662:	681a      	ldr	r2, [r3, #0]
 8012664:	69fb      	ldr	r3, [r7, #28]
 8012666:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8012668:	697b      	ldr	r3, [r7, #20]
 801266a:	69fa      	ldr	r2, [r7, #28]
 801266c:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 801266e:	69fb      	ldr	r3, [r7, #28]
 8012670:	681b      	ldr	r3, [r3, #0]
 8012672:	2b00      	cmp	r3, #0
 8012674:	d103      	bne.n	801267e <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8012676:	687b      	ldr	r3, [r7, #4]
 8012678:	2200      	movs	r2, #0
 801267a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 801267e:	2300      	movs	r3, #0
 8012680:	e016      	b.n	80126b0 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8012682:	bf00      	nop
 8012684:	e002      	b.n	801268c <tcp_split_unsent_seg+0x248>
    goto memerr;
 8012686:	bf00      	nop
 8012688:	e000      	b.n	801268c <tcp_split_unsent_seg+0x248>
    goto memerr;
 801268a:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 801268c:	69fb      	ldr	r3, [r7, #28]
 801268e:	2b00      	cmp	r3, #0
 8012690:	d006      	beq.n	80126a0 <tcp_split_unsent_seg+0x25c>
 8012692:	4b09      	ldr	r3, [pc, #36]	@ (80126b8 <tcp_split_unsent_seg+0x274>)
 8012694:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 8012698:	490d      	ldr	r1, [pc, #52]	@ (80126d0 <tcp_split_unsent_seg+0x28c>)
 801269a:	4809      	ldr	r0, [pc, #36]	@ (80126c0 <tcp_split_unsent_seg+0x27c>)
 801269c:	f004 fac4 	bl	8016c28 <iprintf>
  if (p != NULL) {
 80126a0:	693b      	ldr	r3, [r7, #16]
 80126a2:	2b00      	cmp	r3, #0
 80126a4:	d002      	beq.n	80126ac <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 80126a6:	6938      	ldr	r0, [r7, #16]
 80126a8:	f7fa fd7e 	bl	800d1a8 <pbuf_free>
  }

  return ERR_MEM;
 80126ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 80126b0:	4618      	mov	r0, r3
 80126b2:	3724      	adds	r7, #36	@ 0x24
 80126b4:	46bd      	mov	sp, r7
 80126b6:	bd90      	pop	{r4, r7, pc}
 80126b8:	08019f0c 	.word	0x08019f0c
 80126bc:	0801a2a0 	.word	0x0801a2a0
 80126c0:	08019f60 	.word	0x08019f60
 80126c4:	0801a2c4 	.word	0x0801a2c4
 80126c8:	0801a2e8 	.word	0x0801a2e8
 80126cc:	0801a2f8 	.word	0x0801a2f8
 80126d0:	0801a308 	.word	0x0801a308

080126d4 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 80126d4:	b590      	push	{r4, r7, lr}
 80126d6:	b085      	sub	sp, #20
 80126d8:	af00      	add	r7, sp, #0
 80126da:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 80126dc:	687b      	ldr	r3, [r7, #4]
 80126de:	2b00      	cmp	r3, #0
 80126e0:	d106      	bne.n	80126f0 <tcp_send_fin+0x1c>
 80126e2:	4b21      	ldr	r3, [pc, #132]	@ (8012768 <tcp_send_fin+0x94>)
 80126e4:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 80126e8:	4920      	ldr	r1, [pc, #128]	@ (801276c <tcp_send_fin+0x98>)
 80126ea:	4821      	ldr	r0, [pc, #132]	@ (8012770 <tcp_send_fin+0x9c>)
 80126ec:	f004 fa9c 	bl	8016c28 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 80126f0:	687b      	ldr	r3, [r7, #4]
 80126f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80126f4:	2b00      	cmp	r3, #0
 80126f6:	d02e      	beq.n	8012756 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80126f8:	687b      	ldr	r3, [r7, #4]
 80126fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80126fc:	60fb      	str	r3, [r7, #12]
 80126fe:	e002      	b.n	8012706 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8012700:	68fb      	ldr	r3, [r7, #12]
 8012702:	681b      	ldr	r3, [r3, #0]
 8012704:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8012706:	68fb      	ldr	r3, [r7, #12]
 8012708:	681b      	ldr	r3, [r3, #0]
 801270a:	2b00      	cmp	r3, #0
 801270c:	d1f8      	bne.n	8012700 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801270e:	68fb      	ldr	r3, [r7, #12]
 8012710:	68db      	ldr	r3, [r3, #12]
 8012712:	899b      	ldrh	r3, [r3, #12]
 8012714:	b29b      	uxth	r3, r3
 8012716:	4618      	mov	r0, r3
 8012718:	f7f9 f954 	bl	800b9c4 <lwip_htons>
 801271c:	4603      	mov	r3, r0
 801271e:	b2db      	uxtb	r3, r3
 8012720:	f003 0307 	and.w	r3, r3, #7
 8012724:	2b00      	cmp	r3, #0
 8012726:	d116      	bne.n	8012756 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8012728:	68fb      	ldr	r3, [r7, #12]
 801272a:	68db      	ldr	r3, [r3, #12]
 801272c:	899b      	ldrh	r3, [r3, #12]
 801272e:	b29c      	uxth	r4, r3
 8012730:	2001      	movs	r0, #1
 8012732:	f7f9 f947 	bl	800b9c4 <lwip_htons>
 8012736:	4603      	mov	r3, r0
 8012738:	461a      	mov	r2, r3
 801273a:	68fb      	ldr	r3, [r7, #12]
 801273c:	68db      	ldr	r3, [r3, #12]
 801273e:	4322      	orrs	r2, r4
 8012740:	b292      	uxth	r2, r2
 8012742:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8012744:	687b      	ldr	r3, [r7, #4]
 8012746:	8b5b      	ldrh	r3, [r3, #26]
 8012748:	f043 0320 	orr.w	r3, r3, #32
 801274c:	b29a      	uxth	r2, r3
 801274e:	687b      	ldr	r3, [r7, #4]
 8012750:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8012752:	2300      	movs	r3, #0
 8012754:	e004      	b.n	8012760 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8012756:	2101      	movs	r1, #1
 8012758:	6878      	ldr	r0, [r7, #4]
 801275a:	f000 f80b 	bl	8012774 <tcp_enqueue_flags>
 801275e:	4603      	mov	r3, r0
}
 8012760:	4618      	mov	r0, r3
 8012762:	3714      	adds	r7, #20
 8012764:	46bd      	mov	sp, r7
 8012766:	bd90      	pop	{r4, r7, pc}
 8012768:	08019f0c 	.word	0x08019f0c
 801276c:	0801a314 	.word	0x0801a314
 8012770:	08019f60 	.word	0x08019f60

08012774 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8012774:	b580      	push	{r7, lr}
 8012776:	b08a      	sub	sp, #40	@ 0x28
 8012778:	af02      	add	r7, sp, #8
 801277a:	6078      	str	r0, [r7, #4]
 801277c:	460b      	mov	r3, r1
 801277e:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8012780:	2300      	movs	r3, #0
 8012782:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8012784:	2300      	movs	r3, #0
 8012786:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8012788:	78fb      	ldrb	r3, [r7, #3]
 801278a:	f003 0303 	and.w	r3, r3, #3
 801278e:	2b00      	cmp	r3, #0
 8012790:	d106      	bne.n	80127a0 <tcp_enqueue_flags+0x2c>
 8012792:	4b67      	ldr	r3, [pc, #412]	@ (8012930 <tcp_enqueue_flags+0x1bc>)
 8012794:	f240 4211 	movw	r2, #1041	@ 0x411
 8012798:	4966      	ldr	r1, [pc, #408]	@ (8012934 <tcp_enqueue_flags+0x1c0>)
 801279a:	4867      	ldr	r0, [pc, #412]	@ (8012938 <tcp_enqueue_flags+0x1c4>)
 801279c:	f004 fa44 	bl	8016c28 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 80127a0:	687b      	ldr	r3, [r7, #4]
 80127a2:	2b00      	cmp	r3, #0
 80127a4:	d106      	bne.n	80127b4 <tcp_enqueue_flags+0x40>
 80127a6:	4b62      	ldr	r3, [pc, #392]	@ (8012930 <tcp_enqueue_flags+0x1bc>)
 80127a8:	f240 4213 	movw	r2, #1043	@ 0x413
 80127ac:	4963      	ldr	r1, [pc, #396]	@ (801293c <tcp_enqueue_flags+0x1c8>)
 80127ae:	4862      	ldr	r0, [pc, #392]	@ (8012938 <tcp_enqueue_flags+0x1c4>)
 80127b0:	f004 fa3a 	bl	8016c28 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 80127b4:	78fb      	ldrb	r3, [r7, #3]
 80127b6:	f003 0302 	and.w	r3, r3, #2
 80127ba:	2b00      	cmp	r3, #0
 80127bc:	d001      	beq.n	80127c2 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 80127be:	2301      	movs	r3, #1
 80127c0:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80127c2:	7ffb      	ldrb	r3, [r7, #31]
 80127c4:	009b      	lsls	r3, r3, #2
 80127c6:	b2db      	uxtb	r3, r3
 80127c8:	f003 0304 	and.w	r3, r3, #4
 80127cc:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80127ce:	7dfb      	ldrb	r3, [r7, #23]
 80127d0:	b29b      	uxth	r3, r3
 80127d2:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80127d6:	4619      	mov	r1, r3
 80127d8:	2036      	movs	r0, #54	@ 0x36
 80127da:	f7fa fa01 	bl	800cbe0 <pbuf_alloc>
 80127de:	6138      	str	r0, [r7, #16]
 80127e0:	693b      	ldr	r3, [r7, #16]
 80127e2:	2b00      	cmp	r3, #0
 80127e4:	d109      	bne.n	80127fa <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80127e6:	687b      	ldr	r3, [r7, #4]
 80127e8:	8b5b      	ldrh	r3, [r3, #26]
 80127ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80127ee:	b29a      	uxth	r2, r3
 80127f0:	687b      	ldr	r3, [r7, #4]
 80127f2:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80127f4:	f04f 33ff 	mov.w	r3, #4294967295
 80127f8:	e095      	b.n	8012926 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 80127fa:	693b      	ldr	r3, [r7, #16]
 80127fc:	895a      	ldrh	r2, [r3, #10]
 80127fe:	7dfb      	ldrb	r3, [r7, #23]
 8012800:	b29b      	uxth	r3, r3
 8012802:	429a      	cmp	r2, r3
 8012804:	d206      	bcs.n	8012814 <tcp_enqueue_flags+0xa0>
 8012806:	4b4a      	ldr	r3, [pc, #296]	@ (8012930 <tcp_enqueue_flags+0x1bc>)
 8012808:	f240 4239 	movw	r2, #1081	@ 0x439
 801280c:	494c      	ldr	r1, [pc, #304]	@ (8012940 <tcp_enqueue_flags+0x1cc>)
 801280e:	484a      	ldr	r0, [pc, #296]	@ (8012938 <tcp_enqueue_flags+0x1c4>)
 8012810:	f004 fa0a 	bl	8016c28 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8012814:	687b      	ldr	r3, [r7, #4]
 8012816:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 8012818:	78fa      	ldrb	r2, [r7, #3]
 801281a:	7ffb      	ldrb	r3, [r7, #31]
 801281c:	9300      	str	r3, [sp, #0]
 801281e:	460b      	mov	r3, r1
 8012820:	6939      	ldr	r1, [r7, #16]
 8012822:	6878      	ldr	r0, [r7, #4]
 8012824:	f7ff f91a 	bl	8011a5c <tcp_create_segment>
 8012828:	60f8      	str	r0, [r7, #12]
 801282a:	68fb      	ldr	r3, [r7, #12]
 801282c:	2b00      	cmp	r3, #0
 801282e:	d109      	bne.n	8012844 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012830:	687b      	ldr	r3, [r7, #4]
 8012832:	8b5b      	ldrh	r3, [r3, #26]
 8012834:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012838:	b29a      	uxth	r2, r3
 801283a:	687b      	ldr	r3, [r7, #4]
 801283c:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801283e:	f04f 33ff 	mov.w	r3, #4294967295
 8012842:	e070      	b.n	8012926 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8012844:	68fb      	ldr	r3, [r7, #12]
 8012846:	68db      	ldr	r3, [r3, #12]
 8012848:	f003 0303 	and.w	r3, r3, #3
 801284c:	2b00      	cmp	r3, #0
 801284e:	d006      	beq.n	801285e <tcp_enqueue_flags+0xea>
 8012850:	4b37      	ldr	r3, [pc, #220]	@ (8012930 <tcp_enqueue_flags+0x1bc>)
 8012852:	f240 4242 	movw	r2, #1090	@ 0x442
 8012856:	493b      	ldr	r1, [pc, #236]	@ (8012944 <tcp_enqueue_flags+0x1d0>)
 8012858:	4837      	ldr	r0, [pc, #220]	@ (8012938 <tcp_enqueue_flags+0x1c4>)
 801285a:	f004 f9e5 	bl	8016c28 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801285e:	68fb      	ldr	r3, [r7, #12]
 8012860:	891b      	ldrh	r3, [r3, #8]
 8012862:	2b00      	cmp	r3, #0
 8012864:	d006      	beq.n	8012874 <tcp_enqueue_flags+0x100>
 8012866:	4b32      	ldr	r3, [pc, #200]	@ (8012930 <tcp_enqueue_flags+0x1bc>)
 8012868:	f240 4243 	movw	r2, #1091	@ 0x443
 801286c:	4936      	ldr	r1, [pc, #216]	@ (8012948 <tcp_enqueue_flags+0x1d4>)
 801286e:	4832      	ldr	r0, [pc, #200]	@ (8012938 <tcp_enqueue_flags+0x1c4>)
 8012870:	f004 f9da 	bl	8016c28 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8012874:	687b      	ldr	r3, [r7, #4]
 8012876:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012878:	2b00      	cmp	r3, #0
 801287a:	d103      	bne.n	8012884 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 801287c:	687b      	ldr	r3, [r7, #4]
 801287e:	68fa      	ldr	r2, [r7, #12]
 8012880:	66da      	str	r2, [r3, #108]	@ 0x6c
 8012882:	e00d      	b.n	80128a0 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8012884:	687b      	ldr	r3, [r7, #4]
 8012886:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012888:	61bb      	str	r3, [r7, #24]
 801288a:	e002      	b.n	8012892 <tcp_enqueue_flags+0x11e>
 801288c:	69bb      	ldr	r3, [r7, #24]
 801288e:	681b      	ldr	r3, [r3, #0]
 8012890:	61bb      	str	r3, [r7, #24]
 8012892:	69bb      	ldr	r3, [r7, #24]
 8012894:	681b      	ldr	r3, [r3, #0]
 8012896:	2b00      	cmp	r3, #0
 8012898:	d1f8      	bne.n	801288c <tcp_enqueue_flags+0x118>
    useg->next = seg;
 801289a:	69bb      	ldr	r3, [r7, #24]
 801289c:	68fa      	ldr	r2, [r7, #12]
 801289e:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 80128a0:	687b      	ldr	r3, [r7, #4]
 80128a2:	2200      	movs	r2, #0
 80128a4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 80128a8:	78fb      	ldrb	r3, [r7, #3]
 80128aa:	f003 0302 	and.w	r3, r3, #2
 80128ae:	2b00      	cmp	r3, #0
 80128b0:	d104      	bne.n	80128bc <tcp_enqueue_flags+0x148>
 80128b2:	78fb      	ldrb	r3, [r7, #3]
 80128b4:	f003 0301 	and.w	r3, r3, #1
 80128b8:	2b00      	cmp	r3, #0
 80128ba:	d004      	beq.n	80128c6 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 80128bc:	687b      	ldr	r3, [r7, #4]
 80128be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80128c0:	1c5a      	adds	r2, r3, #1
 80128c2:	687b      	ldr	r3, [r7, #4]
 80128c4:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 80128c6:	78fb      	ldrb	r3, [r7, #3]
 80128c8:	f003 0301 	and.w	r3, r3, #1
 80128cc:	2b00      	cmp	r3, #0
 80128ce:	d006      	beq.n	80128de <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 80128d0:	687b      	ldr	r3, [r7, #4]
 80128d2:	8b5b      	ldrh	r3, [r3, #26]
 80128d4:	f043 0320 	orr.w	r3, r3, #32
 80128d8:	b29a      	uxth	r2, r3
 80128da:	687b      	ldr	r3, [r7, #4]
 80128dc:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80128de:	68fb      	ldr	r3, [r7, #12]
 80128e0:	685b      	ldr	r3, [r3, #4]
 80128e2:	4618      	mov	r0, r3
 80128e4:	f7fa fcee 	bl	800d2c4 <pbuf_clen>
 80128e8:	4603      	mov	r3, r0
 80128ea:	461a      	mov	r2, r3
 80128ec:	687b      	ldr	r3, [r7, #4]
 80128ee:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80128f2:	4413      	add	r3, r2
 80128f4:	b29a      	uxth	r2, r3
 80128f6:	687b      	ldr	r3, [r7, #4]
 80128f8:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80128fc:	687b      	ldr	r3, [r7, #4]
 80128fe:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8012902:	2b00      	cmp	r3, #0
 8012904:	d00e      	beq.n	8012924 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8012906:	687b      	ldr	r3, [r7, #4]
 8012908:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801290a:	2b00      	cmp	r3, #0
 801290c:	d10a      	bne.n	8012924 <tcp_enqueue_flags+0x1b0>
 801290e:	687b      	ldr	r3, [r7, #4]
 8012910:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012912:	2b00      	cmp	r3, #0
 8012914:	d106      	bne.n	8012924 <tcp_enqueue_flags+0x1b0>
 8012916:	4b06      	ldr	r3, [pc, #24]	@ (8012930 <tcp_enqueue_flags+0x1bc>)
 8012918:	f240 4265 	movw	r2, #1125	@ 0x465
 801291c:	490b      	ldr	r1, [pc, #44]	@ (801294c <tcp_enqueue_flags+0x1d8>)
 801291e:	4806      	ldr	r0, [pc, #24]	@ (8012938 <tcp_enqueue_flags+0x1c4>)
 8012920:	f004 f982 	bl	8016c28 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8012924:	2300      	movs	r3, #0
}
 8012926:	4618      	mov	r0, r3
 8012928:	3720      	adds	r7, #32
 801292a:	46bd      	mov	sp, r7
 801292c:	bd80      	pop	{r7, pc}
 801292e:	bf00      	nop
 8012930:	08019f0c 	.word	0x08019f0c
 8012934:	0801a330 	.word	0x0801a330
 8012938:	08019f60 	.word	0x08019f60
 801293c:	0801a388 	.word	0x0801a388
 8012940:	0801a3a8 	.word	0x0801a3a8
 8012944:	0801a3e4 	.word	0x0801a3e4
 8012948:	0801a3fc 	.word	0x0801a3fc
 801294c:	0801a428 	.word	0x0801a428

08012950 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8012950:	b5b0      	push	{r4, r5, r7, lr}
 8012952:	b08a      	sub	sp, #40	@ 0x28
 8012954:	af00      	add	r7, sp, #0
 8012956:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8012958:	687b      	ldr	r3, [r7, #4]
 801295a:	2b00      	cmp	r3, #0
 801295c:	d106      	bne.n	801296c <tcp_output+0x1c>
 801295e:	4b8a      	ldr	r3, [pc, #552]	@ (8012b88 <tcp_output+0x238>)
 8012960:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 8012964:	4989      	ldr	r1, [pc, #548]	@ (8012b8c <tcp_output+0x23c>)
 8012966:	488a      	ldr	r0, [pc, #552]	@ (8012b90 <tcp_output+0x240>)
 8012968:	f004 f95e 	bl	8016c28 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 801296c:	687b      	ldr	r3, [r7, #4]
 801296e:	7d1b      	ldrb	r3, [r3, #20]
 8012970:	2b01      	cmp	r3, #1
 8012972:	d106      	bne.n	8012982 <tcp_output+0x32>
 8012974:	4b84      	ldr	r3, [pc, #528]	@ (8012b88 <tcp_output+0x238>)
 8012976:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 801297a:	4986      	ldr	r1, [pc, #536]	@ (8012b94 <tcp_output+0x244>)
 801297c:	4884      	ldr	r0, [pc, #528]	@ (8012b90 <tcp_output+0x240>)
 801297e:	f004 f953 	bl	8016c28 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8012982:	4b85      	ldr	r3, [pc, #532]	@ (8012b98 <tcp_output+0x248>)
 8012984:	681b      	ldr	r3, [r3, #0]
 8012986:	687a      	ldr	r2, [r7, #4]
 8012988:	429a      	cmp	r2, r3
 801298a:	d101      	bne.n	8012990 <tcp_output+0x40>
    return ERR_OK;
 801298c:	2300      	movs	r3, #0
 801298e:	e1ce      	b.n	8012d2e <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8012990:	687b      	ldr	r3, [r7, #4]
 8012992:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8012996:	687b      	ldr	r3, [r7, #4]
 8012998:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801299c:	4293      	cmp	r3, r2
 801299e:	bf28      	it	cs
 80129a0:	4613      	movcs	r3, r2
 80129a2:	b29b      	uxth	r3, r3
 80129a4:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 80129a6:	687b      	ldr	r3, [r7, #4]
 80129a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80129aa:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 80129ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80129ae:	2b00      	cmp	r3, #0
 80129b0:	d10b      	bne.n	80129ca <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 80129b2:	687b      	ldr	r3, [r7, #4]
 80129b4:	8b5b      	ldrh	r3, [r3, #26]
 80129b6:	f003 0302 	and.w	r3, r3, #2
 80129ba:	2b00      	cmp	r3, #0
 80129bc:	f000 81aa 	beq.w	8012d14 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 80129c0:	6878      	ldr	r0, [r7, #4]
 80129c2:	f000 fdcb 	bl	801355c <tcp_send_empty_ack>
 80129c6:	4603      	mov	r3, r0
 80129c8:	e1b1      	b.n	8012d2e <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 80129ca:	6879      	ldr	r1, [r7, #4]
 80129cc:	687b      	ldr	r3, [r7, #4]
 80129ce:	3304      	adds	r3, #4
 80129d0:	461a      	mov	r2, r3
 80129d2:	6878      	ldr	r0, [r7, #4]
 80129d4:	f7ff f826 	bl	8011a24 <tcp_route>
 80129d8:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 80129da:	697b      	ldr	r3, [r7, #20]
 80129dc:	2b00      	cmp	r3, #0
 80129de:	d102      	bne.n	80129e6 <tcp_output+0x96>
    return ERR_RTE;
 80129e0:	f06f 0303 	mvn.w	r3, #3
 80129e4:	e1a3      	b.n	8012d2e <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 80129e6:	687b      	ldr	r3, [r7, #4]
 80129e8:	2b00      	cmp	r3, #0
 80129ea:	d003      	beq.n	80129f4 <tcp_output+0xa4>
 80129ec:	687b      	ldr	r3, [r7, #4]
 80129ee:	681b      	ldr	r3, [r3, #0]
 80129f0:	2b00      	cmp	r3, #0
 80129f2:	d111      	bne.n	8012a18 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 80129f4:	697b      	ldr	r3, [r7, #20]
 80129f6:	2b00      	cmp	r3, #0
 80129f8:	d002      	beq.n	8012a00 <tcp_output+0xb0>
 80129fa:	697b      	ldr	r3, [r7, #20]
 80129fc:	3304      	adds	r3, #4
 80129fe:	e000      	b.n	8012a02 <tcp_output+0xb2>
 8012a00:	2300      	movs	r3, #0
 8012a02:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8012a04:	693b      	ldr	r3, [r7, #16]
 8012a06:	2b00      	cmp	r3, #0
 8012a08:	d102      	bne.n	8012a10 <tcp_output+0xc0>
      return ERR_RTE;
 8012a0a:	f06f 0303 	mvn.w	r3, #3
 8012a0e:	e18e      	b.n	8012d2e <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8012a10:	693b      	ldr	r3, [r7, #16]
 8012a12:	681a      	ldr	r2, [r3, #0]
 8012a14:	687b      	ldr	r3, [r7, #4]
 8012a16:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8012a18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012a1a:	68db      	ldr	r3, [r3, #12]
 8012a1c:	685b      	ldr	r3, [r3, #4]
 8012a1e:	4618      	mov	r0, r3
 8012a20:	f7f8 ffe5 	bl	800b9ee <lwip_htonl>
 8012a24:	4602      	mov	r2, r0
 8012a26:	687b      	ldr	r3, [r7, #4]
 8012a28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012a2a:	1ad3      	subs	r3, r2, r3
 8012a2c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012a2e:	8912      	ldrh	r2, [r2, #8]
 8012a30:	4413      	add	r3, r2
 8012a32:	69ba      	ldr	r2, [r7, #24]
 8012a34:	429a      	cmp	r2, r3
 8012a36:	d227      	bcs.n	8012a88 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8012a38:	687b      	ldr	r3, [r7, #4]
 8012a3a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8012a3e:	461a      	mov	r2, r3
 8012a40:	69bb      	ldr	r3, [r7, #24]
 8012a42:	4293      	cmp	r3, r2
 8012a44:	d114      	bne.n	8012a70 <tcp_output+0x120>
 8012a46:	687b      	ldr	r3, [r7, #4]
 8012a48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012a4a:	2b00      	cmp	r3, #0
 8012a4c:	d110      	bne.n	8012a70 <tcp_output+0x120>
 8012a4e:	687b      	ldr	r3, [r7, #4]
 8012a50:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8012a54:	2b00      	cmp	r3, #0
 8012a56:	d10b      	bne.n	8012a70 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8012a58:	687b      	ldr	r3, [r7, #4]
 8012a5a:	2200      	movs	r2, #0
 8012a5c:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
      pcb->persist_backoff = 1;
 8012a60:	687b      	ldr	r3, [r7, #4]
 8012a62:	2201      	movs	r2, #1
 8012a64:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1
      pcb->persist_probe = 0;
 8012a68:	687b      	ldr	r3, [r7, #4]
 8012a6a:	2200      	movs	r2, #0
 8012a6c:	f883 20a2 	strb.w	r2, [r3, #162]	@ 0xa2
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8012a70:	687b      	ldr	r3, [r7, #4]
 8012a72:	8b5b      	ldrh	r3, [r3, #26]
 8012a74:	f003 0302 	and.w	r3, r3, #2
 8012a78:	2b00      	cmp	r3, #0
 8012a7a:	f000 814d 	beq.w	8012d18 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8012a7e:	6878      	ldr	r0, [r7, #4]
 8012a80:	f000 fd6c 	bl	801355c <tcp_send_empty_ack>
 8012a84:	4603      	mov	r3, r0
 8012a86:	e152      	b.n	8012d2e <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8012a88:	687b      	ldr	r3, [r7, #4]
 8012a8a:	2200      	movs	r2, #0
 8012a8c:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8012a90:	687b      	ldr	r3, [r7, #4]
 8012a92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012a94:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8012a96:	6a3b      	ldr	r3, [r7, #32]
 8012a98:	2b00      	cmp	r3, #0
 8012a9a:	f000 811c 	beq.w	8012cd6 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8012a9e:	e002      	b.n	8012aa6 <tcp_output+0x156>
 8012aa0:	6a3b      	ldr	r3, [r7, #32]
 8012aa2:	681b      	ldr	r3, [r3, #0]
 8012aa4:	623b      	str	r3, [r7, #32]
 8012aa6:	6a3b      	ldr	r3, [r7, #32]
 8012aa8:	681b      	ldr	r3, [r3, #0]
 8012aaa:	2b00      	cmp	r3, #0
 8012aac:	d1f8      	bne.n	8012aa0 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8012aae:	e112      	b.n	8012cd6 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8012ab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012ab2:	68db      	ldr	r3, [r3, #12]
 8012ab4:	899b      	ldrh	r3, [r3, #12]
 8012ab6:	b29b      	uxth	r3, r3
 8012ab8:	4618      	mov	r0, r3
 8012aba:	f7f8 ff83 	bl	800b9c4 <lwip_htons>
 8012abe:	4603      	mov	r3, r0
 8012ac0:	b2db      	uxtb	r3, r3
 8012ac2:	f003 0304 	and.w	r3, r3, #4
 8012ac6:	2b00      	cmp	r3, #0
 8012ac8:	d006      	beq.n	8012ad8 <tcp_output+0x188>
 8012aca:	4b2f      	ldr	r3, [pc, #188]	@ (8012b88 <tcp_output+0x238>)
 8012acc:	f240 5236 	movw	r2, #1334	@ 0x536
 8012ad0:	4932      	ldr	r1, [pc, #200]	@ (8012b9c <tcp_output+0x24c>)
 8012ad2:	482f      	ldr	r0, [pc, #188]	@ (8012b90 <tcp_output+0x240>)
 8012ad4:	f004 f8a8 	bl	8016c28 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8012ad8:	687b      	ldr	r3, [r7, #4]
 8012ada:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012adc:	2b00      	cmp	r3, #0
 8012ade:	d01f      	beq.n	8012b20 <tcp_output+0x1d0>
 8012ae0:	687b      	ldr	r3, [r7, #4]
 8012ae2:	8b5b      	ldrh	r3, [r3, #26]
 8012ae4:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 8012ae8:	2b00      	cmp	r3, #0
 8012aea:	d119      	bne.n	8012b20 <tcp_output+0x1d0>
 8012aec:	687b      	ldr	r3, [r7, #4]
 8012aee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012af0:	2b00      	cmp	r3, #0
 8012af2:	d00b      	beq.n	8012b0c <tcp_output+0x1bc>
 8012af4:	687b      	ldr	r3, [r7, #4]
 8012af6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012af8:	681b      	ldr	r3, [r3, #0]
 8012afa:	2b00      	cmp	r3, #0
 8012afc:	d110      	bne.n	8012b20 <tcp_output+0x1d0>
 8012afe:	687b      	ldr	r3, [r7, #4]
 8012b00:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012b02:	891a      	ldrh	r2, [r3, #8]
 8012b04:	687b      	ldr	r3, [r7, #4]
 8012b06:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012b08:	429a      	cmp	r2, r3
 8012b0a:	d209      	bcs.n	8012b20 <tcp_output+0x1d0>
 8012b0c:	687b      	ldr	r3, [r7, #4]
 8012b0e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8012b12:	2b00      	cmp	r3, #0
 8012b14:	d004      	beq.n	8012b20 <tcp_output+0x1d0>
 8012b16:	687b      	ldr	r3, [r7, #4]
 8012b18:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8012b1c:	2b08      	cmp	r3, #8
 8012b1e:	d901      	bls.n	8012b24 <tcp_output+0x1d4>
 8012b20:	2301      	movs	r3, #1
 8012b22:	e000      	b.n	8012b26 <tcp_output+0x1d6>
 8012b24:	2300      	movs	r3, #0
 8012b26:	2b00      	cmp	r3, #0
 8012b28:	d106      	bne.n	8012b38 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8012b2a:	687b      	ldr	r3, [r7, #4]
 8012b2c:	8b5b      	ldrh	r3, [r3, #26]
 8012b2e:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8012b32:	2b00      	cmp	r3, #0
 8012b34:	f000 80e4 	beq.w	8012d00 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8012b38:	687b      	ldr	r3, [r7, #4]
 8012b3a:	7d1b      	ldrb	r3, [r3, #20]
 8012b3c:	2b02      	cmp	r3, #2
 8012b3e:	d00d      	beq.n	8012b5c <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8012b40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012b42:	68db      	ldr	r3, [r3, #12]
 8012b44:	899b      	ldrh	r3, [r3, #12]
 8012b46:	b29c      	uxth	r4, r3
 8012b48:	2010      	movs	r0, #16
 8012b4a:	f7f8 ff3b 	bl	800b9c4 <lwip_htons>
 8012b4e:	4603      	mov	r3, r0
 8012b50:	461a      	mov	r2, r3
 8012b52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012b54:	68db      	ldr	r3, [r3, #12]
 8012b56:	4322      	orrs	r2, r4
 8012b58:	b292      	uxth	r2, r2
 8012b5a:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8012b5c:	697a      	ldr	r2, [r7, #20]
 8012b5e:	6879      	ldr	r1, [r7, #4]
 8012b60:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8012b62:	f000 f909 	bl	8012d78 <tcp_output_segment>
 8012b66:	4603      	mov	r3, r0
 8012b68:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8012b6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012b6e:	2b00      	cmp	r3, #0
 8012b70:	d016      	beq.n	8012ba0 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012b72:	687b      	ldr	r3, [r7, #4]
 8012b74:	8b5b      	ldrh	r3, [r3, #26]
 8012b76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012b7a:	b29a      	uxth	r2, r3
 8012b7c:	687b      	ldr	r3, [r7, #4]
 8012b7e:	835a      	strh	r2, [r3, #26]
      return err;
 8012b80:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012b84:	e0d3      	b.n	8012d2e <tcp_output+0x3de>
 8012b86:	bf00      	nop
 8012b88:	08019f0c 	.word	0x08019f0c
 8012b8c:	0801a450 	.word	0x0801a450
 8012b90:	08019f60 	.word	0x08019f60
 8012b94:	0801a468 	.word	0x0801a468
 8012b98:	2000f434 	.word	0x2000f434
 8012b9c:	0801a490 	.word	0x0801a490
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8012ba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012ba2:	681a      	ldr	r2, [r3, #0]
 8012ba4:	687b      	ldr	r3, [r7, #4]
 8012ba6:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 8012ba8:	687b      	ldr	r3, [r7, #4]
 8012baa:	7d1b      	ldrb	r3, [r3, #20]
 8012bac:	2b02      	cmp	r3, #2
 8012bae:	d006      	beq.n	8012bbe <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012bb0:	687b      	ldr	r3, [r7, #4]
 8012bb2:	8b5b      	ldrh	r3, [r3, #26]
 8012bb4:	f023 0303 	bic.w	r3, r3, #3
 8012bb8:	b29a      	uxth	r2, r3
 8012bba:	687b      	ldr	r3, [r7, #4]
 8012bbc:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8012bbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012bc0:	68db      	ldr	r3, [r3, #12]
 8012bc2:	685b      	ldr	r3, [r3, #4]
 8012bc4:	4618      	mov	r0, r3
 8012bc6:	f7f8 ff12 	bl	800b9ee <lwip_htonl>
 8012bca:	4604      	mov	r4, r0
 8012bcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012bce:	891b      	ldrh	r3, [r3, #8]
 8012bd0:	461d      	mov	r5, r3
 8012bd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012bd4:	68db      	ldr	r3, [r3, #12]
 8012bd6:	899b      	ldrh	r3, [r3, #12]
 8012bd8:	b29b      	uxth	r3, r3
 8012bda:	4618      	mov	r0, r3
 8012bdc:	f7f8 fef2 	bl	800b9c4 <lwip_htons>
 8012be0:	4603      	mov	r3, r0
 8012be2:	b2db      	uxtb	r3, r3
 8012be4:	f003 0303 	and.w	r3, r3, #3
 8012be8:	2b00      	cmp	r3, #0
 8012bea:	d001      	beq.n	8012bf0 <tcp_output+0x2a0>
 8012bec:	2301      	movs	r3, #1
 8012bee:	e000      	b.n	8012bf2 <tcp_output+0x2a2>
 8012bf0:	2300      	movs	r3, #0
 8012bf2:	442b      	add	r3, r5
 8012bf4:	4423      	add	r3, r4
 8012bf6:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8012bf8:	687b      	ldr	r3, [r7, #4]
 8012bfa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8012bfc:	68bb      	ldr	r3, [r7, #8]
 8012bfe:	1ad3      	subs	r3, r2, r3
 8012c00:	2b00      	cmp	r3, #0
 8012c02:	da02      	bge.n	8012c0a <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8012c04:	687b      	ldr	r3, [r7, #4]
 8012c06:	68ba      	ldr	r2, [r7, #8]
 8012c08:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8012c0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012c0c:	891b      	ldrh	r3, [r3, #8]
 8012c0e:	461c      	mov	r4, r3
 8012c10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012c12:	68db      	ldr	r3, [r3, #12]
 8012c14:	899b      	ldrh	r3, [r3, #12]
 8012c16:	b29b      	uxth	r3, r3
 8012c18:	4618      	mov	r0, r3
 8012c1a:	f7f8 fed3 	bl	800b9c4 <lwip_htons>
 8012c1e:	4603      	mov	r3, r0
 8012c20:	b2db      	uxtb	r3, r3
 8012c22:	f003 0303 	and.w	r3, r3, #3
 8012c26:	2b00      	cmp	r3, #0
 8012c28:	d001      	beq.n	8012c2e <tcp_output+0x2de>
 8012c2a:	2301      	movs	r3, #1
 8012c2c:	e000      	b.n	8012c30 <tcp_output+0x2e0>
 8012c2e:	2300      	movs	r3, #0
 8012c30:	4423      	add	r3, r4
 8012c32:	2b00      	cmp	r3, #0
 8012c34:	d049      	beq.n	8012cca <tcp_output+0x37a>
      seg->next = NULL;
 8012c36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012c38:	2200      	movs	r2, #0
 8012c3a:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8012c3c:	687b      	ldr	r3, [r7, #4]
 8012c3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012c40:	2b00      	cmp	r3, #0
 8012c42:	d105      	bne.n	8012c50 <tcp_output+0x300>
        pcb->unacked = seg;
 8012c44:	687b      	ldr	r3, [r7, #4]
 8012c46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012c48:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 8012c4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012c4c:	623b      	str	r3, [r7, #32]
 8012c4e:	e03f      	b.n	8012cd0 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8012c50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012c52:	68db      	ldr	r3, [r3, #12]
 8012c54:	685b      	ldr	r3, [r3, #4]
 8012c56:	4618      	mov	r0, r3
 8012c58:	f7f8 fec9 	bl	800b9ee <lwip_htonl>
 8012c5c:	4604      	mov	r4, r0
 8012c5e:	6a3b      	ldr	r3, [r7, #32]
 8012c60:	68db      	ldr	r3, [r3, #12]
 8012c62:	685b      	ldr	r3, [r3, #4]
 8012c64:	4618      	mov	r0, r3
 8012c66:	f7f8 fec2 	bl	800b9ee <lwip_htonl>
 8012c6a:	4603      	mov	r3, r0
 8012c6c:	1ae3      	subs	r3, r4, r3
 8012c6e:	2b00      	cmp	r3, #0
 8012c70:	da24      	bge.n	8012cbc <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8012c72:	687b      	ldr	r3, [r7, #4]
 8012c74:	3370      	adds	r3, #112	@ 0x70
 8012c76:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8012c78:	e002      	b.n	8012c80 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8012c7a:	69fb      	ldr	r3, [r7, #28]
 8012c7c:	681b      	ldr	r3, [r3, #0]
 8012c7e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8012c80:	69fb      	ldr	r3, [r7, #28]
 8012c82:	681b      	ldr	r3, [r3, #0]
 8012c84:	2b00      	cmp	r3, #0
 8012c86:	d011      	beq.n	8012cac <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8012c88:	69fb      	ldr	r3, [r7, #28]
 8012c8a:	681b      	ldr	r3, [r3, #0]
 8012c8c:	68db      	ldr	r3, [r3, #12]
 8012c8e:	685b      	ldr	r3, [r3, #4]
 8012c90:	4618      	mov	r0, r3
 8012c92:	f7f8 feac 	bl	800b9ee <lwip_htonl>
 8012c96:	4604      	mov	r4, r0
 8012c98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012c9a:	68db      	ldr	r3, [r3, #12]
 8012c9c:	685b      	ldr	r3, [r3, #4]
 8012c9e:	4618      	mov	r0, r3
 8012ca0:	f7f8 fea5 	bl	800b9ee <lwip_htonl>
 8012ca4:	4603      	mov	r3, r0
 8012ca6:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8012ca8:	2b00      	cmp	r3, #0
 8012caa:	dbe6      	blt.n	8012c7a <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8012cac:	69fb      	ldr	r3, [r7, #28]
 8012cae:	681a      	ldr	r2, [r3, #0]
 8012cb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012cb2:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8012cb4:	69fb      	ldr	r3, [r7, #28]
 8012cb6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012cb8:	601a      	str	r2, [r3, #0]
 8012cba:	e009      	b.n	8012cd0 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8012cbc:	6a3b      	ldr	r3, [r7, #32]
 8012cbe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012cc0:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8012cc2:	6a3b      	ldr	r3, [r7, #32]
 8012cc4:	681b      	ldr	r3, [r3, #0]
 8012cc6:	623b      	str	r3, [r7, #32]
 8012cc8:	e002      	b.n	8012cd0 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8012cca:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8012ccc:	f7fb ff17 	bl	800eafe <tcp_seg_free>
    }
    seg = pcb->unsent;
 8012cd0:	687b      	ldr	r3, [r7, #4]
 8012cd2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012cd4:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 8012cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012cd8:	2b00      	cmp	r3, #0
 8012cda:	d012      	beq.n	8012d02 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8012cdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012cde:	68db      	ldr	r3, [r3, #12]
 8012ce0:	685b      	ldr	r3, [r3, #4]
 8012ce2:	4618      	mov	r0, r3
 8012ce4:	f7f8 fe83 	bl	800b9ee <lwip_htonl>
 8012ce8:	4602      	mov	r2, r0
 8012cea:	687b      	ldr	r3, [r7, #4]
 8012cec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012cee:	1ad3      	subs	r3, r2, r3
 8012cf0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012cf2:	8912      	ldrh	r2, [r2, #8]
 8012cf4:	4413      	add	r3, r2
  while (seg != NULL &&
 8012cf6:	69ba      	ldr	r2, [r7, #24]
 8012cf8:	429a      	cmp	r2, r3
 8012cfa:	f4bf aed9 	bcs.w	8012ab0 <tcp_output+0x160>
 8012cfe:	e000      	b.n	8012d02 <tcp_output+0x3b2>
      break;
 8012d00:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8012d02:	687b      	ldr	r3, [r7, #4]
 8012d04:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012d06:	2b00      	cmp	r3, #0
 8012d08:	d108      	bne.n	8012d1c <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8012d0a:	687b      	ldr	r3, [r7, #4]
 8012d0c:	2200      	movs	r2, #0
 8012d0e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 8012d12:	e004      	b.n	8012d1e <tcp_output+0x3ce>
    goto output_done;
 8012d14:	bf00      	nop
 8012d16:	e002      	b.n	8012d1e <tcp_output+0x3ce>
    goto output_done;
 8012d18:	bf00      	nop
 8012d1a:	e000      	b.n	8012d1e <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8012d1c:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8012d1e:	687b      	ldr	r3, [r7, #4]
 8012d20:	8b5b      	ldrh	r3, [r3, #26]
 8012d22:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8012d26:	b29a      	uxth	r2, r3
 8012d28:	687b      	ldr	r3, [r7, #4]
 8012d2a:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8012d2c:	2300      	movs	r3, #0
}
 8012d2e:	4618      	mov	r0, r3
 8012d30:	3728      	adds	r7, #40	@ 0x28
 8012d32:	46bd      	mov	sp, r7
 8012d34:	bdb0      	pop	{r4, r5, r7, pc}
 8012d36:	bf00      	nop

08012d38 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8012d38:	b580      	push	{r7, lr}
 8012d3a:	b082      	sub	sp, #8
 8012d3c:	af00      	add	r7, sp, #0
 8012d3e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8012d40:	687b      	ldr	r3, [r7, #4]
 8012d42:	2b00      	cmp	r3, #0
 8012d44:	d106      	bne.n	8012d54 <tcp_output_segment_busy+0x1c>
 8012d46:	4b09      	ldr	r3, [pc, #36]	@ (8012d6c <tcp_output_segment_busy+0x34>)
 8012d48:	f240 529a 	movw	r2, #1434	@ 0x59a
 8012d4c:	4908      	ldr	r1, [pc, #32]	@ (8012d70 <tcp_output_segment_busy+0x38>)
 8012d4e:	4809      	ldr	r0, [pc, #36]	@ (8012d74 <tcp_output_segment_busy+0x3c>)
 8012d50:	f003 ff6a 	bl	8016c28 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8012d54:	687b      	ldr	r3, [r7, #4]
 8012d56:	685b      	ldr	r3, [r3, #4]
 8012d58:	7b9b      	ldrb	r3, [r3, #14]
 8012d5a:	2b01      	cmp	r3, #1
 8012d5c:	d001      	beq.n	8012d62 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8012d5e:	2301      	movs	r3, #1
 8012d60:	e000      	b.n	8012d64 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8012d62:	2300      	movs	r3, #0
}
 8012d64:	4618      	mov	r0, r3
 8012d66:	3708      	adds	r7, #8
 8012d68:	46bd      	mov	sp, r7
 8012d6a:	bd80      	pop	{r7, pc}
 8012d6c:	08019f0c 	.word	0x08019f0c
 8012d70:	0801a4a8 	.word	0x0801a4a8
 8012d74:	08019f60 	.word	0x08019f60

08012d78 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8012d78:	b5b0      	push	{r4, r5, r7, lr}
 8012d7a:	b08c      	sub	sp, #48	@ 0x30
 8012d7c:	af04      	add	r7, sp, #16
 8012d7e:	60f8      	str	r0, [r7, #12]
 8012d80:	60b9      	str	r1, [r7, #8]
 8012d82:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8012d84:	68fb      	ldr	r3, [r7, #12]
 8012d86:	2b00      	cmp	r3, #0
 8012d88:	d106      	bne.n	8012d98 <tcp_output_segment+0x20>
 8012d8a:	4b64      	ldr	r3, [pc, #400]	@ (8012f1c <tcp_output_segment+0x1a4>)
 8012d8c:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 8012d90:	4963      	ldr	r1, [pc, #396]	@ (8012f20 <tcp_output_segment+0x1a8>)
 8012d92:	4864      	ldr	r0, [pc, #400]	@ (8012f24 <tcp_output_segment+0x1ac>)
 8012d94:	f003 ff48 	bl	8016c28 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8012d98:	68bb      	ldr	r3, [r7, #8]
 8012d9a:	2b00      	cmp	r3, #0
 8012d9c:	d106      	bne.n	8012dac <tcp_output_segment+0x34>
 8012d9e:	4b5f      	ldr	r3, [pc, #380]	@ (8012f1c <tcp_output_segment+0x1a4>)
 8012da0:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 8012da4:	4960      	ldr	r1, [pc, #384]	@ (8012f28 <tcp_output_segment+0x1b0>)
 8012da6:	485f      	ldr	r0, [pc, #380]	@ (8012f24 <tcp_output_segment+0x1ac>)
 8012da8:	f003 ff3e 	bl	8016c28 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8012dac:	687b      	ldr	r3, [r7, #4]
 8012dae:	2b00      	cmp	r3, #0
 8012db0:	d106      	bne.n	8012dc0 <tcp_output_segment+0x48>
 8012db2:	4b5a      	ldr	r3, [pc, #360]	@ (8012f1c <tcp_output_segment+0x1a4>)
 8012db4:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 8012db8:	495c      	ldr	r1, [pc, #368]	@ (8012f2c <tcp_output_segment+0x1b4>)
 8012dba:	485a      	ldr	r0, [pc, #360]	@ (8012f24 <tcp_output_segment+0x1ac>)
 8012dbc:	f003 ff34 	bl	8016c28 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8012dc0:	68f8      	ldr	r0, [r7, #12]
 8012dc2:	f7ff ffb9 	bl	8012d38 <tcp_output_segment_busy>
 8012dc6:	4603      	mov	r3, r0
 8012dc8:	2b00      	cmp	r3, #0
 8012dca:	d001      	beq.n	8012dd0 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8012dcc:	2300      	movs	r3, #0
 8012dce:	e0a1      	b.n	8012f14 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8012dd0:	68bb      	ldr	r3, [r7, #8]
 8012dd2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012dd4:	68fb      	ldr	r3, [r7, #12]
 8012dd6:	68dc      	ldr	r4, [r3, #12]
 8012dd8:	4610      	mov	r0, r2
 8012dda:	f7f8 fe08 	bl	800b9ee <lwip_htonl>
 8012dde:	4603      	mov	r3, r0
 8012de0:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8012de2:	68bb      	ldr	r3, [r7, #8]
 8012de4:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8012de6:	68fb      	ldr	r3, [r7, #12]
 8012de8:	68dc      	ldr	r4, [r3, #12]
 8012dea:	4610      	mov	r0, r2
 8012dec:	f7f8 fdea 	bl	800b9c4 <lwip_htons>
 8012df0:	4603      	mov	r3, r0
 8012df2:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8012df4:	68bb      	ldr	r3, [r7, #8]
 8012df6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012df8:	68ba      	ldr	r2, [r7, #8]
 8012dfa:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8012dfc:	441a      	add	r2, r3
 8012dfe:	68bb      	ldr	r3, [r7, #8]
 8012e00:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8012e02:	68fb      	ldr	r3, [r7, #12]
 8012e04:	68db      	ldr	r3, [r3, #12]
 8012e06:	3314      	adds	r3, #20
 8012e08:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8012e0a:	68fb      	ldr	r3, [r7, #12]
 8012e0c:	7a9b      	ldrb	r3, [r3, #10]
 8012e0e:	f003 0301 	and.w	r3, r3, #1
 8012e12:	2b00      	cmp	r3, #0
 8012e14:	d015      	beq.n	8012e42 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8012e16:	68bb      	ldr	r3, [r7, #8]
 8012e18:	3304      	adds	r3, #4
 8012e1a:	461a      	mov	r2, r3
 8012e1c:	6879      	ldr	r1, [r7, #4]
 8012e1e:	f44f 7006 	mov.w	r0, #536	@ 0x218
 8012e22:	f7fc fa39 	bl	800f298 <tcp_eff_send_mss_netif>
 8012e26:	4603      	mov	r3, r0
 8012e28:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8012e2a:	8b7b      	ldrh	r3, [r7, #26]
 8012e2c:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 8012e30:	4618      	mov	r0, r3
 8012e32:	f7f8 fddc 	bl	800b9ee <lwip_htonl>
 8012e36:	4602      	mov	r2, r0
 8012e38:	69fb      	ldr	r3, [r7, #28]
 8012e3a:	601a      	str	r2, [r3, #0]
    opts += 1;
 8012e3c:	69fb      	ldr	r3, [r7, #28]
 8012e3e:	3304      	adds	r3, #4
 8012e40:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8012e42:	68bb      	ldr	r3, [r7, #8]
 8012e44:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8012e48:	2b00      	cmp	r3, #0
 8012e4a:	da02      	bge.n	8012e52 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8012e4c:	68bb      	ldr	r3, [r7, #8]
 8012e4e:	2200      	movs	r2, #0
 8012e50:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 8012e52:	68bb      	ldr	r3, [r7, #8]
 8012e54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012e56:	2b00      	cmp	r3, #0
 8012e58:	d10c      	bne.n	8012e74 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8012e5a:	4b35      	ldr	r3, [pc, #212]	@ (8012f30 <tcp_output_segment+0x1b8>)
 8012e5c:	681a      	ldr	r2, [r3, #0]
 8012e5e:	68bb      	ldr	r3, [r7, #8]
 8012e60:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8012e62:	68fb      	ldr	r3, [r7, #12]
 8012e64:	68db      	ldr	r3, [r3, #12]
 8012e66:	685b      	ldr	r3, [r3, #4]
 8012e68:	4618      	mov	r0, r3
 8012e6a:	f7f8 fdc0 	bl	800b9ee <lwip_htonl>
 8012e6e:	4602      	mov	r2, r0
 8012e70:	68bb      	ldr	r3, [r7, #8]
 8012e72:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8012e74:	68fb      	ldr	r3, [r7, #12]
 8012e76:	68da      	ldr	r2, [r3, #12]
 8012e78:	68fb      	ldr	r3, [r7, #12]
 8012e7a:	685b      	ldr	r3, [r3, #4]
 8012e7c:	685b      	ldr	r3, [r3, #4]
 8012e7e:	1ad3      	subs	r3, r2, r3
 8012e80:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8012e82:	68fb      	ldr	r3, [r7, #12]
 8012e84:	685b      	ldr	r3, [r3, #4]
 8012e86:	8959      	ldrh	r1, [r3, #10]
 8012e88:	68fb      	ldr	r3, [r7, #12]
 8012e8a:	685b      	ldr	r3, [r3, #4]
 8012e8c:	8b3a      	ldrh	r2, [r7, #24]
 8012e8e:	1a8a      	subs	r2, r1, r2
 8012e90:	b292      	uxth	r2, r2
 8012e92:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8012e94:	68fb      	ldr	r3, [r7, #12]
 8012e96:	685b      	ldr	r3, [r3, #4]
 8012e98:	8919      	ldrh	r1, [r3, #8]
 8012e9a:	68fb      	ldr	r3, [r7, #12]
 8012e9c:	685b      	ldr	r3, [r3, #4]
 8012e9e:	8b3a      	ldrh	r2, [r7, #24]
 8012ea0:	1a8a      	subs	r2, r1, r2
 8012ea2:	b292      	uxth	r2, r2
 8012ea4:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8012ea6:	68fb      	ldr	r3, [r7, #12]
 8012ea8:	685b      	ldr	r3, [r3, #4]
 8012eaa:	68fa      	ldr	r2, [r7, #12]
 8012eac:	68d2      	ldr	r2, [r2, #12]
 8012eae:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8012eb0:	68fb      	ldr	r3, [r7, #12]
 8012eb2:	68db      	ldr	r3, [r3, #12]
 8012eb4:	2200      	movs	r2, #0
 8012eb6:	741a      	strb	r2, [r3, #16]
 8012eb8:	2200      	movs	r2, #0
 8012eba:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8012ebc:	68fb      	ldr	r3, [r7, #12]
 8012ebe:	68da      	ldr	r2, [r3, #12]
 8012ec0:	68fb      	ldr	r3, [r7, #12]
 8012ec2:	7a9b      	ldrb	r3, [r3, #10]
 8012ec4:	f003 0301 	and.w	r3, r3, #1
 8012ec8:	2b00      	cmp	r3, #0
 8012eca:	d001      	beq.n	8012ed0 <tcp_output_segment+0x158>
 8012ecc:	2318      	movs	r3, #24
 8012ece:	e000      	b.n	8012ed2 <tcp_output_segment+0x15a>
 8012ed0:	2314      	movs	r3, #20
 8012ed2:	4413      	add	r3, r2
 8012ed4:	69fa      	ldr	r2, [r7, #28]
 8012ed6:	429a      	cmp	r2, r3
 8012ed8:	d006      	beq.n	8012ee8 <tcp_output_segment+0x170>
 8012eda:	4b10      	ldr	r3, [pc, #64]	@ (8012f1c <tcp_output_segment+0x1a4>)
 8012edc:	f240 621c 	movw	r2, #1564	@ 0x61c
 8012ee0:	4914      	ldr	r1, [pc, #80]	@ (8012f34 <tcp_output_segment+0x1bc>)
 8012ee2:	4810      	ldr	r0, [pc, #64]	@ (8012f24 <tcp_output_segment+0x1ac>)
 8012ee4:	f003 fea0 	bl	8016c28 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8012ee8:	68fb      	ldr	r3, [r7, #12]
 8012eea:	6858      	ldr	r0, [r3, #4]
 8012eec:	68b9      	ldr	r1, [r7, #8]
 8012eee:	68bb      	ldr	r3, [r7, #8]
 8012ef0:	1d1c      	adds	r4, r3, #4
 8012ef2:	68bb      	ldr	r3, [r7, #8]
 8012ef4:	7add      	ldrb	r5, [r3, #11]
 8012ef6:	68bb      	ldr	r3, [r7, #8]
 8012ef8:	7a9b      	ldrb	r3, [r3, #10]
 8012efa:	687a      	ldr	r2, [r7, #4]
 8012efc:	9202      	str	r2, [sp, #8]
 8012efe:	2206      	movs	r2, #6
 8012f00:	9201      	str	r2, [sp, #4]
 8012f02:	9300      	str	r3, [sp, #0]
 8012f04:	462b      	mov	r3, r5
 8012f06:	4622      	mov	r2, r4
 8012f08:	f002 fbaa 	bl	8015660 <ip4_output_if>
 8012f0c:	4603      	mov	r3, r0
 8012f0e:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8012f10:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012f14:	4618      	mov	r0, r3
 8012f16:	3720      	adds	r7, #32
 8012f18:	46bd      	mov	sp, r7
 8012f1a:	bdb0      	pop	{r4, r5, r7, pc}
 8012f1c:	08019f0c 	.word	0x08019f0c
 8012f20:	0801a4d0 	.word	0x0801a4d0
 8012f24:	08019f60 	.word	0x08019f60
 8012f28:	0801a4f0 	.word	0x0801a4f0
 8012f2c:	0801a510 	.word	0x0801a510
 8012f30:	2000f3e8 	.word	0x2000f3e8
 8012f34:	0801a534 	.word	0x0801a534

08012f38 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8012f38:	b5b0      	push	{r4, r5, r7, lr}
 8012f3a:	b084      	sub	sp, #16
 8012f3c:	af00      	add	r7, sp, #0
 8012f3e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8012f40:	687b      	ldr	r3, [r7, #4]
 8012f42:	2b00      	cmp	r3, #0
 8012f44:	d106      	bne.n	8012f54 <tcp_rexmit_rto_prepare+0x1c>
 8012f46:	4b31      	ldr	r3, [pc, #196]	@ (801300c <tcp_rexmit_rto_prepare+0xd4>)
 8012f48:	f240 6263 	movw	r2, #1635	@ 0x663
 8012f4c:	4930      	ldr	r1, [pc, #192]	@ (8013010 <tcp_rexmit_rto_prepare+0xd8>)
 8012f4e:	4831      	ldr	r0, [pc, #196]	@ (8013014 <tcp_rexmit_rto_prepare+0xdc>)
 8012f50:	f003 fe6a 	bl	8016c28 <iprintf>

  if (pcb->unacked == NULL) {
 8012f54:	687b      	ldr	r3, [r7, #4]
 8012f56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012f58:	2b00      	cmp	r3, #0
 8012f5a:	d102      	bne.n	8012f62 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8012f5c:	f06f 0305 	mvn.w	r3, #5
 8012f60:	e050      	b.n	8013004 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8012f62:	687b      	ldr	r3, [r7, #4]
 8012f64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012f66:	60fb      	str	r3, [r7, #12]
 8012f68:	e00b      	b.n	8012f82 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8012f6a:	68f8      	ldr	r0, [r7, #12]
 8012f6c:	f7ff fee4 	bl	8012d38 <tcp_output_segment_busy>
 8012f70:	4603      	mov	r3, r0
 8012f72:	2b00      	cmp	r3, #0
 8012f74:	d002      	beq.n	8012f7c <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8012f76:	f06f 0305 	mvn.w	r3, #5
 8012f7a:	e043      	b.n	8013004 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8012f7c:	68fb      	ldr	r3, [r7, #12]
 8012f7e:	681b      	ldr	r3, [r3, #0]
 8012f80:	60fb      	str	r3, [r7, #12]
 8012f82:	68fb      	ldr	r3, [r7, #12]
 8012f84:	681b      	ldr	r3, [r3, #0]
 8012f86:	2b00      	cmp	r3, #0
 8012f88:	d1ef      	bne.n	8012f6a <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8012f8a:	68f8      	ldr	r0, [r7, #12]
 8012f8c:	f7ff fed4 	bl	8012d38 <tcp_output_segment_busy>
 8012f90:	4603      	mov	r3, r0
 8012f92:	2b00      	cmp	r3, #0
 8012f94:	d002      	beq.n	8012f9c <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8012f96:	f06f 0305 	mvn.w	r3, #5
 8012f9a:	e033      	b.n	8013004 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8012f9c:	687b      	ldr	r3, [r7, #4]
 8012f9e:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8012fa0:	68fb      	ldr	r3, [r7, #12]
 8012fa2:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8012fa4:	687b      	ldr	r3, [r7, #4]
 8012fa6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8012fa8:	687b      	ldr	r3, [r7, #4]
 8012faa:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8012fac:	687b      	ldr	r3, [r7, #4]
 8012fae:	2200      	movs	r2, #0
 8012fb0:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8012fb2:	687b      	ldr	r3, [r7, #4]
 8012fb4:	8b5b      	ldrh	r3, [r3, #26]
 8012fb6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8012fba:	b29a      	uxth	r2, r3
 8012fbc:	687b      	ldr	r3, [r7, #4]
 8012fbe:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8012fc0:	68fb      	ldr	r3, [r7, #12]
 8012fc2:	68db      	ldr	r3, [r3, #12]
 8012fc4:	685b      	ldr	r3, [r3, #4]
 8012fc6:	4618      	mov	r0, r3
 8012fc8:	f7f8 fd11 	bl	800b9ee <lwip_htonl>
 8012fcc:	4604      	mov	r4, r0
 8012fce:	68fb      	ldr	r3, [r7, #12]
 8012fd0:	891b      	ldrh	r3, [r3, #8]
 8012fd2:	461d      	mov	r5, r3
 8012fd4:	68fb      	ldr	r3, [r7, #12]
 8012fd6:	68db      	ldr	r3, [r3, #12]
 8012fd8:	899b      	ldrh	r3, [r3, #12]
 8012fda:	b29b      	uxth	r3, r3
 8012fdc:	4618      	mov	r0, r3
 8012fde:	f7f8 fcf1 	bl	800b9c4 <lwip_htons>
 8012fe2:	4603      	mov	r3, r0
 8012fe4:	b2db      	uxtb	r3, r3
 8012fe6:	f003 0303 	and.w	r3, r3, #3
 8012fea:	2b00      	cmp	r3, #0
 8012fec:	d001      	beq.n	8012ff2 <tcp_rexmit_rto_prepare+0xba>
 8012fee:	2301      	movs	r3, #1
 8012ff0:	e000      	b.n	8012ff4 <tcp_rexmit_rto_prepare+0xbc>
 8012ff2:	2300      	movs	r3, #0
 8012ff4:	442b      	add	r3, r5
 8012ff6:	18e2      	adds	r2, r4, r3
 8012ff8:	687b      	ldr	r3, [r7, #4]
 8012ffa:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8012ffc:	687b      	ldr	r3, [r7, #4]
 8012ffe:	2200      	movs	r2, #0
 8013000:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 8013002:	2300      	movs	r3, #0
}
 8013004:	4618      	mov	r0, r3
 8013006:	3710      	adds	r7, #16
 8013008:	46bd      	mov	sp, r7
 801300a:	bdb0      	pop	{r4, r5, r7, pc}
 801300c:	08019f0c 	.word	0x08019f0c
 8013010:	0801a548 	.word	0x0801a548
 8013014:	08019f60 	.word	0x08019f60

08013018 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8013018:	b580      	push	{r7, lr}
 801301a:	b082      	sub	sp, #8
 801301c:	af00      	add	r7, sp, #0
 801301e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8013020:	687b      	ldr	r3, [r7, #4]
 8013022:	2b00      	cmp	r3, #0
 8013024:	d106      	bne.n	8013034 <tcp_rexmit_rto_commit+0x1c>
 8013026:	4b0d      	ldr	r3, [pc, #52]	@ (801305c <tcp_rexmit_rto_commit+0x44>)
 8013028:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 801302c:	490c      	ldr	r1, [pc, #48]	@ (8013060 <tcp_rexmit_rto_commit+0x48>)
 801302e:	480d      	ldr	r0, [pc, #52]	@ (8013064 <tcp_rexmit_rto_commit+0x4c>)
 8013030:	f003 fdfa 	bl	8016c28 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8013034:	687b      	ldr	r3, [r7, #4]
 8013036:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801303a:	2bff      	cmp	r3, #255	@ 0xff
 801303c:	d007      	beq.n	801304e <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 801303e:	687b      	ldr	r3, [r7, #4]
 8013040:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8013044:	3301      	adds	r3, #1
 8013046:	b2da      	uxtb	r2, r3
 8013048:	687b      	ldr	r3, [r7, #4]
 801304a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 801304e:	6878      	ldr	r0, [r7, #4]
 8013050:	f7ff fc7e 	bl	8012950 <tcp_output>
}
 8013054:	bf00      	nop
 8013056:	3708      	adds	r7, #8
 8013058:	46bd      	mov	sp, r7
 801305a:	bd80      	pop	{r7, pc}
 801305c:	08019f0c 	.word	0x08019f0c
 8013060:	0801a56c 	.word	0x0801a56c
 8013064:	08019f60 	.word	0x08019f60

08013068 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8013068:	b580      	push	{r7, lr}
 801306a:	b082      	sub	sp, #8
 801306c:	af00      	add	r7, sp, #0
 801306e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8013070:	687b      	ldr	r3, [r7, #4]
 8013072:	2b00      	cmp	r3, #0
 8013074:	d106      	bne.n	8013084 <tcp_rexmit_rto+0x1c>
 8013076:	4b0a      	ldr	r3, [pc, #40]	@ (80130a0 <tcp_rexmit_rto+0x38>)
 8013078:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 801307c:	4909      	ldr	r1, [pc, #36]	@ (80130a4 <tcp_rexmit_rto+0x3c>)
 801307e:	480a      	ldr	r0, [pc, #40]	@ (80130a8 <tcp_rexmit_rto+0x40>)
 8013080:	f003 fdd2 	bl	8016c28 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8013084:	6878      	ldr	r0, [r7, #4]
 8013086:	f7ff ff57 	bl	8012f38 <tcp_rexmit_rto_prepare>
 801308a:	4603      	mov	r3, r0
 801308c:	2b00      	cmp	r3, #0
 801308e:	d102      	bne.n	8013096 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8013090:	6878      	ldr	r0, [r7, #4]
 8013092:	f7ff ffc1 	bl	8013018 <tcp_rexmit_rto_commit>
  }
}
 8013096:	bf00      	nop
 8013098:	3708      	adds	r7, #8
 801309a:	46bd      	mov	sp, r7
 801309c:	bd80      	pop	{r7, pc}
 801309e:	bf00      	nop
 80130a0:	08019f0c 	.word	0x08019f0c
 80130a4:	0801a590 	.word	0x0801a590
 80130a8:	08019f60 	.word	0x08019f60

080130ac <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 80130ac:	b590      	push	{r4, r7, lr}
 80130ae:	b085      	sub	sp, #20
 80130b0:	af00      	add	r7, sp, #0
 80130b2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 80130b4:	687b      	ldr	r3, [r7, #4]
 80130b6:	2b00      	cmp	r3, #0
 80130b8:	d106      	bne.n	80130c8 <tcp_rexmit+0x1c>
 80130ba:	4b2f      	ldr	r3, [pc, #188]	@ (8013178 <tcp_rexmit+0xcc>)
 80130bc:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 80130c0:	492e      	ldr	r1, [pc, #184]	@ (801317c <tcp_rexmit+0xd0>)
 80130c2:	482f      	ldr	r0, [pc, #188]	@ (8013180 <tcp_rexmit+0xd4>)
 80130c4:	f003 fdb0 	bl	8016c28 <iprintf>

  if (pcb->unacked == NULL) {
 80130c8:	687b      	ldr	r3, [r7, #4]
 80130ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80130cc:	2b00      	cmp	r3, #0
 80130ce:	d102      	bne.n	80130d6 <tcp_rexmit+0x2a>
    return ERR_VAL;
 80130d0:	f06f 0305 	mvn.w	r3, #5
 80130d4:	e04c      	b.n	8013170 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 80130d6:	687b      	ldr	r3, [r7, #4]
 80130d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80130da:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 80130dc:	68b8      	ldr	r0, [r7, #8]
 80130de:	f7ff fe2b 	bl	8012d38 <tcp_output_segment_busy>
 80130e2:	4603      	mov	r3, r0
 80130e4:	2b00      	cmp	r3, #0
 80130e6:	d002      	beq.n	80130ee <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 80130e8:	f06f 0305 	mvn.w	r3, #5
 80130ec:	e040      	b.n	8013170 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 80130ee:	68bb      	ldr	r3, [r7, #8]
 80130f0:	681a      	ldr	r2, [r3, #0]
 80130f2:	687b      	ldr	r3, [r7, #4]
 80130f4:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 80130f6:	687b      	ldr	r3, [r7, #4]
 80130f8:	336c      	adds	r3, #108	@ 0x6c
 80130fa:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80130fc:	e002      	b.n	8013104 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 80130fe:	68fb      	ldr	r3, [r7, #12]
 8013100:	681b      	ldr	r3, [r3, #0]
 8013102:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8013104:	68fb      	ldr	r3, [r7, #12]
 8013106:	681b      	ldr	r3, [r3, #0]
 8013108:	2b00      	cmp	r3, #0
 801310a:	d011      	beq.n	8013130 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801310c:	68fb      	ldr	r3, [r7, #12]
 801310e:	681b      	ldr	r3, [r3, #0]
 8013110:	68db      	ldr	r3, [r3, #12]
 8013112:	685b      	ldr	r3, [r3, #4]
 8013114:	4618      	mov	r0, r3
 8013116:	f7f8 fc6a 	bl	800b9ee <lwip_htonl>
 801311a:	4604      	mov	r4, r0
 801311c:	68bb      	ldr	r3, [r7, #8]
 801311e:	68db      	ldr	r3, [r3, #12]
 8013120:	685b      	ldr	r3, [r3, #4]
 8013122:	4618      	mov	r0, r3
 8013124:	f7f8 fc63 	bl	800b9ee <lwip_htonl>
 8013128:	4603      	mov	r3, r0
 801312a:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 801312c:	2b00      	cmp	r3, #0
 801312e:	dbe6      	blt.n	80130fe <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8013130:	68fb      	ldr	r3, [r7, #12]
 8013132:	681a      	ldr	r2, [r3, #0]
 8013134:	68bb      	ldr	r3, [r7, #8]
 8013136:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8013138:	68fb      	ldr	r3, [r7, #12]
 801313a:	68ba      	ldr	r2, [r7, #8]
 801313c:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 801313e:	68bb      	ldr	r3, [r7, #8]
 8013140:	681b      	ldr	r3, [r3, #0]
 8013142:	2b00      	cmp	r3, #0
 8013144:	d103      	bne.n	801314e <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8013146:	687b      	ldr	r3, [r7, #4]
 8013148:	2200      	movs	r2, #0
 801314a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 801314e:	687b      	ldr	r3, [r7, #4]
 8013150:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8013154:	2bff      	cmp	r3, #255	@ 0xff
 8013156:	d007      	beq.n	8013168 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8013158:	687b      	ldr	r3, [r7, #4]
 801315a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801315e:	3301      	adds	r3, #1
 8013160:	b2da      	uxtb	r2, r3
 8013162:	687b      	ldr	r3, [r7, #4]
 8013164:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8013168:	687b      	ldr	r3, [r7, #4]
 801316a:	2200      	movs	r2, #0
 801316c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 801316e:	2300      	movs	r3, #0
}
 8013170:	4618      	mov	r0, r3
 8013172:	3714      	adds	r7, #20
 8013174:	46bd      	mov	sp, r7
 8013176:	bd90      	pop	{r4, r7, pc}
 8013178:	08019f0c 	.word	0x08019f0c
 801317c:	0801a5ac 	.word	0x0801a5ac
 8013180:	08019f60 	.word	0x08019f60

08013184 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8013184:	b580      	push	{r7, lr}
 8013186:	b082      	sub	sp, #8
 8013188:	af00      	add	r7, sp, #0
 801318a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 801318c:	687b      	ldr	r3, [r7, #4]
 801318e:	2b00      	cmp	r3, #0
 8013190:	d106      	bne.n	80131a0 <tcp_rexmit_fast+0x1c>
 8013192:	4b2a      	ldr	r3, [pc, #168]	@ (801323c <tcp_rexmit_fast+0xb8>)
 8013194:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 8013198:	4929      	ldr	r1, [pc, #164]	@ (8013240 <tcp_rexmit_fast+0xbc>)
 801319a:	482a      	ldr	r0, [pc, #168]	@ (8013244 <tcp_rexmit_fast+0xc0>)
 801319c:	f003 fd44 	bl	8016c28 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 80131a0:	687b      	ldr	r3, [r7, #4]
 80131a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80131a4:	2b00      	cmp	r3, #0
 80131a6:	d044      	beq.n	8013232 <tcp_rexmit_fast+0xae>
 80131a8:	687b      	ldr	r3, [r7, #4]
 80131aa:	8b5b      	ldrh	r3, [r3, #26]
 80131ac:	f003 0304 	and.w	r3, r3, #4
 80131b0:	2b00      	cmp	r3, #0
 80131b2:	d13e      	bne.n	8013232 <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 80131b4:	6878      	ldr	r0, [r7, #4]
 80131b6:	f7ff ff79 	bl	80130ac <tcp_rexmit>
 80131ba:	4603      	mov	r3, r0
 80131bc:	2b00      	cmp	r3, #0
 80131be:	d138      	bne.n	8013232 <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80131c0:	687b      	ldr	r3, [r7, #4]
 80131c2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 80131c6:	687b      	ldr	r3, [r7, #4]
 80131c8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80131cc:	4293      	cmp	r3, r2
 80131ce:	bf28      	it	cs
 80131d0:	4613      	movcs	r3, r2
 80131d2:	b29b      	uxth	r3, r3
 80131d4:	0fda      	lsrs	r2, r3, #31
 80131d6:	4413      	add	r3, r2
 80131d8:	105b      	asrs	r3, r3, #1
 80131da:	b29a      	uxth	r2, r3
 80131dc:	687b      	ldr	r3, [r7, #4]
 80131de:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 80131e2:	687b      	ldr	r3, [r7, #4]
 80131e4:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 80131e8:	461a      	mov	r2, r3
 80131ea:	687b      	ldr	r3, [r7, #4]
 80131ec:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80131ee:	005b      	lsls	r3, r3, #1
 80131f0:	429a      	cmp	r2, r3
 80131f2:	d206      	bcs.n	8013202 <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 80131f4:	687b      	ldr	r3, [r7, #4]
 80131f6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80131f8:	005b      	lsls	r3, r3, #1
 80131fa:	b29a      	uxth	r2, r3
 80131fc:	687b      	ldr	r3, [r7, #4]
 80131fe:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8013202:	687b      	ldr	r3, [r7, #4]
 8013204:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8013208:	687b      	ldr	r3, [r7, #4]
 801320a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801320c:	4619      	mov	r1, r3
 801320e:	0049      	lsls	r1, r1, #1
 8013210:	440b      	add	r3, r1
 8013212:	b29b      	uxth	r3, r3
 8013214:	4413      	add	r3, r2
 8013216:	b29a      	uxth	r2, r3
 8013218:	687b      	ldr	r3, [r7, #4]
 801321a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 801321e:	687b      	ldr	r3, [r7, #4]
 8013220:	8b5b      	ldrh	r3, [r3, #26]
 8013222:	f043 0304 	orr.w	r3, r3, #4
 8013226:	b29a      	uxth	r2, r3
 8013228:	687b      	ldr	r3, [r7, #4]
 801322a:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 801322c:	687b      	ldr	r3, [r7, #4]
 801322e:	2200      	movs	r2, #0
 8013230:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 8013232:	bf00      	nop
 8013234:	3708      	adds	r7, #8
 8013236:	46bd      	mov	sp, r7
 8013238:	bd80      	pop	{r7, pc}
 801323a:	bf00      	nop
 801323c:	08019f0c 	.word	0x08019f0c
 8013240:	0801a5c4 	.word	0x0801a5c4
 8013244:	08019f60 	.word	0x08019f60

08013248 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8013248:	b580      	push	{r7, lr}
 801324a:	b086      	sub	sp, #24
 801324c:	af00      	add	r7, sp, #0
 801324e:	60f8      	str	r0, [r7, #12]
 8013250:	607b      	str	r3, [r7, #4]
 8013252:	460b      	mov	r3, r1
 8013254:	817b      	strh	r3, [r7, #10]
 8013256:	4613      	mov	r3, r2
 8013258:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801325a:	897a      	ldrh	r2, [r7, #10]
 801325c:	893b      	ldrh	r3, [r7, #8]
 801325e:	4413      	add	r3, r2
 8013260:	b29b      	uxth	r3, r3
 8013262:	3314      	adds	r3, #20
 8013264:	b29b      	uxth	r3, r3
 8013266:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801326a:	4619      	mov	r1, r3
 801326c:	2022      	movs	r0, #34	@ 0x22
 801326e:	f7f9 fcb7 	bl	800cbe0 <pbuf_alloc>
 8013272:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8013274:	697b      	ldr	r3, [r7, #20]
 8013276:	2b00      	cmp	r3, #0
 8013278:	d04d      	beq.n	8013316 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801327a:	897b      	ldrh	r3, [r7, #10]
 801327c:	3313      	adds	r3, #19
 801327e:	697a      	ldr	r2, [r7, #20]
 8013280:	8952      	ldrh	r2, [r2, #10]
 8013282:	4293      	cmp	r3, r2
 8013284:	db06      	blt.n	8013294 <tcp_output_alloc_header_common+0x4c>
 8013286:	4b26      	ldr	r3, [pc, #152]	@ (8013320 <tcp_output_alloc_header_common+0xd8>)
 8013288:	f240 7223 	movw	r2, #1827	@ 0x723
 801328c:	4925      	ldr	r1, [pc, #148]	@ (8013324 <tcp_output_alloc_header_common+0xdc>)
 801328e:	4826      	ldr	r0, [pc, #152]	@ (8013328 <tcp_output_alloc_header_common+0xe0>)
 8013290:	f003 fcca 	bl	8016c28 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8013294:	697b      	ldr	r3, [r7, #20]
 8013296:	685b      	ldr	r3, [r3, #4]
 8013298:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 801329a:	8c3b      	ldrh	r3, [r7, #32]
 801329c:	4618      	mov	r0, r3
 801329e:	f7f8 fb91 	bl	800b9c4 <lwip_htons>
 80132a2:	4603      	mov	r3, r0
 80132a4:	461a      	mov	r2, r3
 80132a6:	693b      	ldr	r3, [r7, #16]
 80132a8:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 80132aa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80132ac:	4618      	mov	r0, r3
 80132ae:	f7f8 fb89 	bl	800b9c4 <lwip_htons>
 80132b2:	4603      	mov	r3, r0
 80132b4:	461a      	mov	r2, r3
 80132b6:	693b      	ldr	r3, [r7, #16]
 80132b8:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 80132ba:	693b      	ldr	r3, [r7, #16]
 80132bc:	687a      	ldr	r2, [r7, #4]
 80132be:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 80132c0:	68f8      	ldr	r0, [r7, #12]
 80132c2:	f7f8 fb94 	bl	800b9ee <lwip_htonl>
 80132c6:	4602      	mov	r2, r0
 80132c8:	693b      	ldr	r3, [r7, #16]
 80132ca:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 80132cc:	897b      	ldrh	r3, [r7, #10]
 80132ce:	089b      	lsrs	r3, r3, #2
 80132d0:	b29b      	uxth	r3, r3
 80132d2:	3305      	adds	r3, #5
 80132d4:	b29b      	uxth	r3, r3
 80132d6:	031b      	lsls	r3, r3, #12
 80132d8:	b29a      	uxth	r2, r3
 80132da:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80132de:	b29b      	uxth	r3, r3
 80132e0:	4313      	orrs	r3, r2
 80132e2:	b29b      	uxth	r3, r3
 80132e4:	4618      	mov	r0, r3
 80132e6:	f7f8 fb6d 	bl	800b9c4 <lwip_htons>
 80132ea:	4603      	mov	r3, r0
 80132ec:	461a      	mov	r2, r3
 80132ee:	693b      	ldr	r3, [r7, #16]
 80132f0:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 80132f2:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80132f4:	4618      	mov	r0, r3
 80132f6:	f7f8 fb65 	bl	800b9c4 <lwip_htons>
 80132fa:	4603      	mov	r3, r0
 80132fc:	461a      	mov	r2, r3
 80132fe:	693b      	ldr	r3, [r7, #16]
 8013300:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8013302:	693b      	ldr	r3, [r7, #16]
 8013304:	2200      	movs	r2, #0
 8013306:	741a      	strb	r2, [r3, #16]
 8013308:	2200      	movs	r2, #0
 801330a:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 801330c:	693b      	ldr	r3, [r7, #16]
 801330e:	2200      	movs	r2, #0
 8013310:	749a      	strb	r2, [r3, #18]
 8013312:	2200      	movs	r2, #0
 8013314:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8013316:	697b      	ldr	r3, [r7, #20]
}
 8013318:	4618      	mov	r0, r3
 801331a:	3718      	adds	r7, #24
 801331c:	46bd      	mov	sp, r7
 801331e:	bd80      	pop	{r7, pc}
 8013320:	08019f0c 	.word	0x08019f0c
 8013324:	0801a5e4 	.word	0x0801a5e4
 8013328:	08019f60 	.word	0x08019f60

0801332c <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 801332c:	b5b0      	push	{r4, r5, r7, lr}
 801332e:	b08a      	sub	sp, #40	@ 0x28
 8013330:	af04      	add	r7, sp, #16
 8013332:	60f8      	str	r0, [r7, #12]
 8013334:	607b      	str	r3, [r7, #4]
 8013336:	460b      	mov	r3, r1
 8013338:	817b      	strh	r3, [r7, #10]
 801333a:	4613      	mov	r3, r2
 801333c:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801333e:	68fb      	ldr	r3, [r7, #12]
 8013340:	2b00      	cmp	r3, #0
 8013342:	d106      	bne.n	8013352 <tcp_output_alloc_header+0x26>
 8013344:	4b15      	ldr	r3, [pc, #84]	@ (801339c <tcp_output_alloc_header+0x70>)
 8013346:	f240 7242 	movw	r2, #1858	@ 0x742
 801334a:	4915      	ldr	r1, [pc, #84]	@ (80133a0 <tcp_output_alloc_header+0x74>)
 801334c:	4815      	ldr	r0, [pc, #84]	@ (80133a4 <tcp_output_alloc_header+0x78>)
 801334e:	f003 fc6b 	bl	8016c28 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8013352:	68fb      	ldr	r3, [r7, #12]
 8013354:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8013356:	68fb      	ldr	r3, [r7, #12]
 8013358:	8adb      	ldrh	r3, [r3, #22]
 801335a:	68fa      	ldr	r2, [r7, #12]
 801335c:	8b12      	ldrh	r2, [r2, #24]
 801335e:	68f9      	ldr	r1, [r7, #12]
 8013360:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 8013362:	893d      	ldrh	r5, [r7, #8]
 8013364:	897c      	ldrh	r4, [r7, #10]
 8013366:	9103      	str	r1, [sp, #12]
 8013368:	2110      	movs	r1, #16
 801336a:	9102      	str	r1, [sp, #8]
 801336c:	9201      	str	r2, [sp, #4]
 801336e:	9300      	str	r3, [sp, #0]
 8013370:	687b      	ldr	r3, [r7, #4]
 8013372:	462a      	mov	r2, r5
 8013374:	4621      	mov	r1, r4
 8013376:	f7ff ff67 	bl	8013248 <tcp_output_alloc_header_common>
 801337a:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 801337c:	697b      	ldr	r3, [r7, #20]
 801337e:	2b00      	cmp	r3, #0
 8013380:	d006      	beq.n	8013390 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8013382:	68fb      	ldr	r3, [r7, #12]
 8013384:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013386:	68fa      	ldr	r2, [r7, #12]
 8013388:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 801338a:	441a      	add	r2, r3
 801338c:	68fb      	ldr	r3, [r7, #12]
 801338e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 8013390:	697b      	ldr	r3, [r7, #20]
}
 8013392:	4618      	mov	r0, r3
 8013394:	3718      	adds	r7, #24
 8013396:	46bd      	mov	sp, r7
 8013398:	bdb0      	pop	{r4, r5, r7, pc}
 801339a:	bf00      	nop
 801339c:	08019f0c 	.word	0x08019f0c
 80133a0:	0801a614 	.word	0x0801a614
 80133a4:	08019f60 	.word	0x08019f60

080133a8 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 80133a8:	b580      	push	{r7, lr}
 80133aa:	b088      	sub	sp, #32
 80133ac:	af00      	add	r7, sp, #0
 80133ae:	60f8      	str	r0, [r7, #12]
 80133b0:	60b9      	str	r1, [r7, #8]
 80133b2:	4611      	mov	r1, r2
 80133b4:	461a      	mov	r2, r3
 80133b6:	460b      	mov	r3, r1
 80133b8:	71fb      	strb	r3, [r7, #7]
 80133ba:	4613      	mov	r3, r2
 80133bc:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 80133be:	2300      	movs	r3, #0
 80133c0:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 80133c2:	68bb      	ldr	r3, [r7, #8]
 80133c4:	2b00      	cmp	r3, #0
 80133c6:	d106      	bne.n	80133d6 <tcp_output_fill_options+0x2e>
 80133c8:	4b12      	ldr	r3, [pc, #72]	@ (8013414 <tcp_output_fill_options+0x6c>)
 80133ca:	f240 7256 	movw	r2, #1878	@ 0x756
 80133ce:	4912      	ldr	r1, [pc, #72]	@ (8013418 <tcp_output_fill_options+0x70>)
 80133d0:	4812      	ldr	r0, [pc, #72]	@ (801341c <tcp_output_fill_options+0x74>)
 80133d2:	f003 fc29 	bl	8016c28 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 80133d6:	68bb      	ldr	r3, [r7, #8]
 80133d8:	685b      	ldr	r3, [r3, #4]
 80133da:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 80133dc:	69bb      	ldr	r3, [r7, #24]
 80133de:	3314      	adds	r3, #20
 80133e0:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 80133e2:	8bfb      	ldrh	r3, [r7, #30]
 80133e4:	009b      	lsls	r3, r3, #2
 80133e6:	461a      	mov	r2, r3
 80133e8:	79fb      	ldrb	r3, [r7, #7]
 80133ea:	009b      	lsls	r3, r3, #2
 80133ec:	f003 0304 	and.w	r3, r3, #4
 80133f0:	4413      	add	r3, r2
 80133f2:	3314      	adds	r3, #20
 80133f4:	69ba      	ldr	r2, [r7, #24]
 80133f6:	4413      	add	r3, r2
 80133f8:	697a      	ldr	r2, [r7, #20]
 80133fa:	429a      	cmp	r2, r3
 80133fc:	d006      	beq.n	801340c <tcp_output_fill_options+0x64>
 80133fe:	4b05      	ldr	r3, [pc, #20]	@ (8013414 <tcp_output_fill_options+0x6c>)
 8013400:	f240 7275 	movw	r2, #1909	@ 0x775
 8013404:	4906      	ldr	r1, [pc, #24]	@ (8013420 <tcp_output_fill_options+0x78>)
 8013406:	4805      	ldr	r0, [pc, #20]	@ (801341c <tcp_output_fill_options+0x74>)
 8013408:	f003 fc0e 	bl	8016c28 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 801340c:	bf00      	nop
 801340e:	3720      	adds	r7, #32
 8013410:	46bd      	mov	sp, r7
 8013412:	bd80      	pop	{r7, pc}
 8013414:	08019f0c 	.word	0x08019f0c
 8013418:	0801a63c 	.word	0x0801a63c
 801341c:	08019f60 	.word	0x08019f60
 8013420:	0801a534 	.word	0x0801a534

08013424 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8013424:	b580      	push	{r7, lr}
 8013426:	b08a      	sub	sp, #40	@ 0x28
 8013428:	af04      	add	r7, sp, #16
 801342a:	60f8      	str	r0, [r7, #12]
 801342c:	60b9      	str	r1, [r7, #8]
 801342e:	607a      	str	r2, [r7, #4]
 8013430:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8013432:	68bb      	ldr	r3, [r7, #8]
 8013434:	2b00      	cmp	r3, #0
 8013436:	d106      	bne.n	8013446 <tcp_output_control_segment+0x22>
 8013438:	4b1c      	ldr	r3, [pc, #112]	@ (80134ac <tcp_output_control_segment+0x88>)
 801343a:	f240 7287 	movw	r2, #1927	@ 0x787
 801343e:	491c      	ldr	r1, [pc, #112]	@ (80134b0 <tcp_output_control_segment+0x8c>)
 8013440:	481c      	ldr	r0, [pc, #112]	@ (80134b4 <tcp_output_control_segment+0x90>)
 8013442:	f003 fbf1 	bl	8016c28 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8013446:	683a      	ldr	r2, [r7, #0]
 8013448:	6879      	ldr	r1, [r7, #4]
 801344a:	68f8      	ldr	r0, [r7, #12]
 801344c:	f7fe faea 	bl	8011a24 <tcp_route>
 8013450:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8013452:	693b      	ldr	r3, [r7, #16]
 8013454:	2b00      	cmp	r3, #0
 8013456:	d102      	bne.n	801345e <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8013458:	23fc      	movs	r3, #252	@ 0xfc
 801345a:	75fb      	strb	r3, [r7, #23]
 801345c:	e01c      	b.n	8013498 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801345e:	68fb      	ldr	r3, [r7, #12]
 8013460:	2b00      	cmp	r3, #0
 8013462:	d006      	beq.n	8013472 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8013464:	68fb      	ldr	r3, [r7, #12]
 8013466:	7adb      	ldrb	r3, [r3, #11]
 8013468:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 801346a:	68fb      	ldr	r3, [r7, #12]
 801346c:	7a9b      	ldrb	r3, [r3, #10]
 801346e:	757b      	strb	r3, [r7, #21]
 8013470:	e003      	b.n	801347a <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8013472:	23ff      	movs	r3, #255	@ 0xff
 8013474:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8013476:	2300      	movs	r3, #0
 8013478:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801347a:	7dba      	ldrb	r2, [r7, #22]
 801347c:	693b      	ldr	r3, [r7, #16]
 801347e:	9302      	str	r3, [sp, #8]
 8013480:	2306      	movs	r3, #6
 8013482:	9301      	str	r3, [sp, #4]
 8013484:	7d7b      	ldrb	r3, [r7, #21]
 8013486:	9300      	str	r3, [sp, #0]
 8013488:	4613      	mov	r3, r2
 801348a:	683a      	ldr	r2, [r7, #0]
 801348c:	6879      	ldr	r1, [r7, #4]
 801348e:	68b8      	ldr	r0, [r7, #8]
 8013490:	f002 f8e6 	bl	8015660 <ip4_output_if>
 8013494:	4603      	mov	r3, r0
 8013496:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8013498:	68b8      	ldr	r0, [r7, #8]
 801349a:	f7f9 fe85 	bl	800d1a8 <pbuf_free>
  return err;
 801349e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80134a2:	4618      	mov	r0, r3
 80134a4:	3718      	adds	r7, #24
 80134a6:	46bd      	mov	sp, r7
 80134a8:	bd80      	pop	{r7, pc}
 80134aa:	bf00      	nop
 80134ac:	08019f0c 	.word	0x08019f0c
 80134b0:	0801a664 	.word	0x0801a664
 80134b4:	08019f60 	.word	0x08019f60

080134b8 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 80134b8:	b590      	push	{r4, r7, lr}
 80134ba:	b08b      	sub	sp, #44	@ 0x2c
 80134bc:	af04      	add	r7, sp, #16
 80134be:	60f8      	str	r0, [r7, #12]
 80134c0:	60b9      	str	r1, [r7, #8]
 80134c2:	607a      	str	r2, [r7, #4]
 80134c4:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 80134c6:	683b      	ldr	r3, [r7, #0]
 80134c8:	2b00      	cmp	r3, #0
 80134ca:	d106      	bne.n	80134da <tcp_rst+0x22>
 80134cc:	4b1f      	ldr	r3, [pc, #124]	@ (801354c <tcp_rst+0x94>)
 80134ce:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 80134d2:	491f      	ldr	r1, [pc, #124]	@ (8013550 <tcp_rst+0x98>)
 80134d4:	481f      	ldr	r0, [pc, #124]	@ (8013554 <tcp_rst+0x9c>)
 80134d6:	f003 fba7 	bl	8016c28 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 80134da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80134dc:	2b00      	cmp	r3, #0
 80134de:	d106      	bne.n	80134ee <tcp_rst+0x36>
 80134e0:	4b1a      	ldr	r3, [pc, #104]	@ (801354c <tcp_rst+0x94>)
 80134e2:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 80134e6:	491c      	ldr	r1, [pc, #112]	@ (8013558 <tcp_rst+0xa0>)
 80134e8:	481a      	ldr	r0, [pc, #104]	@ (8013554 <tcp_rst+0x9c>)
 80134ea:	f003 fb9d 	bl	8016c28 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80134ee:	2300      	movs	r3, #0
 80134f0:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 80134f2:	f246 0308 	movw	r3, #24584	@ 0x6008
 80134f6:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 80134f8:	7dfb      	ldrb	r3, [r7, #23]
 80134fa:	b29c      	uxth	r4, r3
 80134fc:	68b8      	ldr	r0, [r7, #8]
 80134fe:	f7f8 fa76 	bl	800b9ee <lwip_htonl>
 8013502:	4602      	mov	r2, r0
 8013504:	8abb      	ldrh	r3, [r7, #20]
 8013506:	9303      	str	r3, [sp, #12]
 8013508:	2314      	movs	r3, #20
 801350a:	9302      	str	r3, [sp, #8]
 801350c:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 801350e:	9301      	str	r3, [sp, #4]
 8013510:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8013512:	9300      	str	r3, [sp, #0]
 8013514:	4613      	mov	r3, r2
 8013516:	2200      	movs	r2, #0
 8013518:	4621      	mov	r1, r4
 801351a:	6878      	ldr	r0, [r7, #4]
 801351c:	f7ff fe94 	bl	8013248 <tcp_output_alloc_header_common>
 8013520:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8013522:	693b      	ldr	r3, [r7, #16]
 8013524:	2b00      	cmp	r3, #0
 8013526:	d00c      	beq.n	8013542 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8013528:	7dfb      	ldrb	r3, [r7, #23]
 801352a:	2200      	movs	r2, #0
 801352c:	6939      	ldr	r1, [r7, #16]
 801352e:	68f8      	ldr	r0, [r7, #12]
 8013530:	f7ff ff3a 	bl	80133a8 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8013534:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013536:	683a      	ldr	r2, [r7, #0]
 8013538:	6939      	ldr	r1, [r7, #16]
 801353a:	68f8      	ldr	r0, [r7, #12]
 801353c:	f7ff ff72 	bl	8013424 <tcp_output_control_segment>
 8013540:	e000      	b.n	8013544 <tcp_rst+0x8c>
    return;
 8013542:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8013544:	371c      	adds	r7, #28
 8013546:	46bd      	mov	sp, r7
 8013548:	bd90      	pop	{r4, r7, pc}
 801354a:	bf00      	nop
 801354c:	08019f0c 	.word	0x08019f0c
 8013550:	0801a690 	.word	0x0801a690
 8013554:	08019f60 	.word	0x08019f60
 8013558:	0801a6ac 	.word	0x0801a6ac

0801355c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 801355c:	b590      	push	{r4, r7, lr}
 801355e:	b087      	sub	sp, #28
 8013560:	af00      	add	r7, sp, #0
 8013562:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8013564:	2300      	movs	r3, #0
 8013566:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8013568:	2300      	movs	r3, #0
 801356a:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 801356c:	687b      	ldr	r3, [r7, #4]
 801356e:	2b00      	cmp	r3, #0
 8013570:	d106      	bne.n	8013580 <tcp_send_empty_ack+0x24>
 8013572:	4b28      	ldr	r3, [pc, #160]	@ (8013614 <tcp_send_empty_ack+0xb8>)
 8013574:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 8013578:	4927      	ldr	r1, [pc, #156]	@ (8013618 <tcp_send_empty_ack+0xbc>)
 801357a:	4828      	ldr	r0, [pc, #160]	@ (801361c <tcp_send_empty_ack+0xc0>)
 801357c:	f003 fb54 	bl	8016c28 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8013580:	7dfb      	ldrb	r3, [r7, #23]
 8013582:	009b      	lsls	r3, r3, #2
 8013584:	b2db      	uxtb	r3, r3
 8013586:	f003 0304 	and.w	r3, r3, #4
 801358a:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 801358c:	7d7b      	ldrb	r3, [r7, #21]
 801358e:	b29c      	uxth	r4, r3
 8013590:	687b      	ldr	r3, [r7, #4]
 8013592:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8013594:	4618      	mov	r0, r3
 8013596:	f7f8 fa2a 	bl	800b9ee <lwip_htonl>
 801359a:	4603      	mov	r3, r0
 801359c:	2200      	movs	r2, #0
 801359e:	4621      	mov	r1, r4
 80135a0:	6878      	ldr	r0, [r7, #4]
 80135a2:	f7ff fec3 	bl	801332c <tcp_output_alloc_header>
 80135a6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80135a8:	693b      	ldr	r3, [r7, #16]
 80135aa:	2b00      	cmp	r3, #0
 80135ac:	d109      	bne.n	80135c2 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80135ae:	687b      	ldr	r3, [r7, #4]
 80135b0:	8b5b      	ldrh	r3, [r3, #26]
 80135b2:	f043 0303 	orr.w	r3, r3, #3
 80135b6:	b29a      	uxth	r2, r3
 80135b8:	687b      	ldr	r3, [r7, #4]
 80135ba:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 80135bc:	f06f 0301 	mvn.w	r3, #1
 80135c0:	e023      	b.n	801360a <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 80135c2:	7dbb      	ldrb	r3, [r7, #22]
 80135c4:	7dfa      	ldrb	r2, [r7, #23]
 80135c6:	6939      	ldr	r1, [r7, #16]
 80135c8:	6878      	ldr	r0, [r7, #4]
 80135ca:	f7ff feed 	bl	80133a8 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80135ce:	687a      	ldr	r2, [r7, #4]
 80135d0:	687b      	ldr	r3, [r7, #4]
 80135d2:	3304      	adds	r3, #4
 80135d4:	6939      	ldr	r1, [r7, #16]
 80135d6:	6878      	ldr	r0, [r7, #4]
 80135d8:	f7ff ff24 	bl	8013424 <tcp_output_control_segment>
 80135dc:	4603      	mov	r3, r0
 80135de:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 80135e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80135e4:	2b00      	cmp	r3, #0
 80135e6:	d007      	beq.n	80135f8 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80135e8:	687b      	ldr	r3, [r7, #4]
 80135ea:	8b5b      	ldrh	r3, [r3, #26]
 80135ec:	f043 0303 	orr.w	r3, r3, #3
 80135f0:	b29a      	uxth	r2, r3
 80135f2:	687b      	ldr	r3, [r7, #4]
 80135f4:	835a      	strh	r2, [r3, #26]
 80135f6:	e006      	b.n	8013606 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80135f8:	687b      	ldr	r3, [r7, #4]
 80135fa:	8b5b      	ldrh	r3, [r3, #26]
 80135fc:	f023 0303 	bic.w	r3, r3, #3
 8013600:	b29a      	uxth	r2, r3
 8013602:	687b      	ldr	r3, [r7, #4]
 8013604:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8013606:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801360a:	4618      	mov	r0, r3
 801360c:	371c      	adds	r7, #28
 801360e:	46bd      	mov	sp, r7
 8013610:	bd90      	pop	{r4, r7, pc}
 8013612:	bf00      	nop
 8013614:	08019f0c 	.word	0x08019f0c
 8013618:	0801a6c8 	.word	0x0801a6c8
 801361c:	08019f60 	.word	0x08019f60

08013620 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8013620:	b590      	push	{r4, r7, lr}
 8013622:	b087      	sub	sp, #28
 8013624:	af00      	add	r7, sp, #0
 8013626:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8013628:	2300      	movs	r3, #0
 801362a:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 801362c:	687b      	ldr	r3, [r7, #4]
 801362e:	2b00      	cmp	r3, #0
 8013630:	d106      	bne.n	8013640 <tcp_keepalive+0x20>
 8013632:	4b18      	ldr	r3, [pc, #96]	@ (8013694 <tcp_keepalive+0x74>)
 8013634:	f640 0224 	movw	r2, #2084	@ 0x824
 8013638:	4917      	ldr	r1, [pc, #92]	@ (8013698 <tcp_keepalive+0x78>)
 801363a:	4818      	ldr	r0, [pc, #96]	@ (801369c <tcp_keepalive+0x7c>)
 801363c:	f003 faf4 	bl	8016c28 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8013640:	7dfb      	ldrb	r3, [r7, #23]
 8013642:	b29c      	uxth	r4, r3
 8013644:	687b      	ldr	r3, [r7, #4]
 8013646:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8013648:	3b01      	subs	r3, #1
 801364a:	4618      	mov	r0, r3
 801364c:	f7f8 f9cf 	bl	800b9ee <lwip_htonl>
 8013650:	4603      	mov	r3, r0
 8013652:	2200      	movs	r2, #0
 8013654:	4621      	mov	r1, r4
 8013656:	6878      	ldr	r0, [r7, #4]
 8013658:	f7ff fe68 	bl	801332c <tcp_output_alloc_header>
 801365c:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801365e:	693b      	ldr	r3, [r7, #16]
 8013660:	2b00      	cmp	r3, #0
 8013662:	d102      	bne.n	801366a <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8013664:	f04f 33ff 	mov.w	r3, #4294967295
 8013668:	e010      	b.n	801368c <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801366a:	7dfb      	ldrb	r3, [r7, #23]
 801366c:	2200      	movs	r2, #0
 801366e:	6939      	ldr	r1, [r7, #16]
 8013670:	6878      	ldr	r0, [r7, #4]
 8013672:	f7ff fe99 	bl	80133a8 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8013676:	687a      	ldr	r2, [r7, #4]
 8013678:	687b      	ldr	r3, [r7, #4]
 801367a:	3304      	adds	r3, #4
 801367c:	6939      	ldr	r1, [r7, #16]
 801367e:	6878      	ldr	r0, [r7, #4]
 8013680:	f7ff fed0 	bl	8013424 <tcp_output_control_segment>
 8013684:	4603      	mov	r3, r0
 8013686:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8013688:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801368c:	4618      	mov	r0, r3
 801368e:	371c      	adds	r7, #28
 8013690:	46bd      	mov	sp, r7
 8013692:	bd90      	pop	{r4, r7, pc}
 8013694:	08019f0c 	.word	0x08019f0c
 8013698:	0801a6e8 	.word	0x0801a6e8
 801369c:	08019f60 	.word	0x08019f60

080136a0 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 80136a0:	b590      	push	{r4, r7, lr}
 80136a2:	b08b      	sub	sp, #44	@ 0x2c
 80136a4:	af00      	add	r7, sp, #0
 80136a6:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80136a8:	2300      	movs	r3, #0
 80136aa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 80136ae:	687b      	ldr	r3, [r7, #4]
 80136b0:	2b00      	cmp	r3, #0
 80136b2:	d106      	bne.n	80136c2 <tcp_zero_window_probe+0x22>
 80136b4:	4b4c      	ldr	r3, [pc, #304]	@ (80137e8 <tcp_zero_window_probe+0x148>)
 80136b6:	f640 024f 	movw	r2, #2127	@ 0x84f
 80136ba:	494c      	ldr	r1, [pc, #304]	@ (80137ec <tcp_zero_window_probe+0x14c>)
 80136bc:	484c      	ldr	r0, [pc, #304]	@ (80137f0 <tcp_zero_window_probe+0x150>)
 80136be:	f003 fab3 	bl	8016c28 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 80136c2:	687b      	ldr	r3, [r7, #4]
 80136c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80136c6:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 80136c8:	6a3b      	ldr	r3, [r7, #32]
 80136ca:	2b00      	cmp	r3, #0
 80136cc:	d101      	bne.n	80136d2 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 80136ce:	2300      	movs	r3, #0
 80136d0:	e086      	b.n	80137e0 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 80136d2:	687b      	ldr	r3, [r7, #4]
 80136d4:	f893 30a2 	ldrb.w	r3, [r3, #162]	@ 0xa2
 80136d8:	2bff      	cmp	r3, #255	@ 0xff
 80136da:	d007      	beq.n	80136ec <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 80136dc:	687b      	ldr	r3, [r7, #4]
 80136de:	f893 30a2 	ldrb.w	r3, [r3, #162]	@ 0xa2
 80136e2:	3301      	adds	r3, #1
 80136e4:	b2da      	uxtb	r2, r3
 80136e6:	687b      	ldr	r3, [r7, #4]
 80136e8:	f883 20a2 	strb.w	r2, [r3, #162]	@ 0xa2
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 80136ec:	6a3b      	ldr	r3, [r7, #32]
 80136ee:	68db      	ldr	r3, [r3, #12]
 80136f0:	899b      	ldrh	r3, [r3, #12]
 80136f2:	b29b      	uxth	r3, r3
 80136f4:	4618      	mov	r0, r3
 80136f6:	f7f8 f965 	bl	800b9c4 <lwip_htons>
 80136fa:	4603      	mov	r3, r0
 80136fc:	b2db      	uxtb	r3, r3
 80136fe:	f003 0301 	and.w	r3, r3, #1
 8013702:	2b00      	cmp	r3, #0
 8013704:	d005      	beq.n	8013712 <tcp_zero_window_probe+0x72>
 8013706:	6a3b      	ldr	r3, [r7, #32]
 8013708:	891b      	ldrh	r3, [r3, #8]
 801370a:	2b00      	cmp	r3, #0
 801370c:	d101      	bne.n	8013712 <tcp_zero_window_probe+0x72>
 801370e:	2301      	movs	r3, #1
 8013710:	e000      	b.n	8013714 <tcp_zero_window_probe+0x74>
 8013712:	2300      	movs	r3, #0
 8013714:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8013716:	7ffb      	ldrb	r3, [r7, #31]
 8013718:	2b00      	cmp	r3, #0
 801371a:	bf0c      	ite	eq
 801371c:	2301      	moveq	r3, #1
 801371e:	2300      	movne	r3, #0
 8013720:	b2db      	uxtb	r3, r3
 8013722:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8013724:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013728:	b299      	uxth	r1, r3
 801372a:	6a3b      	ldr	r3, [r7, #32]
 801372c:	68db      	ldr	r3, [r3, #12]
 801372e:	685b      	ldr	r3, [r3, #4]
 8013730:	8bba      	ldrh	r2, [r7, #28]
 8013732:	6878      	ldr	r0, [r7, #4]
 8013734:	f7ff fdfa 	bl	801332c <tcp_output_alloc_header>
 8013738:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 801373a:	69bb      	ldr	r3, [r7, #24]
 801373c:	2b00      	cmp	r3, #0
 801373e:	d102      	bne.n	8013746 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8013740:	f04f 33ff 	mov.w	r3, #4294967295
 8013744:	e04c      	b.n	80137e0 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8013746:	69bb      	ldr	r3, [r7, #24]
 8013748:	685b      	ldr	r3, [r3, #4]
 801374a:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 801374c:	7ffb      	ldrb	r3, [r7, #31]
 801374e:	2b00      	cmp	r3, #0
 8013750:	d011      	beq.n	8013776 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8013752:	697b      	ldr	r3, [r7, #20]
 8013754:	899b      	ldrh	r3, [r3, #12]
 8013756:	b29b      	uxth	r3, r3
 8013758:	b21b      	sxth	r3, r3
 801375a:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 801375e:	b21c      	sxth	r4, r3
 8013760:	2011      	movs	r0, #17
 8013762:	f7f8 f92f 	bl	800b9c4 <lwip_htons>
 8013766:	4603      	mov	r3, r0
 8013768:	b21b      	sxth	r3, r3
 801376a:	4323      	orrs	r3, r4
 801376c:	b21b      	sxth	r3, r3
 801376e:	b29a      	uxth	r2, r3
 8013770:	697b      	ldr	r3, [r7, #20]
 8013772:	819a      	strh	r2, [r3, #12]
 8013774:	e010      	b.n	8013798 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8013776:	69bb      	ldr	r3, [r7, #24]
 8013778:	685b      	ldr	r3, [r3, #4]
 801377a:	3314      	adds	r3, #20
 801377c:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801377e:	6a3b      	ldr	r3, [r7, #32]
 8013780:	6858      	ldr	r0, [r3, #4]
 8013782:	6a3b      	ldr	r3, [r7, #32]
 8013784:	685b      	ldr	r3, [r3, #4]
 8013786:	891a      	ldrh	r2, [r3, #8]
 8013788:	6a3b      	ldr	r3, [r7, #32]
 801378a:	891b      	ldrh	r3, [r3, #8]
 801378c:	1ad3      	subs	r3, r2, r3
 801378e:	b29b      	uxth	r3, r3
 8013790:	2201      	movs	r2, #1
 8013792:	6939      	ldr	r1, [r7, #16]
 8013794:	f7f9 fefe 	bl	800d594 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8013798:	6a3b      	ldr	r3, [r7, #32]
 801379a:	68db      	ldr	r3, [r3, #12]
 801379c:	685b      	ldr	r3, [r3, #4]
 801379e:	4618      	mov	r0, r3
 80137a0:	f7f8 f925 	bl	800b9ee <lwip_htonl>
 80137a4:	4603      	mov	r3, r0
 80137a6:	3301      	adds	r3, #1
 80137a8:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80137aa:	687b      	ldr	r3, [r7, #4]
 80137ac:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80137ae:	68fb      	ldr	r3, [r7, #12]
 80137b0:	1ad3      	subs	r3, r2, r3
 80137b2:	2b00      	cmp	r3, #0
 80137b4:	da02      	bge.n	80137bc <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 80137b6:	687b      	ldr	r3, [r7, #4]
 80137b8:	68fa      	ldr	r2, [r7, #12]
 80137ba:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80137bc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80137c0:	2200      	movs	r2, #0
 80137c2:	69b9      	ldr	r1, [r7, #24]
 80137c4:	6878      	ldr	r0, [r7, #4]
 80137c6:	f7ff fdef 	bl	80133a8 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80137ca:	687a      	ldr	r2, [r7, #4]
 80137cc:	687b      	ldr	r3, [r7, #4]
 80137ce:	3304      	adds	r3, #4
 80137d0:	69b9      	ldr	r1, [r7, #24]
 80137d2:	6878      	ldr	r0, [r7, #4]
 80137d4:	f7ff fe26 	bl	8013424 <tcp_output_control_segment>
 80137d8:	4603      	mov	r3, r0
 80137da:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80137dc:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80137e0:	4618      	mov	r0, r3
 80137e2:	372c      	adds	r7, #44	@ 0x2c
 80137e4:	46bd      	mov	sp, r7
 80137e6:	bd90      	pop	{r4, r7, pc}
 80137e8:	08019f0c 	.word	0x08019f0c
 80137ec:	0801a704 	.word	0x0801a704
 80137f0:	08019f60 	.word	0x08019f60

080137f4 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 80137f4:	b580      	push	{r7, lr}
 80137f6:	b082      	sub	sp, #8
 80137f8:	af00      	add	r7, sp, #0
 80137fa:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 80137fc:	f7f9 ffda 	bl	800d7b4 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8013800:	4b0a      	ldr	r3, [pc, #40]	@ (801382c <tcpip_tcp_timer+0x38>)
 8013802:	681b      	ldr	r3, [r3, #0]
 8013804:	2b00      	cmp	r3, #0
 8013806:	d103      	bne.n	8013810 <tcpip_tcp_timer+0x1c>
 8013808:	4b09      	ldr	r3, [pc, #36]	@ (8013830 <tcpip_tcp_timer+0x3c>)
 801380a:	681b      	ldr	r3, [r3, #0]
 801380c:	2b00      	cmp	r3, #0
 801380e:	d005      	beq.n	801381c <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8013810:	2200      	movs	r2, #0
 8013812:	4908      	ldr	r1, [pc, #32]	@ (8013834 <tcpip_tcp_timer+0x40>)
 8013814:	20fa      	movs	r0, #250	@ 0xfa
 8013816:	f000 f8f3 	bl	8013a00 <sys_timeout>
 801381a:	e003      	b.n	8013824 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 801381c:	4b06      	ldr	r3, [pc, #24]	@ (8013838 <tcpip_tcp_timer+0x44>)
 801381e:	2200      	movs	r2, #0
 8013820:	601a      	str	r2, [r3, #0]
  }
}
 8013822:	bf00      	nop
 8013824:	bf00      	nop
 8013826:	3708      	adds	r7, #8
 8013828:	46bd      	mov	sp, r7
 801382a:	bd80      	pop	{r7, pc}
 801382c:	2000f3f4 	.word	0x2000f3f4
 8013830:	2000f3f8 	.word	0x2000f3f8
 8013834:	080137f5 	.word	0x080137f5
 8013838:	2000f440 	.word	0x2000f440

0801383c <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 801383c:	b580      	push	{r7, lr}
 801383e:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8013840:	4b0a      	ldr	r3, [pc, #40]	@ (801386c <tcp_timer_needed+0x30>)
 8013842:	681b      	ldr	r3, [r3, #0]
 8013844:	2b00      	cmp	r3, #0
 8013846:	d10f      	bne.n	8013868 <tcp_timer_needed+0x2c>
 8013848:	4b09      	ldr	r3, [pc, #36]	@ (8013870 <tcp_timer_needed+0x34>)
 801384a:	681b      	ldr	r3, [r3, #0]
 801384c:	2b00      	cmp	r3, #0
 801384e:	d103      	bne.n	8013858 <tcp_timer_needed+0x1c>
 8013850:	4b08      	ldr	r3, [pc, #32]	@ (8013874 <tcp_timer_needed+0x38>)
 8013852:	681b      	ldr	r3, [r3, #0]
 8013854:	2b00      	cmp	r3, #0
 8013856:	d007      	beq.n	8013868 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8013858:	4b04      	ldr	r3, [pc, #16]	@ (801386c <tcp_timer_needed+0x30>)
 801385a:	2201      	movs	r2, #1
 801385c:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801385e:	2200      	movs	r2, #0
 8013860:	4905      	ldr	r1, [pc, #20]	@ (8013878 <tcp_timer_needed+0x3c>)
 8013862:	20fa      	movs	r0, #250	@ 0xfa
 8013864:	f000 f8cc 	bl	8013a00 <sys_timeout>
  }
}
 8013868:	bf00      	nop
 801386a:	bd80      	pop	{r7, pc}
 801386c:	2000f440 	.word	0x2000f440
 8013870:	2000f3f4 	.word	0x2000f3f4
 8013874:	2000f3f8 	.word	0x2000f3f8
 8013878:	080137f5 	.word	0x080137f5

0801387c <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 801387c:	b580      	push	{r7, lr}
 801387e:	b086      	sub	sp, #24
 8013880:	af00      	add	r7, sp, #0
 8013882:	60f8      	str	r0, [r7, #12]
 8013884:	60b9      	str	r1, [r7, #8]
 8013886:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8013888:	200a      	movs	r0, #10
 801388a:	f7f8 fd73 	bl	800c374 <memp_malloc>
 801388e:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8013890:	693b      	ldr	r3, [r7, #16]
 8013892:	2b00      	cmp	r3, #0
 8013894:	d109      	bne.n	80138aa <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8013896:	693b      	ldr	r3, [r7, #16]
 8013898:	2b00      	cmp	r3, #0
 801389a:	d151      	bne.n	8013940 <sys_timeout_abs+0xc4>
 801389c:	4b2a      	ldr	r3, [pc, #168]	@ (8013948 <sys_timeout_abs+0xcc>)
 801389e:	22be      	movs	r2, #190	@ 0xbe
 80138a0:	492a      	ldr	r1, [pc, #168]	@ (801394c <sys_timeout_abs+0xd0>)
 80138a2:	482b      	ldr	r0, [pc, #172]	@ (8013950 <sys_timeout_abs+0xd4>)
 80138a4:	f003 f9c0 	bl	8016c28 <iprintf>
    return;
 80138a8:	e04a      	b.n	8013940 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 80138aa:	693b      	ldr	r3, [r7, #16]
 80138ac:	2200      	movs	r2, #0
 80138ae:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 80138b0:	693b      	ldr	r3, [r7, #16]
 80138b2:	68ba      	ldr	r2, [r7, #8]
 80138b4:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 80138b6:	693b      	ldr	r3, [r7, #16]
 80138b8:	687a      	ldr	r2, [r7, #4]
 80138ba:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 80138bc:	693b      	ldr	r3, [r7, #16]
 80138be:	68fa      	ldr	r2, [r7, #12]
 80138c0:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 80138c2:	4b24      	ldr	r3, [pc, #144]	@ (8013954 <sys_timeout_abs+0xd8>)
 80138c4:	681b      	ldr	r3, [r3, #0]
 80138c6:	2b00      	cmp	r3, #0
 80138c8:	d103      	bne.n	80138d2 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 80138ca:	4a22      	ldr	r2, [pc, #136]	@ (8013954 <sys_timeout_abs+0xd8>)
 80138cc:	693b      	ldr	r3, [r7, #16]
 80138ce:	6013      	str	r3, [r2, #0]
    return;
 80138d0:	e037      	b.n	8013942 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 80138d2:	693b      	ldr	r3, [r7, #16]
 80138d4:	685a      	ldr	r2, [r3, #4]
 80138d6:	4b1f      	ldr	r3, [pc, #124]	@ (8013954 <sys_timeout_abs+0xd8>)
 80138d8:	681b      	ldr	r3, [r3, #0]
 80138da:	685b      	ldr	r3, [r3, #4]
 80138dc:	1ad3      	subs	r3, r2, r3
 80138de:	0fdb      	lsrs	r3, r3, #31
 80138e0:	f003 0301 	and.w	r3, r3, #1
 80138e4:	b2db      	uxtb	r3, r3
 80138e6:	2b00      	cmp	r3, #0
 80138e8:	d007      	beq.n	80138fa <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 80138ea:	4b1a      	ldr	r3, [pc, #104]	@ (8013954 <sys_timeout_abs+0xd8>)
 80138ec:	681a      	ldr	r2, [r3, #0]
 80138ee:	693b      	ldr	r3, [r7, #16]
 80138f0:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 80138f2:	4a18      	ldr	r2, [pc, #96]	@ (8013954 <sys_timeout_abs+0xd8>)
 80138f4:	693b      	ldr	r3, [r7, #16]
 80138f6:	6013      	str	r3, [r2, #0]
 80138f8:	e023      	b.n	8013942 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 80138fa:	4b16      	ldr	r3, [pc, #88]	@ (8013954 <sys_timeout_abs+0xd8>)
 80138fc:	681b      	ldr	r3, [r3, #0]
 80138fe:	617b      	str	r3, [r7, #20]
 8013900:	e01a      	b.n	8013938 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8013902:	697b      	ldr	r3, [r7, #20]
 8013904:	681b      	ldr	r3, [r3, #0]
 8013906:	2b00      	cmp	r3, #0
 8013908:	d00b      	beq.n	8013922 <sys_timeout_abs+0xa6>
 801390a:	693b      	ldr	r3, [r7, #16]
 801390c:	685a      	ldr	r2, [r3, #4]
 801390e:	697b      	ldr	r3, [r7, #20]
 8013910:	681b      	ldr	r3, [r3, #0]
 8013912:	685b      	ldr	r3, [r3, #4]
 8013914:	1ad3      	subs	r3, r2, r3
 8013916:	0fdb      	lsrs	r3, r3, #31
 8013918:	f003 0301 	and.w	r3, r3, #1
 801391c:	b2db      	uxtb	r3, r3
 801391e:	2b00      	cmp	r3, #0
 8013920:	d007      	beq.n	8013932 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8013922:	697b      	ldr	r3, [r7, #20]
 8013924:	681a      	ldr	r2, [r3, #0]
 8013926:	693b      	ldr	r3, [r7, #16]
 8013928:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801392a:	697b      	ldr	r3, [r7, #20]
 801392c:	693a      	ldr	r2, [r7, #16]
 801392e:	601a      	str	r2, [r3, #0]
        break;
 8013930:	e007      	b.n	8013942 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8013932:	697b      	ldr	r3, [r7, #20]
 8013934:	681b      	ldr	r3, [r3, #0]
 8013936:	617b      	str	r3, [r7, #20]
 8013938:	697b      	ldr	r3, [r7, #20]
 801393a:	2b00      	cmp	r3, #0
 801393c:	d1e1      	bne.n	8013902 <sys_timeout_abs+0x86>
 801393e:	e000      	b.n	8013942 <sys_timeout_abs+0xc6>
    return;
 8013940:	bf00      	nop
      }
    }
  }
}
 8013942:	3718      	adds	r7, #24
 8013944:	46bd      	mov	sp, r7
 8013946:	bd80      	pop	{r7, pc}
 8013948:	0801a728 	.word	0x0801a728
 801394c:	0801a75c 	.word	0x0801a75c
 8013950:	0801a79c 	.word	0x0801a79c
 8013954:	2000f438 	.word	0x2000f438

08013958 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8013958:	b580      	push	{r7, lr}
 801395a:	b086      	sub	sp, #24
 801395c:	af00      	add	r7, sp, #0
 801395e:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8013960:	687b      	ldr	r3, [r7, #4]
 8013962:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8013964:	697b      	ldr	r3, [r7, #20]
 8013966:	685b      	ldr	r3, [r3, #4]
 8013968:	4798      	blx	r3

  now = sys_now();
 801396a:	f7f1 fbef 	bl	800514c <sys_now>
 801396e:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8013970:	697b      	ldr	r3, [r7, #20]
 8013972:	681a      	ldr	r2, [r3, #0]
 8013974:	4b0f      	ldr	r3, [pc, #60]	@ (80139b4 <lwip_cyclic_timer+0x5c>)
 8013976:	681b      	ldr	r3, [r3, #0]
 8013978:	4413      	add	r3, r2
 801397a:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 801397c:	68fa      	ldr	r2, [r7, #12]
 801397e:	693b      	ldr	r3, [r7, #16]
 8013980:	1ad3      	subs	r3, r2, r3
 8013982:	0fdb      	lsrs	r3, r3, #31
 8013984:	f003 0301 	and.w	r3, r3, #1
 8013988:	b2db      	uxtb	r3, r3
 801398a:	2b00      	cmp	r3, #0
 801398c:	d009      	beq.n	80139a2 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801398e:	697b      	ldr	r3, [r7, #20]
 8013990:	681a      	ldr	r2, [r3, #0]
 8013992:	693b      	ldr	r3, [r7, #16]
 8013994:	4413      	add	r3, r2
 8013996:	687a      	ldr	r2, [r7, #4]
 8013998:	4907      	ldr	r1, [pc, #28]	@ (80139b8 <lwip_cyclic_timer+0x60>)
 801399a:	4618      	mov	r0, r3
 801399c:	f7ff ff6e 	bl	801387c <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 80139a0:	e004      	b.n	80139ac <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 80139a2:	687a      	ldr	r2, [r7, #4]
 80139a4:	4904      	ldr	r1, [pc, #16]	@ (80139b8 <lwip_cyclic_timer+0x60>)
 80139a6:	68f8      	ldr	r0, [r7, #12]
 80139a8:	f7ff ff68 	bl	801387c <sys_timeout_abs>
}
 80139ac:	bf00      	nop
 80139ae:	3718      	adds	r7, #24
 80139b0:	46bd      	mov	sp, r7
 80139b2:	bd80      	pop	{r7, pc}
 80139b4:	2000f43c 	.word	0x2000f43c
 80139b8:	08013959 	.word	0x08013959

080139bc <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 80139bc:	b580      	push	{r7, lr}
 80139be:	b082      	sub	sp, #8
 80139c0:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80139c2:	2301      	movs	r3, #1
 80139c4:	607b      	str	r3, [r7, #4]
 80139c6:	e00e      	b.n	80139e6 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 80139c8:	4a0b      	ldr	r2, [pc, #44]	@ (80139f8 <sys_timeouts_init+0x3c>)
 80139ca:	687b      	ldr	r3, [r7, #4]
 80139cc:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80139d0:	687b      	ldr	r3, [r7, #4]
 80139d2:	00db      	lsls	r3, r3, #3
 80139d4:	4a08      	ldr	r2, [pc, #32]	@ (80139f8 <sys_timeouts_init+0x3c>)
 80139d6:	4413      	add	r3, r2
 80139d8:	461a      	mov	r2, r3
 80139da:	4908      	ldr	r1, [pc, #32]	@ (80139fc <sys_timeouts_init+0x40>)
 80139dc:	f000 f810 	bl	8013a00 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80139e0:	687b      	ldr	r3, [r7, #4]
 80139e2:	3301      	adds	r3, #1
 80139e4:	607b      	str	r3, [r7, #4]
 80139e6:	687b      	ldr	r3, [r7, #4]
 80139e8:	2b02      	cmp	r3, #2
 80139ea:	d9ed      	bls.n	80139c8 <sys_timeouts_init+0xc>
  }
}
 80139ec:	bf00      	nop
 80139ee:	bf00      	nop
 80139f0:	3708      	adds	r7, #8
 80139f2:	46bd      	mov	sp, r7
 80139f4:	bd80      	pop	{r7, pc}
 80139f6:	bf00      	nop
 80139f8:	0801b37c 	.word	0x0801b37c
 80139fc:	08013959 	.word	0x08013959

08013a00 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8013a00:	b580      	push	{r7, lr}
 8013a02:	b086      	sub	sp, #24
 8013a04:	af00      	add	r7, sp, #0
 8013a06:	60f8      	str	r0, [r7, #12]
 8013a08:	60b9      	str	r1, [r7, #8]
 8013a0a:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8013a0c:	68fb      	ldr	r3, [r7, #12]
 8013a0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8013a12:	d306      	bcc.n	8013a22 <sys_timeout+0x22>
 8013a14:	4b0a      	ldr	r3, [pc, #40]	@ (8013a40 <sys_timeout+0x40>)
 8013a16:	f240 1229 	movw	r2, #297	@ 0x129
 8013a1a:	490a      	ldr	r1, [pc, #40]	@ (8013a44 <sys_timeout+0x44>)
 8013a1c:	480a      	ldr	r0, [pc, #40]	@ (8013a48 <sys_timeout+0x48>)
 8013a1e:	f003 f903 	bl	8016c28 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8013a22:	f7f1 fb93 	bl	800514c <sys_now>
 8013a26:	4602      	mov	r2, r0
 8013a28:	68fb      	ldr	r3, [r7, #12]
 8013a2a:	4413      	add	r3, r2
 8013a2c:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8013a2e:	687a      	ldr	r2, [r7, #4]
 8013a30:	68b9      	ldr	r1, [r7, #8]
 8013a32:	6978      	ldr	r0, [r7, #20]
 8013a34:	f7ff ff22 	bl	801387c <sys_timeout_abs>
#endif
}
 8013a38:	bf00      	nop
 8013a3a:	3718      	adds	r7, #24
 8013a3c:	46bd      	mov	sp, r7
 8013a3e:	bd80      	pop	{r7, pc}
 8013a40:	0801a728 	.word	0x0801a728
 8013a44:	0801a7c4 	.word	0x0801a7c4
 8013a48:	0801a79c 	.word	0x0801a79c

08013a4c <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8013a4c:	b580      	push	{r7, lr}
 8013a4e:	b084      	sub	sp, #16
 8013a50:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8013a52:	f7f1 fb7b 	bl	800514c <sys_now>
 8013a56:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8013a58:	4b17      	ldr	r3, [pc, #92]	@ (8013ab8 <sys_check_timeouts+0x6c>)
 8013a5a:	681b      	ldr	r3, [r3, #0]
 8013a5c:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8013a5e:	68bb      	ldr	r3, [r7, #8]
 8013a60:	2b00      	cmp	r3, #0
 8013a62:	d022      	beq.n	8013aaa <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8013a64:	68bb      	ldr	r3, [r7, #8]
 8013a66:	685b      	ldr	r3, [r3, #4]
 8013a68:	68fa      	ldr	r2, [r7, #12]
 8013a6a:	1ad3      	subs	r3, r2, r3
 8013a6c:	0fdb      	lsrs	r3, r3, #31
 8013a6e:	f003 0301 	and.w	r3, r3, #1
 8013a72:	b2db      	uxtb	r3, r3
 8013a74:	2b00      	cmp	r3, #0
 8013a76:	d11a      	bne.n	8013aae <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8013a78:	68bb      	ldr	r3, [r7, #8]
 8013a7a:	681b      	ldr	r3, [r3, #0]
 8013a7c:	4a0e      	ldr	r2, [pc, #56]	@ (8013ab8 <sys_check_timeouts+0x6c>)
 8013a7e:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8013a80:	68bb      	ldr	r3, [r7, #8]
 8013a82:	689b      	ldr	r3, [r3, #8]
 8013a84:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8013a86:	68bb      	ldr	r3, [r7, #8]
 8013a88:	68db      	ldr	r3, [r3, #12]
 8013a8a:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8013a8c:	68bb      	ldr	r3, [r7, #8]
 8013a8e:	685b      	ldr	r3, [r3, #4]
 8013a90:	4a0a      	ldr	r2, [pc, #40]	@ (8013abc <sys_check_timeouts+0x70>)
 8013a92:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8013a94:	68b9      	ldr	r1, [r7, #8]
 8013a96:	200a      	movs	r0, #10
 8013a98:	f7f8 fce2 	bl	800c460 <memp_free>
    if (handler != NULL) {
 8013a9c:	687b      	ldr	r3, [r7, #4]
 8013a9e:	2b00      	cmp	r3, #0
 8013aa0:	d0da      	beq.n	8013a58 <sys_check_timeouts+0xc>
      handler(arg);
 8013aa2:	687b      	ldr	r3, [r7, #4]
 8013aa4:	6838      	ldr	r0, [r7, #0]
 8013aa6:	4798      	blx	r3
  do {
 8013aa8:	e7d6      	b.n	8013a58 <sys_check_timeouts+0xc>
      return;
 8013aaa:	bf00      	nop
 8013aac:	e000      	b.n	8013ab0 <sys_check_timeouts+0x64>
      return;
 8013aae:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8013ab0:	3710      	adds	r7, #16
 8013ab2:	46bd      	mov	sp, r7
 8013ab4:	bd80      	pop	{r7, pc}
 8013ab6:	bf00      	nop
 8013ab8:	2000f438 	.word	0x2000f438
 8013abc:	2000f43c 	.word	0x2000f43c

08013ac0 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8013ac0:	b580      	push	{r7, lr}
 8013ac2:	b082      	sub	sp, #8
 8013ac4:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8013ac6:	4b16      	ldr	r3, [pc, #88]	@ (8013b20 <sys_timeouts_sleeptime+0x60>)
 8013ac8:	681b      	ldr	r3, [r3, #0]
 8013aca:	2b00      	cmp	r3, #0
 8013acc:	d102      	bne.n	8013ad4 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8013ace:	f04f 33ff 	mov.w	r3, #4294967295
 8013ad2:	e020      	b.n	8013b16 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8013ad4:	f7f1 fb3a 	bl	800514c <sys_now>
 8013ad8:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8013ada:	4b11      	ldr	r3, [pc, #68]	@ (8013b20 <sys_timeouts_sleeptime+0x60>)
 8013adc:	681b      	ldr	r3, [r3, #0]
 8013ade:	685a      	ldr	r2, [r3, #4]
 8013ae0:	687b      	ldr	r3, [r7, #4]
 8013ae2:	1ad3      	subs	r3, r2, r3
 8013ae4:	0fdb      	lsrs	r3, r3, #31
 8013ae6:	f003 0301 	and.w	r3, r3, #1
 8013aea:	b2db      	uxtb	r3, r3
 8013aec:	2b00      	cmp	r3, #0
 8013aee:	d001      	beq.n	8013af4 <sys_timeouts_sleeptime+0x34>
    return 0;
 8013af0:	2300      	movs	r3, #0
 8013af2:	e010      	b.n	8013b16 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8013af4:	4b0a      	ldr	r3, [pc, #40]	@ (8013b20 <sys_timeouts_sleeptime+0x60>)
 8013af6:	681b      	ldr	r3, [r3, #0]
 8013af8:	685a      	ldr	r2, [r3, #4]
 8013afa:	687b      	ldr	r3, [r7, #4]
 8013afc:	1ad3      	subs	r3, r2, r3
 8013afe:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8013b00:	683b      	ldr	r3, [r7, #0]
 8013b02:	2b00      	cmp	r3, #0
 8013b04:	da06      	bge.n	8013b14 <sys_timeouts_sleeptime+0x54>
 8013b06:	4b07      	ldr	r3, [pc, #28]	@ (8013b24 <sys_timeouts_sleeptime+0x64>)
 8013b08:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 8013b0c:	4906      	ldr	r1, [pc, #24]	@ (8013b28 <sys_timeouts_sleeptime+0x68>)
 8013b0e:	4807      	ldr	r0, [pc, #28]	@ (8013b2c <sys_timeouts_sleeptime+0x6c>)
 8013b10:	f003 f88a 	bl	8016c28 <iprintf>
    return ret;
 8013b14:	683b      	ldr	r3, [r7, #0]
  }
}
 8013b16:	4618      	mov	r0, r3
 8013b18:	3708      	adds	r7, #8
 8013b1a:	46bd      	mov	sp, r7
 8013b1c:	bd80      	pop	{r7, pc}
 8013b1e:	bf00      	nop
 8013b20:	2000f438 	.word	0x2000f438
 8013b24:	0801a728 	.word	0x0801a728
 8013b28:	0801a7fc 	.word	0x0801a7fc
 8013b2c:	0801a79c 	.word	0x0801a79c

08013b30 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8013b30:	b580      	push	{r7, lr}
 8013b32:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8013b34:	f002 ff78 	bl	8016a28 <rand>
 8013b38:	4603      	mov	r3, r0
 8013b3a:	b29b      	uxth	r3, r3
 8013b3c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8013b40:	b29b      	uxth	r3, r3
 8013b42:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8013b46:	b29a      	uxth	r2, r3
 8013b48:	4b01      	ldr	r3, [pc, #4]	@ (8013b50 <udp_init+0x20>)
 8013b4a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8013b4c:	bf00      	nop
 8013b4e:	bd80      	pop	{r7, pc}
 8013b50:	2000012c 	.word	0x2000012c

08013b54 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8013b54:	b480      	push	{r7}
 8013b56:	b083      	sub	sp, #12
 8013b58:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8013b5a:	2300      	movs	r3, #0
 8013b5c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8013b5e:	4b17      	ldr	r3, [pc, #92]	@ (8013bbc <udp_new_port+0x68>)
 8013b60:	881b      	ldrh	r3, [r3, #0]
 8013b62:	1c5a      	adds	r2, r3, #1
 8013b64:	b291      	uxth	r1, r2
 8013b66:	4a15      	ldr	r2, [pc, #84]	@ (8013bbc <udp_new_port+0x68>)
 8013b68:	8011      	strh	r1, [r2, #0]
 8013b6a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8013b6e:	4293      	cmp	r3, r2
 8013b70:	d103      	bne.n	8013b7a <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8013b72:	4b12      	ldr	r3, [pc, #72]	@ (8013bbc <udp_new_port+0x68>)
 8013b74:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8013b78:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013b7a:	4b11      	ldr	r3, [pc, #68]	@ (8013bc0 <udp_new_port+0x6c>)
 8013b7c:	681b      	ldr	r3, [r3, #0]
 8013b7e:	603b      	str	r3, [r7, #0]
 8013b80:	e011      	b.n	8013ba6 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8013b82:	683b      	ldr	r3, [r7, #0]
 8013b84:	8a5a      	ldrh	r2, [r3, #18]
 8013b86:	4b0d      	ldr	r3, [pc, #52]	@ (8013bbc <udp_new_port+0x68>)
 8013b88:	881b      	ldrh	r3, [r3, #0]
 8013b8a:	429a      	cmp	r2, r3
 8013b8c:	d108      	bne.n	8013ba0 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8013b8e:	88fb      	ldrh	r3, [r7, #6]
 8013b90:	3301      	adds	r3, #1
 8013b92:	80fb      	strh	r3, [r7, #6]
 8013b94:	88fb      	ldrh	r3, [r7, #6]
 8013b96:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8013b9a:	d3e0      	bcc.n	8013b5e <udp_new_port+0xa>
        return 0;
 8013b9c:	2300      	movs	r3, #0
 8013b9e:	e007      	b.n	8013bb0 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013ba0:	683b      	ldr	r3, [r7, #0]
 8013ba2:	68db      	ldr	r3, [r3, #12]
 8013ba4:	603b      	str	r3, [r7, #0]
 8013ba6:	683b      	ldr	r3, [r7, #0]
 8013ba8:	2b00      	cmp	r3, #0
 8013baa:	d1ea      	bne.n	8013b82 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8013bac:	4b03      	ldr	r3, [pc, #12]	@ (8013bbc <udp_new_port+0x68>)
 8013bae:	881b      	ldrh	r3, [r3, #0]
}
 8013bb0:	4618      	mov	r0, r3
 8013bb2:	370c      	adds	r7, #12
 8013bb4:	46bd      	mov	sp, r7
 8013bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bba:	4770      	bx	lr
 8013bbc:	2000012c 	.word	0x2000012c
 8013bc0:	2000f444 	.word	0x2000f444

08013bc4 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8013bc4:	b580      	push	{r7, lr}
 8013bc6:	b084      	sub	sp, #16
 8013bc8:	af00      	add	r7, sp, #0
 8013bca:	60f8      	str	r0, [r7, #12]
 8013bcc:	60b9      	str	r1, [r7, #8]
 8013bce:	4613      	mov	r3, r2
 8013bd0:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8013bd2:	68fb      	ldr	r3, [r7, #12]
 8013bd4:	2b00      	cmp	r3, #0
 8013bd6:	d105      	bne.n	8013be4 <udp_input_local_match+0x20>
 8013bd8:	4b27      	ldr	r3, [pc, #156]	@ (8013c78 <udp_input_local_match+0xb4>)
 8013bda:	2287      	movs	r2, #135	@ 0x87
 8013bdc:	4927      	ldr	r1, [pc, #156]	@ (8013c7c <udp_input_local_match+0xb8>)
 8013bde:	4828      	ldr	r0, [pc, #160]	@ (8013c80 <udp_input_local_match+0xbc>)
 8013be0:	f003 f822 	bl	8016c28 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8013be4:	68bb      	ldr	r3, [r7, #8]
 8013be6:	2b00      	cmp	r3, #0
 8013be8:	d105      	bne.n	8013bf6 <udp_input_local_match+0x32>
 8013bea:	4b23      	ldr	r3, [pc, #140]	@ (8013c78 <udp_input_local_match+0xb4>)
 8013bec:	2288      	movs	r2, #136	@ 0x88
 8013bee:	4925      	ldr	r1, [pc, #148]	@ (8013c84 <udp_input_local_match+0xc0>)
 8013bf0:	4823      	ldr	r0, [pc, #140]	@ (8013c80 <udp_input_local_match+0xbc>)
 8013bf2:	f003 f819 	bl	8016c28 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013bf6:	68fb      	ldr	r3, [r7, #12]
 8013bf8:	7a1b      	ldrb	r3, [r3, #8]
 8013bfa:	2b00      	cmp	r3, #0
 8013bfc:	d00b      	beq.n	8013c16 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8013bfe:	68fb      	ldr	r3, [r7, #12]
 8013c00:	7a1a      	ldrb	r2, [r3, #8]
 8013c02:	4b21      	ldr	r3, [pc, #132]	@ (8013c88 <udp_input_local_match+0xc4>)
 8013c04:	685b      	ldr	r3, [r3, #4]
 8013c06:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8013c0a:	3301      	adds	r3, #1
 8013c0c:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013c0e:	429a      	cmp	r2, r3
 8013c10:	d001      	beq.n	8013c16 <udp_input_local_match+0x52>
    return 0;
 8013c12:	2300      	movs	r3, #0
 8013c14:	e02b      	b.n	8013c6e <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8013c16:	79fb      	ldrb	r3, [r7, #7]
 8013c18:	2b00      	cmp	r3, #0
 8013c1a:	d018      	beq.n	8013c4e <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8013c1c:	68fb      	ldr	r3, [r7, #12]
 8013c1e:	2b00      	cmp	r3, #0
 8013c20:	d013      	beq.n	8013c4a <udp_input_local_match+0x86>
 8013c22:	68fb      	ldr	r3, [r7, #12]
 8013c24:	681b      	ldr	r3, [r3, #0]
 8013c26:	2b00      	cmp	r3, #0
 8013c28:	d00f      	beq.n	8013c4a <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8013c2a:	4b17      	ldr	r3, [pc, #92]	@ (8013c88 <udp_input_local_match+0xc4>)
 8013c2c:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8013c2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013c32:	d00a      	beq.n	8013c4a <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8013c34:	68fb      	ldr	r3, [r7, #12]
 8013c36:	681a      	ldr	r2, [r3, #0]
 8013c38:	4b13      	ldr	r3, [pc, #76]	@ (8013c88 <udp_input_local_match+0xc4>)
 8013c3a:	695b      	ldr	r3, [r3, #20]
 8013c3c:	405a      	eors	r2, r3
 8013c3e:	68bb      	ldr	r3, [r7, #8]
 8013c40:	3308      	adds	r3, #8
 8013c42:	681b      	ldr	r3, [r3, #0]
 8013c44:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8013c46:	2b00      	cmp	r3, #0
 8013c48:	d110      	bne.n	8013c6c <udp_input_local_match+0xa8>
          return 1;
 8013c4a:	2301      	movs	r3, #1
 8013c4c:	e00f      	b.n	8013c6e <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8013c4e:	68fb      	ldr	r3, [r7, #12]
 8013c50:	2b00      	cmp	r3, #0
 8013c52:	d009      	beq.n	8013c68 <udp_input_local_match+0xa4>
 8013c54:	68fb      	ldr	r3, [r7, #12]
 8013c56:	681b      	ldr	r3, [r3, #0]
 8013c58:	2b00      	cmp	r3, #0
 8013c5a:	d005      	beq.n	8013c68 <udp_input_local_match+0xa4>
 8013c5c:	68fb      	ldr	r3, [r7, #12]
 8013c5e:	681a      	ldr	r2, [r3, #0]
 8013c60:	4b09      	ldr	r3, [pc, #36]	@ (8013c88 <udp_input_local_match+0xc4>)
 8013c62:	695b      	ldr	r3, [r3, #20]
 8013c64:	429a      	cmp	r2, r3
 8013c66:	d101      	bne.n	8013c6c <udp_input_local_match+0xa8>
        return 1;
 8013c68:	2301      	movs	r3, #1
 8013c6a:	e000      	b.n	8013c6e <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8013c6c:	2300      	movs	r3, #0
}
 8013c6e:	4618      	mov	r0, r3
 8013c70:	3710      	adds	r7, #16
 8013c72:	46bd      	mov	sp, r7
 8013c74:	bd80      	pop	{r7, pc}
 8013c76:	bf00      	nop
 8013c78:	0801a810 	.word	0x0801a810
 8013c7c:	0801a840 	.word	0x0801a840
 8013c80:	0801a864 	.word	0x0801a864
 8013c84:	0801a88c 	.word	0x0801a88c
 8013c88:	20009a9c 	.word	0x20009a9c

08013c8c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8013c8c:	b590      	push	{r4, r7, lr}
 8013c8e:	b08d      	sub	sp, #52	@ 0x34
 8013c90:	af02      	add	r7, sp, #8
 8013c92:	6078      	str	r0, [r7, #4]
 8013c94:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8013c96:	2300      	movs	r3, #0
 8013c98:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8013c9a:	687b      	ldr	r3, [r7, #4]
 8013c9c:	2b00      	cmp	r3, #0
 8013c9e:	d105      	bne.n	8013cac <udp_input+0x20>
 8013ca0:	4b7c      	ldr	r3, [pc, #496]	@ (8013e94 <udp_input+0x208>)
 8013ca2:	22cf      	movs	r2, #207	@ 0xcf
 8013ca4:	497c      	ldr	r1, [pc, #496]	@ (8013e98 <udp_input+0x20c>)
 8013ca6:	487d      	ldr	r0, [pc, #500]	@ (8013e9c <udp_input+0x210>)
 8013ca8:	f002 ffbe 	bl	8016c28 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8013cac:	683b      	ldr	r3, [r7, #0]
 8013cae:	2b00      	cmp	r3, #0
 8013cb0:	d105      	bne.n	8013cbe <udp_input+0x32>
 8013cb2:	4b78      	ldr	r3, [pc, #480]	@ (8013e94 <udp_input+0x208>)
 8013cb4:	22d0      	movs	r2, #208	@ 0xd0
 8013cb6:	497a      	ldr	r1, [pc, #488]	@ (8013ea0 <udp_input+0x214>)
 8013cb8:	4878      	ldr	r0, [pc, #480]	@ (8013e9c <udp_input+0x210>)
 8013cba:	f002 ffb5 	bl	8016c28 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8013cbe:	687b      	ldr	r3, [r7, #4]
 8013cc0:	895b      	ldrh	r3, [r3, #10]
 8013cc2:	2b07      	cmp	r3, #7
 8013cc4:	d803      	bhi.n	8013cce <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8013cc6:	6878      	ldr	r0, [r7, #4]
 8013cc8:	f7f9 fa6e 	bl	800d1a8 <pbuf_free>
    goto end;
 8013ccc:	e0de      	b.n	8013e8c <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8013cce:	687b      	ldr	r3, [r7, #4]
 8013cd0:	685b      	ldr	r3, [r3, #4]
 8013cd2:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8013cd4:	4b73      	ldr	r3, [pc, #460]	@ (8013ea4 <udp_input+0x218>)
 8013cd6:	695b      	ldr	r3, [r3, #20]
 8013cd8:	4a72      	ldr	r2, [pc, #456]	@ (8013ea4 <udp_input+0x218>)
 8013cda:	6812      	ldr	r2, [r2, #0]
 8013cdc:	4611      	mov	r1, r2
 8013cde:	4618      	mov	r0, r3
 8013ce0:	f001 fd96 	bl	8015810 <ip4_addr_isbroadcast_u32>
 8013ce4:	4603      	mov	r3, r0
 8013ce6:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8013ce8:	697b      	ldr	r3, [r7, #20]
 8013cea:	881b      	ldrh	r3, [r3, #0]
 8013cec:	b29b      	uxth	r3, r3
 8013cee:	4618      	mov	r0, r3
 8013cf0:	f7f7 fe68 	bl	800b9c4 <lwip_htons>
 8013cf4:	4603      	mov	r3, r0
 8013cf6:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8013cf8:	697b      	ldr	r3, [r7, #20]
 8013cfa:	885b      	ldrh	r3, [r3, #2]
 8013cfc:	b29b      	uxth	r3, r3
 8013cfe:	4618      	mov	r0, r3
 8013d00:	f7f7 fe60 	bl	800b9c4 <lwip_htons>
 8013d04:	4603      	mov	r3, r0
 8013d06:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8013d08:	2300      	movs	r3, #0
 8013d0a:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 8013d0c:	2300      	movs	r3, #0
 8013d0e:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8013d10:	2300      	movs	r3, #0
 8013d12:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013d14:	4b64      	ldr	r3, [pc, #400]	@ (8013ea8 <udp_input+0x21c>)
 8013d16:	681b      	ldr	r3, [r3, #0]
 8013d18:	627b      	str	r3, [r7, #36]	@ 0x24
 8013d1a:	e054      	b.n	8013dc6 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8013d1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013d1e:	8a5b      	ldrh	r3, [r3, #18]
 8013d20:	89fa      	ldrh	r2, [r7, #14]
 8013d22:	429a      	cmp	r2, r3
 8013d24:	d14a      	bne.n	8013dbc <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8013d26:	7cfb      	ldrb	r3, [r7, #19]
 8013d28:	461a      	mov	r2, r3
 8013d2a:	6839      	ldr	r1, [r7, #0]
 8013d2c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8013d2e:	f7ff ff49 	bl	8013bc4 <udp_input_local_match>
 8013d32:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8013d34:	2b00      	cmp	r3, #0
 8013d36:	d041      	beq.n	8013dbc <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8013d38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013d3a:	7c1b      	ldrb	r3, [r3, #16]
 8013d3c:	f003 0304 	and.w	r3, r3, #4
 8013d40:	2b00      	cmp	r3, #0
 8013d42:	d11d      	bne.n	8013d80 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8013d44:	69fb      	ldr	r3, [r7, #28]
 8013d46:	2b00      	cmp	r3, #0
 8013d48:	d102      	bne.n	8013d50 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8013d4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013d4c:	61fb      	str	r3, [r7, #28]
 8013d4e:	e017      	b.n	8013d80 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8013d50:	7cfb      	ldrb	r3, [r7, #19]
 8013d52:	2b00      	cmp	r3, #0
 8013d54:	d014      	beq.n	8013d80 <udp_input+0xf4>
 8013d56:	4b53      	ldr	r3, [pc, #332]	@ (8013ea4 <udp_input+0x218>)
 8013d58:	695b      	ldr	r3, [r3, #20]
 8013d5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013d5e:	d10f      	bne.n	8013d80 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8013d60:	69fb      	ldr	r3, [r7, #28]
 8013d62:	681a      	ldr	r2, [r3, #0]
 8013d64:	683b      	ldr	r3, [r7, #0]
 8013d66:	3304      	adds	r3, #4
 8013d68:	681b      	ldr	r3, [r3, #0]
 8013d6a:	429a      	cmp	r2, r3
 8013d6c:	d008      	beq.n	8013d80 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8013d6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013d70:	681a      	ldr	r2, [r3, #0]
 8013d72:	683b      	ldr	r3, [r7, #0]
 8013d74:	3304      	adds	r3, #4
 8013d76:	681b      	ldr	r3, [r3, #0]
 8013d78:	429a      	cmp	r2, r3
 8013d7a:	d101      	bne.n	8013d80 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8013d7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013d7e:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8013d80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013d82:	8a9b      	ldrh	r3, [r3, #20]
 8013d84:	8a3a      	ldrh	r2, [r7, #16]
 8013d86:	429a      	cmp	r2, r3
 8013d88:	d118      	bne.n	8013dbc <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8013d8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013d8c:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8013d8e:	2b00      	cmp	r3, #0
 8013d90:	d005      	beq.n	8013d9e <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8013d92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013d94:	685a      	ldr	r2, [r3, #4]
 8013d96:	4b43      	ldr	r3, [pc, #268]	@ (8013ea4 <udp_input+0x218>)
 8013d98:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8013d9a:	429a      	cmp	r2, r3
 8013d9c:	d10e      	bne.n	8013dbc <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8013d9e:	6a3b      	ldr	r3, [r7, #32]
 8013da0:	2b00      	cmp	r3, #0
 8013da2:	d014      	beq.n	8013dce <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8013da4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013da6:	68da      	ldr	r2, [r3, #12]
 8013da8:	6a3b      	ldr	r3, [r7, #32]
 8013daa:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8013dac:	4b3e      	ldr	r3, [pc, #248]	@ (8013ea8 <udp_input+0x21c>)
 8013dae:	681a      	ldr	r2, [r3, #0]
 8013db0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013db2:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8013db4:	4a3c      	ldr	r2, [pc, #240]	@ (8013ea8 <udp_input+0x21c>)
 8013db6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013db8:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8013dba:	e008      	b.n	8013dce <udp_input+0x142>
      }
    }

    prev = pcb;
 8013dbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013dbe:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013dc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013dc2:	68db      	ldr	r3, [r3, #12]
 8013dc4:	627b      	str	r3, [r7, #36]	@ 0x24
 8013dc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013dc8:	2b00      	cmp	r3, #0
 8013dca:	d1a7      	bne.n	8013d1c <udp_input+0x90>
 8013dcc:	e000      	b.n	8013dd0 <udp_input+0x144>
        break;
 8013dce:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8013dd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013dd2:	2b00      	cmp	r3, #0
 8013dd4:	d101      	bne.n	8013dda <udp_input+0x14e>
    pcb = uncon_pcb;
 8013dd6:	69fb      	ldr	r3, [r7, #28]
 8013dd8:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8013dda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013ddc:	2b00      	cmp	r3, #0
 8013dde:	d002      	beq.n	8013de6 <udp_input+0x15a>
    for_us = 1;
 8013de0:	2301      	movs	r3, #1
 8013de2:	76fb      	strb	r3, [r7, #27]
 8013de4:	e00a      	b.n	8013dfc <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8013de6:	683b      	ldr	r3, [r7, #0]
 8013de8:	3304      	adds	r3, #4
 8013dea:	681a      	ldr	r2, [r3, #0]
 8013dec:	4b2d      	ldr	r3, [pc, #180]	@ (8013ea4 <udp_input+0x218>)
 8013dee:	695b      	ldr	r3, [r3, #20]
 8013df0:	429a      	cmp	r2, r3
 8013df2:	bf0c      	ite	eq
 8013df4:	2301      	moveq	r3, #1
 8013df6:	2300      	movne	r3, #0
 8013df8:	b2db      	uxtb	r3, r3
 8013dfa:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8013dfc:	7efb      	ldrb	r3, [r7, #27]
 8013dfe:	2b00      	cmp	r3, #0
 8013e00:	d041      	beq.n	8013e86 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8013e02:	2108      	movs	r1, #8
 8013e04:	6878      	ldr	r0, [r7, #4]
 8013e06:	f7f9 f949 	bl	800d09c <pbuf_remove_header>
 8013e0a:	4603      	mov	r3, r0
 8013e0c:	2b00      	cmp	r3, #0
 8013e0e:	d00a      	beq.n	8013e26 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8013e10:	4b20      	ldr	r3, [pc, #128]	@ (8013e94 <udp_input+0x208>)
 8013e12:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 8013e16:	4925      	ldr	r1, [pc, #148]	@ (8013eac <udp_input+0x220>)
 8013e18:	4820      	ldr	r0, [pc, #128]	@ (8013e9c <udp_input+0x210>)
 8013e1a:	f002 ff05 	bl	8016c28 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8013e1e:	6878      	ldr	r0, [r7, #4]
 8013e20:	f7f9 f9c2 	bl	800d1a8 <pbuf_free>
      goto end;
 8013e24:	e032      	b.n	8013e8c <udp_input+0x200>
    }

    if (pcb != NULL) {
 8013e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013e28:	2b00      	cmp	r3, #0
 8013e2a:	d012      	beq.n	8013e52 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8013e2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013e2e:	699b      	ldr	r3, [r3, #24]
 8013e30:	2b00      	cmp	r3, #0
 8013e32:	d00a      	beq.n	8013e4a <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8013e34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013e36:	699c      	ldr	r4, [r3, #24]
 8013e38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013e3a:	69d8      	ldr	r0, [r3, #28]
 8013e3c:	8a3b      	ldrh	r3, [r7, #16]
 8013e3e:	9300      	str	r3, [sp, #0]
 8013e40:	4b1b      	ldr	r3, [pc, #108]	@ (8013eb0 <udp_input+0x224>)
 8013e42:	687a      	ldr	r2, [r7, #4]
 8013e44:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8013e46:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8013e48:	e021      	b.n	8013e8e <udp_input+0x202>
        pbuf_free(p);
 8013e4a:	6878      	ldr	r0, [r7, #4]
 8013e4c:	f7f9 f9ac 	bl	800d1a8 <pbuf_free>
        goto end;
 8013e50:	e01c      	b.n	8013e8c <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8013e52:	7cfb      	ldrb	r3, [r7, #19]
 8013e54:	2b00      	cmp	r3, #0
 8013e56:	d112      	bne.n	8013e7e <udp_input+0x1f2>
 8013e58:	4b12      	ldr	r3, [pc, #72]	@ (8013ea4 <udp_input+0x218>)
 8013e5a:	695b      	ldr	r3, [r3, #20]
 8013e5c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8013e60:	2be0      	cmp	r3, #224	@ 0xe0
 8013e62:	d00c      	beq.n	8013e7e <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8013e64:	4b0f      	ldr	r3, [pc, #60]	@ (8013ea4 <udp_input+0x218>)
 8013e66:	899b      	ldrh	r3, [r3, #12]
 8013e68:	3308      	adds	r3, #8
 8013e6a:	b29b      	uxth	r3, r3
 8013e6c:	b21b      	sxth	r3, r3
 8013e6e:	4619      	mov	r1, r3
 8013e70:	6878      	ldr	r0, [r7, #4]
 8013e72:	f7f9 f986 	bl	800d182 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8013e76:	2103      	movs	r1, #3
 8013e78:	6878      	ldr	r0, [r7, #4]
 8013e7a:	f001 f9a9 	bl	80151d0 <icmp_dest_unreach>
      pbuf_free(p);
 8013e7e:	6878      	ldr	r0, [r7, #4]
 8013e80:	f7f9 f992 	bl	800d1a8 <pbuf_free>
  return;
 8013e84:	e003      	b.n	8013e8e <udp_input+0x202>
    pbuf_free(p);
 8013e86:	6878      	ldr	r0, [r7, #4]
 8013e88:	f7f9 f98e 	bl	800d1a8 <pbuf_free>
  return;
 8013e8c:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8013e8e:	372c      	adds	r7, #44	@ 0x2c
 8013e90:	46bd      	mov	sp, r7
 8013e92:	bd90      	pop	{r4, r7, pc}
 8013e94:	0801a810 	.word	0x0801a810
 8013e98:	0801a8b4 	.word	0x0801a8b4
 8013e9c:	0801a864 	.word	0x0801a864
 8013ea0:	0801a8cc 	.word	0x0801a8cc
 8013ea4:	20009a9c 	.word	0x20009a9c
 8013ea8:	2000f444 	.word	0x2000f444
 8013eac:	0801a8e8 	.word	0x0801a8e8
 8013eb0:	20009aac 	.word	0x20009aac

08013eb4 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8013eb4:	b580      	push	{r7, lr}
 8013eb6:	b086      	sub	sp, #24
 8013eb8:	af00      	add	r7, sp, #0
 8013eba:	60f8      	str	r0, [r7, #12]
 8013ebc:	60b9      	str	r1, [r7, #8]
 8013ebe:	4613      	mov	r3, r2
 8013ec0:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8013ec2:	68bb      	ldr	r3, [r7, #8]
 8013ec4:	2b00      	cmp	r3, #0
 8013ec6:	d101      	bne.n	8013ecc <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8013ec8:	4b39      	ldr	r3, [pc, #228]	@ (8013fb0 <udp_bind+0xfc>)
 8013eca:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8013ecc:	68fb      	ldr	r3, [r7, #12]
 8013ece:	2b00      	cmp	r3, #0
 8013ed0:	d109      	bne.n	8013ee6 <udp_bind+0x32>
 8013ed2:	4b38      	ldr	r3, [pc, #224]	@ (8013fb4 <udp_bind+0x100>)
 8013ed4:	f240 32b7 	movw	r2, #951	@ 0x3b7
 8013ed8:	4937      	ldr	r1, [pc, #220]	@ (8013fb8 <udp_bind+0x104>)
 8013eda:	4838      	ldr	r0, [pc, #224]	@ (8013fbc <udp_bind+0x108>)
 8013edc:	f002 fea4 	bl	8016c28 <iprintf>
 8013ee0:	f06f 030f 	mvn.w	r3, #15
 8013ee4:	e060      	b.n	8013fa8 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8013ee6:	2300      	movs	r3, #0
 8013ee8:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013eea:	4b35      	ldr	r3, [pc, #212]	@ (8013fc0 <udp_bind+0x10c>)
 8013eec:	681b      	ldr	r3, [r3, #0]
 8013eee:	617b      	str	r3, [r7, #20]
 8013ef0:	e009      	b.n	8013f06 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8013ef2:	68fa      	ldr	r2, [r7, #12]
 8013ef4:	697b      	ldr	r3, [r7, #20]
 8013ef6:	429a      	cmp	r2, r3
 8013ef8:	d102      	bne.n	8013f00 <udp_bind+0x4c>
      rebind = 1;
 8013efa:	2301      	movs	r3, #1
 8013efc:	74fb      	strb	r3, [r7, #19]
      break;
 8013efe:	e005      	b.n	8013f0c <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013f00:	697b      	ldr	r3, [r7, #20]
 8013f02:	68db      	ldr	r3, [r3, #12]
 8013f04:	617b      	str	r3, [r7, #20]
 8013f06:	697b      	ldr	r3, [r7, #20]
 8013f08:	2b00      	cmp	r3, #0
 8013f0a:	d1f2      	bne.n	8013ef2 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8013f0c:	88fb      	ldrh	r3, [r7, #6]
 8013f0e:	2b00      	cmp	r3, #0
 8013f10:	d109      	bne.n	8013f26 <udp_bind+0x72>
    port = udp_new_port();
 8013f12:	f7ff fe1f 	bl	8013b54 <udp_new_port>
 8013f16:	4603      	mov	r3, r0
 8013f18:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8013f1a:	88fb      	ldrh	r3, [r7, #6]
 8013f1c:	2b00      	cmp	r3, #0
 8013f1e:	d12c      	bne.n	8013f7a <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8013f20:	f06f 0307 	mvn.w	r3, #7
 8013f24:	e040      	b.n	8013fa8 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013f26:	4b26      	ldr	r3, [pc, #152]	@ (8013fc0 <udp_bind+0x10c>)
 8013f28:	681b      	ldr	r3, [r3, #0]
 8013f2a:	617b      	str	r3, [r7, #20]
 8013f2c:	e022      	b.n	8013f74 <udp_bind+0xc0>
      if (pcb != ipcb) {
 8013f2e:	68fa      	ldr	r2, [r7, #12]
 8013f30:	697b      	ldr	r3, [r7, #20]
 8013f32:	429a      	cmp	r2, r3
 8013f34:	d01b      	beq.n	8013f6e <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8013f36:	697b      	ldr	r3, [r7, #20]
 8013f38:	8a5b      	ldrh	r3, [r3, #18]
 8013f3a:	88fa      	ldrh	r2, [r7, #6]
 8013f3c:	429a      	cmp	r2, r3
 8013f3e:	d116      	bne.n	8013f6e <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8013f40:	697b      	ldr	r3, [r7, #20]
 8013f42:	681a      	ldr	r2, [r3, #0]
 8013f44:	68bb      	ldr	r3, [r7, #8]
 8013f46:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8013f48:	429a      	cmp	r2, r3
 8013f4a:	d00d      	beq.n	8013f68 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8013f4c:	68bb      	ldr	r3, [r7, #8]
 8013f4e:	2b00      	cmp	r3, #0
 8013f50:	d00a      	beq.n	8013f68 <udp_bind+0xb4>
 8013f52:	68bb      	ldr	r3, [r7, #8]
 8013f54:	681b      	ldr	r3, [r3, #0]
 8013f56:	2b00      	cmp	r3, #0
 8013f58:	d006      	beq.n	8013f68 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8013f5a:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8013f5c:	2b00      	cmp	r3, #0
 8013f5e:	d003      	beq.n	8013f68 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8013f60:	697b      	ldr	r3, [r7, #20]
 8013f62:	681b      	ldr	r3, [r3, #0]
 8013f64:	2b00      	cmp	r3, #0
 8013f66:	d102      	bne.n	8013f6e <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8013f68:	f06f 0307 	mvn.w	r3, #7
 8013f6c:	e01c      	b.n	8013fa8 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013f6e:	697b      	ldr	r3, [r7, #20]
 8013f70:	68db      	ldr	r3, [r3, #12]
 8013f72:	617b      	str	r3, [r7, #20]
 8013f74:	697b      	ldr	r3, [r7, #20]
 8013f76:	2b00      	cmp	r3, #0
 8013f78:	d1d9      	bne.n	8013f2e <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8013f7a:	68bb      	ldr	r3, [r7, #8]
 8013f7c:	2b00      	cmp	r3, #0
 8013f7e:	d002      	beq.n	8013f86 <udp_bind+0xd2>
 8013f80:	68bb      	ldr	r3, [r7, #8]
 8013f82:	681b      	ldr	r3, [r3, #0]
 8013f84:	e000      	b.n	8013f88 <udp_bind+0xd4>
 8013f86:	2300      	movs	r3, #0
 8013f88:	68fa      	ldr	r2, [r7, #12]
 8013f8a:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8013f8c:	68fb      	ldr	r3, [r7, #12]
 8013f8e:	88fa      	ldrh	r2, [r7, #6]
 8013f90:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8013f92:	7cfb      	ldrb	r3, [r7, #19]
 8013f94:	2b00      	cmp	r3, #0
 8013f96:	d106      	bne.n	8013fa6 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8013f98:	4b09      	ldr	r3, [pc, #36]	@ (8013fc0 <udp_bind+0x10c>)
 8013f9a:	681a      	ldr	r2, [r3, #0]
 8013f9c:	68fb      	ldr	r3, [r7, #12]
 8013f9e:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8013fa0:	4a07      	ldr	r2, [pc, #28]	@ (8013fc0 <udp_bind+0x10c>)
 8013fa2:	68fb      	ldr	r3, [r7, #12]
 8013fa4:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8013fa6:	2300      	movs	r3, #0
}
 8013fa8:	4618      	mov	r0, r3
 8013faa:	3718      	adds	r7, #24
 8013fac:	46bd      	mov	sp, r7
 8013fae:	bd80      	pop	{r7, pc}
 8013fb0:	0801b394 	.word	0x0801b394
 8013fb4:	0801a810 	.word	0x0801a810
 8013fb8:	0801aad8 	.word	0x0801aad8
 8013fbc:	0801a864 	.word	0x0801a864
 8013fc0:	2000f444 	.word	0x2000f444

08013fc4 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8013fc4:	b580      	push	{r7, lr}
 8013fc6:	b084      	sub	sp, #16
 8013fc8:	af00      	add	r7, sp, #0
 8013fca:	60f8      	str	r0, [r7, #12]
 8013fcc:	60b9      	str	r1, [r7, #8]
 8013fce:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8013fd0:	68fb      	ldr	r3, [r7, #12]
 8013fd2:	2b00      	cmp	r3, #0
 8013fd4:	d107      	bne.n	8013fe6 <udp_recv+0x22>
 8013fd6:	4b08      	ldr	r3, [pc, #32]	@ (8013ff8 <udp_recv+0x34>)
 8013fd8:	f240 428a 	movw	r2, #1162	@ 0x48a
 8013fdc:	4907      	ldr	r1, [pc, #28]	@ (8013ffc <udp_recv+0x38>)
 8013fde:	4808      	ldr	r0, [pc, #32]	@ (8014000 <udp_recv+0x3c>)
 8013fe0:	f002 fe22 	bl	8016c28 <iprintf>
 8013fe4:	e005      	b.n	8013ff2 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8013fe6:	68fb      	ldr	r3, [r7, #12]
 8013fe8:	68ba      	ldr	r2, [r7, #8]
 8013fea:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8013fec:	68fb      	ldr	r3, [r7, #12]
 8013fee:	687a      	ldr	r2, [r7, #4]
 8013ff0:	61da      	str	r2, [r3, #28]
}
 8013ff2:	3710      	adds	r7, #16
 8013ff4:	46bd      	mov	sp, r7
 8013ff6:	bd80      	pop	{r7, pc}
 8013ff8:	0801a810 	.word	0x0801a810
 8013ffc:	0801ab44 	.word	0x0801ab44
 8014000:	0801a864 	.word	0x0801a864

08014004 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8014004:	b580      	push	{r7, lr}
 8014006:	b084      	sub	sp, #16
 8014008:	af00      	add	r7, sp, #0
 801400a:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 801400c:	687b      	ldr	r3, [r7, #4]
 801400e:	2b00      	cmp	r3, #0
 8014010:	d107      	bne.n	8014022 <udp_remove+0x1e>
 8014012:	4b19      	ldr	r3, [pc, #100]	@ (8014078 <udp_remove+0x74>)
 8014014:	f240 42a1 	movw	r2, #1185	@ 0x4a1
 8014018:	4918      	ldr	r1, [pc, #96]	@ (801407c <udp_remove+0x78>)
 801401a:	4819      	ldr	r0, [pc, #100]	@ (8014080 <udp_remove+0x7c>)
 801401c:	f002 fe04 	bl	8016c28 <iprintf>
 8014020:	e026      	b.n	8014070 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8014022:	4b18      	ldr	r3, [pc, #96]	@ (8014084 <udp_remove+0x80>)
 8014024:	681b      	ldr	r3, [r3, #0]
 8014026:	687a      	ldr	r2, [r7, #4]
 8014028:	429a      	cmp	r2, r3
 801402a:	d105      	bne.n	8014038 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 801402c:	4b15      	ldr	r3, [pc, #84]	@ (8014084 <udp_remove+0x80>)
 801402e:	681b      	ldr	r3, [r3, #0]
 8014030:	68db      	ldr	r3, [r3, #12]
 8014032:	4a14      	ldr	r2, [pc, #80]	@ (8014084 <udp_remove+0x80>)
 8014034:	6013      	str	r3, [r2, #0]
 8014036:	e017      	b.n	8014068 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8014038:	4b12      	ldr	r3, [pc, #72]	@ (8014084 <udp_remove+0x80>)
 801403a:	681b      	ldr	r3, [r3, #0]
 801403c:	60fb      	str	r3, [r7, #12]
 801403e:	e010      	b.n	8014062 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8014040:	68fb      	ldr	r3, [r7, #12]
 8014042:	68db      	ldr	r3, [r3, #12]
 8014044:	2b00      	cmp	r3, #0
 8014046:	d009      	beq.n	801405c <udp_remove+0x58>
 8014048:	68fb      	ldr	r3, [r7, #12]
 801404a:	68db      	ldr	r3, [r3, #12]
 801404c:	687a      	ldr	r2, [r7, #4]
 801404e:	429a      	cmp	r2, r3
 8014050:	d104      	bne.n	801405c <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8014052:	687b      	ldr	r3, [r7, #4]
 8014054:	68da      	ldr	r2, [r3, #12]
 8014056:	68fb      	ldr	r3, [r7, #12]
 8014058:	60da      	str	r2, [r3, #12]
        break;
 801405a:	e005      	b.n	8014068 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801405c:	68fb      	ldr	r3, [r7, #12]
 801405e:	68db      	ldr	r3, [r3, #12]
 8014060:	60fb      	str	r3, [r7, #12]
 8014062:	68fb      	ldr	r3, [r7, #12]
 8014064:	2b00      	cmp	r3, #0
 8014066:	d1eb      	bne.n	8014040 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8014068:	6879      	ldr	r1, [r7, #4]
 801406a:	2000      	movs	r0, #0
 801406c:	f7f8 f9f8 	bl	800c460 <memp_free>
}
 8014070:	3710      	adds	r7, #16
 8014072:	46bd      	mov	sp, r7
 8014074:	bd80      	pop	{r7, pc}
 8014076:	bf00      	nop
 8014078:	0801a810 	.word	0x0801a810
 801407c:	0801ab5c 	.word	0x0801ab5c
 8014080:	0801a864 	.word	0x0801a864
 8014084:	2000f444 	.word	0x2000f444

08014088 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8014088:	b580      	push	{r7, lr}
 801408a:	b082      	sub	sp, #8
 801408c:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801408e:	2000      	movs	r0, #0
 8014090:	f7f8 f970 	bl	800c374 <memp_malloc>
 8014094:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8014096:	687b      	ldr	r3, [r7, #4]
 8014098:	2b00      	cmp	r3, #0
 801409a:	d007      	beq.n	80140ac <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 801409c:	2220      	movs	r2, #32
 801409e:	2100      	movs	r1, #0
 80140a0:	6878      	ldr	r0, [r7, #4]
 80140a2:	f002 fe26 	bl	8016cf2 <memset>
    pcb->ttl = UDP_TTL;
 80140a6:	687b      	ldr	r3, [r7, #4]
 80140a8:	22ff      	movs	r2, #255	@ 0xff
 80140aa:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 80140ac:	687b      	ldr	r3, [r7, #4]
}
 80140ae:	4618      	mov	r0, r3
 80140b0:	3708      	adds	r7, #8
 80140b2:	46bd      	mov	sp, r7
 80140b4:	bd80      	pop	{r7, pc}

080140b6 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 80140b6:	b580      	push	{r7, lr}
 80140b8:	b084      	sub	sp, #16
 80140ba:	af00      	add	r7, sp, #0
 80140bc:	4603      	mov	r3, r0
 80140be:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 80140c0:	f7ff ffe2 	bl	8014088 <udp_new>
 80140c4:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 80140c6:	68fb      	ldr	r3, [r7, #12]
}
 80140c8:	4618      	mov	r0, r3
 80140ca:	3710      	adds	r7, #16
 80140cc:	46bd      	mov	sp, r7
 80140ce:	bd80      	pop	{r7, pc}

080140d0 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80140d0:	b480      	push	{r7}
 80140d2:	b085      	sub	sp, #20
 80140d4:	af00      	add	r7, sp, #0
 80140d6:	6078      	str	r0, [r7, #4]
 80140d8:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 80140da:	687b      	ldr	r3, [r7, #4]
 80140dc:	2b00      	cmp	r3, #0
 80140de:	d01e      	beq.n	801411e <udp_netif_ip_addr_changed+0x4e>
 80140e0:	687b      	ldr	r3, [r7, #4]
 80140e2:	681b      	ldr	r3, [r3, #0]
 80140e4:	2b00      	cmp	r3, #0
 80140e6:	d01a      	beq.n	801411e <udp_netif_ip_addr_changed+0x4e>
 80140e8:	683b      	ldr	r3, [r7, #0]
 80140ea:	2b00      	cmp	r3, #0
 80140ec:	d017      	beq.n	801411e <udp_netif_ip_addr_changed+0x4e>
 80140ee:	683b      	ldr	r3, [r7, #0]
 80140f0:	681b      	ldr	r3, [r3, #0]
 80140f2:	2b00      	cmp	r3, #0
 80140f4:	d013      	beq.n	801411e <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80140f6:	4b0d      	ldr	r3, [pc, #52]	@ (801412c <udp_netif_ip_addr_changed+0x5c>)
 80140f8:	681b      	ldr	r3, [r3, #0]
 80140fa:	60fb      	str	r3, [r7, #12]
 80140fc:	e00c      	b.n	8014118 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 80140fe:	68fb      	ldr	r3, [r7, #12]
 8014100:	681a      	ldr	r2, [r3, #0]
 8014102:	687b      	ldr	r3, [r7, #4]
 8014104:	681b      	ldr	r3, [r3, #0]
 8014106:	429a      	cmp	r2, r3
 8014108:	d103      	bne.n	8014112 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801410a:	683b      	ldr	r3, [r7, #0]
 801410c:	681a      	ldr	r2, [r3, #0]
 801410e:	68fb      	ldr	r3, [r7, #12]
 8014110:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8014112:	68fb      	ldr	r3, [r7, #12]
 8014114:	68db      	ldr	r3, [r3, #12]
 8014116:	60fb      	str	r3, [r7, #12]
 8014118:	68fb      	ldr	r3, [r7, #12]
 801411a:	2b00      	cmp	r3, #0
 801411c:	d1ef      	bne.n	80140fe <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801411e:	bf00      	nop
 8014120:	3714      	adds	r7, #20
 8014122:	46bd      	mov	sp, r7
 8014124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014128:	4770      	bx	lr
 801412a:	bf00      	nop
 801412c:	2000f444 	.word	0x2000f444

08014130 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8014130:	b580      	push	{r7, lr}
 8014132:	b082      	sub	sp, #8
 8014134:	af00      	add	r7, sp, #0
 8014136:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8014138:	4915      	ldr	r1, [pc, #84]	@ (8014190 <etharp_free_entry+0x60>)
 801413a:	687a      	ldr	r2, [r7, #4]
 801413c:	4613      	mov	r3, r2
 801413e:	005b      	lsls	r3, r3, #1
 8014140:	4413      	add	r3, r2
 8014142:	00db      	lsls	r3, r3, #3
 8014144:	440b      	add	r3, r1
 8014146:	681b      	ldr	r3, [r3, #0]
 8014148:	2b00      	cmp	r3, #0
 801414a:	d013      	beq.n	8014174 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 801414c:	4910      	ldr	r1, [pc, #64]	@ (8014190 <etharp_free_entry+0x60>)
 801414e:	687a      	ldr	r2, [r7, #4]
 8014150:	4613      	mov	r3, r2
 8014152:	005b      	lsls	r3, r3, #1
 8014154:	4413      	add	r3, r2
 8014156:	00db      	lsls	r3, r3, #3
 8014158:	440b      	add	r3, r1
 801415a:	681b      	ldr	r3, [r3, #0]
 801415c:	4618      	mov	r0, r3
 801415e:	f7f9 f823 	bl	800d1a8 <pbuf_free>
    arp_table[i].q = NULL;
 8014162:	490b      	ldr	r1, [pc, #44]	@ (8014190 <etharp_free_entry+0x60>)
 8014164:	687a      	ldr	r2, [r7, #4]
 8014166:	4613      	mov	r3, r2
 8014168:	005b      	lsls	r3, r3, #1
 801416a:	4413      	add	r3, r2
 801416c:	00db      	lsls	r3, r3, #3
 801416e:	440b      	add	r3, r1
 8014170:	2200      	movs	r2, #0
 8014172:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8014174:	4906      	ldr	r1, [pc, #24]	@ (8014190 <etharp_free_entry+0x60>)
 8014176:	687a      	ldr	r2, [r7, #4]
 8014178:	4613      	mov	r3, r2
 801417a:	005b      	lsls	r3, r3, #1
 801417c:	4413      	add	r3, r2
 801417e:	00db      	lsls	r3, r3, #3
 8014180:	440b      	add	r3, r1
 8014182:	3314      	adds	r3, #20
 8014184:	2200      	movs	r2, #0
 8014186:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8014188:	bf00      	nop
 801418a:	3708      	adds	r7, #8
 801418c:	46bd      	mov	sp, r7
 801418e:	bd80      	pop	{r7, pc}
 8014190:	2000f448 	.word	0x2000f448

08014194 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8014194:	b580      	push	{r7, lr}
 8014196:	b082      	sub	sp, #8
 8014198:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801419a:	2300      	movs	r3, #0
 801419c:	607b      	str	r3, [r7, #4]
 801419e:	e096      	b.n	80142ce <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 80141a0:	494f      	ldr	r1, [pc, #316]	@ (80142e0 <etharp_tmr+0x14c>)
 80141a2:	687a      	ldr	r2, [r7, #4]
 80141a4:	4613      	mov	r3, r2
 80141a6:	005b      	lsls	r3, r3, #1
 80141a8:	4413      	add	r3, r2
 80141aa:	00db      	lsls	r3, r3, #3
 80141ac:	440b      	add	r3, r1
 80141ae:	3314      	adds	r3, #20
 80141b0:	781b      	ldrb	r3, [r3, #0]
 80141b2:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 80141b4:	78fb      	ldrb	r3, [r7, #3]
 80141b6:	2b00      	cmp	r3, #0
 80141b8:	f000 8086 	beq.w	80142c8 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 80141bc:	4948      	ldr	r1, [pc, #288]	@ (80142e0 <etharp_tmr+0x14c>)
 80141be:	687a      	ldr	r2, [r7, #4]
 80141c0:	4613      	mov	r3, r2
 80141c2:	005b      	lsls	r3, r3, #1
 80141c4:	4413      	add	r3, r2
 80141c6:	00db      	lsls	r3, r3, #3
 80141c8:	440b      	add	r3, r1
 80141ca:	3312      	adds	r3, #18
 80141cc:	881b      	ldrh	r3, [r3, #0]
 80141ce:	3301      	adds	r3, #1
 80141d0:	b298      	uxth	r0, r3
 80141d2:	4943      	ldr	r1, [pc, #268]	@ (80142e0 <etharp_tmr+0x14c>)
 80141d4:	687a      	ldr	r2, [r7, #4]
 80141d6:	4613      	mov	r3, r2
 80141d8:	005b      	lsls	r3, r3, #1
 80141da:	4413      	add	r3, r2
 80141dc:	00db      	lsls	r3, r3, #3
 80141de:	440b      	add	r3, r1
 80141e0:	3312      	adds	r3, #18
 80141e2:	4602      	mov	r2, r0
 80141e4:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80141e6:	493e      	ldr	r1, [pc, #248]	@ (80142e0 <etharp_tmr+0x14c>)
 80141e8:	687a      	ldr	r2, [r7, #4]
 80141ea:	4613      	mov	r3, r2
 80141ec:	005b      	lsls	r3, r3, #1
 80141ee:	4413      	add	r3, r2
 80141f0:	00db      	lsls	r3, r3, #3
 80141f2:	440b      	add	r3, r1
 80141f4:	3312      	adds	r3, #18
 80141f6:	881b      	ldrh	r3, [r3, #0]
 80141f8:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 80141fc:	d215      	bcs.n	801422a <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80141fe:	4938      	ldr	r1, [pc, #224]	@ (80142e0 <etharp_tmr+0x14c>)
 8014200:	687a      	ldr	r2, [r7, #4]
 8014202:	4613      	mov	r3, r2
 8014204:	005b      	lsls	r3, r3, #1
 8014206:	4413      	add	r3, r2
 8014208:	00db      	lsls	r3, r3, #3
 801420a:	440b      	add	r3, r1
 801420c:	3314      	adds	r3, #20
 801420e:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8014210:	2b01      	cmp	r3, #1
 8014212:	d10e      	bne.n	8014232 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8014214:	4932      	ldr	r1, [pc, #200]	@ (80142e0 <etharp_tmr+0x14c>)
 8014216:	687a      	ldr	r2, [r7, #4]
 8014218:	4613      	mov	r3, r2
 801421a:	005b      	lsls	r3, r3, #1
 801421c:	4413      	add	r3, r2
 801421e:	00db      	lsls	r3, r3, #3
 8014220:	440b      	add	r3, r1
 8014222:	3312      	adds	r3, #18
 8014224:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8014226:	2b04      	cmp	r3, #4
 8014228:	d903      	bls.n	8014232 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801422a:	6878      	ldr	r0, [r7, #4]
 801422c:	f7ff ff80 	bl	8014130 <etharp_free_entry>
 8014230:	e04a      	b.n	80142c8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8014232:	492b      	ldr	r1, [pc, #172]	@ (80142e0 <etharp_tmr+0x14c>)
 8014234:	687a      	ldr	r2, [r7, #4]
 8014236:	4613      	mov	r3, r2
 8014238:	005b      	lsls	r3, r3, #1
 801423a:	4413      	add	r3, r2
 801423c:	00db      	lsls	r3, r3, #3
 801423e:	440b      	add	r3, r1
 8014240:	3314      	adds	r3, #20
 8014242:	781b      	ldrb	r3, [r3, #0]
 8014244:	2b03      	cmp	r3, #3
 8014246:	d10a      	bne.n	801425e <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8014248:	4925      	ldr	r1, [pc, #148]	@ (80142e0 <etharp_tmr+0x14c>)
 801424a:	687a      	ldr	r2, [r7, #4]
 801424c:	4613      	mov	r3, r2
 801424e:	005b      	lsls	r3, r3, #1
 8014250:	4413      	add	r3, r2
 8014252:	00db      	lsls	r3, r3, #3
 8014254:	440b      	add	r3, r1
 8014256:	3314      	adds	r3, #20
 8014258:	2204      	movs	r2, #4
 801425a:	701a      	strb	r2, [r3, #0]
 801425c:	e034      	b.n	80142c8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801425e:	4920      	ldr	r1, [pc, #128]	@ (80142e0 <etharp_tmr+0x14c>)
 8014260:	687a      	ldr	r2, [r7, #4]
 8014262:	4613      	mov	r3, r2
 8014264:	005b      	lsls	r3, r3, #1
 8014266:	4413      	add	r3, r2
 8014268:	00db      	lsls	r3, r3, #3
 801426a:	440b      	add	r3, r1
 801426c:	3314      	adds	r3, #20
 801426e:	781b      	ldrb	r3, [r3, #0]
 8014270:	2b04      	cmp	r3, #4
 8014272:	d10a      	bne.n	801428a <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8014274:	491a      	ldr	r1, [pc, #104]	@ (80142e0 <etharp_tmr+0x14c>)
 8014276:	687a      	ldr	r2, [r7, #4]
 8014278:	4613      	mov	r3, r2
 801427a:	005b      	lsls	r3, r3, #1
 801427c:	4413      	add	r3, r2
 801427e:	00db      	lsls	r3, r3, #3
 8014280:	440b      	add	r3, r1
 8014282:	3314      	adds	r3, #20
 8014284:	2202      	movs	r2, #2
 8014286:	701a      	strb	r2, [r3, #0]
 8014288:	e01e      	b.n	80142c8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801428a:	4915      	ldr	r1, [pc, #84]	@ (80142e0 <etharp_tmr+0x14c>)
 801428c:	687a      	ldr	r2, [r7, #4]
 801428e:	4613      	mov	r3, r2
 8014290:	005b      	lsls	r3, r3, #1
 8014292:	4413      	add	r3, r2
 8014294:	00db      	lsls	r3, r3, #3
 8014296:	440b      	add	r3, r1
 8014298:	3314      	adds	r3, #20
 801429a:	781b      	ldrb	r3, [r3, #0]
 801429c:	2b01      	cmp	r3, #1
 801429e:	d113      	bne.n	80142c8 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80142a0:	490f      	ldr	r1, [pc, #60]	@ (80142e0 <etharp_tmr+0x14c>)
 80142a2:	687a      	ldr	r2, [r7, #4]
 80142a4:	4613      	mov	r3, r2
 80142a6:	005b      	lsls	r3, r3, #1
 80142a8:	4413      	add	r3, r2
 80142aa:	00db      	lsls	r3, r3, #3
 80142ac:	440b      	add	r3, r1
 80142ae:	3308      	adds	r3, #8
 80142b0:	6818      	ldr	r0, [r3, #0]
 80142b2:	687a      	ldr	r2, [r7, #4]
 80142b4:	4613      	mov	r3, r2
 80142b6:	005b      	lsls	r3, r3, #1
 80142b8:	4413      	add	r3, r2
 80142ba:	00db      	lsls	r3, r3, #3
 80142bc:	4a08      	ldr	r2, [pc, #32]	@ (80142e0 <etharp_tmr+0x14c>)
 80142be:	4413      	add	r3, r2
 80142c0:	3304      	adds	r3, #4
 80142c2:	4619      	mov	r1, r3
 80142c4:	f000 fe6e 	bl	8014fa4 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80142c8:	687b      	ldr	r3, [r7, #4]
 80142ca:	3301      	adds	r3, #1
 80142cc:	607b      	str	r3, [r7, #4]
 80142ce:	687b      	ldr	r3, [r7, #4]
 80142d0:	2b09      	cmp	r3, #9
 80142d2:	f77f af65 	ble.w	80141a0 <etharp_tmr+0xc>
      }
    }
  }
}
 80142d6:	bf00      	nop
 80142d8:	bf00      	nop
 80142da:	3708      	adds	r7, #8
 80142dc:	46bd      	mov	sp, r7
 80142de:	bd80      	pop	{r7, pc}
 80142e0:	2000f448 	.word	0x2000f448

080142e4 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 80142e4:	b580      	push	{r7, lr}
 80142e6:	b08a      	sub	sp, #40	@ 0x28
 80142e8:	af00      	add	r7, sp, #0
 80142ea:	60f8      	str	r0, [r7, #12]
 80142ec:	460b      	mov	r3, r1
 80142ee:	607a      	str	r2, [r7, #4]
 80142f0:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 80142f2:	230a      	movs	r3, #10
 80142f4:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80142f6:	230a      	movs	r3, #10
 80142f8:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 80142fa:	230a      	movs	r3, #10
 80142fc:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 80142fe:	2300      	movs	r3, #0
 8014300:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8014302:	230a      	movs	r3, #10
 8014304:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8014306:	2300      	movs	r3, #0
 8014308:	83bb      	strh	r3, [r7, #28]
 801430a:	2300      	movs	r3, #0
 801430c:	837b      	strh	r3, [r7, #26]
 801430e:	2300      	movs	r3, #0
 8014310:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014312:	2300      	movs	r3, #0
 8014314:	843b      	strh	r3, [r7, #32]
 8014316:	e0ae      	b.n	8014476 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8014318:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801431c:	49a6      	ldr	r1, [pc, #664]	@ (80145b8 <etharp_find_entry+0x2d4>)
 801431e:	4613      	mov	r3, r2
 8014320:	005b      	lsls	r3, r3, #1
 8014322:	4413      	add	r3, r2
 8014324:	00db      	lsls	r3, r3, #3
 8014326:	440b      	add	r3, r1
 8014328:	3314      	adds	r3, #20
 801432a:	781b      	ldrb	r3, [r3, #0]
 801432c:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801432e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8014332:	2b0a      	cmp	r3, #10
 8014334:	d105      	bne.n	8014342 <etharp_find_entry+0x5e>
 8014336:	7dfb      	ldrb	r3, [r7, #23]
 8014338:	2b00      	cmp	r3, #0
 801433a:	d102      	bne.n	8014342 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 801433c:	8c3b      	ldrh	r3, [r7, #32]
 801433e:	847b      	strh	r3, [r7, #34]	@ 0x22
 8014340:	e095      	b.n	801446e <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8014342:	7dfb      	ldrb	r3, [r7, #23]
 8014344:	2b00      	cmp	r3, #0
 8014346:	f000 8092 	beq.w	801446e <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801434a:	7dfb      	ldrb	r3, [r7, #23]
 801434c:	2b01      	cmp	r3, #1
 801434e:	d009      	beq.n	8014364 <etharp_find_entry+0x80>
 8014350:	7dfb      	ldrb	r3, [r7, #23]
 8014352:	2b01      	cmp	r3, #1
 8014354:	d806      	bhi.n	8014364 <etharp_find_entry+0x80>
 8014356:	4b99      	ldr	r3, [pc, #612]	@ (80145bc <etharp_find_entry+0x2d8>)
 8014358:	f240 1223 	movw	r2, #291	@ 0x123
 801435c:	4998      	ldr	r1, [pc, #608]	@ (80145c0 <etharp_find_entry+0x2dc>)
 801435e:	4899      	ldr	r0, [pc, #612]	@ (80145c4 <etharp_find_entry+0x2e0>)
 8014360:	f002 fc62 	bl	8016c28 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8014364:	68fb      	ldr	r3, [r7, #12]
 8014366:	2b00      	cmp	r3, #0
 8014368:	d020      	beq.n	80143ac <etharp_find_entry+0xc8>
 801436a:	68fb      	ldr	r3, [r7, #12]
 801436c:	6819      	ldr	r1, [r3, #0]
 801436e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014372:	4891      	ldr	r0, [pc, #580]	@ (80145b8 <etharp_find_entry+0x2d4>)
 8014374:	4613      	mov	r3, r2
 8014376:	005b      	lsls	r3, r3, #1
 8014378:	4413      	add	r3, r2
 801437a:	00db      	lsls	r3, r3, #3
 801437c:	4403      	add	r3, r0
 801437e:	3304      	adds	r3, #4
 8014380:	681b      	ldr	r3, [r3, #0]
 8014382:	4299      	cmp	r1, r3
 8014384:	d112      	bne.n	80143ac <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8014386:	687b      	ldr	r3, [r7, #4]
 8014388:	2b00      	cmp	r3, #0
 801438a:	d00c      	beq.n	80143a6 <etharp_find_entry+0xc2>
 801438c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014390:	4989      	ldr	r1, [pc, #548]	@ (80145b8 <etharp_find_entry+0x2d4>)
 8014392:	4613      	mov	r3, r2
 8014394:	005b      	lsls	r3, r3, #1
 8014396:	4413      	add	r3, r2
 8014398:	00db      	lsls	r3, r3, #3
 801439a:	440b      	add	r3, r1
 801439c:	3308      	adds	r3, #8
 801439e:	681b      	ldr	r3, [r3, #0]
 80143a0:	687a      	ldr	r2, [r7, #4]
 80143a2:	429a      	cmp	r2, r3
 80143a4:	d102      	bne.n	80143ac <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 80143a6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80143aa:	e100      	b.n	80145ae <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 80143ac:	7dfb      	ldrb	r3, [r7, #23]
 80143ae:	2b01      	cmp	r3, #1
 80143b0:	d140      	bne.n	8014434 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 80143b2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80143b6:	4980      	ldr	r1, [pc, #512]	@ (80145b8 <etharp_find_entry+0x2d4>)
 80143b8:	4613      	mov	r3, r2
 80143ba:	005b      	lsls	r3, r3, #1
 80143bc:	4413      	add	r3, r2
 80143be:	00db      	lsls	r3, r3, #3
 80143c0:	440b      	add	r3, r1
 80143c2:	681b      	ldr	r3, [r3, #0]
 80143c4:	2b00      	cmp	r3, #0
 80143c6:	d01a      	beq.n	80143fe <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 80143c8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80143cc:	497a      	ldr	r1, [pc, #488]	@ (80145b8 <etharp_find_entry+0x2d4>)
 80143ce:	4613      	mov	r3, r2
 80143d0:	005b      	lsls	r3, r3, #1
 80143d2:	4413      	add	r3, r2
 80143d4:	00db      	lsls	r3, r3, #3
 80143d6:	440b      	add	r3, r1
 80143d8:	3312      	adds	r3, #18
 80143da:	881b      	ldrh	r3, [r3, #0]
 80143dc:	8bba      	ldrh	r2, [r7, #28]
 80143de:	429a      	cmp	r2, r3
 80143e0:	d845      	bhi.n	801446e <etharp_find_entry+0x18a>
            old_queue = i;
 80143e2:	8c3b      	ldrh	r3, [r7, #32]
 80143e4:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 80143e6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80143ea:	4973      	ldr	r1, [pc, #460]	@ (80145b8 <etharp_find_entry+0x2d4>)
 80143ec:	4613      	mov	r3, r2
 80143ee:	005b      	lsls	r3, r3, #1
 80143f0:	4413      	add	r3, r2
 80143f2:	00db      	lsls	r3, r3, #3
 80143f4:	440b      	add	r3, r1
 80143f6:	3312      	adds	r3, #18
 80143f8:	881b      	ldrh	r3, [r3, #0]
 80143fa:	83bb      	strh	r3, [r7, #28]
 80143fc:	e037      	b.n	801446e <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 80143fe:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014402:	496d      	ldr	r1, [pc, #436]	@ (80145b8 <etharp_find_entry+0x2d4>)
 8014404:	4613      	mov	r3, r2
 8014406:	005b      	lsls	r3, r3, #1
 8014408:	4413      	add	r3, r2
 801440a:	00db      	lsls	r3, r3, #3
 801440c:	440b      	add	r3, r1
 801440e:	3312      	adds	r3, #18
 8014410:	881b      	ldrh	r3, [r3, #0]
 8014412:	8b7a      	ldrh	r2, [r7, #26]
 8014414:	429a      	cmp	r2, r3
 8014416:	d82a      	bhi.n	801446e <etharp_find_entry+0x18a>
            old_pending = i;
 8014418:	8c3b      	ldrh	r3, [r7, #32]
 801441a:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 801441c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014420:	4965      	ldr	r1, [pc, #404]	@ (80145b8 <etharp_find_entry+0x2d4>)
 8014422:	4613      	mov	r3, r2
 8014424:	005b      	lsls	r3, r3, #1
 8014426:	4413      	add	r3, r2
 8014428:	00db      	lsls	r3, r3, #3
 801442a:	440b      	add	r3, r1
 801442c:	3312      	adds	r3, #18
 801442e:	881b      	ldrh	r3, [r3, #0]
 8014430:	837b      	strh	r3, [r7, #26]
 8014432:	e01c      	b.n	801446e <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8014434:	7dfb      	ldrb	r3, [r7, #23]
 8014436:	2b01      	cmp	r3, #1
 8014438:	d919      	bls.n	801446e <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801443a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801443e:	495e      	ldr	r1, [pc, #376]	@ (80145b8 <etharp_find_entry+0x2d4>)
 8014440:	4613      	mov	r3, r2
 8014442:	005b      	lsls	r3, r3, #1
 8014444:	4413      	add	r3, r2
 8014446:	00db      	lsls	r3, r3, #3
 8014448:	440b      	add	r3, r1
 801444a:	3312      	adds	r3, #18
 801444c:	881b      	ldrh	r3, [r3, #0]
 801444e:	8b3a      	ldrh	r2, [r7, #24]
 8014450:	429a      	cmp	r2, r3
 8014452:	d80c      	bhi.n	801446e <etharp_find_entry+0x18a>
            old_stable = i;
 8014454:	8c3b      	ldrh	r3, [r7, #32]
 8014456:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 8014458:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801445c:	4956      	ldr	r1, [pc, #344]	@ (80145b8 <etharp_find_entry+0x2d4>)
 801445e:	4613      	mov	r3, r2
 8014460:	005b      	lsls	r3, r3, #1
 8014462:	4413      	add	r3, r2
 8014464:	00db      	lsls	r3, r3, #3
 8014466:	440b      	add	r3, r1
 8014468:	3312      	adds	r3, #18
 801446a:	881b      	ldrh	r3, [r3, #0]
 801446c:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801446e:	8c3b      	ldrh	r3, [r7, #32]
 8014470:	3301      	adds	r3, #1
 8014472:	b29b      	uxth	r3, r3
 8014474:	843b      	strh	r3, [r7, #32]
 8014476:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801447a:	2b09      	cmp	r3, #9
 801447c:	f77f af4c 	ble.w	8014318 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8014480:	7afb      	ldrb	r3, [r7, #11]
 8014482:	f003 0302 	and.w	r3, r3, #2
 8014486:	2b00      	cmp	r3, #0
 8014488:	d108      	bne.n	801449c <etharp_find_entry+0x1b8>
 801448a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 801448e:	2b0a      	cmp	r3, #10
 8014490:	d107      	bne.n	80144a2 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8014492:	7afb      	ldrb	r3, [r7, #11]
 8014494:	f003 0301 	and.w	r3, r3, #1
 8014498:	2b00      	cmp	r3, #0
 801449a:	d102      	bne.n	80144a2 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 801449c:	f04f 33ff 	mov.w	r3, #4294967295
 80144a0:	e085      	b.n	80145ae <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 80144a2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 80144a6:	2b09      	cmp	r3, #9
 80144a8:	dc02      	bgt.n	80144b0 <etharp_find_entry+0x1cc>
    i = empty;
 80144aa:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80144ac:	843b      	strh	r3, [r7, #32]
 80144ae:	e039      	b.n	8014524 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 80144b0:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80144b4:	2b09      	cmp	r3, #9
 80144b6:	dc14      	bgt.n	80144e2 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 80144b8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80144ba:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 80144bc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80144c0:	493d      	ldr	r1, [pc, #244]	@ (80145b8 <etharp_find_entry+0x2d4>)
 80144c2:	4613      	mov	r3, r2
 80144c4:	005b      	lsls	r3, r3, #1
 80144c6:	4413      	add	r3, r2
 80144c8:	00db      	lsls	r3, r3, #3
 80144ca:	440b      	add	r3, r1
 80144cc:	681b      	ldr	r3, [r3, #0]
 80144ce:	2b00      	cmp	r3, #0
 80144d0:	d018      	beq.n	8014504 <etharp_find_entry+0x220>
 80144d2:	4b3a      	ldr	r3, [pc, #232]	@ (80145bc <etharp_find_entry+0x2d8>)
 80144d4:	f240 126d 	movw	r2, #365	@ 0x16d
 80144d8:	493b      	ldr	r1, [pc, #236]	@ (80145c8 <etharp_find_entry+0x2e4>)
 80144da:	483a      	ldr	r0, [pc, #232]	@ (80145c4 <etharp_find_entry+0x2e0>)
 80144dc:	f002 fba4 	bl	8016c28 <iprintf>
 80144e0:	e010      	b.n	8014504 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 80144e2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80144e6:	2b09      	cmp	r3, #9
 80144e8:	dc02      	bgt.n	80144f0 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 80144ea:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80144ec:	843b      	strh	r3, [r7, #32]
 80144ee:	e009      	b.n	8014504 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 80144f0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80144f4:	2b09      	cmp	r3, #9
 80144f6:	dc02      	bgt.n	80144fe <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 80144f8:	8bfb      	ldrh	r3, [r7, #30]
 80144fa:	843b      	strh	r3, [r7, #32]
 80144fc:	e002      	b.n	8014504 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 80144fe:	f04f 33ff 	mov.w	r3, #4294967295
 8014502:	e054      	b.n	80145ae <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8014504:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014508:	2b09      	cmp	r3, #9
 801450a:	dd06      	ble.n	801451a <etharp_find_entry+0x236>
 801450c:	4b2b      	ldr	r3, [pc, #172]	@ (80145bc <etharp_find_entry+0x2d8>)
 801450e:	f240 127f 	movw	r2, #383	@ 0x17f
 8014512:	492e      	ldr	r1, [pc, #184]	@ (80145cc <etharp_find_entry+0x2e8>)
 8014514:	482b      	ldr	r0, [pc, #172]	@ (80145c4 <etharp_find_entry+0x2e0>)
 8014516:	f002 fb87 	bl	8016c28 <iprintf>
    etharp_free_entry(i);
 801451a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801451e:	4618      	mov	r0, r3
 8014520:	f7ff fe06 	bl	8014130 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8014524:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014528:	2b09      	cmp	r3, #9
 801452a:	dd06      	ble.n	801453a <etharp_find_entry+0x256>
 801452c:	4b23      	ldr	r3, [pc, #140]	@ (80145bc <etharp_find_entry+0x2d8>)
 801452e:	f240 1283 	movw	r2, #387	@ 0x183
 8014532:	4926      	ldr	r1, [pc, #152]	@ (80145cc <etharp_find_entry+0x2e8>)
 8014534:	4823      	ldr	r0, [pc, #140]	@ (80145c4 <etharp_find_entry+0x2e0>)
 8014536:	f002 fb77 	bl	8016c28 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801453a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801453e:	491e      	ldr	r1, [pc, #120]	@ (80145b8 <etharp_find_entry+0x2d4>)
 8014540:	4613      	mov	r3, r2
 8014542:	005b      	lsls	r3, r3, #1
 8014544:	4413      	add	r3, r2
 8014546:	00db      	lsls	r3, r3, #3
 8014548:	440b      	add	r3, r1
 801454a:	3314      	adds	r3, #20
 801454c:	781b      	ldrb	r3, [r3, #0]
 801454e:	2b00      	cmp	r3, #0
 8014550:	d006      	beq.n	8014560 <etharp_find_entry+0x27c>
 8014552:	4b1a      	ldr	r3, [pc, #104]	@ (80145bc <etharp_find_entry+0x2d8>)
 8014554:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 8014558:	491d      	ldr	r1, [pc, #116]	@ (80145d0 <etharp_find_entry+0x2ec>)
 801455a:	481a      	ldr	r0, [pc, #104]	@ (80145c4 <etharp_find_entry+0x2e0>)
 801455c:	f002 fb64 	bl	8016c28 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8014560:	68fb      	ldr	r3, [r7, #12]
 8014562:	2b00      	cmp	r3, #0
 8014564:	d00b      	beq.n	801457e <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8014566:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801456a:	68fb      	ldr	r3, [r7, #12]
 801456c:	6819      	ldr	r1, [r3, #0]
 801456e:	4812      	ldr	r0, [pc, #72]	@ (80145b8 <etharp_find_entry+0x2d4>)
 8014570:	4613      	mov	r3, r2
 8014572:	005b      	lsls	r3, r3, #1
 8014574:	4413      	add	r3, r2
 8014576:	00db      	lsls	r3, r3, #3
 8014578:	4403      	add	r3, r0
 801457a:	3304      	adds	r3, #4
 801457c:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801457e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014582:	490d      	ldr	r1, [pc, #52]	@ (80145b8 <etharp_find_entry+0x2d4>)
 8014584:	4613      	mov	r3, r2
 8014586:	005b      	lsls	r3, r3, #1
 8014588:	4413      	add	r3, r2
 801458a:	00db      	lsls	r3, r3, #3
 801458c:	440b      	add	r3, r1
 801458e:	3312      	adds	r3, #18
 8014590:	2200      	movs	r2, #0
 8014592:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8014594:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014598:	4907      	ldr	r1, [pc, #28]	@ (80145b8 <etharp_find_entry+0x2d4>)
 801459a:	4613      	mov	r3, r2
 801459c:	005b      	lsls	r3, r3, #1
 801459e:	4413      	add	r3, r2
 80145a0:	00db      	lsls	r3, r3, #3
 80145a2:	440b      	add	r3, r1
 80145a4:	3308      	adds	r3, #8
 80145a6:	687a      	ldr	r2, [r7, #4]
 80145a8:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 80145aa:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 80145ae:	4618      	mov	r0, r3
 80145b0:	3728      	adds	r7, #40	@ 0x28
 80145b2:	46bd      	mov	sp, r7
 80145b4:	bd80      	pop	{r7, pc}
 80145b6:	bf00      	nop
 80145b8:	2000f448 	.word	0x2000f448
 80145bc:	0801ab74 	.word	0x0801ab74
 80145c0:	0801abac 	.word	0x0801abac
 80145c4:	0801abec 	.word	0x0801abec
 80145c8:	0801ac14 	.word	0x0801ac14
 80145cc:	0801ac2c 	.word	0x0801ac2c
 80145d0:	0801ac40 	.word	0x0801ac40

080145d4 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 80145d4:	b580      	push	{r7, lr}
 80145d6:	b088      	sub	sp, #32
 80145d8:	af02      	add	r7, sp, #8
 80145da:	60f8      	str	r0, [r7, #12]
 80145dc:	60b9      	str	r1, [r7, #8]
 80145de:	607a      	str	r2, [r7, #4]
 80145e0:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 80145e2:	68fb      	ldr	r3, [r7, #12]
 80145e4:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80145e8:	2b06      	cmp	r3, #6
 80145ea:	d006      	beq.n	80145fa <etharp_update_arp_entry+0x26>
 80145ec:	4b48      	ldr	r3, [pc, #288]	@ (8014710 <etharp_update_arp_entry+0x13c>)
 80145ee:	f240 12a9 	movw	r2, #425	@ 0x1a9
 80145f2:	4948      	ldr	r1, [pc, #288]	@ (8014714 <etharp_update_arp_entry+0x140>)
 80145f4:	4848      	ldr	r0, [pc, #288]	@ (8014718 <etharp_update_arp_entry+0x144>)
 80145f6:	f002 fb17 	bl	8016c28 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 80145fa:	68bb      	ldr	r3, [r7, #8]
 80145fc:	2b00      	cmp	r3, #0
 80145fe:	d012      	beq.n	8014626 <etharp_update_arp_entry+0x52>
 8014600:	68bb      	ldr	r3, [r7, #8]
 8014602:	681b      	ldr	r3, [r3, #0]
 8014604:	2b00      	cmp	r3, #0
 8014606:	d00e      	beq.n	8014626 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8014608:	68bb      	ldr	r3, [r7, #8]
 801460a:	681b      	ldr	r3, [r3, #0]
 801460c:	68f9      	ldr	r1, [r7, #12]
 801460e:	4618      	mov	r0, r3
 8014610:	f001 f8fe 	bl	8015810 <ip4_addr_isbroadcast_u32>
 8014614:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8014616:	2b00      	cmp	r3, #0
 8014618:	d105      	bne.n	8014626 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801461a:	68bb      	ldr	r3, [r7, #8]
 801461c:	681b      	ldr	r3, [r3, #0]
 801461e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8014622:	2be0      	cmp	r3, #224	@ 0xe0
 8014624:	d102      	bne.n	801462c <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8014626:	f06f 030f 	mvn.w	r3, #15
 801462a:	e06c      	b.n	8014706 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 801462c:	78fb      	ldrb	r3, [r7, #3]
 801462e:	68fa      	ldr	r2, [r7, #12]
 8014630:	4619      	mov	r1, r3
 8014632:	68b8      	ldr	r0, [r7, #8]
 8014634:	f7ff fe56 	bl	80142e4 <etharp_find_entry>
 8014638:	4603      	mov	r3, r0
 801463a:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 801463c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8014640:	2b00      	cmp	r3, #0
 8014642:	da02      	bge.n	801464a <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8014644:	8afb      	ldrh	r3, [r7, #22]
 8014646:	b25b      	sxtb	r3, r3
 8014648:	e05d      	b.n	8014706 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801464a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801464e:	4933      	ldr	r1, [pc, #204]	@ (801471c <etharp_update_arp_entry+0x148>)
 8014650:	4613      	mov	r3, r2
 8014652:	005b      	lsls	r3, r3, #1
 8014654:	4413      	add	r3, r2
 8014656:	00db      	lsls	r3, r3, #3
 8014658:	440b      	add	r3, r1
 801465a:	3314      	adds	r3, #20
 801465c:	2202      	movs	r2, #2
 801465e:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8014660:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014664:	492d      	ldr	r1, [pc, #180]	@ (801471c <etharp_update_arp_entry+0x148>)
 8014666:	4613      	mov	r3, r2
 8014668:	005b      	lsls	r3, r3, #1
 801466a:	4413      	add	r3, r2
 801466c:	00db      	lsls	r3, r3, #3
 801466e:	440b      	add	r3, r1
 8014670:	3308      	adds	r3, #8
 8014672:	68fa      	ldr	r2, [r7, #12]
 8014674:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8014676:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801467a:	4613      	mov	r3, r2
 801467c:	005b      	lsls	r3, r3, #1
 801467e:	4413      	add	r3, r2
 8014680:	00db      	lsls	r3, r3, #3
 8014682:	3308      	adds	r3, #8
 8014684:	4a25      	ldr	r2, [pc, #148]	@ (801471c <etharp_update_arp_entry+0x148>)
 8014686:	4413      	add	r3, r2
 8014688:	3304      	adds	r3, #4
 801468a:	2206      	movs	r2, #6
 801468c:	6879      	ldr	r1, [r7, #4]
 801468e:	4618      	mov	r0, r3
 8014690:	f002 fbfb 	bl	8016e8a <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8014694:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014698:	4920      	ldr	r1, [pc, #128]	@ (801471c <etharp_update_arp_entry+0x148>)
 801469a:	4613      	mov	r3, r2
 801469c:	005b      	lsls	r3, r3, #1
 801469e:	4413      	add	r3, r2
 80146a0:	00db      	lsls	r3, r3, #3
 80146a2:	440b      	add	r3, r1
 80146a4:	3312      	adds	r3, #18
 80146a6:	2200      	movs	r2, #0
 80146a8:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 80146aa:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80146ae:	491b      	ldr	r1, [pc, #108]	@ (801471c <etharp_update_arp_entry+0x148>)
 80146b0:	4613      	mov	r3, r2
 80146b2:	005b      	lsls	r3, r3, #1
 80146b4:	4413      	add	r3, r2
 80146b6:	00db      	lsls	r3, r3, #3
 80146b8:	440b      	add	r3, r1
 80146ba:	681b      	ldr	r3, [r3, #0]
 80146bc:	2b00      	cmp	r3, #0
 80146be:	d021      	beq.n	8014704 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 80146c0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80146c4:	4915      	ldr	r1, [pc, #84]	@ (801471c <etharp_update_arp_entry+0x148>)
 80146c6:	4613      	mov	r3, r2
 80146c8:	005b      	lsls	r3, r3, #1
 80146ca:	4413      	add	r3, r2
 80146cc:	00db      	lsls	r3, r3, #3
 80146ce:	440b      	add	r3, r1
 80146d0:	681b      	ldr	r3, [r3, #0]
 80146d2:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 80146d4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80146d8:	4910      	ldr	r1, [pc, #64]	@ (801471c <etharp_update_arp_entry+0x148>)
 80146da:	4613      	mov	r3, r2
 80146dc:	005b      	lsls	r3, r3, #1
 80146de:	4413      	add	r3, r2
 80146e0:	00db      	lsls	r3, r3, #3
 80146e2:	440b      	add	r3, r1
 80146e4:	2200      	movs	r2, #0
 80146e6:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 80146e8:	68fb      	ldr	r3, [r7, #12]
 80146ea:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 80146ee:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80146f2:	9300      	str	r3, [sp, #0]
 80146f4:	687b      	ldr	r3, [r7, #4]
 80146f6:	6939      	ldr	r1, [r7, #16]
 80146f8:	68f8      	ldr	r0, [r7, #12]
 80146fa:	f001 ff97 	bl	801662c <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 80146fe:	6938      	ldr	r0, [r7, #16]
 8014700:	f7f8 fd52 	bl	800d1a8 <pbuf_free>
  }
  return ERR_OK;
 8014704:	2300      	movs	r3, #0
}
 8014706:	4618      	mov	r0, r3
 8014708:	3718      	adds	r7, #24
 801470a:	46bd      	mov	sp, r7
 801470c:	bd80      	pop	{r7, pc}
 801470e:	bf00      	nop
 8014710:	0801ab74 	.word	0x0801ab74
 8014714:	0801ac6c 	.word	0x0801ac6c
 8014718:	0801abec 	.word	0x0801abec
 801471c:	2000f448 	.word	0x2000f448

08014720 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8014720:	b580      	push	{r7, lr}
 8014722:	b084      	sub	sp, #16
 8014724:	af00      	add	r7, sp, #0
 8014726:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014728:	2300      	movs	r3, #0
 801472a:	60fb      	str	r3, [r7, #12]
 801472c:	e01e      	b.n	801476c <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801472e:	4913      	ldr	r1, [pc, #76]	@ (801477c <etharp_cleanup_netif+0x5c>)
 8014730:	68fa      	ldr	r2, [r7, #12]
 8014732:	4613      	mov	r3, r2
 8014734:	005b      	lsls	r3, r3, #1
 8014736:	4413      	add	r3, r2
 8014738:	00db      	lsls	r3, r3, #3
 801473a:	440b      	add	r3, r1
 801473c:	3314      	adds	r3, #20
 801473e:	781b      	ldrb	r3, [r3, #0]
 8014740:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8014742:	7afb      	ldrb	r3, [r7, #11]
 8014744:	2b00      	cmp	r3, #0
 8014746:	d00e      	beq.n	8014766 <etharp_cleanup_netif+0x46>
 8014748:	490c      	ldr	r1, [pc, #48]	@ (801477c <etharp_cleanup_netif+0x5c>)
 801474a:	68fa      	ldr	r2, [r7, #12]
 801474c:	4613      	mov	r3, r2
 801474e:	005b      	lsls	r3, r3, #1
 8014750:	4413      	add	r3, r2
 8014752:	00db      	lsls	r3, r3, #3
 8014754:	440b      	add	r3, r1
 8014756:	3308      	adds	r3, #8
 8014758:	681b      	ldr	r3, [r3, #0]
 801475a:	687a      	ldr	r2, [r7, #4]
 801475c:	429a      	cmp	r2, r3
 801475e:	d102      	bne.n	8014766 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8014760:	68f8      	ldr	r0, [r7, #12]
 8014762:	f7ff fce5 	bl	8014130 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014766:	68fb      	ldr	r3, [r7, #12]
 8014768:	3301      	adds	r3, #1
 801476a:	60fb      	str	r3, [r7, #12]
 801476c:	68fb      	ldr	r3, [r7, #12]
 801476e:	2b09      	cmp	r3, #9
 8014770:	dddd      	ble.n	801472e <etharp_cleanup_netif+0xe>
    }
  }
}
 8014772:	bf00      	nop
 8014774:	bf00      	nop
 8014776:	3710      	adds	r7, #16
 8014778:	46bd      	mov	sp, r7
 801477a:	bd80      	pop	{r7, pc}
 801477c:	2000f448 	.word	0x2000f448

08014780 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8014780:	b5b0      	push	{r4, r5, r7, lr}
 8014782:	b08a      	sub	sp, #40	@ 0x28
 8014784:	af04      	add	r7, sp, #16
 8014786:	6078      	str	r0, [r7, #4]
 8014788:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801478a:	683b      	ldr	r3, [r7, #0]
 801478c:	2b00      	cmp	r3, #0
 801478e:	d107      	bne.n	80147a0 <etharp_input+0x20>
 8014790:	4b3d      	ldr	r3, [pc, #244]	@ (8014888 <etharp_input+0x108>)
 8014792:	f240 228a 	movw	r2, #650	@ 0x28a
 8014796:	493d      	ldr	r1, [pc, #244]	@ (801488c <etharp_input+0x10c>)
 8014798:	483d      	ldr	r0, [pc, #244]	@ (8014890 <etharp_input+0x110>)
 801479a:	f002 fa45 	bl	8016c28 <iprintf>
 801479e:	e06f      	b.n	8014880 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 80147a0:	687b      	ldr	r3, [r7, #4]
 80147a2:	685b      	ldr	r3, [r3, #4]
 80147a4:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80147a6:	693b      	ldr	r3, [r7, #16]
 80147a8:	881b      	ldrh	r3, [r3, #0]
 80147aa:	b29b      	uxth	r3, r3
 80147ac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80147b0:	d10c      	bne.n	80147cc <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80147b2:	693b      	ldr	r3, [r7, #16]
 80147b4:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80147b6:	2b06      	cmp	r3, #6
 80147b8:	d108      	bne.n	80147cc <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80147ba:	693b      	ldr	r3, [r7, #16]
 80147bc:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80147be:	2b04      	cmp	r3, #4
 80147c0:	d104      	bne.n	80147cc <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 80147c2:	693b      	ldr	r3, [r7, #16]
 80147c4:	885b      	ldrh	r3, [r3, #2]
 80147c6:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80147c8:	2b08      	cmp	r3, #8
 80147ca:	d003      	beq.n	80147d4 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 80147cc:	6878      	ldr	r0, [r7, #4]
 80147ce:	f7f8 fceb 	bl	800d1a8 <pbuf_free>
    return;
 80147d2:	e055      	b.n	8014880 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 80147d4:	693b      	ldr	r3, [r7, #16]
 80147d6:	330e      	adds	r3, #14
 80147d8:	681b      	ldr	r3, [r3, #0]
 80147da:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 80147dc:	693b      	ldr	r3, [r7, #16]
 80147de:	3318      	adds	r3, #24
 80147e0:	681b      	ldr	r3, [r3, #0]
 80147e2:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80147e4:	683b      	ldr	r3, [r7, #0]
 80147e6:	3304      	adds	r3, #4
 80147e8:	681b      	ldr	r3, [r3, #0]
 80147ea:	2b00      	cmp	r3, #0
 80147ec:	d102      	bne.n	80147f4 <etharp_input+0x74>
    for_us = 0;
 80147ee:	2300      	movs	r3, #0
 80147f0:	75fb      	strb	r3, [r7, #23]
 80147f2:	e009      	b.n	8014808 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 80147f4:	68ba      	ldr	r2, [r7, #8]
 80147f6:	683b      	ldr	r3, [r7, #0]
 80147f8:	3304      	adds	r3, #4
 80147fa:	681b      	ldr	r3, [r3, #0]
 80147fc:	429a      	cmp	r2, r3
 80147fe:	bf0c      	ite	eq
 8014800:	2301      	moveq	r3, #1
 8014802:	2300      	movne	r3, #0
 8014804:	b2db      	uxtb	r3, r3
 8014806:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8014808:	693b      	ldr	r3, [r7, #16]
 801480a:	f103 0208 	add.w	r2, r3, #8
 801480e:	7dfb      	ldrb	r3, [r7, #23]
 8014810:	2b00      	cmp	r3, #0
 8014812:	d001      	beq.n	8014818 <etharp_input+0x98>
 8014814:	2301      	movs	r3, #1
 8014816:	e000      	b.n	801481a <etharp_input+0x9a>
 8014818:	2302      	movs	r3, #2
 801481a:	f107 010c 	add.w	r1, r7, #12
 801481e:	6838      	ldr	r0, [r7, #0]
 8014820:	f7ff fed8 	bl	80145d4 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8014824:	693b      	ldr	r3, [r7, #16]
 8014826:	88db      	ldrh	r3, [r3, #6]
 8014828:	b29b      	uxth	r3, r3
 801482a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801482e:	d003      	beq.n	8014838 <etharp_input+0xb8>
 8014830:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8014834:	d01e      	beq.n	8014874 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8014836:	e020      	b.n	801487a <etharp_input+0xfa>
      if (for_us) {
 8014838:	7dfb      	ldrb	r3, [r7, #23]
 801483a:	2b00      	cmp	r3, #0
 801483c:	d01c      	beq.n	8014878 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801483e:	683b      	ldr	r3, [r7, #0]
 8014840:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 8014844:	693b      	ldr	r3, [r7, #16]
 8014846:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801484a:	683b      	ldr	r3, [r7, #0]
 801484c:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 8014850:	683b      	ldr	r3, [r7, #0]
 8014852:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8014854:	693a      	ldr	r2, [r7, #16]
 8014856:	3208      	adds	r2, #8
        etharp_raw(netif,
 8014858:	2102      	movs	r1, #2
 801485a:	9103      	str	r1, [sp, #12]
 801485c:	f107 010c 	add.w	r1, r7, #12
 8014860:	9102      	str	r1, [sp, #8]
 8014862:	9201      	str	r2, [sp, #4]
 8014864:	9300      	str	r3, [sp, #0]
 8014866:	462b      	mov	r3, r5
 8014868:	4622      	mov	r2, r4
 801486a:	4601      	mov	r1, r0
 801486c:	6838      	ldr	r0, [r7, #0]
 801486e:	f000 faeb 	bl	8014e48 <etharp_raw>
      break;
 8014872:	e001      	b.n	8014878 <etharp_input+0xf8>
      break;
 8014874:	bf00      	nop
 8014876:	e000      	b.n	801487a <etharp_input+0xfa>
      break;
 8014878:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801487a:	6878      	ldr	r0, [r7, #4]
 801487c:	f7f8 fc94 	bl	800d1a8 <pbuf_free>
}
 8014880:	3718      	adds	r7, #24
 8014882:	46bd      	mov	sp, r7
 8014884:	bdb0      	pop	{r4, r5, r7, pc}
 8014886:	bf00      	nop
 8014888:	0801ab74 	.word	0x0801ab74
 801488c:	0801acc4 	.word	0x0801acc4
 8014890:	0801abec 	.word	0x0801abec

08014894 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8014894:	b580      	push	{r7, lr}
 8014896:	b086      	sub	sp, #24
 8014898:	af02      	add	r7, sp, #8
 801489a:	60f8      	str	r0, [r7, #12]
 801489c:	60b9      	str	r1, [r7, #8]
 801489e:	4613      	mov	r3, r2
 80148a0:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80148a2:	79fa      	ldrb	r2, [r7, #7]
 80148a4:	4944      	ldr	r1, [pc, #272]	@ (80149b8 <etharp_output_to_arp_index+0x124>)
 80148a6:	4613      	mov	r3, r2
 80148a8:	005b      	lsls	r3, r3, #1
 80148aa:	4413      	add	r3, r2
 80148ac:	00db      	lsls	r3, r3, #3
 80148ae:	440b      	add	r3, r1
 80148b0:	3314      	adds	r3, #20
 80148b2:	781b      	ldrb	r3, [r3, #0]
 80148b4:	2b01      	cmp	r3, #1
 80148b6:	d806      	bhi.n	80148c6 <etharp_output_to_arp_index+0x32>
 80148b8:	4b40      	ldr	r3, [pc, #256]	@ (80149bc <etharp_output_to_arp_index+0x128>)
 80148ba:	f240 22ee 	movw	r2, #750	@ 0x2ee
 80148be:	4940      	ldr	r1, [pc, #256]	@ (80149c0 <etharp_output_to_arp_index+0x12c>)
 80148c0:	4840      	ldr	r0, [pc, #256]	@ (80149c4 <etharp_output_to_arp_index+0x130>)
 80148c2:	f002 f9b1 	bl	8016c28 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 80148c6:	79fa      	ldrb	r2, [r7, #7]
 80148c8:	493b      	ldr	r1, [pc, #236]	@ (80149b8 <etharp_output_to_arp_index+0x124>)
 80148ca:	4613      	mov	r3, r2
 80148cc:	005b      	lsls	r3, r3, #1
 80148ce:	4413      	add	r3, r2
 80148d0:	00db      	lsls	r3, r3, #3
 80148d2:	440b      	add	r3, r1
 80148d4:	3314      	adds	r3, #20
 80148d6:	781b      	ldrb	r3, [r3, #0]
 80148d8:	2b02      	cmp	r3, #2
 80148da:	d153      	bne.n	8014984 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 80148dc:	79fa      	ldrb	r2, [r7, #7]
 80148de:	4936      	ldr	r1, [pc, #216]	@ (80149b8 <etharp_output_to_arp_index+0x124>)
 80148e0:	4613      	mov	r3, r2
 80148e2:	005b      	lsls	r3, r3, #1
 80148e4:	4413      	add	r3, r2
 80148e6:	00db      	lsls	r3, r3, #3
 80148e8:	440b      	add	r3, r1
 80148ea:	3312      	adds	r3, #18
 80148ec:	881b      	ldrh	r3, [r3, #0]
 80148ee:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 80148f2:	d919      	bls.n	8014928 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 80148f4:	79fa      	ldrb	r2, [r7, #7]
 80148f6:	4613      	mov	r3, r2
 80148f8:	005b      	lsls	r3, r3, #1
 80148fa:	4413      	add	r3, r2
 80148fc:	00db      	lsls	r3, r3, #3
 80148fe:	4a2e      	ldr	r2, [pc, #184]	@ (80149b8 <etharp_output_to_arp_index+0x124>)
 8014900:	4413      	add	r3, r2
 8014902:	3304      	adds	r3, #4
 8014904:	4619      	mov	r1, r3
 8014906:	68f8      	ldr	r0, [r7, #12]
 8014908:	f000 fb4c 	bl	8014fa4 <etharp_request>
 801490c:	4603      	mov	r3, r0
 801490e:	2b00      	cmp	r3, #0
 8014910:	d138      	bne.n	8014984 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8014912:	79fa      	ldrb	r2, [r7, #7]
 8014914:	4928      	ldr	r1, [pc, #160]	@ (80149b8 <etharp_output_to_arp_index+0x124>)
 8014916:	4613      	mov	r3, r2
 8014918:	005b      	lsls	r3, r3, #1
 801491a:	4413      	add	r3, r2
 801491c:	00db      	lsls	r3, r3, #3
 801491e:	440b      	add	r3, r1
 8014920:	3314      	adds	r3, #20
 8014922:	2203      	movs	r2, #3
 8014924:	701a      	strb	r2, [r3, #0]
 8014926:	e02d      	b.n	8014984 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8014928:	79fa      	ldrb	r2, [r7, #7]
 801492a:	4923      	ldr	r1, [pc, #140]	@ (80149b8 <etharp_output_to_arp_index+0x124>)
 801492c:	4613      	mov	r3, r2
 801492e:	005b      	lsls	r3, r3, #1
 8014930:	4413      	add	r3, r2
 8014932:	00db      	lsls	r3, r3, #3
 8014934:	440b      	add	r3, r1
 8014936:	3312      	adds	r3, #18
 8014938:	881b      	ldrh	r3, [r3, #0]
 801493a:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 801493e:	d321      	bcc.n	8014984 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8014940:	79fa      	ldrb	r2, [r7, #7]
 8014942:	4613      	mov	r3, r2
 8014944:	005b      	lsls	r3, r3, #1
 8014946:	4413      	add	r3, r2
 8014948:	00db      	lsls	r3, r3, #3
 801494a:	4a1b      	ldr	r2, [pc, #108]	@ (80149b8 <etharp_output_to_arp_index+0x124>)
 801494c:	4413      	add	r3, r2
 801494e:	1d19      	adds	r1, r3, #4
 8014950:	79fa      	ldrb	r2, [r7, #7]
 8014952:	4613      	mov	r3, r2
 8014954:	005b      	lsls	r3, r3, #1
 8014956:	4413      	add	r3, r2
 8014958:	00db      	lsls	r3, r3, #3
 801495a:	3308      	adds	r3, #8
 801495c:	4a16      	ldr	r2, [pc, #88]	@ (80149b8 <etharp_output_to_arp_index+0x124>)
 801495e:	4413      	add	r3, r2
 8014960:	3304      	adds	r3, #4
 8014962:	461a      	mov	r2, r3
 8014964:	68f8      	ldr	r0, [r7, #12]
 8014966:	f000 fafb 	bl	8014f60 <etharp_request_dst>
 801496a:	4603      	mov	r3, r0
 801496c:	2b00      	cmp	r3, #0
 801496e:	d109      	bne.n	8014984 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8014970:	79fa      	ldrb	r2, [r7, #7]
 8014972:	4911      	ldr	r1, [pc, #68]	@ (80149b8 <etharp_output_to_arp_index+0x124>)
 8014974:	4613      	mov	r3, r2
 8014976:	005b      	lsls	r3, r3, #1
 8014978:	4413      	add	r3, r2
 801497a:	00db      	lsls	r3, r3, #3
 801497c:	440b      	add	r3, r1
 801497e:	3314      	adds	r3, #20
 8014980:	2203      	movs	r2, #3
 8014982:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8014984:	68fb      	ldr	r3, [r7, #12]
 8014986:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 801498a:	79fa      	ldrb	r2, [r7, #7]
 801498c:	4613      	mov	r3, r2
 801498e:	005b      	lsls	r3, r3, #1
 8014990:	4413      	add	r3, r2
 8014992:	00db      	lsls	r3, r3, #3
 8014994:	3308      	adds	r3, #8
 8014996:	4a08      	ldr	r2, [pc, #32]	@ (80149b8 <etharp_output_to_arp_index+0x124>)
 8014998:	4413      	add	r3, r2
 801499a:	3304      	adds	r3, #4
 801499c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80149a0:	9200      	str	r2, [sp, #0]
 80149a2:	460a      	mov	r2, r1
 80149a4:	68b9      	ldr	r1, [r7, #8]
 80149a6:	68f8      	ldr	r0, [r7, #12]
 80149a8:	f001 fe40 	bl	801662c <ethernet_output>
 80149ac:	4603      	mov	r3, r0
}
 80149ae:	4618      	mov	r0, r3
 80149b0:	3710      	adds	r7, #16
 80149b2:	46bd      	mov	sp, r7
 80149b4:	bd80      	pop	{r7, pc}
 80149b6:	bf00      	nop
 80149b8:	2000f448 	.word	0x2000f448
 80149bc:	0801ab74 	.word	0x0801ab74
 80149c0:	0801ace4 	.word	0x0801ace4
 80149c4:	0801abec 	.word	0x0801abec

080149c8 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 80149c8:	b580      	push	{r7, lr}
 80149ca:	b08a      	sub	sp, #40	@ 0x28
 80149cc:	af02      	add	r7, sp, #8
 80149ce:	60f8      	str	r0, [r7, #12]
 80149d0:	60b9      	str	r1, [r7, #8]
 80149d2:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 80149d4:	687b      	ldr	r3, [r7, #4]
 80149d6:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80149d8:	68fb      	ldr	r3, [r7, #12]
 80149da:	2b00      	cmp	r3, #0
 80149dc:	d106      	bne.n	80149ec <etharp_output+0x24>
 80149de:	4b73      	ldr	r3, [pc, #460]	@ (8014bac <etharp_output+0x1e4>)
 80149e0:	f240 321e 	movw	r2, #798	@ 0x31e
 80149e4:	4972      	ldr	r1, [pc, #456]	@ (8014bb0 <etharp_output+0x1e8>)
 80149e6:	4873      	ldr	r0, [pc, #460]	@ (8014bb4 <etharp_output+0x1ec>)
 80149e8:	f002 f91e 	bl	8016c28 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 80149ec:	68bb      	ldr	r3, [r7, #8]
 80149ee:	2b00      	cmp	r3, #0
 80149f0:	d106      	bne.n	8014a00 <etharp_output+0x38>
 80149f2:	4b6e      	ldr	r3, [pc, #440]	@ (8014bac <etharp_output+0x1e4>)
 80149f4:	f240 321f 	movw	r2, #799	@ 0x31f
 80149f8:	496f      	ldr	r1, [pc, #444]	@ (8014bb8 <etharp_output+0x1f0>)
 80149fa:	486e      	ldr	r0, [pc, #440]	@ (8014bb4 <etharp_output+0x1ec>)
 80149fc:	f002 f914 	bl	8016c28 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8014a00:	687b      	ldr	r3, [r7, #4]
 8014a02:	2b00      	cmp	r3, #0
 8014a04:	d106      	bne.n	8014a14 <etharp_output+0x4c>
 8014a06:	4b69      	ldr	r3, [pc, #420]	@ (8014bac <etharp_output+0x1e4>)
 8014a08:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8014a0c:	496b      	ldr	r1, [pc, #428]	@ (8014bbc <etharp_output+0x1f4>)
 8014a0e:	4869      	ldr	r0, [pc, #420]	@ (8014bb4 <etharp_output+0x1ec>)
 8014a10:	f002 f90a 	bl	8016c28 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8014a14:	687b      	ldr	r3, [r7, #4]
 8014a16:	681b      	ldr	r3, [r3, #0]
 8014a18:	68f9      	ldr	r1, [r7, #12]
 8014a1a:	4618      	mov	r0, r3
 8014a1c:	f000 fef8 	bl	8015810 <ip4_addr_isbroadcast_u32>
 8014a20:	4603      	mov	r3, r0
 8014a22:	2b00      	cmp	r3, #0
 8014a24:	d002      	beq.n	8014a2c <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8014a26:	4b66      	ldr	r3, [pc, #408]	@ (8014bc0 <etharp_output+0x1f8>)
 8014a28:	61fb      	str	r3, [r7, #28]
 8014a2a:	e0af      	b.n	8014b8c <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8014a2c:	687b      	ldr	r3, [r7, #4]
 8014a2e:	681b      	ldr	r3, [r3, #0]
 8014a30:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8014a34:	2be0      	cmp	r3, #224	@ 0xe0
 8014a36:	d118      	bne.n	8014a6a <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8014a38:	2301      	movs	r3, #1
 8014a3a:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8014a3c:	2300      	movs	r3, #0
 8014a3e:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8014a40:	235e      	movs	r3, #94	@ 0x5e
 8014a42:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8014a44:	687b      	ldr	r3, [r7, #4]
 8014a46:	3301      	adds	r3, #1
 8014a48:	781b      	ldrb	r3, [r3, #0]
 8014a4a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8014a4e:	b2db      	uxtb	r3, r3
 8014a50:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8014a52:	687b      	ldr	r3, [r7, #4]
 8014a54:	3302      	adds	r3, #2
 8014a56:	781b      	ldrb	r3, [r3, #0]
 8014a58:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8014a5a:	687b      	ldr	r3, [r7, #4]
 8014a5c:	3303      	adds	r3, #3
 8014a5e:	781b      	ldrb	r3, [r3, #0]
 8014a60:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8014a62:	f107 0310 	add.w	r3, r7, #16
 8014a66:	61fb      	str	r3, [r7, #28]
 8014a68:	e090      	b.n	8014b8c <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8014a6a:	687b      	ldr	r3, [r7, #4]
 8014a6c:	681a      	ldr	r2, [r3, #0]
 8014a6e:	68fb      	ldr	r3, [r7, #12]
 8014a70:	3304      	adds	r3, #4
 8014a72:	681b      	ldr	r3, [r3, #0]
 8014a74:	405a      	eors	r2, r3
 8014a76:	68fb      	ldr	r3, [r7, #12]
 8014a78:	3308      	adds	r3, #8
 8014a7a:	681b      	ldr	r3, [r3, #0]
 8014a7c:	4013      	ands	r3, r2
 8014a7e:	2b00      	cmp	r3, #0
 8014a80:	d012      	beq.n	8014aa8 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8014a82:	687b      	ldr	r3, [r7, #4]
 8014a84:	681b      	ldr	r3, [r3, #0]
 8014a86:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8014a88:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 8014a8c:	4293      	cmp	r3, r2
 8014a8e:	d00b      	beq.n	8014aa8 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8014a90:	68fb      	ldr	r3, [r7, #12]
 8014a92:	330c      	adds	r3, #12
 8014a94:	681b      	ldr	r3, [r3, #0]
 8014a96:	2b00      	cmp	r3, #0
 8014a98:	d003      	beq.n	8014aa2 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8014a9a:	68fb      	ldr	r3, [r7, #12]
 8014a9c:	330c      	adds	r3, #12
 8014a9e:	61bb      	str	r3, [r7, #24]
 8014aa0:	e002      	b.n	8014aa8 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8014aa2:	f06f 0303 	mvn.w	r3, #3
 8014aa6:	e07d      	b.n	8014ba4 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8014aa8:	4b46      	ldr	r3, [pc, #280]	@ (8014bc4 <etharp_output+0x1fc>)
 8014aaa:	781b      	ldrb	r3, [r3, #0]
 8014aac:	4619      	mov	r1, r3
 8014aae:	4a46      	ldr	r2, [pc, #280]	@ (8014bc8 <etharp_output+0x200>)
 8014ab0:	460b      	mov	r3, r1
 8014ab2:	005b      	lsls	r3, r3, #1
 8014ab4:	440b      	add	r3, r1
 8014ab6:	00db      	lsls	r3, r3, #3
 8014ab8:	4413      	add	r3, r2
 8014aba:	3314      	adds	r3, #20
 8014abc:	781b      	ldrb	r3, [r3, #0]
 8014abe:	2b01      	cmp	r3, #1
 8014ac0:	d925      	bls.n	8014b0e <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8014ac2:	4b40      	ldr	r3, [pc, #256]	@ (8014bc4 <etharp_output+0x1fc>)
 8014ac4:	781b      	ldrb	r3, [r3, #0]
 8014ac6:	4619      	mov	r1, r3
 8014ac8:	4a3f      	ldr	r2, [pc, #252]	@ (8014bc8 <etharp_output+0x200>)
 8014aca:	460b      	mov	r3, r1
 8014acc:	005b      	lsls	r3, r3, #1
 8014ace:	440b      	add	r3, r1
 8014ad0:	00db      	lsls	r3, r3, #3
 8014ad2:	4413      	add	r3, r2
 8014ad4:	3308      	adds	r3, #8
 8014ad6:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8014ad8:	68fa      	ldr	r2, [r7, #12]
 8014ada:	429a      	cmp	r2, r3
 8014adc:	d117      	bne.n	8014b0e <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8014ade:	69bb      	ldr	r3, [r7, #24]
 8014ae0:	681a      	ldr	r2, [r3, #0]
 8014ae2:	4b38      	ldr	r3, [pc, #224]	@ (8014bc4 <etharp_output+0x1fc>)
 8014ae4:	781b      	ldrb	r3, [r3, #0]
 8014ae6:	4618      	mov	r0, r3
 8014ae8:	4937      	ldr	r1, [pc, #220]	@ (8014bc8 <etharp_output+0x200>)
 8014aea:	4603      	mov	r3, r0
 8014aec:	005b      	lsls	r3, r3, #1
 8014aee:	4403      	add	r3, r0
 8014af0:	00db      	lsls	r3, r3, #3
 8014af2:	440b      	add	r3, r1
 8014af4:	3304      	adds	r3, #4
 8014af6:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8014af8:	429a      	cmp	r2, r3
 8014afa:	d108      	bne.n	8014b0e <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8014afc:	4b31      	ldr	r3, [pc, #196]	@ (8014bc4 <etharp_output+0x1fc>)
 8014afe:	781b      	ldrb	r3, [r3, #0]
 8014b00:	461a      	mov	r2, r3
 8014b02:	68b9      	ldr	r1, [r7, #8]
 8014b04:	68f8      	ldr	r0, [r7, #12]
 8014b06:	f7ff fec5 	bl	8014894 <etharp_output_to_arp_index>
 8014b0a:	4603      	mov	r3, r0
 8014b0c:	e04a      	b.n	8014ba4 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8014b0e:	2300      	movs	r3, #0
 8014b10:	75fb      	strb	r3, [r7, #23]
 8014b12:	e031      	b.n	8014b78 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8014b14:	7dfa      	ldrb	r2, [r7, #23]
 8014b16:	492c      	ldr	r1, [pc, #176]	@ (8014bc8 <etharp_output+0x200>)
 8014b18:	4613      	mov	r3, r2
 8014b1a:	005b      	lsls	r3, r3, #1
 8014b1c:	4413      	add	r3, r2
 8014b1e:	00db      	lsls	r3, r3, #3
 8014b20:	440b      	add	r3, r1
 8014b22:	3314      	adds	r3, #20
 8014b24:	781b      	ldrb	r3, [r3, #0]
 8014b26:	2b01      	cmp	r3, #1
 8014b28:	d923      	bls.n	8014b72 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8014b2a:	7dfa      	ldrb	r2, [r7, #23]
 8014b2c:	4926      	ldr	r1, [pc, #152]	@ (8014bc8 <etharp_output+0x200>)
 8014b2e:	4613      	mov	r3, r2
 8014b30:	005b      	lsls	r3, r3, #1
 8014b32:	4413      	add	r3, r2
 8014b34:	00db      	lsls	r3, r3, #3
 8014b36:	440b      	add	r3, r1
 8014b38:	3308      	adds	r3, #8
 8014b3a:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8014b3c:	68fa      	ldr	r2, [r7, #12]
 8014b3e:	429a      	cmp	r2, r3
 8014b40:	d117      	bne.n	8014b72 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8014b42:	69bb      	ldr	r3, [r7, #24]
 8014b44:	6819      	ldr	r1, [r3, #0]
 8014b46:	7dfa      	ldrb	r2, [r7, #23]
 8014b48:	481f      	ldr	r0, [pc, #124]	@ (8014bc8 <etharp_output+0x200>)
 8014b4a:	4613      	mov	r3, r2
 8014b4c:	005b      	lsls	r3, r3, #1
 8014b4e:	4413      	add	r3, r2
 8014b50:	00db      	lsls	r3, r3, #3
 8014b52:	4403      	add	r3, r0
 8014b54:	3304      	adds	r3, #4
 8014b56:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8014b58:	4299      	cmp	r1, r3
 8014b5a:	d10a      	bne.n	8014b72 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8014b5c:	4a19      	ldr	r2, [pc, #100]	@ (8014bc4 <etharp_output+0x1fc>)
 8014b5e:	7dfb      	ldrb	r3, [r7, #23]
 8014b60:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8014b62:	7dfb      	ldrb	r3, [r7, #23]
 8014b64:	461a      	mov	r2, r3
 8014b66:	68b9      	ldr	r1, [r7, #8]
 8014b68:	68f8      	ldr	r0, [r7, #12]
 8014b6a:	f7ff fe93 	bl	8014894 <etharp_output_to_arp_index>
 8014b6e:	4603      	mov	r3, r0
 8014b70:	e018      	b.n	8014ba4 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8014b72:	7dfb      	ldrb	r3, [r7, #23]
 8014b74:	3301      	adds	r3, #1
 8014b76:	75fb      	strb	r3, [r7, #23]
 8014b78:	7dfb      	ldrb	r3, [r7, #23]
 8014b7a:	2b09      	cmp	r3, #9
 8014b7c:	d9ca      	bls.n	8014b14 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8014b7e:	68ba      	ldr	r2, [r7, #8]
 8014b80:	69b9      	ldr	r1, [r7, #24]
 8014b82:	68f8      	ldr	r0, [r7, #12]
 8014b84:	f000 f822 	bl	8014bcc <etharp_query>
 8014b88:	4603      	mov	r3, r0
 8014b8a:	e00b      	b.n	8014ba4 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8014b8c:	68fb      	ldr	r3, [r7, #12]
 8014b8e:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 8014b92:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8014b96:	9300      	str	r3, [sp, #0]
 8014b98:	69fb      	ldr	r3, [r7, #28]
 8014b9a:	68b9      	ldr	r1, [r7, #8]
 8014b9c:	68f8      	ldr	r0, [r7, #12]
 8014b9e:	f001 fd45 	bl	801662c <ethernet_output>
 8014ba2:	4603      	mov	r3, r0
}
 8014ba4:	4618      	mov	r0, r3
 8014ba6:	3720      	adds	r7, #32
 8014ba8:	46bd      	mov	sp, r7
 8014baa:	bd80      	pop	{r7, pc}
 8014bac:	0801ab74 	.word	0x0801ab74
 8014bb0:	0801acc4 	.word	0x0801acc4
 8014bb4:	0801abec 	.word	0x0801abec
 8014bb8:	0801ad14 	.word	0x0801ad14
 8014bbc:	0801acb4 	.word	0x0801acb4
 8014bc0:	0801b398 	.word	0x0801b398
 8014bc4:	2000f538 	.word	0x2000f538
 8014bc8:	2000f448 	.word	0x2000f448

08014bcc <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8014bcc:	b580      	push	{r7, lr}
 8014bce:	b08c      	sub	sp, #48	@ 0x30
 8014bd0:	af02      	add	r7, sp, #8
 8014bd2:	60f8      	str	r0, [r7, #12]
 8014bd4:	60b9      	str	r1, [r7, #8]
 8014bd6:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8014bd8:	68fb      	ldr	r3, [r7, #12]
 8014bda:	3326      	adds	r3, #38	@ 0x26
 8014bdc:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8014bde:	23ff      	movs	r3, #255	@ 0xff
 8014be0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 8014be4:	2300      	movs	r3, #0
 8014be6:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8014be8:	68bb      	ldr	r3, [r7, #8]
 8014bea:	681b      	ldr	r3, [r3, #0]
 8014bec:	68f9      	ldr	r1, [r7, #12]
 8014bee:	4618      	mov	r0, r3
 8014bf0:	f000 fe0e 	bl	8015810 <ip4_addr_isbroadcast_u32>
 8014bf4:	4603      	mov	r3, r0
 8014bf6:	2b00      	cmp	r3, #0
 8014bf8:	d10c      	bne.n	8014c14 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8014bfa:	68bb      	ldr	r3, [r7, #8]
 8014bfc:	681b      	ldr	r3, [r3, #0]
 8014bfe:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8014c02:	2be0      	cmp	r3, #224	@ 0xe0
 8014c04:	d006      	beq.n	8014c14 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8014c06:	68bb      	ldr	r3, [r7, #8]
 8014c08:	2b00      	cmp	r3, #0
 8014c0a:	d003      	beq.n	8014c14 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8014c0c:	68bb      	ldr	r3, [r7, #8]
 8014c0e:	681b      	ldr	r3, [r3, #0]
 8014c10:	2b00      	cmp	r3, #0
 8014c12:	d102      	bne.n	8014c1a <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8014c14:	f06f 030f 	mvn.w	r3, #15
 8014c18:	e101      	b.n	8014e1e <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8014c1a:	68fa      	ldr	r2, [r7, #12]
 8014c1c:	2101      	movs	r1, #1
 8014c1e:	68b8      	ldr	r0, [r7, #8]
 8014c20:	f7ff fb60 	bl	80142e4 <etharp_find_entry>
 8014c24:	4603      	mov	r3, r0
 8014c26:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8014c28:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8014c2c:	2b00      	cmp	r3, #0
 8014c2e:	da02      	bge.n	8014c36 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8014c30:	8a7b      	ldrh	r3, [r7, #18]
 8014c32:	b25b      	sxtb	r3, r3
 8014c34:	e0f3      	b.n	8014e1e <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8014c36:	8a7b      	ldrh	r3, [r7, #18]
 8014c38:	2b7e      	cmp	r3, #126	@ 0x7e
 8014c3a:	d906      	bls.n	8014c4a <etharp_query+0x7e>
 8014c3c:	4b7a      	ldr	r3, [pc, #488]	@ (8014e28 <etharp_query+0x25c>)
 8014c3e:	f240 32c1 	movw	r2, #961	@ 0x3c1
 8014c42:	497a      	ldr	r1, [pc, #488]	@ (8014e2c <etharp_query+0x260>)
 8014c44:	487a      	ldr	r0, [pc, #488]	@ (8014e30 <etharp_query+0x264>)
 8014c46:	f001 ffef 	bl	8016c28 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8014c4a:	8a7b      	ldrh	r3, [r7, #18]
 8014c4c:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8014c4e:	7c7a      	ldrb	r2, [r7, #17]
 8014c50:	4978      	ldr	r1, [pc, #480]	@ (8014e34 <etharp_query+0x268>)
 8014c52:	4613      	mov	r3, r2
 8014c54:	005b      	lsls	r3, r3, #1
 8014c56:	4413      	add	r3, r2
 8014c58:	00db      	lsls	r3, r3, #3
 8014c5a:	440b      	add	r3, r1
 8014c5c:	3314      	adds	r3, #20
 8014c5e:	781b      	ldrb	r3, [r3, #0]
 8014c60:	2b00      	cmp	r3, #0
 8014c62:	d115      	bne.n	8014c90 <etharp_query+0xc4>
    is_new_entry = 1;
 8014c64:	2301      	movs	r3, #1
 8014c66:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8014c68:	7c7a      	ldrb	r2, [r7, #17]
 8014c6a:	4972      	ldr	r1, [pc, #456]	@ (8014e34 <etharp_query+0x268>)
 8014c6c:	4613      	mov	r3, r2
 8014c6e:	005b      	lsls	r3, r3, #1
 8014c70:	4413      	add	r3, r2
 8014c72:	00db      	lsls	r3, r3, #3
 8014c74:	440b      	add	r3, r1
 8014c76:	3314      	adds	r3, #20
 8014c78:	2201      	movs	r2, #1
 8014c7a:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8014c7c:	7c7a      	ldrb	r2, [r7, #17]
 8014c7e:	496d      	ldr	r1, [pc, #436]	@ (8014e34 <etharp_query+0x268>)
 8014c80:	4613      	mov	r3, r2
 8014c82:	005b      	lsls	r3, r3, #1
 8014c84:	4413      	add	r3, r2
 8014c86:	00db      	lsls	r3, r3, #3
 8014c88:	440b      	add	r3, r1
 8014c8a:	3308      	adds	r3, #8
 8014c8c:	68fa      	ldr	r2, [r7, #12]
 8014c8e:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8014c90:	7c7a      	ldrb	r2, [r7, #17]
 8014c92:	4968      	ldr	r1, [pc, #416]	@ (8014e34 <etharp_query+0x268>)
 8014c94:	4613      	mov	r3, r2
 8014c96:	005b      	lsls	r3, r3, #1
 8014c98:	4413      	add	r3, r2
 8014c9a:	00db      	lsls	r3, r3, #3
 8014c9c:	440b      	add	r3, r1
 8014c9e:	3314      	adds	r3, #20
 8014ca0:	781b      	ldrb	r3, [r3, #0]
 8014ca2:	2b01      	cmp	r3, #1
 8014ca4:	d011      	beq.n	8014cca <etharp_query+0xfe>
 8014ca6:	7c7a      	ldrb	r2, [r7, #17]
 8014ca8:	4962      	ldr	r1, [pc, #392]	@ (8014e34 <etharp_query+0x268>)
 8014caa:	4613      	mov	r3, r2
 8014cac:	005b      	lsls	r3, r3, #1
 8014cae:	4413      	add	r3, r2
 8014cb0:	00db      	lsls	r3, r3, #3
 8014cb2:	440b      	add	r3, r1
 8014cb4:	3314      	adds	r3, #20
 8014cb6:	781b      	ldrb	r3, [r3, #0]
 8014cb8:	2b01      	cmp	r3, #1
 8014cba:	d806      	bhi.n	8014cca <etharp_query+0xfe>
 8014cbc:	4b5a      	ldr	r3, [pc, #360]	@ (8014e28 <etharp_query+0x25c>)
 8014cbe:	f240 32cd 	movw	r2, #973	@ 0x3cd
 8014cc2:	495d      	ldr	r1, [pc, #372]	@ (8014e38 <etharp_query+0x26c>)
 8014cc4:	485a      	ldr	r0, [pc, #360]	@ (8014e30 <etharp_query+0x264>)
 8014cc6:	f001 ffaf 	bl	8016c28 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8014cca:	6a3b      	ldr	r3, [r7, #32]
 8014ccc:	2b00      	cmp	r3, #0
 8014cce:	d102      	bne.n	8014cd6 <etharp_query+0x10a>
 8014cd0:	687b      	ldr	r3, [r7, #4]
 8014cd2:	2b00      	cmp	r3, #0
 8014cd4:	d10c      	bne.n	8014cf0 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8014cd6:	68b9      	ldr	r1, [r7, #8]
 8014cd8:	68f8      	ldr	r0, [r7, #12]
 8014cda:	f000 f963 	bl	8014fa4 <etharp_request>
 8014cde:	4603      	mov	r3, r0
 8014ce0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8014ce4:	687b      	ldr	r3, [r7, #4]
 8014ce6:	2b00      	cmp	r3, #0
 8014ce8:	d102      	bne.n	8014cf0 <etharp_query+0x124>
      return result;
 8014cea:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8014cee:	e096      	b.n	8014e1e <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8014cf0:	687b      	ldr	r3, [r7, #4]
 8014cf2:	2b00      	cmp	r3, #0
 8014cf4:	d106      	bne.n	8014d04 <etharp_query+0x138>
 8014cf6:	4b4c      	ldr	r3, [pc, #304]	@ (8014e28 <etharp_query+0x25c>)
 8014cf8:	f240 32e1 	movw	r2, #993	@ 0x3e1
 8014cfc:	494f      	ldr	r1, [pc, #316]	@ (8014e3c <etharp_query+0x270>)
 8014cfe:	484c      	ldr	r0, [pc, #304]	@ (8014e30 <etharp_query+0x264>)
 8014d00:	f001 ff92 	bl	8016c28 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8014d04:	7c7a      	ldrb	r2, [r7, #17]
 8014d06:	494b      	ldr	r1, [pc, #300]	@ (8014e34 <etharp_query+0x268>)
 8014d08:	4613      	mov	r3, r2
 8014d0a:	005b      	lsls	r3, r3, #1
 8014d0c:	4413      	add	r3, r2
 8014d0e:	00db      	lsls	r3, r3, #3
 8014d10:	440b      	add	r3, r1
 8014d12:	3314      	adds	r3, #20
 8014d14:	781b      	ldrb	r3, [r3, #0]
 8014d16:	2b01      	cmp	r3, #1
 8014d18:	d917      	bls.n	8014d4a <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8014d1a:	4a49      	ldr	r2, [pc, #292]	@ (8014e40 <etharp_query+0x274>)
 8014d1c:	7c7b      	ldrb	r3, [r7, #17]
 8014d1e:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8014d20:	7c7a      	ldrb	r2, [r7, #17]
 8014d22:	4613      	mov	r3, r2
 8014d24:	005b      	lsls	r3, r3, #1
 8014d26:	4413      	add	r3, r2
 8014d28:	00db      	lsls	r3, r3, #3
 8014d2a:	3308      	adds	r3, #8
 8014d2c:	4a41      	ldr	r2, [pc, #260]	@ (8014e34 <etharp_query+0x268>)
 8014d2e:	4413      	add	r3, r2
 8014d30:	3304      	adds	r3, #4
 8014d32:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8014d36:	9200      	str	r2, [sp, #0]
 8014d38:	697a      	ldr	r2, [r7, #20]
 8014d3a:	6879      	ldr	r1, [r7, #4]
 8014d3c:	68f8      	ldr	r0, [r7, #12]
 8014d3e:	f001 fc75 	bl	801662c <ethernet_output>
 8014d42:	4603      	mov	r3, r0
 8014d44:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8014d48:	e067      	b.n	8014e1a <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8014d4a:	7c7a      	ldrb	r2, [r7, #17]
 8014d4c:	4939      	ldr	r1, [pc, #228]	@ (8014e34 <etharp_query+0x268>)
 8014d4e:	4613      	mov	r3, r2
 8014d50:	005b      	lsls	r3, r3, #1
 8014d52:	4413      	add	r3, r2
 8014d54:	00db      	lsls	r3, r3, #3
 8014d56:	440b      	add	r3, r1
 8014d58:	3314      	adds	r3, #20
 8014d5a:	781b      	ldrb	r3, [r3, #0]
 8014d5c:	2b01      	cmp	r3, #1
 8014d5e:	d15c      	bne.n	8014e1a <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8014d60:	2300      	movs	r3, #0
 8014d62:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8014d64:	687b      	ldr	r3, [r7, #4]
 8014d66:	61fb      	str	r3, [r7, #28]
    while (p) {
 8014d68:	e01c      	b.n	8014da4 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8014d6a:	69fb      	ldr	r3, [r7, #28]
 8014d6c:	895a      	ldrh	r2, [r3, #10]
 8014d6e:	69fb      	ldr	r3, [r7, #28]
 8014d70:	891b      	ldrh	r3, [r3, #8]
 8014d72:	429a      	cmp	r2, r3
 8014d74:	d10a      	bne.n	8014d8c <etharp_query+0x1c0>
 8014d76:	69fb      	ldr	r3, [r7, #28]
 8014d78:	681b      	ldr	r3, [r3, #0]
 8014d7a:	2b00      	cmp	r3, #0
 8014d7c:	d006      	beq.n	8014d8c <etharp_query+0x1c0>
 8014d7e:	4b2a      	ldr	r3, [pc, #168]	@ (8014e28 <etharp_query+0x25c>)
 8014d80:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 8014d84:	492f      	ldr	r1, [pc, #188]	@ (8014e44 <etharp_query+0x278>)
 8014d86:	482a      	ldr	r0, [pc, #168]	@ (8014e30 <etharp_query+0x264>)
 8014d88:	f001 ff4e 	bl	8016c28 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8014d8c:	69fb      	ldr	r3, [r7, #28]
 8014d8e:	7b1b      	ldrb	r3, [r3, #12]
 8014d90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8014d94:	2b00      	cmp	r3, #0
 8014d96:	d002      	beq.n	8014d9e <etharp_query+0x1d2>
        copy_needed = 1;
 8014d98:	2301      	movs	r3, #1
 8014d9a:	61bb      	str	r3, [r7, #24]
        break;
 8014d9c:	e005      	b.n	8014daa <etharp_query+0x1de>
      }
      p = p->next;
 8014d9e:	69fb      	ldr	r3, [r7, #28]
 8014da0:	681b      	ldr	r3, [r3, #0]
 8014da2:	61fb      	str	r3, [r7, #28]
    while (p) {
 8014da4:	69fb      	ldr	r3, [r7, #28]
 8014da6:	2b00      	cmp	r3, #0
 8014da8:	d1df      	bne.n	8014d6a <etharp_query+0x19e>
    }
    if (copy_needed) {
 8014daa:	69bb      	ldr	r3, [r7, #24]
 8014dac:	2b00      	cmp	r3, #0
 8014dae:	d007      	beq.n	8014dc0 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8014db0:	687a      	ldr	r2, [r7, #4]
 8014db2:	f44f 7120 	mov.w	r1, #640	@ 0x280
 8014db6:	200e      	movs	r0, #14
 8014db8:	f7f8 fc5e 	bl	800d678 <pbuf_clone>
 8014dbc:	61f8      	str	r0, [r7, #28]
 8014dbe:	e004      	b.n	8014dca <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8014dc0:	687b      	ldr	r3, [r7, #4]
 8014dc2:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8014dc4:	69f8      	ldr	r0, [r7, #28]
 8014dc6:	f7f8 fa95 	bl	800d2f4 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8014dca:	69fb      	ldr	r3, [r7, #28]
 8014dcc:	2b00      	cmp	r3, #0
 8014dce:	d021      	beq.n	8014e14 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8014dd0:	7c7a      	ldrb	r2, [r7, #17]
 8014dd2:	4918      	ldr	r1, [pc, #96]	@ (8014e34 <etharp_query+0x268>)
 8014dd4:	4613      	mov	r3, r2
 8014dd6:	005b      	lsls	r3, r3, #1
 8014dd8:	4413      	add	r3, r2
 8014dda:	00db      	lsls	r3, r3, #3
 8014ddc:	440b      	add	r3, r1
 8014dde:	681b      	ldr	r3, [r3, #0]
 8014de0:	2b00      	cmp	r3, #0
 8014de2:	d00a      	beq.n	8014dfa <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8014de4:	7c7a      	ldrb	r2, [r7, #17]
 8014de6:	4913      	ldr	r1, [pc, #76]	@ (8014e34 <etharp_query+0x268>)
 8014de8:	4613      	mov	r3, r2
 8014dea:	005b      	lsls	r3, r3, #1
 8014dec:	4413      	add	r3, r2
 8014dee:	00db      	lsls	r3, r3, #3
 8014df0:	440b      	add	r3, r1
 8014df2:	681b      	ldr	r3, [r3, #0]
 8014df4:	4618      	mov	r0, r3
 8014df6:	f7f8 f9d7 	bl	800d1a8 <pbuf_free>
      }
      arp_table[i].q = p;
 8014dfa:	7c7a      	ldrb	r2, [r7, #17]
 8014dfc:	490d      	ldr	r1, [pc, #52]	@ (8014e34 <etharp_query+0x268>)
 8014dfe:	4613      	mov	r3, r2
 8014e00:	005b      	lsls	r3, r3, #1
 8014e02:	4413      	add	r3, r2
 8014e04:	00db      	lsls	r3, r3, #3
 8014e06:	440b      	add	r3, r1
 8014e08:	69fa      	ldr	r2, [r7, #28]
 8014e0a:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8014e0c:	2300      	movs	r3, #0
 8014e0e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8014e12:	e002      	b.n	8014e1a <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8014e14:	23ff      	movs	r3, #255	@ 0xff
 8014e16:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 8014e1a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8014e1e:	4618      	mov	r0, r3
 8014e20:	3728      	adds	r7, #40	@ 0x28
 8014e22:	46bd      	mov	sp, r7
 8014e24:	bd80      	pop	{r7, pc}
 8014e26:	bf00      	nop
 8014e28:	0801ab74 	.word	0x0801ab74
 8014e2c:	0801ad20 	.word	0x0801ad20
 8014e30:	0801abec 	.word	0x0801abec
 8014e34:	2000f448 	.word	0x2000f448
 8014e38:	0801ad30 	.word	0x0801ad30
 8014e3c:	0801ad14 	.word	0x0801ad14
 8014e40:	2000f538 	.word	0x2000f538
 8014e44:	0801ad58 	.word	0x0801ad58

08014e48 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8014e48:	b580      	push	{r7, lr}
 8014e4a:	b08a      	sub	sp, #40	@ 0x28
 8014e4c:	af02      	add	r7, sp, #8
 8014e4e:	60f8      	str	r0, [r7, #12]
 8014e50:	60b9      	str	r1, [r7, #8]
 8014e52:	607a      	str	r2, [r7, #4]
 8014e54:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8014e56:	2300      	movs	r3, #0
 8014e58:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8014e5a:	68fb      	ldr	r3, [r7, #12]
 8014e5c:	2b00      	cmp	r3, #0
 8014e5e:	d106      	bne.n	8014e6e <etharp_raw+0x26>
 8014e60:	4b3a      	ldr	r3, [pc, #232]	@ (8014f4c <etharp_raw+0x104>)
 8014e62:	f240 4257 	movw	r2, #1111	@ 0x457
 8014e66:	493a      	ldr	r1, [pc, #232]	@ (8014f50 <etharp_raw+0x108>)
 8014e68:	483a      	ldr	r0, [pc, #232]	@ (8014f54 <etharp_raw+0x10c>)
 8014e6a:	f001 fedd 	bl	8016c28 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8014e6e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8014e72:	211c      	movs	r1, #28
 8014e74:	200e      	movs	r0, #14
 8014e76:	f7f7 feb3 	bl	800cbe0 <pbuf_alloc>
 8014e7a:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8014e7c:	69bb      	ldr	r3, [r7, #24]
 8014e7e:	2b00      	cmp	r3, #0
 8014e80:	d102      	bne.n	8014e88 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8014e82:	f04f 33ff 	mov.w	r3, #4294967295
 8014e86:	e05d      	b.n	8014f44 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8014e88:	69bb      	ldr	r3, [r7, #24]
 8014e8a:	895b      	ldrh	r3, [r3, #10]
 8014e8c:	2b1b      	cmp	r3, #27
 8014e8e:	d806      	bhi.n	8014e9e <etharp_raw+0x56>
 8014e90:	4b2e      	ldr	r3, [pc, #184]	@ (8014f4c <etharp_raw+0x104>)
 8014e92:	f240 4262 	movw	r2, #1122	@ 0x462
 8014e96:	4930      	ldr	r1, [pc, #192]	@ (8014f58 <etharp_raw+0x110>)
 8014e98:	482e      	ldr	r0, [pc, #184]	@ (8014f54 <etharp_raw+0x10c>)
 8014e9a:	f001 fec5 	bl	8016c28 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8014e9e:	69bb      	ldr	r3, [r7, #24]
 8014ea0:	685b      	ldr	r3, [r3, #4]
 8014ea2:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8014ea4:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8014ea6:	4618      	mov	r0, r3
 8014ea8:	f7f6 fd8c 	bl	800b9c4 <lwip_htons>
 8014eac:	4603      	mov	r3, r0
 8014eae:	461a      	mov	r2, r3
 8014eb0:	697b      	ldr	r3, [r7, #20]
 8014eb2:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8014eb4:	68fb      	ldr	r3, [r7, #12]
 8014eb6:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8014eba:	2b06      	cmp	r3, #6
 8014ebc:	d006      	beq.n	8014ecc <etharp_raw+0x84>
 8014ebe:	4b23      	ldr	r3, [pc, #140]	@ (8014f4c <etharp_raw+0x104>)
 8014ec0:	f240 4269 	movw	r2, #1129	@ 0x469
 8014ec4:	4925      	ldr	r1, [pc, #148]	@ (8014f5c <etharp_raw+0x114>)
 8014ec6:	4823      	ldr	r0, [pc, #140]	@ (8014f54 <etharp_raw+0x10c>)
 8014ec8:	f001 feae 	bl	8016c28 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8014ecc:	697b      	ldr	r3, [r7, #20]
 8014ece:	3308      	adds	r3, #8
 8014ed0:	2206      	movs	r2, #6
 8014ed2:	6839      	ldr	r1, [r7, #0]
 8014ed4:	4618      	mov	r0, r3
 8014ed6:	f001 ffd8 	bl	8016e8a <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8014eda:	697b      	ldr	r3, [r7, #20]
 8014edc:	3312      	adds	r3, #18
 8014ede:	2206      	movs	r2, #6
 8014ee0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8014ee2:	4618      	mov	r0, r3
 8014ee4:	f001 ffd1 	bl	8016e8a <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8014ee8:	697b      	ldr	r3, [r7, #20]
 8014eea:	330e      	adds	r3, #14
 8014eec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014eee:	6812      	ldr	r2, [r2, #0]
 8014ef0:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8014ef2:	697b      	ldr	r3, [r7, #20]
 8014ef4:	3318      	adds	r3, #24
 8014ef6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014ef8:	6812      	ldr	r2, [r2, #0]
 8014efa:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8014efc:	697b      	ldr	r3, [r7, #20]
 8014efe:	2200      	movs	r2, #0
 8014f00:	701a      	strb	r2, [r3, #0]
 8014f02:	2200      	movs	r2, #0
 8014f04:	f042 0201 	orr.w	r2, r2, #1
 8014f08:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8014f0a:	697b      	ldr	r3, [r7, #20]
 8014f0c:	2200      	movs	r2, #0
 8014f0e:	f042 0208 	orr.w	r2, r2, #8
 8014f12:	709a      	strb	r2, [r3, #2]
 8014f14:	2200      	movs	r2, #0
 8014f16:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8014f18:	697b      	ldr	r3, [r7, #20]
 8014f1a:	2206      	movs	r2, #6
 8014f1c:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8014f1e:	697b      	ldr	r3, [r7, #20]
 8014f20:	2204      	movs	r2, #4
 8014f22:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8014f24:	f640 0306 	movw	r3, #2054	@ 0x806
 8014f28:	9300      	str	r3, [sp, #0]
 8014f2a:	687b      	ldr	r3, [r7, #4]
 8014f2c:	68ba      	ldr	r2, [r7, #8]
 8014f2e:	69b9      	ldr	r1, [r7, #24]
 8014f30:	68f8      	ldr	r0, [r7, #12]
 8014f32:	f001 fb7b 	bl	801662c <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8014f36:	69b8      	ldr	r0, [r7, #24]
 8014f38:	f7f8 f936 	bl	800d1a8 <pbuf_free>
  p = NULL;
 8014f3c:	2300      	movs	r3, #0
 8014f3e:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8014f40:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8014f44:	4618      	mov	r0, r3
 8014f46:	3720      	adds	r7, #32
 8014f48:	46bd      	mov	sp, r7
 8014f4a:	bd80      	pop	{r7, pc}
 8014f4c:	0801ab74 	.word	0x0801ab74
 8014f50:	0801acc4 	.word	0x0801acc4
 8014f54:	0801abec 	.word	0x0801abec
 8014f58:	0801ad74 	.word	0x0801ad74
 8014f5c:	0801ada8 	.word	0x0801ada8

08014f60 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8014f60:	b580      	push	{r7, lr}
 8014f62:	b088      	sub	sp, #32
 8014f64:	af04      	add	r7, sp, #16
 8014f66:	60f8      	str	r0, [r7, #12]
 8014f68:	60b9      	str	r1, [r7, #8]
 8014f6a:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8014f6c:	68fb      	ldr	r3, [r7, #12]
 8014f6e:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8014f72:	68fb      	ldr	r3, [r7, #12]
 8014f74:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 8014f78:	68fb      	ldr	r3, [r7, #12]
 8014f7a:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8014f7c:	2201      	movs	r2, #1
 8014f7e:	9203      	str	r2, [sp, #12]
 8014f80:	68ba      	ldr	r2, [r7, #8]
 8014f82:	9202      	str	r2, [sp, #8]
 8014f84:	4a06      	ldr	r2, [pc, #24]	@ (8014fa0 <etharp_request_dst+0x40>)
 8014f86:	9201      	str	r2, [sp, #4]
 8014f88:	9300      	str	r3, [sp, #0]
 8014f8a:	4603      	mov	r3, r0
 8014f8c:	687a      	ldr	r2, [r7, #4]
 8014f8e:	68f8      	ldr	r0, [r7, #12]
 8014f90:	f7ff ff5a 	bl	8014e48 <etharp_raw>
 8014f94:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8014f96:	4618      	mov	r0, r3
 8014f98:	3710      	adds	r7, #16
 8014f9a:	46bd      	mov	sp, r7
 8014f9c:	bd80      	pop	{r7, pc}
 8014f9e:	bf00      	nop
 8014fa0:	0801b3a0 	.word	0x0801b3a0

08014fa4 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8014fa4:	b580      	push	{r7, lr}
 8014fa6:	b082      	sub	sp, #8
 8014fa8:	af00      	add	r7, sp, #0
 8014faa:	6078      	str	r0, [r7, #4]
 8014fac:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8014fae:	4a05      	ldr	r2, [pc, #20]	@ (8014fc4 <etharp_request+0x20>)
 8014fb0:	6839      	ldr	r1, [r7, #0]
 8014fb2:	6878      	ldr	r0, [r7, #4]
 8014fb4:	f7ff ffd4 	bl	8014f60 <etharp_request_dst>
 8014fb8:	4603      	mov	r3, r0
}
 8014fba:	4618      	mov	r0, r3
 8014fbc:	3708      	adds	r7, #8
 8014fbe:	46bd      	mov	sp, r7
 8014fc0:	bd80      	pop	{r7, pc}
 8014fc2:	bf00      	nop
 8014fc4:	0801b398 	.word	0x0801b398

08014fc8 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8014fc8:	b580      	push	{r7, lr}
 8014fca:	b08e      	sub	sp, #56	@ 0x38
 8014fcc:	af04      	add	r7, sp, #16
 8014fce:	6078      	str	r0, [r7, #4]
 8014fd0:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8014fd2:	4b79      	ldr	r3, [pc, #484]	@ (80151b8 <icmp_input+0x1f0>)
 8014fd4:	689b      	ldr	r3, [r3, #8]
 8014fd6:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8014fd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014fda:	781b      	ldrb	r3, [r3, #0]
 8014fdc:	f003 030f 	and.w	r3, r3, #15
 8014fe0:	b2db      	uxtb	r3, r3
 8014fe2:	009b      	lsls	r3, r3, #2
 8014fe4:	b2db      	uxtb	r3, r3
 8014fe6:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 8014fe8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8014fea:	2b13      	cmp	r3, #19
 8014fec:	f240 80cd 	bls.w	801518a <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8014ff0:	687b      	ldr	r3, [r7, #4]
 8014ff2:	895b      	ldrh	r3, [r3, #10]
 8014ff4:	2b03      	cmp	r3, #3
 8014ff6:	f240 80ca 	bls.w	801518e <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8014ffa:	687b      	ldr	r3, [r7, #4]
 8014ffc:	685b      	ldr	r3, [r3, #4]
 8014ffe:	781b      	ldrb	r3, [r3, #0]
 8015000:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8015004:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8015008:	2b00      	cmp	r3, #0
 801500a:	f000 80b7 	beq.w	801517c <icmp_input+0x1b4>
 801500e:	2b08      	cmp	r3, #8
 8015010:	f040 80b7 	bne.w	8015182 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8015014:	4b69      	ldr	r3, [pc, #420]	@ (80151bc <icmp_input+0x1f4>)
 8015016:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8015018:	4b67      	ldr	r3, [pc, #412]	@ (80151b8 <icmp_input+0x1f0>)
 801501a:	695b      	ldr	r3, [r3, #20]
 801501c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8015020:	2be0      	cmp	r3, #224	@ 0xe0
 8015022:	f000 80bb 	beq.w	801519c <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8015026:	4b64      	ldr	r3, [pc, #400]	@ (80151b8 <icmp_input+0x1f0>)
 8015028:	695b      	ldr	r3, [r3, #20]
 801502a:	4a63      	ldr	r2, [pc, #396]	@ (80151b8 <icmp_input+0x1f0>)
 801502c:	6812      	ldr	r2, [r2, #0]
 801502e:	4611      	mov	r1, r2
 8015030:	4618      	mov	r0, r3
 8015032:	f000 fbed 	bl	8015810 <ip4_addr_isbroadcast_u32>
 8015036:	4603      	mov	r3, r0
 8015038:	2b00      	cmp	r3, #0
 801503a:	f040 80b1 	bne.w	80151a0 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801503e:	687b      	ldr	r3, [r7, #4]
 8015040:	891b      	ldrh	r3, [r3, #8]
 8015042:	2b07      	cmp	r3, #7
 8015044:	f240 80a5 	bls.w	8015192 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8015048:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801504a:	330e      	adds	r3, #14
 801504c:	4619      	mov	r1, r3
 801504e:	6878      	ldr	r0, [r7, #4]
 8015050:	f7f8 f814 	bl	800d07c <pbuf_add_header>
 8015054:	4603      	mov	r3, r0
 8015056:	2b00      	cmp	r3, #0
 8015058:	d04b      	beq.n	80150f2 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801505a:	687b      	ldr	r3, [r7, #4]
 801505c:	891a      	ldrh	r2, [r3, #8]
 801505e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8015060:	4413      	add	r3, r2
 8015062:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8015064:	687b      	ldr	r3, [r7, #4]
 8015066:	891b      	ldrh	r3, [r3, #8]
 8015068:	8b7a      	ldrh	r2, [r7, #26]
 801506a:	429a      	cmp	r2, r3
 801506c:	f0c0 809a 	bcc.w	80151a4 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8015070:	8b7b      	ldrh	r3, [r7, #26]
 8015072:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8015076:	4619      	mov	r1, r3
 8015078:	200e      	movs	r0, #14
 801507a:	f7f7 fdb1 	bl	800cbe0 <pbuf_alloc>
 801507e:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8015080:	697b      	ldr	r3, [r7, #20]
 8015082:	2b00      	cmp	r3, #0
 8015084:	f000 8090 	beq.w	80151a8 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8015088:	697b      	ldr	r3, [r7, #20]
 801508a:	895b      	ldrh	r3, [r3, #10]
 801508c:	461a      	mov	r2, r3
 801508e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8015090:	3308      	adds	r3, #8
 8015092:	429a      	cmp	r2, r3
 8015094:	d203      	bcs.n	801509e <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8015096:	6978      	ldr	r0, [r7, #20]
 8015098:	f7f8 f886 	bl	800d1a8 <pbuf_free>
          goto icmperr;
 801509c:	e085      	b.n	80151aa <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801509e:	697b      	ldr	r3, [r7, #20]
 80150a0:	685b      	ldr	r3, [r3, #4]
 80150a2:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80150a4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80150a6:	4618      	mov	r0, r3
 80150a8:	f001 feef 	bl	8016e8a <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 80150ac:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80150ae:	4619      	mov	r1, r3
 80150b0:	6978      	ldr	r0, [r7, #20]
 80150b2:	f7f7 fff3 	bl	800d09c <pbuf_remove_header>
 80150b6:	4603      	mov	r3, r0
 80150b8:	2b00      	cmp	r3, #0
 80150ba:	d009      	beq.n	80150d0 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 80150bc:	4b40      	ldr	r3, [pc, #256]	@ (80151c0 <icmp_input+0x1f8>)
 80150be:	22b6      	movs	r2, #182	@ 0xb6
 80150c0:	4940      	ldr	r1, [pc, #256]	@ (80151c4 <icmp_input+0x1fc>)
 80150c2:	4841      	ldr	r0, [pc, #260]	@ (80151c8 <icmp_input+0x200>)
 80150c4:	f001 fdb0 	bl	8016c28 <iprintf>
          pbuf_free(r);
 80150c8:	6978      	ldr	r0, [r7, #20]
 80150ca:	f7f8 f86d 	bl	800d1a8 <pbuf_free>
          goto icmperr;
 80150ce:	e06c      	b.n	80151aa <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 80150d0:	6879      	ldr	r1, [r7, #4]
 80150d2:	6978      	ldr	r0, [r7, #20]
 80150d4:	f7f8 f98c 	bl	800d3f0 <pbuf_copy>
 80150d8:	4603      	mov	r3, r0
 80150da:	2b00      	cmp	r3, #0
 80150dc:	d003      	beq.n	80150e6 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 80150de:	6978      	ldr	r0, [r7, #20]
 80150e0:	f7f8 f862 	bl	800d1a8 <pbuf_free>
          goto icmperr;
 80150e4:	e061      	b.n	80151aa <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 80150e6:	6878      	ldr	r0, [r7, #4]
 80150e8:	f7f8 f85e 	bl	800d1a8 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 80150ec:	697b      	ldr	r3, [r7, #20]
 80150ee:	607b      	str	r3, [r7, #4]
 80150f0:	e00f      	b.n	8015112 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80150f2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80150f4:	330e      	adds	r3, #14
 80150f6:	4619      	mov	r1, r3
 80150f8:	6878      	ldr	r0, [r7, #4]
 80150fa:	f7f7 ffcf 	bl	800d09c <pbuf_remove_header>
 80150fe:	4603      	mov	r3, r0
 8015100:	2b00      	cmp	r3, #0
 8015102:	d006      	beq.n	8015112 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8015104:	4b2e      	ldr	r3, [pc, #184]	@ (80151c0 <icmp_input+0x1f8>)
 8015106:	22c7      	movs	r2, #199	@ 0xc7
 8015108:	4930      	ldr	r1, [pc, #192]	@ (80151cc <icmp_input+0x204>)
 801510a:	482f      	ldr	r0, [pc, #188]	@ (80151c8 <icmp_input+0x200>)
 801510c:	f001 fd8c 	bl	8016c28 <iprintf>
          goto icmperr;
 8015110:	e04b      	b.n	80151aa <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8015112:	687b      	ldr	r3, [r7, #4]
 8015114:	685b      	ldr	r3, [r3, #4]
 8015116:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8015118:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801511a:	4619      	mov	r1, r3
 801511c:	6878      	ldr	r0, [r7, #4]
 801511e:	f7f7 ffad 	bl	800d07c <pbuf_add_header>
 8015122:	4603      	mov	r3, r0
 8015124:	2b00      	cmp	r3, #0
 8015126:	d12b      	bne.n	8015180 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8015128:	687b      	ldr	r3, [r7, #4]
 801512a:	685b      	ldr	r3, [r3, #4]
 801512c:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801512e:	69fb      	ldr	r3, [r7, #28]
 8015130:	681a      	ldr	r2, [r3, #0]
 8015132:	68fb      	ldr	r3, [r7, #12]
 8015134:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8015136:	4b20      	ldr	r3, [pc, #128]	@ (80151b8 <icmp_input+0x1f0>)
 8015138:	691a      	ldr	r2, [r3, #16]
 801513a:	68fb      	ldr	r3, [r7, #12]
 801513c:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801513e:	693b      	ldr	r3, [r7, #16]
 8015140:	2200      	movs	r2, #0
 8015142:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8015144:	693b      	ldr	r3, [r7, #16]
 8015146:	2200      	movs	r2, #0
 8015148:	709a      	strb	r2, [r3, #2]
 801514a:	2200      	movs	r2, #0
 801514c:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801514e:	68fb      	ldr	r3, [r7, #12]
 8015150:	22ff      	movs	r2, #255	@ 0xff
 8015152:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8015154:	68fb      	ldr	r3, [r7, #12]
 8015156:	2200      	movs	r2, #0
 8015158:	729a      	strb	r2, [r3, #10]
 801515a:	2200      	movs	r2, #0
 801515c:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801515e:	683b      	ldr	r3, [r7, #0]
 8015160:	9302      	str	r3, [sp, #8]
 8015162:	2301      	movs	r3, #1
 8015164:	9301      	str	r3, [sp, #4]
 8015166:	2300      	movs	r3, #0
 8015168:	9300      	str	r3, [sp, #0]
 801516a:	23ff      	movs	r3, #255	@ 0xff
 801516c:	2200      	movs	r2, #0
 801516e:	69f9      	ldr	r1, [r7, #28]
 8015170:	6878      	ldr	r0, [r7, #4]
 8015172:	f000 fa75 	bl	8015660 <ip4_output_if>
 8015176:	4603      	mov	r3, r0
 8015178:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801517a:	e001      	b.n	8015180 <icmp_input+0x1b8>
      break;
 801517c:	bf00      	nop
 801517e:	e000      	b.n	8015182 <icmp_input+0x1ba>
      break;
 8015180:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8015182:	6878      	ldr	r0, [r7, #4]
 8015184:	f7f8 f810 	bl	800d1a8 <pbuf_free>
  return;
 8015188:	e013      	b.n	80151b2 <icmp_input+0x1ea>
    goto lenerr;
 801518a:	bf00      	nop
 801518c:	e002      	b.n	8015194 <icmp_input+0x1cc>
    goto lenerr;
 801518e:	bf00      	nop
 8015190:	e000      	b.n	8015194 <icmp_input+0x1cc>
        goto lenerr;
 8015192:	bf00      	nop
lenerr:
  pbuf_free(p);
 8015194:	6878      	ldr	r0, [r7, #4]
 8015196:	f7f8 f807 	bl	800d1a8 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801519a:	e00a      	b.n	80151b2 <icmp_input+0x1ea>
        goto icmperr;
 801519c:	bf00      	nop
 801519e:	e004      	b.n	80151aa <icmp_input+0x1e2>
        goto icmperr;
 80151a0:	bf00      	nop
 80151a2:	e002      	b.n	80151aa <icmp_input+0x1e2>
          goto icmperr;
 80151a4:	bf00      	nop
 80151a6:	e000      	b.n	80151aa <icmp_input+0x1e2>
          goto icmperr;
 80151a8:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 80151aa:	6878      	ldr	r0, [r7, #4]
 80151ac:	f7f7 fffc 	bl	800d1a8 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80151b0:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 80151b2:	3728      	adds	r7, #40	@ 0x28
 80151b4:	46bd      	mov	sp, r7
 80151b6:	bd80      	pop	{r7, pc}
 80151b8:	20009a9c 	.word	0x20009a9c
 80151bc:	20009ab0 	.word	0x20009ab0
 80151c0:	0801adec 	.word	0x0801adec
 80151c4:	0801ae24 	.word	0x0801ae24
 80151c8:	0801ae5c 	.word	0x0801ae5c
 80151cc:	0801ae84 	.word	0x0801ae84

080151d0 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 80151d0:	b580      	push	{r7, lr}
 80151d2:	b082      	sub	sp, #8
 80151d4:	af00      	add	r7, sp, #0
 80151d6:	6078      	str	r0, [r7, #4]
 80151d8:	460b      	mov	r3, r1
 80151da:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 80151dc:	78fb      	ldrb	r3, [r7, #3]
 80151de:	461a      	mov	r2, r3
 80151e0:	2103      	movs	r1, #3
 80151e2:	6878      	ldr	r0, [r7, #4]
 80151e4:	f000 f814 	bl	8015210 <icmp_send_response>
}
 80151e8:	bf00      	nop
 80151ea:	3708      	adds	r7, #8
 80151ec:	46bd      	mov	sp, r7
 80151ee:	bd80      	pop	{r7, pc}

080151f0 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 80151f0:	b580      	push	{r7, lr}
 80151f2:	b082      	sub	sp, #8
 80151f4:	af00      	add	r7, sp, #0
 80151f6:	6078      	str	r0, [r7, #4]
 80151f8:	460b      	mov	r3, r1
 80151fa:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 80151fc:	78fb      	ldrb	r3, [r7, #3]
 80151fe:	461a      	mov	r2, r3
 8015200:	210b      	movs	r1, #11
 8015202:	6878      	ldr	r0, [r7, #4]
 8015204:	f000 f804 	bl	8015210 <icmp_send_response>
}
 8015208:	bf00      	nop
 801520a:	3708      	adds	r7, #8
 801520c:	46bd      	mov	sp, r7
 801520e:	bd80      	pop	{r7, pc}

08015210 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8015210:	b580      	push	{r7, lr}
 8015212:	b08c      	sub	sp, #48	@ 0x30
 8015214:	af04      	add	r7, sp, #16
 8015216:	6078      	str	r0, [r7, #4]
 8015218:	460b      	mov	r3, r1
 801521a:	70fb      	strb	r3, [r7, #3]
 801521c:	4613      	mov	r3, r2
 801521e:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8015220:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8015224:	2124      	movs	r1, #36	@ 0x24
 8015226:	2022      	movs	r0, #34	@ 0x22
 8015228:	f7f7 fcda 	bl	800cbe0 <pbuf_alloc>
 801522c:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801522e:	69fb      	ldr	r3, [r7, #28]
 8015230:	2b00      	cmp	r3, #0
 8015232:	d04c      	beq.n	80152ce <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8015234:	69fb      	ldr	r3, [r7, #28]
 8015236:	895b      	ldrh	r3, [r3, #10]
 8015238:	2b23      	cmp	r3, #35	@ 0x23
 801523a:	d806      	bhi.n	801524a <icmp_send_response+0x3a>
 801523c:	4b26      	ldr	r3, [pc, #152]	@ (80152d8 <icmp_send_response+0xc8>)
 801523e:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 8015242:	4926      	ldr	r1, [pc, #152]	@ (80152dc <icmp_send_response+0xcc>)
 8015244:	4826      	ldr	r0, [pc, #152]	@ (80152e0 <icmp_send_response+0xd0>)
 8015246:	f001 fcef 	bl	8016c28 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801524a:	687b      	ldr	r3, [r7, #4]
 801524c:	685b      	ldr	r3, [r3, #4]
 801524e:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8015250:	69fb      	ldr	r3, [r7, #28]
 8015252:	685b      	ldr	r3, [r3, #4]
 8015254:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8015256:	697b      	ldr	r3, [r7, #20]
 8015258:	78fa      	ldrb	r2, [r7, #3]
 801525a:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801525c:	697b      	ldr	r3, [r7, #20]
 801525e:	78ba      	ldrb	r2, [r7, #2]
 8015260:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8015262:	697b      	ldr	r3, [r7, #20]
 8015264:	2200      	movs	r2, #0
 8015266:	711a      	strb	r2, [r3, #4]
 8015268:	2200      	movs	r2, #0
 801526a:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 801526c:	697b      	ldr	r3, [r7, #20]
 801526e:	2200      	movs	r2, #0
 8015270:	719a      	strb	r2, [r3, #6]
 8015272:	2200      	movs	r2, #0
 8015274:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8015276:	69fb      	ldr	r3, [r7, #28]
 8015278:	685b      	ldr	r3, [r3, #4]
 801527a:	f103 0008 	add.w	r0, r3, #8
 801527e:	687b      	ldr	r3, [r7, #4]
 8015280:	685b      	ldr	r3, [r3, #4]
 8015282:	221c      	movs	r2, #28
 8015284:	4619      	mov	r1, r3
 8015286:	f001 fe00 	bl	8016e8a <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801528a:	69bb      	ldr	r3, [r7, #24]
 801528c:	68db      	ldr	r3, [r3, #12]
 801528e:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8015290:	f107 030c 	add.w	r3, r7, #12
 8015294:	4618      	mov	r0, r3
 8015296:	f000 f825 	bl	80152e4 <ip4_route>
 801529a:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 801529c:	693b      	ldr	r3, [r7, #16]
 801529e:	2b00      	cmp	r3, #0
 80152a0:	d011      	beq.n	80152c6 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80152a2:	697b      	ldr	r3, [r7, #20]
 80152a4:	2200      	movs	r2, #0
 80152a6:	709a      	strb	r2, [r3, #2]
 80152a8:	2200      	movs	r2, #0
 80152aa:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80152ac:	f107 020c 	add.w	r2, r7, #12
 80152b0:	693b      	ldr	r3, [r7, #16]
 80152b2:	9302      	str	r3, [sp, #8]
 80152b4:	2301      	movs	r3, #1
 80152b6:	9301      	str	r3, [sp, #4]
 80152b8:	2300      	movs	r3, #0
 80152ba:	9300      	str	r3, [sp, #0]
 80152bc:	23ff      	movs	r3, #255	@ 0xff
 80152be:	2100      	movs	r1, #0
 80152c0:	69f8      	ldr	r0, [r7, #28]
 80152c2:	f000 f9cd 	bl	8015660 <ip4_output_if>
  }
  pbuf_free(q);
 80152c6:	69f8      	ldr	r0, [r7, #28]
 80152c8:	f7f7 ff6e 	bl	800d1a8 <pbuf_free>
 80152cc:	e000      	b.n	80152d0 <icmp_send_response+0xc0>
    return;
 80152ce:	bf00      	nop
}
 80152d0:	3720      	adds	r7, #32
 80152d2:	46bd      	mov	sp, r7
 80152d4:	bd80      	pop	{r7, pc}
 80152d6:	bf00      	nop
 80152d8:	0801adec 	.word	0x0801adec
 80152dc:	0801aeb8 	.word	0x0801aeb8
 80152e0:	0801ae5c 	.word	0x0801ae5c

080152e4 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 80152e4:	b480      	push	{r7}
 80152e6:	b085      	sub	sp, #20
 80152e8:	af00      	add	r7, sp, #0
 80152ea:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 80152ec:	4b33      	ldr	r3, [pc, #204]	@ (80153bc <ip4_route+0xd8>)
 80152ee:	681b      	ldr	r3, [r3, #0]
 80152f0:	60fb      	str	r3, [r7, #12]
 80152f2:	e036      	b.n	8015362 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80152f4:	68fb      	ldr	r3, [r7, #12]
 80152f6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80152fa:	f003 0301 	and.w	r3, r3, #1
 80152fe:	b2db      	uxtb	r3, r3
 8015300:	2b00      	cmp	r3, #0
 8015302:	d02b      	beq.n	801535c <ip4_route+0x78>
 8015304:	68fb      	ldr	r3, [r7, #12]
 8015306:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801530a:	089b      	lsrs	r3, r3, #2
 801530c:	f003 0301 	and.w	r3, r3, #1
 8015310:	b2db      	uxtb	r3, r3
 8015312:	2b00      	cmp	r3, #0
 8015314:	d022      	beq.n	801535c <ip4_route+0x78>
 8015316:	68fb      	ldr	r3, [r7, #12]
 8015318:	3304      	adds	r3, #4
 801531a:	681b      	ldr	r3, [r3, #0]
 801531c:	2b00      	cmp	r3, #0
 801531e:	d01d      	beq.n	801535c <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8015320:	687b      	ldr	r3, [r7, #4]
 8015322:	681a      	ldr	r2, [r3, #0]
 8015324:	68fb      	ldr	r3, [r7, #12]
 8015326:	3304      	adds	r3, #4
 8015328:	681b      	ldr	r3, [r3, #0]
 801532a:	405a      	eors	r2, r3
 801532c:	68fb      	ldr	r3, [r7, #12]
 801532e:	3308      	adds	r3, #8
 8015330:	681b      	ldr	r3, [r3, #0]
 8015332:	4013      	ands	r3, r2
 8015334:	2b00      	cmp	r3, #0
 8015336:	d101      	bne.n	801533c <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8015338:	68fb      	ldr	r3, [r7, #12]
 801533a:	e038      	b.n	80153ae <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801533c:	68fb      	ldr	r3, [r7, #12]
 801533e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8015342:	f003 0302 	and.w	r3, r3, #2
 8015346:	2b00      	cmp	r3, #0
 8015348:	d108      	bne.n	801535c <ip4_route+0x78>
 801534a:	687b      	ldr	r3, [r7, #4]
 801534c:	681a      	ldr	r2, [r3, #0]
 801534e:	68fb      	ldr	r3, [r7, #12]
 8015350:	330c      	adds	r3, #12
 8015352:	681b      	ldr	r3, [r3, #0]
 8015354:	429a      	cmp	r2, r3
 8015356:	d101      	bne.n	801535c <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8015358:	68fb      	ldr	r3, [r7, #12]
 801535a:	e028      	b.n	80153ae <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 801535c:	68fb      	ldr	r3, [r7, #12]
 801535e:	681b      	ldr	r3, [r3, #0]
 8015360:	60fb      	str	r3, [r7, #12]
 8015362:	68fb      	ldr	r3, [r7, #12]
 8015364:	2b00      	cmp	r3, #0
 8015366:	d1c5      	bne.n	80152f4 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8015368:	4b15      	ldr	r3, [pc, #84]	@ (80153c0 <ip4_route+0xdc>)
 801536a:	681b      	ldr	r3, [r3, #0]
 801536c:	2b00      	cmp	r3, #0
 801536e:	d01a      	beq.n	80153a6 <ip4_route+0xc2>
 8015370:	4b13      	ldr	r3, [pc, #76]	@ (80153c0 <ip4_route+0xdc>)
 8015372:	681b      	ldr	r3, [r3, #0]
 8015374:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8015378:	f003 0301 	and.w	r3, r3, #1
 801537c:	2b00      	cmp	r3, #0
 801537e:	d012      	beq.n	80153a6 <ip4_route+0xc2>
 8015380:	4b0f      	ldr	r3, [pc, #60]	@ (80153c0 <ip4_route+0xdc>)
 8015382:	681b      	ldr	r3, [r3, #0]
 8015384:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8015388:	f003 0304 	and.w	r3, r3, #4
 801538c:	2b00      	cmp	r3, #0
 801538e:	d00a      	beq.n	80153a6 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8015390:	4b0b      	ldr	r3, [pc, #44]	@ (80153c0 <ip4_route+0xdc>)
 8015392:	681b      	ldr	r3, [r3, #0]
 8015394:	3304      	adds	r3, #4
 8015396:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8015398:	2b00      	cmp	r3, #0
 801539a:	d004      	beq.n	80153a6 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801539c:	687b      	ldr	r3, [r7, #4]
 801539e:	681b      	ldr	r3, [r3, #0]
 80153a0:	b2db      	uxtb	r3, r3
 80153a2:	2b7f      	cmp	r3, #127	@ 0x7f
 80153a4:	d101      	bne.n	80153aa <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 80153a6:	2300      	movs	r3, #0
 80153a8:	e001      	b.n	80153ae <ip4_route+0xca>
  }

  return netif_default;
 80153aa:	4b05      	ldr	r3, [pc, #20]	@ (80153c0 <ip4_route+0xdc>)
 80153ac:	681b      	ldr	r3, [r3, #0]
}
 80153ae:	4618      	mov	r0, r3
 80153b0:	3714      	adds	r7, #20
 80153b2:	46bd      	mov	sp, r7
 80153b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153b8:	4770      	bx	lr
 80153ba:	bf00      	nop
 80153bc:	2000f3dc 	.word	0x2000f3dc
 80153c0:	2000f3e0 	.word	0x2000f3e0

080153c4 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 80153c4:	b580      	push	{r7, lr}
 80153c6:	b082      	sub	sp, #8
 80153c8:	af00      	add	r7, sp, #0
 80153ca:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80153cc:	687b      	ldr	r3, [r7, #4]
 80153ce:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80153d2:	f003 0301 	and.w	r3, r3, #1
 80153d6:	b2db      	uxtb	r3, r3
 80153d8:	2b00      	cmp	r3, #0
 80153da:	d016      	beq.n	801540a <ip4_input_accept+0x46>
 80153dc:	687b      	ldr	r3, [r7, #4]
 80153de:	3304      	adds	r3, #4
 80153e0:	681b      	ldr	r3, [r3, #0]
 80153e2:	2b00      	cmp	r3, #0
 80153e4:	d011      	beq.n	801540a <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80153e6:	4b0b      	ldr	r3, [pc, #44]	@ (8015414 <ip4_input_accept+0x50>)
 80153e8:	695a      	ldr	r2, [r3, #20]
 80153ea:	687b      	ldr	r3, [r7, #4]
 80153ec:	3304      	adds	r3, #4
 80153ee:	681b      	ldr	r3, [r3, #0]
 80153f0:	429a      	cmp	r2, r3
 80153f2:	d008      	beq.n	8015406 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 80153f4:	4b07      	ldr	r3, [pc, #28]	@ (8015414 <ip4_input_accept+0x50>)
 80153f6:	695b      	ldr	r3, [r3, #20]
 80153f8:	6879      	ldr	r1, [r7, #4]
 80153fa:	4618      	mov	r0, r3
 80153fc:	f000 fa08 	bl	8015810 <ip4_addr_isbroadcast_u32>
 8015400:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8015402:	2b00      	cmp	r3, #0
 8015404:	d001      	beq.n	801540a <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8015406:	2301      	movs	r3, #1
 8015408:	e000      	b.n	801540c <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801540a:	2300      	movs	r3, #0
}
 801540c:	4618      	mov	r0, r3
 801540e:	3708      	adds	r7, #8
 8015410:	46bd      	mov	sp, r7
 8015412:	bd80      	pop	{r7, pc}
 8015414:	20009a9c 	.word	0x20009a9c

08015418 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8015418:	b580      	push	{r7, lr}
 801541a:	b086      	sub	sp, #24
 801541c:	af00      	add	r7, sp, #0
 801541e:	6078      	str	r0, [r7, #4]
 8015420:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8015422:	687b      	ldr	r3, [r7, #4]
 8015424:	685b      	ldr	r3, [r3, #4]
 8015426:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8015428:	697b      	ldr	r3, [r7, #20]
 801542a:	781b      	ldrb	r3, [r3, #0]
 801542c:	091b      	lsrs	r3, r3, #4
 801542e:	b2db      	uxtb	r3, r3
 8015430:	2b04      	cmp	r3, #4
 8015432:	d004      	beq.n	801543e <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8015434:	6878      	ldr	r0, [r7, #4]
 8015436:	f7f7 feb7 	bl	800d1a8 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801543a:	2300      	movs	r3, #0
 801543c:	e107      	b.n	801564e <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801543e:	697b      	ldr	r3, [r7, #20]
 8015440:	781b      	ldrb	r3, [r3, #0]
 8015442:	f003 030f 	and.w	r3, r3, #15
 8015446:	b2db      	uxtb	r3, r3
 8015448:	009b      	lsls	r3, r3, #2
 801544a:	b2db      	uxtb	r3, r3
 801544c:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801544e:	697b      	ldr	r3, [r7, #20]
 8015450:	885b      	ldrh	r3, [r3, #2]
 8015452:	b29b      	uxth	r3, r3
 8015454:	4618      	mov	r0, r3
 8015456:	f7f6 fab5 	bl	800b9c4 <lwip_htons>
 801545a:	4603      	mov	r3, r0
 801545c:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801545e:	687b      	ldr	r3, [r7, #4]
 8015460:	891b      	ldrh	r3, [r3, #8]
 8015462:	89ba      	ldrh	r2, [r7, #12]
 8015464:	429a      	cmp	r2, r3
 8015466:	d204      	bcs.n	8015472 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8015468:	89bb      	ldrh	r3, [r7, #12]
 801546a:	4619      	mov	r1, r3
 801546c:	6878      	ldr	r0, [r7, #4]
 801546e:	f7f7 fd15 	bl	800ce9c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8015472:	687b      	ldr	r3, [r7, #4]
 8015474:	895b      	ldrh	r3, [r3, #10]
 8015476:	89fa      	ldrh	r2, [r7, #14]
 8015478:	429a      	cmp	r2, r3
 801547a:	d807      	bhi.n	801548c <ip4_input+0x74>
 801547c:	687b      	ldr	r3, [r7, #4]
 801547e:	891b      	ldrh	r3, [r3, #8]
 8015480:	89ba      	ldrh	r2, [r7, #12]
 8015482:	429a      	cmp	r2, r3
 8015484:	d802      	bhi.n	801548c <ip4_input+0x74>
 8015486:	89fb      	ldrh	r3, [r7, #14]
 8015488:	2b13      	cmp	r3, #19
 801548a:	d804      	bhi.n	8015496 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 801548c:	6878      	ldr	r0, [r7, #4]
 801548e:	f7f7 fe8b 	bl	800d1a8 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8015492:	2300      	movs	r3, #0
 8015494:	e0db      	b.n	801564e <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8015496:	697b      	ldr	r3, [r7, #20]
 8015498:	691b      	ldr	r3, [r3, #16]
 801549a:	4a6f      	ldr	r2, [pc, #444]	@ (8015658 <ip4_input+0x240>)
 801549c:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801549e:	697b      	ldr	r3, [r7, #20]
 80154a0:	68db      	ldr	r3, [r3, #12]
 80154a2:	4a6d      	ldr	r2, [pc, #436]	@ (8015658 <ip4_input+0x240>)
 80154a4:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80154a6:	4b6c      	ldr	r3, [pc, #432]	@ (8015658 <ip4_input+0x240>)
 80154a8:	695b      	ldr	r3, [r3, #20]
 80154aa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80154ae:	2be0      	cmp	r3, #224	@ 0xe0
 80154b0:	d112      	bne.n	80154d8 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80154b2:	683b      	ldr	r3, [r7, #0]
 80154b4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80154b8:	f003 0301 	and.w	r3, r3, #1
 80154bc:	b2db      	uxtb	r3, r3
 80154be:	2b00      	cmp	r3, #0
 80154c0:	d007      	beq.n	80154d2 <ip4_input+0xba>
 80154c2:	683b      	ldr	r3, [r7, #0]
 80154c4:	3304      	adds	r3, #4
 80154c6:	681b      	ldr	r3, [r3, #0]
 80154c8:	2b00      	cmp	r3, #0
 80154ca:	d002      	beq.n	80154d2 <ip4_input+0xba>
      netif = inp;
 80154cc:	683b      	ldr	r3, [r7, #0]
 80154ce:	613b      	str	r3, [r7, #16]
 80154d0:	e02a      	b.n	8015528 <ip4_input+0x110>
    } else {
      netif = NULL;
 80154d2:	2300      	movs	r3, #0
 80154d4:	613b      	str	r3, [r7, #16]
 80154d6:	e027      	b.n	8015528 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 80154d8:	6838      	ldr	r0, [r7, #0]
 80154da:	f7ff ff73 	bl	80153c4 <ip4_input_accept>
 80154de:	4603      	mov	r3, r0
 80154e0:	2b00      	cmp	r3, #0
 80154e2:	d002      	beq.n	80154ea <ip4_input+0xd2>
      netif = inp;
 80154e4:	683b      	ldr	r3, [r7, #0]
 80154e6:	613b      	str	r3, [r7, #16]
 80154e8:	e01e      	b.n	8015528 <ip4_input+0x110>
    } else {
      netif = NULL;
 80154ea:	2300      	movs	r3, #0
 80154ec:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 80154ee:	4b5a      	ldr	r3, [pc, #360]	@ (8015658 <ip4_input+0x240>)
 80154f0:	695b      	ldr	r3, [r3, #20]
 80154f2:	b2db      	uxtb	r3, r3
 80154f4:	2b7f      	cmp	r3, #127	@ 0x7f
 80154f6:	d017      	beq.n	8015528 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 80154f8:	4b58      	ldr	r3, [pc, #352]	@ (801565c <ip4_input+0x244>)
 80154fa:	681b      	ldr	r3, [r3, #0]
 80154fc:	613b      	str	r3, [r7, #16]
 80154fe:	e00e      	b.n	801551e <ip4_input+0x106>
          if (netif == inp) {
 8015500:	693a      	ldr	r2, [r7, #16]
 8015502:	683b      	ldr	r3, [r7, #0]
 8015504:	429a      	cmp	r2, r3
 8015506:	d006      	beq.n	8015516 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8015508:	6938      	ldr	r0, [r7, #16]
 801550a:	f7ff ff5b 	bl	80153c4 <ip4_input_accept>
 801550e:	4603      	mov	r3, r0
 8015510:	2b00      	cmp	r3, #0
 8015512:	d108      	bne.n	8015526 <ip4_input+0x10e>
 8015514:	e000      	b.n	8015518 <ip4_input+0x100>
            continue;
 8015516:	bf00      	nop
        NETIF_FOREACH(netif) {
 8015518:	693b      	ldr	r3, [r7, #16]
 801551a:	681b      	ldr	r3, [r3, #0]
 801551c:	613b      	str	r3, [r7, #16]
 801551e:	693b      	ldr	r3, [r7, #16]
 8015520:	2b00      	cmp	r3, #0
 8015522:	d1ed      	bne.n	8015500 <ip4_input+0xe8>
 8015524:	e000      	b.n	8015528 <ip4_input+0x110>
            break;
 8015526:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8015528:	4b4b      	ldr	r3, [pc, #300]	@ (8015658 <ip4_input+0x240>)
 801552a:	691b      	ldr	r3, [r3, #16]
 801552c:	6839      	ldr	r1, [r7, #0]
 801552e:	4618      	mov	r0, r3
 8015530:	f000 f96e 	bl	8015810 <ip4_addr_isbroadcast_u32>
 8015534:	4603      	mov	r3, r0
 8015536:	2b00      	cmp	r3, #0
 8015538:	d105      	bne.n	8015546 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801553a:	4b47      	ldr	r3, [pc, #284]	@ (8015658 <ip4_input+0x240>)
 801553c:	691b      	ldr	r3, [r3, #16]
 801553e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8015542:	2be0      	cmp	r3, #224	@ 0xe0
 8015544:	d104      	bne.n	8015550 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8015546:	6878      	ldr	r0, [r7, #4]
 8015548:	f7f7 fe2e 	bl	800d1a8 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 801554c:	2300      	movs	r3, #0
 801554e:	e07e      	b.n	801564e <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8015550:	693b      	ldr	r3, [r7, #16]
 8015552:	2b00      	cmp	r3, #0
 8015554:	d104      	bne.n	8015560 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8015556:	6878      	ldr	r0, [r7, #4]
 8015558:	f7f7 fe26 	bl	800d1a8 <pbuf_free>
    return ERR_OK;
 801555c:	2300      	movs	r3, #0
 801555e:	e076      	b.n	801564e <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8015560:	697b      	ldr	r3, [r7, #20]
 8015562:	88db      	ldrh	r3, [r3, #6]
 8015564:	b29b      	uxth	r3, r3
 8015566:	461a      	mov	r2, r3
 8015568:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 801556c:	4013      	ands	r3, r2
 801556e:	2b00      	cmp	r3, #0
 8015570:	d00b      	beq.n	801558a <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8015572:	6878      	ldr	r0, [r7, #4]
 8015574:	f000 fc92 	bl	8015e9c <ip4_reass>
 8015578:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801557a:	687b      	ldr	r3, [r7, #4]
 801557c:	2b00      	cmp	r3, #0
 801557e:	d101      	bne.n	8015584 <ip4_input+0x16c>
      return ERR_OK;
 8015580:	2300      	movs	r3, #0
 8015582:	e064      	b.n	801564e <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8015584:	687b      	ldr	r3, [r7, #4]
 8015586:	685b      	ldr	r3, [r3, #4]
 8015588:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801558a:	4a33      	ldr	r2, [pc, #204]	@ (8015658 <ip4_input+0x240>)
 801558c:	693b      	ldr	r3, [r7, #16]
 801558e:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8015590:	4a31      	ldr	r2, [pc, #196]	@ (8015658 <ip4_input+0x240>)
 8015592:	683b      	ldr	r3, [r7, #0]
 8015594:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8015596:	4a30      	ldr	r2, [pc, #192]	@ (8015658 <ip4_input+0x240>)
 8015598:	697b      	ldr	r3, [r7, #20]
 801559a:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 801559c:	697b      	ldr	r3, [r7, #20]
 801559e:	781b      	ldrb	r3, [r3, #0]
 80155a0:	f003 030f 	and.w	r3, r3, #15
 80155a4:	b2db      	uxtb	r3, r3
 80155a6:	009b      	lsls	r3, r3, #2
 80155a8:	b2db      	uxtb	r3, r3
 80155aa:	461a      	mov	r2, r3
 80155ac:	4b2a      	ldr	r3, [pc, #168]	@ (8015658 <ip4_input+0x240>)
 80155ae:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 80155b0:	89fb      	ldrh	r3, [r7, #14]
 80155b2:	4619      	mov	r1, r3
 80155b4:	6878      	ldr	r0, [r7, #4]
 80155b6:	f7f7 fd71 	bl	800d09c <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 80155ba:	697b      	ldr	r3, [r7, #20]
 80155bc:	7a5b      	ldrb	r3, [r3, #9]
 80155be:	2b11      	cmp	r3, #17
 80155c0:	d006      	beq.n	80155d0 <ip4_input+0x1b8>
 80155c2:	2b11      	cmp	r3, #17
 80155c4:	dc13      	bgt.n	80155ee <ip4_input+0x1d6>
 80155c6:	2b01      	cmp	r3, #1
 80155c8:	d00c      	beq.n	80155e4 <ip4_input+0x1cc>
 80155ca:	2b06      	cmp	r3, #6
 80155cc:	d005      	beq.n	80155da <ip4_input+0x1c2>
 80155ce:	e00e      	b.n	80155ee <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 80155d0:	6839      	ldr	r1, [r7, #0]
 80155d2:	6878      	ldr	r0, [r7, #4]
 80155d4:	f7fe fb5a 	bl	8013c8c <udp_input>
        break;
 80155d8:	e026      	b.n	8015628 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 80155da:	6839      	ldr	r1, [r7, #0]
 80155dc:	6878      	ldr	r0, [r7, #4]
 80155de:	f7f9 ff19 	bl	800f414 <tcp_input>
        break;
 80155e2:	e021      	b.n	8015628 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 80155e4:	6839      	ldr	r1, [r7, #0]
 80155e6:	6878      	ldr	r0, [r7, #4]
 80155e8:	f7ff fcee 	bl	8014fc8 <icmp_input>
        break;
 80155ec:	e01c      	b.n	8015628 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80155ee:	4b1a      	ldr	r3, [pc, #104]	@ (8015658 <ip4_input+0x240>)
 80155f0:	695b      	ldr	r3, [r3, #20]
 80155f2:	6939      	ldr	r1, [r7, #16]
 80155f4:	4618      	mov	r0, r3
 80155f6:	f000 f90b 	bl	8015810 <ip4_addr_isbroadcast_u32>
 80155fa:	4603      	mov	r3, r0
 80155fc:	2b00      	cmp	r3, #0
 80155fe:	d10f      	bne.n	8015620 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8015600:	4b15      	ldr	r3, [pc, #84]	@ (8015658 <ip4_input+0x240>)
 8015602:	695b      	ldr	r3, [r3, #20]
 8015604:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8015608:	2be0      	cmp	r3, #224	@ 0xe0
 801560a:	d009      	beq.n	8015620 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 801560c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8015610:	4619      	mov	r1, r3
 8015612:	6878      	ldr	r0, [r7, #4]
 8015614:	f7f7 fdb5 	bl	800d182 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8015618:	2102      	movs	r1, #2
 801561a:	6878      	ldr	r0, [r7, #4]
 801561c:	f7ff fdd8 	bl	80151d0 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8015620:	6878      	ldr	r0, [r7, #4]
 8015622:	f7f7 fdc1 	bl	800d1a8 <pbuf_free>
        break;
 8015626:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8015628:	4b0b      	ldr	r3, [pc, #44]	@ (8015658 <ip4_input+0x240>)
 801562a:	2200      	movs	r2, #0
 801562c:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801562e:	4b0a      	ldr	r3, [pc, #40]	@ (8015658 <ip4_input+0x240>)
 8015630:	2200      	movs	r2, #0
 8015632:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8015634:	4b08      	ldr	r3, [pc, #32]	@ (8015658 <ip4_input+0x240>)
 8015636:	2200      	movs	r2, #0
 8015638:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801563a:	4b07      	ldr	r3, [pc, #28]	@ (8015658 <ip4_input+0x240>)
 801563c:	2200      	movs	r2, #0
 801563e:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8015640:	4b05      	ldr	r3, [pc, #20]	@ (8015658 <ip4_input+0x240>)
 8015642:	2200      	movs	r2, #0
 8015644:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8015646:	4b04      	ldr	r3, [pc, #16]	@ (8015658 <ip4_input+0x240>)
 8015648:	2200      	movs	r2, #0
 801564a:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 801564c:	2300      	movs	r3, #0
}
 801564e:	4618      	mov	r0, r3
 8015650:	3718      	adds	r7, #24
 8015652:	46bd      	mov	sp, r7
 8015654:	bd80      	pop	{r7, pc}
 8015656:	bf00      	nop
 8015658:	20009a9c 	.word	0x20009a9c
 801565c:	2000f3dc 	.word	0x2000f3dc

08015660 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8015660:	b580      	push	{r7, lr}
 8015662:	b08a      	sub	sp, #40	@ 0x28
 8015664:	af04      	add	r7, sp, #16
 8015666:	60f8      	str	r0, [r7, #12]
 8015668:	60b9      	str	r1, [r7, #8]
 801566a:	607a      	str	r2, [r7, #4]
 801566c:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801566e:	68bb      	ldr	r3, [r7, #8]
 8015670:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8015672:	687b      	ldr	r3, [r7, #4]
 8015674:	2b00      	cmp	r3, #0
 8015676:	d009      	beq.n	801568c <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8015678:	68bb      	ldr	r3, [r7, #8]
 801567a:	2b00      	cmp	r3, #0
 801567c:	d003      	beq.n	8015686 <ip4_output_if+0x26>
 801567e:	68bb      	ldr	r3, [r7, #8]
 8015680:	681b      	ldr	r3, [r3, #0]
 8015682:	2b00      	cmp	r3, #0
 8015684:	d102      	bne.n	801568c <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8015686:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015688:	3304      	adds	r3, #4
 801568a:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 801568c:	78fa      	ldrb	r2, [r7, #3]
 801568e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015690:	9302      	str	r3, [sp, #8]
 8015692:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8015696:	9301      	str	r3, [sp, #4]
 8015698:	f897 3020 	ldrb.w	r3, [r7, #32]
 801569c:	9300      	str	r3, [sp, #0]
 801569e:	4613      	mov	r3, r2
 80156a0:	687a      	ldr	r2, [r7, #4]
 80156a2:	6979      	ldr	r1, [r7, #20]
 80156a4:	68f8      	ldr	r0, [r7, #12]
 80156a6:	f000 f805 	bl	80156b4 <ip4_output_if_src>
 80156aa:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 80156ac:	4618      	mov	r0, r3
 80156ae:	3718      	adds	r7, #24
 80156b0:	46bd      	mov	sp, r7
 80156b2:	bd80      	pop	{r7, pc}

080156b4 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 80156b4:	b580      	push	{r7, lr}
 80156b6:	b088      	sub	sp, #32
 80156b8:	af00      	add	r7, sp, #0
 80156ba:	60f8      	str	r0, [r7, #12]
 80156bc:	60b9      	str	r1, [r7, #8]
 80156be:	607a      	str	r2, [r7, #4]
 80156c0:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80156c2:	68fb      	ldr	r3, [r7, #12]
 80156c4:	7b9b      	ldrb	r3, [r3, #14]
 80156c6:	2b01      	cmp	r3, #1
 80156c8:	d006      	beq.n	80156d8 <ip4_output_if_src+0x24>
 80156ca:	4b4b      	ldr	r3, [pc, #300]	@ (80157f8 <ip4_output_if_src+0x144>)
 80156cc:	f44f 7255 	mov.w	r2, #852	@ 0x354
 80156d0:	494a      	ldr	r1, [pc, #296]	@ (80157fc <ip4_output_if_src+0x148>)
 80156d2:	484b      	ldr	r0, [pc, #300]	@ (8015800 <ip4_output_if_src+0x14c>)
 80156d4:	f001 faa8 	bl	8016c28 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 80156d8:	687b      	ldr	r3, [r7, #4]
 80156da:	2b00      	cmp	r3, #0
 80156dc:	d060      	beq.n	80157a0 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 80156de:	2314      	movs	r3, #20
 80156e0:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 80156e2:	2114      	movs	r1, #20
 80156e4:	68f8      	ldr	r0, [r7, #12]
 80156e6:	f7f7 fcc9 	bl	800d07c <pbuf_add_header>
 80156ea:	4603      	mov	r3, r0
 80156ec:	2b00      	cmp	r3, #0
 80156ee:	d002      	beq.n	80156f6 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80156f0:	f06f 0301 	mvn.w	r3, #1
 80156f4:	e07c      	b.n	80157f0 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 80156f6:	68fb      	ldr	r3, [r7, #12]
 80156f8:	685b      	ldr	r3, [r3, #4]
 80156fa:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 80156fc:	68fb      	ldr	r3, [r7, #12]
 80156fe:	895b      	ldrh	r3, [r3, #10]
 8015700:	2b13      	cmp	r3, #19
 8015702:	d806      	bhi.n	8015712 <ip4_output_if_src+0x5e>
 8015704:	4b3c      	ldr	r3, [pc, #240]	@ (80157f8 <ip4_output_if_src+0x144>)
 8015706:	f44f 7262 	mov.w	r2, #904	@ 0x388
 801570a:	493e      	ldr	r1, [pc, #248]	@ (8015804 <ip4_output_if_src+0x150>)
 801570c:	483c      	ldr	r0, [pc, #240]	@ (8015800 <ip4_output_if_src+0x14c>)
 801570e:	f001 fa8b 	bl	8016c28 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8015712:	69fb      	ldr	r3, [r7, #28]
 8015714:	78fa      	ldrb	r2, [r7, #3]
 8015716:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8015718:	69fb      	ldr	r3, [r7, #28]
 801571a:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 801571e:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8015720:	687b      	ldr	r3, [r7, #4]
 8015722:	681a      	ldr	r2, [r3, #0]
 8015724:	69fb      	ldr	r3, [r7, #28]
 8015726:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8015728:	8b7b      	ldrh	r3, [r7, #26]
 801572a:	089b      	lsrs	r3, r3, #2
 801572c:	b29b      	uxth	r3, r3
 801572e:	b2db      	uxtb	r3, r3
 8015730:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015734:	b2da      	uxtb	r2, r3
 8015736:	69fb      	ldr	r3, [r7, #28]
 8015738:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801573a:	69fb      	ldr	r3, [r7, #28]
 801573c:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8015740:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8015742:	68fb      	ldr	r3, [r7, #12]
 8015744:	891b      	ldrh	r3, [r3, #8]
 8015746:	4618      	mov	r0, r3
 8015748:	f7f6 f93c 	bl	800b9c4 <lwip_htons>
 801574c:	4603      	mov	r3, r0
 801574e:	461a      	mov	r2, r3
 8015750:	69fb      	ldr	r3, [r7, #28]
 8015752:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8015754:	69fb      	ldr	r3, [r7, #28]
 8015756:	2200      	movs	r2, #0
 8015758:	719a      	strb	r2, [r3, #6]
 801575a:	2200      	movs	r2, #0
 801575c:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801575e:	4b2a      	ldr	r3, [pc, #168]	@ (8015808 <ip4_output_if_src+0x154>)
 8015760:	881b      	ldrh	r3, [r3, #0]
 8015762:	4618      	mov	r0, r3
 8015764:	f7f6 f92e 	bl	800b9c4 <lwip_htons>
 8015768:	4603      	mov	r3, r0
 801576a:	461a      	mov	r2, r3
 801576c:	69fb      	ldr	r3, [r7, #28]
 801576e:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8015770:	4b25      	ldr	r3, [pc, #148]	@ (8015808 <ip4_output_if_src+0x154>)
 8015772:	881b      	ldrh	r3, [r3, #0]
 8015774:	3301      	adds	r3, #1
 8015776:	b29a      	uxth	r2, r3
 8015778:	4b23      	ldr	r3, [pc, #140]	@ (8015808 <ip4_output_if_src+0x154>)
 801577a:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 801577c:	68bb      	ldr	r3, [r7, #8]
 801577e:	2b00      	cmp	r3, #0
 8015780:	d104      	bne.n	801578c <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8015782:	4b22      	ldr	r3, [pc, #136]	@ (801580c <ip4_output_if_src+0x158>)
 8015784:	681a      	ldr	r2, [r3, #0]
 8015786:	69fb      	ldr	r3, [r7, #28]
 8015788:	60da      	str	r2, [r3, #12]
 801578a:	e003      	b.n	8015794 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801578c:	68bb      	ldr	r3, [r7, #8]
 801578e:	681a      	ldr	r2, [r3, #0]
 8015790:	69fb      	ldr	r3, [r7, #28]
 8015792:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8015794:	69fb      	ldr	r3, [r7, #28]
 8015796:	2200      	movs	r2, #0
 8015798:	729a      	strb	r2, [r3, #10]
 801579a:	2200      	movs	r2, #0
 801579c:	72da      	strb	r2, [r3, #11]
 801579e:	e00f      	b.n	80157c0 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 80157a0:	68fb      	ldr	r3, [r7, #12]
 80157a2:	895b      	ldrh	r3, [r3, #10]
 80157a4:	2b13      	cmp	r3, #19
 80157a6:	d802      	bhi.n	80157ae <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80157a8:	f06f 0301 	mvn.w	r3, #1
 80157ac:	e020      	b.n	80157f0 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 80157ae:	68fb      	ldr	r3, [r7, #12]
 80157b0:	685b      	ldr	r3, [r3, #4]
 80157b2:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 80157b4:	69fb      	ldr	r3, [r7, #28]
 80157b6:	691b      	ldr	r3, [r3, #16]
 80157b8:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 80157ba:	f107 0314 	add.w	r3, r7, #20
 80157be:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 80157c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80157c2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80157c4:	2b00      	cmp	r3, #0
 80157c6:	d00c      	beq.n	80157e2 <ip4_output_if_src+0x12e>
 80157c8:	68fb      	ldr	r3, [r7, #12]
 80157ca:	891a      	ldrh	r2, [r3, #8]
 80157cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80157ce:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80157d0:	429a      	cmp	r2, r3
 80157d2:	d906      	bls.n	80157e2 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 80157d4:	687a      	ldr	r2, [r7, #4]
 80157d6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80157d8:	68f8      	ldr	r0, [r7, #12]
 80157da:	f000 fd53 	bl	8016284 <ip4_frag>
 80157de:	4603      	mov	r3, r0
 80157e0:	e006      	b.n	80157f0 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 80157e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80157e4:	695b      	ldr	r3, [r3, #20]
 80157e6:	687a      	ldr	r2, [r7, #4]
 80157e8:	68f9      	ldr	r1, [r7, #12]
 80157ea:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80157ec:	4798      	blx	r3
 80157ee:	4603      	mov	r3, r0
}
 80157f0:	4618      	mov	r0, r3
 80157f2:	3720      	adds	r7, #32
 80157f4:	46bd      	mov	sp, r7
 80157f6:	bd80      	pop	{r7, pc}
 80157f8:	0801aee4 	.word	0x0801aee4
 80157fc:	0801af18 	.word	0x0801af18
 8015800:	0801af24 	.word	0x0801af24
 8015804:	0801af4c 	.word	0x0801af4c
 8015808:	2000f53a 	.word	0x2000f53a
 801580c:	0801b394 	.word	0x0801b394

08015810 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8015810:	b480      	push	{r7}
 8015812:	b085      	sub	sp, #20
 8015814:	af00      	add	r7, sp, #0
 8015816:	6078      	str	r0, [r7, #4]
 8015818:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801581a:	687b      	ldr	r3, [r7, #4]
 801581c:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801581e:	687b      	ldr	r3, [r7, #4]
 8015820:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015824:	d002      	beq.n	801582c <ip4_addr_isbroadcast_u32+0x1c>
 8015826:	687b      	ldr	r3, [r7, #4]
 8015828:	2b00      	cmp	r3, #0
 801582a:	d101      	bne.n	8015830 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 801582c:	2301      	movs	r3, #1
 801582e:	e02a      	b.n	8015886 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8015830:	683b      	ldr	r3, [r7, #0]
 8015832:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8015836:	f003 0302 	and.w	r3, r3, #2
 801583a:	2b00      	cmp	r3, #0
 801583c:	d101      	bne.n	8015842 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801583e:	2300      	movs	r3, #0
 8015840:	e021      	b.n	8015886 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8015842:	683b      	ldr	r3, [r7, #0]
 8015844:	3304      	adds	r3, #4
 8015846:	681b      	ldr	r3, [r3, #0]
 8015848:	687a      	ldr	r2, [r7, #4]
 801584a:	429a      	cmp	r2, r3
 801584c:	d101      	bne.n	8015852 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801584e:	2300      	movs	r3, #0
 8015850:	e019      	b.n	8015886 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8015852:	68fa      	ldr	r2, [r7, #12]
 8015854:	683b      	ldr	r3, [r7, #0]
 8015856:	3304      	adds	r3, #4
 8015858:	681b      	ldr	r3, [r3, #0]
 801585a:	405a      	eors	r2, r3
 801585c:	683b      	ldr	r3, [r7, #0]
 801585e:	3308      	adds	r3, #8
 8015860:	681b      	ldr	r3, [r3, #0]
 8015862:	4013      	ands	r3, r2
 8015864:	2b00      	cmp	r3, #0
 8015866:	d10d      	bne.n	8015884 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8015868:	683b      	ldr	r3, [r7, #0]
 801586a:	3308      	adds	r3, #8
 801586c:	681b      	ldr	r3, [r3, #0]
 801586e:	43da      	mvns	r2, r3
 8015870:	687b      	ldr	r3, [r7, #4]
 8015872:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8015874:	683b      	ldr	r3, [r7, #0]
 8015876:	3308      	adds	r3, #8
 8015878:	681b      	ldr	r3, [r3, #0]
 801587a:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801587c:	429a      	cmp	r2, r3
 801587e:	d101      	bne.n	8015884 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8015880:	2301      	movs	r3, #1
 8015882:	e000      	b.n	8015886 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8015884:	2300      	movs	r3, #0
  }
}
 8015886:	4618      	mov	r0, r3
 8015888:	3714      	adds	r7, #20
 801588a:	46bd      	mov	sp, r7
 801588c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015890:	4770      	bx	lr
	...

08015894 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8015894:	b580      	push	{r7, lr}
 8015896:	b084      	sub	sp, #16
 8015898:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801589a:	2300      	movs	r3, #0
 801589c:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801589e:	4b12      	ldr	r3, [pc, #72]	@ (80158e8 <ip_reass_tmr+0x54>)
 80158a0:	681b      	ldr	r3, [r3, #0]
 80158a2:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 80158a4:	e018      	b.n	80158d8 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 80158a6:	68fb      	ldr	r3, [r7, #12]
 80158a8:	7fdb      	ldrb	r3, [r3, #31]
 80158aa:	2b00      	cmp	r3, #0
 80158ac:	d00b      	beq.n	80158c6 <ip_reass_tmr+0x32>
      r->timer--;
 80158ae:	68fb      	ldr	r3, [r7, #12]
 80158b0:	7fdb      	ldrb	r3, [r3, #31]
 80158b2:	3b01      	subs	r3, #1
 80158b4:	b2da      	uxtb	r2, r3
 80158b6:	68fb      	ldr	r3, [r7, #12]
 80158b8:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 80158ba:	68fb      	ldr	r3, [r7, #12]
 80158bc:	60bb      	str	r3, [r7, #8]
      r = r->next;
 80158be:	68fb      	ldr	r3, [r7, #12]
 80158c0:	681b      	ldr	r3, [r3, #0]
 80158c2:	60fb      	str	r3, [r7, #12]
 80158c4:	e008      	b.n	80158d8 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 80158c6:	68fb      	ldr	r3, [r7, #12]
 80158c8:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 80158ca:	68fb      	ldr	r3, [r7, #12]
 80158cc:	681b      	ldr	r3, [r3, #0]
 80158ce:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 80158d0:	68b9      	ldr	r1, [r7, #8]
 80158d2:	6878      	ldr	r0, [r7, #4]
 80158d4:	f000 f80a 	bl	80158ec <ip_reass_free_complete_datagram>
  while (r != NULL) {
 80158d8:	68fb      	ldr	r3, [r7, #12]
 80158da:	2b00      	cmp	r3, #0
 80158dc:	d1e3      	bne.n	80158a6 <ip_reass_tmr+0x12>
    }
  }
}
 80158de:	bf00      	nop
 80158e0:	bf00      	nop
 80158e2:	3710      	adds	r7, #16
 80158e4:	46bd      	mov	sp, r7
 80158e6:	bd80      	pop	{r7, pc}
 80158e8:	2000f53c 	.word	0x2000f53c

080158ec <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80158ec:	b580      	push	{r7, lr}
 80158ee:	b088      	sub	sp, #32
 80158f0:	af00      	add	r7, sp, #0
 80158f2:	6078      	str	r0, [r7, #4]
 80158f4:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 80158f6:	2300      	movs	r3, #0
 80158f8:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 80158fa:	683a      	ldr	r2, [r7, #0]
 80158fc:	687b      	ldr	r3, [r7, #4]
 80158fe:	429a      	cmp	r2, r3
 8015900:	d105      	bne.n	801590e <ip_reass_free_complete_datagram+0x22>
 8015902:	4b45      	ldr	r3, [pc, #276]	@ (8015a18 <ip_reass_free_complete_datagram+0x12c>)
 8015904:	22ab      	movs	r2, #171	@ 0xab
 8015906:	4945      	ldr	r1, [pc, #276]	@ (8015a1c <ip_reass_free_complete_datagram+0x130>)
 8015908:	4845      	ldr	r0, [pc, #276]	@ (8015a20 <ip_reass_free_complete_datagram+0x134>)
 801590a:	f001 f98d 	bl	8016c28 <iprintf>
  if (prev != NULL) {
 801590e:	683b      	ldr	r3, [r7, #0]
 8015910:	2b00      	cmp	r3, #0
 8015912:	d00a      	beq.n	801592a <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8015914:	683b      	ldr	r3, [r7, #0]
 8015916:	681b      	ldr	r3, [r3, #0]
 8015918:	687a      	ldr	r2, [r7, #4]
 801591a:	429a      	cmp	r2, r3
 801591c:	d005      	beq.n	801592a <ip_reass_free_complete_datagram+0x3e>
 801591e:	4b3e      	ldr	r3, [pc, #248]	@ (8015a18 <ip_reass_free_complete_datagram+0x12c>)
 8015920:	22ad      	movs	r2, #173	@ 0xad
 8015922:	4940      	ldr	r1, [pc, #256]	@ (8015a24 <ip_reass_free_complete_datagram+0x138>)
 8015924:	483e      	ldr	r0, [pc, #248]	@ (8015a20 <ip_reass_free_complete_datagram+0x134>)
 8015926:	f001 f97f 	bl	8016c28 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801592a:	687b      	ldr	r3, [r7, #4]
 801592c:	685b      	ldr	r3, [r3, #4]
 801592e:	685b      	ldr	r3, [r3, #4]
 8015930:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8015932:	697b      	ldr	r3, [r7, #20]
 8015934:	889b      	ldrh	r3, [r3, #4]
 8015936:	b29b      	uxth	r3, r3
 8015938:	2b00      	cmp	r3, #0
 801593a:	d12a      	bne.n	8015992 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801593c:	687b      	ldr	r3, [r7, #4]
 801593e:	685b      	ldr	r3, [r3, #4]
 8015940:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8015942:	697b      	ldr	r3, [r7, #20]
 8015944:	681a      	ldr	r2, [r3, #0]
 8015946:	687b      	ldr	r3, [r7, #4]
 8015948:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801594a:	69bb      	ldr	r3, [r7, #24]
 801594c:	6858      	ldr	r0, [r3, #4]
 801594e:	687b      	ldr	r3, [r7, #4]
 8015950:	3308      	adds	r3, #8
 8015952:	2214      	movs	r2, #20
 8015954:	4619      	mov	r1, r3
 8015956:	f001 fa98 	bl	8016e8a <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801595a:	2101      	movs	r1, #1
 801595c:	69b8      	ldr	r0, [r7, #24]
 801595e:	f7ff fc47 	bl	80151f0 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8015962:	69b8      	ldr	r0, [r7, #24]
 8015964:	f7f7 fcae 	bl	800d2c4 <pbuf_clen>
 8015968:	4603      	mov	r3, r0
 801596a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801596c:	8bfa      	ldrh	r2, [r7, #30]
 801596e:	8a7b      	ldrh	r3, [r7, #18]
 8015970:	4413      	add	r3, r2
 8015972:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8015976:	db05      	blt.n	8015984 <ip_reass_free_complete_datagram+0x98>
 8015978:	4b27      	ldr	r3, [pc, #156]	@ (8015a18 <ip_reass_free_complete_datagram+0x12c>)
 801597a:	22bc      	movs	r2, #188	@ 0xbc
 801597c:	492a      	ldr	r1, [pc, #168]	@ (8015a28 <ip_reass_free_complete_datagram+0x13c>)
 801597e:	4828      	ldr	r0, [pc, #160]	@ (8015a20 <ip_reass_free_complete_datagram+0x134>)
 8015980:	f001 f952 	bl	8016c28 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8015984:	8bfa      	ldrh	r2, [r7, #30]
 8015986:	8a7b      	ldrh	r3, [r7, #18]
 8015988:	4413      	add	r3, r2
 801598a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801598c:	69b8      	ldr	r0, [r7, #24]
 801598e:	f7f7 fc0b 	bl	800d1a8 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8015992:	687b      	ldr	r3, [r7, #4]
 8015994:	685b      	ldr	r3, [r3, #4]
 8015996:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8015998:	e01f      	b.n	80159da <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801599a:	69bb      	ldr	r3, [r7, #24]
 801599c:	685b      	ldr	r3, [r3, #4]
 801599e:	617b      	str	r3, [r7, #20]
    pcur = p;
 80159a0:	69bb      	ldr	r3, [r7, #24]
 80159a2:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 80159a4:	697b      	ldr	r3, [r7, #20]
 80159a6:	681b      	ldr	r3, [r3, #0]
 80159a8:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 80159aa:	68f8      	ldr	r0, [r7, #12]
 80159ac:	f7f7 fc8a 	bl	800d2c4 <pbuf_clen>
 80159b0:	4603      	mov	r3, r0
 80159b2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80159b4:	8bfa      	ldrh	r2, [r7, #30]
 80159b6:	8a7b      	ldrh	r3, [r7, #18]
 80159b8:	4413      	add	r3, r2
 80159ba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80159be:	db05      	blt.n	80159cc <ip_reass_free_complete_datagram+0xe0>
 80159c0:	4b15      	ldr	r3, [pc, #84]	@ (8015a18 <ip_reass_free_complete_datagram+0x12c>)
 80159c2:	22cc      	movs	r2, #204	@ 0xcc
 80159c4:	4918      	ldr	r1, [pc, #96]	@ (8015a28 <ip_reass_free_complete_datagram+0x13c>)
 80159c6:	4816      	ldr	r0, [pc, #88]	@ (8015a20 <ip_reass_free_complete_datagram+0x134>)
 80159c8:	f001 f92e 	bl	8016c28 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80159cc:	8bfa      	ldrh	r2, [r7, #30]
 80159ce:	8a7b      	ldrh	r3, [r7, #18]
 80159d0:	4413      	add	r3, r2
 80159d2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 80159d4:	68f8      	ldr	r0, [r7, #12]
 80159d6:	f7f7 fbe7 	bl	800d1a8 <pbuf_free>
  while (p != NULL) {
 80159da:	69bb      	ldr	r3, [r7, #24]
 80159dc:	2b00      	cmp	r3, #0
 80159de:	d1dc      	bne.n	801599a <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 80159e0:	6839      	ldr	r1, [r7, #0]
 80159e2:	6878      	ldr	r0, [r7, #4]
 80159e4:	f000 f8c2 	bl	8015b6c <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 80159e8:	4b10      	ldr	r3, [pc, #64]	@ (8015a2c <ip_reass_free_complete_datagram+0x140>)
 80159ea:	881b      	ldrh	r3, [r3, #0]
 80159ec:	8bfa      	ldrh	r2, [r7, #30]
 80159ee:	429a      	cmp	r2, r3
 80159f0:	d905      	bls.n	80159fe <ip_reass_free_complete_datagram+0x112>
 80159f2:	4b09      	ldr	r3, [pc, #36]	@ (8015a18 <ip_reass_free_complete_datagram+0x12c>)
 80159f4:	22d2      	movs	r2, #210	@ 0xd2
 80159f6:	490e      	ldr	r1, [pc, #56]	@ (8015a30 <ip_reass_free_complete_datagram+0x144>)
 80159f8:	4809      	ldr	r0, [pc, #36]	@ (8015a20 <ip_reass_free_complete_datagram+0x134>)
 80159fa:	f001 f915 	bl	8016c28 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 80159fe:	4b0b      	ldr	r3, [pc, #44]	@ (8015a2c <ip_reass_free_complete_datagram+0x140>)
 8015a00:	881a      	ldrh	r2, [r3, #0]
 8015a02:	8bfb      	ldrh	r3, [r7, #30]
 8015a04:	1ad3      	subs	r3, r2, r3
 8015a06:	b29a      	uxth	r2, r3
 8015a08:	4b08      	ldr	r3, [pc, #32]	@ (8015a2c <ip_reass_free_complete_datagram+0x140>)
 8015a0a:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8015a0c:	8bfb      	ldrh	r3, [r7, #30]
}
 8015a0e:	4618      	mov	r0, r3
 8015a10:	3720      	adds	r7, #32
 8015a12:	46bd      	mov	sp, r7
 8015a14:	bd80      	pop	{r7, pc}
 8015a16:	bf00      	nop
 8015a18:	0801af7c 	.word	0x0801af7c
 8015a1c:	0801afb8 	.word	0x0801afb8
 8015a20:	0801afc4 	.word	0x0801afc4
 8015a24:	0801afec 	.word	0x0801afec
 8015a28:	0801b000 	.word	0x0801b000
 8015a2c:	2000f540 	.word	0x2000f540
 8015a30:	0801b020 	.word	0x0801b020

08015a34 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8015a34:	b580      	push	{r7, lr}
 8015a36:	b08a      	sub	sp, #40	@ 0x28
 8015a38:	af00      	add	r7, sp, #0
 8015a3a:	6078      	str	r0, [r7, #4]
 8015a3c:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8015a3e:	2300      	movs	r3, #0
 8015a40:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8015a42:	2300      	movs	r3, #0
 8015a44:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8015a46:	2300      	movs	r3, #0
 8015a48:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8015a4a:	2300      	movs	r3, #0
 8015a4c:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8015a4e:	2300      	movs	r3, #0
 8015a50:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8015a52:	4b28      	ldr	r3, [pc, #160]	@ (8015af4 <ip_reass_remove_oldest_datagram+0xc0>)
 8015a54:	681b      	ldr	r3, [r3, #0]
 8015a56:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8015a58:	e030      	b.n	8015abc <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8015a5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015a5c:	695a      	ldr	r2, [r3, #20]
 8015a5e:	687b      	ldr	r3, [r7, #4]
 8015a60:	68db      	ldr	r3, [r3, #12]
 8015a62:	429a      	cmp	r2, r3
 8015a64:	d10c      	bne.n	8015a80 <ip_reass_remove_oldest_datagram+0x4c>
 8015a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015a68:	699a      	ldr	r2, [r3, #24]
 8015a6a:	687b      	ldr	r3, [r7, #4]
 8015a6c:	691b      	ldr	r3, [r3, #16]
 8015a6e:	429a      	cmp	r2, r3
 8015a70:	d106      	bne.n	8015a80 <ip_reass_remove_oldest_datagram+0x4c>
 8015a72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015a74:	899a      	ldrh	r2, [r3, #12]
 8015a76:	687b      	ldr	r3, [r7, #4]
 8015a78:	889b      	ldrh	r3, [r3, #4]
 8015a7a:	b29b      	uxth	r3, r3
 8015a7c:	429a      	cmp	r2, r3
 8015a7e:	d014      	beq.n	8015aaa <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8015a80:	693b      	ldr	r3, [r7, #16]
 8015a82:	3301      	adds	r3, #1
 8015a84:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8015a86:	6a3b      	ldr	r3, [r7, #32]
 8015a88:	2b00      	cmp	r3, #0
 8015a8a:	d104      	bne.n	8015a96 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8015a8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015a8e:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8015a90:	69fb      	ldr	r3, [r7, #28]
 8015a92:	61bb      	str	r3, [r7, #24]
 8015a94:	e009      	b.n	8015aaa <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8015a96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015a98:	7fda      	ldrb	r2, [r3, #31]
 8015a9a:	6a3b      	ldr	r3, [r7, #32]
 8015a9c:	7fdb      	ldrb	r3, [r3, #31]
 8015a9e:	429a      	cmp	r2, r3
 8015aa0:	d803      	bhi.n	8015aaa <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8015aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015aa4:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8015aa6:	69fb      	ldr	r3, [r7, #28]
 8015aa8:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8015aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015aac:	681b      	ldr	r3, [r3, #0]
 8015aae:	2b00      	cmp	r3, #0
 8015ab0:	d001      	beq.n	8015ab6 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8015ab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015ab4:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8015ab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015ab8:	681b      	ldr	r3, [r3, #0]
 8015aba:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8015abc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015abe:	2b00      	cmp	r3, #0
 8015ac0:	d1cb      	bne.n	8015a5a <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8015ac2:	6a3b      	ldr	r3, [r7, #32]
 8015ac4:	2b00      	cmp	r3, #0
 8015ac6:	d008      	beq.n	8015ada <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8015ac8:	69b9      	ldr	r1, [r7, #24]
 8015aca:	6a38      	ldr	r0, [r7, #32]
 8015acc:	f7ff ff0e 	bl	80158ec <ip_reass_free_complete_datagram>
 8015ad0:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8015ad2:	697a      	ldr	r2, [r7, #20]
 8015ad4:	68fb      	ldr	r3, [r7, #12]
 8015ad6:	4413      	add	r3, r2
 8015ad8:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8015ada:	697a      	ldr	r2, [r7, #20]
 8015adc:	683b      	ldr	r3, [r7, #0]
 8015ade:	429a      	cmp	r2, r3
 8015ae0:	da02      	bge.n	8015ae8 <ip_reass_remove_oldest_datagram+0xb4>
 8015ae2:	693b      	ldr	r3, [r7, #16]
 8015ae4:	2b01      	cmp	r3, #1
 8015ae6:	dcac      	bgt.n	8015a42 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8015ae8:	697b      	ldr	r3, [r7, #20]
}
 8015aea:	4618      	mov	r0, r3
 8015aec:	3728      	adds	r7, #40	@ 0x28
 8015aee:	46bd      	mov	sp, r7
 8015af0:	bd80      	pop	{r7, pc}
 8015af2:	bf00      	nop
 8015af4:	2000f53c 	.word	0x2000f53c

08015af8 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8015af8:	b580      	push	{r7, lr}
 8015afa:	b084      	sub	sp, #16
 8015afc:	af00      	add	r7, sp, #0
 8015afe:	6078      	str	r0, [r7, #4]
 8015b00:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8015b02:	2004      	movs	r0, #4
 8015b04:	f7f6 fc36 	bl	800c374 <memp_malloc>
 8015b08:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8015b0a:	68fb      	ldr	r3, [r7, #12]
 8015b0c:	2b00      	cmp	r3, #0
 8015b0e:	d110      	bne.n	8015b32 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8015b10:	6839      	ldr	r1, [r7, #0]
 8015b12:	6878      	ldr	r0, [r7, #4]
 8015b14:	f7ff ff8e 	bl	8015a34 <ip_reass_remove_oldest_datagram>
 8015b18:	4602      	mov	r2, r0
 8015b1a:	683b      	ldr	r3, [r7, #0]
 8015b1c:	4293      	cmp	r3, r2
 8015b1e:	dc03      	bgt.n	8015b28 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8015b20:	2004      	movs	r0, #4
 8015b22:	f7f6 fc27 	bl	800c374 <memp_malloc>
 8015b26:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8015b28:	68fb      	ldr	r3, [r7, #12]
 8015b2a:	2b00      	cmp	r3, #0
 8015b2c:	d101      	bne.n	8015b32 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8015b2e:	2300      	movs	r3, #0
 8015b30:	e016      	b.n	8015b60 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8015b32:	2220      	movs	r2, #32
 8015b34:	2100      	movs	r1, #0
 8015b36:	68f8      	ldr	r0, [r7, #12]
 8015b38:	f001 f8db 	bl	8016cf2 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8015b3c:	68fb      	ldr	r3, [r7, #12]
 8015b3e:	220f      	movs	r2, #15
 8015b40:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8015b42:	4b09      	ldr	r3, [pc, #36]	@ (8015b68 <ip_reass_enqueue_new_datagram+0x70>)
 8015b44:	681a      	ldr	r2, [r3, #0]
 8015b46:	68fb      	ldr	r3, [r7, #12]
 8015b48:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8015b4a:	4a07      	ldr	r2, [pc, #28]	@ (8015b68 <ip_reass_enqueue_new_datagram+0x70>)
 8015b4c:	68fb      	ldr	r3, [r7, #12]
 8015b4e:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8015b50:	68fb      	ldr	r3, [r7, #12]
 8015b52:	3308      	adds	r3, #8
 8015b54:	2214      	movs	r2, #20
 8015b56:	6879      	ldr	r1, [r7, #4]
 8015b58:	4618      	mov	r0, r3
 8015b5a:	f001 f996 	bl	8016e8a <memcpy>
  return ipr;
 8015b5e:	68fb      	ldr	r3, [r7, #12]
}
 8015b60:	4618      	mov	r0, r3
 8015b62:	3710      	adds	r7, #16
 8015b64:	46bd      	mov	sp, r7
 8015b66:	bd80      	pop	{r7, pc}
 8015b68:	2000f53c 	.word	0x2000f53c

08015b6c <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8015b6c:	b580      	push	{r7, lr}
 8015b6e:	b082      	sub	sp, #8
 8015b70:	af00      	add	r7, sp, #0
 8015b72:	6078      	str	r0, [r7, #4]
 8015b74:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8015b76:	4b10      	ldr	r3, [pc, #64]	@ (8015bb8 <ip_reass_dequeue_datagram+0x4c>)
 8015b78:	681b      	ldr	r3, [r3, #0]
 8015b7a:	687a      	ldr	r2, [r7, #4]
 8015b7c:	429a      	cmp	r2, r3
 8015b7e:	d104      	bne.n	8015b8a <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8015b80:	687b      	ldr	r3, [r7, #4]
 8015b82:	681b      	ldr	r3, [r3, #0]
 8015b84:	4a0c      	ldr	r2, [pc, #48]	@ (8015bb8 <ip_reass_dequeue_datagram+0x4c>)
 8015b86:	6013      	str	r3, [r2, #0]
 8015b88:	e00d      	b.n	8015ba6 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8015b8a:	683b      	ldr	r3, [r7, #0]
 8015b8c:	2b00      	cmp	r3, #0
 8015b8e:	d106      	bne.n	8015b9e <ip_reass_dequeue_datagram+0x32>
 8015b90:	4b0a      	ldr	r3, [pc, #40]	@ (8015bbc <ip_reass_dequeue_datagram+0x50>)
 8015b92:	f240 1245 	movw	r2, #325	@ 0x145
 8015b96:	490a      	ldr	r1, [pc, #40]	@ (8015bc0 <ip_reass_dequeue_datagram+0x54>)
 8015b98:	480a      	ldr	r0, [pc, #40]	@ (8015bc4 <ip_reass_dequeue_datagram+0x58>)
 8015b9a:	f001 f845 	bl	8016c28 <iprintf>
    prev->next = ipr->next;
 8015b9e:	687b      	ldr	r3, [r7, #4]
 8015ba0:	681a      	ldr	r2, [r3, #0]
 8015ba2:	683b      	ldr	r3, [r7, #0]
 8015ba4:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8015ba6:	6879      	ldr	r1, [r7, #4]
 8015ba8:	2004      	movs	r0, #4
 8015baa:	f7f6 fc59 	bl	800c460 <memp_free>
}
 8015bae:	bf00      	nop
 8015bb0:	3708      	adds	r7, #8
 8015bb2:	46bd      	mov	sp, r7
 8015bb4:	bd80      	pop	{r7, pc}
 8015bb6:	bf00      	nop
 8015bb8:	2000f53c 	.word	0x2000f53c
 8015bbc:	0801af7c 	.word	0x0801af7c
 8015bc0:	0801b044 	.word	0x0801b044
 8015bc4:	0801afc4 	.word	0x0801afc4

08015bc8 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8015bc8:	b580      	push	{r7, lr}
 8015bca:	b08c      	sub	sp, #48	@ 0x30
 8015bcc:	af00      	add	r7, sp, #0
 8015bce:	60f8      	str	r0, [r7, #12]
 8015bd0:	60b9      	str	r1, [r7, #8]
 8015bd2:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8015bd4:	2300      	movs	r3, #0
 8015bd6:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8015bd8:	2301      	movs	r3, #1
 8015bda:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8015bdc:	68bb      	ldr	r3, [r7, #8]
 8015bde:	685b      	ldr	r3, [r3, #4]
 8015be0:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8015be2:	69fb      	ldr	r3, [r7, #28]
 8015be4:	885b      	ldrh	r3, [r3, #2]
 8015be6:	b29b      	uxth	r3, r3
 8015be8:	4618      	mov	r0, r3
 8015bea:	f7f5 feeb 	bl	800b9c4 <lwip_htons>
 8015bee:	4603      	mov	r3, r0
 8015bf0:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8015bf2:	69fb      	ldr	r3, [r7, #28]
 8015bf4:	781b      	ldrb	r3, [r3, #0]
 8015bf6:	f003 030f 	and.w	r3, r3, #15
 8015bfa:	b2db      	uxtb	r3, r3
 8015bfc:	009b      	lsls	r3, r3, #2
 8015bfe:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8015c00:	7e7b      	ldrb	r3, [r7, #25]
 8015c02:	b29b      	uxth	r3, r3
 8015c04:	8b7a      	ldrh	r2, [r7, #26]
 8015c06:	429a      	cmp	r2, r3
 8015c08:	d202      	bcs.n	8015c10 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015c0a:	f04f 33ff 	mov.w	r3, #4294967295
 8015c0e:	e135      	b.n	8015e7c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8015c10:	7e7b      	ldrb	r3, [r7, #25]
 8015c12:	b29b      	uxth	r3, r3
 8015c14:	8b7a      	ldrh	r2, [r7, #26]
 8015c16:	1ad3      	subs	r3, r2, r3
 8015c18:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8015c1a:	69fb      	ldr	r3, [r7, #28]
 8015c1c:	88db      	ldrh	r3, [r3, #6]
 8015c1e:	b29b      	uxth	r3, r3
 8015c20:	4618      	mov	r0, r3
 8015c22:	f7f5 fecf 	bl	800b9c4 <lwip_htons>
 8015c26:	4603      	mov	r3, r0
 8015c28:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015c2c:	b29b      	uxth	r3, r3
 8015c2e:	00db      	lsls	r3, r3, #3
 8015c30:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8015c32:	68bb      	ldr	r3, [r7, #8]
 8015c34:	685b      	ldr	r3, [r3, #4]
 8015c36:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 8015c38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015c3a:	2200      	movs	r2, #0
 8015c3c:	701a      	strb	r2, [r3, #0]
 8015c3e:	2200      	movs	r2, #0
 8015c40:	705a      	strb	r2, [r3, #1]
 8015c42:	2200      	movs	r2, #0
 8015c44:	709a      	strb	r2, [r3, #2]
 8015c46:	2200      	movs	r2, #0
 8015c48:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8015c4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015c4c:	8afa      	ldrh	r2, [r7, #22]
 8015c4e:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8015c50:	8afa      	ldrh	r2, [r7, #22]
 8015c52:	8b7b      	ldrh	r3, [r7, #26]
 8015c54:	4413      	add	r3, r2
 8015c56:	b29a      	uxth	r2, r3
 8015c58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015c5a:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8015c5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015c5e:	88db      	ldrh	r3, [r3, #6]
 8015c60:	b29b      	uxth	r3, r3
 8015c62:	8afa      	ldrh	r2, [r7, #22]
 8015c64:	429a      	cmp	r2, r3
 8015c66:	d902      	bls.n	8015c6e <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015c68:	f04f 33ff 	mov.w	r3, #4294967295
 8015c6c:	e106      	b.n	8015e7c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8015c6e:	68fb      	ldr	r3, [r7, #12]
 8015c70:	685b      	ldr	r3, [r3, #4]
 8015c72:	627b      	str	r3, [r7, #36]	@ 0x24
 8015c74:	e068      	b.n	8015d48 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8015c76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015c78:	685b      	ldr	r3, [r3, #4]
 8015c7a:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8015c7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015c7e:	889b      	ldrh	r3, [r3, #4]
 8015c80:	b29a      	uxth	r2, r3
 8015c82:	693b      	ldr	r3, [r7, #16]
 8015c84:	889b      	ldrh	r3, [r3, #4]
 8015c86:	b29b      	uxth	r3, r3
 8015c88:	429a      	cmp	r2, r3
 8015c8a:	d235      	bcs.n	8015cf8 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8015c8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015c8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015c90:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8015c92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015c94:	2b00      	cmp	r3, #0
 8015c96:	d020      	beq.n	8015cda <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8015c98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015c9a:	889b      	ldrh	r3, [r3, #4]
 8015c9c:	b29a      	uxth	r2, r3
 8015c9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015ca0:	88db      	ldrh	r3, [r3, #6]
 8015ca2:	b29b      	uxth	r3, r3
 8015ca4:	429a      	cmp	r2, r3
 8015ca6:	d307      	bcc.n	8015cb8 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8015ca8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015caa:	88db      	ldrh	r3, [r3, #6]
 8015cac:	b29a      	uxth	r2, r3
 8015cae:	693b      	ldr	r3, [r7, #16]
 8015cb0:	889b      	ldrh	r3, [r3, #4]
 8015cb2:	b29b      	uxth	r3, r3
 8015cb4:	429a      	cmp	r2, r3
 8015cb6:	d902      	bls.n	8015cbe <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015cb8:	f04f 33ff 	mov.w	r3, #4294967295
 8015cbc:	e0de      	b.n	8015e7c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8015cbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015cc0:	68ba      	ldr	r2, [r7, #8]
 8015cc2:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8015cc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015cc6:	88db      	ldrh	r3, [r3, #6]
 8015cc8:	b29a      	uxth	r2, r3
 8015cca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015ccc:	889b      	ldrh	r3, [r3, #4]
 8015cce:	b29b      	uxth	r3, r3
 8015cd0:	429a      	cmp	r2, r3
 8015cd2:	d03d      	beq.n	8015d50 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8015cd4:	2300      	movs	r3, #0
 8015cd6:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8015cd8:	e03a      	b.n	8015d50 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8015cda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015cdc:	88db      	ldrh	r3, [r3, #6]
 8015cde:	b29a      	uxth	r2, r3
 8015ce0:	693b      	ldr	r3, [r7, #16]
 8015ce2:	889b      	ldrh	r3, [r3, #4]
 8015ce4:	b29b      	uxth	r3, r3
 8015ce6:	429a      	cmp	r2, r3
 8015ce8:	d902      	bls.n	8015cf0 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015cea:	f04f 33ff 	mov.w	r3, #4294967295
 8015cee:	e0c5      	b.n	8015e7c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8015cf0:	68fb      	ldr	r3, [r7, #12]
 8015cf2:	68ba      	ldr	r2, [r7, #8]
 8015cf4:	605a      	str	r2, [r3, #4]
      break;
 8015cf6:	e02b      	b.n	8015d50 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8015cf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015cfa:	889b      	ldrh	r3, [r3, #4]
 8015cfc:	b29a      	uxth	r2, r3
 8015cfe:	693b      	ldr	r3, [r7, #16]
 8015d00:	889b      	ldrh	r3, [r3, #4]
 8015d02:	b29b      	uxth	r3, r3
 8015d04:	429a      	cmp	r2, r3
 8015d06:	d102      	bne.n	8015d0e <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015d08:	f04f 33ff 	mov.w	r3, #4294967295
 8015d0c:	e0b6      	b.n	8015e7c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8015d0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015d10:	889b      	ldrh	r3, [r3, #4]
 8015d12:	b29a      	uxth	r2, r3
 8015d14:	693b      	ldr	r3, [r7, #16]
 8015d16:	88db      	ldrh	r3, [r3, #6]
 8015d18:	b29b      	uxth	r3, r3
 8015d1a:	429a      	cmp	r2, r3
 8015d1c:	d202      	bcs.n	8015d24 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015d1e:	f04f 33ff 	mov.w	r3, #4294967295
 8015d22:	e0ab      	b.n	8015e7c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8015d24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015d26:	2b00      	cmp	r3, #0
 8015d28:	d009      	beq.n	8015d3e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8015d2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015d2c:	88db      	ldrh	r3, [r3, #6]
 8015d2e:	b29a      	uxth	r2, r3
 8015d30:	693b      	ldr	r3, [r7, #16]
 8015d32:	889b      	ldrh	r3, [r3, #4]
 8015d34:	b29b      	uxth	r3, r3
 8015d36:	429a      	cmp	r2, r3
 8015d38:	d001      	beq.n	8015d3e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8015d3a:	2300      	movs	r3, #0
 8015d3c:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8015d3e:	693b      	ldr	r3, [r7, #16]
 8015d40:	681b      	ldr	r3, [r3, #0]
 8015d42:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 8015d44:	693b      	ldr	r3, [r7, #16]
 8015d46:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 8015d48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015d4a:	2b00      	cmp	r3, #0
 8015d4c:	d193      	bne.n	8015c76 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8015d4e:	e000      	b.n	8015d52 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8015d50:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8015d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015d54:	2b00      	cmp	r3, #0
 8015d56:	d12d      	bne.n	8015db4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8015d58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015d5a:	2b00      	cmp	r3, #0
 8015d5c:	d01c      	beq.n	8015d98 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8015d5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015d60:	88db      	ldrh	r3, [r3, #6]
 8015d62:	b29a      	uxth	r2, r3
 8015d64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015d66:	889b      	ldrh	r3, [r3, #4]
 8015d68:	b29b      	uxth	r3, r3
 8015d6a:	429a      	cmp	r2, r3
 8015d6c:	d906      	bls.n	8015d7c <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8015d6e:	4b45      	ldr	r3, [pc, #276]	@ (8015e84 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015d70:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 8015d74:	4944      	ldr	r1, [pc, #272]	@ (8015e88 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8015d76:	4845      	ldr	r0, [pc, #276]	@ (8015e8c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015d78:	f000 ff56 	bl	8016c28 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8015d7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015d7e:	68ba      	ldr	r2, [r7, #8]
 8015d80:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8015d82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015d84:	88db      	ldrh	r3, [r3, #6]
 8015d86:	b29a      	uxth	r2, r3
 8015d88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015d8a:	889b      	ldrh	r3, [r3, #4]
 8015d8c:	b29b      	uxth	r3, r3
 8015d8e:	429a      	cmp	r2, r3
 8015d90:	d010      	beq.n	8015db4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8015d92:	2300      	movs	r3, #0
 8015d94:	623b      	str	r3, [r7, #32]
 8015d96:	e00d      	b.n	8015db4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8015d98:	68fb      	ldr	r3, [r7, #12]
 8015d9a:	685b      	ldr	r3, [r3, #4]
 8015d9c:	2b00      	cmp	r3, #0
 8015d9e:	d006      	beq.n	8015dae <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8015da0:	4b38      	ldr	r3, [pc, #224]	@ (8015e84 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015da2:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 8015da6:	493a      	ldr	r1, [pc, #232]	@ (8015e90 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8015da8:	4838      	ldr	r0, [pc, #224]	@ (8015e8c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015daa:	f000 ff3d 	bl	8016c28 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8015dae:	68fb      	ldr	r3, [r7, #12]
 8015db0:	68ba      	ldr	r2, [r7, #8]
 8015db2:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8015db4:	687b      	ldr	r3, [r7, #4]
 8015db6:	2b00      	cmp	r3, #0
 8015db8:	d105      	bne.n	8015dc6 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8015dba:	68fb      	ldr	r3, [r7, #12]
 8015dbc:	7f9b      	ldrb	r3, [r3, #30]
 8015dbe:	f003 0301 	and.w	r3, r3, #1
 8015dc2:	2b00      	cmp	r3, #0
 8015dc4:	d059      	beq.n	8015e7a <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8015dc6:	6a3b      	ldr	r3, [r7, #32]
 8015dc8:	2b00      	cmp	r3, #0
 8015dca:	d04f      	beq.n	8015e6c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8015dcc:	68fb      	ldr	r3, [r7, #12]
 8015dce:	685b      	ldr	r3, [r3, #4]
 8015dd0:	2b00      	cmp	r3, #0
 8015dd2:	d006      	beq.n	8015de2 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8015dd4:	68fb      	ldr	r3, [r7, #12]
 8015dd6:	685b      	ldr	r3, [r3, #4]
 8015dd8:	685b      	ldr	r3, [r3, #4]
 8015dda:	889b      	ldrh	r3, [r3, #4]
 8015ddc:	b29b      	uxth	r3, r3
 8015dde:	2b00      	cmp	r3, #0
 8015de0:	d002      	beq.n	8015de8 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8015de2:	2300      	movs	r3, #0
 8015de4:	623b      	str	r3, [r7, #32]
 8015de6:	e041      	b.n	8015e6c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8015de8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015dea:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 8015dec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015dee:	681b      	ldr	r3, [r3, #0]
 8015df0:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 8015df2:	e012      	b.n	8015e1a <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8015df4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015df6:	685b      	ldr	r3, [r3, #4]
 8015df8:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 8015dfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015dfc:	88db      	ldrh	r3, [r3, #6]
 8015dfe:	b29a      	uxth	r2, r3
 8015e00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015e02:	889b      	ldrh	r3, [r3, #4]
 8015e04:	b29b      	uxth	r3, r3
 8015e06:	429a      	cmp	r2, r3
 8015e08:	d002      	beq.n	8015e10 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8015e0a:	2300      	movs	r3, #0
 8015e0c:	623b      	str	r3, [r7, #32]
            break;
 8015e0e:	e007      	b.n	8015e20 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8015e10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015e12:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 8015e14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015e16:	681b      	ldr	r3, [r3, #0]
 8015e18:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 8015e1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015e1c:	2b00      	cmp	r3, #0
 8015e1e:	d1e9      	bne.n	8015df4 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8015e20:	6a3b      	ldr	r3, [r7, #32]
 8015e22:	2b00      	cmp	r3, #0
 8015e24:	d022      	beq.n	8015e6c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8015e26:	68fb      	ldr	r3, [r7, #12]
 8015e28:	685b      	ldr	r3, [r3, #4]
 8015e2a:	2b00      	cmp	r3, #0
 8015e2c:	d106      	bne.n	8015e3c <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8015e2e:	4b15      	ldr	r3, [pc, #84]	@ (8015e84 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015e30:	f240 12df 	movw	r2, #479	@ 0x1df
 8015e34:	4917      	ldr	r1, [pc, #92]	@ (8015e94 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8015e36:	4815      	ldr	r0, [pc, #84]	@ (8015e8c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015e38:	f000 fef6 	bl	8016c28 <iprintf>
          LWIP_ASSERT("sanity check",
 8015e3c:	68fb      	ldr	r3, [r7, #12]
 8015e3e:	685b      	ldr	r3, [r3, #4]
 8015e40:	685b      	ldr	r3, [r3, #4]
 8015e42:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8015e44:	429a      	cmp	r2, r3
 8015e46:	d106      	bne.n	8015e56 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8015e48:	4b0e      	ldr	r3, [pc, #56]	@ (8015e84 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015e4a:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8015e4e:	4911      	ldr	r1, [pc, #68]	@ (8015e94 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8015e50:	480e      	ldr	r0, [pc, #56]	@ (8015e8c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015e52:	f000 fee9 	bl	8016c28 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8015e56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015e58:	681b      	ldr	r3, [r3, #0]
 8015e5a:	2b00      	cmp	r3, #0
 8015e5c:	d006      	beq.n	8015e6c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8015e5e:	4b09      	ldr	r3, [pc, #36]	@ (8015e84 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015e60:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 8015e64:	490c      	ldr	r1, [pc, #48]	@ (8015e98 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8015e66:	4809      	ldr	r0, [pc, #36]	@ (8015e8c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015e68:	f000 fede 	bl	8016c28 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8015e6c:	6a3b      	ldr	r3, [r7, #32]
 8015e6e:	2b00      	cmp	r3, #0
 8015e70:	bf14      	ite	ne
 8015e72:	2301      	movne	r3, #1
 8015e74:	2300      	moveq	r3, #0
 8015e76:	b2db      	uxtb	r3, r3
 8015e78:	e000      	b.n	8015e7c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8015e7a:	2300      	movs	r3, #0
}
 8015e7c:	4618      	mov	r0, r3
 8015e7e:	3730      	adds	r7, #48	@ 0x30
 8015e80:	46bd      	mov	sp, r7
 8015e82:	bd80      	pop	{r7, pc}
 8015e84:	0801af7c 	.word	0x0801af7c
 8015e88:	0801b060 	.word	0x0801b060
 8015e8c:	0801afc4 	.word	0x0801afc4
 8015e90:	0801b080 	.word	0x0801b080
 8015e94:	0801b0b8 	.word	0x0801b0b8
 8015e98:	0801b0c8 	.word	0x0801b0c8

08015e9c <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8015e9c:	b580      	push	{r7, lr}
 8015e9e:	b08e      	sub	sp, #56	@ 0x38
 8015ea0:	af00      	add	r7, sp, #0
 8015ea2:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8015ea4:	687b      	ldr	r3, [r7, #4]
 8015ea6:	685b      	ldr	r3, [r3, #4]
 8015ea8:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8015eaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015eac:	781b      	ldrb	r3, [r3, #0]
 8015eae:	f003 030f 	and.w	r3, r3, #15
 8015eb2:	b2db      	uxtb	r3, r3
 8015eb4:	009b      	lsls	r3, r3, #2
 8015eb6:	b2db      	uxtb	r3, r3
 8015eb8:	2b14      	cmp	r3, #20
 8015eba:	f040 8171 	bne.w	80161a0 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8015ebe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015ec0:	88db      	ldrh	r3, [r3, #6]
 8015ec2:	b29b      	uxth	r3, r3
 8015ec4:	4618      	mov	r0, r3
 8015ec6:	f7f5 fd7d 	bl	800b9c4 <lwip_htons>
 8015eca:	4603      	mov	r3, r0
 8015ecc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015ed0:	b29b      	uxth	r3, r3
 8015ed2:	00db      	lsls	r3, r3, #3
 8015ed4:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8015ed6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015ed8:	885b      	ldrh	r3, [r3, #2]
 8015eda:	b29b      	uxth	r3, r3
 8015edc:	4618      	mov	r0, r3
 8015ede:	f7f5 fd71 	bl	800b9c4 <lwip_htons>
 8015ee2:	4603      	mov	r3, r0
 8015ee4:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8015ee6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015ee8:	781b      	ldrb	r3, [r3, #0]
 8015eea:	f003 030f 	and.w	r3, r3, #15
 8015eee:	b2db      	uxtb	r3, r3
 8015ef0:	009b      	lsls	r3, r3, #2
 8015ef2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 8015ef6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8015efa:	b29b      	uxth	r3, r3
 8015efc:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8015efe:	429a      	cmp	r2, r3
 8015f00:	f0c0 8150 	bcc.w	80161a4 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8015f04:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8015f08:	b29b      	uxth	r3, r3
 8015f0a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8015f0c:	1ad3      	subs	r3, r2, r3
 8015f0e:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8015f10:	6878      	ldr	r0, [r7, #4]
 8015f12:	f7f7 f9d7 	bl	800d2c4 <pbuf_clen>
 8015f16:	4603      	mov	r3, r0
 8015f18:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8015f1a:	4b8c      	ldr	r3, [pc, #560]	@ (801614c <ip4_reass+0x2b0>)
 8015f1c:	881b      	ldrh	r3, [r3, #0]
 8015f1e:	461a      	mov	r2, r3
 8015f20:	8c3b      	ldrh	r3, [r7, #32]
 8015f22:	4413      	add	r3, r2
 8015f24:	2b0a      	cmp	r3, #10
 8015f26:	dd10      	ble.n	8015f4a <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8015f28:	8c3b      	ldrh	r3, [r7, #32]
 8015f2a:	4619      	mov	r1, r3
 8015f2c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8015f2e:	f7ff fd81 	bl	8015a34 <ip_reass_remove_oldest_datagram>
 8015f32:	4603      	mov	r3, r0
 8015f34:	2b00      	cmp	r3, #0
 8015f36:	f000 8137 	beq.w	80161a8 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8015f3a:	4b84      	ldr	r3, [pc, #528]	@ (801614c <ip4_reass+0x2b0>)
 8015f3c:	881b      	ldrh	r3, [r3, #0]
 8015f3e:	461a      	mov	r2, r3
 8015f40:	8c3b      	ldrh	r3, [r7, #32]
 8015f42:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8015f44:	2b0a      	cmp	r3, #10
 8015f46:	f300 812f 	bgt.w	80161a8 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8015f4a:	4b81      	ldr	r3, [pc, #516]	@ (8016150 <ip4_reass+0x2b4>)
 8015f4c:	681b      	ldr	r3, [r3, #0]
 8015f4e:	633b      	str	r3, [r7, #48]	@ 0x30
 8015f50:	e015      	b.n	8015f7e <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8015f52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015f54:	695a      	ldr	r2, [r3, #20]
 8015f56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015f58:	68db      	ldr	r3, [r3, #12]
 8015f5a:	429a      	cmp	r2, r3
 8015f5c:	d10c      	bne.n	8015f78 <ip4_reass+0xdc>
 8015f5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015f60:	699a      	ldr	r2, [r3, #24]
 8015f62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015f64:	691b      	ldr	r3, [r3, #16]
 8015f66:	429a      	cmp	r2, r3
 8015f68:	d106      	bne.n	8015f78 <ip4_reass+0xdc>
 8015f6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015f6c:	899a      	ldrh	r2, [r3, #12]
 8015f6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015f70:	889b      	ldrh	r3, [r3, #4]
 8015f72:	b29b      	uxth	r3, r3
 8015f74:	429a      	cmp	r2, r3
 8015f76:	d006      	beq.n	8015f86 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8015f78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015f7a:	681b      	ldr	r3, [r3, #0]
 8015f7c:	633b      	str	r3, [r7, #48]	@ 0x30
 8015f7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015f80:	2b00      	cmp	r3, #0
 8015f82:	d1e6      	bne.n	8015f52 <ip4_reass+0xb6>
 8015f84:	e000      	b.n	8015f88 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8015f86:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8015f88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015f8a:	2b00      	cmp	r3, #0
 8015f8c:	d109      	bne.n	8015fa2 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8015f8e:	8c3b      	ldrh	r3, [r7, #32]
 8015f90:	4619      	mov	r1, r3
 8015f92:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8015f94:	f7ff fdb0 	bl	8015af8 <ip_reass_enqueue_new_datagram>
 8015f98:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8015f9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015f9c:	2b00      	cmp	r3, #0
 8015f9e:	d11c      	bne.n	8015fda <ip4_reass+0x13e>
      goto nullreturn;
 8015fa0:	e105      	b.n	80161ae <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8015fa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015fa4:	88db      	ldrh	r3, [r3, #6]
 8015fa6:	b29b      	uxth	r3, r3
 8015fa8:	4618      	mov	r0, r3
 8015faa:	f7f5 fd0b 	bl	800b9c4 <lwip_htons>
 8015fae:	4603      	mov	r3, r0
 8015fb0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015fb4:	2b00      	cmp	r3, #0
 8015fb6:	d110      	bne.n	8015fda <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8015fb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015fba:	89db      	ldrh	r3, [r3, #14]
 8015fbc:	4618      	mov	r0, r3
 8015fbe:	f7f5 fd01 	bl	800b9c4 <lwip_htons>
 8015fc2:	4603      	mov	r3, r0
 8015fc4:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8015fc8:	2b00      	cmp	r3, #0
 8015fca:	d006      	beq.n	8015fda <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8015fcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015fce:	3308      	adds	r3, #8
 8015fd0:	2214      	movs	r2, #20
 8015fd2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8015fd4:	4618      	mov	r0, r3
 8015fd6:	f000 ff58 	bl	8016e8a <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8015fda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015fdc:	88db      	ldrh	r3, [r3, #6]
 8015fde:	b29b      	uxth	r3, r3
 8015fe0:	f003 0320 	and.w	r3, r3, #32
 8015fe4:	2b00      	cmp	r3, #0
 8015fe6:	bf0c      	ite	eq
 8015fe8:	2301      	moveq	r3, #1
 8015fea:	2300      	movne	r3, #0
 8015fec:	b2db      	uxtb	r3, r3
 8015fee:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8015ff0:	69fb      	ldr	r3, [r7, #28]
 8015ff2:	2b00      	cmp	r3, #0
 8015ff4:	d00e      	beq.n	8016014 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8015ff6:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8015ff8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8015ffa:	4413      	add	r3, r2
 8015ffc:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8015ffe:	8b7a      	ldrh	r2, [r7, #26]
 8016000:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8016002:	429a      	cmp	r2, r3
 8016004:	f0c0 80a0 	bcc.w	8016148 <ip4_reass+0x2ac>
 8016008:	8b7b      	ldrh	r3, [r7, #26]
 801600a:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 801600e:	4293      	cmp	r3, r2
 8016010:	f200 809a 	bhi.w	8016148 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8016014:	69fa      	ldr	r2, [r7, #28]
 8016016:	6879      	ldr	r1, [r7, #4]
 8016018:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801601a:	f7ff fdd5 	bl	8015bc8 <ip_reass_chain_frag_into_datagram_and_validate>
 801601e:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8016020:	697b      	ldr	r3, [r7, #20]
 8016022:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016026:	f000 809b 	beq.w	8016160 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801602a:	4b48      	ldr	r3, [pc, #288]	@ (801614c <ip4_reass+0x2b0>)
 801602c:	881a      	ldrh	r2, [r3, #0]
 801602e:	8c3b      	ldrh	r3, [r7, #32]
 8016030:	4413      	add	r3, r2
 8016032:	b29a      	uxth	r2, r3
 8016034:	4b45      	ldr	r3, [pc, #276]	@ (801614c <ip4_reass+0x2b0>)
 8016036:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8016038:	69fb      	ldr	r3, [r7, #28]
 801603a:	2b00      	cmp	r3, #0
 801603c:	d00d      	beq.n	801605a <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801603e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8016040:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8016042:	4413      	add	r3, r2
 8016044:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8016046:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016048:	8a7a      	ldrh	r2, [r7, #18]
 801604a:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801604c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801604e:	7f9b      	ldrb	r3, [r3, #30]
 8016050:	f043 0301 	orr.w	r3, r3, #1
 8016054:	b2da      	uxtb	r2, r3
 8016056:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016058:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801605a:	697b      	ldr	r3, [r7, #20]
 801605c:	2b01      	cmp	r3, #1
 801605e:	d171      	bne.n	8016144 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8016060:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016062:	8b9b      	ldrh	r3, [r3, #28]
 8016064:	3314      	adds	r3, #20
 8016066:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8016068:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801606a:	685b      	ldr	r3, [r3, #4]
 801606c:	685b      	ldr	r3, [r3, #4]
 801606e:	681b      	ldr	r3, [r3, #0]
 8016070:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8016072:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016074:	685b      	ldr	r3, [r3, #4]
 8016076:	685b      	ldr	r3, [r3, #4]
 8016078:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801607a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801607c:	3308      	adds	r3, #8
 801607e:	2214      	movs	r2, #20
 8016080:	4619      	mov	r1, r3
 8016082:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8016084:	f000 ff01 	bl	8016e8a <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8016088:	8a3b      	ldrh	r3, [r7, #16]
 801608a:	4618      	mov	r0, r3
 801608c:	f7f5 fc9a 	bl	800b9c4 <lwip_htons>
 8016090:	4603      	mov	r3, r0
 8016092:	461a      	mov	r2, r3
 8016094:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016096:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8016098:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801609a:	2200      	movs	r2, #0
 801609c:	719a      	strb	r2, [r3, #6]
 801609e:	2200      	movs	r2, #0
 80160a0:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 80160a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80160a4:	2200      	movs	r2, #0
 80160a6:	729a      	strb	r2, [r3, #10]
 80160a8:	2200      	movs	r2, #0
 80160aa:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 80160ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80160ae:	685b      	ldr	r3, [r3, #4]
 80160b0:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 80160b2:	e00d      	b.n	80160d0 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 80160b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80160b6:	685b      	ldr	r3, [r3, #4]
 80160b8:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 80160ba:	2114      	movs	r1, #20
 80160bc:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80160be:	f7f6 ffed 	bl	800d09c <pbuf_remove_header>
      pbuf_cat(p, r);
 80160c2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80160c4:	6878      	ldr	r0, [r7, #4]
 80160c6:	f7f7 f93d 	bl	800d344 <pbuf_cat>
      r = iprh->next_pbuf;
 80160ca:	68fb      	ldr	r3, [r7, #12]
 80160cc:	681b      	ldr	r3, [r3, #0]
 80160ce:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 80160d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80160d2:	2b00      	cmp	r3, #0
 80160d4:	d1ee      	bne.n	80160b4 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 80160d6:	4b1e      	ldr	r3, [pc, #120]	@ (8016150 <ip4_reass+0x2b4>)
 80160d8:	681b      	ldr	r3, [r3, #0]
 80160da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80160dc:	429a      	cmp	r2, r3
 80160de:	d102      	bne.n	80160e6 <ip4_reass+0x24a>
      ipr_prev = NULL;
 80160e0:	2300      	movs	r3, #0
 80160e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80160e4:	e010      	b.n	8016108 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80160e6:	4b1a      	ldr	r3, [pc, #104]	@ (8016150 <ip4_reass+0x2b4>)
 80160e8:	681b      	ldr	r3, [r3, #0]
 80160ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80160ec:	e007      	b.n	80160fe <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 80160ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80160f0:	681b      	ldr	r3, [r3, #0]
 80160f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80160f4:	429a      	cmp	r2, r3
 80160f6:	d006      	beq.n	8016106 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80160f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80160fa:	681b      	ldr	r3, [r3, #0]
 80160fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80160fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016100:	2b00      	cmp	r3, #0
 8016102:	d1f4      	bne.n	80160ee <ip4_reass+0x252>
 8016104:	e000      	b.n	8016108 <ip4_reass+0x26c>
          break;
 8016106:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8016108:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801610a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801610c:	f7ff fd2e 	bl	8015b6c <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8016110:	6878      	ldr	r0, [r7, #4]
 8016112:	f7f7 f8d7 	bl	800d2c4 <pbuf_clen>
 8016116:	4603      	mov	r3, r0
 8016118:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801611a:	4b0c      	ldr	r3, [pc, #48]	@ (801614c <ip4_reass+0x2b0>)
 801611c:	881b      	ldrh	r3, [r3, #0]
 801611e:	8c3a      	ldrh	r2, [r7, #32]
 8016120:	429a      	cmp	r2, r3
 8016122:	d906      	bls.n	8016132 <ip4_reass+0x296>
 8016124:	4b0b      	ldr	r3, [pc, #44]	@ (8016154 <ip4_reass+0x2b8>)
 8016126:	f240 229b 	movw	r2, #667	@ 0x29b
 801612a:	490b      	ldr	r1, [pc, #44]	@ (8016158 <ip4_reass+0x2bc>)
 801612c:	480b      	ldr	r0, [pc, #44]	@ (801615c <ip4_reass+0x2c0>)
 801612e:	f000 fd7b 	bl	8016c28 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8016132:	4b06      	ldr	r3, [pc, #24]	@ (801614c <ip4_reass+0x2b0>)
 8016134:	881a      	ldrh	r2, [r3, #0]
 8016136:	8c3b      	ldrh	r3, [r7, #32]
 8016138:	1ad3      	subs	r3, r2, r3
 801613a:	b29a      	uxth	r2, r3
 801613c:	4b03      	ldr	r3, [pc, #12]	@ (801614c <ip4_reass+0x2b0>)
 801613e:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8016140:	687b      	ldr	r3, [r7, #4]
 8016142:	e038      	b.n	80161b6 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8016144:	2300      	movs	r3, #0
 8016146:	e036      	b.n	80161b6 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8016148:	bf00      	nop
 801614a:	e00a      	b.n	8016162 <ip4_reass+0x2c6>
 801614c:	2000f540 	.word	0x2000f540
 8016150:	2000f53c 	.word	0x2000f53c
 8016154:	0801af7c 	.word	0x0801af7c
 8016158:	0801b0ec 	.word	0x0801b0ec
 801615c:	0801afc4 	.word	0x0801afc4
    goto nullreturn_ipr;
 8016160:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8016162:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016164:	2b00      	cmp	r3, #0
 8016166:	d106      	bne.n	8016176 <ip4_reass+0x2da>
 8016168:	4b15      	ldr	r3, [pc, #84]	@ (80161c0 <ip4_reass+0x324>)
 801616a:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 801616e:	4915      	ldr	r1, [pc, #84]	@ (80161c4 <ip4_reass+0x328>)
 8016170:	4815      	ldr	r0, [pc, #84]	@ (80161c8 <ip4_reass+0x32c>)
 8016172:	f000 fd59 	bl	8016c28 <iprintf>
  if (ipr->p == NULL) {
 8016176:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016178:	685b      	ldr	r3, [r3, #4]
 801617a:	2b00      	cmp	r3, #0
 801617c:	d116      	bne.n	80161ac <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801617e:	4b13      	ldr	r3, [pc, #76]	@ (80161cc <ip4_reass+0x330>)
 8016180:	681b      	ldr	r3, [r3, #0]
 8016182:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8016184:	429a      	cmp	r2, r3
 8016186:	d006      	beq.n	8016196 <ip4_reass+0x2fa>
 8016188:	4b0d      	ldr	r3, [pc, #52]	@ (80161c0 <ip4_reass+0x324>)
 801618a:	f240 22ab 	movw	r2, #683	@ 0x2ab
 801618e:	4910      	ldr	r1, [pc, #64]	@ (80161d0 <ip4_reass+0x334>)
 8016190:	480d      	ldr	r0, [pc, #52]	@ (80161c8 <ip4_reass+0x32c>)
 8016192:	f000 fd49 	bl	8016c28 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8016196:	2100      	movs	r1, #0
 8016198:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801619a:	f7ff fce7 	bl	8015b6c <ip_reass_dequeue_datagram>
 801619e:	e006      	b.n	80161ae <ip4_reass+0x312>
    goto nullreturn;
 80161a0:	bf00      	nop
 80161a2:	e004      	b.n	80161ae <ip4_reass+0x312>
    goto nullreturn;
 80161a4:	bf00      	nop
 80161a6:	e002      	b.n	80161ae <ip4_reass+0x312>
      goto nullreturn;
 80161a8:	bf00      	nop
 80161aa:	e000      	b.n	80161ae <ip4_reass+0x312>
  }

nullreturn:
 80161ac:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 80161ae:	6878      	ldr	r0, [r7, #4]
 80161b0:	f7f6 fffa 	bl	800d1a8 <pbuf_free>
  return NULL;
 80161b4:	2300      	movs	r3, #0
}
 80161b6:	4618      	mov	r0, r3
 80161b8:	3738      	adds	r7, #56	@ 0x38
 80161ba:	46bd      	mov	sp, r7
 80161bc:	bd80      	pop	{r7, pc}
 80161be:	bf00      	nop
 80161c0:	0801af7c 	.word	0x0801af7c
 80161c4:	0801b108 	.word	0x0801b108
 80161c8:	0801afc4 	.word	0x0801afc4
 80161cc:	2000f53c 	.word	0x2000f53c
 80161d0:	0801b114 	.word	0x0801b114

080161d4 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 80161d4:	b580      	push	{r7, lr}
 80161d6:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 80161d8:	2005      	movs	r0, #5
 80161da:	f7f6 f8cb 	bl	800c374 <memp_malloc>
 80161de:	4603      	mov	r3, r0
}
 80161e0:	4618      	mov	r0, r3
 80161e2:	bd80      	pop	{r7, pc}

080161e4 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 80161e4:	b580      	push	{r7, lr}
 80161e6:	b082      	sub	sp, #8
 80161e8:	af00      	add	r7, sp, #0
 80161ea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 80161ec:	687b      	ldr	r3, [r7, #4]
 80161ee:	2b00      	cmp	r3, #0
 80161f0:	d106      	bne.n	8016200 <ip_frag_free_pbuf_custom_ref+0x1c>
 80161f2:	4b07      	ldr	r3, [pc, #28]	@ (8016210 <ip_frag_free_pbuf_custom_ref+0x2c>)
 80161f4:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 80161f8:	4906      	ldr	r1, [pc, #24]	@ (8016214 <ip_frag_free_pbuf_custom_ref+0x30>)
 80161fa:	4807      	ldr	r0, [pc, #28]	@ (8016218 <ip_frag_free_pbuf_custom_ref+0x34>)
 80161fc:	f000 fd14 	bl	8016c28 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8016200:	6879      	ldr	r1, [r7, #4]
 8016202:	2005      	movs	r0, #5
 8016204:	f7f6 f92c 	bl	800c460 <memp_free>
}
 8016208:	bf00      	nop
 801620a:	3708      	adds	r7, #8
 801620c:	46bd      	mov	sp, r7
 801620e:	bd80      	pop	{r7, pc}
 8016210:	0801af7c 	.word	0x0801af7c
 8016214:	0801b134 	.word	0x0801b134
 8016218:	0801afc4 	.word	0x0801afc4

0801621c <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801621c:	b580      	push	{r7, lr}
 801621e:	b084      	sub	sp, #16
 8016220:	af00      	add	r7, sp, #0
 8016222:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8016224:	687b      	ldr	r3, [r7, #4]
 8016226:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8016228:	68fb      	ldr	r3, [r7, #12]
 801622a:	2b00      	cmp	r3, #0
 801622c:	d106      	bne.n	801623c <ipfrag_free_pbuf_custom+0x20>
 801622e:	4b11      	ldr	r3, [pc, #68]	@ (8016274 <ipfrag_free_pbuf_custom+0x58>)
 8016230:	f240 22ce 	movw	r2, #718	@ 0x2ce
 8016234:	4910      	ldr	r1, [pc, #64]	@ (8016278 <ipfrag_free_pbuf_custom+0x5c>)
 8016236:	4811      	ldr	r0, [pc, #68]	@ (801627c <ipfrag_free_pbuf_custom+0x60>)
 8016238:	f000 fcf6 	bl	8016c28 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 801623c:	68fa      	ldr	r2, [r7, #12]
 801623e:	687b      	ldr	r3, [r7, #4]
 8016240:	429a      	cmp	r2, r3
 8016242:	d006      	beq.n	8016252 <ipfrag_free_pbuf_custom+0x36>
 8016244:	4b0b      	ldr	r3, [pc, #44]	@ (8016274 <ipfrag_free_pbuf_custom+0x58>)
 8016246:	f240 22cf 	movw	r2, #719	@ 0x2cf
 801624a:	490d      	ldr	r1, [pc, #52]	@ (8016280 <ipfrag_free_pbuf_custom+0x64>)
 801624c:	480b      	ldr	r0, [pc, #44]	@ (801627c <ipfrag_free_pbuf_custom+0x60>)
 801624e:	f000 fceb 	bl	8016c28 <iprintf>
  if (pcr->original != NULL) {
 8016252:	68fb      	ldr	r3, [r7, #12]
 8016254:	695b      	ldr	r3, [r3, #20]
 8016256:	2b00      	cmp	r3, #0
 8016258:	d004      	beq.n	8016264 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801625a:	68fb      	ldr	r3, [r7, #12]
 801625c:	695b      	ldr	r3, [r3, #20]
 801625e:	4618      	mov	r0, r3
 8016260:	f7f6 ffa2 	bl	800d1a8 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8016264:	68f8      	ldr	r0, [r7, #12]
 8016266:	f7ff ffbd 	bl	80161e4 <ip_frag_free_pbuf_custom_ref>
}
 801626a:	bf00      	nop
 801626c:	3710      	adds	r7, #16
 801626e:	46bd      	mov	sp, r7
 8016270:	bd80      	pop	{r7, pc}
 8016272:	bf00      	nop
 8016274:	0801af7c 	.word	0x0801af7c
 8016278:	0801b140 	.word	0x0801b140
 801627c:	0801afc4 	.word	0x0801afc4
 8016280:	0801b14c 	.word	0x0801b14c

08016284 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8016284:	b580      	push	{r7, lr}
 8016286:	b094      	sub	sp, #80	@ 0x50
 8016288:	af02      	add	r7, sp, #8
 801628a:	60f8      	str	r0, [r7, #12]
 801628c:	60b9      	str	r1, [r7, #8]
 801628e:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8016290:	2300      	movs	r3, #0
 8016292:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8016296:	68bb      	ldr	r3, [r7, #8]
 8016298:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801629a:	3b14      	subs	r3, #20
 801629c:	2b00      	cmp	r3, #0
 801629e:	da00      	bge.n	80162a2 <ip4_frag+0x1e>
 80162a0:	3307      	adds	r3, #7
 80162a2:	10db      	asrs	r3, r3, #3
 80162a4:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 80162a6:	2314      	movs	r3, #20
 80162a8:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 80162aa:	68fb      	ldr	r3, [r7, #12]
 80162ac:	685b      	ldr	r3, [r3, #4]
 80162ae:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 80162b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80162b2:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 80162b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80162b6:	781b      	ldrb	r3, [r3, #0]
 80162b8:	f003 030f 	and.w	r3, r3, #15
 80162bc:	b2db      	uxtb	r3, r3
 80162be:	009b      	lsls	r3, r3, #2
 80162c0:	b2db      	uxtb	r3, r3
 80162c2:	2b14      	cmp	r3, #20
 80162c4:	d002      	beq.n	80162cc <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 80162c6:	f06f 0305 	mvn.w	r3, #5
 80162ca:	e110      	b.n	80164ee <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 80162cc:	68fb      	ldr	r3, [r7, #12]
 80162ce:	895b      	ldrh	r3, [r3, #10]
 80162d0:	2b13      	cmp	r3, #19
 80162d2:	d809      	bhi.n	80162e8 <ip4_frag+0x64>
 80162d4:	4b88      	ldr	r3, [pc, #544]	@ (80164f8 <ip4_frag+0x274>)
 80162d6:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 80162da:	4988      	ldr	r1, [pc, #544]	@ (80164fc <ip4_frag+0x278>)
 80162dc:	4888      	ldr	r0, [pc, #544]	@ (8016500 <ip4_frag+0x27c>)
 80162de:	f000 fca3 	bl	8016c28 <iprintf>
 80162e2:	f06f 0305 	mvn.w	r3, #5
 80162e6:	e102      	b.n	80164ee <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 80162e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80162ea:	88db      	ldrh	r3, [r3, #6]
 80162ec:	b29b      	uxth	r3, r3
 80162ee:	4618      	mov	r0, r3
 80162f0:	f7f5 fb68 	bl	800b9c4 <lwip_htons>
 80162f4:	4603      	mov	r3, r0
 80162f6:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 80162f8:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80162fa:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80162fe:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8016302:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8016304:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8016308:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801630a:	68fb      	ldr	r3, [r7, #12]
 801630c:	891b      	ldrh	r3, [r3, #8]
 801630e:	3b14      	subs	r3, #20
 8016310:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 8016314:	e0e1      	b.n	80164da <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8016316:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8016318:	00db      	lsls	r3, r3, #3
 801631a:	b29b      	uxth	r3, r3
 801631c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8016320:	4293      	cmp	r3, r2
 8016322:	bf28      	it	cs
 8016324:	4613      	movcs	r3, r2
 8016326:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8016328:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801632c:	2114      	movs	r1, #20
 801632e:	200e      	movs	r0, #14
 8016330:	f7f6 fc56 	bl	800cbe0 <pbuf_alloc>
 8016334:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 8016336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016338:	2b00      	cmp	r3, #0
 801633a:	f000 80d5 	beq.w	80164e8 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801633e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016340:	895b      	ldrh	r3, [r3, #10]
 8016342:	2b13      	cmp	r3, #19
 8016344:	d806      	bhi.n	8016354 <ip4_frag+0xd0>
 8016346:	4b6c      	ldr	r3, [pc, #432]	@ (80164f8 <ip4_frag+0x274>)
 8016348:	f44f 7249 	mov.w	r2, #804	@ 0x324
 801634c:	496d      	ldr	r1, [pc, #436]	@ (8016504 <ip4_frag+0x280>)
 801634e:	486c      	ldr	r0, [pc, #432]	@ (8016500 <ip4_frag+0x27c>)
 8016350:	f000 fc6a 	bl	8016c28 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8016354:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016356:	685b      	ldr	r3, [r3, #4]
 8016358:	2214      	movs	r2, #20
 801635a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801635c:	4618      	mov	r0, r3
 801635e:	f000 fd94 	bl	8016e8a <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8016362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016364:	685b      	ldr	r3, [r3, #4]
 8016366:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 8016368:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801636a:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 801636e:	e064      	b.n	801643a <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8016370:	68fb      	ldr	r3, [r7, #12]
 8016372:	895a      	ldrh	r2, [r3, #10]
 8016374:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8016376:	1ad3      	subs	r3, r2, r3
 8016378:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801637a:	68fb      	ldr	r3, [r7, #12]
 801637c:	895b      	ldrh	r3, [r3, #10]
 801637e:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8016380:	429a      	cmp	r2, r3
 8016382:	d906      	bls.n	8016392 <ip4_frag+0x10e>
 8016384:	4b5c      	ldr	r3, [pc, #368]	@ (80164f8 <ip4_frag+0x274>)
 8016386:	f240 322d 	movw	r2, #813	@ 0x32d
 801638a:	495f      	ldr	r1, [pc, #380]	@ (8016508 <ip4_frag+0x284>)
 801638c:	485c      	ldr	r0, [pc, #368]	@ (8016500 <ip4_frag+0x27c>)
 801638e:	f000 fc4b 	bl	8016c28 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8016392:	8bfa      	ldrh	r2, [r7, #30]
 8016394:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8016398:	4293      	cmp	r3, r2
 801639a:	bf28      	it	cs
 801639c:	4613      	movcs	r3, r2
 801639e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 80163a2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80163a6:	2b00      	cmp	r3, #0
 80163a8:	d105      	bne.n	80163b6 <ip4_frag+0x132>
        poff = 0;
 80163aa:	2300      	movs	r3, #0
 80163ac:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 80163ae:	68fb      	ldr	r3, [r7, #12]
 80163b0:	681b      	ldr	r3, [r3, #0]
 80163b2:	60fb      	str	r3, [r7, #12]
        continue;
 80163b4:	e041      	b.n	801643a <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 80163b6:	f7ff ff0d 	bl	80161d4 <ip_frag_alloc_pbuf_custom_ref>
 80163ba:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 80163bc:	69bb      	ldr	r3, [r7, #24]
 80163be:	2b00      	cmp	r3, #0
 80163c0:	d103      	bne.n	80163ca <ip4_frag+0x146>
        pbuf_free(rambuf);
 80163c2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80163c4:	f7f6 fef0 	bl	800d1a8 <pbuf_free>
        goto memerr;
 80163c8:	e08f      	b.n	80164ea <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80163ca:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 80163cc:	68fb      	ldr	r3, [r7, #12]
 80163ce:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80163d0:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80163d2:	4413      	add	r3, r2
 80163d4:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 80163d8:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 80163dc:	9201      	str	r2, [sp, #4]
 80163de:	9300      	str	r3, [sp, #0]
 80163e0:	4603      	mov	r3, r0
 80163e2:	2241      	movs	r2, #65	@ 0x41
 80163e4:	2000      	movs	r0, #0
 80163e6:	f7f6 fd25 	bl	800ce34 <pbuf_alloced_custom>
 80163ea:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 80163ec:	697b      	ldr	r3, [r7, #20]
 80163ee:	2b00      	cmp	r3, #0
 80163f0:	d106      	bne.n	8016400 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 80163f2:	69b8      	ldr	r0, [r7, #24]
 80163f4:	f7ff fef6 	bl	80161e4 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 80163f8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80163fa:	f7f6 fed5 	bl	800d1a8 <pbuf_free>
        goto memerr;
 80163fe:	e074      	b.n	80164ea <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8016400:	68f8      	ldr	r0, [r7, #12]
 8016402:	f7f6 ff77 	bl	800d2f4 <pbuf_ref>
      pcr->original = p;
 8016406:	69bb      	ldr	r3, [r7, #24]
 8016408:	68fa      	ldr	r2, [r7, #12]
 801640a:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801640c:	69bb      	ldr	r3, [r7, #24]
 801640e:	4a3f      	ldr	r2, [pc, #252]	@ (801650c <ip4_frag+0x288>)
 8016410:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8016412:	6979      	ldr	r1, [r7, #20]
 8016414:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8016416:	f7f6 ff95 	bl	800d344 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801641a:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 801641e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8016422:	1ad3      	subs	r3, r2, r3
 8016424:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 8016428:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801642c:	2b00      	cmp	r3, #0
 801642e:	d004      	beq.n	801643a <ip4_frag+0x1b6>
        poff = 0;
 8016430:	2300      	movs	r3, #0
 8016432:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 8016434:	68fb      	ldr	r3, [r7, #12]
 8016436:	681b      	ldr	r3, [r3, #0]
 8016438:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801643a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801643e:	2b00      	cmp	r3, #0
 8016440:	d196      	bne.n	8016370 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8016442:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8016444:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8016448:	4413      	add	r3, r2
 801644a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801644c:	68bb      	ldr	r3, [r7, #8]
 801644e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8016450:	f1a3 0213 	sub.w	r2, r3, #19
 8016454:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8016458:	429a      	cmp	r2, r3
 801645a:	bfcc      	ite	gt
 801645c:	2301      	movgt	r3, #1
 801645e:	2300      	movle	r3, #0
 8016460:	b2db      	uxtb	r3, r3
 8016462:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8016464:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8016468:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801646c:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 801646e:	6a3b      	ldr	r3, [r7, #32]
 8016470:	2b00      	cmp	r3, #0
 8016472:	d002      	beq.n	801647a <ip4_frag+0x1f6>
 8016474:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016476:	2b00      	cmp	r3, #0
 8016478:	d003      	beq.n	8016482 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801647a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801647c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8016480:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8016482:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8016484:	4618      	mov	r0, r3
 8016486:	f7f5 fa9d 	bl	800b9c4 <lwip_htons>
 801648a:	4603      	mov	r3, r0
 801648c:	461a      	mov	r2, r3
 801648e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016490:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8016492:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8016494:	3314      	adds	r3, #20
 8016496:	b29b      	uxth	r3, r3
 8016498:	4618      	mov	r0, r3
 801649a:	f7f5 fa93 	bl	800b9c4 <lwip_htons>
 801649e:	4603      	mov	r3, r0
 80164a0:	461a      	mov	r2, r3
 80164a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80164a4:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 80164a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80164a8:	2200      	movs	r2, #0
 80164aa:	729a      	strb	r2, [r3, #10]
 80164ac:	2200      	movs	r2, #0
 80164ae:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 80164b0:	68bb      	ldr	r3, [r7, #8]
 80164b2:	695b      	ldr	r3, [r3, #20]
 80164b4:	687a      	ldr	r2, [r7, #4]
 80164b6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80164b8:	68b8      	ldr	r0, [r7, #8]
 80164ba:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 80164bc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80164be:	f7f6 fe73 	bl	800d1a8 <pbuf_free>
    left = (u16_t)(left - fragsize);
 80164c2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80164c6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80164c8:	1ad3      	subs	r3, r2, r3
 80164ca:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 80164ce:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 80164d2:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80164d4:	4413      	add	r3, r2
 80164d6:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 80164da:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80164de:	2b00      	cmp	r3, #0
 80164e0:	f47f af19 	bne.w	8016316 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 80164e4:	2300      	movs	r3, #0
 80164e6:	e002      	b.n	80164ee <ip4_frag+0x26a>
      goto memerr;
 80164e8:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 80164ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80164ee:	4618      	mov	r0, r3
 80164f0:	3748      	adds	r7, #72	@ 0x48
 80164f2:	46bd      	mov	sp, r7
 80164f4:	bd80      	pop	{r7, pc}
 80164f6:	bf00      	nop
 80164f8:	0801af7c 	.word	0x0801af7c
 80164fc:	0801b158 	.word	0x0801b158
 8016500:	0801afc4 	.word	0x0801afc4
 8016504:	0801b174 	.word	0x0801b174
 8016508:	0801b194 	.word	0x0801b194
 801650c:	0801621d 	.word	0x0801621d

08016510 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8016510:	b580      	push	{r7, lr}
 8016512:	b086      	sub	sp, #24
 8016514:	af00      	add	r7, sp, #0
 8016516:	6078      	str	r0, [r7, #4]
 8016518:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801651a:	230e      	movs	r3, #14
 801651c:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801651e:	687b      	ldr	r3, [r7, #4]
 8016520:	895b      	ldrh	r3, [r3, #10]
 8016522:	2b0e      	cmp	r3, #14
 8016524:	d96e      	bls.n	8016604 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8016526:	687b      	ldr	r3, [r7, #4]
 8016528:	7bdb      	ldrb	r3, [r3, #15]
 801652a:	2b00      	cmp	r3, #0
 801652c:	d106      	bne.n	801653c <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801652e:	683b      	ldr	r3, [r7, #0]
 8016530:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8016534:	3301      	adds	r3, #1
 8016536:	b2da      	uxtb	r2, r3
 8016538:	687b      	ldr	r3, [r7, #4]
 801653a:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801653c:	687b      	ldr	r3, [r7, #4]
 801653e:	685b      	ldr	r3, [r3, #4]
 8016540:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8016542:	693b      	ldr	r3, [r7, #16]
 8016544:	7b1a      	ldrb	r2, [r3, #12]
 8016546:	7b5b      	ldrb	r3, [r3, #13]
 8016548:	021b      	lsls	r3, r3, #8
 801654a:	4313      	orrs	r3, r2
 801654c:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801654e:	693b      	ldr	r3, [r7, #16]
 8016550:	781b      	ldrb	r3, [r3, #0]
 8016552:	f003 0301 	and.w	r3, r3, #1
 8016556:	2b00      	cmp	r3, #0
 8016558:	d023      	beq.n	80165a2 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801655a:	693b      	ldr	r3, [r7, #16]
 801655c:	781b      	ldrb	r3, [r3, #0]
 801655e:	2b01      	cmp	r3, #1
 8016560:	d10f      	bne.n	8016582 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8016562:	693b      	ldr	r3, [r7, #16]
 8016564:	785b      	ldrb	r3, [r3, #1]
 8016566:	2b00      	cmp	r3, #0
 8016568:	d11b      	bne.n	80165a2 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801656a:	693b      	ldr	r3, [r7, #16]
 801656c:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801656e:	2b5e      	cmp	r3, #94	@ 0x5e
 8016570:	d117      	bne.n	80165a2 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8016572:	687b      	ldr	r3, [r7, #4]
 8016574:	7b5b      	ldrb	r3, [r3, #13]
 8016576:	f043 0310 	orr.w	r3, r3, #16
 801657a:	b2da      	uxtb	r2, r3
 801657c:	687b      	ldr	r3, [r7, #4]
 801657e:	735a      	strb	r2, [r3, #13]
 8016580:	e00f      	b.n	80165a2 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8016582:	693b      	ldr	r3, [r7, #16]
 8016584:	2206      	movs	r2, #6
 8016586:	4928      	ldr	r1, [pc, #160]	@ (8016628 <ethernet_input+0x118>)
 8016588:	4618      	mov	r0, r3
 801658a:	f000 fba2 	bl	8016cd2 <memcmp>
 801658e:	4603      	mov	r3, r0
 8016590:	2b00      	cmp	r3, #0
 8016592:	d106      	bne.n	80165a2 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8016594:	687b      	ldr	r3, [r7, #4]
 8016596:	7b5b      	ldrb	r3, [r3, #13]
 8016598:	f043 0308 	orr.w	r3, r3, #8
 801659c:	b2da      	uxtb	r2, r3
 801659e:	687b      	ldr	r3, [r7, #4]
 80165a0:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 80165a2:	89fb      	ldrh	r3, [r7, #14]
 80165a4:	2b08      	cmp	r3, #8
 80165a6:	d003      	beq.n	80165b0 <ethernet_input+0xa0>
 80165a8:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 80165ac:	d014      	beq.n	80165d8 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 80165ae:	e032      	b.n	8016616 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80165b0:	683b      	ldr	r3, [r7, #0]
 80165b2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80165b6:	f003 0308 	and.w	r3, r3, #8
 80165ba:	2b00      	cmp	r3, #0
 80165bc:	d024      	beq.n	8016608 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80165be:	8afb      	ldrh	r3, [r7, #22]
 80165c0:	4619      	mov	r1, r3
 80165c2:	6878      	ldr	r0, [r7, #4]
 80165c4:	f7f6 fd6a 	bl	800d09c <pbuf_remove_header>
 80165c8:	4603      	mov	r3, r0
 80165ca:	2b00      	cmp	r3, #0
 80165cc:	d11e      	bne.n	801660c <ethernet_input+0xfc>
        ip4_input(p, netif);
 80165ce:	6839      	ldr	r1, [r7, #0]
 80165d0:	6878      	ldr	r0, [r7, #4]
 80165d2:	f7fe ff21 	bl	8015418 <ip4_input>
      break;
 80165d6:	e013      	b.n	8016600 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80165d8:	683b      	ldr	r3, [r7, #0]
 80165da:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80165de:	f003 0308 	and.w	r3, r3, #8
 80165e2:	2b00      	cmp	r3, #0
 80165e4:	d014      	beq.n	8016610 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80165e6:	8afb      	ldrh	r3, [r7, #22]
 80165e8:	4619      	mov	r1, r3
 80165ea:	6878      	ldr	r0, [r7, #4]
 80165ec:	f7f6 fd56 	bl	800d09c <pbuf_remove_header>
 80165f0:	4603      	mov	r3, r0
 80165f2:	2b00      	cmp	r3, #0
 80165f4:	d10e      	bne.n	8016614 <ethernet_input+0x104>
        etharp_input(p, netif);
 80165f6:	6839      	ldr	r1, [r7, #0]
 80165f8:	6878      	ldr	r0, [r7, #4]
 80165fa:	f7fe f8c1 	bl	8014780 <etharp_input>
      break;
 80165fe:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8016600:	2300      	movs	r3, #0
 8016602:	e00c      	b.n	801661e <ethernet_input+0x10e>
    goto free_and_return;
 8016604:	bf00      	nop
 8016606:	e006      	b.n	8016616 <ethernet_input+0x106>
        goto free_and_return;
 8016608:	bf00      	nop
 801660a:	e004      	b.n	8016616 <ethernet_input+0x106>
        goto free_and_return;
 801660c:	bf00      	nop
 801660e:	e002      	b.n	8016616 <ethernet_input+0x106>
        goto free_and_return;
 8016610:	bf00      	nop
 8016612:	e000      	b.n	8016616 <ethernet_input+0x106>
        goto free_and_return;
 8016614:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8016616:	6878      	ldr	r0, [r7, #4]
 8016618:	f7f6 fdc6 	bl	800d1a8 <pbuf_free>
  return ERR_OK;
 801661c:	2300      	movs	r3, #0
}
 801661e:	4618      	mov	r0, r3
 8016620:	3718      	adds	r7, #24
 8016622:	46bd      	mov	sp, r7
 8016624:	bd80      	pop	{r7, pc}
 8016626:	bf00      	nop
 8016628:	0801b398 	.word	0x0801b398

0801662c <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801662c:	b580      	push	{r7, lr}
 801662e:	b086      	sub	sp, #24
 8016630:	af00      	add	r7, sp, #0
 8016632:	60f8      	str	r0, [r7, #12]
 8016634:	60b9      	str	r1, [r7, #8]
 8016636:	607a      	str	r2, [r7, #4]
 8016638:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801663a:	8c3b      	ldrh	r3, [r7, #32]
 801663c:	4618      	mov	r0, r3
 801663e:	f7f5 f9c1 	bl	800b9c4 <lwip_htons>
 8016642:	4603      	mov	r3, r0
 8016644:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8016646:	210e      	movs	r1, #14
 8016648:	68b8      	ldr	r0, [r7, #8]
 801664a:	f7f6 fd17 	bl	800d07c <pbuf_add_header>
 801664e:	4603      	mov	r3, r0
 8016650:	2b00      	cmp	r3, #0
 8016652:	d125      	bne.n	80166a0 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8016654:	68bb      	ldr	r3, [r7, #8]
 8016656:	685b      	ldr	r3, [r3, #4]
 8016658:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801665a:	693b      	ldr	r3, [r7, #16]
 801665c:	8afa      	ldrh	r2, [r7, #22]
 801665e:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8016660:	693b      	ldr	r3, [r7, #16]
 8016662:	2206      	movs	r2, #6
 8016664:	6839      	ldr	r1, [r7, #0]
 8016666:	4618      	mov	r0, r3
 8016668:	f000 fc0f 	bl	8016e8a <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801666c:	693b      	ldr	r3, [r7, #16]
 801666e:	3306      	adds	r3, #6
 8016670:	2206      	movs	r2, #6
 8016672:	6879      	ldr	r1, [r7, #4]
 8016674:	4618      	mov	r0, r3
 8016676:	f000 fc08 	bl	8016e8a <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801667a:	68fb      	ldr	r3, [r7, #12]
 801667c:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8016680:	2b06      	cmp	r3, #6
 8016682:	d006      	beq.n	8016692 <ethernet_output+0x66>
 8016684:	4b0a      	ldr	r3, [pc, #40]	@ (80166b0 <ethernet_output+0x84>)
 8016686:	f44f 7299 	mov.w	r2, #306	@ 0x132
 801668a:	490a      	ldr	r1, [pc, #40]	@ (80166b4 <ethernet_output+0x88>)
 801668c:	480a      	ldr	r0, [pc, #40]	@ (80166b8 <ethernet_output+0x8c>)
 801668e:	f000 facb 	bl	8016c28 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8016692:	68fb      	ldr	r3, [r7, #12]
 8016694:	699b      	ldr	r3, [r3, #24]
 8016696:	68b9      	ldr	r1, [r7, #8]
 8016698:	68f8      	ldr	r0, [r7, #12]
 801669a:	4798      	blx	r3
 801669c:	4603      	mov	r3, r0
 801669e:	e002      	b.n	80166a6 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 80166a0:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 80166a2:	f06f 0301 	mvn.w	r3, #1
}
 80166a6:	4618      	mov	r0, r3
 80166a8:	3718      	adds	r7, #24
 80166aa:	46bd      	mov	sp, r7
 80166ac:	bd80      	pop	{r7, pc}
 80166ae:	bf00      	nop
 80166b0:	0801b1a4 	.word	0x0801b1a4
 80166b4:	0801b1dc 	.word	0x0801b1dc
 80166b8:	0801b210 	.word	0x0801b210

080166bc <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 80166bc:	b580      	push	{r7, lr}
 80166be:	b082      	sub	sp, #8
 80166c0:	af00      	add	r7, sp, #0
 80166c2:	6078      	str	r0, [r7, #4]
 80166c4:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 80166c6:	683b      	ldr	r3, [r7, #0]
 80166c8:	2200      	movs	r2, #0
 80166ca:	2104      	movs	r1, #4
 80166cc:	4618      	mov	r0, r3
 80166ce:	f7ef fb0d 	bl	8005cec <osMessageQueueNew>
 80166d2:	4602      	mov	r2, r0
 80166d4:	687b      	ldr	r3, [r7, #4]
 80166d6:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 80166d8:	687b      	ldr	r3, [r7, #4]
 80166da:	681b      	ldr	r3, [r3, #0]
 80166dc:	2b00      	cmp	r3, #0
 80166de:	d102      	bne.n	80166e6 <sys_mbox_new+0x2a>
    return ERR_MEM;
 80166e0:	f04f 33ff 	mov.w	r3, #4294967295
 80166e4:	e000      	b.n	80166e8 <sys_mbox_new+0x2c>

  return ERR_OK;
 80166e6:	2300      	movs	r3, #0
}
 80166e8:	4618      	mov	r0, r3
 80166ea:	3708      	adds	r7, #8
 80166ec:	46bd      	mov	sp, r7
 80166ee:	bd80      	pop	{r7, pc}

080166f0 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 80166f0:	b580      	push	{r7, lr}
 80166f2:	b082      	sub	sp, #8
 80166f4:	af00      	add	r7, sp, #0
 80166f6:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
#else
  if(osMessageQueueGetCount(*mbox))
 80166f8:	687b      	ldr	r3, [r7, #4]
 80166fa:	681b      	ldr	r3, [r3, #0]
 80166fc:	4618      	mov	r0, r3
 80166fe:	f7ef fc27 	bl	8005f50 <osMessageQueueGetCount>

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
#else
  osMessageQueueDelete(*mbox);
 8016702:	687b      	ldr	r3, [r7, #4]
 8016704:	681b      	ldr	r3, [r3, #0]
 8016706:	4618      	mov	r0, r3
 8016708:	f7ef fc42 	bl	8005f90 <osMessageQueueDelete>
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 801670c:	bf00      	nop
 801670e:	3708      	adds	r7, #8
 8016710:	46bd      	mov	sp, r7
 8016712:	bd80      	pop	{r7, pc}

08016714 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8016714:	b580      	push	{r7, lr}
 8016716:	b084      	sub	sp, #16
 8016718:	af00      	add	r7, sp, #0
 801671a:	6078      	str	r0, [r7, #4]
 801671c:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 801671e:	687b      	ldr	r3, [r7, #4]
 8016720:	6818      	ldr	r0, [r3, #0]
 8016722:	4639      	mov	r1, r7
 8016724:	2300      	movs	r3, #0
 8016726:	2200      	movs	r2, #0
 8016728:	f7ef fb54 	bl	8005dd4 <osMessageQueuePut>
 801672c:	4603      	mov	r3, r0
 801672e:	2b00      	cmp	r3, #0
 8016730:	d102      	bne.n	8016738 <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 8016732:	2300      	movs	r3, #0
 8016734:	73fb      	strb	r3, [r7, #15]
 8016736:	e001      	b.n	801673c <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8016738:	23ff      	movs	r3, #255	@ 0xff
 801673a:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 801673c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8016740:	4618      	mov	r0, r3
 8016742:	3710      	adds	r7, #16
 8016744:	46bd      	mov	sp, r7
 8016746:	bd80      	pop	{r7, pc}

08016748 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8016748:	b580      	push	{r7, lr}
 801674a:	b086      	sub	sp, #24
 801674c:	af00      	add	r7, sp, #0
 801674e:	60f8      	str	r0, [r7, #12]
 8016750:	60b9      	str	r1, [r7, #8]
 8016752:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 8016754:	f7ee ffb6 	bl	80056c4 <osKernelGetTickCount>
 8016758:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 801675a:	687b      	ldr	r3, [r7, #4]
 801675c:	2b00      	cmp	r3, #0
 801675e:	d013      	beq.n	8016788 <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 8016760:	68fb      	ldr	r3, [r7, #12]
 8016762:	6818      	ldr	r0, [r3, #0]
 8016764:	687b      	ldr	r3, [r7, #4]
 8016766:	2200      	movs	r2, #0
 8016768:	68b9      	ldr	r1, [r7, #8]
 801676a:	f7ef fb93 	bl	8005e94 <osMessageQueueGet>
 801676e:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 8016770:	693b      	ldr	r3, [r7, #16]
 8016772:	2b00      	cmp	r3, #0
 8016774:	d105      	bne.n	8016782 <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 8016776:	f7ee ffa5 	bl	80056c4 <osKernelGetTickCount>
 801677a:	4602      	mov	r2, r0
 801677c:	697b      	ldr	r3, [r7, #20]
 801677e:	1ad3      	subs	r3, r2, r3
 8016780:	e00f      	b.n	80167a2 <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8016782:	f04f 33ff 	mov.w	r3, #4294967295
 8016786:	e00c      	b.n	80167a2 <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 8016788:	68fb      	ldr	r3, [r7, #12]
 801678a:	6818      	ldr	r0, [r3, #0]
 801678c:	f04f 33ff 	mov.w	r3, #4294967295
 8016790:	2200      	movs	r2, #0
 8016792:	68b9      	ldr	r1, [r7, #8]
 8016794:	f7ef fb7e 	bl	8005e94 <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 8016798:	f7ee ff94 	bl	80056c4 <osKernelGetTickCount>
 801679c:	4602      	mov	r2, r0
 801679e:	697b      	ldr	r3, [r7, #20]
 80167a0:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 80167a2:	4618      	mov	r0, r3
 80167a4:	3718      	adds	r7, #24
 80167a6:	46bd      	mov	sp, r7
 80167a8:	bd80      	pop	{r7, pc}

080167aa <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 80167aa:	b580      	push	{r7, lr}
 80167ac:	b082      	sub	sp, #8
 80167ae:	af00      	add	r7, sp, #0
 80167b0:	6078      	str	r0, [r7, #4]
 80167b2:	6039      	str	r1, [r7, #0]

  if(event.status == osEventMessage)
  {
    *msg = (void *)event.value.v;
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
 80167b4:	687b      	ldr	r3, [r7, #4]
 80167b6:	6818      	ldr	r0, [r3, #0]
 80167b8:	2300      	movs	r3, #0
 80167ba:	2200      	movs	r2, #0
 80167bc:	6839      	ldr	r1, [r7, #0]
 80167be:	f7ef fb69 	bl	8005e94 <osMessageQueueGet>
 80167c2:	4603      	mov	r3, r0
 80167c4:	2b00      	cmp	r3, #0
 80167c6:	d101      	bne.n	80167cc <sys_arch_mbox_tryfetch+0x22>
  {
#endif
    return ERR_OK;
 80167c8:	2300      	movs	r3, #0
 80167ca:	e001      	b.n	80167d0 <sys_arch_mbox_tryfetch+0x26>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 80167cc:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 80167d0:	4618      	mov	r0, r3
 80167d2:	3708      	adds	r7, #8
 80167d4:	46bd      	mov	sp, r7
 80167d6:	bd80      	pop	{r7, pc}

080167d8 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 80167d8:	b480      	push	{r7}
 80167da:	b083      	sub	sp, #12
 80167dc:	af00      	add	r7, sp, #0
 80167de:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 80167e0:	687b      	ldr	r3, [r7, #4]
 80167e2:	681b      	ldr	r3, [r3, #0]
 80167e4:	2b00      	cmp	r3, #0
 80167e6:	d101      	bne.n	80167ec <sys_mbox_valid+0x14>
    return 0;
 80167e8:	2300      	movs	r3, #0
 80167ea:	e000      	b.n	80167ee <sys_mbox_valid+0x16>
  else
    return 1;
 80167ec:	2301      	movs	r3, #1
}
 80167ee:	4618      	mov	r0, r3
 80167f0:	370c      	adds	r7, #12
 80167f2:	46bd      	mov	sp, r7
 80167f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167f8:	4770      	bx	lr

080167fa <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 80167fa:	b480      	push	{r7}
 80167fc:	b083      	sub	sp, #12
 80167fe:	af00      	add	r7, sp, #0
 8016800:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 8016802:	687b      	ldr	r3, [r7, #4]
 8016804:	2200      	movs	r2, #0
 8016806:	601a      	str	r2, [r3, #0]
}
 8016808:	bf00      	nop
 801680a:	370c      	adds	r7, #12
 801680c:	46bd      	mov	sp, r7
 801680e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016812:	4770      	bx	lr

08016814 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 8016814:	b580      	push	{r7, lr}
 8016816:	b082      	sub	sp, #8
 8016818:	af00      	add	r7, sp, #0
 801681a:	6078      	str	r0, [r7, #4]
 801681c:	460b      	mov	r3, r1
 801681e:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
 8016820:	78fb      	ldrb	r3, [r7, #3]
 8016822:	2200      	movs	r2, #0
 8016824:	4619      	mov	r1, r3
 8016826:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 801682a:	f7ef f91b 	bl	8005a64 <osSemaphoreNew>
 801682e:	4602      	mov	r2, r0
 8016830:	687b      	ldr	r3, [r7, #4]
 8016832:	601a      	str	r2, [r3, #0]
#endif

  if(*sem == NULL)
 8016834:	687b      	ldr	r3, [r7, #4]
 8016836:	681b      	ldr	r3, [r3, #0]
 8016838:	2b00      	cmp	r3, #0
 801683a:	d102      	bne.n	8016842 <sys_sem_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801683c:	f04f 33ff 	mov.w	r3, #4294967295
 8016840:	e009      	b.n	8016856 <sys_sem_new+0x42>
  }

  if(count == 0)	// Means it can't be taken
 8016842:	78fb      	ldrb	r3, [r7, #3]
 8016844:	2b00      	cmp	r3, #0
 8016846:	d105      	bne.n	8016854 <sys_sem_new+0x40>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
#else
    osSemaphoreAcquire(*sem, 0);
 8016848:	687b      	ldr	r3, [r7, #4]
 801684a:	681b      	ldr	r3, [r3, #0]
 801684c:	2100      	movs	r1, #0
 801684e:	4618      	mov	r0, r3
 8016850:	f7ef f992 	bl	8005b78 <osSemaphoreAcquire>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 8016854:	2300      	movs	r3, #0
}
 8016856:	4618      	mov	r0, r3
 8016858:	3708      	adds	r7, #8
 801685a:	46bd      	mov	sp, r7
 801685c:	bd80      	pop	{r7, pc}

0801685e <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 801685e:	b580      	push	{r7, lr}
 8016860:	b084      	sub	sp, #16
 8016862:	af00      	add	r7, sp, #0
 8016864:	6078      	str	r0, [r7, #4]
 8016866:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
#else
  uint32_t starttime = osKernelGetTickCount();
 8016868:	f7ee ff2c 	bl	80056c4 <osKernelGetTickCount>
 801686c:	60f8      	str	r0, [r7, #12]
#endif
  if(timeout != 0)
 801686e:	683b      	ldr	r3, [r7, #0]
 8016870:	2b00      	cmp	r3, #0
 8016872:	d011      	beq.n	8016898 <sys_arch_sem_wait+0x3a>
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
    {
      return (osKernelSysTick() - starttime);
#else
    if(osSemaphoreAcquire(*sem, timeout) == osOK)
 8016874:	687b      	ldr	r3, [r7, #4]
 8016876:	681b      	ldr	r3, [r3, #0]
 8016878:	6839      	ldr	r1, [r7, #0]
 801687a:	4618      	mov	r0, r3
 801687c:	f7ef f97c 	bl	8005b78 <osSemaphoreAcquire>
 8016880:	4603      	mov	r3, r0
 8016882:	2b00      	cmp	r3, #0
 8016884:	d105      	bne.n	8016892 <sys_arch_sem_wait+0x34>
    {
        return (osKernelGetTickCount() - starttime);
 8016886:	f7ee ff1d 	bl	80056c4 <osKernelGetTickCount>
 801688a:	4602      	mov	r2, r0
 801688c:	68fb      	ldr	r3, [r7, #12]
 801688e:	1ad3      	subs	r3, r2, r3
 8016890:	e012      	b.n	80168b8 <sys_arch_sem_wait+0x5a>
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 8016892:	f04f 33ff 	mov.w	r3, #4294967295
 8016896:	e00f      	b.n	80168b8 <sys_arch_sem_wait+0x5a>
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
    return (osKernelSysTick() - starttime);
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
 8016898:	bf00      	nop
 801689a:	687b      	ldr	r3, [r7, #4]
 801689c:	681b      	ldr	r3, [r3, #0]
 801689e:	f04f 31ff 	mov.w	r1, #4294967295
 80168a2:	4618      	mov	r0, r3
 80168a4:	f7ef f968 	bl	8005b78 <osSemaphoreAcquire>
 80168a8:	4603      	mov	r3, r0
 80168aa:	2b00      	cmp	r3, #0
 80168ac:	d1f5      	bne.n	801689a <sys_arch_sem_wait+0x3c>
    return (osKernelGetTickCount() - starttime);
 80168ae:	f7ee ff09 	bl	80056c4 <osKernelGetTickCount>
 80168b2:	4602      	mov	r2, r0
 80168b4:	68fb      	ldr	r3, [r7, #12]
 80168b6:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 80168b8:	4618      	mov	r0, r3
 80168ba:	3710      	adds	r7, #16
 80168bc:	46bd      	mov	sp, r7
 80168be:	bd80      	pop	{r7, pc}

080168c0 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 80168c0:	b580      	push	{r7, lr}
 80168c2:	b082      	sub	sp, #8
 80168c4:	af00      	add	r7, sp, #0
 80168c6:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 80168c8:	687b      	ldr	r3, [r7, #4]
 80168ca:	681b      	ldr	r3, [r3, #0]
 80168cc:	4618      	mov	r0, r3
 80168ce:	f7ef f9a5 	bl	8005c1c <osSemaphoreRelease>
}
 80168d2:	bf00      	nop
 80168d4:	3708      	adds	r7, #8
 80168d6:	46bd      	mov	sp, r7
 80168d8:	bd80      	pop	{r7, pc}

080168da <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 80168da:	b580      	push	{r7, lr}
 80168dc:	b082      	sub	sp, #8
 80168de:	af00      	add	r7, sp, #0
 80168e0:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 80168e2:	687b      	ldr	r3, [r7, #4]
 80168e4:	681b      	ldr	r3, [r3, #0]
 80168e6:	4618      	mov	r0, r3
 80168e8:	f7ef f9dc 	bl	8005ca4 <osSemaphoreDelete>
}
 80168ec:	bf00      	nop
 80168ee:	3708      	adds	r7, #8
 80168f0:	46bd      	mov	sp, r7
 80168f2:	bd80      	pop	{r7, pc}

080168f4 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 80168f4:	b480      	push	{r7}
 80168f6:	b083      	sub	sp, #12
 80168f8:	af00      	add	r7, sp, #0
 80168fa:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 80168fc:	687b      	ldr	r3, [r7, #4]
 80168fe:	681b      	ldr	r3, [r3, #0]
 8016900:	2b00      	cmp	r3, #0
 8016902:	d101      	bne.n	8016908 <sys_sem_valid+0x14>
    return 0;
 8016904:	2300      	movs	r3, #0
 8016906:	e000      	b.n	801690a <sys_sem_valid+0x16>
  else
    return 1;
 8016908:	2301      	movs	r3, #1
}
 801690a:	4618      	mov	r0, r3
 801690c:	370c      	adds	r7, #12
 801690e:	46bd      	mov	sp, r7
 8016910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016914:	4770      	bx	lr

08016916 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 8016916:	b480      	push	{r7}
 8016918:	b083      	sub	sp, #12
 801691a:	af00      	add	r7, sp, #0
 801691c:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 801691e:	687b      	ldr	r3, [r7, #4]
 8016920:	2200      	movs	r2, #0
 8016922:	601a      	str	r2, [r3, #0]
}
 8016924:	bf00      	nop
 8016926:	370c      	adds	r7, #12
 8016928:	46bd      	mov	sp, r7
 801692a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801692e:	4770      	bx	lr

08016930 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8016930:	b580      	push	{r7, lr}
 8016932:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 8016934:	2000      	movs	r0, #0
 8016936:	f7ee ff87 	bl	8005848 <osMutexNew>
 801693a:	4603      	mov	r3, r0
 801693c:	4a01      	ldr	r2, [pc, #4]	@ (8016944 <sys_init+0x14>)
 801693e:	6013      	str	r3, [r2, #0]
#endif
}
 8016940:	bf00      	nop
 8016942:	bd80      	pop	{r7, pc}
 8016944:	2000f544 	.word	0x2000f544

08016948 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8016948:	b580      	push	{r7, lr}
 801694a:	b082      	sub	sp, #8
 801694c:	af00      	add	r7, sp, #0
 801694e:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 8016950:	2000      	movs	r0, #0
 8016952:	f7ee ff79 	bl	8005848 <osMutexNew>
 8016956:	4602      	mov	r2, r0
 8016958:	687b      	ldr	r3, [r7, #4]
 801695a:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 801695c:	687b      	ldr	r3, [r7, #4]
 801695e:	681b      	ldr	r3, [r3, #0]
 8016960:	2b00      	cmp	r3, #0
 8016962:	d102      	bne.n	801696a <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8016964:	f04f 33ff 	mov.w	r3, #4294967295
 8016968:	e000      	b.n	801696c <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801696a:	2300      	movs	r3, #0
}
 801696c:	4618      	mov	r0, r3
 801696e:	3708      	adds	r7, #8
 8016970:	46bd      	mov	sp, r7
 8016972:	bd80      	pop	{r7, pc}

08016974 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8016974:	b580      	push	{r7, lr}
 8016976:	b082      	sub	sp, #8
 8016978:	af00      	add	r7, sp, #0
 801697a:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 801697c:	687b      	ldr	r3, [r7, #4]
 801697e:	681b      	ldr	r3, [r3, #0]
 8016980:	f04f 31ff 	mov.w	r1, #4294967295
 8016984:	4618      	mov	r0, r3
 8016986:	f7ee ffe5 	bl	8005954 <osMutexAcquire>
#endif
}
 801698a:	bf00      	nop
 801698c:	3708      	adds	r7, #8
 801698e:	46bd      	mov	sp, r7
 8016990:	bd80      	pop	{r7, pc}

08016992 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8016992:	b580      	push	{r7, lr}
 8016994:	b082      	sub	sp, #8
 8016996:	af00      	add	r7, sp, #0
 8016998:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801699a:	687b      	ldr	r3, [r7, #4]
 801699c:	681b      	ldr	r3, [r3, #0]
 801699e:	4618      	mov	r0, r3
 80169a0:	f7ef f823 	bl	80059ea <osMutexRelease>
}
 80169a4:	bf00      	nop
 80169a6:	3708      	adds	r7, #8
 80169a8:	46bd      	mov	sp, r7
 80169aa:	bd80      	pop	{r7, pc}

080169ac <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 80169ac:	b580      	push	{r7, lr}
 80169ae:	b08e      	sub	sp, #56	@ 0x38
 80169b0:	af00      	add	r7, sp, #0
 80169b2:	60f8      	str	r0, [r7, #12]
 80169b4:	60b9      	str	r1, [r7, #8]
 80169b6:	607a      	str	r2, [r7, #4]
 80169b8:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 80169ba:	f107 0314 	add.w	r3, r7, #20
 80169be:	2224      	movs	r2, #36	@ 0x24
 80169c0:	2100      	movs	r1, #0
 80169c2:	4618      	mov	r0, r3
 80169c4:	f000 f995 	bl	8016cf2 <memset>
 80169c8:	68fb      	ldr	r3, [r7, #12]
 80169ca:	617b      	str	r3, [r7, #20]
 80169cc:	683b      	ldr	r3, [r7, #0]
 80169ce:	62bb      	str	r3, [r7, #40]	@ 0x28
 80169d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80169d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 80169d4:	f107 0314 	add.w	r3, r7, #20
 80169d8:	461a      	mov	r2, r3
 80169da:	6879      	ldr	r1, [r7, #4]
 80169dc:	68b8      	ldr	r0, [r7, #8]
 80169de:	f7ee fe86 	bl	80056ee <osThreadNew>
 80169e2:	4603      	mov	r3, r0
#endif
}
 80169e4:	4618      	mov	r0, r3
 80169e6:	3738      	adds	r7, #56	@ 0x38
 80169e8:	46bd      	mov	sp, r7
 80169ea:	bd80      	pop	{r7, pc}

080169ec <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 80169ec:	b580      	push	{r7, lr}
 80169ee:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 80169f0:	4b04      	ldr	r3, [pc, #16]	@ (8016a04 <sys_arch_protect+0x18>)
 80169f2:	681b      	ldr	r3, [r3, #0]
 80169f4:	f04f 31ff 	mov.w	r1, #4294967295
 80169f8:	4618      	mov	r0, r3
 80169fa:	f7ee ffab 	bl	8005954 <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 80169fe:	2301      	movs	r3, #1
}
 8016a00:	4618      	mov	r0, r3
 8016a02:	bd80      	pop	{r7, pc}
 8016a04:	2000f544 	.word	0x2000f544

08016a08 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8016a08:	b580      	push	{r7, lr}
 8016a0a:	b082      	sub	sp, #8
 8016a0c:	af00      	add	r7, sp, #0
 8016a0e:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8016a10:	4b04      	ldr	r3, [pc, #16]	@ (8016a24 <sys_arch_unprotect+0x1c>)
 8016a12:	681b      	ldr	r3, [r3, #0]
 8016a14:	4618      	mov	r0, r3
 8016a16:	f7ee ffe8 	bl	80059ea <osMutexRelease>
}
 8016a1a:	bf00      	nop
 8016a1c:	3708      	adds	r7, #8
 8016a1e:	46bd      	mov	sp, r7
 8016a20:	bd80      	pop	{r7, pc}
 8016a22:	bf00      	nop
 8016a24:	2000f544 	.word	0x2000f544

08016a28 <rand>:
 8016a28:	4b16      	ldr	r3, [pc, #88]	@ (8016a84 <rand+0x5c>)
 8016a2a:	b510      	push	{r4, lr}
 8016a2c:	681c      	ldr	r4, [r3, #0]
 8016a2e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8016a30:	b9b3      	cbnz	r3, 8016a60 <rand+0x38>
 8016a32:	2018      	movs	r0, #24
 8016a34:	f000 faa0 	bl	8016f78 <malloc>
 8016a38:	4602      	mov	r2, r0
 8016a3a:	6320      	str	r0, [r4, #48]	@ 0x30
 8016a3c:	b920      	cbnz	r0, 8016a48 <rand+0x20>
 8016a3e:	4b12      	ldr	r3, [pc, #72]	@ (8016a88 <rand+0x60>)
 8016a40:	4812      	ldr	r0, [pc, #72]	@ (8016a8c <rand+0x64>)
 8016a42:	2152      	movs	r1, #82	@ 0x52
 8016a44:	f000 fa30 	bl	8016ea8 <__assert_func>
 8016a48:	4911      	ldr	r1, [pc, #68]	@ (8016a90 <rand+0x68>)
 8016a4a:	4b12      	ldr	r3, [pc, #72]	@ (8016a94 <rand+0x6c>)
 8016a4c:	e9c0 1300 	strd	r1, r3, [r0]
 8016a50:	4b11      	ldr	r3, [pc, #68]	@ (8016a98 <rand+0x70>)
 8016a52:	6083      	str	r3, [r0, #8]
 8016a54:	230b      	movs	r3, #11
 8016a56:	8183      	strh	r3, [r0, #12]
 8016a58:	2100      	movs	r1, #0
 8016a5a:	2001      	movs	r0, #1
 8016a5c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8016a60:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8016a62:	480e      	ldr	r0, [pc, #56]	@ (8016a9c <rand+0x74>)
 8016a64:	690b      	ldr	r3, [r1, #16]
 8016a66:	694c      	ldr	r4, [r1, #20]
 8016a68:	4a0d      	ldr	r2, [pc, #52]	@ (8016aa0 <rand+0x78>)
 8016a6a:	4358      	muls	r0, r3
 8016a6c:	fb02 0004 	mla	r0, r2, r4, r0
 8016a70:	fba3 3202 	umull	r3, r2, r3, r2
 8016a74:	3301      	adds	r3, #1
 8016a76:	eb40 0002 	adc.w	r0, r0, r2
 8016a7a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8016a7e:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8016a82:	bd10      	pop	{r4, pc}
 8016a84:	2000013c 	.word	0x2000013c
 8016a88:	0801b3a6 	.word	0x0801b3a6
 8016a8c:	0801b3bd 	.word	0x0801b3bd
 8016a90:	abcd330e 	.word	0xabcd330e
 8016a94:	e66d1234 	.word	0xe66d1234
 8016a98:	0005deec 	.word	0x0005deec
 8016a9c:	5851f42d 	.word	0x5851f42d
 8016aa0:	4c957f2d 	.word	0x4c957f2d

08016aa4 <std>:
 8016aa4:	2300      	movs	r3, #0
 8016aa6:	b510      	push	{r4, lr}
 8016aa8:	4604      	mov	r4, r0
 8016aaa:	e9c0 3300 	strd	r3, r3, [r0]
 8016aae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8016ab2:	6083      	str	r3, [r0, #8]
 8016ab4:	8181      	strh	r1, [r0, #12]
 8016ab6:	6643      	str	r3, [r0, #100]	@ 0x64
 8016ab8:	81c2      	strh	r2, [r0, #14]
 8016aba:	6183      	str	r3, [r0, #24]
 8016abc:	4619      	mov	r1, r3
 8016abe:	2208      	movs	r2, #8
 8016ac0:	305c      	adds	r0, #92	@ 0x5c
 8016ac2:	f000 f916 	bl	8016cf2 <memset>
 8016ac6:	4b0d      	ldr	r3, [pc, #52]	@ (8016afc <std+0x58>)
 8016ac8:	6263      	str	r3, [r4, #36]	@ 0x24
 8016aca:	4b0d      	ldr	r3, [pc, #52]	@ (8016b00 <std+0x5c>)
 8016acc:	62a3      	str	r3, [r4, #40]	@ 0x28
 8016ace:	4b0d      	ldr	r3, [pc, #52]	@ (8016b04 <std+0x60>)
 8016ad0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8016ad2:	4b0d      	ldr	r3, [pc, #52]	@ (8016b08 <std+0x64>)
 8016ad4:	6323      	str	r3, [r4, #48]	@ 0x30
 8016ad6:	4b0d      	ldr	r3, [pc, #52]	@ (8016b0c <std+0x68>)
 8016ad8:	6224      	str	r4, [r4, #32]
 8016ada:	429c      	cmp	r4, r3
 8016adc:	d006      	beq.n	8016aec <std+0x48>
 8016ade:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8016ae2:	4294      	cmp	r4, r2
 8016ae4:	d002      	beq.n	8016aec <std+0x48>
 8016ae6:	33d0      	adds	r3, #208	@ 0xd0
 8016ae8:	429c      	cmp	r4, r3
 8016aea:	d105      	bne.n	8016af8 <std+0x54>
 8016aec:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8016af0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016af4:	f000 b9c6 	b.w	8016e84 <__retarget_lock_init_recursive>
 8016af8:	bd10      	pop	{r4, pc}
 8016afa:	bf00      	nop
 8016afc:	08016c4d 	.word	0x08016c4d
 8016b00:	08016c6f 	.word	0x08016c6f
 8016b04:	08016ca7 	.word	0x08016ca7
 8016b08:	08016ccb 	.word	0x08016ccb
 8016b0c:	2000f548 	.word	0x2000f548

08016b10 <stdio_exit_handler>:
 8016b10:	4a02      	ldr	r2, [pc, #8]	@ (8016b1c <stdio_exit_handler+0xc>)
 8016b12:	4903      	ldr	r1, [pc, #12]	@ (8016b20 <stdio_exit_handler+0x10>)
 8016b14:	4803      	ldr	r0, [pc, #12]	@ (8016b24 <stdio_exit_handler+0x14>)
 8016b16:	f000 b869 	b.w	8016bec <_fwalk_sglue>
 8016b1a:	bf00      	nop
 8016b1c:	20000130 	.word	0x20000130
 8016b20:	0801778d 	.word	0x0801778d
 8016b24:	20000140 	.word	0x20000140

08016b28 <cleanup_stdio>:
 8016b28:	6841      	ldr	r1, [r0, #4]
 8016b2a:	4b0c      	ldr	r3, [pc, #48]	@ (8016b5c <cleanup_stdio+0x34>)
 8016b2c:	4299      	cmp	r1, r3
 8016b2e:	b510      	push	{r4, lr}
 8016b30:	4604      	mov	r4, r0
 8016b32:	d001      	beq.n	8016b38 <cleanup_stdio+0x10>
 8016b34:	f000 fe2a 	bl	801778c <_fflush_r>
 8016b38:	68a1      	ldr	r1, [r4, #8]
 8016b3a:	4b09      	ldr	r3, [pc, #36]	@ (8016b60 <cleanup_stdio+0x38>)
 8016b3c:	4299      	cmp	r1, r3
 8016b3e:	d002      	beq.n	8016b46 <cleanup_stdio+0x1e>
 8016b40:	4620      	mov	r0, r4
 8016b42:	f000 fe23 	bl	801778c <_fflush_r>
 8016b46:	68e1      	ldr	r1, [r4, #12]
 8016b48:	4b06      	ldr	r3, [pc, #24]	@ (8016b64 <cleanup_stdio+0x3c>)
 8016b4a:	4299      	cmp	r1, r3
 8016b4c:	d004      	beq.n	8016b58 <cleanup_stdio+0x30>
 8016b4e:	4620      	mov	r0, r4
 8016b50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016b54:	f000 be1a 	b.w	801778c <_fflush_r>
 8016b58:	bd10      	pop	{r4, pc}
 8016b5a:	bf00      	nop
 8016b5c:	2000f548 	.word	0x2000f548
 8016b60:	2000f5b0 	.word	0x2000f5b0
 8016b64:	2000f618 	.word	0x2000f618

08016b68 <global_stdio_init.part.0>:
 8016b68:	b510      	push	{r4, lr}
 8016b6a:	4b0b      	ldr	r3, [pc, #44]	@ (8016b98 <global_stdio_init.part.0+0x30>)
 8016b6c:	4c0b      	ldr	r4, [pc, #44]	@ (8016b9c <global_stdio_init.part.0+0x34>)
 8016b6e:	4a0c      	ldr	r2, [pc, #48]	@ (8016ba0 <global_stdio_init.part.0+0x38>)
 8016b70:	601a      	str	r2, [r3, #0]
 8016b72:	4620      	mov	r0, r4
 8016b74:	2200      	movs	r2, #0
 8016b76:	2104      	movs	r1, #4
 8016b78:	f7ff ff94 	bl	8016aa4 <std>
 8016b7c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8016b80:	2201      	movs	r2, #1
 8016b82:	2109      	movs	r1, #9
 8016b84:	f7ff ff8e 	bl	8016aa4 <std>
 8016b88:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8016b8c:	2202      	movs	r2, #2
 8016b8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016b92:	2112      	movs	r1, #18
 8016b94:	f7ff bf86 	b.w	8016aa4 <std>
 8016b98:	2000f680 	.word	0x2000f680
 8016b9c:	2000f548 	.word	0x2000f548
 8016ba0:	08016b11 	.word	0x08016b11

08016ba4 <__sfp_lock_acquire>:
 8016ba4:	4801      	ldr	r0, [pc, #4]	@ (8016bac <__sfp_lock_acquire+0x8>)
 8016ba6:	f000 b96e 	b.w	8016e86 <__retarget_lock_acquire_recursive>
 8016baa:	bf00      	nop
 8016bac:	2000f689 	.word	0x2000f689

08016bb0 <__sfp_lock_release>:
 8016bb0:	4801      	ldr	r0, [pc, #4]	@ (8016bb8 <__sfp_lock_release+0x8>)
 8016bb2:	f000 b969 	b.w	8016e88 <__retarget_lock_release_recursive>
 8016bb6:	bf00      	nop
 8016bb8:	2000f689 	.word	0x2000f689

08016bbc <__sinit>:
 8016bbc:	b510      	push	{r4, lr}
 8016bbe:	4604      	mov	r4, r0
 8016bc0:	f7ff fff0 	bl	8016ba4 <__sfp_lock_acquire>
 8016bc4:	6a23      	ldr	r3, [r4, #32]
 8016bc6:	b11b      	cbz	r3, 8016bd0 <__sinit+0x14>
 8016bc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016bcc:	f7ff bff0 	b.w	8016bb0 <__sfp_lock_release>
 8016bd0:	4b04      	ldr	r3, [pc, #16]	@ (8016be4 <__sinit+0x28>)
 8016bd2:	6223      	str	r3, [r4, #32]
 8016bd4:	4b04      	ldr	r3, [pc, #16]	@ (8016be8 <__sinit+0x2c>)
 8016bd6:	681b      	ldr	r3, [r3, #0]
 8016bd8:	2b00      	cmp	r3, #0
 8016bda:	d1f5      	bne.n	8016bc8 <__sinit+0xc>
 8016bdc:	f7ff ffc4 	bl	8016b68 <global_stdio_init.part.0>
 8016be0:	e7f2      	b.n	8016bc8 <__sinit+0xc>
 8016be2:	bf00      	nop
 8016be4:	08016b29 	.word	0x08016b29
 8016be8:	2000f680 	.word	0x2000f680

08016bec <_fwalk_sglue>:
 8016bec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016bf0:	4607      	mov	r7, r0
 8016bf2:	4688      	mov	r8, r1
 8016bf4:	4614      	mov	r4, r2
 8016bf6:	2600      	movs	r6, #0
 8016bf8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8016bfc:	f1b9 0901 	subs.w	r9, r9, #1
 8016c00:	d505      	bpl.n	8016c0e <_fwalk_sglue+0x22>
 8016c02:	6824      	ldr	r4, [r4, #0]
 8016c04:	2c00      	cmp	r4, #0
 8016c06:	d1f7      	bne.n	8016bf8 <_fwalk_sglue+0xc>
 8016c08:	4630      	mov	r0, r6
 8016c0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016c0e:	89ab      	ldrh	r3, [r5, #12]
 8016c10:	2b01      	cmp	r3, #1
 8016c12:	d907      	bls.n	8016c24 <_fwalk_sglue+0x38>
 8016c14:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8016c18:	3301      	adds	r3, #1
 8016c1a:	d003      	beq.n	8016c24 <_fwalk_sglue+0x38>
 8016c1c:	4629      	mov	r1, r5
 8016c1e:	4638      	mov	r0, r7
 8016c20:	47c0      	blx	r8
 8016c22:	4306      	orrs	r6, r0
 8016c24:	3568      	adds	r5, #104	@ 0x68
 8016c26:	e7e9      	b.n	8016bfc <_fwalk_sglue+0x10>

08016c28 <iprintf>:
 8016c28:	b40f      	push	{r0, r1, r2, r3}
 8016c2a:	b507      	push	{r0, r1, r2, lr}
 8016c2c:	4906      	ldr	r1, [pc, #24]	@ (8016c48 <iprintf+0x20>)
 8016c2e:	ab04      	add	r3, sp, #16
 8016c30:	6808      	ldr	r0, [r1, #0]
 8016c32:	f853 2b04 	ldr.w	r2, [r3], #4
 8016c36:	6881      	ldr	r1, [r0, #8]
 8016c38:	9301      	str	r3, [sp, #4]
 8016c3a:	f000 fa7d 	bl	8017138 <_vfiprintf_r>
 8016c3e:	b003      	add	sp, #12
 8016c40:	f85d eb04 	ldr.w	lr, [sp], #4
 8016c44:	b004      	add	sp, #16
 8016c46:	4770      	bx	lr
 8016c48:	2000013c 	.word	0x2000013c

08016c4c <__sread>:
 8016c4c:	b510      	push	{r4, lr}
 8016c4e:	460c      	mov	r4, r1
 8016c50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016c54:	f000 f8ce 	bl	8016df4 <_read_r>
 8016c58:	2800      	cmp	r0, #0
 8016c5a:	bfab      	itete	ge
 8016c5c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8016c5e:	89a3      	ldrhlt	r3, [r4, #12]
 8016c60:	181b      	addge	r3, r3, r0
 8016c62:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8016c66:	bfac      	ite	ge
 8016c68:	6563      	strge	r3, [r4, #84]	@ 0x54
 8016c6a:	81a3      	strhlt	r3, [r4, #12]
 8016c6c:	bd10      	pop	{r4, pc}

08016c6e <__swrite>:
 8016c6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016c72:	461f      	mov	r7, r3
 8016c74:	898b      	ldrh	r3, [r1, #12]
 8016c76:	05db      	lsls	r3, r3, #23
 8016c78:	4605      	mov	r5, r0
 8016c7a:	460c      	mov	r4, r1
 8016c7c:	4616      	mov	r6, r2
 8016c7e:	d505      	bpl.n	8016c8c <__swrite+0x1e>
 8016c80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016c84:	2302      	movs	r3, #2
 8016c86:	2200      	movs	r2, #0
 8016c88:	f000 f8a2 	bl	8016dd0 <_lseek_r>
 8016c8c:	89a3      	ldrh	r3, [r4, #12]
 8016c8e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016c92:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8016c96:	81a3      	strh	r3, [r4, #12]
 8016c98:	4632      	mov	r2, r6
 8016c9a:	463b      	mov	r3, r7
 8016c9c:	4628      	mov	r0, r5
 8016c9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016ca2:	f000 b8b9 	b.w	8016e18 <_write_r>

08016ca6 <__sseek>:
 8016ca6:	b510      	push	{r4, lr}
 8016ca8:	460c      	mov	r4, r1
 8016caa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016cae:	f000 f88f 	bl	8016dd0 <_lseek_r>
 8016cb2:	1c43      	adds	r3, r0, #1
 8016cb4:	89a3      	ldrh	r3, [r4, #12]
 8016cb6:	bf15      	itete	ne
 8016cb8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8016cba:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8016cbe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8016cc2:	81a3      	strheq	r3, [r4, #12]
 8016cc4:	bf18      	it	ne
 8016cc6:	81a3      	strhne	r3, [r4, #12]
 8016cc8:	bd10      	pop	{r4, pc}

08016cca <__sclose>:
 8016cca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016cce:	f000 b819 	b.w	8016d04 <_close_r>

08016cd2 <memcmp>:
 8016cd2:	b510      	push	{r4, lr}
 8016cd4:	3901      	subs	r1, #1
 8016cd6:	4402      	add	r2, r0
 8016cd8:	4290      	cmp	r0, r2
 8016cda:	d101      	bne.n	8016ce0 <memcmp+0xe>
 8016cdc:	2000      	movs	r0, #0
 8016cde:	e005      	b.n	8016cec <memcmp+0x1a>
 8016ce0:	7803      	ldrb	r3, [r0, #0]
 8016ce2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8016ce6:	42a3      	cmp	r3, r4
 8016ce8:	d001      	beq.n	8016cee <memcmp+0x1c>
 8016cea:	1b18      	subs	r0, r3, r4
 8016cec:	bd10      	pop	{r4, pc}
 8016cee:	3001      	adds	r0, #1
 8016cf0:	e7f2      	b.n	8016cd8 <memcmp+0x6>

08016cf2 <memset>:
 8016cf2:	4402      	add	r2, r0
 8016cf4:	4603      	mov	r3, r0
 8016cf6:	4293      	cmp	r3, r2
 8016cf8:	d100      	bne.n	8016cfc <memset+0xa>
 8016cfa:	4770      	bx	lr
 8016cfc:	f803 1b01 	strb.w	r1, [r3], #1
 8016d00:	e7f9      	b.n	8016cf6 <memset+0x4>
	...

08016d04 <_close_r>:
 8016d04:	b538      	push	{r3, r4, r5, lr}
 8016d06:	4d06      	ldr	r5, [pc, #24]	@ (8016d20 <_close_r+0x1c>)
 8016d08:	2300      	movs	r3, #0
 8016d0a:	4604      	mov	r4, r0
 8016d0c:	4608      	mov	r0, r1
 8016d0e:	602b      	str	r3, [r5, #0]
 8016d10:	f7ea f9ec 	bl	80010ec <_close>
 8016d14:	1c43      	adds	r3, r0, #1
 8016d16:	d102      	bne.n	8016d1e <_close_r+0x1a>
 8016d18:	682b      	ldr	r3, [r5, #0]
 8016d1a:	b103      	cbz	r3, 8016d1e <_close_r+0x1a>
 8016d1c:	6023      	str	r3, [r4, #0]
 8016d1e:	bd38      	pop	{r3, r4, r5, pc}
 8016d20:	2000f684 	.word	0x2000f684

08016d24 <_reclaim_reent>:
 8016d24:	4b29      	ldr	r3, [pc, #164]	@ (8016dcc <_reclaim_reent+0xa8>)
 8016d26:	681b      	ldr	r3, [r3, #0]
 8016d28:	4283      	cmp	r3, r0
 8016d2a:	b570      	push	{r4, r5, r6, lr}
 8016d2c:	4604      	mov	r4, r0
 8016d2e:	d04b      	beq.n	8016dc8 <_reclaim_reent+0xa4>
 8016d30:	69c3      	ldr	r3, [r0, #28]
 8016d32:	b1ab      	cbz	r3, 8016d60 <_reclaim_reent+0x3c>
 8016d34:	68db      	ldr	r3, [r3, #12]
 8016d36:	b16b      	cbz	r3, 8016d54 <_reclaim_reent+0x30>
 8016d38:	2500      	movs	r5, #0
 8016d3a:	69e3      	ldr	r3, [r4, #28]
 8016d3c:	68db      	ldr	r3, [r3, #12]
 8016d3e:	5959      	ldr	r1, [r3, r5]
 8016d40:	2900      	cmp	r1, #0
 8016d42:	d13b      	bne.n	8016dbc <_reclaim_reent+0x98>
 8016d44:	3504      	adds	r5, #4
 8016d46:	2d80      	cmp	r5, #128	@ 0x80
 8016d48:	d1f7      	bne.n	8016d3a <_reclaim_reent+0x16>
 8016d4a:	69e3      	ldr	r3, [r4, #28]
 8016d4c:	4620      	mov	r0, r4
 8016d4e:	68d9      	ldr	r1, [r3, #12]
 8016d50:	f000 f8c8 	bl	8016ee4 <_free_r>
 8016d54:	69e3      	ldr	r3, [r4, #28]
 8016d56:	6819      	ldr	r1, [r3, #0]
 8016d58:	b111      	cbz	r1, 8016d60 <_reclaim_reent+0x3c>
 8016d5a:	4620      	mov	r0, r4
 8016d5c:	f000 f8c2 	bl	8016ee4 <_free_r>
 8016d60:	6961      	ldr	r1, [r4, #20]
 8016d62:	b111      	cbz	r1, 8016d6a <_reclaim_reent+0x46>
 8016d64:	4620      	mov	r0, r4
 8016d66:	f000 f8bd 	bl	8016ee4 <_free_r>
 8016d6a:	69e1      	ldr	r1, [r4, #28]
 8016d6c:	b111      	cbz	r1, 8016d74 <_reclaim_reent+0x50>
 8016d6e:	4620      	mov	r0, r4
 8016d70:	f000 f8b8 	bl	8016ee4 <_free_r>
 8016d74:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8016d76:	b111      	cbz	r1, 8016d7e <_reclaim_reent+0x5a>
 8016d78:	4620      	mov	r0, r4
 8016d7a:	f000 f8b3 	bl	8016ee4 <_free_r>
 8016d7e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8016d80:	b111      	cbz	r1, 8016d88 <_reclaim_reent+0x64>
 8016d82:	4620      	mov	r0, r4
 8016d84:	f000 f8ae 	bl	8016ee4 <_free_r>
 8016d88:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8016d8a:	b111      	cbz	r1, 8016d92 <_reclaim_reent+0x6e>
 8016d8c:	4620      	mov	r0, r4
 8016d8e:	f000 f8a9 	bl	8016ee4 <_free_r>
 8016d92:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8016d94:	b111      	cbz	r1, 8016d9c <_reclaim_reent+0x78>
 8016d96:	4620      	mov	r0, r4
 8016d98:	f000 f8a4 	bl	8016ee4 <_free_r>
 8016d9c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8016d9e:	b111      	cbz	r1, 8016da6 <_reclaim_reent+0x82>
 8016da0:	4620      	mov	r0, r4
 8016da2:	f000 f89f 	bl	8016ee4 <_free_r>
 8016da6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8016da8:	b111      	cbz	r1, 8016db0 <_reclaim_reent+0x8c>
 8016daa:	4620      	mov	r0, r4
 8016dac:	f000 f89a 	bl	8016ee4 <_free_r>
 8016db0:	6a23      	ldr	r3, [r4, #32]
 8016db2:	b14b      	cbz	r3, 8016dc8 <_reclaim_reent+0xa4>
 8016db4:	4620      	mov	r0, r4
 8016db6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016dba:	4718      	bx	r3
 8016dbc:	680e      	ldr	r6, [r1, #0]
 8016dbe:	4620      	mov	r0, r4
 8016dc0:	f000 f890 	bl	8016ee4 <_free_r>
 8016dc4:	4631      	mov	r1, r6
 8016dc6:	e7bb      	b.n	8016d40 <_reclaim_reent+0x1c>
 8016dc8:	bd70      	pop	{r4, r5, r6, pc}
 8016dca:	bf00      	nop
 8016dcc:	2000013c 	.word	0x2000013c

08016dd0 <_lseek_r>:
 8016dd0:	b538      	push	{r3, r4, r5, lr}
 8016dd2:	4d07      	ldr	r5, [pc, #28]	@ (8016df0 <_lseek_r+0x20>)
 8016dd4:	4604      	mov	r4, r0
 8016dd6:	4608      	mov	r0, r1
 8016dd8:	4611      	mov	r1, r2
 8016dda:	2200      	movs	r2, #0
 8016ddc:	602a      	str	r2, [r5, #0]
 8016dde:	461a      	mov	r2, r3
 8016de0:	f7ea f9ab 	bl	800113a <_lseek>
 8016de4:	1c43      	adds	r3, r0, #1
 8016de6:	d102      	bne.n	8016dee <_lseek_r+0x1e>
 8016de8:	682b      	ldr	r3, [r5, #0]
 8016dea:	b103      	cbz	r3, 8016dee <_lseek_r+0x1e>
 8016dec:	6023      	str	r3, [r4, #0]
 8016dee:	bd38      	pop	{r3, r4, r5, pc}
 8016df0:	2000f684 	.word	0x2000f684

08016df4 <_read_r>:
 8016df4:	b538      	push	{r3, r4, r5, lr}
 8016df6:	4d07      	ldr	r5, [pc, #28]	@ (8016e14 <_read_r+0x20>)
 8016df8:	4604      	mov	r4, r0
 8016dfa:	4608      	mov	r0, r1
 8016dfc:	4611      	mov	r1, r2
 8016dfe:	2200      	movs	r2, #0
 8016e00:	602a      	str	r2, [r5, #0]
 8016e02:	461a      	mov	r2, r3
 8016e04:	f7ea f939 	bl	800107a <_read>
 8016e08:	1c43      	adds	r3, r0, #1
 8016e0a:	d102      	bne.n	8016e12 <_read_r+0x1e>
 8016e0c:	682b      	ldr	r3, [r5, #0]
 8016e0e:	b103      	cbz	r3, 8016e12 <_read_r+0x1e>
 8016e10:	6023      	str	r3, [r4, #0]
 8016e12:	bd38      	pop	{r3, r4, r5, pc}
 8016e14:	2000f684 	.word	0x2000f684

08016e18 <_write_r>:
 8016e18:	b538      	push	{r3, r4, r5, lr}
 8016e1a:	4d07      	ldr	r5, [pc, #28]	@ (8016e38 <_write_r+0x20>)
 8016e1c:	4604      	mov	r4, r0
 8016e1e:	4608      	mov	r0, r1
 8016e20:	4611      	mov	r1, r2
 8016e22:	2200      	movs	r2, #0
 8016e24:	602a      	str	r2, [r5, #0]
 8016e26:	461a      	mov	r2, r3
 8016e28:	f7ea f944 	bl	80010b4 <_write>
 8016e2c:	1c43      	adds	r3, r0, #1
 8016e2e:	d102      	bne.n	8016e36 <_write_r+0x1e>
 8016e30:	682b      	ldr	r3, [r5, #0]
 8016e32:	b103      	cbz	r3, 8016e36 <_write_r+0x1e>
 8016e34:	6023      	str	r3, [r4, #0]
 8016e36:	bd38      	pop	{r3, r4, r5, pc}
 8016e38:	2000f684 	.word	0x2000f684

08016e3c <__libc_init_array>:
 8016e3c:	b570      	push	{r4, r5, r6, lr}
 8016e3e:	4d0d      	ldr	r5, [pc, #52]	@ (8016e74 <__libc_init_array+0x38>)
 8016e40:	4c0d      	ldr	r4, [pc, #52]	@ (8016e78 <__libc_init_array+0x3c>)
 8016e42:	1b64      	subs	r4, r4, r5
 8016e44:	10a4      	asrs	r4, r4, #2
 8016e46:	2600      	movs	r6, #0
 8016e48:	42a6      	cmp	r6, r4
 8016e4a:	d109      	bne.n	8016e60 <__libc_init_array+0x24>
 8016e4c:	4d0b      	ldr	r5, [pc, #44]	@ (8016e7c <__libc_init_array+0x40>)
 8016e4e:	4c0c      	ldr	r4, [pc, #48]	@ (8016e80 <__libc_init_array+0x44>)
 8016e50:	f000 fe4a 	bl	8017ae8 <_init>
 8016e54:	1b64      	subs	r4, r4, r5
 8016e56:	10a4      	asrs	r4, r4, #2
 8016e58:	2600      	movs	r6, #0
 8016e5a:	42a6      	cmp	r6, r4
 8016e5c:	d105      	bne.n	8016e6a <__libc_init_array+0x2e>
 8016e5e:	bd70      	pop	{r4, r5, r6, pc}
 8016e60:	f855 3b04 	ldr.w	r3, [r5], #4
 8016e64:	4798      	blx	r3
 8016e66:	3601      	adds	r6, #1
 8016e68:	e7ee      	b.n	8016e48 <__libc_init_array+0xc>
 8016e6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8016e6e:	4798      	blx	r3
 8016e70:	3601      	adds	r6, #1
 8016e72:	e7f2      	b.n	8016e5a <__libc_init_array+0x1e>
 8016e74:	0801b48c 	.word	0x0801b48c
 8016e78:	0801b48c 	.word	0x0801b48c
 8016e7c:	0801b48c 	.word	0x0801b48c
 8016e80:	0801b490 	.word	0x0801b490

08016e84 <__retarget_lock_init_recursive>:
 8016e84:	4770      	bx	lr

08016e86 <__retarget_lock_acquire_recursive>:
 8016e86:	4770      	bx	lr

08016e88 <__retarget_lock_release_recursive>:
 8016e88:	4770      	bx	lr

08016e8a <memcpy>:
 8016e8a:	440a      	add	r2, r1
 8016e8c:	4291      	cmp	r1, r2
 8016e8e:	f100 33ff 	add.w	r3, r0, #4294967295
 8016e92:	d100      	bne.n	8016e96 <memcpy+0xc>
 8016e94:	4770      	bx	lr
 8016e96:	b510      	push	{r4, lr}
 8016e98:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016e9c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016ea0:	4291      	cmp	r1, r2
 8016ea2:	d1f9      	bne.n	8016e98 <memcpy+0xe>
 8016ea4:	bd10      	pop	{r4, pc}
	...

08016ea8 <__assert_func>:
 8016ea8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8016eaa:	4614      	mov	r4, r2
 8016eac:	461a      	mov	r2, r3
 8016eae:	4b09      	ldr	r3, [pc, #36]	@ (8016ed4 <__assert_func+0x2c>)
 8016eb0:	681b      	ldr	r3, [r3, #0]
 8016eb2:	4605      	mov	r5, r0
 8016eb4:	68d8      	ldr	r0, [r3, #12]
 8016eb6:	b954      	cbnz	r4, 8016ece <__assert_func+0x26>
 8016eb8:	4b07      	ldr	r3, [pc, #28]	@ (8016ed8 <__assert_func+0x30>)
 8016eba:	461c      	mov	r4, r3
 8016ebc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8016ec0:	9100      	str	r1, [sp, #0]
 8016ec2:	462b      	mov	r3, r5
 8016ec4:	4905      	ldr	r1, [pc, #20]	@ (8016edc <__assert_func+0x34>)
 8016ec6:	f000 fc89 	bl	80177dc <fiprintf>
 8016eca:	f000 fd3d 	bl	8017948 <abort>
 8016ece:	4b04      	ldr	r3, [pc, #16]	@ (8016ee0 <__assert_func+0x38>)
 8016ed0:	e7f4      	b.n	8016ebc <__assert_func+0x14>
 8016ed2:	bf00      	nop
 8016ed4:	2000013c 	.word	0x2000013c
 8016ed8:	0801b450 	.word	0x0801b450
 8016edc:	0801b422 	.word	0x0801b422
 8016ee0:	0801b415 	.word	0x0801b415

08016ee4 <_free_r>:
 8016ee4:	b538      	push	{r3, r4, r5, lr}
 8016ee6:	4605      	mov	r5, r0
 8016ee8:	2900      	cmp	r1, #0
 8016eea:	d041      	beq.n	8016f70 <_free_r+0x8c>
 8016eec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016ef0:	1f0c      	subs	r4, r1, #4
 8016ef2:	2b00      	cmp	r3, #0
 8016ef4:	bfb8      	it	lt
 8016ef6:	18e4      	addlt	r4, r4, r3
 8016ef8:	f000 f8e8 	bl	80170cc <__malloc_lock>
 8016efc:	4a1d      	ldr	r2, [pc, #116]	@ (8016f74 <_free_r+0x90>)
 8016efe:	6813      	ldr	r3, [r2, #0]
 8016f00:	b933      	cbnz	r3, 8016f10 <_free_r+0x2c>
 8016f02:	6063      	str	r3, [r4, #4]
 8016f04:	6014      	str	r4, [r2, #0]
 8016f06:	4628      	mov	r0, r5
 8016f08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016f0c:	f000 b8e4 	b.w	80170d8 <__malloc_unlock>
 8016f10:	42a3      	cmp	r3, r4
 8016f12:	d908      	bls.n	8016f26 <_free_r+0x42>
 8016f14:	6820      	ldr	r0, [r4, #0]
 8016f16:	1821      	adds	r1, r4, r0
 8016f18:	428b      	cmp	r3, r1
 8016f1a:	bf01      	itttt	eq
 8016f1c:	6819      	ldreq	r1, [r3, #0]
 8016f1e:	685b      	ldreq	r3, [r3, #4]
 8016f20:	1809      	addeq	r1, r1, r0
 8016f22:	6021      	streq	r1, [r4, #0]
 8016f24:	e7ed      	b.n	8016f02 <_free_r+0x1e>
 8016f26:	461a      	mov	r2, r3
 8016f28:	685b      	ldr	r3, [r3, #4]
 8016f2a:	b10b      	cbz	r3, 8016f30 <_free_r+0x4c>
 8016f2c:	42a3      	cmp	r3, r4
 8016f2e:	d9fa      	bls.n	8016f26 <_free_r+0x42>
 8016f30:	6811      	ldr	r1, [r2, #0]
 8016f32:	1850      	adds	r0, r2, r1
 8016f34:	42a0      	cmp	r0, r4
 8016f36:	d10b      	bne.n	8016f50 <_free_r+0x6c>
 8016f38:	6820      	ldr	r0, [r4, #0]
 8016f3a:	4401      	add	r1, r0
 8016f3c:	1850      	adds	r0, r2, r1
 8016f3e:	4283      	cmp	r3, r0
 8016f40:	6011      	str	r1, [r2, #0]
 8016f42:	d1e0      	bne.n	8016f06 <_free_r+0x22>
 8016f44:	6818      	ldr	r0, [r3, #0]
 8016f46:	685b      	ldr	r3, [r3, #4]
 8016f48:	6053      	str	r3, [r2, #4]
 8016f4a:	4408      	add	r0, r1
 8016f4c:	6010      	str	r0, [r2, #0]
 8016f4e:	e7da      	b.n	8016f06 <_free_r+0x22>
 8016f50:	d902      	bls.n	8016f58 <_free_r+0x74>
 8016f52:	230c      	movs	r3, #12
 8016f54:	602b      	str	r3, [r5, #0]
 8016f56:	e7d6      	b.n	8016f06 <_free_r+0x22>
 8016f58:	6820      	ldr	r0, [r4, #0]
 8016f5a:	1821      	adds	r1, r4, r0
 8016f5c:	428b      	cmp	r3, r1
 8016f5e:	bf04      	itt	eq
 8016f60:	6819      	ldreq	r1, [r3, #0]
 8016f62:	685b      	ldreq	r3, [r3, #4]
 8016f64:	6063      	str	r3, [r4, #4]
 8016f66:	bf04      	itt	eq
 8016f68:	1809      	addeq	r1, r1, r0
 8016f6a:	6021      	streq	r1, [r4, #0]
 8016f6c:	6054      	str	r4, [r2, #4]
 8016f6e:	e7ca      	b.n	8016f06 <_free_r+0x22>
 8016f70:	bd38      	pop	{r3, r4, r5, pc}
 8016f72:	bf00      	nop
 8016f74:	2000f690 	.word	0x2000f690

08016f78 <malloc>:
 8016f78:	4b02      	ldr	r3, [pc, #8]	@ (8016f84 <malloc+0xc>)
 8016f7a:	4601      	mov	r1, r0
 8016f7c:	6818      	ldr	r0, [r3, #0]
 8016f7e:	f000 b825 	b.w	8016fcc <_malloc_r>
 8016f82:	bf00      	nop
 8016f84:	2000013c 	.word	0x2000013c

08016f88 <sbrk_aligned>:
 8016f88:	b570      	push	{r4, r5, r6, lr}
 8016f8a:	4e0f      	ldr	r6, [pc, #60]	@ (8016fc8 <sbrk_aligned+0x40>)
 8016f8c:	460c      	mov	r4, r1
 8016f8e:	6831      	ldr	r1, [r6, #0]
 8016f90:	4605      	mov	r5, r0
 8016f92:	b911      	cbnz	r1, 8016f9a <sbrk_aligned+0x12>
 8016f94:	f000 fcc8 	bl	8017928 <_sbrk_r>
 8016f98:	6030      	str	r0, [r6, #0]
 8016f9a:	4621      	mov	r1, r4
 8016f9c:	4628      	mov	r0, r5
 8016f9e:	f000 fcc3 	bl	8017928 <_sbrk_r>
 8016fa2:	1c43      	adds	r3, r0, #1
 8016fa4:	d103      	bne.n	8016fae <sbrk_aligned+0x26>
 8016fa6:	f04f 34ff 	mov.w	r4, #4294967295
 8016faa:	4620      	mov	r0, r4
 8016fac:	bd70      	pop	{r4, r5, r6, pc}
 8016fae:	1cc4      	adds	r4, r0, #3
 8016fb0:	f024 0403 	bic.w	r4, r4, #3
 8016fb4:	42a0      	cmp	r0, r4
 8016fb6:	d0f8      	beq.n	8016faa <sbrk_aligned+0x22>
 8016fb8:	1a21      	subs	r1, r4, r0
 8016fba:	4628      	mov	r0, r5
 8016fbc:	f000 fcb4 	bl	8017928 <_sbrk_r>
 8016fc0:	3001      	adds	r0, #1
 8016fc2:	d1f2      	bne.n	8016faa <sbrk_aligned+0x22>
 8016fc4:	e7ef      	b.n	8016fa6 <sbrk_aligned+0x1e>
 8016fc6:	bf00      	nop
 8016fc8:	2000f68c 	.word	0x2000f68c

08016fcc <_malloc_r>:
 8016fcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016fd0:	1ccd      	adds	r5, r1, #3
 8016fd2:	f025 0503 	bic.w	r5, r5, #3
 8016fd6:	3508      	adds	r5, #8
 8016fd8:	2d0c      	cmp	r5, #12
 8016fda:	bf38      	it	cc
 8016fdc:	250c      	movcc	r5, #12
 8016fde:	2d00      	cmp	r5, #0
 8016fe0:	4606      	mov	r6, r0
 8016fe2:	db01      	blt.n	8016fe8 <_malloc_r+0x1c>
 8016fe4:	42a9      	cmp	r1, r5
 8016fe6:	d904      	bls.n	8016ff2 <_malloc_r+0x26>
 8016fe8:	230c      	movs	r3, #12
 8016fea:	6033      	str	r3, [r6, #0]
 8016fec:	2000      	movs	r0, #0
 8016fee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016ff2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80170c8 <_malloc_r+0xfc>
 8016ff6:	f000 f869 	bl	80170cc <__malloc_lock>
 8016ffa:	f8d8 3000 	ldr.w	r3, [r8]
 8016ffe:	461c      	mov	r4, r3
 8017000:	bb44      	cbnz	r4, 8017054 <_malloc_r+0x88>
 8017002:	4629      	mov	r1, r5
 8017004:	4630      	mov	r0, r6
 8017006:	f7ff ffbf 	bl	8016f88 <sbrk_aligned>
 801700a:	1c43      	adds	r3, r0, #1
 801700c:	4604      	mov	r4, r0
 801700e:	d158      	bne.n	80170c2 <_malloc_r+0xf6>
 8017010:	f8d8 4000 	ldr.w	r4, [r8]
 8017014:	4627      	mov	r7, r4
 8017016:	2f00      	cmp	r7, #0
 8017018:	d143      	bne.n	80170a2 <_malloc_r+0xd6>
 801701a:	2c00      	cmp	r4, #0
 801701c:	d04b      	beq.n	80170b6 <_malloc_r+0xea>
 801701e:	6823      	ldr	r3, [r4, #0]
 8017020:	4639      	mov	r1, r7
 8017022:	4630      	mov	r0, r6
 8017024:	eb04 0903 	add.w	r9, r4, r3
 8017028:	f000 fc7e 	bl	8017928 <_sbrk_r>
 801702c:	4581      	cmp	r9, r0
 801702e:	d142      	bne.n	80170b6 <_malloc_r+0xea>
 8017030:	6821      	ldr	r1, [r4, #0]
 8017032:	1a6d      	subs	r5, r5, r1
 8017034:	4629      	mov	r1, r5
 8017036:	4630      	mov	r0, r6
 8017038:	f7ff ffa6 	bl	8016f88 <sbrk_aligned>
 801703c:	3001      	adds	r0, #1
 801703e:	d03a      	beq.n	80170b6 <_malloc_r+0xea>
 8017040:	6823      	ldr	r3, [r4, #0]
 8017042:	442b      	add	r3, r5
 8017044:	6023      	str	r3, [r4, #0]
 8017046:	f8d8 3000 	ldr.w	r3, [r8]
 801704a:	685a      	ldr	r2, [r3, #4]
 801704c:	bb62      	cbnz	r2, 80170a8 <_malloc_r+0xdc>
 801704e:	f8c8 7000 	str.w	r7, [r8]
 8017052:	e00f      	b.n	8017074 <_malloc_r+0xa8>
 8017054:	6822      	ldr	r2, [r4, #0]
 8017056:	1b52      	subs	r2, r2, r5
 8017058:	d420      	bmi.n	801709c <_malloc_r+0xd0>
 801705a:	2a0b      	cmp	r2, #11
 801705c:	d917      	bls.n	801708e <_malloc_r+0xc2>
 801705e:	1961      	adds	r1, r4, r5
 8017060:	42a3      	cmp	r3, r4
 8017062:	6025      	str	r5, [r4, #0]
 8017064:	bf18      	it	ne
 8017066:	6059      	strne	r1, [r3, #4]
 8017068:	6863      	ldr	r3, [r4, #4]
 801706a:	bf08      	it	eq
 801706c:	f8c8 1000 	streq.w	r1, [r8]
 8017070:	5162      	str	r2, [r4, r5]
 8017072:	604b      	str	r3, [r1, #4]
 8017074:	4630      	mov	r0, r6
 8017076:	f000 f82f 	bl	80170d8 <__malloc_unlock>
 801707a:	f104 000b 	add.w	r0, r4, #11
 801707e:	1d23      	adds	r3, r4, #4
 8017080:	f020 0007 	bic.w	r0, r0, #7
 8017084:	1ac2      	subs	r2, r0, r3
 8017086:	bf1c      	itt	ne
 8017088:	1a1b      	subne	r3, r3, r0
 801708a:	50a3      	strne	r3, [r4, r2]
 801708c:	e7af      	b.n	8016fee <_malloc_r+0x22>
 801708e:	6862      	ldr	r2, [r4, #4]
 8017090:	42a3      	cmp	r3, r4
 8017092:	bf0c      	ite	eq
 8017094:	f8c8 2000 	streq.w	r2, [r8]
 8017098:	605a      	strne	r2, [r3, #4]
 801709a:	e7eb      	b.n	8017074 <_malloc_r+0xa8>
 801709c:	4623      	mov	r3, r4
 801709e:	6864      	ldr	r4, [r4, #4]
 80170a0:	e7ae      	b.n	8017000 <_malloc_r+0x34>
 80170a2:	463c      	mov	r4, r7
 80170a4:	687f      	ldr	r7, [r7, #4]
 80170a6:	e7b6      	b.n	8017016 <_malloc_r+0x4a>
 80170a8:	461a      	mov	r2, r3
 80170aa:	685b      	ldr	r3, [r3, #4]
 80170ac:	42a3      	cmp	r3, r4
 80170ae:	d1fb      	bne.n	80170a8 <_malloc_r+0xdc>
 80170b0:	2300      	movs	r3, #0
 80170b2:	6053      	str	r3, [r2, #4]
 80170b4:	e7de      	b.n	8017074 <_malloc_r+0xa8>
 80170b6:	230c      	movs	r3, #12
 80170b8:	6033      	str	r3, [r6, #0]
 80170ba:	4630      	mov	r0, r6
 80170bc:	f000 f80c 	bl	80170d8 <__malloc_unlock>
 80170c0:	e794      	b.n	8016fec <_malloc_r+0x20>
 80170c2:	6005      	str	r5, [r0, #0]
 80170c4:	e7d6      	b.n	8017074 <_malloc_r+0xa8>
 80170c6:	bf00      	nop
 80170c8:	2000f690 	.word	0x2000f690

080170cc <__malloc_lock>:
 80170cc:	4801      	ldr	r0, [pc, #4]	@ (80170d4 <__malloc_lock+0x8>)
 80170ce:	f7ff beda 	b.w	8016e86 <__retarget_lock_acquire_recursive>
 80170d2:	bf00      	nop
 80170d4:	2000f688 	.word	0x2000f688

080170d8 <__malloc_unlock>:
 80170d8:	4801      	ldr	r0, [pc, #4]	@ (80170e0 <__malloc_unlock+0x8>)
 80170da:	f7ff bed5 	b.w	8016e88 <__retarget_lock_release_recursive>
 80170de:	bf00      	nop
 80170e0:	2000f688 	.word	0x2000f688

080170e4 <__sfputc_r>:
 80170e4:	6893      	ldr	r3, [r2, #8]
 80170e6:	3b01      	subs	r3, #1
 80170e8:	2b00      	cmp	r3, #0
 80170ea:	b410      	push	{r4}
 80170ec:	6093      	str	r3, [r2, #8]
 80170ee:	da08      	bge.n	8017102 <__sfputc_r+0x1e>
 80170f0:	6994      	ldr	r4, [r2, #24]
 80170f2:	42a3      	cmp	r3, r4
 80170f4:	db01      	blt.n	80170fa <__sfputc_r+0x16>
 80170f6:	290a      	cmp	r1, #10
 80170f8:	d103      	bne.n	8017102 <__sfputc_r+0x1e>
 80170fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80170fe:	f000 bb7f 	b.w	8017800 <__swbuf_r>
 8017102:	6813      	ldr	r3, [r2, #0]
 8017104:	1c58      	adds	r0, r3, #1
 8017106:	6010      	str	r0, [r2, #0]
 8017108:	7019      	strb	r1, [r3, #0]
 801710a:	4608      	mov	r0, r1
 801710c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017110:	4770      	bx	lr

08017112 <__sfputs_r>:
 8017112:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017114:	4606      	mov	r6, r0
 8017116:	460f      	mov	r7, r1
 8017118:	4614      	mov	r4, r2
 801711a:	18d5      	adds	r5, r2, r3
 801711c:	42ac      	cmp	r4, r5
 801711e:	d101      	bne.n	8017124 <__sfputs_r+0x12>
 8017120:	2000      	movs	r0, #0
 8017122:	e007      	b.n	8017134 <__sfputs_r+0x22>
 8017124:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017128:	463a      	mov	r2, r7
 801712a:	4630      	mov	r0, r6
 801712c:	f7ff ffda 	bl	80170e4 <__sfputc_r>
 8017130:	1c43      	adds	r3, r0, #1
 8017132:	d1f3      	bne.n	801711c <__sfputs_r+0xa>
 8017134:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08017138 <_vfiprintf_r>:
 8017138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801713c:	460d      	mov	r5, r1
 801713e:	b09d      	sub	sp, #116	@ 0x74
 8017140:	4614      	mov	r4, r2
 8017142:	4698      	mov	r8, r3
 8017144:	4606      	mov	r6, r0
 8017146:	b118      	cbz	r0, 8017150 <_vfiprintf_r+0x18>
 8017148:	6a03      	ldr	r3, [r0, #32]
 801714a:	b90b      	cbnz	r3, 8017150 <_vfiprintf_r+0x18>
 801714c:	f7ff fd36 	bl	8016bbc <__sinit>
 8017150:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017152:	07d9      	lsls	r1, r3, #31
 8017154:	d405      	bmi.n	8017162 <_vfiprintf_r+0x2a>
 8017156:	89ab      	ldrh	r3, [r5, #12]
 8017158:	059a      	lsls	r2, r3, #22
 801715a:	d402      	bmi.n	8017162 <_vfiprintf_r+0x2a>
 801715c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801715e:	f7ff fe92 	bl	8016e86 <__retarget_lock_acquire_recursive>
 8017162:	89ab      	ldrh	r3, [r5, #12]
 8017164:	071b      	lsls	r3, r3, #28
 8017166:	d501      	bpl.n	801716c <_vfiprintf_r+0x34>
 8017168:	692b      	ldr	r3, [r5, #16]
 801716a:	b99b      	cbnz	r3, 8017194 <_vfiprintf_r+0x5c>
 801716c:	4629      	mov	r1, r5
 801716e:	4630      	mov	r0, r6
 8017170:	f000 fb84 	bl	801787c <__swsetup_r>
 8017174:	b170      	cbz	r0, 8017194 <_vfiprintf_r+0x5c>
 8017176:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017178:	07dc      	lsls	r4, r3, #31
 801717a:	d504      	bpl.n	8017186 <_vfiprintf_r+0x4e>
 801717c:	f04f 30ff 	mov.w	r0, #4294967295
 8017180:	b01d      	add	sp, #116	@ 0x74
 8017182:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017186:	89ab      	ldrh	r3, [r5, #12]
 8017188:	0598      	lsls	r0, r3, #22
 801718a:	d4f7      	bmi.n	801717c <_vfiprintf_r+0x44>
 801718c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801718e:	f7ff fe7b 	bl	8016e88 <__retarget_lock_release_recursive>
 8017192:	e7f3      	b.n	801717c <_vfiprintf_r+0x44>
 8017194:	2300      	movs	r3, #0
 8017196:	9309      	str	r3, [sp, #36]	@ 0x24
 8017198:	2320      	movs	r3, #32
 801719a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801719e:	f8cd 800c 	str.w	r8, [sp, #12]
 80171a2:	2330      	movs	r3, #48	@ 0x30
 80171a4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8017354 <_vfiprintf_r+0x21c>
 80171a8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80171ac:	f04f 0901 	mov.w	r9, #1
 80171b0:	4623      	mov	r3, r4
 80171b2:	469a      	mov	sl, r3
 80171b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80171b8:	b10a      	cbz	r2, 80171be <_vfiprintf_r+0x86>
 80171ba:	2a25      	cmp	r2, #37	@ 0x25
 80171bc:	d1f9      	bne.n	80171b2 <_vfiprintf_r+0x7a>
 80171be:	ebba 0b04 	subs.w	fp, sl, r4
 80171c2:	d00b      	beq.n	80171dc <_vfiprintf_r+0xa4>
 80171c4:	465b      	mov	r3, fp
 80171c6:	4622      	mov	r2, r4
 80171c8:	4629      	mov	r1, r5
 80171ca:	4630      	mov	r0, r6
 80171cc:	f7ff ffa1 	bl	8017112 <__sfputs_r>
 80171d0:	3001      	adds	r0, #1
 80171d2:	f000 80a7 	beq.w	8017324 <_vfiprintf_r+0x1ec>
 80171d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80171d8:	445a      	add	r2, fp
 80171da:	9209      	str	r2, [sp, #36]	@ 0x24
 80171dc:	f89a 3000 	ldrb.w	r3, [sl]
 80171e0:	2b00      	cmp	r3, #0
 80171e2:	f000 809f 	beq.w	8017324 <_vfiprintf_r+0x1ec>
 80171e6:	2300      	movs	r3, #0
 80171e8:	f04f 32ff 	mov.w	r2, #4294967295
 80171ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80171f0:	f10a 0a01 	add.w	sl, sl, #1
 80171f4:	9304      	str	r3, [sp, #16]
 80171f6:	9307      	str	r3, [sp, #28]
 80171f8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80171fc:	931a      	str	r3, [sp, #104]	@ 0x68
 80171fe:	4654      	mov	r4, sl
 8017200:	2205      	movs	r2, #5
 8017202:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017206:	4853      	ldr	r0, [pc, #332]	@ (8017354 <_vfiprintf_r+0x21c>)
 8017208:	f7e8 fffa 	bl	8000200 <memchr>
 801720c:	9a04      	ldr	r2, [sp, #16]
 801720e:	b9d8      	cbnz	r0, 8017248 <_vfiprintf_r+0x110>
 8017210:	06d1      	lsls	r1, r2, #27
 8017212:	bf44      	itt	mi
 8017214:	2320      	movmi	r3, #32
 8017216:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801721a:	0713      	lsls	r3, r2, #28
 801721c:	bf44      	itt	mi
 801721e:	232b      	movmi	r3, #43	@ 0x2b
 8017220:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017224:	f89a 3000 	ldrb.w	r3, [sl]
 8017228:	2b2a      	cmp	r3, #42	@ 0x2a
 801722a:	d015      	beq.n	8017258 <_vfiprintf_r+0x120>
 801722c:	9a07      	ldr	r2, [sp, #28]
 801722e:	4654      	mov	r4, sl
 8017230:	2000      	movs	r0, #0
 8017232:	f04f 0c0a 	mov.w	ip, #10
 8017236:	4621      	mov	r1, r4
 8017238:	f811 3b01 	ldrb.w	r3, [r1], #1
 801723c:	3b30      	subs	r3, #48	@ 0x30
 801723e:	2b09      	cmp	r3, #9
 8017240:	d94b      	bls.n	80172da <_vfiprintf_r+0x1a2>
 8017242:	b1b0      	cbz	r0, 8017272 <_vfiprintf_r+0x13a>
 8017244:	9207      	str	r2, [sp, #28]
 8017246:	e014      	b.n	8017272 <_vfiprintf_r+0x13a>
 8017248:	eba0 0308 	sub.w	r3, r0, r8
 801724c:	fa09 f303 	lsl.w	r3, r9, r3
 8017250:	4313      	orrs	r3, r2
 8017252:	9304      	str	r3, [sp, #16]
 8017254:	46a2      	mov	sl, r4
 8017256:	e7d2      	b.n	80171fe <_vfiprintf_r+0xc6>
 8017258:	9b03      	ldr	r3, [sp, #12]
 801725a:	1d19      	adds	r1, r3, #4
 801725c:	681b      	ldr	r3, [r3, #0]
 801725e:	9103      	str	r1, [sp, #12]
 8017260:	2b00      	cmp	r3, #0
 8017262:	bfbb      	ittet	lt
 8017264:	425b      	neglt	r3, r3
 8017266:	f042 0202 	orrlt.w	r2, r2, #2
 801726a:	9307      	strge	r3, [sp, #28]
 801726c:	9307      	strlt	r3, [sp, #28]
 801726e:	bfb8      	it	lt
 8017270:	9204      	strlt	r2, [sp, #16]
 8017272:	7823      	ldrb	r3, [r4, #0]
 8017274:	2b2e      	cmp	r3, #46	@ 0x2e
 8017276:	d10a      	bne.n	801728e <_vfiprintf_r+0x156>
 8017278:	7863      	ldrb	r3, [r4, #1]
 801727a:	2b2a      	cmp	r3, #42	@ 0x2a
 801727c:	d132      	bne.n	80172e4 <_vfiprintf_r+0x1ac>
 801727e:	9b03      	ldr	r3, [sp, #12]
 8017280:	1d1a      	adds	r2, r3, #4
 8017282:	681b      	ldr	r3, [r3, #0]
 8017284:	9203      	str	r2, [sp, #12]
 8017286:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801728a:	3402      	adds	r4, #2
 801728c:	9305      	str	r3, [sp, #20]
 801728e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8017364 <_vfiprintf_r+0x22c>
 8017292:	7821      	ldrb	r1, [r4, #0]
 8017294:	2203      	movs	r2, #3
 8017296:	4650      	mov	r0, sl
 8017298:	f7e8 ffb2 	bl	8000200 <memchr>
 801729c:	b138      	cbz	r0, 80172ae <_vfiprintf_r+0x176>
 801729e:	9b04      	ldr	r3, [sp, #16]
 80172a0:	eba0 000a 	sub.w	r0, r0, sl
 80172a4:	2240      	movs	r2, #64	@ 0x40
 80172a6:	4082      	lsls	r2, r0
 80172a8:	4313      	orrs	r3, r2
 80172aa:	3401      	adds	r4, #1
 80172ac:	9304      	str	r3, [sp, #16]
 80172ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80172b2:	4829      	ldr	r0, [pc, #164]	@ (8017358 <_vfiprintf_r+0x220>)
 80172b4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80172b8:	2206      	movs	r2, #6
 80172ba:	f7e8 ffa1 	bl	8000200 <memchr>
 80172be:	2800      	cmp	r0, #0
 80172c0:	d03f      	beq.n	8017342 <_vfiprintf_r+0x20a>
 80172c2:	4b26      	ldr	r3, [pc, #152]	@ (801735c <_vfiprintf_r+0x224>)
 80172c4:	bb1b      	cbnz	r3, 801730e <_vfiprintf_r+0x1d6>
 80172c6:	9b03      	ldr	r3, [sp, #12]
 80172c8:	3307      	adds	r3, #7
 80172ca:	f023 0307 	bic.w	r3, r3, #7
 80172ce:	3308      	adds	r3, #8
 80172d0:	9303      	str	r3, [sp, #12]
 80172d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80172d4:	443b      	add	r3, r7
 80172d6:	9309      	str	r3, [sp, #36]	@ 0x24
 80172d8:	e76a      	b.n	80171b0 <_vfiprintf_r+0x78>
 80172da:	fb0c 3202 	mla	r2, ip, r2, r3
 80172de:	460c      	mov	r4, r1
 80172e0:	2001      	movs	r0, #1
 80172e2:	e7a8      	b.n	8017236 <_vfiprintf_r+0xfe>
 80172e4:	2300      	movs	r3, #0
 80172e6:	3401      	adds	r4, #1
 80172e8:	9305      	str	r3, [sp, #20]
 80172ea:	4619      	mov	r1, r3
 80172ec:	f04f 0c0a 	mov.w	ip, #10
 80172f0:	4620      	mov	r0, r4
 80172f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80172f6:	3a30      	subs	r2, #48	@ 0x30
 80172f8:	2a09      	cmp	r2, #9
 80172fa:	d903      	bls.n	8017304 <_vfiprintf_r+0x1cc>
 80172fc:	2b00      	cmp	r3, #0
 80172fe:	d0c6      	beq.n	801728e <_vfiprintf_r+0x156>
 8017300:	9105      	str	r1, [sp, #20]
 8017302:	e7c4      	b.n	801728e <_vfiprintf_r+0x156>
 8017304:	fb0c 2101 	mla	r1, ip, r1, r2
 8017308:	4604      	mov	r4, r0
 801730a:	2301      	movs	r3, #1
 801730c:	e7f0      	b.n	80172f0 <_vfiprintf_r+0x1b8>
 801730e:	ab03      	add	r3, sp, #12
 8017310:	9300      	str	r3, [sp, #0]
 8017312:	462a      	mov	r2, r5
 8017314:	4b12      	ldr	r3, [pc, #72]	@ (8017360 <_vfiprintf_r+0x228>)
 8017316:	a904      	add	r1, sp, #16
 8017318:	4630      	mov	r0, r6
 801731a:	f3af 8000 	nop.w
 801731e:	4607      	mov	r7, r0
 8017320:	1c78      	adds	r0, r7, #1
 8017322:	d1d6      	bne.n	80172d2 <_vfiprintf_r+0x19a>
 8017324:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017326:	07d9      	lsls	r1, r3, #31
 8017328:	d405      	bmi.n	8017336 <_vfiprintf_r+0x1fe>
 801732a:	89ab      	ldrh	r3, [r5, #12]
 801732c:	059a      	lsls	r2, r3, #22
 801732e:	d402      	bmi.n	8017336 <_vfiprintf_r+0x1fe>
 8017330:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8017332:	f7ff fda9 	bl	8016e88 <__retarget_lock_release_recursive>
 8017336:	89ab      	ldrh	r3, [r5, #12]
 8017338:	065b      	lsls	r3, r3, #25
 801733a:	f53f af1f 	bmi.w	801717c <_vfiprintf_r+0x44>
 801733e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017340:	e71e      	b.n	8017180 <_vfiprintf_r+0x48>
 8017342:	ab03      	add	r3, sp, #12
 8017344:	9300      	str	r3, [sp, #0]
 8017346:	462a      	mov	r2, r5
 8017348:	4b05      	ldr	r3, [pc, #20]	@ (8017360 <_vfiprintf_r+0x228>)
 801734a:	a904      	add	r1, sp, #16
 801734c:	4630      	mov	r0, r6
 801734e:	f000 f879 	bl	8017444 <_printf_i>
 8017352:	e7e4      	b.n	801731e <_vfiprintf_r+0x1e6>
 8017354:	0801b451 	.word	0x0801b451
 8017358:	0801b45b 	.word	0x0801b45b
 801735c:	00000000 	.word	0x00000000
 8017360:	08017113 	.word	0x08017113
 8017364:	0801b457 	.word	0x0801b457

08017368 <_printf_common>:
 8017368:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801736c:	4616      	mov	r6, r2
 801736e:	4698      	mov	r8, r3
 8017370:	688a      	ldr	r2, [r1, #8]
 8017372:	690b      	ldr	r3, [r1, #16]
 8017374:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8017378:	4293      	cmp	r3, r2
 801737a:	bfb8      	it	lt
 801737c:	4613      	movlt	r3, r2
 801737e:	6033      	str	r3, [r6, #0]
 8017380:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8017384:	4607      	mov	r7, r0
 8017386:	460c      	mov	r4, r1
 8017388:	b10a      	cbz	r2, 801738e <_printf_common+0x26>
 801738a:	3301      	adds	r3, #1
 801738c:	6033      	str	r3, [r6, #0]
 801738e:	6823      	ldr	r3, [r4, #0]
 8017390:	0699      	lsls	r1, r3, #26
 8017392:	bf42      	ittt	mi
 8017394:	6833      	ldrmi	r3, [r6, #0]
 8017396:	3302      	addmi	r3, #2
 8017398:	6033      	strmi	r3, [r6, #0]
 801739a:	6825      	ldr	r5, [r4, #0]
 801739c:	f015 0506 	ands.w	r5, r5, #6
 80173a0:	d106      	bne.n	80173b0 <_printf_common+0x48>
 80173a2:	f104 0a19 	add.w	sl, r4, #25
 80173a6:	68e3      	ldr	r3, [r4, #12]
 80173a8:	6832      	ldr	r2, [r6, #0]
 80173aa:	1a9b      	subs	r3, r3, r2
 80173ac:	42ab      	cmp	r3, r5
 80173ae:	dc26      	bgt.n	80173fe <_printf_common+0x96>
 80173b0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80173b4:	6822      	ldr	r2, [r4, #0]
 80173b6:	3b00      	subs	r3, #0
 80173b8:	bf18      	it	ne
 80173ba:	2301      	movne	r3, #1
 80173bc:	0692      	lsls	r2, r2, #26
 80173be:	d42b      	bmi.n	8017418 <_printf_common+0xb0>
 80173c0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80173c4:	4641      	mov	r1, r8
 80173c6:	4638      	mov	r0, r7
 80173c8:	47c8      	blx	r9
 80173ca:	3001      	adds	r0, #1
 80173cc:	d01e      	beq.n	801740c <_printf_common+0xa4>
 80173ce:	6823      	ldr	r3, [r4, #0]
 80173d0:	6922      	ldr	r2, [r4, #16]
 80173d2:	f003 0306 	and.w	r3, r3, #6
 80173d6:	2b04      	cmp	r3, #4
 80173d8:	bf02      	ittt	eq
 80173da:	68e5      	ldreq	r5, [r4, #12]
 80173dc:	6833      	ldreq	r3, [r6, #0]
 80173de:	1aed      	subeq	r5, r5, r3
 80173e0:	68a3      	ldr	r3, [r4, #8]
 80173e2:	bf0c      	ite	eq
 80173e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80173e8:	2500      	movne	r5, #0
 80173ea:	4293      	cmp	r3, r2
 80173ec:	bfc4      	itt	gt
 80173ee:	1a9b      	subgt	r3, r3, r2
 80173f0:	18ed      	addgt	r5, r5, r3
 80173f2:	2600      	movs	r6, #0
 80173f4:	341a      	adds	r4, #26
 80173f6:	42b5      	cmp	r5, r6
 80173f8:	d11a      	bne.n	8017430 <_printf_common+0xc8>
 80173fa:	2000      	movs	r0, #0
 80173fc:	e008      	b.n	8017410 <_printf_common+0xa8>
 80173fe:	2301      	movs	r3, #1
 8017400:	4652      	mov	r2, sl
 8017402:	4641      	mov	r1, r8
 8017404:	4638      	mov	r0, r7
 8017406:	47c8      	blx	r9
 8017408:	3001      	adds	r0, #1
 801740a:	d103      	bne.n	8017414 <_printf_common+0xac>
 801740c:	f04f 30ff 	mov.w	r0, #4294967295
 8017410:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017414:	3501      	adds	r5, #1
 8017416:	e7c6      	b.n	80173a6 <_printf_common+0x3e>
 8017418:	18e1      	adds	r1, r4, r3
 801741a:	1c5a      	adds	r2, r3, #1
 801741c:	2030      	movs	r0, #48	@ 0x30
 801741e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8017422:	4422      	add	r2, r4
 8017424:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8017428:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801742c:	3302      	adds	r3, #2
 801742e:	e7c7      	b.n	80173c0 <_printf_common+0x58>
 8017430:	2301      	movs	r3, #1
 8017432:	4622      	mov	r2, r4
 8017434:	4641      	mov	r1, r8
 8017436:	4638      	mov	r0, r7
 8017438:	47c8      	blx	r9
 801743a:	3001      	adds	r0, #1
 801743c:	d0e6      	beq.n	801740c <_printf_common+0xa4>
 801743e:	3601      	adds	r6, #1
 8017440:	e7d9      	b.n	80173f6 <_printf_common+0x8e>
	...

08017444 <_printf_i>:
 8017444:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017448:	7e0f      	ldrb	r7, [r1, #24]
 801744a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801744c:	2f78      	cmp	r7, #120	@ 0x78
 801744e:	4691      	mov	r9, r2
 8017450:	4680      	mov	r8, r0
 8017452:	460c      	mov	r4, r1
 8017454:	469a      	mov	sl, r3
 8017456:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801745a:	d807      	bhi.n	801746c <_printf_i+0x28>
 801745c:	2f62      	cmp	r7, #98	@ 0x62
 801745e:	d80a      	bhi.n	8017476 <_printf_i+0x32>
 8017460:	2f00      	cmp	r7, #0
 8017462:	f000 80d2 	beq.w	801760a <_printf_i+0x1c6>
 8017466:	2f58      	cmp	r7, #88	@ 0x58
 8017468:	f000 80b9 	beq.w	80175de <_printf_i+0x19a>
 801746c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8017470:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8017474:	e03a      	b.n	80174ec <_printf_i+0xa8>
 8017476:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801747a:	2b15      	cmp	r3, #21
 801747c:	d8f6      	bhi.n	801746c <_printf_i+0x28>
 801747e:	a101      	add	r1, pc, #4	@ (adr r1, 8017484 <_printf_i+0x40>)
 8017480:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8017484:	080174dd 	.word	0x080174dd
 8017488:	080174f1 	.word	0x080174f1
 801748c:	0801746d 	.word	0x0801746d
 8017490:	0801746d 	.word	0x0801746d
 8017494:	0801746d 	.word	0x0801746d
 8017498:	0801746d 	.word	0x0801746d
 801749c:	080174f1 	.word	0x080174f1
 80174a0:	0801746d 	.word	0x0801746d
 80174a4:	0801746d 	.word	0x0801746d
 80174a8:	0801746d 	.word	0x0801746d
 80174ac:	0801746d 	.word	0x0801746d
 80174b0:	080175f1 	.word	0x080175f1
 80174b4:	0801751b 	.word	0x0801751b
 80174b8:	080175ab 	.word	0x080175ab
 80174bc:	0801746d 	.word	0x0801746d
 80174c0:	0801746d 	.word	0x0801746d
 80174c4:	08017613 	.word	0x08017613
 80174c8:	0801746d 	.word	0x0801746d
 80174cc:	0801751b 	.word	0x0801751b
 80174d0:	0801746d 	.word	0x0801746d
 80174d4:	0801746d 	.word	0x0801746d
 80174d8:	080175b3 	.word	0x080175b3
 80174dc:	6833      	ldr	r3, [r6, #0]
 80174de:	1d1a      	adds	r2, r3, #4
 80174e0:	681b      	ldr	r3, [r3, #0]
 80174e2:	6032      	str	r2, [r6, #0]
 80174e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80174e8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80174ec:	2301      	movs	r3, #1
 80174ee:	e09d      	b.n	801762c <_printf_i+0x1e8>
 80174f0:	6833      	ldr	r3, [r6, #0]
 80174f2:	6820      	ldr	r0, [r4, #0]
 80174f4:	1d19      	adds	r1, r3, #4
 80174f6:	6031      	str	r1, [r6, #0]
 80174f8:	0606      	lsls	r6, r0, #24
 80174fa:	d501      	bpl.n	8017500 <_printf_i+0xbc>
 80174fc:	681d      	ldr	r5, [r3, #0]
 80174fe:	e003      	b.n	8017508 <_printf_i+0xc4>
 8017500:	0645      	lsls	r5, r0, #25
 8017502:	d5fb      	bpl.n	80174fc <_printf_i+0xb8>
 8017504:	f9b3 5000 	ldrsh.w	r5, [r3]
 8017508:	2d00      	cmp	r5, #0
 801750a:	da03      	bge.n	8017514 <_printf_i+0xd0>
 801750c:	232d      	movs	r3, #45	@ 0x2d
 801750e:	426d      	negs	r5, r5
 8017510:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8017514:	4859      	ldr	r0, [pc, #356]	@ (801767c <_printf_i+0x238>)
 8017516:	230a      	movs	r3, #10
 8017518:	e011      	b.n	801753e <_printf_i+0xfa>
 801751a:	6821      	ldr	r1, [r4, #0]
 801751c:	6833      	ldr	r3, [r6, #0]
 801751e:	0608      	lsls	r0, r1, #24
 8017520:	f853 5b04 	ldr.w	r5, [r3], #4
 8017524:	d402      	bmi.n	801752c <_printf_i+0xe8>
 8017526:	0649      	lsls	r1, r1, #25
 8017528:	bf48      	it	mi
 801752a:	b2ad      	uxthmi	r5, r5
 801752c:	2f6f      	cmp	r7, #111	@ 0x6f
 801752e:	4853      	ldr	r0, [pc, #332]	@ (801767c <_printf_i+0x238>)
 8017530:	6033      	str	r3, [r6, #0]
 8017532:	bf14      	ite	ne
 8017534:	230a      	movne	r3, #10
 8017536:	2308      	moveq	r3, #8
 8017538:	2100      	movs	r1, #0
 801753a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801753e:	6866      	ldr	r6, [r4, #4]
 8017540:	60a6      	str	r6, [r4, #8]
 8017542:	2e00      	cmp	r6, #0
 8017544:	bfa2      	ittt	ge
 8017546:	6821      	ldrge	r1, [r4, #0]
 8017548:	f021 0104 	bicge.w	r1, r1, #4
 801754c:	6021      	strge	r1, [r4, #0]
 801754e:	b90d      	cbnz	r5, 8017554 <_printf_i+0x110>
 8017550:	2e00      	cmp	r6, #0
 8017552:	d04b      	beq.n	80175ec <_printf_i+0x1a8>
 8017554:	4616      	mov	r6, r2
 8017556:	fbb5 f1f3 	udiv	r1, r5, r3
 801755a:	fb03 5711 	mls	r7, r3, r1, r5
 801755e:	5dc7      	ldrb	r7, [r0, r7]
 8017560:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8017564:	462f      	mov	r7, r5
 8017566:	42bb      	cmp	r3, r7
 8017568:	460d      	mov	r5, r1
 801756a:	d9f4      	bls.n	8017556 <_printf_i+0x112>
 801756c:	2b08      	cmp	r3, #8
 801756e:	d10b      	bne.n	8017588 <_printf_i+0x144>
 8017570:	6823      	ldr	r3, [r4, #0]
 8017572:	07df      	lsls	r7, r3, #31
 8017574:	d508      	bpl.n	8017588 <_printf_i+0x144>
 8017576:	6923      	ldr	r3, [r4, #16]
 8017578:	6861      	ldr	r1, [r4, #4]
 801757a:	4299      	cmp	r1, r3
 801757c:	bfde      	ittt	le
 801757e:	2330      	movle	r3, #48	@ 0x30
 8017580:	f806 3c01 	strble.w	r3, [r6, #-1]
 8017584:	f106 36ff 	addle.w	r6, r6, #4294967295
 8017588:	1b92      	subs	r2, r2, r6
 801758a:	6122      	str	r2, [r4, #16]
 801758c:	f8cd a000 	str.w	sl, [sp]
 8017590:	464b      	mov	r3, r9
 8017592:	aa03      	add	r2, sp, #12
 8017594:	4621      	mov	r1, r4
 8017596:	4640      	mov	r0, r8
 8017598:	f7ff fee6 	bl	8017368 <_printf_common>
 801759c:	3001      	adds	r0, #1
 801759e:	d14a      	bne.n	8017636 <_printf_i+0x1f2>
 80175a0:	f04f 30ff 	mov.w	r0, #4294967295
 80175a4:	b004      	add	sp, #16
 80175a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80175aa:	6823      	ldr	r3, [r4, #0]
 80175ac:	f043 0320 	orr.w	r3, r3, #32
 80175b0:	6023      	str	r3, [r4, #0]
 80175b2:	4833      	ldr	r0, [pc, #204]	@ (8017680 <_printf_i+0x23c>)
 80175b4:	2778      	movs	r7, #120	@ 0x78
 80175b6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80175ba:	6823      	ldr	r3, [r4, #0]
 80175bc:	6831      	ldr	r1, [r6, #0]
 80175be:	061f      	lsls	r7, r3, #24
 80175c0:	f851 5b04 	ldr.w	r5, [r1], #4
 80175c4:	d402      	bmi.n	80175cc <_printf_i+0x188>
 80175c6:	065f      	lsls	r7, r3, #25
 80175c8:	bf48      	it	mi
 80175ca:	b2ad      	uxthmi	r5, r5
 80175cc:	6031      	str	r1, [r6, #0]
 80175ce:	07d9      	lsls	r1, r3, #31
 80175d0:	bf44      	itt	mi
 80175d2:	f043 0320 	orrmi.w	r3, r3, #32
 80175d6:	6023      	strmi	r3, [r4, #0]
 80175d8:	b11d      	cbz	r5, 80175e2 <_printf_i+0x19e>
 80175da:	2310      	movs	r3, #16
 80175dc:	e7ac      	b.n	8017538 <_printf_i+0xf4>
 80175de:	4827      	ldr	r0, [pc, #156]	@ (801767c <_printf_i+0x238>)
 80175e0:	e7e9      	b.n	80175b6 <_printf_i+0x172>
 80175e2:	6823      	ldr	r3, [r4, #0]
 80175e4:	f023 0320 	bic.w	r3, r3, #32
 80175e8:	6023      	str	r3, [r4, #0]
 80175ea:	e7f6      	b.n	80175da <_printf_i+0x196>
 80175ec:	4616      	mov	r6, r2
 80175ee:	e7bd      	b.n	801756c <_printf_i+0x128>
 80175f0:	6833      	ldr	r3, [r6, #0]
 80175f2:	6825      	ldr	r5, [r4, #0]
 80175f4:	6961      	ldr	r1, [r4, #20]
 80175f6:	1d18      	adds	r0, r3, #4
 80175f8:	6030      	str	r0, [r6, #0]
 80175fa:	062e      	lsls	r6, r5, #24
 80175fc:	681b      	ldr	r3, [r3, #0]
 80175fe:	d501      	bpl.n	8017604 <_printf_i+0x1c0>
 8017600:	6019      	str	r1, [r3, #0]
 8017602:	e002      	b.n	801760a <_printf_i+0x1c6>
 8017604:	0668      	lsls	r0, r5, #25
 8017606:	d5fb      	bpl.n	8017600 <_printf_i+0x1bc>
 8017608:	8019      	strh	r1, [r3, #0]
 801760a:	2300      	movs	r3, #0
 801760c:	6123      	str	r3, [r4, #16]
 801760e:	4616      	mov	r6, r2
 8017610:	e7bc      	b.n	801758c <_printf_i+0x148>
 8017612:	6833      	ldr	r3, [r6, #0]
 8017614:	1d1a      	adds	r2, r3, #4
 8017616:	6032      	str	r2, [r6, #0]
 8017618:	681e      	ldr	r6, [r3, #0]
 801761a:	6862      	ldr	r2, [r4, #4]
 801761c:	2100      	movs	r1, #0
 801761e:	4630      	mov	r0, r6
 8017620:	f7e8 fdee 	bl	8000200 <memchr>
 8017624:	b108      	cbz	r0, 801762a <_printf_i+0x1e6>
 8017626:	1b80      	subs	r0, r0, r6
 8017628:	6060      	str	r0, [r4, #4]
 801762a:	6863      	ldr	r3, [r4, #4]
 801762c:	6123      	str	r3, [r4, #16]
 801762e:	2300      	movs	r3, #0
 8017630:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8017634:	e7aa      	b.n	801758c <_printf_i+0x148>
 8017636:	6923      	ldr	r3, [r4, #16]
 8017638:	4632      	mov	r2, r6
 801763a:	4649      	mov	r1, r9
 801763c:	4640      	mov	r0, r8
 801763e:	47d0      	blx	sl
 8017640:	3001      	adds	r0, #1
 8017642:	d0ad      	beq.n	80175a0 <_printf_i+0x15c>
 8017644:	6823      	ldr	r3, [r4, #0]
 8017646:	079b      	lsls	r3, r3, #30
 8017648:	d413      	bmi.n	8017672 <_printf_i+0x22e>
 801764a:	68e0      	ldr	r0, [r4, #12]
 801764c:	9b03      	ldr	r3, [sp, #12]
 801764e:	4298      	cmp	r0, r3
 8017650:	bfb8      	it	lt
 8017652:	4618      	movlt	r0, r3
 8017654:	e7a6      	b.n	80175a4 <_printf_i+0x160>
 8017656:	2301      	movs	r3, #1
 8017658:	4632      	mov	r2, r6
 801765a:	4649      	mov	r1, r9
 801765c:	4640      	mov	r0, r8
 801765e:	47d0      	blx	sl
 8017660:	3001      	adds	r0, #1
 8017662:	d09d      	beq.n	80175a0 <_printf_i+0x15c>
 8017664:	3501      	adds	r5, #1
 8017666:	68e3      	ldr	r3, [r4, #12]
 8017668:	9903      	ldr	r1, [sp, #12]
 801766a:	1a5b      	subs	r3, r3, r1
 801766c:	42ab      	cmp	r3, r5
 801766e:	dcf2      	bgt.n	8017656 <_printf_i+0x212>
 8017670:	e7eb      	b.n	801764a <_printf_i+0x206>
 8017672:	2500      	movs	r5, #0
 8017674:	f104 0619 	add.w	r6, r4, #25
 8017678:	e7f5      	b.n	8017666 <_printf_i+0x222>
 801767a:	bf00      	nop
 801767c:	0801b462 	.word	0x0801b462
 8017680:	0801b473 	.word	0x0801b473

08017684 <__sflush_r>:
 8017684:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8017688:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801768c:	0716      	lsls	r6, r2, #28
 801768e:	4605      	mov	r5, r0
 8017690:	460c      	mov	r4, r1
 8017692:	d454      	bmi.n	801773e <__sflush_r+0xba>
 8017694:	684b      	ldr	r3, [r1, #4]
 8017696:	2b00      	cmp	r3, #0
 8017698:	dc02      	bgt.n	80176a0 <__sflush_r+0x1c>
 801769a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801769c:	2b00      	cmp	r3, #0
 801769e:	dd48      	ble.n	8017732 <__sflush_r+0xae>
 80176a0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80176a2:	2e00      	cmp	r6, #0
 80176a4:	d045      	beq.n	8017732 <__sflush_r+0xae>
 80176a6:	2300      	movs	r3, #0
 80176a8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80176ac:	682f      	ldr	r7, [r5, #0]
 80176ae:	6a21      	ldr	r1, [r4, #32]
 80176b0:	602b      	str	r3, [r5, #0]
 80176b2:	d030      	beq.n	8017716 <__sflush_r+0x92>
 80176b4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80176b6:	89a3      	ldrh	r3, [r4, #12]
 80176b8:	0759      	lsls	r1, r3, #29
 80176ba:	d505      	bpl.n	80176c8 <__sflush_r+0x44>
 80176bc:	6863      	ldr	r3, [r4, #4]
 80176be:	1ad2      	subs	r2, r2, r3
 80176c0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80176c2:	b10b      	cbz	r3, 80176c8 <__sflush_r+0x44>
 80176c4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80176c6:	1ad2      	subs	r2, r2, r3
 80176c8:	2300      	movs	r3, #0
 80176ca:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80176cc:	6a21      	ldr	r1, [r4, #32]
 80176ce:	4628      	mov	r0, r5
 80176d0:	47b0      	blx	r6
 80176d2:	1c43      	adds	r3, r0, #1
 80176d4:	89a3      	ldrh	r3, [r4, #12]
 80176d6:	d106      	bne.n	80176e6 <__sflush_r+0x62>
 80176d8:	6829      	ldr	r1, [r5, #0]
 80176da:	291d      	cmp	r1, #29
 80176dc:	d82b      	bhi.n	8017736 <__sflush_r+0xb2>
 80176de:	4a2a      	ldr	r2, [pc, #168]	@ (8017788 <__sflush_r+0x104>)
 80176e0:	410a      	asrs	r2, r1
 80176e2:	07d6      	lsls	r6, r2, #31
 80176e4:	d427      	bmi.n	8017736 <__sflush_r+0xb2>
 80176e6:	2200      	movs	r2, #0
 80176e8:	6062      	str	r2, [r4, #4]
 80176ea:	04d9      	lsls	r1, r3, #19
 80176ec:	6922      	ldr	r2, [r4, #16]
 80176ee:	6022      	str	r2, [r4, #0]
 80176f0:	d504      	bpl.n	80176fc <__sflush_r+0x78>
 80176f2:	1c42      	adds	r2, r0, #1
 80176f4:	d101      	bne.n	80176fa <__sflush_r+0x76>
 80176f6:	682b      	ldr	r3, [r5, #0]
 80176f8:	b903      	cbnz	r3, 80176fc <__sflush_r+0x78>
 80176fa:	6560      	str	r0, [r4, #84]	@ 0x54
 80176fc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80176fe:	602f      	str	r7, [r5, #0]
 8017700:	b1b9      	cbz	r1, 8017732 <__sflush_r+0xae>
 8017702:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8017706:	4299      	cmp	r1, r3
 8017708:	d002      	beq.n	8017710 <__sflush_r+0x8c>
 801770a:	4628      	mov	r0, r5
 801770c:	f7ff fbea 	bl	8016ee4 <_free_r>
 8017710:	2300      	movs	r3, #0
 8017712:	6363      	str	r3, [r4, #52]	@ 0x34
 8017714:	e00d      	b.n	8017732 <__sflush_r+0xae>
 8017716:	2301      	movs	r3, #1
 8017718:	4628      	mov	r0, r5
 801771a:	47b0      	blx	r6
 801771c:	4602      	mov	r2, r0
 801771e:	1c50      	adds	r0, r2, #1
 8017720:	d1c9      	bne.n	80176b6 <__sflush_r+0x32>
 8017722:	682b      	ldr	r3, [r5, #0]
 8017724:	2b00      	cmp	r3, #0
 8017726:	d0c6      	beq.n	80176b6 <__sflush_r+0x32>
 8017728:	2b1d      	cmp	r3, #29
 801772a:	d001      	beq.n	8017730 <__sflush_r+0xac>
 801772c:	2b16      	cmp	r3, #22
 801772e:	d11e      	bne.n	801776e <__sflush_r+0xea>
 8017730:	602f      	str	r7, [r5, #0]
 8017732:	2000      	movs	r0, #0
 8017734:	e022      	b.n	801777c <__sflush_r+0xf8>
 8017736:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801773a:	b21b      	sxth	r3, r3
 801773c:	e01b      	b.n	8017776 <__sflush_r+0xf2>
 801773e:	690f      	ldr	r7, [r1, #16]
 8017740:	2f00      	cmp	r7, #0
 8017742:	d0f6      	beq.n	8017732 <__sflush_r+0xae>
 8017744:	0793      	lsls	r3, r2, #30
 8017746:	680e      	ldr	r6, [r1, #0]
 8017748:	bf08      	it	eq
 801774a:	694b      	ldreq	r3, [r1, #20]
 801774c:	600f      	str	r7, [r1, #0]
 801774e:	bf18      	it	ne
 8017750:	2300      	movne	r3, #0
 8017752:	eba6 0807 	sub.w	r8, r6, r7
 8017756:	608b      	str	r3, [r1, #8]
 8017758:	f1b8 0f00 	cmp.w	r8, #0
 801775c:	dde9      	ble.n	8017732 <__sflush_r+0xae>
 801775e:	6a21      	ldr	r1, [r4, #32]
 8017760:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8017762:	4643      	mov	r3, r8
 8017764:	463a      	mov	r2, r7
 8017766:	4628      	mov	r0, r5
 8017768:	47b0      	blx	r6
 801776a:	2800      	cmp	r0, #0
 801776c:	dc08      	bgt.n	8017780 <__sflush_r+0xfc>
 801776e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017772:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017776:	81a3      	strh	r3, [r4, #12]
 8017778:	f04f 30ff 	mov.w	r0, #4294967295
 801777c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017780:	4407      	add	r7, r0
 8017782:	eba8 0800 	sub.w	r8, r8, r0
 8017786:	e7e7      	b.n	8017758 <__sflush_r+0xd4>
 8017788:	dfbffffe 	.word	0xdfbffffe

0801778c <_fflush_r>:
 801778c:	b538      	push	{r3, r4, r5, lr}
 801778e:	690b      	ldr	r3, [r1, #16]
 8017790:	4605      	mov	r5, r0
 8017792:	460c      	mov	r4, r1
 8017794:	b913      	cbnz	r3, 801779c <_fflush_r+0x10>
 8017796:	2500      	movs	r5, #0
 8017798:	4628      	mov	r0, r5
 801779a:	bd38      	pop	{r3, r4, r5, pc}
 801779c:	b118      	cbz	r0, 80177a6 <_fflush_r+0x1a>
 801779e:	6a03      	ldr	r3, [r0, #32]
 80177a0:	b90b      	cbnz	r3, 80177a6 <_fflush_r+0x1a>
 80177a2:	f7ff fa0b 	bl	8016bbc <__sinit>
 80177a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80177aa:	2b00      	cmp	r3, #0
 80177ac:	d0f3      	beq.n	8017796 <_fflush_r+0xa>
 80177ae:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80177b0:	07d0      	lsls	r0, r2, #31
 80177b2:	d404      	bmi.n	80177be <_fflush_r+0x32>
 80177b4:	0599      	lsls	r1, r3, #22
 80177b6:	d402      	bmi.n	80177be <_fflush_r+0x32>
 80177b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80177ba:	f7ff fb64 	bl	8016e86 <__retarget_lock_acquire_recursive>
 80177be:	4628      	mov	r0, r5
 80177c0:	4621      	mov	r1, r4
 80177c2:	f7ff ff5f 	bl	8017684 <__sflush_r>
 80177c6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80177c8:	07da      	lsls	r2, r3, #31
 80177ca:	4605      	mov	r5, r0
 80177cc:	d4e4      	bmi.n	8017798 <_fflush_r+0xc>
 80177ce:	89a3      	ldrh	r3, [r4, #12]
 80177d0:	059b      	lsls	r3, r3, #22
 80177d2:	d4e1      	bmi.n	8017798 <_fflush_r+0xc>
 80177d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80177d6:	f7ff fb57 	bl	8016e88 <__retarget_lock_release_recursive>
 80177da:	e7dd      	b.n	8017798 <_fflush_r+0xc>

080177dc <fiprintf>:
 80177dc:	b40e      	push	{r1, r2, r3}
 80177de:	b503      	push	{r0, r1, lr}
 80177e0:	4601      	mov	r1, r0
 80177e2:	ab03      	add	r3, sp, #12
 80177e4:	4805      	ldr	r0, [pc, #20]	@ (80177fc <fiprintf+0x20>)
 80177e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80177ea:	6800      	ldr	r0, [r0, #0]
 80177ec:	9301      	str	r3, [sp, #4]
 80177ee:	f7ff fca3 	bl	8017138 <_vfiprintf_r>
 80177f2:	b002      	add	sp, #8
 80177f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80177f8:	b003      	add	sp, #12
 80177fa:	4770      	bx	lr
 80177fc:	2000013c 	.word	0x2000013c

08017800 <__swbuf_r>:
 8017800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017802:	460e      	mov	r6, r1
 8017804:	4614      	mov	r4, r2
 8017806:	4605      	mov	r5, r0
 8017808:	b118      	cbz	r0, 8017812 <__swbuf_r+0x12>
 801780a:	6a03      	ldr	r3, [r0, #32]
 801780c:	b90b      	cbnz	r3, 8017812 <__swbuf_r+0x12>
 801780e:	f7ff f9d5 	bl	8016bbc <__sinit>
 8017812:	69a3      	ldr	r3, [r4, #24]
 8017814:	60a3      	str	r3, [r4, #8]
 8017816:	89a3      	ldrh	r3, [r4, #12]
 8017818:	071a      	lsls	r2, r3, #28
 801781a:	d501      	bpl.n	8017820 <__swbuf_r+0x20>
 801781c:	6923      	ldr	r3, [r4, #16]
 801781e:	b943      	cbnz	r3, 8017832 <__swbuf_r+0x32>
 8017820:	4621      	mov	r1, r4
 8017822:	4628      	mov	r0, r5
 8017824:	f000 f82a 	bl	801787c <__swsetup_r>
 8017828:	b118      	cbz	r0, 8017832 <__swbuf_r+0x32>
 801782a:	f04f 37ff 	mov.w	r7, #4294967295
 801782e:	4638      	mov	r0, r7
 8017830:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017832:	6823      	ldr	r3, [r4, #0]
 8017834:	6922      	ldr	r2, [r4, #16]
 8017836:	1a98      	subs	r0, r3, r2
 8017838:	6963      	ldr	r3, [r4, #20]
 801783a:	b2f6      	uxtb	r6, r6
 801783c:	4283      	cmp	r3, r0
 801783e:	4637      	mov	r7, r6
 8017840:	dc05      	bgt.n	801784e <__swbuf_r+0x4e>
 8017842:	4621      	mov	r1, r4
 8017844:	4628      	mov	r0, r5
 8017846:	f7ff ffa1 	bl	801778c <_fflush_r>
 801784a:	2800      	cmp	r0, #0
 801784c:	d1ed      	bne.n	801782a <__swbuf_r+0x2a>
 801784e:	68a3      	ldr	r3, [r4, #8]
 8017850:	3b01      	subs	r3, #1
 8017852:	60a3      	str	r3, [r4, #8]
 8017854:	6823      	ldr	r3, [r4, #0]
 8017856:	1c5a      	adds	r2, r3, #1
 8017858:	6022      	str	r2, [r4, #0]
 801785a:	701e      	strb	r6, [r3, #0]
 801785c:	6962      	ldr	r2, [r4, #20]
 801785e:	1c43      	adds	r3, r0, #1
 8017860:	429a      	cmp	r2, r3
 8017862:	d004      	beq.n	801786e <__swbuf_r+0x6e>
 8017864:	89a3      	ldrh	r3, [r4, #12]
 8017866:	07db      	lsls	r3, r3, #31
 8017868:	d5e1      	bpl.n	801782e <__swbuf_r+0x2e>
 801786a:	2e0a      	cmp	r6, #10
 801786c:	d1df      	bne.n	801782e <__swbuf_r+0x2e>
 801786e:	4621      	mov	r1, r4
 8017870:	4628      	mov	r0, r5
 8017872:	f7ff ff8b 	bl	801778c <_fflush_r>
 8017876:	2800      	cmp	r0, #0
 8017878:	d0d9      	beq.n	801782e <__swbuf_r+0x2e>
 801787a:	e7d6      	b.n	801782a <__swbuf_r+0x2a>

0801787c <__swsetup_r>:
 801787c:	b538      	push	{r3, r4, r5, lr}
 801787e:	4b29      	ldr	r3, [pc, #164]	@ (8017924 <__swsetup_r+0xa8>)
 8017880:	4605      	mov	r5, r0
 8017882:	6818      	ldr	r0, [r3, #0]
 8017884:	460c      	mov	r4, r1
 8017886:	b118      	cbz	r0, 8017890 <__swsetup_r+0x14>
 8017888:	6a03      	ldr	r3, [r0, #32]
 801788a:	b90b      	cbnz	r3, 8017890 <__swsetup_r+0x14>
 801788c:	f7ff f996 	bl	8016bbc <__sinit>
 8017890:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017894:	0719      	lsls	r1, r3, #28
 8017896:	d422      	bmi.n	80178de <__swsetup_r+0x62>
 8017898:	06da      	lsls	r2, r3, #27
 801789a:	d407      	bmi.n	80178ac <__swsetup_r+0x30>
 801789c:	2209      	movs	r2, #9
 801789e:	602a      	str	r2, [r5, #0]
 80178a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80178a4:	81a3      	strh	r3, [r4, #12]
 80178a6:	f04f 30ff 	mov.w	r0, #4294967295
 80178aa:	e033      	b.n	8017914 <__swsetup_r+0x98>
 80178ac:	0758      	lsls	r0, r3, #29
 80178ae:	d512      	bpl.n	80178d6 <__swsetup_r+0x5a>
 80178b0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80178b2:	b141      	cbz	r1, 80178c6 <__swsetup_r+0x4a>
 80178b4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80178b8:	4299      	cmp	r1, r3
 80178ba:	d002      	beq.n	80178c2 <__swsetup_r+0x46>
 80178bc:	4628      	mov	r0, r5
 80178be:	f7ff fb11 	bl	8016ee4 <_free_r>
 80178c2:	2300      	movs	r3, #0
 80178c4:	6363      	str	r3, [r4, #52]	@ 0x34
 80178c6:	89a3      	ldrh	r3, [r4, #12]
 80178c8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80178cc:	81a3      	strh	r3, [r4, #12]
 80178ce:	2300      	movs	r3, #0
 80178d0:	6063      	str	r3, [r4, #4]
 80178d2:	6923      	ldr	r3, [r4, #16]
 80178d4:	6023      	str	r3, [r4, #0]
 80178d6:	89a3      	ldrh	r3, [r4, #12]
 80178d8:	f043 0308 	orr.w	r3, r3, #8
 80178dc:	81a3      	strh	r3, [r4, #12]
 80178de:	6923      	ldr	r3, [r4, #16]
 80178e0:	b94b      	cbnz	r3, 80178f6 <__swsetup_r+0x7a>
 80178e2:	89a3      	ldrh	r3, [r4, #12]
 80178e4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80178e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80178ec:	d003      	beq.n	80178f6 <__swsetup_r+0x7a>
 80178ee:	4621      	mov	r1, r4
 80178f0:	4628      	mov	r0, r5
 80178f2:	f000 f856 	bl	80179a2 <__smakebuf_r>
 80178f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80178fa:	f013 0201 	ands.w	r2, r3, #1
 80178fe:	d00a      	beq.n	8017916 <__swsetup_r+0x9a>
 8017900:	2200      	movs	r2, #0
 8017902:	60a2      	str	r2, [r4, #8]
 8017904:	6962      	ldr	r2, [r4, #20]
 8017906:	4252      	negs	r2, r2
 8017908:	61a2      	str	r2, [r4, #24]
 801790a:	6922      	ldr	r2, [r4, #16]
 801790c:	b942      	cbnz	r2, 8017920 <__swsetup_r+0xa4>
 801790e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8017912:	d1c5      	bne.n	80178a0 <__swsetup_r+0x24>
 8017914:	bd38      	pop	{r3, r4, r5, pc}
 8017916:	0799      	lsls	r1, r3, #30
 8017918:	bf58      	it	pl
 801791a:	6962      	ldrpl	r2, [r4, #20]
 801791c:	60a2      	str	r2, [r4, #8]
 801791e:	e7f4      	b.n	801790a <__swsetup_r+0x8e>
 8017920:	2000      	movs	r0, #0
 8017922:	e7f7      	b.n	8017914 <__swsetup_r+0x98>
 8017924:	2000013c 	.word	0x2000013c

08017928 <_sbrk_r>:
 8017928:	b538      	push	{r3, r4, r5, lr}
 801792a:	4d06      	ldr	r5, [pc, #24]	@ (8017944 <_sbrk_r+0x1c>)
 801792c:	2300      	movs	r3, #0
 801792e:	4604      	mov	r4, r0
 8017930:	4608      	mov	r0, r1
 8017932:	602b      	str	r3, [r5, #0]
 8017934:	f7e9 fc0e 	bl	8001154 <_sbrk>
 8017938:	1c43      	adds	r3, r0, #1
 801793a:	d102      	bne.n	8017942 <_sbrk_r+0x1a>
 801793c:	682b      	ldr	r3, [r5, #0]
 801793e:	b103      	cbz	r3, 8017942 <_sbrk_r+0x1a>
 8017940:	6023      	str	r3, [r4, #0]
 8017942:	bd38      	pop	{r3, r4, r5, pc}
 8017944:	2000f684 	.word	0x2000f684

08017948 <abort>:
 8017948:	b508      	push	{r3, lr}
 801794a:	2006      	movs	r0, #6
 801794c:	f000 f88e 	bl	8017a6c <raise>
 8017950:	2001      	movs	r0, #1
 8017952:	f7e9 fb87 	bl	8001064 <_exit>

08017956 <__swhatbuf_r>:
 8017956:	b570      	push	{r4, r5, r6, lr}
 8017958:	460c      	mov	r4, r1
 801795a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801795e:	2900      	cmp	r1, #0
 8017960:	b096      	sub	sp, #88	@ 0x58
 8017962:	4615      	mov	r5, r2
 8017964:	461e      	mov	r6, r3
 8017966:	da0d      	bge.n	8017984 <__swhatbuf_r+0x2e>
 8017968:	89a3      	ldrh	r3, [r4, #12]
 801796a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801796e:	f04f 0100 	mov.w	r1, #0
 8017972:	bf14      	ite	ne
 8017974:	2340      	movne	r3, #64	@ 0x40
 8017976:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801797a:	2000      	movs	r0, #0
 801797c:	6031      	str	r1, [r6, #0]
 801797e:	602b      	str	r3, [r5, #0]
 8017980:	b016      	add	sp, #88	@ 0x58
 8017982:	bd70      	pop	{r4, r5, r6, pc}
 8017984:	466a      	mov	r2, sp
 8017986:	f000 f879 	bl	8017a7c <_fstat_r>
 801798a:	2800      	cmp	r0, #0
 801798c:	dbec      	blt.n	8017968 <__swhatbuf_r+0x12>
 801798e:	9901      	ldr	r1, [sp, #4]
 8017990:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8017994:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8017998:	4259      	negs	r1, r3
 801799a:	4159      	adcs	r1, r3
 801799c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80179a0:	e7eb      	b.n	801797a <__swhatbuf_r+0x24>

080179a2 <__smakebuf_r>:
 80179a2:	898b      	ldrh	r3, [r1, #12]
 80179a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80179a6:	079d      	lsls	r5, r3, #30
 80179a8:	4606      	mov	r6, r0
 80179aa:	460c      	mov	r4, r1
 80179ac:	d507      	bpl.n	80179be <__smakebuf_r+0x1c>
 80179ae:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80179b2:	6023      	str	r3, [r4, #0]
 80179b4:	6123      	str	r3, [r4, #16]
 80179b6:	2301      	movs	r3, #1
 80179b8:	6163      	str	r3, [r4, #20]
 80179ba:	b003      	add	sp, #12
 80179bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80179be:	ab01      	add	r3, sp, #4
 80179c0:	466a      	mov	r2, sp
 80179c2:	f7ff ffc8 	bl	8017956 <__swhatbuf_r>
 80179c6:	9f00      	ldr	r7, [sp, #0]
 80179c8:	4605      	mov	r5, r0
 80179ca:	4639      	mov	r1, r7
 80179cc:	4630      	mov	r0, r6
 80179ce:	f7ff fafd 	bl	8016fcc <_malloc_r>
 80179d2:	b948      	cbnz	r0, 80179e8 <__smakebuf_r+0x46>
 80179d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80179d8:	059a      	lsls	r2, r3, #22
 80179da:	d4ee      	bmi.n	80179ba <__smakebuf_r+0x18>
 80179dc:	f023 0303 	bic.w	r3, r3, #3
 80179e0:	f043 0302 	orr.w	r3, r3, #2
 80179e4:	81a3      	strh	r3, [r4, #12]
 80179e6:	e7e2      	b.n	80179ae <__smakebuf_r+0xc>
 80179e8:	89a3      	ldrh	r3, [r4, #12]
 80179ea:	6020      	str	r0, [r4, #0]
 80179ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80179f0:	81a3      	strh	r3, [r4, #12]
 80179f2:	9b01      	ldr	r3, [sp, #4]
 80179f4:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80179f8:	b15b      	cbz	r3, 8017a12 <__smakebuf_r+0x70>
 80179fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80179fe:	4630      	mov	r0, r6
 8017a00:	f000 f84e 	bl	8017aa0 <_isatty_r>
 8017a04:	b128      	cbz	r0, 8017a12 <__smakebuf_r+0x70>
 8017a06:	89a3      	ldrh	r3, [r4, #12]
 8017a08:	f023 0303 	bic.w	r3, r3, #3
 8017a0c:	f043 0301 	orr.w	r3, r3, #1
 8017a10:	81a3      	strh	r3, [r4, #12]
 8017a12:	89a3      	ldrh	r3, [r4, #12]
 8017a14:	431d      	orrs	r5, r3
 8017a16:	81a5      	strh	r5, [r4, #12]
 8017a18:	e7cf      	b.n	80179ba <__smakebuf_r+0x18>

08017a1a <_raise_r>:
 8017a1a:	291f      	cmp	r1, #31
 8017a1c:	b538      	push	{r3, r4, r5, lr}
 8017a1e:	4605      	mov	r5, r0
 8017a20:	460c      	mov	r4, r1
 8017a22:	d904      	bls.n	8017a2e <_raise_r+0x14>
 8017a24:	2316      	movs	r3, #22
 8017a26:	6003      	str	r3, [r0, #0]
 8017a28:	f04f 30ff 	mov.w	r0, #4294967295
 8017a2c:	bd38      	pop	{r3, r4, r5, pc}
 8017a2e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8017a30:	b112      	cbz	r2, 8017a38 <_raise_r+0x1e>
 8017a32:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8017a36:	b94b      	cbnz	r3, 8017a4c <_raise_r+0x32>
 8017a38:	4628      	mov	r0, r5
 8017a3a:	f000 f853 	bl	8017ae4 <_getpid_r>
 8017a3e:	4622      	mov	r2, r4
 8017a40:	4601      	mov	r1, r0
 8017a42:	4628      	mov	r0, r5
 8017a44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017a48:	f000 b83a 	b.w	8017ac0 <_kill_r>
 8017a4c:	2b01      	cmp	r3, #1
 8017a4e:	d00a      	beq.n	8017a66 <_raise_r+0x4c>
 8017a50:	1c59      	adds	r1, r3, #1
 8017a52:	d103      	bne.n	8017a5c <_raise_r+0x42>
 8017a54:	2316      	movs	r3, #22
 8017a56:	6003      	str	r3, [r0, #0]
 8017a58:	2001      	movs	r0, #1
 8017a5a:	e7e7      	b.n	8017a2c <_raise_r+0x12>
 8017a5c:	2100      	movs	r1, #0
 8017a5e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8017a62:	4620      	mov	r0, r4
 8017a64:	4798      	blx	r3
 8017a66:	2000      	movs	r0, #0
 8017a68:	e7e0      	b.n	8017a2c <_raise_r+0x12>
	...

08017a6c <raise>:
 8017a6c:	4b02      	ldr	r3, [pc, #8]	@ (8017a78 <raise+0xc>)
 8017a6e:	4601      	mov	r1, r0
 8017a70:	6818      	ldr	r0, [r3, #0]
 8017a72:	f7ff bfd2 	b.w	8017a1a <_raise_r>
 8017a76:	bf00      	nop
 8017a78:	2000013c 	.word	0x2000013c

08017a7c <_fstat_r>:
 8017a7c:	b538      	push	{r3, r4, r5, lr}
 8017a7e:	4d07      	ldr	r5, [pc, #28]	@ (8017a9c <_fstat_r+0x20>)
 8017a80:	2300      	movs	r3, #0
 8017a82:	4604      	mov	r4, r0
 8017a84:	4608      	mov	r0, r1
 8017a86:	4611      	mov	r1, r2
 8017a88:	602b      	str	r3, [r5, #0]
 8017a8a:	f7e9 fb3b 	bl	8001104 <_fstat>
 8017a8e:	1c43      	adds	r3, r0, #1
 8017a90:	d102      	bne.n	8017a98 <_fstat_r+0x1c>
 8017a92:	682b      	ldr	r3, [r5, #0]
 8017a94:	b103      	cbz	r3, 8017a98 <_fstat_r+0x1c>
 8017a96:	6023      	str	r3, [r4, #0]
 8017a98:	bd38      	pop	{r3, r4, r5, pc}
 8017a9a:	bf00      	nop
 8017a9c:	2000f684 	.word	0x2000f684

08017aa0 <_isatty_r>:
 8017aa0:	b538      	push	{r3, r4, r5, lr}
 8017aa2:	4d06      	ldr	r5, [pc, #24]	@ (8017abc <_isatty_r+0x1c>)
 8017aa4:	2300      	movs	r3, #0
 8017aa6:	4604      	mov	r4, r0
 8017aa8:	4608      	mov	r0, r1
 8017aaa:	602b      	str	r3, [r5, #0]
 8017aac:	f7e9 fb3a 	bl	8001124 <_isatty>
 8017ab0:	1c43      	adds	r3, r0, #1
 8017ab2:	d102      	bne.n	8017aba <_isatty_r+0x1a>
 8017ab4:	682b      	ldr	r3, [r5, #0]
 8017ab6:	b103      	cbz	r3, 8017aba <_isatty_r+0x1a>
 8017ab8:	6023      	str	r3, [r4, #0]
 8017aba:	bd38      	pop	{r3, r4, r5, pc}
 8017abc:	2000f684 	.word	0x2000f684

08017ac0 <_kill_r>:
 8017ac0:	b538      	push	{r3, r4, r5, lr}
 8017ac2:	4d07      	ldr	r5, [pc, #28]	@ (8017ae0 <_kill_r+0x20>)
 8017ac4:	2300      	movs	r3, #0
 8017ac6:	4604      	mov	r4, r0
 8017ac8:	4608      	mov	r0, r1
 8017aca:	4611      	mov	r1, r2
 8017acc:	602b      	str	r3, [r5, #0]
 8017ace:	f7e9 fab7 	bl	8001040 <_kill>
 8017ad2:	1c43      	adds	r3, r0, #1
 8017ad4:	d102      	bne.n	8017adc <_kill_r+0x1c>
 8017ad6:	682b      	ldr	r3, [r5, #0]
 8017ad8:	b103      	cbz	r3, 8017adc <_kill_r+0x1c>
 8017ada:	6023      	str	r3, [r4, #0]
 8017adc:	bd38      	pop	{r3, r4, r5, pc}
 8017ade:	bf00      	nop
 8017ae0:	2000f684 	.word	0x2000f684

08017ae4 <_getpid_r>:
 8017ae4:	f7e9 baa4 	b.w	8001030 <_getpid>

08017ae8 <_init>:
 8017ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017aea:	bf00      	nop
 8017aec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017aee:	bc08      	pop	{r3}
 8017af0:	469e      	mov	lr, r3
 8017af2:	4770      	bx	lr

08017af4 <_fini>:
 8017af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017af6:	bf00      	nop
 8017af8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017afa:	bc08      	pop	{r3}
 8017afc:	469e      	mov	lr, r3
 8017afe:	4770      	bx	lr
