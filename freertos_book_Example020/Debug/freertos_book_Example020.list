
freertos_book_Example020.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006d40  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000234  08006ef0  08006ef0  00007ef0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007124  08007124  0000906c  2**0
                  CONTENTS
  4 .ARM          00000008  08007124  08007124  00008124  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800712c  0800712c  0000906c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800712c  0800712c  0000812c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007130  08007130  00008130  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08007134  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000906c  2**0
                  CONTENTS
 10 .bss          00004694  2000006c  2000006c  0000906c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004700  20004700  0000906c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000906c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001ada5  00000000  00000000  0000909c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003a4e  00000000  00000000  00023e41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001720  00000000  00000000  00027890  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000011f7  00000000  00000000  00028fb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004b99  00000000  00000000  0002a1a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a03d  00000000  00000000  0002ed40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ed05a  00000000  00000000  00048d7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00135dd7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006c18  00000000  00000000  00135e1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000074  00000000  00000000  0013ca34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08006ed8 	.word	0x08006ed8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000070 	.word	0x20000070
 80001ec:	08006ed8 	.word	0x08006ed8

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000580:	b5b0      	push	{r4, r5, r7, lr}
 8000582:	b08c      	sub	sp, #48	@ 0x30
 8000584:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	const char *pcTextForMain = "freertos_book_Example020 is running: Re-writing vPrintString() to use a semaphore\r\n\n";
 8000586:	4b38      	ldr	r3, [pc, #224]	@ (8000668 <main+0xe8>)
 8000588:	627b      	str	r3, [r7, #36]	@ 0x24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800058a:	f000 fe0b 	bl	80011a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800058e:	f000 f87d 	bl	800068c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000592:	f000 f98b 	bl	80008ac <MX_GPIO_Init>
  MX_ETH_Init();
 8000596:	f000 f8e3 	bl	8000760 <MX_ETH_Init>
  MX_USART3_UART_Init();
 800059a:	f000 f92f 	bl	80007fc <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800059e:	f000 f957 	bl	8000850 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
	/* Print out the name of this Example. */
	vPrintString( pcTextForMain );
 80005a2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80005a4:	f000 fce2 	bl	8000f6c <vPrintString>
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
    /* Before a semaphore is used it must be explicitly created. */
	MutexHandle = xSemaphoreCreateMutex();
 80005a8:	2001      	movs	r0, #1
 80005aa:	f003 fd71 	bl	8004090 <xQueueCreateMutex>
 80005ae:	4603      	mov	r3, r0
 80005b0:	4a2e      	ldr	r2, [pc, #184]	@ (800066c <main+0xec>)
 80005b2:	6013      	str	r3, [r2, #0]

    /* Check the semaphore was created successfully */
    configASSERT( MutexHandle != NULL );
 80005b4:	4b2d      	ldr	r3, [pc, #180]	@ (800066c <main+0xec>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d10b      	bne.n	80005d4 <main+0x54>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80005bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80005c0:	f383 8811 	msr	BASEPRI, r3
 80005c4:	f3bf 8f6f 	isb	sy
 80005c8:	f3bf 8f4f 	dsb	sy
 80005cc:	61fb      	str	r3, [r7, #28]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80005ce:	bf00      	nop
 80005d0:	bf00      	nop
 80005d2:	e7fd      	b.n	80005d0 <main+0x50>

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80005d4:	4b26      	ldr	r3, [pc, #152]	@ (8000670 <main+0xf0>)
 80005d6:	463c      	mov	r4, r7
 80005d8:	461d      	mov	r5, r3
 80005da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005de:	682b      	ldr	r3, [r5, #0]
 80005e0:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80005e2:	463b      	mov	r3, r7
 80005e4:	2100      	movs	r1, #0
 80005e6:	4618      	mov	r0, r3
 80005e8:	f003 fb89 	bl	8003cfe <osThreadCreate>
 80005ec:	4603      	mov	r3, r0
 80005ee:	4a21      	ldr	r2, [pc, #132]	@ (8000674 <main+0xf4>)
 80005f0:	6013      	str	r3, [r2, #0]
	parameter.  The tasks are created at different priorities so some
	pre-emption will occur. */
	BaseType_t ret;

	/* Printer 1 thread at priority 1 */
	ret = xTaskCreate( prvPrintTask,				/* Pointer to the function thats implement the task. */
 80005f2:	2300      	movs	r3, #0
 80005f4:	9301      	str	r3, [sp, #4]
 80005f6:	2301      	movs	r3, #1
 80005f8:	9300      	str	r3, [sp, #0]
 80005fa:	4b1f      	ldr	r3, [pc, #124]	@ (8000678 <main+0xf8>)
 80005fc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000600:	491e      	ldr	r1, [pc, #120]	@ (800067c <main+0xfc>)
 8000602:	481f      	ldr	r0, [pc, #124]	@ (8000680 <main+0x100>)
 8000604:	f004 f870 	bl	80046e8 <xTaskCreate>
 8000608:	6238      	str	r0, [r7, #32]
					   ( void * ) "Task 1 ******************************************\r\n",		/* Pass the string to be used in as the task parameter.	*/
					   (tskIDLE_PRIORITY + 1UL),	/* This task will run at priority 1. 		*/
		               NULL );          	        /* We are not using the task handle. */

	/* Check the task was created successfully. */
	configASSERT( ret == pdPASS );
 800060a:	6a3b      	ldr	r3, [r7, #32]
 800060c:	2b01      	cmp	r3, #1
 800060e:	d00b      	beq.n	8000628 <main+0xa8>
	__asm volatile
 8000610:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000614:	f383 8811 	msr	BASEPRI, r3
 8000618:	f3bf 8f6f 	isb	sy
 800061c:	f3bf 8f4f 	dsb	sy
 8000620:	61bb      	str	r3, [r7, #24]
}
 8000622:	bf00      	nop
 8000624:	bf00      	nop
 8000626:	e7fd      	b.n	8000624 <main+0xa4>

	/* Printer 2 thread at priority 2 */
	ret = xTaskCreate( prvPrintTask,				/* Pointer to the function thats implement the task. */
 8000628:	2300      	movs	r3, #0
 800062a:	9301      	str	r3, [sp, #4]
 800062c:	2302      	movs	r3, #2
 800062e:	9300      	str	r3, [sp, #0]
 8000630:	4b14      	ldr	r3, [pc, #80]	@ (8000684 <main+0x104>)
 8000632:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000636:	4914      	ldr	r1, [pc, #80]	@ (8000688 <main+0x108>)
 8000638:	4811      	ldr	r0, [pc, #68]	@ (8000680 <main+0x100>)
 800063a:	f004 f855 	bl	80046e8 <xTaskCreate>
 800063e:	6238      	str	r0, [r7, #32]
					   ( void * ) "Task 2 ------------------------------------------\r\n",		/* Pass the string to be used in as the task parameter.	*/
					   (tskIDLE_PRIORITY + 2UL),	/* This task will run at priority 2. 		*/
		               NULL );          	        /* We are not using the task handle. */

	/* Check the task was created successfully. */
	configASSERT( ret == pdPASS );
 8000640:	6a3b      	ldr	r3, [r7, #32]
 8000642:	2b01      	cmp	r3, #1
 8000644:	d00b      	beq.n	800065e <main+0xde>
	__asm volatile
 8000646:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800064a:	f383 8811 	msr	BASEPRI, r3
 800064e:	f3bf 8f6f 	isb	sy
 8000652:	f3bf 8f4f 	dsb	sy
 8000656:	617b      	str	r3, [r7, #20]
}
 8000658:	bf00      	nop
 800065a:	bf00      	nop
 800065c:	e7fd      	b.n	800065a <main+0xda>

  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800065e:	f003 fb47 	bl	8003cf0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000662:	bf00      	nop
 8000664:	e7fd      	b.n	8000662 <main+0xe2>
 8000666:	bf00      	nop
 8000668:	08006ef0 	.word	0x08006ef0
 800066c:	20000804 	.word	0x20000804
 8000670:	08006fcc 	.word	0x08006fcc
 8000674:	20000800 	.word	0x20000800
 8000678:	08006f48 	.word	0x08006f48
 800067c:	08006f7c 	.word	0x08006f7c
 8000680:	08000a55 	.word	0x08000a55
 8000684:	08006f84 	.word	0x08006f84
 8000688:	08006fb8 	.word	0x08006fb8

0800068c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b094      	sub	sp, #80	@ 0x50
 8000690:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000692:	f107 0320 	add.w	r3, r7, #32
 8000696:	2230      	movs	r2, #48	@ 0x30
 8000698:	2100      	movs	r1, #0
 800069a:	4618      	mov	r0, r3
 800069c:	f005 fdc7 	bl	800622e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a0:	f107 030c 	add.w	r3, r7, #12
 80006a4:	2200      	movs	r2, #0
 80006a6:	601a      	str	r2, [r3, #0]
 80006a8:	605a      	str	r2, [r3, #4]
 80006aa:	609a      	str	r2, [r3, #8]
 80006ac:	60da      	str	r2, [r3, #12]
 80006ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006b0:	2300      	movs	r3, #0
 80006b2:	60bb      	str	r3, [r7, #8]
 80006b4:	4b28      	ldr	r3, [pc, #160]	@ (8000758 <SystemClock_Config+0xcc>)
 80006b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006b8:	4a27      	ldr	r2, [pc, #156]	@ (8000758 <SystemClock_Config+0xcc>)
 80006ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006be:	6413      	str	r3, [r2, #64]	@ 0x40
 80006c0:	4b25      	ldr	r3, [pc, #148]	@ (8000758 <SystemClock_Config+0xcc>)
 80006c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006c8:	60bb      	str	r3, [r7, #8]
 80006ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006cc:	2300      	movs	r3, #0
 80006ce:	607b      	str	r3, [r7, #4]
 80006d0:	4b22      	ldr	r3, [pc, #136]	@ (800075c <SystemClock_Config+0xd0>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4a21      	ldr	r2, [pc, #132]	@ (800075c <SystemClock_Config+0xd0>)
 80006d6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80006da:	6013      	str	r3, [r2, #0]
 80006dc:	4b1f      	ldr	r3, [pc, #124]	@ (800075c <SystemClock_Config+0xd0>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006e4:	607b      	str	r3, [r7, #4]
 80006e6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006e8:	2301      	movs	r3, #1
 80006ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006ec:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80006f0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006f2:	2302      	movs	r3, #2
 80006f4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006f6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80006fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006fc:	2304      	movs	r3, #4
 80006fe:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000700:	23a8      	movs	r3, #168	@ 0xa8
 8000702:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000704:	2302      	movs	r3, #2
 8000706:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000708:	2307      	movs	r3, #7
 800070a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800070c:	f107 0320 	add.w	r3, r7, #32
 8000710:	4618      	mov	r0, r3
 8000712:	f001 fc99 	bl	8002048 <HAL_RCC_OscConfig>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800071c:	f000 f9d8 	bl	8000ad0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000720:	230f      	movs	r3, #15
 8000722:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000724:	2302      	movs	r3, #2
 8000726:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000728:	2300      	movs	r3, #0
 800072a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800072c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000730:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000732:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000736:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000738:	f107 030c 	add.w	r3, r7, #12
 800073c:	2105      	movs	r1, #5
 800073e:	4618      	mov	r0, r3
 8000740:	f001 fefa 	bl	8002538 <HAL_RCC_ClockConfig>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800074a:	f000 f9c1 	bl	8000ad0 <Error_Handler>
  }
}
 800074e:	bf00      	nop
 8000750:	3750      	adds	r7, #80	@ 0x50
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	40023800 	.word	0x40023800
 800075c:	40007000 	.word	0x40007000

08000760 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000764:	4b1f      	ldr	r3, [pc, #124]	@ (80007e4 <MX_ETH_Init+0x84>)
 8000766:	4a20      	ldr	r2, [pc, #128]	@ (80007e8 <MX_ETH_Init+0x88>)
 8000768:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800076a:	4b20      	ldr	r3, [pc, #128]	@ (80007ec <MX_ETH_Init+0x8c>)
 800076c:	2200      	movs	r2, #0
 800076e:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000770:	4b1e      	ldr	r3, [pc, #120]	@ (80007ec <MX_ETH_Init+0x8c>)
 8000772:	2280      	movs	r2, #128	@ 0x80
 8000774:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000776:	4b1d      	ldr	r3, [pc, #116]	@ (80007ec <MX_ETH_Init+0x8c>)
 8000778:	22e1      	movs	r2, #225	@ 0xe1
 800077a:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 800077c:	4b1b      	ldr	r3, [pc, #108]	@ (80007ec <MX_ETH_Init+0x8c>)
 800077e:	2200      	movs	r2, #0
 8000780:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000782:	4b1a      	ldr	r3, [pc, #104]	@ (80007ec <MX_ETH_Init+0x8c>)
 8000784:	2200      	movs	r2, #0
 8000786:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000788:	4b18      	ldr	r3, [pc, #96]	@ (80007ec <MX_ETH_Init+0x8c>)
 800078a:	2200      	movs	r2, #0
 800078c:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800078e:	4b15      	ldr	r3, [pc, #84]	@ (80007e4 <MX_ETH_Init+0x84>)
 8000790:	4a16      	ldr	r2, [pc, #88]	@ (80007ec <MX_ETH_Init+0x8c>)
 8000792:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000794:	4b13      	ldr	r3, [pc, #76]	@ (80007e4 <MX_ETH_Init+0x84>)
 8000796:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800079a:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800079c:	4b11      	ldr	r3, [pc, #68]	@ (80007e4 <MX_ETH_Init+0x84>)
 800079e:	4a14      	ldr	r2, [pc, #80]	@ (80007f0 <MX_ETH_Init+0x90>)
 80007a0:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80007a2:	4b10      	ldr	r3, [pc, #64]	@ (80007e4 <MX_ETH_Init+0x84>)
 80007a4:	4a13      	ldr	r2, [pc, #76]	@ (80007f4 <MX_ETH_Init+0x94>)
 80007a6:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80007a8:	4b0e      	ldr	r3, [pc, #56]	@ (80007e4 <MX_ETH_Init+0x84>)
 80007aa:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 80007ae:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80007b0:	480c      	ldr	r0, [pc, #48]	@ (80007e4 <MX_ETH_Init+0x84>)
 80007b2:	f000 fe3f 	bl	8001434 <HAL_ETH_Init>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 80007bc:	f000 f988 	bl	8000ad0 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80007c0:	2238      	movs	r2, #56	@ 0x38
 80007c2:	2100      	movs	r1, #0
 80007c4:	480c      	ldr	r0, [pc, #48]	@ (80007f8 <MX_ETH_Init+0x98>)
 80007c6:	f005 fd32 	bl	800622e <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80007ca:	4b0b      	ldr	r3, [pc, #44]	@ (80007f8 <MX_ETH_Init+0x98>)
 80007cc:	2221      	movs	r2, #33	@ 0x21
 80007ce:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80007d0:	4b09      	ldr	r3, [pc, #36]	@ (80007f8 <MX_ETH_Init+0x98>)
 80007d2:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 80007d6:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80007d8:	4b07      	ldr	r3, [pc, #28]	@ (80007f8 <MX_ETH_Init+0x98>)
 80007da:	2200      	movs	r2, #0
 80007dc:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80007de:	bf00      	nop
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	20000200 	.word	0x20000200
 80007e8:	40028000 	.word	0x40028000
 80007ec:	20000808 	.word	0x20000808
 80007f0:	20000160 	.word	0x20000160
 80007f4:	200000c0 	.word	0x200000c0
 80007f8:	20000088 	.word	0x20000088

080007fc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000800:	4b11      	ldr	r3, [pc, #68]	@ (8000848 <MX_USART3_UART_Init+0x4c>)
 8000802:	4a12      	ldr	r2, [pc, #72]	@ (800084c <MX_USART3_UART_Init+0x50>)
 8000804:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000806:	4b10      	ldr	r3, [pc, #64]	@ (8000848 <MX_USART3_UART_Init+0x4c>)
 8000808:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800080c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800080e:	4b0e      	ldr	r3, [pc, #56]	@ (8000848 <MX_USART3_UART_Init+0x4c>)
 8000810:	2200      	movs	r2, #0
 8000812:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000814:	4b0c      	ldr	r3, [pc, #48]	@ (8000848 <MX_USART3_UART_Init+0x4c>)
 8000816:	2200      	movs	r2, #0
 8000818:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800081a:	4b0b      	ldr	r3, [pc, #44]	@ (8000848 <MX_USART3_UART_Init+0x4c>)
 800081c:	2200      	movs	r2, #0
 800081e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000820:	4b09      	ldr	r3, [pc, #36]	@ (8000848 <MX_USART3_UART_Init+0x4c>)
 8000822:	220c      	movs	r2, #12
 8000824:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000826:	4b08      	ldr	r3, [pc, #32]	@ (8000848 <MX_USART3_UART_Init+0x4c>)
 8000828:	2200      	movs	r2, #0
 800082a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800082c:	4b06      	ldr	r3, [pc, #24]	@ (8000848 <MX_USART3_UART_Init+0x4c>)
 800082e:	2200      	movs	r2, #0
 8000830:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000832:	4805      	ldr	r0, [pc, #20]	@ (8000848 <MX_USART3_UART_Init+0x4c>)
 8000834:	f002 fb80 	bl	8002f38 <HAL_UART_Init>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800083e:	f000 f947 	bl	8000ad0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000842:	bf00      	nop
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	200002b0 	.word	0x200002b0
 800084c:	40004800 	.word	0x40004800

08000850 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000854:	4b14      	ldr	r3, [pc, #80]	@ (80008a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000856:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800085a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800085c:	4b12      	ldr	r3, [pc, #72]	@ (80008a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800085e:	2204      	movs	r2, #4
 8000860:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000862:	4b11      	ldr	r3, [pc, #68]	@ (80008a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000864:	2202      	movs	r2, #2
 8000866:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000868:	4b0f      	ldr	r3, [pc, #60]	@ (80008a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800086a:	2200      	movs	r2, #0
 800086c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800086e:	4b0e      	ldr	r3, [pc, #56]	@ (80008a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000870:	2202      	movs	r2, #2
 8000872:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000874:	4b0c      	ldr	r3, [pc, #48]	@ (80008a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000876:	2201      	movs	r2, #1
 8000878:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800087a:	4b0b      	ldr	r3, [pc, #44]	@ (80008a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800087c:	2200      	movs	r2, #0
 800087e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000880:	4b09      	ldr	r3, [pc, #36]	@ (80008a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000882:	2200      	movs	r2, #0
 8000884:	625a      	str	r2, [r3, #36]	@ 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000886:	4b08      	ldr	r3, [pc, #32]	@ (80008a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000888:	2201      	movs	r2, #1
 800088a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800088c:	4b06      	ldr	r3, [pc, #24]	@ (80008a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800088e:	2200      	movs	r2, #0
 8000890:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000892:	4805      	ldr	r0, [pc, #20]	@ (80008a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000894:	f001 fabb 	bl	8001e0e <HAL_PCD_Init>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800089e:	f000 f917 	bl	8000ad0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80008a2:	bf00      	nop
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	200002f4 	.word	0x200002f4

080008ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b08c      	sub	sp, #48	@ 0x30
 80008b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b2:	f107 031c 	add.w	r3, r7, #28
 80008b6:	2200      	movs	r2, #0
 80008b8:	601a      	str	r2, [r3, #0]
 80008ba:	605a      	str	r2, [r3, #4]
 80008bc:	609a      	str	r2, [r3, #8]
 80008be:	60da      	str	r2, [r3, #12]
 80008c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008c2:	2300      	movs	r3, #0
 80008c4:	61bb      	str	r3, [r7, #24]
 80008c6:	4b4c      	ldr	r3, [pc, #304]	@ (80009f8 <MX_GPIO_Init+0x14c>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ca:	4a4b      	ldr	r2, [pc, #300]	@ (80009f8 <MX_GPIO_Init+0x14c>)
 80008cc:	f043 0304 	orr.w	r3, r3, #4
 80008d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008d2:	4b49      	ldr	r3, [pc, #292]	@ (80009f8 <MX_GPIO_Init+0x14c>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008d6:	f003 0304 	and.w	r3, r3, #4
 80008da:	61bb      	str	r3, [r7, #24]
 80008dc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008de:	2300      	movs	r3, #0
 80008e0:	617b      	str	r3, [r7, #20]
 80008e2:	4b45      	ldr	r3, [pc, #276]	@ (80009f8 <MX_GPIO_Init+0x14c>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008e6:	4a44      	ldr	r2, [pc, #272]	@ (80009f8 <MX_GPIO_Init+0x14c>)
 80008e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ee:	4b42      	ldr	r3, [pc, #264]	@ (80009f8 <MX_GPIO_Init+0x14c>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008f6:	617b      	str	r3, [r7, #20]
 80008f8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008fa:	2300      	movs	r3, #0
 80008fc:	613b      	str	r3, [r7, #16]
 80008fe:	4b3e      	ldr	r3, [pc, #248]	@ (80009f8 <MX_GPIO_Init+0x14c>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000902:	4a3d      	ldr	r2, [pc, #244]	@ (80009f8 <MX_GPIO_Init+0x14c>)
 8000904:	f043 0301 	orr.w	r3, r3, #1
 8000908:	6313      	str	r3, [r2, #48]	@ 0x30
 800090a:	4b3b      	ldr	r3, [pc, #236]	@ (80009f8 <MX_GPIO_Init+0x14c>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800090e:	f003 0301 	and.w	r3, r3, #1
 8000912:	613b      	str	r3, [r7, #16]
 8000914:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000916:	2300      	movs	r3, #0
 8000918:	60fb      	str	r3, [r7, #12]
 800091a:	4b37      	ldr	r3, [pc, #220]	@ (80009f8 <MX_GPIO_Init+0x14c>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800091e:	4a36      	ldr	r2, [pc, #216]	@ (80009f8 <MX_GPIO_Init+0x14c>)
 8000920:	f043 0302 	orr.w	r3, r3, #2
 8000924:	6313      	str	r3, [r2, #48]	@ 0x30
 8000926:	4b34      	ldr	r3, [pc, #208]	@ (80009f8 <MX_GPIO_Init+0x14c>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800092a:	f003 0302 	and.w	r3, r3, #2
 800092e:	60fb      	str	r3, [r7, #12]
 8000930:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000932:	2300      	movs	r3, #0
 8000934:	60bb      	str	r3, [r7, #8]
 8000936:	4b30      	ldr	r3, [pc, #192]	@ (80009f8 <MX_GPIO_Init+0x14c>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800093a:	4a2f      	ldr	r2, [pc, #188]	@ (80009f8 <MX_GPIO_Init+0x14c>)
 800093c:	f043 0308 	orr.w	r3, r3, #8
 8000940:	6313      	str	r3, [r2, #48]	@ 0x30
 8000942:	4b2d      	ldr	r3, [pc, #180]	@ (80009f8 <MX_GPIO_Init+0x14c>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000946:	f003 0308 	and.w	r3, r3, #8
 800094a:	60bb      	str	r3, [r7, #8]
 800094c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800094e:	2300      	movs	r3, #0
 8000950:	607b      	str	r3, [r7, #4]
 8000952:	4b29      	ldr	r3, [pc, #164]	@ (80009f8 <MX_GPIO_Init+0x14c>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000956:	4a28      	ldr	r2, [pc, #160]	@ (80009f8 <MX_GPIO_Init+0x14c>)
 8000958:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800095c:	6313      	str	r3, [r2, #48]	@ 0x30
 800095e:	4b26      	ldr	r3, [pc, #152]	@ (80009f8 <MX_GPIO_Init+0x14c>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000962:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000966:	607b      	str	r3, [r7, #4]
 8000968:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800096a:	2200      	movs	r2, #0
 800096c:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000970:	4822      	ldr	r0, [pc, #136]	@ (80009fc <MX_GPIO_Init+0x150>)
 8000972:	f001 fa33 	bl	8001ddc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000976:	2200      	movs	r2, #0
 8000978:	2140      	movs	r1, #64	@ 0x40
 800097a:	4821      	ldr	r0, [pc, #132]	@ (8000a00 <MX_GPIO_Init+0x154>)
 800097c:	f001 fa2e 	bl	8001ddc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000980:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000984:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000986:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800098a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098c:	2300      	movs	r3, #0
 800098e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000990:	f107 031c 	add.w	r3, r7, #28
 8000994:	4619      	mov	r1, r3
 8000996:	481b      	ldr	r0, [pc, #108]	@ (8000a04 <MX_GPIO_Init+0x158>)
 8000998:	f001 f874 	bl	8001a84 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800099c:	f244 0381 	movw	r3, #16513	@ 0x4081
 80009a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a2:	2301      	movs	r3, #1
 80009a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a6:	2300      	movs	r3, #0
 80009a8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009aa:	2300      	movs	r3, #0
 80009ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009ae:	f107 031c 	add.w	r3, r7, #28
 80009b2:	4619      	mov	r1, r3
 80009b4:	4811      	ldr	r0, [pc, #68]	@ (80009fc <MX_GPIO_Init+0x150>)
 80009b6:	f001 f865 	bl	8001a84 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80009ba:	2340      	movs	r3, #64	@ 0x40
 80009bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009be:	2301      	movs	r3, #1
 80009c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c2:	2300      	movs	r3, #0
 80009c4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c6:	2300      	movs	r3, #0
 80009c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80009ca:	f107 031c 	add.w	r3, r7, #28
 80009ce:	4619      	mov	r1, r3
 80009d0:	480b      	ldr	r0, [pc, #44]	@ (8000a00 <MX_GPIO_Init+0x154>)
 80009d2:	f001 f857 	bl	8001a84 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80009d6:	2380      	movs	r3, #128	@ 0x80
 80009d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009da:	2300      	movs	r3, #0
 80009dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009de:	2300      	movs	r3, #0
 80009e0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009e2:	f107 031c 	add.w	r3, r7, #28
 80009e6:	4619      	mov	r1, r3
 80009e8:	4805      	ldr	r0, [pc, #20]	@ (8000a00 <MX_GPIO_Init+0x154>)
 80009ea:	f001 f84b 	bl	8001a84 <HAL_GPIO_Init>

}
 80009ee:	bf00      	nop
 80009f0:	3730      	adds	r7, #48	@ 0x30
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	40023800 	.word	0x40023800
 80009fc:	40020400 	.word	0x40020400
 8000a00:	40021800 	.word	0x40021800
 8000a04:	40020800 	.word	0x40020800

08000a08 <prvNewPrintString>:

/* USER CODE BEGIN 4 */
static void prvNewPrintString( const char *pcString )
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b082      	sub	sp, #8
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
	available immediately.  The call to xSemaphoreTake() will only return when
	the semaphore has been successfully obtained so there is no need to check the
	return value.  If any other delay period was used then the code must check
	that xSemaphoreTake() returns pdTRUE before accessing the resource (in this
	case standard out. */
	xSemaphoreTake( MutexHandle, portMAX_DELAY );
 8000a10:	4b0d      	ldr	r3, [pc, #52]	@ (8000a48 <prvNewPrintString+0x40>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	f04f 31ff 	mov.w	r1, #4294967295
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f003 fc53 	bl	80042c4 <xQueueSemaphoreTake>
	{
		/* The following line will only execute once the semaphore has been
		successfully obtained - so standard out can be accessed freely. */
		printf( "%s", pcString );
 8000a1e:	6879      	ldr	r1, [r7, #4]
 8000a20:	480a      	ldr	r0, [pc, #40]	@ (8000a4c <prvNewPrintString+0x44>)
 8000a22:	f005 fbaf 	bl	8006184 <iprintf>
		fflush( stdout );
 8000a26:	4b0a      	ldr	r3, [pc, #40]	@ (8000a50 <prvNewPrintString+0x48>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	689b      	ldr	r3, [r3, #8]
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f005 fad3 	bl	8005fd8 <fflush>
	}

	/* 'Give' the semaphore to unblock the task. */
	xSemaphoreGive( MutexHandle );
 8000a32:	4b05      	ldr	r3, [pc, #20]	@ (8000a48 <prvNewPrintString+0x40>)
 8000a34:	6818      	ldr	r0, [r3, #0]
 8000a36:	2300      	movs	r3, #0
 8000a38:	2200      	movs	r2, #0
 8000a3a:	2100      	movs	r1, #0
 8000a3c:	f003 fb40 	bl	80040c0 <xQueueGenericSend>
}
 8000a40:	bf00      	nop
 8000a42:	3708      	adds	r7, #8
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	20000804 	.word	0x20000804
 8000a4c:	08006fe0 	.word	0x08006fe0
 8000a50:	2000001c 	.word	0x2000001c

08000a54 <prvPrintTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_prvPrintTask */
void prvPrintTask(void *pvParameters)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b084      	sub	sp, #16
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
	char *pcStringToPrint;
	const TickType_t xSlowDownDelay = pdMS_TO_TICKS( 5UL );
 8000a5c:	2305      	movs	r3, #5
 8000a5e:	60fb      	str	r3, [r7, #12]

	/* Print out the name of this task. */
	vPrintString( "Print 1/2 is running\r\n" );
 8000a60:	480c      	ldr	r0, [pc, #48]	@ (8000a94 <prvPrintTask+0x40>)
 8000a62:	f000 fa83 	bl	8000f6c <vPrintString>

	/* Two instances of this task are created.  The string printed by the task
	is passed into the task using the task's parameter.  The parameter is cast
	to the required type. */
	pcStringToPrint = ( char * ) pvParameters;
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	60bb      	str	r3, [r7, #8]

	for( ;; )
	{
		/* Print out the string using the newly defined function. */
		prvNewPrintString( pcStringToPrint );
 8000a6a:	68b8      	ldr	r0, [r7, #8]
 8000a6c:	f7ff ffcc 	bl	8000a08 <prvNewPrintString>
		/* Wait a pseudo random time.  Note that rand() is not necessarily
		re-entrant, but in this case it does not really matter as the code does
		not care what value is returned.  In a more secure application a version
		of rand() that is known to be re-entrant should be used - or calls to
		rand() should be protected using a critical section. */
		vTaskDelay( rand() % xMaxBlockTimeTicks );
 8000a70:	f005 f9c8 	bl	8005e04 <rand>
 8000a74:	4603      	mov	r3, r0
 8000a76:	461a      	mov	r2, r3
 8000a78:	2320      	movs	r3, #32
 8000a7a:	fbb2 f1f3 	udiv	r1, r2, r3
 8000a7e:	fb01 f303 	mul.w	r3, r1, r3
 8000a82:	1ad3      	subs	r3, r2, r3
 8000a84:	4618      	mov	r0, r3
 8000a86:	f003 ff7b 	bl	8004980 <vTaskDelay>

		/* Just to ensure the scrolling is not too fast! */
		vTaskDelay( xSlowDownDelay );
 8000a8a:	68f8      	ldr	r0, [r7, #12]
 8000a8c:	f003 ff78 	bl	8004980 <vTaskDelay>
		prvNewPrintString( pcStringToPrint );
 8000a90:	bf00      	nop
 8000a92:	e7ea      	b.n	8000a6a <prvPrintTask+0x16>
 8000a94:	08006fe4 	.word	0x08006fe4

08000a98 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b082      	sub	sp, #8
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(50000);
 8000aa0:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8000aa4:	f003 f952 	bl	8003d4c <osDelay>
 8000aa8:	e7fa      	b.n	8000aa0 <StartDefaultTask+0x8>
	...

08000aac <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4a04      	ldr	r2, [pc, #16]	@ (8000acc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000aba:	4293      	cmp	r3, r2
 8000abc:	d101      	bne.n	8000ac2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000abe:	f000 fb93 	bl	80011e8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ac2:	bf00      	nop
 8000ac4:	3708      	adds	r7, #8
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	40001400 	.word	0x40001400

08000ad0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ad4:	b672      	cpsid	i
}
 8000ad6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ad8:	bf00      	nop
 8000ada:	e7fd      	b.n	8000ad8 <Error_Handler+0x8>

08000adc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	607b      	str	r3, [r7, #4]
 8000ae6:	4b12      	ldr	r3, [pc, #72]	@ (8000b30 <HAL_MspInit+0x54>)
 8000ae8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000aea:	4a11      	ldr	r2, [pc, #68]	@ (8000b30 <HAL_MspInit+0x54>)
 8000aec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000af0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000af2:	4b0f      	ldr	r3, [pc, #60]	@ (8000b30 <HAL_MspInit+0x54>)
 8000af4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000af6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000afa:	607b      	str	r3, [r7, #4]
 8000afc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000afe:	2300      	movs	r3, #0
 8000b00:	603b      	str	r3, [r7, #0]
 8000b02:	4b0b      	ldr	r3, [pc, #44]	@ (8000b30 <HAL_MspInit+0x54>)
 8000b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b06:	4a0a      	ldr	r2, [pc, #40]	@ (8000b30 <HAL_MspInit+0x54>)
 8000b08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b0e:	4b08      	ldr	r3, [pc, #32]	@ (8000b30 <HAL_MspInit+0x54>)
 8000b10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b16:	603b      	str	r3, [r7, #0]
 8000b18:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	210f      	movs	r1, #15
 8000b1e:	f06f 0001 	mvn.w	r0, #1
 8000b22:	f000 fc5d 	bl	80013e0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b26:	bf00      	nop
 8000b28:	3708      	adds	r7, #8
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	40023800 	.word	0x40023800

08000b34 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b08e      	sub	sp, #56	@ 0x38
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b3c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b40:	2200      	movs	r2, #0
 8000b42:	601a      	str	r2, [r3, #0]
 8000b44:	605a      	str	r2, [r3, #4]
 8000b46:	609a      	str	r2, [r3, #8]
 8000b48:	60da      	str	r2, [r3, #12]
 8000b4a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	4a55      	ldr	r2, [pc, #340]	@ (8000ca8 <HAL_ETH_MspInit+0x174>)
 8000b52:	4293      	cmp	r3, r2
 8000b54:	f040 80a4 	bne.w	8000ca0 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000b58:	2300      	movs	r3, #0
 8000b5a:	623b      	str	r3, [r7, #32]
 8000b5c:	4b53      	ldr	r3, [pc, #332]	@ (8000cac <HAL_ETH_MspInit+0x178>)
 8000b5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b60:	4a52      	ldr	r2, [pc, #328]	@ (8000cac <HAL_ETH_MspInit+0x178>)
 8000b62:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000b66:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b68:	4b50      	ldr	r3, [pc, #320]	@ (8000cac <HAL_ETH_MspInit+0x178>)
 8000b6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b6c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000b70:	623b      	str	r3, [r7, #32]
 8000b72:	6a3b      	ldr	r3, [r7, #32]
 8000b74:	2300      	movs	r3, #0
 8000b76:	61fb      	str	r3, [r7, #28]
 8000b78:	4b4c      	ldr	r3, [pc, #304]	@ (8000cac <HAL_ETH_MspInit+0x178>)
 8000b7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b7c:	4a4b      	ldr	r2, [pc, #300]	@ (8000cac <HAL_ETH_MspInit+0x178>)
 8000b7e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000b82:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b84:	4b49      	ldr	r3, [pc, #292]	@ (8000cac <HAL_ETH_MspInit+0x178>)
 8000b86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b88:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000b8c:	61fb      	str	r3, [r7, #28]
 8000b8e:	69fb      	ldr	r3, [r7, #28]
 8000b90:	2300      	movs	r3, #0
 8000b92:	61bb      	str	r3, [r7, #24]
 8000b94:	4b45      	ldr	r3, [pc, #276]	@ (8000cac <HAL_ETH_MspInit+0x178>)
 8000b96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b98:	4a44      	ldr	r2, [pc, #272]	@ (8000cac <HAL_ETH_MspInit+0x178>)
 8000b9a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000b9e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ba0:	4b42      	ldr	r3, [pc, #264]	@ (8000cac <HAL_ETH_MspInit+0x178>)
 8000ba2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ba4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000ba8:	61bb      	str	r3, [r7, #24]
 8000baa:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bac:	2300      	movs	r3, #0
 8000bae:	617b      	str	r3, [r7, #20]
 8000bb0:	4b3e      	ldr	r3, [pc, #248]	@ (8000cac <HAL_ETH_MspInit+0x178>)
 8000bb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bb4:	4a3d      	ldr	r2, [pc, #244]	@ (8000cac <HAL_ETH_MspInit+0x178>)
 8000bb6:	f043 0304 	orr.w	r3, r3, #4
 8000bba:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bbc:	4b3b      	ldr	r3, [pc, #236]	@ (8000cac <HAL_ETH_MspInit+0x178>)
 8000bbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bc0:	f003 0304 	and.w	r3, r3, #4
 8000bc4:	617b      	str	r3, [r7, #20]
 8000bc6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bc8:	2300      	movs	r3, #0
 8000bca:	613b      	str	r3, [r7, #16]
 8000bcc:	4b37      	ldr	r3, [pc, #220]	@ (8000cac <HAL_ETH_MspInit+0x178>)
 8000bce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bd0:	4a36      	ldr	r2, [pc, #216]	@ (8000cac <HAL_ETH_MspInit+0x178>)
 8000bd2:	f043 0301 	orr.w	r3, r3, #1
 8000bd6:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bd8:	4b34      	ldr	r3, [pc, #208]	@ (8000cac <HAL_ETH_MspInit+0x178>)
 8000bda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bdc:	f003 0301 	and.w	r3, r3, #1
 8000be0:	613b      	str	r3, [r7, #16]
 8000be2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000be4:	2300      	movs	r3, #0
 8000be6:	60fb      	str	r3, [r7, #12]
 8000be8:	4b30      	ldr	r3, [pc, #192]	@ (8000cac <HAL_ETH_MspInit+0x178>)
 8000bea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bec:	4a2f      	ldr	r2, [pc, #188]	@ (8000cac <HAL_ETH_MspInit+0x178>)
 8000bee:	f043 0302 	orr.w	r3, r3, #2
 8000bf2:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bf4:	4b2d      	ldr	r3, [pc, #180]	@ (8000cac <HAL_ETH_MspInit+0x178>)
 8000bf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bf8:	f003 0302 	and.w	r3, r3, #2
 8000bfc:	60fb      	str	r3, [r7, #12]
 8000bfe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c00:	2300      	movs	r3, #0
 8000c02:	60bb      	str	r3, [r7, #8]
 8000c04:	4b29      	ldr	r3, [pc, #164]	@ (8000cac <HAL_ETH_MspInit+0x178>)
 8000c06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c08:	4a28      	ldr	r2, [pc, #160]	@ (8000cac <HAL_ETH_MspInit+0x178>)
 8000c0a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000c0e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c10:	4b26      	ldr	r3, [pc, #152]	@ (8000cac <HAL_ETH_MspInit+0x178>)
 8000c12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000c18:	60bb      	str	r3, [r7, #8]
 8000c1a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000c1c:	2332      	movs	r3, #50	@ 0x32
 8000c1e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c20:	2302      	movs	r3, #2
 8000c22:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c24:	2300      	movs	r3, #0
 8000c26:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c28:	2303      	movs	r3, #3
 8000c2a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c2c:	230b      	movs	r3, #11
 8000c2e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c30:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c34:	4619      	mov	r1, r3
 8000c36:	481e      	ldr	r0, [pc, #120]	@ (8000cb0 <HAL_ETH_MspInit+0x17c>)
 8000c38:	f000 ff24 	bl	8001a84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000c3c:	2386      	movs	r3, #134	@ 0x86
 8000c3e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c40:	2302      	movs	r3, #2
 8000c42:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c44:	2300      	movs	r3, #0
 8000c46:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c48:	2303      	movs	r3, #3
 8000c4a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c4c:	230b      	movs	r3, #11
 8000c4e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c50:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c54:	4619      	mov	r1, r3
 8000c56:	4817      	ldr	r0, [pc, #92]	@ (8000cb4 <HAL_ETH_MspInit+0x180>)
 8000c58:	f000 ff14 	bl	8001a84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000c5c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c60:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c62:	2302      	movs	r3, #2
 8000c64:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c66:	2300      	movs	r3, #0
 8000c68:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c6a:	2303      	movs	r3, #3
 8000c6c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c6e:	230b      	movs	r3, #11
 8000c70:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000c72:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c76:	4619      	mov	r1, r3
 8000c78:	480f      	ldr	r0, [pc, #60]	@ (8000cb8 <HAL_ETH_MspInit+0x184>)
 8000c7a:	f000 ff03 	bl	8001a84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000c7e:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000c82:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c84:	2302      	movs	r3, #2
 8000c86:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c8c:	2303      	movs	r3, #3
 8000c8e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c90:	230b      	movs	r3, #11
 8000c92:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c94:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c98:	4619      	mov	r1, r3
 8000c9a:	4808      	ldr	r0, [pc, #32]	@ (8000cbc <HAL_ETH_MspInit+0x188>)
 8000c9c:	f000 fef2 	bl	8001a84 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000ca0:	bf00      	nop
 8000ca2:	3738      	adds	r7, #56	@ 0x38
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	40028000 	.word	0x40028000
 8000cac:	40023800 	.word	0x40023800
 8000cb0:	40020800 	.word	0x40020800
 8000cb4:	40020000 	.word	0x40020000
 8000cb8:	40020400 	.word	0x40020400
 8000cbc:	40021800 	.word	0x40021800

08000cc0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b08a      	sub	sp, #40	@ 0x28
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc8:	f107 0314 	add.w	r3, r7, #20
 8000ccc:	2200      	movs	r2, #0
 8000cce:	601a      	str	r2, [r3, #0]
 8000cd0:	605a      	str	r2, [r3, #4]
 8000cd2:	609a      	str	r2, [r3, #8]
 8000cd4:	60da      	str	r2, [r3, #12]
 8000cd6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a19      	ldr	r2, [pc, #100]	@ (8000d44 <HAL_UART_MspInit+0x84>)
 8000cde:	4293      	cmp	r3, r2
 8000ce0:	d12c      	bne.n	8000d3c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	613b      	str	r3, [r7, #16]
 8000ce6:	4b18      	ldr	r3, [pc, #96]	@ (8000d48 <HAL_UART_MspInit+0x88>)
 8000ce8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cea:	4a17      	ldr	r2, [pc, #92]	@ (8000d48 <HAL_UART_MspInit+0x88>)
 8000cec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000cf0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cf2:	4b15      	ldr	r3, [pc, #84]	@ (8000d48 <HAL_UART_MspInit+0x88>)
 8000cf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cf6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000cfa:	613b      	str	r3, [r7, #16]
 8000cfc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cfe:	2300      	movs	r3, #0
 8000d00:	60fb      	str	r3, [r7, #12]
 8000d02:	4b11      	ldr	r3, [pc, #68]	@ (8000d48 <HAL_UART_MspInit+0x88>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d06:	4a10      	ldr	r2, [pc, #64]	@ (8000d48 <HAL_UART_MspInit+0x88>)
 8000d08:	f043 0308 	orr.w	r3, r3, #8
 8000d0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d0e:	4b0e      	ldr	r3, [pc, #56]	@ (8000d48 <HAL_UART_MspInit+0x88>)
 8000d10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d12:	f003 0308 	and.w	r3, r3, #8
 8000d16:	60fb      	str	r3, [r7, #12]
 8000d18:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000d1a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000d1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d20:	2302      	movs	r3, #2
 8000d22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d24:	2300      	movs	r3, #0
 8000d26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d28:	2303      	movs	r3, #3
 8000d2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d2c:	2307      	movs	r3, #7
 8000d2e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d30:	f107 0314 	add.w	r3, r7, #20
 8000d34:	4619      	mov	r1, r3
 8000d36:	4805      	ldr	r0, [pc, #20]	@ (8000d4c <HAL_UART_MspInit+0x8c>)
 8000d38:	f000 fea4 	bl	8001a84 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000d3c:	bf00      	nop
 8000d3e:	3728      	adds	r7, #40	@ 0x28
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	40004800 	.word	0x40004800
 8000d48:	40023800 	.word	0x40023800
 8000d4c:	40020c00 	.word	0x40020c00

08000d50 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b08a      	sub	sp, #40	@ 0x28
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d58:	f107 0314 	add.w	r3, r7, #20
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	601a      	str	r2, [r3, #0]
 8000d60:	605a      	str	r2, [r3, #4]
 8000d62:	609a      	str	r2, [r3, #8]
 8000d64:	60da      	str	r2, [r3, #12]
 8000d66:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000d70:	d13f      	bne.n	8000df2 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d72:	2300      	movs	r3, #0
 8000d74:	613b      	str	r3, [r7, #16]
 8000d76:	4b21      	ldr	r3, [pc, #132]	@ (8000dfc <HAL_PCD_MspInit+0xac>)
 8000d78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d7a:	4a20      	ldr	r2, [pc, #128]	@ (8000dfc <HAL_PCD_MspInit+0xac>)
 8000d7c:	f043 0301 	orr.w	r3, r3, #1
 8000d80:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d82:	4b1e      	ldr	r3, [pc, #120]	@ (8000dfc <HAL_PCD_MspInit+0xac>)
 8000d84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d86:	f003 0301 	and.w	r3, r3, #1
 8000d8a:	613b      	str	r3, [r7, #16]
 8000d8c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000d8e:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8000d92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d94:	2302      	movs	r3, #2
 8000d96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d9c:	2303      	movs	r3, #3
 8000d9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000da0:	230a      	movs	r3, #10
 8000da2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000da4:	f107 0314 	add.w	r3, r7, #20
 8000da8:	4619      	mov	r1, r3
 8000daa:	4815      	ldr	r0, [pc, #84]	@ (8000e00 <HAL_PCD_MspInit+0xb0>)
 8000dac:	f000 fe6a 	bl	8001a84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000db0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000db4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000db6:	2300      	movs	r3, #0
 8000db8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000dbe:	f107 0314 	add.w	r3, r7, #20
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	480e      	ldr	r0, [pc, #56]	@ (8000e00 <HAL_PCD_MspInit+0xb0>)
 8000dc6:	f000 fe5d 	bl	8001a84 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000dca:	4b0c      	ldr	r3, [pc, #48]	@ (8000dfc <HAL_PCD_MspInit+0xac>)
 8000dcc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000dce:	4a0b      	ldr	r2, [pc, #44]	@ (8000dfc <HAL_PCD_MspInit+0xac>)
 8000dd0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000dd4:	6353      	str	r3, [r2, #52]	@ 0x34
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	60fb      	str	r3, [r7, #12]
 8000dda:	4b08      	ldr	r3, [pc, #32]	@ (8000dfc <HAL_PCD_MspInit+0xac>)
 8000ddc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dde:	4a07      	ldr	r2, [pc, #28]	@ (8000dfc <HAL_PCD_MspInit+0xac>)
 8000de0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000de4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000de6:	4b05      	ldr	r3, [pc, #20]	@ (8000dfc <HAL_PCD_MspInit+0xac>)
 8000de8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000dee:	60fb      	str	r3, [r7, #12]
 8000df0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000df2:	bf00      	nop
 8000df4:	3728      	adds	r7, #40	@ 0x28
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	40023800 	.word	0x40023800
 8000e00:	40020000 	.word	0x40020000

08000e04 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b08e      	sub	sp, #56	@ 0x38
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000e10:	2300      	movs	r3, #0
 8000e12:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8000e14:	2300      	movs	r3, #0
 8000e16:	60fb      	str	r3, [r7, #12]
 8000e18:	4b33      	ldr	r3, [pc, #204]	@ (8000ee8 <HAL_InitTick+0xe4>)
 8000e1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e1c:	4a32      	ldr	r2, [pc, #200]	@ (8000ee8 <HAL_InitTick+0xe4>)
 8000e1e:	f043 0320 	orr.w	r3, r3, #32
 8000e22:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e24:	4b30      	ldr	r3, [pc, #192]	@ (8000ee8 <HAL_InitTick+0xe4>)
 8000e26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e28:	f003 0320 	and.w	r3, r3, #32
 8000e2c:	60fb      	str	r3, [r7, #12]
 8000e2e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e30:	f107 0210 	add.w	r2, r7, #16
 8000e34:	f107 0314 	add.w	r3, r7, #20
 8000e38:	4611      	mov	r1, r2
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f001 fd9c 	bl	8002978 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000e40:	6a3b      	ldr	r3, [r7, #32]
 8000e42:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000e44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d103      	bne.n	8000e52 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000e4a:	f001 fd6d 	bl	8002928 <HAL_RCC_GetPCLK1Freq>
 8000e4e:	6378      	str	r0, [r7, #52]	@ 0x34
 8000e50:	e004      	b.n	8000e5c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000e52:	f001 fd69 	bl	8002928 <HAL_RCC_GetPCLK1Freq>
 8000e56:	4603      	mov	r3, r0
 8000e58:	005b      	lsls	r3, r3, #1
 8000e5a:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e5e:	4a23      	ldr	r2, [pc, #140]	@ (8000eec <HAL_InitTick+0xe8>)
 8000e60:	fba2 2303 	umull	r2, r3, r2, r3
 8000e64:	0c9b      	lsrs	r3, r3, #18
 8000e66:	3b01      	subs	r3, #1
 8000e68:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8000e6a:	4b21      	ldr	r3, [pc, #132]	@ (8000ef0 <HAL_InitTick+0xec>)
 8000e6c:	4a21      	ldr	r2, [pc, #132]	@ (8000ef4 <HAL_InitTick+0xf0>)
 8000e6e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8000e70:	4b1f      	ldr	r3, [pc, #124]	@ (8000ef0 <HAL_InitTick+0xec>)
 8000e72:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000e76:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8000e78:	4a1d      	ldr	r2, [pc, #116]	@ (8000ef0 <HAL_InitTick+0xec>)
 8000e7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e7c:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8000e7e:	4b1c      	ldr	r3, [pc, #112]	@ (8000ef0 <HAL_InitTick+0xec>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e84:	4b1a      	ldr	r3, [pc, #104]	@ (8000ef0 <HAL_InitTick+0xec>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	609a      	str	r2, [r3, #8]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e8a:	4b19      	ldr	r3, [pc, #100]	@ (8000ef0 <HAL_InitTick+0xec>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim7);
 8000e90:	4817      	ldr	r0, [pc, #92]	@ (8000ef0 <HAL_InitTick+0xec>)
 8000e92:	f001 fda3 	bl	80029dc <HAL_TIM_Base_Init>
 8000e96:	4603      	mov	r3, r0
 8000e98:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000e9c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d11b      	bne.n	8000edc <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 8000ea4:	4812      	ldr	r0, [pc, #72]	@ (8000ef0 <HAL_InitTick+0xec>)
 8000ea6:	f001 fdf3 	bl	8002a90 <HAL_TIM_Base_Start_IT>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000eb0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d111      	bne.n	8000edc <HAL_InitTick+0xd8>
    {
    /* Enable the TIM7 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000eb8:	2037      	movs	r0, #55	@ 0x37
 8000eba:	f000 faad 	bl	8001418 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	2b0f      	cmp	r3, #15
 8000ec2:	d808      	bhi.n	8000ed6 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority, 0U);
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	6879      	ldr	r1, [r7, #4]
 8000ec8:	2037      	movs	r0, #55	@ 0x37
 8000eca:	f000 fa89 	bl	80013e0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ece:	4a0a      	ldr	r2, [pc, #40]	@ (8000ef8 <HAL_InitTick+0xf4>)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	6013      	str	r3, [r2, #0]
 8000ed4:	e002      	b.n	8000edc <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000edc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	3738      	adds	r7, #56	@ 0x38
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	40023800 	.word	0x40023800
 8000eec:	431bde83 	.word	0x431bde83
 8000ef0:	20000810 	.word	0x20000810
 8000ef4:	40001400 	.word	0x40001400
 8000ef8:	20000004 	.word	0x20000004

08000efc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f00:	bf00      	nop
 8000f02:	e7fd      	b.n	8000f00 <NMI_Handler+0x4>

08000f04 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f08:	bf00      	nop
 8000f0a:	e7fd      	b.n	8000f08 <HardFault_Handler+0x4>

08000f0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f10:	bf00      	nop
 8000f12:	e7fd      	b.n	8000f10 <MemManage_Handler+0x4>

08000f14 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f18:	bf00      	nop
 8000f1a:	e7fd      	b.n	8000f18 <BusFault_Handler+0x4>

08000f1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f20:	bf00      	nop
 8000f22:	e7fd      	b.n	8000f20 <UsageFault_Handler+0x4>

08000f24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f28:	bf00      	nop
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr
	...

08000f34 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000f38:	4802      	ldr	r0, [pc, #8]	@ (8000f44 <TIM7_IRQHandler+0x10>)
 8000f3a:	f001 fe19 	bl	8002b70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000f3e:	bf00      	nop
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	20000810 	.word	0x20000810

08000f48 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
	/* Place your implementation of fputc here */
    /* e.g. write a character to the USART3 and Loop until the end of transmission */
	HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 8000f50:	1d39      	adds	r1, r7, #4
 8000f52:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000f56:	2201      	movs	r2, #1
 8000f58:	4803      	ldr	r0, [pc, #12]	@ (8000f68 <__io_putchar+0x20>)
 8000f5a:	f002 f83a 	bl	8002fd2 <HAL_UART_Transmit>

	return ch;
 8000f5e:	687b      	ldr	r3, [r7, #4]
}
 8000f60:	4618      	mov	r0, r3
 8000f62:	3708      	adds	r7, #8
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	200002b0 	.word	0x200002b0

08000f6c <vPrintString>:

/*-----------------------------------------------------------*/

void vPrintString( const char *pcString )
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
	/* Print the string, using a critical section as a crude method of mutual
	exclusion. */
	taskENTER_CRITICAL();
 8000f74:	f004 fc78 	bl	8005868 <vPortEnterCritical>
	{
		printf( "%s", pcString );
 8000f78:	6879      	ldr	r1, [r7, #4]
 8000f7a:	4807      	ldr	r0, [pc, #28]	@ (8000f98 <vPrintString+0x2c>)
 8000f7c:	f005 f902 	bl	8006184 <iprintf>
		fflush( stdout );
 8000f80:	4b06      	ldr	r3, [pc, #24]	@ (8000f9c <vPrintString+0x30>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	689b      	ldr	r3, [r3, #8]
 8000f86:	4618      	mov	r0, r3
 8000f88:	f005 f826 	bl	8005fd8 <fflush>
	}
	taskEXIT_CRITICAL();
 8000f8c:	f004 fc9e 	bl	80058cc <vPortExitCritical>
}
 8000f90:	bf00      	nop
 8000f92:	3708      	adds	r7, #8
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	08006ffc 	.word	0x08006ffc
 8000f9c:	2000001c 	.word	0x2000001c

08000fa0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
	return 1;
 8000fa4:	2301      	movs	r3, #1
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr

08000fb0 <_kill>:

int _kill(int pid, int sig)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
 8000fb8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000fba:	f005 f9dd 	bl	8006378 <__errno>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2216      	movs	r2, #22
 8000fc2:	601a      	str	r2, [r3, #0]
	return -1;
 8000fc4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	3708      	adds	r7, #8
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}

08000fd0 <_exit>:

void _exit (int status)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000fd8:	f04f 31ff 	mov.w	r1, #4294967295
 8000fdc:	6878      	ldr	r0, [r7, #4]
 8000fde:	f7ff ffe7 	bl	8000fb0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000fe2:	bf00      	nop
 8000fe4:	e7fd      	b.n	8000fe2 <_exit+0x12>

08000fe6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000fe6:	b580      	push	{r7, lr}
 8000fe8:	b086      	sub	sp, #24
 8000fea:	af00      	add	r7, sp, #0
 8000fec:	60f8      	str	r0, [r7, #12]
 8000fee:	60b9      	str	r1, [r7, #8]
 8000ff0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	617b      	str	r3, [r7, #20]
 8000ff6:	e00a      	b.n	800100e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000ff8:	f3af 8000 	nop.w
 8000ffc:	4601      	mov	r1, r0
 8000ffe:	68bb      	ldr	r3, [r7, #8]
 8001000:	1c5a      	adds	r2, r3, #1
 8001002:	60ba      	str	r2, [r7, #8]
 8001004:	b2ca      	uxtb	r2, r1
 8001006:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	3301      	adds	r3, #1
 800100c:	617b      	str	r3, [r7, #20]
 800100e:	697a      	ldr	r2, [r7, #20]
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	429a      	cmp	r2, r3
 8001014:	dbf0      	blt.n	8000ff8 <_read+0x12>
	}

return len;
 8001016:	687b      	ldr	r3, [r7, #4]
}
 8001018:	4618      	mov	r0, r3
 800101a:	3718      	adds	r7, #24
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}

08001020 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b086      	sub	sp, #24
 8001024:	af00      	add	r7, sp, #0
 8001026:	60f8      	str	r0, [r7, #12]
 8001028:	60b9      	str	r1, [r7, #8]
 800102a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800102c:	2300      	movs	r3, #0
 800102e:	617b      	str	r3, [r7, #20]
 8001030:	e009      	b.n	8001046 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001032:	68bb      	ldr	r3, [r7, #8]
 8001034:	1c5a      	adds	r2, r3, #1
 8001036:	60ba      	str	r2, [r7, #8]
 8001038:	781b      	ldrb	r3, [r3, #0]
 800103a:	4618      	mov	r0, r3
 800103c:	f7ff ff84 	bl	8000f48 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001040:	697b      	ldr	r3, [r7, #20]
 8001042:	3301      	adds	r3, #1
 8001044:	617b      	str	r3, [r7, #20]
 8001046:	697a      	ldr	r2, [r7, #20]
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	429a      	cmp	r2, r3
 800104c:	dbf1      	blt.n	8001032 <_write+0x12>
	}
	return len;
 800104e:	687b      	ldr	r3, [r7, #4]
}
 8001050:	4618      	mov	r0, r3
 8001052:	3718      	adds	r7, #24
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}

08001058 <_close>:

int _close(int file)
{
 8001058:	b480      	push	{r7}
 800105a:	b083      	sub	sp, #12
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
	return -1;
 8001060:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001064:	4618      	mov	r0, r3
 8001066:	370c      	adds	r7, #12
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr

08001070 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001070:	b480      	push	{r7}
 8001072:	b083      	sub	sp, #12
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
 8001078:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001080:	605a      	str	r2, [r3, #4]
	return 0;
 8001082:	2300      	movs	r3, #0
}
 8001084:	4618      	mov	r0, r3
 8001086:	370c      	adds	r7, #12
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr

08001090 <_isatty>:

int _isatty(int file)
{
 8001090:	b480      	push	{r7}
 8001092:	b083      	sub	sp, #12
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
	return 1;
 8001098:	2301      	movs	r3, #1
}
 800109a:	4618      	mov	r0, r3
 800109c:	370c      	adds	r7, #12
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr

080010a6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80010a6:	b480      	push	{r7}
 80010a8:	b085      	sub	sp, #20
 80010aa:	af00      	add	r7, sp, #0
 80010ac:	60f8      	str	r0, [r7, #12]
 80010ae:	60b9      	str	r1, [r7, #8]
 80010b0:	607a      	str	r2, [r7, #4]
	return 0;
 80010b2:	2300      	movs	r3, #0
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	3714      	adds	r7, #20
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr

080010c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b086      	sub	sp, #24
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010c8:	4a14      	ldr	r2, [pc, #80]	@ (800111c <_sbrk+0x5c>)
 80010ca:	4b15      	ldr	r3, [pc, #84]	@ (8001120 <_sbrk+0x60>)
 80010cc:	1ad3      	subs	r3, r2, r3
 80010ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010d4:	4b13      	ldr	r3, [pc, #76]	@ (8001124 <_sbrk+0x64>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d102      	bne.n	80010e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010dc:	4b11      	ldr	r3, [pc, #68]	@ (8001124 <_sbrk+0x64>)
 80010de:	4a12      	ldr	r2, [pc, #72]	@ (8001128 <_sbrk+0x68>)
 80010e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010e2:	4b10      	ldr	r3, [pc, #64]	@ (8001124 <_sbrk+0x64>)
 80010e4:	681a      	ldr	r2, [r3, #0]
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	4413      	add	r3, r2
 80010ea:	693a      	ldr	r2, [r7, #16]
 80010ec:	429a      	cmp	r2, r3
 80010ee:	d207      	bcs.n	8001100 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010f0:	f005 f942 	bl	8006378 <__errno>
 80010f4:	4603      	mov	r3, r0
 80010f6:	220c      	movs	r2, #12
 80010f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010fa:	f04f 33ff 	mov.w	r3, #4294967295
 80010fe:	e009      	b.n	8001114 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001100:	4b08      	ldr	r3, [pc, #32]	@ (8001124 <_sbrk+0x64>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001106:	4b07      	ldr	r3, [pc, #28]	@ (8001124 <_sbrk+0x64>)
 8001108:	681a      	ldr	r2, [r3, #0]
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	4413      	add	r3, r2
 800110e:	4a05      	ldr	r2, [pc, #20]	@ (8001124 <_sbrk+0x64>)
 8001110:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001112:	68fb      	ldr	r3, [r7, #12]
}
 8001114:	4618      	mov	r0, r3
 8001116:	3718      	adds	r7, #24
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	20030000 	.word	0x20030000
 8001120:	00000400 	.word	0x00000400
 8001124:	20000858 	.word	0x20000858
 8001128:	20004700 	.word	0x20004700

0800112c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001130:	4b06      	ldr	r3, [pc, #24]	@ (800114c <SystemInit+0x20>)
 8001132:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001136:	4a05      	ldr	r2, [pc, #20]	@ (800114c <SystemInit+0x20>)
 8001138:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800113c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001140:	bf00      	nop
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop
 800114c:	e000ed00 	.word	0xe000ed00

08001150 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001150:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001188 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001154:	480d      	ldr	r0, [pc, #52]	@ (800118c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001156:	490e      	ldr	r1, [pc, #56]	@ (8001190 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001158:	4a0e      	ldr	r2, [pc, #56]	@ (8001194 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800115a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800115c:	e002      	b.n	8001164 <LoopCopyDataInit>

0800115e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800115e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001160:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001162:	3304      	adds	r3, #4

08001164 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001164:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001166:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001168:	d3f9      	bcc.n	800115e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800116a:	4a0b      	ldr	r2, [pc, #44]	@ (8001198 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800116c:	4c0b      	ldr	r4, [pc, #44]	@ (800119c <LoopFillZerobss+0x26>)
  movs r3, #0
 800116e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001170:	e001      	b.n	8001176 <LoopFillZerobss>

08001172 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001172:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001174:	3204      	adds	r2, #4

08001176 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001176:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001178:	d3fb      	bcc.n	8001172 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800117a:	f7ff ffd7 	bl	800112c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800117e:	f005 f901 	bl	8006384 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001182:	f7ff f9fd 	bl	8000580 <main>
  bx  lr    
 8001186:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001188:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800118c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001190:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001194:	08007134 	.word	0x08007134
  ldr r2, =_sbss
 8001198:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 800119c:	20004700 	.word	0x20004700

080011a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011a0:	e7fe      	b.n	80011a0 <ADC_IRQHandler>
	...

080011a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011a8:	4b0e      	ldr	r3, [pc, #56]	@ (80011e4 <HAL_Init+0x40>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a0d      	ldr	r2, [pc, #52]	@ (80011e4 <HAL_Init+0x40>)
 80011ae:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80011b2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80011b4:	4b0b      	ldr	r3, [pc, #44]	@ (80011e4 <HAL_Init+0x40>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a0a      	ldr	r2, [pc, #40]	@ (80011e4 <HAL_Init+0x40>)
 80011ba:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80011be:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011c0:	4b08      	ldr	r3, [pc, #32]	@ (80011e4 <HAL_Init+0x40>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a07      	ldr	r2, [pc, #28]	@ (80011e4 <HAL_Init+0x40>)
 80011c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011cc:	2003      	movs	r0, #3
 80011ce:	f000 f8fc 	bl	80013ca <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011d2:	200f      	movs	r0, #15
 80011d4:	f7ff fe16 	bl	8000e04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011d8:	f7ff fc80 	bl	8000adc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011dc:	2300      	movs	r3, #0
}
 80011de:	4618      	mov	r0, r3
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	40023c00 	.word	0x40023c00

080011e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011ec:	4b06      	ldr	r3, [pc, #24]	@ (8001208 <HAL_IncTick+0x20>)
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	461a      	mov	r2, r3
 80011f2:	4b06      	ldr	r3, [pc, #24]	@ (800120c <HAL_IncTick+0x24>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	4413      	add	r3, r2
 80011f8:	4a04      	ldr	r2, [pc, #16]	@ (800120c <HAL_IncTick+0x24>)
 80011fa:	6013      	str	r3, [r2, #0]
}
 80011fc:	bf00      	nop
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	20000008 	.word	0x20000008
 800120c:	2000085c 	.word	0x2000085c

08001210 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
  return uwTick;
 8001214:	4b03      	ldr	r3, [pc, #12]	@ (8001224 <HAL_GetTick+0x14>)
 8001216:	681b      	ldr	r3, [r3, #0]
}
 8001218:	4618      	mov	r0, r3
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr
 8001222:	bf00      	nop
 8001224:	2000085c 	.word	0x2000085c

08001228 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b084      	sub	sp, #16
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001230:	f7ff ffee 	bl	8001210 <HAL_GetTick>
 8001234:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001240:	d005      	beq.n	800124e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001242:	4b0a      	ldr	r3, [pc, #40]	@ (800126c <HAL_Delay+0x44>)
 8001244:	781b      	ldrb	r3, [r3, #0]
 8001246:	461a      	mov	r2, r3
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	4413      	add	r3, r2
 800124c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800124e:	bf00      	nop
 8001250:	f7ff ffde 	bl	8001210 <HAL_GetTick>
 8001254:	4602      	mov	r2, r0
 8001256:	68bb      	ldr	r3, [r7, #8]
 8001258:	1ad3      	subs	r3, r2, r3
 800125a:	68fa      	ldr	r2, [r7, #12]
 800125c:	429a      	cmp	r2, r3
 800125e:	d8f7      	bhi.n	8001250 <HAL_Delay+0x28>
  {
  }
}
 8001260:	bf00      	nop
 8001262:	bf00      	nop
 8001264:	3710      	adds	r7, #16
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	20000008 	.word	0x20000008

08001270 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001270:	b480      	push	{r7}
 8001272:	b085      	sub	sp, #20
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	f003 0307 	and.w	r3, r3, #7
 800127e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001280:	4b0c      	ldr	r3, [pc, #48]	@ (80012b4 <__NVIC_SetPriorityGrouping+0x44>)
 8001282:	68db      	ldr	r3, [r3, #12]
 8001284:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001286:	68ba      	ldr	r2, [r7, #8]
 8001288:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800128c:	4013      	ands	r3, r2
 800128e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001294:	68bb      	ldr	r3, [r7, #8]
 8001296:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001298:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800129c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012a2:	4a04      	ldr	r2, [pc, #16]	@ (80012b4 <__NVIC_SetPriorityGrouping+0x44>)
 80012a4:	68bb      	ldr	r3, [r7, #8]
 80012a6:	60d3      	str	r3, [r2, #12]
}
 80012a8:	bf00      	nop
 80012aa:	3714      	adds	r7, #20
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr
 80012b4:	e000ed00 	.word	0xe000ed00

080012b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012bc:	4b04      	ldr	r3, [pc, #16]	@ (80012d0 <__NVIC_GetPriorityGrouping+0x18>)
 80012be:	68db      	ldr	r3, [r3, #12]
 80012c0:	0a1b      	lsrs	r3, r3, #8
 80012c2:	f003 0307 	and.w	r3, r3, #7
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	46bd      	mov	sp, r7
 80012ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ce:	4770      	bx	lr
 80012d0:	e000ed00 	.word	0xe000ed00

080012d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b083      	sub	sp, #12
 80012d8:	af00      	add	r7, sp, #0
 80012da:	4603      	mov	r3, r0
 80012dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	db0b      	blt.n	80012fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012e6:	79fb      	ldrb	r3, [r7, #7]
 80012e8:	f003 021f 	and.w	r2, r3, #31
 80012ec:	4907      	ldr	r1, [pc, #28]	@ (800130c <__NVIC_EnableIRQ+0x38>)
 80012ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012f2:	095b      	lsrs	r3, r3, #5
 80012f4:	2001      	movs	r0, #1
 80012f6:	fa00 f202 	lsl.w	r2, r0, r2
 80012fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012fe:	bf00      	nop
 8001300:	370c      	adds	r7, #12
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr
 800130a:	bf00      	nop
 800130c:	e000e100 	.word	0xe000e100

08001310 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001310:	b480      	push	{r7}
 8001312:	b083      	sub	sp, #12
 8001314:	af00      	add	r7, sp, #0
 8001316:	4603      	mov	r3, r0
 8001318:	6039      	str	r1, [r7, #0]
 800131a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800131c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001320:	2b00      	cmp	r3, #0
 8001322:	db0a      	blt.n	800133a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	b2da      	uxtb	r2, r3
 8001328:	490c      	ldr	r1, [pc, #48]	@ (800135c <__NVIC_SetPriority+0x4c>)
 800132a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800132e:	0112      	lsls	r2, r2, #4
 8001330:	b2d2      	uxtb	r2, r2
 8001332:	440b      	add	r3, r1
 8001334:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001338:	e00a      	b.n	8001350 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	b2da      	uxtb	r2, r3
 800133e:	4908      	ldr	r1, [pc, #32]	@ (8001360 <__NVIC_SetPriority+0x50>)
 8001340:	79fb      	ldrb	r3, [r7, #7]
 8001342:	f003 030f 	and.w	r3, r3, #15
 8001346:	3b04      	subs	r3, #4
 8001348:	0112      	lsls	r2, r2, #4
 800134a:	b2d2      	uxtb	r2, r2
 800134c:	440b      	add	r3, r1
 800134e:	761a      	strb	r2, [r3, #24]
}
 8001350:	bf00      	nop
 8001352:	370c      	adds	r7, #12
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr
 800135c:	e000e100 	.word	0xe000e100
 8001360:	e000ed00 	.word	0xe000ed00

08001364 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001364:	b480      	push	{r7}
 8001366:	b089      	sub	sp, #36	@ 0x24
 8001368:	af00      	add	r7, sp, #0
 800136a:	60f8      	str	r0, [r7, #12]
 800136c:	60b9      	str	r1, [r7, #8]
 800136e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	f003 0307 	and.w	r3, r3, #7
 8001376:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001378:	69fb      	ldr	r3, [r7, #28]
 800137a:	f1c3 0307 	rsb	r3, r3, #7
 800137e:	2b04      	cmp	r3, #4
 8001380:	bf28      	it	cs
 8001382:	2304      	movcs	r3, #4
 8001384:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001386:	69fb      	ldr	r3, [r7, #28]
 8001388:	3304      	adds	r3, #4
 800138a:	2b06      	cmp	r3, #6
 800138c:	d902      	bls.n	8001394 <NVIC_EncodePriority+0x30>
 800138e:	69fb      	ldr	r3, [r7, #28]
 8001390:	3b03      	subs	r3, #3
 8001392:	e000      	b.n	8001396 <NVIC_EncodePriority+0x32>
 8001394:	2300      	movs	r3, #0
 8001396:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001398:	f04f 32ff 	mov.w	r2, #4294967295
 800139c:	69bb      	ldr	r3, [r7, #24]
 800139e:	fa02 f303 	lsl.w	r3, r2, r3
 80013a2:	43da      	mvns	r2, r3
 80013a4:	68bb      	ldr	r3, [r7, #8]
 80013a6:	401a      	ands	r2, r3
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013ac:	f04f 31ff 	mov.w	r1, #4294967295
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	fa01 f303 	lsl.w	r3, r1, r3
 80013b6:	43d9      	mvns	r1, r3
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013bc:	4313      	orrs	r3, r2
         );
}
 80013be:	4618      	mov	r0, r3
 80013c0:	3724      	adds	r7, #36	@ 0x24
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr

080013ca <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013ca:	b580      	push	{r7, lr}
 80013cc:	b082      	sub	sp, #8
 80013ce:	af00      	add	r7, sp, #0
 80013d0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013d2:	6878      	ldr	r0, [r7, #4]
 80013d4:	f7ff ff4c 	bl	8001270 <__NVIC_SetPriorityGrouping>
}
 80013d8:	bf00      	nop
 80013da:	3708      	adds	r7, #8
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}

080013e0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b086      	sub	sp, #24
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	4603      	mov	r3, r0
 80013e8:	60b9      	str	r1, [r7, #8]
 80013ea:	607a      	str	r2, [r7, #4]
 80013ec:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013ee:	2300      	movs	r3, #0
 80013f0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013f2:	f7ff ff61 	bl	80012b8 <__NVIC_GetPriorityGrouping>
 80013f6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013f8:	687a      	ldr	r2, [r7, #4]
 80013fa:	68b9      	ldr	r1, [r7, #8]
 80013fc:	6978      	ldr	r0, [r7, #20]
 80013fe:	f7ff ffb1 	bl	8001364 <NVIC_EncodePriority>
 8001402:	4602      	mov	r2, r0
 8001404:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001408:	4611      	mov	r1, r2
 800140a:	4618      	mov	r0, r3
 800140c:	f7ff ff80 	bl	8001310 <__NVIC_SetPriority>
}
 8001410:	bf00      	nop
 8001412:	3718      	adds	r7, #24
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}

08001418 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0
 800141e:	4603      	mov	r3, r0
 8001420:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001422:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001426:	4618      	mov	r0, r3
 8001428:	f7ff ff54 	bl	80012d4 <__NVIC_EnableIRQ>
}
 800142c:	bf00      	nop
 800142e:	3708      	adds	r7, #8
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}

08001434 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b084      	sub	sp, #16
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d101      	bne.n	8001446 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001442:	2301      	movs	r3, #1
 8001444:	e06c      	b.n	8001520 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800144c:	2b00      	cmp	r3, #0
 800144e:	d106      	bne.n	800145e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2223      	movs	r2, #35	@ 0x23
 8001454:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001458:	6878      	ldr	r0, [r7, #4]
 800145a:	f7ff fb6b 	bl	8000b34 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800145e:	2300      	movs	r3, #0
 8001460:	60bb      	str	r3, [r7, #8]
 8001462:	4b31      	ldr	r3, [pc, #196]	@ (8001528 <HAL_ETH_Init+0xf4>)
 8001464:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001466:	4a30      	ldr	r2, [pc, #192]	@ (8001528 <HAL_ETH_Init+0xf4>)
 8001468:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800146c:	6453      	str	r3, [r2, #68]	@ 0x44
 800146e:	4b2e      	ldr	r3, [pc, #184]	@ (8001528 <HAL_ETH_Init+0xf4>)
 8001470:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001472:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001476:	60bb      	str	r3, [r7, #8]
 8001478:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800147a:	4b2c      	ldr	r3, [pc, #176]	@ (800152c <HAL_ETH_Init+0xf8>)
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	4a2b      	ldr	r2, [pc, #172]	@ (800152c <HAL_ETH_Init+0xf8>)
 8001480:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001484:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001486:	4b29      	ldr	r3, [pc, #164]	@ (800152c <HAL_ETH_Init+0xf8>)
 8001488:	685a      	ldr	r2, [r3, #4]
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	689b      	ldr	r3, [r3, #8]
 800148e:	4927      	ldr	r1, [pc, #156]	@ (800152c <HAL_ETH_Init+0xf8>)
 8001490:	4313      	orrs	r3, r2
 8001492:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001494:	4b25      	ldr	r3, [pc, #148]	@ (800152c <HAL_ETH_Init+0xf8>)
 8001496:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	687a      	ldr	r2, [r7, #4]
 80014a4:	6812      	ldr	r2, [r2, #0]
 80014a6:	f043 0301 	orr.w	r3, r3, #1
 80014aa:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80014ae:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80014b0:	f7ff feae 	bl	8001210 <HAL_GetTick>
 80014b4:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80014b6:	e011      	b.n	80014dc <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80014b8:	f7ff feaa 	bl	8001210 <HAL_GetTick>
 80014bc:	4602      	mov	r2, r0
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	1ad3      	subs	r3, r2, r3
 80014c2:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80014c6:	d909      	bls.n	80014dc <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2204      	movs	r2, #4
 80014cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	22e0      	movs	r2, #224	@ 0xe0
 80014d4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80014d8:	2301      	movs	r3, #1
 80014da:	e021      	b.n	8001520 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f003 0301 	and.w	r3, r3, #1
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d1e4      	bne.n	80014b8 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80014ee:	6878      	ldr	r0, [r7, #4]
 80014f0:	f000 f958 	bl	80017a4 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80014f4:	6878      	ldr	r0, [r7, #4]
 80014f6:	f000 f9ff 	bl	80018f8 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80014fa:	6878      	ldr	r0, [r7, #4]
 80014fc:	f000 fa55 	bl	80019aa <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	461a      	mov	r2, r3
 8001506:	2100      	movs	r1, #0
 8001508:	6878      	ldr	r0, [r7, #4]
 800150a:	f000 f9bd 	bl	8001888 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	2200      	movs	r2, #0
 8001512:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2210      	movs	r2, #16
 800151a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800151e:	2300      	movs	r3, #0
}
 8001520:	4618      	mov	r0, r3
 8001522:	3710      	adds	r7, #16
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	40023800 	.word	0x40023800
 800152c:	40013800 	.word	0x40013800

08001530 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b084      	sub	sp, #16
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
 8001538:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001542:	68fa      	ldr	r2, [r7, #12]
 8001544:	4b51      	ldr	r3, [pc, #324]	@ (800168c <ETH_SetMACConfig+0x15c>)
 8001546:	4013      	ands	r3, r2
 8001548:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	7c1b      	ldrb	r3, [r3, #16]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d102      	bne.n	8001558 <ETH_SetMACConfig+0x28>
 8001552:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001556:	e000      	b.n	800155a <ETH_SetMACConfig+0x2a>
 8001558:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	7c5b      	ldrb	r3, [r3, #17]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d102      	bne.n	8001568 <ETH_SetMACConfig+0x38>
 8001562:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001566:	e000      	b.n	800156a <ETH_SetMACConfig+0x3a>
 8001568:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800156a:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001570:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	7fdb      	ldrb	r3, [r3, #31]
 8001576:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001578:	431a      	orrs	r2, r3
                        macconf->Speed |
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800157e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001580:	683a      	ldr	r2, [r7, #0]
 8001582:	7f92      	ldrb	r2, [r2, #30]
 8001584:	2a00      	cmp	r2, #0
 8001586:	d102      	bne.n	800158e <ETH_SetMACConfig+0x5e>
 8001588:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800158c:	e000      	b.n	8001590 <ETH_SetMACConfig+0x60>
 800158e:	2200      	movs	r2, #0
                        macconf->Speed |
 8001590:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	7f1b      	ldrb	r3, [r3, #28]
 8001596:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001598:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800159e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	791b      	ldrb	r3, [r3, #4]
 80015a4:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80015a6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80015a8:	683a      	ldr	r2, [r7, #0]
 80015aa:	f892 2020 	ldrb.w	r2, [r2, #32]
 80015ae:	2a00      	cmp	r2, #0
 80015b0:	d102      	bne.n	80015b8 <ETH_SetMACConfig+0x88>
 80015b2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80015b6:	e000      	b.n	80015ba <ETH_SetMACConfig+0x8a>
 80015b8:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80015ba:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	7bdb      	ldrb	r3, [r3, #15]
 80015c0:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80015c2:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80015c8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80015d0:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80015d2:	4313      	orrs	r3, r2
 80015d4:	68fa      	ldr	r2, [r7, #12]
 80015d6:	4313      	orrs	r3, r2
 80015d8:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	68fa      	ldr	r2, [r7, #12]
 80015e0:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80015ea:	2001      	movs	r0, #1
 80015ec:	f7ff fe1c 	bl	8001228 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	68fa      	ldr	r2, [r7, #12]
 80015f6:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	699b      	ldr	r3, [r3, #24]
 80015fe:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001600:	68fa      	ldr	r2, [r7, #12]
 8001602:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8001606:	4013      	ands	r3, r2
 8001608:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800160e:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001610:	683a      	ldr	r2, [r7, #0]
 8001612:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8001616:	2a00      	cmp	r2, #0
 8001618:	d101      	bne.n	800161e <ETH_SetMACConfig+0xee>
 800161a:	2280      	movs	r2, #128	@ 0x80
 800161c:	e000      	b.n	8001620 <ETH_SetMACConfig+0xf0>
 800161e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001620:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001626:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001628:	683a      	ldr	r2, [r7, #0]
 800162a:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 800162e:	2a01      	cmp	r2, #1
 8001630:	d101      	bne.n	8001636 <ETH_SetMACConfig+0x106>
 8001632:	2208      	movs	r2, #8
 8001634:	e000      	b.n	8001638 <ETH_SetMACConfig+0x108>
 8001636:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001638:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800163a:	683a      	ldr	r2, [r7, #0]
 800163c:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8001640:	2a01      	cmp	r2, #1
 8001642:	d101      	bne.n	8001648 <ETH_SetMACConfig+0x118>
 8001644:	2204      	movs	r2, #4
 8001646:	e000      	b.n	800164a <ETH_SetMACConfig+0x11a>
 8001648:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800164a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 800164c:	683a      	ldr	r2, [r7, #0]
 800164e:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8001652:	2a01      	cmp	r2, #1
 8001654:	d101      	bne.n	800165a <ETH_SetMACConfig+0x12a>
 8001656:	2202      	movs	r2, #2
 8001658:	e000      	b.n	800165c <ETH_SetMACConfig+0x12c>
 800165a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800165c:	4313      	orrs	r3, r2
 800165e:	68fa      	ldr	r2, [r7, #12]
 8001660:	4313      	orrs	r3, r2
 8001662:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	68fa      	ldr	r2, [r7, #12]
 800166a:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	699b      	ldr	r3, [r3, #24]
 8001672:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001674:	2001      	movs	r0, #1
 8001676:	f7ff fdd7 	bl	8001228 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	68fa      	ldr	r2, [r7, #12]
 8001680:	619a      	str	r2, [r3, #24]
}
 8001682:	bf00      	nop
 8001684:	3710      	adds	r7, #16
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	ff20810f 	.word	0xff20810f

08001690 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b084      	sub	sp, #16
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
 8001698:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80016a2:	699b      	ldr	r3, [r3, #24]
 80016a4:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80016a6:	68fa      	ldr	r2, [r7, #12]
 80016a8:	4b3d      	ldr	r3, [pc, #244]	@ (80017a0 <ETH_SetDMAConfig+0x110>)
 80016aa:	4013      	ands	r3, r2
 80016ac:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	7b1b      	ldrb	r3, [r3, #12]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d102      	bne.n	80016bc <ETH_SetDMAConfig+0x2c>
 80016b6:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80016ba:	e000      	b.n	80016be <ETH_SetDMAConfig+0x2e>
 80016bc:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	7b5b      	ldrb	r3, [r3, #13]
 80016c2:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80016c4:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80016c6:	683a      	ldr	r2, [r7, #0]
 80016c8:	7f52      	ldrb	r2, [r2, #29]
 80016ca:	2a00      	cmp	r2, #0
 80016cc:	d102      	bne.n	80016d4 <ETH_SetDMAConfig+0x44>
 80016ce:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80016d2:	e000      	b.n	80016d6 <ETH_SetDMAConfig+0x46>
 80016d4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80016d6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	7b9b      	ldrb	r3, [r3, #14]
 80016dc:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80016de:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80016e4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	7f1b      	ldrb	r3, [r3, #28]
 80016ea:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80016ec:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	7f9b      	ldrb	r3, [r3, #30]
 80016f2:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80016f4:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80016fa:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001702:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001704:	4313      	orrs	r3, r2
 8001706:	68fa      	ldr	r2, [r7, #12]
 8001708:	4313      	orrs	r3, r2
 800170a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001714:	461a      	mov	r2, r3
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001722:	699b      	ldr	r3, [r3, #24]
 8001724:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001726:	2001      	movs	r0, #1
 8001728:	f7ff fd7e 	bl	8001228 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001734:	461a      	mov	r2, r3
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	791b      	ldrb	r3, [r3, #4]
 800173e:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001744:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800174a:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001750:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001758:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800175a:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001760:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001762:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001768:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800176a:	687a      	ldr	r2, [r7, #4]
 800176c:	6812      	ldr	r2, [r2, #0]
 800176e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001772:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001776:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001784:	2001      	movs	r0, #1
 8001786:	f7ff fd4f 	bl	8001228 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001792:	461a      	mov	r2, r3
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	6013      	str	r3, [r2, #0]
}
 8001798:	bf00      	nop
 800179a:	3710      	adds	r7, #16
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	f8de3f23 	.word	0xf8de3f23

080017a4 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b0a6      	sub	sp, #152	@ 0x98
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80017ac:	2301      	movs	r3, #1
 80017ae:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 80017b2:	2301      	movs	r3, #1
 80017b4:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80017b8:	2300      	movs	r3, #0
 80017ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80017bc:	2300      	movs	r3, #0
 80017be:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80017c2:	2301      	movs	r3, #1
 80017c4:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80017c8:	2300      	movs	r3, #0
 80017ca:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80017ce:	2301      	movs	r3, #1
 80017d0:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80017d4:	2300      	movs	r3, #0
 80017d6:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80017da:	2300      	movs	r3, #0
 80017dc:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80017e0:	2300      	movs	r3, #0
 80017e2:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80017e4:	2300      	movs	r3, #0
 80017e6:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80017ea:	2300      	movs	r3, #0
 80017ec:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80017ee:	2300      	movs	r3, #0
 80017f0:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80017f4:	2300      	movs	r3, #0
 80017f6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80017fa:	2300      	movs	r3, #0
 80017fc:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001800:	2300      	movs	r3, #0
 8001802:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001806:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800180a:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800180c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001810:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001812:	2300      	movs	r3, #0
 8001814:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001818:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800181c:	4619      	mov	r1, r3
 800181e:	6878      	ldr	r0, [r7, #4]
 8001820:	f7ff fe86 	bl	8001530 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001824:	2301      	movs	r3, #1
 8001826:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001828:	2301      	movs	r3, #1
 800182a:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 800182c:	2301      	movs	r3, #1
 800182e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001832:	2301      	movs	r3, #1
 8001834:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001836:	2300      	movs	r3, #0
 8001838:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800183a:	2300      	movs	r3, #0
 800183c:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001840:	2300      	movs	r3, #0
 8001842:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001846:	2300      	movs	r3, #0
 8001848:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800184a:	2301      	movs	r3, #1
 800184c:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001850:	2301      	movs	r3, #1
 8001852:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001854:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001858:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800185a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800185e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001860:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001864:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8001866:	2301      	movs	r3, #1
 8001868:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 800186c:	2300      	movs	r3, #0
 800186e:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001870:	2300      	movs	r3, #0
 8001872:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001874:	f107 0308 	add.w	r3, r7, #8
 8001878:	4619      	mov	r1, r3
 800187a:	6878      	ldr	r0, [r7, #4]
 800187c:	f7ff ff08 	bl	8001690 <ETH_SetDMAConfig>
}
 8001880:	bf00      	nop
 8001882:	3798      	adds	r7, #152	@ 0x98
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}

08001888 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001888:	b480      	push	{r7}
 800188a:	b087      	sub	sp, #28
 800188c:	af00      	add	r7, sp, #0
 800188e:	60f8      	str	r0, [r7, #12]
 8001890:	60b9      	str	r1, [r7, #8]
 8001892:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	3305      	adds	r3, #5
 8001898:	781b      	ldrb	r3, [r3, #0]
 800189a:	021b      	lsls	r3, r3, #8
 800189c:	687a      	ldr	r2, [r7, #4]
 800189e:	3204      	adds	r2, #4
 80018a0:	7812      	ldrb	r2, [r2, #0]
 80018a2:	4313      	orrs	r3, r2
 80018a4:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80018a6:	68ba      	ldr	r2, [r7, #8]
 80018a8:	4b11      	ldr	r3, [pc, #68]	@ (80018f0 <ETH_MACAddressConfig+0x68>)
 80018aa:	4413      	add	r3, r2
 80018ac:	461a      	mov	r2, r3
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	3303      	adds	r3, #3
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	061a      	lsls	r2, r3, #24
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	3302      	adds	r3, #2
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	041b      	lsls	r3, r3, #16
 80018c2:	431a      	orrs	r2, r3
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	3301      	adds	r3, #1
 80018c8:	781b      	ldrb	r3, [r3, #0]
 80018ca:	021b      	lsls	r3, r3, #8
 80018cc:	4313      	orrs	r3, r2
 80018ce:	687a      	ldr	r2, [r7, #4]
 80018d0:	7812      	ldrb	r2, [r2, #0]
 80018d2:	4313      	orrs	r3, r2
 80018d4:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80018d6:	68ba      	ldr	r2, [r7, #8]
 80018d8:	4b06      	ldr	r3, [pc, #24]	@ (80018f4 <ETH_MACAddressConfig+0x6c>)
 80018da:	4413      	add	r3, r2
 80018dc:	461a      	mov	r2, r3
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	6013      	str	r3, [r2, #0]
}
 80018e2:	bf00      	nop
 80018e4:	371c      	adds	r7, #28
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr
 80018ee:	bf00      	nop
 80018f0:	40028040 	.word	0x40028040
 80018f4:	40028044 	.word	0x40028044

080018f8 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b085      	sub	sp, #20
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001900:	2300      	movs	r3, #0
 8001902:	60fb      	str	r3, [r7, #12]
 8001904:	e03e      	b.n	8001984 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	68d9      	ldr	r1, [r3, #12]
 800190a:	68fa      	ldr	r2, [r7, #12]
 800190c:	4613      	mov	r3, r2
 800190e:	009b      	lsls	r3, r3, #2
 8001910:	4413      	add	r3, r2
 8001912:	00db      	lsls	r3, r3, #3
 8001914:	440b      	add	r3, r1
 8001916:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	2200      	movs	r2, #0
 800191c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800191e:	68bb      	ldr	r3, [r7, #8]
 8001920:	2200      	movs	r2, #0
 8001922:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001924:	68bb      	ldr	r3, [r7, #8]
 8001926:	2200      	movs	r2, #0
 8001928:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800192a:	68bb      	ldr	r3, [r7, #8]
 800192c:	2200      	movs	r2, #0
 800192e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001930:	68b9      	ldr	r1, [r7, #8]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	68fa      	ldr	r2, [r7, #12]
 8001936:	3206      	adds	r2, #6
 8001938:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 800193c:	68bb      	ldr	r3, [r7, #8]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	2b02      	cmp	r3, #2
 800194c:	d80c      	bhi.n	8001968 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	68d9      	ldr	r1, [r3, #12]
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	1c5a      	adds	r2, r3, #1
 8001956:	4613      	mov	r3, r2
 8001958:	009b      	lsls	r3, r3, #2
 800195a:	4413      	add	r3, r2
 800195c:	00db      	lsls	r3, r3, #3
 800195e:	440b      	add	r3, r1
 8001960:	461a      	mov	r2, r3
 8001962:	68bb      	ldr	r3, [r7, #8]
 8001964:	60da      	str	r2, [r3, #12]
 8001966:	e004      	b.n	8001972 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	68db      	ldr	r3, [r3, #12]
 800196c:	461a      	mov	r2, r3
 800196e:	68bb      	ldr	r3, [r7, #8]
 8001970:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8001972:	68bb      	ldr	r3, [r7, #8]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 800197a:	68bb      	ldr	r3, [r7, #8]
 800197c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	3301      	adds	r3, #1
 8001982:	60fb      	str	r3, [r7, #12]
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	2b03      	cmp	r3, #3
 8001988:	d9bd      	bls.n	8001906 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2200      	movs	r2, #0
 800198e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	68da      	ldr	r2, [r3, #12]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800199c:	611a      	str	r2, [r3, #16]
}
 800199e:	bf00      	nop
 80019a0:	3714      	adds	r7, #20
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr

080019aa <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80019aa:	b480      	push	{r7}
 80019ac:	b085      	sub	sp, #20
 80019ae:	af00      	add	r7, sp, #0
 80019b0:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80019b2:	2300      	movs	r3, #0
 80019b4:	60fb      	str	r3, [r7, #12]
 80019b6:	e046      	b.n	8001a46 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6919      	ldr	r1, [r3, #16]
 80019bc:	68fa      	ldr	r2, [r7, #12]
 80019be:	4613      	mov	r3, r2
 80019c0:	009b      	lsls	r3, r3, #2
 80019c2:	4413      	add	r3, r2
 80019c4:	00db      	lsls	r3, r3, #3
 80019c6:	440b      	add	r3, r1
 80019c8:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80019ca:	68bb      	ldr	r3, [r7, #8]
 80019cc:	2200      	movs	r2, #0
 80019ce:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80019d0:	68bb      	ldr	r3, [r7, #8]
 80019d2:	2200      	movs	r2, #0
 80019d4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80019d6:	68bb      	ldr	r3, [r7, #8]
 80019d8:	2200      	movs	r2, #0
 80019da:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80019dc:	68bb      	ldr	r3, [r7, #8]
 80019de:	2200      	movs	r2, #0
 80019e0:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80019e2:	68bb      	ldr	r3, [r7, #8]
 80019e4:	2200      	movs	r2, #0
 80019e6:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80019e8:	68bb      	ldr	r3, [r7, #8]
 80019ea:	2200      	movs	r2, #0
 80019ec:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80019ee:	68bb      	ldr	r3, [r7, #8]
 80019f0:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80019f4:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80019f6:	68bb      	ldr	r3, [r7, #8]
 80019f8:	f244 52f8 	movw	r2, #17912	@ 0x45f8
 80019fc:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80019fe:	68bb      	ldr	r3, [r7, #8]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001a06:	68bb      	ldr	r3, [r7, #8]
 8001a08:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001a0a:	68b9      	ldr	r1, [r7, #8]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	68fa      	ldr	r2, [r7, #12]
 8001a10:	3212      	adds	r2, #18
 8001a12:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	2b02      	cmp	r3, #2
 8001a1a:	d80c      	bhi.n	8001a36 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6919      	ldr	r1, [r3, #16]
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	1c5a      	adds	r2, r3, #1
 8001a24:	4613      	mov	r3, r2
 8001a26:	009b      	lsls	r3, r3, #2
 8001a28:	4413      	add	r3, r2
 8001a2a:	00db      	lsls	r3, r3, #3
 8001a2c:	440b      	add	r3, r1
 8001a2e:	461a      	mov	r2, r3
 8001a30:	68bb      	ldr	r3, [r7, #8]
 8001a32:	60da      	str	r2, [r3, #12]
 8001a34:	e004      	b.n	8001a40 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	691b      	ldr	r3, [r3, #16]
 8001a3a:	461a      	mov	r2, r3
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	3301      	adds	r3, #1
 8001a44:	60fb      	str	r3, [r7, #12]
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	2b03      	cmp	r3, #3
 8001a4a:	d9b5      	bls.n	80019b8 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2200      	movs	r2, #0
 8001a50:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2200      	movs	r2, #0
 8001a56:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2200      	movs	r2, #0
 8001a62:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2200      	movs	r2, #0
 8001a68:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	691a      	ldr	r2, [r3, #16]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001a76:	60da      	str	r2, [r3, #12]
}
 8001a78:	bf00      	nop
 8001a7a:	3714      	adds	r7, #20
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr

08001a84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b089      	sub	sp, #36	@ 0x24
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
 8001a8c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a92:	2300      	movs	r3, #0
 8001a94:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a96:	2300      	movs	r3, #0
 8001a98:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	61fb      	str	r3, [r7, #28]
 8001a9e:	e177      	b.n	8001d90 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	697a      	ldr	r2, [r7, #20]
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ab4:	693a      	ldr	r2, [r7, #16]
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	f040 8166 	bne.w	8001d8a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	f003 0303 	and.w	r3, r3, #3
 8001ac6:	2b01      	cmp	r3, #1
 8001ac8:	d005      	beq.n	8001ad6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ad2:	2b02      	cmp	r3, #2
 8001ad4:	d130      	bne.n	8001b38 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	689b      	ldr	r3, [r3, #8]
 8001ada:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001adc:	69fb      	ldr	r3, [r7, #28]
 8001ade:	005b      	lsls	r3, r3, #1
 8001ae0:	2203      	movs	r2, #3
 8001ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae6:	43db      	mvns	r3, r3
 8001ae8:	69ba      	ldr	r2, [r7, #24]
 8001aea:	4013      	ands	r3, r2
 8001aec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	68da      	ldr	r2, [r3, #12]
 8001af2:	69fb      	ldr	r3, [r7, #28]
 8001af4:	005b      	lsls	r3, r3, #1
 8001af6:	fa02 f303 	lsl.w	r3, r2, r3
 8001afa:	69ba      	ldr	r2, [r7, #24]
 8001afc:	4313      	orrs	r3, r2
 8001afe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	69ba      	ldr	r2, [r7, #24]
 8001b04:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	69fb      	ldr	r3, [r7, #28]
 8001b10:	fa02 f303 	lsl.w	r3, r2, r3
 8001b14:	43db      	mvns	r3, r3
 8001b16:	69ba      	ldr	r2, [r7, #24]
 8001b18:	4013      	ands	r3, r2
 8001b1a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	091b      	lsrs	r3, r3, #4
 8001b22:	f003 0201 	and.w	r2, r3, #1
 8001b26:	69fb      	ldr	r3, [r7, #28]
 8001b28:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2c:	69ba      	ldr	r2, [r7, #24]
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	69ba      	ldr	r2, [r7, #24]
 8001b36:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	f003 0303 	and.w	r3, r3, #3
 8001b40:	2b03      	cmp	r3, #3
 8001b42:	d017      	beq.n	8001b74 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	68db      	ldr	r3, [r3, #12]
 8001b48:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b4a:	69fb      	ldr	r3, [r7, #28]
 8001b4c:	005b      	lsls	r3, r3, #1
 8001b4e:	2203      	movs	r2, #3
 8001b50:	fa02 f303 	lsl.w	r3, r2, r3
 8001b54:	43db      	mvns	r3, r3
 8001b56:	69ba      	ldr	r2, [r7, #24]
 8001b58:	4013      	ands	r3, r2
 8001b5a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	689a      	ldr	r2, [r3, #8]
 8001b60:	69fb      	ldr	r3, [r7, #28]
 8001b62:	005b      	lsls	r3, r3, #1
 8001b64:	fa02 f303 	lsl.w	r3, r2, r3
 8001b68:	69ba      	ldr	r2, [r7, #24]
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	69ba      	ldr	r2, [r7, #24]
 8001b72:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	f003 0303 	and.w	r3, r3, #3
 8001b7c:	2b02      	cmp	r3, #2
 8001b7e:	d123      	bne.n	8001bc8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b80:	69fb      	ldr	r3, [r7, #28]
 8001b82:	08da      	lsrs	r2, r3, #3
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	3208      	adds	r2, #8
 8001b88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b8e:	69fb      	ldr	r3, [r7, #28]
 8001b90:	f003 0307 	and.w	r3, r3, #7
 8001b94:	009b      	lsls	r3, r3, #2
 8001b96:	220f      	movs	r2, #15
 8001b98:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9c:	43db      	mvns	r3, r3
 8001b9e:	69ba      	ldr	r2, [r7, #24]
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	691a      	ldr	r2, [r3, #16]
 8001ba8:	69fb      	ldr	r3, [r7, #28]
 8001baa:	f003 0307 	and.w	r3, r3, #7
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb4:	69ba      	ldr	r2, [r7, #24]
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001bba:	69fb      	ldr	r3, [r7, #28]
 8001bbc:	08da      	lsrs	r2, r3, #3
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	3208      	adds	r2, #8
 8001bc2:	69b9      	ldr	r1, [r7, #24]
 8001bc4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001bce:	69fb      	ldr	r3, [r7, #28]
 8001bd0:	005b      	lsls	r3, r3, #1
 8001bd2:	2203      	movs	r2, #3
 8001bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd8:	43db      	mvns	r3, r3
 8001bda:	69ba      	ldr	r2, [r7, #24]
 8001bdc:	4013      	ands	r3, r2
 8001bde:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	f003 0203 	and.w	r2, r3, #3
 8001be8:	69fb      	ldr	r3, [r7, #28]
 8001bea:	005b      	lsls	r3, r3, #1
 8001bec:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf0:	69ba      	ldr	r2, [r7, #24]
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	69ba      	ldr	r2, [r7, #24]
 8001bfa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	f000 80c0 	beq.w	8001d8a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	60fb      	str	r3, [r7, #12]
 8001c0e:	4b66      	ldr	r3, [pc, #408]	@ (8001da8 <HAL_GPIO_Init+0x324>)
 8001c10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c12:	4a65      	ldr	r2, [pc, #404]	@ (8001da8 <HAL_GPIO_Init+0x324>)
 8001c14:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c18:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c1a:	4b63      	ldr	r3, [pc, #396]	@ (8001da8 <HAL_GPIO_Init+0x324>)
 8001c1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c1e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c22:	60fb      	str	r3, [r7, #12]
 8001c24:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c26:	4a61      	ldr	r2, [pc, #388]	@ (8001dac <HAL_GPIO_Init+0x328>)
 8001c28:	69fb      	ldr	r3, [r7, #28]
 8001c2a:	089b      	lsrs	r3, r3, #2
 8001c2c:	3302      	adds	r3, #2
 8001c2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c32:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c34:	69fb      	ldr	r3, [r7, #28]
 8001c36:	f003 0303 	and.w	r3, r3, #3
 8001c3a:	009b      	lsls	r3, r3, #2
 8001c3c:	220f      	movs	r2, #15
 8001c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c42:	43db      	mvns	r3, r3
 8001c44:	69ba      	ldr	r2, [r7, #24]
 8001c46:	4013      	ands	r3, r2
 8001c48:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	4a58      	ldr	r2, [pc, #352]	@ (8001db0 <HAL_GPIO_Init+0x32c>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d037      	beq.n	8001cc2 <HAL_GPIO_Init+0x23e>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	4a57      	ldr	r2, [pc, #348]	@ (8001db4 <HAL_GPIO_Init+0x330>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d031      	beq.n	8001cbe <HAL_GPIO_Init+0x23a>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	4a56      	ldr	r2, [pc, #344]	@ (8001db8 <HAL_GPIO_Init+0x334>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d02b      	beq.n	8001cba <HAL_GPIO_Init+0x236>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	4a55      	ldr	r2, [pc, #340]	@ (8001dbc <HAL_GPIO_Init+0x338>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d025      	beq.n	8001cb6 <HAL_GPIO_Init+0x232>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	4a54      	ldr	r2, [pc, #336]	@ (8001dc0 <HAL_GPIO_Init+0x33c>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d01f      	beq.n	8001cb2 <HAL_GPIO_Init+0x22e>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	4a53      	ldr	r2, [pc, #332]	@ (8001dc4 <HAL_GPIO_Init+0x340>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d019      	beq.n	8001cae <HAL_GPIO_Init+0x22a>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	4a52      	ldr	r2, [pc, #328]	@ (8001dc8 <HAL_GPIO_Init+0x344>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d013      	beq.n	8001caa <HAL_GPIO_Init+0x226>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	4a51      	ldr	r2, [pc, #324]	@ (8001dcc <HAL_GPIO_Init+0x348>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d00d      	beq.n	8001ca6 <HAL_GPIO_Init+0x222>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	4a50      	ldr	r2, [pc, #320]	@ (8001dd0 <HAL_GPIO_Init+0x34c>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d007      	beq.n	8001ca2 <HAL_GPIO_Init+0x21e>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	4a4f      	ldr	r2, [pc, #316]	@ (8001dd4 <HAL_GPIO_Init+0x350>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d101      	bne.n	8001c9e <HAL_GPIO_Init+0x21a>
 8001c9a:	2309      	movs	r3, #9
 8001c9c:	e012      	b.n	8001cc4 <HAL_GPIO_Init+0x240>
 8001c9e:	230a      	movs	r3, #10
 8001ca0:	e010      	b.n	8001cc4 <HAL_GPIO_Init+0x240>
 8001ca2:	2308      	movs	r3, #8
 8001ca4:	e00e      	b.n	8001cc4 <HAL_GPIO_Init+0x240>
 8001ca6:	2307      	movs	r3, #7
 8001ca8:	e00c      	b.n	8001cc4 <HAL_GPIO_Init+0x240>
 8001caa:	2306      	movs	r3, #6
 8001cac:	e00a      	b.n	8001cc4 <HAL_GPIO_Init+0x240>
 8001cae:	2305      	movs	r3, #5
 8001cb0:	e008      	b.n	8001cc4 <HAL_GPIO_Init+0x240>
 8001cb2:	2304      	movs	r3, #4
 8001cb4:	e006      	b.n	8001cc4 <HAL_GPIO_Init+0x240>
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	e004      	b.n	8001cc4 <HAL_GPIO_Init+0x240>
 8001cba:	2302      	movs	r3, #2
 8001cbc:	e002      	b.n	8001cc4 <HAL_GPIO_Init+0x240>
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e000      	b.n	8001cc4 <HAL_GPIO_Init+0x240>
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	69fa      	ldr	r2, [r7, #28]
 8001cc6:	f002 0203 	and.w	r2, r2, #3
 8001cca:	0092      	lsls	r2, r2, #2
 8001ccc:	4093      	lsls	r3, r2
 8001cce:	69ba      	ldr	r2, [r7, #24]
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001cd4:	4935      	ldr	r1, [pc, #212]	@ (8001dac <HAL_GPIO_Init+0x328>)
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	089b      	lsrs	r3, r3, #2
 8001cda:	3302      	adds	r3, #2
 8001cdc:	69ba      	ldr	r2, [r7, #24]
 8001cde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ce2:	4b3d      	ldr	r3, [pc, #244]	@ (8001dd8 <HAL_GPIO_Init+0x354>)
 8001ce4:	689b      	ldr	r3, [r3, #8]
 8001ce6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ce8:	693b      	ldr	r3, [r7, #16]
 8001cea:	43db      	mvns	r3, r3
 8001cec:	69ba      	ldr	r2, [r7, #24]
 8001cee:	4013      	ands	r3, r2
 8001cf0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d003      	beq.n	8001d06 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001cfe:	69ba      	ldr	r2, [r7, #24]
 8001d00:	693b      	ldr	r3, [r7, #16]
 8001d02:	4313      	orrs	r3, r2
 8001d04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d06:	4a34      	ldr	r2, [pc, #208]	@ (8001dd8 <HAL_GPIO_Init+0x354>)
 8001d08:	69bb      	ldr	r3, [r7, #24]
 8001d0a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d0c:	4b32      	ldr	r3, [pc, #200]	@ (8001dd8 <HAL_GPIO_Init+0x354>)
 8001d0e:	68db      	ldr	r3, [r3, #12]
 8001d10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	43db      	mvns	r3, r3
 8001d16:	69ba      	ldr	r2, [r7, #24]
 8001d18:	4013      	ands	r3, r2
 8001d1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d003      	beq.n	8001d30 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001d28:	69ba      	ldr	r2, [r7, #24]
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d30:	4a29      	ldr	r2, [pc, #164]	@ (8001dd8 <HAL_GPIO_Init+0x354>)
 8001d32:	69bb      	ldr	r3, [r7, #24]
 8001d34:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d36:	4b28      	ldr	r3, [pc, #160]	@ (8001dd8 <HAL_GPIO_Init+0x354>)
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	43db      	mvns	r3, r3
 8001d40:	69ba      	ldr	r2, [r7, #24]
 8001d42:	4013      	ands	r3, r2
 8001d44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d003      	beq.n	8001d5a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001d52:	69ba      	ldr	r2, [r7, #24]
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	4313      	orrs	r3, r2
 8001d58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d5a:	4a1f      	ldr	r2, [pc, #124]	@ (8001dd8 <HAL_GPIO_Init+0x354>)
 8001d5c:	69bb      	ldr	r3, [r7, #24]
 8001d5e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d60:	4b1d      	ldr	r3, [pc, #116]	@ (8001dd8 <HAL_GPIO_Init+0x354>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	43db      	mvns	r3, r3
 8001d6a:	69ba      	ldr	r2, [r7, #24]
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d003      	beq.n	8001d84 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001d7c:	69ba      	ldr	r2, [r7, #24]
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	4313      	orrs	r3, r2
 8001d82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d84:	4a14      	ldr	r2, [pc, #80]	@ (8001dd8 <HAL_GPIO_Init+0x354>)
 8001d86:	69bb      	ldr	r3, [r7, #24]
 8001d88:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d8a:	69fb      	ldr	r3, [r7, #28]
 8001d8c:	3301      	adds	r3, #1
 8001d8e:	61fb      	str	r3, [r7, #28]
 8001d90:	69fb      	ldr	r3, [r7, #28]
 8001d92:	2b0f      	cmp	r3, #15
 8001d94:	f67f ae84 	bls.w	8001aa0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d98:	bf00      	nop
 8001d9a:	bf00      	nop
 8001d9c:	3724      	adds	r7, #36	@ 0x24
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr
 8001da6:	bf00      	nop
 8001da8:	40023800 	.word	0x40023800
 8001dac:	40013800 	.word	0x40013800
 8001db0:	40020000 	.word	0x40020000
 8001db4:	40020400 	.word	0x40020400
 8001db8:	40020800 	.word	0x40020800
 8001dbc:	40020c00 	.word	0x40020c00
 8001dc0:	40021000 	.word	0x40021000
 8001dc4:	40021400 	.word	0x40021400
 8001dc8:	40021800 	.word	0x40021800
 8001dcc:	40021c00 	.word	0x40021c00
 8001dd0:	40022000 	.word	0x40022000
 8001dd4:	40022400 	.word	0x40022400
 8001dd8:	40013c00 	.word	0x40013c00

08001ddc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b083      	sub	sp, #12
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
 8001de4:	460b      	mov	r3, r1
 8001de6:	807b      	strh	r3, [r7, #2]
 8001de8:	4613      	mov	r3, r2
 8001dea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001dec:	787b      	ldrb	r3, [r7, #1]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d003      	beq.n	8001dfa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001df2:	887a      	ldrh	r2, [r7, #2]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001df8:	e003      	b.n	8001e02 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001dfa:	887b      	ldrh	r3, [r7, #2]
 8001dfc:	041a      	lsls	r2, r3, #16
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	619a      	str	r2, [r3, #24]
}
 8001e02:	bf00      	nop
 8001e04:	370c      	adds	r7, #12
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr

08001e0e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001e0e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e10:	b08f      	sub	sp, #60	@ 0x3c
 8001e12:	af0a      	add	r7, sp, #40	@ 0x28
 8001e14:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d101      	bne.n	8001e20 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	e10f      	b.n	8002040 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	f893 34bd 	ldrb.w	r3, [r3, #1213]	@ 0x4bd
 8001e2c:	b2db      	uxtb	r3, r3
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d106      	bne.n	8001e40 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2200      	movs	r2, #0
 8001e36:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001e3a:	6878      	ldr	r0, [r7, #4]
 8001e3c:	f7fe ff88 	bl	8000d50 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2203      	movs	r2, #3
 8001e44:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d102      	bne.n	8001e5a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2200      	movs	r2, #0
 8001e58:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f001 fc8d 	bl	800377e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	603b      	str	r3, [r7, #0]
 8001e6a:	687e      	ldr	r6, [r7, #4]
 8001e6c:	466d      	mov	r5, sp
 8001e6e:	f106 0410 	add.w	r4, r6, #16
 8001e72:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e74:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e76:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e78:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e7a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001e7e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001e82:	1d33      	adds	r3, r6, #4
 8001e84:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e86:	6838      	ldr	r0, [r7, #0]
 8001e88:	f001 fc18 	bl	80036bc <USB_CoreInit>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d005      	beq.n	8001e9e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2202      	movs	r2, #2
 8001e96:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e0d0      	b.n	8002040 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	2100      	movs	r1, #0
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f001 fc7b 	bl	80037a0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001eaa:	2300      	movs	r3, #0
 8001eac:	73fb      	strb	r3, [r7, #15]
 8001eae:	e04a      	b.n	8001f46 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001eb0:	7bfa      	ldrb	r2, [r7, #15]
 8001eb2:	6879      	ldr	r1, [r7, #4]
 8001eb4:	4613      	mov	r3, r2
 8001eb6:	00db      	lsls	r3, r3, #3
 8001eb8:	4413      	add	r3, r2
 8001eba:	009b      	lsls	r3, r3, #2
 8001ebc:	440b      	add	r3, r1
 8001ebe:	333d      	adds	r3, #61	@ 0x3d
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001ec4:	7bfa      	ldrb	r2, [r7, #15]
 8001ec6:	6879      	ldr	r1, [r7, #4]
 8001ec8:	4613      	mov	r3, r2
 8001eca:	00db      	lsls	r3, r3, #3
 8001ecc:	4413      	add	r3, r2
 8001ece:	009b      	lsls	r3, r3, #2
 8001ed0:	440b      	add	r3, r1
 8001ed2:	333c      	adds	r3, #60	@ 0x3c
 8001ed4:	7bfa      	ldrb	r2, [r7, #15]
 8001ed6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001ed8:	7bfa      	ldrb	r2, [r7, #15]
 8001eda:	7bfb      	ldrb	r3, [r7, #15]
 8001edc:	b298      	uxth	r0, r3
 8001ede:	6879      	ldr	r1, [r7, #4]
 8001ee0:	4613      	mov	r3, r2
 8001ee2:	00db      	lsls	r3, r3, #3
 8001ee4:	4413      	add	r3, r2
 8001ee6:	009b      	lsls	r3, r3, #2
 8001ee8:	440b      	add	r3, r1
 8001eea:	3344      	adds	r3, #68	@ 0x44
 8001eec:	4602      	mov	r2, r0
 8001eee:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001ef0:	7bfa      	ldrb	r2, [r7, #15]
 8001ef2:	6879      	ldr	r1, [r7, #4]
 8001ef4:	4613      	mov	r3, r2
 8001ef6:	00db      	lsls	r3, r3, #3
 8001ef8:	4413      	add	r3, r2
 8001efa:	009b      	lsls	r3, r3, #2
 8001efc:	440b      	add	r3, r1
 8001efe:	3340      	adds	r3, #64	@ 0x40
 8001f00:	2200      	movs	r2, #0
 8001f02:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001f04:	7bfa      	ldrb	r2, [r7, #15]
 8001f06:	6879      	ldr	r1, [r7, #4]
 8001f08:	4613      	mov	r3, r2
 8001f0a:	00db      	lsls	r3, r3, #3
 8001f0c:	4413      	add	r3, r2
 8001f0e:	009b      	lsls	r3, r3, #2
 8001f10:	440b      	add	r3, r1
 8001f12:	3348      	adds	r3, #72	@ 0x48
 8001f14:	2200      	movs	r2, #0
 8001f16:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001f18:	7bfa      	ldrb	r2, [r7, #15]
 8001f1a:	6879      	ldr	r1, [r7, #4]
 8001f1c:	4613      	mov	r3, r2
 8001f1e:	00db      	lsls	r3, r3, #3
 8001f20:	4413      	add	r3, r2
 8001f22:	009b      	lsls	r3, r3, #2
 8001f24:	440b      	add	r3, r1
 8001f26:	334c      	adds	r3, #76	@ 0x4c
 8001f28:	2200      	movs	r2, #0
 8001f2a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001f2c:	7bfa      	ldrb	r2, [r7, #15]
 8001f2e:	6879      	ldr	r1, [r7, #4]
 8001f30:	4613      	mov	r3, r2
 8001f32:	00db      	lsls	r3, r3, #3
 8001f34:	4413      	add	r3, r2
 8001f36:	009b      	lsls	r3, r3, #2
 8001f38:	440b      	add	r3, r1
 8001f3a:	3354      	adds	r3, #84	@ 0x54
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f40:	7bfb      	ldrb	r3, [r7, #15]
 8001f42:	3301      	adds	r3, #1
 8001f44:	73fb      	strb	r3, [r7, #15]
 8001f46:	7bfa      	ldrb	r2, [r7, #15]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	429a      	cmp	r2, r3
 8001f4e:	d3af      	bcc.n	8001eb0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f50:	2300      	movs	r3, #0
 8001f52:	73fb      	strb	r3, [r7, #15]
 8001f54:	e044      	b.n	8001fe0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001f56:	7bfa      	ldrb	r2, [r7, #15]
 8001f58:	6879      	ldr	r1, [r7, #4]
 8001f5a:	4613      	mov	r3, r2
 8001f5c:	00db      	lsls	r3, r3, #3
 8001f5e:	4413      	add	r3, r2
 8001f60:	009b      	lsls	r3, r3, #2
 8001f62:	440b      	add	r3, r1
 8001f64:	f203 237d 	addw	r3, r3, #637	@ 0x27d
 8001f68:	2200      	movs	r2, #0
 8001f6a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001f6c:	7bfa      	ldrb	r2, [r7, #15]
 8001f6e:	6879      	ldr	r1, [r7, #4]
 8001f70:	4613      	mov	r3, r2
 8001f72:	00db      	lsls	r3, r3, #3
 8001f74:	4413      	add	r3, r2
 8001f76:	009b      	lsls	r3, r3, #2
 8001f78:	440b      	add	r3, r1
 8001f7a:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 8001f7e:	7bfa      	ldrb	r2, [r7, #15]
 8001f80:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001f82:	7bfa      	ldrb	r2, [r7, #15]
 8001f84:	6879      	ldr	r1, [r7, #4]
 8001f86:	4613      	mov	r3, r2
 8001f88:	00db      	lsls	r3, r3, #3
 8001f8a:	4413      	add	r3, r2
 8001f8c:	009b      	lsls	r3, r3, #2
 8001f8e:	440b      	add	r3, r1
 8001f90:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8001f94:	2200      	movs	r2, #0
 8001f96:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001f98:	7bfa      	ldrb	r2, [r7, #15]
 8001f9a:	6879      	ldr	r1, [r7, #4]
 8001f9c:	4613      	mov	r3, r2
 8001f9e:	00db      	lsls	r3, r3, #3
 8001fa0:	4413      	add	r3, r2
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	440b      	add	r3, r1
 8001fa6:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 8001faa:	2200      	movs	r2, #0
 8001fac:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001fae:	7bfa      	ldrb	r2, [r7, #15]
 8001fb0:	6879      	ldr	r1, [r7, #4]
 8001fb2:	4613      	mov	r3, r2
 8001fb4:	00db      	lsls	r3, r3, #3
 8001fb6:	4413      	add	r3, r2
 8001fb8:	009b      	lsls	r3, r3, #2
 8001fba:	440b      	add	r3, r1
 8001fbc:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001fc4:	7bfa      	ldrb	r2, [r7, #15]
 8001fc6:	6879      	ldr	r1, [r7, #4]
 8001fc8:	4613      	mov	r3, r2
 8001fca:	00db      	lsls	r3, r3, #3
 8001fcc:	4413      	add	r3, r2
 8001fce:	009b      	lsls	r3, r3, #2
 8001fd0:	440b      	add	r3, r1
 8001fd2:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fda:	7bfb      	ldrb	r3, [r7, #15]
 8001fdc:	3301      	adds	r3, #1
 8001fde:	73fb      	strb	r3, [r7, #15]
 8001fe0:	7bfa      	ldrb	r2, [r7, #15]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	429a      	cmp	r2, r3
 8001fe8:	d3b5      	bcc.n	8001f56 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	603b      	str	r3, [r7, #0]
 8001ff0:	687e      	ldr	r6, [r7, #4]
 8001ff2:	466d      	mov	r5, sp
 8001ff4:	f106 0410 	add.w	r4, r6, #16
 8001ff8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ffa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ffc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ffe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002000:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002004:	e885 0003 	stmia.w	r5, {r0, r1}
 8002008:	1d33      	adds	r3, r6, #4
 800200a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800200c:	6838      	ldr	r0, [r7, #0]
 800200e:	f001 fc13 	bl	8003838 <USB_DevInit>
 8002012:	4603      	mov	r3, r0
 8002014:	2b00      	cmp	r3, #0
 8002016:	d005      	beq.n	8002024 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2202      	movs	r2, #2
 800201c:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8002020:	2301      	movs	r3, #1
 8002022:	e00d      	b.n	8002040 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2200      	movs	r2, #0
 8002028:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2201      	movs	r2, #1
 8002030:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4618      	mov	r0, r3
 800203a:	f001 fdde 	bl	8003bfa <USB_DevDisconnect>

  return HAL_OK;
 800203e:	2300      	movs	r3, #0
}
 8002040:	4618      	mov	r0, r3
 8002042:	3714      	adds	r7, #20
 8002044:	46bd      	mov	sp, r7
 8002046:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002048 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b086      	sub	sp, #24
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d101      	bne.n	800205a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	e267      	b.n	800252a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f003 0301 	and.w	r3, r3, #1
 8002062:	2b00      	cmp	r3, #0
 8002064:	d075      	beq.n	8002152 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002066:	4b88      	ldr	r3, [pc, #544]	@ (8002288 <HAL_RCC_OscConfig+0x240>)
 8002068:	689b      	ldr	r3, [r3, #8]
 800206a:	f003 030c 	and.w	r3, r3, #12
 800206e:	2b04      	cmp	r3, #4
 8002070:	d00c      	beq.n	800208c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002072:	4b85      	ldr	r3, [pc, #532]	@ (8002288 <HAL_RCC_OscConfig+0x240>)
 8002074:	689b      	ldr	r3, [r3, #8]
 8002076:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800207a:	2b08      	cmp	r3, #8
 800207c:	d112      	bne.n	80020a4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800207e:	4b82      	ldr	r3, [pc, #520]	@ (8002288 <HAL_RCC_OscConfig+0x240>)
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002086:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800208a:	d10b      	bne.n	80020a4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800208c:	4b7e      	ldr	r3, [pc, #504]	@ (8002288 <HAL_RCC_OscConfig+0x240>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002094:	2b00      	cmp	r3, #0
 8002096:	d05b      	beq.n	8002150 <HAL_RCC_OscConfig+0x108>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d157      	bne.n	8002150 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80020a0:	2301      	movs	r3, #1
 80020a2:	e242      	b.n	800252a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80020ac:	d106      	bne.n	80020bc <HAL_RCC_OscConfig+0x74>
 80020ae:	4b76      	ldr	r3, [pc, #472]	@ (8002288 <HAL_RCC_OscConfig+0x240>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a75      	ldr	r2, [pc, #468]	@ (8002288 <HAL_RCC_OscConfig+0x240>)
 80020b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020b8:	6013      	str	r3, [r2, #0]
 80020ba:	e01d      	b.n	80020f8 <HAL_RCC_OscConfig+0xb0>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80020c4:	d10c      	bne.n	80020e0 <HAL_RCC_OscConfig+0x98>
 80020c6:	4b70      	ldr	r3, [pc, #448]	@ (8002288 <HAL_RCC_OscConfig+0x240>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a6f      	ldr	r2, [pc, #444]	@ (8002288 <HAL_RCC_OscConfig+0x240>)
 80020cc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80020d0:	6013      	str	r3, [r2, #0]
 80020d2:	4b6d      	ldr	r3, [pc, #436]	@ (8002288 <HAL_RCC_OscConfig+0x240>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4a6c      	ldr	r2, [pc, #432]	@ (8002288 <HAL_RCC_OscConfig+0x240>)
 80020d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020dc:	6013      	str	r3, [r2, #0]
 80020de:	e00b      	b.n	80020f8 <HAL_RCC_OscConfig+0xb0>
 80020e0:	4b69      	ldr	r3, [pc, #420]	@ (8002288 <HAL_RCC_OscConfig+0x240>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a68      	ldr	r2, [pc, #416]	@ (8002288 <HAL_RCC_OscConfig+0x240>)
 80020e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80020ea:	6013      	str	r3, [r2, #0]
 80020ec:	4b66      	ldr	r3, [pc, #408]	@ (8002288 <HAL_RCC_OscConfig+0x240>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a65      	ldr	r2, [pc, #404]	@ (8002288 <HAL_RCC_OscConfig+0x240>)
 80020f2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80020f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d013      	beq.n	8002128 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002100:	f7ff f886 	bl	8001210 <HAL_GetTick>
 8002104:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002106:	e008      	b.n	800211a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002108:	f7ff f882 	bl	8001210 <HAL_GetTick>
 800210c:	4602      	mov	r2, r0
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	1ad3      	subs	r3, r2, r3
 8002112:	2b64      	cmp	r3, #100	@ 0x64
 8002114:	d901      	bls.n	800211a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002116:	2303      	movs	r3, #3
 8002118:	e207      	b.n	800252a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800211a:	4b5b      	ldr	r3, [pc, #364]	@ (8002288 <HAL_RCC_OscConfig+0x240>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002122:	2b00      	cmp	r3, #0
 8002124:	d0f0      	beq.n	8002108 <HAL_RCC_OscConfig+0xc0>
 8002126:	e014      	b.n	8002152 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002128:	f7ff f872 	bl	8001210 <HAL_GetTick>
 800212c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800212e:	e008      	b.n	8002142 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002130:	f7ff f86e 	bl	8001210 <HAL_GetTick>
 8002134:	4602      	mov	r2, r0
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	1ad3      	subs	r3, r2, r3
 800213a:	2b64      	cmp	r3, #100	@ 0x64
 800213c:	d901      	bls.n	8002142 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800213e:	2303      	movs	r3, #3
 8002140:	e1f3      	b.n	800252a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002142:	4b51      	ldr	r3, [pc, #324]	@ (8002288 <HAL_RCC_OscConfig+0x240>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800214a:	2b00      	cmp	r3, #0
 800214c:	d1f0      	bne.n	8002130 <HAL_RCC_OscConfig+0xe8>
 800214e:	e000      	b.n	8002152 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002150:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f003 0302 	and.w	r3, r3, #2
 800215a:	2b00      	cmp	r3, #0
 800215c:	d063      	beq.n	8002226 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800215e:	4b4a      	ldr	r3, [pc, #296]	@ (8002288 <HAL_RCC_OscConfig+0x240>)
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	f003 030c 	and.w	r3, r3, #12
 8002166:	2b00      	cmp	r3, #0
 8002168:	d00b      	beq.n	8002182 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800216a:	4b47      	ldr	r3, [pc, #284]	@ (8002288 <HAL_RCC_OscConfig+0x240>)
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002172:	2b08      	cmp	r3, #8
 8002174:	d11c      	bne.n	80021b0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002176:	4b44      	ldr	r3, [pc, #272]	@ (8002288 <HAL_RCC_OscConfig+0x240>)
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800217e:	2b00      	cmp	r3, #0
 8002180:	d116      	bne.n	80021b0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002182:	4b41      	ldr	r3, [pc, #260]	@ (8002288 <HAL_RCC_OscConfig+0x240>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f003 0302 	and.w	r3, r3, #2
 800218a:	2b00      	cmp	r3, #0
 800218c:	d005      	beq.n	800219a <HAL_RCC_OscConfig+0x152>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	68db      	ldr	r3, [r3, #12]
 8002192:	2b01      	cmp	r3, #1
 8002194:	d001      	beq.n	800219a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002196:	2301      	movs	r3, #1
 8002198:	e1c7      	b.n	800252a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800219a:	4b3b      	ldr	r3, [pc, #236]	@ (8002288 <HAL_RCC_OscConfig+0x240>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	691b      	ldr	r3, [r3, #16]
 80021a6:	00db      	lsls	r3, r3, #3
 80021a8:	4937      	ldr	r1, [pc, #220]	@ (8002288 <HAL_RCC_OscConfig+0x240>)
 80021aa:	4313      	orrs	r3, r2
 80021ac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021ae:	e03a      	b.n	8002226 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	68db      	ldr	r3, [r3, #12]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d020      	beq.n	80021fa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021b8:	4b34      	ldr	r3, [pc, #208]	@ (800228c <HAL_RCC_OscConfig+0x244>)
 80021ba:	2201      	movs	r2, #1
 80021bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021be:	f7ff f827 	bl	8001210 <HAL_GetTick>
 80021c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021c4:	e008      	b.n	80021d8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021c6:	f7ff f823 	bl	8001210 <HAL_GetTick>
 80021ca:	4602      	mov	r2, r0
 80021cc:	693b      	ldr	r3, [r7, #16]
 80021ce:	1ad3      	subs	r3, r2, r3
 80021d0:	2b02      	cmp	r3, #2
 80021d2:	d901      	bls.n	80021d8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80021d4:	2303      	movs	r3, #3
 80021d6:	e1a8      	b.n	800252a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021d8:	4b2b      	ldr	r3, [pc, #172]	@ (8002288 <HAL_RCC_OscConfig+0x240>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f003 0302 	and.w	r3, r3, #2
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d0f0      	beq.n	80021c6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021e4:	4b28      	ldr	r3, [pc, #160]	@ (8002288 <HAL_RCC_OscConfig+0x240>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	691b      	ldr	r3, [r3, #16]
 80021f0:	00db      	lsls	r3, r3, #3
 80021f2:	4925      	ldr	r1, [pc, #148]	@ (8002288 <HAL_RCC_OscConfig+0x240>)
 80021f4:	4313      	orrs	r3, r2
 80021f6:	600b      	str	r3, [r1, #0]
 80021f8:	e015      	b.n	8002226 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021fa:	4b24      	ldr	r3, [pc, #144]	@ (800228c <HAL_RCC_OscConfig+0x244>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002200:	f7ff f806 	bl	8001210 <HAL_GetTick>
 8002204:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002206:	e008      	b.n	800221a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002208:	f7ff f802 	bl	8001210 <HAL_GetTick>
 800220c:	4602      	mov	r2, r0
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	1ad3      	subs	r3, r2, r3
 8002212:	2b02      	cmp	r3, #2
 8002214:	d901      	bls.n	800221a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002216:	2303      	movs	r3, #3
 8002218:	e187      	b.n	800252a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800221a:	4b1b      	ldr	r3, [pc, #108]	@ (8002288 <HAL_RCC_OscConfig+0x240>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 0302 	and.w	r3, r3, #2
 8002222:	2b00      	cmp	r3, #0
 8002224:	d1f0      	bne.n	8002208 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f003 0308 	and.w	r3, r3, #8
 800222e:	2b00      	cmp	r3, #0
 8002230:	d036      	beq.n	80022a0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	695b      	ldr	r3, [r3, #20]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d016      	beq.n	8002268 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800223a:	4b15      	ldr	r3, [pc, #84]	@ (8002290 <HAL_RCC_OscConfig+0x248>)
 800223c:	2201      	movs	r2, #1
 800223e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002240:	f7fe ffe6 	bl	8001210 <HAL_GetTick>
 8002244:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002246:	e008      	b.n	800225a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002248:	f7fe ffe2 	bl	8001210 <HAL_GetTick>
 800224c:	4602      	mov	r2, r0
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	1ad3      	subs	r3, r2, r3
 8002252:	2b02      	cmp	r3, #2
 8002254:	d901      	bls.n	800225a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002256:	2303      	movs	r3, #3
 8002258:	e167      	b.n	800252a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800225a:	4b0b      	ldr	r3, [pc, #44]	@ (8002288 <HAL_RCC_OscConfig+0x240>)
 800225c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800225e:	f003 0302 	and.w	r3, r3, #2
 8002262:	2b00      	cmp	r3, #0
 8002264:	d0f0      	beq.n	8002248 <HAL_RCC_OscConfig+0x200>
 8002266:	e01b      	b.n	80022a0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002268:	4b09      	ldr	r3, [pc, #36]	@ (8002290 <HAL_RCC_OscConfig+0x248>)
 800226a:	2200      	movs	r2, #0
 800226c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800226e:	f7fe ffcf 	bl	8001210 <HAL_GetTick>
 8002272:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002274:	e00e      	b.n	8002294 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002276:	f7fe ffcb 	bl	8001210 <HAL_GetTick>
 800227a:	4602      	mov	r2, r0
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	1ad3      	subs	r3, r2, r3
 8002280:	2b02      	cmp	r3, #2
 8002282:	d907      	bls.n	8002294 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002284:	2303      	movs	r3, #3
 8002286:	e150      	b.n	800252a <HAL_RCC_OscConfig+0x4e2>
 8002288:	40023800 	.word	0x40023800
 800228c:	42470000 	.word	0x42470000
 8002290:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002294:	4b88      	ldr	r3, [pc, #544]	@ (80024b8 <HAL_RCC_OscConfig+0x470>)
 8002296:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002298:	f003 0302 	and.w	r3, r3, #2
 800229c:	2b00      	cmp	r3, #0
 800229e:	d1ea      	bne.n	8002276 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f003 0304 	and.w	r3, r3, #4
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	f000 8097 	beq.w	80023dc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022ae:	2300      	movs	r3, #0
 80022b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022b2:	4b81      	ldr	r3, [pc, #516]	@ (80024b8 <HAL_RCC_OscConfig+0x470>)
 80022b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d10f      	bne.n	80022de <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022be:	2300      	movs	r3, #0
 80022c0:	60bb      	str	r3, [r7, #8]
 80022c2:	4b7d      	ldr	r3, [pc, #500]	@ (80024b8 <HAL_RCC_OscConfig+0x470>)
 80022c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022c6:	4a7c      	ldr	r2, [pc, #496]	@ (80024b8 <HAL_RCC_OscConfig+0x470>)
 80022c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80022cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80022ce:	4b7a      	ldr	r3, [pc, #488]	@ (80024b8 <HAL_RCC_OscConfig+0x470>)
 80022d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022d6:	60bb      	str	r3, [r7, #8]
 80022d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022da:	2301      	movs	r3, #1
 80022dc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022de:	4b77      	ldr	r3, [pc, #476]	@ (80024bc <HAL_RCC_OscConfig+0x474>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d118      	bne.n	800231c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022ea:	4b74      	ldr	r3, [pc, #464]	@ (80024bc <HAL_RCC_OscConfig+0x474>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a73      	ldr	r2, [pc, #460]	@ (80024bc <HAL_RCC_OscConfig+0x474>)
 80022f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022f6:	f7fe ff8b 	bl	8001210 <HAL_GetTick>
 80022fa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022fc:	e008      	b.n	8002310 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022fe:	f7fe ff87 	bl	8001210 <HAL_GetTick>
 8002302:	4602      	mov	r2, r0
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	1ad3      	subs	r3, r2, r3
 8002308:	2b02      	cmp	r3, #2
 800230a:	d901      	bls.n	8002310 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800230c:	2303      	movs	r3, #3
 800230e:	e10c      	b.n	800252a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002310:	4b6a      	ldr	r3, [pc, #424]	@ (80024bc <HAL_RCC_OscConfig+0x474>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002318:	2b00      	cmp	r3, #0
 800231a:	d0f0      	beq.n	80022fe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	2b01      	cmp	r3, #1
 8002322:	d106      	bne.n	8002332 <HAL_RCC_OscConfig+0x2ea>
 8002324:	4b64      	ldr	r3, [pc, #400]	@ (80024b8 <HAL_RCC_OscConfig+0x470>)
 8002326:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002328:	4a63      	ldr	r2, [pc, #396]	@ (80024b8 <HAL_RCC_OscConfig+0x470>)
 800232a:	f043 0301 	orr.w	r3, r3, #1
 800232e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002330:	e01c      	b.n	800236c <HAL_RCC_OscConfig+0x324>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	2b05      	cmp	r3, #5
 8002338:	d10c      	bne.n	8002354 <HAL_RCC_OscConfig+0x30c>
 800233a:	4b5f      	ldr	r3, [pc, #380]	@ (80024b8 <HAL_RCC_OscConfig+0x470>)
 800233c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800233e:	4a5e      	ldr	r2, [pc, #376]	@ (80024b8 <HAL_RCC_OscConfig+0x470>)
 8002340:	f043 0304 	orr.w	r3, r3, #4
 8002344:	6713      	str	r3, [r2, #112]	@ 0x70
 8002346:	4b5c      	ldr	r3, [pc, #368]	@ (80024b8 <HAL_RCC_OscConfig+0x470>)
 8002348:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800234a:	4a5b      	ldr	r2, [pc, #364]	@ (80024b8 <HAL_RCC_OscConfig+0x470>)
 800234c:	f043 0301 	orr.w	r3, r3, #1
 8002350:	6713      	str	r3, [r2, #112]	@ 0x70
 8002352:	e00b      	b.n	800236c <HAL_RCC_OscConfig+0x324>
 8002354:	4b58      	ldr	r3, [pc, #352]	@ (80024b8 <HAL_RCC_OscConfig+0x470>)
 8002356:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002358:	4a57      	ldr	r2, [pc, #348]	@ (80024b8 <HAL_RCC_OscConfig+0x470>)
 800235a:	f023 0301 	bic.w	r3, r3, #1
 800235e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002360:	4b55      	ldr	r3, [pc, #340]	@ (80024b8 <HAL_RCC_OscConfig+0x470>)
 8002362:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002364:	4a54      	ldr	r2, [pc, #336]	@ (80024b8 <HAL_RCC_OscConfig+0x470>)
 8002366:	f023 0304 	bic.w	r3, r3, #4
 800236a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d015      	beq.n	80023a0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002374:	f7fe ff4c 	bl	8001210 <HAL_GetTick>
 8002378:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800237a:	e00a      	b.n	8002392 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800237c:	f7fe ff48 	bl	8001210 <HAL_GetTick>
 8002380:	4602      	mov	r2, r0
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	1ad3      	subs	r3, r2, r3
 8002386:	f241 3288 	movw	r2, #5000	@ 0x1388
 800238a:	4293      	cmp	r3, r2
 800238c:	d901      	bls.n	8002392 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800238e:	2303      	movs	r3, #3
 8002390:	e0cb      	b.n	800252a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002392:	4b49      	ldr	r3, [pc, #292]	@ (80024b8 <HAL_RCC_OscConfig+0x470>)
 8002394:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002396:	f003 0302 	and.w	r3, r3, #2
 800239a:	2b00      	cmp	r3, #0
 800239c:	d0ee      	beq.n	800237c <HAL_RCC_OscConfig+0x334>
 800239e:	e014      	b.n	80023ca <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023a0:	f7fe ff36 	bl	8001210 <HAL_GetTick>
 80023a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023a6:	e00a      	b.n	80023be <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023a8:	f7fe ff32 	bl	8001210 <HAL_GetTick>
 80023ac:	4602      	mov	r2, r0
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	1ad3      	subs	r3, r2, r3
 80023b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d901      	bls.n	80023be <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80023ba:	2303      	movs	r3, #3
 80023bc:	e0b5      	b.n	800252a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023be:	4b3e      	ldr	r3, [pc, #248]	@ (80024b8 <HAL_RCC_OscConfig+0x470>)
 80023c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023c2:	f003 0302 	and.w	r3, r3, #2
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d1ee      	bne.n	80023a8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80023ca:	7dfb      	ldrb	r3, [r7, #23]
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	d105      	bne.n	80023dc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023d0:	4b39      	ldr	r3, [pc, #228]	@ (80024b8 <HAL_RCC_OscConfig+0x470>)
 80023d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023d4:	4a38      	ldr	r2, [pc, #224]	@ (80024b8 <HAL_RCC_OscConfig+0x470>)
 80023d6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80023da:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	699b      	ldr	r3, [r3, #24]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	f000 80a1 	beq.w	8002528 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80023e6:	4b34      	ldr	r3, [pc, #208]	@ (80024b8 <HAL_RCC_OscConfig+0x470>)
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	f003 030c 	and.w	r3, r3, #12
 80023ee:	2b08      	cmp	r3, #8
 80023f0:	d05c      	beq.n	80024ac <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	699b      	ldr	r3, [r3, #24]
 80023f6:	2b02      	cmp	r3, #2
 80023f8:	d141      	bne.n	800247e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023fa:	4b31      	ldr	r3, [pc, #196]	@ (80024c0 <HAL_RCC_OscConfig+0x478>)
 80023fc:	2200      	movs	r2, #0
 80023fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002400:	f7fe ff06 	bl	8001210 <HAL_GetTick>
 8002404:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002406:	e008      	b.n	800241a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002408:	f7fe ff02 	bl	8001210 <HAL_GetTick>
 800240c:	4602      	mov	r2, r0
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	1ad3      	subs	r3, r2, r3
 8002412:	2b02      	cmp	r3, #2
 8002414:	d901      	bls.n	800241a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002416:	2303      	movs	r3, #3
 8002418:	e087      	b.n	800252a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800241a:	4b27      	ldr	r3, [pc, #156]	@ (80024b8 <HAL_RCC_OscConfig+0x470>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002422:	2b00      	cmp	r3, #0
 8002424:	d1f0      	bne.n	8002408 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	69da      	ldr	r2, [r3, #28]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6a1b      	ldr	r3, [r3, #32]
 800242e:	431a      	orrs	r2, r3
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002434:	019b      	lsls	r3, r3, #6
 8002436:	431a      	orrs	r2, r3
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800243c:	085b      	lsrs	r3, r3, #1
 800243e:	3b01      	subs	r3, #1
 8002440:	041b      	lsls	r3, r3, #16
 8002442:	431a      	orrs	r2, r3
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002448:	061b      	lsls	r3, r3, #24
 800244a:	491b      	ldr	r1, [pc, #108]	@ (80024b8 <HAL_RCC_OscConfig+0x470>)
 800244c:	4313      	orrs	r3, r2
 800244e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002450:	4b1b      	ldr	r3, [pc, #108]	@ (80024c0 <HAL_RCC_OscConfig+0x478>)
 8002452:	2201      	movs	r2, #1
 8002454:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002456:	f7fe fedb 	bl	8001210 <HAL_GetTick>
 800245a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800245c:	e008      	b.n	8002470 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800245e:	f7fe fed7 	bl	8001210 <HAL_GetTick>
 8002462:	4602      	mov	r2, r0
 8002464:	693b      	ldr	r3, [r7, #16]
 8002466:	1ad3      	subs	r3, r2, r3
 8002468:	2b02      	cmp	r3, #2
 800246a:	d901      	bls.n	8002470 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800246c:	2303      	movs	r3, #3
 800246e:	e05c      	b.n	800252a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002470:	4b11      	ldr	r3, [pc, #68]	@ (80024b8 <HAL_RCC_OscConfig+0x470>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002478:	2b00      	cmp	r3, #0
 800247a:	d0f0      	beq.n	800245e <HAL_RCC_OscConfig+0x416>
 800247c:	e054      	b.n	8002528 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800247e:	4b10      	ldr	r3, [pc, #64]	@ (80024c0 <HAL_RCC_OscConfig+0x478>)
 8002480:	2200      	movs	r2, #0
 8002482:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002484:	f7fe fec4 	bl	8001210 <HAL_GetTick>
 8002488:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800248a:	e008      	b.n	800249e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800248c:	f7fe fec0 	bl	8001210 <HAL_GetTick>
 8002490:	4602      	mov	r2, r0
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	1ad3      	subs	r3, r2, r3
 8002496:	2b02      	cmp	r3, #2
 8002498:	d901      	bls.n	800249e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800249a:	2303      	movs	r3, #3
 800249c:	e045      	b.n	800252a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800249e:	4b06      	ldr	r3, [pc, #24]	@ (80024b8 <HAL_RCC_OscConfig+0x470>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d1f0      	bne.n	800248c <HAL_RCC_OscConfig+0x444>
 80024aa:	e03d      	b.n	8002528 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	699b      	ldr	r3, [r3, #24]
 80024b0:	2b01      	cmp	r3, #1
 80024b2:	d107      	bne.n	80024c4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80024b4:	2301      	movs	r3, #1
 80024b6:	e038      	b.n	800252a <HAL_RCC_OscConfig+0x4e2>
 80024b8:	40023800 	.word	0x40023800
 80024bc:	40007000 	.word	0x40007000
 80024c0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80024c4:	4b1b      	ldr	r3, [pc, #108]	@ (8002534 <HAL_RCC_OscConfig+0x4ec>)
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	699b      	ldr	r3, [r3, #24]
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	d028      	beq.n	8002524 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024dc:	429a      	cmp	r2, r3
 80024de:	d121      	bne.n	8002524 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024ea:	429a      	cmp	r2, r3
 80024ec:	d11a      	bne.n	8002524 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80024ee:	68fa      	ldr	r2, [r7, #12]
 80024f0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80024f4:	4013      	ands	r3, r2
 80024f6:	687a      	ldr	r2, [r7, #4]
 80024f8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80024fa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d111      	bne.n	8002524 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800250a:	085b      	lsrs	r3, r3, #1
 800250c:	3b01      	subs	r3, #1
 800250e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002510:	429a      	cmp	r2, r3
 8002512:	d107      	bne.n	8002524 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800251e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002520:	429a      	cmp	r2, r3
 8002522:	d001      	beq.n	8002528 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002524:	2301      	movs	r3, #1
 8002526:	e000      	b.n	800252a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002528:	2300      	movs	r3, #0
}
 800252a:	4618      	mov	r0, r3
 800252c:	3718      	adds	r7, #24
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	40023800 	.word	0x40023800

08002538 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b084      	sub	sp, #16
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
 8002540:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d101      	bne.n	800254c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002548:	2301      	movs	r3, #1
 800254a:	e0cc      	b.n	80026e6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800254c:	4b68      	ldr	r3, [pc, #416]	@ (80026f0 <HAL_RCC_ClockConfig+0x1b8>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f003 030f 	and.w	r3, r3, #15
 8002554:	683a      	ldr	r2, [r7, #0]
 8002556:	429a      	cmp	r2, r3
 8002558:	d90c      	bls.n	8002574 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800255a:	4b65      	ldr	r3, [pc, #404]	@ (80026f0 <HAL_RCC_ClockConfig+0x1b8>)
 800255c:	683a      	ldr	r2, [r7, #0]
 800255e:	b2d2      	uxtb	r2, r2
 8002560:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002562:	4b63      	ldr	r3, [pc, #396]	@ (80026f0 <HAL_RCC_ClockConfig+0x1b8>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 030f 	and.w	r3, r3, #15
 800256a:	683a      	ldr	r2, [r7, #0]
 800256c:	429a      	cmp	r2, r3
 800256e:	d001      	beq.n	8002574 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002570:	2301      	movs	r3, #1
 8002572:	e0b8      	b.n	80026e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 0302 	and.w	r3, r3, #2
 800257c:	2b00      	cmp	r3, #0
 800257e:	d020      	beq.n	80025c2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f003 0304 	and.w	r3, r3, #4
 8002588:	2b00      	cmp	r3, #0
 800258a:	d005      	beq.n	8002598 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800258c:	4b59      	ldr	r3, [pc, #356]	@ (80026f4 <HAL_RCC_ClockConfig+0x1bc>)
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	4a58      	ldr	r2, [pc, #352]	@ (80026f4 <HAL_RCC_ClockConfig+0x1bc>)
 8002592:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002596:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f003 0308 	and.w	r3, r3, #8
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d005      	beq.n	80025b0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025a4:	4b53      	ldr	r3, [pc, #332]	@ (80026f4 <HAL_RCC_ClockConfig+0x1bc>)
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	4a52      	ldr	r2, [pc, #328]	@ (80026f4 <HAL_RCC_ClockConfig+0x1bc>)
 80025aa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80025ae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025b0:	4b50      	ldr	r3, [pc, #320]	@ (80026f4 <HAL_RCC_ClockConfig+0x1bc>)
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	494d      	ldr	r1, [pc, #308]	@ (80026f4 <HAL_RCC_ClockConfig+0x1bc>)
 80025be:	4313      	orrs	r3, r2
 80025c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f003 0301 	and.w	r3, r3, #1
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d044      	beq.n	8002658 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d107      	bne.n	80025e6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025d6:	4b47      	ldr	r3, [pc, #284]	@ (80026f4 <HAL_RCC_ClockConfig+0x1bc>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d119      	bne.n	8002616 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	e07f      	b.n	80026e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	2b02      	cmp	r3, #2
 80025ec:	d003      	beq.n	80025f6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025f2:	2b03      	cmp	r3, #3
 80025f4:	d107      	bne.n	8002606 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025f6:	4b3f      	ldr	r3, [pc, #252]	@ (80026f4 <HAL_RCC_ClockConfig+0x1bc>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d109      	bne.n	8002616 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	e06f      	b.n	80026e6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002606:	4b3b      	ldr	r3, [pc, #236]	@ (80026f4 <HAL_RCC_ClockConfig+0x1bc>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 0302 	and.w	r3, r3, #2
 800260e:	2b00      	cmp	r3, #0
 8002610:	d101      	bne.n	8002616 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002612:	2301      	movs	r3, #1
 8002614:	e067      	b.n	80026e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002616:	4b37      	ldr	r3, [pc, #220]	@ (80026f4 <HAL_RCC_ClockConfig+0x1bc>)
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	f023 0203 	bic.w	r2, r3, #3
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	4934      	ldr	r1, [pc, #208]	@ (80026f4 <HAL_RCC_ClockConfig+0x1bc>)
 8002624:	4313      	orrs	r3, r2
 8002626:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002628:	f7fe fdf2 	bl	8001210 <HAL_GetTick>
 800262c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800262e:	e00a      	b.n	8002646 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002630:	f7fe fdee 	bl	8001210 <HAL_GetTick>
 8002634:	4602      	mov	r2, r0
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	1ad3      	subs	r3, r2, r3
 800263a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800263e:	4293      	cmp	r3, r2
 8002640:	d901      	bls.n	8002646 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002642:	2303      	movs	r3, #3
 8002644:	e04f      	b.n	80026e6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002646:	4b2b      	ldr	r3, [pc, #172]	@ (80026f4 <HAL_RCC_ClockConfig+0x1bc>)
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	f003 020c 	and.w	r2, r3, #12
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	009b      	lsls	r3, r3, #2
 8002654:	429a      	cmp	r2, r3
 8002656:	d1eb      	bne.n	8002630 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002658:	4b25      	ldr	r3, [pc, #148]	@ (80026f0 <HAL_RCC_ClockConfig+0x1b8>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 030f 	and.w	r3, r3, #15
 8002660:	683a      	ldr	r2, [r7, #0]
 8002662:	429a      	cmp	r2, r3
 8002664:	d20c      	bcs.n	8002680 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002666:	4b22      	ldr	r3, [pc, #136]	@ (80026f0 <HAL_RCC_ClockConfig+0x1b8>)
 8002668:	683a      	ldr	r2, [r7, #0]
 800266a:	b2d2      	uxtb	r2, r2
 800266c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800266e:	4b20      	ldr	r3, [pc, #128]	@ (80026f0 <HAL_RCC_ClockConfig+0x1b8>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 030f 	and.w	r3, r3, #15
 8002676:	683a      	ldr	r2, [r7, #0]
 8002678:	429a      	cmp	r2, r3
 800267a:	d001      	beq.n	8002680 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800267c:	2301      	movs	r3, #1
 800267e:	e032      	b.n	80026e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f003 0304 	and.w	r3, r3, #4
 8002688:	2b00      	cmp	r3, #0
 800268a:	d008      	beq.n	800269e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800268c:	4b19      	ldr	r3, [pc, #100]	@ (80026f4 <HAL_RCC_ClockConfig+0x1bc>)
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	68db      	ldr	r3, [r3, #12]
 8002698:	4916      	ldr	r1, [pc, #88]	@ (80026f4 <HAL_RCC_ClockConfig+0x1bc>)
 800269a:	4313      	orrs	r3, r2
 800269c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 0308 	and.w	r3, r3, #8
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d009      	beq.n	80026be <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80026aa:	4b12      	ldr	r3, [pc, #72]	@ (80026f4 <HAL_RCC_ClockConfig+0x1bc>)
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	691b      	ldr	r3, [r3, #16]
 80026b6:	00db      	lsls	r3, r3, #3
 80026b8:	490e      	ldr	r1, [pc, #56]	@ (80026f4 <HAL_RCC_ClockConfig+0x1bc>)
 80026ba:	4313      	orrs	r3, r2
 80026bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80026be:	f000 f821 	bl	8002704 <HAL_RCC_GetSysClockFreq>
 80026c2:	4602      	mov	r2, r0
 80026c4:	4b0b      	ldr	r3, [pc, #44]	@ (80026f4 <HAL_RCC_ClockConfig+0x1bc>)
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	091b      	lsrs	r3, r3, #4
 80026ca:	f003 030f 	and.w	r3, r3, #15
 80026ce:	490a      	ldr	r1, [pc, #40]	@ (80026f8 <HAL_RCC_ClockConfig+0x1c0>)
 80026d0:	5ccb      	ldrb	r3, [r1, r3]
 80026d2:	fa22 f303 	lsr.w	r3, r2, r3
 80026d6:	4a09      	ldr	r2, [pc, #36]	@ (80026fc <HAL_RCC_ClockConfig+0x1c4>)
 80026d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80026da:	4b09      	ldr	r3, [pc, #36]	@ (8002700 <HAL_RCC_ClockConfig+0x1c8>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4618      	mov	r0, r3
 80026e0:	f7fe fb90 	bl	8000e04 <HAL_InitTick>

  return HAL_OK;
 80026e4:	2300      	movs	r3, #0
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	3710      	adds	r7, #16
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop
 80026f0:	40023c00 	.word	0x40023c00
 80026f4:	40023800 	.word	0x40023800
 80026f8:	0800702c 	.word	0x0800702c
 80026fc:	20000000 	.word	0x20000000
 8002700:	20000004 	.word	0x20000004

08002704 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002704:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002708:	b094      	sub	sp, #80	@ 0x50
 800270a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800270c:	2300      	movs	r3, #0
 800270e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002710:	2300      	movs	r3, #0
 8002712:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002714:	2300      	movs	r3, #0
 8002716:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002718:	2300      	movs	r3, #0
 800271a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800271c:	4b79      	ldr	r3, [pc, #484]	@ (8002904 <HAL_RCC_GetSysClockFreq+0x200>)
 800271e:	689b      	ldr	r3, [r3, #8]
 8002720:	f003 030c 	and.w	r3, r3, #12
 8002724:	2b08      	cmp	r3, #8
 8002726:	d00d      	beq.n	8002744 <HAL_RCC_GetSysClockFreq+0x40>
 8002728:	2b08      	cmp	r3, #8
 800272a:	f200 80e1 	bhi.w	80028f0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800272e:	2b00      	cmp	r3, #0
 8002730:	d002      	beq.n	8002738 <HAL_RCC_GetSysClockFreq+0x34>
 8002732:	2b04      	cmp	r3, #4
 8002734:	d003      	beq.n	800273e <HAL_RCC_GetSysClockFreq+0x3a>
 8002736:	e0db      	b.n	80028f0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002738:	4b73      	ldr	r3, [pc, #460]	@ (8002908 <HAL_RCC_GetSysClockFreq+0x204>)
 800273a:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 800273c:	e0db      	b.n	80028f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800273e:	4b73      	ldr	r3, [pc, #460]	@ (800290c <HAL_RCC_GetSysClockFreq+0x208>)
 8002740:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002742:	e0d8      	b.n	80028f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002744:	4b6f      	ldr	r3, [pc, #444]	@ (8002904 <HAL_RCC_GetSysClockFreq+0x200>)
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800274c:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800274e:	4b6d      	ldr	r3, [pc, #436]	@ (8002904 <HAL_RCC_GetSysClockFreq+0x200>)
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002756:	2b00      	cmp	r3, #0
 8002758:	d063      	beq.n	8002822 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800275a:	4b6a      	ldr	r3, [pc, #424]	@ (8002904 <HAL_RCC_GetSysClockFreq+0x200>)
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	099b      	lsrs	r3, r3, #6
 8002760:	2200      	movs	r2, #0
 8002762:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002764:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002766:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002768:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800276c:	633b      	str	r3, [r7, #48]	@ 0x30
 800276e:	2300      	movs	r3, #0
 8002770:	637b      	str	r3, [r7, #52]	@ 0x34
 8002772:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002776:	4622      	mov	r2, r4
 8002778:	462b      	mov	r3, r5
 800277a:	f04f 0000 	mov.w	r0, #0
 800277e:	f04f 0100 	mov.w	r1, #0
 8002782:	0159      	lsls	r1, r3, #5
 8002784:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002788:	0150      	lsls	r0, r2, #5
 800278a:	4602      	mov	r2, r0
 800278c:	460b      	mov	r3, r1
 800278e:	4621      	mov	r1, r4
 8002790:	1a51      	subs	r1, r2, r1
 8002792:	6139      	str	r1, [r7, #16]
 8002794:	4629      	mov	r1, r5
 8002796:	eb63 0301 	sbc.w	r3, r3, r1
 800279a:	617b      	str	r3, [r7, #20]
 800279c:	f04f 0200 	mov.w	r2, #0
 80027a0:	f04f 0300 	mov.w	r3, #0
 80027a4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80027a8:	4659      	mov	r1, fp
 80027aa:	018b      	lsls	r3, r1, #6
 80027ac:	4651      	mov	r1, sl
 80027ae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80027b2:	4651      	mov	r1, sl
 80027b4:	018a      	lsls	r2, r1, #6
 80027b6:	4651      	mov	r1, sl
 80027b8:	ebb2 0801 	subs.w	r8, r2, r1
 80027bc:	4659      	mov	r1, fp
 80027be:	eb63 0901 	sbc.w	r9, r3, r1
 80027c2:	f04f 0200 	mov.w	r2, #0
 80027c6:	f04f 0300 	mov.w	r3, #0
 80027ca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80027ce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80027d2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80027d6:	4690      	mov	r8, r2
 80027d8:	4699      	mov	r9, r3
 80027da:	4623      	mov	r3, r4
 80027dc:	eb18 0303 	adds.w	r3, r8, r3
 80027e0:	60bb      	str	r3, [r7, #8]
 80027e2:	462b      	mov	r3, r5
 80027e4:	eb49 0303 	adc.w	r3, r9, r3
 80027e8:	60fb      	str	r3, [r7, #12]
 80027ea:	f04f 0200 	mov.w	r2, #0
 80027ee:	f04f 0300 	mov.w	r3, #0
 80027f2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80027f6:	4629      	mov	r1, r5
 80027f8:	024b      	lsls	r3, r1, #9
 80027fa:	4621      	mov	r1, r4
 80027fc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002800:	4621      	mov	r1, r4
 8002802:	024a      	lsls	r2, r1, #9
 8002804:	4610      	mov	r0, r2
 8002806:	4619      	mov	r1, r3
 8002808:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800280a:	2200      	movs	r2, #0
 800280c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800280e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002810:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002814:	f7fd fd3c 	bl	8000290 <__aeabi_uldivmod>
 8002818:	4602      	mov	r2, r0
 800281a:	460b      	mov	r3, r1
 800281c:	4613      	mov	r3, r2
 800281e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002820:	e058      	b.n	80028d4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002822:	4b38      	ldr	r3, [pc, #224]	@ (8002904 <HAL_RCC_GetSysClockFreq+0x200>)
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	099b      	lsrs	r3, r3, #6
 8002828:	2200      	movs	r2, #0
 800282a:	4618      	mov	r0, r3
 800282c:	4611      	mov	r1, r2
 800282e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002832:	623b      	str	r3, [r7, #32]
 8002834:	2300      	movs	r3, #0
 8002836:	627b      	str	r3, [r7, #36]	@ 0x24
 8002838:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800283c:	4642      	mov	r2, r8
 800283e:	464b      	mov	r3, r9
 8002840:	f04f 0000 	mov.w	r0, #0
 8002844:	f04f 0100 	mov.w	r1, #0
 8002848:	0159      	lsls	r1, r3, #5
 800284a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800284e:	0150      	lsls	r0, r2, #5
 8002850:	4602      	mov	r2, r0
 8002852:	460b      	mov	r3, r1
 8002854:	4641      	mov	r1, r8
 8002856:	ebb2 0a01 	subs.w	sl, r2, r1
 800285a:	4649      	mov	r1, r9
 800285c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002860:	f04f 0200 	mov.w	r2, #0
 8002864:	f04f 0300 	mov.w	r3, #0
 8002868:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800286c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002870:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002874:	ebb2 040a 	subs.w	r4, r2, sl
 8002878:	eb63 050b 	sbc.w	r5, r3, fp
 800287c:	f04f 0200 	mov.w	r2, #0
 8002880:	f04f 0300 	mov.w	r3, #0
 8002884:	00eb      	lsls	r3, r5, #3
 8002886:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800288a:	00e2      	lsls	r2, r4, #3
 800288c:	4614      	mov	r4, r2
 800288e:	461d      	mov	r5, r3
 8002890:	4643      	mov	r3, r8
 8002892:	18e3      	adds	r3, r4, r3
 8002894:	603b      	str	r3, [r7, #0]
 8002896:	464b      	mov	r3, r9
 8002898:	eb45 0303 	adc.w	r3, r5, r3
 800289c:	607b      	str	r3, [r7, #4]
 800289e:	f04f 0200 	mov.w	r2, #0
 80028a2:	f04f 0300 	mov.w	r3, #0
 80028a6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80028aa:	4629      	mov	r1, r5
 80028ac:	028b      	lsls	r3, r1, #10
 80028ae:	4621      	mov	r1, r4
 80028b0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80028b4:	4621      	mov	r1, r4
 80028b6:	028a      	lsls	r2, r1, #10
 80028b8:	4610      	mov	r0, r2
 80028ba:	4619      	mov	r1, r3
 80028bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80028be:	2200      	movs	r2, #0
 80028c0:	61bb      	str	r3, [r7, #24]
 80028c2:	61fa      	str	r2, [r7, #28]
 80028c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80028c8:	f7fd fce2 	bl	8000290 <__aeabi_uldivmod>
 80028cc:	4602      	mov	r2, r0
 80028ce:	460b      	mov	r3, r1
 80028d0:	4613      	mov	r3, r2
 80028d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80028d4:	4b0b      	ldr	r3, [pc, #44]	@ (8002904 <HAL_RCC_GetSysClockFreq+0x200>)
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	0c1b      	lsrs	r3, r3, #16
 80028da:	f003 0303 	and.w	r3, r3, #3
 80028de:	3301      	adds	r3, #1
 80028e0:	005b      	lsls	r3, r3, #1
 80028e2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 80028e4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80028e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80028e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80028ec:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80028ee:	e002      	b.n	80028f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80028f0:	4b05      	ldr	r3, [pc, #20]	@ (8002908 <HAL_RCC_GetSysClockFreq+0x204>)
 80028f2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80028f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	3750      	adds	r7, #80	@ 0x50
 80028fc:	46bd      	mov	sp, r7
 80028fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002902:	bf00      	nop
 8002904:	40023800 	.word	0x40023800
 8002908:	00f42400 	.word	0x00f42400
 800290c:	007a1200 	.word	0x007a1200

08002910 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002910:	b480      	push	{r7}
 8002912:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002914:	4b03      	ldr	r3, [pc, #12]	@ (8002924 <HAL_RCC_GetHCLKFreq+0x14>)
 8002916:	681b      	ldr	r3, [r3, #0]
}
 8002918:	4618      	mov	r0, r3
 800291a:	46bd      	mov	sp, r7
 800291c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002920:	4770      	bx	lr
 8002922:	bf00      	nop
 8002924:	20000000 	.word	0x20000000

08002928 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800292c:	f7ff fff0 	bl	8002910 <HAL_RCC_GetHCLKFreq>
 8002930:	4602      	mov	r2, r0
 8002932:	4b05      	ldr	r3, [pc, #20]	@ (8002948 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	0a9b      	lsrs	r3, r3, #10
 8002938:	f003 0307 	and.w	r3, r3, #7
 800293c:	4903      	ldr	r1, [pc, #12]	@ (800294c <HAL_RCC_GetPCLK1Freq+0x24>)
 800293e:	5ccb      	ldrb	r3, [r1, r3]
 8002940:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002944:	4618      	mov	r0, r3
 8002946:	bd80      	pop	{r7, pc}
 8002948:	40023800 	.word	0x40023800
 800294c:	0800703c 	.word	0x0800703c

08002950 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002954:	f7ff ffdc 	bl	8002910 <HAL_RCC_GetHCLKFreq>
 8002958:	4602      	mov	r2, r0
 800295a:	4b05      	ldr	r3, [pc, #20]	@ (8002970 <HAL_RCC_GetPCLK2Freq+0x20>)
 800295c:	689b      	ldr	r3, [r3, #8]
 800295e:	0b5b      	lsrs	r3, r3, #13
 8002960:	f003 0307 	and.w	r3, r3, #7
 8002964:	4903      	ldr	r1, [pc, #12]	@ (8002974 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002966:	5ccb      	ldrb	r3, [r1, r3]
 8002968:	fa22 f303 	lsr.w	r3, r2, r3
}
 800296c:	4618      	mov	r0, r3
 800296e:	bd80      	pop	{r7, pc}
 8002970:	40023800 	.word	0x40023800
 8002974:	0800703c 	.word	0x0800703c

08002978 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002978:	b480      	push	{r7}
 800297a:	b083      	sub	sp, #12
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
 8002980:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	220f      	movs	r2, #15
 8002986:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002988:	4b12      	ldr	r3, [pc, #72]	@ (80029d4 <HAL_RCC_GetClockConfig+0x5c>)
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	f003 0203 	and.w	r2, r3, #3
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002994:	4b0f      	ldr	r3, [pc, #60]	@ (80029d4 <HAL_RCC_GetClockConfig+0x5c>)
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80029a0:	4b0c      	ldr	r3, [pc, #48]	@ (80029d4 <HAL_RCC_GetClockConfig+0x5c>)
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80029ac:	4b09      	ldr	r3, [pc, #36]	@ (80029d4 <HAL_RCC_GetClockConfig+0x5c>)
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	08db      	lsrs	r3, r3, #3
 80029b2:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80029ba:	4b07      	ldr	r3, [pc, #28]	@ (80029d8 <HAL_RCC_GetClockConfig+0x60>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f003 020f 	and.w	r2, r3, #15
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	601a      	str	r2, [r3, #0]
}
 80029c6:	bf00      	nop
 80029c8:	370c      	adds	r7, #12
 80029ca:	46bd      	mov	sp, r7
 80029cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d0:	4770      	bx	lr
 80029d2:	bf00      	nop
 80029d4:	40023800 	.word	0x40023800
 80029d8:	40023c00 	.word	0x40023c00

080029dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b082      	sub	sp, #8
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d101      	bne.n	80029ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	e041      	b.n	8002a72 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029f4:	b2db      	uxtb	r3, r3
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d106      	bne.n	8002a08 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2200      	movs	r2, #0
 80029fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a02:	6878      	ldr	r0, [r7, #4]
 8002a04:	f000 f839 	bl	8002a7a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2202      	movs	r2, #2
 8002a0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	3304      	adds	r3, #4
 8002a18:	4619      	mov	r1, r3
 8002a1a:	4610      	mov	r0, r2
 8002a1c:	f000 f9d8 	bl	8002dd0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2201      	movs	r2, #1
 8002a24:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2201      	movs	r2, #1
 8002a34:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2201      	movs	r2, #1
 8002a44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2201      	movs	r2, #1
 8002a54:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2201      	movs	r2, #1
 8002a64:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002a70:	2300      	movs	r3, #0
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	3708      	adds	r7, #8
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}

08002a7a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002a7a:	b480      	push	{r7}
 8002a7c:	b083      	sub	sp, #12
 8002a7e:	af00      	add	r7, sp, #0
 8002a80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002a82:	bf00      	nop
 8002a84:	370c      	adds	r7, #12
 8002a86:	46bd      	mov	sp, r7
 8002a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8c:	4770      	bx	lr
	...

08002a90 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b085      	sub	sp, #20
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a9e:	b2db      	uxtb	r3, r3
 8002aa0:	2b01      	cmp	r3, #1
 8002aa2:	d001      	beq.n	8002aa8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	e04e      	b.n	8002b46 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2202      	movs	r2, #2
 8002aac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	68da      	ldr	r2, [r3, #12]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f042 0201 	orr.w	r2, r2, #1
 8002abe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a23      	ldr	r2, [pc, #140]	@ (8002b54 <HAL_TIM_Base_Start_IT+0xc4>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d022      	beq.n	8002b10 <HAL_TIM_Base_Start_IT+0x80>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ad2:	d01d      	beq.n	8002b10 <HAL_TIM_Base_Start_IT+0x80>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a1f      	ldr	r2, [pc, #124]	@ (8002b58 <HAL_TIM_Base_Start_IT+0xc8>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d018      	beq.n	8002b10 <HAL_TIM_Base_Start_IT+0x80>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a1e      	ldr	r2, [pc, #120]	@ (8002b5c <HAL_TIM_Base_Start_IT+0xcc>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d013      	beq.n	8002b10 <HAL_TIM_Base_Start_IT+0x80>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a1c      	ldr	r2, [pc, #112]	@ (8002b60 <HAL_TIM_Base_Start_IT+0xd0>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d00e      	beq.n	8002b10 <HAL_TIM_Base_Start_IT+0x80>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a1b      	ldr	r2, [pc, #108]	@ (8002b64 <HAL_TIM_Base_Start_IT+0xd4>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d009      	beq.n	8002b10 <HAL_TIM_Base_Start_IT+0x80>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a19      	ldr	r2, [pc, #100]	@ (8002b68 <HAL_TIM_Base_Start_IT+0xd8>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d004      	beq.n	8002b10 <HAL_TIM_Base_Start_IT+0x80>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a18      	ldr	r2, [pc, #96]	@ (8002b6c <HAL_TIM_Base_Start_IT+0xdc>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d111      	bne.n	8002b34 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	f003 0307 	and.w	r3, r3, #7
 8002b1a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	2b06      	cmp	r3, #6
 8002b20:	d010      	beq.n	8002b44 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f042 0201 	orr.w	r2, r2, #1
 8002b30:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b32:	e007      	b.n	8002b44 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	681a      	ldr	r2, [r3, #0]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f042 0201 	orr.w	r2, r2, #1
 8002b42:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002b44:	2300      	movs	r3, #0
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	3714      	adds	r7, #20
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b50:	4770      	bx	lr
 8002b52:	bf00      	nop
 8002b54:	40010000 	.word	0x40010000
 8002b58:	40000400 	.word	0x40000400
 8002b5c:	40000800 	.word	0x40000800
 8002b60:	40000c00 	.word	0x40000c00
 8002b64:	40010400 	.word	0x40010400
 8002b68:	40014000 	.word	0x40014000
 8002b6c:	40001800 	.word	0x40001800

08002b70 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b082      	sub	sp, #8
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	691b      	ldr	r3, [r3, #16]
 8002b7e:	f003 0302 	and.w	r3, r3, #2
 8002b82:	2b02      	cmp	r3, #2
 8002b84:	d122      	bne.n	8002bcc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	68db      	ldr	r3, [r3, #12]
 8002b8c:	f003 0302 	and.w	r3, r3, #2
 8002b90:	2b02      	cmp	r3, #2
 8002b92:	d11b      	bne.n	8002bcc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f06f 0202 	mvn.w	r2, #2
 8002b9c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2201      	movs	r2, #1
 8002ba2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	699b      	ldr	r3, [r3, #24]
 8002baa:	f003 0303 	and.w	r3, r3, #3
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d003      	beq.n	8002bba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002bb2:	6878      	ldr	r0, [r7, #4]
 8002bb4:	f000 f8ee 	bl	8002d94 <HAL_TIM_IC_CaptureCallback>
 8002bb8:	e005      	b.n	8002bc6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	f000 f8e0 	bl	8002d80 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bc0:	6878      	ldr	r0, [r7, #4]
 8002bc2:	f000 f8f1 	bl	8002da8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	691b      	ldr	r3, [r3, #16]
 8002bd2:	f003 0304 	and.w	r3, r3, #4
 8002bd6:	2b04      	cmp	r3, #4
 8002bd8:	d122      	bne.n	8002c20 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	68db      	ldr	r3, [r3, #12]
 8002be0:	f003 0304 	and.w	r3, r3, #4
 8002be4:	2b04      	cmp	r3, #4
 8002be6:	d11b      	bne.n	8002c20 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f06f 0204 	mvn.w	r2, #4
 8002bf0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2202      	movs	r2, #2
 8002bf6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	699b      	ldr	r3, [r3, #24]
 8002bfe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d003      	beq.n	8002c0e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c06:	6878      	ldr	r0, [r7, #4]
 8002c08:	f000 f8c4 	bl	8002d94 <HAL_TIM_IC_CaptureCallback>
 8002c0c:	e005      	b.n	8002c1a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c0e:	6878      	ldr	r0, [r7, #4]
 8002c10:	f000 f8b6 	bl	8002d80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c14:	6878      	ldr	r0, [r7, #4]
 8002c16:	f000 f8c7 	bl	8002da8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	691b      	ldr	r3, [r3, #16]
 8002c26:	f003 0308 	and.w	r3, r3, #8
 8002c2a:	2b08      	cmp	r3, #8
 8002c2c:	d122      	bne.n	8002c74 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	68db      	ldr	r3, [r3, #12]
 8002c34:	f003 0308 	and.w	r3, r3, #8
 8002c38:	2b08      	cmp	r3, #8
 8002c3a:	d11b      	bne.n	8002c74 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f06f 0208 	mvn.w	r2, #8
 8002c44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2204      	movs	r2, #4
 8002c4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	69db      	ldr	r3, [r3, #28]
 8002c52:	f003 0303 	and.w	r3, r3, #3
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d003      	beq.n	8002c62 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c5a:	6878      	ldr	r0, [r7, #4]
 8002c5c:	f000 f89a 	bl	8002d94 <HAL_TIM_IC_CaptureCallback>
 8002c60:	e005      	b.n	8002c6e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c62:	6878      	ldr	r0, [r7, #4]
 8002c64:	f000 f88c 	bl	8002d80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c68:	6878      	ldr	r0, [r7, #4]
 8002c6a:	f000 f89d 	bl	8002da8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2200      	movs	r2, #0
 8002c72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	691b      	ldr	r3, [r3, #16]
 8002c7a:	f003 0310 	and.w	r3, r3, #16
 8002c7e:	2b10      	cmp	r3, #16
 8002c80:	d122      	bne.n	8002cc8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	68db      	ldr	r3, [r3, #12]
 8002c88:	f003 0310 	and.w	r3, r3, #16
 8002c8c:	2b10      	cmp	r3, #16
 8002c8e:	d11b      	bne.n	8002cc8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f06f 0210 	mvn.w	r2, #16
 8002c98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2208      	movs	r2, #8
 8002c9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	69db      	ldr	r3, [r3, #28]
 8002ca6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d003      	beq.n	8002cb6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cae:	6878      	ldr	r0, [r7, #4]
 8002cb0:	f000 f870 	bl	8002d94 <HAL_TIM_IC_CaptureCallback>
 8002cb4:	e005      	b.n	8002cc2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	f000 f862 	bl	8002d80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cbc:	6878      	ldr	r0, [r7, #4]
 8002cbe:	f000 f873 	bl	8002da8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	691b      	ldr	r3, [r3, #16]
 8002cce:	f003 0301 	and.w	r3, r3, #1
 8002cd2:	2b01      	cmp	r3, #1
 8002cd4:	d10e      	bne.n	8002cf4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	68db      	ldr	r3, [r3, #12]
 8002cdc:	f003 0301 	and.w	r3, r3, #1
 8002ce0:	2b01      	cmp	r3, #1
 8002ce2:	d107      	bne.n	8002cf4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f06f 0201 	mvn.w	r2, #1
 8002cec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002cee:	6878      	ldr	r0, [r7, #4]
 8002cf0:	f7fd fedc 	bl	8000aac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	691b      	ldr	r3, [r3, #16]
 8002cfa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cfe:	2b80      	cmp	r3, #128	@ 0x80
 8002d00:	d10e      	bne.n	8002d20 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	68db      	ldr	r3, [r3, #12]
 8002d08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d0c:	2b80      	cmp	r3, #128	@ 0x80
 8002d0e:	d107      	bne.n	8002d20 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002d18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	f000 f902 	bl	8002f24 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	691b      	ldr	r3, [r3, #16]
 8002d26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d2a:	2b40      	cmp	r3, #64	@ 0x40
 8002d2c:	d10e      	bne.n	8002d4c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	68db      	ldr	r3, [r3, #12]
 8002d34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d38:	2b40      	cmp	r3, #64	@ 0x40
 8002d3a:	d107      	bne.n	8002d4c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002d44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	f000 f838 	bl	8002dbc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	691b      	ldr	r3, [r3, #16]
 8002d52:	f003 0320 	and.w	r3, r3, #32
 8002d56:	2b20      	cmp	r3, #32
 8002d58:	d10e      	bne.n	8002d78 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	68db      	ldr	r3, [r3, #12]
 8002d60:	f003 0320 	and.w	r3, r3, #32
 8002d64:	2b20      	cmp	r3, #32
 8002d66:	d107      	bne.n	8002d78 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f06f 0220 	mvn.w	r2, #32
 8002d70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002d72:	6878      	ldr	r0, [r7, #4]
 8002d74:	f000 f8cc 	bl	8002f10 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002d78:	bf00      	nop
 8002d7a:	3708      	adds	r7, #8
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}

08002d80 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b083      	sub	sp, #12
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002d88:	bf00      	nop
 8002d8a:	370c      	adds	r7, #12
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d92:	4770      	bx	lr

08002d94 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b083      	sub	sp, #12
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002d9c:	bf00      	nop
 8002d9e:	370c      	adds	r7, #12
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr

08002da8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b083      	sub	sp, #12
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002db0:	bf00      	nop
 8002db2:	370c      	adds	r7, #12
 8002db4:	46bd      	mov	sp, r7
 8002db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dba:	4770      	bx	lr

08002dbc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b083      	sub	sp, #12
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002dc4:	bf00      	nop
 8002dc6:	370c      	adds	r7, #12
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dce:	4770      	bx	lr

08002dd0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b085      	sub	sp, #20
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
 8002dd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	4a40      	ldr	r2, [pc, #256]	@ (8002ee4 <TIM_Base_SetConfig+0x114>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d013      	beq.n	8002e10 <TIM_Base_SetConfig+0x40>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002dee:	d00f      	beq.n	8002e10 <TIM_Base_SetConfig+0x40>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	4a3d      	ldr	r2, [pc, #244]	@ (8002ee8 <TIM_Base_SetConfig+0x118>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d00b      	beq.n	8002e10 <TIM_Base_SetConfig+0x40>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	4a3c      	ldr	r2, [pc, #240]	@ (8002eec <TIM_Base_SetConfig+0x11c>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d007      	beq.n	8002e10 <TIM_Base_SetConfig+0x40>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	4a3b      	ldr	r2, [pc, #236]	@ (8002ef0 <TIM_Base_SetConfig+0x120>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d003      	beq.n	8002e10 <TIM_Base_SetConfig+0x40>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	4a3a      	ldr	r2, [pc, #232]	@ (8002ef4 <TIM_Base_SetConfig+0x124>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d108      	bne.n	8002e22 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	68fa      	ldr	r2, [r7, #12]
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	4a2f      	ldr	r2, [pc, #188]	@ (8002ee4 <TIM_Base_SetConfig+0x114>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d02b      	beq.n	8002e82 <TIM_Base_SetConfig+0xb2>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e30:	d027      	beq.n	8002e82 <TIM_Base_SetConfig+0xb2>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	4a2c      	ldr	r2, [pc, #176]	@ (8002ee8 <TIM_Base_SetConfig+0x118>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d023      	beq.n	8002e82 <TIM_Base_SetConfig+0xb2>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	4a2b      	ldr	r2, [pc, #172]	@ (8002eec <TIM_Base_SetConfig+0x11c>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d01f      	beq.n	8002e82 <TIM_Base_SetConfig+0xb2>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	4a2a      	ldr	r2, [pc, #168]	@ (8002ef0 <TIM_Base_SetConfig+0x120>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d01b      	beq.n	8002e82 <TIM_Base_SetConfig+0xb2>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	4a29      	ldr	r2, [pc, #164]	@ (8002ef4 <TIM_Base_SetConfig+0x124>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d017      	beq.n	8002e82 <TIM_Base_SetConfig+0xb2>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	4a28      	ldr	r2, [pc, #160]	@ (8002ef8 <TIM_Base_SetConfig+0x128>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d013      	beq.n	8002e82 <TIM_Base_SetConfig+0xb2>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	4a27      	ldr	r2, [pc, #156]	@ (8002efc <TIM_Base_SetConfig+0x12c>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d00f      	beq.n	8002e82 <TIM_Base_SetConfig+0xb2>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	4a26      	ldr	r2, [pc, #152]	@ (8002f00 <TIM_Base_SetConfig+0x130>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d00b      	beq.n	8002e82 <TIM_Base_SetConfig+0xb2>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	4a25      	ldr	r2, [pc, #148]	@ (8002f04 <TIM_Base_SetConfig+0x134>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d007      	beq.n	8002e82 <TIM_Base_SetConfig+0xb2>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	4a24      	ldr	r2, [pc, #144]	@ (8002f08 <TIM_Base_SetConfig+0x138>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d003      	beq.n	8002e82 <TIM_Base_SetConfig+0xb2>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	4a23      	ldr	r2, [pc, #140]	@ (8002f0c <TIM_Base_SetConfig+0x13c>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d108      	bne.n	8002e94 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	68db      	ldr	r3, [r3, #12]
 8002e8e:	68fa      	ldr	r2, [r7, #12]
 8002e90:	4313      	orrs	r3, r2
 8002e92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	695b      	ldr	r3, [r3, #20]
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	68fa      	ldr	r2, [r7, #12]
 8002ea6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	689a      	ldr	r2, [r3, #8]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	681a      	ldr	r2, [r3, #0]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	4a0a      	ldr	r2, [pc, #40]	@ (8002ee4 <TIM_Base_SetConfig+0x114>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d003      	beq.n	8002ec8 <TIM_Base_SetConfig+0xf8>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	4a0c      	ldr	r2, [pc, #48]	@ (8002ef4 <TIM_Base_SetConfig+0x124>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d103      	bne.n	8002ed0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	691a      	ldr	r2, [r3, #16]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	615a      	str	r2, [r3, #20]
}
 8002ed6:	bf00      	nop
 8002ed8:	3714      	adds	r7, #20
 8002eda:	46bd      	mov	sp, r7
 8002edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee0:	4770      	bx	lr
 8002ee2:	bf00      	nop
 8002ee4:	40010000 	.word	0x40010000
 8002ee8:	40000400 	.word	0x40000400
 8002eec:	40000800 	.word	0x40000800
 8002ef0:	40000c00 	.word	0x40000c00
 8002ef4:	40010400 	.word	0x40010400
 8002ef8:	40014000 	.word	0x40014000
 8002efc:	40014400 	.word	0x40014400
 8002f00:	40014800 	.word	0x40014800
 8002f04:	40001800 	.word	0x40001800
 8002f08:	40001c00 	.word	0x40001c00
 8002f0c:	40002000 	.word	0x40002000

08002f10 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b083      	sub	sp, #12
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002f18:	bf00      	nop
 8002f1a:	370c      	adds	r7, #12
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f22:	4770      	bx	lr

08002f24 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b083      	sub	sp, #12
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002f2c:	bf00      	nop
 8002f2e:	370c      	adds	r7, #12
 8002f30:	46bd      	mov	sp, r7
 8002f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f36:	4770      	bx	lr

08002f38 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b082      	sub	sp, #8
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d101      	bne.n	8002f4a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	e03f      	b.n	8002fca <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f50:	b2db      	uxtb	r3, r3
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d106      	bne.n	8002f64 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f5e:	6878      	ldr	r0, [r7, #4]
 8002f60:	f7fd feae 	bl	8000cc0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2224      	movs	r2, #36	@ 0x24
 8002f68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	68da      	ldr	r2, [r3, #12]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002f7a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002f7c:	6878      	ldr	r0, [r7, #4]
 8002f7e:	f000 f929 	bl	80031d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	691a      	ldr	r2, [r3, #16]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002f90:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	695a      	ldr	r2, [r3, #20]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002fa0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	68da      	ldr	r2, [r3, #12]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002fb0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2220      	movs	r2, #32
 8002fbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2220      	movs	r2, #32
 8002fc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002fc8:	2300      	movs	r3, #0
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	3708      	adds	r7, #8
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}

08002fd2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fd2:	b580      	push	{r7, lr}
 8002fd4:	b08a      	sub	sp, #40	@ 0x28
 8002fd6:	af02      	add	r7, sp, #8
 8002fd8:	60f8      	str	r0, [r7, #12]
 8002fda:	60b9      	str	r1, [r7, #8]
 8002fdc:	603b      	str	r3, [r7, #0]
 8002fde:	4613      	mov	r3, r2
 8002fe0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	2b20      	cmp	r3, #32
 8002ff0:	d17c      	bne.n	80030ec <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d002      	beq.n	8002ffe <HAL_UART_Transmit+0x2c>
 8002ff8:	88fb      	ldrh	r3, [r7, #6]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d101      	bne.n	8003002 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	e075      	b.n	80030ee <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003008:	2b01      	cmp	r3, #1
 800300a:	d101      	bne.n	8003010 <HAL_UART_Transmit+0x3e>
 800300c:	2302      	movs	r3, #2
 800300e:	e06e      	b.n	80030ee <HAL_UART_Transmit+0x11c>
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	2201      	movs	r2, #1
 8003014:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	2200      	movs	r2, #0
 800301c:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	2221      	movs	r2, #33	@ 0x21
 8003022:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003026:	f7fe f8f3 	bl	8001210 <HAL_GetTick>
 800302a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	88fa      	ldrh	r2, [r7, #6]
 8003030:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	88fa      	ldrh	r2, [r7, #6]
 8003036:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003040:	d108      	bne.n	8003054 <HAL_UART_Transmit+0x82>
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	691b      	ldr	r3, [r3, #16]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d104      	bne.n	8003054 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800304a:	2300      	movs	r3, #0
 800304c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	61bb      	str	r3, [r7, #24]
 8003052:	e003      	b.n	800305c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003058:	2300      	movs	r3, #0
 800305a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2200      	movs	r2, #0
 8003060:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    while (huart->TxXferCount > 0U)
 8003064:	e02a      	b.n	80030bc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	9300      	str	r3, [sp, #0]
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	2200      	movs	r2, #0
 800306e:	2180      	movs	r1, #128	@ 0x80
 8003070:	68f8      	ldr	r0, [r7, #12]
 8003072:	f000 f840 	bl	80030f6 <UART_WaitOnFlagUntilTimeout>
 8003076:	4603      	mov	r3, r0
 8003078:	2b00      	cmp	r3, #0
 800307a:	d001      	beq.n	8003080 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800307c:	2303      	movs	r3, #3
 800307e:	e036      	b.n	80030ee <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003080:	69fb      	ldr	r3, [r7, #28]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d10b      	bne.n	800309e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003086:	69bb      	ldr	r3, [r7, #24]
 8003088:	881b      	ldrh	r3, [r3, #0]
 800308a:	461a      	mov	r2, r3
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003094:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003096:	69bb      	ldr	r3, [r7, #24]
 8003098:	3302      	adds	r3, #2
 800309a:	61bb      	str	r3, [r7, #24]
 800309c:	e007      	b.n	80030ae <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800309e:	69fb      	ldr	r3, [r7, #28]
 80030a0:	781a      	ldrb	r2, [r3, #0]
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80030a8:	69fb      	ldr	r3, [r7, #28]
 80030aa:	3301      	adds	r3, #1
 80030ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80030b2:	b29b      	uxth	r3, r3
 80030b4:	3b01      	subs	r3, #1
 80030b6:	b29a      	uxth	r2, r3
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80030c0:	b29b      	uxth	r3, r3
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d1cf      	bne.n	8003066 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	9300      	str	r3, [sp, #0]
 80030ca:	697b      	ldr	r3, [r7, #20]
 80030cc:	2200      	movs	r2, #0
 80030ce:	2140      	movs	r1, #64	@ 0x40
 80030d0:	68f8      	ldr	r0, [r7, #12]
 80030d2:	f000 f810 	bl	80030f6 <UART_WaitOnFlagUntilTimeout>
 80030d6:	4603      	mov	r3, r0
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d001      	beq.n	80030e0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80030dc:	2303      	movs	r3, #3
 80030de:	e006      	b.n	80030ee <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	2220      	movs	r2, #32
 80030e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 80030e8:	2300      	movs	r3, #0
 80030ea:	e000      	b.n	80030ee <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80030ec:	2302      	movs	r3, #2
  }
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	3720      	adds	r7, #32
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}

080030f6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80030f6:	b580      	push	{r7, lr}
 80030f8:	b090      	sub	sp, #64	@ 0x40
 80030fa:	af00      	add	r7, sp, #0
 80030fc:	60f8      	str	r0, [r7, #12]
 80030fe:	60b9      	str	r1, [r7, #8]
 8003100:	603b      	str	r3, [r7, #0]
 8003102:	4613      	mov	r3, r2
 8003104:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003106:	e050      	b.n	80031aa <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003108:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800310a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800310e:	d04c      	beq.n	80031aa <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003110:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003112:	2b00      	cmp	r3, #0
 8003114:	d007      	beq.n	8003126 <UART_WaitOnFlagUntilTimeout+0x30>
 8003116:	f7fe f87b 	bl	8001210 <HAL_GetTick>
 800311a:	4602      	mov	r2, r0
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	1ad3      	subs	r3, r2, r3
 8003120:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003122:	429a      	cmp	r2, r3
 8003124:	d241      	bcs.n	80031aa <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	330c      	adds	r3, #12
 800312c:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800312e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003130:	e853 3f00 	ldrex	r3, [r3]
 8003134:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003138:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800313c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	330c      	adds	r3, #12
 8003144:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003146:	637a      	str	r2, [r7, #52]	@ 0x34
 8003148:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800314a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800314c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800314e:	e841 2300 	strex	r3, r2, [r1]
 8003152:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8003154:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003156:	2b00      	cmp	r3, #0
 8003158:	d1e5      	bne.n	8003126 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	3314      	adds	r3, #20
 8003160:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	e853 3f00 	ldrex	r3, [r3]
 8003168:	613b      	str	r3, [r7, #16]
   return(result);
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	f023 0301 	bic.w	r3, r3, #1
 8003170:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	3314      	adds	r3, #20
 8003178:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800317a:	623a      	str	r2, [r7, #32]
 800317c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800317e:	69f9      	ldr	r1, [r7, #28]
 8003180:	6a3a      	ldr	r2, [r7, #32]
 8003182:	e841 2300 	strex	r3, r2, [r1]
 8003186:	61bb      	str	r3, [r7, #24]
   return(result);
 8003188:	69bb      	ldr	r3, [r7, #24]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d1e5      	bne.n	800315a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2220      	movs	r2, #32
 8003192:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	2220      	movs	r2, #32
 800319a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	2200      	movs	r2, #0
 80031a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 80031a6:	2303      	movs	r3, #3
 80031a8:	e00f      	b.n	80031ca <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	4013      	ands	r3, r2
 80031b4:	68ba      	ldr	r2, [r7, #8]
 80031b6:	429a      	cmp	r2, r3
 80031b8:	bf0c      	ite	eq
 80031ba:	2301      	moveq	r3, #1
 80031bc:	2300      	movne	r3, #0
 80031be:	b2db      	uxtb	r3, r3
 80031c0:	461a      	mov	r2, r3
 80031c2:	79fb      	ldrb	r3, [r7, #7]
 80031c4:	429a      	cmp	r2, r3
 80031c6:	d09f      	beq.n	8003108 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80031c8:	2300      	movs	r3, #0
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	3740      	adds	r7, #64	@ 0x40
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}
	...

080031d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80031d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80031d8:	b0c0      	sub	sp, #256	@ 0x100
 80031da:	af00      	add	r7, sp, #0
 80031dc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80031e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	691b      	ldr	r3, [r3, #16]
 80031e8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80031ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031f0:	68d9      	ldr	r1, [r3, #12]
 80031f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	ea40 0301 	orr.w	r3, r0, r1
 80031fc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80031fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003202:	689a      	ldr	r2, [r3, #8]
 8003204:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003208:	691b      	ldr	r3, [r3, #16]
 800320a:	431a      	orrs	r2, r3
 800320c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003210:	695b      	ldr	r3, [r3, #20]
 8003212:	431a      	orrs	r2, r3
 8003214:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003218:	69db      	ldr	r3, [r3, #28]
 800321a:	4313      	orrs	r3, r2
 800321c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003220:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	68db      	ldr	r3, [r3, #12]
 8003228:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800322c:	f021 010c 	bic.w	r1, r1, #12
 8003230:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003234:	681a      	ldr	r2, [r3, #0]
 8003236:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800323a:	430b      	orrs	r3, r1
 800323c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800323e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	695b      	ldr	r3, [r3, #20]
 8003246:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800324a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800324e:	6999      	ldr	r1, [r3, #24]
 8003250:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003254:	681a      	ldr	r2, [r3, #0]
 8003256:	ea40 0301 	orr.w	r3, r0, r1
 800325a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800325c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	4b8f      	ldr	r3, [pc, #572]	@ (80034a0 <UART_SetConfig+0x2cc>)
 8003264:	429a      	cmp	r2, r3
 8003266:	d005      	beq.n	8003274 <UART_SetConfig+0xa0>
 8003268:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800326c:	681a      	ldr	r2, [r3, #0]
 800326e:	4b8d      	ldr	r3, [pc, #564]	@ (80034a4 <UART_SetConfig+0x2d0>)
 8003270:	429a      	cmp	r2, r3
 8003272:	d104      	bne.n	800327e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003274:	f7ff fb6c 	bl	8002950 <HAL_RCC_GetPCLK2Freq>
 8003278:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800327c:	e003      	b.n	8003286 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800327e:	f7ff fb53 	bl	8002928 <HAL_RCC_GetPCLK1Freq>
 8003282:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003286:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800328a:	69db      	ldr	r3, [r3, #28]
 800328c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003290:	f040 810c 	bne.w	80034ac <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003294:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003298:	2200      	movs	r2, #0
 800329a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800329e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80032a2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80032a6:	4622      	mov	r2, r4
 80032a8:	462b      	mov	r3, r5
 80032aa:	1891      	adds	r1, r2, r2
 80032ac:	65b9      	str	r1, [r7, #88]	@ 0x58
 80032ae:	415b      	adcs	r3, r3
 80032b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80032b2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80032b6:	4621      	mov	r1, r4
 80032b8:	eb12 0801 	adds.w	r8, r2, r1
 80032bc:	4629      	mov	r1, r5
 80032be:	eb43 0901 	adc.w	r9, r3, r1
 80032c2:	f04f 0200 	mov.w	r2, #0
 80032c6:	f04f 0300 	mov.w	r3, #0
 80032ca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80032ce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80032d2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80032d6:	4690      	mov	r8, r2
 80032d8:	4699      	mov	r9, r3
 80032da:	4623      	mov	r3, r4
 80032dc:	eb18 0303 	adds.w	r3, r8, r3
 80032e0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80032e4:	462b      	mov	r3, r5
 80032e6:	eb49 0303 	adc.w	r3, r9, r3
 80032ea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80032ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	2200      	movs	r2, #0
 80032f6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80032fa:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80032fe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003302:	460b      	mov	r3, r1
 8003304:	18db      	adds	r3, r3, r3
 8003306:	653b      	str	r3, [r7, #80]	@ 0x50
 8003308:	4613      	mov	r3, r2
 800330a:	eb42 0303 	adc.w	r3, r2, r3
 800330e:	657b      	str	r3, [r7, #84]	@ 0x54
 8003310:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003314:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003318:	f7fc ffba 	bl	8000290 <__aeabi_uldivmod>
 800331c:	4602      	mov	r2, r0
 800331e:	460b      	mov	r3, r1
 8003320:	4b61      	ldr	r3, [pc, #388]	@ (80034a8 <UART_SetConfig+0x2d4>)
 8003322:	fba3 2302 	umull	r2, r3, r3, r2
 8003326:	095b      	lsrs	r3, r3, #5
 8003328:	011c      	lsls	r4, r3, #4
 800332a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800332e:	2200      	movs	r2, #0
 8003330:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003334:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003338:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800333c:	4642      	mov	r2, r8
 800333e:	464b      	mov	r3, r9
 8003340:	1891      	adds	r1, r2, r2
 8003342:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003344:	415b      	adcs	r3, r3
 8003346:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003348:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800334c:	4641      	mov	r1, r8
 800334e:	eb12 0a01 	adds.w	sl, r2, r1
 8003352:	4649      	mov	r1, r9
 8003354:	eb43 0b01 	adc.w	fp, r3, r1
 8003358:	f04f 0200 	mov.w	r2, #0
 800335c:	f04f 0300 	mov.w	r3, #0
 8003360:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003364:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003368:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800336c:	4692      	mov	sl, r2
 800336e:	469b      	mov	fp, r3
 8003370:	4643      	mov	r3, r8
 8003372:	eb1a 0303 	adds.w	r3, sl, r3
 8003376:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800337a:	464b      	mov	r3, r9
 800337c:	eb4b 0303 	adc.w	r3, fp, r3
 8003380:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003384:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	2200      	movs	r2, #0
 800338c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003390:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003394:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003398:	460b      	mov	r3, r1
 800339a:	18db      	adds	r3, r3, r3
 800339c:	643b      	str	r3, [r7, #64]	@ 0x40
 800339e:	4613      	mov	r3, r2
 80033a0:	eb42 0303 	adc.w	r3, r2, r3
 80033a4:	647b      	str	r3, [r7, #68]	@ 0x44
 80033a6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80033aa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80033ae:	f7fc ff6f 	bl	8000290 <__aeabi_uldivmod>
 80033b2:	4602      	mov	r2, r0
 80033b4:	460b      	mov	r3, r1
 80033b6:	4611      	mov	r1, r2
 80033b8:	4b3b      	ldr	r3, [pc, #236]	@ (80034a8 <UART_SetConfig+0x2d4>)
 80033ba:	fba3 2301 	umull	r2, r3, r3, r1
 80033be:	095b      	lsrs	r3, r3, #5
 80033c0:	2264      	movs	r2, #100	@ 0x64
 80033c2:	fb02 f303 	mul.w	r3, r2, r3
 80033c6:	1acb      	subs	r3, r1, r3
 80033c8:	00db      	lsls	r3, r3, #3
 80033ca:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80033ce:	4b36      	ldr	r3, [pc, #216]	@ (80034a8 <UART_SetConfig+0x2d4>)
 80033d0:	fba3 2302 	umull	r2, r3, r3, r2
 80033d4:	095b      	lsrs	r3, r3, #5
 80033d6:	005b      	lsls	r3, r3, #1
 80033d8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80033dc:	441c      	add	r4, r3
 80033de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80033e2:	2200      	movs	r2, #0
 80033e4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80033e8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80033ec:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80033f0:	4642      	mov	r2, r8
 80033f2:	464b      	mov	r3, r9
 80033f4:	1891      	adds	r1, r2, r2
 80033f6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80033f8:	415b      	adcs	r3, r3
 80033fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80033fc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003400:	4641      	mov	r1, r8
 8003402:	1851      	adds	r1, r2, r1
 8003404:	6339      	str	r1, [r7, #48]	@ 0x30
 8003406:	4649      	mov	r1, r9
 8003408:	414b      	adcs	r3, r1
 800340a:	637b      	str	r3, [r7, #52]	@ 0x34
 800340c:	f04f 0200 	mov.w	r2, #0
 8003410:	f04f 0300 	mov.w	r3, #0
 8003414:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003418:	4659      	mov	r1, fp
 800341a:	00cb      	lsls	r3, r1, #3
 800341c:	4651      	mov	r1, sl
 800341e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003422:	4651      	mov	r1, sl
 8003424:	00ca      	lsls	r2, r1, #3
 8003426:	4610      	mov	r0, r2
 8003428:	4619      	mov	r1, r3
 800342a:	4603      	mov	r3, r0
 800342c:	4642      	mov	r2, r8
 800342e:	189b      	adds	r3, r3, r2
 8003430:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003434:	464b      	mov	r3, r9
 8003436:	460a      	mov	r2, r1
 8003438:	eb42 0303 	adc.w	r3, r2, r3
 800343c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003440:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	2200      	movs	r2, #0
 8003448:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800344c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003450:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003454:	460b      	mov	r3, r1
 8003456:	18db      	adds	r3, r3, r3
 8003458:	62bb      	str	r3, [r7, #40]	@ 0x28
 800345a:	4613      	mov	r3, r2
 800345c:	eb42 0303 	adc.w	r3, r2, r3
 8003460:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003462:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003466:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800346a:	f7fc ff11 	bl	8000290 <__aeabi_uldivmod>
 800346e:	4602      	mov	r2, r0
 8003470:	460b      	mov	r3, r1
 8003472:	4b0d      	ldr	r3, [pc, #52]	@ (80034a8 <UART_SetConfig+0x2d4>)
 8003474:	fba3 1302 	umull	r1, r3, r3, r2
 8003478:	095b      	lsrs	r3, r3, #5
 800347a:	2164      	movs	r1, #100	@ 0x64
 800347c:	fb01 f303 	mul.w	r3, r1, r3
 8003480:	1ad3      	subs	r3, r2, r3
 8003482:	00db      	lsls	r3, r3, #3
 8003484:	3332      	adds	r3, #50	@ 0x32
 8003486:	4a08      	ldr	r2, [pc, #32]	@ (80034a8 <UART_SetConfig+0x2d4>)
 8003488:	fba2 2303 	umull	r2, r3, r2, r3
 800348c:	095b      	lsrs	r3, r3, #5
 800348e:	f003 0207 	and.w	r2, r3, #7
 8003492:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4422      	add	r2, r4
 800349a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800349c:	e106      	b.n	80036ac <UART_SetConfig+0x4d8>
 800349e:	bf00      	nop
 80034a0:	40011000 	.word	0x40011000
 80034a4:	40011400 	.word	0x40011400
 80034a8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80034ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80034b0:	2200      	movs	r2, #0
 80034b2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80034b6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80034ba:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80034be:	4642      	mov	r2, r8
 80034c0:	464b      	mov	r3, r9
 80034c2:	1891      	adds	r1, r2, r2
 80034c4:	6239      	str	r1, [r7, #32]
 80034c6:	415b      	adcs	r3, r3
 80034c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80034ca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80034ce:	4641      	mov	r1, r8
 80034d0:	1854      	adds	r4, r2, r1
 80034d2:	4649      	mov	r1, r9
 80034d4:	eb43 0501 	adc.w	r5, r3, r1
 80034d8:	f04f 0200 	mov.w	r2, #0
 80034dc:	f04f 0300 	mov.w	r3, #0
 80034e0:	00eb      	lsls	r3, r5, #3
 80034e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80034e6:	00e2      	lsls	r2, r4, #3
 80034e8:	4614      	mov	r4, r2
 80034ea:	461d      	mov	r5, r3
 80034ec:	4643      	mov	r3, r8
 80034ee:	18e3      	adds	r3, r4, r3
 80034f0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80034f4:	464b      	mov	r3, r9
 80034f6:	eb45 0303 	adc.w	r3, r5, r3
 80034fa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80034fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	2200      	movs	r2, #0
 8003506:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800350a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800350e:	f04f 0200 	mov.w	r2, #0
 8003512:	f04f 0300 	mov.w	r3, #0
 8003516:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800351a:	4629      	mov	r1, r5
 800351c:	008b      	lsls	r3, r1, #2
 800351e:	4621      	mov	r1, r4
 8003520:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003524:	4621      	mov	r1, r4
 8003526:	008a      	lsls	r2, r1, #2
 8003528:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800352c:	f7fc feb0 	bl	8000290 <__aeabi_uldivmod>
 8003530:	4602      	mov	r2, r0
 8003532:	460b      	mov	r3, r1
 8003534:	4b60      	ldr	r3, [pc, #384]	@ (80036b8 <UART_SetConfig+0x4e4>)
 8003536:	fba3 2302 	umull	r2, r3, r3, r2
 800353a:	095b      	lsrs	r3, r3, #5
 800353c:	011c      	lsls	r4, r3, #4
 800353e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003542:	2200      	movs	r2, #0
 8003544:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003548:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800354c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003550:	4642      	mov	r2, r8
 8003552:	464b      	mov	r3, r9
 8003554:	1891      	adds	r1, r2, r2
 8003556:	61b9      	str	r1, [r7, #24]
 8003558:	415b      	adcs	r3, r3
 800355a:	61fb      	str	r3, [r7, #28]
 800355c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003560:	4641      	mov	r1, r8
 8003562:	1851      	adds	r1, r2, r1
 8003564:	6139      	str	r1, [r7, #16]
 8003566:	4649      	mov	r1, r9
 8003568:	414b      	adcs	r3, r1
 800356a:	617b      	str	r3, [r7, #20]
 800356c:	f04f 0200 	mov.w	r2, #0
 8003570:	f04f 0300 	mov.w	r3, #0
 8003574:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003578:	4659      	mov	r1, fp
 800357a:	00cb      	lsls	r3, r1, #3
 800357c:	4651      	mov	r1, sl
 800357e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003582:	4651      	mov	r1, sl
 8003584:	00ca      	lsls	r2, r1, #3
 8003586:	4610      	mov	r0, r2
 8003588:	4619      	mov	r1, r3
 800358a:	4603      	mov	r3, r0
 800358c:	4642      	mov	r2, r8
 800358e:	189b      	adds	r3, r3, r2
 8003590:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003594:	464b      	mov	r3, r9
 8003596:	460a      	mov	r2, r1
 8003598:	eb42 0303 	adc.w	r3, r2, r3
 800359c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80035a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	2200      	movs	r2, #0
 80035a8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80035aa:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80035ac:	f04f 0200 	mov.w	r2, #0
 80035b0:	f04f 0300 	mov.w	r3, #0
 80035b4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80035b8:	4649      	mov	r1, r9
 80035ba:	008b      	lsls	r3, r1, #2
 80035bc:	4641      	mov	r1, r8
 80035be:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80035c2:	4641      	mov	r1, r8
 80035c4:	008a      	lsls	r2, r1, #2
 80035c6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80035ca:	f7fc fe61 	bl	8000290 <__aeabi_uldivmod>
 80035ce:	4602      	mov	r2, r0
 80035d0:	460b      	mov	r3, r1
 80035d2:	4611      	mov	r1, r2
 80035d4:	4b38      	ldr	r3, [pc, #224]	@ (80036b8 <UART_SetConfig+0x4e4>)
 80035d6:	fba3 2301 	umull	r2, r3, r3, r1
 80035da:	095b      	lsrs	r3, r3, #5
 80035dc:	2264      	movs	r2, #100	@ 0x64
 80035de:	fb02 f303 	mul.w	r3, r2, r3
 80035e2:	1acb      	subs	r3, r1, r3
 80035e4:	011b      	lsls	r3, r3, #4
 80035e6:	3332      	adds	r3, #50	@ 0x32
 80035e8:	4a33      	ldr	r2, [pc, #204]	@ (80036b8 <UART_SetConfig+0x4e4>)
 80035ea:	fba2 2303 	umull	r2, r3, r2, r3
 80035ee:	095b      	lsrs	r3, r3, #5
 80035f0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80035f4:	441c      	add	r4, r3
 80035f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80035fa:	2200      	movs	r2, #0
 80035fc:	673b      	str	r3, [r7, #112]	@ 0x70
 80035fe:	677a      	str	r2, [r7, #116]	@ 0x74
 8003600:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003604:	4642      	mov	r2, r8
 8003606:	464b      	mov	r3, r9
 8003608:	1891      	adds	r1, r2, r2
 800360a:	60b9      	str	r1, [r7, #8]
 800360c:	415b      	adcs	r3, r3
 800360e:	60fb      	str	r3, [r7, #12]
 8003610:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003614:	4641      	mov	r1, r8
 8003616:	1851      	adds	r1, r2, r1
 8003618:	6039      	str	r1, [r7, #0]
 800361a:	4649      	mov	r1, r9
 800361c:	414b      	adcs	r3, r1
 800361e:	607b      	str	r3, [r7, #4]
 8003620:	f04f 0200 	mov.w	r2, #0
 8003624:	f04f 0300 	mov.w	r3, #0
 8003628:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800362c:	4659      	mov	r1, fp
 800362e:	00cb      	lsls	r3, r1, #3
 8003630:	4651      	mov	r1, sl
 8003632:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003636:	4651      	mov	r1, sl
 8003638:	00ca      	lsls	r2, r1, #3
 800363a:	4610      	mov	r0, r2
 800363c:	4619      	mov	r1, r3
 800363e:	4603      	mov	r3, r0
 8003640:	4642      	mov	r2, r8
 8003642:	189b      	adds	r3, r3, r2
 8003644:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003646:	464b      	mov	r3, r9
 8003648:	460a      	mov	r2, r1
 800364a:	eb42 0303 	adc.w	r3, r2, r3
 800364e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003650:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	2200      	movs	r2, #0
 8003658:	663b      	str	r3, [r7, #96]	@ 0x60
 800365a:	667a      	str	r2, [r7, #100]	@ 0x64
 800365c:	f04f 0200 	mov.w	r2, #0
 8003660:	f04f 0300 	mov.w	r3, #0
 8003664:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003668:	4649      	mov	r1, r9
 800366a:	008b      	lsls	r3, r1, #2
 800366c:	4641      	mov	r1, r8
 800366e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003672:	4641      	mov	r1, r8
 8003674:	008a      	lsls	r2, r1, #2
 8003676:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800367a:	f7fc fe09 	bl	8000290 <__aeabi_uldivmod>
 800367e:	4602      	mov	r2, r0
 8003680:	460b      	mov	r3, r1
 8003682:	4b0d      	ldr	r3, [pc, #52]	@ (80036b8 <UART_SetConfig+0x4e4>)
 8003684:	fba3 1302 	umull	r1, r3, r3, r2
 8003688:	095b      	lsrs	r3, r3, #5
 800368a:	2164      	movs	r1, #100	@ 0x64
 800368c:	fb01 f303 	mul.w	r3, r1, r3
 8003690:	1ad3      	subs	r3, r2, r3
 8003692:	011b      	lsls	r3, r3, #4
 8003694:	3332      	adds	r3, #50	@ 0x32
 8003696:	4a08      	ldr	r2, [pc, #32]	@ (80036b8 <UART_SetConfig+0x4e4>)
 8003698:	fba2 2303 	umull	r2, r3, r2, r3
 800369c:	095b      	lsrs	r3, r3, #5
 800369e:	f003 020f 	and.w	r2, r3, #15
 80036a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4422      	add	r2, r4
 80036aa:	609a      	str	r2, [r3, #8]
}
 80036ac:	bf00      	nop
 80036ae:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80036b2:	46bd      	mov	sp, r7
 80036b4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80036b8:	51eb851f 	.word	0x51eb851f

080036bc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80036bc:	b084      	sub	sp, #16
 80036be:	b580      	push	{r7, lr}
 80036c0:	b084      	sub	sp, #16
 80036c2:	af00      	add	r7, sp, #0
 80036c4:	6078      	str	r0, [r7, #4]
 80036c6:	f107 001c 	add.w	r0, r7, #28
 80036ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80036ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036d0:	2b01      	cmp	r3, #1
 80036d2:	d122      	bne.n	800371a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036d8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	68db      	ldr	r3, [r3, #12]
 80036e4:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80036e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80036ec:	687a      	ldr	r2, [r7, #4]
 80036ee:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	68db      	ldr	r3, [r3, #12]
 80036f4:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80036fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80036fe:	2b01      	cmp	r3, #1
 8003700:	d105      	bne.n	800370e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	68db      	ldr	r3, [r3, #12]
 8003706:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800370e:	6878      	ldr	r0, [r7, #4]
 8003710:	f000 faa2 	bl	8003c58 <USB_CoreReset>
 8003714:	4603      	mov	r3, r0
 8003716:	73fb      	strb	r3, [r7, #15]
 8003718:	e01a      	b.n	8003750 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	68db      	ldr	r3, [r3, #12]
 800371e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f000 fa96 	bl	8003c58 <USB_CoreReset>
 800372c:	4603      	mov	r3, r0
 800372e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003730:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003732:	2b00      	cmp	r3, #0
 8003734:	d106      	bne.n	8003744 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800373a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	639a      	str	r2, [r3, #56]	@ 0x38
 8003742:	e005      	b.n	8003750 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003748:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003750:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003752:	2b01      	cmp	r3, #1
 8003754:	d10b      	bne.n	800376e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	689b      	ldr	r3, [r3, #8]
 800375a:	f043 0206 	orr.w	r2, r3, #6
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	689b      	ldr	r3, [r3, #8]
 8003766:	f043 0220 	orr.w	r2, r3, #32
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800376e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003770:	4618      	mov	r0, r3
 8003772:	3710      	adds	r7, #16
 8003774:	46bd      	mov	sp, r7
 8003776:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800377a:	b004      	add	sp, #16
 800377c:	4770      	bx	lr

0800377e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800377e:	b480      	push	{r7}
 8003780:	b083      	sub	sp, #12
 8003782:	af00      	add	r7, sp, #0
 8003784:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	f023 0201 	bic.w	r2, r3, #1
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003792:	2300      	movs	r3, #0
}
 8003794:	4618      	mov	r0, r3
 8003796:	370c      	adds	r7, #12
 8003798:	46bd      	mov	sp, r7
 800379a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379e:	4770      	bx	lr

080037a0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b084      	sub	sp, #16
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
 80037a8:	460b      	mov	r3, r1
 80037aa:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80037ac:	2300      	movs	r3, #0
 80037ae:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	68db      	ldr	r3, [r3, #12]
 80037b4:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80037bc:	78fb      	ldrb	r3, [r7, #3]
 80037be:	2b01      	cmp	r3, #1
 80037c0:	d115      	bne.n	80037ee <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	68db      	ldr	r3, [r3, #12]
 80037c6:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80037ce:	2001      	movs	r0, #1
 80037d0:	f7fd fd2a 	bl	8001228 <HAL_Delay>
      ms++;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	3301      	adds	r3, #1
 80037d8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f000 fa2e 	bl	8003c3c <USB_GetMode>
 80037e0:	4603      	mov	r3, r0
 80037e2:	2b01      	cmp	r3, #1
 80037e4:	d01e      	beq.n	8003824 <USB_SetCurrentMode+0x84>
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	2b31      	cmp	r3, #49	@ 0x31
 80037ea:	d9f0      	bls.n	80037ce <USB_SetCurrentMode+0x2e>
 80037ec:	e01a      	b.n	8003824 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80037ee:	78fb      	ldrb	r3, [r7, #3]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d115      	bne.n	8003820 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	68db      	ldr	r3, [r3, #12]
 80037f8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003800:	2001      	movs	r0, #1
 8003802:	f7fd fd11 	bl	8001228 <HAL_Delay>
      ms++;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	3301      	adds	r3, #1
 800380a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800380c:	6878      	ldr	r0, [r7, #4]
 800380e:	f000 fa15 	bl	8003c3c <USB_GetMode>
 8003812:	4603      	mov	r3, r0
 8003814:	2b00      	cmp	r3, #0
 8003816:	d005      	beq.n	8003824 <USB_SetCurrentMode+0x84>
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	2b31      	cmp	r3, #49	@ 0x31
 800381c:	d9f0      	bls.n	8003800 <USB_SetCurrentMode+0x60>
 800381e:	e001      	b.n	8003824 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003820:	2301      	movs	r3, #1
 8003822:	e005      	b.n	8003830 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	2b32      	cmp	r3, #50	@ 0x32
 8003828:	d101      	bne.n	800382e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	e000      	b.n	8003830 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800382e:	2300      	movs	r3, #0
}
 8003830:	4618      	mov	r0, r3
 8003832:	3710      	adds	r7, #16
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}

08003838 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003838:	b084      	sub	sp, #16
 800383a:	b580      	push	{r7, lr}
 800383c:	b086      	sub	sp, #24
 800383e:	af00      	add	r7, sp, #0
 8003840:	6078      	str	r0, [r7, #4]
 8003842:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8003846:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800384a:	2300      	movs	r3, #0
 800384c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003852:	2300      	movs	r3, #0
 8003854:	613b      	str	r3, [r7, #16]
 8003856:	e009      	b.n	800386c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003858:	687a      	ldr	r2, [r7, #4]
 800385a:	693b      	ldr	r3, [r7, #16]
 800385c:	3340      	adds	r3, #64	@ 0x40
 800385e:	009b      	lsls	r3, r3, #2
 8003860:	4413      	add	r3, r2
 8003862:	2200      	movs	r2, #0
 8003864:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	3301      	adds	r3, #1
 800386a:	613b      	str	r3, [r7, #16]
 800386c:	693b      	ldr	r3, [r7, #16]
 800386e:	2b0e      	cmp	r3, #14
 8003870:	d9f2      	bls.n	8003858 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003872:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003874:	2b00      	cmp	r3, #0
 8003876:	d11c      	bne.n	80038b2 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	68fa      	ldr	r2, [r7, #12]
 8003882:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003886:	f043 0302 	orr.w	r3, r3, #2
 800388a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003890:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800389c:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038a8:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	639a      	str	r2, [r3, #56]	@ 0x38
 80038b0:	e00b      	b.n	80038ca <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038b6:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038c2:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	639a      	str	r2, [r3, #56]	@ 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80038d0:	461a      	mov	r2, r3
 80038d2:	2300      	movs	r3, #0
 80038d4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80038dc:	4619      	mov	r1, r3
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80038e4:	461a      	mov	r2, r3
 80038e6:	680b      	ldr	r3, [r1, #0]
 80038e8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80038ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038ec:	2b01      	cmp	r3, #1
 80038ee:	d10c      	bne.n	800390a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80038f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d104      	bne.n	8003900 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80038f6:	2100      	movs	r1, #0
 80038f8:	6878      	ldr	r0, [r7, #4]
 80038fa:	f000 f965 	bl	8003bc8 <USB_SetDevSpeed>
 80038fe:	e008      	b.n	8003912 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003900:	2101      	movs	r1, #1
 8003902:	6878      	ldr	r0, [r7, #4]
 8003904:	f000 f960 	bl	8003bc8 <USB_SetDevSpeed>
 8003908:	e003      	b.n	8003912 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800390a:	2103      	movs	r1, #3
 800390c:	6878      	ldr	r0, [r7, #4]
 800390e:	f000 f95b 	bl	8003bc8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003912:	2110      	movs	r1, #16
 8003914:	6878      	ldr	r0, [r7, #4]
 8003916:	f000 f8f3 	bl	8003b00 <USB_FlushTxFifo>
 800391a:	4603      	mov	r3, r0
 800391c:	2b00      	cmp	r3, #0
 800391e:	d001      	beq.n	8003924 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003924:	6878      	ldr	r0, [r7, #4]
 8003926:	f000 f91f 	bl	8003b68 <USB_FlushRxFifo>
 800392a:	4603      	mov	r3, r0
 800392c:	2b00      	cmp	r3, #0
 800392e:	d001      	beq.n	8003934 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003930:	2301      	movs	r3, #1
 8003932:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800393a:	461a      	mov	r2, r3
 800393c:	2300      	movs	r3, #0
 800393e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003946:	461a      	mov	r2, r3
 8003948:	2300      	movs	r3, #0
 800394a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003952:	461a      	mov	r2, r3
 8003954:	2300      	movs	r3, #0
 8003956:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003958:	2300      	movs	r3, #0
 800395a:	613b      	str	r3, [r7, #16]
 800395c:	e043      	b.n	80039e6 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	015a      	lsls	r2, r3, #5
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	4413      	add	r3, r2
 8003966:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003970:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003974:	d118      	bne.n	80039a8 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d10a      	bne.n	8003992 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800397c:	693b      	ldr	r3, [r7, #16]
 800397e:	015a      	lsls	r2, r3, #5
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	4413      	add	r3, r2
 8003984:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003988:	461a      	mov	r2, r3
 800398a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800398e:	6013      	str	r3, [r2, #0]
 8003990:	e013      	b.n	80039ba <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	015a      	lsls	r2, r3, #5
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	4413      	add	r3, r2
 800399a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800399e:	461a      	mov	r2, r3
 80039a0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80039a4:	6013      	str	r3, [r2, #0]
 80039a6:	e008      	b.n	80039ba <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80039a8:	693b      	ldr	r3, [r7, #16]
 80039aa:	015a      	lsls	r2, r3, #5
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	4413      	add	r3, r2
 80039b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80039b4:	461a      	mov	r2, r3
 80039b6:	2300      	movs	r3, #0
 80039b8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	015a      	lsls	r2, r3, #5
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	4413      	add	r3, r2
 80039c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80039c6:	461a      	mov	r2, r3
 80039c8:	2300      	movs	r3, #0
 80039ca:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80039cc:	693b      	ldr	r3, [r7, #16]
 80039ce:	015a      	lsls	r2, r3, #5
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	4413      	add	r3, r2
 80039d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80039d8:	461a      	mov	r2, r3
 80039da:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80039de:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80039e0:	693b      	ldr	r3, [r7, #16]
 80039e2:	3301      	adds	r3, #1
 80039e4:	613b      	str	r3, [r7, #16]
 80039e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039e8:	693a      	ldr	r2, [r7, #16]
 80039ea:	429a      	cmp	r2, r3
 80039ec:	d3b7      	bcc.n	800395e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80039ee:	2300      	movs	r3, #0
 80039f0:	613b      	str	r3, [r7, #16]
 80039f2:	e043      	b.n	8003a7c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80039f4:	693b      	ldr	r3, [r7, #16]
 80039f6:	015a      	lsls	r2, r3, #5
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	4413      	add	r3, r2
 80039fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003a06:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003a0a:	d118      	bne.n	8003a3e <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d10a      	bne.n	8003a28 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	015a      	lsls	r2, r3, #5
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	4413      	add	r3, r2
 8003a1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a1e:	461a      	mov	r2, r3
 8003a20:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003a24:	6013      	str	r3, [r2, #0]
 8003a26:	e013      	b.n	8003a50 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	015a      	lsls	r2, r3, #5
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	4413      	add	r3, r2
 8003a30:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a34:	461a      	mov	r2, r3
 8003a36:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003a3a:	6013      	str	r3, [r2, #0]
 8003a3c:	e008      	b.n	8003a50 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	015a      	lsls	r2, r3, #5
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	4413      	add	r3, r2
 8003a46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a4a:	461a      	mov	r2, r3
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	015a      	lsls	r2, r3, #5
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	4413      	add	r3, r2
 8003a58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a5c:	461a      	mov	r2, r3
 8003a5e:	2300      	movs	r3, #0
 8003a60:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	015a      	lsls	r2, r3, #5
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	4413      	add	r3, r2
 8003a6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a6e:	461a      	mov	r2, r3
 8003a70:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003a74:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	3301      	adds	r3, #1
 8003a7a:	613b      	str	r3, [r7, #16]
 8003a7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a7e:	693a      	ldr	r2, [r7, #16]
 8003a80:	429a      	cmp	r2, r3
 8003a82:	d3b7      	bcc.n	80039f4 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003a8a:	691b      	ldr	r3, [r3, #16]
 8003a8c:	68fa      	ldr	r2, [r7, #12]
 8003a8e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003a92:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003a96:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8003aa4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003aa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d105      	bne.n	8003ab8 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	699b      	ldr	r3, [r3, #24]
 8003ab0:	f043 0210 	orr.w	r2, r3, #16
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	699a      	ldr	r2, [r3, #24]
 8003abc:	4b0f      	ldr	r3, [pc, #60]	@ (8003afc <USB_DevInit+0x2c4>)
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	687a      	ldr	r2, [r7, #4]
 8003ac2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003ac4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d005      	beq.n	8003ad6 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	699b      	ldr	r3, [r3, #24]
 8003ace:	f043 0208 	orr.w	r2, r3, #8
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003ad6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003ad8:	2b01      	cmp	r3, #1
 8003ada:	d107      	bne.n	8003aec <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	699b      	ldr	r3, [r3, #24]
 8003ae0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003ae4:	f043 0304 	orr.w	r3, r3, #4
 8003ae8:	687a      	ldr	r2, [r7, #4]
 8003aea:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003aec:	7dfb      	ldrb	r3, [r7, #23]
}
 8003aee:	4618      	mov	r0, r3
 8003af0:	3718      	adds	r7, #24
 8003af2:	46bd      	mov	sp, r7
 8003af4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003af8:	b004      	add	sp, #16
 8003afa:	4770      	bx	lr
 8003afc:	803c3800 	.word	0x803c3800

08003b00 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003b00:	b480      	push	{r7}
 8003b02:	b085      	sub	sp, #20
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
 8003b08:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	3301      	adds	r3, #1
 8003b12:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	4a13      	ldr	r2, [pc, #76]	@ (8003b64 <USB_FlushTxFifo+0x64>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d901      	bls.n	8003b20 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003b1c:	2303      	movs	r3, #3
 8003b1e:	e01b      	b.n	8003b58 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	691b      	ldr	r3, [r3, #16]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	daf2      	bge.n	8003b0e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	019b      	lsls	r3, r3, #6
 8003b30:	f043 0220 	orr.w	r2, r3, #32
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	3301      	adds	r3, #1
 8003b3c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	4a08      	ldr	r2, [pc, #32]	@ (8003b64 <USB_FlushTxFifo+0x64>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d901      	bls.n	8003b4a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003b46:	2303      	movs	r3, #3
 8003b48:	e006      	b.n	8003b58 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	691b      	ldr	r3, [r3, #16]
 8003b4e:	f003 0320 	and.w	r3, r3, #32
 8003b52:	2b20      	cmp	r3, #32
 8003b54:	d0f0      	beq.n	8003b38 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003b56:	2300      	movs	r3, #0
}
 8003b58:	4618      	mov	r0, r3
 8003b5a:	3714      	adds	r7, #20
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b62:	4770      	bx	lr
 8003b64:	00030d40 	.word	0x00030d40

08003b68 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b085      	sub	sp, #20
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003b70:	2300      	movs	r3, #0
 8003b72:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	3301      	adds	r3, #1
 8003b78:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	4a11      	ldr	r2, [pc, #68]	@ (8003bc4 <USB_FlushRxFifo+0x5c>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d901      	bls.n	8003b86 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003b82:	2303      	movs	r3, #3
 8003b84:	e018      	b.n	8003bb8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	691b      	ldr	r3, [r3, #16]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	daf2      	bge.n	8003b74 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003b8e:	2300      	movs	r3, #0
 8003b90:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2210      	movs	r2, #16
 8003b96:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	3301      	adds	r3, #1
 8003b9c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	4a08      	ldr	r2, [pc, #32]	@ (8003bc4 <USB_FlushRxFifo+0x5c>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d901      	bls.n	8003baa <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003ba6:	2303      	movs	r3, #3
 8003ba8:	e006      	b.n	8003bb8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	691b      	ldr	r3, [r3, #16]
 8003bae:	f003 0310 	and.w	r3, r3, #16
 8003bb2:	2b10      	cmp	r3, #16
 8003bb4:	d0f0      	beq.n	8003b98 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003bb6:	2300      	movs	r3, #0
}
 8003bb8:	4618      	mov	r0, r3
 8003bba:	3714      	adds	r7, #20
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc2:	4770      	bx	lr
 8003bc4:	00030d40 	.word	0x00030d40

08003bc8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b085      	sub	sp, #20
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
 8003bd0:	460b      	mov	r3, r1
 8003bd2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003bde:	681a      	ldr	r2, [r3, #0]
 8003be0:	78fb      	ldrb	r3, [r7, #3]
 8003be2:	68f9      	ldr	r1, [r7, #12]
 8003be4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003be8:	4313      	orrs	r3, r2
 8003bea:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003bec:	2300      	movs	r3, #0
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	3714      	adds	r7, #20
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf8:	4770      	bx	lr

08003bfa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003bfa:	b480      	push	{r7}
 8003bfc:	b085      	sub	sp, #20
 8003bfe:	af00      	add	r7, sp, #0
 8003c00:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	68fa      	ldr	r2, [r7, #12]
 8003c10:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8003c14:	f023 0303 	bic.w	r3, r3, #3
 8003c18:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	68fa      	ldr	r2, [r7, #12]
 8003c24:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003c28:	f043 0302 	orr.w	r3, r3, #2
 8003c2c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003c2e:	2300      	movs	r3, #0
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	3714      	adds	r7, #20
 8003c34:	46bd      	mov	sp, r7
 8003c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3a:	4770      	bx	lr

08003c3c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b083      	sub	sp, #12
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	695b      	ldr	r3, [r3, #20]
 8003c48:	f003 0301 	and.w	r3, r3, #1
}
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	370c      	adds	r7, #12
 8003c50:	46bd      	mov	sp, r7
 8003c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c56:	4770      	bx	lr

08003c58 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b085      	sub	sp, #20
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003c60:	2300      	movs	r3, #0
 8003c62:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	3301      	adds	r3, #1
 8003c68:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	4a13      	ldr	r2, [pc, #76]	@ (8003cbc <USB_CoreReset+0x64>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d901      	bls.n	8003c76 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003c72:	2303      	movs	r3, #3
 8003c74:	e01b      	b.n	8003cae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	691b      	ldr	r3, [r3, #16]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	daf2      	bge.n	8003c64 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003c7e:	2300      	movs	r3, #0
 8003c80:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	691b      	ldr	r3, [r3, #16]
 8003c86:	f043 0201 	orr.w	r2, r3, #1
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	3301      	adds	r3, #1
 8003c92:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	4a09      	ldr	r2, [pc, #36]	@ (8003cbc <USB_CoreReset+0x64>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d901      	bls.n	8003ca0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003c9c:	2303      	movs	r3, #3
 8003c9e:	e006      	b.n	8003cae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	691b      	ldr	r3, [r3, #16]
 8003ca4:	f003 0301 	and.w	r3, r3, #1
 8003ca8:	2b01      	cmp	r3, #1
 8003caa:	d0f0      	beq.n	8003c8e <USB_CoreReset+0x36>

  return HAL_OK;
 8003cac:	2300      	movs	r3, #0
}
 8003cae:	4618      	mov	r0, r3
 8003cb0:	3714      	adds	r7, #20
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb8:	4770      	bx	lr
 8003cba:	bf00      	nop
 8003cbc:	00030d40 	.word	0x00030d40

08003cc0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b085      	sub	sp, #20
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003cce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003cd2:	2b84      	cmp	r3, #132	@ 0x84
 8003cd4:	d005      	beq.n	8003ce2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003cd6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	4413      	add	r3, r2
 8003cde:	3303      	adds	r3, #3
 8003ce0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
}
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	3714      	adds	r7, #20
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cee:	4770      	bx	lr

08003cf0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003cf4:	f000 fe7a 	bl	80049ec <vTaskStartScheduler>
  
  return osOK;
 8003cf8:	2300      	movs	r3, #0
}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	bd80      	pop	{r7, pc}

08003cfe <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003cfe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d00:	b087      	sub	sp, #28
 8003d02:	af02      	add	r7, sp, #8
 8003d04:	6078      	str	r0, [r7, #4]
 8003d06:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	685c      	ldr	r4, [r3, #4]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003d14:	b29e      	uxth	r6, r3
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	f7ff ffcf 	bl	8003cc0 <makeFreeRtosPriority>
 8003d22:	4602      	mov	r2, r0
 8003d24:	f107 030c 	add.w	r3, r7, #12
 8003d28:	9301      	str	r3, [sp, #4]
 8003d2a:	9200      	str	r2, [sp, #0]
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	4632      	mov	r2, r6
 8003d30:	4629      	mov	r1, r5
 8003d32:	4620      	mov	r0, r4
 8003d34:	f000 fcd8 	bl	80046e8 <xTaskCreate>
 8003d38:	4603      	mov	r3, r0
 8003d3a:	2b01      	cmp	r3, #1
 8003d3c:	d001      	beq.n	8003d42 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 8003d3e:	2300      	movs	r3, #0
 8003d40:	e000      	b.n	8003d44 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 8003d42:	68fb      	ldr	r3, [r7, #12]
}
 8003d44:	4618      	mov	r0, r3
 8003d46:	3714      	adds	r7, #20
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003d4c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b084      	sub	sp, #16
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d001      	beq.n	8003d62 <osDelay+0x16>
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	e000      	b.n	8003d64 <osDelay+0x18>
 8003d62:	2301      	movs	r3, #1
 8003d64:	4618      	mov	r0, r3
 8003d66:	f000 fe0b 	bl	8004980 <vTaskDelay>
  
  return osOK;
 8003d6a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	3710      	adds	r7, #16
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bd80      	pop	{r7, pc}

08003d74 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003d74:	b480      	push	{r7}
 8003d76:	b083      	sub	sp, #12
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	f103 0208 	add.w	r2, r3, #8
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	f04f 32ff 	mov.w	r2, #4294967295
 8003d8c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	f103 0208 	add.w	r2, r3, #8
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	f103 0208 	add.w	r2, r3, #8
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2200      	movs	r2, #0
 8003da6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003da8:	bf00      	nop
 8003daa:	370c      	adds	r7, #12
 8003dac:	46bd      	mov	sp, r7
 8003dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db2:	4770      	bx	lr

08003db4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003db4:	b480      	push	{r7}
 8003db6:	b083      	sub	sp, #12
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003dc2:	bf00      	nop
 8003dc4:	370c      	adds	r7, #12
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dcc:	4770      	bx	lr

08003dce <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003dce:	b480      	push	{r7}
 8003dd0:	b085      	sub	sp, #20
 8003dd2:	af00      	add	r7, sp, #0
 8003dd4:	6078      	str	r0, [r7, #4]
 8003dd6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	68fa      	ldr	r2, [r7, #12]
 8003de2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	689a      	ldr	r2, [r3, #8]
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	689b      	ldr	r3, [r3, #8]
 8003df0:	683a      	ldr	r2, [r7, #0]
 8003df2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	683a      	ldr	r2, [r7, #0]
 8003df8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	687a      	ldr	r2, [r7, #4]
 8003dfe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	1c5a      	adds	r2, r3, #1
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	601a      	str	r2, [r3, #0]
}
 8003e0a:	bf00      	nop
 8003e0c:	3714      	adds	r7, #20
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e14:	4770      	bx	lr

08003e16 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003e16:	b480      	push	{r7}
 8003e18:	b085      	sub	sp, #20
 8003e1a:	af00      	add	r7, sp, #0
 8003e1c:	6078      	str	r0, [r7, #4]
 8003e1e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003e26:	68bb      	ldr	r3, [r7, #8]
 8003e28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e2c:	d103      	bne.n	8003e36 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	691b      	ldr	r3, [r3, #16]
 8003e32:	60fb      	str	r3, [r7, #12]
 8003e34:	e00c      	b.n	8003e50 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	3308      	adds	r3, #8
 8003e3a:	60fb      	str	r3, [r7, #12]
 8003e3c:	e002      	b.n	8003e44 <vListInsert+0x2e>
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	60fb      	str	r3, [r7, #12]
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	68ba      	ldr	r2, [r7, #8]
 8003e4c:	429a      	cmp	r2, r3
 8003e4e:	d2f6      	bcs.n	8003e3e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	685a      	ldr	r2, [r3, #4]
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	683a      	ldr	r2, [r7, #0]
 8003e5e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	68fa      	ldr	r2, [r7, #12]
 8003e64:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	683a      	ldr	r2, [r7, #0]
 8003e6a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	687a      	ldr	r2, [r7, #4]
 8003e70:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	1c5a      	adds	r2, r3, #1
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	601a      	str	r2, [r3, #0]
}
 8003e7c:	bf00      	nop
 8003e7e:	3714      	adds	r7, #20
 8003e80:	46bd      	mov	sp, r7
 8003e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e86:	4770      	bx	lr

08003e88 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003e88:	b480      	push	{r7}
 8003e8a:	b085      	sub	sp, #20
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	691b      	ldr	r3, [r3, #16]
 8003e94:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	687a      	ldr	r2, [r7, #4]
 8003e9c:	6892      	ldr	r2, [r2, #8]
 8003e9e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	689b      	ldr	r3, [r3, #8]
 8003ea4:	687a      	ldr	r2, [r7, #4]
 8003ea6:	6852      	ldr	r2, [r2, #4]
 8003ea8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	687a      	ldr	r2, [r7, #4]
 8003eb0:	429a      	cmp	r2, r3
 8003eb2:	d103      	bne.n	8003ebc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	689a      	ldr	r2, [r3, #8]
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	1e5a      	subs	r2, r3, #1
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
}
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	3714      	adds	r7, #20
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eda:	4770      	bx	lr

08003edc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b084      	sub	sp, #16
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
 8003ee4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d10b      	bne.n	8003f08 <xQueueGenericReset+0x2c>
	__asm volatile
 8003ef0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ef4:	f383 8811 	msr	BASEPRI, r3
 8003ef8:	f3bf 8f6f 	isb	sy
 8003efc:	f3bf 8f4f 	dsb	sy
 8003f00:	60bb      	str	r3, [r7, #8]
}
 8003f02:	bf00      	nop
 8003f04:	bf00      	nop
 8003f06:	e7fd      	b.n	8003f04 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003f08:	f001 fcae 	bl	8005868 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681a      	ldr	r2, [r3, #0]
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f14:	68f9      	ldr	r1, [r7, #12]
 8003f16:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003f18:	fb01 f303 	mul.w	r3, r1, r3
 8003f1c:	441a      	add	r2, r3
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	2200      	movs	r2, #0
 8003f26:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681a      	ldr	r2, [r3, #0]
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681a      	ldr	r2, [r3, #0]
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f38:	3b01      	subs	r3, #1
 8003f3a:	68f9      	ldr	r1, [r7, #12]
 8003f3c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003f3e:	fb01 f303 	mul.w	r3, r1, r3
 8003f42:	441a      	add	r2, r3
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	22ff      	movs	r2, #255	@ 0xff
 8003f4c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	22ff      	movs	r2, #255	@ 0xff
 8003f54:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d114      	bne.n	8003f88 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	691b      	ldr	r3, [r3, #16]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d01a      	beq.n	8003f9c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	3310      	adds	r3, #16
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	f000 ff80 	bl	8004e70 <xTaskRemoveFromEventList>
 8003f70:	4603      	mov	r3, r0
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d012      	beq.n	8003f9c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003f76:	4b0d      	ldr	r3, [pc, #52]	@ (8003fac <xQueueGenericReset+0xd0>)
 8003f78:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003f7c:	601a      	str	r2, [r3, #0]
 8003f7e:	f3bf 8f4f 	dsb	sy
 8003f82:	f3bf 8f6f 	isb	sy
 8003f86:	e009      	b.n	8003f9c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	3310      	adds	r3, #16
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	f7ff fef1 	bl	8003d74 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	3324      	adds	r3, #36	@ 0x24
 8003f96:	4618      	mov	r0, r3
 8003f98:	f7ff feec 	bl	8003d74 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003f9c:	f001 fc96 	bl	80058cc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003fa0:	2301      	movs	r3, #1
}
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	3710      	adds	r7, #16
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}
 8003faa:	bf00      	nop
 8003fac:	e000ed04 	.word	0xe000ed04

08003fb0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b08a      	sub	sp, #40	@ 0x28
 8003fb4:	af02      	add	r7, sp, #8
 8003fb6:	60f8      	str	r0, [r7, #12]
 8003fb8:	60b9      	str	r1, [r7, #8]
 8003fba:	4613      	mov	r3, r2
 8003fbc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d10b      	bne.n	8003fdc <xQueueGenericCreate+0x2c>
	__asm volatile
 8003fc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fc8:	f383 8811 	msr	BASEPRI, r3
 8003fcc:	f3bf 8f6f 	isb	sy
 8003fd0:	f3bf 8f4f 	dsb	sy
 8003fd4:	613b      	str	r3, [r7, #16]
}
 8003fd6:	bf00      	nop
 8003fd8:	bf00      	nop
 8003fda:	e7fd      	b.n	8003fd8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	68ba      	ldr	r2, [r7, #8]
 8003fe0:	fb02 f303 	mul.w	r3, r2, r3
 8003fe4:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003fe6:	69fb      	ldr	r3, [r7, #28]
 8003fe8:	3348      	adds	r3, #72	@ 0x48
 8003fea:	4618      	mov	r0, r3
 8003fec:	f001 fd1c 	bl	8005a28 <pvPortMalloc>
 8003ff0:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003ff2:	69bb      	ldr	r3, [r7, #24]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d00d      	beq.n	8004014 <xQueueGenericCreate+0x64>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003ff8:	69bb      	ldr	r3, [r7, #24]
 8003ffa:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003ffc:	697b      	ldr	r3, [r7, #20]
 8003ffe:	3348      	adds	r3, #72	@ 0x48
 8004000:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004002:	79fa      	ldrb	r2, [r7, #7]
 8004004:	69bb      	ldr	r3, [r7, #24]
 8004006:	9300      	str	r3, [sp, #0]
 8004008:	4613      	mov	r3, r2
 800400a:	697a      	ldr	r2, [r7, #20]
 800400c:	68b9      	ldr	r1, [r7, #8]
 800400e:	68f8      	ldr	r0, [r7, #12]
 8004010:	f000 f805 	bl	800401e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004014:	69bb      	ldr	r3, [r7, #24]
	}
 8004016:	4618      	mov	r0, r3
 8004018:	3720      	adds	r7, #32
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}

0800401e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800401e:	b580      	push	{r7, lr}
 8004020:	b084      	sub	sp, #16
 8004022:	af00      	add	r7, sp, #0
 8004024:	60f8      	str	r0, [r7, #12]
 8004026:	60b9      	str	r1, [r7, #8]
 8004028:	607a      	str	r2, [r7, #4]
 800402a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d103      	bne.n	800403a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004032:	69bb      	ldr	r3, [r7, #24]
 8004034:	69ba      	ldr	r2, [r7, #24]
 8004036:	601a      	str	r2, [r3, #0]
 8004038:	e002      	b.n	8004040 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800403a:	69bb      	ldr	r3, [r7, #24]
 800403c:	687a      	ldr	r2, [r7, #4]
 800403e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004040:	69bb      	ldr	r3, [r7, #24]
 8004042:	68fa      	ldr	r2, [r7, #12]
 8004044:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004046:	69bb      	ldr	r3, [r7, #24]
 8004048:	68ba      	ldr	r2, [r7, #8]
 800404a:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800404c:	2101      	movs	r1, #1
 800404e:	69b8      	ldr	r0, [r7, #24]
 8004050:	f7ff ff44 	bl	8003edc <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004054:	bf00      	nop
 8004056:	3710      	adds	r7, #16
 8004058:	46bd      	mov	sp, r7
 800405a:	bd80      	pop	{r7, pc}

0800405c <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800405c:	b580      	push	{r7, lr}
 800405e:	b082      	sub	sp, #8
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d00e      	beq.n	8004088 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2200      	movs	r2, #0
 800406e:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2200      	movs	r2, #0
 8004074:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2200      	movs	r2, #0
 800407a:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800407c:	2300      	movs	r3, #0
 800407e:	2200      	movs	r2, #0
 8004080:	2100      	movs	r1, #0
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	f000 f81c 	bl	80040c0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8004088:	bf00      	nop
 800408a:	3708      	adds	r7, #8
 800408c:	46bd      	mov	sp, r7
 800408e:	bd80      	pop	{r7, pc}

08004090 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8004090:	b580      	push	{r7, lr}
 8004092:	b086      	sub	sp, #24
 8004094:	af00      	add	r7, sp, #0
 8004096:	4603      	mov	r3, r0
 8004098:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800409a:	2301      	movs	r3, #1
 800409c:	617b      	str	r3, [r7, #20]
 800409e:	2300      	movs	r3, #0
 80040a0:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80040a2:	79fb      	ldrb	r3, [r7, #7]
 80040a4:	461a      	mov	r2, r3
 80040a6:	6939      	ldr	r1, [r7, #16]
 80040a8:	6978      	ldr	r0, [r7, #20]
 80040aa:	f7ff ff81 	bl	8003fb0 <xQueueGenericCreate>
 80040ae:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80040b0:	68f8      	ldr	r0, [r7, #12]
 80040b2:	f7ff ffd3 	bl	800405c <prvInitialiseMutex>

		return xNewQueue;
 80040b6:	68fb      	ldr	r3, [r7, #12]
	}
 80040b8:	4618      	mov	r0, r3
 80040ba:	3718      	adds	r7, #24
 80040bc:	46bd      	mov	sp, r7
 80040be:	bd80      	pop	{r7, pc}

080040c0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b08e      	sub	sp, #56	@ 0x38
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	60f8      	str	r0, [r7, #12]
 80040c8:	60b9      	str	r1, [r7, #8]
 80040ca:	607a      	str	r2, [r7, #4]
 80040cc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80040ce:	2300      	movs	r3, #0
 80040d0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80040d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d10b      	bne.n	80040f4 <xQueueGenericSend+0x34>
	__asm volatile
 80040dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040e0:	f383 8811 	msr	BASEPRI, r3
 80040e4:	f3bf 8f6f 	isb	sy
 80040e8:	f3bf 8f4f 	dsb	sy
 80040ec:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80040ee:	bf00      	nop
 80040f0:	bf00      	nop
 80040f2:	e7fd      	b.n	80040f0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d103      	bne.n	8004102 <xQueueGenericSend+0x42>
 80040fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d101      	bne.n	8004106 <xQueueGenericSend+0x46>
 8004102:	2301      	movs	r3, #1
 8004104:	e000      	b.n	8004108 <xQueueGenericSend+0x48>
 8004106:	2300      	movs	r3, #0
 8004108:	2b00      	cmp	r3, #0
 800410a:	d10b      	bne.n	8004124 <xQueueGenericSend+0x64>
	__asm volatile
 800410c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004110:	f383 8811 	msr	BASEPRI, r3
 8004114:	f3bf 8f6f 	isb	sy
 8004118:	f3bf 8f4f 	dsb	sy
 800411c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800411e:	bf00      	nop
 8004120:	bf00      	nop
 8004122:	e7fd      	b.n	8004120 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	2b02      	cmp	r3, #2
 8004128:	d103      	bne.n	8004132 <xQueueGenericSend+0x72>
 800412a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800412c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800412e:	2b01      	cmp	r3, #1
 8004130:	d101      	bne.n	8004136 <xQueueGenericSend+0x76>
 8004132:	2301      	movs	r3, #1
 8004134:	e000      	b.n	8004138 <xQueueGenericSend+0x78>
 8004136:	2300      	movs	r3, #0
 8004138:	2b00      	cmp	r3, #0
 800413a:	d10b      	bne.n	8004154 <xQueueGenericSend+0x94>
	__asm volatile
 800413c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004140:	f383 8811 	msr	BASEPRI, r3
 8004144:	f3bf 8f6f 	isb	sy
 8004148:	f3bf 8f4f 	dsb	sy
 800414c:	623b      	str	r3, [r7, #32]
}
 800414e:	bf00      	nop
 8004150:	bf00      	nop
 8004152:	e7fd      	b.n	8004150 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004154:	f001 f832 	bl	80051bc <xTaskGetSchedulerState>
 8004158:	4603      	mov	r3, r0
 800415a:	2b00      	cmp	r3, #0
 800415c:	d102      	bne.n	8004164 <xQueueGenericSend+0xa4>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d101      	bne.n	8004168 <xQueueGenericSend+0xa8>
 8004164:	2301      	movs	r3, #1
 8004166:	e000      	b.n	800416a <xQueueGenericSend+0xaa>
 8004168:	2300      	movs	r3, #0
 800416a:	2b00      	cmp	r3, #0
 800416c:	d10b      	bne.n	8004186 <xQueueGenericSend+0xc6>
	__asm volatile
 800416e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004172:	f383 8811 	msr	BASEPRI, r3
 8004176:	f3bf 8f6f 	isb	sy
 800417a:	f3bf 8f4f 	dsb	sy
 800417e:	61fb      	str	r3, [r7, #28]
}
 8004180:	bf00      	nop
 8004182:	bf00      	nop
 8004184:	e7fd      	b.n	8004182 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004186:	f001 fb6f 	bl	8005868 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800418a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800418c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800418e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004190:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004192:	429a      	cmp	r2, r3
 8004194:	d302      	bcc.n	800419c <xQueueGenericSend+0xdc>
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	2b02      	cmp	r3, #2
 800419a:	d129      	bne.n	80041f0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800419c:	683a      	ldr	r2, [r7, #0]
 800419e:	68b9      	ldr	r1, [r7, #8]
 80041a0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80041a2:	f000 f9b7 	bl	8004514 <prvCopyDataToQueue>
 80041a6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80041a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d010      	beq.n	80041d2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80041b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041b2:	3324      	adds	r3, #36	@ 0x24
 80041b4:	4618      	mov	r0, r3
 80041b6:	f000 fe5b 	bl	8004e70 <xTaskRemoveFromEventList>
 80041ba:	4603      	mov	r3, r0
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d013      	beq.n	80041e8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80041c0:	4b3f      	ldr	r3, [pc, #252]	@ (80042c0 <xQueueGenericSend+0x200>)
 80041c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80041c6:	601a      	str	r2, [r3, #0]
 80041c8:	f3bf 8f4f 	dsb	sy
 80041cc:	f3bf 8f6f 	isb	sy
 80041d0:	e00a      	b.n	80041e8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80041d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d007      	beq.n	80041e8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80041d8:	4b39      	ldr	r3, [pc, #228]	@ (80042c0 <xQueueGenericSend+0x200>)
 80041da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80041de:	601a      	str	r2, [r3, #0]
 80041e0:	f3bf 8f4f 	dsb	sy
 80041e4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80041e8:	f001 fb70 	bl	80058cc <vPortExitCritical>
				return pdPASS;
 80041ec:	2301      	movs	r3, #1
 80041ee:	e063      	b.n	80042b8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d103      	bne.n	80041fe <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80041f6:	f001 fb69 	bl	80058cc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80041fa:	2300      	movs	r3, #0
 80041fc:	e05c      	b.n	80042b8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80041fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004200:	2b00      	cmp	r3, #0
 8004202:	d106      	bne.n	8004212 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004204:	f107 0314 	add.w	r3, r7, #20
 8004208:	4618      	mov	r0, r3
 800420a:	f000 fe95 	bl	8004f38 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800420e:	2301      	movs	r3, #1
 8004210:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004212:	f001 fb5b 	bl	80058cc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004216:	f000 fc3b 	bl	8004a90 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800421a:	f001 fb25 	bl	8005868 <vPortEnterCritical>
 800421e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004220:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004224:	b25b      	sxtb	r3, r3
 8004226:	f1b3 3fff 	cmp.w	r3, #4294967295
 800422a:	d103      	bne.n	8004234 <xQueueGenericSend+0x174>
 800422c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800422e:	2200      	movs	r2, #0
 8004230:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004234:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004236:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800423a:	b25b      	sxtb	r3, r3
 800423c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004240:	d103      	bne.n	800424a <xQueueGenericSend+0x18a>
 8004242:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004244:	2200      	movs	r2, #0
 8004246:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800424a:	f001 fb3f 	bl	80058cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800424e:	1d3a      	adds	r2, r7, #4
 8004250:	f107 0314 	add.w	r3, r7, #20
 8004254:	4611      	mov	r1, r2
 8004256:	4618      	mov	r0, r3
 8004258:	f000 fe84 	bl	8004f64 <xTaskCheckForTimeOut>
 800425c:	4603      	mov	r3, r0
 800425e:	2b00      	cmp	r3, #0
 8004260:	d124      	bne.n	80042ac <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004262:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004264:	f000 fa28 	bl	80046b8 <prvIsQueueFull>
 8004268:	4603      	mov	r3, r0
 800426a:	2b00      	cmp	r3, #0
 800426c:	d018      	beq.n	80042a0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800426e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004270:	3310      	adds	r3, #16
 8004272:	687a      	ldr	r2, [r7, #4]
 8004274:	4611      	mov	r1, r2
 8004276:	4618      	mov	r0, r3
 8004278:	f000 fdd4 	bl	8004e24 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800427c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800427e:	f000 f9b3 	bl	80045e8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004282:	f000 fc13 	bl	8004aac <xTaskResumeAll>
 8004286:	4603      	mov	r3, r0
 8004288:	2b00      	cmp	r3, #0
 800428a:	f47f af7c 	bne.w	8004186 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800428e:	4b0c      	ldr	r3, [pc, #48]	@ (80042c0 <xQueueGenericSend+0x200>)
 8004290:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004294:	601a      	str	r2, [r3, #0]
 8004296:	f3bf 8f4f 	dsb	sy
 800429a:	f3bf 8f6f 	isb	sy
 800429e:	e772      	b.n	8004186 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80042a0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80042a2:	f000 f9a1 	bl	80045e8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80042a6:	f000 fc01 	bl	8004aac <xTaskResumeAll>
 80042aa:	e76c      	b.n	8004186 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80042ac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80042ae:	f000 f99b 	bl	80045e8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80042b2:	f000 fbfb 	bl	8004aac <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80042b6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80042b8:	4618      	mov	r0, r3
 80042ba:	3738      	adds	r7, #56	@ 0x38
 80042bc:	46bd      	mov	sp, r7
 80042be:	bd80      	pop	{r7, pc}
 80042c0:	e000ed04 	.word	0xe000ed04

080042c4 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b08e      	sub	sp, #56	@ 0x38
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
 80042cc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80042ce:	2300      	movs	r3, #0
 80042d0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80042d6:	2300      	movs	r3, #0
 80042d8:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80042da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d10b      	bne.n	80042f8 <xQueueSemaphoreTake+0x34>
	__asm volatile
 80042e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042e4:	f383 8811 	msr	BASEPRI, r3
 80042e8:	f3bf 8f6f 	isb	sy
 80042ec:	f3bf 8f4f 	dsb	sy
 80042f0:	623b      	str	r3, [r7, #32]
}
 80042f2:	bf00      	nop
 80042f4:	bf00      	nop
 80042f6:	e7fd      	b.n	80042f4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80042f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d00b      	beq.n	8004318 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8004300:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004304:	f383 8811 	msr	BASEPRI, r3
 8004308:	f3bf 8f6f 	isb	sy
 800430c:	f3bf 8f4f 	dsb	sy
 8004310:	61fb      	str	r3, [r7, #28]
}
 8004312:	bf00      	nop
 8004314:	bf00      	nop
 8004316:	e7fd      	b.n	8004314 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004318:	f000 ff50 	bl	80051bc <xTaskGetSchedulerState>
 800431c:	4603      	mov	r3, r0
 800431e:	2b00      	cmp	r3, #0
 8004320:	d102      	bne.n	8004328 <xQueueSemaphoreTake+0x64>
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d101      	bne.n	800432c <xQueueSemaphoreTake+0x68>
 8004328:	2301      	movs	r3, #1
 800432a:	e000      	b.n	800432e <xQueueSemaphoreTake+0x6a>
 800432c:	2300      	movs	r3, #0
 800432e:	2b00      	cmp	r3, #0
 8004330:	d10b      	bne.n	800434a <xQueueSemaphoreTake+0x86>
	__asm volatile
 8004332:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004336:	f383 8811 	msr	BASEPRI, r3
 800433a:	f3bf 8f6f 	isb	sy
 800433e:	f3bf 8f4f 	dsb	sy
 8004342:	61bb      	str	r3, [r7, #24]
}
 8004344:	bf00      	nop
 8004346:	bf00      	nop
 8004348:	e7fd      	b.n	8004346 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800434a:	f001 fa8d 	bl	8005868 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800434e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004350:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004352:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004354:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004356:	2b00      	cmp	r3, #0
 8004358:	d024      	beq.n	80043a4 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800435a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800435c:	1e5a      	subs	r2, r3, #1
 800435e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004360:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004362:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d104      	bne.n	8004374 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800436a:	f001 f8d3 	bl	8005514 <pvTaskIncrementMutexHeldCount>
 800436e:	4602      	mov	r2, r0
 8004370:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004372:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004374:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004376:	691b      	ldr	r3, [r3, #16]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d00f      	beq.n	800439c <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800437c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800437e:	3310      	adds	r3, #16
 8004380:	4618      	mov	r0, r3
 8004382:	f000 fd75 	bl	8004e70 <xTaskRemoveFromEventList>
 8004386:	4603      	mov	r3, r0
 8004388:	2b00      	cmp	r3, #0
 800438a:	d007      	beq.n	800439c <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800438c:	4b54      	ldr	r3, [pc, #336]	@ (80044e0 <xQueueSemaphoreTake+0x21c>)
 800438e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004392:	601a      	str	r2, [r3, #0]
 8004394:	f3bf 8f4f 	dsb	sy
 8004398:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800439c:	f001 fa96 	bl	80058cc <vPortExitCritical>
				return pdPASS;
 80043a0:	2301      	movs	r3, #1
 80043a2:	e098      	b.n	80044d6 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d112      	bne.n	80043d0 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80043aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d00b      	beq.n	80043c8 <xQueueSemaphoreTake+0x104>
	__asm volatile
 80043b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043b4:	f383 8811 	msr	BASEPRI, r3
 80043b8:	f3bf 8f6f 	isb	sy
 80043bc:	f3bf 8f4f 	dsb	sy
 80043c0:	617b      	str	r3, [r7, #20]
}
 80043c2:	bf00      	nop
 80043c4:	bf00      	nop
 80043c6:	e7fd      	b.n	80043c4 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80043c8:	f001 fa80 	bl	80058cc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80043cc:	2300      	movs	r3, #0
 80043ce:	e082      	b.n	80044d6 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 80043d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d106      	bne.n	80043e4 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80043d6:	f107 030c 	add.w	r3, r7, #12
 80043da:	4618      	mov	r0, r3
 80043dc:	f000 fdac 	bl	8004f38 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80043e0:	2301      	movs	r3, #1
 80043e2:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80043e4:	f001 fa72 	bl	80058cc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80043e8:	f000 fb52 	bl	8004a90 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80043ec:	f001 fa3c 	bl	8005868 <vPortEnterCritical>
 80043f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043f2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80043f6:	b25b      	sxtb	r3, r3
 80043f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043fc:	d103      	bne.n	8004406 <xQueueSemaphoreTake+0x142>
 80043fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004400:	2200      	movs	r2, #0
 8004402:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004406:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004408:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800440c:	b25b      	sxtb	r3, r3
 800440e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004412:	d103      	bne.n	800441c <xQueueSemaphoreTake+0x158>
 8004414:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004416:	2200      	movs	r2, #0
 8004418:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800441c:	f001 fa56 	bl	80058cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004420:	463a      	mov	r2, r7
 8004422:	f107 030c 	add.w	r3, r7, #12
 8004426:	4611      	mov	r1, r2
 8004428:	4618      	mov	r0, r3
 800442a:	f000 fd9b 	bl	8004f64 <xTaskCheckForTimeOut>
 800442e:	4603      	mov	r3, r0
 8004430:	2b00      	cmp	r3, #0
 8004432:	d132      	bne.n	800449a <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004434:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004436:	f000 f929 	bl	800468c <prvIsQueueEmpty>
 800443a:	4603      	mov	r3, r0
 800443c:	2b00      	cmp	r3, #0
 800443e:	d026      	beq.n	800448e <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004440:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d109      	bne.n	800445c <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8004448:	f001 fa0e 	bl	8005868 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800444c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800444e:	689b      	ldr	r3, [r3, #8]
 8004450:	4618      	mov	r0, r3
 8004452:	f000 fed1 	bl	80051f8 <xTaskPriorityInherit>
 8004456:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8004458:	f001 fa38 	bl	80058cc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800445c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800445e:	3324      	adds	r3, #36	@ 0x24
 8004460:	683a      	ldr	r2, [r7, #0]
 8004462:	4611      	mov	r1, r2
 8004464:	4618      	mov	r0, r3
 8004466:	f000 fcdd 	bl	8004e24 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800446a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800446c:	f000 f8bc 	bl	80045e8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004470:	f000 fb1c 	bl	8004aac <xTaskResumeAll>
 8004474:	4603      	mov	r3, r0
 8004476:	2b00      	cmp	r3, #0
 8004478:	f47f af67 	bne.w	800434a <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800447c:	4b18      	ldr	r3, [pc, #96]	@ (80044e0 <xQueueSemaphoreTake+0x21c>)
 800447e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004482:	601a      	str	r2, [r3, #0]
 8004484:	f3bf 8f4f 	dsb	sy
 8004488:	f3bf 8f6f 	isb	sy
 800448c:	e75d      	b.n	800434a <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800448e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004490:	f000 f8aa 	bl	80045e8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004494:	f000 fb0a 	bl	8004aac <xTaskResumeAll>
 8004498:	e757      	b.n	800434a <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800449a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800449c:	f000 f8a4 	bl	80045e8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80044a0:	f000 fb04 	bl	8004aac <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80044a4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80044a6:	f000 f8f1 	bl	800468c <prvIsQueueEmpty>
 80044aa:	4603      	mov	r3, r0
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	f43f af4c 	beq.w	800434a <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80044b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d00d      	beq.n	80044d4 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 80044b8:	f001 f9d6 	bl	8005868 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80044bc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80044be:	f000 f811 	bl	80044e4 <prvGetDisinheritPriorityAfterTimeout>
 80044c2:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80044c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044c6:	689b      	ldr	r3, [r3, #8]
 80044c8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80044ca:	4618      	mov	r0, r3
 80044cc:	f000 ff92 	bl	80053f4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80044d0:	f001 f9fc 	bl	80058cc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80044d4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80044d6:	4618      	mov	r0, r3
 80044d8:	3738      	adds	r7, #56	@ 0x38
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}
 80044de:	bf00      	nop
 80044e0:	e000ed04 	.word	0xe000ed04

080044e4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80044e4:	b480      	push	{r7}
 80044e6:	b085      	sub	sp, #20
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d006      	beq.n	8004502 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f1c3 0307 	rsb	r3, r3, #7
 80044fe:	60fb      	str	r3, [r7, #12]
 8004500:	e001      	b.n	8004506 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8004502:	2300      	movs	r3, #0
 8004504:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8004506:	68fb      	ldr	r3, [r7, #12]
	}
 8004508:	4618      	mov	r0, r3
 800450a:	3714      	adds	r7, #20
 800450c:	46bd      	mov	sp, r7
 800450e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004512:	4770      	bx	lr

08004514 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b086      	sub	sp, #24
 8004518:	af00      	add	r7, sp, #0
 800451a:	60f8      	str	r0, [r7, #12]
 800451c:	60b9      	str	r1, [r7, #8]
 800451e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004520:	2300      	movs	r3, #0
 8004522:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004528:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800452e:	2b00      	cmp	r3, #0
 8004530:	d10d      	bne.n	800454e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d14d      	bne.n	80045d6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	689b      	ldr	r3, [r3, #8]
 800453e:	4618      	mov	r0, r3
 8004540:	f000 fed0 	bl	80052e4 <xTaskPriorityDisinherit>
 8004544:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	2200      	movs	r2, #0
 800454a:	609a      	str	r2, [r3, #8]
 800454c:	e043      	b.n	80045d6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d119      	bne.n	8004588 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	6858      	ldr	r0, [r3, #4]
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800455c:	461a      	mov	r2, r3
 800455e:	68b9      	ldr	r1, [r7, #8]
 8004560:	f001 ff37 	bl	80063d2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	685a      	ldr	r2, [r3, #4]
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800456c:	441a      	add	r2, r3
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	685a      	ldr	r2, [r3, #4]
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	689b      	ldr	r3, [r3, #8]
 800457a:	429a      	cmp	r2, r3
 800457c:	d32b      	bcc.n	80045d6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681a      	ldr	r2, [r3, #0]
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	605a      	str	r2, [r3, #4]
 8004586:	e026      	b.n	80045d6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	68d8      	ldr	r0, [r3, #12]
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004590:	461a      	mov	r2, r3
 8004592:	68b9      	ldr	r1, [r7, #8]
 8004594:	f001 ff1d 	bl	80063d2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	68da      	ldr	r2, [r3, #12]
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045a0:	425b      	negs	r3, r3
 80045a2:	441a      	add	r2, r3
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	68da      	ldr	r2, [r3, #12]
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	429a      	cmp	r2, r3
 80045b2:	d207      	bcs.n	80045c4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	689a      	ldr	r2, [r3, #8]
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045bc:	425b      	negs	r3, r3
 80045be:	441a      	add	r2, r3
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2b02      	cmp	r3, #2
 80045c8:	d105      	bne.n	80045d6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80045ca:	693b      	ldr	r3, [r7, #16]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d002      	beq.n	80045d6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80045d0:	693b      	ldr	r3, [r7, #16]
 80045d2:	3b01      	subs	r3, #1
 80045d4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80045d6:	693b      	ldr	r3, [r7, #16]
 80045d8:	1c5a      	adds	r2, r3, #1
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80045de:	697b      	ldr	r3, [r7, #20]
}
 80045e0:	4618      	mov	r0, r3
 80045e2:	3718      	adds	r7, #24
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bd80      	pop	{r7, pc}

080045e8 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b084      	sub	sp, #16
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80045f0:	f001 f93a 	bl	8005868 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80045fa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80045fc:	e011      	b.n	8004622 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004602:	2b00      	cmp	r3, #0
 8004604:	d012      	beq.n	800462c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	3324      	adds	r3, #36	@ 0x24
 800460a:	4618      	mov	r0, r3
 800460c:	f000 fc30 	bl	8004e70 <xTaskRemoveFromEventList>
 8004610:	4603      	mov	r3, r0
 8004612:	2b00      	cmp	r3, #0
 8004614:	d001      	beq.n	800461a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004616:	f000 fd09 	bl	800502c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800461a:	7bfb      	ldrb	r3, [r7, #15]
 800461c:	3b01      	subs	r3, #1
 800461e:	b2db      	uxtb	r3, r3
 8004620:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004622:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004626:	2b00      	cmp	r3, #0
 8004628:	dce9      	bgt.n	80045fe <prvUnlockQueue+0x16>
 800462a:	e000      	b.n	800462e <prvUnlockQueue+0x46>
					break;
 800462c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	22ff      	movs	r2, #255	@ 0xff
 8004632:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8004636:	f001 f949 	bl	80058cc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800463a:	f001 f915 	bl	8005868 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004644:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004646:	e011      	b.n	800466c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	691b      	ldr	r3, [r3, #16]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d012      	beq.n	8004676 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	3310      	adds	r3, #16
 8004654:	4618      	mov	r0, r3
 8004656:	f000 fc0b 	bl	8004e70 <xTaskRemoveFromEventList>
 800465a:	4603      	mov	r3, r0
 800465c:	2b00      	cmp	r3, #0
 800465e:	d001      	beq.n	8004664 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004660:	f000 fce4 	bl	800502c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004664:	7bbb      	ldrb	r3, [r7, #14]
 8004666:	3b01      	subs	r3, #1
 8004668:	b2db      	uxtb	r3, r3
 800466a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800466c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004670:	2b00      	cmp	r3, #0
 8004672:	dce9      	bgt.n	8004648 <prvUnlockQueue+0x60>
 8004674:	e000      	b.n	8004678 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004676:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	22ff      	movs	r2, #255	@ 0xff
 800467c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8004680:	f001 f924 	bl	80058cc <vPortExitCritical>
}
 8004684:	bf00      	nop
 8004686:	3710      	adds	r7, #16
 8004688:	46bd      	mov	sp, r7
 800468a:	bd80      	pop	{r7, pc}

0800468c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b084      	sub	sp, #16
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004694:	f001 f8e8 	bl	8005868 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800469c:	2b00      	cmp	r3, #0
 800469e:	d102      	bne.n	80046a6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80046a0:	2301      	movs	r3, #1
 80046a2:	60fb      	str	r3, [r7, #12]
 80046a4:	e001      	b.n	80046aa <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80046a6:	2300      	movs	r3, #0
 80046a8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80046aa:	f001 f90f 	bl	80058cc <vPortExitCritical>

	return xReturn;
 80046ae:	68fb      	ldr	r3, [r7, #12]
}
 80046b0:	4618      	mov	r0, r3
 80046b2:	3710      	adds	r7, #16
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bd80      	pop	{r7, pc}

080046b8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b084      	sub	sp, #16
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80046c0:	f001 f8d2 	bl	8005868 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046cc:	429a      	cmp	r2, r3
 80046ce:	d102      	bne.n	80046d6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80046d0:	2301      	movs	r3, #1
 80046d2:	60fb      	str	r3, [r7, #12]
 80046d4:	e001      	b.n	80046da <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80046d6:	2300      	movs	r3, #0
 80046d8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80046da:	f001 f8f7 	bl	80058cc <vPortExitCritical>

	return xReturn;
 80046de:	68fb      	ldr	r3, [r7, #12]
}
 80046e0:	4618      	mov	r0, r3
 80046e2:	3710      	adds	r7, #16
 80046e4:	46bd      	mov	sp, r7
 80046e6:	bd80      	pop	{r7, pc}

080046e8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b08c      	sub	sp, #48	@ 0x30
 80046ec:	af04      	add	r7, sp, #16
 80046ee:	60f8      	str	r0, [r7, #12]
 80046f0:	60b9      	str	r1, [r7, #8]
 80046f2:	603b      	str	r3, [r7, #0]
 80046f4:	4613      	mov	r3, r2
 80046f6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80046f8:	88fb      	ldrh	r3, [r7, #6]
 80046fa:	009b      	lsls	r3, r3, #2
 80046fc:	4618      	mov	r0, r3
 80046fe:	f001 f993 	bl	8005a28 <pvPortMalloc>
 8004702:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004704:	697b      	ldr	r3, [r7, #20]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d00e      	beq.n	8004728 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800470a:	20a0      	movs	r0, #160	@ 0xa0
 800470c:	f001 f98c 	bl	8005a28 <pvPortMalloc>
 8004710:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004712:	69fb      	ldr	r3, [r7, #28]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d003      	beq.n	8004720 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004718:	69fb      	ldr	r3, [r7, #28]
 800471a:	697a      	ldr	r2, [r7, #20]
 800471c:	631a      	str	r2, [r3, #48]	@ 0x30
 800471e:	e005      	b.n	800472c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004720:	6978      	ldr	r0, [r7, #20]
 8004722:	f001 fa4f 	bl	8005bc4 <vPortFree>
 8004726:	e001      	b.n	800472c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004728:	2300      	movs	r3, #0
 800472a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800472c:	69fb      	ldr	r3, [r7, #28]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d013      	beq.n	800475a <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004732:	88fa      	ldrh	r2, [r7, #6]
 8004734:	2300      	movs	r3, #0
 8004736:	9303      	str	r3, [sp, #12]
 8004738:	69fb      	ldr	r3, [r7, #28]
 800473a:	9302      	str	r3, [sp, #8]
 800473c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800473e:	9301      	str	r3, [sp, #4]
 8004740:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004742:	9300      	str	r3, [sp, #0]
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	68b9      	ldr	r1, [r7, #8]
 8004748:	68f8      	ldr	r0, [r7, #12]
 800474a:	f000 f80f 	bl	800476c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800474e:	69f8      	ldr	r0, [r7, #28]
 8004750:	f000 f8ac 	bl	80048ac <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004754:	2301      	movs	r3, #1
 8004756:	61bb      	str	r3, [r7, #24]
 8004758:	e002      	b.n	8004760 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800475a:	f04f 33ff 	mov.w	r3, #4294967295
 800475e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004760:	69bb      	ldr	r3, [r7, #24]
	}
 8004762:	4618      	mov	r0, r3
 8004764:	3720      	adds	r7, #32
 8004766:	46bd      	mov	sp, r7
 8004768:	bd80      	pop	{r7, pc}
	...

0800476c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b088      	sub	sp, #32
 8004770:	af00      	add	r7, sp, #0
 8004772:	60f8      	str	r0, [r7, #12]
 8004774:	60b9      	str	r1, [r7, #8]
 8004776:	607a      	str	r2, [r7, #4]
 8004778:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800477a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800477c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004784:	3b01      	subs	r3, #1
 8004786:	009b      	lsls	r3, r3, #2
 8004788:	4413      	add	r3, r2
 800478a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800478c:	69bb      	ldr	r3, [r7, #24]
 800478e:	f023 0307 	bic.w	r3, r3, #7
 8004792:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004794:	69bb      	ldr	r3, [r7, #24]
 8004796:	f003 0307 	and.w	r3, r3, #7
 800479a:	2b00      	cmp	r3, #0
 800479c:	d00b      	beq.n	80047b6 <prvInitialiseNewTask+0x4a>
	__asm volatile
 800479e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047a2:	f383 8811 	msr	BASEPRI, r3
 80047a6:	f3bf 8f6f 	isb	sy
 80047aa:	f3bf 8f4f 	dsb	sy
 80047ae:	617b      	str	r3, [r7, #20]
}
 80047b0:	bf00      	nop
 80047b2:	bf00      	nop
 80047b4:	e7fd      	b.n	80047b2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d01f      	beq.n	80047fc <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80047bc:	2300      	movs	r3, #0
 80047be:	61fb      	str	r3, [r7, #28]
 80047c0:	e012      	b.n	80047e8 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80047c2:	68ba      	ldr	r2, [r7, #8]
 80047c4:	69fb      	ldr	r3, [r7, #28]
 80047c6:	4413      	add	r3, r2
 80047c8:	7819      	ldrb	r1, [r3, #0]
 80047ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80047cc:	69fb      	ldr	r3, [r7, #28]
 80047ce:	4413      	add	r3, r2
 80047d0:	3334      	adds	r3, #52	@ 0x34
 80047d2:	460a      	mov	r2, r1
 80047d4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80047d6:	68ba      	ldr	r2, [r7, #8]
 80047d8:	69fb      	ldr	r3, [r7, #28]
 80047da:	4413      	add	r3, r2
 80047dc:	781b      	ldrb	r3, [r3, #0]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d006      	beq.n	80047f0 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80047e2:	69fb      	ldr	r3, [r7, #28]
 80047e4:	3301      	adds	r3, #1
 80047e6:	61fb      	str	r3, [r7, #28]
 80047e8:	69fb      	ldr	r3, [r7, #28]
 80047ea:	2b0f      	cmp	r3, #15
 80047ec:	d9e9      	bls.n	80047c2 <prvInitialiseNewTask+0x56>
 80047ee:	e000      	b.n	80047f2 <prvInitialiseNewTask+0x86>
			{
				break;
 80047f0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80047f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047f4:	2200      	movs	r2, #0
 80047f6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80047fa:	e003      	b.n	8004804 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80047fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047fe:	2200      	movs	r2, #0
 8004800:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004804:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004806:	2b06      	cmp	r3, #6
 8004808:	d901      	bls.n	800480e <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800480a:	2306      	movs	r3, #6
 800480c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800480e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004810:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004812:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004814:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004816:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004818:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800481a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800481c:	2200      	movs	r2, #0
 800481e:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004820:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004822:	3304      	adds	r3, #4
 8004824:	4618      	mov	r0, r3
 8004826:	f7ff fac5 	bl	8003db4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800482a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800482c:	3318      	adds	r3, #24
 800482e:	4618      	mov	r0, r3
 8004830:	f7ff fac0 	bl	8003db4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004834:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004836:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004838:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800483a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800483c:	f1c3 0207 	rsb	r2, r3, #7
 8004840:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004842:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004844:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004846:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004848:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800484a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800484c:	2200      	movs	r2, #0
 800484e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004852:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004854:	2200      	movs	r2, #0
 8004856:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800485a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800485c:	334c      	adds	r3, #76	@ 0x4c
 800485e:	224c      	movs	r2, #76	@ 0x4c
 8004860:	2100      	movs	r1, #0
 8004862:	4618      	mov	r0, r3
 8004864:	f001 fce3 	bl	800622e <memset>
 8004868:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800486a:	4a0d      	ldr	r2, [pc, #52]	@ (80048a0 <prvInitialiseNewTask+0x134>)
 800486c:	651a      	str	r2, [r3, #80]	@ 0x50
 800486e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004870:	4a0c      	ldr	r2, [pc, #48]	@ (80048a4 <prvInitialiseNewTask+0x138>)
 8004872:	655a      	str	r2, [r3, #84]	@ 0x54
 8004874:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004876:	4a0c      	ldr	r2, [pc, #48]	@ (80048a8 <prvInitialiseNewTask+0x13c>)
 8004878:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800487a:	683a      	ldr	r2, [r7, #0]
 800487c:	68f9      	ldr	r1, [r7, #12]
 800487e:	69b8      	ldr	r0, [r7, #24]
 8004880:	f000 fec2 	bl	8005608 <pxPortInitialiseStack>
 8004884:	4602      	mov	r2, r0
 8004886:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004888:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800488a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800488c:	2b00      	cmp	r3, #0
 800488e:	d002      	beq.n	8004896 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004890:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004892:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004894:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004896:	bf00      	nop
 8004898:	3720      	adds	r7, #32
 800489a:	46bd      	mov	sp, r7
 800489c:	bd80      	pop	{r7, pc}
 800489e:	bf00      	nop
 80048a0:	200045b4 	.word	0x200045b4
 80048a4:	2000461c 	.word	0x2000461c
 80048a8:	20004684 	.word	0x20004684

080048ac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b082      	sub	sp, #8
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80048b4:	f000 ffd8 	bl	8005868 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80048b8:	4b2a      	ldr	r3, [pc, #168]	@ (8004964 <prvAddNewTaskToReadyList+0xb8>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	3301      	adds	r3, #1
 80048be:	4a29      	ldr	r2, [pc, #164]	@ (8004964 <prvAddNewTaskToReadyList+0xb8>)
 80048c0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80048c2:	4b29      	ldr	r3, [pc, #164]	@ (8004968 <prvAddNewTaskToReadyList+0xbc>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d109      	bne.n	80048de <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80048ca:	4a27      	ldr	r2, [pc, #156]	@ (8004968 <prvAddNewTaskToReadyList+0xbc>)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80048d0:	4b24      	ldr	r3, [pc, #144]	@ (8004964 <prvAddNewTaskToReadyList+0xb8>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	2b01      	cmp	r3, #1
 80048d6:	d110      	bne.n	80048fa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80048d8:	f000 fbcc 	bl	8005074 <prvInitialiseTaskLists>
 80048dc:	e00d      	b.n	80048fa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80048de:	4b23      	ldr	r3, [pc, #140]	@ (800496c <prvAddNewTaskToReadyList+0xc0>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d109      	bne.n	80048fa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80048e6:	4b20      	ldr	r3, [pc, #128]	@ (8004968 <prvAddNewTaskToReadyList+0xbc>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048f0:	429a      	cmp	r2, r3
 80048f2:	d802      	bhi.n	80048fa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80048f4:	4a1c      	ldr	r2, [pc, #112]	@ (8004968 <prvAddNewTaskToReadyList+0xbc>)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80048fa:	4b1d      	ldr	r3, [pc, #116]	@ (8004970 <prvAddNewTaskToReadyList+0xc4>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	3301      	adds	r3, #1
 8004900:	4a1b      	ldr	r2, [pc, #108]	@ (8004970 <prvAddNewTaskToReadyList+0xc4>)
 8004902:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004908:	2201      	movs	r2, #1
 800490a:	409a      	lsls	r2, r3
 800490c:	4b19      	ldr	r3, [pc, #100]	@ (8004974 <prvAddNewTaskToReadyList+0xc8>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4313      	orrs	r3, r2
 8004912:	4a18      	ldr	r2, [pc, #96]	@ (8004974 <prvAddNewTaskToReadyList+0xc8>)
 8004914:	6013      	str	r3, [r2, #0]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800491a:	4613      	mov	r3, r2
 800491c:	009b      	lsls	r3, r3, #2
 800491e:	4413      	add	r3, r2
 8004920:	009b      	lsls	r3, r3, #2
 8004922:	4a15      	ldr	r2, [pc, #84]	@ (8004978 <prvAddNewTaskToReadyList+0xcc>)
 8004924:	441a      	add	r2, r3
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	3304      	adds	r3, #4
 800492a:	4619      	mov	r1, r3
 800492c:	4610      	mov	r0, r2
 800492e:	f7ff fa4e 	bl	8003dce <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004932:	f000 ffcb 	bl	80058cc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004936:	4b0d      	ldr	r3, [pc, #52]	@ (800496c <prvAddNewTaskToReadyList+0xc0>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d00e      	beq.n	800495c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800493e:	4b0a      	ldr	r3, [pc, #40]	@ (8004968 <prvAddNewTaskToReadyList+0xbc>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004948:	429a      	cmp	r2, r3
 800494a:	d207      	bcs.n	800495c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800494c:	4b0b      	ldr	r3, [pc, #44]	@ (800497c <prvAddNewTaskToReadyList+0xd0>)
 800494e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004952:	601a      	str	r2, [r3, #0]
 8004954:	f3bf 8f4f 	dsb	sy
 8004958:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800495c:	bf00      	nop
 800495e:	3708      	adds	r7, #8
 8004960:	46bd      	mov	sp, r7
 8004962:	bd80      	pop	{r7, pc}
 8004964:	20000960 	.word	0x20000960
 8004968:	20000860 	.word	0x20000860
 800496c:	2000096c 	.word	0x2000096c
 8004970:	2000097c 	.word	0x2000097c
 8004974:	20000968 	.word	0x20000968
 8004978:	20000864 	.word	0x20000864
 800497c:	e000ed04 	.word	0xe000ed04

08004980 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004980:	b580      	push	{r7, lr}
 8004982:	b084      	sub	sp, #16
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004988:	2300      	movs	r3, #0
 800498a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d018      	beq.n	80049c4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004992:	4b14      	ldr	r3, [pc, #80]	@ (80049e4 <vTaskDelay+0x64>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d00b      	beq.n	80049b2 <vTaskDelay+0x32>
	__asm volatile
 800499a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800499e:	f383 8811 	msr	BASEPRI, r3
 80049a2:	f3bf 8f6f 	isb	sy
 80049a6:	f3bf 8f4f 	dsb	sy
 80049aa:	60bb      	str	r3, [r7, #8]
}
 80049ac:	bf00      	nop
 80049ae:	bf00      	nop
 80049b0:	e7fd      	b.n	80049ae <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80049b2:	f000 f86d 	bl	8004a90 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80049b6:	2100      	movs	r1, #0
 80049b8:	6878      	ldr	r0, [r7, #4]
 80049ba:	f000 fdbf 	bl	800553c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80049be:	f000 f875 	bl	8004aac <xTaskResumeAll>
 80049c2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d107      	bne.n	80049da <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80049ca:	4b07      	ldr	r3, [pc, #28]	@ (80049e8 <vTaskDelay+0x68>)
 80049cc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80049d0:	601a      	str	r2, [r3, #0]
 80049d2:	f3bf 8f4f 	dsb	sy
 80049d6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80049da:	bf00      	nop
 80049dc:	3710      	adds	r7, #16
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}
 80049e2:	bf00      	nop
 80049e4:	20000988 	.word	0x20000988
 80049e8:	e000ed04 	.word	0xe000ed04

080049ec <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b086      	sub	sp, #24
 80049f0:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 80049f2:	4b1f      	ldr	r3, [pc, #124]	@ (8004a70 <vTaskStartScheduler+0x84>)
 80049f4:	9301      	str	r3, [sp, #4]
 80049f6:	2300      	movs	r3, #0
 80049f8:	9300      	str	r3, [sp, #0]
 80049fa:	2300      	movs	r3, #0
 80049fc:	2280      	movs	r2, #128	@ 0x80
 80049fe:	491d      	ldr	r1, [pc, #116]	@ (8004a74 <vTaskStartScheduler+0x88>)
 8004a00:	481d      	ldr	r0, [pc, #116]	@ (8004a78 <vTaskStartScheduler+0x8c>)
 8004a02:	f7ff fe71 	bl	80046e8 <xTaskCreate>
 8004a06:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	2b01      	cmp	r3, #1
 8004a0c:	d11b      	bne.n	8004a46 <vTaskStartScheduler+0x5a>
	__asm volatile
 8004a0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a12:	f383 8811 	msr	BASEPRI, r3
 8004a16:	f3bf 8f6f 	isb	sy
 8004a1a:	f3bf 8f4f 	dsb	sy
 8004a1e:	60bb      	str	r3, [r7, #8]
}
 8004a20:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004a22:	4b16      	ldr	r3, [pc, #88]	@ (8004a7c <vTaskStartScheduler+0x90>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	334c      	adds	r3, #76	@ 0x4c
 8004a28:	4a15      	ldr	r2, [pc, #84]	@ (8004a80 <vTaskStartScheduler+0x94>)
 8004a2a:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004a2c:	4b15      	ldr	r3, [pc, #84]	@ (8004a84 <vTaskStartScheduler+0x98>)
 8004a2e:	f04f 32ff 	mov.w	r2, #4294967295
 8004a32:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004a34:	4b14      	ldr	r3, [pc, #80]	@ (8004a88 <vTaskStartScheduler+0x9c>)
 8004a36:	2201      	movs	r2, #1
 8004a38:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004a3a:	4b14      	ldr	r3, [pc, #80]	@ (8004a8c <vTaskStartScheduler+0xa0>)
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004a40:	f000 fe6e 	bl	8005720 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004a44:	e00f      	b.n	8004a66 <vTaskStartScheduler+0x7a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a4c:	d10b      	bne.n	8004a66 <vTaskStartScheduler+0x7a>
	__asm volatile
 8004a4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a52:	f383 8811 	msr	BASEPRI, r3
 8004a56:	f3bf 8f6f 	isb	sy
 8004a5a:	f3bf 8f4f 	dsb	sy
 8004a5e:	607b      	str	r3, [r7, #4]
}
 8004a60:	bf00      	nop
 8004a62:	bf00      	nop
 8004a64:	e7fd      	b.n	8004a62 <vTaskStartScheduler+0x76>
}
 8004a66:	bf00      	nop
 8004a68:	3710      	adds	r7, #16
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bd80      	pop	{r7, pc}
 8004a6e:	bf00      	nop
 8004a70:	20000984 	.word	0x20000984
 8004a74:	08007024 	.word	0x08007024
 8004a78:	08005045 	.word	0x08005045
 8004a7c:	20000860 	.word	0x20000860
 8004a80:	2000001c 	.word	0x2000001c
 8004a84:	20000980 	.word	0x20000980
 8004a88:	2000096c 	.word	0x2000096c
 8004a8c:	20000964 	.word	0x20000964

08004a90 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004a90:	b480      	push	{r7}
 8004a92:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004a94:	4b04      	ldr	r3, [pc, #16]	@ (8004aa8 <vTaskSuspendAll+0x18>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	3301      	adds	r3, #1
 8004a9a:	4a03      	ldr	r2, [pc, #12]	@ (8004aa8 <vTaskSuspendAll+0x18>)
 8004a9c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004a9e:	bf00      	nop
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa6:	4770      	bx	lr
 8004aa8:	20000988 	.word	0x20000988

08004aac <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b084      	sub	sp, #16
 8004ab0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004aba:	4b42      	ldr	r3, [pc, #264]	@ (8004bc4 <xTaskResumeAll+0x118>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d10b      	bne.n	8004ada <xTaskResumeAll+0x2e>
	__asm volatile
 8004ac2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ac6:	f383 8811 	msr	BASEPRI, r3
 8004aca:	f3bf 8f6f 	isb	sy
 8004ace:	f3bf 8f4f 	dsb	sy
 8004ad2:	603b      	str	r3, [r7, #0]
}
 8004ad4:	bf00      	nop
 8004ad6:	bf00      	nop
 8004ad8:	e7fd      	b.n	8004ad6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004ada:	f000 fec5 	bl	8005868 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004ade:	4b39      	ldr	r3, [pc, #228]	@ (8004bc4 <xTaskResumeAll+0x118>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	3b01      	subs	r3, #1
 8004ae4:	4a37      	ldr	r2, [pc, #220]	@ (8004bc4 <xTaskResumeAll+0x118>)
 8004ae6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004ae8:	4b36      	ldr	r3, [pc, #216]	@ (8004bc4 <xTaskResumeAll+0x118>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d161      	bne.n	8004bb4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004af0:	4b35      	ldr	r3, [pc, #212]	@ (8004bc8 <xTaskResumeAll+0x11c>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d05d      	beq.n	8004bb4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004af8:	e02e      	b.n	8004b58 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004afa:	4b34      	ldr	r3, [pc, #208]	@ (8004bcc <xTaskResumeAll+0x120>)
 8004afc:	68db      	ldr	r3, [r3, #12]
 8004afe:	68db      	ldr	r3, [r3, #12]
 8004b00:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	3318      	adds	r3, #24
 8004b06:	4618      	mov	r0, r3
 8004b08:	f7ff f9be 	bl	8003e88 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	3304      	adds	r3, #4
 8004b10:	4618      	mov	r0, r3
 8004b12:	f7ff f9b9 	bl	8003e88 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b1a:	2201      	movs	r2, #1
 8004b1c:	409a      	lsls	r2, r3
 8004b1e:	4b2c      	ldr	r3, [pc, #176]	@ (8004bd0 <xTaskResumeAll+0x124>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4313      	orrs	r3, r2
 8004b24:	4a2a      	ldr	r2, [pc, #168]	@ (8004bd0 <xTaskResumeAll+0x124>)
 8004b26:	6013      	str	r3, [r2, #0]
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b2c:	4613      	mov	r3, r2
 8004b2e:	009b      	lsls	r3, r3, #2
 8004b30:	4413      	add	r3, r2
 8004b32:	009b      	lsls	r3, r3, #2
 8004b34:	4a27      	ldr	r2, [pc, #156]	@ (8004bd4 <xTaskResumeAll+0x128>)
 8004b36:	441a      	add	r2, r3
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	3304      	adds	r3, #4
 8004b3c:	4619      	mov	r1, r3
 8004b3e:	4610      	mov	r0, r2
 8004b40:	f7ff f945 	bl	8003dce <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b48:	4b23      	ldr	r3, [pc, #140]	@ (8004bd8 <xTaskResumeAll+0x12c>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b4e:	429a      	cmp	r2, r3
 8004b50:	d302      	bcc.n	8004b58 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004b52:	4b22      	ldr	r3, [pc, #136]	@ (8004bdc <xTaskResumeAll+0x130>)
 8004b54:	2201      	movs	r2, #1
 8004b56:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004b58:	4b1c      	ldr	r3, [pc, #112]	@ (8004bcc <xTaskResumeAll+0x120>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d1cc      	bne.n	8004afa <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d001      	beq.n	8004b6a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004b66:	f000 fb09 	bl	800517c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004b6a:	4b1d      	ldr	r3, [pc, #116]	@ (8004be0 <xTaskResumeAll+0x134>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d010      	beq.n	8004b98 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004b76:	f000 f837 	bl	8004be8 <xTaskIncrementTick>
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d002      	beq.n	8004b86 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004b80:	4b16      	ldr	r3, [pc, #88]	@ (8004bdc <xTaskResumeAll+0x130>)
 8004b82:	2201      	movs	r2, #1
 8004b84:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	3b01      	subs	r3, #1
 8004b8a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d1f1      	bne.n	8004b76 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8004b92:	4b13      	ldr	r3, [pc, #76]	@ (8004be0 <xTaskResumeAll+0x134>)
 8004b94:	2200      	movs	r2, #0
 8004b96:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004b98:	4b10      	ldr	r3, [pc, #64]	@ (8004bdc <xTaskResumeAll+0x130>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d009      	beq.n	8004bb4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004ba4:	4b0f      	ldr	r3, [pc, #60]	@ (8004be4 <xTaskResumeAll+0x138>)
 8004ba6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004baa:	601a      	str	r2, [r3, #0]
 8004bac:	f3bf 8f4f 	dsb	sy
 8004bb0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004bb4:	f000 fe8a 	bl	80058cc <vPortExitCritical>

	return xAlreadyYielded;
 8004bb8:	68bb      	ldr	r3, [r7, #8]
}
 8004bba:	4618      	mov	r0, r3
 8004bbc:	3710      	adds	r7, #16
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bd80      	pop	{r7, pc}
 8004bc2:	bf00      	nop
 8004bc4:	20000988 	.word	0x20000988
 8004bc8:	20000960 	.word	0x20000960
 8004bcc:	20000920 	.word	0x20000920
 8004bd0:	20000968 	.word	0x20000968
 8004bd4:	20000864 	.word	0x20000864
 8004bd8:	20000860 	.word	0x20000860
 8004bdc:	20000974 	.word	0x20000974
 8004be0:	20000970 	.word	0x20000970
 8004be4:	e000ed04 	.word	0xe000ed04

08004be8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b086      	sub	sp, #24
 8004bec:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004bee:	2300      	movs	r3, #0
 8004bf0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004bf2:	4b4f      	ldr	r3, [pc, #316]	@ (8004d30 <xTaskIncrementTick+0x148>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	f040 808f 	bne.w	8004d1a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004bfc:	4b4d      	ldr	r3, [pc, #308]	@ (8004d34 <xTaskIncrementTick+0x14c>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	3301      	adds	r3, #1
 8004c02:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004c04:	4a4b      	ldr	r2, [pc, #300]	@ (8004d34 <xTaskIncrementTick+0x14c>)
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004c0a:	693b      	ldr	r3, [r7, #16]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d121      	bne.n	8004c54 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004c10:	4b49      	ldr	r3, [pc, #292]	@ (8004d38 <xTaskIncrementTick+0x150>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d00b      	beq.n	8004c32 <xTaskIncrementTick+0x4a>
	__asm volatile
 8004c1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c1e:	f383 8811 	msr	BASEPRI, r3
 8004c22:	f3bf 8f6f 	isb	sy
 8004c26:	f3bf 8f4f 	dsb	sy
 8004c2a:	603b      	str	r3, [r7, #0]
}
 8004c2c:	bf00      	nop
 8004c2e:	bf00      	nop
 8004c30:	e7fd      	b.n	8004c2e <xTaskIncrementTick+0x46>
 8004c32:	4b41      	ldr	r3, [pc, #260]	@ (8004d38 <xTaskIncrementTick+0x150>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	60fb      	str	r3, [r7, #12]
 8004c38:	4b40      	ldr	r3, [pc, #256]	@ (8004d3c <xTaskIncrementTick+0x154>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a3e      	ldr	r2, [pc, #248]	@ (8004d38 <xTaskIncrementTick+0x150>)
 8004c3e:	6013      	str	r3, [r2, #0]
 8004c40:	4a3e      	ldr	r2, [pc, #248]	@ (8004d3c <xTaskIncrementTick+0x154>)
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	6013      	str	r3, [r2, #0]
 8004c46:	4b3e      	ldr	r3, [pc, #248]	@ (8004d40 <xTaskIncrementTick+0x158>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	3301      	adds	r3, #1
 8004c4c:	4a3c      	ldr	r2, [pc, #240]	@ (8004d40 <xTaskIncrementTick+0x158>)
 8004c4e:	6013      	str	r3, [r2, #0]
 8004c50:	f000 fa94 	bl	800517c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004c54:	4b3b      	ldr	r3, [pc, #236]	@ (8004d44 <xTaskIncrementTick+0x15c>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	693a      	ldr	r2, [r7, #16]
 8004c5a:	429a      	cmp	r2, r3
 8004c5c:	d348      	bcc.n	8004cf0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004c5e:	4b36      	ldr	r3, [pc, #216]	@ (8004d38 <xTaskIncrementTick+0x150>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d104      	bne.n	8004c72 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c68:	4b36      	ldr	r3, [pc, #216]	@ (8004d44 <xTaskIncrementTick+0x15c>)
 8004c6a:	f04f 32ff 	mov.w	r2, #4294967295
 8004c6e:	601a      	str	r2, [r3, #0]
					break;
 8004c70:	e03e      	b.n	8004cf0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c72:	4b31      	ldr	r3, [pc, #196]	@ (8004d38 <xTaskIncrementTick+0x150>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	68db      	ldr	r3, [r3, #12]
 8004c78:	68db      	ldr	r3, [r3, #12]
 8004c7a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004c82:	693a      	ldr	r2, [r7, #16]
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	429a      	cmp	r2, r3
 8004c88:	d203      	bcs.n	8004c92 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004c8a:	4a2e      	ldr	r2, [pc, #184]	@ (8004d44 <xTaskIncrementTick+0x15c>)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004c90:	e02e      	b.n	8004cf0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	3304      	adds	r3, #4
 8004c96:	4618      	mov	r0, r3
 8004c98:	f7ff f8f6 	bl	8003e88 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d004      	beq.n	8004cae <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	3318      	adds	r3, #24
 8004ca8:	4618      	mov	r0, r3
 8004caa:	f7ff f8ed 	bl	8003e88 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004cae:	68bb      	ldr	r3, [r7, #8]
 8004cb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cb2:	2201      	movs	r2, #1
 8004cb4:	409a      	lsls	r2, r3
 8004cb6:	4b24      	ldr	r3, [pc, #144]	@ (8004d48 <xTaskIncrementTick+0x160>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	4a22      	ldr	r2, [pc, #136]	@ (8004d48 <xTaskIncrementTick+0x160>)
 8004cbe:	6013      	str	r3, [r2, #0]
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004cc4:	4613      	mov	r3, r2
 8004cc6:	009b      	lsls	r3, r3, #2
 8004cc8:	4413      	add	r3, r2
 8004cca:	009b      	lsls	r3, r3, #2
 8004ccc:	4a1f      	ldr	r2, [pc, #124]	@ (8004d4c <xTaskIncrementTick+0x164>)
 8004cce:	441a      	add	r2, r3
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	3304      	adds	r3, #4
 8004cd4:	4619      	mov	r1, r3
 8004cd6:	4610      	mov	r0, r2
 8004cd8:	f7ff f879 	bl	8003dce <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ce0:	4b1b      	ldr	r3, [pc, #108]	@ (8004d50 <xTaskIncrementTick+0x168>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ce6:	429a      	cmp	r2, r3
 8004ce8:	d3b9      	bcc.n	8004c5e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004cea:	2301      	movs	r3, #1
 8004cec:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004cee:	e7b6      	b.n	8004c5e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004cf0:	4b17      	ldr	r3, [pc, #92]	@ (8004d50 <xTaskIncrementTick+0x168>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004cf6:	4915      	ldr	r1, [pc, #84]	@ (8004d4c <xTaskIncrementTick+0x164>)
 8004cf8:	4613      	mov	r3, r2
 8004cfa:	009b      	lsls	r3, r3, #2
 8004cfc:	4413      	add	r3, r2
 8004cfe:	009b      	lsls	r3, r3, #2
 8004d00:	440b      	add	r3, r1
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	2b01      	cmp	r3, #1
 8004d06:	d901      	bls.n	8004d0c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004d08:	2301      	movs	r3, #1
 8004d0a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004d0c:	4b11      	ldr	r3, [pc, #68]	@ (8004d54 <xTaskIncrementTick+0x16c>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d007      	beq.n	8004d24 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004d14:	2301      	movs	r3, #1
 8004d16:	617b      	str	r3, [r7, #20]
 8004d18:	e004      	b.n	8004d24 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004d1a:	4b0f      	ldr	r3, [pc, #60]	@ (8004d58 <xTaskIncrementTick+0x170>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	3301      	adds	r3, #1
 8004d20:	4a0d      	ldr	r2, [pc, #52]	@ (8004d58 <xTaskIncrementTick+0x170>)
 8004d22:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004d24:	697b      	ldr	r3, [r7, #20]
}
 8004d26:	4618      	mov	r0, r3
 8004d28:	3718      	adds	r7, #24
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	bd80      	pop	{r7, pc}
 8004d2e:	bf00      	nop
 8004d30:	20000988 	.word	0x20000988
 8004d34:	20000964 	.word	0x20000964
 8004d38:	20000918 	.word	0x20000918
 8004d3c:	2000091c 	.word	0x2000091c
 8004d40:	20000978 	.word	0x20000978
 8004d44:	20000980 	.word	0x20000980
 8004d48:	20000968 	.word	0x20000968
 8004d4c:	20000864 	.word	0x20000864
 8004d50:	20000860 	.word	0x20000860
 8004d54:	20000974 	.word	0x20000974
 8004d58:	20000970 	.word	0x20000970

08004d5c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	b087      	sub	sp, #28
 8004d60:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004d62:	4b2a      	ldr	r3, [pc, #168]	@ (8004e0c <vTaskSwitchContext+0xb0>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d003      	beq.n	8004d72 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004d6a:	4b29      	ldr	r3, [pc, #164]	@ (8004e10 <vTaskSwitchContext+0xb4>)
 8004d6c:	2201      	movs	r2, #1
 8004d6e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004d70:	e045      	b.n	8004dfe <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8004d72:	4b27      	ldr	r3, [pc, #156]	@ (8004e10 <vTaskSwitchContext+0xb4>)
 8004d74:	2200      	movs	r2, #0
 8004d76:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d78:	4b26      	ldr	r3, [pc, #152]	@ (8004e14 <vTaskSwitchContext+0xb8>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	fab3 f383 	clz	r3, r3
 8004d84:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004d86:	7afb      	ldrb	r3, [r7, #11]
 8004d88:	f1c3 031f 	rsb	r3, r3, #31
 8004d8c:	617b      	str	r3, [r7, #20]
 8004d8e:	4922      	ldr	r1, [pc, #136]	@ (8004e18 <vTaskSwitchContext+0xbc>)
 8004d90:	697a      	ldr	r2, [r7, #20]
 8004d92:	4613      	mov	r3, r2
 8004d94:	009b      	lsls	r3, r3, #2
 8004d96:	4413      	add	r3, r2
 8004d98:	009b      	lsls	r3, r3, #2
 8004d9a:	440b      	add	r3, r1
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d10b      	bne.n	8004dba <vTaskSwitchContext+0x5e>
	__asm volatile
 8004da2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004da6:	f383 8811 	msr	BASEPRI, r3
 8004daa:	f3bf 8f6f 	isb	sy
 8004dae:	f3bf 8f4f 	dsb	sy
 8004db2:	607b      	str	r3, [r7, #4]
}
 8004db4:	bf00      	nop
 8004db6:	bf00      	nop
 8004db8:	e7fd      	b.n	8004db6 <vTaskSwitchContext+0x5a>
 8004dba:	697a      	ldr	r2, [r7, #20]
 8004dbc:	4613      	mov	r3, r2
 8004dbe:	009b      	lsls	r3, r3, #2
 8004dc0:	4413      	add	r3, r2
 8004dc2:	009b      	lsls	r3, r3, #2
 8004dc4:	4a14      	ldr	r2, [pc, #80]	@ (8004e18 <vTaskSwitchContext+0xbc>)
 8004dc6:	4413      	add	r3, r2
 8004dc8:	613b      	str	r3, [r7, #16]
 8004dca:	693b      	ldr	r3, [r7, #16]
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	685a      	ldr	r2, [r3, #4]
 8004dd0:	693b      	ldr	r3, [r7, #16]
 8004dd2:	605a      	str	r2, [r3, #4]
 8004dd4:	693b      	ldr	r3, [r7, #16]
 8004dd6:	685a      	ldr	r2, [r3, #4]
 8004dd8:	693b      	ldr	r3, [r7, #16]
 8004dda:	3308      	adds	r3, #8
 8004ddc:	429a      	cmp	r2, r3
 8004dde:	d104      	bne.n	8004dea <vTaskSwitchContext+0x8e>
 8004de0:	693b      	ldr	r3, [r7, #16]
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	685a      	ldr	r2, [r3, #4]
 8004de6:	693b      	ldr	r3, [r7, #16]
 8004de8:	605a      	str	r2, [r3, #4]
 8004dea:	693b      	ldr	r3, [r7, #16]
 8004dec:	685b      	ldr	r3, [r3, #4]
 8004dee:	68db      	ldr	r3, [r3, #12]
 8004df0:	4a0a      	ldr	r2, [pc, #40]	@ (8004e1c <vTaskSwitchContext+0xc0>)
 8004df2:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004df4:	4b09      	ldr	r3, [pc, #36]	@ (8004e1c <vTaskSwitchContext+0xc0>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	334c      	adds	r3, #76	@ 0x4c
 8004dfa:	4a09      	ldr	r2, [pc, #36]	@ (8004e20 <vTaskSwitchContext+0xc4>)
 8004dfc:	6013      	str	r3, [r2, #0]
}
 8004dfe:	bf00      	nop
 8004e00:	371c      	adds	r7, #28
 8004e02:	46bd      	mov	sp, r7
 8004e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e08:	4770      	bx	lr
 8004e0a:	bf00      	nop
 8004e0c:	20000988 	.word	0x20000988
 8004e10:	20000974 	.word	0x20000974
 8004e14:	20000968 	.word	0x20000968
 8004e18:	20000864 	.word	0x20000864
 8004e1c:	20000860 	.word	0x20000860
 8004e20:	2000001c 	.word	0x2000001c

08004e24 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b084      	sub	sp, #16
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
 8004e2c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d10b      	bne.n	8004e4c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8004e34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e38:	f383 8811 	msr	BASEPRI, r3
 8004e3c:	f3bf 8f6f 	isb	sy
 8004e40:	f3bf 8f4f 	dsb	sy
 8004e44:	60fb      	str	r3, [r7, #12]
}
 8004e46:	bf00      	nop
 8004e48:	bf00      	nop
 8004e4a:	e7fd      	b.n	8004e48 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004e4c:	4b07      	ldr	r3, [pc, #28]	@ (8004e6c <vTaskPlaceOnEventList+0x48>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	3318      	adds	r3, #24
 8004e52:	4619      	mov	r1, r3
 8004e54:	6878      	ldr	r0, [r7, #4]
 8004e56:	f7fe ffde 	bl	8003e16 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004e5a:	2101      	movs	r1, #1
 8004e5c:	6838      	ldr	r0, [r7, #0]
 8004e5e:	f000 fb6d 	bl	800553c <prvAddCurrentTaskToDelayedList>
}
 8004e62:	bf00      	nop
 8004e64:	3710      	adds	r7, #16
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bd80      	pop	{r7, pc}
 8004e6a:	bf00      	nop
 8004e6c:	20000860 	.word	0x20000860

08004e70 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b086      	sub	sp, #24
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	68db      	ldr	r3, [r3, #12]
 8004e7c:	68db      	ldr	r3, [r3, #12]
 8004e7e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004e80:	693b      	ldr	r3, [r7, #16]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d10b      	bne.n	8004e9e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8004e86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e8a:	f383 8811 	msr	BASEPRI, r3
 8004e8e:	f3bf 8f6f 	isb	sy
 8004e92:	f3bf 8f4f 	dsb	sy
 8004e96:	60fb      	str	r3, [r7, #12]
}
 8004e98:	bf00      	nop
 8004e9a:	bf00      	nop
 8004e9c:	e7fd      	b.n	8004e9a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004e9e:	693b      	ldr	r3, [r7, #16]
 8004ea0:	3318      	adds	r3, #24
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	f7fe fff0 	bl	8003e88 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004ea8:	4b1d      	ldr	r3, [pc, #116]	@ (8004f20 <xTaskRemoveFromEventList+0xb0>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d11c      	bne.n	8004eea <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004eb0:	693b      	ldr	r3, [r7, #16]
 8004eb2:	3304      	adds	r3, #4
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	f7fe ffe7 	bl	8003e88 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004eba:	693b      	ldr	r3, [r7, #16]
 8004ebc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ebe:	2201      	movs	r2, #1
 8004ec0:	409a      	lsls	r2, r3
 8004ec2:	4b18      	ldr	r3, [pc, #96]	@ (8004f24 <xTaskRemoveFromEventList+0xb4>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	4a16      	ldr	r2, [pc, #88]	@ (8004f24 <xTaskRemoveFromEventList+0xb4>)
 8004eca:	6013      	str	r3, [r2, #0]
 8004ecc:	693b      	ldr	r3, [r7, #16]
 8004ece:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ed0:	4613      	mov	r3, r2
 8004ed2:	009b      	lsls	r3, r3, #2
 8004ed4:	4413      	add	r3, r2
 8004ed6:	009b      	lsls	r3, r3, #2
 8004ed8:	4a13      	ldr	r2, [pc, #76]	@ (8004f28 <xTaskRemoveFromEventList+0xb8>)
 8004eda:	441a      	add	r2, r3
 8004edc:	693b      	ldr	r3, [r7, #16]
 8004ede:	3304      	adds	r3, #4
 8004ee0:	4619      	mov	r1, r3
 8004ee2:	4610      	mov	r0, r2
 8004ee4:	f7fe ff73 	bl	8003dce <vListInsertEnd>
 8004ee8:	e005      	b.n	8004ef6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004eea:	693b      	ldr	r3, [r7, #16]
 8004eec:	3318      	adds	r3, #24
 8004eee:	4619      	mov	r1, r3
 8004ef0:	480e      	ldr	r0, [pc, #56]	@ (8004f2c <xTaskRemoveFromEventList+0xbc>)
 8004ef2:	f7fe ff6c 	bl	8003dce <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004ef6:	693b      	ldr	r3, [r7, #16]
 8004ef8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004efa:	4b0d      	ldr	r3, [pc, #52]	@ (8004f30 <xTaskRemoveFromEventList+0xc0>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f00:	429a      	cmp	r2, r3
 8004f02:	d905      	bls.n	8004f10 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004f04:	2301      	movs	r3, #1
 8004f06:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004f08:	4b0a      	ldr	r3, [pc, #40]	@ (8004f34 <xTaskRemoveFromEventList+0xc4>)
 8004f0a:	2201      	movs	r2, #1
 8004f0c:	601a      	str	r2, [r3, #0]
 8004f0e:	e001      	b.n	8004f14 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004f10:	2300      	movs	r3, #0
 8004f12:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004f14:	697b      	ldr	r3, [r7, #20]
}
 8004f16:	4618      	mov	r0, r3
 8004f18:	3718      	adds	r7, #24
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bd80      	pop	{r7, pc}
 8004f1e:	bf00      	nop
 8004f20:	20000988 	.word	0x20000988
 8004f24:	20000968 	.word	0x20000968
 8004f28:	20000864 	.word	0x20000864
 8004f2c:	20000920 	.word	0x20000920
 8004f30:	20000860 	.word	0x20000860
 8004f34:	20000974 	.word	0x20000974

08004f38 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004f38:	b480      	push	{r7}
 8004f3a:	b083      	sub	sp, #12
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004f40:	4b06      	ldr	r3, [pc, #24]	@ (8004f5c <vTaskInternalSetTimeOutState+0x24>)
 8004f42:	681a      	ldr	r2, [r3, #0]
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004f48:	4b05      	ldr	r3, [pc, #20]	@ (8004f60 <vTaskInternalSetTimeOutState+0x28>)
 8004f4a:	681a      	ldr	r2, [r3, #0]
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	605a      	str	r2, [r3, #4]
}
 8004f50:	bf00      	nop
 8004f52:	370c      	adds	r7, #12
 8004f54:	46bd      	mov	sp, r7
 8004f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5a:	4770      	bx	lr
 8004f5c:	20000978 	.word	0x20000978
 8004f60:	20000964 	.word	0x20000964

08004f64 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b088      	sub	sp, #32
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
 8004f6c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d10b      	bne.n	8004f8c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8004f74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f78:	f383 8811 	msr	BASEPRI, r3
 8004f7c:	f3bf 8f6f 	isb	sy
 8004f80:	f3bf 8f4f 	dsb	sy
 8004f84:	613b      	str	r3, [r7, #16]
}
 8004f86:	bf00      	nop
 8004f88:	bf00      	nop
 8004f8a:	e7fd      	b.n	8004f88 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d10b      	bne.n	8004faa <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8004f92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f96:	f383 8811 	msr	BASEPRI, r3
 8004f9a:	f3bf 8f6f 	isb	sy
 8004f9e:	f3bf 8f4f 	dsb	sy
 8004fa2:	60fb      	str	r3, [r7, #12]
}
 8004fa4:	bf00      	nop
 8004fa6:	bf00      	nop
 8004fa8:	e7fd      	b.n	8004fa6 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8004faa:	f000 fc5d 	bl	8005868 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004fae:	4b1d      	ldr	r3, [pc, #116]	@ (8005024 <xTaskCheckForTimeOut+0xc0>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	685b      	ldr	r3, [r3, #4]
 8004fb8:	69ba      	ldr	r2, [r7, #24]
 8004fba:	1ad3      	subs	r3, r2, r3
 8004fbc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fc6:	d102      	bne.n	8004fce <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004fc8:	2300      	movs	r3, #0
 8004fca:	61fb      	str	r3, [r7, #28]
 8004fcc:	e023      	b.n	8005016 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681a      	ldr	r2, [r3, #0]
 8004fd2:	4b15      	ldr	r3, [pc, #84]	@ (8005028 <xTaskCheckForTimeOut+0xc4>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	429a      	cmp	r2, r3
 8004fd8:	d007      	beq.n	8004fea <xTaskCheckForTimeOut+0x86>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	685b      	ldr	r3, [r3, #4]
 8004fde:	69ba      	ldr	r2, [r7, #24]
 8004fe0:	429a      	cmp	r2, r3
 8004fe2:	d302      	bcc.n	8004fea <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	61fb      	str	r3, [r7, #28]
 8004fe8:	e015      	b.n	8005016 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	697a      	ldr	r2, [r7, #20]
 8004ff0:	429a      	cmp	r2, r3
 8004ff2:	d20b      	bcs.n	800500c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	681a      	ldr	r2, [r3, #0]
 8004ff8:	697b      	ldr	r3, [r7, #20]
 8004ffa:	1ad2      	subs	r2, r2, r3
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005000:	6878      	ldr	r0, [r7, #4]
 8005002:	f7ff ff99 	bl	8004f38 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005006:	2300      	movs	r3, #0
 8005008:	61fb      	str	r3, [r7, #28]
 800500a:	e004      	b.n	8005016 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	2200      	movs	r2, #0
 8005010:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005012:	2301      	movs	r3, #1
 8005014:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005016:	f000 fc59 	bl	80058cc <vPortExitCritical>

	return xReturn;
 800501a:	69fb      	ldr	r3, [r7, #28]
}
 800501c:	4618      	mov	r0, r3
 800501e:	3720      	adds	r7, #32
 8005020:	46bd      	mov	sp, r7
 8005022:	bd80      	pop	{r7, pc}
 8005024:	20000964 	.word	0x20000964
 8005028:	20000978 	.word	0x20000978

0800502c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800502c:	b480      	push	{r7}
 800502e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005030:	4b03      	ldr	r3, [pc, #12]	@ (8005040 <vTaskMissedYield+0x14>)
 8005032:	2201      	movs	r2, #1
 8005034:	601a      	str	r2, [r3, #0]
}
 8005036:	bf00      	nop
 8005038:	46bd      	mov	sp, r7
 800503a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503e:	4770      	bx	lr
 8005040:	20000974 	.word	0x20000974

08005044 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b082      	sub	sp, #8
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800504c:	f000 f852 	bl	80050f4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005050:	4b06      	ldr	r3, [pc, #24]	@ (800506c <prvIdleTask+0x28>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	2b01      	cmp	r3, #1
 8005056:	d9f9      	bls.n	800504c <prvIdleTask+0x8>
			{
				taskYIELD();
 8005058:	4b05      	ldr	r3, [pc, #20]	@ (8005070 <prvIdleTask+0x2c>)
 800505a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800505e:	601a      	str	r2, [r3, #0]
 8005060:	f3bf 8f4f 	dsb	sy
 8005064:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005068:	e7f0      	b.n	800504c <prvIdleTask+0x8>
 800506a:	bf00      	nop
 800506c:	20000864 	.word	0x20000864
 8005070:	e000ed04 	.word	0xe000ed04

08005074 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b082      	sub	sp, #8
 8005078:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800507a:	2300      	movs	r3, #0
 800507c:	607b      	str	r3, [r7, #4]
 800507e:	e00c      	b.n	800509a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005080:	687a      	ldr	r2, [r7, #4]
 8005082:	4613      	mov	r3, r2
 8005084:	009b      	lsls	r3, r3, #2
 8005086:	4413      	add	r3, r2
 8005088:	009b      	lsls	r3, r3, #2
 800508a:	4a12      	ldr	r2, [pc, #72]	@ (80050d4 <prvInitialiseTaskLists+0x60>)
 800508c:	4413      	add	r3, r2
 800508e:	4618      	mov	r0, r3
 8005090:	f7fe fe70 	bl	8003d74 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	3301      	adds	r3, #1
 8005098:	607b      	str	r3, [r7, #4]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2b06      	cmp	r3, #6
 800509e:	d9ef      	bls.n	8005080 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80050a0:	480d      	ldr	r0, [pc, #52]	@ (80050d8 <prvInitialiseTaskLists+0x64>)
 80050a2:	f7fe fe67 	bl	8003d74 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80050a6:	480d      	ldr	r0, [pc, #52]	@ (80050dc <prvInitialiseTaskLists+0x68>)
 80050a8:	f7fe fe64 	bl	8003d74 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80050ac:	480c      	ldr	r0, [pc, #48]	@ (80050e0 <prvInitialiseTaskLists+0x6c>)
 80050ae:	f7fe fe61 	bl	8003d74 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80050b2:	480c      	ldr	r0, [pc, #48]	@ (80050e4 <prvInitialiseTaskLists+0x70>)
 80050b4:	f7fe fe5e 	bl	8003d74 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80050b8:	480b      	ldr	r0, [pc, #44]	@ (80050e8 <prvInitialiseTaskLists+0x74>)
 80050ba:	f7fe fe5b 	bl	8003d74 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80050be:	4b0b      	ldr	r3, [pc, #44]	@ (80050ec <prvInitialiseTaskLists+0x78>)
 80050c0:	4a05      	ldr	r2, [pc, #20]	@ (80050d8 <prvInitialiseTaskLists+0x64>)
 80050c2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80050c4:	4b0a      	ldr	r3, [pc, #40]	@ (80050f0 <prvInitialiseTaskLists+0x7c>)
 80050c6:	4a05      	ldr	r2, [pc, #20]	@ (80050dc <prvInitialiseTaskLists+0x68>)
 80050c8:	601a      	str	r2, [r3, #0]
}
 80050ca:	bf00      	nop
 80050cc:	3708      	adds	r7, #8
 80050ce:	46bd      	mov	sp, r7
 80050d0:	bd80      	pop	{r7, pc}
 80050d2:	bf00      	nop
 80050d4:	20000864 	.word	0x20000864
 80050d8:	200008f0 	.word	0x200008f0
 80050dc:	20000904 	.word	0x20000904
 80050e0:	20000920 	.word	0x20000920
 80050e4:	20000934 	.word	0x20000934
 80050e8:	2000094c 	.word	0x2000094c
 80050ec:	20000918 	.word	0x20000918
 80050f0:	2000091c 	.word	0x2000091c

080050f4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b082      	sub	sp, #8
 80050f8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80050fa:	e019      	b.n	8005130 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80050fc:	f000 fbb4 	bl	8005868 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005100:	4b10      	ldr	r3, [pc, #64]	@ (8005144 <prvCheckTasksWaitingTermination+0x50>)
 8005102:	68db      	ldr	r3, [r3, #12]
 8005104:	68db      	ldr	r3, [r3, #12]
 8005106:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	3304      	adds	r3, #4
 800510c:	4618      	mov	r0, r3
 800510e:	f7fe febb 	bl	8003e88 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005112:	4b0d      	ldr	r3, [pc, #52]	@ (8005148 <prvCheckTasksWaitingTermination+0x54>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	3b01      	subs	r3, #1
 8005118:	4a0b      	ldr	r2, [pc, #44]	@ (8005148 <prvCheckTasksWaitingTermination+0x54>)
 800511a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800511c:	4b0b      	ldr	r3, [pc, #44]	@ (800514c <prvCheckTasksWaitingTermination+0x58>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	3b01      	subs	r3, #1
 8005122:	4a0a      	ldr	r2, [pc, #40]	@ (800514c <prvCheckTasksWaitingTermination+0x58>)
 8005124:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005126:	f000 fbd1 	bl	80058cc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800512a:	6878      	ldr	r0, [r7, #4]
 800512c:	f000 f810 	bl	8005150 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005130:	4b06      	ldr	r3, [pc, #24]	@ (800514c <prvCheckTasksWaitingTermination+0x58>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d1e1      	bne.n	80050fc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005138:	bf00      	nop
 800513a:	bf00      	nop
 800513c:	3708      	adds	r7, #8
 800513e:	46bd      	mov	sp, r7
 8005140:	bd80      	pop	{r7, pc}
 8005142:	bf00      	nop
 8005144:	20000934 	.word	0x20000934
 8005148:	20000960 	.word	0x20000960
 800514c:	20000948 	.word	0x20000948

08005150 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005150:	b580      	push	{r7, lr}
 8005152:	b082      	sub	sp, #8
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	334c      	adds	r3, #76	@ 0x4c
 800515c:	4618      	mov	r0, r3
 800515e:	f001 f87f 	bl	8006260 <_reclaim_reent>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005166:	4618      	mov	r0, r3
 8005168:	f000 fd2c 	bl	8005bc4 <vPortFree>
			vPortFree( pxTCB );
 800516c:	6878      	ldr	r0, [r7, #4]
 800516e:	f000 fd29 	bl	8005bc4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005172:	bf00      	nop
 8005174:	3708      	adds	r7, #8
 8005176:	46bd      	mov	sp, r7
 8005178:	bd80      	pop	{r7, pc}
	...

0800517c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800517c:	b480      	push	{r7}
 800517e:	b083      	sub	sp, #12
 8005180:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005182:	4b0c      	ldr	r3, [pc, #48]	@ (80051b4 <prvResetNextTaskUnblockTime+0x38>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d104      	bne.n	8005196 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800518c:	4b0a      	ldr	r3, [pc, #40]	@ (80051b8 <prvResetNextTaskUnblockTime+0x3c>)
 800518e:	f04f 32ff 	mov.w	r2, #4294967295
 8005192:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005194:	e008      	b.n	80051a8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005196:	4b07      	ldr	r3, [pc, #28]	@ (80051b4 <prvResetNextTaskUnblockTime+0x38>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	68db      	ldr	r3, [r3, #12]
 800519c:	68db      	ldr	r3, [r3, #12]
 800519e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	685b      	ldr	r3, [r3, #4]
 80051a4:	4a04      	ldr	r2, [pc, #16]	@ (80051b8 <prvResetNextTaskUnblockTime+0x3c>)
 80051a6:	6013      	str	r3, [r2, #0]
}
 80051a8:	bf00      	nop
 80051aa:	370c      	adds	r7, #12
 80051ac:	46bd      	mov	sp, r7
 80051ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b2:	4770      	bx	lr
 80051b4:	20000918 	.word	0x20000918
 80051b8:	20000980 	.word	0x20000980

080051bc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80051bc:	b480      	push	{r7}
 80051be:	b083      	sub	sp, #12
 80051c0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80051c2:	4b0b      	ldr	r3, [pc, #44]	@ (80051f0 <xTaskGetSchedulerState+0x34>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d102      	bne.n	80051d0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80051ca:	2301      	movs	r3, #1
 80051cc:	607b      	str	r3, [r7, #4]
 80051ce:	e008      	b.n	80051e2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80051d0:	4b08      	ldr	r3, [pc, #32]	@ (80051f4 <xTaskGetSchedulerState+0x38>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d102      	bne.n	80051de <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80051d8:	2302      	movs	r3, #2
 80051da:	607b      	str	r3, [r7, #4]
 80051dc:	e001      	b.n	80051e2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80051de:	2300      	movs	r3, #0
 80051e0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80051e2:	687b      	ldr	r3, [r7, #4]
	}
 80051e4:	4618      	mov	r0, r3
 80051e6:	370c      	adds	r7, #12
 80051e8:	46bd      	mov	sp, r7
 80051ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ee:	4770      	bx	lr
 80051f0:	2000096c 	.word	0x2000096c
 80051f4:	20000988 	.word	0x20000988

080051f8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b084      	sub	sp, #16
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005204:	2300      	movs	r3, #0
 8005206:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d05e      	beq.n	80052cc <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800520e:	68bb      	ldr	r3, [r7, #8]
 8005210:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005212:	4b31      	ldr	r3, [pc, #196]	@ (80052d8 <xTaskPriorityInherit+0xe0>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005218:	429a      	cmp	r2, r3
 800521a:	d24e      	bcs.n	80052ba <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	699b      	ldr	r3, [r3, #24]
 8005220:	2b00      	cmp	r3, #0
 8005222:	db06      	blt.n	8005232 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005224:	4b2c      	ldr	r3, [pc, #176]	@ (80052d8 <xTaskPriorityInherit+0xe0>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800522a:	f1c3 0207 	rsb	r2, r3, #7
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8005232:	68bb      	ldr	r3, [r7, #8]
 8005234:	6959      	ldr	r1, [r3, #20]
 8005236:	68bb      	ldr	r3, [r7, #8]
 8005238:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800523a:	4613      	mov	r3, r2
 800523c:	009b      	lsls	r3, r3, #2
 800523e:	4413      	add	r3, r2
 8005240:	009b      	lsls	r3, r3, #2
 8005242:	4a26      	ldr	r2, [pc, #152]	@ (80052dc <xTaskPriorityInherit+0xe4>)
 8005244:	4413      	add	r3, r2
 8005246:	4299      	cmp	r1, r3
 8005248:	d12f      	bne.n	80052aa <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	3304      	adds	r3, #4
 800524e:	4618      	mov	r0, r3
 8005250:	f7fe fe1a 	bl	8003e88 <uxListRemove>
 8005254:	4603      	mov	r3, r0
 8005256:	2b00      	cmp	r3, #0
 8005258:	d10a      	bne.n	8005270 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800525a:	68bb      	ldr	r3, [r7, #8]
 800525c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800525e:	2201      	movs	r2, #1
 8005260:	fa02 f303 	lsl.w	r3, r2, r3
 8005264:	43da      	mvns	r2, r3
 8005266:	4b1e      	ldr	r3, [pc, #120]	@ (80052e0 <xTaskPriorityInherit+0xe8>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4013      	ands	r3, r2
 800526c:	4a1c      	ldr	r2, [pc, #112]	@ (80052e0 <xTaskPriorityInherit+0xe8>)
 800526e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005270:	4b19      	ldr	r3, [pc, #100]	@ (80052d8 <xTaskPriorityInherit+0xe0>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005276:	68bb      	ldr	r3, [r7, #8]
 8005278:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800527a:	68bb      	ldr	r3, [r7, #8]
 800527c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800527e:	2201      	movs	r2, #1
 8005280:	409a      	lsls	r2, r3
 8005282:	4b17      	ldr	r3, [pc, #92]	@ (80052e0 <xTaskPriorityInherit+0xe8>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4313      	orrs	r3, r2
 8005288:	4a15      	ldr	r2, [pc, #84]	@ (80052e0 <xTaskPriorityInherit+0xe8>)
 800528a:	6013      	str	r3, [r2, #0]
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005290:	4613      	mov	r3, r2
 8005292:	009b      	lsls	r3, r3, #2
 8005294:	4413      	add	r3, r2
 8005296:	009b      	lsls	r3, r3, #2
 8005298:	4a10      	ldr	r2, [pc, #64]	@ (80052dc <xTaskPriorityInherit+0xe4>)
 800529a:	441a      	add	r2, r3
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	3304      	adds	r3, #4
 80052a0:	4619      	mov	r1, r3
 80052a2:	4610      	mov	r0, r2
 80052a4:	f7fe fd93 	bl	8003dce <vListInsertEnd>
 80052a8:	e004      	b.n	80052b4 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80052aa:	4b0b      	ldr	r3, [pc, #44]	@ (80052d8 <xTaskPriorityInherit+0xe0>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80052b4:	2301      	movs	r3, #1
 80052b6:	60fb      	str	r3, [r7, #12]
 80052b8:	e008      	b.n	80052cc <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80052be:	4b06      	ldr	r3, [pc, #24]	@ (80052d8 <xTaskPriorityInherit+0xe0>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052c4:	429a      	cmp	r2, r3
 80052c6:	d201      	bcs.n	80052cc <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80052c8:	2301      	movs	r3, #1
 80052ca:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80052cc:	68fb      	ldr	r3, [r7, #12]
	}
 80052ce:	4618      	mov	r0, r3
 80052d0:	3710      	adds	r7, #16
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bd80      	pop	{r7, pc}
 80052d6:	bf00      	nop
 80052d8:	20000860 	.word	0x20000860
 80052dc:	20000864 	.word	0x20000864
 80052e0:	20000968 	.word	0x20000968

080052e4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b086      	sub	sp, #24
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80052f0:	2300      	movs	r3, #0
 80052f2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d070      	beq.n	80053dc <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80052fa:	4b3b      	ldr	r3, [pc, #236]	@ (80053e8 <xTaskPriorityDisinherit+0x104>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	693a      	ldr	r2, [r7, #16]
 8005300:	429a      	cmp	r2, r3
 8005302:	d00b      	beq.n	800531c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8005304:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005308:	f383 8811 	msr	BASEPRI, r3
 800530c:	f3bf 8f6f 	isb	sy
 8005310:	f3bf 8f4f 	dsb	sy
 8005314:	60fb      	str	r3, [r7, #12]
}
 8005316:	bf00      	nop
 8005318:	bf00      	nop
 800531a:	e7fd      	b.n	8005318 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800531c:	693b      	ldr	r3, [r7, #16]
 800531e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005320:	2b00      	cmp	r3, #0
 8005322:	d10b      	bne.n	800533c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8005324:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005328:	f383 8811 	msr	BASEPRI, r3
 800532c:	f3bf 8f6f 	isb	sy
 8005330:	f3bf 8f4f 	dsb	sy
 8005334:	60bb      	str	r3, [r7, #8]
}
 8005336:	bf00      	nop
 8005338:	bf00      	nop
 800533a:	e7fd      	b.n	8005338 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800533c:	693b      	ldr	r3, [r7, #16]
 800533e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005340:	1e5a      	subs	r2, r3, #1
 8005342:	693b      	ldr	r3, [r7, #16]
 8005344:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005346:	693b      	ldr	r3, [r7, #16]
 8005348:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800534a:	693b      	ldr	r3, [r7, #16]
 800534c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800534e:	429a      	cmp	r2, r3
 8005350:	d044      	beq.n	80053dc <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005352:	693b      	ldr	r3, [r7, #16]
 8005354:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005356:	2b00      	cmp	r3, #0
 8005358:	d140      	bne.n	80053dc <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800535a:	693b      	ldr	r3, [r7, #16]
 800535c:	3304      	adds	r3, #4
 800535e:	4618      	mov	r0, r3
 8005360:	f7fe fd92 	bl	8003e88 <uxListRemove>
 8005364:	4603      	mov	r3, r0
 8005366:	2b00      	cmp	r3, #0
 8005368:	d115      	bne.n	8005396 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800536a:	693b      	ldr	r3, [r7, #16]
 800536c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800536e:	491f      	ldr	r1, [pc, #124]	@ (80053ec <xTaskPriorityDisinherit+0x108>)
 8005370:	4613      	mov	r3, r2
 8005372:	009b      	lsls	r3, r3, #2
 8005374:	4413      	add	r3, r2
 8005376:	009b      	lsls	r3, r3, #2
 8005378:	440b      	add	r3, r1
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d10a      	bne.n	8005396 <xTaskPriorityDisinherit+0xb2>
 8005380:	693b      	ldr	r3, [r7, #16]
 8005382:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005384:	2201      	movs	r2, #1
 8005386:	fa02 f303 	lsl.w	r3, r2, r3
 800538a:	43da      	mvns	r2, r3
 800538c:	4b18      	ldr	r3, [pc, #96]	@ (80053f0 <xTaskPriorityDisinherit+0x10c>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4013      	ands	r3, r2
 8005392:	4a17      	ldr	r2, [pc, #92]	@ (80053f0 <xTaskPriorityDisinherit+0x10c>)
 8005394:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005396:	693b      	ldr	r3, [r7, #16]
 8005398:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800539a:	693b      	ldr	r3, [r7, #16]
 800539c:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800539e:	693b      	ldr	r3, [r7, #16]
 80053a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053a2:	f1c3 0207 	rsb	r2, r3, #7
 80053a6:	693b      	ldr	r3, [r7, #16]
 80053a8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80053aa:	693b      	ldr	r3, [r7, #16]
 80053ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053ae:	2201      	movs	r2, #1
 80053b0:	409a      	lsls	r2, r3
 80053b2:	4b0f      	ldr	r3, [pc, #60]	@ (80053f0 <xTaskPriorityDisinherit+0x10c>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4313      	orrs	r3, r2
 80053b8:	4a0d      	ldr	r2, [pc, #52]	@ (80053f0 <xTaskPriorityDisinherit+0x10c>)
 80053ba:	6013      	str	r3, [r2, #0]
 80053bc:	693b      	ldr	r3, [r7, #16]
 80053be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053c0:	4613      	mov	r3, r2
 80053c2:	009b      	lsls	r3, r3, #2
 80053c4:	4413      	add	r3, r2
 80053c6:	009b      	lsls	r3, r3, #2
 80053c8:	4a08      	ldr	r2, [pc, #32]	@ (80053ec <xTaskPriorityDisinherit+0x108>)
 80053ca:	441a      	add	r2, r3
 80053cc:	693b      	ldr	r3, [r7, #16]
 80053ce:	3304      	adds	r3, #4
 80053d0:	4619      	mov	r1, r3
 80053d2:	4610      	mov	r0, r2
 80053d4:	f7fe fcfb 	bl	8003dce <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80053d8:	2301      	movs	r3, #1
 80053da:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80053dc:	697b      	ldr	r3, [r7, #20]
	}
 80053de:	4618      	mov	r0, r3
 80053e0:	3718      	adds	r7, #24
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bd80      	pop	{r7, pc}
 80053e6:	bf00      	nop
 80053e8:	20000860 	.word	0x20000860
 80053ec:	20000864 	.word	0x20000864
 80053f0:	20000968 	.word	0x20000968

080053f4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b088      	sub	sp, #32
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
 80053fc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005402:	2301      	movs	r3, #1
 8005404:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d079      	beq.n	8005500 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800540c:	69bb      	ldr	r3, [r7, #24]
 800540e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005410:	2b00      	cmp	r3, #0
 8005412:	d10b      	bne.n	800542c <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8005414:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005418:	f383 8811 	msr	BASEPRI, r3
 800541c:	f3bf 8f6f 	isb	sy
 8005420:	f3bf 8f4f 	dsb	sy
 8005424:	60fb      	str	r3, [r7, #12]
}
 8005426:	bf00      	nop
 8005428:	bf00      	nop
 800542a:	e7fd      	b.n	8005428 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800542c:	69bb      	ldr	r3, [r7, #24]
 800542e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005430:	683a      	ldr	r2, [r7, #0]
 8005432:	429a      	cmp	r2, r3
 8005434:	d902      	bls.n	800543c <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	61fb      	str	r3, [r7, #28]
 800543a:	e002      	b.n	8005442 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800543c:	69bb      	ldr	r3, [r7, #24]
 800543e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005440:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005442:	69bb      	ldr	r3, [r7, #24]
 8005444:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005446:	69fa      	ldr	r2, [r7, #28]
 8005448:	429a      	cmp	r2, r3
 800544a:	d059      	beq.n	8005500 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800544c:	69bb      	ldr	r3, [r7, #24]
 800544e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005450:	697a      	ldr	r2, [r7, #20]
 8005452:	429a      	cmp	r2, r3
 8005454:	d154      	bne.n	8005500 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8005456:	4b2c      	ldr	r3, [pc, #176]	@ (8005508 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	69ba      	ldr	r2, [r7, #24]
 800545c:	429a      	cmp	r2, r3
 800545e:	d10b      	bne.n	8005478 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8005460:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005464:	f383 8811 	msr	BASEPRI, r3
 8005468:	f3bf 8f6f 	isb	sy
 800546c:	f3bf 8f4f 	dsb	sy
 8005470:	60bb      	str	r3, [r7, #8]
}
 8005472:	bf00      	nop
 8005474:	bf00      	nop
 8005476:	e7fd      	b.n	8005474 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005478:	69bb      	ldr	r3, [r7, #24]
 800547a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800547c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800547e:	69bb      	ldr	r3, [r7, #24]
 8005480:	69fa      	ldr	r2, [r7, #28]
 8005482:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005484:	69bb      	ldr	r3, [r7, #24]
 8005486:	699b      	ldr	r3, [r3, #24]
 8005488:	2b00      	cmp	r3, #0
 800548a:	db04      	blt.n	8005496 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800548c:	69fb      	ldr	r3, [r7, #28]
 800548e:	f1c3 0207 	rsb	r2, r3, #7
 8005492:	69bb      	ldr	r3, [r7, #24]
 8005494:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005496:	69bb      	ldr	r3, [r7, #24]
 8005498:	6959      	ldr	r1, [r3, #20]
 800549a:	693a      	ldr	r2, [r7, #16]
 800549c:	4613      	mov	r3, r2
 800549e:	009b      	lsls	r3, r3, #2
 80054a0:	4413      	add	r3, r2
 80054a2:	009b      	lsls	r3, r3, #2
 80054a4:	4a19      	ldr	r2, [pc, #100]	@ (800550c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80054a6:	4413      	add	r3, r2
 80054a8:	4299      	cmp	r1, r3
 80054aa:	d129      	bne.n	8005500 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80054ac:	69bb      	ldr	r3, [r7, #24]
 80054ae:	3304      	adds	r3, #4
 80054b0:	4618      	mov	r0, r3
 80054b2:	f7fe fce9 	bl	8003e88 <uxListRemove>
 80054b6:	4603      	mov	r3, r0
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d10a      	bne.n	80054d2 <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80054bc:	69bb      	ldr	r3, [r7, #24]
 80054be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054c0:	2201      	movs	r2, #1
 80054c2:	fa02 f303 	lsl.w	r3, r2, r3
 80054c6:	43da      	mvns	r2, r3
 80054c8:	4b11      	ldr	r3, [pc, #68]	@ (8005510 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4013      	ands	r3, r2
 80054ce:	4a10      	ldr	r2, [pc, #64]	@ (8005510 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80054d0:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80054d2:	69bb      	ldr	r3, [r7, #24]
 80054d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054d6:	2201      	movs	r2, #1
 80054d8:	409a      	lsls	r2, r3
 80054da:	4b0d      	ldr	r3, [pc, #52]	@ (8005510 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4313      	orrs	r3, r2
 80054e0:	4a0b      	ldr	r2, [pc, #44]	@ (8005510 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80054e2:	6013      	str	r3, [r2, #0]
 80054e4:	69bb      	ldr	r3, [r7, #24]
 80054e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054e8:	4613      	mov	r3, r2
 80054ea:	009b      	lsls	r3, r3, #2
 80054ec:	4413      	add	r3, r2
 80054ee:	009b      	lsls	r3, r3, #2
 80054f0:	4a06      	ldr	r2, [pc, #24]	@ (800550c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80054f2:	441a      	add	r2, r3
 80054f4:	69bb      	ldr	r3, [r7, #24]
 80054f6:	3304      	adds	r3, #4
 80054f8:	4619      	mov	r1, r3
 80054fa:	4610      	mov	r0, r2
 80054fc:	f7fe fc67 	bl	8003dce <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005500:	bf00      	nop
 8005502:	3720      	adds	r7, #32
 8005504:	46bd      	mov	sp, r7
 8005506:	bd80      	pop	{r7, pc}
 8005508:	20000860 	.word	0x20000860
 800550c:	20000864 	.word	0x20000864
 8005510:	20000968 	.word	0x20000968

08005514 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8005514:	b480      	push	{r7}
 8005516:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005518:	4b07      	ldr	r3, [pc, #28]	@ (8005538 <pvTaskIncrementMutexHeldCount+0x24>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d004      	beq.n	800552a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8005520:	4b05      	ldr	r3, [pc, #20]	@ (8005538 <pvTaskIncrementMutexHeldCount+0x24>)
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005526:	3201      	adds	r2, #1
 8005528:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 800552a:	4b03      	ldr	r3, [pc, #12]	@ (8005538 <pvTaskIncrementMutexHeldCount+0x24>)
 800552c:	681b      	ldr	r3, [r3, #0]
	}
 800552e:	4618      	mov	r0, r3
 8005530:	46bd      	mov	sp, r7
 8005532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005536:	4770      	bx	lr
 8005538:	20000860 	.word	0x20000860

0800553c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b084      	sub	sp, #16
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
 8005544:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005546:	4b29      	ldr	r3, [pc, #164]	@ (80055ec <prvAddCurrentTaskToDelayedList+0xb0>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800554c:	4b28      	ldr	r3, [pc, #160]	@ (80055f0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	3304      	adds	r3, #4
 8005552:	4618      	mov	r0, r3
 8005554:	f7fe fc98 	bl	8003e88 <uxListRemove>
 8005558:	4603      	mov	r3, r0
 800555a:	2b00      	cmp	r3, #0
 800555c:	d10b      	bne.n	8005576 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800555e:	4b24      	ldr	r3, [pc, #144]	@ (80055f0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005564:	2201      	movs	r2, #1
 8005566:	fa02 f303 	lsl.w	r3, r2, r3
 800556a:	43da      	mvns	r2, r3
 800556c:	4b21      	ldr	r3, [pc, #132]	@ (80055f4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4013      	ands	r3, r2
 8005572:	4a20      	ldr	r2, [pc, #128]	@ (80055f4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005574:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	f1b3 3fff 	cmp.w	r3, #4294967295
 800557c:	d10a      	bne.n	8005594 <prvAddCurrentTaskToDelayedList+0x58>
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d007      	beq.n	8005594 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005584:	4b1a      	ldr	r3, [pc, #104]	@ (80055f0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	3304      	adds	r3, #4
 800558a:	4619      	mov	r1, r3
 800558c:	481a      	ldr	r0, [pc, #104]	@ (80055f8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800558e:	f7fe fc1e 	bl	8003dce <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005592:	e026      	b.n	80055e2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005594:	68fa      	ldr	r2, [r7, #12]
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	4413      	add	r3, r2
 800559a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800559c:	4b14      	ldr	r3, [pc, #80]	@ (80055f0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	68ba      	ldr	r2, [r7, #8]
 80055a2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80055a4:	68ba      	ldr	r2, [r7, #8]
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	429a      	cmp	r2, r3
 80055aa:	d209      	bcs.n	80055c0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80055ac:	4b13      	ldr	r3, [pc, #76]	@ (80055fc <prvAddCurrentTaskToDelayedList+0xc0>)
 80055ae:	681a      	ldr	r2, [r3, #0]
 80055b0:	4b0f      	ldr	r3, [pc, #60]	@ (80055f0 <prvAddCurrentTaskToDelayedList+0xb4>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	3304      	adds	r3, #4
 80055b6:	4619      	mov	r1, r3
 80055b8:	4610      	mov	r0, r2
 80055ba:	f7fe fc2c 	bl	8003e16 <vListInsert>
}
 80055be:	e010      	b.n	80055e2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80055c0:	4b0f      	ldr	r3, [pc, #60]	@ (8005600 <prvAddCurrentTaskToDelayedList+0xc4>)
 80055c2:	681a      	ldr	r2, [r3, #0]
 80055c4:	4b0a      	ldr	r3, [pc, #40]	@ (80055f0 <prvAddCurrentTaskToDelayedList+0xb4>)
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	3304      	adds	r3, #4
 80055ca:	4619      	mov	r1, r3
 80055cc:	4610      	mov	r0, r2
 80055ce:	f7fe fc22 	bl	8003e16 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80055d2:	4b0c      	ldr	r3, [pc, #48]	@ (8005604 <prvAddCurrentTaskToDelayedList+0xc8>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	68ba      	ldr	r2, [r7, #8]
 80055d8:	429a      	cmp	r2, r3
 80055da:	d202      	bcs.n	80055e2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80055dc:	4a09      	ldr	r2, [pc, #36]	@ (8005604 <prvAddCurrentTaskToDelayedList+0xc8>)
 80055de:	68bb      	ldr	r3, [r7, #8]
 80055e0:	6013      	str	r3, [r2, #0]
}
 80055e2:	bf00      	nop
 80055e4:	3710      	adds	r7, #16
 80055e6:	46bd      	mov	sp, r7
 80055e8:	bd80      	pop	{r7, pc}
 80055ea:	bf00      	nop
 80055ec:	20000964 	.word	0x20000964
 80055f0:	20000860 	.word	0x20000860
 80055f4:	20000968 	.word	0x20000968
 80055f8:	2000094c 	.word	0x2000094c
 80055fc:	2000091c 	.word	0x2000091c
 8005600:	20000918 	.word	0x20000918
 8005604:	20000980 	.word	0x20000980

08005608 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005608:	b480      	push	{r7}
 800560a:	b085      	sub	sp, #20
 800560c:	af00      	add	r7, sp, #0
 800560e:	60f8      	str	r0, [r7, #12]
 8005610:	60b9      	str	r1, [r7, #8]
 8005612:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	3b04      	subs	r3, #4
 8005618:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005620:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	3b04      	subs	r3, #4
 8005626:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	f023 0201 	bic.w	r2, r3, #1
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	3b04      	subs	r3, #4
 8005636:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005638:	4a0c      	ldr	r2, [pc, #48]	@ (800566c <pxPortInitialiseStack+0x64>)
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	3b14      	subs	r3, #20
 8005642:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005644:	687a      	ldr	r2, [r7, #4]
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	3b04      	subs	r3, #4
 800564e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	f06f 0202 	mvn.w	r2, #2
 8005656:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	3b20      	subs	r3, #32
 800565c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800565e:	68fb      	ldr	r3, [r7, #12]
}
 8005660:	4618      	mov	r0, r3
 8005662:	3714      	adds	r7, #20
 8005664:	46bd      	mov	sp, r7
 8005666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566a:	4770      	bx	lr
 800566c:	08005671 	.word	0x08005671

08005670 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005670:	b480      	push	{r7}
 8005672:	b085      	sub	sp, #20
 8005674:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005676:	2300      	movs	r3, #0
 8005678:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800567a:	4b13      	ldr	r3, [pc, #76]	@ (80056c8 <prvTaskExitError+0x58>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005682:	d00b      	beq.n	800569c <prvTaskExitError+0x2c>
	__asm volatile
 8005684:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005688:	f383 8811 	msr	BASEPRI, r3
 800568c:	f3bf 8f6f 	isb	sy
 8005690:	f3bf 8f4f 	dsb	sy
 8005694:	60fb      	str	r3, [r7, #12]
}
 8005696:	bf00      	nop
 8005698:	bf00      	nop
 800569a:	e7fd      	b.n	8005698 <prvTaskExitError+0x28>
	__asm volatile
 800569c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056a0:	f383 8811 	msr	BASEPRI, r3
 80056a4:	f3bf 8f6f 	isb	sy
 80056a8:	f3bf 8f4f 	dsb	sy
 80056ac:	60bb      	str	r3, [r7, #8]
}
 80056ae:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80056b0:	bf00      	nop
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d0fc      	beq.n	80056b2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80056b8:	bf00      	nop
 80056ba:	bf00      	nop
 80056bc:	3714      	adds	r7, #20
 80056be:	46bd      	mov	sp, r7
 80056c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c4:	4770      	bx	lr
 80056c6:	bf00      	nop
 80056c8:	2000000c 	.word	0x2000000c
 80056cc:	00000000 	.word	0x00000000

080056d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80056d0:	4b07      	ldr	r3, [pc, #28]	@ (80056f0 <pxCurrentTCBConst2>)
 80056d2:	6819      	ldr	r1, [r3, #0]
 80056d4:	6808      	ldr	r0, [r1, #0]
 80056d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056da:	f380 8809 	msr	PSP, r0
 80056de:	f3bf 8f6f 	isb	sy
 80056e2:	f04f 0000 	mov.w	r0, #0
 80056e6:	f380 8811 	msr	BASEPRI, r0
 80056ea:	4770      	bx	lr
 80056ec:	f3af 8000 	nop.w

080056f0 <pxCurrentTCBConst2>:
 80056f0:	20000860 	.word	0x20000860
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80056f4:	bf00      	nop
 80056f6:	bf00      	nop

080056f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80056f8:	4808      	ldr	r0, [pc, #32]	@ (800571c <prvPortStartFirstTask+0x24>)
 80056fa:	6800      	ldr	r0, [r0, #0]
 80056fc:	6800      	ldr	r0, [r0, #0]
 80056fe:	f380 8808 	msr	MSP, r0
 8005702:	f04f 0000 	mov.w	r0, #0
 8005706:	f380 8814 	msr	CONTROL, r0
 800570a:	b662      	cpsie	i
 800570c:	b661      	cpsie	f
 800570e:	f3bf 8f4f 	dsb	sy
 8005712:	f3bf 8f6f 	isb	sy
 8005716:	df00      	svc	0
 8005718:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800571a:	bf00      	nop
 800571c:	e000ed08 	.word	0xe000ed08

08005720 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b086      	sub	sp, #24
 8005724:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005726:	4b47      	ldr	r3, [pc, #284]	@ (8005844 <xPortStartScheduler+0x124>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4a47      	ldr	r2, [pc, #284]	@ (8005848 <xPortStartScheduler+0x128>)
 800572c:	4293      	cmp	r3, r2
 800572e:	d10b      	bne.n	8005748 <xPortStartScheduler+0x28>
	__asm volatile
 8005730:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005734:	f383 8811 	msr	BASEPRI, r3
 8005738:	f3bf 8f6f 	isb	sy
 800573c:	f3bf 8f4f 	dsb	sy
 8005740:	613b      	str	r3, [r7, #16]
}
 8005742:	bf00      	nop
 8005744:	bf00      	nop
 8005746:	e7fd      	b.n	8005744 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005748:	4b3e      	ldr	r3, [pc, #248]	@ (8005844 <xPortStartScheduler+0x124>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	4a3f      	ldr	r2, [pc, #252]	@ (800584c <xPortStartScheduler+0x12c>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d10b      	bne.n	800576a <xPortStartScheduler+0x4a>
	__asm volatile
 8005752:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005756:	f383 8811 	msr	BASEPRI, r3
 800575a:	f3bf 8f6f 	isb	sy
 800575e:	f3bf 8f4f 	dsb	sy
 8005762:	60fb      	str	r3, [r7, #12]
}
 8005764:	bf00      	nop
 8005766:	bf00      	nop
 8005768:	e7fd      	b.n	8005766 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800576a:	4b39      	ldr	r3, [pc, #228]	@ (8005850 <xPortStartScheduler+0x130>)
 800576c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800576e:	697b      	ldr	r3, [r7, #20]
 8005770:	781b      	ldrb	r3, [r3, #0]
 8005772:	b2db      	uxtb	r3, r3
 8005774:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005776:	697b      	ldr	r3, [r7, #20]
 8005778:	22ff      	movs	r2, #255	@ 0xff
 800577a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800577c:	697b      	ldr	r3, [r7, #20]
 800577e:	781b      	ldrb	r3, [r3, #0]
 8005780:	b2db      	uxtb	r3, r3
 8005782:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005784:	78fb      	ldrb	r3, [r7, #3]
 8005786:	b2db      	uxtb	r3, r3
 8005788:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800578c:	b2da      	uxtb	r2, r3
 800578e:	4b31      	ldr	r3, [pc, #196]	@ (8005854 <xPortStartScheduler+0x134>)
 8005790:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005792:	4b31      	ldr	r3, [pc, #196]	@ (8005858 <xPortStartScheduler+0x138>)
 8005794:	2207      	movs	r2, #7
 8005796:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005798:	e009      	b.n	80057ae <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800579a:	4b2f      	ldr	r3, [pc, #188]	@ (8005858 <xPortStartScheduler+0x138>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	3b01      	subs	r3, #1
 80057a0:	4a2d      	ldr	r2, [pc, #180]	@ (8005858 <xPortStartScheduler+0x138>)
 80057a2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80057a4:	78fb      	ldrb	r3, [r7, #3]
 80057a6:	b2db      	uxtb	r3, r3
 80057a8:	005b      	lsls	r3, r3, #1
 80057aa:	b2db      	uxtb	r3, r3
 80057ac:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80057ae:	78fb      	ldrb	r3, [r7, #3]
 80057b0:	b2db      	uxtb	r3, r3
 80057b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057b6:	2b80      	cmp	r3, #128	@ 0x80
 80057b8:	d0ef      	beq.n	800579a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80057ba:	4b27      	ldr	r3, [pc, #156]	@ (8005858 <xPortStartScheduler+0x138>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f1c3 0307 	rsb	r3, r3, #7
 80057c2:	2b04      	cmp	r3, #4
 80057c4:	d00b      	beq.n	80057de <xPortStartScheduler+0xbe>
	__asm volatile
 80057c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057ca:	f383 8811 	msr	BASEPRI, r3
 80057ce:	f3bf 8f6f 	isb	sy
 80057d2:	f3bf 8f4f 	dsb	sy
 80057d6:	60bb      	str	r3, [r7, #8]
}
 80057d8:	bf00      	nop
 80057da:	bf00      	nop
 80057dc:	e7fd      	b.n	80057da <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80057de:	4b1e      	ldr	r3, [pc, #120]	@ (8005858 <xPortStartScheduler+0x138>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	021b      	lsls	r3, r3, #8
 80057e4:	4a1c      	ldr	r2, [pc, #112]	@ (8005858 <xPortStartScheduler+0x138>)
 80057e6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80057e8:	4b1b      	ldr	r3, [pc, #108]	@ (8005858 <xPortStartScheduler+0x138>)
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80057f0:	4a19      	ldr	r2, [pc, #100]	@ (8005858 <xPortStartScheduler+0x138>)
 80057f2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	b2da      	uxtb	r2, r3
 80057f8:	697b      	ldr	r3, [r7, #20]
 80057fa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80057fc:	4b17      	ldr	r3, [pc, #92]	@ (800585c <xPortStartScheduler+0x13c>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	4a16      	ldr	r2, [pc, #88]	@ (800585c <xPortStartScheduler+0x13c>)
 8005802:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005806:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005808:	4b14      	ldr	r3, [pc, #80]	@ (800585c <xPortStartScheduler+0x13c>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4a13      	ldr	r2, [pc, #76]	@ (800585c <xPortStartScheduler+0x13c>)
 800580e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005812:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005814:	f000 f8da 	bl	80059cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005818:	4b11      	ldr	r3, [pc, #68]	@ (8005860 <xPortStartScheduler+0x140>)
 800581a:	2200      	movs	r2, #0
 800581c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800581e:	f000 f8f9 	bl	8005a14 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005822:	4b10      	ldr	r3, [pc, #64]	@ (8005864 <xPortStartScheduler+0x144>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4a0f      	ldr	r2, [pc, #60]	@ (8005864 <xPortStartScheduler+0x144>)
 8005828:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800582c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800582e:	f7ff ff63 	bl	80056f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005832:	f7ff fa93 	bl	8004d5c <vTaskSwitchContext>
	prvTaskExitError();
 8005836:	f7ff ff1b 	bl	8005670 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800583a:	2300      	movs	r3, #0
}
 800583c:	4618      	mov	r0, r3
 800583e:	3718      	adds	r7, #24
 8005840:	46bd      	mov	sp, r7
 8005842:	bd80      	pop	{r7, pc}
 8005844:	e000ed00 	.word	0xe000ed00
 8005848:	410fc271 	.word	0x410fc271
 800584c:	410fc270 	.word	0x410fc270
 8005850:	e000e400 	.word	0xe000e400
 8005854:	2000098c 	.word	0x2000098c
 8005858:	20000990 	.word	0x20000990
 800585c:	e000ed20 	.word	0xe000ed20
 8005860:	2000000c 	.word	0x2000000c
 8005864:	e000ef34 	.word	0xe000ef34

08005868 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005868:	b480      	push	{r7}
 800586a:	b083      	sub	sp, #12
 800586c:	af00      	add	r7, sp, #0
	__asm volatile
 800586e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005872:	f383 8811 	msr	BASEPRI, r3
 8005876:	f3bf 8f6f 	isb	sy
 800587a:	f3bf 8f4f 	dsb	sy
 800587e:	607b      	str	r3, [r7, #4]
}
 8005880:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005882:	4b10      	ldr	r3, [pc, #64]	@ (80058c4 <vPortEnterCritical+0x5c>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	3301      	adds	r3, #1
 8005888:	4a0e      	ldr	r2, [pc, #56]	@ (80058c4 <vPortEnterCritical+0x5c>)
 800588a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800588c:	4b0d      	ldr	r3, [pc, #52]	@ (80058c4 <vPortEnterCritical+0x5c>)
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	2b01      	cmp	r3, #1
 8005892:	d110      	bne.n	80058b6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005894:	4b0c      	ldr	r3, [pc, #48]	@ (80058c8 <vPortEnterCritical+0x60>)
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	b2db      	uxtb	r3, r3
 800589a:	2b00      	cmp	r3, #0
 800589c:	d00b      	beq.n	80058b6 <vPortEnterCritical+0x4e>
	__asm volatile
 800589e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058a2:	f383 8811 	msr	BASEPRI, r3
 80058a6:	f3bf 8f6f 	isb	sy
 80058aa:	f3bf 8f4f 	dsb	sy
 80058ae:	603b      	str	r3, [r7, #0]
}
 80058b0:	bf00      	nop
 80058b2:	bf00      	nop
 80058b4:	e7fd      	b.n	80058b2 <vPortEnterCritical+0x4a>
	}
}
 80058b6:	bf00      	nop
 80058b8:	370c      	adds	r7, #12
 80058ba:	46bd      	mov	sp, r7
 80058bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c0:	4770      	bx	lr
 80058c2:	bf00      	nop
 80058c4:	2000000c 	.word	0x2000000c
 80058c8:	e000ed04 	.word	0xe000ed04

080058cc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80058cc:	b480      	push	{r7}
 80058ce:	b083      	sub	sp, #12
 80058d0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80058d2:	4b12      	ldr	r3, [pc, #72]	@ (800591c <vPortExitCritical+0x50>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d10b      	bne.n	80058f2 <vPortExitCritical+0x26>
	__asm volatile
 80058da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058de:	f383 8811 	msr	BASEPRI, r3
 80058e2:	f3bf 8f6f 	isb	sy
 80058e6:	f3bf 8f4f 	dsb	sy
 80058ea:	607b      	str	r3, [r7, #4]
}
 80058ec:	bf00      	nop
 80058ee:	bf00      	nop
 80058f0:	e7fd      	b.n	80058ee <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80058f2:	4b0a      	ldr	r3, [pc, #40]	@ (800591c <vPortExitCritical+0x50>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	3b01      	subs	r3, #1
 80058f8:	4a08      	ldr	r2, [pc, #32]	@ (800591c <vPortExitCritical+0x50>)
 80058fa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80058fc:	4b07      	ldr	r3, [pc, #28]	@ (800591c <vPortExitCritical+0x50>)
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d105      	bne.n	8005910 <vPortExitCritical+0x44>
 8005904:	2300      	movs	r3, #0
 8005906:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800590e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005910:	bf00      	nop
 8005912:	370c      	adds	r7, #12
 8005914:	46bd      	mov	sp, r7
 8005916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591a:	4770      	bx	lr
 800591c:	2000000c 	.word	0x2000000c

08005920 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005920:	f3ef 8009 	mrs	r0, PSP
 8005924:	f3bf 8f6f 	isb	sy
 8005928:	4b15      	ldr	r3, [pc, #84]	@ (8005980 <pxCurrentTCBConst>)
 800592a:	681a      	ldr	r2, [r3, #0]
 800592c:	f01e 0f10 	tst.w	lr, #16
 8005930:	bf08      	it	eq
 8005932:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005936:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800593a:	6010      	str	r0, [r2, #0]
 800593c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005940:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005944:	f380 8811 	msr	BASEPRI, r0
 8005948:	f3bf 8f4f 	dsb	sy
 800594c:	f3bf 8f6f 	isb	sy
 8005950:	f7ff fa04 	bl	8004d5c <vTaskSwitchContext>
 8005954:	f04f 0000 	mov.w	r0, #0
 8005958:	f380 8811 	msr	BASEPRI, r0
 800595c:	bc09      	pop	{r0, r3}
 800595e:	6819      	ldr	r1, [r3, #0]
 8005960:	6808      	ldr	r0, [r1, #0]
 8005962:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005966:	f01e 0f10 	tst.w	lr, #16
 800596a:	bf08      	it	eq
 800596c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005970:	f380 8809 	msr	PSP, r0
 8005974:	f3bf 8f6f 	isb	sy
 8005978:	4770      	bx	lr
 800597a:	bf00      	nop
 800597c:	f3af 8000 	nop.w

08005980 <pxCurrentTCBConst>:
 8005980:	20000860 	.word	0x20000860
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005984:	bf00      	nop
 8005986:	bf00      	nop

08005988 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b082      	sub	sp, #8
 800598c:	af00      	add	r7, sp, #0
	__asm volatile
 800598e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005992:	f383 8811 	msr	BASEPRI, r3
 8005996:	f3bf 8f6f 	isb	sy
 800599a:	f3bf 8f4f 	dsb	sy
 800599e:	607b      	str	r3, [r7, #4]
}
 80059a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80059a2:	f7ff f921 	bl	8004be8 <xTaskIncrementTick>
 80059a6:	4603      	mov	r3, r0
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d003      	beq.n	80059b4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80059ac:	4b06      	ldr	r3, [pc, #24]	@ (80059c8 <SysTick_Handler+0x40>)
 80059ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80059b2:	601a      	str	r2, [r3, #0]
 80059b4:	2300      	movs	r3, #0
 80059b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	f383 8811 	msr	BASEPRI, r3
}
 80059be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80059c0:	bf00      	nop
 80059c2:	3708      	adds	r7, #8
 80059c4:	46bd      	mov	sp, r7
 80059c6:	bd80      	pop	{r7, pc}
 80059c8:	e000ed04 	.word	0xe000ed04

080059cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80059cc:	b480      	push	{r7}
 80059ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80059d0:	4b0b      	ldr	r3, [pc, #44]	@ (8005a00 <vPortSetupTimerInterrupt+0x34>)
 80059d2:	2200      	movs	r2, #0
 80059d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80059d6:	4b0b      	ldr	r3, [pc, #44]	@ (8005a04 <vPortSetupTimerInterrupt+0x38>)
 80059d8:	2200      	movs	r2, #0
 80059da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80059dc:	4b0a      	ldr	r3, [pc, #40]	@ (8005a08 <vPortSetupTimerInterrupt+0x3c>)
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4a0a      	ldr	r2, [pc, #40]	@ (8005a0c <vPortSetupTimerInterrupt+0x40>)
 80059e2:	fba2 2303 	umull	r2, r3, r2, r3
 80059e6:	099b      	lsrs	r3, r3, #6
 80059e8:	4a09      	ldr	r2, [pc, #36]	@ (8005a10 <vPortSetupTimerInterrupt+0x44>)
 80059ea:	3b01      	subs	r3, #1
 80059ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80059ee:	4b04      	ldr	r3, [pc, #16]	@ (8005a00 <vPortSetupTimerInterrupt+0x34>)
 80059f0:	2207      	movs	r2, #7
 80059f2:	601a      	str	r2, [r3, #0]
}
 80059f4:	bf00      	nop
 80059f6:	46bd      	mov	sp, r7
 80059f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fc:	4770      	bx	lr
 80059fe:	bf00      	nop
 8005a00:	e000e010 	.word	0xe000e010
 8005a04:	e000e018 	.word	0xe000e018
 8005a08:	20000000 	.word	0x20000000
 8005a0c:	10624dd3 	.word	0x10624dd3
 8005a10:	e000e014 	.word	0xe000e014

08005a14 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005a14:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005a24 <vPortEnableVFP+0x10>
 8005a18:	6801      	ldr	r1, [r0, #0]
 8005a1a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8005a1e:	6001      	str	r1, [r0, #0]
 8005a20:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005a22:	bf00      	nop
 8005a24:	e000ed88 	.word	0xe000ed88

08005a28 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b08a      	sub	sp, #40	@ 0x28
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005a30:	2300      	movs	r3, #0
 8005a32:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005a34:	f7ff f82c 	bl	8004a90 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005a38:	4b5c      	ldr	r3, [pc, #368]	@ (8005bac <pvPortMalloc+0x184>)
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d101      	bne.n	8005a44 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005a40:	f000 f924 	bl	8005c8c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005a44:	4b5a      	ldr	r3, [pc, #360]	@ (8005bb0 <pvPortMalloc+0x188>)
 8005a46:	681a      	ldr	r2, [r3, #0]
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	4013      	ands	r3, r2
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	f040 8095 	bne.w	8005b7c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d01e      	beq.n	8005a96 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8005a58:	2208      	movs	r2, #8
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	4413      	add	r3, r2
 8005a5e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	f003 0307 	and.w	r3, r3, #7
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d015      	beq.n	8005a96 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	f023 0307 	bic.w	r3, r3, #7
 8005a70:	3308      	adds	r3, #8
 8005a72:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	f003 0307 	and.w	r3, r3, #7
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d00b      	beq.n	8005a96 <pvPortMalloc+0x6e>
	__asm volatile
 8005a7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a82:	f383 8811 	msr	BASEPRI, r3
 8005a86:	f3bf 8f6f 	isb	sy
 8005a8a:	f3bf 8f4f 	dsb	sy
 8005a8e:	617b      	str	r3, [r7, #20]
}
 8005a90:	bf00      	nop
 8005a92:	bf00      	nop
 8005a94:	e7fd      	b.n	8005a92 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d06f      	beq.n	8005b7c <pvPortMalloc+0x154>
 8005a9c:	4b45      	ldr	r3, [pc, #276]	@ (8005bb4 <pvPortMalloc+0x18c>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	687a      	ldr	r2, [r7, #4]
 8005aa2:	429a      	cmp	r2, r3
 8005aa4:	d86a      	bhi.n	8005b7c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005aa6:	4b44      	ldr	r3, [pc, #272]	@ (8005bb8 <pvPortMalloc+0x190>)
 8005aa8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005aaa:	4b43      	ldr	r3, [pc, #268]	@ (8005bb8 <pvPortMalloc+0x190>)
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005ab0:	e004      	b.n	8005abc <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005ab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ab4:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005ab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005abc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005abe:	685b      	ldr	r3, [r3, #4]
 8005ac0:	687a      	ldr	r2, [r7, #4]
 8005ac2:	429a      	cmp	r2, r3
 8005ac4:	d903      	bls.n	8005ace <pvPortMalloc+0xa6>
 8005ac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d1f1      	bne.n	8005ab2 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005ace:	4b37      	ldr	r3, [pc, #220]	@ (8005bac <pvPortMalloc+0x184>)
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ad4:	429a      	cmp	r2, r3
 8005ad6:	d051      	beq.n	8005b7c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005ad8:	6a3b      	ldr	r3, [r7, #32]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	2208      	movs	r2, #8
 8005ade:	4413      	add	r3, r2
 8005ae0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005ae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ae4:	681a      	ldr	r2, [r3, #0]
 8005ae6:	6a3b      	ldr	r3, [r7, #32]
 8005ae8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005aea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aec:	685a      	ldr	r2, [r3, #4]
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	1ad2      	subs	r2, r2, r3
 8005af2:	2308      	movs	r3, #8
 8005af4:	005b      	lsls	r3, r3, #1
 8005af6:	429a      	cmp	r2, r3
 8005af8:	d920      	bls.n	8005b3c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005afa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	4413      	add	r3, r2
 8005b00:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005b02:	69bb      	ldr	r3, [r7, #24]
 8005b04:	f003 0307 	and.w	r3, r3, #7
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d00b      	beq.n	8005b24 <pvPortMalloc+0xfc>
	__asm volatile
 8005b0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b10:	f383 8811 	msr	BASEPRI, r3
 8005b14:	f3bf 8f6f 	isb	sy
 8005b18:	f3bf 8f4f 	dsb	sy
 8005b1c:	613b      	str	r3, [r7, #16]
}
 8005b1e:	bf00      	nop
 8005b20:	bf00      	nop
 8005b22:	e7fd      	b.n	8005b20 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005b24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b26:	685a      	ldr	r2, [r3, #4]
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	1ad2      	subs	r2, r2, r3
 8005b2c:	69bb      	ldr	r3, [r7, #24]
 8005b2e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005b30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b32:	687a      	ldr	r2, [r7, #4]
 8005b34:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005b36:	69b8      	ldr	r0, [r7, #24]
 8005b38:	f000 f90a 	bl	8005d50 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005b3c:	4b1d      	ldr	r3, [pc, #116]	@ (8005bb4 <pvPortMalloc+0x18c>)
 8005b3e:	681a      	ldr	r2, [r3, #0]
 8005b40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b42:	685b      	ldr	r3, [r3, #4]
 8005b44:	1ad3      	subs	r3, r2, r3
 8005b46:	4a1b      	ldr	r2, [pc, #108]	@ (8005bb4 <pvPortMalloc+0x18c>)
 8005b48:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005b4a:	4b1a      	ldr	r3, [pc, #104]	@ (8005bb4 <pvPortMalloc+0x18c>)
 8005b4c:	681a      	ldr	r2, [r3, #0]
 8005b4e:	4b1b      	ldr	r3, [pc, #108]	@ (8005bbc <pvPortMalloc+0x194>)
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	429a      	cmp	r2, r3
 8005b54:	d203      	bcs.n	8005b5e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005b56:	4b17      	ldr	r3, [pc, #92]	@ (8005bb4 <pvPortMalloc+0x18c>)
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4a18      	ldr	r2, [pc, #96]	@ (8005bbc <pvPortMalloc+0x194>)
 8005b5c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005b5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b60:	685a      	ldr	r2, [r3, #4]
 8005b62:	4b13      	ldr	r3, [pc, #76]	@ (8005bb0 <pvPortMalloc+0x188>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	431a      	orrs	r2, r3
 8005b68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b6a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005b6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b6e:	2200      	movs	r2, #0
 8005b70:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005b72:	4b13      	ldr	r3, [pc, #76]	@ (8005bc0 <pvPortMalloc+0x198>)
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	3301      	adds	r3, #1
 8005b78:	4a11      	ldr	r2, [pc, #68]	@ (8005bc0 <pvPortMalloc+0x198>)
 8005b7a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005b7c:	f7fe ff96 	bl	8004aac <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005b80:	69fb      	ldr	r3, [r7, #28]
 8005b82:	f003 0307 	and.w	r3, r3, #7
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d00b      	beq.n	8005ba2 <pvPortMalloc+0x17a>
	__asm volatile
 8005b8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b8e:	f383 8811 	msr	BASEPRI, r3
 8005b92:	f3bf 8f6f 	isb	sy
 8005b96:	f3bf 8f4f 	dsb	sy
 8005b9a:	60fb      	str	r3, [r7, #12]
}
 8005b9c:	bf00      	nop
 8005b9e:	bf00      	nop
 8005ba0:	e7fd      	b.n	8005b9e <pvPortMalloc+0x176>
	return pvReturn;
 8005ba2:	69fb      	ldr	r3, [r7, #28]
}
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	3728      	adds	r7, #40	@ 0x28
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	bd80      	pop	{r7, pc}
 8005bac:	2000459c 	.word	0x2000459c
 8005bb0:	200045b0 	.word	0x200045b0
 8005bb4:	200045a0 	.word	0x200045a0
 8005bb8:	20004594 	.word	0x20004594
 8005bbc:	200045a4 	.word	0x200045a4
 8005bc0:	200045a8 	.word	0x200045a8

08005bc4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b086      	sub	sp, #24
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d04f      	beq.n	8005c76 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005bd6:	2308      	movs	r3, #8
 8005bd8:	425b      	negs	r3, r3
 8005bda:	697a      	ldr	r2, [r7, #20]
 8005bdc:	4413      	add	r3, r2
 8005bde:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005be0:	697b      	ldr	r3, [r7, #20]
 8005be2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005be4:	693b      	ldr	r3, [r7, #16]
 8005be6:	685a      	ldr	r2, [r3, #4]
 8005be8:	4b25      	ldr	r3, [pc, #148]	@ (8005c80 <vPortFree+0xbc>)
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	4013      	ands	r3, r2
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d10b      	bne.n	8005c0a <vPortFree+0x46>
	__asm volatile
 8005bf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bf6:	f383 8811 	msr	BASEPRI, r3
 8005bfa:	f3bf 8f6f 	isb	sy
 8005bfe:	f3bf 8f4f 	dsb	sy
 8005c02:	60fb      	str	r3, [r7, #12]
}
 8005c04:	bf00      	nop
 8005c06:	bf00      	nop
 8005c08:	e7fd      	b.n	8005c06 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005c0a:	693b      	ldr	r3, [r7, #16]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d00b      	beq.n	8005c2a <vPortFree+0x66>
	__asm volatile
 8005c12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c16:	f383 8811 	msr	BASEPRI, r3
 8005c1a:	f3bf 8f6f 	isb	sy
 8005c1e:	f3bf 8f4f 	dsb	sy
 8005c22:	60bb      	str	r3, [r7, #8]
}
 8005c24:	bf00      	nop
 8005c26:	bf00      	nop
 8005c28:	e7fd      	b.n	8005c26 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005c2a:	693b      	ldr	r3, [r7, #16]
 8005c2c:	685a      	ldr	r2, [r3, #4]
 8005c2e:	4b14      	ldr	r3, [pc, #80]	@ (8005c80 <vPortFree+0xbc>)
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	4013      	ands	r3, r2
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d01e      	beq.n	8005c76 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005c38:	693b      	ldr	r3, [r7, #16]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d11a      	bne.n	8005c76 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005c40:	693b      	ldr	r3, [r7, #16]
 8005c42:	685a      	ldr	r2, [r3, #4]
 8005c44:	4b0e      	ldr	r3, [pc, #56]	@ (8005c80 <vPortFree+0xbc>)
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	43db      	mvns	r3, r3
 8005c4a:	401a      	ands	r2, r3
 8005c4c:	693b      	ldr	r3, [r7, #16]
 8005c4e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005c50:	f7fe ff1e 	bl	8004a90 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005c54:	693b      	ldr	r3, [r7, #16]
 8005c56:	685a      	ldr	r2, [r3, #4]
 8005c58:	4b0a      	ldr	r3, [pc, #40]	@ (8005c84 <vPortFree+0xc0>)
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	4413      	add	r3, r2
 8005c5e:	4a09      	ldr	r2, [pc, #36]	@ (8005c84 <vPortFree+0xc0>)
 8005c60:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005c62:	6938      	ldr	r0, [r7, #16]
 8005c64:	f000 f874 	bl	8005d50 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005c68:	4b07      	ldr	r3, [pc, #28]	@ (8005c88 <vPortFree+0xc4>)
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	3301      	adds	r3, #1
 8005c6e:	4a06      	ldr	r2, [pc, #24]	@ (8005c88 <vPortFree+0xc4>)
 8005c70:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005c72:	f7fe ff1b 	bl	8004aac <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005c76:	bf00      	nop
 8005c78:	3718      	adds	r7, #24
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	bd80      	pop	{r7, pc}
 8005c7e:	bf00      	nop
 8005c80:	200045b0 	.word	0x200045b0
 8005c84:	200045a0 	.word	0x200045a0
 8005c88:	200045ac 	.word	0x200045ac

08005c8c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	b085      	sub	sp, #20
 8005c90:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005c92:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8005c96:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005c98:	4b27      	ldr	r3, [pc, #156]	@ (8005d38 <prvHeapInit+0xac>)
 8005c9a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	f003 0307 	and.w	r3, r3, #7
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d00c      	beq.n	8005cc0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	3307      	adds	r3, #7
 8005caa:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	f023 0307 	bic.w	r3, r3, #7
 8005cb2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005cb4:	68ba      	ldr	r2, [r7, #8]
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	1ad3      	subs	r3, r2, r3
 8005cba:	4a1f      	ldr	r2, [pc, #124]	@ (8005d38 <prvHeapInit+0xac>)
 8005cbc:	4413      	add	r3, r2
 8005cbe:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005cc4:	4a1d      	ldr	r2, [pc, #116]	@ (8005d3c <prvHeapInit+0xb0>)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005cca:	4b1c      	ldr	r3, [pc, #112]	@ (8005d3c <prvHeapInit+0xb0>)
 8005ccc:	2200      	movs	r2, #0
 8005cce:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	68ba      	ldr	r2, [r7, #8]
 8005cd4:	4413      	add	r3, r2
 8005cd6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005cd8:	2208      	movs	r2, #8
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	1a9b      	subs	r3, r3, r2
 8005cde:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	f023 0307 	bic.w	r3, r3, #7
 8005ce6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	4a15      	ldr	r2, [pc, #84]	@ (8005d40 <prvHeapInit+0xb4>)
 8005cec:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005cee:	4b14      	ldr	r3, [pc, #80]	@ (8005d40 <prvHeapInit+0xb4>)
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005cf6:	4b12      	ldr	r3, [pc, #72]	@ (8005d40 <prvHeapInit+0xb4>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	68fa      	ldr	r2, [r7, #12]
 8005d06:	1ad2      	subs	r2, r2, r3
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005d0c:	4b0c      	ldr	r3, [pc, #48]	@ (8005d40 <prvHeapInit+0xb4>)
 8005d0e:	681a      	ldr	r2, [r3, #0]
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	685b      	ldr	r3, [r3, #4]
 8005d18:	4a0a      	ldr	r2, [pc, #40]	@ (8005d44 <prvHeapInit+0xb8>)
 8005d1a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	685b      	ldr	r3, [r3, #4]
 8005d20:	4a09      	ldr	r2, [pc, #36]	@ (8005d48 <prvHeapInit+0xbc>)
 8005d22:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005d24:	4b09      	ldr	r3, [pc, #36]	@ (8005d4c <prvHeapInit+0xc0>)
 8005d26:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8005d2a:	601a      	str	r2, [r3, #0]
}
 8005d2c:	bf00      	nop
 8005d2e:	3714      	adds	r7, #20
 8005d30:	46bd      	mov	sp, r7
 8005d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d36:	4770      	bx	lr
 8005d38:	20000994 	.word	0x20000994
 8005d3c:	20004594 	.word	0x20004594
 8005d40:	2000459c 	.word	0x2000459c
 8005d44:	200045a4 	.word	0x200045a4
 8005d48:	200045a0 	.word	0x200045a0
 8005d4c:	200045b0 	.word	0x200045b0

08005d50 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005d50:	b480      	push	{r7}
 8005d52:	b085      	sub	sp, #20
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005d58:	4b28      	ldr	r3, [pc, #160]	@ (8005dfc <prvInsertBlockIntoFreeList+0xac>)
 8005d5a:	60fb      	str	r3, [r7, #12]
 8005d5c:	e002      	b.n	8005d64 <prvInsertBlockIntoFreeList+0x14>
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	60fb      	str	r3, [r7, #12]
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	687a      	ldr	r2, [r7, #4]
 8005d6a:	429a      	cmp	r2, r3
 8005d6c:	d8f7      	bhi.n	8005d5e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	685b      	ldr	r3, [r3, #4]
 8005d76:	68ba      	ldr	r2, [r7, #8]
 8005d78:	4413      	add	r3, r2
 8005d7a:	687a      	ldr	r2, [r7, #4]
 8005d7c:	429a      	cmp	r2, r3
 8005d7e:	d108      	bne.n	8005d92 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	685a      	ldr	r2, [r3, #4]
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	685b      	ldr	r3, [r3, #4]
 8005d88:	441a      	add	r2, r3
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	685b      	ldr	r3, [r3, #4]
 8005d9a:	68ba      	ldr	r2, [r7, #8]
 8005d9c:	441a      	add	r2, r3
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	429a      	cmp	r2, r3
 8005da4:	d118      	bne.n	8005dd8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681a      	ldr	r2, [r3, #0]
 8005daa:	4b15      	ldr	r3, [pc, #84]	@ (8005e00 <prvInsertBlockIntoFreeList+0xb0>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	429a      	cmp	r2, r3
 8005db0:	d00d      	beq.n	8005dce <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	685a      	ldr	r2, [r3, #4]
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	685b      	ldr	r3, [r3, #4]
 8005dbc:	441a      	add	r2, r3
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	681a      	ldr	r2, [r3, #0]
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	601a      	str	r2, [r3, #0]
 8005dcc:	e008      	b.n	8005de0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005dce:	4b0c      	ldr	r3, [pc, #48]	@ (8005e00 <prvInsertBlockIntoFreeList+0xb0>)
 8005dd0:	681a      	ldr	r2, [r3, #0]
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	601a      	str	r2, [r3, #0]
 8005dd6:	e003      	b.n	8005de0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681a      	ldr	r2, [r3, #0]
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005de0:	68fa      	ldr	r2, [r7, #12]
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	429a      	cmp	r2, r3
 8005de6:	d002      	beq.n	8005dee <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	687a      	ldr	r2, [r7, #4]
 8005dec:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005dee:	bf00      	nop
 8005df0:	3714      	adds	r7, #20
 8005df2:	46bd      	mov	sp, r7
 8005df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df8:	4770      	bx	lr
 8005dfa:	bf00      	nop
 8005dfc:	20004594 	.word	0x20004594
 8005e00:	2000459c 	.word	0x2000459c

08005e04 <rand>:
 8005e04:	4b16      	ldr	r3, [pc, #88]	@ (8005e60 <rand+0x5c>)
 8005e06:	b510      	push	{r4, lr}
 8005e08:	681c      	ldr	r4, [r3, #0]
 8005e0a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8005e0c:	b9b3      	cbnz	r3, 8005e3c <rand+0x38>
 8005e0e:	2018      	movs	r0, #24
 8005e10:	f000 fb56 	bl	80064c0 <malloc>
 8005e14:	4602      	mov	r2, r0
 8005e16:	6320      	str	r0, [r4, #48]	@ 0x30
 8005e18:	b920      	cbnz	r0, 8005e24 <rand+0x20>
 8005e1a:	4b12      	ldr	r3, [pc, #72]	@ (8005e64 <rand+0x60>)
 8005e1c:	4812      	ldr	r0, [pc, #72]	@ (8005e68 <rand+0x64>)
 8005e1e:	2152      	movs	r1, #82	@ 0x52
 8005e20:	f000 fae6 	bl	80063f0 <__assert_func>
 8005e24:	4911      	ldr	r1, [pc, #68]	@ (8005e6c <rand+0x68>)
 8005e26:	4b12      	ldr	r3, [pc, #72]	@ (8005e70 <rand+0x6c>)
 8005e28:	e9c0 1300 	strd	r1, r3, [r0]
 8005e2c:	4b11      	ldr	r3, [pc, #68]	@ (8005e74 <rand+0x70>)
 8005e2e:	6083      	str	r3, [r0, #8]
 8005e30:	230b      	movs	r3, #11
 8005e32:	8183      	strh	r3, [r0, #12]
 8005e34:	2100      	movs	r1, #0
 8005e36:	2001      	movs	r0, #1
 8005e38:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8005e3c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8005e3e:	480e      	ldr	r0, [pc, #56]	@ (8005e78 <rand+0x74>)
 8005e40:	690b      	ldr	r3, [r1, #16]
 8005e42:	694c      	ldr	r4, [r1, #20]
 8005e44:	4a0d      	ldr	r2, [pc, #52]	@ (8005e7c <rand+0x78>)
 8005e46:	4358      	muls	r0, r3
 8005e48:	fb02 0004 	mla	r0, r2, r4, r0
 8005e4c:	fba3 3202 	umull	r3, r2, r3, r2
 8005e50:	3301      	adds	r3, #1
 8005e52:	eb40 0002 	adc.w	r0, r0, r2
 8005e56:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8005e5a:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8005e5e:	bd10      	pop	{r4, pc}
 8005e60:	2000001c 	.word	0x2000001c
 8005e64:	08007044 	.word	0x08007044
 8005e68:	0800705b 	.word	0x0800705b
 8005e6c:	abcd330e 	.word	0xabcd330e
 8005e70:	e66d1234 	.word	0xe66d1234
 8005e74:	0005deec 	.word	0x0005deec
 8005e78:	5851f42d 	.word	0x5851f42d
 8005e7c:	4c957f2d 	.word	0x4c957f2d

08005e80 <__sflush_r>:
 8005e80:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005e84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e88:	0716      	lsls	r6, r2, #28
 8005e8a:	4605      	mov	r5, r0
 8005e8c:	460c      	mov	r4, r1
 8005e8e:	d454      	bmi.n	8005f3a <__sflush_r+0xba>
 8005e90:	684b      	ldr	r3, [r1, #4]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	dc02      	bgt.n	8005e9c <__sflush_r+0x1c>
 8005e96:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	dd48      	ble.n	8005f2e <__sflush_r+0xae>
 8005e9c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005e9e:	2e00      	cmp	r6, #0
 8005ea0:	d045      	beq.n	8005f2e <__sflush_r+0xae>
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005ea8:	682f      	ldr	r7, [r5, #0]
 8005eaa:	6a21      	ldr	r1, [r4, #32]
 8005eac:	602b      	str	r3, [r5, #0]
 8005eae:	d030      	beq.n	8005f12 <__sflush_r+0x92>
 8005eb0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005eb2:	89a3      	ldrh	r3, [r4, #12]
 8005eb4:	0759      	lsls	r1, r3, #29
 8005eb6:	d505      	bpl.n	8005ec4 <__sflush_r+0x44>
 8005eb8:	6863      	ldr	r3, [r4, #4]
 8005eba:	1ad2      	subs	r2, r2, r3
 8005ebc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005ebe:	b10b      	cbz	r3, 8005ec4 <__sflush_r+0x44>
 8005ec0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005ec2:	1ad2      	subs	r2, r2, r3
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005ec8:	6a21      	ldr	r1, [r4, #32]
 8005eca:	4628      	mov	r0, r5
 8005ecc:	47b0      	blx	r6
 8005ece:	1c43      	adds	r3, r0, #1
 8005ed0:	89a3      	ldrh	r3, [r4, #12]
 8005ed2:	d106      	bne.n	8005ee2 <__sflush_r+0x62>
 8005ed4:	6829      	ldr	r1, [r5, #0]
 8005ed6:	291d      	cmp	r1, #29
 8005ed8:	d82b      	bhi.n	8005f32 <__sflush_r+0xb2>
 8005eda:	4a2a      	ldr	r2, [pc, #168]	@ (8005f84 <__sflush_r+0x104>)
 8005edc:	410a      	asrs	r2, r1
 8005ede:	07d6      	lsls	r6, r2, #31
 8005ee0:	d427      	bmi.n	8005f32 <__sflush_r+0xb2>
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	6062      	str	r2, [r4, #4]
 8005ee6:	04d9      	lsls	r1, r3, #19
 8005ee8:	6922      	ldr	r2, [r4, #16]
 8005eea:	6022      	str	r2, [r4, #0]
 8005eec:	d504      	bpl.n	8005ef8 <__sflush_r+0x78>
 8005eee:	1c42      	adds	r2, r0, #1
 8005ef0:	d101      	bne.n	8005ef6 <__sflush_r+0x76>
 8005ef2:	682b      	ldr	r3, [r5, #0]
 8005ef4:	b903      	cbnz	r3, 8005ef8 <__sflush_r+0x78>
 8005ef6:	6560      	str	r0, [r4, #84]	@ 0x54
 8005ef8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005efa:	602f      	str	r7, [r5, #0]
 8005efc:	b1b9      	cbz	r1, 8005f2e <__sflush_r+0xae>
 8005efe:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005f02:	4299      	cmp	r1, r3
 8005f04:	d002      	beq.n	8005f0c <__sflush_r+0x8c>
 8005f06:	4628      	mov	r0, r5
 8005f08:	f000 fa90 	bl	800642c <_free_r>
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	6363      	str	r3, [r4, #52]	@ 0x34
 8005f10:	e00d      	b.n	8005f2e <__sflush_r+0xae>
 8005f12:	2301      	movs	r3, #1
 8005f14:	4628      	mov	r0, r5
 8005f16:	47b0      	blx	r6
 8005f18:	4602      	mov	r2, r0
 8005f1a:	1c50      	adds	r0, r2, #1
 8005f1c:	d1c9      	bne.n	8005eb2 <__sflush_r+0x32>
 8005f1e:	682b      	ldr	r3, [r5, #0]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d0c6      	beq.n	8005eb2 <__sflush_r+0x32>
 8005f24:	2b1d      	cmp	r3, #29
 8005f26:	d001      	beq.n	8005f2c <__sflush_r+0xac>
 8005f28:	2b16      	cmp	r3, #22
 8005f2a:	d11e      	bne.n	8005f6a <__sflush_r+0xea>
 8005f2c:	602f      	str	r7, [r5, #0]
 8005f2e:	2000      	movs	r0, #0
 8005f30:	e022      	b.n	8005f78 <__sflush_r+0xf8>
 8005f32:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005f36:	b21b      	sxth	r3, r3
 8005f38:	e01b      	b.n	8005f72 <__sflush_r+0xf2>
 8005f3a:	690f      	ldr	r7, [r1, #16]
 8005f3c:	2f00      	cmp	r7, #0
 8005f3e:	d0f6      	beq.n	8005f2e <__sflush_r+0xae>
 8005f40:	0793      	lsls	r3, r2, #30
 8005f42:	680e      	ldr	r6, [r1, #0]
 8005f44:	bf08      	it	eq
 8005f46:	694b      	ldreq	r3, [r1, #20]
 8005f48:	600f      	str	r7, [r1, #0]
 8005f4a:	bf18      	it	ne
 8005f4c:	2300      	movne	r3, #0
 8005f4e:	eba6 0807 	sub.w	r8, r6, r7
 8005f52:	608b      	str	r3, [r1, #8]
 8005f54:	f1b8 0f00 	cmp.w	r8, #0
 8005f58:	dde9      	ble.n	8005f2e <__sflush_r+0xae>
 8005f5a:	6a21      	ldr	r1, [r4, #32]
 8005f5c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005f5e:	4643      	mov	r3, r8
 8005f60:	463a      	mov	r2, r7
 8005f62:	4628      	mov	r0, r5
 8005f64:	47b0      	blx	r6
 8005f66:	2800      	cmp	r0, #0
 8005f68:	dc08      	bgt.n	8005f7c <__sflush_r+0xfc>
 8005f6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f6e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005f72:	81a3      	strh	r3, [r4, #12]
 8005f74:	f04f 30ff 	mov.w	r0, #4294967295
 8005f78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f7c:	4407      	add	r7, r0
 8005f7e:	eba8 0800 	sub.w	r8, r8, r0
 8005f82:	e7e7      	b.n	8005f54 <__sflush_r+0xd4>
 8005f84:	dfbffffe 	.word	0xdfbffffe

08005f88 <_fflush_r>:
 8005f88:	b538      	push	{r3, r4, r5, lr}
 8005f8a:	690b      	ldr	r3, [r1, #16]
 8005f8c:	4605      	mov	r5, r0
 8005f8e:	460c      	mov	r4, r1
 8005f90:	b913      	cbnz	r3, 8005f98 <_fflush_r+0x10>
 8005f92:	2500      	movs	r5, #0
 8005f94:	4628      	mov	r0, r5
 8005f96:	bd38      	pop	{r3, r4, r5, pc}
 8005f98:	b118      	cbz	r0, 8005fa2 <_fflush_r+0x1a>
 8005f9a:	6a03      	ldr	r3, [r0, #32]
 8005f9c:	b90b      	cbnz	r3, 8005fa2 <_fflush_r+0x1a>
 8005f9e:	f000 f8bb 	bl	8006118 <__sinit>
 8005fa2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d0f3      	beq.n	8005f92 <_fflush_r+0xa>
 8005faa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005fac:	07d0      	lsls	r0, r2, #31
 8005fae:	d404      	bmi.n	8005fba <_fflush_r+0x32>
 8005fb0:	0599      	lsls	r1, r3, #22
 8005fb2:	d402      	bmi.n	8005fba <_fflush_r+0x32>
 8005fb4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005fb6:	f000 fa0a 	bl	80063ce <__retarget_lock_acquire_recursive>
 8005fba:	4628      	mov	r0, r5
 8005fbc:	4621      	mov	r1, r4
 8005fbe:	f7ff ff5f 	bl	8005e80 <__sflush_r>
 8005fc2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005fc4:	07da      	lsls	r2, r3, #31
 8005fc6:	4605      	mov	r5, r0
 8005fc8:	d4e4      	bmi.n	8005f94 <_fflush_r+0xc>
 8005fca:	89a3      	ldrh	r3, [r4, #12]
 8005fcc:	059b      	lsls	r3, r3, #22
 8005fce:	d4e1      	bmi.n	8005f94 <_fflush_r+0xc>
 8005fd0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005fd2:	f000 f9fd 	bl	80063d0 <__retarget_lock_release_recursive>
 8005fd6:	e7dd      	b.n	8005f94 <_fflush_r+0xc>

08005fd8 <fflush>:
 8005fd8:	4601      	mov	r1, r0
 8005fda:	b920      	cbnz	r0, 8005fe6 <fflush+0xe>
 8005fdc:	4a04      	ldr	r2, [pc, #16]	@ (8005ff0 <fflush+0x18>)
 8005fde:	4905      	ldr	r1, [pc, #20]	@ (8005ff4 <fflush+0x1c>)
 8005fe0:	4805      	ldr	r0, [pc, #20]	@ (8005ff8 <fflush+0x20>)
 8005fe2:	f000 b8b1 	b.w	8006148 <_fwalk_sglue>
 8005fe6:	4b05      	ldr	r3, [pc, #20]	@ (8005ffc <fflush+0x24>)
 8005fe8:	6818      	ldr	r0, [r3, #0]
 8005fea:	f7ff bfcd 	b.w	8005f88 <_fflush_r>
 8005fee:	bf00      	nop
 8005ff0:	20000010 	.word	0x20000010
 8005ff4:	08005f89 	.word	0x08005f89
 8005ff8:	20000020 	.word	0x20000020
 8005ffc:	2000001c 	.word	0x2000001c

08006000 <std>:
 8006000:	2300      	movs	r3, #0
 8006002:	b510      	push	{r4, lr}
 8006004:	4604      	mov	r4, r0
 8006006:	e9c0 3300 	strd	r3, r3, [r0]
 800600a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800600e:	6083      	str	r3, [r0, #8]
 8006010:	8181      	strh	r1, [r0, #12]
 8006012:	6643      	str	r3, [r0, #100]	@ 0x64
 8006014:	81c2      	strh	r2, [r0, #14]
 8006016:	6183      	str	r3, [r0, #24]
 8006018:	4619      	mov	r1, r3
 800601a:	2208      	movs	r2, #8
 800601c:	305c      	adds	r0, #92	@ 0x5c
 800601e:	f000 f906 	bl	800622e <memset>
 8006022:	4b0d      	ldr	r3, [pc, #52]	@ (8006058 <std+0x58>)
 8006024:	6263      	str	r3, [r4, #36]	@ 0x24
 8006026:	4b0d      	ldr	r3, [pc, #52]	@ (800605c <std+0x5c>)
 8006028:	62a3      	str	r3, [r4, #40]	@ 0x28
 800602a:	4b0d      	ldr	r3, [pc, #52]	@ (8006060 <std+0x60>)
 800602c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800602e:	4b0d      	ldr	r3, [pc, #52]	@ (8006064 <std+0x64>)
 8006030:	6323      	str	r3, [r4, #48]	@ 0x30
 8006032:	4b0d      	ldr	r3, [pc, #52]	@ (8006068 <std+0x68>)
 8006034:	6224      	str	r4, [r4, #32]
 8006036:	429c      	cmp	r4, r3
 8006038:	d006      	beq.n	8006048 <std+0x48>
 800603a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800603e:	4294      	cmp	r4, r2
 8006040:	d002      	beq.n	8006048 <std+0x48>
 8006042:	33d0      	adds	r3, #208	@ 0xd0
 8006044:	429c      	cmp	r4, r3
 8006046:	d105      	bne.n	8006054 <std+0x54>
 8006048:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800604c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006050:	f000 b9bc 	b.w	80063cc <__retarget_lock_init_recursive>
 8006054:	bd10      	pop	{r4, pc}
 8006056:	bf00      	nop
 8006058:	080061a9 	.word	0x080061a9
 800605c:	080061cb 	.word	0x080061cb
 8006060:	08006203 	.word	0x08006203
 8006064:	08006227 	.word	0x08006227
 8006068:	200045b4 	.word	0x200045b4

0800606c <stdio_exit_handler>:
 800606c:	4a02      	ldr	r2, [pc, #8]	@ (8006078 <stdio_exit_handler+0xc>)
 800606e:	4903      	ldr	r1, [pc, #12]	@ (800607c <stdio_exit_handler+0x10>)
 8006070:	4803      	ldr	r0, [pc, #12]	@ (8006080 <stdio_exit_handler+0x14>)
 8006072:	f000 b869 	b.w	8006148 <_fwalk_sglue>
 8006076:	bf00      	nop
 8006078:	20000010 	.word	0x20000010
 800607c:	08005f89 	.word	0x08005f89
 8006080:	20000020 	.word	0x20000020

08006084 <cleanup_stdio>:
 8006084:	6841      	ldr	r1, [r0, #4]
 8006086:	4b0c      	ldr	r3, [pc, #48]	@ (80060b8 <cleanup_stdio+0x34>)
 8006088:	4299      	cmp	r1, r3
 800608a:	b510      	push	{r4, lr}
 800608c:	4604      	mov	r4, r0
 800608e:	d001      	beq.n	8006094 <cleanup_stdio+0x10>
 8006090:	f7ff ff7a 	bl	8005f88 <_fflush_r>
 8006094:	68a1      	ldr	r1, [r4, #8]
 8006096:	4b09      	ldr	r3, [pc, #36]	@ (80060bc <cleanup_stdio+0x38>)
 8006098:	4299      	cmp	r1, r3
 800609a:	d002      	beq.n	80060a2 <cleanup_stdio+0x1e>
 800609c:	4620      	mov	r0, r4
 800609e:	f7ff ff73 	bl	8005f88 <_fflush_r>
 80060a2:	68e1      	ldr	r1, [r4, #12]
 80060a4:	4b06      	ldr	r3, [pc, #24]	@ (80060c0 <cleanup_stdio+0x3c>)
 80060a6:	4299      	cmp	r1, r3
 80060a8:	d004      	beq.n	80060b4 <cleanup_stdio+0x30>
 80060aa:	4620      	mov	r0, r4
 80060ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80060b0:	f7ff bf6a 	b.w	8005f88 <_fflush_r>
 80060b4:	bd10      	pop	{r4, pc}
 80060b6:	bf00      	nop
 80060b8:	200045b4 	.word	0x200045b4
 80060bc:	2000461c 	.word	0x2000461c
 80060c0:	20004684 	.word	0x20004684

080060c4 <global_stdio_init.part.0>:
 80060c4:	b510      	push	{r4, lr}
 80060c6:	4b0b      	ldr	r3, [pc, #44]	@ (80060f4 <global_stdio_init.part.0+0x30>)
 80060c8:	4c0b      	ldr	r4, [pc, #44]	@ (80060f8 <global_stdio_init.part.0+0x34>)
 80060ca:	4a0c      	ldr	r2, [pc, #48]	@ (80060fc <global_stdio_init.part.0+0x38>)
 80060cc:	601a      	str	r2, [r3, #0]
 80060ce:	4620      	mov	r0, r4
 80060d0:	2200      	movs	r2, #0
 80060d2:	2104      	movs	r1, #4
 80060d4:	f7ff ff94 	bl	8006000 <std>
 80060d8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80060dc:	2201      	movs	r2, #1
 80060de:	2109      	movs	r1, #9
 80060e0:	f7ff ff8e 	bl	8006000 <std>
 80060e4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80060e8:	2202      	movs	r2, #2
 80060ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80060ee:	2112      	movs	r1, #18
 80060f0:	f7ff bf86 	b.w	8006000 <std>
 80060f4:	200046ec 	.word	0x200046ec
 80060f8:	200045b4 	.word	0x200045b4
 80060fc:	0800606d 	.word	0x0800606d

08006100 <__sfp_lock_acquire>:
 8006100:	4801      	ldr	r0, [pc, #4]	@ (8006108 <__sfp_lock_acquire+0x8>)
 8006102:	f000 b964 	b.w	80063ce <__retarget_lock_acquire_recursive>
 8006106:	bf00      	nop
 8006108:	200046f5 	.word	0x200046f5

0800610c <__sfp_lock_release>:
 800610c:	4801      	ldr	r0, [pc, #4]	@ (8006114 <__sfp_lock_release+0x8>)
 800610e:	f000 b95f 	b.w	80063d0 <__retarget_lock_release_recursive>
 8006112:	bf00      	nop
 8006114:	200046f5 	.word	0x200046f5

08006118 <__sinit>:
 8006118:	b510      	push	{r4, lr}
 800611a:	4604      	mov	r4, r0
 800611c:	f7ff fff0 	bl	8006100 <__sfp_lock_acquire>
 8006120:	6a23      	ldr	r3, [r4, #32]
 8006122:	b11b      	cbz	r3, 800612c <__sinit+0x14>
 8006124:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006128:	f7ff bff0 	b.w	800610c <__sfp_lock_release>
 800612c:	4b04      	ldr	r3, [pc, #16]	@ (8006140 <__sinit+0x28>)
 800612e:	6223      	str	r3, [r4, #32]
 8006130:	4b04      	ldr	r3, [pc, #16]	@ (8006144 <__sinit+0x2c>)
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d1f5      	bne.n	8006124 <__sinit+0xc>
 8006138:	f7ff ffc4 	bl	80060c4 <global_stdio_init.part.0>
 800613c:	e7f2      	b.n	8006124 <__sinit+0xc>
 800613e:	bf00      	nop
 8006140:	08006085 	.word	0x08006085
 8006144:	200046ec 	.word	0x200046ec

08006148 <_fwalk_sglue>:
 8006148:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800614c:	4607      	mov	r7, r0
 800614e:	4688      	mov	r8, r1
 8006150:	4614      	mov	r4, r2
 8006152:	2600      	movs	r6, #0
 8006154:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006158:	f1b9 0901 	subs.w	r9, r9, #1
 800615c:	d505      	bpl.n	800616a <_fwalk_sglue+0x22>
 800615e:	6824      	ldr	r4, [r4, #0]
 8006160:	2c00      	cmp	r4, #0
 8006162:	d1f7      	bne.n	8006154 <_fwalk_sglue+0xc>
 8006164:	4630      	mov	r0, r6
 8006166:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800616a:	89ab      	ldrh	r3, [r5, #12]
 800616c:	2b01      	cmp	r3, #1
 800616e:	d907      	bls.n	8006180 <_fwalk_sglue+0x38>
 8006170:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006174:	3301      	adds	r3, #1
 8006176:	d003      	beq.n	8006180 <_fwalk_sglue+0x38>
 8006178:	4629      	mov	r1, r5
 800617a:	4638      	mov	r0, r7
 800617c:	47c0      	blx	r8
 800617e:	4306      	orrs	r6, r0
 8006180:	3568      	adds	r5, #104	@ 0x68
 8006182:	e7e9      	b.n	8006158 <_fwalk_sglue+0x10>

08006184 <iprintf>:
 8006184:	b40f      	push	{r0, r1, r2, r3}
 8006186:	b507      	push	{r0, r1, r2, lr}
 8006188:	4906      	ldr	r1, [pc, #24]	@ (80061a4 <iprintf+0x20>)
 800618a:	ab04      	add	r3, sp, #16
 800618c:	6808      	ldr	r0, [r1, #0]
 800618e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006192:	6881      	ldr	r1, [r0, #8]
 8006194:	9301      	str	r3, [sp, #4]
 8006196:	f000 fa73 	bl	8006680 <_vfiprintf_r>
 800619a:	b003      	add	sp, #12
 800619c:	f85d eb04 	ldr.w	lr, [sp], #4
 80061a0:	b004      	add	sp, #16
 80061a2:	4770      	bx	lr
 80061a4:	2000001c 	.word	0x2000001c

080061a8 <__sread>:
 80061a8:	b510      	push	{r4, lr}
 80061aa:	460c      	mov	r4, r1
 80061ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061b0:	f000 f8be 	bl	8006330 <_read_r>
 80061b4:	2800      	cmp	r0, #0
 80061b6:	bfab      	itete	ge
 80061b8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80061ba:	89a3      	ldrhlt	r3, [r4, #12]
 80061bc:	181b      	addge	r3, r3, r0
 80061be:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80061c2:	bfac      	ite	ge
 80061c4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80061c6:	81a3      	strhlt	r3, [r4, #12]
 80061c8:	bd10      	pop	{r4, pc}

080061ca <__swrite>:
 80061ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061ce:	461f      	mov	r7, r3
 80061d0:	898b      	ldrh	r3, [r1, #12]
 80061d2:	05db      	lsls	r3, r3, #23
 80061d4:	4605      	mov	r5, r0
 80061d6:	460c      	mov	r4, r1
 80061d8:	4616      	mov	r6, r2
 80061da:	d505      	bpl.n	80061e8 <__swrite+0x1e>
 80061dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061e0:	2302      	movs	r3, #2
 80061e2:	2200      	movs	r2, #0
 80061e4:	f000 f892 	bl	800630c <_lseek_r>
 80061e8:	89a3      	ldrh	r3, [r4, #12]
 80061ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80061ee:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80061f2:	81a3      	strh	r3, [r4, #12]
 80061f4:	4632      	mov	r2, r6
 80061f6:	463b      	mov	r3, r7
 80061f8:	4628      	mov	r0, r5
 80061fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80061fe:	f000 b8a9 	b.w	8006354 <_write_r>

08006202 <__sseek>:
 8006202:	b510      	push	{r4, lr}
 8006204:	460c      	mov	r4, r1
 8006206:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800620a:	f000 f87f 	bl	800630c <_lseek_r>
 800620e:	1c43      	adds	r3, r0, #1
 8006210:	89a3      	ldrh	r3, [r4, #12]
 8006212:	bf15      	itete	ne
 8006214:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006216:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800621a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800621e:	81a3      	strheq	r3, [r4, #12]
 8006220:	bf18      	it	ne
 8006222:	81a3      	strhne	r3, [r4, #12]
 8006224:	bd10      	pop	{r4, pc}

08006226 <__sclose>:
 8006226:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800622a:	f000 b809 	b.w	8006240 <_close_r>

0800622e <memset>:
 800622e:	4402      	add	r2, r0
 8006230:	4603      	mov	r3, r0
 8006232:	4293      	cmp	r3, r2
 8006234:	d100      	bne.n	8006238 <memset+0xa>
 8006236:	4770      	bx	lr
 8006238:	f803 1b01 	strb.w	r1, [r3], #1
 800623c:	e7f9      	b.n	8006232 <memset+0x4>
	...

08006240 <_close_r>:
 8006240:	b538      	push	{r3, r4, r5, lr}
 8006242:	4d06      	ldr	r5, [pc, #24]	@ (800625c <_close_r+0x1c>)
 8006244:	2300      	movs	r3, #0
 8006246:	4604      	mov	r4, r0
 8006248:	4608      	mov	r0, r1
 800624a:	602b      	str	r3, [r5, #0]
 800624c:	f7fa ff04 	bl	8001058 <_close>
 8006250:	1c43      	adds	r3, r0, #1
 8006252:	d102      	bne.n	800625a <_close_r+0x1a>
 8006254:	682b      	ldr	r3, [r5, #0]
 8006256:	b103      	cbz	r3, 800625a <_close_r+0x1a>
 8006258:	6023      	str	r3, [r4, #0]
 800625a:	bd38      	pop	{r3, r4, r5, pc}
 800625c:	200046f0 	.word	0x200046f0

08006260 <_reclaim_reent>:
 8006260:	4b29      	ldr	r3, [pc, #164]	@ (8006308 <_reclaim_reent+0xa8>)
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	4283      	cmp	r3, r0
 8006266:	b570      	push	{r4, r5, r6, lr}
 8006268:	4604      	mov	r4, r0
 800626a:	d04b      	beq.n	8006304 <_reclaim_reent+0xa4>
 800626c:	69c3      	ldr	r3, [r0, #28]
 800626e:	b1ab      	cbz	r3, 800629c <_reclaim_reent+0x3c>
 8006270:	68db      	ldr	r3, [r3, #12]
 8006272:	b16b      	cbz	r3, 8006290 <_reclaim_reent+0x30>
 8006274:	2500      	movs	r5, #0
 8006276:	69e3      	ldr	r3, [r4, #28]
 8006278:	68db      	ldr	r3, [r3, #12]
 800627a:	5959      	ldr	r1, [r3, r5]
 800627c:	2900      	cmp	r1, #0
 800627e:	d13b      	bne.n	80062f8 <_reclaim_reent+0x98>
 8006280:	3504      	adds	r5, #4
 8006282:	2d80      	cmp	r5, #128	@ 0x80
 8006284:	d1f7      	bne.n	8006276 <_reclaim_reent+0x16>
 8006286:	69e3      	ldr	r3, [r4, #28]
 8006288:	4620      	mov	r0, r4
 800628a:	68d9      	ldr	r1, [r3, #12]
 800628c:	f000 f8ce 	bl	800642c <_free_r>
 8006290:	69e3      	ldr	r3, [r4, #28]
 8006292:	6819      	ldr	r1, [r3, #0]
 8006294:	b111      	cbz	r1, 800629c <_reclaim_reent+0x3c>
 8006296:	4620      	mov	r0, r4
 8006298:	f000 f8c8 	bl	800642c <_free_r>
 800629c:	6961      	ldr	r1, [r4, #20]
 800629e:	b111      	cbz	r1, 80062a6 <_reclaim_reent+0x46>
 80062a0:	4620      	mov	r0, r4
 80062a2:	f000 f8c3 	bl	800642c <_free_r>
 80062a6:	69e1      	ldr	r1, [r4, #28]
 80062a8:	b111      	cbz	r1, 80062b0 <_reclaim_reent+0x50>
 80062aa:	4620      	mov	r0, r4
 80062ac:	f000 f8be 	bl	800642c <_free_r>
 80062b0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80062b2:	b111      	cbz	r1, 80062ba <_reclaim_reent+0x5a>
 80062b4:	4620      	mov	r0, r4
 80062b6:	f000 f8b9 	bl	800642c <_free_r>
 80062ba:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80062bc:	b111      	cbz	r1, 80062c4 <_reclaim_reent+0x64>
 80062be:	4620      	mov	r0, r4
 80062c0:	f000 f8b4 	bl	800642c <_free_r>
 80062c4:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80062c6:	b111      	cbz	r1, 80062ce <_reclaim_reent+0x6e>
 80062c8:	4620      	mov	r0, r4
 80062ca:	f000 f8af 	bl	800642c <_free_r>
 80062ce:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80062d0:	b111      	cbz	r1, 80062d8 <_reclaim_reent+0x78>
 80062d2:	4620      	mov	r0, r4
 80062d4:	f000 f8aa 	bl	800642c <_free_r>
 80062d8:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80062da:	b111      	cbz	r1, 80062e2 <_reclaim_reent+0x82>
 80062dc:	4620      	mov	r0, r4
 80062de:	f000 f8a5 	bl	800642c <_free_r>
 80062e2:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80062e4:	b111      	cbz	r1, 80062ec <_reclaim_reent+0x8c>
 80062e6:	4620      	mov	r0, r4
 80062e8:	f000 f8a0 	bl	800642c <_free_r>
 80062ec:	6a23      	ldr	r3, [r4, #32]
 80062ee:	b14b      	cbz	r3, 8006304 <_reclaim_reent+0xa4>
 80062f0:	4620      	mov	r0, r4
 80062f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80062f6:	4718      	bx	r3
 80062f8:	680e      	ldr	r6, [r1, #0]
 80062fa:	4620      	mov	r0, r4
 80062fc:	f000 f896 	bl	800642c <_free_r>
 8006300:	4631      	mov	r1, r6
 8006302:	e7bb      	b.n	800627c <_reclaim_reent+0x1c>
 8006304:	bd70      	pop	{r4, r5, r6, pc}
 8006306:	bf00      	nop
 8006308:	2000001c 	.word	0x2000001c

0800630c <_lseek_r>:
 800630c:	b538      	push	{r3, r4, r5, lr}
 800630e:	4d07      	ldr	r5, [pc, #28]	@ (800632c <_lseek_r+0x20>)
 8006310:	4604      	mov	r4, r0
 8006312:	4608      	mov	r0, r1
 8006314:	4611      	mov	r1, r2
 8006316:	2200      	movs	r2, #0
 8006318:	602a      	str	r2, [r5, #0]
 800631a:	461a      	mov	r2, r3
 800631c:	f7fa fec3 	bl	80010a6 <_lseek>
 8006320:	1c43      	adds	r3, r0, #1
 8006322:	d102      	bne.n	800632a <_lseek_r+0x1e>
 8006324:	682b      	ldr	r3, [r5, #0]
 8006326:	b103      	cbz	r3, 800632a <_lseek_r+0x1e>
 8006328:	6023      	str	r3, [r4, #0]
 800632a:	bd38      	pop	{r3, r4, r5, pc}
 800632c:	200046f0 	.word	0x200046f0

08006330 <_read_r>:
 8006330:	b538      	push	{r3, r4, r5, lr}
 8006332:	4d07      	ldr	r5, [pc, #28]	@ (8006350 <_read_r+0x20>)
 8006334:	4604      	mov	r4, r0
 8006336:	4608      	mov	r0, r1
 8006338:	4611      	mov	r1, r2
 800633a:	2200      	movs	r2, #0
 800633c:	602a      	str	r2, [r5, #0]
 800633e:	461a      	mov	r2, r3
 8006340:	f7fa fe51 	bl	8000fe6 <_read>
 8006344:	1c43      	adds	r3, r0, #1
 8006346:	d102      	bne.n	800634e <_read_r+0x1e>
 8006348:	682b      	ldr	r3, [r5, #0]
 800634a:	b103      	cbz	r3, 800634e <_read_r+0x1e>
 800634c:	6023      	str	r3, [r4, #0]
 800634e:	bd38      	pop	{r3, r4, r5, pc}
 8006350:	200046f0 	.word	0x200046f0

08006354 <_write_r>:
 8006354:	b538      	push	{r3, r4, r5, lr}
 8006356:	4d07      	ldr	r5, [pc, #28]	@ (8006374 <_write_r+0x20>)
 8006358:	4604      	mov	r4, r0
 800635a:	4608      	mov	r0, r1
 800635c:	4611      	mov	r1, r2
 800635e:	2200      	movs	r2, #0
 8006360:	602a      	str	r2, [r5, #0]
 8006362:	461a      	mov	r2, r3
 8006364:	f7fa fe5c 	bl	8001020 <_write>
 8006368:	1c43      	adds	r3, r0, #1
 800636a:	d102      	bne.n	8006372 <_write_r+0x1e>
 800636c:	682b      	ldr	r3, [r5, #0]
 800636e:	b103      	cbz	r3, 8006372 <_write_r+0x1e>
 8006370:	6023      	str	r3, [r4, #0]
 8006372:	bd38      	pop	{r3, r4, r5, pc}
 8006374:	200046f0 	.word	0x200046f0

08006378 <__errno>:
 8006378:	4b01      	ldr	r3, [pc, #4]	@ (8006380 <__errno+0x8>)
 800637a:	6818      	ldr	r0, [r3, #0]
 800637c:	4770      	bx	lr
 800637e:	bf00      	nop
 8006380:	2000001c 	.word	0x2000001c

08006384 <__libc_init_array>:
 8006384:	b570      	push	{r4, r5, r6, lr}
 8006386:	4d0d      	ldr	r5, [pc, #52]	@ (80063bc <__libc_init_array+0x38>)
 8006388:	4c0d      	ldr	r4, [pc, #52]	@ (80063c0 <__libc_init_array+0x3c>)
 800638a:	1b64      	subs	r4, r4, r5
 800638c:	10a4      	asrs	r4, r4, #2
 800638e:	2600      	movs	r6, #0
 8006390:	42a6      	cmp	r6, r4
 8006392:	d109      	bne.n	80063a8 <__libc_init_array+0x24>
 8006394:	4d0b      	ldr	r5, [pc, #44]	@ (80063c4 <__libc_init_array+0x40>)
 8006396:	4c0c      	ldr	r4, [pc, #48]	@ (80063c8 <__libc_init_array+0x44>)
 8006398:	f000 fd9e 	bl	8006ed8 <_init>
 800639c:	1b64      	subs	r4, r4, r5
 800639e:	10a4      	asrs	r4, r4, #2
 80063a0:	2600      	movs	r6, #0
 80063a2:	42a6      	cmp	r6, r4
 80063a4:	d105      	bne.n	80063b2 <__libc_init_array+0x2e>
 80063a6:	bd70      	pop	{r4, r5, r6, pc}
 80063a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80063ac:	4798      	blx	r3
 80063ae:	3601      	adds	r6, #1
 80063b0:	e7ee      	b.n	8006390 <__libc_init_array+0xc>
 80063b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80063b6:	4798      	blx	r3
 80063b8:	3601      	adds	r6, #1
 80063ba:	e7f2      	b.n	80063a2 <__libc_init_array+0x1e>
 80063bc:	0800712c 	.word	0x0800712c
 80063c0:	0800712c 	.word	0x0800712c
 80063c4:	0800712c 	.word	0x0800712c
 80063c8:	08007130 	.word	0x08007130

080063cc <__retarget_lock_init_recursive>:
 80063cc:	4770      	bx	lr

080063ce <__retarget_lock_acquire_recursive>:
 80063ce:	4770      	bx	lr

080063d0 <__retarget_lock_release_recursive>:
 80063d0:	4770      	bx	lr

080063d2 <memcpy>:
 80063d2:	440a      	add	r2, r1
 80063d4:	4291      	cmp	r1, r2
 80063d6:	f100 33ff 	add.w	r3, r0, #4294967295
 80063da:	d100      	bne.n	80063de <memcpy+0xc>
 80063dc:	4770      	bx	lr
 80063de:	b510      	push	{r4, lr}
 80063e0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80063e4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80063e8:	4291      	cmp	r1, r2
 80063ea:	d1f9      	bne.n	80063e0 <memcpy+0xe>
 80063ec:	bd10      	pop	{r4, pc}
	...

080063f0 <__assert_func>:
 80063f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80063f2:	4614      	mov	r4, r2
 80063f4:	461a      	mov	r2, r3
 80063f6:	4b09      	ldr	r3, [pc, #36]	@ (800641c <__assert_func+0x2c>)
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	4605      	mov	r5, r0
 80063fc:	68d8      	ldr	r0, [r3, #12]
 80063fe:	b954      	cbnz	r4, 8006416 <__assert_func+0x26>
 8006400:	4b07      	ldr	r3, [pc, #28]	@ (8006420 <__assert_func+0x30>)
 8006402:	461c      	mov	r4, r3
 8006404:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006408:	9100      	str	r1, [sp, #0]
 800640a:	462b      	mov	r3, r5
 800640c:	4905      	ldr	r1, [pc, #20]	@ (8006424 <__assert_func+0x34>)
 800640e:	f000 fbdd 	bl	8006bcc <fiprintf>
 8006412:	f000 fc91 	bl	8006d38 <abort>
 8006416:	4b04      	ldr	r3, [pc, #16]	@ (8006428 <__assert_func+0x38>)
 8006418:	e7f4      	b.n	8006404 <__assert_func+0x14>
 800641a:	bf00      	nop
 800641c:	2000001c 	.word	0x2000001c
 8006420:	080070ee 	.word	0x080070ee
 8006424:	080070c0 	.word	0x080070c0
 8006428:	080070b3 	.word	0x080070b3

0800642c <_free_r>:
 800642c:	b538      	push	{r3, r4, r5, lr}
 800642e:	4605      	mov	r5, r0
 8006430:	2900      	cmp	r1, #0
 8006432:	d041      	beq.n	80064b8 <_free_r+0x8c>
 8006434:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006438:	1f0c      	subs	r4, r1, #4
 800643a:	2b00      	cmp	r3, #0
 800643c:	bfb8      	it	lt
 800643e:	18e4      	addlt	r4, r4, r3
 8006440:	f000 f8e8 	bl	8006614 <__malloc_lock>
 8006444:	4a1d      	ldr	r2, [pc, #116]	@ (80064bc <_free_r+0x90>)
 8006446:	6813      	ldr	r3, [r2, #0]
 8006448:	b933      	cbnz	r3, 8006458 <_free_r+0x2c>
 800644a:	6063      	str	r3, [r4, #4]
 800644c:	6014      	str	r4, [r2, #0]
 800644e:	4628      	mov	r0, r5
 8006450:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006454:	f000 b8e4 	b.w	8006620 <__malloc_unlock>
 8006458:	42a3      	cmp	r3, r4
 800645a:	d908      	bls.n	800646e <_free_r+0x42>
 800645c:	6820      	ldr	r0, [r4, #0]
 800645e:	1821      	adds	r1, r4, r0
 8006460:	428b      	cmp	r3, r1
 8006462:	bf01      	itttt	eq
 8006464:	6819      	ldreq	r1, [r3, #0]
 8006466:	685b      	ldreq	r3, [r3, #4]
 8006468:	1809      	addeq	r1, r1, r0
 800646a:	6021      	streq	r1, [r4, #0]
 800646c:	e7ed      	b.n	800644a <_free_r+0x1e>
 800646e:	461a      	mov	r2, r3
 8006470:	685b      	ldr	r3, [r3, #4]
 8006472:	b10b      	cbz	r3, 8006478 <_free_r+0x4c>
 8006474:	42a3      	cmp	r3, r4
 8006476:	d9fa      	bls.n	800646e <_free_r+0x42>
 8006478:	6811      	ldr	r1, [r2, #0]
 800647a:	1850      	adds	r0, r2, r1
 800647c:	42a0      	cmp	r0, r4
 800647e:	d10b      	bne.n	8006498 <_free_r+0x6c>
 8006480:	6820      	ldr	r0, [r4, #0]
 8006482:	4401      	add	r1, r0
 8006484:	1850      	adds	r0, r2, r1
 8006486:	4283      	cmp	r3, r0
 8006488:	6011      	str	r1, [r2, #0]
 800648a:	d1e0      	bne.n	800644e <_free_r+0x22>
 800648c:	6818      	ldr	r0, [r3, #0]
 800648e:	685b      	ldr	r3, [r3, #4]
 8006490:	6053      	str	r3, [r2, #4]
 8006492:	4408      	add	r0, r1
 8006494:	6010      	str	r0, [r2, #0]
 8006496:	e7da      	b.n	800644e <_free_r+0x22>
 8006498:	d902      	bls.n	80064a0 <_free_r+0x74>
 800649a:	230c      	movs	r3, #12
 800649c:	602b      	str	r3, [r5, #0]
 800649e:	e7d6      	b.n	800644e <_free_r+0x22>
 80064a0:	6820      	ldr	r0, [r4, #0]
 80064a2:	1821      	adds	r1, r4, r0
 80064a4:	428b      	cmp	r3, r1
 80064a6:	bf04      	itt	eq
 80064a8:	6819      	ldreq	r1, [r3, #0]
 80064aa:	685b      	ldreq	r3, [r3, #4]
 80064ac:	6063      	str	r3, [r4, #4]
 80064ae:	bf04      	itt	eq
 80064b0:	1809      	addeq	r1, r1, r0
 80064b2:	6021      	streq	r1, [r4, #0]
 80064b4:	6054      	str	r4, [r2, #4]
 80064b6:	e7ca      	b.n	800644e <_free_r+0x22>
 80064b8:	bd38      	pop	{r3, r4, r5, pc}
 80064ba:	bf00      	nop
 80064bc:	200046fc 	.word	0x200046fc

080064c0 <malloc>:
 80064c0:	4b02      	ldr	r3, [pc, #8]	@ (80064cc <malloc+0xc>)
 80064c2:	4601      	mov	r1, r0
 80064c4:	6818      	ldr	r0, [r3, #0]
 80064c6:	f000 b825 	b.w	8006514 <_malloc_r>
 80064ca:	bf00      	nop
 80064cc:	2000001c 	.word	0x2000001c

080064d0 <sbrk_aligned>:
 80064d0:	b570      	push	{r4, r5, r6, lr}
 80064d2:	4e0f      	ldr	r6, [pc, #60]	@ (8006510 <sbrk_aligned+0x40>)
 80064d4:	460c      	mov	r4, r1
 80064d6:	6831      	ldr	r1, [r6, #0]
 80064d8:	4605      	mov	r5, r0
 80064da:	b911      	cbnz	r1, 80064e2 <sbrk_aligned+0x12>
 80064dc:	f000 fc1c 	bl	8006d18 <_sbrk_r>
 80064e0:	6030      	str	r0, [r6, #0]
 80064e2:	4621      	mov	r1, r4
 80064e4:	4628      	mov	r0, r5
 80064e6:	f000 fc17 	bl	8006d18 <_sbrk_r>
 80064ea:	1c43      	adds	r3, r0, #1
 80064ec:	d103      	bne.n	80064f6 <sbrk_aligned+0x26>
 80064ee:	f04f 34ff 	mov.w	r4, #4294967295
 80064f2:	4620      	mov	r0, r4
 80064f4:	bd70      	pop	{r4, r5, r6, pc}
 80064f6:	1cc4      	adds	r4, r0, #3
 80064f8:	f024 0403 	bic.w	r4, r4, #3
 80064fc:	42a0      	cmp	r0, r4
 80064fe:	d0f8      	beq.n	80064f2 <sbrk_aligned+0x22>
 8006500:	1a21      	subs	r1, r4, r0
 8006502:	4628      	mov	r0, r5
 8006504:	f000 fc08 	bl	8006d18 <_sbrk_r>
 8006508:	3001      	adds	r0, #1
 800650a:	d1f2      	bne.n	80064f2 <sbrk_aligned+0x22>
 800650c:	e7ef      	b.n	80064ee <sbrk_aligned+0x1e>
 800650e:	bf00      	nop
 8006510:	200046f8 	.word	0x200046f8

08006514 <_malloc_r>:
 8006514:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006518:	1ccd      	adds	r5, r1, #3
 800651a:	f025 0503 	bic.w	r5, r5, #3
 800651e:	3508      	adds	r5, #8
 8006520:	2d0c      	cmp	r5, #12
 8006522:	bf38      	it	cc
 8006524:	250c      	movcc	r5, #12
 8006526:	2d00      	cmp	r5, #0
 8006528:	4606      	mov	r6, r0
 800652a:	db01      	blt.n	8006530 <_malloc_r+0x1c>
 800652c:	42a9      	cmp	r1, r5
 800652e:	d904      	bls.n	800653a <_malloc_r+0x26>
 8006530:	230c      	movs	r3, #12
 8006532:	6033      	str	r3, [r6, #0]
 8006534:	2000      	movs	r0, #0
 8006536:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800653a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006610 <_malloc_r+0xfc>
 800653e:	f000 f869 	bl	8006614 <__malloc_lock>
 8006542:	f8d8 3000 	ldr.w	r3, [r8]
 8006546:	461c      	mov	r4, r3
 8006548:	bb44      	cbnz	r4, 800659c <_malloc_r+0x88>
 800654a:	4629      	mov	r1, r5
 800654c:	4630      	mov	r0, r6
 800654e:	f7ff ffbf 	bl	80064d0 <sbrk_aligned>
 8006552:	1c43      	adds	r3, r0, #1
 8006554:	4604      	mov	r4, r0
 8006556:	d158      	bne.n	800660a <_malloc_r+0xf6>
 8006558:	f8d8 4000 	ldr.w	r4, [r8]
 800655c:	4627      	mov	r7, r4
 800655e:	2f00      	cmp	r7, #0
 8006560:	d143      	bne.n	80065ea <_malloc_r+0xd6>
 8006562:	2c00      	cmp	r4, #0
 8006564:	d04b      	beq.n	80065fe <_malloc_r+0xea>
 8006566:	6823      	ldr	r3, [r4, #0]
 8006568:	4639      	mov	r1, r7
 800656a:	4630      	mov	r0, r6
 800656c:	eb04 0903 	add.w	r9, r4, r3
 8006570:	f000 fbd2 	bl	8006d18 <_sbrk_r>
 8006574:	4581      	cmp	r9, r0
 8006576:	d142      	bne.n	80065fe <_malloc_r+0xea>
 8006578:	6821      	ldr	r1, [r4, #0]
 800657a:	1a6d      	subs	r5, r5, r1
 800657c:	4629      	mov	r1, r5
 800657e:	4630      	mov	r0, r6
 8006580:	f7ff ffa6 	bl	80064d0 <sbrk_aligned>
 8006584:	3001      	adds	r0, #1
 8006586:	d03a      	beq.n	80065fe <_malloc_r+0xea>
 8006588:	6823      	ldr	r3, [r4, #0]
 800658a:	442b      	add	r3, r5
 800658c:	6023      	str	r3, [r4, #0]
 800658e:	f8d8 3000 	ldr.w	r3, [r8]
 8006592:	685a      	ldr	r2, [r3, #4]
 8006594:	bb62      	cbnz	r2, 80065f0 <_malloc_r+0xdc>
 8006596:	f8c8 7000 	str.w	r7, [r8]
 800659a:	e00f      	b.n	80065bc <_malloc_r+0xa8>
 800659c:	6822      	ldr	r2, [r4, #0]
 800659e:	1b52      	subs	r2, r2, r5
 80065a0:	d420      	bmi.n	80065e4 <_malloc_r+0xd0>
 80065a2:	2a0b      	cmp	r2, #11
 80065a4:	d917      	bls.n	80065d6 <_malloc_r+0xc2>
 80065a6:	1961      	adds	r1, r4, r5
 80065a8:	42a3      	cmp	r3, r4
 80065aa:	6025      	str	r5, [r4, #0]
 80065ac:	bf18      	it	ne
 80065ae:	6059      	strne	r1, [r3, #4]
 80065b0:	6863      	ldr	r3, [r4, #4]
 80065b2:	bf08      	it	eq
 80065b4:	f8c8 1000 	streq.w	r1, [r8]
 80065b8:	5162      	str	r2, [r4, r5]
 80065ba:	604b      	str	r3, [r1, #4]
 80065bc:	4630      	mov	r0, r6
 80065be:	f000 f82f 	bl	8006620 <__malloc_unlock>
 80065c2:	f104 000b 	add.w	r0, r4, #11
 80065c6:	1d23      	adds	r3, r4, #4
 80065c8:	f020 0007 	bic.w	r0, r0, #7
 80065cc:	1ac2      	subs	r2, r0, r3
 80065ce:	bf1c      	itt	ne
 80065d0:	1a1b      	subne	r3, r3, r0
 80065d2:	50a3      	strne	r3, [r4, r2]
 80065d4:	e7af      	b.n	8006536 <_malloc_r+0x22>
 80065d6:	6862      	ldr	r2, [r4, #4]
 80065d8:	42a3      	cmp	r3, r4
 80065da:	bf0c      	ite	eq
 80065dc:	f8c8 2000 	streq.w	r2, [r8]
 80065e0:	605a      	strne	r2, [r3, #4]
 80065e2:	e7eb      	b.n	80065bc <_malloc_r+0xa8>
 80065e4:	4623      	mov	r3, r4
 80065e6:	6864      	ldr	r4, [r4, #4]
 80065e8:	e7ae      	b.n	8006548 <_malloc_r+0x34>
 80065ea:	463c      	mov	r4, r7
 80065ec:	687f      	ldr	r7, [r7, #4]
 80065ee:	e7b6      	b.n	800655e <_malloc_r+0x4a>
 80065f0:	461a      	mov	r2, r3
 80065f2:	685b      	ldr	r3, [r3, #4]
 80065f4:	42a3      	cmp	r3, r4
 80065f6:	d1fb      	bne.n	80065f0 <_malloc_r+0xdc>
 80065f8:	2300      	movs	r3, #0
 80065fa:	6053      	str	r3, [r2, #4]
 80065fc:	e7de      	b.n	80065bc <_malloc_r+0xa8>
 80065fe:	230c      	movs	r3, #12
 8006600:	6033      	str	r3, [r6, #0]
 8006602:	4630      	mov	r0, r6
 8006604:	f000 f80c 	bl	8006620 <__malloc_unlock>
 8006608:	e794      	b.n	8006534 <_malloc_r+0x20>
 800660a:	6005      	str	r5, [r0, #0]
 800660c:	e7d6      	b.n	80065bc <_malloc_r+0xa8>
 800660e:	bf00      	nop
 8006610:	200046fc 	.word	0x200046fc

08006614 <__malloc_lock>:
 8006614:	4801      	ldr	r0, [pc, #4]	@ (800661c <__malloc_lock+0x8>)
 8006616:	f7ff beda 	b.w	80063ce <__retarget_lock_acquire_recursive>
 800661a:	bf00      	nop
 800661c:	200046f4 	.word	0x200046f4

08006620 <__malloc_unlock>:
 8006620:	4801      	ldr	r0, [pc, #4]	@ (8006628 <__malloc_unlock+0x8>)
 8006622:	f7ff bed5 	b.w	80063d0 <__retarget_lock_release_recursive>
 8006626:	bf00      	nop
 8006628:	200046f4 	.word	0x200046f4

0800662c <__sfputc_r>:
 800662c:	6893      	ldr	r3, [r2, #8]
 800662e:	3b01      	subs	r3, #1
 8006630:	2b00      	cmp	r3, #0
 8006632:	b410      	push	{r4}
 8006634:	6093      	str	r3, [r2, #8]
 8006636:	da08      	bge.n	800664a <__sfputc_r+0x1e>
 8006638:	6994      	ldr	r4, [r2, #24]
 800663a:	42a3      	cmp	r3, r4
 800663c:	db01      	blt.n	8006642 <__sfputc_r+0x16>
 800663e:	290a      	cmp	r1, #10
 8006640:	d103      	bne.n	800664a <__sfputc_r+0x1e>
 8006642:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006646:	f000 bad3 	b.w	8006bf0 <__swbuf_r>
 800664a:	6813      	ldr	r3, [r2, #0]
 800664c:	1c58      	adds	r0, r3, #1
 800664e:	6010      	str	r0, [r2, #0]
 8006650:	7019      	strb	r1, [r3, #0]
 8006652:	4608      	mov	r0, r1
 8006654:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006658:	4770      	bx	lr

0800665a <__sfputs_r>:
 800665a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800665c:	4606      	mov	r6, r0
 800665e:	460f      	mov	r7, r1
 8006660:	4614      	mov	r4, r2
 8006662:	18d5      	adds	r5, r2, r3
 8006664:	42ac      	cmp	r4, r5
 8006666:	d101      	bne.n	800666c <__sfputs_r+0x12>
 8006668:	2000      	movs	r0, #0
 800666a:	e007      	b.n	800667c <__sfputs_r+0x22>
 800666c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006670:	463a      	mov	r2, r7
 8006672:	4630      	mov	r0, r6
 8006674:	f7ff ffda 	bl	800662c <__sfputc_r>
 8006678:	1c43      	adds	r3, r0, #1
 800667a:	d1f3      	bne.n	8006664 <__sfputs_r+0xa>
 800667c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006680 <_vfiprintf_r>:
 8006680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006684:	460d      	mov	r5, r1
 8006686:	b09d      	sub	sp, #116	@ 0x74
 8006688:	4614      	mov	r4, r2
 800668a:	4698      	mov	r8, r3
 800668c:	4606      	mov	r6, r0
 800668e:	b118      	cbz	r0, 8006698 <_vfiprintf_r+0x18>
 8006690:	6a03      	ldr	r3, [r0, #32]
 8006692:	b90b      	cbnz	r3, 8006698 <_vfiprintf_r+0x18>
 8006694:	f7ff fd40 	bl	8006118 <__sinit>
 8006698:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800669a:	07d9      	lsls	r1, r3, #31
 800669c:	d405      	bmi.n	80066aa <_vfiprintf_r+0x2a>
 800669e:	89ab      	ldrh	r3, [r5, #12]
 80066a0:	059a      	lsls	r2, r3, #22
 80066a2:	d402      	bmi.n	80066aa <_vfiprintf_r+0x2a>
 80066a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80066a6:	f7ff fe92 	bl	80063ce <__retarget_lock_acquire_recursive>
 80066aa:	89ab      	ldrh	r3, [r5, #12]
 80066ac:	071b      	lsls	r3, r3, #28
 80066ae:	d501      	bpl.n	80066b4 <_vfiprintf_r+0x34>
 80066b0:	692b      	ldr	r3, [r5, #16]
 80066b2:	b99b      	cbnz	r3, 80066dc <_vfiprintf_r+0x5c>
 80066b4:	4629      	mov	r1, r5
 80066b6:	4630      	mov	r0, r6
 80066b8:	f000 fad8 	bl	8006c6c <__swsetup_r>
 80066bc:	b170      	cbz	r0, 80066dc <_vfiprintf_r+0x5c>
 80066be:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80066c0:	07dc      	lsls	r4, r3, #31
 80066c2:	d504      	bpl.n	80066ce <_vfiprintf_r+0x4e>
 80066c4:	f04f 30ff 	mov.w	r0, #4294967295
 80066c8:	b01d      	add	sp, #116	@ 0x74
 80066ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066ce:	89ab      	ldrh	r3, [r5, #12]
 80066d0:	0598      	lsls	r0, r3, #22
 80066d2:	d4f7      	bmi.n	80066c4 <_vfiprintf_r+0x44>
 80066d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80066d6:	f7ff fe7b 	bl	80063d0 <__retarget_lock_release_recursive>
 80066da:	e7f3      	b.n	80066c4 <_vfiprintf_r+0x44>
 80066dc:	2300      	movs	r3, #0
 80066de:	9309      	str	r3, [sp, #36]	@ 0x24
 80066e0:	2320      	movs	r3, #32
 80066e2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80066e6:	f8cd 800c 	str.w	r8, [sp, #12]
 80066ea:	2330      	movs	r3, #48	@ 0x30
 80066ec:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800689c <_vfiprintf_r+0x21c>
 80066f0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80066f4:	f04f 0901 	mov.w	r9, #1
 80066f8:	4623      	mov	r3, r4
 80066fa:	469a      	mov	sl, r3
 80066fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006700:	b10a      	cbz	r2, 8006706 <_vfiprintf_r+0x86>
 8006702:	2a25      	cmp	r2, #37	@ 0x25
 8006704:	d1f9      	bne.n	80066fa <_vfiprintf_r+0x7a>
 8006706:	ebba 0b04 	subs.w	fp, sl, r4
 800670a:	d00b      	beq.n	8006724 <_vfiprintf_r+0xa4>
 800670c:	465b      	mov	r3, fp
 800670e:	4622      	mov	r2, r4
 8006710:	4629      	mov	r1, r5
 8006712:	4630      	mov	r0, r6
 8006714:	f7ff ffa1 	bl	800665a <__sfputs_r>
 8006718:	3001      	adds	r0, #1
 800671a:	f000 80a7 	beq.w	800686c <_vfiprintf_r+0x1ec>
 800671e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006720:	445a      	add	r2, fp
 8006722:	9209      	str	r2, [sp, #36]	@ 0x24
 8006724:	f89a 3000 	ldrb.w	r3, [sl]
 8006728:	2b00      	cmp	r3, #0
 800672a:	f000 809f 	beq.w	800686c <_vfiprintf_r+0x1ec>
 800672e:	2300      	movs	r3, #0
 8006730:	f04f 32ff 	mov.w	r2, #4294967295
 8006734:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006738:	f10a 0a01 	add.w	sl, sl, #1
 800673c:	9304      	str	r3, [sp, #16]
 800673e:	9307      	str	r3, [sp, #28]
 8006740:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006744:	931a      	str	r3, [sp, #104]	@ 0x68
 8006746:	4654      	mov	r4, sl
 8006748:	2205      	movs	r2, #5
 800674a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800674e:	4853      	ldr	r0, [pc, #332]	@ (800689c <_vfiprintf_r+0x21c>)
 8006750:	f7f9 fd4e 	bl	80001f0 <memchr>
 8006754:	9a04      	ldr	r2, [sp, #16]
 8006756:	b9d8      	cbnz	r0, 8006790 <_vfiprintf_r+0x110>
 8006758:	06d1      	lsls	r1, r2, #27
 800675a:	bf44      	itt	mi
 800675c:	2320      	movmi	r3, #32
 800675e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006762:	0713      	lsls	r3, r2, #28
 8006764:	bf44      	itt	mi
 8006766:	232b      	movmi	r3, #43	@ 0x2b
 8006768:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800676c:	f89a 3000 	ldrb.w	r3, [sl]
 8006770:	2b2a      	cmp	r3, #42	@ 0x2a
 8006772:	d015      	beq.n	80067a0 <_vfiprintf_r+0x120>
 8006774:	9a07      	ldr	r2, [sp, #28]
 8006776:	4654      	mov	r4, sl
 8006778:	2000      	movs	r0, #0
 800677a:	f04f 0c0a 	mov.w	ip, #10
 800677e:	4621      	mov	r1, r4
 8006780:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006784:	3b30      	subs	r3, #48	@ 0x30
 8006786:	2b09      	cmp	r3, #9
 8006788:	d94b      	bls.n	8006822 <_vfiprintf_r+0x1a2>
 800678a:	b1b0      	cbz	r0, 80067ba <_vfiprintf_r+0x13a>
 800678c:	9207      	str	r2, [sp, #28]
 800678e:	e014      	b.n	80067ba <_vfiprintf_r+0x13a>
 8006790:	eba0 0308 	sub.w	r3, r0, r8
 8006794:	fa09 f303 	lsl.w	r3, r9, r3
 8006798:	4313      	orrs	r3, r2
 800679a:	9304      	str	r3, [sp, #16]
 800679c:	46a2      	mov	sl, r4
 800679e:	e7d2      	b.n	8006746 <_vfiprintf_r+0xc6>
 80067a0:	9b03      	ldr	r3, [sp, #12]
 80067a2:	1d19      	adds	r1, r3, #4
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	9103      	str	r1, [sp, #12]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	bfbb      	ittet	lt
 80067ac:	425b      	neglt	r3, r3
 80067ae:	f042 0202 	orrlt.w	r2, r2, #2
 80067b2:	9307      	strge	r3, [sp, #28]
 80067b4:	9307      	strlt	r3, [sp, #28]
 80067b6:	bfb8      	it	lt
 80067b8:	9204      	strlt	r2, [sp, #16]
 80067ba:	7823      	ldrb	r3, [r4, #0]
 80067bc:	2b2e      	cmp	r3, #46	@ 0x2e
 80067be:	d10a      	bne.n	80067d6 <_vfiprintf_r+0x156>
 80067c0:	7863      	ldrb	r3, [r4, #1]
 80067c2:	2b2a      	cmp	r3, #42	@ 0x2a
 80067c4:	d132      	bne.n	800682c <_vfiprintf_r+0x1ac>
 80067c6:	9b03      	ldr	r3, [sp, #12]
 80067c8:	1d1a      	adds	r2, r3, #4
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	9203      	str	r2, [sp, #12]
 80067ce:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80067d2:	3402      	adds	r4, #2
 80067d4:	9305      	str	r3, [sp, #20]
 80067d6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80068ac <_vfiprintf_r+0x22c>
 80067da:	7821      	ldrb	r1, [r4, #0]
 80067dc:	2203      	movs	r2, #3
 80067de:	4650      	mov	r0, sl
 80067e0:	f7f9 fd06 	bl	80001f0 <memchr>
 80067e4:	b138      	cbz	r0, 80067f6 <_vfiprintf_r+0x176>
 80067e6:	9b04      	ldr	r3, [sp, #16]
 80067e8:	eba0 000a 	sub.w	r0, r0, sl
 80067ec:	2240      	movs	r2, #64	@ 0x40
 80067ee:	4082      	lsls	r2, r0
 80067f0:	4313      	orrs	r3, r2
 80067f2:	3401      	adds	r4, #1
 80067f4:	9304      	str	r3, [sp, #16]
 80067f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80067fa:	4829      	ldr	r0, [pc, #164]	@ (80068a0 <_vfiprintf_r+0x220>)
 80067fc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006800:	2206      	movs	r2, #6
 8006802:	f7f9 fcf5 	bl	80001f0 <memchr>
 8006806:	2800      	cmp	r0, #0
 8006808:	d03f      	beq.n	800688a <_vfiprintf_r+0x20a>
 800680a:	4b26      	ldr	r3, [pc, #152]	@ (80068a4 <_vfiprintf_r+0x224>)
 800680c:	bb1b      	cbnz	r3, 8006856 <_vfiprintf_r+0x1d6>
 800680e:	9b03      	ldr	r3, [sp, #12]
 8006810:	3307      	adds	r3, #7
 8006812:	f023 0307 	bic.w	r3, r3, #7
 8006816:	3308      	adds	r3, #8
 8006818:	9303      	str	r3, [sp, #12]
 800681a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800681c:	443b      	add	r3, r7
 800681e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006820:	e76a      	b.n	80066f8 <_vfiprintf_r+0x78>
 8006822:	fb0c 3202 	mla	r2, ip, r2, r3
 8006826:	460c      	mov	r4, r1
 8006828:	2001      	movs	r0, #1
 800682a:	e7a8      	b.n	800677e <_vfiprintf_r+0xfe>
 800682c:	2300      	movs	r3, #0
 800682e:	3401      	adds	r4, #1
 8006830:	9305      	str	r3, [sp, #20]
 8006832:	4619      	mov	r1, r3
 8006834:	f04f 0c0a 	mov.w	ip, #10
 8006838:	4620      	mov	r0, r4
 800683a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800683e:	3a30      	subs	r2, #48	@ 0x30
 8006840:	2a09      	cmp	r2, #9
 8006842:	d903      	bls.n	800684c <_vfiprintf_r+0x1cc>
 8006844:	2b00      	cmp	r3, #0
 8006846:	d0c6      	beq.n	80067d6 <_vfiprintf_r+0x156>
 8006848:	9105      	str	r1, [sp, #20]
 800684a:	e7c4      	b.n	80067d6 <_vfiprintf_r+0x156>
 800684c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006850:	4604      	mov	r4, r0
 8006852:	2301      	movs	r3, #1
 8006854:	e7f0      	b.n	8006838 <_vfiprintf_r+0x1b8>
 8006856:	ab03      	add	r3, sp, #12
 8006858:	9300      	str	r3, [sp, #0]
 800685a:	462a      	mov	r2, r5
 800685c:	4b12      	ldr	r3, [pc, #72]	@ (80068a8 <_vfiprintf_r+0x228>)
 800685e:	a904      	add	r1, sp, #16
 8006860:	4630      	mov	r0, r6
 8006862:	f3af 8000 	nop.w
 8006866:	4607      	mov	r7, r0
 8006868:	1c78      	adds	r0, r7, #1
 800686a:	d1d6      	bne.n	800681a <_vfiprintf_r+0x19a>
 800686c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800686e:	07d9      	lsls	r1, r3, #31
 8006870:	d405      	bmi.n	800687e <_vfiprintf_r+0x1fe>
 8006872:	89ab      	ldrh	r3, [r5, #12]
 8006874:	059a      	lsls	r2, r3, #22
 8006876:	d402      	bmi.n	800687e <_vfiprintf_r+0x1fe>
 8006878:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800687a:	f7ff fda9 	bl	80063d0 <__retarget_lock_release_recursive>
 800687e:	89ab      	ldrh	r3, [r5, #12]
 8006880:	065b      	lsls	r3, r3, #25
 8006882:	f53f af1f 	bmi.w	80066c4 <_vfiprintf_r+0x44>
 8006886:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006888:	e71e      	b.n	80066c8 <_vfiprintf_r+0x48>
 800688a:	ab03      	add	r3, sp, #12
 800688c:	9300      	str	r3, [sp, #0]
 800688e:	462a      	mov	r2, r5
 8006890:	4b05      	ldr	r3, [pc, #20]	@ (80068a8 <_vfiprintf_r+0x228>)
 8006892:	a904      	add	r1, sp, #16
 8006894:	4630      	mov	r0, r6
 8006896:	f000 f879 	bl	800698c <_printf_i>
 800689a:	e7e4      	b.n	8006866 <_vfiprintf_r+0x1e6>
 800689c:	080070ef 	.word	0x080070ef
 80068a0:	080070f9 	.word	0x080070f9
 80068a4:	00000000 	.word	0x00000000
 80068a8:	0800665b 	.word	0x0800665b
 80068ac:	080070f5 	.word	0x080070f5

080068b0 <_printf_common>:
 80068b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80068b4:	4616      	mov	r6, r2
 80068b6:	4698      	mov	r8, r3
 80068b8:	688a      	ldr	r2, [r1, #8]
 80068ba:	690b      	ldr	r3, [r1, #16]
 80068bc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80068c0:	4293      	cmp	r3, r2
 80068c2:	bfb8      	it	lt
 80068c4:	4613      	movlt	r3, r2
 80068c6:	6033      	str	r3, [r6, #0]
 80068c8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80068cc:	4607      	mov	r7, r0
 80068ce:	460c      	mov	r4, r1
 80068d0:	b10a      	cbz	r2, 80068d6 <_printf_common+0x26>
 80068d2:	3301      	adds	r3, #1
 80068d4:	6033      	str	r3, [r6, #0]
 80068d6:	6823      	ldr	r3, [r4, #0]
 80068d8:	0699      	lsls	r1, r3, #26
 80068da:	bf42      	ittt	mi
 80068dc:	6833      	ldrmi	r3, [r6, #0]
 80068de:	3302      	addmi	r3, #2
 80068e0:	6033      	strmi	r3, [r6, #0]
 80068e2:	6825      	ldr	r5, [r4, #0]
 80068e4:	f015 0506 	ands.w	r5, r5, #6
 80068e8:	d106      	bne.n	80068f8 <_printf_common+0x48>
 80068ea:	f104 0a19 	add.w	sl, r4, #25
 80068ee:	68e3      	ldr	r3, [r4, #12]
 80068f0:	6832      	ldr	r2, [r6, #0]
 80068f2:	1a9b      	subs	r3, r3, r2
 80068f4:	42ab      	cmp	r3, r5
 80068f6:	dc26      	bgt.n	8006946 <_printf_common+0x96>
 80068f8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80068fc:	6822      	ldr	r2, [r4, #0]
 80068fe:	3b00      	subs	r3, #0
 8006900:	bf18      	it	ne
 8006902:	2301      	movne	r3, #1
 8006904:	0692      	lsls	r2, r2, #26
 8006906:	d42b      	bmi.n	8006960 <_printf_common+0xb0>
 8006908:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800690c:	4641      	mov	r1, r8
 800690e:	4638      	mov	r0, r7
 8006910:	47c8      	blx	r9
 8006912:	3001      	adds	r0, #1
 8006914:	d01e      	beq.n	8006954 <_printf_common+0xa4>
 8006916:	6823      	ldr	r3, [r4, #0]
 8006918:	6922      	ldr	r2, [r4, #16]
 800691a:	f003 0306 	and.w	r3, r3, #6
 800691e:	2b04      	cmp	r3, #4
 8006920:	bf02      	ittt	eq
 8006922:	68e5      	ldreq	r5, [r4, #12]
 8006924:	6833      	ldreq	r3, [r6, #0]
 8006926:	1aed      	subeq	r5, r5, r3
 8006928:	68a3      	ldr	r3, [r4, #8]
 800692a:	bf0c      	ite	eq
 800692c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006930:	2500      	movne	r5, #0
 8006932:	4293      	cmp	r3, r2
 8006934:	bfc4      	itt	gt
 8006936:	1a9b      	subgt	r3, r3, r2
 8006938:	18ed      	addgt	r5, r5, r3
 800693a:	2600      	movs	r6, #0
 800693c:	341a      	adds	r4, #26
 800693e:	42b5      	cmp	r5, r6
 8006940:	d11a      	bne.n	8006978 <_printf_common+0xc8>
 8006942:	2000      	movs	r0, #0
 8006944:	e008      	b.n	8006958 <_printf_common+0xa8>
 8006946:	2301      	movs	r3, #1
 8006948:	4652      	mov	r2, sl
 800694a:	4641      	mov	r1, r8
 800694c:	4638      	mov	r0, r7
 800694e:	47c8      	blx	r9
 8006950:	3001      	adds	r0, #1
 8006952:	d103      	bne.n	800695c <_printf_common+0xac>
 8006954:	f04f 30ff 	mov.w	r0, #4294967295
 8006958:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800695c:	3501      	adds	r5, #1
 800695e:	e7c6      	b.n	80068ee <_printf_common+0x3e>
 8006960:	18e1      	adds	r1, r4, r3
 8006962:	1c5a      	adds	r2, r3, #1
 8006964:	2030      	movs	r0, #48	@ 0x30
 8006966:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800696a:	4422      	add	r2, r4
 800696c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006970:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006974:	3302      	adds	r3, #2
 8006976:	e7c7      	b.n	8006908 <_printf_common+0x58>
 8006978:	2301      	movs	r3, #1
 800697a:	4622      	mov	r2, r4
 800697c:	4641      	mov	r1, r8
 800697e:	4638      	mov	r0, r7
 8006980:	47c8      	blx	r9
 8006982:	3001      	adds	r0, #1
 8006984:	d0e6      	beq.n	8006954 <_printf_common+0xa4>
 8006986:	3601      	adds	r6, #1
 8006988:	e7d9      	b.n	800693e <_printf_common+0x8e>
	...

0800698c <_printf_i>:
 800698c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006990:	7e0f      	ldrb	r7, [r1, #24]
 8006992:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006994:	2f78      	cmp	r7, #120	@ 0x78
 8006996:	4691      	mov	r9, r2
 8006998:	4680      	mov	r8, r0
 800699a:	460c      	mov	r4, r1
 800699c:	469a      	mov	sl, r3
 800699e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80069a2:	d807      	bhi.n	80069b4 <_printf_i+0x28>
 80069a4:	2f62      	cmp	r7, #98	@ 0x62
 80069a6:	d80a      	bhi.n	80069be <_printf_i+0x32>
 80069a8:	2f00      	cmp	r7, #0
 80069aa:	f000 80d2 	beq.w	8006b52 <_printf_i+0x1c6>
 80069ae:	2f58      	cmp	r7, #88	@ 0x58
 80069b0:	f000 80b9 	beq.w	8006b26 <_printf_i+0x19a>
 80069b4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80069b8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80069bc:	e03a      	b.n	8006a34 <_printf_i+0xa8>
 80069be:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80069c2:	2b15      	cmp	r3, #21
 80069c4:	d8f6      	bhi.n	80069b4 <_printf_i+0x28>
 80069c6:	a101      	add	r1, pc, #4	@ (adr r1, 80069cc <_printf_i+0x40>)
 80069c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80069cc:	08006a25 	.word	0x08006a25
 80069d0:	08006a39 	.word	0x08006a39
 80069d4:	080069b5 	.word	0x080069b5
 80069d8:	080069b5 	.word	0x080069b5
 80069dc:	080069b5 	.word	0x080069b5
 80069e0:	080069b5 	.word	0x080069b5
 80069e4:	08006a39 	.word	0x08006a39
 80069e8:	080069b5 	.word	0x080069b5
 80069ec:	080069b5 	.word	0x080069b5
 80069f0:	080069b5 	.word	0x080069b5
 80069f4:	080069b5 	.word	0x080069b5
 80069f8:	08006b39 	.word	0x08006b39
 80069fc:	08006a63 	.word	0x08006a63
 8006a00:	08006af3 	.word	0x08006af3
 8006a04:	080069b5 	.word	0x080069b5
 8006a08:	080069b5 	.word	0x080069b5
 8006a0c:	08006b5b 	.word	0x08006b5b
 8006a10:	080069b5 	.word	0x080069b5
 8006a14:	08006a63 	.word	0x08006a63
 8006a18:	080069b5 	.word	0x080069b5
 8006a1c:	080069b5 	.word	0x080069b5
 8006a20:	08006afb 	.word	0x08006afb
 8006a24:	6833      	ldr	r3, [r6, #0]
 8006a26:	1d1a      	adds	r2, r3, #4
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	6032      	str	r2, [r6, #0]
 8006a2c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006a30:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006a34:	2301      	movs	r3, #1
 8006a36:	e09d      	b.n	8006b74 <_printf_i+0x1e8>
 8006a38:	6833      	ldr	r3, [r6, #0]
 8006a3a:	6820      	ldr	r0, [r4, #0]
 8006a3c:	1d19      	adds	r1, r3, #4
 8006a3e:	6031      	str	r1, [r6, #0]
 8006a40:	0606      	lsls	r6, r0, #24
 8006a42:	d501      	bpl.n	8006a48 <_printf_i+0xbc>
 8006a44:	681d      	ldr	r5, [r3, #0]
 8006a46:	e003      	b.n	8006a50 <_printf_i+0xc4>
 8006a48:	0645      	lsls	r5, r0, #25
 8006a4a:	d5fb      	bpl.n	8006a44 <_printf_i+0xb8>
 8006a4c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006a50:	2d00      	cmp	r5, #0
 8006a52:	da03      	bge.n	8006a5c <_printf_i+0xd0>
 8006a54:	232d      	movs	r3, #45	@ 0x2d
 8006a56:	426d      	negs	r5, r5
 8006a58:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006a5c:	4859      	ldr	r0, [pc, #356]	@ (8006bc4 <_printf_i+0x238>)
 8006a5e:	230a      	movs	r3, #10
 8006a60:	e011      	b.n	8006a86 <_printf_i+0xfa>
 8006a62:	6821      	ldr	r1, [r4, #0]
 8006a64:	6833      	ldr	r3, [r6, #0]
 8006a66:	0608      	lsls	r0, r1, #24
 8006a68:	f853 5b04 	ldr.w	r5, [r3], #4
 8006a6c:	d402      	bmi.n	8006a74 <_printf_i+0xe8>
 8006a6e:	0649      	lsls	r1, r1, #25
 8006a70:	bf48      	it	mi
 8006a72:	b2ad      	uxthmi	r5, r5
 8006a74:	2f6f      	cmp	r7, #111	@ 0x6f
 8006a76:	4853      	ldr	r0, [pc, #332]	@ (8006bc4 <_printf_i+0x238>)
 8006a78:	6033      	str	r3, [r6, #0]
 8006a7a:	bf14      	ite	ne
 8006a7c:	230a      	movne	r3, #10
 8006a7e:	2308      	moveq	r3, #8
 8006a80:	2100      	movs	r1, #0
 8006a82:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006a86:	6866      	ldr	r6, [r4, #4]
 8006a88:	60a6      	str	r6, [r4, #8]
 8006a8a:	2e00      	cmp	r6, #0
 8006a8c:	bfa2      	ittt	ge
 8006a8e:	6821      	ldrge	r1, [r4, #0]
 8006a90:	f021 0104 	bicge.w	r1, r1, #4
 8006a94:	6021      	strge	r1, [r4, #0]
 8006a96:	b90d      	cbnz	r5, 8006a9c <_printf_i+0x110>
 8006a98:	2e00      	cmp	r6, #0
 8006a9a:	d04b      	beq.n	8006b34 <_printf_i+0x1a8>
 8006a9c:	4616      	mov	r6, r2
 8006a9e:	fbb5 f1f3 	udiv	r1, r5, r3
 8006aa2:	fb03 5711 	mls	r7, r3, r1, r5
 8006aa6:	5dc7      	ldrb	r7, [r0, r7]
 8006aa8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006aac:	462f      	mov	r7, r5
 8006aae:	42bb      	cmp	r3, r7
 8006ab0:	460d      	mov	r5, r1
 8006ab2:	d9f4      	bls.n	8006a9e <_printf_i+0x112>
 8006ab4:	2b08      	cmp	r3, #8
 8006ab6:	d10b      	bne.n	8006ad0 <_printf_i+0x144>
 8006ab8:	6823      	ldr	r3, [r4, #0]
 8006aba:	07df      	lsls	r7, r3, #31
 8006abc:	d508      	bpl.n	8006ad0 <_printf_i+0x144>
 8006abe:	6923      	ldr	r3, [r4, #16]
 8006ac0:	6861      	ldr	r1, [r4, #4]
 8006ac2:	4299      	cmp	r1, r3
 8006ac4:	bfde      	ittt	le
 8006ac6:	2330      	movle	r3, #48	@ 0x30
 8006ac8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006acc:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006ad0:	1b92      	subs	r2, r2, r6
 8006ad2:	6122      	str	r2, [r4, #16]
 8006ad4:	f8cd a000 	str.w	sl, [sp]
 8006ad8:	464b      	mov	r3, r9
 8006ada:	aa03      	add	r2, sp, #12
 8006adc:	4621      	mov	r1, r4
 8006ade:	4640      	mov	r0, r8
 8006ae0:	f7ff fee6 	bl	80068b0 <_printf_common>
 8006ae4:	3001      	adds	r0, #1
 8006ae6:	d14a      	bne.n	8006b7e <_printf_i+0x1f2>
 8006ae8:	f04f 30ff 	mov.w	r0, #4294967295
 8006aec:	b004      	add	sp, #16
 8006aee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006af2:	6823      	ldr	r3, [r4, #0]
 8006af4:	f043 0320 	orr.w	r3, r3, #32
 8006af8:	6023      	str	r3, [r4, #0]
 8006afa:	4833      	ldr	r0, [pc, #204]	@ (8006bc8 <_printf_i+0x23c>)
 8006afc:	2778      	movs	r7, #120	@ 0x78
 8006afe:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006b02:	6823      	ldr	r3, [r4, #0]
 8006b04:	6831      	ldr	r1, [r6, #0]
 8006b06:	061f      	lsls	r7, r3, #24
 8006b08:	f851 5b04 	ldr.w	r5, [r1], #4
 8006b0c:	d402      	bmi.n	8006b14 <_printf_i+0x188>
 8006b0e:	065f      	lsls	r7, r3, #25
 8006b10:	bf48      	it	mi
 8006b12:	b2ad      	uxthmi	r5, r5
 8006b14:	6031      	str	r1, [r6, #0]
 8006b16:	07d9      	lsls	r1, r3, #31
 8006b18:	bf44      	itt	mi
 8006b1a:	f043 0320 	orrmi.w	r3, r3, #32
 8006b1e:	6023      	strmi	r3, [r4, #0]
 8006b20:	b11d      	cbz	r5, 8006b2a <_printf_i+0x19e>
 8006b22:	2310      	movs	r3, #16
 8006b24:	e7ac      	b.n	8006a80 <_printf_i+0xf4>
 8006b26:	4827      	ldr	r0, [pc, #156]	@ (8006bc4 <_printf_i+0x238>)
 8006b28:	e7e9      	b.n	8006afe <_printf_i+0x172>
 8006b2a:	6823      	ldr	r3, [r4, #0]
 8006b2c:	f023 0320 	bic.w	r3, r3, #32
 8006b30:	6023      	str	r3, [r4, #0]
 8006b32:	e7f6      	b.n	8006b22 <_printf_i+0x196>
 8006b34:	4616      	mov	r6, r2
 8006b36:	e7bd      	b.n	8006ab4 <_printf_i+0x128>
 8006b38:	6833      	ldr	r3, [r6, #0]
 8006b3a:	6825      	ldr	r5, [r4, #0]
 8006b3c:	6961      	ldr	r1, [r4, #20]
 8006b3e:	1d18      	adds	r0, r3, #4
 8006b40:	6030      	str	r0, [r6, #0]
 8006b42:	062e      	lsls	r6, r5, #24
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	d501      	bpl.n	8006b4c <_printf_i+0x1c0>
 8006b48:	6019      	str	r1, [r3, #0]
 8006b4a:	e002      	b.n	8006b52 <_printf_i+0x1c6>
 8006b4c:	0668      	lsls	r0, r5, #25
 8006b4e:	d5fb      	bpl.n	8006b48 <_printf_i+0x1bc>
 8006b50:	8019      	strh	r1, [r3, #0]
 8006b52:	2300      	movs	r3, #0
 8006b54:	6123      	str	r3, [r4, #16]
 8006b56:	4616      	mov	r6, r2
 8006b58:	e7bc      	b.n	8006ad4 <_printf_i+0x148>
 8006b5a:	6833      	ldr	r3, [r6, #0]
 8006b5c:	1d1a      	adds	r2, r3, #4
 8006b5e:	6032      	str	r2, [r6, #0]
 8006b60:	681e      	ldr	r6, [r3, #0]
 8006b62:	6862      	ldr	r2, [r4, #4]
 8006b64:	2100      	movs	r1, #0
 8006b66:	4630      	mov	r0, r6
 8006b68:	f7f9 fb42 	bl	80001f0 <memchr>
 8006b6c:	b108      	cbz	r0, 8006b72 <_printf_i+0x1e6>
 8006b6e:	1b80      	subs	r0, r0, r6
 8006b70:	6060      	str	r0, [r4, #4]
 8006b72:	6863      	ldr	r3, [r4, #4]
 8006b74:	6123      	str	r3, [r4, #16]
 8006b76:	2300      	movs	r3, #0
 8006b78:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006b7c:	e7aa      	b.n	8006ad4 <_printf_i+0x148>
 8006b7e:	6923      	ldr	r3, [r4, #16]
 8006b80:	4632      	mov	r2, r6
 8006b82:	4649      	mov	r1, r9
 8006b84:	4640      	mov	r0, r8
 8006b86:	47d0      	blx	sl
 8006b88:	3001      	adds	r0, #1
 8006b8a:	d0ad      	beq.n	8006ae8 <_printf_i+0x15c>
 8006b8c:	6823      	ldr	r3, [r4, #0]
 8006b8e:	079b      	lsls	r3, r3, #30
 8006b90:	d413      	bmi.n	8006bba <_printf_i+0x22e>
 8006b92:	68e0      	ldr	r0, [r4, #12]
 8006b94:	9b03      	ldr	r3, [sp, #12]
 8006b96:	4298      	cmp	r0, r3
 8006b98:	bfb8      	it	lt
 8006b9a:	4618      	movlt	r0, r3
 8006b9c:	e7a6      	b.n	8006aec <_printf_i+0x160>
 8006b9e:	2301      	movs	r3, #1
 8006ba0:	4632      	mov	r2, r6
 8006ba2:	4649      	mov	r1, r9
 8006ba4:	4640      	mov	r0, r8
 8006ba6:	47d0      	blx	sl
 8006ba8:	3001      	adds	r0, #1
 8006baa:	d09d      	beq.n	8006ae8 <_printf_i+0x15c>
 8006bac:	3501      	adds	r5, #1
 8006bae:	68e3      	ldr	r3, [r4, #12]
 8006bb0:	9903      	ldr	r1, [sp, #12]
 8006bb2:	1a5b      	subs	r3, r3, r1
 8006bb4:	42ab      	cmp	r3, r5
 8006bb6:	dcf2      	bgt.n	8006b9e <_printf_i+0x212>
 8006bb8:	e7eb      	b.n	8006b92 <_printf_i+0x206>
 8006bba:	2500      	movs	r5, #0
 8006bbc:	f104 0619 	add.w	r6, r4, #25
 8006bc0:	e7f5      	b.n	8006bae <_printf_i+0x222>
 8006bc2:	bf00      	nop
 8006bc4:	08007100 	.word	0x08007100
 8006bc8:	08007111 	.word	0x08007111

08006bcc <fiprintf>:
 8006bcc:	b40e      	push	{r1, r2, r3}
 8006bce:	b503      	push	{r0, r1, lr}
 8006bd0:	4601      	mov	r1, r0
 8006bd2:	ab03      	add	r3, sp, #12
 8006bd4:	4805      	ldr	r0, [pc, #20]	@ (8006bec <fiprintf+0x20>)
 8006bd6:	f853 2b04 	ldr.w	r2, [r3], #4
 8006bda:	6800      	ldr	r0, [r0, #0]
 8006bdc:	9301      	str	r3, [sp, #4]
 8006bde:	f7ff fd4f 	bl	8006680 <_vfiprintf_r>
 8006be2:	b002      	add	sp, #8
 8006be4:	f85d eb04 	ldr.w	lr, [sp], #4
 8006be8:	b003      	add	sp, #12
 8006bea:	4770      	bx	lr
 8006bec:	2000001c 	.word	0x2000001c

08006bf0 <__swbuf_r>:
 8006bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bf2:	460e      	mov	r6, r1
 8006bf4:	4614      	mov	r4, r2
 8006bf6:	4605      	mov	r5, r0
 8006bf8:	b118      	cbz	r0, 8006c02 <__swbuf_r+0x12>
 8006bfa:	6a03      	ldr	r3, [r0, #32]
 8006bfc:	b90b      	cbnz	r3, 8006c02 <__swbuf_r+0x12>
 8006bfe:	f7ff fa8b 	bl	8006118 <__sinit>
 8006c02:	69a3      	ldr	r3, [r4, #24]
 8006c04:	60a3      	str	r3, [r4, #8]
 8006c06:	89a3      	ldrh	r3, [r4, #12]
 8006c08:	071a      	lsls	r2, r3, #28
 8006c0a:	d501      	bpl.n	8006c10 <__swbuf_r+0x20>
 8006c0c:	6923      	ldr	r3, [r4, #16]
 8006c0e:	b943      	cbnz	r3, 8006c22 <__swbuf_r+0x32>
 8006c10:	4621      	mov	r1, r4
 8006c12:	4628      	mov	r0, r5
 8006c14:	f000 f82a 	bl	8006c6c <__swsetup_r>
 8006c18:	b118      	cbz	r0, 8006c22 <__swbuf_r+0x32>
 8006c1a:	f04f 37ff 	mov.w	r7, #4294967295
 8006c1e:	4638      	mov	r0, r7
 8006c20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c22:	6823      	ldr	r3, [r4, #0]
 8006c24:	6922      	ldr	r2, [r4, #16]
 8006c26:	1a98      	subs	r0, r3, r2
 8006c28:	6963      	ldr	r3, [r4, #20]
 8006c2a:	b2f6      	uxtb	r6, r6
 8006c2c:	4283      	cmp	r3, r0
 8006c2e:	4637      	mov	r7, r6
 8006c30:	dc05      	bgt.n	8006c3e <__swbuf_r+0x4e>
 8006c32:	4621      	mov	r1, r4
 8006c34:	4628      	mov	r0, r5
 8006c36:	f7ff f9a7 	bl	8005f88 <_fflush_r>
 8006c3a:	2800      	cmp	r0, #0
 8006c3c:	d1ed      	bne.n	8006c1a <__swbuf_r+0x2a>
 8006c3e:	68a3      	ldr	r3, [r4, #8]
 8006c40:	3b01      	subs	r3, #1
 8006c42:	60a3      	str	r3, [r4, #8]
 8006c44:	6823      	ldr	r3, [r4, #0]
 8006c46:	1c5a      	adds	r2, r3, #1
 8006c48:	6022      	str	r2, [r4, #0]
 8006c4a:	701e      	strb	r6, [r3, #0]
 8006c4c:	6962      	ldr	r2, [r4, #20]
 8006c4e:	1c43      	adds	r3, r0, #1
 8006c50:	429a      	cmp	r2, r3
 8006c52:	d004      	beq.n	8006c5e <__swbuf_r+0x6e>
 8006c54:	89a3      	ldrh	r3, [r4, #12]
 8006c56:	07db      	lsls	r3, r3, #31
 8006c58:	d5e1      	bpl.n	8006c1e <__swbuf_r+0x2e>
 8006c5a:	2e0a      	cmp	r6, #10
 8006c5c:	d1df      	bne.n	8006c1e <__swbuf_r+0x2e>
 8006c5e:	4621      	mov	r1, r4
 8006c60:	4628      	mov	r0, r5
 8006c62:	f7ff f991 	bl	8005f88 <_fflush_r>
 8006c66:	2800      	cmp	r0, #0
 8006c68:	d0d9      	beq.n	8006c1e <__swbuf_r+0x2e>
 8006c6a:	e7d6      	b.n	8006c1a <__swbuf_r+0x2a>

08006c6c <__swsetup_r>:
 8006c6c:	b538      	push	{r3, r4, r5, lr}
 8006c6e:	4b29      	ldr	r3, [pc, #164]	@ (8006d14 <__swsetup_r+0xa8>)
 8006c70:	4605      	mov	r5, r0
 8006c72:	6818      	ldr	r0, [r3, #0]
 8006c74:	460c      	mov	r4, r1
 8006c76:	b118      	cbz	r0, 8006c80 <__swsetup_r+0x14>
 8006c78:	6a03      	ldr	r3, [r0, #32]
 8006c7a:	b90b      	cbnz	r3, 8006c80 <__swsetup_r+0x14>
 8006c7c:	f7ff fa4c 	bl	8006118 <__sinit>
 8006c80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c84:	0719      	lsls	r1, r3, #28
 8006c86:	d422      	bmi.n	8006cce <__swsetup_r+0x62>
 8006c88:	06da      	lsls	r2, r3, #27
 8006c8a:	d407      	bmi.n	8006c9c <__swsetup_r+0x30>
 8006c8c:	2209      	movs	r2, #9
 8006c8e:	602a      	str	r2, [r5, #0]
 8006c90:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006c94:	81a3      	strh	r3, [r4, #12]
 8006c96:	f04f 30ff 	mov.w	r0, #4294967295
 8006c9a:	e033      	b.n	8006d04 <__swsetup_r+0x98>
 8006c9c:	0758      	lsls	r0, r3, #29
 8006c9e:	d512      	bpl.n	8006cc6 <__swsetup_r+0x5a>
 8006ca0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006ca2:	b141      	cbz	r1, 8006cb6 <__swsetup_r+0x4a>
 8006ca4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006ca8:	4299      	cmp	r1, r3
 8006caa:	d002      	beq.n	8006cb2 <__swsetup_r+0x46>
 8006cac:	4628      	mov	r0, r5
 8006cae:	f7ff fbbd 	bl	800642c <_free_r>
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	6363      	str	r3, [r4, #52]	@ 0x34
 8006cb6:	89a3      	ldrh	r3, [r4, #12]
 8006cb8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006cbc:	81a3      	strh	r3, [r4, #12]
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	6063      	str	r3, [r4, #4]
 8006cc2:	6923      	ldr	r3, [r4, #16]
 8006cc4:	6023      	str	r3, [r4, #0]
 8006cc6:	89a3      	ldrh	r3, [r4, #12]
 8006cc8:	f043 0308 	orr.w	r3, r3, #8
 8006ccc:	81a3      	strh	r3, [r4, #12]
 8006cce:	6923      	ldr	r3, [r4, #16]
 8006cd0:	b94b      	cbnz	r3, 8006ce6 <__swsetup_r+0x7a>
 8006cd2:	89a3      	ldrh	r3, [r4, #12]
 8006cd4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006cd8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006cdc:	d003      	beq.n	8006ce6 <__swsetup_r+0x7a>
 8006cde:	4621      	mov	r1, r4
 8006ce0:	4628      	mov	r0, r5
 8006ce2:	f000 f856 	bl	8006d92 <__smakebuf_r>
 8006ce6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006cea:	f013 0201 	ands.w	r2, r3, #1
 8006cee:	d00a      	beq.n	8006d06 <__swsetup_r+0x9a>
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	60a2      	str	r2, [r4, #8]
 8006cf4:	6962      	ldr	r2, [r4, #20]
 8006cf6:	4252      	negs	r2, r2
 8006cf8:	61a2      	str	r2, [r4, #24]
 8006cfa:	6922      	ldr	r2, [r4, #16]
 8006cfc:	b942      	cbnz	r2, 8006d10 <__swsetup_r+0xa4>
 8006cfe:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006d02:	d1c5      	bne.n	8006c90 <__swsetup_r+0x24>
 8006d04:	bd38      	pop	{r3, r4, r5, pc}
 8006d06:	0799      	lsls	r1, r3, #30
 8006d08:	bf58      	it	pl
 8006d0a:	6962      	ldrpl	r2, [r4, #20]
 8006d0c:	60a2      	str	r2, [r4, #8]
 8006d0e:	e7f4      	b.n	8006cfa <__swsetup_r+0x8e>
 8006d10:	2000      	movs	r0, #0
 8006d12:	e7f7      	b.n	8006d04 <__swsetup_r+0x98>
 8006d14:	2000001c 	.word	0x2000001c

08006d18 <_sbrk_r>:
 8006d18:	b538      	push	{r3, r4, r5, lr}
 8006d1a:	4d06      	ldr	r5, [pc, #24]	@ (8006d34 <_sbrk_r+0x1c>)
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	4604      	mov	r4, r0
 8006d20:	4608      	mov	r0, r1
 8006d22:	602b      	str	r3, [r5, #0]
 8006d24:	f7fa f9cc 	bl	80010c0 <_sbrk>
 8006d28:	1c43      	adds	r3, r0, #1
 8006d2a:	d102      	bne.n	8006d32 <_sbrk_r+0x1a>
 8006d2c:	682b      	ldr	r3, [r5, #0]
 8006d2e:	b103      	cbz	r3, 8006d32 <_sbrk_r+0x1a>
 8006d30:	6023      	str	r3, [r4, #0]
 8006d32:	bd38      	pop	{r3, r4, r5, pc}
 8006d34:	200046f0 	.word	0x200046f0

08006d38 <abort>:
 8006d38:	b508      	push	{r3, lr}
 8006d3a:	2006      	movs	r0, #6
 8006d3c:	f000 f88e 	bl	8006e5c <raise>
 8006d40:	2001      	movs	r0, #1
 8006d42:	f7fa f945 	bl	8000fd0 <_exit>

08006d46 <__swhatbuf_r>:
 8006d46:	b570      	push	{r4, r5, r6, lr}
 8006d48:	460c      	mov	r4, r1
 8006d4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d4e:	2900      	cmp	r1, #0
 8006d50:	b096      	sub	sp, #88	@ 0x58
 8006d52:	4615      	mov	r5, r2
 8006d54:	461e      	mov	r6, r3
 8006d56:	da0d      	bge.n	8006d74 <__swhatbuf_r+0x2e>
 8006d58:	89a3      	ldrh	r3, [r4, #12]
 8006d5a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006d5e:	f04f 0100 	mov.w	r1, #0
 8006d62:	bf14      	ite	ne
 8006d64:	2340      	movne	r3, #64	@ 0x40
 8006d66:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006d6a:	2000      	movs	r0, #0
 8006d6c:	6031      	str	r1, [r6, #0]
 8006d6e:	602b      	str	r3, [r5, #0]
 8006d70:	b016      	add	sp, #88	@ 0x58
 8006d72:	bd70      	pop	{r4, r5, r6, pc}
 8006d74:	466a      	mov	r2, sp
 8006d76:	f000 f879 	bl	8006e6c <_fstat_r>
 8006d7a:	2800      	cmp	r0, #0
 8006d7c:	dbec      	blt.n	8006d58 <__swhatbuf_r+0x12>
 8006d7e:	9901      	ldr	r1, [sp, #4]
 8006d80:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006d84:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006d88:	4259      	negs	r1, r3
 8006d8a:	4159      	adcs	r1, r3
 8006d8c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006d90:	e7eb      	b.n	8006d6a <__swhatbuf_r+0x24>

08006d92 <__smakebuf_r>:
 8006d92:	898b      	ldrh	r3, [r1, #12]
 8006d94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006d96:	079d      	lsls	r5, r3, #30
 8006d98:	4606      	mov	r6, r0
 8006d9a:	460c      	mov	r4, r1
 8006d9c:	d507      	bpl.n	8006dae <__smakebuf_r+0x1c>
 8006d9e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006da2:	6023      	str	r3, [r4, #0]
 8006da4:	6123      	str	r3, [r4, #16]
 8006da6:	2301      	movs	r3, #1
 8006da8:	6163      	str	r3, [r4, #20]
 8006daa:	b003      	add	sp, #12
 8006dac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006dae:	ab01      	add	r3, sp, #4
 8006db0:	466a      	mov	r2, sp
 8006db2:	f7ff ffc8 	bl	8006d46 <__swhatbuf_r>
 8006db6:	9f00      	ldr	r7, [sp, #0]
 8006db8:	4605      	mov	r5, r0
 8006dba:	4639      	mov	r1, r7
 8006dbc:	4630      	mov	r0, r6
 8006dbe:	f7ff fba9 	bl	8006514 <_malloc_r>
 8006dc2:	b948      	cbnz	r0, 8006dd8 <__smakebuf_r+0x46>
 8006dc4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006dc8:	059a      	lsls	r2, r3, #22
 8006dca:	d4ee      	bmi.n	8006daa <__smakebuf_r+0x18>
 8006dcc:	f023 0303 	bic.w	r3, r3, #3
 8006dd0:	f043 0302 	orr.w	r3, r3, #2
 8006dd4:	81a3      	strh	r3, [r4, #12]
 8006dd6:	e7e2      	b.n	8006d9e <__smakebuf_r+0xc>
 8006dd8:	89a3      	ldrh	r3, [r4, #12]
 8006dda:	6020      	str	r0, [r4, #0]
 8006ddc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006de0:	81a3      	strh	r3, [r4, #12]
 8006de2:	9b01      	ldr	r3, [sp, #4]
 8006de4:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006de8:	b15b      	cbz	r3, 8006e02 <__smakebuf_r+0x70>
 8006dea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006dee:	4630      	mov	r0, r6
 8006df0:	f000 f84e 	bl	8006e90 <_isatty_r>
 8006df4:	b128      	cbz	r0, 8006e02 <__smakebuf_r+0x70>
 8006df6:	89a3      	ldrh	r3, [r4, #12]
 8006df8:	f023 0303 	bic.w	r3, r3, #3
 8006dfc:	f043 0301 	orr.w	r3, r3, #1
 8006e00:	81a3      	strh	r3, [r4, #12]
 8006e02:	89a3      	ldrh	r3, [r4, #12]
 8006e04:	431d      	orrs	r5, r3
 8006e06:	81a5      	strh	r5, [r4, #12]
 8006e08:	e7cf      	b.n	8006daa <__smakebuf_r+0x18>

08006e0a <_raise_r>:
 8006e0a:	291f      	cmp	r1, #31
 8006e0c:	b538      	push	{r3, r4, r5, lr}
 8006e0e:	4605      	mov	r5, r0
 8006e10:	460c      	mov	r4, r1
 8006e12:	d904      	bls.n	8006e1e <_raise_r+0x14>
 8006e14:	2316      	movs	r3, #22
 8006e16:	6003      	str	r3, [r0, #0]
 8006e18:	f04f 30ff 	mov.w	r0, #4294967295
 8006e1c:	bd38      	pop	{r3, r4, r5, pc}
 8006e1e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8006e20:	b112      	cbz	r2, 8006e28 <_raise_r+0x1e>
 8006e22:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006e26:	b94b      	cbnz	r3, 8006e3c <_raise_r+0x32>
 8006e28:	4628      	mov	r0, r5
 8006e2a:	f000 f853 	bl	8006ed4 <_getpid_r>
 8006e2e:	4622      	mov	r2, r4
 8006e30:	4601      	mov	r1, r0
 8006e32:	4628      	mov	r0, r5
 8006e34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006e38:	f000 b83a 	b.w	8006eb0 <_kill_r>
 8006e3c:	2b01      	cmp	r3, #1
 8006e3e:	d00a      	beq.n	8006e56 <_raise_r+0x4c>
 8006e40:	1c59      	adds	r1, r3, #1
 8006e42:	d103      	bne.n	8006e4c <_raise_r+0x42>
 8006e44:	2316      	movs	r3, #22
 8006e46:	6003      	str	r3, [r0, #0]
 8006e48:	2001      	movs	r0, #1
 8006e4a:	e7e7      	b.n	8006e1c <_raise_r+0x12>
 8006e4c:	2100      	movs	r1, #0
 8006e4e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8006e52:	4620      	mov	r0, r4
 8006e54:	4798      	blx	r3
 8006e56:	2000      	movs	r0, #0
 8006e58:	e7e0      	b.n	8006e1c <_raise_r+0x12>
	...

08006e5c <raise>:
 8006e5c:	4b02      	ldr	r3, [pc, #8]	@ (8006e68 <raise+0xc>)
 8006e5e:	4601      	mov	r1, r0
 8006e60:	6818      	ldr	r0, [r3, #0]
 8006e62:	f7ff bfd2 	b.w	8006e0a <_raise_r>
 8006e66:	bf00      	nop
 8006e68:	2000001c 	.word	0x2000001c

08006e6c <_fstat_r>:
 8006e6c:	b538      	push	{r3, r4, r5, lr}
 8006e6e:	4d07      	ldr	r5, [pc, #28]	@ (8006e8c <_fstat_r+0x20>)
 8006e70:	2300      	movs	r3, #0
 8006e72:	4604      	mov	r4, r0
 8006e74:	4608      	mov	r0, r1
 8006e76:	4611      	mov	r1, r2
 8006e78:	602b      	str	r3, [r5, #0]
 8006e7a:	f7fa f8f9 	bl	8001070 <_fstat>
 8006e7e:	1c43      	adds	r3, r0, #1
 8006e80:	d102      	bne.n	8006e88 <_fstat_r+0x1c>
 8006e82:	682b      	ldr	r3, [r5, #0]
 8006e84:	b103      	cbz	r3, 8006e88 <_fstat_r+0x1c>
 8006e86:	6023      	str	r3, [r4, #0]
 8006e88:	bd38      	pop	{r3, r4, r5, pc}
 8006e8a:	bf00      	nop
 8006e8c:	200046f0 	.word	0x200046f0

08006e90 <_isatty_r>:
 8006e90:	b538      	push	{r3, r4, r5, lr}
 8006e92:	4d06      	ldr	r5, [pc, #24]	@ (8006eac <_isatty_r+0x1c>)
 8006e94:	2300      	movs	r3, #0
 8006e96:	4604      	mov	r4, r0
 8006e98:	4608      	mov	r0, r1
 8006e9a:	602b      	str	r3, [r5, #0]
 8006e9c:	f7fa f8f8 	bl	8001090 <_isatty>
 8006ea0:	1c43      	adds	r3, r0, #1
 8006ea2:	d102      	bne.n	8006eaa <_isatty_r+0x1a>
 8006ea4:	682b      	ldr	r3, [r5, #0]
 8006ea6:	b103      	cbz	r3, 8006eaa <_isatty_r+0x1a>
 8006ea8:	6023      	str	r3, [r4, #0]
 8006eaa:	bd38      	pop	{r3, r4, r5, pc}
 8006eac:	200046f0 	.word	0x200046f0

08006eb0 <_kill_r>:
 8006eb0:	b538      	push	{r3, r4, r5, lr}
 8006eb2:	4d07      	ldr	r5, [pc, #28]	@ (8006ed0 <_kill_r+0x20>)
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	4604      	mov	r4, r0
 8006eb8:	4608      	mov	r0, r1
 8006eba:	4611      	mov	r1, r2
 8006ebc:	602b      	str	r3, [r5, #0]
 8006ebe:	f7fa f877 	bl	8000fb0 <_kill>
 8006ec2:	1c43      	adds	r3, r0, #1
 8006ec4:	d102      	bne.n	8006ecc <_kill_r+0x1c>
 8006ec6:	682b      	ldr	r3, [r5, #0]
 8006ec8:	b103      	cbz	r3, 8006ecc <_kill_r+0x1c>
 8006eca:	6023      	str	r3, [r4, #0]
 8006ecc:	bd38      	pop	{r3, r4, r5, pc}
 8006ece:	bf00      	nop
 8006ed0:	200046f0 	.word	0x200046f0

08006ed4 <_getpid_r>:
 8006ed4:	f7fa b864 	b.w	8000fa0 <_getpid>

08006ed8 <_init>:
 8006ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006eda:	bf00      	nop
 8006edc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ede:	bc08      	pop	{r3}
 8006ee0:	469e      	mov	lr, r3
 8006ee2:	4770      	bx	lr

08006ee4 <_fini>:
 8006ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ee6:	bf00      	nop
 8006ee8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006eea:	bc08      	pop	{r3}
 8006eec:	469e      	mov	lr, r3
 8006eee:	4770      	bx	lr
