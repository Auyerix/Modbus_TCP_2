
LWIP_TCP_SERVER_CLIENT_NETCONN5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000173c8  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003a28  08017578  08017578  00018578  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801afa0  0801afa0  0001c18c  2**0
                  CONTENTS
  4 .ARM          00000008  0801afa0  0801afa0  0001bfa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801afa8  0801afa8  0001c18c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801afa8  0801afa8  0001bfa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801afac  0801afac  0001bfac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000018c  20000000  0801afb0  0001c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0001c18c  2**0
                  CONTENTS
 10 .bss          0000ec64  2000018c  2000018c  0001c18c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  2000edf0  2000edf0  0001c18c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0001c18c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00031d36  00000000  00000000  0001c1bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00007f31  00000000  00000000  0004def2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000023c0  00000000  00000000  00055e28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001c4c  00000000  00000000  000581e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00036519  00000000  00000000  00059e34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003a214  00000000  00000000  0009034d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00100dd0  00000000  00000000  000ca561  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001cb331  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00009c7c  00000000  00000000  001cb374  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007b  00000000  00000000  001d4ff0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000018c 	.word	0x2000018c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08017560 	.word	0x08017560

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000190 	.word	0x20000190
 80001ec:	08017560 	.word	0x08017560

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96a 	b.w	800058c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	460c      	mov	r4, r1
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d14e      	bne.n	800037a <__udivmoddi4+0xaa>
 80002dc:	4694      	mov	ip, r2
 80002de:	458c      	cmp	ip, r1
 80002e0:	4686      	mov	lr, r0
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	d962      	bls.n	80003ae <__udivmoddi4+0xde>
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0320 	rsb	r3, r2, #32
 80002ee:	4091      	lsls	r1, r2
 80002f0:	fa20 f303 	lsr.w	r3, r0, r3
 80002f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002f8:	4319      	orrs	r1, r3
 80002fa:	fa00 fe02 	lsl.w	lr, r0, r2
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f f68c 	uxth.w	r6, ip
 8000306:	fbb1 f4f7 	udiv	r4, r1, r7
 800030a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030e:	fb07 1114 	mls	r1, r7, r4, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb04 f106 	mul.w	r1, r4, r6
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f104 30ff 	add.w	r0, r4, #4294967295
 8000326:	f080 8112 	bcs.w	800054e <__udivmoddi4+0x27e>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 810f 	bls.w	800054e <__udivmoddi4+0x27e>
 8000330:	3c02      	subs	r4, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	fa1f f38e 	uxth.w	r3, lr
 800033a:	fbb1 f0f7 	udiv	r0, r1, r7
 800033e:	fb07 1110 	mls	r1, r7, r0, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb00 f606 	mul.w	r6, r0, r6
 800034a:	429e      	cmp	r6, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x94>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f100 31ff 	add.w	r1, r0, #4294967295
 8000356:	f080 80fc 	bcs.w	8000552 <__udivmoddi4+0x282>
 800035a:	429e      	cmp	r6, r3
 800035c:	f240 80f9 	bls.w	8000552 <__udivmoddi4+0x282>
 8000360:	4463      	add	r3, ip
 8000362:	3802      	subs	r0, #2
 8000364:	1b9b      	subs	r3, r3, r6
 8000366:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800036a:	2100      	movs	r1, #0
 800036c:	b11d      	cbz	r5, 8000376 <__udivmoddi4+0xa6>
 800036e:	40d3      	lsrs	r3, r2
 8000370:	2200      	movs	r2, #0
 8000372:	e9c5 3200 	strd	r3, r2, [r5]
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d905      	bls.n	800038a <__udivmoddi4+0xba>
 800037e:	b10d      	cbz	r5, 8000384 <__udivmoddi4+0xb4>
 8000380:	e9c5 0100 	strd	r0, r1, [r5]
 8000384:	2100      	movs	r1, #0
 8000386:	4608      	mov	r0, r1
 8000388:	e7f5      	b.n	8000376 <__udivmoddi4+0xa6>
 800038a:	fab3 f183 	clz	r1, r3
 800038e:	2900      	cmp	r1, #0
 8000390:	d146      	bne.n	8000420 <__udivmoddi4+0x150>
 8000392:	42a3      	cmp	r3, r4
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xcc>
 8000396:	4290      	cmp	r0, r2
 8000398:	f0c0 80f0 	bcc.w	800057c <__udivmoddi4+0x2ac>
 800039c:	1a86      	subs	r6, r0, r2
 800039e:	eb64 0303 	sbc.w	r3, r4, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	2d00      	cmp	r5, #0
 80003a6:	d0e6      	beq.n	8000376 <__udivmoddi4+0xa6>
 80003a8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ac:	e7e3      	b.n	8000376 <__udivmoddi4+0xa6>
 80003ae:	2a00      	cmp	r2, #0
 80003b0:	f040 8090 	bne.w	80004d4 <__udivmoddi4+0x204>
 80003b4:	eba1 040c 	sub.w	r4, r1, ip
 80003b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003bc:	fa1f f78c 	uxth.w	r7, ip
 80003c0:	2101      	movs	r1, #1
 80003c2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003c6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ca:	fb08 4416 	mls	r4, r8, r6, r4
 80003ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003d2:	fb07 f006 	mul.w	r0, r7, r6
 80003d6:	4298      	cmp	r0, r3
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x11c>
 80003da:	eb1c 0303 	adds.w	r3, ip, r3
 80003de:	f106 34ff 	add.w	r4, r6, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x11a>
 80003e4:	4298      	cmp	r0, r3
 80003e6:	f200 80cd 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003ea:	4626      	mov	r6, r4
 80003ec:	1a1c      	subs	r4, r3, r0
 80003ee:	fa1f f38e 	uxth.w	r3, lr
 80003f2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003f6:	fb08 4410 	mls	r4, r8, r0, r4
 80003fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003fe:	fb00 f707 	mul.w	r7, r0, r7
 8000402:	429f      	cmp	r7, r3
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x148>
 8000406:	eb1c 0303 	adds.w	r3, ip, r3
 800040a:	f100 34ff 	add.w	r4, r0, #4294967295
 800040e:	d202      	bcs.n	8000416 <__udivmoddi4+0x146>
 8000410:	429f      	cmp	r7, r3
 8000412:	f200 80b0 	bhi.w	8000576 <__udivmoddi4+0x2a6>
 8000416:	4620      	mov	r0, r4
 8000418:	1bdb      	subs	r3, r3, r7
 800041a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800041e:	e7a5      	b.n	800036c <__udivmoddi4+0x9c>
 8000420:	f1c1 0620 	rsb	r6, r1, #32
 8000424:	408b      	lsls	r3, r1
 8000426:	fa22 f706 	lsr.w	r7, r2, r6
 800042a:	431f      	orrs	r7, r3
 800042c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000430:	fa04 f301 	lsl.w	r3, r4, r1
 8000434:	ea43 030c 	orr.w	r3, r3, ip
 8000438:	40f4      	lsrs	r4, r6
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	0c38      	lsrs	r0, r7, #16
 8000440:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000444:	fbb4 fef0 	udiv	lr, r4, r0
 8000448:	fa1f fc87 	uxth.w	ip, r7
 800044c:	fb00 441e 	mls	r4, r0, lr, r4
 8000450:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000454:	fb0e f90c 	mul.w	r9, lr, ip
 8000458:	45a1      	cmp	r9, r4
 800045a:	fa02 f201 	lsl.w	r2, r2, r1
 800045e:	d90a      	bls.n	8000476 <__udivmoddi4+0x1a6>
 8000460:	193c      	adds	r4, r7, r4
 8000462:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000466:	f080 8084 	bcs.w	8000572 <__udivmoddi4+0x2a2>
 800046a:	45a1      	cmp	r9, r4
 800046c:	f240 8081 	bls.w	8000572 <__udivmoddi4+0x2a2>
 8000470:	f1ae 0e02 	sub.w	lr, lr, #2
 8000474:	443c      	add	r4, r7
 8000476:	eba4 0409 	sub.w	r4, r4, r9
 800047a:	fa1f f983 	uxth.w	r9, r3
 800047e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000482:	fb00 4413 	mls	r4, r0, r3, r4
 8000486:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048a:	fb03 fc0c 	mul.w	ip, r3, ip
 800048e:	45a4      	cmp	ip, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x1d2>
 8000492:	193c      	adds	r4, r7, r4
 8000494:	f103 30ff 	add.w	r0, r3, #4294967295
 8000498:	d267      	bcs.n	800056a <__udivmoddi4+0x29a>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d965      	bls.n	800056a <__udivmoddi4+0x29a>
 800049e:	3b02      	subs	r3, #2
 80004a0:	443c      	add	r4, r7
 80004a2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004a6:	fba0 9302 	umull	r9, r3, r0, r2
 80004aa:	eba4 040c 	sub.w	r4, r4, ip
 80004ae:	429c      	cmp	r4, r3
 80004b0:	46ce      	mov	lr, r9
 80004b2:	469c      	mov	ip, r3
 80004b4:	d351      	bcc.n	800055a <__udivmoddi4+0x28a>
 80004b6:	d04e      	beq.n	8000556 <__udivmoddi4+0x286>
 80004b8:	b155      	cbz	r5, 80004d0 <__udivmoddi4+0x200>
 80004ba:	ebb8 030e 	subs.w	r3, r8, lr
 80004be:	eb64 040c 	sbc.w	r4, r4, ip
 80004c2:	fa04 f606 	lsl.w	r6, r4, r6
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431e      	orrs	r6, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	e9c5 6400 	strd	r6, r4, [r5]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e750      	b.n	8000376 <__udivmoddi4+0xa6>
 80004d4:	f1c2 0320 	rsb	r3, r2, #32
 80004d8:	fa20 f103 	lsr.w	r1, r0, r3
 80004dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e0:	fa24 f303 	lsr.w	r3, r4, r3
 80004e4:	4094      	lsls	r4, r2
 80004e6:	430c      	orrs	r4, r1
 80004e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ec:	fa00 fe02 	lsl.w	lr, r0, r2
 80004f0:	fa1f f78c 	uxth.w	r7, ip
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3110 	mls	r1, r8, r0, r3
 80004fc:	0c23      	lsrs	r3, r4, #16
 80004fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000502:	fb00 f107 	mul.w	r1, r0, r7
 8000506:	4299      	cmp	r1, r3
 8000508:	d908      	bls.n	800051c <__udivmoddi4+0x24c>
 800050a:	eb1c 0303 	adds.w	r3, ip, r3
 800050e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000512:	d22c      	bcs.n	800056e <__udivmoddi4+0x29e>
 8000514:	4299      	cmp	r1, r3
 8000516:	d92a      	bls.n	800056e <__udivmoddi4+0x29e>
 8000518:	3802      	subs	r0, #2
 800051a:	4463      	add	r3, ip
 800051c:	1a5b      	subs	r3, r3, r1
 800051e:	b2a4      	uxth	r4, r4
 8000520:	fbb3 f1f8 	udiv	r1, r3, r8
 8000524:	fb08 3311 	mls	r3, r8, r1, r3
 8000528:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800052c:	fb01 f307 	mul.w	r3, r1, r7
 8000530:	42a3      	cmp	r3, r4
 8000532:	d908      	bls.n	8000546 <__udivmoddi4+0x276>
 8000534:	eb1c 0404 	adds.w	r4, ip, r4
 8000538:	f101 36ff 	add.w	r6, r1, #4294967295
 800053c:	d213      	bcs.n	8000566 <__udivmoddi4+0x296>
 800053e:	42a3      	cmp	r3, r4
 8000540:	d911      	bls.n	8000566 <__udivmoddi4+0x296>
 8000542:	3902      	subs	r1, #2
 8000544:	4464      	add	r4, ip
 8000546:	1ae4      	subs	r4, r4, r3
 8000548:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800054c:	e739      	b.n	80003c2 <__udivmoddi4+0xf2>
 800054e:	4604      	mov	r4, r0
 8000550:	e6f0      	b.n	8000334 <__udivmoddi4+0x64>
 8000552:	4608      	mov	r0, r1
 8000554:	e706      	b.n	8000364 <__udivmoddi4+0x94>
 8000556:	45c8      	cmp	r8, r9
 8000558:	d2ae      	bcs.n	80004b8 <__udivmoddi4+0x1e8>
 800055a:	ebb9 0e02 	subs.w	lr, r9, r2
 800055e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000562:	3801      	subs	r0, #1
 8000564:	e7a8      	b.n	80004b8 <__udivmoddi4+0x1e8>
 8000566:	4631      	mov	r1, r6
 8000568:	e7ed      	b.n	8000546 <__udivmoddi4+0x276>
 800056a:	4603      	mov	r3, r0
 800056c:	e799      	b.n	80004a2 <__udivmoddi4+0x1d2>
 800056e:	4630      	mov	r0, r6
 8000570:	e7d4      	b.n	800051c <__udivmoddi4+0x24c>
 8000572:	46d6      	mov	lr, sl
 8000574:	e77f      	b.n	8000476 <__udivmoddi4+0x1a6>
 8000576:	4463      	add	r3, ip
 8000578:	3802      	subs	r0, #2
 800057a:	e74d      	b.n	8000418 <__udivmoddi4+0x148>
 800057c:	4606      	mov	r6, r0
 800057e:	4623      	mov	r3, r4
 8000580:	4608      	mov	r0, r1
 8000582:	e70f      	b.n	80003a4 <__udivmoddi4+0xd4>
 8000584:	3e02      	subs	r6, #2
 8000586:	4463      	add	r3, ip
 8000588:	e730      	b.n	80003ec <__udivmoddi4+0x11c>
 800058a:	bf00      	nop

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <inputOutputControl>:
#include "main.h"
#include "cmsis_os.h"
#include "driverIO.h"


void inputOutputControl(void){
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0

	osMutexWait(coilMutexHandle, osWaitForever);
 8000594:	4b0b      	ldr	r3, [pc, #44]	@ (80005c4 <inputOutputControl+0x34>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	f04f 31ff 	mov.w	r1, #4294967295
 800059c:	4618      	mov	r0, r3
 800059e:	f005 fae7 	bl	8005b70 <osMutexWait>

	if(coil_status[0]==1) TurnOnRedLED();
 80005a2:	4b09      	ldr	r3, [pc, #36]	@ (80005c8 <inputOutputControl+0x38>)
 80005a4:	781b      	ldrb	r3, [r3, #0]
 80005a6:	2b01      	cmp	r3, #1
 80005a8:	d102      	bne.n	80005b0 <inputOutputControl+0x20>
 80005aa:	f000 f80f 	bl	80005cc <TurnOnRedLED>
 80005ae:	e001      	b.n	80005b4 <inputOutputControl+0x24>
	else TurnOffRedLED();
 80005b0:	f000 f818 	bl	80005e4 <TurnOffRedLED>

	osMutexRelease(coilMutexHandle);
 80005b4:	4b03      	ldr	r3, [pc, #12]	@ (80005c4 <inputOutputControl+0x34>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	4618      	mov	r0, r3
 80005ba:	f005 fb27 	bl	8005c0c <osMutexRelease>

}
 80005be:	bf00      	nop
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	bf00      	nop
 80005c4:	2000049c 	.word	0x2000049c
 80005c8:	20000000 	.word	0x20000000

080005cc <TurnOnRedLED>:

void TurnOnRedLED(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET); // Encender el LED rojo
 80005d0:	2201      	movs	r2, #1
 80005d2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80005d6:	4802      	ldr	r0, [pc, #8]	@ (80005e0 <TurnOnRedLED+0x14>)
 80005d8:	f003 f860 	bl	800369c <HAL_GPIO_WritePin>
}
 80005dc:	bf00      	nop
 80005de:	bd80      	pop	{r7, pc}
 80005e0:	40020400 	.word	0x40020400

080005e4 <TurnOffRedLED>:

void TurnOffRedLED(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET); // apagar el LED rojo
 80005e8:	2200      	movs	r2, #0
 80005ea:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80005ee:	4802      	ldr	r0, [pc, #8]	@ (80005f8 <TurnOffRedLED+0x14>)
 80005f0:	f003 f854 	bl	800369c <HAL_GPIO_WritePin>
}
 80005f4:	bf00      	nop
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	40020400 	.word	0x40020400

080005fc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005fc:	b480      	push	{r7}
 80005fe:	b085      	sub	sp, #20
 8000600:	af00      	add	r7, sp, #0
 8000602:	60f8      	str	r0, [r7, #12]
 8000604:	60b9      	str	r1, [r7, #8]
 8000606:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000608:	68fb      	ldr	r3, [r7, #12]
 800060a:	4a07      	ldr	r2, [pc, #28]	@ (8000628 <vApplicationGetIdleTaskMemory+0x2c>)
 800060c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800060e:	68bb      	ldr	r3, [r7, #8]
 8000610:	4a06      	ldr	r2, [pc, #24]	@ (800062c <vApplicationGetIdleTaskMemory+0x30>)
 8000612:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	2280      	movs	r2, #128	@ 0x80
 8000618:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800061a:	bf00      	nop
 800061c:	3714      	adds	r7, #20
 800061e:	46bd      	mov	sp, r7
 8000620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000624:	4770      	bx	lr
 8000626:	bf00      	nop
 8000628:	200001a8 	.word	0x200001a8
 800062c:	20000248 	.word	0x20000248

08000630 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000630:	b5b0      	push	{r4, r5, r7, lr}
 8000632:	b092      	sub	sp, #72	@ 0x48
 8000634:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */

	// Configuramos algunos estados de coils para el ejemplo
    coil_status[0] = 1;
 8000636:	4b39      	ldr	r3, [pc, #228]	@ (800071c <main+0xec>)
 8000638:	2201      	movs	r2, #1
 800063a:	701a      	strb	r2, [r3, #0]
    coil_status[1] = 0;
 800063c:	4b37      	ldr	r3, [pc, #220]	@ (800071c <main+0xec>)
 800063e:	2200      	movs	r2, #0
 8000640:	705a      	strb	r2, [r3, #1]
    coil_status[2] = 0;
 8000642:	4b36      	ldr	r3, [pc, #216]	@ (800071c <main+0xec>)
 8000644:	2200      	movs	r2, #0
 8000646:	709a      	strb	r2, [r3, #2]
    coil_status[3] = 1;
 8000648:	4b34      	ldr	r3, [pc, #208]	@ (800071c <main+0xec>)
 800064a:	2201      	movs	r2, #1
 800064c:	70da      	strb	r2, [r3, #3]
    coil_status[4] = 0;
 800064e:	4b33      	ldr	r3, [pc, #204]	@ (800071c <main+0xec>)
 8000650:	2200      	movs	r2, #0
 8000652:	711a      	strb	r2, [r3, #4]
    coil_status[5] = 0;
 8000654:	4b31      	ldr	r3, [pc, #196]	@ (800071c <main+0xec>)
 8000656:	2200      	movs	r2, #0
 8000658:	715a      	strb	r2, [r3, #5]
    coil_status[6] = 0;
 800065a:	4b30      	ldr	r3, [pc, #192]	@ (800071c <main+0xec>)
 800065c:	2200      	movs	r2, #0
 800065e:	719a      	strb	r2, [r3, #6]
    coil_status[7] = 1;
 8000660:	4b2e      	ldr	r3, [pc, #184]	@ (800071c <main+0xec>)
 8000662:	2201      	movs	r2, #1
 8000664:	71da      	strb	r2, [r3, #7]

    coil_status[8] = 1;
 8000666:	4b2d      	ldr	r3, [pc, #180]	@ (800071c <main+0xec>)
 8000668:	2201      	movs	r2, #1
 800066a:	721a      	strb	r2, [r3, #8]
    coil_status[15] = 1;
 800066c:	4b2b      	ldr	r3, [pc, #172]	@ (800071c <main+0xec>)
 800066e:	2201      	movs	r2, #1
 8000670:	73da      	strb	r2, [r3, #15]

    coil_status[16] = 0;
 8000672:	4b2a      	ldr	r3, [pc, #168]	@ (800071c <main+0xec>)
 8000674:	2200      	movs	r2, #0
 8000676:	741a      	strb	r2, [r3, #16]
    coil_status[23] = 1;
 8000678:	4b28      	ldr	r3, [pc, #160]	@ (800071c <main+0xec>)
 800067a:	2201      	movs	r2, #1
 800067c:	75da      	strb	r2, [r3, #23]

    coil_status[24] = 1;
 800067e:	4b27      	ldr	r3, [pc, #156]	@ (800071c <main+0xec>)
 8000680:	2201      	movs	r2, #1
 8000682:	761a      	strb	r2, [r3, #24]
    coil_status[31] = 1;
 8000684:	4b25      	ldr	r3, [pc, #148]	@ (800071c <main+0xec>)
 8000686:	2201      	movs	r2, #1
 8000688:	77da      	strb	r2, [r3, #31]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800068a:	f001 fab7 	bl	8001bfc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800068e:	f000 f853 	bl	8000738 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000692:	f000 f8e5 	bl	8000860 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000696:	f000 f8b9 	bl	800080c <MX_USART3_UART_Init>

  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of uartMutex */
  osMutexDef(uartMutex);
 800069a:	2300      	movs	r3, #0
 800069c:	643b      	str	r3, [r7, #64]	@ 0x40
 800069e:	2300      	movs	r3, #0
 80006a0:	647b      	str	r3, [r7, #68]	@ 0x44
  uartMutexHandle = osMutexCreate(osMutex(uartMutex));
 80006a2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80006a6:	4618      	mov	r0, r3
 80006a8:	f005 fa4a 	bl	8005b40 <osMutexCreate>
 80006ac:	4603      	mov	r3, r0
 80006ae:	4a1c      	ldr	r2, [pc, #112]	@ (8000720 <main+0xf0>)
 80006b0:	6013      	str	r3, [r2, #0]

  /* definition and creation of coilMutex */
  osMutexDef(coilMutex);
 80006b2:	2300      	movs	r3, #0
 80006b4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80006b6:	2300      	movs	r3, #0
 80006b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  coilMutexHandle = osMutexCreate(osMutex(coilMutex));
 80006ba:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80006be:	4618      	mov	r0, r3
 80006c0:	f005 fa3e 	bl	8005b40 <osMutexCreate>
 80006c4:	4603      	mov	r3, r0
 80006c6:	4a17      	ldr	r2, [pc, #92]	@ (8000724 <main+0xf4>)
 80006c8:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 512);
 80006ca:	4b17      	ldr	r3, [pc, #92]	@ (8000728 <main+0xf8>)
 80006cc:	f107 041c 	add.w	r4, r7, #28
 80006d0:	461d      	mov	r5, r3
 80006d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006d6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006da:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80006de:	f107 031c 	add.w	r3, r7, #28
 80006e2:	2100      	movs	r1, #0
 80006e4:	4618      	mov	r0, r3
 80006e6:	f005 f9cb 	bl	8005a80 <osThreadCreate>
 80006ea:	4603      	mov	r3, r0
 80006ec:	4a0f      	ldr	r2, [pc, #60]	@ (800072c <main+0xfc>)
 80006ee:	6013      	str	r3, [r2, #0]

  /* definition and creation of DriverTask */
  osThreadDef(DriverTask, StartDriverTask, osPriorityNormal, 0, 128);
 80006f0:	4b0f      	ldr	r3, [pc, #60]	@ (8000730 <main+0x100>)
 80006f2:	463c      	mov	r4, r7
 80006f4:	461d      	mov	r5, r3
 80006f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006fa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006fe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  DriverTaskHandle = osThreadCreate(osThread(DriverTask), NULL);
 8000702:	463b      	mov	r3, r7
 8000704:	2100      	movs	r1, #0
 8000706:	4618      	mov	r0, r3
 8000708:	f005 f9ba 	bl	8005a80 <osThreadCreate>
 800070c:	4603      	mov	r3, r0
 800070e:	4a09      	ldr	r2, [pc, #36]	@ (8000734 <main+0x104>)
 8000710:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000712:	f005 f99e 	bl	8005a52 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000716:	bf00      	nop
 8000718:	e7fd      	b.n	8000716 <main+0xe6>
 800071a:	bf00      	nop
 800071c:	20000000 	.word	0x20000000
 8000720:	20000498 	.word	0x20000498
 8000724:	2000049c 	.word	0x2000049c
 8000728:	08017584 	.word	0x08017584
 800072c:	20000490 	.word	0x20000490
 8000730:	080175ac 	.word	0x080175ac
 8000734:	20000494 	.word	0x20000494

08000738 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b094      	sub	sp, #80	@ 0x50
 800073c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800073e:	f107 0320 	add.w	r3, r7, #32
 8000742:	2230      	movs	r2, #48	@ 0x30
 8000744:	2100      	movs	r1, #0
 8000746:	4618      	mov	r0, r3
 8000748:	f015 fe81 	bl	801644e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800074c:	f107 030c 	add.w	r3, r7, #12
 8000750:	2200      	movs	r2, #0
 8000752:	601a      	str	r2, [r3, #0]
 8000754:	605a      	str	r2, [r3, #4]
 8000756:	609a      	str	r2, [r3, #8]
 8000758:	60da      	str	r2, [r3, #12]
 800075a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800075c:	2300      	movs	r3, #0
 800075e:	60bb      	str	r3, [r7, #8]
 8000760:	4b28      	ldr	r3, [pc, #160]	@ (8000804 <SystemClock_Config+0xcc>)
 8000762:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000764:	4a27      	ldr	r2, [pc, #156]	@ (8000804 <SystemClock_Config+0xcc>)
 8000766:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800076a:	6413      	str	r3, [r2, #64]	@ 0x40
 800076c:	4b25      	ldr	r3, [pc, #148]	@ (8000804 <SystemClock_Config+0xcc>)
 800076e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000770:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000774:	60bb      	str	r3, [r7, #8]
 8000776:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000778:	2300      	movs	r3, #0
 800077a:	607b      	str	r3, [r7, #4]
 800077c:	4b22      	ldr	r3, [pc, #136]	@ (8000808 <SystemClock_Config+0xd0>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	4a21      	ldr	r2, [pc, #132]	@ (8000808 <SystemClock_Config+0xd0>)
 8000782:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000786:	6013      	str	r3, [r2, #0]
 8000788:	4b1f      	ldr	r3, [pc, #124]	@ (8000808 <SystemClock_Config+0xd0>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000790:	607b      	str	r3, [r7, #4]
 8000792:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000794:	2301      	movs	r3, #1
 8000796:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000798:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800079c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800079e:	2302      	movs	r3, #2
 80007a0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007a2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80007a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80007a8:	2304      	movs	r3, #4
 80007aa:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80007ac:	23a8      	movs	r3, #168	@ 0xa8
 80007ae:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007b0:	2302      	movs	r3, #2
 80007b2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80007b4:	2307      	movs	r3, #7
 80007b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007b8:	f107 0320 	add.w	r3, r7, #32
 80007bc:	4618      	mov	r0, r3
 80007be:	f002 ff87 	bl	80036d0 <HAL_RCC_OscConfig>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80007c8:	f000 f98c 	bl	8000ae4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007cc:	230f      	movs	r3, #15
 80007ce:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007d0:	2302      	movs	r3, #2
 80007d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007d4:	2300      	movs	r3, #0
 80007d6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007d8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80007dc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007de:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007e2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80007e4:	f107 030c 	add.w	r3, r7, #12
 80007e8:	2105      	movs	r1, #5
 80007ea:	4618      	mov	r0, r3
 80007ec:	f003 f9e8 	bl	8003bc0 <HAL_RCC_ClockConfig>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80007f6:	f000 f975 	bl	8000ae4 <Error_Handler>
  }
}
 80007fa:	bf00      	nop
 80007fc:	3750      	adds	r7, #80	@ 0x50
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	40023800 	.word	0x40023800
 8000808:	40007000 	.word	0x40007000

0800080c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000810:	4b11      	ldr	r3, [pc, #68]	@ (8000858 <MX_USART3_UART_Init+0x4c>)
 8000812:	4a12      	ldr	r2, [pc, #72]	@ (800085c <MX_USART3_UART_Init+0x50>)
 8000814:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000816:	4b10      	ldr	r3, [pc, #64]	@ (8000858 <MX_USART3_UART_Init+0x4c>)
 8000818:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800081c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800081e:	4b0e      	ldr	r3, [pc, #56]	@ (8000858 <MX_USART3_UART_Init+0x4c>)
 8000820:	2200      	movs	r2, #0
 8000822:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000824:	4b0c      	ldr	r3, [pc, #48]	@ (8000858 <MX_USART3_UART_Init+0x4c>)
 8000826:	2200      	movs	r2, #0
 8000828:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800082a:	4b0b      	ldr	r3, [pc, #44]	@ (8000858 <MX_USART3_UART_Init+0x4c>)
 800082c:	2200      	movs	r2, #0
 800082e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000830:	4b09      	ldr	r3, [pc, #36]	@ (8000858 <MX_USART3_UART_Init+0x4c>)
 8000832:	220c      	movs	r2, #12
 8000834:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000836:	4b08      	ldr	r3, [pc, #32]	@ (8000858 <MX_USART3_UART_Init+0x4c>)
 8000838:	2200      	movs	r2, #0
 800083a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800083c:	4b06      	ldr	r3, [pc, #24]	@ (8000858 <MX_USART3_UART_Init+0x4c>)
 800083e:	2200      	movs	r2, #0
 8000840:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000842:	4805      	ldr	r0, [pc, #20]	@ (8000858 <MX_USART3_UART_Init+0x4c>)
 8000844:	f003 feb0 	bl	80045a8 <HAL_UART_Init>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800084e:	f000 f949 	bl	8000ae4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000852:	bf00      	nop
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	20000448 	.word	0x20000448
 800085c:	40004800 	.word	0x40004800

08000860 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b08c      	sub	sp, #48	@ 0x30
 8000864:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000866:	f107 031c 	add.w	r3, r7, #28
 800086a:	2200      	movs	r2, #0
 800086c:	601a      	str	r2, [r3, #0]
 800086e:	605a      	str	r2, [r3, #4]
 8000870:	609a      	str	r2, [r3, #8]
 8000872:	60da      	str	r2, [r3, #12]
 8000874:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000876:	2300      	movs	r3, #0
 8000878:	61bb      	str	r3, [r7, #24]
 800087a:	4b5b      	ldr	r3, [pc, #364]	@ (80009e8 <MX_GPIO_Init+0x188>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800087e:	4a5a      	ldr	r2, [pc, #360]	@ (80009e8 <MX_GPIO_Init+0x188>)
 8000880:	f043 0304 	orr.w	r3, r3, #4
 8000884:	6313      	str	r3, [r2, #48]	@ 0x30
 8000886:	4b58      	ldr	r3, [pc, #352]	@ (80009e8 <MX_GPIO_Init+0x188>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088a:	f003 0304 	and.w	r3, r3, #4
 800088e:	61bb      	str	r3, [r7, #24]
 8000890:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000892:	2300      	movs	r3, #0
 8000894:	617b      	str	r3, [r7, #20]
 8000896:	4b54      	ldr	r3, [pc, #336]	@ (80009e8 <MX_GPIO_Init+0x188>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800089a:	4a53      	ldr	r2, [pc, #332]	@ (80009e8 <MX_GPIO_Init+0x188>)
 800089c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008a2:	4b51      	ldr	r3, [pc, #324]	@ (80009e8 <MX_GPIO_Init+0x188>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008aa:	617b      	str	r3, [r7, #20]
 80008ac:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ae:	2300      	movs	r3, #0
 80008b0:	613b      	str	r3, [r7, #16]
 80008b2:	4b4d      	ldr	r3, [pc, #308]	@ (80009e8 <MX_GPIO_Init+0x188>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008b6:	4a4c      	ldr	r2, [pc, #304]	@ (80009e8 <MX_GPIO_Init+0x188>)
 80008b8:	f043 0301 	orr.w	r3, r3, #1
 80008bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80008be:	4b4a      	ldr	r3, [pc, #296]	@ (80009e8 <MX_GPIO_Init+0x188>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008c2:	f003 0301 	and.w	r3, r3, #1
 80008c6:	613b      	str	r3, [r7, #16]
 80008c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ca:	2300      	movs	r3, #0
 80008cc:	60fb      	str	r3, [r7, #12]
 80008ce:	4b46      	ldr	r3, [pc, #280]	@ (80009e8 <MX_GPIO_Init+0x188>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008d2:	4a45      	ldr	r2, [pc, #276]	@ (80009e8 <MX_GPIO_Init+0x188>)
 80008d4:	f043 0302 	orr.w	r3, r3, #2
 80008d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008da:	4b43      	ldr	r3, [pc, #268]	@ (80009e8 <MX_GPIO_Init+0x188>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008de:	f003 0302 	and.w	r3, r3, #2
 80008e2:	60fb      	str	r3, [r7, #12]
 80008e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008e6:	2300      	movs	r3, #0
 80008e8:	60bb      	str	r3, [r7, #8]
 80008ea:	4b3f      	ldr	r3, [pc, #252]	@ (80009e8 <MX_GPIO_Init+0x188>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ee:	4a3e      	ldr	r2, [pc, #248]	@ (80009e8 <MX_GPIO_Init+0x188>)
 80008f0:	f043 0308 	orr.w	r3, r3, #8
 80008f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008f6:	4b3c      	ldr	r3, [pc, #240]	@ (80009e8 <MX_GPIO_Init+0x188>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008fa:	f003 0308 	and.w	r3, r3, #8
 80008fe:	60bb      	str	r3, [r7, #8]
 8000900:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000902:	2300      	movs	r3, #0
 8000904:	607b      	str	r3, [r7, #4]
 8000906:	4b38      	ldr	r3, [pc, #224]	@ (80009e8 <MX_GPIO_Init+0x188>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800090a:	4a37      	ldr	r2, [pc, #220]	@ (80009e8 <MX_GPIO_Init+0x188>)
 800090c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000910:	6313      	str	r3, [r2, #48]	@ 0x30
 8000912:	4b35      	ldr	r3, [pc, #212]	@ (80009e8 <MX_GPIO_Init+0x188>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000916:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800091a:	607b      	str	r3, [r7, #4]
 800091c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800091e:	2200      	movs	r2, #0
 8000920:	f44f 4181 	mov.w	r1, #16512	@ 0x4080
 8000924:	4831      	ldr	r0, [pc, #196]	@ (80009ec <MX_GPIO_Init+0x18c>)
 8000926:	f002 feb9 	bl	800369c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800092a:	2200      	movs	r2, #0
 800092c:	2140      	movs	r1, #64	@ 0x40
 800092e:	4830      	ldr	r0, [pc, #192]	@ (80009f0 <MX_GPIO_Init+0x190>)
 8000930:	f002 feb4 	bl	800369c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000934:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000938:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800093a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800093e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000940:	2300      	movs	r3, #0
 8000942:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000944:	f107 031c 	add.w	r3, r7, #28
 8000948:	4619      	mov	r1, r3
 800094a:	482a      	ldr	r0, [pc, #168]	@ (80009f4 <MX_GPIO_Init+0x194>)
 800094c:	f002 fcfa 	bl	8003344 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8000950:	f44f 4381 	mov.w	r3, #16512	@ 0x4080
 8000954:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000956:	2301      	movs	r3, #1
 8000958:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095a:	2300      	movs	r3, #0
 800095c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800095e:	2300      	movs	r3, #0
 8000960:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000962:	f107 031c 	add.w	r3, r7, #28
 8000966:	4619      	mov	r1, r3
 8000968:	4820      	ldr	r0, [pc, #128]	@ (80009ec <MX_GPIO_Init+0x18c>)
 800096a:	f002 fceb 	bl	8003344 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800096e:	2340      	movs	r3, #64	@ 0x40
 8000970:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000972:	2301      	movs	r3, #1
 8000974:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000976:	2300      	movs	r3, #0
 8000978:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800097a:	2300      	movs	r3, #0
 800097c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800097e:	f107 031c 	add.w	r3, r7, #28
 8000982:	4619      	mov	r1, r3
 8000984:	481a      	ldr	r0, [pc, #104]	@ (80009f0 <MX_GPIO_Init+0x190>)
 8000986:	f002 fcdd 	bl	8003344 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800098a:	2380      	movs	r3, #128	@ 0x80
 800098c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800098e:	2300      	movs	r3, #0
 8000990:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000992:	2300      	movs	r3, #0
 8000994:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000996:	f107 031c 	add.w	r3, r7, #28
 800099a:	4619      	mov	r1, r3
 800099c:	4814      	ldr	r0, [pc, #80]	@ (80009f0 <MX_GPIO_Init+0x190>)
 800099e:	f002 fcd1 	bl	8003344 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80009a2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80009a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009a8:	2300      	movs	r3, #0
 80009aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ac:	2300      	movs	r3, #0
 80009ae:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80009b0:	f107 031c 	add.w	r3, r7, #28
 80009b4:	4619      	mov	r1, r3
 80009b6:	4810      	ldr	r0, [pc, #64]	@ (80009f8 <MX_GPIO_Init+0x198>)
 80009b8:	f002 fcc4 	bl	8003344 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80009bc:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80009c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c2:	2302      	movs	r3, #2
 80009c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c6:	2300      	movs	r3, #0
 80009c8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009ca:	2303      	movs	r3, #3
 80009cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80009ce:	230a      	movs	r3, #10
 80009d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009d2:	f107 031c 	add.w	r3, r7, #28
 80009d6:	4619      	mov	r1, r3
 80009d8:	4807      	ldr	r0, [pc, #28]	@ (80009f8 <MX_GPIO_Init+0x198>)
 80009da:	f002 fcb3 	bl	8003344 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009de:	bf00      	nop
 80009e0:	3730      	adds	r7, #48	@ 0x30
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	40023800 	.word	0x40023800
 80009ec:	40020400 	.word	0x40020400
 80009f0:	40021800 	.word	0x40021800
 80009f4:	40020800 	.word	0x40020800
 80009f8:	40020000 	.word	0x40020000

080009fc <SendString>:

/* USER CODE BEGIN 4 */


void SendString(const char *str) {
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
    // Toma el mutex antes de transmitir
    if (osMutexWait(uartMutexHandle, osWaitForever) == osOK) {
 8000a04:	4b0e      	ldr	r3, [pc, #56]	@ (8000a40 <SendString+0x44>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	f04f 31ff 	mov.w	r1, #4294967295
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f005 f8af 	bl	8005b70 <osMutexWait>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d10f      	bne.n	8000a38 <SendString+0x3c>
        HAL_UART_Transmit(&huart3, (uint8_t *)str, strlen(str), HAL_MAX_DELAY);
 8000a18:	6878      	ldr	r0, [r7, #4]
 8000a1a:	f7ff fbe9 	bl	80001f0 <strlen>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	b29a      	uxth	r2, r3
 8000a22:	f04f 33ff 	mov.w	r3, #4294967295
 8000a26:	6879      	ldr	r1, [r7, #4]
 8000a28:	4806      	ldr	r0, [pc, #24]	@ (8000a44 <SendString+0x48>)
 8000a2a:	f003 fe0d 	bl	8004648 <HAL_UART_Transmit>
        // Libera el mutex después de transmitir
        osMutexRelease(uartMutexHandle);
 8000a2e:	4b04      	ldr	r3, [pc, #16]	@ (8000a40 <SendString+0x44>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	4618      	mov	r0, r3
 8000a34:	f005 f8ea 	bl	8005c0c <osMutexRelease>
    } else {
        // Manejo de error si no se puede tomar el mutex
        // Esto debería ser raro si usas osWaitForever
    }
}
 8000a38:	bf00      	nop
 8000a3a:	3708      	adds	r7, #8
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	20000498 	.word	0x20000498
 8000a44:	20000448 	.word	0x20000448

08000a48 <SendNumber>:

void SendNumber(int16_t number) {
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b088      	sub	sp, #32
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	4603      	mov	r3, r0
 8000a50:	80fb      	strh	r3, [r7, #6]
    char buffer[20];  // Buffer para almacenar el número como cadena
    sprintf(buffer, "%d", number);  // Convierte el número a cadena
 8000a52:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000a56:	f107 030c 	add.w	r3, r7, #12
 8000a5a:	4906      	ldr	r1, [pc, #24]	@ (8000a74 <SendNumber+0x2c>)
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f015 fc69 	bl	8016334 <siprintf>
    SendString(buffer);  // Envia la cadena por UART
 8000a62:	f107 030c 	add.w	r3, r7, #12
 8000a66:	4618      	mov	r0, r3
 8000a68:	f7ff ffc8 	bl	80009fc <SendString>
}
 8000a6c:	bf00      	nop
 8000a6e:	3720      	adds	r7, #32
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	080175c8 	.word	0x080175c8

08000a78 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b084      	sub	sp, #16
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000a80:	f004 f99e 	bl	8004dc0 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  tcpserver_init();
 8000a84:	f000 fe20 	bl	80016c8 <tcpserver_init>


  //const char *mensaje = "I'm alive!!!\n";
  const char *mensaje_bienvenida = "inicio Modbus TCP Remoto en modo Servidor\r";
 8000a88:	4b06      	ldr	r3, [pc, #24]	@ (8000aa4 <StartDefaultTask+0x2c>)
 8000a8a:	60fb      	str	r3, [r7, #12]

  SendString(mensaje_bienvenida);
 8000a8c:	68f8      	ldr	r0, [r7, #12]
 8000a8e:	f7ff ffb5 	bl	80009fc <SendString>

  /* Infinite loop */
  for(;;)
  {
	  //SendString(mensaje);
	  osDelay(500);
 8000a92:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000a96:	f005 f83f 	bl	8005b18 <osDelay>

	  osDelay(1);
 8000a9a:	2001      	movs	r0, #1
 8000a9c:	f005 f83c 	bl	8005b18 <osDelay>
	  osDelay(500);
 8000aa0:	bf00      	nop
 8000aa2:	e7f6      	b.n	8000a92 <StartDefaultTask+0x1a>
 8000aa4:	080175cc 	.word	0x080175cc

08000aa8 <StartDriverTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDriverTask */
void StartDriverTask(void const * argument)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDriverTask */
  /* Infinite loop */
  for(;;)
  {
	  inputOutputControl();
 8000ab0:	f7ff fd6e 	bl	8000590 <inputOutputControl>
	  osDelay(1);
 8000ab4:	2001      	movs	r0, #1
 8000ab6:	f005 f82f 	bl	8005b18 <osDelay>
	  inputOutputControl();
 8000aba:	bf00      	nop
 8000abc:	e7f8      	b.n	8000ab0 <StartDriverTask+0x8>
	...

08000ac0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4a04      	ldr	r2, [pc, #16]	@ (8000ae0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ace:	4293      	cmp	r3, r2
 8000ad0:	d101      	bne.n	8000ad6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ad2:	f001 f8b5 	bl	8001c40 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ad6:	bf00      	nop
 8000ad8:	3708      	adds	r7, #8
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	40001000 	.word	0x40001000

08000ae4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ae8:	b672      	cpsid	i
}
 8000aea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aec:	bf00      	nop
 8000aee:	e7fd      	b.n	8000aec <Error_Handler+0x8>

08000af0 <mb_process>:
static uint8_t mb_process_val(uint16_t fn, uint16_t val);

static void mb_mbap_copy(uint8_t *mb_repl_buf, uint8_t *mb_req_buf);
static uint16_t mb_pdu_calculate_N(uint16_t fn, uint16_t quantity);

uint16_t mb_process(uint8_t *mb_repl_buf, uint8_t *mb_req_buf, uint16_t req_buf_len) {
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b086      	sub	sp, #24
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	60f8      	str	r0, [r7, #12]
 8000af8:	60b9      	str	r1, [r7, #8]
 8000afa:	4613      	mov	r3, r2
 8000afc:	80fb      	strh	r3, [r7, #6]
	memset(mb_repl_buf, '\0', MB_ADU_MAXSIZE);  // clear the buffer
 8000afe:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000b02:	2100      	movs	r1, #0
 8000b04:	68f8      	ldr	r0, [r7, #12]
 8000b06:	f015 fca2 	bl	801644e <memset>
	mb_mbap_copy(mb_repl_buf, mb_req_buf);
 8000b0a:	68b9      	ldr	r1, [r7, #8]
 8000b0c:	68f8      	ldr	r0, [r7, #12]
 8000b0e:	f000 f934 	bl	8000d7a <mb_mbap_copy>
	uint16_t pduLen = 0;
 8000b12:	2300      	movs	r3, #0
 8000b14:	82fb      	strh	r3, [r7, #22]

	uint8_t fn = mb_req_buf[MB_PDU_FN];
 8000b16:	68bb      	ldr	r3, [r7, #8]
 8000b18:	79db      	ldrb	r3, [r3, #7]
 8000b1a:	757b      	strb	r3, [r7, #21]
	switch (fn) {
 8000b1c:	7d7b      	ldrb	r3, [r7, #21]
 8000b1e:	2b10      	cmp	r3, #16
 8000b20:	dc1c      	bgt.n	8000b5c <mb_process+0x6c>
 8000b22:	2b0f      	cmp	r3, #15
 8000b24:	da23      	bge.n	8000b6e <mb_process+0x7e>
 8000b26:	2b04      	cmp	r3, #4
 8000b28:	dc02      	bgt.n	8000b30 <mb_process+0x40>
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	dc04      	bgt.n	8000b38 <mb_process+0x48>
 8000b2e:	e015      	b.n	8000b5c <mb_process+0x6c>
 8000b30:	3b05      	subs	r3, #5
 8000b32:	2b01      	cmp	r3, #1
 8000b34:	d812      	bhi.n	8000b5c <mb_process+0x6c>
 8000b36:	e008      	b.n	8000b4a <mb_process+0x5a>
	case MB_FN_READ_COILS:
	case MB_FN_READ_DISCRETE:
	case MB_FN_READ_HOLDING:
	case MB_FN_READ_INPUT:
		pduLen = mb_process_pdu_read_fn(mb_repl_buf, mb_req_buf, req_buf_len);
 8000b38:	88fb      	ldrh	r3, [r7, #6]
 8000b3a:	461a      	mov	r2, r3
 8000b3c:	68b9      	ldr	r1, [r7, #8]
 8000b3e:	68f8      	ldr	r0, [r7, #12]
 8000b40:	f000 f82c 	bl	8000b9c <mb_process_pdu_read_fn>
 8000b44:	4603      	mov	r3, r0
 8000b46:	82fb      	strh	r3, [r7, #22]
		break;
 8000b48:	e012      	b.n	8000b70 <mb_process+0x80>
	case MB_FN_WRITE_S_COIL:
	case MB_FN_WRITE_S_HOLDING:
		pduLen = mb_process_pdu_write_single_fn(mb_repl_buf, mb_req_buf, req_buf_len);
 8000b4a:	88fb      	ldrh	r3, [r7, #6]
 8000b4c:	461a      	mov	r2, r3
 8000b4e:	68b9      	ldr	r1, [r7, #8]
 8000b50:	68f8      	ldr	r0, [r7, #12]
 8000b52:	f000 f89f 	bl	8000c94 <mb_process_pdu_write_single_fn>
 8000b56:	4603      	mov	r3, r0
 8000b58:	82fb      	strh	r3, [r7, #22]
		break;
 8000b5a:	e009      	b.n	8000b70 <mb_process+0x80>
	case MB_FN_WRITE_M_COIL:
	case MB_FN_WRITE_M_HOLDING:
		//mb_process_write_fn(mb_repl_buf, mb_req_buf, req_buf_len);
		break;
	default:
		pduLen = mb_process_err(mb_repl_buf, fn, MB_EXCEPTION_FN_UNSUPPORTED);
 8000b5c:	7d7b      	ldrb	r3, [r7, #21]
 8000b5e:	2201      	movs	r2, #1
 8000b60:	4619      	mov	r1, r3
 8000b62:	68f8      	ldr	r0, [r7, #12]
 8000b64:	f000 f9aa 	bl	8000ebc <mb_process_err>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	82fb      	strh	r3, [r7, #22]
		break;
 8000b6c:	e000      	b.n	8000b70 <mb_process+0x80>
		break;
 8000b6e:	bf00      	nop
	}

	mb_repl_buf[MB_MBAP_LEN_H] = (pduLen + 1) >> 8;
 8000b70:	8afb      	ldrh	r3, [r7, #22]
 8000b72:	3301      	adds	r3, #1
 8000b74:	121a      	asrs	r2, r3, #8
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	3304      	adds	r3, #4
 8000b7a:	b2d2      	uxtb	r2, r2
 8000b7c:	701a      	strb	r2, [r3, #0]
	mb_repl_buf[MB_MBAP_LEN_L] = (pduLen + 1) & 0xff;
 8000b7e:	8afb      	ldrh	r3, [r7, #22]
 8000b80:	b2da      	uxtb	r2, r3
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	3305      	adds	r3, #5
 8000b86:	3201      	adds	r2, #1
 8000b88:	b2d2      	uxtb	r2, r2
 8000b8a:	701a      	strb	r2, [r3, #0]

	return (pduLen + MB_MBAP_SIZE);
 8000b8c:	8afb      	ldrh	r3, [r7, #22]
 8000b8e:	3307      	adds	r3, #7
 8000b90:	b29b      	uxth	r3, r3
}
 8000b92:	4618      	mov	r0, r3
 8000b94:	3718      	adds	r7, #24
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
	...

08000b9c <mb_process_pdu_read_fn>:

static uint16_t mb_process_pdu_read_fn(uint8_t *mb_repl_buf, uint8_t *mb_req_buf, uint16_t req_buf_len) {
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b086      	sub	sp, #24
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	60f8      	str	r0, [r7, #12]
 8000ba4:	60b9      	str	r1, [r7, #8]
 8000ba6:	4613      	mov	r3, r2
 8000ba8:	80fb      	strh	r3, [r7, #6]
	uint8_t fn = mb_req_buf[MB_PDU_FN];
 8000baa:	68bb      	ldr	r3, [r7, #8]
 8000bac:	79db      	ldrb	r3, [r3, #7]
 8000bae:	75fb      	strb	r3, [r7, #23]
	uint16_t start_address = mb_req_buf[MB_PDU_R_ST_ADDR_L] + (mb_req_buf[MB_PDU_R_ST_ADDR_H] << 8);
 8000bb0:	68bb      	ldr	r3, [r7, #8]
 8000bb2:	3309      	adds	r3, #9
 8000bb4:	781b      	ldrb	r3, [r3, #0]
 8000bb6:	461a      	mov	r2, r3
 8000bb8:	68bb      	ldr	r3, [r7, #8]
 8000bba:	3308      	adds	r3, #8
 8000bbc:	781b      	ldrb	r3, [r3, #0]
 8000bbe:	021b      	lsls	r3, r3, #8
 8000bc0:	b29b      	uxth	r3, r3
 8000bc2:	4413      	add	r3, r2
 8000bc4:	82bb      	strh	r3, [r7, #20]
	uint16_t quantity = mb_req_buf[MB_PDU_R_QUANTITY_L] + (mb_req_buf[MB_PDU_R_QUANTITY_H] << 8);
 8000bc6:	68bb      	ldr	r3, [r7, #8]
 8000bc8:	330b      	adds	r3, #11
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	461a      	mov	r2, r3
 8000bce:	68bb      	ldr	r3, [r7, #8]
 8000bd0:	330a      	adds	r3, #10
 8000bd2:	781b      	ldrb	r3, [r3, #0]
 8000bd4:	021b      	lsls	r3, r3, #8
 8000bd6:	b29b      	uxth	r3, r3
 8000bd8:	4413      	add	r3, r2
 8000bda:	827b      	strh	r3, [r7, #18]

	if (mb_process_start_address(fn, start_address, quantity) != MB_EXCEPTION_OK) {
 8000bdc:	7dfb      	ldrb	r3, [r7, #23]
 8000bde:	b29b      	uxth	r3, r3
 8000be0:	8a7a      	ldrh	r2, [r7, #18]
 8000be2:	8ab9      	ldrh	r1, [r7, #20]
 8000be4:	4618      	mov	r0, r3
 8000be6:	f000 f8eb 	bl	8000dc0 <mb_process_start_address>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d007      	beq.n	8000c00 <mb_process_pdu_read_fn+0x64>
		return mb_process_err(mb_repl_buf, fn, MB_EXCEPTION_DATA_ADDR);
 8000bf0:	7dfb      	ldrb	r3, [r7, #23]
 8000bf2:	2202      	movs	r2, #2
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	68f8      	ldr	r0, [r7, #12]
 8000bf8:	f000 f960 	bl	8000ebc <mb_process_err>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	e045      	b.n	8000c8c <mb_process_pdu_read_fn+0xf0>
	} else { // form PDU content
		mb_repl_buf[MB_PDU_FN] = fn;
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	3307      	adds	r3, #7
 8000c04:	7dfa      	ldrb	r2, [r7, #23]
 8000c06:	701a      	strb	r2, [r3, #0]
		mb_repl_buf[MB_PDU_REPL_N] = mb_pdu_calculate_N(fn, quantity);
 8000c08:	7dfb      	ldrb	r3, [r7, #23]
 8000c0a:	b29b      	uxth	r3, r3
 8000c0c:	8a7a      	ldrh	r2, [r7, #18]
 8000c0e:	4611      	mov	r1, r2
 8000c10:	4618      	mov	r0, r3
 8000c12:	f000 f96e 	bl	8000ef2 <mb_pdu_calculate_N>
 8000c16:	4603      	mov	r3, r0
 8000c18:	461a      	mov	r2, r3
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	3308      	adds	r3, #8
 8000c1e:	b2d2      	uxtb	r2, r2
 8000c20:	701a      	strb	r2, [r3, #0]

		switch (fn) {
 8000c22:	7dfb      	ldrb	r3, [r7, #23]
 8000c24:	3b01      	subs	r3, #1
 8000c26:	2b03      	cmp	r3, #3
 8000c28:	d826      	bhi.n	8000c78 <mb_process_pdu_read_fn+0xdc>
 8000c2a:	a201      	add	r2, pc, #4	@ (adr r2, 8000c30 <mb_process_pdu_read_fn+0x94>)
 8000c2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c30:	08000c41 	.word	0x08000c41
 8000c34:	08000c4f 	.word	0x08000c4f
 8000c38:	08000c5d 	.word	0x08000c5d
 8000c3c:	08000c6b 	.word	0x08000c6b
		case MB_FN_READ_COILS:
			read_coils(mb_repl_buf, start_address, quantity);
 8000c40:	8a7a      	ldrh	r2, [r7, #18]
 8000c42:	8abb      	ldrh	r3, [r7, #20]
 8000c44:	4619      	mov	r1, r3
 8000c46:	68f8      	ldr	r0, [r7, #12]
 8000c48:	f000 f980 	bl	8000f4c <read_coils>
			break;
 8000c4c:	e014      	b.n	8000c78 <mb_process_pdu_read_fn+0xdc>
		case MB_FN_READ_DISCRETE:
			read_discrete(mb_repl_buf, start_address, quantity);
 8000c4e:	8a7a      	ldrh	r2, [r7, #18]
 8000c50:	8abb      	ldrh	r3, [r7, #20]
 8000c52:	4619      	mov	r1, r3
 8000c54:	68f8      	ldr	r0, [r7, #12]
 8000c56:	f000 f9c7 	bl	8000fe8 <read_discrete>
			break;
 8000c5a:	e00d      	b.n	8000c78 <mb_process_pdu_read_fn+0xdc>
		case MB_FN_READ_HOLDING:
			read_holding(mb_repl_buf, start_address, quantity);
 8000c5c:	8a7a      	ldrh	r2, [r7, #18]
 8000c5e:	8abb      	ldrh	r3, [r7, #20]
 8000c60:	4619      	mov	r1, r3
 8000c62:	68f8      	ldr	r0, [r7, #12]
 8000c64:	f000 fa42 	bl	80010ec <read_holding>
			break;
 8000c68:	e006      	b.n	8000c78 <mb_process_pdu_read_fn+0xdc>
		case MB_FN_READ_INPUT:
			read_inputs(mb_repl_buf, start_address, quantity);
 8000c6a:	8a7a      	ldrh	r2, [r7, #18]
 8000c6c:	8abb      	ldrh	r3, [r7, #20]
 8000c6e:	4619      	mov	r1, r3
 8000c70:	68f8      	ldr	r0, [r7, #12]
 8000c72:	f000 f9f9 	bl	8001068 <read_inputs>
			break;
 8000c76:	bf00      	nop
		}

	}
	return mb_pdu_calculate_N(fn, quantity) + 2; // returns PDU size where +2 are N and fn
 8000c78:	7dfb      	ldrb	r3, [r7, #23]
 8000c7a:	b29b      	uxth	r3, r3
 8000c7c:	8a7a      	ldrh	r2, [r7, #18]
 8000c7e:	4611      	mov	r1, r2
 8000c80:	4618      	mov	r0, r3
 8000c82:	f000 f936 	bl	8000ef2 <mb_pdu_calculate_N>
 8000c86:	4603      	mov	r3, r0
 8000c88:	3302      	adds	r3, #2
 8000c8a:	b29b      	uxth	r3, r3
}
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	3718      	adds	r7, #24
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}

08000c94 <mb_process_pdu_write_single_fn>:

static uint16_t mb_process_pdu_write_single_fn(uint8_t *mb_repl_buf, uint8_t *mb_req_buf, uint16_t req_buf_len) {
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b086      	sub	sp, #24
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	60f8      	str	r0, [r7, #12]
 8000c9c:	60b9      	str	r1, [r7, #8]
 8000c9e:	4613      	mov	r3, r2
 8000ca0:	80fb      	strh	r3, [r7, #6]
	uint8_t fn = mb_req_buf[MB_PDU_FN];
 8000ca2:	68bb      	ldr	r3, [r7, #8]
 8000ca4:	79db      	ldrb	r3, [r3, #7]
 8000ca6:	75fb      	strb	r3, [r7, #23]
	uint16_t address = mb_req_buf[MB_PDU_W_REG_ADDR_L] + (mb_req_buf[MB_PDU_W_REG_ADDR_H] << 8);
 8000ca8:	68bb      	ldr	r3, [r7, #8]
 8000caa:	3309      	adds	r3, #9
 8000cac:	781b      	ldrb	r3, [r3, #0]
 8000cae:	461a      	mov	r2, r3
 8000cb0:	68bb      	ldr	r3, [r7, #8]
 8000cb2:	3308      	adds	r3, #8
 8000cb4:	781b      	ldrb	r3, [r3, #0]
 8000cb6:	021b      	lsls	r3, r3, #8
 8000cb8:	b29b      	uxth	r3, r3
 8000cba:	4413      	add	r3, r2
 8000cbc:	82bb      	strh	r3, [r7, #20]
	uint16_t valToWrite = mb_req_buf[MB_PDU_W_REG_VAL_L] + (mb_req_buf[MB_PDU_W_REG_VAL_H] << 8);
 8000cbe:	68bb      	ldr	r3, [r7, #8]
 8000cc0:	330b      	adds	r3, #11
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	461a      	mov	r2, r3
 8000cc6:	68bb      	ldr	r3, [r7, #8]
 8000cc8:	330a      	adds	r3, #10
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	021b      	lsls	r3, r3, #8
 8000cce:	b29b      	uxth	r3, r3
 8000cd0:	4413      	add	r3, r2
 8000cd2:	827b      	strh	r3, [r7, #18]

	if (mb_process_start_address(fn, address, 1) != MB_EXCEPTION_OK) {
 8000cd4:	7dfb      	ldrb	r3, [r7, #23]
 8000cd6:	b29b      	uxth	r3, r3
 8000cd8:	8ab9      	ldrh	r1, [r7, #20]
 8000cda:	2201      	movs	r2, #1
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f000 f86f 	bl	8000dc0 <mb_process_start_address>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d007      	beq.n	8000cf8 <mb_process_pdu_write_single_fn+0x64>
		return mb_process_err(mb_repl_buf, fn, MB_EXCEPTION_DATA_ADDR);
 8000ce8:	7dfb      	ldrb	r3, [r7, #23]
 8000cea:	2202      	movs	r2, #2
 8000cec:	4619      	mov	r1, r3
 8000cee:	68f8      	ldr	r0, [r7, #12]
 8000cf0:	f000 f8e4 	bl	8000ebc <mb_process_err>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	e03c      	b.n	8000d72 <mb_process_pdu_write_single_fn+0xde>
	} else if (mb_process_val(fn, valToWrite) != MB_EXCEPTION_OK) {
 8000cf8:	7dfb      	ldrb	r3, [r7, #23]
 8000cfa:	b29b      	uxth	r3, r3
 8000cfc:	8a7a      	ldrh	r2, [r7, #18]
 8000cfe:	4611      	mov	r1, r2
 8000d00:	4618      	mov	r0, r3
 8000d02:	f000 f8bd 	bl	8000e80 <mb_process_val>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d007      	beq.n	8000d1c <mb_process_pdu_write_single_fn+0x88>
		return mb_process_err(mb_repl_buf, fn, MB_EXCEPTION_DATA_VAL);
 8000d0c:	7dfb      	ldrb	r3, [r7, #23]
 8000d0e:	2203      	movs	r2, #3
 8000d10:	4619      	mov	r1, r3
 8000d12:	68f8      	ldr	r0, [r7, #12]
 8000d14:	f000 f8d2 	bl	8000ebc <mb_process_err>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	e02a      	b.n	8000d72 <mb_process_pdu_write_single_fn+0xde>
	} else { // form PDU content
		mb_repl_buf[MB_PDU_FN] = fn;
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	3307      	adds	r3, #7
 8000d20:	7dfa      	ldrb	r2, [r7, #23]
 8000d22:	701a      	strb	r2, [r3, #0]
		mb_repl_buf[MB_PDU_W_REG_ADDR_H] = mb_req_buf[MB_PDU_W_REG_ADDR_H];
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	3308      	adds	r3, #8
 8000d28:	68ba      	ldr	r2, [r7, #8]
 8000d2a:	7a12      	ldrb	r2, [r2, #8]
 8000d2c:	701a      	strb	r2, [r3, #0]
		mb_repl_buf[MB_PDU_W_REG_ADDR_L] = mb_req_buf[MB_PDU_W_REG_ADDR_L];
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	3309      	adds	r3, #9
 8000d32:	68ba      	ldr	r2, [r7, #8]
 8000d34:	7a52      	ldrb	r2, [r2, #9]
 8000d36:	701a      	strb	r2, [r3, #0]
		mb_repl_buf[MB_PDU_W_REG_VAL_H] = mb_req_buf[MB_PDU_W_REG_VAL_H];
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	330a      	adds	r3, #10
 8000d3c:	68ba      	ldr	r2, [r7, #8]
 8000d3e:	7a92      	ldrb	r2, [r2, #10]
 8000d40:	701a      	strb	r2, [r3, #0]
		mb_repl_buf[MB_PDU_W_REG_VAL_L] = mb_req_buf[MB_PDU_W_REG_VAL_L];
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	330b      	adds	r3, #11
 8000d46:	68ba      	ldr	r2, [r7, #8]
 8000d48:	7ad2      	ldrb	r2, [r2, #11]
 8000d4a:	701a      	strb	r2, [r3, #0]

		if(fn == MB_FN_WRITE_S_COIL) write_single_coil(address, valToWrite);
 8000d4c:	7dfb      	ldrb	r3, [r7, #23]
 8000d4e:	2b05      	cmp	r3, #5
 8000d50:	d105      	bne.n	8000d5e <mb_process_pdu_write_single_fn+0xca>
 8000d52:	8a7a      	ldrh	r2, [r7, #18]
 8000d54:	8abb      	ldrh	r3, [r7, #20]
 8000d56:	4611      	mov	r1, r2
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f000 fa09 	bl	8001170 <write_single_coil>
		if(fn == MB_FN_WRITE_S_HOLDING) write_single_holding(address, valToWrite);
 8000d5e:	7dfb      	ldrb	r3, [r7, #23]
 8000d60:	2b06      	cmp	r3, #6
 8000d62:	d105      	bne.n	8000d70 <mb_process_pdu_write_single_fn+0xdc>
 8000d64:	8a7a      	ldrh	r2, [r7, #18]
 8000d66:	8abb      	ldrh	r3, [r7, #20]
 8000d68:	4611      	mov	r1, r2
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f000 fa3e 	bl	80011ec <write_single_holding>
	}
	return 5; // PDU size for write single XXX command
 8000d70:	2305      	movs	r3, #5
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	3718      	adds	r7, #24
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}

08000d7a <mb_mbap_copy>:

static void mb_mbap_copy(uint8_t *mb_repl_buf, uint8_t *mb_req_buf) {
 8000d7a:	b480      	push	{r7}
 8000d7c:	b083      	sub	sp, #12
 8000d7e:	af00      	add	r7, sp, #0
 8000d80:	6078      	str	r0, [r7, #4]
 8000d82:	6039      	str	r1, [r7, #0]
	mb_repl_buf[MB_MBAP_TRANSACTION_ID_H] = mb_req_buf[MB_MBAP_TRANSACTION_ID_H];
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	781a      	ldrb	r2, [r3, #0]
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	701a      	strb	r2, [r3, #0]
	mb_repl_buf[MB_MBAP_TRANSACTION_ID_L] = mb_req_buf[MB_MBAP_TRANSACTION_ID_L];
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	3301      	adds	r3, #1
 8000d90:	683a      	ldr	r2, [r7, #0]
 8000d92:	7852      	ldrb	r2, [r2, #1]
 8000d94:	701a      	strb	r2, [r3, #0]
	mb_repl_buf[MB_MBAP_PROTOCOL_ID_H] = mb_req_buf[MB_MBAP_PROTOCOL_ID_H];
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	3302      	adds	r3, #2
 8000d9a:	683a      	ldr	r2, [r7, #0]
 8000d9c:	7892      	ldrb	r2, [r2, #2]
 8000d9e:	701a      	strb	r2, [r3, #0]
	mb_repl_buf[MB_MBAP_PROTOCOL_ID_L] = mb_req_buf[MB_MBAP_PROTOCOL_ID_L];
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	3303      	adds	r3, #3
 8000da4:	683a      	ldr	r2, [r7, #0]
 8000da6:	78d2      	ldrb	r2, [r2, #3]
 8000da8:	701a      	strb	r2, [r3, #0]
	mb_repl_buf[MB_MBAP_CLIENT_ID] = mb_req_buf[MB_MBAP_CLIENT_ID];
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	3306      	adds	r3, #6
 8000dae:	683a      	ldr	r2, [r7, #0]
 8000db0:	7992      	ldrb	r2, [r2, #6]
 8000db2:	701a      	strb	r2, [r3, #0]
}
 8000db4:	bf00      	nop
 8000db6:	370c      	adds	r7, #12
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr

08000dc0 <mb_process_start_address>:

static uint8_t mb_process_start_address(uint16_t fn, uint16_t start_address, uint16_t quantity) {
 8000dc0:	b480      	push	{r7}
 8000dc2:	b085      	sub	sp, #20
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	80fb      	strh	r3, [r7, #6]
 8000dca:	460b      	mov	r3, r1
 8000dcc:	80bb      	strh	r3, [r7, #4]
 8000dce:	4613      	mov	r3, r2
 8000dd0:	807b      	strh	r3, [r7, #2]
	uint8_t exception_code = MB_EXCEPTION_OK;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	73fb      	strb	r3, [r7, #15]
	switch (fn) {
 8000dd6:	88fb      	ldrh	r3, [r7, #6]
 8000dd8:	3b01      	subs	r3, #1
 8000dda:	2b05      	cmp	r3, #5
 8000ddc:	d849      	bhi.n	8000e72 <mb_process_start_address+0xb2>
 8000dde:	a201      	add	r2, pc, #4	@ (adr r2, 8000de4 <mb_process_start_address+0x24>)
 8000de0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000de4:	08000dfd 	.word	0x08000dfd
 8000de8:	08000e0d 	.word	0x08000e0d
 8000dec:	08000e1d 	.word	0x08000e1d
 8000df0:	08000e2d 	.word	0x08000e2d
 8000df4:	08000e3d 	.word	0x08000e3d
 8000df8:	08000e4d 	.word	0x08000e4d
	case MB_FN_READ_COILS:
		if ((start_address + quantity) > MB_COILS_Q)
 8000dfc:	88ba      	ldrh	r2, [r7, #4]
 8000dfe:	887b      	ldrh	r3, [r7, #2]
 8000e00:	4413      	add	r3, r2
 8000e02:	2bff      	cmp	r3, #255	@ 0xff
 8000e04:	dd2a      	ble.n	8000e5c <mb_process_start_address+0x9c>
			exception_code = 2;
 8000e06:	2302      	movs	r3, #2
 8000e08:	73fb      	strb	r3, [r7, #15]
		break;
 8000e0a:	e027      	b.n	8000e5c <mb_process_start_address+0x9c>
	case MB_FN_READ_DISCRETE:
		if ((start_address + quantity) > MB_DISCRETE_Q)
 8000e0c:	88ba      	ldrh	r2, [r7, #4]
 8000e0e:	887b      	ldrh	r3, [r7, #2]
 8000e10:	4413      	add	r3, r2
 8000e12:	2bff      	cmp	r3, #255	@ 0xff
 8000e14:	dd24      	ble.n	8000e60 <mb_process_start_address+0xa0>
			exception_code = 2;
 8000e16:	2302      	movs	r3, #2
 8000e18:	73fb      	strb	r3, [r7, #15]
		break;
 8000e1a:	e021      	b.n	8000e60 <mb_process_start_address+0xa0>
	case MB_FN_READ_HOLDING:
		if ((start_address + quantity) > MB_HOLDING_Q)
 8000e1c:	88ba      	ldrh	r2, [r7, #4]
 8000e1e:	887b      	ldrh	r3, [r7, #2]
 8000e20:	4413      	add	r3, r2
 8000e22:	2b08      	cmp	r3, #8
 8000e24:	dd1e      	ble.n	8000e64 <mb_process_start_address+0xa4>
			exception_code = 2;
 8000e26:	2302      	movs	r3, #2
 8000e28:	73fb      	strb	r3, [r7, #15]
		break;
 8000e2a:	e01b      	b.n	8000e64 <mb_process_start_address+0xa4>
	case MB_FN_READ_INPUT:
		if ((start_address + quantity) > MB_INPUT_Q)
 8000e2c:	88ba      	ldrh	r2, [r7, #4]
 8000e2e:	887b      	ldrh	r3, [r7, #2]
 8000e30:	4413      	add	r3, r2
 8000e32:	2b08      	cmp	r3, #8
 8000e34:	dd18      	ble.n	8000e68 <mb_process_start_address+0xa8>
			exception_code = 2;
 8000e36:	2302      	movs	r3, #2
 8000e38:	73fb      	strb	r3, [r7, #15]
		break;
 8000e3a:	e015      	b.n	8000e68 <mb_process_start_address+0xa8>

	case MB_FN_WRITE_S_COIL:
		if ((start_address + quantity) > MB_COILS_Q)
 8000e3c:	88ba      	ldrh	r2, [r7, #4]
 8000e3e:	887b      	ldrh	r3, [r7, #2]
 8000e40:	4413      	add	r3, r2
 8000e42:	2bff      	cmp	r3, #255	@ 0xff
 8000e44:	dd12      	ble.n	8000e6c <mb_process_start_address+0xac>
			exception_code = 2;
 8000e46:	2302      	movs	r3, #2
 8000e48:	73fb      	strb	r3, [r7, #15]
		break;
 8000e4a:	e00f      	b.n	8000e6c <mb_process_start_address+0xac>
	case MB_FN_WRITE_S_HOLDING:
		if ((start_address + quantity) > MB_HOLDING_Q)
 8000e4c:	88ba      	ldrh	r2, [r7, #4]
 8000e4e:	887b      	ldrh	r3, [r7, #2]
 8000e50:	4413      	add	r3, r2
 8000e52:	2b08      	cmp	r3, #8
 8000e54:	dd0c      	ble.n	8000e70 <mb_process_start_address+0xb0>
			exception_code = 2;
 8000e56:	2302      	movs	r3, #2
 8000e58:	73fb      	strb	r3, [r7, #15]
		break;
 8000e5a:	e009      	b.n	8000e70 <mb_process_start_address+0xb0>
		break;
 8000e5c:	bf00      	nop
 8000e5e:	e008      	b.n	8000e72 <mb_process_start_address+0xb2>
		break;
 8000e60:	bf00      	nop
 8000e62:	e006      	b.n	8000e72 <mb_process_start_address+0xb2>
		break;
 8000e64:	bf00      	nop
 8000e66:	e004      	b.n	8000e72 <mb_process_start_address+0xb2>
		break;
 8000e68:	bf00      	nop
 8000e6a:	e002      	b.n	8000e72 <mb_process_start_address+0xb2>
		break;
 8000e6c:	bf00      	nop
 8000e6e:	e000      	b.n	8000e72 <mb_process_start_address+0xb2>
		break;
 8000e70:	bf00      	nop
	}
	return exception_code;
 8000e72:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e74:	4618      	mov	r0, r3
 8000e76:	3714      	adds	r7, #20
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7e:	4770      	bx	lr

08000e80 <mb_process_val>:

static uint8_t mb_process_val(uint16_t fn, uint16_t val) {
 8000e80:	b480      	push	{r7}
 8000e82:	b085      	sub	sp, #20
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	4603      	mov	r3, r0
 8000e88:	460a      	mov	r2, r1
 8000e8a:	80fb      	strh	r3, [r7, #6]
 8000e8c:	4613      	mov	r3, r2
 8000e8e:	80bb      	strh	r3, [r7, #4]
	uint8_t exception_code = MB_EXCEPTION_OK;
 8000e90:	2300      	movs	r3, #0
 8000e92:	73fb      	strb	r3, [r7, #15]
	switch (fn) {
 8000e94:	88fb      	ldrh	r3, [r7, #6]
 8000e96:	2b05      	cmp	r3, #5
 8000e98:	d109      	bne.n	8000eae <mb_process_val+0x2e>
	case MB_FN_WRITE_S_COIL:
		if ((val != 0xFF00) && (val != 0x0000))
 8000e9a:	88bb      	ldrh	r3, [r7, #4]
 8000e9c:	f5b3 4f7f 	cmp.w	r3, #65280	@ 0xff00
 8000ea0:	d004      	beq.n	8000eac <mb_process_val+0x2c>
 8000ea2:	88bb      	ldrh	r3, [r7, #4]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d001      	beq.n	8000eac <mb_process_val+0x2c>
			exception_code = 3;
 8000ea8:	2303      	movs	r3, #3
 8000eaa:	73fb      	strb	r3, [r7, #15]
		break;
 8000eac:	bf00      	nop
	}
	return exception_code;
 8000eae:	7bfb      	ldrb	r3, [r7, #15]
}
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	3714      	adds	r7, #20
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr

08000ebc <mb_process_err>:

static uint16_t mb_process_err(uint8_t *mb_repl_buf, uint8_t fn, uint16_t exceptionCode) {
 8000ebc:	b480      	push	{r7}
 8000ebe:	b083      	sub	sp, #12
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
 8000ec4:	460b      	mov	r3, r1
 8000ec6:	70fb      	strb	r3, [r7, #3]
 8000ec8:	4613      	mov	r3, r2
 8000eca:	803b      	strh	r3, [r7, #0]
	mb_repl_buf[MB_PDU_FN] = fn | 0x80;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	3307      	adds	r3, #7
 8000ed0:	78fa      	ldrb	r2, [r7, #3]
 8000ed2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8000ed6:	b2d2      	uxtb	r2, r2
 8000ed8:	701a      	strb	r2, [r3, #0]
	mb_repl_buf[MB_PDU_EXCEPTION_CODE] = exceptionCode;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	3308      	adds	r3, #8
 8000ede:	883a      	ldrh	r2, [r7, #0]
 8000ee0:	b2d2      	uxtb	r2, r2
 8000ee2:	701a      	strb	r2, [r3, #0]
	return 2;
 8000ee4:	2302      	movs	r3, #2
}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	370c      	adds	r7, #12
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr

08000ef2 <mb_pdu_calculate_N>:

static uint16_t mb_pdu_calculate_N(uint16_t fn, uint16_t quantity) {
 8000ef2:	b480      	push	{r7}
 8000ef4:	b083      	sub	sp, #12
 8000ef6:	af00      	add	r7, sp, #0
 8000ef8:	4603      	mov	r3, r0
 8000efa:	460a      	mov	r2, r1
 8000efc:	80fb      	strh	r3, [r7, #6]
 8000efe:	4613      	mov	r3, r2
 8000f00:	80bb      	strh	r3, [r7, #4]
	switch (fn) {
 8000f02:	88fb      	ldrh	r3, [r7, #6]
 8000f04:	2b02      	cmp	r3, #2
 8000f06:	dc02      	bgt.n	8000f0e <mb_pdu_calculate_N+0x1c>
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	dc04      	bgt.n	8000f16 <mb_pdu_calculate_N+0x24>
 8000f0c:	e017      	b.n	8000f3e <mb_pdu_calculate_N+0x4c>
 8000f0e:	3b03      	subs	r3, #3
 8000f10:	2b01      	cmp	r3, #1
 8000f12:	d814      	bhi.n	8000f3e <mb_pdu_calculate_N+0x4c>
 8000f14:	e00f      	b.n	8000f36 <mb_pdu_calculate_N+0x44>
	case MB_FN_READ_COILS:
	case MB_FN_READ_DISCRETE:
		if (quantity % 8 != 0)
 8000f16:	88bb      	ldrh	r3, [r7, #4]
 8000f18:	f003 0307 	and.w	r3, r3, #7
 8000f1c:	b29b      	uxth	r3, r3
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d005      	beq.n	8000f2e <mb_pdu_calculate_N+0x3c>
			return ((quantity / 8) + 1);
 8000f22:	88bb      	ldrh	r3, [r7, #4]
 8000f24:	08db      	lsrs	r3, r3, #3
 8000f26:	b29b      	uxth	r3, r3
 8000f28:	3301      	adds	r3, #1
 8000f2a:	b29b      	uxth	r3, r3
 8000f2c:	e008      	b.n	8000f40 <mb_pdu_calculate_N+0x4e>
		else
			return (quantity / 8);
 8000f2e:	88bb      	ldrh	r3, [r7, #4]
 8000f30:	08db      	lsrs	r3, r3, #3
 8000f32:	b29b      	uxth	r3, r3
 8000f34:	e004      	b.n	8000f40 <mb_pdu_calculate_N+0x4e>
		break;
	case MB_FN_READ_HOLDING:
	case MB_FN_READ_INPUT:
		return quantity * 2;
 8000f36:	88bb      	ldrh	r3, [r7, #4]
 8000f38:	005b      	lsls	r3, r3, #1
 8000f3a:	b29b      	uxth	r3, r3
 8000f3c:	e000      	b.n	8000f40 <mb_pdu_calculate_N+0x4e>
		break;
	default:
		return 0;
 8000f3e:	2300      	movs	r3, #0
	}
}
 8000f40:	4618      	mov	r0, r3
 8000f42:	370c      	adds	r7, #12
 8000f44:	46bd      	mov	sp, r7
 8000f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4a:	4770      	bx	lr

08000f4c <read_coils>:

void read_coils(uint8_t *repl_buf, uint16_t address, uint16_t quantity){
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b084      	sub	sp, #16
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
 8000f54:	460b      	mov	r3, r1
 8000f56:	807b      	strh	r3, [r7, #2]
 8000f58:	4613      	mov	r3, r2
 8000f5a:	803b      	strh	r3, [r7, #0]
    //uint16_t byte_count = (quantity + 7) / 8;  // Cantidad de bytes necesarios
    //memset(response_buffer, 0, 256);            // Inicializar TODO el buffer de respuesta a 0
    //memset(response_buffer, 0, byte_count);    // Inicializar el buffer de respuesta a 0
	SendString("leo coils coils \r");
 8000f5c:	481f      	ldr	r0, [pc, #124]	@ (8000fdc <read_coils+0x90>)
 8000f5e:	f7ff fd4d 	bl	80009fc <SendString>
    for (uint16_t i = 0; i < quantity; i++) {
 8000f62:	2300      	movs	r3, #0
 8000f64:	81fb      	strh	r3, [r7, #14]
 8000f66:	e02f      	b.n	8000fc8 <read_coils+0x7c>
        uint16_t coil_index = address + i;
 8000f68:	887a      	ldrh	r2, [r7, #2]
 8000f6a:	89fb      	ldrh	r3, [r7, #14]
 8000f6c:	4413      	add	r3, r2
 8000f6e:	81bb      	strh	r3, [r7, #12]
        osMutexWait(coilMutexHandle, osWaitForever);
 8000f70:	4b1b      	ldr	r3, [pc, #108]	@ (8000fe0 <read_coils+0x94>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	f04f 31ff 	mov.w	r1, #4294967295
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f004 fdf9 	bl	8005b70 <osMutexWait>
        if (coil_status[coil_index]) {
 8000f7e:	89bb      	ldrh	r3, [r7, #12]
 8000f80:	4a18      	ldr	r2, [pc, #96]	@ (8000fe4 <read_coils+0x98>)
 8000f82:	5cd3      	ldrb	r3, [r2, r3]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d017      	beq.n	8000fb8 <read_coils+0x6c>
            repl_buf[(i / 8) +9 ] |= (1 << (i % 8));  // Establecer el bit correspondiente si la coil está ON
 8000f88:	89fb      	ldrh	r3, [r7, #14]
 8000f8a:	08db      	lsrs	r3, r3, #3
 8000f8c:	b298      	uxth	r0, r3
 8000f8e:	4603      	mov	r3, r0
 8000f90:	3309      	adds	r3, #9
 8000f92:	687a      	ldr	r2, [r7, #4]
 8000f94:	4413      	add	r3, r2
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	b25a      	sxtb	r2, r3
 8000f9a:	89fb      	ldrh	r3, [r7, #14]
 8000f9c:	f003 0307 	and.w	r3, r3, #7
 8000fa0:	2101      	movs	r1, #1
 8000fa2:	fa01 f303 	lsl.w	r3, r1, r3
 8000fa6:	b25b      	sxtb	r3, r3
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	b259      	sxtb	r1, r3
 8000fac:	4603      	mov	r3, r0
 8000fae:	3309      	adds	r3, #9
 8000fb0:	687a      	ldr	r2, [r7, #4]
 8000fb2:	4413      	add	r3, r2
 8000fb4:	b2ca      	uxtb	r2, r1
 8000fb6:	701a      	strb	r2, [r3, #0]
													//y es mas 9 para dar lugar a fn y cantidad de bytes en
													//[7] y [8]
        }
        osMutexRelease(coilMutexHandle);
 8000fb8:	4b09      	ldr	r3, [pc, #36]	@ (8000fe0 <read_coils+0x94>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f004 fe25 	bl	8005c0c <osMutexRelease>
    for (uint16_t i = 0; i < quantity; i++) {
 8000fc2:	89fb      	ldrh	r3, [r7, #14]
 8000fc4:	3301      	adds	r3, #1
 8000fc6:	81fb      	strh	r3, [r7, #14]
 8000fc8:	89fa      	ldrh	r2, [r7, #14]
 8000fca:	883b      	ldrh	r3, [r7, #0]
 8000fcc:	429a      	cmp	r2, r3
 8000fce:	d3cb      	bcc.n	8000f68 <read_coils+0x1c>
    }
}
 8000fd0:	bf00      	nop
 8000fd2:	bf00      	nop
 8000fd4:	3710      	adds	r7, #16
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	080175f8 	.word	0x080175f8
 8000fe0:	2000049c 	.word	0x2000049c
 8000fe4:	20000000 	.word	0x20000000

08000fe8 <read_discrete>:

void read_discrete(uint8_t *repl_buf, uint16_t address, uint16_t quantity){
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b084      	sub	sp, #16
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
 8000ff0:	460b      	mov	r3, r1
 8000ff2:	807b      	strh	r3, [r7, #2]
 8000ff4:	4613      	mov	r3, r2
 8000ff6:	803b      	strh	r3, [r7, #0]
    // NO USADO uint16_t byte_count = (quantity + 7) / 8;  // Cantidad de bytes necesarios
    //memset(response_buffer, 0, 256);            // Inicializar TODO el buffer de respuesta a 0
    //memset(response_buffer, 0, byte_count);    // Inicializar el buffer de respuesta a 0
	SendString("leo discrete \r");
 8000ff8:	4819      	ldr	r0, [pc, #100]	@ (8001060 <read_discrete+0x78>)
 8000ffa:	f7ff fcff 	bl	80009fc <SendString>
    for (uint16_t i = 0; i < quantity; i++) {
 8000ffe:	2300      	movs	r3, #0
 8001000:	81fb      	strh	r3, [r7, #14]
 8001002:	e023      	b.n	800104c <read_discrete+0x64>
        uint16_t discrete_index = address + i;
 8001004:	887a      	ldrh	r2, [r7, #2]
 8001006:	89fb      	ldrh	r3, [r7, #14]
 8001008:	4413      	add	r3, r2
 800100a:	81bb      	strh	r3, [r7, #12]
        if (discrete_status[discrete_index]) {
 800100c:	89bb      	ldrh	r3, [r7, #12]
 800100e:	4a15      	ldr	r2, [pc, #84]	@ (8001064 <read_discrete+0x7c>)
 8001010:	5cd3      	ldrb	r3, [r2, r3]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d017      	beq.n	8001046 <read_discrete+0x5e>
            repl_buf[(i / 8) +9 ] |= (1 << (i % 8));  // Establecer el bit correspondiente si la coil está ON
 8001016:	89fb      	ldrh	r3, [r7, #14]
 8001018:	08db      	lsrs	r3, r3, #3
 800101a:	b298      	uxth	r0, r3
 800101c:	4603      	mov	r3, r0
 800101e:	3309      	adds	r3, #9
 8001020:	687a      	ldr	r2, [r7, #4]
 8001022:	4413      	add	r3, r2
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	b25a      	sxtb	r2, r3
 8001028:	89fb      	ldrh	r3, [r7, #14]
 800102a:	f003 0307 	and.w	r3, r3, #7
 800102e:	2101      	movs	r1, #1
 8001030:	fa01 f303 	lsl.w	r3, r1, r3
 8001034:	b25b      	sxtb	r3, r3
 8001036:	4313      	orrs	r3, r2
 8001038:	b259      	sxtb	r1, r3
 800103a:	4603      	mov	r3, r0
 800103c:	3309      	adds	r3, #9
 800103e:	687a      	ldr	r2, [r7, #4]
 8001040:	4413      	add	r3, r2
 8001042:	b2ca      	uxtb	r2, r1
 8001044:	701a      	strb	r2, [r3, #0]
    for (uint16_t i = 0; i < quantity; i++) {
 8001046:	89fb      	ldrh	r3, [r7, #14]
 8001048:	3301      	adds	r3, #1
 800104a:	81fb      	strh	r3, [r7, #14]
 800104c:	89fa      	ldrh	r2, [r7, #14]
 800104e:	883b      	ldrh	r3, [r7, #0]
 8001050:	429a      	cmp	r2, r3
 8001052:	d3d7      	bcc.n	8001004 <read_discrete+0x1c>
													//y es mas 9 para dar lugar a fn y cantidad de bytes en
													//[7] y [8]
        }
    }

}
 8001054:	bf00      	nop
 8001056:	bf00      	nop
 8001058:	3710      	adds	r7, #16
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	0801760c 	.word	0x0801760c
 8001064:	200004a0 	.word	0x200004a0

08001068 <read_inputs>:

//Lectura de input
void read_inputs(uint8_t *repl_buf, uint16_t address, uint16_t quantity) {
 8001068:	b580      	push	{r7, lr}
 800106a:	b084      	sub	sp, #16
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
 8001070:	460b      	mov	r3, r1
 8001072:	807b      	strh	r3, [r7, #2]
 8001074:	4613      	mov	r3, r2
 8001076:	803b      	strh	r3, [r7, #0]
	SendString("leo inputs \r");
 8001078:	481a      	ldr	r0, [pc, #104]	@ (80010e4 <read_inputs+0x7c>)
 800107a:	f7ff fcbf 	bl	80009fc <SendString>
    // Cantidad de bytes necesarios: cada registro holding es de 2 bytes (16 bits)
    uint16_t byte_count = quantity * 2;
 800107e:	883b      	ldrh	r3, [r7, #0]
 8001080:	005b      	lsls	r3, r3, #1
 8001082:	81bb      	strh	r3, [r7, #12]

    // Coloca la cantidad de bytes en el byte [8] del buffer de respuesta (luego de la cabecera)
    repl_buf[8] = byte_count;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	3308      	adds	r3, #8
 8001088:	89ba      	ldrh	r2, [r7, #12]
 800108a:	b2d2      	uxtb	r2, r2
 800108c:	701a      	strb	r2, [r3, #0]

    // Copiar los valores de los registros holding solicitados
    for (uint16_t i = 0; i < quantity; i++) {
 800108e:	2300      	movs	r3, #0
 8001090:	81fb      	strh	r3, [r7, #14]
 8001092:	e01e      	b.n	80010d2 <read_inputs+0x6a>
        uint16_t inputs_index = address + i;
 8001094:	887a      	ldrh	r2, [r7, #2]
 8001096:	89fb      	ldrh	r3, [r7, #14]
 8001098:	4413      	add	r3, r2
 800109a:	817b      	strh	r3, [r7, #10]
        uint16_t inputs_value = input_status[inputs_index];  // Valor del registro holding
 800109c:	897b      	ldrh	r3, [r7, #10]
 800109e:	4a12      	ldr	r2, [pc, #72]	@ (80010e8 <read_inputs+0x80>)
 80010a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80010a4:	813b      	strh	r3, [r7, #8]

        // Poner los 2 bytes del registro holding en el buffer de respuesta
        repl_buf[9 + (i * 2)]     = (inputs_value >> 8) & 0xFF;  // Byte alto
 80010a6:	893b      	ldrh	r3, [r7, #8]
 80010a8:	0a1b      	lsrs	r3, r3, #8
 80010aa:	b29a      	uxth	r2, r3
 80010ac:	89fb      	ldrh	r3, [r7, #14]
 80010ae:	005b      	lsls	r3, r3, #1
 80010b0:	3309      	adds	r3, #9
 80010b2:	4619      	mov	r1, r3
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	440b      	add	r3, r1
 80010b8:	b2d2      	uxtb	r2, r2
 80010ba:	701a      	strb	r2, [r3, #0]
        repl_buf[9 + (i * 2) + 1] = inputs_value & 0xFF;         // Byte bajo
 80010bc:	89fb      	ldrh	r3, [r7, #14]
 80010be:	005b      	lsls	r3, r3, #1
 80010c0:	330a      	adds	r3, #10
 80010c2:	687a      	ldr	r2, [r7, #4]
 80010c4:	4413      	add	r3, r2
 80010c6:	893a      	ldrh	r2, [r7, #8]
 80010c8:	b2d2      	uxtb	r2, r2
 80010ca:	701a      	strb	r2, [r3, #0]
    for (uint16_t i = 0; i < quantity; i++) {
 80010cc:	89fb      	ldrh	r3, [r7, #14]
 80010ce:	3301      	adds	r3, #1
 80010d0:	81fb      	strh	r3, [r7, #14]
 80010d2:	89fa      	ldrh	r2, [r7, #14]
 80010d4:	883b      	ldrh	r3, [r7, #0]
 80010d6:	429a      	cmp	r2, r3
 80010d8:	d3dc      	bcc.n	8001094 <read_inputs+0x2c>
    }
}
 80010da:	bf00      	nop
 80010dc:	bf00      	nop
 80010de:	3710      	adds	r7, #16
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	0801761c 	.word	0x0801761c
 80010e8:	200005a0 	.word	0x200005a0

080010ec <read_holding>:

//Lectura de holdings
void read_holding(uint8_t *repl_buf, uint16_t address, uint16_t quantity) {
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b084      	sub	sp, #16
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
 80010f4:	460b      	mov	r3, r1
 80010f6:	807b      	strh	r3, [r7, #2]
 80010f8:	4613      	mov	r3, r2
 80010fa:	803b      	strh	r3, [r7, #0]
	SendString("leo holding \r");
 80010fc:	481a      	ldr	r0, [pc, #104]	@ (8001168 <read_holding+0x7c>)
 80010fe:	f7ff fc7d 	bl	80009fc <SendString>
    // Cantidad de bytes necesarios: cada registro holding es de 2 bytes (16 bits)
    uint16_t byte_count = quantity * 2;
 8001102:	883b      	ldrh	r3, [r7, #0]
 8001104:	005b      	lsls	r3, r3, #1
 8001106:	81bb      	strh	r3, [r7, #12]

    // Coloca la cantidad de bytes en el byte [8] del buffer de respuesta (luego de la cabecera)
    repl_buf[8] = byte_count;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	3308      	adds	r3, #8
 800110c:	89ba      	ldrh	r2, [r7, #12]
 800110e:	b2d2      	uxtb	r2, r2
 8001110:	701a      	strb	r2, [r3, #0]

    // Copiar los valores de los registros holding solicitados
    for (uint16_t i = 0; i < quantity; i++) {
 8001112:	2300      	movs	r3, #0
 8001114:	81fb      	strh	r3, [r7, #14]
 8001116:	e01e      	b.n	8001156 <read_holding+0x6a>
        uint16_t reg_index = address + i;
 8001118:	887a      	ldrh	r2, [r7, #2]
 800111a:	89fb      	ldrh	r3, [r7, #14]
 800111c:	4413      	add	r3, r2
 800111e:	817b      	strh	r3, [r7, #10]
        uint16_t holding_value = holding_registers[reg_index];  // Valor del registro holding
 8001120:	897b      	ldrh	r3, [r7, #10]
 8001122:	4a12      	ldr	r2, [pc, #72]	@ (800116c <read_holding+0x80>)
 8001124:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001128:	813b      	strh	r3, [r7, #8]

        // Poner los 2 bytes del registro holding en el buffer de respuesta
        repl_buf[9 + (i * 2)]     = (holding_value >> 8) & 0xFF;  // Byte alto
 800112a:	893b      	ldrh	r3, [r7, #8]
 800112c:	0a1b      	lsrs	r3, r3, #8
 800112e:	b29a      	uxth	r2, r3
 8001130:	89fb      	ldrh	r3, [r7, #14]
 8001132:	005b      	lsls	r3, r3, #1
 8001134:	3309      	adds	r3, #9
 8001136:	4619      	mov	r1, r3
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	440b      	add	r3, r1
 800113c:	b2d2      	uxtb	r2, r2
 800113e:	701a      	strb	r2, [r3, #0]
        repl_buf[9 + (i * 2) + 1] = holding_value & 0xFF;         // Byte bajo
 8001140:	89fb      	ldrh	r3, [r7, #14]
 8001142:	005b      	lsls	r3, r3, #1
 8001144:	330a      	adds	r3, #10
 8001146:	687a      	ldr	r2, [r7, #4]
 8001148:	4413      	add	r3, r2
 800114a:	893a      	ldrh	r2, [r7, #8]
 800114c:	b2d2      	uxtb	r2, r2
 800114e:	701a      	strb	r2, [r3, #0]
    for (uint16_t i = 0; i < quantity; i++) {
 8001150:	89fb      	ldrh	r3, [r7, #14]
 8001152:	3301      	adds	r3, #1
 8001154:	81fb      	strh	r3, [r7, #14]
 8001156:	89fa      	ldrh	r2, [r7, #14]
 8001158:	883b      	ldrh	r3, [r7, #0]
 800115a:	429a      	cmp	r2, r3
 800115c:	d3dc      	bcc.n	8001118 <read_holding+0x2c>
    }
}
 800115e:	bf00      	nop
 8001160:	bf00      	nop
 8001162:	3710      	adds	r7, #16
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	0801762c 	.word	0x0801762c
 800116c:	200005b4 	.word	0x200005b4

08001170 <write_single_coil>:

void write_single_coil(uint16_t address, uint16_t val) {
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
 8001176:	4603      	mov	r3, r0
 8001178:	460a      	mov	r2, r1
 800117a:	80fb      	strh	r3, [r7, #6]
 800117c:	4613      	mov	r3, r2
 800117e:	80bb      	strh	r3, [r7, #4]
	SendString("escribo coils \r");
 8001180:	4817      	ldr	r0, [pc, #92]	@ (80011e0 <write_single_coil+0x70>)
 8001182:	f7ff fc3b 	bl	80009fc <SendString>
    // Verificar si el valor es válido para una coil (0xFF00 para ON, 0x0000 para OFF)
    if (val == 0xFF00) {
 8001186:	88bb      	ldrh	r3, [r7, #4]
 8001188:	f5b3 4f7f 	cmp.w	r3, #65280	@ 0xff00
 800118c:	d110      	bne.n	80011b0 <write_single_coil+0x40>
        // Establecer la coil en ON (1)
    	osMutexWait(coilMutexHandle, osWaitForever);
 800118e:	4b15      	ldr	r3, [pc, #84]	@ (80011e4 <write_single_coil+0x74>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f04f 31ff 	mov.w	r1, #4294967295
 8001196:	4618      	mov	r0, r3
 8001198:	f004 fcea 	bl	8005b70 <osMutexWait>
        coil_status[address] = 1;
 800119c:	88fb      	ldrh	r3, [r7, #6]
 800119e:	4a12      	ldr	r2, [pc, #72]	@ (80011e8 <write_single_coil+0x78>)
 80011a0:	2101      	movs	r1, #1
 80011a2:	54d1      	strb	r1, [r2, r3]
        osMutexRelease(coilMutexHandle);
 80011a4:	4b0f      	ldr	r3, [pc, #60]	@ (80011e4 <write_single_coil+0x74>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4618      	mov	r0, r3
 80011aa:	f004 fd2f 	bl	8005c0c <osMutexRelease>
 80011ae:	e014      	b.n	80011da <write_single_coil+0x6a>
    } else if (val == 0x0000) {
 80011b0:	88bb      	ldrh	r3, [r7, #4]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d110      	bne.n	80011d8 <write_single_coil+0x68>
        // Establecer la coil en OFF (0)
    	osMutexWait(coilMutexHandle, osWaitForever);
 80011b6:	4b0b      	ldr	r3, [pc, #44]	@ (80011e4 <write_single_coil+0x74>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f04f 31ff 	mov.w	r1, #4294967295
 80011be:	4618      	mov	r0, r3
 80011c0:	f004 fcd6 	bl	8005b70 <osMutexWait>
        coil_status[address] = 0;
 80011c4:	88fb      	ldrh	r3, [r7, #6]
 80011c6:	4a08      	ldr	r2, [pc, #32]	@ (80011e8 <write_single_coil+0x78>)
 80011c8:	2100      	movs	r1, #0
 80011ca:	54d1      	strb	r1, [r2, r3]
        osMutexRelease(coilMutexHandle);
 80011cc:	4b05      	ldr	r3, [pc, #20]	@ (80011e4 <write_single_coil+0x74>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4618      	mov	r0, r3
 80011d2:	f004 fd1b 	bl	8005c0c <osMutexRelease>
 80011d6:	e000      	b.n	80011da <write_single_coil+0x6a>
    } else {
        // Valor inválido, manejar error según el protocolo Modbus
        return;
 80011d8:	bf00      	nop
    }

    // Opcional: aquí podrías generar una respuesta Modbus o hacer algo con los cambios.
}
 80011da:	3708      	adds	r7, #8
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	0801763c 	.word	0x0801763c
 80011e4:	2000049c 	.word	0x2000049c
 80011e8:	20000000 	.word	0x20000000

080011ec <write_single_holding>:

void write_single_holding(uint16_t address, uint16_t val) {
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	4603      	mov	r3, r0
 80011f4:	460a      	mov	r2, r1
 80011f6:	80fb      	strh	r3, [r7, #6]
 80011f8:	4613      	mov	r3, r2
 80011fa:	80bb      	strh	r3, [r7, #4]
	SendString("escribo holding \r");
 80011fc:	4805      	ldr	r0, [pc, #20]	@ (8001214 <write_single_holding+0x28>)
 80011fe:	f7ff fbfd 	bl	80009fc <SendString>
    // Escribir el valor directamente en el holding register correspondiente
    holding_registers[address] = val;
 8001202:	88fb      	ldrh	r3, [r7, #6]
 8001204:	4904      	ldr	r1, [pc, #16]	@ (8001218 <write_single_holding+0x2c>)
 8001206:	88ba      	ldrh	r2, [r7, #4]
 8001208:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 800120c:	bf00      	nop
 800120e:	3708      	adds	r7, #8
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	0801764c 	.word	0x0801764c
 8001218:	200005b4 	.word	0x200005b4

0800121c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001222:	2300      	movs	r3, #0
 8001224:	607b      	str	r3, [r7, #4]
 8001226:	4b12      	ldr	r3, [pc, #72]	@ (8001270 <HAL_MspInit+0x54>)
 8001228:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800122a:	4a11      	ldr	r2, [pc, #68]	@ (8001270 <HAL_MspInit+0x54>)
 800122c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001230:	6453      	str	r3, [r2, #68]	@ 0x44
 8001232:	4b0f      	ldr	r3, [pc, #60]	@ (8001270 <HAL_MspInit+0x54>)
 8001234:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001236:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800123a:	607b      	str	r3, [r7, #4]
 800123c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800123e:	2300      	movs	r3, #0
 8001240:	603b      	str	r3, [r7, #0]
 8001242:	4b0b      	ldr	r3, [pc, #44]	@ (8001270 <HAL_MspInit+0x54>)
 8001244:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001246:	4a0a      	ldr	r2, [pc, #40]	@ (8001270 <HAL_MspInit+0x54>)
 8001248:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800124c:	6413      	str	r3, [r2, #64]	@ 0x40
 800124e:	4b08      	ldr	r3, [pc, #32]	@ (8001270 <HAL_MspInit+0x54>)
 8001250:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001252:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001256:	603b      	str	r3, [r7, #0]
 8001258:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800125a:	2200      	movs	r2, #0
 800125c:	210f      	movs	r1, #15
 800125e:	f06f 0001 	mvn.w	r0, #1
 8001262:	f000 fde9 	bl	8001e38 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001266:	bf00      	nop
 8001268:	3708      	adds	r7, #8
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	40023800 	.word	0x40023800

08001274 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b08a      	sub	sp, #40	@ 0x28
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800127c:	f107 0314 	add.w	r3, r7, #20
 8001280:	2200      	movs	r2, #0
 8001282:	601a      	str	r2, [r3, #0]
 8001284:	605a      	str	r2, [r3, #4]
 8001286:	609a      	str	r2, [r3, #8]
 8001288:	60da      	str	r2, [r3, #12]
 800128a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a19      	ldr	r2, [pc, #100]	@ (80012f8 <HAL_UART_MspInit+0x84>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d12c      	bne.n	80012f0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001296:	2300      	movs	r3, #0
 8001298:	613b      	str	r3, [r7, #16]
 800129a:	4b18      	ldr	r3, [pc, #96]	@ (80012fc <HAL_UART_MspInit+0x88>)
 800129c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800129e:	4a17      	ldr	r2, [pc, #92]	@ (80012fc <HAL_UART_MspInit+0x88>)
 80012a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80012a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80012a6:	4b15      	ldr	r3, [pc, #84]	@ (80012fc <HAL_UART_MspInit+0x88>)
 80012a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012aa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80012ae:	613b      	str	r3, [r7, #16]
 80012b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80012b2:	2300      	movs	r3, #0
 80012b4:	60fb      	str	r3, [r7, #12]
 80012b6:	4b11      	ldr	r3, [pc, #68]	@ (80012fc <HAL_UART_MspInit+0x88>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ba:	4a10      	ldr	r2, [pc, #64]	@ (80012fc <HAL_UART_MspInit+0x88>)
 80012bc:	f043 0308 	orr.w	r3, r3, #8
 80012c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80012c2:	4b0e      	ldr	r3, [pc, #56]	@ (80012fc <HAL_UART_MspInit+0x88>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012c6:	f003 0308 	and.w	r3, r3, #8
 80012ca:	60fb      	str	r3, [r7, #12]
 80012cc:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80012ce:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80012d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d4:	2302      	movs	r3, #2
 80012d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d8:	2300      	movs	r3, #0
 80012da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012dc:	2303      	movs	r3, #3
 80012de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80012e0:	2307      	movs	r3, #7
 80012e2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012e4:	f107 0314 	add.w	r3, r7, #20
 80012e8:	4619      	mov	r1, r3
 80012ea:	4805      	ldr	r0, [pc, #20]	@ (8001300 <HAL_UART_MspInit+0x8c>)
 80012ec:	f002 f82a 	bl	8003344 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80012f0:	bf00      	nop
 80012f2:	3728      	adds	r7, #40	@ 0x28
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	40004800 	.word	0x40004800
 80012fc:	40023800 	.word	0x40023800
 8001300:	40020c00 	.word	0x40020c00

08001304 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b08e      	sub	sp, #56	@ 0x38
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800130c:	2300      	movs	r3, #0
 800130e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001310:	2300      	movs	r3, #0
 8001312:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001314:	2300      	movs	r3, #0
 8001316:	60fb      	str	r3, [r7, #12]
 8001318:	4b33      	ldr	r3, [pc, #204]	@ (80013e8 <HAL_InitTick+0xe4>)
 800131a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800131c:	4a32      	ldr	r2, [pc, #200]	@ (80013e8 <HAL_InitTick+0xe4>)
 800131e:	f043 0310 	orr.w	r3, r3, #16
 8001322:	6413      	str	r3, [r2, #64]	@ 0x40
 8001324:	4b30      	ldr	r3, [pc, #192]	@ (80013e8 <HAL_InitTick+0xe4>)
 8001326:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001328:	f003 0310 	and.w	r3, r3, #16
 800132c:	60fb      	str	r3, [r7, #12]
 800132e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001330:	f107 0210 	add.w	r2, r7, #16
 8001334:	f107 0314 	add.w	r3, r7, #20
 8001338:	4611      	mov	r1, r2
 800133a:	4618      	mov	r0, r3
 800133c:	f002 fe60 	bl	8004000 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001340:	6a3b      	ldr	r3, [r7, #32]
 8001342:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001344:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001346:	2b00      	cmp	r3, #0
 8001348:	d103      	bne.n	8001352 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800134a:	f002 fe31 	bl	8003fb0 <HAL_RCC_GetPCLK1Freq>
 800134e:	6378      	str	r0, [r7, #52]	@ 0x34
 8001350:	e004      	b.n	800135c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001352:	f002 fe2d 	bl	8003fb0 <HAL_RCC_GetPCLK1Freq>
 8001356:	4603      	mov	r3, r0
 8001358:	005b      	lsls	r3, r3, #1
 800135a:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800135c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800135e:	4a23      	ldr	r2, [pc, #140]	@ (80013ec <HAL_InitTick+0xe8>)
 8001360:	fba2 2303 	umull	r2, r3, r2, r3
 8001364:	0c9b      	lsrs	r3, r3, #18
 8001366:	3b01      	subs	r3, #1
 8001368:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800136a:	4b21      	ldr	r3, [pc, #132]	@ (80013f0 <HAL_InitTick+0xec>)
 800136c:	4a21      	ldr	r2, [pc, #132]	@ (80013f4 <HAL_InitTick+0xf0>)
 800136e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001370:	4b1f      	ldr	r3, [pc, #124]	@ (80013f0 <HAL_InitTick+0xec>)
 8001372:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001376:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001378:	4a1d      	ldr	r2, [pc, #116]	@ (80013f0 <HAL_InitTick+0xec>)
 800137a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800137c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800137e:	4b1c      	ldr	r3, [pc, #112]	@ (80013f0 <HAL_InitTick+0xec>)
 8001380:	2200      	movs	r2, #0
 8001382:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001384:	4b1a      	ldr	r3, [pc, #104]	@ (80013f0 <HAL_InitTick+0xec>)
 8001386:	2200      	movs	r2, #0
 8001388:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800138a:	4b19      	ldr	r3, [pc, #100]	@ (80013f0 <HAL_InitTick+0xec>)
 800138c:	2200      	movs	r2, #0
 800138e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001390:	4817      	ldr	r0, [pc, #92]	@ (80013f0 <HAL_InitTick+0xec>)
 8001392:	f002 fe67 	bl	8004064 <HAL_TIM_Base_Init>
 8001396:	4603      	mov	r3, r0
 8001398:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 800139c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d11b      	bne.n	80013dc <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80013a4:	4812      	ldr	r0, [pc, #72]	@ (80013f0 <HAL_InitTick+0xec>)
 80013a6:	f002 feb7 	bl	8004118 <HAL_TIM_Base_Start_IT>
 80013aa:	4603      	mov	r3, r0
 80013ac:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80013b0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d111      	bne.n	80013dc <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80013b8:	2036      	movs	r0, #54	@ 0x36
 80013ba:	f000 fd59 	bl	8001e70 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2b0f      	cmp	r3, #15
 80013c2:	d808      	bhi.n	80013d6 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80013c4:	2200      	movs	r2, #0
 80013c6:	6879      	ldr	r1, [r7, #4]
 80013c8:	2036      	movs	r0, #54	@ 0x36
 80013ca:	f000 fd35 	bl	8001e38 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80013ce:	4a0a      	ldr	r2, [pc, #40]	@ (80013f8 <HAL_InitTick+0xf4>)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6013      	str	r3, [r2, #0]
 80013d4:	e002      	b.n	80013dc <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80013d6:	2301      	movs	r3, #1
 80013d8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80013dc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	3738      	adds	r7, #56	@ 0x38
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	40023800 	.word	0x40023800
 80013ec:	431bde83 	.word	0x431bde83
 80013f0:	200005c8 	.word	0x200005c8
 80013f4:	40001000 	.word	0x40001000
 80013f8:	20000104 	.word	0x20000104

080013fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001400:	bf00      	nop
 8001402:	e7fd      	b.n	8001400 <NMI_Handler+0x4>

08001404 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001408:	bf00      	nop
 800140a:	e7fd      	b.n	8001408 <HardFault_Handler+0x4>

0800140c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001410:	bf00      	nop
 8001412:	e7fd      	b.n	8001410 <MemManage_Handler+0x4>

08001414 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001418:	bf00      	nop
 800141a:	e7fd      	b.n	8001418 <BusFault_Handler+0x4>

0800141c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001420:	bf00      	nop
 8001422:	e7fd      	b.n	8001420 <UsageFault_Handler+0x4>

08001424 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001428:	bf00      	nop
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr
	...

08001434 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001438:	4802      	ldr	r0, [pc, #8]	@ (8001444 <TIM6_DAC_IRQHandler+0x10>)
 800143a:	f002 fedd 	bl	80041f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800143e:	bf00      	nop
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	200005c8 	.word	0x200005c8

08001448 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 800144c:	4802      	ldr	r0, [pc, #8]	@ (8001458 <ETH_IRQHandler+0x10>)
 800144e:	f001 f8a3 	bl	8002598 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8001452:	bf00      	nop
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	2000534c 	.word	0x2000534c

0800145c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  return 1;
 8001460:	2301      	movs	r3, #1
}
 8001462:	4618      	mov	r0, r3
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr

0800146c <_kill>:

int _kill(int pid, int sig)
{
 800146c:	b480      	push	{r7}
 800146e:	b083      	sub	sp, #12
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
 8001474:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001476:	4b05      	ldr	r3, [pc, #20]	@ (800148c <_kill+0x20>)
 8001478:	2216      	movs	r2, #22
 800147a:	601a      	str	r2, [r3, #0]
  return -1;
 800147c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001480:	4618      	mov	r0, r3
 8001482:	370c      	adds	r7, #12
 8001484:	46bd      	mov	sp, r7
 8001486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148a:	4770      	bx	lr
 800148c:	2000ede0 	.word	0x2000ede0

08001490 <_exit>:

void _exit (int status)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b082      	sub	sp, #8
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001498:	f04f 31ff 	mov.w	r1, #4294967295
 800149c:	6878      	ldr	r0, [r7, #4]
 800149e:	f7ff ffe5 	bl	800146c <_kill>
  while (1) {}    /* Make sure we hang here */
 80014a2:	bf00      	nop
 80014a4:	e7fd      	b.n	80014a2 <_exit+0x12>

080014a6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014a6:	b580      	push	{r7, lr}
 80014a8:	b086      	sub	sp, #24
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	60f8      	str	r0, [r7, #12]
 80014ae:	60b9      	str	r1, [r7, #8]
 80014b0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014b2:	2300      	movs	r3, #0
 80014b4:	617b      	str	r3, [r7, #20]
 80014b6:	e00a      	b.n	80014ce <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80014b8:	f3af 8000 	nop.w
 80014bc:	4601      	mov	r1, r0
 80014be:	68bb      	ldr	r3, [r7, #8]
 80014c0:	1c5a      	adds	r2, r3, #1
 80014c2:	60ba      	str	r2, [r7, #8]
 80014c4:	b2ca      	uxtb	r2, r1
 80014c6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	3301      	adds	r3, #1
 80014cc:	617b      	str	r3, [r7, #20]
 80014ce:	697a      	ldr	r2, [r7, #20]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	429a      	cmp	r2, r3
 80014d4:	dbf0      	blt.n	80014b8 <_read+0x12>
  }

  return len;
 80014d6:	687b      	ldr	r3, [r7, #4]
}
 80014d8:	4618      	mov	r0, r3
 80014da:	3718      	adds	r7, #24
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}

080014e0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b086      	sub	sp, #24
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	60f8      	str	r0, [r7, #12]
 80014e8:	60b9      	str	r1, [r7, #8]
 80014ea:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014ec:	2300      	movs	r3, #0
 80014ee:	617b      	str	r3, [r7, #20]
 80014f0:	e009      	b.n	8001506 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80014f2:	68bb      	ldr	r3, [r7, #8]
 80014f4:	1c5a      	adds	r2, r3, #1
 80014f6:	60ba      	str	r2, [r7, #8]
 80014f8:	781b      	ldrb	r3, [r3, #0]
 80014fa:	4618      	mov	r0, r3
 80014fc:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	3301      	adds	r3, #1
 8001504:	617b      	str	r3, [r7, #20]
 8001506:	697a      	ldr	r2, [r7, #20]
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	429a      	cmp	r2, r3
 800150c:	dbf1      	blt.n	80014f2 <_write+0x12>
  }
  return len;
 800150e:	687b      	ldr	r3, [r7, #4]
}
 8001510:	4618      	mov	r0, r3
 8001512:	3718      	adds	r7, #24
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}

08001518 <_close>:

int _close(int file)
{
 8001518:	b480      	push	{r7}
 800151a:	b083      	sub	sp, #12
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001520:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001524:	4618      	mov	r0, r3
 8001526:	370c      	adds	r7, #12
 8001528:	46bd      	mov	sp, r7
 800152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152e:	4770      	bx	lr

08001530 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001530:	b480      	push	{r7}
 8001532:	b083      	sub	sp, #12
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
 8001538:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001540:	605a      	str	r2, [r3, #4]
  return 0;
 8001542:	2300      	movs	r3, #0
}
 8001544:	4618      	mov	r0, r3
 8001546:	370c      	adds	r7, #12
 8001548:	46bd      	mov	sp, r7
 800154a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154e:	4770      	bx	lr

08001550 <_isatty>:

int _isatty(int file)
{
 8001550:	b480      	push	{r7}
 8001552:	b083      	sub	sp, #12
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001558:	2301      	movs	r3, #1
}
 800155a:	4618      	mov	r0, r3
 800155c:	370c      	adds	r7, #12
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr

08001566 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001566:	b480      	push	{r7}
 8001568:	b085      	sub	sp, #20
 800156a:	af00      	add	r7, sp, #0
 800156c:	60f8      	str	r0, [r7, #12]
 800156e:	60b9      	str	r1, [r7, #8]
 8001570:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001572:	2300      	movs	r3, #0
}
 8001574:	4618      	mov	r0, r3
 8001576:	3714      	adds	r7, #20
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr

08001580 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001580:	b480      	push	{r7}
 8001582:	b087      	sub	sp, #28
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001588:	4a14      	ldr	r2, [pc, #80]	@ (80015dc <_sbrk+0x5c>)
 800158a:	4b15      	ldr	r3, [pc, #84]	@ (80015e0 <_sbrk+0x60>)
 800158c:	1ad3      	subs	r3, r2, r3
 800158e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001594:	4b13      	ldr	r3, [pc, #76]	@ (80015e4 <_sbrk+0x64>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	2b00      	cmp	r3, #0
 800159a:	d102      	bne.n	80015a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800159c:	4b11      	ldr	r3, [pc, #68]	@ (80015e4 <_sbrk+0x64>)
 800159e:	4a12      	ldr	r2, [pc, #72]	@ (80015e8 <_sbrk+0x68>)
 80015a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015a2:	4b10      	ldr	r3, [pc, #64]	@ (80015e4 <_sbrk+0x64>)
 80015a4:	681a      	ldr	r2, [r3, #0]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	4413      	add	r3, r2
 80015aa:	693a      	ldr	r2, [r7, #16]
 80015ac:	429a      	cmp	r2, r3
 80015ae:	d205      	bcs.n	80015bc <_sbrk+0x3c>
  {
    errno = ENOMEM;
 80015b0:	4b0e      	ldr	r3, [pc, #56]	@ (80015ec <_sbrk+0x6c>)
 80015b2:	220c      	movs	r2, #12
 80015b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015b6:	f04f 33ff 	mov.w	r3, #4294967295
 80015ba:	e009      	b.n	80015d0 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 80015bc:	4b09      	ldr	r3, [pc, #36]	@ (80015e4 <_sbrk+0x64>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015c2:	4b08      	ldr	r3, [pc, #32]	@ (80015e4 <_sbrk+0x64>)
 80015c4:	681a      	ldr	r2, [r3, #0]
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	4413      	add	r3, r2
 80015ca:	4a06      	ldr	r2, [pc, #24]	@ (80015e4 <_sbrk+0x64>)
 80015cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015ce:	68fb      	ldr	r3, [r7, #12]
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	371c      	adds	r7, #28
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr
 80015dc:	20030000 	.word	0x20030000
 80015e0:	00000400 	.word	0x00000400
 80015e4:	20000610 	.word	0x20000610
 80015e8:	2000edf0 	.word	0x2000edf0
 80015ec:	2000ede0 	.word	0x2000ede0

080015f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015f4:	4b06      	ldr	r3, [pc, #24]	@ (8001610 <SystemInit+0x20>)
 80015f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80015fa:	4a05      	ldr	r2, [pc, #20]	@ (8001610 <SystemInit+0x20>)
 80015fc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001600:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001604:	bf00      	nop
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr
 800160e:	bf00      	nop
 8001610:	e000ed00 	.word	0xe000ed00

08001614 <tcp_thread>:
static void process_client_connection(struct netconn *client_conn);
static err_t initialize_server();


// Función principal del hilo TCP
static void tcp_thread(void *arg) {
 8001614:	b580      	push	{r7, lr}
 8001616:	b084      	sub	sp, #16
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
    err_t server_err, accept_err;

    SendString("Estoy en thread principal***********************************\r");
 800161c:	4822      	ldr	r0, [pc, #136]	@ (80016a8 <tcp_thread+0x94>)
 800161e:	f7ff f9ed 	bl	80009fc <SendString>

    while (1) {
        // Inicializar el servidor
        server_err = initialize_server();
 8001622:	f000 f8d7 	bl	80017d4 <initialize_server>
 8001626:	4603      	mov	r3, r0
 8001628:	73fb      	strb	r3, [r7, #15]
        if (server_err != ERR_OK) {
 800162a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d007      	beq.n	8001642 <tcp_thread+0x2e>
            //printf("Error: Reintentando iniciar el servidor en %d ms...\n", RETRY_DELAY_MS);
        	SendString("Error: Reintentando iniciar el servidor");
 8001632:	481e      	ldr	r0, [pc, #120]	@ (80016ac <tcp_thread+0x98>)
 8001634:	f7ff f9e2 	bl	80009fc <SendString>
            sys_msleep(RETRY_DELAY_MS); // Esperar antes de reintentar (un sleep de la propia librería lwip)
 8001638:	f241 3088 	movw	r0, #5000	@ 0x1388
 800163c:	f00b fb96 	bl	800cd6c <sys_msleep>
            continue;
 8001640:	e030      	b.n	80016a4 <tcp_thread+0x90>
        }

        // Aceptar conexiones entrantes
        while (1) {
            accept_err = netconn_accept(conn, &newconn);
 8001642:	4b1b      	ldr	r3, [pc, #108]	@ (80016b0 <tcp_thread+0x9c>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	491b      	ldr	r1, [pc, #108]	@ (80016b4 <tcp_thread+0xa0>)
 8001648:	4618      	mov	r0, r3
 800164a:	f007 fb49 	bl	8008ce0 <netconn_accept>
 800164e:	4603      	mov	r3, r0
 8001650:	73bb      	strb	r3, [r7, #14]
            if (accept_err == ERR_OK) {
 8001652:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d108      	bne.n	800166c <tcp_thread+0x58>
                //printf("Cliente conectado.\n");
            	SendString("Cliente conectado...\r");
 800165a:	4817      	ldr	r0, [pc, #92]	@ (80016b8 <tcp_thread+0xa4>)
 800165c:	f7ff f9ce 	bl	80009fc <SendString>
                process_client_connection(newconn); // Procesar conexión del cliente
 8001660:	4b14      	ldr	r3, [pc, #80]	@ (80016b4 <tcp_thread+0xa0>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4618      	mov	r0, r3
 8001666:	f000 f863 	bl	8001730 <process_client_connection>
 800166a:	e7ea      	b.n	8001642 <tcp_thread+0x2e>
            } else {
                //printf("Error al aceptar conexión (Error: %d). Reintentando...\n", accept_err);
            	SendString("Error al aceptar conexión Reintentando...\n");
 800166c:	4813      	ldr	r0, [pc, #76]	@ (80016bc <tcp_thread+0xa8>)
 800166e:	f7ff f9c5 	bl	80009fc <SendString>
                break; // Salir al detectar un error en el servidor
 8001672:	bf00      	nop
            }
        }

        // Liberar recursos del servidor en caso de error
        //printf("Cerrando servidor...\n");
        SendString("Cerrando servidor...\n");
 8001674:	4812      	ldr	r0, [pc, #72]	@ (80016c0 <tcp_thread+0xac>)
 8001676:	f7ff f9c1 	bl	80009fc <SendString>
        netconn_close(conn);
 800167a:	4b0d      	ldr	r3, [pc, #52]	@ (80016b0 <tcp_thread+0x9c>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4618      	mov	r0, r3
 8001680:	f007 fece 	bl	8009420 <netconn_close>
        netconn_delete(conn);
 8001684:	4b0a      	ldr	r3, [pc, #40]	@ (80016b0 <tcp_thread+0x9c>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4618      	mov	r0, r3
 800168a:	f007 faa9 	bl	8008be0 <netconn_delete>
        conn = NULL;
 800168e:	4b08      	ldr	r3, [pc, #32]	@ (80016b0 <tcp_thread+0x9c>)
 8001690:	2200      	movs	r2, #0
 8001692:	601a      	str	r2, [r3, #0]

        // Reintentar después de un tiempo
        //printf("Reiniciando servidor en %d ms...\n", RETRY_DELAY_MS);
        SendString("Reiniciando servidor en ms...\n");
 8001694:	480b      	ldr	r0, [pc, #44]	@ (80016c4 <tcp_thread+0xb0>)
 8001696:	f7ff f9b1 	bl	80009fc <SendString>
        sys_msleep(RETRY_DELAY_MS);  //un sleep de la propia librería lwip
 800169a:	f241 3088 	movw	r0, #5000	@ 0x1388
 800169e:	f00b fb65 	bl	800cd6c <sys_msleep>
 80016a2:	e7be      	b.n	8001622 <tcp_thread+0xe>
        server_err = initialize_server();
 80016a4:	e7bd      	b.n	8001622 <tcp_thread+0xe>
 80016a6:	bf00      	nop
 80016a8:	08017660 	.word	0x08017660
 80016ac:	080176a0 	.word	0x080176a0
 80016b0:	20000614 	.word	0x20000614
 80016b4:	20000618 	.word	0x20000618
 80016b8:	080176c8 	.word	0x080176c8
 80016bc:	080176e0 	.word	0x080176e0
 80016c0:	0801770c 	.word	0x0801770c
 80016c4:	08017724 	.word	0x08017724

080016c8 <tcpserver_init>:





void tcpserver_init(void) {
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af02      	add	r7, sp, #8
	sys_thread_new("tcp_thread", tcp_thread, NULL, DEFAULT_THREAD_STACKSIZE,
 80016ce:	2300      	movs	r3, #0
 80016d0:	9300      	str	r3, [sp, #0]
 80016d2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80016d6:	2200      	movs	r2, #0
 80016d8:	4903      	ldr	r1, [pc, #12]	@ (80016e8 <tcpserver_init+0x20>)
 80016da:	4804      	ldr	r0, [pc, #16]	@ (80016ec <tcpserver_init+0x24>)
 80016dc:	f014 fcd4 	bl	8016088 <sys_thread_new>
			osPriorityNormal);
}
 80016e0:	bf00      	nop
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	08001615 	.word	0x08001615
 80016ec:	08017744 	.word	0x08017744

080016f0 <copyString>:

static void copyString(uint8_t* dest, uint8_t* src, unsigned num){
 80016f0:	b480      	push	{r7}
 80016f2:	b087      	sub	sp, #28
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	60f8      	str	r0, [r7, #12]
 80016f8:	60b9      	str	r1, [r7, #8]
 80016fa:	607a      	str	r2, [r7, #4]
	for(unsigned i = 0; i != num; ++i){
 80016fc:	2300      	movs	r3, #0
 80016fe:	617b      	str	r3, [r7, #20]
 8001700:	e00a      	b.n	8001718 <copyString+0x28>
		dest[i] = src[i];
 8001702:	68ba      	ldr	r2, [r7, #8]
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	441a      	add	r2, r3
 8001708:	68f9      	ldr	r1, [r7, #12]
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	440b      	add	r3, r1
 800170e:	7812      	ldrb	r2, [r2, #0]
 8001710:	701a      	strb	r2, [r3, #0]
	for(unsigned i = 0; i != num; ++i){
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	3301      	adds	r3, #1
 8001716:	617b      	str	r3, [r7, #20]
 8001718:	697a      	ldr	r2, [r7, #20]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	429a      	cmp	r2, r3
 800171e:	d1f0      	bne.n	8001702 <copyString+0x12>
	}
}
 8001720:	bf00      	nop
 8001722:	bf00      	nop
 8001724:	371c      	adds	r7, #28
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr
	...

08001730 <process_client_connection>:


/************************************************************************/
// Función para procesar una conexión de cliente
static void process_client_connection(struct netconn *client_conn) {
 8001730:	b580      	push	{r7, lr}
 8001732:	b086      	sub	sp, #24
 8001734:	af02      	add	r7, sp, #8
 8001736:	6078      	str	r0, [r7, #4]
    err_t recv_err;

    // Configurar timeout para evitar bloqueos indefinidos
    //netconn_set_recvtimeout(client_conn, 5000); // Timeout de 5 segundos

    while ((recv_err = netconn_recv(client_conn, &netbuf)) == ERR_OK) {
 8001738:	e02d      	b.n	8001796 <process_client_connection+0x66>
        do {
            copyString(mb_req_buf, netbuf->p->payload, netbuf->p->len); // Obtener mensaje del cliente
 800173a:	4b22      	ldr	r3, [pc, #136]	@ (80017c4 <process_client_connection+0x94>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	6859      	ldr	r1, [r3, #4]
 8001742:	4b20      	ldr	r3, [pc, #128]	@ (80017c4 <process_client_connection+0x94>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	895b      	ldrh	r3, [r3, #10]
 800174a:	461a      	mov	r2, r3
 800174c:	481e      	ldr	r0, [pc, #120]	@ (80017c8 <process_client_connection+0x98>)
 800174e:	f7ff ffcf 	bl	80016f0 <copyString>
            uint16_t buf_len = netbuf->p->len;
 8001752:	4b1c      	ldr	r3, [pc, #112]	@ (80017c4 <process_client_connection+0x94>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	895b      	ldrh	r3, [r3, #10]
 800175a:	81bb      	strh	r3, [r7, #12]
            buf_len = mb_process(mb_repl_buf, mb_req_buf, buf_len);    // Procesar datos
 800175c:	89bb      	ldrh	r3, [r7, #12]
 800175e:	461a      	mov	r2, r3
 8001760:	4919      	ldr	r1, [pc, #100]	@ (80017c8 <process_client_connection+0x98>)
 8001762:	481a      	ldr	r0, [pc, #104]	@ (80017cc <process_client_connection+0x9c>)
 8001764:	f7ff f9c4 	bl	8000af0 <mb_process>
 8001768:	4603      	mov	r3, r0
 800176a:	81bb      	strh	r3, [r7, #12]
            netconn_write(client_conn, mb_repl_buf, buf_len, NETCONN_COPY); // Responder al cliente
 800176c:	89ba      	ldrh	r2, [r7, #12]
 800176e:	2300      	movs	r3, #0
 8001770:	9300      	str	r3, [sp, #0]
 8001772:	2301      	movs	r3, #1
 8001774:	4915      	ldr	r1, [pc, #84]	@ (80017cc <process_client_connection+0x9c>)
 8001776:	6878      	ldr	r0, [r7, #4]
 8001778:	f007 fd50 	bl	800921c <netconn_write_partly>
        } while (netbuf_next(netbuf) > 0);
 800177c:	4b11      	ldr	r3, [pc, #68]	@ (80017c4 <process_client_connection+0x94>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4618      	mov	r0, r3
 8001782:	f009 fa7f 	bl	800ac84 <netbuf_next>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	dcd6      	bgt.n	800173a <process_client_connection+0xa>

        netbuf_delete(netbuf); // Liberar el buffer después de procesarlo
 800178c:	4b0d      	ldr	r3, [pc, #52]	@ (80017c4 <process_client_connection+0x94>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4618      	mov	r0, r3
 8001792:	f009 fa57 	bl	800ac44 <netbuf_delete>
    while ((recv_err = netconn_recv(client_conn, &netbuf)) == ERR_OK) {
 8001796:	490b      	ldr	r1, [pc, #44]	@ (80017c4 <process_client_connection+0x94>)
 8001798:	6878      	ldr	r0, [r7, #4]
 800179a:	f007 fcc5 	bl	8009128 <netconn_recv>
 800179e:	4603      	mov	r3, r0
 80017a0:	73fb      	strb	r3, [r7, #15]
 80017a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d0c7      	beq.n	800173a <process_client_connection+0xa>
    }

    // Cerrar y liberar la conexión del cliente
    netconn_close(client_conn);
 80017aa:	6878      	ldr	r0, [r7, #4]
 80017ac:	f007 fe38 	bl	8009420 <netconn_close>
    netconn_delete(client_conn);
 80017b0:	6878      	ldr	r0, [r7, #4]
 80017b2:	f007 fa15 	bl	8008be0 <netconn_delete>
    SendString("Desconecto...\r");
 80017b6:	4806      	ldr	r0, [pc, #24]	@ (80017d0 <process_client_connection+0xa0>)
 80017b8:	f7ff f920 	bl	80009fc <SendString>
}
 80017bc:	bf00      	nop
 80017be:	3710      	adds	r7, #16
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	2000061c 	.word	0x2000061c
 80017c8:	20000620 	.word	0x20000620
 80017cc:	20000724 	.word	0x20000724
 80017d0:	08017750 	.word	0x08017750

080017d4 <initialize_server>:

// Función para inicializar la conexión TCP
static err_t initialize_server() {
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b082      	sub	sp, #8
 80017d8:	af00      	add	r7, sp, #0
    conn = netconn_new(NETCONN_TCP);
 80017da:	2200      	movs	r2, #0
 80017dc:	2100      	movs	r1, #0
 80017de:	2010      	movs	r0, #16
 80017e0:	f007 f960 	bl	8008aa4 <netconn_new_with_proto_and_callback>
 80017e4:	4603      	mov	r3, r0
 80017e6:	4a24      	ldr	r2, [pc, #144]	@ (8001878 <initialize_server+0xa4>)
 80017e8:	6013      	str	r3, [r2, #0]
    if (conn == NULL) {
 80017ea:	4b23      	ldr	r3, [pc, #140]	@ (8001878 <initialize_server+0xa4>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d105      	bne.n	80017fe <initialize_server+0x2a>
        //printf("Error: No se pudo crear la conexión.\n");
    	SendString("Error: No se pudo crear la conexión.\n");
 80017f2:	4822      	ldr	r0, [pc, #136]	@ (800187c <initialize_server+0xa8>)
 80017f4:	f7ff f902 	bl	80009fc <SendString>
        return ERR_MEM;
 80017f8:	f04f 33ff 	mov.w	r3, #4294967295
 80017fc:	e038      	b.n	8001870 <initialize_server+0x9c>
    }


    err_t err = netconn_bind(conn, IP_ADDR_ANY, MB_TCP_PORT);
 80017fe:	4b1e      	ldr	r3, [pc, #120]	@ (8001878 <initialize_server+0xa4>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f44f 72fb 	mov.w	r2, #502	@ 0x1f6
 8001806:	491e      	ldr	r1, [pc, #120]	@ (8001880 <initialize_server+0xac>)
 8001808:	4618      	mov	r0, r3
 800180a:	f007 fa05 	bl	8008c18 <netconn_bind>
 800180e:	4603      	mov	r3, r0
 8001810:	71fb      	strb	r3, [r7, #7]
    if (err != ERR_OK) {
 8001812:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d00d      	beq.n	8001836 <initialize_server+0x62>
        //printf("Error: No se pudo enlazar al puerto %d (Error: %d).\n", MB_TCP_PORT, err);
    	SendString("Error: No se pudo enlazar al puerto\n");
 800181a:	481a      	ldr	r0, [pc, #104]	@ (8001884 <initialize_server+0xb0>)
 800181c:	f7ff f8ee 	bl	80009fc <SendString>
        netconn_delete(conn);
 8001820:	4b15      	ldr	r3, [pc, #84]	@ (8001878 <initialize_server+0xa4>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4618      	mov	r0, r3
 8001826:	f007 f9db 	bl	8008be0 <netconn_delete>
        conn = NULL;
 800182a:	4b13      	ldr	r3, [pc, #76]	@ (8001878 <initialize_server+0xa4>)
 800182c:	2200      	movs	r2, #0
 800182e:	601a      	str	r2, [r3, #0]
        return err;
 8001830:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001834:	e01c      	b.n	8001870 <initialize_server+0x9c>
    }

    osDelay(1000);
 8001836:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800183a:	f004 f96d 	bl	8005b18 <osDelay>
    SendString("Activando Keep-Alive...\r");
 800183e:	4812      	ldr	r0, [pc, #72]	@ (8001888 <initialize_server+0xb4>)
 8001840:	f7ff f8dc 	bl	80009fc <SendString>


    //netconn_set_keepalive(newconn, 1);
    enable_keepalive(conn);
 8001844:	4b0c      	ldr	r3, [pc, #48]	@ (8001878 <initialize_server+0xa4>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4618      	mov	r0, r3
 800184a:	f000 f823 	bl	8001894 <enable_keepalive>

    netconn_listen(conn); // Escuchar conexiones entrantes
 800184e:	4b0a      	ldr	r3, [pc, #40]	@ (8001878 <initialize_server+0xa4>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	21ff      	movs	r1, #255	@ 0xff
 8001854:	4618      	mov	r0, r3
 8001856:	f007 fa17 	bl	8008c88 <netconn_listen_with_backlog>
    //printf("Servidor TCP escuchando en el puerto %d.\n", MB_TCP_PORT);
    SendString("Servidor TCP escuchando en el puerto: ");
 800185a:	480c      	ldr	r0, [pc, #48]	@ (800188c <initialize_server+0xb8>)
 800185c:	f7ff f8ce 	bl	80009fc <SendString>
    SendNumber(MB_TCP_PORT);
 8001860:	f44f 70fb 	mov.w	r0, #502	@ 0x1f6
 8001864:	f7ff f8f0 	bl	8000a48 <SendNumber>
    SendString("\r");
 8001868:	4809      	ldr	r0, [pc, #36]	@ (8001890 <initialize_server+0xbc>)
 800186a:	f7ff f8c7 	bl	80009fc <SendString>
    return ERR_OK;
 800186e:	2300      	movs	r3, #0
}
 8001870:	4618      	mov	r0, r3
 8001872:	3708      	adds	r7, #8
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	20000614 	.word	0x20000614
 800187c:	08017760 	.word	0x08017760
 8001880:	0801aea4 	.word	0x0801aea4
 8001884:	08017788 	.word	0x08017788
 8001888:	080177b0 	.word	0x080177b0
 800188c:	080177cc 	.word	0x080177cc
 8001890:	080177f4 	.word	0x080177f4

08001894 <enable_keepalive>:

void enable_keepalive(struct netconn *conn) {
 8001894:	b480      	push	{r7}
 8001896:	b085      	sub	sp, #20
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
    if (conn != NULL && conn->pcb.tcp != NULL) {
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d01b      	beq.n	80018da <enable_keepalive+0x46>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d017      	beq.n	80018da <enable_keepalive+0x46>
        struct tcp_pcb *pcb = conn->pcb.tcp;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	60fb      	str	r3, [r7, #12]

        // Activar opción KEEPALIVE
        pcb->so_options |= SOF_KEEPALIVE;
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	7a5b      	ldrb	r3, [r3, #9]
 80018b4:	f043 0308 	orr.w	r3, r3, #8
 80018b8:	b2da      	uxtb	r2, r3
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	725a      	strb	r2, [r3, #9]

        // Configurar parámetros de Keep-Alive
        pcb->keep_idle = TCP_KEEPIDLE_DEFAULT;     // Tiempo en ms antes del primer paquete
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	f242 7210 	movw	r2, #10000	@ 0x2710
 80018c4:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;   // Intervalo entre intentos en ms
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80018ce:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        pcb->keep_cnt = TCP_KEEPCNT_DEFAULT;       // Número máximo de intentos
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	2203      	movs	r2, #3
 80018d6:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }
}
 80018da:	bf00      	nop
 80018dc:	3714      	adds	r7, #20
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr
	...

080018e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80018e8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001920 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80018ec:	f7ff fe80 	bl	80015f0 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80018f0:	480c      	ldr	r0, [pc, #48]	@ (8001924 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80018f2:	490d      	ldr	r1, [pc, #52]	@ (8001928 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80018f4:	4a0d      	ldr	r2, [pc, #52]	@ (800192c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80018f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018f8:	e002      	b.n	8001900 <LoopCopyDataInit>

080018fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018fe:	3304      	adds	r3, #4

08001900 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001900:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001902:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001904:	d3f9      	bcc.n	80018fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001906:	4a0a      	ldr	r2, [pc, #40]	@ (8001930 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001908:	4c0a      	ldr	r4, [pc, #40]	@ (8001934 <LoopFillZerobss+0x22>)
  movs r3, #0
 800190a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800190c:	e001      	b.n	8001912 <LoopFillZerobss>

0800190e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800190e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001910:	3204      	adds	r2, #4

08001912 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001912:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001914:	d3fb      	bcc.n	800190e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001916:	f014 fe3f 	bl	8016598 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800191a:	f7fe fe89 	bl	8000630 <main>
  bx  lr    
 800191e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001920:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001924:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001928:	2000018c 	.word	0x2000018c
  ldr r2, =_sidata
 800192c:	0801afb0 	.word	0x0801afb0
  ldr r2, =_sbss
 8001930:	2000018c 	.word	0x2000018c
  ldr r4, =_ebss
 8001934:	2000edf0 	.word	0x2000edf0

08001938 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001938:	e7fe      	b.n	8001938 <ADC_IRQHandler>

0800193a <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 800193a:	b480      	push	{r7}
 800193c:	b083      	sub	sp, #12
 800193e:	af00      	add	r7, sp, #0
 8001940:	6078      	str	r0, [r7, #4]
 8001942:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d00b      	beq.n	8001962 <LAN8742_RegisterBusIO+0x28>
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	68db      	ldr	r3, [r3, #12]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d007      	beq.n	8001962 <LAN8742_RegisterBusIO+0x28>
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	689b      	ldr	r3, [r3, #8]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d003      	beq.n	8001962 <LAN8742_RegisterBusIO+0x28>
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	691b      	ldr	r3, [r3, #16]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d102      	bne.n	8001968 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8001962:	f04f 33ff 	mov.w	r3, #4294967295
 8001966:	e014      	b.n	8001992 <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	681a      	ldr	r2, [r3, #0]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	685a      	ldr	r2, [r3, #4]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	68da      	ldr	r2, [r3, #12]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	689a      	ldr	r2, [r3, #8]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	691a      	ldr	r2, [r3, #16]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 8001990:	2300      	movs	r3, #0
}
 8001992:	4618      	mov	r0, r3
 8001994:	370c      	adds	r7, #12
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr

0800199e <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 800199e:	b580      	push	{r7, lr}
 80019a0:	b086      	sub	sp, #24
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 80019a6:	2300      	movs	r3, #0
 80019a8:	60fb      	str	r3, [r7, #12]
 80019aa:	2300      	movs	r3, #0
 80019ac:	60bb      	str	r3, [r7, #8]
 80019ae:	2300      	movs	r3, #0
 80019b0:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 80019b2:	2300      	movs	r3, #0
 80019b4:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d17c      	bne.n	8001ab8 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	689b      	ldr	r3, [r3, #8]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d002      	beq.n	80019cc <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	689b      	ldr	r3, [r3, #8]
 80019ca:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2220      	movs	r2, #32
 80019d0:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80019d2:	2300      	movs	r3, #0
 80019d4:	617b      	str	r3, [r7, #20]
 80019d6:	e01c      	b.n	8001a12 <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	695b      	ldr	r3, [r3, #20]
 80019dc:	f107 0208 	add.w	r2, r7, #8
 80019e0:	2112      	movs	r1, #18
 80019e2:	6978      	ldr	r0, [r7, #20]
 80019e4:	4798      	blx	r3
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	da03      	bge.n	80019f4 <LAN8742_Init+0x56>
       {
         status = LAN8742_STATUS_READ_ERROR;
 80019ec:	f06f 0304 	mvn.w	r3, #4
 80019f0:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 80019f2:	e00b      	b.n	8001a0c <LAN8742_Init+0x6e>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	f003 031f 	and.w	r3, r3, #31
 80019fa:	697a      	ldr	r2, [r7, #20]
 80019fc:	429a      	cmp	r2, r3
 80019fe:	d105      	bne.n	8001a0c <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	697a      	ldr	r2, [r7, #20]
 8001a04:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8001a06:	2300      	movs	r3, #0
 8001a08:	613b      	str	r3, [r7, #16]
         break;
 8001a0a:	e005      	b.n	8001a18 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	3301      	adds	r3, #1
 8001a10:	617b      	str	r3, [r7, #20]
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	2b1f      	cmp	r3, #31
 8001a16:	d9df      	bls.n	80019d8 <LAN8742_Init+0x3a>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	2b1f      	cmp	r3, #31
 8001a1e:	d902      	bls.n	8001a26 <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8001a20:	f06f 0302 	mvn.w	r3, #2
 8001a24:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d145      	bne.n	8001ab8 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	691b      	ldr	r3, [r3, #16]
 8001a30:	687a      	ldr	r2, [r7, #4]
 8001a32:	6810      	ldr	r0, [r2, #0]
 8001a34:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001a38:	2100      	movs	r1, #0
 8001a3a:	4798      	blx	r3
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	db37      	blt.n	8001ab2 <LAN8742_Init+0x114>
       {
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	695b      	ldr	r3, [r3, #20]
 8001a46:	687a      	ldr	r2, [r7, #4]
 8001a48:	6810      	ldr	r0, [r2, #0]
 8001a4a:	f107 0208 	add.w	r2, r7, #8
 8001a4e:	2100      	movs	r1, #0
 8001a50:	4798      	blx	r3
 8001a52:	4603      	mov	r3, r0
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	db28      	blt.n	8001aaa <LAN8742_Init+0x10c>
         {
           tickstart = pObj->IO.GetTick();
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	699b      	ldr	r3, [r3, #24]
 8001a5c:	4798      	blx	r3
 8001a5e:	4603      	mov	r3, r0
 8001a60:	60fb      	str	r3, [r7, #12]

           /* wait until software reset is done or timeout occurred */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8001a62:	e01c      	b.n	8001a9e <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	699b      	ldr	r3, [r3, #24]
 8001a68:	4798      	blx	r3
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	461a      	mov	r2, r3
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	1ad3      	subs	r3, r2, r3
 8001a72:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001a76:	d80e      	bhi.n	8001a96 <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	695b      	ldr	r3, [r3, #20]
 8001a7c:	687a      	ldr	r2, [r7, #4]
 8001a7e:	6810      	ldr	r0, [r2, #0]
 8001a80:	f107 0208 	add.w	r2, r7, #8
 8001a84:	2100      	movs	r1, #0
 8001a86:	4798      	blx	r3
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	da07      	bge.n	8001a9e <LAN8742_Init+0x100>
               {
                 status = LAN8742_STATUS_READ_ERROR;
 8001a8e:	f06f 0304 	mvn.w	r3, #4
 8001a92:	613b      	str	r3, [r7, #16]
                 break;
 8001a94:	e010      	b.n	8001ab8 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8001a96:	f06f 0301 	mvn.w	r3, #1
 8001a9a:	613b      	str	r3, [r7, #16]
               break;
 8001a9c:	e00c      	b.n	8001ab8 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8001a9e:	68bb      	ldr	r3, [r7, #8]
 8001aa0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d1dd      	bne.n	8001a64 <LAN8742_Init+0xc6>
 8001aa8:	e006      	b.n	8001ab8 <LAN8742_Init+0x11a>
             }
           }
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 8001aaa:	f06f 0304 	mvn.w	r3, #4
 8001aae:	613b      	str	r3, [r7, #16]
 8001ab0:	e002      	b.n	8001ab8 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8001ab2:	f06f 0303 	mvn.w	r3, #3
 8001ab6:	613b      	str	r3, [r7, #16]
       }
     }
   }

   if(status == LAN8742_STATUS_OK)
 8001ab8:	693b      	ldr	r3, [r7, #16]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d112      	bne.n	8001ae4 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	699b      	ldr	r3, [r3, #24]
 8001ac2:	4798      	blx	r3
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	60fb      	str	r3, [r7, #12]

     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8001ac8:	bf00      	nop
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	699b      	ldr	r3, [r3, #24]
 8001ace:	4798      	blx	r3
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	461a      	mov	r2, r3
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	1ad3      	subs	r3, r2, r3
 8001ad8:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001adc:	d9f5      	bls.n	8001aca <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	605a      	str	r2, [r3, #4]
   }

   return status;
 8001ae4:	693b      	ldr	r3, [r7, #16]
 }
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	3718      	adds	r7, #24
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}

08001aee <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8001aee:	b580      	push	{r7, lr}
 8001af0:	b084      	sub	sp, #16
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8001af6:	2300      	movs	r3, #0
 8001af8:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	695b      	ldr	r3, [r3, #20]
 8001afe:	687a      	ldr	r2, [r7, #4]
 8001b00:	6810      	ldr	r0, [r2, #0]
 8001b02:	f107 020c 	add.w	r2, r7, #12
 8001b06:	2101      	movs	r1, #1
 8001b08:	4798      	blx	r3
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	da02      	bge.n	8001b16 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001b10:	f06f 0304 	mvn.w	r3, #4
 8001b14:	e06e      	b.n	8001bf4 <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	695b      	ldr	r3, [r3, #20]
 8001b1a:	687a      	ldr	r2, [r7, #4]
 8001b1c:	6810      	ldr	r0, [r2, #0]
 8001b1e:	f107 020c 	add.w	r2, r7, #12
 8001b22:	2101      	movs	r1, #1
 8001b24:	4798      	blx	r3
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	da02      	bge.n	8001b32 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001b2c:	f06f 0304 	mvn.w	r3, #4
 8001b30:	e060      	b.n	8001bf4 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	f003 0304 	and.w	r3, r3, #4
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d101      	bne.n	8001b40 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	e059      	b.n	8001bf4 <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	695b      	ldr	r3, [r3, #20]
 8001b44:	687a      	ldr	r2, [r7, #4]
 8001b46:	6810      	ldr	r0, [r2, #0]
 8001b48:	f107 020c 	add.w	r2, r7, #12
 8001b4c:	2100      	movs	r1, #0
 8001b4e:	4798      	blx	r3
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	da02      	bge.n	8001b5c <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001b56:	f06f 0304 	mvn.w	r3, #4
 8001b5a:	e04b      	b.n	8001bf4 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d11b      	bne.n	8001b9e <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d006      	beq.n	8001b7e <LAN8742_GetLinkState+0x90>
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d001      	beq.n	8001b7e <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001b7a:	2302      	movs	r3, #2
 8001b7c:	e03a      	b.n	8001bf4 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d001      	beq.n	8001b8c <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001b88:	2303      	movs	r3, #3
 8001b8a:	e033      	b.n	8001bf4 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d001      	beq.n	8001b9a <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001b96:	2304      	movs	r3, #4
 8001b98:	e02c      	b.n	8001bf4 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001b9a:	2305      	movs	r3, #5
 8001b9c:	e02a      	b.n	8001bf4 <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	695b      	ldr	r3, [r3, #20]
 8001ba2:	687a      	ldr	r2, [r7, #4]
 8001ba4:	6810      	ldr	r0, [r2, #0]
 8001ba6:	f107 020c 	add.w	r2, r7, #12
 8001baa:	211f      	movs	r1, #31
 8001bac:	4798      	blx	r3
 8001bae:	4603      	mov	r3, r0
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	da02      	bge.n	8001bba <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8001bb4:	f06f 0304 	mvn.w	r3, #4
 8001bb8:	e01c      	b.n	8001bf4 <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d101      	bne.n	8001bc8 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8001bc4:	2306      	movs	r3, #6
 8001bc6:	e015      	b.n	8001bf4 <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	f003 031c 	and.w	r3, r3, #28
 8001bce:	2b18      	cmp	r3, #24
 8001bd0:	d101      	bne.n	8001bd6 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001bd2:	2302      	movs	r3, #2
 8001bd4:	e00e      	b.n	8001bf4 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	f003 031c 	and.w	r3, r3, #28
 8001bdc:	2b08      	cmp	r3, #8
 8001bde:	d101      	bne.n	8001be4 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001be0:	2303      	movs	r3, #3
 8001be2:	e007      	b.n	8001bf4 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	f003 031c 	and.w	r3, r3, #28
 8001bea:	2b14      	cmp	r3, #20
 8001bec:	d101      	bne.n	8001bf2 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001bee:	2304      	movs	r3, #4
 8001bf0:	e000      	b.n	8001bf4 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001bf2:	2305      	movs	r3, #5
    }
  }
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	3710      	adds	r7, #16
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}

08001bfc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c00:	4b0e      	ldr	r3, [pc, #56]	@ (8001c3c <HAL_Init+0x40>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a0d      	ldr	r2, [pc, #52]	@ (8001c3c <HAL_Init+0x40>)
 8001c06:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001c0a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c0c:	4b0b      	ldr	r3, [pc, #44]	@ (8001c3c <HAL_Init+0x40>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a0a      	ldr	r2, [pc, #40]	@ (8001c3c <HAL_Init+0x40>)
 8001c12:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001c16:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c18:	4b08      	ldr	r3, [pc, #32]	@ (8001c3c <HAL_Init+0x40>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a07      	ldr	r2, [pc, #28]	@ (8001c3c <HAL_Init+0x40>)
 8001c1e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c22:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c24:	2003      	movs	r0, #3
 8001c26:	f000 f8fc 	bl	8001e22 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c2a:	200f      	movs	r0, #15
 8001c2c:	f7ff fb6a 	bl	8001304 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c30:	f7ff faf4 	bl	800121c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c34:	2300      	movs	r3, #0
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	40023c00 	.word	0x40023c00

08001c40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c40:	b480      	push	{r7}
 8001c42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c44:	4b06      	ldr	r3, [pc, #24]	@ (8001c60 <HAL_IncTick+0x20>)
 8001c46:	781b      	ldrb	r3, [r3, #0]
 8001c48:	461a      	mov	r2, r3
 8001c4a:	4b06      	ldr	r3, [pc, #24]	@ (8001c64 <HAL_IncTick+0x24>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4413      	add	r3, r2
 8001c50:	4a04      	ldr	r2, [pc, #16]	@ (8001c64 <HAL_IncTick+0x24>)
 8001c52:	6013      	str	r3, [r2, #0]
}
 8001c54:	bf00      	nop
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr
 8001c5e:	bf00      	nop
 8001c60:	20000108 	.word	0x20000108
 8001c64:	20000828 	.word	0x20000828

08001c68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	af00      	add	r7, sp, #0
  return uwTick;
 8001c6c:	4b03      	ldr	r3, [pc, #12]	@ (8001c7c <HAL_GetTick+0x14>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	46bd      	mov	sp, r7
 8001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c78:	4770      	bx	lr
 8001c7a:	bf00      	nop
 8001c7c:	20000828 	.word	0x20000828

08001c80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b084      	sub	sp, #16
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c88:	f7ff ffee 	bl	8001c68 <HAL_GetTick>
 8001c8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c98:	d005      	beq.n	8001ca6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c9a:	4b0a      	ldr	r3, [pc, #40]	@ (8001cc4 <HAL_Delay+0x44>)
 8001c9c:	781b      	ldrb	r3, [r3, #0]
 8001c9e:	461a      	mov	r2, r3
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	4413      	add	r3, r2
 8001ca4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001ca6:	bf00      	nop
 8001ca8:	f7ff ffde 	bl	8001c68 <HAL_GetTick>
 8001cac:	4602      	mov	r2, r0
 8001cae:	68bb      	ldr	r3, [r7, #8]
 8001cb0:	1ad3      	subs	r3, r2, r3
 8001cb2:	68fa      	ldr	r2, [r7, #12]
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	d8f7      	bhi.n	8001ca8 <HAL_Delay+0x28>
  {
  }
}
 8001cb8:	bf00      	nop
 8001cba:	bf00      	nop
 8001cbc:	3710      	adds	r7, #16
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	20000108 	.word	0x20000108

08001cc8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b085      	sub	sp, #20
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	f003 0307 	and.w	r3, r3, #7
 8001cd6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cd8:	4b0c      	ldr	r3, [pc, #48]	@ (8001d0c <__NVIC_SetPriorityGrouping+0x44>)
 8001cda:	68db      	ldr	r3, [r3, #12]
 8001cdc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cde:	68ba      	ldr	r2, [r7, #8]
 8001ce0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cec:	68bb      	ldr	r3, [r7, #8]
 8001cee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cf0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001cf4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001cf8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cfa:	4a04      	ldr	r2, [pc, #16]	@ (8001d0c <__NVIC_SetPriorityGrouping+0x44>)
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	60d3      	str	r3, [r2, #12]
}
 8001d00:	bf00      	nop
 8001d02:	3714      	adds	r7, #20
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr
 8001d0c:	e000ed00 	.word	0xe000ed00

08001d10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d10:	b480      	push	{r7}
 8001d12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d14:	4b04      	ldr	r3, [pc, #16]	@ (8001d28 <__NVIC_GetPriorityGrouping+0x18>)
 8001d16:	68db      	ldr	r3, [r3, #12]
 8001d18:	0a1b      	lsrs	r3, r3, #8
 8001d1a:	f003 0307 	and.w	r3, r3, #7
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr
 8001d28:	e000ed00 	.word	0xe000ed00

08001d2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b083      	sub	sp, #12
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	4603      	mov	r3, r0
 8001d34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	db0b      	blt.n	8001d56 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d3e:	79fb      	ldrb	r3, [r7, #7]
 8001d40:	f003 021f 	and.w	r2, r3, #31
 8001d44:	4907      	ldr	r1, [pc, #28]	@ (8001d64 <__NVIC_EnableIRQ+0x38>)
 8001d46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d4a:	095b      	lsrs	r3, r3, #5
 8001d4c:	2001      	movs	r0, #1
 8001d4e:	fa00 f202 	lsl.w	r2, r0, r2
 8001d52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001d56:	bf00      	nop
 8001d58:	370c      	adds	r7, #12
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr
 8001d62:	bf00      	nop
 8001d64:	e000e100 	.word	0xe000e100

08001d68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b083      	sub	sp, #12
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	4603      	mov	r3, r0
 8001d70:	6039      	str	r1, [r7, #0]
 8001d72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	db0a      	blt.n	8001d92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	b2da      	uxtb	r2, r3
 8001d80:	490c      	ldr	r1, [pc, #48]	@ (8001db4 <__NVIC_SetPriority+0x4c>)
 8001d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d86:	0112      	lsls	r2, r2, #4
 8001d88:	b2d2      	uxtb	r2, r2
 8001d8a:	440b      	add	r3, r1
 8001d8c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d90:	e00a      	b.n	8001da8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	b2da      	uxtb	r2, r3
 8001d96:	4908      	ldr	r1, [pc, #32]	@ (8001db8 <__NVIC_SetPriority+0x50>)
 8001d98:	79fb      	ldrb	r3, [r7, #7]
 8001d9a:	f003 030f 	and.w	r3, r3, #15
 8001d9e:	3b04      	subs	r3, #4
 8001da0:	0112      	lsls	r2, r2, #4
 8001da2:	b2d2      	uxtb	r2, r2
 8001da4:	440b      	add	r3, r1
 8001da6:	761a      	strb	r2, [r3, #24]
}
 8001da8:	bf00      	nop
 8001daa:	370c      	adds	r7, #12
 8001dac:	46bd      	mov	sp, r7
 8001dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db2:	4770      	bx	lr
 8001db4:	e000e100 	.word	0xe000e100
 8001db8:	e000ed00 	.word	0xe000ed00

08001dbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b089      	sub	sp, #36	@ 0x24
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	60f8      	str	r0, [r7, #12]
 8001dc4:	60b9      	str	r1, [r7, #8]
 8001dc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	f003 0307 	and.w	r3, r3, #7
 8001dce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dd0:	69fb      	ldr	r3, [r7, #28]
 8001dd2:	f1c3 0307 	rsb	r3, r3, #7
 8001dd6:	2b04      	cmp	r3, #4
 8001dd8:	bf28      	it	cs
 8001dda:	2304      	movcs	r3, #4
 8001ddc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dde:	69fb      	ldr	r3, [r7, #28]
 8001de0:	3304      	adds	r3, #4
 8001de2:	2b06      	cmp	r3, #6
 8001de4:	d902      	bls.n	8001dec <NVIC_EncodePriority+0x30>
 8001de6:	69fb      	ldr	r3, [r7, #28]
 8001de8:	3b03      	subs	r3, #3
 8001dea:	e000      	b.n	8001dee <NVIC_EncodePriority+0x32>
 8001dec:	2300      	movs	r3, #0
 8001dee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001df0:	f04f 32ff 	mov.w	r2, #4294967295
 8001df4:	69bb      	ldr	r3, [r7, #24]
 8001df6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfa:	43da      	mvns	r2, r3
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	401a      	ands	r2, r3
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e04:	f04f 31ff 	mov.w	r1, #4294967295
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e0e:	43d9      	mvns	r1, r3
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e14:	4313      	orrs	r3, r2
         );
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	3724      	adds	r7, #36	@ 0x24
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr

08001e22 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e22:	b580      	push	{r7, lr}
 8001e24:	b082      	sub	sp, #8
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e2a:	6878      	ldr	r0, [r7, #4]
 8001e2c:	f7ff ff4c 	bl	8001cc8 <__NVIC_SetPriorityGrouping>
}
 8001e30:	bf00      	nop
 8001e32:	3708      	adds	r7, #8
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}

08001e38 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b086      	sub	sp, #24
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	4603      	mov	r3, r0
 8001e40:	60b9      	str	r1, [r7, #8]
 8001e42:	607a      	str	r2, [r7, #4]
 8001e44:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e46:	2300      	movs	r3, #0
 8001e48:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e4a:	f7ff ff61 	bl	8001d10 <__NVIC_GetPriorityGrouping>
 8001e4e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e50:	687a      	ldr	r2, [r7, #4]
 8001e52:	68b9      	ldr	r1, [r7, #8]
 8001e54:	6978      	ldr	r0, [r7, #20]
 8001e56:	f7ff ffb1 	bl	8001dbc <NVIC_EncodePriority>
 8001e5a:	4602      	mov	r2, r0
 8001e5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e60:	4611      	mov	r1, r2
 8001e62:	4618      	mov	r0, r3
 8001e64:	f7ff ff80 	bl	8001d68 <__NVIC_SetPriority>
}
 8001e68:	bf00      	nop
 8001e6a:	3718      	adds	r7, #24
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}

08001e70 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	4603      	mov	r3, r0
 8001e78:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f7ff ff54 	bl	8001d2c <__NVIC_EnableIRQ>
}
 8001e84:	bf00      	nop
 8001e86:	3708      	adds	r7, #8
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}

08001e8c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b084      	sub	sp, #16
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d101      	bne.n	8001e9e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e06c      	b.n	8001f78 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d106      	bne.n	8001eb6 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2223      	movs	r2, #35	@ 0x23
 8001eac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001eb0:	6878      	ldr	r0, [r7, #4]
 8001eb2:	f003 fb7f 	bl	80055b4 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	60bb      	str	r3, [r7, #8]
 8001eba:	4b31      	ldr	r3, [pc, #196]	@ (8001f80 <HAL_ETH_Init+0xf4>)
 8001ebc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ebe:	4a30      	ldr	r2, [pc, #192]	@ (8001f80 <HAL_ETH_Init+0xf4>)
 8001ec0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ec4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ec6:	4b2e      	ldr	r3, [pc, #184]	@ (8001f80 <HAL_ETH_Init+0xf4>)
 8001ec8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ece:	60bb      	str	r3, [r7, #8]
 8001ed0:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001ed2:	4b2c      	ldr	r3, [pc, #176]	@ (8001f84 <HAL_ETH_Init+0xf8>)
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	4a2b      	ldr	r2, [pc, #172]	@ (8001f84 <HAL_ETH_Init+0xf8>)
 8001ed8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001edc:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001ede:	4b29      	ldr	r3, [pc, #164]	@ (8001f84 <HAL_ETH_Init+0xf8>)
 8001ee0:	685a      	ldr	r2, [r3, #4]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	4927      	ldr	r1, [pc, #156]	@ (8001f84 <HAL_ETH_Init+0xf8>)
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001eec:	4b25      	ldr	r3, [pc, #148]	@ (8001f84 <HAL_ETH_Init+0xf8>)
 8001eee:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	687a      	ldr	r2, [r7, #4]
 8001efc:	6812      	ldr	r2, [r2, #0]
 8001efe:	f043 0301 	orr.w	r3, r3, #1
 8001f02:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001f06:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001f08:	f7ff feae 	bl	8001c68 <HAL_GetTick>
 8001f0c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001f0e:	e011      	b.n	8001f34 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001f10:	f7ff feaa 	bl	8001c68 <HAL_GetTick>
 8001f14:	4602      	mov	r2, r0
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	1ad3      	subs	r3, r2, r3
 8001f1a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001f1e:	d909      	bls.n	8001f34 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2204      	movs	r2, #4
 8001f24:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	22e0      	movs	r2, #224	@ 0xe0
 8001f2c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8001f30:	2301      	movs	r3, #1
 8001f32:	e021      	b.n	8001f78 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f003 0301 	and.w	r3, r3, #1
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d1e4      	bne.n	8001f10 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001f46:	6878      	ldr	r0, [r7, #4]
 8001f48:	f000 ff56 	bl	8002df8 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001f4c:	6878      	ldr	r0, [r7, #4]
 8001f4e:	f000 fffd 	bl	8002f4c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001f52:	6878      	ldr	r0, [r7, #4]
 8001f54:	f001 f853 	bl	8002ffe <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	461a      	mov	r2, r3
 8001f5e:	2100      	movs	r1, #0
 8001f60:	6878      	ldr	r0, [r7, #4]
 8001f62:	f000 ffbb 	bl	8002edc <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2210      	movs	r2, #16
 8001f72:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8001f76:	2300      	movs	r3, #0
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	3710      	adds	r7, #16
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	40023800 	.word	0x40023800
 8001f84:	40013800 	.word	0x40013800

08001f88 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b084      	sub	sp, #16
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001f96:	2b10      	cmp	r3, #16
 8001f98:	d17f      	bne.n	800209a <HAL_ETH_Start_IT+0x112>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2223      	movs	r2, #35	@ 0x23
 8001f9e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Disable MMC Interrupts */
    SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8001fb6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable Rx MMC Interrupts */
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 8001fc0:	687a      	ldr	r2, [r7, #4]
 8001fc2:	6812      	ldr	r2, [r2, #0]
 8001fc4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001fc8:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001fcc:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
            ETH_MMCRIMR_RFCEM);

    /* Disable Tx MMC Interrupts */
    SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 8001fe0:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
            ETH_MMCTIMR_TGFSCM);

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2204      	movs	r2, #4
 8001fe8:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8001fea:	6878      	ldr	r0, [r7, #4]
 8001fec:	f000 f9f8 	bl	80023e0 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f042 0208 	orr.w	r2, r2, #8
 8001ffe:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002008:	2001      	movs	r0, #1
 800200a:	f7ff fe39 	bl	8001c80 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	68fa      	ldr	r2, [r7, #12]
 8002014:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	681a      	ldr	r2, [r3, #0]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f042 0204 	orr.w	r2, r2, #4
 8002024:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800202e:	2001      	movs	r0, #1
 8002030:	f7ff fe26 	bl	8001c80 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	68fa      	ldr	r2, [r7, #12]
 800203a:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 800203c:	6878      	ldr	r0, [r7, #4]
 800203e:	f000 fd7c 	bl	8002b3a <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800204a:	699b      	ldr	r3, [r3, #24]
 800204c:	687a      	ldr	r2, [r7, #4]
 800204e:	6812      	ldr	r2, [r2, #0]
 8002050:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002054:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002058:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002062:	699b      	ldr	r3, [r3, #24]
 8002064:	687a      	ldr	r2, [r7, #4]
 8002066:	6812      	ldr	r2, [r2, #0]
 8002068:	f043 0302 	orr.w	r3, r3, #2
 800206c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002070:	6193      	str	r3, [r2, #24]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800207a:	69db      	ldr	r3, [r3, #28]
 800207c:	687a      	ldr	r2, [r7, #4]
 800207e:	6812      	ldr	r2, [r2, #0]
 8002080:	f443 33d0 	orr.w	r3, r3, #106496	@ 0x1a000
 8002084:	f043 03c1 	orr.w	r3, r3, #193	@ 0xc1
 8002088:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800208c:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2223      	movs	r2, #35	@ 0x23
 8002092:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    return HAL_OK;
 8002096:	2300      	movs	r3, #0
 8002098:	e000      	b.n	800209c <HAL_ETH_Start_IT+0x114>
  }
  else
  {
    return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
  }
}
 800209c:	4618      	mov	r0, r3
 800209e:	3710      	adds	r7, #16
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}

080020a4 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b086      	sub	sp, #24
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80020b2:	2b23      	cmp	r3, #35	@ 0x23
 80020b4:	d170      	bne.n	8002198 <HAL_ETH_Stop_IT+0xf4>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2223      	movs	r2, #35	@ 0x23
 80020ba:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80020c6:	69db      	ldr	r3, [r3, #28]
 80020c8:	687a      	ldr	r2, [r7, #4]
 80020ca:	6812      	ldr	r2, [r2, #0]
 80020cc:	f423 33d0 	bic.w	r3, r3, #106496	@ 0x1a000
 80020d0:	f023 03c1 	bic.w	r3, r3, #193	@ 0xc1
 80020d4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80020d8:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80020e2:	699b      	ldr	r3, [r3, #24]
 80020e4:	687a      	ldr	r2, [r7, #4]
 80020e6:	6812      	ldr	r2, [r2, #0]
 80020e8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80020ec:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80020f0:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80020fa:	699b      	ldr	r3, [r3, #24]
 80020fc:	687a      	ldr	r2, [r7, #4]
 80020fe:	6812      	ldr	r2, [r2, #0]
 8002100:	f023 0302 	bic.w	r3, r3, #2
 8002104:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002108:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	681a      	ldr	r2, [r3, #0]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f022 0204 	bic.w	r2, r2, #4
 8002118:	601a      	str	r2, [r3, #0]


    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002122:	2001      	movs	r0, #1
 8002124:	f7ff fdac 	bl	8001c80 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	693a      	ldr	r2, [r7, #16]
 800212e:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8002130:	6878      	ldr	r0, [r7, #4]
 8002132:	f000 fd02 	bl	8002b3a <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f022 0208 	bic.w	r2, r2, #8
 8002144:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800214e:	2001      	movs	r0, #1
 8002150:	f7ff fd96 	bl	8001c80 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	693a      	ldr	r2, [r7, #16]
 800215a:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 800215c:	2300      	movs	r3, #0
 800215e:	617b      	str	r3, [r7, #20]
 8002160:	e00e      	b.n	8002180 <HAL_ETH_Stop_IT+0xdc>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	697a      	ldr	r2, [r7, #20]
 8002166:	3212      	adds	r2, #18
 8002168:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800216c:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	3301      	adds	r3, #1
 800217e:	617b      	str	r3, [r7, #20]
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	2b03      	cmp	r3, #3
 8002184:	d9ed      	bls.n	8002162 <HAL_ETH_Stop_IT+0xbe>
    }

    heth->RxDescList.ItMode = 0U;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2200      	movs	r2, #0
 800218a:	659a      	str	r2, [r3, #88]	@ 0x58

    heth->gState = HAL_ETH_STATE_READY;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2210      	movs	r2, #16
 8002190:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 8002194:	2300      	movs	r3, #0
 8002196:	e000      	b.n	800219a <HAL_ETH_Stop_IT+0xf6>
  }
  else
  {
    return HAL_ERROR;
 8002198:	2301      	movs	r3, #1
  }
}
 800219a:	4618      	mov	r0, r3
 800219c:	3718      	adds	r7, #24
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}

080021a2 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig)
{
 80021a2:	b580      	push	{r7, lr}
 80021a4:	b082      	sub	sp, #8
 80021a6:	af00      	add	r7, sp, #0
 80021a8:	6078      	str	r0, [r7, #4]
 80021aa:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d109      	bne.n	80021c6 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021b8:	f043 0201 	orr.w	r2, r3, #1
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	e045      	b.n	8002252 <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80021cc:	2b23      	cmp	r3, #35	@ 0x23
 80021ce:	d13f      	bne.n	8002250 <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 80021d8:	2201      	movs	r2, #1
 80021da:	6839      	ldr	r1, [r7, #0]
 80021dc:	6878      	ldr	r0, [r7, #4]
 80021de:	f000 ff7b 	bl	80030d8 <ETH_Prepare_Tx_Descriptors>
 80021e2:	4603      	mov	r3, r0
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d009      	beq.n	80021fc <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021ee:	f043 0202 	orr.w	r2, r3, #2
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 80021f8:	2301      	movs	r3, #1
 80021fa:	e02a      	b.n	8002252 <HAL_ETH_Transmit_IT+0xb0>
  __ASM volatile ("dsb 0xF":::"memory");
 80021fc:	f3bf 8f4f 	dsb	sy
}
 8002200:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002206:	1c5a      	adds	r2, r3, #1
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	629a      	str	r2, [r3, #40]	@ 0x28
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002210:	2b03      	cmp	r3, #3
 8002212:	d904      	bls.n	800221e <HAL_ETH_Transmit_IT+0x7c>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002218:	1f1a      	subs	r2, r3, #4
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002226:	695b      	ldr	r3, [r3, #20]
 8002228:	f003 0304 	and.w	r3, r3, #4
 800222c:	2b00      	cmp	r3, #0
 800222e:	d00d      	beq.n	800224c <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002238:	461a      	mov	r2, r3
 800223a:	2304      	movs	r3, #4
 800223c:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002246:	461a      	mov	r2, r3
 8002248:	2300      	movs	r3, #0
 800224a:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 800224c:	2300      	movs	r3, #0
 800224e:	e000      	b.n	8002252 <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 8002250:	2301      	movs	r3, #1
  }
}
 8002252:	4618      	mov	r0, r3
 8002254:	3708      	adds	r7, #8
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}

0800225a <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 800225a:	b580      	push	{r7, lr}
 800225c:	b088      	sub	sp, #32
 800225e:	af00      	add	r7, sp, #0
 8002260:	6078      	str	r0, [r7, #4]
 8002262:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8002264:	2300      	movs	r3, #0
 8002266:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8002268:	2300      	movs	r3, #0
 800226a:	73fb      	strb	r3, [r7, #15]

  if (pAppBuff == NULL)
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d109      	bne.n	8002286 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002278:	f043 0201 	orr.w	r2, r3, #1
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	e0a8      	b.n	80023d8 <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800228c:	2b23      	cmp	r3, #35	@ 0x23
 800228e:	d001      	beq.n	8002294 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8002290:	2301      	movs	r3, #1
 8002292:	e0a1      	b.n	80023d8 <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002298:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	69fa      	ldr	r2, [r7, #28]
 800229e:	3212      	adds	r2, #18
 80022a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022a4:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80022aa:	f1c3 0304 	rsb	r3, r3, #4
 80022ae:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80022b0:	e06a      	b.n	8002388 <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 80022b2:	69bb      	ldr	r3, [r7, #24]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d007      	beq.n	80022ce <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 80022be:	69bb      	ldr	r3, [r7, #24]
 80022c0:	69da      	ldr	r2, [r3, #28]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 80022c6:	69bb      	ldr	r3, [r7, #24]
 80022c8:	699a      	ldr	r2, [r3, #24]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 80022ce:	69bb      	ldr	r3, [r7, #24]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d103      	bne.n	80022e2 <HAL_ETH_ReadData+0x88>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d040      	beq.n	8002364 <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 80022e2:	69bb      	ldr	r3, [r7, #24]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d005      	beq.n	80022fa <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2200      	movs	r2, #0
 80022f2:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2200      	movs	r2, #0
 80022f8:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	695b      	ldr	r3, [r3, #20]
 80022fe:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8002300:	69bb      	ldr	r3, [r7, #24]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002308:	2b00      	cmp	r3, #0
 800230a:	d00c      	beq.n	8002326 <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 800230c:	69bb      	ldr	r3, [r7, #24]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	0c1b      	lsrs	r3, r3, #16
 8002312:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8002316:	3b04      	subs	r3, #4
 8002318:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 800231a:	69bb      	ldr	r3, [r7, #24]
 800231c:	681a      	ldr	r2, [r3, #0]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 8002322:	2301      	movs	r3, #1
 8002324:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8002326:	69bb      	ldr	r3, [r7, #24]
 8002328:	689a      	ldr	r2, [r3, #8]
 800232a:	69bb      	ldr	r3, [r7, #24]
 800232c:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 800233a:	69bb      	ldr	r3, [r7, #24]
 800233c:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 800233e:	461a      	mov	r2, r3
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	b29b      	uxth	r3, r3
 8002344:	f003 fb10 	bl	8005968 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800234c:	1c5a      	adds	r2, r3, #1
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	441a      	add	r2, r3
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 800235e:	69bb      	ldr	r3, [r7, #24]
 8002360:	2200      	movs	r2, #0
 8002362:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8002364:	69fb      	ldr	r3, [r7, #28]
 8002366:	3301      	adds	r3, #1
 8002368:	61fb      	str	r3, [r7, #28]
 800236a:	69fb      	ldr	r3, [r7, #28]
 800236c:	2b03      	cmp	r3, #3
 800236e:	d902      	bls.n	8002376 <HAL_ETH_ReadData+0x11c>
 8002370:	69fb      	ldr	r3, [r7, #28]
 8002372:	3b04      	subs	r3, #4
 8002374:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	69fa      	ldr	r2, [r7, #28]
 800237a:	3212      	adds	r2, #18
 800237c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002380:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	3301      	adds	r3, #1
 8002386:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8002388:	69bb      	ldr	r3, [r7, #24]
 800238a:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 800238c:	2b00      	cmp	r3, #0
 800238e:	db06      	blt.n	800239e <HAL_ETH_ReadData+0x144>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8002390:	697a      	ldr	r2, [r7, #20]
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	429a      	cmp	r2, r3
 8002396:	d202      	bcs.n	800239e <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 8002398:	7bfb      	ldrb	r3, [r7, #15]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d089      	beq.n	80022b2 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	441a      	add	r2, r3
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d002      	beq.n	80023b8 <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 80023b2:	6878      	ldr	r0, [r7, #4]
 80023b4:	f000 f814 	bl	80023e0 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	69fa      	ldr	r2, [r7, #28]
 80023bc:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 80023be:	7bfb      	ldrb	r3, [r7, #15]
 80023c0:	2b01      	cmp	r3, #1
 80023c2:	d108      	bne.n	80023d6 <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2200      	movs	r2, #0
 80023d0:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80023d2:	2300      	movs	r3, #0
 80023d4:	e000      	b.n	80023d8 <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
}
 80023d8:	4618      	mov	r0, r3
 80023da:	3720      	adds	r7, #32
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}

080023e0 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b088      	sub	sp, #32
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  uint32_t tailidx;
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 80023e8:	2300      	movs	r3, #0
 80023ea:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 80023ec:	2301      	movs	r3, #1
 80023ee:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80023f4:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	69fa      	ldr	r2, [r7, #28]
 80023fa:	3212      	adds	r2, #18
 80023fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002400:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002406:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8002408:	e03d      	b.n	8002486 <ETH_UpdateDescriptor+0xa6>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	6a1b      	ldr	r3, [r3, #32]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d112      	bne.n	8002438 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8002412:	f107 0308 	add.w	r3, r7, #8
 8002416:	4618      	mov	r0, r3
 8002418:	f003 fa76 	bl	8005908 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d102      	bne.n	8002428 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8002422:	2300      	movs	r3, #0
 8002424:	74fb      	strb	r3, [r7, #19]
 8002426:	e007      	b.n	8002438 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	461a      	mov	r2, r3
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	461a      	mov	r2, r3
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8002438:	7cfb      	ldrb	r3, [r7, #19]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d023      	beq.n	8002486 <ETH_UpdateDescriptor+0xa6>
    {
      if (heth->RxDescList.ItMode == 0U)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002442:	2b00      	cmp	r3, #0
 8002444:	d103      	bne.n	800244e <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	4a24      	ldr	r2, [pc, #144]	@ (80024dc <ETH_UpdateDescriptor+0xfc>)
 800244a:	605a      	str	r2, [r3, #4]
 800244c:	e003      	b.n	8002456 <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	f44f 428c 	mov.w	r2, #17920	@ 0x4600
 8002454:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8002462:	69fb      	ldr	r3, [r7, #28]
 8002464:	3301      	adds	r3, #1
 8002466:	61fb      	str	r3, [r7, #28]
 8002468:	69fb      	ldr	r3, [r7, #28]
 800246a:	2b03      	cmp	r3, #3
 800246c:	d902      	bls.n	8002474 <ETH_UpdateDescriptor+0x94>
 800246e:	69fb      	ldr	r3, [r7, #28]
 8002470:	3b04      	subs	r3, #4
 8002472:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	69fa      	ldr	r2, [r7, #28]
 8002478:	3212      	adds	r2, #18
 800247a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800247e:	617b      	str	r3, [r7, #20]
      desccount--;
 8002480:	69bb      	ldr	r3, [r7, #24]
 8002482:	3b01      	subs	r3, #1
 8002484:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8002486:	69bb      	ldr	r3, [r7, #24]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d002      	beq.n	8002492 <ETH_UpdateDescriptor+0xb2>
 800248c:	7cfb      	ldrb	r3, [r7, #19]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d1bb      	bne.n	800240a <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002496:	69ba      	ldr	r2, [r7, #24]
 8002498:	429a      	cmp	r2, r3
 800249a:	d01a      	beq.n	80024d2 <ETH_UpdateDescriptor+0xf2>
  {
    /* Set the tail pointer index */
    tailidx = (descidx + 1U) % ETH_RX_DESC_CNT;
 800249c:	69fb      	ldr	r3, [r7, #28]
 800249e:	3301      	adds	r3, #1
 80024a0:	f003 0303 	and.w	r3, r3, #3
 80024a4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 80024a6:	f3bf 8f5f 	dmb	sy
}
 80024aa:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6919      	ldr	r1, [r3, #16]
 80024b0:	68fa      	ldr	r2, [r7, #12]
 80024b2:	4613      	mov	r3, r2
 80024b4:	009b      	lsls	r3, r3, #2
 80024b6:	4413      	add	r3, r2
 80024b8:	00db      	lsls	r3, r3, #3
 80024ba:	18ca      	adds	r2, r1, r3
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80024c4:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	69fa      	ldr	r2, [r7, #28]
 80024ca:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	69ba      	ldr	r2, [r7, #24]
 80024d0:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 80024d2:	bf00      	nop
 80024d4:	3720      	adds	r7, #32
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	80004600 	.word	0x80004600

080024e0 <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b086      	sub	sp, #24
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	3318      	adds	r3, #24
 80024ec:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 80024ee:	68bb      	ldr	r3, [r7, #8]
 80024f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024f2:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024f8:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 80024fa:	2301      	movs	r3, #1
 80024fc:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 80024fe:	e03f      	b.n	8002580 <HAL_ETH_ReleaseTxPacket+0xa0>
  {
    pktInUse = 1U;
 8002500:	2301      	movs	r3, #1
 8002502:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	3b01      	subs	r3, #1
 8002508:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 800250a:	68ba      	ldr	r2, [r7, #8]
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	3304      	adds	r3, #4
 8002510:	009b      	lsls	r3, r3, #2
 8002512:	4413      	add	r3, r2
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d106      	bne.n	8002528 <HAL_ETH_ReleaseTxPacket+0x48>
    {
      /* No packet in use, skip to next.  */
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	3301      	adds	r3, #1
 800251e:	f003 0303 	and.w	r3, r3, #3
 8002522:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 8002524:	2300      	movs	r3, #0
 8002526:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8002528:	7bbb      	ldrb	r3, [r7, #14]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d028      	beq.n	8002580 <HAL_ETH_ReleaseTxPacket+0xa0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	68d9      	ldr	r1, [r3, #12]
 8002532:	693a      	ldr	r2, [r7, #16]
 8002534:	4613      	mov	r3, r2
 8002536:	009b      	lsls	r3, r3, #2
 8002538:	4413      	add	r3, r2
 800253a:	00db      	lsls	r3, r3, #3
 800253c:	440b      	add	r3, r1
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	2b00      	cmp	r3, #0
 8002542:	db1b      	blt.n	800257c <HAL_ETH_ReleaseTxPacket+0x9c>
#ifdef HAL_ETH_USE_PTP
        /* Handle Ptp  */
        HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8002544:	68ba      	ldr	r2, [r7, #8]
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	3304      	adds	r3, #4
 800254a:	009b      	lsls	r3, r3, #2
 800254c:	4413      	add	r3, r2
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	4618      	mov	r0, r3
 8002552:	f003 fa49 	bl	80059e8 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8002556:	68ba      	ldr	r2, [r7, #8]
 8002558:	693b      	ldr	r3, [r7, #16]
 800255a:	3304      	adds	r3, #4
 800255c:	009b      	lsls	r3, r3, #2
 800255e:	4413      	add	r3, r2
 8002560:	2200      	movs	r2, #0
 8002562:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	3301      	adds	r3, #1
 8002568:	f003 0303 	and.w	r3, r3, #3
 800256c:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	697a      	ldr	r2, [r7, #20]
 8002572:	629a      	str	r2, [r3, #40]	@ 0x28
        dmatxdesclist->releaseIndex = idx;
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	693a      	ldr	r2, [r7, #16]
 8002578:	62da      	str	r2, [r3, #44]	@ 0x2c
 800257a:	e001      	b.n	8002580 <HAL_ETH_ReleaseTxPacket+0xa0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 800257c:	2300      	movs	r3, #0
 800257e:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d002      	beq.n	800258c <HAL_ETH_ReleaseTxPacket+0xac>
 8002586:	7bfb      	ldrb	r3, [r7, #15]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d1b9      	bne.n	8002500 <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 800258c:	2300      	movs	r3, #0
}
 800258e:	4618      	mov	r0, r3
 8002590:	3718      	adds	r7, #24
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}
	...

08002598 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b082      	sub	sp, #8
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80025a8:	695b      	ldr	r3, [r3, #20]
 80025aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80025ae:	2b40      	cmp	r3, #64	@ 0x40
 80025b0:	d112      	bne.n	80025d8 <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80025ba:	69db      	ldr	r3, [r3, #28]
 80025bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80025c0:	2b40      	cmp	r3, #64	@ 0x40
 80025c2:	d109      	bne.n	80025d8 <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80025cc:	461a      	mov	r2, r3
 80025ce:	4b50      	ldr	r3, [pc, #320]	@ (8002710 <HAL_ETH_IRQHandler+0x178>)
 80025d0:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 80025d2:	6878      	ldr	r0, [r7, #4]
 80025d4:	f002 fd36 	bl	8005044 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80025e0:	695b      	ldr	r3, [r3, #20]
 80025e2:	f003 0301 	and.w	r3, r3, #1
 80025e6:	2b01      	cmp	r3, #1
 80025e8:	d113      	bne.n	8002612 <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80025f2:	69db      	ldr	r3, [r3, #28]
 80025f4:	f003 0301 	and.w	r3, r3, #1
 80025f8:	2b01      	cmp	r3, #1
 80025fa:	d10a      	bne.n	8002612 <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002604:	461a      	mov	r2, r3
 8002606:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 800260a:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 800260c:	6878      	ldr	r0, [r7, #4]
 800260e:	f002 fd29 	bl	8005064 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800261a:	695b      	ldr	r3, [r3, #20]
 800261c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002620:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002624:	d14c      	bne.n	80026c0 <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800262e:	69db      	ldr	r3, [r3, #28]
 8002630:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002634:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002638:	d142      	bne.n	80026c0 <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002640:	f043 0208 	orr.w	r2, r3, #8
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002652:	695b      	ldr	r3, [r3, #20]
 8002654:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002658:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800265c:	d11a      	bne.n	8002694 <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002666:	695a      	ldr	r2, [r3, #20]
 8002668:	4b2a      	ldr	r3, [pc, #168]	@ (8002714 <HAL_ETH_IRQHandler+0x17c>)
 800266a:	4013      	ands	r3, r2
 800266c:	687a      	ldr	r2, [r7, #4]
 800266e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800267a:	69db      	ldr	r3, [r3, #28]
 800267c:	687a      	ldr	r2, [r7, #4]
 800267e:	6812      	ldr	r2, [r2, #0]
 8002680:	f423 33c0 	bic.w	r3, r3, #98304	@ 0x18000
 8002684:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002688:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	22e0      	movs	r2, #224	@ 0xe0
 800268e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8002692:	e012      	b.n	80026ba <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800269c:	695a      	ldr	r2, [r3, #20]
 800269e:	f248 6380 	movw	r3, #34432	@ 0x8680
 80026a2:	4013      	ands	r3, r2
 80026a4:	687a      	ldr	r2, [r7, #4]
 80026a6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80026b2:	461a      	mov	r2, r3
 80026b4:	f248 6380 	movw	r3, #34432	@ 0x8680
 80026b8:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 80026ba:	6878      	ldr	r0, [r7, #4]
 80026bc:	f002 fce2 	bl	8005084 <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026c6:	f003 0308 	and.w	r3, r3, #8
 80026ca:	2b08      	cmp	r3, #8
 80026cc:	d10e      	bne.n	80026ec <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026d4:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 80026de:	6878      	ldr	r0, [r7, #4]
 80026e0:	f000 f81c 	bl	800271c <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2200      	movs	r2, #0
 80026e8:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 80026ec:	4b0a      	ldr	r3, [pc, #40]	@ (8002718 <HAL_ETH_IRQHandler+0x180>)
 80026ee:	695b      	ldr	r3, [r3, #20]
 80026f0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d006      	beq.n	8002706 <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 80026f8:	4b07      	ldr	r3, [pc, #28]	@ (8002718 <HAL_ETH_IRQHandler+0x180>)
 80026fa:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80026fe:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8002700:	6878      	ldr	r0, [r7, #4]
 8002702:	f000 f815 	bl	8002730 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8002706:	bf00      	nop
 8002708:	3708      	adds	r7, #8
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}
 800270e:	bf00      	nop
 8002710:	00010040 	.word	0x00010040
 8002714:	007e2000 	.word	0x007e2000
 8002718:	40013c00 	.word	0x40013c00

0800271c <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 800271c:	b480      	push	{r7}
 800271e:	b083      	sub	sp, #12
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8002724:	bf00      	nop
 8002726:	370c      	adds	r7, #12
 8002728:	46bd      	mov	sp, r7
 800272a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272e:	4770      	bx	lr

08002730 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8002730:	b480      	push	{r7}
 8002732:	b083      	sub	sp, #12
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8002738:	bf00      	nop
 800273a:	370c      	adds	r7, #12
 800273c:	46bd      	mov	sp, r7
 800273e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002742:	4770      	bx	lr

08002744 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b086      	sub	sp, #24
 8002748:	af00      	add	r7, sp, #0
 800274a:	60f8      	str	r0, [r7, #12]
 800274c:	60b9      	str	r1, [r7, #8]
 800274e:	607a      	str	r2, [r7, #4]
 8002750:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	691b      	ldr	r3, [r3, #16]
 8002758:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	f003 031c 	and.w	r3, r3, #28
 8002760:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8002762:	68bb      	ldr	r3, [r7, #8]
 8002764:	02db      	lsls	r3, r3, #11
 8002766:	b29b      	uxth	r3, r3
 8002768:	697a      	ldr	r2, [r7, #20]
 800276a:	4313      	orrs	r3, r2
 800276c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	019b      	lsls	r3, r3, #6
 8002772:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8002776:	697a      	ldr	r2, [r7, #20]
 8002778:	4313      	orrs	r3, r2
 800277a:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	f023 0302 	bic.w	r3, r3, #2
 8002782:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	f043 0301 	orr.w	r3, r3, #1
 800278a:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	697a      	ldr	r2, [r7, #20]
 8002792:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8002794:	f7ff fa68 	bl	8001c68 <HAL_GetTick>
 8002798:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800279a:	e00d      	b.n	80027b8 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 800279c:	f7ff fa64 	bl	8001c68 <HAL_GetTick>
 80027a0:	4602      	mov	r2, r0
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	1ad3      	subs	r3, r2, r3
 80027a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80027aa:	d301      	bcc.n	80027b0 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 80027ac:	2301      	movs	r3, #1
 80027ae:	e010      	b.n	80027d2 <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	691b      	ldr	r3, [r3, #16]
 80027b6:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	f003 0301 	and.w	r3, r3, #1
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d1ec      	bne.n	800279c <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	695b      	ldr	r3, [r3, #20]
 80027c8:	b29b      	uxth	r3, r3
 80027ca:	461a      	mov	r2, r3
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80027d0:	2300      	movs	r3, #0
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	3718      	adds	r7, #24
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}

080027da <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 80027da:	b580      	push	{r7, lr}
 80027dc:	b086      	sub	sp, #24
 80027de:	af00      	add	r7, sp, #0
 80027e0:	60f8      	str	r0, [r7, #12]
 80027e2:	60b9      	str	r1, [r7, #8]
 80027e4:	607a      	str	r2, [r7, #4]
 80027e6:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	691b      	ldr	r3, [r3, #16]
 80027ee:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	f003 031c 	and.w	r3, r3, #28
 80027f6:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	02db      	lsls	r3, r3, #11
 80027fc:	b29b      	uxth	r3, r3
 80027fe:	697a      	ldr	r2, [r7, #20]
 8002800:	4313      	orrs	r3, r2
 8002802:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	019b      	lsls	r3, r3, #6
 8002808:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 800280c:	697a      	ldr	r2, [r7, #20]
 800280e:	4313      	orrs	r3, r2
 8002810:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	f043 0302 	orr.w	r3, r3, #2
 8002818:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	f043 0301 	orr.w	r3, r3, #1
 8002820:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	b29a      	uxth	r2, r3
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	697a      	ldr	r2, [r7, #20]
 8002832:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002834:	f7ff fa18 	bl	8001c68 <HAL_GetTick>
 8002838:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800283a:	e00d      	b.n	8002858 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 800283c:	f7ff fa14 	bl	8001c68 <HAL_GetTick>
 8002840:	4602      	mov	r2, r0
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	1ad3      	subs	r3, r2, r3
 8002846:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800284a:	d301      	bcc.n	8002850 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 800284c:	2301      	movs	r3, #1
 800284e:	e009      	b.n	8002864 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	691b      	ldr	r3, [r3, #16]
 8002856:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	f003 0301 	and.w	r3, r3, #1
 800285e:	2b00      	cmp	r3, #0
 8002860:	d1ec      	bne.n	800283c <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8002862:	2300      	movs	r3, #0
}
 8002864:	4618      	mov	r0, r3
 8002866:	3718      	adds	r7, #24
 8002868:	46bd      	mov	sp, r7
 800286a:	bd80      	pop	{r7, pc}

0800286c <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 800286c:	b480      	push	{r7}
 800286e:	b083      	sub	sp, #12
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
 8002874:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d101      	bne.n	8002880 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 800287c:	2301      	movs	r3, #1
 800287e:	e0d9      	b.n	8002a34 <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f003 0310 	and.w	r3, r3, #16
 800288a:	2b00      	cmp	r3, #0
 800288c:	bf14      	ite	ne
 800288e:	2301      	movne	r3, #1
 8002890:	2300      	moveq	r3, #0
 8002892:	b2db      	uxtb	r3, r3
 8002894:	461a      	mov	r2, r3
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	bf0c      	ite	eq
 80028b8:	2301      	moveq	r3, #1
 80028ba:	2300      	movne	r3, #0
 80028bc:	b2db      	uxtb	r3, r3
 80028be:	461a      	mov	r2, r3
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
                                        ? ENABLE : DISABLE;
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	bf14      	ite	ne
 80028d4:	2301      	movne	r3, #1
 80028d6:	2300      	moveq	r3, #0
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	bf0c      	ite	eq
 80028ee:	2301      	moveq	r3, #1
 80028f0:	2300      	movne	r3, #0
 80028f2:	b2db      	uxtb	r3, r3
 80028f4:	461a      	mov	r2, r3
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002904:	2b00      	cmp	r3, #0
 8002906:	bf14      	ite	ne
 8002908:	2301      	movne	r3, #1
 800290a:	2300      	moveq	r3, #0
 800290c:	b2db      	uxtb	r3, r3
 800290e:	461a      	mov	r2, r3
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800293a:	2b00      	cmp	r3, #0
 800293c:	bf0c      	ite	eq
 800293e:	2301      	moveq	r3, #1
 8002940:	2300      	movne	r3, #0
 8002942:	b2db      	uxtb	r3, r3
 8002944:	461a      	mov	r2, r3
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002954:	2b00      	cmp	r3, #0
 8002956:	bf0c      	ite	eq
 8002958:	2301      	moveq	r3, #1
 800295a:	2300      	movne	r3, #0
 800295c:	b2db      	uxtb	r3, r3
 800295e:	461a      	mov	r2, r3
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800296e:	2b00      	cmp	r3, #0
 8002970:	bf14      	ite	ne
 8002972:	2301      	movne	r3, #1
 8002974:	2300      	moveq	r3, #0
 8002976:	b2db      	uxtb	r3, r3
 8002978:	461a      	mov	r2, r3
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f403 2260 	and.w	r2, r3, #917504	@ 0xe0000
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002996:	2b00      	cmp	r3, #0
 8002998:	bf14      	ite	ne
 800299a:	2301      	movne	r3, #1
 800299c:	2300      	moveq	r3, #0
 800299e:	b2db      	uxtb	r3, r3
 80029a0:	461a      	mov	r2, r3
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	699b      	ldr	r3, [r3, #24]
 80029ac:	f003 0302 	and.w	r3, r3, #2
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	bf14      	ite	ne
 80029b4:	2301      	movne	r3, #1
 80029b6:	2300      	moveq	r3, #0
 80029b8:	b2db      	uxtb	r3, r3
 80029ba:	461a      	mov	r2, r3
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	699b      	ldr	r3, [r3, #24]
 80029c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	bf0c      	ite	eq
 80029d0:	2301      	moveq	r3, #1
 80029d2:	2300      	movne	r3, #0
 80029d4:	b2db      	uxtb	r3, r3
 80029d6:	461a      	mov	r2, r3
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	699b      	ldr	r3, [r3, #24]
 80029e4:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	699b      	ldr	r3, [r3, #24]
 80029f2:	0c1b      	lsrs	r3, r3, #16
 80029f4:	b29a      	uxth	r2, r3
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	699b      	ldr	r3, [r3, #24]
 8002a00:	f003 0304 	and.w	r3, r3, #4
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	bf14      	ite	ne
 8002a08:	2301      	movne	r3, #1
 8002a0a:	2300      	moveq	r3, #0
 8002a0c:	b2db      	uxtb	r3, r3
 8002a0e:	461a      	mov	r2, r3
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	699b      	ldr	r3, [r3, #24]
 8002a1c:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	bf14      	ite	ne
 8002a24:	2301      	movne	r3, #1
 8002a26:	2300      	moveq	r3, #0
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  return HAL_OK;
 8002a32:	2300      	movs	r3, #0
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	370c      	adds	r7, #12
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3e:	4770      	bx	lr

08002a40 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b082      	sub	sp, #8
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
 8002a48:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d101      	bne.n	8002a54 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002a50:	2301      	movs	r3, #1
 8002a52:	e00b      	b.n	8002a6c <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002a5a:	2b10      	cmp	r3, #16
 8002a5c:	d105      	bne.n	8002a6a <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8002a5e:	6839      	ldr	r1, [r7, #0]
 8002a60:	6878      	ldr	r0, [r7, #4]
 8002a62:	f000 f88f 	bl	8002b84 <ETH_SetMACConfig>

    return HAL_OK;
 8002a66:	2300      	movs	r3, #0
 8002a68:	e000      	b.n	8002a6c <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
  }
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	3708      	adds	r7, #8
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}

08002a74 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b084      	sub	sp, #16
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	691b      	ldr	r3, [r3, #16]
 8002a82:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	f023 031c 	bic.w	r3, r3, #28
 8002a8a:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002a8c:	f001 fa84 	bl	8003f98 <HAL_RCC_GetHCLKFreq>
 8002a90:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	4a1d      	ldr	r2, [pc, #116]	@ (8002b0c <HAL_ETH_SetMDIOClockRange+0x98>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d908      	bls.n	8002aac <HAL_ETH_SetMDIOClockRange+0x38>
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	4a1c      	ldr	r2, [pc, #112]	@ (8002b10 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d804      	bhi.n	8002aac <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	f043 0308 	orr.w	r3, r3, #8
 8002aa8:	60fb      	str	r3, [r7, #12]
 8002aaa:	e027      	b.n	8002afc <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	4a18      	ldr	r2, [pc, #96]	@ (8002b10 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d908      	bls.n	8002ac6 <HAL_ETH_SetMDIOClockRange+0x52>
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	4a17      	ldr	r2, [pc, #92]	@ (8002b14 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d204      	bcs.n	8002ac6 <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	f043 030c 	orr.w	r3, r3, #12
 8002ac2:	60fb      	str	r3, [r7, #12]
 8002ac4:	e01a      	b.n	8002afc <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	4a12      	ldr	r2, [pc, #72]	@ (8002b14 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d303      	bcc.n	8002ad6 <HAL_ETH_SetMDIOClockRange+0x62>
 8002ace:	68bb      	ldr	r3, [r7, #8]
 8002ad0:	4a11      	ldr	r2, [pc, #68]	@ (8002b18 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d911      	bls.n	8002afa <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	4a0f      	ldr	r2, [pc, #60]	@ (8002b18 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d908      	bls.n	8002af0 <HAL_ETH_SetMDIOClockRange+0x7c>
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	4a0e      	ldr	r2, [pc, #56]	@ (8002b1c <HAL_ETH_SetMDIOClockRange+0xa8>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d804      	bhi.n	8002af0 <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	f043 0304 	orr.w	r3, r3, #4
 8002aec:	60fb      	str	r3, [r7, #12]
 8002aee:	e005      	b.n	8002afc <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	f043 0310 	orr.w	r3, r3, #16
 8002af6:	60fb      	str	r3, [r7, #12]
 8002af8:	e000      	b.n	8002afc <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8002afa:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	68fa      	ldr	r2, [r7, #12]
 8002b02:	611a      	str	r2, [r3, #16]
}
 8002b04:	bf00      	nop
 8002b06:	3710      	adds	r7, #16
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}
 8002b0c:	01312cff 	.word	0x01312cff
 8002b10:	02160ebf 	.word	0x02160ebf
 8002b14:	03938700 	.word	0x03938700
 8002b18:	05f5e0ff 	.word	0x05f5e0ff
 8002b1c:	08f0d17f 	.word	0x08f0d17f

08002b20 <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(const ETH_HandleTypeDef *heth)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b083      	sub	sp, #12
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	370c      	adds	r7, #12
 8002b32:	46bd      	mov	sp, r7
 8002b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b38:	4770      	bx	lr

08002b3a <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8002b3a:	b580      	push	{r7, lr}
 8002b3c:	b084      	sub	sp, #16
 8002b3e:	af00      	add	r7, sp, #0
 8002b40:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002b42:	2300      	movs	r3, #0
 8002b44:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002b4e:	699b      	ldr	r3, [r3, #24]
 8002b50:	687a      	ldr	r2, [r7, #4]
 8002b52:	6812      	ldr	r2, [r2, #0]
 8002b54:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002b58:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002b5c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002b66:	699b      	ldr	r3, [r3, #24]
 8002b68:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002b6a:	2001      	movs	r0, #1
 8002b6c:	f7ff f888 	bl	8001c80 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681a      	ldr	r2, [r3, #0]
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002b7a:	6193      	str	r3, [r2, #24]
}
 8002b7c:	bf00      	nop
 8002b7e:	3710      	adds	r7, #16
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}

08002b84 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b084      	sub	sp, #16
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
 8002b8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002b96:	68fa      	ldr	r2, [r7, #12]
 8002b98:	4b51      	ldr	r3, [pc, #324]	@ (8002ce0 <ETH_SetMACConfig+0x15c>)
 8002b9a:	4013      	ands	r3, r2
 8002b9c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	7c1b      	ldrb	r3, [r3, #16]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d102      	bne.n	8002bac <ETH_SetMACConfig+0x28>
 8002ba6:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002baa:	e000      	b.n	8002bae <ETH_SetMACConfig+0x2a>
 8002bac:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	7c5b      	ldrb	r3, [r3, #17]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d102      	bne.n	8002bbc <ETH_SetMACConfig+0x38>
 8002bb6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002bba:	e000      	b.n	8002bbe <ETH_SetMACConfig+0x3a>
 8002bbc:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002bbe:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002bc4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	7fdb      	ldrb	r3, [r3, #31]
 8002bca:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002bcc:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002bd2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002bd4:	683a      	ldr	r2, [r7, #0]
 8002bd6:	7f92      	ldrb	r2, [r2, #30]
 8002bd8:	2a00      	cmp	r2, #0
 8002bda:	d102      	bne.n	8002be2 <ETH_SetMACConfig+0x5e>
 8002bdc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002be0:	e000      	b.n	8002be4 <ETH_SetMACConfig+0x60>
 8002be2:	2200      	movs	r2, #0
                        macconf->Speed |
 8002be4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	7f1b      	ldrb	r3, [r3, #28]
 8002bea:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002bec:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002bf2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	791b      	ldrb	r3, [r3, #4]
 8002bf8:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8002bfa:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002bfc:	683a      	ldr	r2, [r7, #0]
 8002bfe:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002c02:	2a00      	cmp	r2, #0
 8002c04:	d102      	bne.n	8002c0c <ETH_SetMACConfig+0x88>
 8002c06:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002c0a:	e000      	b.n	8002c0e <ETH_SetMACConfig+0x8a>
 8002c0c:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002c0e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	7bdb      	ldrb	r3, [r3, #15]
 8002c14:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002c16:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002c1c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002c24:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002c26:	4313      	orrs	r3, r2
 8002c28:	68fa      	ldr	r2, [r7, #12]
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	68fa      	ldr	r2, [r7, #12]
 8002c34:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002c3e:	2001      	movs	r0, #1
 8002c40:	f7ff f81e 	bl	8001c80 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	68fa      	ldr	r2, [r7, #12]
 8002c4a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	699b      	ldr	r3, [r3, #24]
 8002c52:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002c54:	68fa      	ldr	r2, [r7, #12]
 8002c56:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8002c5a:	4013      	ands	r3, r2
 8002c5c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c62:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002c64:	683a      	ldr	r2, [r7, #0]
 8002c66:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8002c6a:	2a00      	cmp	r2, #0
 8002c6c:	d101      	bne.n	8002c72 <ETH_SetMACConfig+0xee>
 8002c6e:	2280      	movs	r2, #128	@ 0x80
 8002c70:	e000      	b.n	8002c74 <ETH_SetMACConfig+0xf0>
 8002c72:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002c74:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002c7a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002c7c:	683a      	ldr	r2, [r7, #0]
 8002c7e:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8002c82:	2a01      	cmp	r2, #1
 8002c84:	d101      	bne.n	8002c8a <ETH_SetMACConfig+0x106>
 8002c86:	2208      	movs	r2, #8
 8002c88:	e000      	b.n	8002c8c <ETH_SetMACConfig+0x108>
 8002c8a:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002c8c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002c8e:	683a      	ldr	r2, [r7, #0]
 8002c90:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8002c94:	2a01      	cmp	r2, #1
 8002c96:	d101      	bne.n	8002c9c <ETH_SetMACConfig+0x118>
 8002c98:	2204      	movs	r2, #4
 8002c9a:	e000      	b.n	8002c9e <ETH_SetMACConfig+0x11a>
 8002c9c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002c9e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002ca0:	683a      	ldr	r2, [r7, #0]
 8002ca2:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8002ca6:	2a01      	cmp	r2, #1
 8002ca8:	d101      	bne.n	8002cae <ETH_SetMACConfig+0x12a>
 8002caa:	2202      	movs	r2, #2
 8002cac:	e000      	b.n	8002cb0 <ETH_SetMACConfig+0x12c>
 8002cae:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	68fa      	ldr	r2, [r7, #12]
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	68fa      	ldr	r2, [r7, #12]
 8002cbe:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	699b      	ldr	r3, [r3, #24]
 8002cc6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002cc8:	2001      	movs	r0, #1
 8002cca:	f7fe ffd9 	bl	8001c80 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	68fa      	ldr	r2, [r7, #12]
 8002cd4:	619a      	str	r2, [r3, #24]
}
 8002cd6:	bf00      	nop
 8002cd8:	3710      	adds	r7, #16
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}
 8002cde:	bf00      	nop
 8002ce0:	ff20810f 	.word	0xff20810f

08002ce4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b084      	sub	sp, #16
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
 8002cec:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002cf6:	699b      	ldr	r3, [r3, #24]
 8002cf8:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002cfa:	68fa      	ldr	r2, [r7, #12]
 8002cfc:	4b3d      	ldr	r3, [pc, #244]	@ (8002df4 <ETH_SetDMAConfig+0x110>)
 8002cfe:	4013      	ands	r3, r2
 8002d00:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	7b1b      	ldrb	r3, [r3, #12]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d102      	bne.n	8002d10 <ETH_SetDMAConfig+0x2c>
 8002d0a:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002d0e:	e000      	b.n	8002d12 <ETH_SetDMAConfig+0x2e>
 8002d10:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	7b5b      	ldrb	r3, [r3, #13]
 8002d16:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002d18:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002d1a:	683a      	ldr	r2, [r7, #0]
 8002d1c:	7f52      	ldrb	r2, [r2, #29]
 8002d1e:	2a00      	cmp	r2, #0
 8002d20:	d102      	bne.n	8002d28 <ETH_SetDMAConfig+0x44>
 8002d22:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002d26:	e000      	b.n	8002d2a <ETH_SetDMAConfig+0x46>
 8002d28:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002d2a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	7b9b      	ldrb	r3, [r3, #14]
 8002d30:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002d32:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002d38:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	7f1b      	ldrb	r3, [r3, #28]
 8002d3e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002d40:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	7f9b      	ldrb	r3, [r3, #30]
 8002d46:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002d48:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002d4e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002d56:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	68fa      	ldr	r2, [r7, #12]
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002d68:	461a      	mov	r2, r3
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002d76:	699b      	ldr	r3, [r3, #24]
 8002d78:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002d7a:	2001      	movs	r0, #1
 8002d7c:	f7fe ff80 	bl	8001c80 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002d88:	461a      	mov	r2, r3
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	791b      	ldrb	r3, [r3, #4]
 8002d92:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002d98:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002d9e:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002da4:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002dac:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002dae:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002db4:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002db6:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002dbc:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002dbe:	687a      	ldr	r2, [r7, #4]
 8002dc0:	6812      	ldr	r2, [r2, #0]
 8002dc2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002dc6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002dca:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002dd8:	2001      	movs	r0, #1
 8002dda:	f7fe ff51 	bl	8001c80 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002de6:	461a      	mov	r2, r3
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	6013      	str	r3, [r2, #0]
}
 8002dec:	bf00      	nop
 8002dee:	3710      	adds	r7, #16
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}
 8002df4:	f8de3f23 	.word	0xf8de3f23

08002df8 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b0a6      	sub	sp, #152	@ 0x98
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002e00:	2301      	movs	r3, #1
 8002e02:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8002e06:	2301      	movs	r3, #1
 8002e08:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002e10:	2300      	movs	r3, #0
 8002e12:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002e16:	2301      	movs	r3, #1
 8002e18:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8002e22:	2301      	movs	r3, #1
 8002e24:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002e34:	2300      	movs	r3, #0
 8002e36:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002e42:	2300      	movs	r3, #0
 8002e44:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002e54:	2300      	movs	r3, #0
 8002e56:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002e5a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002e5e:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002e60:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002e64:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002e66:	2300      	movs	r3, #0
 8002e68:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002e6c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002e70:	4619      	mov	r1, r3
 8002e72:	6878      	ldr	r0, [r7, #4]
 8002e74:	f7ff fe86 	bl	8002b84 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002e80:	2301      	movs	r3, #1
 8002e82:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002e86:	2301      	movs	r3, #1
 8002e88:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002e94:	2300      	movs	r3, #0
 8002e96:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002ea8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002eac:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002eae:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002eb2:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002eb4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002eb8:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002ec8:	f107 0308 	add.w	r3, r7, #8
 8002ecc:	4619      	mov	r1, r3
 8002ece:	6878      	ldr	r0, [r7, #4]
 8002ed0:	f7ff ff08 	bl	8002ce4 <ETH_SetDMAConfig>
}
 8002ed4:	bf00      	nop
 8002ed6:	3798      	adds	r7, #152	@ 0x98
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}

08002edc <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b087      	sub	sp, #28
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	60f8      	str	r0, [r7, #12]
 8002ee4:	60b9      	str	r1, [r7, #8]
 8002ee6:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	3305      	adds	r3, #5
 8002eec:	781b      	ldrb	r3, [r3, #0]
 8002eee:	021b      	lsls	r3, r3, #8
 8002ef0:	687a      	ldr	r2, [r7, #4]
 8002ef2:	3204      	adds	r2, #4
 8002ef4:	7812      	ldrb	r2, [r2, #0]
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002efa:	68ba      	ldr	r2, [r7, #8]
 8002efc:	4b11      	ldr	r3, [pc, #68]	@ (8002f44 <ETH_MACAddressConfig+0x68>)
 8002efe:	4413      	add	r3, r2
 8002f00:	461a      	mov	r2, r3
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	3303      	adds	r3, #3
 8002f0a:	781b      	ldrb	r3, [r3, #0]
 8002f0c:	061a      	lsls	r2, r3, #24
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	3302      	adds	r3, #2
 8002f12:	781b      	ldrb	r3, [r3, #0]
 8002f14:	041b      	lsls	r3, r3, #16
 8002f16:	431a      	orrs	r2, r3
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	3301      	adds	r3, #1
 8002f1c:	781b      	ldrb	r3, [r3, #0]
 8002f1e:	021b      	lsls	r3, r3, #8
 8002f20:	4313      	orrs	r3, r2
 8002f22:	687a      	ldr	r2, [r7, #4]
 8002f24:	7812      	ldrb	r2, [r2, #0]
 8002f26:	4313      	orrs	r3, r2
 8002f28:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002f2a:	68ba      	ldr	r2, [r7, #8]
 8002f2c:	4b06      	ldr	r3, [pc, #24]	@ (8002f48 <ETH_MACAddressConfig+0x6c>)
 8002f2e:	4413      	add	r3, r2
 8002f30:	461a      	mov	r2, r3
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	6013      	str	r3, [r2, #0]
}
 8002f36:	bf00      	nop
 8002f38:	371c      	adds	r7, #28
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f40:	4770      	bx	lr
 8002f42:	bf00      	nop
 8002f44:	40028040 	.word	0x40028040
 8002f48:	40028044 	.word	0x40028044

08002f4c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b085      	sub	sp, #20
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002f54:	2300      	movs	r3, #0
 8002f56:	60fb      	str	r3, [r7, #12]
 8002f58:	e03e      	b.n	8002fd8 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	68d9      	ldr	r1, [r3, #12]
 8002f5e:	68fa      	ldr	r2, [r7, #12]
 8002f60:	4613      	mov	r3, r2
 8002f62:	009b      	lsls	r3, r3, #2
 8002f64:	4413      	add	r3, r2
 8002f66:	00db      	lsls	r3, r3, #3
 8002f68:	440b      	add	r3, r1
 8002f6a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	2200      	movs	r2, #0
 8002f76:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	2200      	movs	r2, #0
 8002f82:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002f84:	68b9      	ldr	r1, [r7, #8]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	68fa      	ldr	r2, [r7, #12]
 8002f8a:	3206      	adds	r2, #6
 8002f8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	2b02      	cmp	r3, #2
 8002fa0:	d80c      	bhi.n	8002fbc <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	68d9      	ldr	r1, [r3, #12]
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	1c5a      	adds	r2, r3, #1
 8002faa:	4613      	mov	r3, r2
 8002fac:	009b      	lsls	r3, r3, #2
 8002fae:	4413      	add	r3, r2
 8002fb0:	00db      	lsls	r3, r3, #3
 8002fb2:	440b      	add	r3, r1
 8002fb4:	461a      	mov	r2, r3
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	60da      	str	r2, [r3, #12]
 8002fba:	e004      	b.n	8002fc6 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	68db      	ldr	r3, [r3, #12]
 8002fc0:	461a      	mov	r2, r3
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	3301      	adds	r3, #1
 8002fd6:	60fb      	str	r3, [r7, #12]
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	2b03      	cmp	r3, #3
 8002fdc:	d9bd      	bls.n	8002f5a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	68da      	ldr	r2, [r3, #12]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002ff0:	611a      	str	r2, [r3, #16]
}
 8002ff2:	bf00      	nop
 8002ff4:	3714      	adds	r7, #20
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffc:	4770      	bx	lr

08002ffe <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002ffe:	b480      	push	{r7}
 8003000:	b085      	sub	sp, #20
 8003002:	af00      	add	r7, sp, #0
 8003004:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003006:	2300      	movs	r3, #0
 8003008:	60fb      	str	r3, [r7, #12]
 800300a:	e046      	b.n	800309a <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6919      	ldr	r1, [r3, #16]
 8003010:	68fa      	ldr	r2, [r7, #12]
 8003012:	4613      	mov	r3, r2
 8003014:	009b      	lsls	r3, r3, #2
 8003016:	4413      	add	r3, r2
 8003018:	00db      	lsls	r3, r3, #3
 800301a:	440b      	add	r3, r1
 800301c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	2200      	movs	r2, #0
 8003022:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	2200      	movs	r2, #0
 8003028:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 800302a:	68bb      	ldr	r3, [r7, #8]
 800302c:	2200      	movs	r2, #0
 800302e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	2200      	movs	r2, #0
 8003034:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	2200      	movs	r2, #0
 800303a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	2200      	movs	r2, #0
 8003040:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8003048:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	f44f 428c 	mov.w	r2, #17920	@ 0x4600
 8003050:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800305e:	68b9      	ldr	r1, [r7, #8]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	68fa      	ldr	r2, [r7, #12]
 8003064:	3212      	adds	r2, #18
 8003066:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	2b02      	cmp	r3, #2
 800306e:	d80c      	bhi.n	800308a <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6919      	ldr	r1, [r3, #16]
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	1c5a      	adds	r2, r3, #1
 8003078:	4613      	mov	r3, r2
 800307a:	009b      	lsls	r3, r3, #2
 800307c:	4413      	add	r3, r2
 800307e:	00db      	lsls	r3, r3, #3
 8003080:	440b      	add	r3, r1
 8003082:	461a      	mov	r2, r3
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	60da      	str	r2, [r3, #12]
 8003088:	e004      	b.n	8003094 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	691b      	ldr	r3, [r3, #16]
 800308e:	461a      	mov	r2, r3
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	3301      	adds	r3, #1
 8003098:	60fb      	str	r3, [r7, #12]
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2b03      	cmp	r3, #3
 800309e:	d9b5      	bls.n	800300c <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2200      	movs	r2, #0
 80030a4:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2200      	movs	r2, #0
 80030aa:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2200      	movs	r2, #0
 80030b0:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2200      	movs	r2, #0
 80030b6:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2200      	movs	r2, #0
 80030bc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	691a      	ldr	r2, [r3, #16]
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80030ca:	60da      	str	r2, [r3, #12]
}
 80030cc:	bf00      	nop
 80030ce:	3714      	adds	r7, #20
 80030d0:	46bd      	mov	sp, r7
 80030d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d6:	4770      	bx	lr

080030d8 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 80030d8:	b480      	push	{r7}
 80030da:	b08d      	sub	sp, #52	@ 0x34
 80030dc:	af00      	add	r7, sp, #0
 80030de:	60f8      	str	r0, [r7, #12]
 80030e0:	60b9      	str	r1, [r7, #8]
 80030e2:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	3318      	adds	r3, #24
 80030e8:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	691b      	ldr	r3, [r3, #16]
 80030ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	691b      	ldr	r3, [r3, #16]
 80030f4:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 80030f6:	2300      	movs	r3, #0
 80030f8:	627b      	str	r3, [r7, #36]	@ 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80030fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003102:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 800310a:	2300      	movs	r3, #0
 800310c:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 800310e:	6a3b      	ldr	r3, [r7, #32]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003116:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800311a:	d007      	beq.n	800312c <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 800311c:	697a      	ldr	r2, [r7, #20]
 800311e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003120:	3304      	adds	r3, #4
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	4413      	add	r3, r2
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d001      	beq.n	8003130 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 800312c:	2302      	movs	r3, #2
 800312e:	e103      	b.n	8003338 <ETH_Prepare_Tx_Descriptors+0x260>
  }


  descnbr += 1U;
 8003130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003132:	3301      	adds	r3, #1
 8003134:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8003136:	69fb      	ldr	r3, [r7, #28]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	461a      	mov	r2, r3
 800313c:	6a3b      	ldr	r3, [r7, #32]
 800313e:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8003140:	6a3b      	ldr	r3, [r7, #32]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	f423 53ff 	bic.w	r3, r3, #8160	@ 0x1fe0
 8003148:	f023 031f 	bic.w	r3, r3, #31
 800314c:	69fa      	ldr	r2, [r7, #28]
 800314e:	6852      	ldr	r2, [r2, #4]
 8003150:	431a      	orrs	r2, r3
 8003152:	6a3b      	ldr	r3, [r7, #32]
 8003154:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f003 0301 	and.w	r3, r3, #1
 800315e:	2b00      	cmp	r3, #0
 8003160:	d008      	beq.n	8003174 <ETH_Prepare_Tx_Descriptors+0x9c>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8003162:	6a3b      	ldr	r3, [r7, #32]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	695b      	ldr	r3, [r3, #20]
 800316e:	431a      	orrs	r2, r3
 8003170:	6a3b      	ldr	r3, [r7, #32]
 8003172:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f003 0320 	and.w	r3, r3, #32
 800317c:	2b00      	cmp	r3, #0
 800317e:	d008      	beq.n	8003192 <ETH_Prepare_Tx_Descriptors+0xba>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8003180:	6a3b      	ldr	r3, [r7, #32]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	691b      	ldr	r3, [r3, #16]
 800318c:	431a      	orrs	r2, r3
 800318e:	6a3b      	ldr	r3, [r7, #32]
 8003190:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f003 0304 	and.w	r3, r3, #4
 800319a:	2b00      	cmp	r3, #0
 800319c:	d005      	beq.n	80031aa <ETH_Prepare_Tx_Descriptors+0xd2>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 800319e:	6a3b      	ldr	r3, [r7, #32]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80031a6:	6a3b      	ldr	r3, [r7, #32]
 80031a8:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80031aa:	6a3b      	ldr	r3, [r7, #32]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80031b2:	6a3b      	ldr	r3, [r7, #32]
 80031b4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 80031b6:	f3bf 8f5f 	dmb	sy
}
 80031ba:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80031bc:	6a3b      	ldr	r3, [r7, #32]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80031c4:	6a3b      	ldr	r3, [r7, #32]
 80031c6:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 80031c8:	e084      	b.n	80032d4 <ETH_Prepare_Tx_Descriptors+0x1fc>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80031ca:	6a3b      	ldr	r3, [r7, #32]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80031d2:	6a3b      	ldr	r3, [r7, #32]
 80031d4:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d006      	beq.n	80031ea <ETH_Prepare_Tx_Descriptors+0x112>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80031dc:	6a3b      	ldr	r3, [r7, #32]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80031e4:	6a3b      	ldr	r3, [r7, #32]
 80031e6:	601a      	str	r2, [r3, #0]
 80031e8:	e005      	b.n	80031f6 <ETH_Prepare_Tx_Descriptors+0x11e>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80031ea:	6a3b      	ldr	r3, [r7, #32]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80031f2:	6a3b      	ldr	r3, [r7, #32]
 80031f4:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80031f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031f8:	3301      	adds	r3, #1
 80031fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80031fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031fe:	2b03      	cmp	r3, #3
 8003200:	d902      	bls.n	8003208 <ETH_Prepare_Tx_Descriptors+0x130>
 8003202:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003204:	3b04      	subs	r3, #4
 8003206:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800320c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003210:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8003212:	6a3b      	ldr	r3, [r7, #32]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800321a:	6a3b      	ldr	r3, [r7, #32]
 800321c:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 800321e:	6a3b      	ldr	r3, [r7, #32]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003226:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800322a:	d007      	beq.n	800323c <ETH_Prepare_Tx_Descriptors+0x164>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 800322c:	697a      	ldr	r2, [r7, #20]
 800322e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003230:	3304      	adds	r3, #4
 8003232:	009b      	lsls	r3, r3, #2
 8003234:	4413      	add	r3, r2
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d029      	beq.n	8003290 <ETH_Prepare_Tx_Descriptors+0x1b8>
    {
      descidx = firstdescidx;
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003244:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003248:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 800324a:	2300      	movs	r3, #0
 800324c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800324e:	e019      	b.n	8003284 <ETH_Prepare_Tx_Descriptors+0x1ac>
  __ASM volatile ("dmb 0xF":::"memory");
 8003250:	f3bf 8f5f 	dmb	sy
}
 8003254:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8003256:	6a3b      	ldr	r3, [r7, #32]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800325e:	6a3b      	ldr	r3, [r7, #32]
 8003260:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8003262:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003264:	3301      	adds	r3, #1
 8003266:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003268:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800326a:	2b03      	cmp	r3, #3
 800326c:	d902      	bls.n	8003274 <ETH_Prepare_Tx_Descriptors+0x19c>
 800326e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003270:	3b04      	subs	r3, #4
 8003272:	62fb      	str	r3, [r7, #44]	@ 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003278:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800327c:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 800327e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003280:	3301      	adds	r3, #1
 8003282:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003284:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003288:	429a      	cmp	r2, r3
 800328a:	d3e1      	bcc.n	8003250 <ETH_Prepare_Tx_Descriptors+0x178>
      }

      return HAL_ETH_ERROR_BUSY;
 800328c:	2302      	movs	r3, #2
 800328e:	e053      	b.n	8003338 <ETH_Prepare_Tx_Descriptors+0x260>
    }

    descnbr += 1U;
 8003290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003292:	3301      	adds	r3, #1
 8003294:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8003296:	69fb      	ldr	r3, [r7, #28]
 8003298:	689b      	ldr	r3, [r3, #8]
 800329a:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 800329c:	69fb      	ldr	r3, [r7, #28]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	461a      	mov	r2, r3
 80032a2:	6a3b      	ldr	r3, [r7, #32]
 80032a4:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80032a6:	6a3b      	ldr	r3, [r7, #32]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	f423 53ff 	bic.w	r3, r3, #8160	@ 0x1fe0
 80032ae:	f023 031f 	bic.w	r3, r3, #31
 80032b2:	69fa      	ldr	r2, [r7, #28]
 80032b4:	6852      	ldr	r2, [r2, #4]
 80032b6:	431a      	orrs	r2, r3
 80032b8:	6a3b      	ldr	r3, [r7, #32]
 80032ba:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 80032bc:	69bb      	ldr	r3, [r7, #24]
 80032be:	3301      	adds	r3, #1
 80032c0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 80032c2:	f3bf 8f5f 	dmb	sy
}
 80032c6:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80032c8:	6a3b      	ldr	r3, [r7, #32]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80032d0:	6a3b      	ldr	r3, [r7, #32]
 80032d2:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 80032d4:	69fb      	ldr	r3, [r7, #28]
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	f47f af76 	bne.w	80031ca <ETH_Prepare_Tx_Descriptors+0xf2>
  }

  if (ItMode != ((uint32_t)RESET))
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d006      	beq.n	80032f2 <ETH_Prepare_Tx_Descriptors+0x21a>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80032e4:	6a3b      	ldr	r3, [r7, #32]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80032ec:	6a3b      	ldr	r3, [r7, #32]
 80032ee:	601a      	str	r2, [r3, #0]
 80032f0:	e005      	b.n	80032fe <ETH_Prepare_Tx_Descriptors+0x226>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80032f2:	6a3b      	ldr	r3, [r7, #32]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80032fa:	6a3b      	ldr	r3, [r7, #32]
 80032fc:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80032fe:	6a3b      	ldr	r3, [r7, #32]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8003306:	6a3b      	ldr	r3, [r7, #32]
 8003308:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800330e:	6979      	ldr	r1, [r7, #20]
 8003310:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003312:	3304      	adds	r3, #4
 8003314:	009b      	lsls	r3, r3, #2
 8003316:	440b      	add	r3, r1
 8003318:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800331e:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8003320:	b672      	cpsid	i
}
 8003322:	bf00      	nop
  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003328:	69bb      	ldr	r3, [r7, #24]
 800332a:	4413      	add	r3, r2
 800332c:	1c5a      	adds	r2, r3, #1
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	629a      	str	r2, [r3, #40]	@ 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8003332:	b662      	cpsie	i
}
 8003334:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8003336:	2300      	movs	r3, #0
}
 8003338:	4618      	mov	r0, r3
 800333a:	3734      	adds	r7, #52	@ 0x34
 800333c:	46bd      	mov	sp, r7
 800333e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003342:	4770      	bx	lr

08003344 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003344:	b480      	push	{r7}
 8003346:	b089      	sub	sp, #36	@ 0x24
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
 800334c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800334e:	2300      	movs	r3, #0
 8003350:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003352:	2300      	movs	r3, #0
 8003354:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003356:	2300      	movs	r3, #0
 8003358:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800335a:	2300      	movs	r3, #0
 800335c:	61fb      	str	r3, [r7, #28]
 800335e:	e177      	b.n	8003650 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003360:	2201      	movs	r2, #1
 8003362:	69fb      	ldr	r3, [r7, #28]
 8003364:	fa02 f303 	lsl.w	r3, r2, r3
 8003368:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	697a      	ldr	r2, [r7, #20]
 8003370:	4013      	ands	r3, r2
 8003372:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003374:	693a      	ldr	r2, [r7, #16]
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	429a      	cmp	r2, r3
 800337a:	f040 8166 	bne.w	800364a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	f003 0303 	and.w	r3, r3, #3
 8003386:	2b01      	cmp	r3, #1
 8003388:	d005      	beq.n	8003396 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003392:	2b02      	cmp	r3, #2
 8003394:	d130      	bne.n	80033f8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800339c:	69fb      	ldr	r3, [r7, #28]
 800339e:	005b      	lsls	r3, r3, #1
 80033a0:	2203      	movs	r2, #3
 80033a2:	fa02 f303 	lsl.w	r3, r2, r3
 80033a6:	43db      	mvns	r3, r3
 80033a8:	69ba      	ldr	r2, [r7, #24]
 80033aa:	4013      	ands	r3, r2
 80033ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	68da      	ldr	r2, [r3, #12]
 80033b2:	69fb      	ldr	r3, [r7, #28]
 80033b4:	005b      	lsls	r3, r3, #1
 80033b6:	fa02 f303 	lsl.w	r3, r2, r3
 80033ba:	69ba      	ldr	r2, [r7, #24]
 80033bc:	4313      	orrs	r3, r2
 80033be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	69ba      	ldr	r2, [r7, #24]
 80033c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80033cc:	2201      	movs	r2, #1
 80033ce:	69fb      	ldr	r3, [r7, #28]
 80033d0:	fa02 f303 	lsl.w	r3, r2, r3
 80033d4:	43db      	mvns	r3, r3
 80033d6:	69ba      	ldr	r2, [r7, #24]
 80033d8:	4013      	ands	r3, r2
 80033da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	091b      	lsrs	r3, r3, #4
 80033e2:	f003 0201 	and.w	r2, r3, #1
 80033e6:	69fb      	ldr	r3, [r7, #28]
 80033e8:	fa02 f303 	lsl.w	r3, r2, r3
 80033ec:	69ba      	ldr	r2, [r7, #24]
 80033ee:	4313      	orrs	r3, r2
 80033f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	69ba      	ldr	r2, [r7, #24]
 80033f6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	f003 0303 	and.w	r3, r3, #3
 8003400:	2b03      	cmp	r3, #3
 8003402:	d017      	beq.n	8003434 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	68db      	ldr	r3, [r3, #12]
 8003408:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800340a:	69fb      	ldr	r3, [r7, #28]
 800340c:	005b      	lsls	r3, r3, #1
 800340e:	2203      	movs	r2, #3
 8003410:	fa02 f303 	lsl.w	r3, r2, r3
 8003414:	43db      	mvns	r3, r3
 8003416:	69ba      	ldr	r2, [r7, #24]
 8003418:	4013      	ands	r3, r2
 800341a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	689a      	ldr	r2, [r3, #8]
 8003420:	69fb      	ldr	r3, [r7, #28]
 8003422:	005b      	lsls	r3, r3, #1
 8003424:	fa02 f303 	lsl.w	r3, r2, r3
 8003428:	69ba      	ldr	r2, [r7, #24]
 800342a:	4313      	orrs	r3, r2
 800342c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	69ba      	ldr	r2, [r7, #24]
 8003432:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	f003 0303 	and.w	r3, r3, #3
 800343c:	2b02      	cmp	r3, #2
 800343e:	d123      	bne.n	8003488 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003440:	69fb      	ldr	r3, [r7, #28]
 8003442:	08da      	lsrs	r2, r3, #3
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	3208      	adds	r2, #8
 8003448:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800344c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800344e:	69fb      	ldr	r3, [r7, #28]
 8003450:	f003 0307 	and.w	r3, r3, #7
 8003454:	009b      	lsls	r3, r3, #2
 8003456:	220f      	movs	r2, #15
 8003458:	fa02 f303 	lsl.w	r3, r2, r3
 800345c:	43db      	mvns	r3, r3
 800345e:	69ba      	ldr	r2, [r7, #24]
 8003460:	4013      	ands	r3, r2
 8003462:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	691a      	ldr	r2, [r3, #16]
 8003468:	69fb      	ldr	r3, [r7, #28]
 800346a:	f003 0307 	and.w	r3, r3, #7
 800346e:	009b      	lsls	r3, r3, #2
 8003470:	fa02 f303 	lsl.w	r3, r2, r3
 8003474:	69ba      	ldr	r2, [r7, #24]
 8003476:	4313      	orrs	r3, r2
 8003478:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800347a:	69fb      	ldr	r3, [r7, #28]
 800347c:	08da      	lsrs	r2, r3, #3
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	3208      	adds	r2, #8
 8003482:	69b9      	ldr	r1, [r7, #24]
 8003484:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800348e:	69fb      	ldr	r3, [r7, #28]
 8003490:	005b      	lsls	r3, r3, #1
 8003492:	2203      	movs	r2, #3
 8003494:	fa02 f303 	lsl.w	r3, r2, r3
 8003498:	43db      	mvns	r3, r3
 800349a:	69ba      	ldr	r2, [r7, #24]
 800349c:	4013      	ands	r3, r2
 800349e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	f003 0203 	and.w	r2, r3, #3
 80034a8:	69fb      	ldr	r3, [r7, #28]
 80034aa:	005b      	lsls	r3, r3, #1
 80034ac:	fa02 f303 	lsl.w	r3, r2, r3
 80034b0:	69ba      	ldr	r2, [r7, #24]
 80034b2:	4313      	orrs	r3, r2
 80034b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	69ba      	ldr	r2, [r7, #24]
 80034ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	f000 80c0 	beq.w	800364a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034ca:	2300      	movs	r3, #0
 80034cc:	60fb      	str	r3, [r7, #12]
 80034ce:	4b66      	ldr	r3, [pc, #408]	@ (8003668 <HAL_GPIO_Init+0x324>)
 80034d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034d2:	4a65      	ldr	r2, [pc, #404]	@ (8003668 <HAL_GPIO_Init+0x324>)
 80034d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80034d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80034da:	4b63      	ldr	r3, [pc, #396]	@ (8003668 <HAL_GPIO_Init+0x324>)
 80034dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80034e2:	60fb      	str	r3, [r7, #12]
 80034e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80034e6:	4a61      	ldr	r2, [pc, #388]	@ (800366c <HAL_GPIO_Init+0x328>)
 80034e8:	69fb      	ldr	r3, [r7, #28]
 80034ea:	089b      	lsrs	r3, r3, #2
 80034ec:	3302      	adds	r3, #2
 80034ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80034f4:	69fb      	ldr	r3, [r7, #28]
 80034f6:	f003 0303 	and.w	r3, r3, #3
 80034fa:	009b      	lsls	r3, r3, #2
 80034fc:	220f      	movs	r2, #15
 80034fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003502:	43db      	mvns	r3, r3
 8003504:	69ba      	ldr	r2, [r7, #24]
 8003506:	4013      	ands	r3, r2
 8003508:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	4a58      	ldr	r2, [pc, #352]	@ (8003670 <HAL_GPIO_Init+0x32c>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d037      	beq.n	8003582 <HAL_GPIO_Init+0x23e>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	4a57      	ldr	r2, [pc, #348]	@ (8003674 <HAL_GPIO_Init+0x330>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d031      	beq.n	800357e <HAL_GPIO_Init+0x23a>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	4a56      	ldr	r2, [pc, #344]	@ (8003678 <HAL_GPIO_Init+0x334>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d02b      	beq.n	800357a <HAL_GPIO_Init+0x236>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	4a55      	ldr	r2, [pc, #340]	@ (800367c <HAL_GPIO_Init+0x338>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d025      	beq.n	8003576 <HAL_GPIO_Init+0x232>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	4a54      	ldr	r2, [pc, #336]	@ (8003680 <HAL_GPIO_Init+0x33c>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d01f      	beq.n	8003572 <HAL_GPIO_Init+0x22e>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	4a53      	ldr	r2, [pc, #332]	@ (8003684 <HAL_GPIO_Init+0x340>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d019      	beq.n	800356e <HAL_GPIO_Init+0x22a>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	4a52      	ldr	r2, [pc, #328]	@ (8003688 <HAL_GPIO_Init+0x344>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d013      	beq.n	800356a <HAL_GPIO_Init+0x226>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	4a51      	ldr	r2, [pc, #324]	@ (800368c <HAL_GPIO_Init+0x348>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d00d      	beq.n	8003566 <HAL_GPIO_Init+0x222>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	4a50      	ldr	r2, [pc, #320]	@ (8003690 <HAL_GPIO_Init+0x34c>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d007      	beq.n	8003562 <HAL_GPIO_Init+0x21e>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	4a4f      	ldr	r2, [pc, #316]	@ (8003694 <HAL_GPIO_Init+0x350>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d101      	bne.n	800355e <HAL_GPIO_Init+0x21a>
 800355a:	2309      	movs	r3, #9
 800355c:	e012      	b.n	8003584 <HAL_GPIO_Init+0x240>
 800355e:	230a      	movs	r3, #10
 8003560:	e010      	b.n	8003584 <HAL_GPIO_Init+0x240>
 8003562:	2308      	movs	r3, #8
 8003564:	e00e      	b.n	8003584 <HAL_GPIO_Init+0x240>
 8003566:	2307      	movs	r3, #7
 8003568:	e00c      	b.n	8003584 <HAL_GPIO_Init+0x240>
 800356a:	2306      	movs	r3, #6
 800356c:	e00a      	b.n	8003584 <HAL_GPIO_Init+0x240>
 800356e:	2305      	movs	r3, #5
 8003570:	e008      	b.n	8003584 <HAL_GPIO_Init+0x240>
 8003572:	2304      	movs	r3, #4
 8003574:	e006      	b.n	8003584 <HAL_GPIO_Init+0x240>
 8003576:	2303      	movs	r3, #3
 8003578:	e004      	b.n	8003584 <HAL_GPIO_Init+0x240>
 800357a:	2302      	movs	r3, #2
 800357c:	e002      	b.n	8003584 <HAL_GPIO_Init+0x240>
 800357e:	2301      	movs	r3, #1
 8003580:	e000      	b.n	8003584 <HAL_GPIO_Init+0x240>
 8003582:	2300      	movs	r3, #0
 8003584:	69fa      	ldr	r2, [r7, #28]
 8003586:	f002 0203 	and.w	r2, r2, #3
 800358a:	0092      	lsls	r2, r2, #2
 800358c:	4093      	lsls	r3, r2
 800358e:	69ba      	ldr	r2, [r7, #24]
 8003590:	4313      	orrs	r3, r2
 8003592:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003594:	4935      	ldr	r1, [pc, #212]	@ (800366c <HAL_GPIO_Init+0x328>)
 8003596:	69fb      	ldr	r3, [r7, #28]
 8003598:	089b      	lsrs	r3, r3, #2
 800359a:	3302      	adds	r3, #2
 800359c:	69ba      	ldr	r2, [r7, #24]
 800359e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80035a2:	4b3d      	ldr	r3, [pc, #244]	@ (8003698 <HAL_GPIO_Init+0x354>)
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	43db      	mvns	r3, r3
 80035ac:	69ba      	ldr	r2, [r7, #24]
 80035ae:	4013      	ands	r3, r2
 80035b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d003      	beq.n	80035c6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80035be:	69ba      	ldr	r2, [r7, #24]
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	4313      	orrs	r3, r2
 80035c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80035c6:	4a34      	ldr	r2, [pc, #208]	@ (8003698 <HAL_GPIO_Init+0x354>)
 80035c8:	69bb      	ldr	r3, [r7, #24]
 80035ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80035cc:	4b32      	ldr	r3, [pc, #200]	@ (8003698 <HAL_GPIO_Init+0x354>)
 80035ce:	68db      	ldr	r3, [r3, #12]
 80035d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	43db      	mvns	r3, r3
 80035d6:	69ba      	ldr	r2, [r7, #24]
 80035d8:	4013      	ands	r3, r2
 80035da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d003      	beq.n	80035f0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80035e8:	69ba      	ldr	r2, [r7, #24]
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	4313      	orrs	r3, r2
 80035ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80035f0:	4a29      	ldr	r2, [pc, #164]	@ (8003698 <HAL_GPIO_Init+0x354>)
 80035f2:	69bb      	ldr	r3, [r7, #24]
 80035f4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80035f6:	4b28      	ldr	r3, [pc, #160]	@ (8003698 <HAL_GPIO_Init+0x354>)
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	43db      	mvns	r3, r3
 8003600:	69ba      	ldr	r2, [r7, #24]
 8003602:	4013      	ands	r3, r2
 8003604:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800360e:	2b00      	cmp	r3, #0
 8003610:	d003      	beq.n	800361a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003612:	69ba      	ldr	r2, [r7, #24]
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	4313      	orrs	r3, r2
 8003618:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800361a:	4a1f      	ldr	r2, [pc, #124]	@ (8003698 <HAL_GPIO_Init+0x354>)
 800361c:	69bb      	ldr	r3, [r7, #24]
 800361e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003620:	4b1d      	ldr	r3, [pc, #116]	@ (8003698 <HAL_GPIO_Init+0x354>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	43db      	mvns	r3, r3
 800362a:	69ba      	ldr	r2, [r7, #24]
 800362c:	4013      	ands	r3, r2
 800362e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003638:	2b00      	cmp	r3, #0
 800363a:	d003      	beq.n	8003644 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800363c:	69ba      	ldr	r2, [r7, #24]
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	4313      	orrs	r3, r2
 8003642:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003644:	4a14      	ldr	r2, [pc, #80]	@ (8003698 <HAL_GPIO_Init+0x354>)
 8003646:	69bb      	ldr	r3, [r7, #24]
 8003648:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800364a:	69fb      	ldr	r3, [r7, #28]
 800364c:	3301      	adds	r3, #1
 800364e:	61fb      	str	r3, [r7, #28]
 8003650:	69fb      	ldr	r3, [r7, #28]
 8003652:	2b0f      	cmp	r3, #15
 8003654:	f67f ae84 	bls.w	8003360 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003658:	bf00      	nop
 800365a:	bf00      	nop
 800365c:	3724      	adds	r7, #36	@ 0x24
 800365e:	46bd      	mov	sp, r7
 8003660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003664:	4770      	bx	lr
 8003666:	bf00      	nop
 8003668:	40023800 	.word	0x40023800
 800366c:	40013800 	.word	0x40013800
 8003670:	40020000 	.word	0x40020000
 8003674:	40020400 	.word	0x40020400
 8003678:	40020800 	.word	0x40020800
 800367c:	40020c00 	.word	0x40020c00
 8003680:	40021000 	.word	0x40021000
 8003684:	40021400 	.word	0x40021400
 8003688:	40021800 	.word	0x40021800
 800368c:	40021c00 	.word	0x40021c00
 8003690:	40022000 	.word	0x40022000
 8003694:	40022400 	.word	0x40022400
 8003698:	40013c00 	.word	0x40013c00

0800369c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800369c:	b480      	push	{r7}
 800369e:	b083      	sub	sp, #12
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
 80036a4:	460b      	mov	r3, r1
 80036a6:	807b      	strh	r3, [r7, #2]
 80036a8:	4613      	mov	r3, r2
 80036aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80036ac:	787b      	ldrb	r3, [r7, #1]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d003      	beq.n	80036ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80036b2:	887a      	ldrh	r2, [r7, #2]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80036b8:	e003      	b.n	80036c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80036ba:	887b      	ldrh	r3, [r7, #2]
 80036bc:	041a      	lsls	r2, r3, #16
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	619a      	str	r2, [r3, #24]
}
 80036c2:	bf00      	nop
 80036c4:	370c      	adds	r7, #12
 80036c6:	46bd      	mov	sp, r7
 80036c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036cc:	4770      	bx	lr
	...

080036d0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b086      	sub	sp, #24
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d101      	bne.n	80036e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	e267      	b.n	8003bb2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f003 0301 	and.w	r3, r3, #1
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d075      	beq.n	80037da <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80036ee:	4b88      	ldr	r3, [pc, #544]	@ (8003910 <HAL_RCC_OscConfig+0x240>)
 80036f0:	689b      	ldr	r3, [r3, #8]
 80036f2:	f003 030c 	and.w	r3, r3, #12
 80036f6:	2b04      	cmp	r3, #4
 80036f8:	d00c      	beq.n	8003714 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80036fa:	4b85      	ldr	r3, [pc, #532]	@ (8003910 <HAL_RCC_OscConfig+0x240>)
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003702:	2b08      	cmp	r3, #8
 8003704:	d112      	bne.n	800372c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003706:	4b82      	ldr	r3, [pc, #520]	@ (8003910 <HAL_RCC_OscConfig+0x240>)
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800370e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003712:	d10b      	bne.n	800372c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003714:	4b7e      	ldr	r3, [pc, #504]	@ (8003910 <HAL_RCC_OscConfig+0x240>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800371c:	2b00      	cmp	r3, #0
 800371e:	d05b      	beq.n	80037d8 <HAL_RCC_OscConfig+0x108>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d157      	bne.n	80037d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003728:	2301      	movs	r3, #1
 800372a:	e242      	b.n	8003bb2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003734:	d106      	bne.n	8003744 <HAL_RCC_OscConfig+0x74>
 8003736:	4b76      	ldr	r3, [pc, #472]	@ (8003910 <HAL_RCC_OscConfig+0x240>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a75      	ldr	r2, [pc, #468]	@ (8003910 <HAL_RCC_OscConfig+0x240>)
 800373c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003740:	6013      	str	r3, [r2, #0]
 8003742:	e01d      	b.n	8003780 <HAL_RCC_OscConfig+0xb0>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800374c:	d10c      	bne.n	8003768 <HAL_RCC_OscConfig+0x98>
 800374e:	4b70      	ldr	r3, [pc, #448]	@ (8003910 <HAL_RCC_OscConfig+0x240>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a6f      	ldr	r2, [pc, #444]	@ (8003910 <HAL_RCC_OscConfig+0x240>)
 8003754:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003758:	6013      	str	r3, [r2, #0]
 800375a:	4b6d      	ldr	r3, [pc, #436]	@ (8003910 <HAL_RCC_OscConfig+0x240>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a6c      	ldr	r2, [pc, #432]	@ (8003910 <HAL_RCC_OscConfig+0x240>)
 8003760:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003764:	6013      	str	r3, [r2, #0]
 8003766:	e00b      	b.n	8003780 <HAL_RCC_OscConfig+0xb0>
 8003768:	4b69      	ldr	r3, [pc, #420]	@ (8003910 <HAL_RCC_OscConfig+0x240>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a68      	ldr	r2, [pc, #416]	@ (8003910 <HAL_RCC_OscConfig+0x240>)
 800376e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003772:	6013      	str	r3, [r2, #0]
 8003774:	4b66      	ldr	r3, [pc, #408]	@ (8003910 <HAL_RCC_OscConfig+0x240>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a65      	ldr	r2, [pc, #404]	@ (8003910 <HAL_RCC_OscConfig+0x240>)
 800377a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800377e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d013      	beq.n	80037b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003788:	f7fe fa6e 	bl	8001c68 <HAL_GetTick>
 800378c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800378e:	e008      	b.n	80037a2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003790:	f7fe fa6a 	bl	8001c68 <HAL_GetTick>
 8003794:	4602      	mov	r2, r0
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	1ad3      	subs	r3, r2, r3
 800379a:	2b64      	cmp	r3, #100	@ 0x64
 800379c:	d901      	bls.n	80037a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800379e:	2303      	movs	r3, #3
 80037a0:	e207      	b.n	8003bb2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037a2:	4b5b      	ldr	r3, [pc, #364]	@ (8003910 <HAL_RCC_OscConfig+0x240>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d0f0      	beq.n	8003790 <HAL_RCC_OscConfig+0xc0>
 80037ae:	e014      	b.n	80037da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037b0:	f7fe fa5a 	bl	8001c68 <HAL_GetTick>
 80037b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037b6:	e008      	b.n	80037ca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037b8:	f7fe fa56 	bl	8001c68 <HAL_GetTick>
 80037bc:	4602      	mov	r2, r0
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	1ad3      	subs	r3, r2, r3
 80037c2:	2b64      	cmp	r3, #100	@ 0x64
 80037c4:	d901      	bls.n	80037ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80037c6:	2303      	movs	r3, #3
 80037c8:	e1f3      	b.n	8003bb2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037ca:	4b51      	ldr	r3, [pc, #324]	@ (8003910 <HAL_RCC_OscConfig+0x240>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d1f0      	bne.n	80037b8 <HAL_RCC_OscConfig+0xe8>
 80037d6:	e000      	b.n	80037da <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f003 0302 	and.w	r3, r3, #2
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d063      	beq.n	80038ae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80037e6:	4b4a      	ldr	r3, [pc, #296]	@ (8003910 <HAL_RCC_OscConfig+0x240>)
 80037e8:	689b      	ldr	r3, [r3, #8]
 80037ea:	f003 030c 	and.w	r3, r3, #12
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d00b      	beq.n	800380a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80037f2:	4b47      	ldr	r3, [pc, #284]	@ (8003910 <HAL_RCC_OscConfig+0x240>)
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80037fa:	2b08      	cmp	r3, #8
 80037fc:	d11c      	bne.n	8003838 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80037fe:	4b44      	ldr	r3, [pc, #272]	@ (8003910 <HAL_RCC_OscConfig+0x240>)
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003806:	2b00      	cmp	r3, #0
 8003808:	d116      	bne.n	8003838 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800380a:	4b41      	ldr	r3, [pc, #260]	@ (8003910 <HAL_RCC_OscConfig+0x240>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f003 0302 	and.w	r3, r3, #2
 8003812:	2b00      	cmp	r3, #0
 8003814:	d005      	beq.n	8003822 <HAL_RCC_OscConfig+0x152>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	68db      	ldr	r3, [r3, #12]
 800381a:	2b01      	cmp	r3, #1
 800381c:	d001      	beq.n	8003822 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	e1c7      	b.n	8003bb2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003822:	4b3b      	ldr	r3, [pc, #236]	@ (8003910 <HAL_RCC_OscConfig+0x240>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	691b      	ldr	r3, [r3, #16]
 800382e:	00db      	lsls	r3, r3, #3
 8003830:	4937      	ldr	r1, [pc, #220]	@ (8003910 <HAL_RCC_OscConfig+0x240>)
 8003832:	4313      	orrs	r3, r2
 8003834:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003836:	e03a      	b.n	80038ae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	68db      	ldr	r3, [r3, #12]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d020      	beq.n	8003882 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003840:	4b34      	ldr	r3, [pc, #208]	@ (8003914 <HAL_RCC_OscConfig+0x244>)
 8003842:	2201      	movs	r2, #1
 8003844:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003846:	f7fe fa0f 	bl	8001c68 <HAL_GetTick>
 800384a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800384c:	e008      	b.n	8003860 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800384e:	f7fe fa0b 	bl	8001c68 <HAL_GetTick>
 8003852:	4602      	mov	r2, r0
 8003854:	693b      	ldr	r3, [r7, #16]
 8003856:	1ad3      	subs	r3, r2, r3
 8003858:	2b02      	cmp	r3, #2
 800385a:	d901      	bls.n	8003860 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800385c:	2303      	movs	r3, #3
 800385e:	e1a8      	b.n	8003bb2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003860:	4b2b      	ldr	r3, [pc, #172]	@ (8003910 <HAL_RCC_OscConfig+0x240>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f003 0302 	and.w	r3, r3, #2
 8003868:	2b00      	cmp	r3, #0
 800386a:	d0f0      	beq.n	800384e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800386c:	4b28      	ldr	r3, [pc, #160]	@ (8003910 <HAL_RCC_OscConfig+0x240>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	691b      	ldr	r3, [r3, #16]
 8003878:	00db      	lsls	r3, r3, #3
 800387a:	4925      	ldr	r1, [pc, #148]	@ (8003910 <HAL_RCC_OscConfig+0x240>)
 800387c:	4313      	orrs	r3, r2
 800387e:	600b      	str	r3, [r1, #0]
 8003880:	e015      	b.n	80038ae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003882:	4b24      	ldr	r3, [pc, #144]	@ (8003914 <HAL_RCC_OscConfig+0x244>)
 8003884:	2200      	movs	r2, #0
 8003886:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003888:	f7fe f9ee 	bl	8001c68 <HAL_GetTick>
 800388c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800388e:	e008      	b.n	80038a2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003890:	f7fe f9ea 	bl	8001c68 <HAL_GetTick>
 8003894:	4602      	mov	r2, r0
 8003896:	693b      	ldr	r3, [r7, #16]
 8003898:	1ad3      	subs	r3, r2, r3
 800389a:	2b02      	cmp	r3, #2
 800389c:	d901      	bls.n	80038a2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800389e:	2303      	movs	r3, #3
 80038a0:	e187      	b.n	8003bb2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038a2:	4b1b      	ldr	r3, [pc, #108]	@ (8003910 <HAL_RCC_OscConfig+0x240>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f003 0302 	and.w	r3, r3, #2
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d1f0      	bne.n	8003890 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f003 0308 	and.w	r3, r3, #8
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d036      	beq.n	8003928 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	695b      	ldr	r3, [r3, #20]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d016      	beq.n	80038f0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038c2:	4b15      	ldr	r3, [pc, #84]	@ (8003918 <HAL_RCC_OscConfig+0x248>)
 80038c4:	2201      	movs	r2, #1
 80038c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038c8:	f7fe f9ce 	bl	8001c68 <HAL_GetTick>
 80038cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038ce:	e008      	b.n	80038e2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038d0:	f7fe f9ca 	bl	8001c68 <HAL_GetTick>
 80038d4:	4602      	mov	r2, r0
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	1ad3      	subs	r3, r2, r3
 80038da:	2b02      	cmp	r3, #2
 80038dc:	d901      	bls.n	80038e2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80038de:	2303      	movs	r3, #3
 80038e0:	e167      	b.n	8003bb2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038e2:	4b0b      	ldr	r3, [pc, #44]	@ (8003910 <HAL_RCC_OscConfig+0x240>)
 80038e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80038e6:	f003 0302 	and.w	r3, r3, #2
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d0f0      	beq.n	80038d0 <HAL_RCC_OscConfig+0x200>
 80038ee:	e01b      	b.n	8003928 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038f0:	4b09      	ldr	r3, [pc, #36]	@ (8003918 <HAL_RCC_OscConfig+0x248>)
 80038f2:	2200      	movs	r2, #0
 80038f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038f6:	f7fe f9b7 	bl	8001c68 <HAL_GetTick>
 80038fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038fc:	e00e      	b.n	800391c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038fe:	f7fe f9b3 	bl	8001c68 <HAL_GetTick>
 8003902:	4602      	mov	r2, r0
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	1ad3      	subs	r3, r2, r3
 8003908:	2b02      	cmp	r3, #2
 800390a:	d907      	bls.n	800391c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800390c:	2303      	movs	r3, #3
 800390e:	e150      	b.n	8003bb2 <HAL_RCC_OscConfig+0x4e2>
 8003910:	40023800 	.word	0x40023800
 8003914:	42470000 	.word	0x42470000
 8003918:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800391c:	4b88      	ldr	r3, [pc, #544]	@ (8003b40 <HAL_RCC_OscConfig+0x470>)
 800391e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003920:	f003 0302 	and.w	r3, r3, #2
 8003924:	2b00      	cmp	r3, #0
 8003926:	d1ea      	bne.n	80038fe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f003 0304 	and.w	r3, r3, #4
 8003930:	2b00      	cmp	r3, #0
 8003932:	f000 8097 	beq.w	8003a64 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003936:	2300      	movs	r3, #0
 8003938:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800393a:	4b81      	ldr	r3, [pc, #516]	@ (8003b40 <HAL_RCC_OscConfig+0x470>)
 800393c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800393e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003942:	2b00      	cmp	r3, #0
 8003944:	d10f      	bne.n	8003966 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003946:	2300      	movs	r3, #0
 8003948:	60bb      	str	r3, [r7, #8]
 800394a:	4b7d      	ldr	r3, [pc, #500]	@ (8003b40 <HAL_RCC_OscConfig+0x470>)
 800394c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800394e:	4a7c      	ldr	r2, [pc, #496]	@ (8003b40 <HAL_RCC_OscConfig+0x470>)
 8003950:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003954:	6413      	str	r3, [r2, #64]	@ 0x40
 8003956:	4b7a      	ldr	r3, [pc, #488]	@ (8003b40 <HAL_RCC_OscConfig+0x470>)
 8003958:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800395a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800395e:	60bb      	str	r3, [r7, #8]
 8003960:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003962:	2301      	movs	r3, #1
 8003964:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003966:	4b77      	ldr	r3, [pc, #476]	@ (8003b44 <HAL_RCC_OscConfig+0x474>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800396e:	2b00      	cmp	r3, #0
 8003970:	d118      	bne.n	80039a4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003972:	4b74      	ldr	r3, [pc, #464]	@ (8003b44 <HAL_RCC_OscConfig+0x474>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a73      	ldr	r2, [pc, #460]	@ (8003b44 <HAL_RCC_OscConfig+0x474>)
 8003978:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800397c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800397e:	f7fe f973 	bl	8001c68 <HAL_GetTick>
 8003982:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003984:	e008      	b.n	8003998 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003986:	f7fe f96f 	bl	8001c68 <HAL_GetTick>
 800398a:	4602      	mov	r2, r0
 800398c:	693b      	ldr	r3, [r7, #16]
 800398e:	1ad3      	subs	r3, r2, r3
 8003990:	2b02      	cmp	r3, #2
 8003992:	d901      	bls.n	8003998 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003994:	2303      	movs	r3, #3
 8003996:	e10c      	b.n	8003bb2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003998:	4b6a      	ldr	r3, [pc, #424]	@ (8003b44 <HAL_RCC_OscConfig+0x474>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d0f0      	beq.n	8003986 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	689b      	ldr	r3, [r3, #8]
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	d106      	bne.n	80039ba <HAL_RCC_OscConfig+0x2ea>
 80039ac:	4b64      	ldr	r3, [pc, #400]	@ (8003b40 <HAL_RCC_OscConfig+0x470>)
 80039ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039b0:	4a63      	ldr	r2, [pc, #396]	@ (8003b40 <HAL_RCC_OscConfig+0x470>)
 80039b2:	f043 0301 	orr.w	r3, r3, #1
 80039b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80039b8:	e01c      	b.n	80039f4 <HAL_RCC_OscConfig+0x324>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	689b      	ldr	r3, [r3, #8]
 80039be:	2b05      	cmp	r3, #5
 80039c0:	d10c      	bne.n	80039dc <HAL_RCC_OscConfig+0x30c>
 80039c2:	4b5f      	ldr	r3, [pc, #380]	@ (8003b40 <HAL_RCC_OscConfig+0x470>)
 80039c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039c6:	4a5e      	ldr	r2, [pc, #376]	@ (8003b40 <HAL_RCC_OscConfig+0x470>)
 80039c8:	f043 0304 	orr.w	r3, r3, #4
 80039cc:	6713      	str	r3, [r2, #112]	@ 0x70
 80039ce:	4b5c      	ldr	r3, [pc, #368]	@ (8003b40 <HAL_RCC_OscConfig+0x470>)
 80039d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039d2:	4a5b      	ldr	r2, [pc, #364]	@ (8003b40 <HAL_RCC_OscConfig+0x470>)
 80039d4:	f043 0301 	orr.w	r3, r3, #1
 80039d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80039da:	e00b      	b.n	80039f4 <HAL_RCC_OscConfig+0x324>
 80039dc:	4b58      	ldr	r3, [pc, #352]	@ (8003b40 <HAL_RCC_OscConfig+0x470>)
 80039de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039e0:	4a57      	ldr	r2, [pc, #348]	@ (8003b40 <HAL_RCC_OscConfig+0x470>)
 80039e2:	f023 0301 	bic.w	r3, r3, #1
 80039e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80039e8:	4b55      	ldr	r3, [pc, #340]	@ (8003b40 <HAL_RCC_OscConfig+0x470>)
 80039ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039ec:	4a54      	ldr	r2, [pc, #336]	@ (8003b40 <HAL_RCC_OscConfig+0x470>)
 80039ee:	f023 0304 	bic.w	r3, r3, #4
 80039f2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d015      	beq.n	8003a28 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039fc:	f7fe f934 	bl	8001c68 <HAL_GetTick>
 8003a00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a02:	e00a      	b.n	8003a1a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a04:	f7fe f930 	bl	8001c68 <HAL_GetTick>
 8003a08:	4602      	mov	r2, r0
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	1ad3      	subs	r3, r2, r3
 8003a0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d901      	bls.n	8003a1a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003a16:	2303      	movs	r3, #3
 8003a18:	e0cb      	b.n	8003bb2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a1a:	4b49      	ldr	r3, [pc, #292]	@ (8003b40 <HAL_RCC_OscConfig+0x470>)
 8003a1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a1e:	f003 0302 	and.w	r3, r3, #2
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d0ee      	beq.n	8003a04 <HAL_RCC_OscConfig+0x334>
 8003a26:	e014      	b.n	8003a52 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a28:	f7fe f91e 	bl	8001c68 <HAL_GetTick>
 8003a2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a2e:	e00a      	b.n	8003a46 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a30:	f7fe f91a 	bl	8001c68 <HAL_GetTick>
 8003a34:	4602      	mov	r2, r0
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	1ad3      	subs	r3, r2, r3
 8003a3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d901      	bls.n	8003a46 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003a42:	2303      	movs	r3, #3
 8003a44:	e0b5      	b.n	8003bb2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a46:	4b3e      	ldr	r3, [pc, #248]	@ (8003b40 <HAL_RCC_OscConfig+0x470>)
 8003a48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a4a:	f003 0302 	and.w	r3, r3, #2
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d1ee      	bne.n	8003a30 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a52:	7dfb      	ldrb	r3, [r7, #23]
 8003a54:	2b01      	cmp	r3, #1
 8003a56:	d105      	bne.n	8003a64 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a58:	4b39      	ldr	r3, [pc, #228]	@ (8003b40 <HAL_RCC_OscConfig+0x470>)
 8003a5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a5c:	4a38      	ldr	r2, [pc, #224]	@ (8003b40 <HAL_RCC_OscConfig+0x470>)
 8003a5e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003a62:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	699b      	ldr	r3, [r3, #24]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	f000 80a1 	beq.w	8003bb0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003a6e:	4b34      	ldr	r3, [pc, #208]	@ (8003b40 <HAL_RCC_OscConfig+0x470>)
 8003a70:	689b      	ldr	r3, [r3, #8]
 8003a72:	f003 030c 	and.w	r3, r3, #12
 8003a76:	2b08      	cmp	r3, #8
 8003a78:	d05c      	beq.n	8003b34 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	699b      	ldr	r3, [r3, #24]
 8003a7e:	2b02      	cmp	r3, #2
 8003a80:	d141      	bne.n	8003b06 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a82:	4b31      	ldr	r3, [pc, #196]	@ (8003b48 <HAL_RCC_OscConfig+0x478>)
 8003a84:	2200      	movs	r2, #0
 8003a86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a88:	f7fe f8ee 	bl	8001c68 <HAL_GetTick>
 8003a8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a8e:	e008      	b.n	8003aa2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a90:	f7fe f8ea 	bl	8001c68 <HAL_GetTick>
 8003a94:	4602      	mov	r2, r0
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	1ad3      	subs	r3, r2, r3
 8003a9a:	2b02      	cmp	r3, #2
 8003a9c:	d901      	bls.n	8003aa2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003a9e:	2303      	movs	r3, #3
 8003aa0:	e087      	b.n	8003bb2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003aa2:	4b27      	ldr	r3, [pc, #156]	@ (8003b40 <HAL_RCC_OscConfig+0x470>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d1f0      	bne.n	8003a90 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	69da      	ldr	r2, [r3, #28]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6a1b      	ldr	r3, [r3, #32]
 8003ab6:	431a      	orrs	r2, r3
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003abc:	019b      	lsls	r3, r3, #6
 8003abe:	431a      	orrs	r2, r3
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ac4:	085b      	lsrs	r3, r3, #1
 8003ac6:	3b01      	subs	r3, #1
 8003ac8:	041b      	lsls	r3, r3, #16
 8003aca:	431a      	orrs	r2, r3
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ad0:	061b      	lsls	r3, r3, #24
 8003ad2:	491b      	ldr	r1, [pc, #108]	@ (8003b40 <HAL_RCC_OscConfig+0x470>)
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ad8:	4b1b      	ldr	r3, [pc, #108]	@ (8003b48 <HAL_RCC_OscConfig+0x478>)
 8003ada:	2201      	movs	r2, #1
 8003adc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ade:	f7fe f8c3 	bl	8001c68 <HAL_GetTick>
 8003ae2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ae4:	e008      	b.n	8003af8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ae6:	f7fe f8bf 	bl	8001c68 <HAL_GetTick>
 8003aea:	4602      	mov	r2, r0
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	1ad3      	subs	r3, r2, r3
 8003af0:	2b02      	cmp	r3, #2
 8003af2:	d901      	bls.n	8003af8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003af4:	2303      	movs	r3, #3
 8003af6:	e05c      	b.n	8003bb2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003af8:	4b11      	ldr	r3, [pc, #68]	@ (8003b40 <HAL_RCC_OscConfig+0x470>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d0f0      	beq.n	8003ae6 <HAL_RCC_OscConfig+0x416>
 8003b04:	e054      	b.n	8003bb0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b06:	4b10      	ldr	r3, [pc, #64]	@ (8003b48 <HAL_RCC_OscConfig+0x478>)
 8003b08:	2200      	movs	r2, #0
 8003b0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b0c:	f7fe f8ac 	bl	8001c68 <HAL_GetTick>
 8003b10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b12:	e008      	b.n	8003b26 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b14:	f7fe f8a8 	bl	8001c68 <HAL_GetTick>
 8003b18:	4602      	mov	r2, r0
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	1ad3      	subs	r3, r2, r3
 8003b1e:	2b02      	cmp	r3, #2
 8003b20:	d901      	bls.n	8003b26 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003b22:	2303      	movs	r3, #3
 8003b24:	e045      	b.n	8003bb2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b26:	4b06      	ldr	r3, [pc, #24]	@ (8003b40 <HAL_RCC_OscConfig+0x470>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d1f0      	bne.n	8003b14 <HAL_RCC_OscConfig+0x444>
 8003b32:	e03d      	b.n	8003bb0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	699b      	ldr	r3, [r3, #24]
 8003b38:	2b01      	cmp	r3, #1
 8003b3a:	d107      	bne.n	8003b4c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	e038      	b.n	8003bb2 <HAL_RCC_OscConfig+0x4e2>
 8003b40:	40023800 	.word	0x40023800
 8003b44:	40007000 	.word	0x40007000
 8003b48:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003b4c:	4b1b      	ldr	r3, [pc, #108]	@ (8003bbc <HAL_RCC_OscConfig+0x4ec>)
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	699b      	ldr	r3, [r3, #24]
 8003b56:	2b01      	cmp	r3, #1
 8003b58:	d028      	beq.n	8003bac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b64:	429a      	cmp	r2, r3
 8003b66:	d121      	bne.n	8003bac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b72:	429a      	cmp	r2, r3
 8003b74:	d11a      	bne.n	8003bac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b76:	68fa      	ldr	r2, [r7, #12]
 8003b78:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003b7c:	4013      	ands	r3, r2
 8003b7e:	687a      	ldr	r2, [r7, #4]
 8003b80:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003b82:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d111      	bne.n	8003bac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b92:	085b      	lsrs	r3, r3, #1
 8003b94:	3b01      	subs	r3, #1
 8003b96:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b98:	429a      	cmp	r2, r3
 8003b9a:	d107      	bne.n	8003bac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ba6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ba8:	429a      	cmp	r2, r3
 8003baa:	d001      	beq.n	8003bb0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003bac:	2301      	movs	r3, #1
 8003bae:	e000      	b.n	8003bb2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003bb0:	2300      	movs	r3, #0
}
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	3718      	adds	r7, #24
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd80      	pop	{r7, pc}
 8003bba:	bf00      	nop
 8003bbc:	40023800 	.word	0x40023800

08003bc0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b084      	sub	sp, #16
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
 8003bc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d101      	bne.n	8003bd4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	e0cc      	b.n	8003d6e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003bd4:	4b68      	ldr	r3, [pc, #416]	@ (8003d78 <HAL_RCC_ClockConfig+0x1b8>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f003 030f 	and.w	r3, r3, #15
 8003bdc:	683a      	ldr	r2, [r7, #0]
 8003bde:	429a      	cmp	r2, r3
 8003be0:	d90c      	bls.n	8003bfc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003be2:	4b65      	ldr	r3, [pc, #404]	@ (8003d78 <HAL_RCC_ClockConfig+0x1b8>)
 8003be4:	683a      	ldr	r2, [r7, #0]
 8003be6:	b2d2      	uxtb	r2, r2
 8003be8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bea:	4b63      	ldr	r3, [pc, #396]	@ (8003d78 <HAL_RCC_ClockConfig+0x1b8>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f003 030f 	and.w	r3, r3, #15
 8003bf2:	683a      	ldr	r2, [r7, #0]
 8003bf4:	429a      	cmp	r2, r3
 8003bf6:	d001      	beq.n	8003bfc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	e0b8      	b.n	8003d6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f003 0302 	and.w	r3, r3, #2
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d020      	beq.n	8003c4a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f003 0304 	and.w	r3, r3, #4
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d005      	beq.n	8003c20 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c14:	4b59      	ldr	r3, [pc, #356]	@ (8003d7c <HAL_RCC_ClockConfig+0x1bc>)
 8003c16:	689b      	ldr	r3, [r3, #8]
 8003c18:	4a58      	ldr	r2, [pc, #352]	@ (8003d7c <HAL_RCC_ClockConfig+0x1bc>)
 8003c1a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003c1e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f003 0308 	and.w	r3, r3, #8
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d005      	beq.n	8003c38 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c2c:	4b53      	ldr	r3, [pc, #332]	@ (8003d7c <HAL_RCC_ClockConfig+0x1bc>)
 8003c2e:	689b      	ldr	r3, [r3, #8]
 8003c30:	4a52      	ldr	r2, [pc, #328]	@ (8003d7c <HAL_RCC_ClockConfig+0x1bc>)
 8003c32:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003c36:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c38:	4b50      	ldr	r3, [pc, #320]	@ (8003d7c <HAL_RCC_ClockConfig+0x1bc>)
 8003c3a:	689b      	ldr	r3, [r3, #8]
 8003c3c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	494d      	ldr	r1, [pc, #308]	@ (8003d7c <HAL_RCC_ClockConfig+0x1bc>)
 8003c46:	4313      	orrs	r3, r2
 8003c48:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f003 0301 	and.w	r3, r3, #1
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d044      	beq.n	8003ce0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	2b01      	cmp	r3, #1
 8003c5c:	d107      	bne.n	8003c6e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c5e:	4b47      	ldr	r3, [pc, #284]	@ (8003d7c <HAL_RCC_ClockConfig+0x1bc>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d119      	bne.n	8003c9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	e07f      	b.n	8003d6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	2b02      	cmp	r3, #2
 8003c74:	d003      	beq.n	8003c7e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c7a:	2b03      	cmp	r3, #3
 8003c7c:	d107      	bne.n	8003c8e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c7e:	4b3f      	ldr	r3, [pc, #252]	@ (8003d7c <HAL_RCC_ClockConfig+0x1bc>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d109      	bne.n	8003c9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	e06f      	b.n	8003d6e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c8e:	4b3b      	ldr	r3, [pc, #236]	@ (8003d7c <HAL_RCC_ClockConfig+0x1bc>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f003 0302 	and.w	r3, r3, #2
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d101      	bne.n	8003c9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	e067      	b.n	8003d6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c9e:	4b37      	ldr	r3, [pc, #220]	@ (8003d7c <HAL_RCC_ClockConfig+0x1bc>)
 8003ca0:	689b      	ldr	r3, [r3, #8]
 8003ca2:	f023 0203 	bic.w	r2, r3, #3
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	4934      	ldr	r1, [pc, #208]	@ (8003d7c <HAL_RCC_ClockConfig+0x1bc>)
 8003cac:	4313      	orrs	r3, r2
 8003cae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003cb0:	f7fd ffda 	bl	8001c68 <HAL_GetTick>
 8003cb4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cb6:	e00a      	b.n	8003cce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cb8:	f7fd ffd6 	bl	8001c68 <HAL_GetTick>
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	1ad3      	subs	r3, r2, r3
 8003cc2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d901      	bls.n	8003cce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003cca:	2303      	movs	r3, #3
 8003ccc:	e04f      	b.n	8003d6e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cce:	4b2b      	ldr	r3, [pc, #172]	@ (8003d7c <HAL_RCC_ClockConfig+0x1bc>)
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	f003 020c 	and.w	r2, r3, #12
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	009b      	lsls	r3, r3, #2
 8003cdc:	429a      	cmp	r2, r3
 8003cde:	d1eb      	bne.n	8003cb8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ce0:	4b25      	ldr	r3, [pc, #148]	@ (8003d78 <HAL_RCC_ClockConfig+0x1b8>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f003 030f 	and.w	r3, r3, #15
 8003ce8:	683a      	ldr	r2, [r7, #0]
 8003cea:	429a      	cmp	r2, r3
 8003cec:	d20c      	bcs.n	8003d08 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cee:	4b22      	ldr	r3, [pc, #136]	@ (8003d78 <HAL_RCC_ClockConfig+0x1b8>)
 8003cf0:	683a      	ldr	r2, [r7, #0]
 8003cf2:	b2d2      	uxtb	r2, r2
 8003cf4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cf6:	4b20      	ldr	r3, [pc, #128]	@ (8003d78 <HAL_RCC_ClockConfig+0x1b8>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f003 030f 	and.w	r3, r3, #15
 8003cfe:	683a      	ldr	r2, [r7, #0]
 8003d00:	429a      	cmp	r2, r3
 8003d02:	d001      	beq.n	8003d08 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003d04:	2301      	movs	r3, #1
 8003d06:	e032      	b.n	8003d6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f003 0304 	and.w	r3, r3, #4
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d008      	beq.n	8003d26 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d14:	4b19      	ldr	r3, [pc, #100]	@ (8003d7c <HAL_RCC_ClockConfig+0x1bc>)
 8003d16:	689b      	ldr	r3, [r3, #8]
 8003d18:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	68db      	ldr	r3, [r3, #12]
 8003d20:	4916      	ldr	r1, [pc, #88]	@ (8003d7c <HAL_RCC_ClockConfig+0x1bc>)
 8003d22:	4313      	orrs	r3, r2
 8003d24:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f003 0308 	and.w	r3, r3, #8
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d009      	beq.n	8003d46 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d32:	4b12      	ldr	r3, [pc, #72]	@ (8003d7c <HAL_RCC_ClockConfig+0x1bc>)
 8003d34:	689b      	ldr	r3, [r3, #8]
 8003d36:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	691b      	ldr	r3, [r3, #16]
 8003d3e:	00db      	lsls	r3, r3, #3
 8003d40:	490e      	ldr	r1, [pc, #56]	@ (8003d7c <HAL_RCC_ClockConfig+0x1bc>)
 8003d42:	4313      	orrs	r3, r2
 8003d44:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003d46:	f000 f821 	bl	8003d8c <HAL_RCC_GetSysClockFreq>
 8003d4a:	4602      	mov	r2, r0
 8003d4c:	4b0b      	ldr	r3, [pc, #44]	@ (8003d7c <HAL_RCC_ClockConfig+0x1bc>)
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	091b      	lsrs	r3, r3, #4
 8003d52:	f003 030f 	and.w	r3, r3, #15
 8003d56:	490a      	ldr	r1, [pc, #40]	@ (8003d80 <HAL_RCC_ClockConfig+0x1c0>)
 8003d58:	5ccb      	ldrb	r3, [r1, r3]
 8003d5a:	fa22 f303 	lsr.w	r3, r2, r3
 8003d5e:	4a09      	ldr	r2, [pc, #36]	@ (8003d84 <HAL_RCC_ClockConfig+0x1c4>)
 8003d60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003d62:	4b09      	ldr	r3, [pc, #36]	@ (8003d88 <HAL_RCC_ClockConfig+0x1c8>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4618      	mov	r0, r3
 8003d68:	f7fd facc 	bl	8001304 <HAL_InitTick>

  return HAL_OK;
 8003d6c:	2300      	movs	r3, #0
}
 8003d6e:	4618      	mov	r0, r3
 8003d70:	3710      	adds	r7, #16
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}
 8003d76:	bf00      	nop
 8003d78:	40023c00 	.word	0x40023c00
 8003d7c:	40023800 	.word	0x40023800
 8003d80:	0801ad6c 	.word	0x0801ad6c
 8003d84:	20000100 	.word	0x20000100
 8003d88:	20000104 	.word	0x20000104

08003d8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d90:	b094      	sub	sp, #80	@ 0x50
 8003d92:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003d94:	2300      	movs	r3, #0
 8003d96:	647b      	str	r3, [r7, #68]	@ 0x44
 8003d98:	2300      	movs	r3, #0
 8003d9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003da0:	2300      	movs	r3, #0
 8003da2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003da4:	4b79      	ldr	r3, [pc, #484]	@ (8003f8c <HAL_RCC_GetSysClockFreq+0x200>)
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	f003 030c 	and.w	r3, r3, #12
 8003dac:	2b08      	cmp	r3, #8
 8003dae:	d00d      	beq.n	8003dcc <HAL_RCC_GetSysClockFreq+0x40>
 8003db0:	2b08      	cmp	r3, #8
 8003db2:	f200 80e1 	bhi.w	8003f78 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d002      	beq.n	8003dc0 <HAL_RCC_GetSysClockFreq+0x34>
 8003dba:	2b04      	cmp	r3, #4
 8003dbc:	d003      	beq.n	8003dc6 <HAL_RCC_GetSysClockFreq+0x3a>
 8003dbe:	e0db      	b.n	8003f78 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003dc0:	4b73      	ldr	r3, [pc, #460]	@ (8003f90 <HAL_RCC_GetSysClockFreq+0x204>)
 8003dc2:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8003dc4:	e0db      	b.n	8003f7e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003dc6:	4b73      	ldr	r3, [pc, #460]	@ (8003f94 <HAL_RCC_GetSysClockFreq+0x208>)
 8003dc8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003dca:	e0d8      	b.n	8003f7e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003dcc:	4b6f      	ldr	r3, [pc, #444]	@ (8003f8c <HAL_RCC_GetSysClockFreq+0x200>)
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003dd4:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003dd6:	4b6d      	ldr	r3, [pc, #436]	@ (8003f8c <HAL_RCC_GetSysClockFreq+0x200>)
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d063      	beq.n	8003eaa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003de2:	4b6a      	ldr	r3, [pc, #424]	@ (8003f8c <HAL_RCC_GetSysClockFreq+0x200>)
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	099b      	lsrs	r3, r3, #6
 8003de8:	2200      	movs	r2, #0
 8003dea:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003dec:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003dee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003df0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003df4:	633b      	str	r3, [r7, #48]	@ 0x30
 8003df6:	2300      	movs	r3, #0
 8003df8:	637b      	str	r3, [r7, #52]	@ 0x34
 8003dfa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003dfe:	4622      	mov	r2, r4
 8003e00:	462b      	mov	r3, r5
 8003e02:	f04f 0000 	mov.w	r0, #0
 8003e06:	f04f 0100 	mov.w	r1, #0
 8003e0a:	0159      	lsls	r1, r3, #5
 8003e0c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e10:	0150      	lsls	r0, r2, #5
 8003e12:	4602      	mov	r2, r0
 8003e14:	460b      	mov	r3, r1
 8003e16:	4621      	mov	r1, r4
 8003e18:	1a51      	subs	r1, r2, r1
 8003e1a:	6139      	str	r1, [r7, #16]
 8003e1c:	4629      	mov	r1, r5
 8003e1e:	eb63 0301 	sbc.w	r3, r3, r1
 8003e22:	617b      	str	r3, [r7, #20]
 8003e24:	f04f 0200 	mov.w	r2, #0
 8003e28:	f04f 0300 	mov.w	r3, #0
 8003e2c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003e30:	4659      	mov	r1, fp
 8003e32:	018b      	lsls	r3, r1, #6
 8003e34:	4651      	mov	r1, sl
 8003e36:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003e3a:	4651      	mov	r1, sl
 8003e3c:	018a      	lsls	r2, r1, #6
 8003e3e:	4651      	mov	r1, sl
 8003e40:	ebb2 0801 	subs.w	r8, r2, r1
 8003e44:	4659      	mov	r1, fp
 8003e46:	eb63 0901 	sbc.w	r9, r3, r1
 8003e4a:	f04f 0200 	mov.w	r2, #0
 8003e4e:	f04f 0300 	mov.w	r3, #0
 8003e52:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003e56:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003e5a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003e5e:	4690      	mov	r8, r2
 8003e60:	4699      	mov	r9, r3
 8003e62:	4623      	mov	r3, r4
 8003e64:	eb18 0303 	adds.w	r3, r8, r3
 8003e68:	60bb      	str	r3, [r7, #8]
 8003e6a:	462b      	mov	r3, r5
 8003e6c:	eb49 0303 	adc.w	r3, r9, r3
 8003e70:	60fb      	str	r3, [r7, #12]
 8003e72:	f04f 0200 	mov.w	r2, #0
 8003e76:	f04f 0300 	mov.w	r3, #0
 8003e7a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003e7e:	4629      	mov	r1, r5
 8003e80:	024b      	lsls	r3, r1, #9
 8003e82:	4621      	mov	r1, r4
 8003e84:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003e88:	4621      	mov	r1, r4
 8003e8a:	024a      	lsls	r2, r1, #9
 8003e8c:	4610      	mov	r0, r2
 8003e8e:	4619      	mov	r1, r3
 8003e90:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003e92:	2200      	movs	r2, #0
 8003e94:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003e96:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003e98:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003e9c:	f7fc fa00 	bl	80002a0 <__aeabi_uldivmod>
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	460b      	mov	r3, r1
 8003ea4:	4613      	mov	r3, r2
 8003ea6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003ea8:	e058      	b.n	8003f5c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003eaa:	4b38      	ldr	r3, [pc, #224]	@ (8003f8c <HAL_RCC_GetSysClockFreq+0x200>)
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	099b      	lsrs	r3, r3, #6
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	4611      	mov	r1, r2
 8003eb6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003eba:	623b      	str	r3, [r7, #32]
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ec0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003ec4:	4642      	mov	r2, r8
 8003ec6:	464b      	mov	r3, r9
 8003ec8:	f04f 0000 	mov.w	r0, #0
 8003ecc:	f04f 0100 	mov.w	r1, #0
 8003ed0:	0159      	lsls	r1, r3, #5
 8003ed2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ed6:	0150      	lsls	r0, r2, #5
 8003ed8:	4602      	mov	r2, r0
 8003eda:	460b      	mov	r3, r1
 8003edc:	4641      	mov	r1, r8
 8003ede:	ebb2 0a01 	subs.w	sl, r2, r1
 8003ee2:	4649      	mov	r1, r9
 8003ee4:	eb63 0b01 	sbc.w	fp, r3, r1
 8003ee8:	f04f 0200 	mov.w	r2, #0
 8003eec:	f04f 0300 	mov.w	r3, #0
 8003ef0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003ef4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003ef8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003efc:	ebb2 040a 	subs.w	r4, r2, sl
 8003f00:	eb63 050b 	sbc.w	r5, r3, fp
 8003f04:	f04f 0200 	mov.w	r2, #0
 8003f08:	f04f 0300 	mov.w	r3, #0
 8003f0c:	00eb      	lsls	r3, r5, #3
 8003f0e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003f12:	00e2      	lsls	r2, r4, #3
 8003f14:	4614      	mov	r4, r2
 8003f16:	461d      	mov	r5, r3
 8003f18:	4643      	mov	r3, r8
 8003f1a:	18e3      	adds	r3, r4, r3
 8003f1c:	603b      	str	r3, [r7, #0]
 8003f1e:	464b      	mov	r3, r9
 8003f20:	eb45 0303 	adc.w	r3, r5, r3
 8003f24:	607b      	str	r3, [r7, #4]
 8003f26:	f04f 0200 	mov.w	r2, #0
 8003f2a:	f04f 0300 	mov.w	r3, #0
 8003f2e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003f32:	4629      	mov	r1, r5
 8003f34:	028b      	lsls	r3, r1, #10
 8003f36:	4621      	mov	r1, r4
 8003f38:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003f3c:	4621      	mov	r1, r4
 8003f3e:	028a      	lsls	r2, r1, #10
 8003f40:	4610      	mov	r0, r2
 8003f42:	4619      	mov	r1, r3
 8003f44:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003f46:	2200      	movs	r2, #0
 8003f48:	61bb      	str	r3, [r7, #24]
 8003f4a:	61fa      	str	r2, [r7, #28]
 8003f4c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003f50:	f7fc f9a6 	bl	80002a0 <__aeabi_uldivmod>
 8003f54:	4602      	mov	r2, r0
 8003f56:	460b      	mov	r3, r1
 8003f58:	4613      	mov	r3, r2
 8003f5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003f5c:	4b0b      	ldr	r3, [pc, #44]	@ (8003f8c <HAL_RCC_GetSysClockFreq+0x200>)
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	0c1b      	lsrs	r3, r3, #16
 8003f62:	f003 0303 	and.w	r3, r3, #3
 8003f66:	3301      	adds	r3, #1
 8003f68:	005b      	lsls	r3, r3, #1
 8003f6a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8003f6c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003f6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f70:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f74:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003f76:	e002      	b.n	8003f7e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003f78:	4b05      	ldr	r3, [pc, #20]	@ (8003f90 <HAL_RCC_GetSysClockFreq+0x204>)
 8003f7a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003f7c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f7e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	3750      	adds	r7, #80	@ 0x50
 8003f84:	46bd      	mov	sp, r7
 8003f86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f8a:	bf00      	nop
 8003f8c:	40023800 	.word	0x40023800
 8003f90:	00f42400 	.word	0x00f42400
 8003f94:	007a1200 	.word	0x007a1200

08003f98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f9c:	4b03      	ldr	r3, [pc, #12]	@ (8003fac <HAL_RCC_GetHCLKFreq+0x14>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
}
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa8:	4770      	bx	lr
 8003faa:	bf00      	nop
 8003fac:	20000100 	.word	0x20000100

08003fb0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003fb4:	f7ff fff0 	bl	8003f98 <HAL_RCC_GetHCLKFreq>
 8003fb8:	4602      	mov	r2, r0
 8003fba:	4b05      	ldr	r3, [pc, #20]	@ (8003fd0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003fbc:	689b      	ldr	r3, [r3, #8]
 8003fbe:	0a9b      	lsrs	r3, r3, #10
 8003fc0:	f003 0307 	and.w	r3, r3, #7
 8003fc4:	4903      	ldr	r1, [pc, #12]	@ (8003fd4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003fc6:	5ccb      	ldrb	r3, [r1, r3]
 8003fc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fcc:	4618      	mov	r0, r3
 8003fce:	bd80      	pop	{r7, pc}
 8003fd0:	40023800 	.word	0x40023800
 8003fd4:	0801ad7c 	.word	0x0801ad7c

08003fd8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003fdc:	f7ff ffdc 	bl	8003f98 <HAL_RCC_GetHCLKFreq>
 8003fe0:	4602      	mov	r2, r0
 8003fe2:	4b05      	ldr	r3, [pc, #20]	@ (8003ff8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003fe4:	689b      	ldr	r3, [r3, #8]
 8003fe6:	0b5b      	lsrs	r3, r3, #13
 8003fe8:	f003 0307 	and.w	r3, r3, #7
 8003fec:	4903      	ldr	r1, [pc, #12]	@ (8003ffc <HAL_RCC_GetPCLK2Freq+0x24>)
 8003fee:	5ccb      	ldrb	r3, [r1, r3]
 8003ff0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	bd80      	pop	{r7, pc}
 8003ff8:	40023800 	.word	0x40023800
 8003ffc:	0801ad7c 	.word	0x0801ad7c

08004000 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004000:	b480      	push	{r7}
 8004002:	b083      	sub	sp, #12
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
 8004008:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	220f      	movs	r2, #15
 800400e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004010:	4b12      	ldr	r3, [pc, #72]	@ (800405c <HAL_RCC_GetClockConfig+0x5c>)
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	f003 0203 	and.w	r2, r3, #3
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800401c:	4b0f      	ldr	r3, [pc, #60]	@ (800405c <HAL_RCC_GetClockConfig+0x5c>)
 800401e:	689b      	ldr	r3, [r3, #8]
 8004020:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004028:	4b0c      	ldr	r3, [pc, #48]	@ (800405c <HAL_RCC_GetClockConfig+0x5c>)
 800402a:	689b      	ldr	r3, [r3, #8]
 800402c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004034:	4b09      	ldr	r3, [pc, #36]	@ (800405c <HAL_RCC_GetClockConfig+0x5c>)
 8004036:	689b      	ldr	r3, [r3, #8]
 8004038:	08db      	lsrs	r3, r3, #3
 800403a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004042:	4b07      	ldr	r3, [pc, #28]	@ (8004060 <HAL_RCC_GetClockConfig+0x60>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f003 020f 	and.w	r2, r3, #15
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	601a      	str	r2, [r3, #0]
}
 800404e:	bf00      	nop
 8004050:	370c      	adds	r7, #12
 8004052:	46bd      	mov	sp, r7
 8004054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004058:	4770      	bx	lr
 800405a:	bf00      	nop
 800405c:	40023800 	.word	0x40023800
 8004060:	40023c00 	.word	0x40023c00

08004064 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b082      	sub	sp, #8
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d101      	bne.n	8004076 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004072:	2301      	movs	r3, #1
 8004074:	e041      	b.n	80040fa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800407c:	b2db      	uxtb	r3, r3
 800407e:	2b00      	cmp	r3, #0
 8004080:	d106      	bne.n	8004090 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2200      	movs	r2, #0
 8004086:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800408a:	6878      	ldr	r0, [r7, #4]
 800408c:	f000 f839 	bl	8004102 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2202      	movs	r2, #2
 8004094:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681a      	ldr	r2, [r3, #0]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	3304      	adds	r3, #4
 80040a0:	4619      	mov	r1, r3
 80040a2:	4610      	mov	r0, r2
 80040a4:	f000 f9c0 	bl	8004428 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2201      	movs	r2, #1
 80040ac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2201      	movs	r2, #1
 80040b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2201      	movs	r2, #1
 80040bc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2201      	movs	r2, #1
 80040c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2201      	movs	r2, #1
 80040cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2201      	movs	r2, #1
 80040d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2201      	movs	r2, #1
 80040dc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2201      	movs	r2, #1
 80040e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2201      	movs	r2, #1
 80040ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2201      	movs	r2, #1
 80040f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80040f8:	2300      	movs	r3, #0
}
 80040fa:	4618      	mov	r0, r3
 80040fc:	3708      	adds	r7, #8
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}

08004102 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004102:	b480      	push	{r7}
 8004104:	b083      	sub	sp, #12
 8004106:	af00      	add	r7, sp, #0
 8004108:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800410a:	bf00      	nop
 800410c:	370c      	adds	r7, #12
 800410e:	46bd      	mov	sp, r7
 8004110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004114:	4770      	bx	lr
	...

08004118 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004118:	b480      	push	{r7}
 800411a:	b085      	sub	sp, #20
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004126:	b2db      	uxtb	r3, r3
 8004128:	2b01      	cmp	r3, #1
 800412a:	d001      	beq.n	8004130 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800412c:	2301      	movs	r3, #1
 800412e:	e04e      	b.n	80041ce <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2202      	movs	r2, #2
 8004134:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	68da      	ldr	r2, [r3, #12]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f042 0201 	orr.w	r2, r2, #1
 8004146:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a23      	ldr	r2, [pc, #140]	@ (80041dc <HAL_TIM_Base_Start_IT+0xc4>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d022      	beq.n	8004198 <HAL_TIM_Base_Start_IT+0x80>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800415a:	d01d      	beq.n	8004198 <HAL_TIM_Base_Start_IT+0x80>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a1f      	ldr	r2, [pc, #124]	@ (80041e0 <HAL_TIM_Base_Start_IT+0xc8>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d018      	beq.n	8004198 <HAL_TIM_Base_Start_IT+0x80>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a1e      	ldr	r2, [pc, #120]	@ (80041e4 <HAL_TIM_Base_Start_IT+0xcc>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d013      	beq.n	8004198 <HAL_TIM_Base_Start_IT+0x80>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a1c      	ldr	r2, [pc, #112]	@ (80041e8 <HAL_TIM_Base_Start_IT+0xd0>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d00e      	beq.n	8004198 <HAL_TIM_Base_Start_IT+0x80>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a1b      	ldr	r2, [pc, #108]	@ (80041ec <HAL_TIM_Base_Start_IT+0xd4>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d009      	beq.n	8004198 <HAL_TIM_Base_Start_IT+0x80>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4a19      	ldr	r2, [pc, #100]	@ (80041f0 <HAL_TIM_Base_Start_IT+0xd8>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d004      	beq.n	8004198 <HAL_TIM_Base_Start_IT+0x80>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a18      	ldr	r2, [pc, #96]	@ (80041f4 <HAL_TIM_Base_Start_IT+0xdc>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d111      	bne.n	80041bc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	689b      	ldr	r3, [r3, #8]
 800419e:	f003 0307 	and.w	r3, r3, #7
 80041a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	2b06      	cmp	r3, #6
 80041a8:	d010      	beq.n	80041cc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	681a      	ldr	r2, [r3, #0]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f042 0201 	orr.w	r2, r2, #1
 80041b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041ba:	e007      	b.n	80041cc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	681a      	ldr	r2, [r3, #0]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f042 0201 	orr.w	r2, r2, #1
 80041ca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80041cc:	2300      	movs	r3, #0
}
 80041ce:	4618      	mov	r0, r3
 80041d0:	3714      	adds	r7, #20
 80041d2:	46bd      	mov	sp, r7
 80041d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d8:	4770      	bx	lr
 80041da:	bf00      	nop
 80041dc:	40010000 	.word	0x40010000
 80041e0:	40000400 	.word	0x40000400
 80041e4:	40000800 	.word	0x40000800
 80041e8:	40000c00 	.word	0x40000c00
 80041ec:	40010400 	.word	0x40010400
 80041f0:	40014000 	.word	0x40014000
 80041f4:	40001800 	.word	0x40001800

080041f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b084      	sub	sp, #16
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	68db      	ldr	r3, [r3, #12]
 8004206:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	691b      	ldr	r3, [r3, #16]
 800420e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	f003 0302 	and.w	r3, r3, #2
 8004216:	2b00      	cmp	r3, #0
 8004218:	d020      	beq.n	800425c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	f003 0302 	and.w	r3, r3, #2
 8004220:	2b00      	cmp	r3, #0
 8004222:	d01b      	beq.n	800425c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f06f 0202 	mvn.w	r2, #2
 800422c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2201      	movs	r2, #1
 8004232:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	699b      	ldr	r3, [r3, #24]
 800423a:	f003 0303 	and.w	r3, r3, #3
 800423e:	2b00      	cmp	r3, #0
 8004240:	d003      	beq.n	800424a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004242:	6878      	ldr	r0, [r7, #4]
 8004244:	f000 f8d2 	bl	80043ec <HAL_TIM_IC_CaptureCallback>
 8004248:	e005      	b.n	8004256 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800424a:	6878      	ldr	r0, [r7, #4]
 800424c:	f000 f8c4 	bl	80043d8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004250:	6878      	ldr	r0, [r7, #4]
 8004252:	f000 f8d5 	bl	8004400 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2200      	movs	r2, #0
 800425a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	f003 0304 	and.w	r3, r3, #4
 8004262:	2b00      	cmp	r3, #0
 8004264:	d020      	beq.n	80042a8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	f003 0304 	and.w	r3, r3, #4
 800426c:	2b00      	cmp	r3, #0
 800426e:	d01b      	beq.n	80042a8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f06f 0204 	mvn.w	r2, #4
 8004278:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2202      	movs	r2, #2
 800427e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	699b      	ldr	r3, [r3, #24]
 8004286:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800428a:	2b00      	cmp	r3, #0
 800428c:	d003      	beq.n	8004296 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800428e:	6878      	ldr	r0, [r7, #4]
 8004290:	f000 f8ac 	bl	80043ec <HAL_TIM_IC_CaptureCallback>
 8004294:	e005      	b.n	80042a2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004296:	6878      	ldr	r0, [r7, #4]
 8004298:	f000 f89e 	bl	80043d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800429c:	6878      	ldr	r0, [r7, #4]
 800429e:	f000 f8af 	bl	8004400 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2200      	movs	r2, #0
 80042a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	f003 0308 	and.w	r3, r3, #8
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d020      	beq.n	80042f4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	f003 0308 	and.w	r3, r3, #8
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d01b      	beq.n	80042f4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f06f 0208 	mvn.w	r2, #8
 80042c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2204      	movs	r2, #4
 80042ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	69db      	ldr	r3, [r3, #28]
 80042d2:	f003 0303 	and.w	r3, r3, #3
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d003      	beq.n	80042e2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042da:	6878      	ldr	r0, [r7, #4]
 80042dc:	f000 f886 	bl	80043ec <HAL_TIM_IC_CaptureCallback>
 80042e0:	e005      	b.n	80042ee <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042e2:	6878      	ldr	r0, [r7, #4]
 80042e4:	f000 f878 	bl	80043d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042e8:	6878      	ldr	r0, [r7, #4]
 80042ea:	f000 f889 	bl	8004400 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2200      	movs	r2, #0
 80042f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	f003 0310 	and.w	r3, r3, #16
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d020      	beq.n	8004340 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	f003 0310 	and.w	r3, r3, #16
 8004304:	2b00      	cmp	r3, #0
 8004306:	d01b      	beq.n	8004340 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f06f 0210 	mvn.w	r2, #16
 8004310:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2208      	movs	r2, #8
 8004316:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	69db      	ldr	r3, [r3, #28]
 800431e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004322:	2b00      	cmp	r3, #0
 8004324:	d003      	beq.n	800432e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004326:	6878      	ldr	r0, [r7, #4]
 8004328:	f000 f860 	bl	80043ec <HAL_TIM_IC_CaptureCallback>
 800432c:	e005      	b.n	800433a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800432e:	6878      	ldr	r0, [r7, #4]
 8004330:	f000 f852 	bl	80043d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004334:	6878      	ldr	r0, [r7, #4]
 8004336:	f000 f863 	bl	8004400 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2200      	movs	r2, #0
 800433e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	f003 0301 	and.w	r3, r3, #1
 8004346:	2b00      	cmp	r3, #0
 8004348:	d00c      	beq.n	8004364 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	f003 0301 	and.w	r3, r3, #1
 8004350:	2b00      	cmp	r3, #0
 8004352:	d007      	beq.n	8004364 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f06f 0201 	mvn.w	r2, #1
 800435c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800435e:	6878      	ldr	r0, [r7, #4]
 8004360:	f7fc fbae 	bl	8000ac0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800436a:	2b00      	cmp	r3, #0
 800436c:	d00c      	beq.n	8004388 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004374:	2b00      	cmp	r3, #0
 8004376:	d007      	beq.n	8004388 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004380:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004382:	6878      	ldr	r0, [r7, #4]
 8004384:	f000 f906 	bl	8004594 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800438e:	2b00      	cmp	r3, #0
 8004390:	d00c      	beq.n	80043ac <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004398:	2b00      	cmp	r3, #0
 800439a:	d007      	beq.n	80043ac <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80043a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80043a6:	6878      	ldr	r0, [r7, #4]
 80043a8:	f000 f834 	bl	8004414 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	f003 0320 	and.w	r3, r3, #32
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d00c      	beq.n	80043d0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	f003 0320 	and.w	r3, r3, #32
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d007      	beq.n	80043d0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f06f 0220 	mvn.w	r2, #32
 80043c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80043ca:	6878      	ldr	r0, [r7, #4]
 80043cc:	f000 f8d8 	bl	8004580 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80043d0:	bf00      	nop
 80043d2:	3710      	adds	r7, #16
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bd80      	pop	{r7, pc}

080043d8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80043d8:	b480      	push	{r7}
 80043da:	b083      	sub	sp, #12
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80043e0:	bf00      	nop
 80043e2:	370c      	adds	r7, #12
 80043e4:	46bd      	mov	sp, r7
 80043e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ea:	4770      	bx	lr

080043ec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80043ec:	b480      	push	{r7}
 80043ee:	b083      	sub	sp, #12
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80043f4:	bf00      	nop
 80043f6:	370c      	adds	r7, #12
 80043f8:	46bd      	mov	sp, r7
 80043fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fe:	4770      	bx	lr

08004400 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004400:	b480      	push	{r7}
 8004402:	b083      	sub	sp, #12
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004408:	bf00      	nop
 800440a:	370c      	adds	r7, #12
 800440c:	46bd      	mov	sp, r7
 800440e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004412:	4770      	bx	lr

08004414 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004414:	b480      	push	{r7}
 8004416:	b083      	sub	sp, #12
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800441c:	bf00      	nop
 800441e:	370c      	adds	r7, #12
 8004420:	46bd      	mov	sp, r7
 8004422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004426:	4770      	bx	lr

08004428 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004428:	b480      	push	{r7}
 800442a:	b085      	sub	sp, #20
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
 8004430:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	4a46      	ldr	r2, [pc, #280]	@ (8004554 <TIM_Base_SetConfig+0x12c>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d013      	beq.n	8004468 <TIM_Base_SetConfig+0x40>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004446:	d00f      	beq.n	8004468 <TIM_Base_SetConfig+0x40>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	4a43      	ldr	r2, [pc, #268]	@ (8004558 <TIM_Base_SetConfig+0x130>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d00b      	beq.n	8004468 <TIM_Base_SetConfig+0x40>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	4a42      	ldr	r2, [pc, #264]	@ (800455c <TIM_Base_SetConfig+0x134>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d007      	beq.n	8004468 <TIM_Base_SetConfig+0x40>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	4a41      	ldr	r2, [pc, #260]	@ (8004560 <TIM_Base_SetConfig+0x138>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d003      	beq.n	8004468 <TIM_Base_SetConfig+0x40>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	4a40      	ldr	r2, [pc, #256]	@ (8004564 <TIM_Base_SetConfig+0x13c>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d108      	bne.n	800447a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800446e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	68fa      	ldr	r2, [r7, #12]
 8004476:	4313      	orrs	r3, r2
 8004478:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	4a35      	ldr	r2, [pc, #212]	@ (8004554 <TIM_Base_SetConfig+0x12c>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d02b      	beq.n	80044da <TIM_Base_SetConfig+0xb2>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004488:	d027      	beq.n	80044da <TIM_Base_SetConfig+0xb2>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	4a32      	ldr	r2, [pc, #200]	@ (8004558 <TIM_Base_SetConfig+0x130>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d023      	beq.n	80044da <TIM_Base_SetConfig+0xb2>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	4a31      	ldr	r2, [pc, #196]	@ (800455c <TIM_Base_SetConfig+0x134>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d01f      	beq.n	80044da <TIM_Base_SetConfig+0xb2>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	4a30      	ldr	r2, [pc, #192]	@ (8004560 <TIM_Base_SetConfig+0x138>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d01b      	beq.n	80044da <TIM_Base_SetConfig+0xb2>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	4a2f      	ldr	r2, [pc, #188]	@ (8004564 <TIM_Base_SetConfig+0x13c>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d017      	beq.n	80044da <TIM_Base_SetConfig+0xb2>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	4a2e      	ldr	r2, [pc, #184]	@ (8004568 <TIM_Base_SetConfig+0x140>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d013      	beq.n	80044da <TIM_Base_SetConfig+0xb2>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	4a2d      	ldr	r2, [pc, #180]	@ (800456c <TIM_Base_SetConfig+0x144>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d00f      	beq.n	80044da <TIM_Base_SetConfig+0xb2>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	4a2c      	ldr	r2, [pc, #176]	@ (8004570 <TIM_Base_SetConfig+0x148>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d00b      	beq.n	80044da <TIM_Base_SetConfig+0xb2>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	4a2b      	ldr	r2, [pc, #172]	@ (8004574 <TIM_Base_SetConfig+0x14c>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d007      	beq.n	80044da <TIM_Base_SetConfig+0xb2>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	4a2a      	ldr	r2, [pc, #168]	@ (8004578 <TIM_Base_SetConfig+0x150>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d003      	beq.n	80044da <TIM_Base_SetConfig+0xb2>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	4a29      	ldr	r2, [pc, #164]	@ (800457c <TIM_Base_SetConfig+0x154>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d108      	bne.n	80044ec <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80044e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	68db      	ldr	r3, [r3, #12]
 80044e6:	68fa      	ldr	r2, [r7, #12]
 80044e8:	4313      	orrs	r3, r2
 80044ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	695b      	ldr	r3, [r3, #20]
 80044f6:	4313      	orrs	r3, r2
 80044f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	68fa      	ldr	r2, [r7, #12]
 80044fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	689a      	ldr	r2, [r3, #8]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	681a      	ldr	r2, [r3, #0]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	4a10      	ldr	r2, [pc, #64]	@ (8004554 <TIM_Base_SetConfig+0x12c>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d003      	beq.n	8004520 <TIM_Base_SetConfig+0xf8>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	4a12      	ldr	r2, [pc, #72]	@ (8004564 <TIM_Base_SetConfig+0x13c>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d103      	bne.n	8004528 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	691a      	ldr	r2, [r3, #16]
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2201      	movs	r2, #1
 800452c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	691b      	ldr	r3, [r3, #16]
 8004532:	f003 0301 	and.w	r3, r3, #1
 8004536:	2b01      	cmp	r3, #1
 8004538:	d105      	bne.n	8004546 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	691b      	ldr	r3, [r3, #16]
 800453e:	f023 0201 	bic.w	r2, r3, #1
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	611a      	str	r2, [r3, #16]
  }
}
 8004546:	bf00      	nop
 8004548:	3714      	adds	r7, #20
 800454a:	46bd      	mov	sp, r7
 800454c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004550:	4770      	bx	lr
 8004552:	bf00      	nop
 8004554:	40010000 	.word	0x40010000
 8004558:	40000400 	.word	0x40000400
 800455c:	40000800 	.word	0x40000800
 8004560:	40000c00 	.word	0x40000c00
 8004564:	40010400 	.word	0x40010400
 8004568:	40014000 	.word	0x40014000
 800456c:	40014400 	.word	0x40014400
 8004570:	40014800 	.word	0x40014800
 8004574:	40001800 	.word	0x40001800
 8004578:	40001c00 	.word	0x40001c00
 800457c:	40002000 	.word	0x40002000

08004580 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004580:	b480      	push	{r7}
 8004582:	b083      	sub	sp, #12
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004588:	bf00      	nop
 800458a:	370c      	adds	r7, #12
 800458c:	46bd      	mov	sp, r7
 800458e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004592:	4770      	bx	lr

08004594 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004594:	b480      	push	{r7}
 8004596:	b083      	sub	sp, #12
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800459c:	bf00      	nop
 800459e:	370c      	adds	r7, #12
 80045a0:	46bd      	mov	sp, r7
 80045a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a6:	4770      	bx	lr

080045a8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b082      	sub	sp, #8
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d101      	bne.n	80045ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80045b6:	2301      	movs	r3, #1
 80045b8:	e042      	b.n	8004640 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80045c0:	b2db      	uxtb	r3, r3
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d106      	bne.n	80045d4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2200      	movs	r2, #0
 80045ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80045ce:	6878      	ldr	r0, [r7, #4]
 80045d0:	f7fc fe50 	bl	8001274 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2224      	movs	r2, #36	@ 0x24
 80045d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	68da      	ldr	r2, [r3, #12]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80045ea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80045ec:	6878      	ldr	r0, [r7, #4]
 80045ee:	f000 f973 	bl	80048d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	691a      	ldr	r2, [r3, #16]
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004600:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	695a      	ldr	r2, [r3, #20]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004610:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	68da      	ldr	r2, [r3, #12]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004620:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2200      	movs	r2, #0
 8004626:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2220      	movs	r2, #32
 800462c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2220      	movs	r2, #32
 8004634:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2200      	movs	r2, #0
 800463c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800463e:	2300      	movs	r3, #0
}
 8004640:	4618      	mov	r0, r3
 8004642:	3708      	adds	r7, #8
 8004644:	46bd      	mov	sp, r7
 8004646:	bd80      	pop	{r7, pc}

08004648 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b08a      	sub	sp, #40	@ 0x28
 800464c:	af02      	add	r7, sp, #8
 800464e:	60f8      	str	r0, [r7, #12]
 8004650:	60b9      	str	r1, [r7, #8]
 8004652:	603b      	str	r3, [r7, #0]
 8004654:	4613      	mov	r3, r2
 8004656:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004658:	2300      	movs	r3, #0
 800465a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004662:	b2db      	uxtb	r3, r3
 8004664:	2b20      	cmp	r3, #32
 8004666:	d175      	bne.n	8004754 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d002      	beq.n	8004674 <HAL_UART_Transmit+0x2c>
 800466e:	88fb      	ldrh	r3, [r7, #6]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d101      	bne.n	8004678 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004674:	2301      	movs	r3, #1
 8004676:	e06e      	b.n	8004756 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	2200      	movs	r2, #0
 800467c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	2221      	movs	r2, #33	@ 0x21
 8004682:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004686:	f7fd faef 	bl	8001c68 <HAL_GetTick>
 800468a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	88fa      	ldrh	r2, [r7, #6]
 8004690:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	88fa      	ldrh	r2, [r7, #6]
 8004696:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	689b      	ldr	r3, [r3, #8]
 800469c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80046a0:	d108      	bne.n	80046b4 <HAL_UART_Transmit+0x6c>
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	691b      	ldr	r3, [r3, #16]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d104      	bne.n	80046b4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80046aa:	2300      	movs	r3, #0
 80046ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80046ae:	68bb      	ldr	r3, [r7, #8]
 80046b0:	61bb      	str	r3, [r7, #24]
 80046b2:	e003      	b.n	80046bc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80046b8:	2300      	movs	r3, #0
 80046ba:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80046bc:	e02e      	b.n	800471c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	9300      	str	r3, [sp, #0]
 80046c2:	697b      	ldr	r3, [r7, #20]
 80046c4:	2200      	movs	r2, #0
 80046c6:	2180      	movs	r1, #128	@ 0x80
 80046c8:	68f8      	ldr	r0, [r7, #12]
 80046ca:	f000 f848 	bl	800475e <UART_WaitOnFlagUntilTimeout>
 80046ce:	4603      	mov	r3, r0
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d005      	beq.n	80046e0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	2220      	movs	r2, #32
 80046d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80046dc:	2303      	movs	r3, #3
 80046de:	e03a      	b.n	8004756 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80046e0:	69fb      	ldr	r3, [r7, #28]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d10b      	bne.n	80046fe <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80046e6:	69bb      	ldr	r3, [r7, #24]
 80046e8:	881b      	ldrh	r3, [r3, #0]
 80046ea:	461a      	mov	r2, r3
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80046f4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80046f6:	69bb      	ldr	r3, [r7, #24]
 80046f8:	3302      	adds	r3, #2
 80046fa:	61bb      	str	r3, [r7, #24]
 80046fc:	e007      	b.n	800470e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80046fe:	69fb      	ldr	r3, [r7, #28]
 8004700:	781a      	ldrb	r2, [r3, #0]
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004708:	69fb      	ldr	r3, [r7, #28]
 800470a:	3301      	adds	r3, #1
 800470c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004712:	b29b      	uxth	r3, r3
 8004714:	3b01      	subs	r3, #1
 8004716:	b29a      	uxth	r2, r3
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004720:	b29b      	uxth	r3, r3
 8004722:	2b00      	cmp	r3, #0
 8004724:	d1cb      	bne.n	80046be <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	9300      	str	r3, [sp, #0]
 800472a:	697b      	ldr	r3, [r7, #20]
 800472c:	2200      	movs	r2, #0
 800472e:	2140      	movs	r1, #64	@ 0x40
 8004730:	68f8      	ldr	r0, [r7, #12]
 8004732:	f000 f814 	bl	800475e <UART_WaitOnFlagUntilTimeout>
 8004736:	4603      	mov	r3, r0
 8004738:	2b00      	cmp	r3, #0
 800473a:	d005      	beq.n	8004748 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	2220      	movs	r2, #32
 8004740:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004744:	2303      	movs	r3, #3
 8004746:	e006      	b.n	8004756 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	2220      	movs	r2, #32
 800474c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004750:	2300      	movs	r3, #0
 8004752:	e000      	b.n	8004756 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004754:	2302      	movs	r3, #2
  }
}
 8004756:	4618      	mov	r0, r3
 8004758:	3720      	adds	r7, #32
 800475a:	46bd      	mov	sp, r7
 800475c:	bd80      	pop	{r7, pc}

0800475e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800475e:	b580      	push	{r7, lr}
 8004760:	b086      	sub	sp, #24
 8004762:	af00      	add	r7, sp, #0
 8004764:	60f8      	str	r0, [r7, #12]
 8004766:	60b9      	str	r1, [r7, #8]
 8004768:	603b      	str	r3, [r7, #0]
 800476a:	4613      	mov	r3, r2
 800476c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800476e:	e03b      	b.n	80047e8 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004770:	6a3b      	ldr	r3, [r7, #32]
 8004772:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004776:	d037      	beq.n	80047e8 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004778:	f7fd fa76 	bl	8001c68 <HAL_GetTick>
 800477c:	4602      	mov	r2, r0
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	1ad3      	subs	r3, r2, r3
 8004782:	6a3a      	ldr	r2, [r7, #32]
 8004784:	429a      	cmp	r2, r3
 8004786:	d302      	bcc.n	800478e <UART_WaitOnFlagUntilTimeout+0x30>
 8004788:	6a3b      	ldr	r3, [r7, #32]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d101      	bne.n	8004792 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800478e:	2303      	movs	r3, #3
 8004790:	e03a      	b.n	8004808 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	68db      	ldr	r3, [r3, #12]
 8004798:	f003 0304 	and.w	r3, r3, #4
 800479c:	2b00      	cmp	r3, #0
 800479e:	d023      	beq.n	80047e8 <UART_WaitOnFlagUntilTimeout+0x8a>
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	2b80      	cmp	r3, #128	@ 0x80
 80047a4:	d020      	beq.n	80047e8 <UART_WaitOnFlagUntilTimeout+0x8a>
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	2b40      	cmp	r3, #64	@ 0x40
 80047aa:	d01d      	beq.n	80047e8 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f003 0308 	and.w	r3, r3, #8
 80047b6:	2b08      	cmp	r3, #8
 80047b8:	d116      	bne.n	80047e8 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80047ba:	2300      	movs	r3, #0
 80047bc:	617b      	str	r3, [r7, #20]
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	617b      	str	r3, [r7, #20]
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	617b      	str	r3, [r7, #20]
 80047ce:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80047d0:	68f8      	ldr	r0, [r7, #12]
 80047d2:	f000 f81d 	bl	8004810 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	2208      	movs	r2, #8
 80047da:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	2200      	movs	r2, #0
 80047e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80047e4:	2301      	movs	r3, #1
 80047e6:	e00f      	b.n	8004808 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	681a      	ldr	r2, [r3, #0]
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	4013      	ands	r3, r2
 80047f2:	68ba      	ldr	r2, [r7, #8]
 80047f4:	429a      	cmp	r2, r3
 80047f6:	bf0c      	ite	eq
 80047f8:	2301      	moveq	r3, #1
 80047fa:	2300      	movne	r3, #0
 80047fc:	b2db      	uxtb	r3, r3
 80047fe:	461a      	mov	r2, r3
 8004800:	79fb      	ldrb	r3, [r7, #7]
 8004802:	429a      	cmp	r2, r3
 8004804:	d0b4      	beq.n	8004770 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004806:	2300      	movs	r3, #0
}
 8004808:	4618      	mov	r0, r3
 800480a:	3718      	adds	r7, #24
 800480c:	46bd      	mov	sp, r7
 800480e:	bd80      	pop	{r7, pc}

08004810 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004810:	b480      	push	{r7}
 8004812:	b095      	sub	sp, #84	@ 0x54
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	330c      	adds	r3, #12
 800481e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004820:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004822:	e853 3f00 	ldrex	r3, [r3]
 8004826:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004828:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800482a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800482e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	330c      	adds	r3, #12
 8004836:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004838:	643a      	str	r2, [r7, #64]	@ 0x40
 800483a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800483c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800483e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004840:	e841 2300 	strex	r3, r2, [r1]
 8004844:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004846:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004848:	2b00      	cmp	r3, #0
 800484a:	d1e5      	bne.n	8004818 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	3314      	adds	r3, #20
 8004852:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004854:	6a3b      	ldr	r3, [r7, #32]
 8004856:	e853 3f00 	ldrex	r3, [r3]
 800485a:	61fb      	str	r3, [r7, #28]
   return(result);
 800485c:	69fb      	ldr	r3, [r7, #28]
 800485e:	f023 0301 	bic.w	r3, r3, #1
 8004862:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	3314      	adds	r3, #20
 800486a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800486c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800486e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004870:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004872:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004874:	e841 2300 	strex	r3, r2, [r1]
 8004878:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800487a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800487c:	2b00      	cmp	r3, #0
 800487e:	d1e5      	bne.n	800484c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004884:	2b01      	cmp	r3, #1
 8004886:	d119      	bne.n	80048bc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	330c      	adds	r3, #12
 800488e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	e853 3f00 	ldrex	r3, [r3]
 8004896:	60bb      	str	r3, [r7, #8]
   return(result);
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	f023 0310 	bic.w	r3, r3, #16
 800489e:	647b      	str	r3, [r7, #68]	@ 0x44
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	330c      	adds	r3, #12
 80048a6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80048a8:	61ba      	str	r2, [r7, #24]
 80048aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048ac:	6979      	ldr	r1, [r7, #20]
 80048ae:	69ba      	ldr	r2, [r7, #24]
 80048b0:	e841 2300 	strex	r3, r2, [r1]
 80048b4:	613b      	str	r3, [r7, #16]
   return(result);
 80048b6:	693b      	ldr	r3, [r7, #16]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d1e5      	bne.n	8004888 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2220      	movs	r2, #32
 80048c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2200      	movs	r2, #0
 80048c8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80048ca:	bf00      	nop
 80048cc:	3754      	adds	r7, #84	@ 0x54
 80048ce:	46bd      	mov	sp, r7
 80048d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d4:	4770      	bx	lr
	...

080048d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80048d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80048dc:	b0c0      	sub	sp, #256	@ 0x100
 80048de:	af00      	add	r7, sp, #0
 80048e0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80048e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	691b      	ldr	r3, [r3, #16]
 80048ec:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80048f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048f4:	68d9      	ldr	r1, [r3, #12]
 80048f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048fa:	681a      	ldr	r2, [r3, #0]
 80048fc:	ea40 0301 	orr.w	r3, r0, r1
 8004900:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004902:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004906:	689a      	ldr	r2, [r3, #8]
 8004908:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800490c:	691b      	ldr	r3, [r3, #16]
 800490e:	431a      	orrs	r2, r3
 8004910:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004914:	695b      	ldr	r3, [r3, #20]
 8004916:	431a      	orrs	r2, r3
 8004918:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800491c:	69db      	ldr	r3, [r3, #28]
 800491e:	4313      	orrs	r3, r2
 8004920:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004924:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	68db      	ldr	r3, [r3, #12]
 800492c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004930:	f021 010c 	bic.w	r1, r1, #12
 8004934:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004938:	681a      	ldr	r2, [r3, #0]
 800493a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800493e:	430b      	orrs	r3, r1
 8004940:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004942:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	695b      	ldr	r3, [r3, #20]
 800494a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800494e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004952:	6999      	ldr	r1, [r3, #24]
 8004954:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004958:	681a      	ldr	r2, [r3, #0]
 800495a:	ea40 0301 	orr.w	r3, r0, r1
 800495e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004960:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004964:	681a      	ldr	r2, [r3, #0]
 8004966:	4b8f      	ldr	r3, [pc, #572]	@ (8004ba4 <UART_SetConfig+0x2cc>)
 8004968:	429a      	cmp	r2, r3
 800496a:	d005      	beq.n	8004978 <UART_SetConfig+0xa0>
 800496c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004970:	681a      	ldr	r2, [r3, #0]
 8004972:	4b8d      	ldr	r3, [pc, #564]	@ (8004ba8 <UART_SetConfig+0x2d0>)
 8004974:	429a      	cmp	r2, r3
 8004976:	d104      	bne.n	8004982 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004978:	f7ff fb2e 	bl	8003fd8 <HAL_RCC_GetPCLK2Freq>
 800497c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004980:	e003      	b.n	800498a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004982:	f7ff fb15 	bl	8003fb0 <HAL_RCC_GetPCLK1Freq>
 8004986:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800498a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800498e:	69db      	ldr	r3, [r3, #28]
 8004990:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004994:	f040 810c 	bne.w	8004bb0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004998:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800499c:	2200      	movs	r2, #0
 800499e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80049a2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80049a6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80049aa:	4622      	mov	r2, r4
 80049ac:	462b      	mov	r3, r5
 80049ae:	1891      	adds	r1, r2, r2
 80049b0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80049b2:	415b      	adcs	r3, r3
 80049b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80049b6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80049ba:	4621      	mov	r1, r4
 80049bc:	eb12 0801 	adds.w	r8, r2, r1
 80049c0:	4629      	mov	r1, r5
 80049c2:	eb43 0901 	adc.w	r9, r3, r1
 80049c6:	f04f 0200 	mov.w	r2, #0
 80049ca:	f04f 0300 	mov.w	r3, #0
 80049ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80049d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80049d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80049da:	4690      	mov	r8, r2
 80049dc:	4699      	mov	r9, r3
 80049de:	4623      	mov	r3, r4
 80049e0:	eb18 0303 	adds.w	r3, r8, r3
 80049e4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80049e8:	462b      	mov	r3, r5
 80049ea:	eb49 0303 	adc.w	r3, r9, r3
 80049ee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80049f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	2200      	movs	r2, #0
 80049fa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80049fe:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004a02:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004a06:	460b      	mov	r3, r1
 8004a08:	18db      	adds	r3, r3, r3
 8004a0a:	653b      	str	r3, [r7, #80]	@ 0x50
 8004a0c:	4613      	mov	r3, r2
 8004a0e:	eb42 0303 	adc.w	r3, r2, r3
 8004a12:	657b      	str	r3, [r7, #84]	@ 0x54
 8004a14:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004a18:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004a1c:	f7fb fc40 	bl	80002a0 <__aeabi_uldivmod>
 8004a20:	4602      	mov	r2, r0
 8004a22:	460b      	mov	r3, r1
 8004a24:	4b61      	ldr	r3, [pc, #388]	@ (8004bac <UART_SetConfig+0x2d4>)
 8004a26:	fba3 2302 	umull	r2, r3, r3, r2
 8004a2a:	095b      	lsrs	r3, r3, #5
 8004a2c:	011c      	lsls	r4, r3, #4
 8004a2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004a32:	2200      	movs	r2, #0
 8004a34:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004a38:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004a3c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004a40:	4642      	mov	r2, r8
 8004a42:	464b      	mov	r3, r9
 8004a44:	1891      	adds	r1, r2, r2
 8004a46:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004a48:	415b      	adcs	r3, r3
 8004a4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004a4c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004a50:	4641      	mov	r1, r8
 8004a52:	eb12 0a01 	adds.w	sl, r2, r1
 8004a56:	4649      	mov	r1, r9
 8004a58:	eb43 0b01 	adc.w	fp, r3, r1
 8004a5c:	f04f 0200 	mov.w	r2, #0
 8004a60:	f04f 0300 	mov.w	r3, #0
 8004a64:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004a68:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004a6c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004a70:	4692      	mov	sl, r2
 8004a72:	469b      	mov	fp, r3
 8004a74:	4643      	mov	r3, r8
 8004a76:	eb1a 0303 	adds.w	r3, sl, r3
 8004a7a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004a7e:	464b      	mov	r3, r9
 8004a80:	eb4b 0303 	adc.w	r3, fp, r3
 8004a84:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004a88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004a94:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004a98:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004a9c:	460b      	mov	r3, r1
 8004a9e:	18db      	adds	r3, r3, r3
 8004aa0:	643b      	str	r3, [r7, #64]	@ 0x40
 8004aa2:	4613      	mov	r3, r2
 8004aa4:	eb42 0303 	adc.w	r3, r2, r3
 8004aa8:	647b      	str	r3, [r7, #68]	@ 0x44
 8004aaa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004aae:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004ab2:	f7fb fbf5 	bl	80002a0 <__aeabi_uldivmod>
 8004ab6:	4602      	mov	r2, r0
 8004ab8:	460b      	mov	r3, r1
 8004aba:	4611      	mov	r1, r2
 8004abc:	4b3b      	ldr	r3, [pc, #236]	@ (8004bac <UART_SetConfig+0x2d4>)
 8004abe:	fba3 2301 	umull	r2, r3, r3, r1
 8004ac2:	095b      	lsrs	r3, r3, #5
 8004ac4:	2264      	movs	r2, #100	@ 0x64
 8004ac6:	fb02 f303 	mul.w	r3, r2, r3
 8004aca:	1acb      	subs	r3, r1, r3
 8004acc:	00db      	lsls	r3, r3, #3
 8004ace:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004ad2:	4b36      	ldr	r3, [pc, #216]	@ (8004bac <UART_SetConfig+0x2d4>)
 8004ad4:	fba3 2302 	umull	r2, r3, r3, r2
 8004ad8:	095b      	lsrs	r3, r3, #5
 8004ada:	005b      	lsls	r3, r3, #1
 8004adc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004ae0:	441c      	add	r4, r3
 8004ae2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004aec:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004af0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004af4:	4642      	mov	r2, r8
 8004af6:	464b      	mov	r3, r9
 8004af8:	1891      	adds	r1, r2, r2
 8004afa:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004afc:	415b      	adcs	r3, r3
 8004afe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004b00:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004b04:	4641      	mov	r1, r8
 8004b06:	1851      	adds	r1, r2, r1
 8004b08:	6339      	str	r1, [r7, #48]	@ 0x30
 8004b0a:	4649      	mov	r1, r9
 8004b0c:	414b      	adcs	r3, r1
 8004b0e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b10:	f04f 0200 	mov.w	r2, #0
 8004b14:	f04f 0300 	mov.w	r3, #0
 8004b18:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004b1c:	4659      	mov	r1, fp
 8004b1e:	00cb      	lsls	r3, r1, #3
 8004b20:	4651      	mov	r1, sl
 8004b22:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b26:	4651      	mov	r1, sl
 8004b28:	00ca      	lsls	r2, r1, #3
 8004b2a:	4610      	mov	r0, r2
 8004b2c:	4619      	mov	r1, r3
 8004b2e:	4603      	mov	r3, r0
 8004b30:	4642      	mov	r2, r8
 8004b32:	189b      	adds	r3, r3, r2
 8004b34:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004b38:	464b      	mov	r3, r9
 8004b3a:	460a      	mov	r2, r1
 8004b3c:	eb42 0303 	adc.w	r3, r2, r3
 8004b40:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004b44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004b50:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004b54:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004b58:	460b      	mov	r3, r1
 8004b5a:	18db      	adds	r3, r3, r3
 8004b5c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004b5e:	4613      	mov	r3, r2
 8004b60:	eb42 0303 	adc.w	r3, r2, r3
 8004b64:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004b66:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004b6a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004b6e:	f7fb fb97 	bl	80002a0 <__aeabi_uldivmod>
 8004b72:	4602      	mov	r2, r0
 8004b74:	460b      	mov	r3, r1
 8004b76:	4b0d      	ldr	r3, [pc, #52]	@ (8004bac <UART_SetConfig+0x2d4>)
 8004b78:	fba3 1302 	umull	r1, r3, r3, r2
 8004b7c:	095b      	lsrs	r3, r3, #5
 8004b7e:	2164      	movs	r1, #100	@ 0x64
 8004b80:	fb01 f303 	mul.w	r3, r1, r3
 8004b84:	1ad3      	subs	r3, r2, r3
 8004b86:	00db      	lsls	r3, r3, #3
 8004b88:	3332      	adds	r3, #50	@ 0x32
 8004b8a:	4a08      	ldr	r2, [pc, #32]	@ (8004bac <UART_SetConfig+0x2d4>)
 8004b8c:	fba2 2303 	umull	r2, r3, r2, r3
 8004b90:	095b      	lsrs	r3, r3, #5
 8004b92:	f003 0207 	and.w	r2, r3, #7
 8004b96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4422      	add	r2, r4
 8004b9e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004ba0:	e106      	b.n	8004db0 <UART_SetConfig+0x4d8>
 8004ba2:	bf00      	nop
 8004ba4:	40011000 	.word	0x40011000
 8004ba8:	40011400 	.word	0x40011400
 8004bac:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004bb0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004bba:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004bbe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004bc2:	4642      	mov	r2, r8
 8004bc4:	464b      	mov	r3, r9
 8004bc6:	1891      	adds	r1, r2, r2
 8004bc8:	6239      	str	r1, [r7, #32]
 8004bca:	415b      	adcs	r3, r3
 8004bcc:	627b      	str	r3, [r7, #36]	@ 0x24
 8004bce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004bd2:	4641      	mov	r1, r8
 8004bd4:	1854      	adds	r4, r2, r1
 8004bd6:	4649      	mov	r1, r9
 8004bd8:	eb43 0501 	adc.w	r5, r3, r1
 8004bdc:	f04f 0200 	mov.w	r2, #0
 8004be0:	f04f 0300 	mov.w	r3, #0
 8004be4:	00eb      	lsls	r3, r5, #3
 8004be6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004bea:	00e2      	lsls	r2, r4, #3
 8004bec:	4614      	mov	r4, r2
 8004bee:	461d      	mov	r5, r3
 8004bf0:	4643      	mov	r3, r8
 8004bf2:	18e3      	adds	r3, r4, r3
 8004bf4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004bf8:	464b      	mov	r3, r9
 8004bfa:	eb45 0303 	adc.w	r3, r5, r3
 8004bfe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004c02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004c0e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004c12:	f04f 0200 	mov.w	r2, #0
 8004c16:	f04f 0300 	mov.w	r3, #0
 8004c1a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004c1e:	4629      	mov	r1, r5
 8004c20:	008b      	lsls	r3, r1, #2
 8004c22:	4621      	mov	r1, r4
 8004c24:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c28:	4621      	mov	r1, r4
 8004c2a:	008a      	lsls	r2, r1, #2
 8004c2c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004c30:	f7fb fb36 	bl	80002a0 <__aeabi_uldivmod>
 8004c34:	4602      	mov	r2, r0
 8004c36:	460b      	mov	r3, r1
 8004c38:	4b60      	ldr	r3, [pc, #384]	@ (8004dbc <UART_SetConfig+0x4e4>)
 8004c3a:	fba3 2302 	umull	r2, r3, r3, r2
 8004c3e:	095b      	lsrs	r3, r3, #5
 8004c40:	011c      	lsls	r4, r3, #4
 8004c42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004c46:	2200      	movs	r2, #0
 8004c48:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004c4c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004c50:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004c54:	4642      	mov	r2, r8
 8004c56:	464b      	mov	r3, r9
 8004c58:	1891      	adds	r1, r2, r2
 8004c5a:	61b9      	str	r1, [r7, #24]
 8004c5c:	415b      	adcs	r3, r3
 8004c5e:	61fb      	str	r3, [r7, #28]
 8004c60:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c64:	4641      	mov	r1, r8
 8004c66:	1851      	adds	r1, r2, r1
 8004c68:	6139      	str	r1, [r7, #16]
 8004c6a:	4649      	mov	r1, r9
 8004c6c:	414b      	adcs	r3, r1
 8004c6e:	617b      	str	r3, [r7, #20]
 8004c70:	f04f 0200 	mov.w	r2, #0
 8004c74:	f04f 0300 	mov.w	r3, #0
 8004c78:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004c7c:	4659      	mov	r1, fp
 8004c7e:	00cb      	lsls	r3, r1, #3
 8004c80:	4651      	mov	r1, sl
 8004c82:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c86:	4651      	mov	r1, sl
 8004c88:	00ca      	lsls	r2, r1, #3
 8004c8a:	4610      	mov	r0, r2
 8004c8c:	4619      	mov	r1, r3
 8004c8e:	4603      	mov	r3, r0
 8004c90:	4642      	mov	r2, r8
 8004c92:	189b      	adds	r3, r3, r2
 8004c94:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004c98:	464b      	mov	r3, r9
 8004c9a:	460a      	mov	r2, r1
 8004c9c:	eb42 0303 	adc.w	r3, r2, r3
 8004ca0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004ca4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	2200      	movs	r2, #0
 8004cac:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004cae:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004cb0:	f04f 0200 	mov.w	r2, #0
 8004cb4:	f04f 0300 	mov.w	r3, #0
 8004cb8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004cbc:	4649      	mov	r1, r9
 8004cbe:	008b      	lsls	r3, r1, #2
 8004cc0:	4641      	mov	r1, r8
 8004cc2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004cc6:	4641      	mov	r1, r8
 8004cc8:	008a      	lsls	r2, r1, #2
 8004cca:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004cce:	f7fb fae7 	bl	80002a0 <__aeabi_uldivmod>
 8004cd2:	4602      	mov	r2, r0
 8004cd4:	460b      	mov	r3, r1
 8004cd6:	4611      	mov	r1, r2
 8004cd8:	4b38      	ldr	r3, [pc, #224]	@ (8004dbc <UART_SetConfig+0x4e4>)
 8004cda:	fba3 2301 	umull	r2, r3, r3, r1
 8004cde:	095b      	lsrs	r3, r3, #5
 8004ce0:	2264      	movs	r2, #100	@ 0x64
 8004ce2:	fb02 f303 	mul.w	r3, r2, r3
 8004ce6:	1acb      	subs	r3, r1, r3
 8004ce8:	011b      	lsls	r3, r3, #4
 8004cea:	3332      	adds	r3, #50	@ 0x32
 8004cec:	4a33      	ldr	r2, [pc, #204]	@ (8004dbc <UART_SetConfig+0x4e4>)
 8004cee:	fba2 2303 	umull	r2, r3, r2, r3
 8004cf2:	095b      	lsrs	r3, r3, #5
 8004cf4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004cf8:	441c      	add	r4, r3
 8004cfa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004cfe:	2200      	movs	r2, #0
 8004d00:	673b      	str	r3, [r7, #112]	@ 0x70
 8004d02:	677a      	str	r2, [r7, #116]	@ 0x74
 8004d04:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004d08:	4642      	mov	r2, r8
 8004d0a:	464b      	mov	r3, r9
 8004d0c:	1891      	adds	r1, r2, r2
 8004d0e:	60b9      	str	r1, [r7, #8]
 8004d10:	415b      	adcs	r3, r3
 8004d12:	60fb      	str	r3, [r7, #12]
 8004d14:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004d18:	4641      	mov	r1, r8
 8004d1a:	1851      	adds	r1, r2, r1
 8004d1c:	6039      	str	r1, [r7, #0]
 8004d1e:	4649      	mov	r1, r9
 8004d20:	414b      	adcs	r3, r1
 8004d22:	607b      	str	r3, [r7, #4]
 8004d24:	f04f 0200 	mov.w	r2, #0
 8004d28:	f04f 0300 	mov.w	r3, #0
 8004d2c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004d30:	4659      	mov	r1, fp
 8004d32:	00cb      	lsls	r3, r1, #3
 8004d34:	4651      	mov	r1, sl
 8004d36:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d3a:	4651      	mov	r1, sl
 8004d3c:	00ca      	lsls	r2, r1, #3
 8004d3e:	4610      	mov	r0, r2
 8004d40:	4619      	mov	r1, r3
 8004d42:	4603      	mov	r3, r0
 8004d44:	4642      	mov	r2, r8
 8004d46:	189b      	adds	r3, r3, r2
 8004d48:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004d4a:	464b      	mov	r3, r9
 8004d4c:	460a      	mov	r2, r1
 8004d4e:	eb42 0303 	adc.w	r3, r2, r3
 8004d52:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004d54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	663b      	str	r3, [r7, #96]	@ 0x60
 8004d5e:	667a      	str	r2, [r7, #100]	@ 0x64
 8004d60:	f04f 0200 	mov.w	r2, #0
 8004d64:	f04f 0300 	mov.w	r3, #0
 8004d68:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004d6c:	4649      	mov	r1, r9
 8004d6e:	008b      	lsls	r3, r1, #2
 8004d70:	4641      	mov	r1, r8
 8004d72:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d76:	4641      	mov	r1, r8
 8004d78:	008a      	lsls	r2, r1, #2
 8004d7a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004d7e:	f7fb fa8f 	bl	80002a0 <__aeabi_uldivmod>
 8004d82:	4602      	mov	r2, r0
 8004d84:	460b      	mov	r3, r1
 8004d86:	4b0d      	ldr	r3, [pc, #52]	@ (8004dbc <UART_SetConfig+0x4e4>)
 8004d88:	fba3 1302 	umull	r1, r3, r3, r2
 8004d8c:	095b      	lsrs	r3, r3, #5
 8004d8e:	2164      	movs	r1, #100	@ 0x64
 8004d90:	fb01 f303 	mul.w	r3, r1, r3
 8004d94:	1ad3      	subs	r3, r2, r3
 8004d96:	011b      	lsls	r3, r3, #4
 8004d98:	3332      	adds	r3, #50	@ 0x32
 8004d9a:	4a08      	ldr	r2, [pc, #32]	@ (8004dbc <UART_SetConfig+0x4e4>)
 8004d9c:	fba2 2303 	umull	r2, r3, r2, r3
 8004da0:	095b      	lsrs	r3, r3, #5
 8004da2:	f003 020f 	and.w	r2, r3, #15
 8004da6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4422      	add	r2, r4
 8004dae:	609a      	str	r2, [r3, #8]
}
 8004db0:	bf00      	nop
 8004db2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004db6:	46bd      	mov	sp, r7
 8004db8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004dbc:	51eb851f 	.word	0x51eb851f

08004dc0 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8004dc0:	b5b0      	push	{r4, r5, r7, lr}
 8004dc2:	b08c      	sub	sp, #48	@ 0x30
 8004dc4:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8004dc6:	4b8f      	ldr	r3, [pc, #572]	@ (8005004 <MX_LWIP_Init+0x244>)
 8004dc8:	22c0      	movs	r2, #192	@ 0xc0
 8004dca:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8004dcc:	4b8d      	ldr	r3, [pc, #564]	@ (8005004 <MX_LWIP_Init+0x244>)
 8004dce:	22a8      	movs	r2, #168	@ 0xa8
 8004dd0:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 8004dd2:	4b8c      	ldr	r3, [pc, #560]	@ (8005004 <MX_LWIP_Init+0x244>)
 8004dd4:	2201      	movs	r2, #1
 8004dd6:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 130;
 8004dd8:	4b8a      	ldr	r3, [pc, #552]	@ (8005004 <MX_LWIP_Init+0x244>)
 8004dda:	2282      	movs	r2, #130	@ 0x82
 8004ddc:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8004dde:	4b8a      	ldr	r3, [pc, #552]	@ (8005008 <MX_LWIP_Init+0x248>)
 8004de0:	22ff      	movs	r2, #255	@ 0xff
 8004de2:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8004de4:	4b88      	ldr	r3, [pc, #544]	@ (8005008 <MX_LWIP_Init+0x248>)
 8004de6:	22ff      	movs	r2, #255	@ 0xff
 8004de8:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8004dea:	4b87      	ldr	r3, [pc, #540]	@ (8005008 <MX_LWIP_Init+0x248>)
 8004dec:	22ff      	movs	r2, #255	@ 0xff
 8004dee:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8004df0:	4b85      	ldr	r3, [pc, #532]	@ (8005008 <MX_LWIP_Init+0x248>)
 8004df2:	2200      	movs	r2, #0
 8004df4:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8004df6:	4b85      	ldr	r3, [pc, #532]	@ (800500c <MX_LWIP_Init+0x24c>)
 8004df8:	22c0      	movs	r2, #192	@ 0xc0
 8004dfa:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8004dfc:	4b83      	ldr	r3, [pc, #524]	@ (800500c <MX_LWIP_Init+0x24c>)
 8004dfe:	22a8      	movs	r2, #168	@ 0xa8
 8004e00:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 8004e02:	4b82      	ldr	r3, [pc, #520]	@ (800500c <MX_LWIP_Init+0x24c>)
 8004e04:	2201      	movs	r2, #1
 8004e06:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8004e08:	4b80      	ldr	r3, [pc, #512]	@ (800500c <MX_LWIP_Init+0x24c>)
 8004e0a:	2201      	movs	r2, #1
 8004e0c:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8004e0e:	2100      	movs	r1, #0
 8004e10:	2000      	movs	r0, #0
 8004e12:	f006 f8d5 	bl	800afc0 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8004e16:	4b7b      	ldr	r3, [pc, #492]	@ (8005004 <MX_LWIP_Init+0x244>)
 8004e18:	781b      	ldrb	r3, [r3, #0]
 8004e1a:	061a      	lsls	r2, r3, #24
 8004e1c:	4b79      	ldr	r3, [pc, #484]	@ (8005004 <MX_LWIP_Init+0x244>)
 8004e1e:	785b      	ldrb	r3, [r3, #1]
 8004e20:	041b      	lsls	r3, r3, #16
 8004e22:	431a      	orrs	r2, r3
 8004e24:	4b77      	ldr	r3, [pc, #476]	@ (8005004 <MX_LWIP_Init+0x244>)
 8004e26:	789b      	ldrb	r3, [r3, #2]
 8004e28:	021b      	lsls	r3, r3, #8
 8004e2a:	4313      	orrs	r3, r2
 8004e2c:	4a75      	ldr	r2, [pc, #468]	@ (8005004 <MX_LWIP_Init+0x244>)
 8004e2e:	78d2      	ldrb	r2, [r2, #3]
 8004e30:	4313      	orrs	r3, r2
 8004e32:	061a      	lsls	r2, r3, #24
 8004e34:	4b73      	ldr	r3, [pc, #460]	@ (8005004 <MX_LWIP_Init+0x244>)
 8004e36:	781b      	ldrb	r3, [r3, #0]
 8004e38:	0619      	lsls	r1, r3, #24
 8004e3a:	4b72      	ldr	r3, [pc, #456]	@ (8005004 <MX_LWIP_Init+0x244>)
 8004e3c:	785b      	ldrb	r3, [r3, #1]
 8004e3e:	041b      	lsls	r3, r3, #16
 8004e40:	4319      	orrs	r1, r3
 8004e42:	4b70      	ldr	r3, [pc, #448]	@ (8005004 <MX_LWIP_Init+0x244>)
 8004e44:	789b      	ldrb	r3, [r3, #2]
 8004e46:	021b      	lsls	r3, r3, #8
 8004e48:	430b      	orrs	r3, r1
 8004e4a:	496e      	ldr	r1, [pc, #440]	@ (8005004 <MX_LWIP_Init+0x244>)
 8004e4c:	78c9      	ldrb	r1, [r1, #3]
 8004e4e:	430b      	orrs	r3, r1
 8004e50:	021b      	lsls	r3, r3, #8
 8004e52:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8004e56:	431a      	orrs	r2, r3
 8004e58:	4b6a      	ldr	r3, [pc, #424]	@ (8005004 <MX_LWIP_Init+0x244>)
 8004e5a:	781b      	ldrb	r3, [r3, #0]
 8004e5c:	0619      	lsls	r1, r3, #24
 8004e5e:	4b69      	ldr	r3, [pc, #420]	@ (8005004 <MX_LWIP_Init+0x244>)
 8004e60:	785b      	ldrb	r3, [r3, #1]
 8004e62:	041b      	lsls	r3, r3, #16
 8004e64:	4319      	orrs	r1, r3
 8004e66:	4b67      	ldr	r3, [pc, #412]	@ (8005004 <MX_LWIP_Init+0x244>)
 8004e68:	789b      	ldrb	r3, [r3, #2]
 8004e6a:	021b      	lsls	r3, r3, #8
 8004e6c:	430b      	orrs	r3, r1
 8004e6e:	4965      	ldr	r1, [pc, #404]	@ (8005004 <MX_LWIP_Init+0x244>)
 8004e70:	78c9      	ldrb	r1, [r1, #3]
 8004e72:	430b      	orrs	r3, r1
 8004e74:	0a1b      	lsrs	r3, r3, #8
 8004e76:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8004e7a:	431a      	orrs	r2, r3
 8004e7c:	4b61      	ldr	r3, [pc, #388]	@ (8005004 <MX_LWIP_Init+0x244>)
 8004e7e:	781b      	ldrb	r3, [r3, #0]
 8004e80:	0619      	lsls	r1, r3, #24
 8004e82:	4b60      	ldr	r3, [pc, #384]	@ (8005004 <MX_LWIP_Init+0x244>)
 8004e84:	785b      	ldrb	r3, [r3, #1]
 8004e86:	041b      	lsls	r3, r3, #16
 8004e88:	4319      	orrs	r1, r3
 8004e8a:	4b5e      	ldr	r3, [pc, #376]	@ (8005004 <MX_LWIP_Init+0x244>)
 8004e8c:	789b      	ldrb	r3, [r3, #2]
 8004e8e:	021b      	lsls	r3, r3, #8
 8004e90:	430b      	orrs	r3, r1
 8004e92:	495c      	ldr	r1, [pc, #368]	@ (8005004 <MX_LWIP_Init+0x244>)
 8004e94:	78c9      	ldrb	r1, [r1, #3]
 8004e96:	430b      	orrs	r3, r1
 8004e98:	0e1b      	lsrs	r3, r3, #24
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	4a5c      	ldr	r2, [pc, #368]	@ (8005010 <MX_LWIP_Init+0x250>)
 8004e9e:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8004ea0:	4b59      	ldr	r3, [pc, #356]	@ (8005008 <MX_LWIP_Init+0x248>)
 8004ea2:	781b      	ldrb	r3, [r3, #0]
 8004ea4:	061a      	lsls	r2, r3, #24
 8004ea6:	4b58      	ldr	r3, [pc, #352]	@ (8005008 <MX_LWIP_Init+0x248>)
 8004ea8:	785b      	ldrb	r3, [r3, #1]
 8004eaa:	041b      	lsls	r3, r3, #16
 8004eac:	431a      	orrs	r2, r3
 8004eae:	4b56      	ldr	r3, [pc, #344]	@ (8005008 <MX_LWIP_Init+0x248>)
 8004eb0:	789b      	ldrb	r3, [r3, #2]
 8004eb2:	021b      	lsls	r3, r3, #8
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	4a54      	ldr	r2, [pc, #336]	@ (8005008 <MX_LWIP_Init+0x248>)
 8004eb8:	78d2      	ldrb	r2, [r2, #3]
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	061a      	lsls	r2, r3, #24
 8004ebe:	4b52      	ldr	r3, [pc, #328]	@ (8005008 <MX_LWIP_Init+0x248>)
 8004ec0:	781b      	ldrb	r3, [r3, #0]
 8004ec2:	0619      	lsls	r1, r3, #24
 8004ec4:	4b50      	ldr	r3, [pc, #320]	@ (8005008 <MX_LWIP_Init+0x248>)
 8004ec6:	785b      	ldrb	r3, [r3, #1]
 8004ec8:	041b      	lsls	r3, r3, #16
 8004eca:	4319      	orrs	r1, r3
 8004ecc:	4b4e      	ldr	r3, [pc, #312]	@ (8005008 <MX_LWIP_Init+0x248>)
 8004ece:	789b      	ldrb	r3, [r3, #2]
 8004ed0:	021b      	lsls	r3, r3, #8
 8004ed2:	430b      	orrs	r3, r1
 8004ed4:	494c      	ldr	r1, [pc, #304]	@ (8005008 <MX_LWIP_Init+0x248>)
 8004ed6:	78c9      	ldrb	r1, [r1, #3]
 8004ed8:	430b      	orrs	r3, r1
 8004eda:	021b      	lsls	r3, r3, #8
 8004edc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8004ee0:	431a      	orrs	r2, r3
 8004ee2:	4b49      	ldr	r3, [pc, #292]	@ (8005008 <MX_LWIP_Init+0x248>)
 8004ee4:	781b      	ldrb	r3, [r3, #0]
 8004ee6:	0619      	lsls	r1, r3, #24
 8004ee8:	4b47      	ldr	r3, [pc, #284]	@ (8005008 <MX_LWIP_Init+0x248>)
 8004eea:	785b      	ldrb	r3, [r3, #1]
 8004eec:	041b      	lsls	r3, r3, #16
 8004eee:	4319      	orrs	r1, r3
 8004ef0:	4b45      	ldr	r3, [pc, #276]	@ (8005008 <MX_LWIP_Init+0x248>)
 8004ef2:	789b      	ldrb	r3, [r3, #2]
 8004ef4:	021b      	lsls	r3, r3, #8
 8004ef6:	430b      	orrs	r3, r1
 8004ef8:	4943      	ldr	r1, [pc, #268]	@ (8005008 <MX_LWIP_Init+0x248>)
 8004efa:	78c9      	ldrb	r1, [r1, #3]
 8004efc:	430b      	orrs	r3, r1
 8004efe:	0a1b      	lsrs	r3, r3, #8
 8004f00:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8004f04:	431a      	orrs	r2, r3
 8004f06:	4b40      	ldr	r3, [pc, #256]	@ (8005008 <MX_LWIP_Init+0x248>)
 8004f08:	781b      	ldrb	r3, [r3, #0]
 8004f0a:	0619      	lsls	r1, r3, #24
 8004f0c:	4b3e      	ldr	r3, [pc, #248]	@ (8005008 <MX_LWIP_Init+0x248>)
 8004f0e:	785b      	ldrb	r3, [r3, #1]
 8004f10:	041b      	lsls	r3, r3, #16
 8004f12:	4319      	orrs	r1, r3
 8004f14:	4b3c      	ldr	r3, [pc, #240]	@ (8005008 <MX_LWIP_Init+0x248>)
 8004f16:	789b      	ldrb	r3, [r3, #2]
 8004f18:	021b      	lsls	r3, r3, #8
 8004f1a:	430b      	orrs	r3, r1
 8004f1c:	493a      	ldr	r1, [pc, #232]	@ (8005008 <MX_LWIP_Init+0x248>)
 8004f1e:	78c9      	ldrb	r1, [r1, #3]
 8004f20:	430b      	orrs	r3, r1
 8004f22:	0e1b      	lsrs	r3, r3, #24
 8004f24:	4313      	orrs	r3, r2
 8004f26:	4a3b      	ldr	r2, [pc, #236]	@ (8005014 <MX_LWIP_Init+0x254>)
 8004f28:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8004f2a:	4b38      	ldr	r3, [pc, #224]	@ (800500c <MX_LWIP_Init+0x24c>)
 8004f2c:	781b      	ldrb	r3, [r3, #0]
 8004f2e:	061a      	lsls	r2, r3, #24
 8004f30:	4b36      	ldr	r3, [pc, #216]	@ (800500c <MX_LWIP_Init+0x24c>)
 8004f32:	785b      	ldrb	r3, [r3, #1]
 8004f34:	041b      	lsls	r3, r3, #16
 8004f36:	431a      	orrs	r2, r3
 8004f38:	4b34      	ldr	r3, [pc, #208]	@ (800500c <MX_LWIP_Init+0x24c>)
 8004f3a:	789b      	ldrb	r3, [r3, #2]
 8004f3c:	021b      	lsls	r3, r3, #8
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	4a32      	ldr	r2, [pc, #200]	@ (800500c <MX_LWIP_Init+0x24c>)
 8004f42:	78d2      	ldrb	r2, [r2, #3]
 8004f44:	4313      	orrs	r3, r2
 8004f46:	061a      	lsls	r2, r3, #24
 8004f48:	4b30      	ldr	r3, [pc, #192]	@ (800500c <MX_LWIP_Init+0x24c>)
 8004f4a:	781b      	ldrb	r3, [r3, #0]
 8004f4c:	0619      	lsls	r1, r3, #24
 8004f4e:	4b2f      	ldr	r3, [pc, #188]	@ (800500c <MX_LWIP_Init+0x24c>)
 8004f50:	785b      	ldrb	r3, [r3, #1]
 8004f52:	041b      	lsls	r3, r3, #16
 8004f54:	4319      	orrs	r1, r3
 8004f56:	4b2d      	ldr	r3, [pc, #180]	@ (800500c <MX_LWIP_Init+0x24c>)
 8004f58:	789b      	ldrb	r3, [r3, #2]
 8004f5a:	021b      	lsls	r3, r3, #8
 8004f5c:	430b      	orrs	r3, r1
 8004f5e:	492b      	ldr	r1, [pc, #172]	@ (800500c <MX_LWIP_Init+0x24c>)
 8004f60:	78c9      	ldrb	r1, [r1, #3]
 8004f62:	430b      	orrs	r3, r1
 8004f64:	021b      	lsls	r3, r3, #8
 8004f66:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8004f6a:	431a      	orrs	r2, r3
 8004f6c:	4b27      	ldr	r3, [pc, #156]	@ (800500c <MX_LWIP_Init+0x24c>)
 8004f6e:	781b      	ldrb	r3, [r3, #0]
 8004f70:	0619      	lsls	r1, r3, #24
 8004f72:	4b26      	ldr	r3, [pc, #152]	@ (800500c <MX_LWIP_Init+0x24c>)
 8004f74:	785b      	ldrb	r3, [r3, #1]
 8004f76:	041b      	lsls	r3, r3, #16
 8004f78:	4319      	orrs	r1, r3
 8004f7a:	4b24      	ldr	r3, [pc, #144]	@ (800500c <MX_LWIP_Init+0x24c>)
 8004f7c:	789b      	ldrb	r3, [r3, #2]
 8004f7e:	021b      	lsls	r3, r3, #8
 8004f80:	430b      	orrs	r3, r1
 8004f82:	4922      	ldr	r1, [pc, #136]	@ (800500c <MX_LWIP_Init+0x24c>)
 8004f84:	78c9      	ldrb	r1, [r1, #3]
 8004f86:	430b      	orrs	r3, r1
 8004f88:	0a1b      	lsrs	r3, r3, #8
 8004f8a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8004f8e:	431a      	orrs	r2, r3
 8004f90:	4b1e      	ldr	r3, [pc, #120]	@ (800500c <MX_LWIP_Init+0x24c>)
 8004f92:	781b      	ldrb	r3, [r3, #0]
 8004f94:	0619      	lsls	r1, r3, #24
 8004f96:	4b1d      	ldr	r3, [pc, #116]	@ (800500c <MX_LWIP_Init+0x24c>)
 8004f98:	785b      	ldrb	r3, [r3, #1]
 8004f9a:	041b      	lsls	r3, r3, #16
 8004f9c:	4319      	orrs	r1, r3
 8004f9e:	4b1b      	ldr	r3, [pc, #108]	@ (800500c <MX_LWIP_Init+0x24c>)
 8004fa0:	789b      	ldrb	r3, [r3, #2]
 8004fa2:	021b      	lsls	r3, r3, #8
 8004fa4:	430b      	orrs	r3, r1
 8004fa6:	4919      	ldr	r1, [pc, #100]	@ (800500c <MX_LWIP_Init+0x24c>)
 8004fa8:	78c9      	ldrb	r1, [r1, #3]
 8004faa:	430b      	orrs	r3, r1
 8004fac:	0e1b      	lsrs	r3, r3, #24
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	4a19      	ldr	r2, [pc, #100]	@ (8005018 <MX_LWIP_Init+0x258>)
 8004fb2:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8004fb4:	4b19      	ldr	r3, [pc, #100]	@ (800501c <MX_LWIP_Init+0x25c>)
 8004fb6:	9302      	str	r3, [sp, #8]
 8004fb8:	4b19      	ldr	r3, [pc, #100]	@ (8005020 <MX_LWIP_Init+0x260>)
 8004fba:	9301      	str	r3, [sp, #4]
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	9300      	str	r3, [sp, #0]
 8004fc0:	4b15      	ldr	r3, [pc, #84]	@ (8005018 <MX_LWIP_Init+0x258>)
 8004fc2:	4a14      	ldr	r2, [pc, #80]	@ (8005014 <MX_LWIP_Init+0x254>)
 8004fc4:	4912      	ldr	r1, [pc, #72]	@ (8005010 <MX_LWIP_Init+0x250>)
 8004fc6:	4817      	ldr	r0, [pc, #92]	@ (8005024 <MX_LWIP_Init+0x264>)
 8004fc8:	f006 fdc4 	bl	800bb54 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8004fcc:	4815      	ldr	r0, [pc, #84]	@ (8005024 <MX_LWIP_Init+0x264>)
 8004fce:	f006 ff73 	bl	800beb8 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 8004fd2:	4814      	ldr	r0, [pc, #80]	@ (8005024 <MX_LWIP_Init+0x264>)
 8004fd4:	f006 ff80 	bl	800bed8 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8004fd8:	4913      	ldr	r1, [pc, #76]	@ (8005028 <MX_LWIP_Init+0x268>)
 8004fda:	4812      	ldr	r0, [pc, #72]	@ (8005024 <MX_LWIP_Init+0x264>)
 8004fdc:	f007 f87e 	bl	800c0dc <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthLink, ethernet_link_thread, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE *2);
 8004fe0:	4b12      	ldr	r3, [pc, #72]	@ (800502c <MX_LWIP_Init+0x26c>)
 8004fe2:	1d3c      	adds	r4, r7, #4
 8004fe4:	461d      	mov	r5, r3
 8004fe6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004fe8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004fea:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004fee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthLink), &gnetif);
 8004ff2:	1d3b      	adds	r3, r7, #4
 8004ff4:	490b      	ldr	r1, [pc, #44]	@ (8005024 <MX_LWIP_Init+0x264>)
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	f000 fd42 	bl	8005a80 <osThreadCreate>
/* USER CODE END H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8004ffc:	bf00      	nop
 8004ffe:	3720      	adds	r7, #32
 8005000:	46bd      	mov	sp, r7
 8005002:	bdb0      	pop	{r4, r5, r7, pc}
 8005004:	2000086c 	.word	0x2000086c
 8005008:	20000870 	.word	0x20000870
 800500c:	20000874 	.word	0x20000874
 8005010:	20000860 	.word	0x20000860
 8005014:	20000864 	.word	0x20000864
 8005018:	20000868 	.word	0x20000868
 800501c:	0800aed1 	.word	0x0800aed1
 8005020:	08005509 	.word	0x08005509
 8005024:	2000082c 	.word	0x2000082c
 8005028:	08005031 	.word	0x08005031
 800502c:	08017800 	.word	0x08017800

08005030 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8005030:	b480      	push	{r7}
 8005032:	b083      	sub	sp, #12
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8005038:	bf00      	nop
 800503a:	370c      	adds	r7, #12
 800503c:	46bd      	mov	sp, r7
 800503e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005042:	4770      	bx	lr

08005044 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b082      	sub	sp, #8
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 800504c:	4b04      	ldr	r3, [pc, #16]	@ (8005060 <HAL_ETH_RxCpltCallback+0x1c>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4618      	mov	r0, r3
 8005052:	f000 fe91 	bl	8005d78 <osSemaphoreRelease>
}
 8005056:	bf00      	nop
 8005058:	3708      	adds	r7, #8
 800505a:	46bd      	mov	sp, r7
 800505c:	bd80      	pop	{r7, pc}
 800505e:	bf00      	nop
 8005060:	20005344 	.word	0x20005344

08005064 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b082      	sub	sp, #8
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 800506c:	4b04      	ldr	r3, [pc, #16]	@ (8005080 <HAL_ETH_TxCpltCallback+0x1c>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4618      	mov	r0, r3
 8005072:	f000 fe81 	bl	8005d78 <osSemaphoreRelease>
}
 8005076:	bf00      	nop
 8005078:	3708      	adds	r7, #8
 800507a:	46bd      	mov	sp, r7
 800507c:	bd80      	pop	{r7, pc}
 800507e:	bf00      	nop
 8005080:	20005348 	.word	0x20005348

08005084 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b082      	sub	sp, #8
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 800508c:	6878      	ldr	r0, [r7, #4]
 800508e:	f7fd fd47 	bl	8002b20 <HAL_ETH_GetDMAError>
 8005092:	4603      	mov	r3, r0
 8005094:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005098:	2b80      	cmp	r3, #128	@ 0x80
 800509a:	d104      	bne.n	80050a6 <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 800509c:	4b04      	ldr	r3, [pc, #16]	@ (80050b0 <HAL_ETH_ErrorCallback+0x2c>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4618      	mov	r0, r3
 80050a2:	f000 fe69 	bl	8005d78 <osSemaphoreRelease>
  }
}
 80050a6:	bf00      	nop
 80050a8:	3708      	adds	r7, #8
 80050aa:	46bd      	mov	sp, r7
 80050ac:	bd80      	pop	{r7, pc}
 80050ae:	bf00      	nop
 80050b0:	20005344 	.word	0x20005344

080050b4 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 80050b4:	b5b0      	push	{r4, r5, r7, lr}
 80050b6:	b0ac      	sub	sp, #176	@ 0xb0
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 80050bc:	2300      	movs	r3, #0
 80050be:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
  uint32_t duplex, speed = 0;
 80050c2:	2300      	movs	r3, #0
 80050c4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  int32_t PHYLinkState = 0;
 80050c8:	2300      	movs	r3, #0
 80050ca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  ETH_MACConfigTypeDef MACConf = {0};
 80050ce:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80050d2:	2264      	movs	r2, #100	@ 0x64
 80050d4:	2100      	movs	r1, #0
 80050d6:	4618      	mov	r0, r3
 80050d8:	f011 f9b9 	bl	801644e <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 80050dc:	4b90      	ldr	r3, [pc, #576]	@ (8005320 <low_level_init+0x26c>)
 80050de:	4a91      	ldr	r2, [pc, #580]	@ (8005324 <low_level_init+0x270>)
 80050e0:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80050e2:	2300      	movs	r3, #0
 80050e4:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  MACAddr[1] = 0x80;
 80050e8:	2380      	movs	r3, #128	@ 0x80
 80050ea:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  MACAddr[2] = 0xE1;
 80050ee:	23e1      	movs	r3, #225	@ 0xe1
 80050f0:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  MACAddr[3] = 0x00;
 80050f4:	2300      	movs	r3, #0
 80050f6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  MACAddr[4] = 0x00;
 80050fa:	2300      	movs	r3, #0
 80050fc:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  MACAddr[5] = 0x00;
 8005100:	2300      	movs	r3, #0
 8005102:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  heth.Init.MACAddr = &MACAddr[0];
 8005106:	4a86      	ldr	r2, [pc, #536]	@ (8005320 <low_level_init+0x26c>)
 8005108:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800510c:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800510e:	4b84      	ldr	r3, [pc, #528]	@ (8005320 <low_level_init+0x26c>)
 8005110:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8005114:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8005116:	4b82      	ldr	r3, [pc, #520]	@ (8005320 <low_level_init+0x26c>)
 8005118:	4a83      	ldr	r2, [pc, #524]	@ (8005328 <low_level_init+0x274>)
 800511a:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800511c:	4b80      	ldr	r3, [pc, #512]	@ (8005320 <low_level_init+0x26c>)
 800511e:	4a83      	ldr	r2, [pc, #524]	@ (800532c <low_level_init+0x278>)
 8005120:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8005122:	4b7f      	ldr	r3, [pc, #508]	@ (8005320 <low_level_init+0x26c>)
 8005124:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8005128:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800512a:	487d      	ldr	r0, [pc, #500]	@ (8005320 <low_level_init+0x26c>)
 800512c:	f7fc feae 	bl	8001e8c <HAL_ETH_Init>
 8005130:	4603      	mov	r3, r0
 8005132:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8005136:	2238      	movs	r2, #56	@ 0x38
 8005138:	2100      	movs	r1, #0
 800513a:	487d      	ldr	r0, [pc, #500]	@ (8005330 <low_level_init+0x27c>)
 800513c:	f011 f987 	bl	801644e <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8005140:	4b7b      	ldr	r3, [pc, #492]	@ (8005330 <low_level_init+0x27c>)
 8005142:	2221      	movs	r2, #33	@ 0x21
 8005144:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8005146:	4b7a      	ldr	r3, [pc, #488]	@ (8005330 <low_level_init+0x27c>)
 8005148:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 800514c:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800514e:	4b78      	ldr	r3, [pc, #480]	@ (8005330 <low_level_init+0x27c>)
 8005150:	2200      	movs	r2, #0
 8005152:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8005154:	4877      	ldr	r0, [pc, #476]	@ (8005334 <low_level_init+0x280>)
 8005156:	f006 fbb7 	bl	800b8c8 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2206      	movs	r2, #6
 800515e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8005162:	4b6f      	ldr	r3, [pc, #444]	@ (8005320 <low_level_init+0x26c>)
 8005164:	685b      	ldr	r3, [r3, #4]
 8005166:	781a      	ldrb	r2, [r3, #0]
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800516e:	4b6c      	ldr	r3, [pc, #432]	@ (8005320 <low_level_init+0x26c>)
 8005170:	685b      	ldr	r3, [r3, #4]
 8005172:	785a      	ldrb	r2, [r3, #1]
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800517a:	4b69      	ldr	r3, [pc, #420]	@ (8005320 <low_level_init+0x26c>)
 800517c:	685b      	ldr	r3, [r3, #4]
 800517e:	789a      	ldrb	r2, [r3, #2]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8005186:	4b66      	ldr	r3, [pc, #408]	@ (8005320 <low_level_init+0x26c>)
 8005188:	685b      	ldr	r3, [r3, #4]
 800518a:	78da      	ldrb	r2, [r3, #3]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8005192:	4b63      	ldr	r3, [pc, #396]	@ (8005320 <low_level_init+0x26c>)
 8005194:	685b      	ldr	r3, [r3, #4]
 8005196:	791a      	ldrb	r2, [r3, #4]
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800519e:	4b60      	ldr	r3, [pc, #384]	@ (8005320 <low_level_init+0x26c>)
 80051a0:	685b      	ldr	r3, [r3, #4]
 80051a2:	795a      	ldrb	r2, [r3, #5]
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 80051b0:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80051b8:	f043 030a 	orr.w	r3, r3, #10
 80051bc:	b2da      	uxtb	r2, r3
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(RxSem);
 80051c4:	2300      	movs	r3, #0
 80051c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80051c8:	2300      	movs	r3, #0
 80051ca:	633b      	str	r3, [r7, #48]	@ 0x30
  RxPktSemaphore = osSemaphoreCreate(osSemaphore(RxSem), 1);
 80051cc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80051d0:	2101      	movs	r1, #1
 80051d2:	4618      	mov	r0, r3
 80051d4:	f000 fd50 	bl	8005c78 <osSemaphoreCreate>
 80051d8:	4603      	mov	r3, r0
 80051da:	4a57      	ldr	r2, [pc, #348]	@ (8005338 <low_level_init+0x284>)
 80051dc:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  osSemaphoreDef(TxSem);
 80051de:	2300      	movs	r3, #0
 80051e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80051e2:	2300      	movs	r3, #0
 80051e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  TxPktSemaphore = osSemaphoreCreate(osSemaphore(TxSem), 1);
 80051e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80051ea:	2101      	movs	r1, #1
 80051ec:	4618      	mov	r0, r3
 80051ee:	f000 fd43 	bl	8005c78 <osSemaphoreCreate>
 80051f2:	4603      	mov	r3, r0
 80051f4:	4a51      	ldr	r2, [pc, #324]	@ (800533c <low_level_init+0x288>)
 80051f6:	6013      	str	r3, [r2, #0]

  /* Decrease the semaphore's initial count from 1 to 0 */
  osSemaphoreWait(RxPktSemaphore, 0);
 80051f8:	4b4f      	ldr	r3, [pc, #316]	@ (8005338 <low_level_init+0x284>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	2100      	movs	r1, #0
 80051fe:	4618      	mov	r0, r3
 8005200:	f000 fd6c 	bl	8005cdc <osSemaphoreWait>
  osSemaphoreWait(TxPktSemaphore, 0);
 8005204:	4b4d      	ldr	r3, [pc, #308]	@ (800533c <low_level_init+0x288>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	2100      	movs	r1, #0
 800520a:	4618      	mov	r0, r3
 800520c:	f000 fd66 	bl	8005cdc <osSemaphoreWait>

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8005210:	4b4b      	ldr	r3, [pc, #300]	@ (8005340 <low_level_init+0x28c>)
 8005212:	f107 0408 	add.w	r4, r7, #8
 8005216:	461d      	mov	r5, r3
 8005218:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800521a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800521c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005220:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 8005224:	f107 0308 	add.w	r3, r7, #8
 8005228:	6879      	ldr	r1, [r7, #4]
 800522a:	4618      	mov	r0, r3
 800522c:	f000 fc28 	bl	8005a80 <osThreadCreate>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8005230:	4944      	ldr	r1, [pc, #272]	@ (8005344 <low_level_init+0x290>)
 8005232:	4845      	ldr	r0, [pc, #276]	@ (8005348 <low_level_init+0x294>)
 8005234:	f7fc fb81 	bl	800193a <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 8005238:	4843      	ldr	r0, [pc, #268]	@ (8005348 <low_level_init+0x294>)
 800523a:	f7fc fbb0 	bl	800199e <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 800523e:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8005242:	2b00      	cmp	r3, #0
 8005244:	d165      	bne.n	8005312 <low_level_init+0x25e>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8005246:	4840      	ldr	r0, [pc, #256]	@ (8005348 <low_level_init+0x294>)
 8005248:	f7fc fc51 	bl	8001aee <LAN8742_GetLinkState>
 800524c:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 8005250:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005254:	2b01      	cmp	r3, #1
 8005256:	dc06      	bgt.n	8005266 <low_level_init+0x1b2>
    {
      netif_set_link_down(netif);
 8005258:	6878      	ldr	r0, [r7, #4]
 800525a:	f006 ff0f 	bl	800c07c <netif_set_link_down>
      netif_set_down(netif);
 800525e:	6878      	ldr	r0, [r7, #4]
 8005260:	f006 fea6 	bl	800bfb0 <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8005264:	e057      	b.n	8005316 <low_level_init+0x262>
      switch (PHYLinkState)
 8005266:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800526a:	3b02      	subs	r3, #2
 800526c:	2b03      	cmp	r3, #3
 800526e:	d82b      	bhi.n	80052c8 <low_level_init+0x214>
 8005270:	a201      	add	r2, pc, #4	@ (adr r2, 8005278 <low_level_init+0x1c4>)
 8005272:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005276:	bf00      	nop
 8005278:	08005289 	.word	0x08005289
 800527c:	0800529b 	.word	0x0800529b
 8005280:	080052ab 	.word	0x080052ab
 8005284:	080052bb 	.word	0x080052bb
        duplex = ETH_FULLDUPLEX_MODE;
 8005288:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800528c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
        speed = ETH_SPEED_100M;
 8005290:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005294:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
        break;
 8005298:	e01f      	b.n	80052da <low_level_init+0x226>
        duplex = ETH_HALFDUPLEX_MODE;
 800529a:	2300      	movs	r3, #0
 800529c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
        speed = ETH_SPEED_100M;
 80052a0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80052a4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
        break;
 80052a8:	e017      	b.n	80052da <low_level_init+0x226>
        duplex = ETH_FULLDUPLEX_MODE;
 80052aa:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80052ae:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
        speed = ETH_SPEED_10M;
 80052b2:	2300      	movs	r3, #0
 80052b4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
        break;
 80052b8:	e00f      	b.n	80052da <low_level_init+0x226>
        duplex = ETH_HALFDUPLEX_MODE;
 80052ba:	2300      	movs	r3, #0
 80052bc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
        speed = ETH_SPEED_10M;
 80052c0:	2300      	movs	r3, #0
 80052c2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
        break;
 80052c6:	e008      	b.n	80052da <low_level_init+0x226>
        duplex = ETH_FULLDUPLEX_MODE;
 80052c8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80052cc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
        speed = ETH_SPEED_100M;
 80052d0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80052d4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
        break;
 80052d8:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 80052da:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80052de:	4619      	mov	r1, r3
 80052e0:	480f      	ldr	r0, [pc, #60]	@ (8005320 <low_level_init+0x26c>)
 80052e2:	f7fd fac3 	bl	800286c <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 80052e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80052ea:	657b      	str	r3, [r7, #84]	@ 0x54
    MACConf.Speed = speed;
 80052ec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80052f0:	653b      	str	r3, [r7, #80]	@ 0x50
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 80052f2:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80052f6:	4619      	mov	r1, r3
 80052f8:	4809      	ldr	r0, [pc, #36]	@ (8005320 <low_level_init+0x26c>)
 80052fa:	f7fd fba1 	bl	8002a40 <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 80052fe:	4808      	ldr	r0, [pc, #32]	@ (8005320 <low_level_init+0x26c>)
 8005300:	f7fc fe42 	bl	8001f88 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 8005304:	6878      	ldr	r0, [r7, #4]
 8005306:	f006 fde7 	bl	800bed8 <netif_set_up>
    netif_set_link_up(netif);
 800530a:	6878      	ldr	r0, [r7, #4]
 800530c:	f006 fe82 	bl	800c014 <netif_set_link_up>
}
 8005310:	e001      	b.n	8005316 <low_level_init+0x262>
    Error_Handler();
 8005312:	f7fb fbe7 	bl	8000ae4 <Error_Handler>
}
 8005316:	bf00      	nop
 8005318:	37b0      	adds	r7, #176	@ 0xb0
 800531a:	46bd      	mov	sp, r7
 800531c:	bdb0      	pop	{r4, r5, r7, pc}
 800531e:	bf00      	nop
 8005320:	2000534c 	.word	0x2000534c
 8005324:	40028000 	.word	0x40028000
 8005328:	200052a4 	.word	0x200052a4
 800532c:	20005204 	.word	0x20005204
 8005330:	200053fc 	.word	0x200053fc
 8005334:	0801ad84 	.word	0x0801ad84
 8005338:	20005344 	.word	0x20005344
 800533c:	20005348 	.word	0x20005348
 8005340:	08017824 	.word	0x08017824
 8005344:	2000010c 	.word	0x2000010c
 8005348:	20005434 	.word	0x20005434

0800534c <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b092      	sub	sp, #72	@ 0x48
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
 8005354:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8005356:	2300      	movs	r3, #0
 8005358:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 800535a:	2300      	movs	r3, #0
 800535c:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 800535e:	2300      	movs	r3, #0
 8005360:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8005364:	f107 030c 	add.w	r3, r7, #12
 8005368:	2230      	movs	r2, #48	@ 0x30
 800536a:	2100      	movs	r1, #0
 800536c:	4618      	mov	r0, r3
 800536e:	f011 f86e 	bl	801644e <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8005372:	f107 030c 	add.w	r3, r7, #12
 8005376:	2230      	movs	r2, #48	@ 0x30
 8005378:	2100      	movs	r1, #0
 800537a:	4618      	mov	r0, r3
 800537c:	f011 f867 	bl	801644e <memset>

  for(q = p; q != NULL; q = q->next)
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	643b      	str	r3, [r7, #64]	@ 0x40
 8005384:	e045      	b.n	8005412 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8005386:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005388:	2b03      	cmp	r3, #3
 800538a:	d902      	bls.n	8005392 <low_level_output+0x46>
      return ERR_IF;
 800538c:	f06f 030b 	mvn.w	r3, #11
 8005390:	e06c      	b.n	800546c <low_level_output+0x120>

    Txbuffer[i].buffer = q->payload;
 8005392:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005394:	6859      	ldr	r1, [r3, #4]
 8005396:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005398:	4613      	mov	r3, r2
 800539a:	005b      	lsls	r3, r3, #1
 800539c:	4413      	add	r3, r2
 800539e:	009b      	lsls	r3, r3, #2
 80053a0:	3348      	adds	r3, #72	@ 0x48
 80053a2:	443b      	add	r3, r7
 80053a4:	3b3c      	subs	r3, #60	@ 0x3c
 80053a6:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 80053a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80053aa:	895b      	ldrh	r3, [r3, #10]
 80053ac:	4619      	mov	r1, r3
 80053ae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80053b0:	4613      	mov	r3, r2
 80053b2:	005b      	lsls	r3, r3, #1
 80053b4:	4413      	add	r3, r2
 80053b6:	009b      	lsls	r3, r3, #2
 80053b8:	3348      	adds	r3, #72	@ 0x48
 80053ba:	443b      	add	r3, r7
 80053bc:	3b38      	subs	r3, #56	@ 0x38
 80053be:	6019      	str	r1, [r3, #0]

    if(i>0)
 80053c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d011      	beq.n	80053ea <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 80053c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80053c8:	1e5a      	subs	r2, r3, #1
 80053ca:	f107 000c 	add.w	r0, r7, #12
 80053ce:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80053d0:	460b      	mov	r3, r1
 80053d2:	005b      	lsls	r3, r3, #1
 80053d4:	440b      	add	r3, r1
 80053d6:	009b      	lsls	r3, r3, #2
 80053d8:	18c1      	adds	r1, r0, r3
 80053da:	4613      	mov	r3, r2
 80053dc:	005b      	lsls	r3, r3, #1
 80053de:	4413      	add	r3, r2
 80053e0:	009b      	lsls	r3, r3, #2
 80053e2:	3348      	adds	r3, #72	@ 0x48
 80053e4:	443b      	add	r3, r7
 80053e6:	3b34      	subs	r3, #52	@ 0x34
 80053e8:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 80053ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d109      	bne.n	8005406 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 80053f2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80053f4:	4613      	mov	r3, r2
 80053f6:	005b      	lsls	r3, r3, #1
 80053f8:	4413      	add	r3, r2
 80053fa:	009b      	lsls	r3, r3, #2
 80053fc:	3348      	adds	r3, #72	@ 0x48
 80053fe:	443b      	add	r3, r7
 8005400:	3b34      	subs	r3, #52	@ 0x34
 8005402:	2200      	movs	r2, #0
 8005404:	601a      	str	r2, [r3, #0]
    }

    i++;
 8005406:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005408:	3301      	adds	r3, #1
 800540a:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 800540c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	643b      	str	r3, [r7, #64]	@ 0x40
 8005412:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005414:	2b00      	cmp	r3, #0
 8005416:	d1b6      	bne.n	8005386 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	891b      	ldrh	r3, [r3, #8]
 800541c:	461a      	mov	r2, r3
 800541e:	4b15      	ldr	r3, [pc, #84]	@ (8005474 <low_level_output+0x128>)
 8005420:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8005422:	4a14      	ldr	r2, [pc, #80]	@ (8005474 <low_level_output+0x128>)
 8005424:	f107 030c 	add.w	r3, r7, #12
 8005428:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 800542a:	4a12      	ldr	r2, [pc, #72]	@ (8005474 <low_level_output+0x128>)
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	6353      	str	r3, [r2, #52]	@ 0x34

  pbuf_ref(p);
 8005430:	6838      	ldr	r0, [r7, #0]
 8005432:	f007 faa7 	bl	800c984 <pbuf_ref>

  if (HAL_ETH_Transmit_IT(&heth, &TxConfig) == HAL_OK) {
 8005436:	490f      	ldr	r1, [pc, #60]	@ (8005474 <low_level_output+0x128>)
 8005438:	480f      	ldr	r0, [pc, #60]	@ (8005478 <low_level_output+0x12c>)
 800543a:	f7fc feb2 	bl	80021a2 <HAL_ETH_Transmit_IT>
 800543e:	4603      	mov	r3, r0
 8005440:	2b00      	cmp	r3, #0
 8005442:	d10e      	bne.n	8005462 <low_level_output+0x116>
    while(osSemaphoreWait(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 8005444:	bf00      	nop
 8005446:	4b0d      	ldr	r3, [pc, #52]	@ (800547c <low_level_output+0x130>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f04f 31ff 	mov.w	r1, #4294967295
 800544e:	4618      	mov	r0, r3
 8005450:	f000 fc44 	bl	8005cdc <osSemaphoreWait>
 8005454:	4603      	mov	r3, r0
 8005456:	2b00      	cmp	r3, #0
 8005458:	d1f5      	bne.n	8005446 <low_level_output+0xfa>

    {
    }

    HAL_ETH_ReleaseTxPacket(&heth);
 800545a:	4807      	ldr	r0, [pc, #28]	@ (8005478 <low_level_output+0x12c>)
 800545c:	f7fd f840 	bl	80024e0 <HAL_ETH_ReleaseTxPacket>
 8005460:	e002      	b.n	8005468 <low_level_output+0x11c>
  } else {
    pbuf_free(p);
 8005462:	6838      	ldr	r0, [r7, #0]
 8005464:	f007 f9e8 	bl	800c838 <pbuf_free>
  }

  return errval;
 8005468:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 800546c:	4618      	mov	r0, r3
 800546e:	3748      	adds	r7, #72	@ 0x48
 8005470:	46bd      	mov	sp, r7
 8005472:	bd80      	pop	{r7, pc}
 8005474:	200053fc 	.word	0x200053fc
 8005478:	2000534c 	.word	0x2000534c
 800547c:	20005348 	.word	0x20005348

08005480 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b084      	sub	sp, #16
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8005488:	2300      	movs	r3, #0
 800548a:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 800548c:	4b07      	ldr	r3, [pc, #28]	@ (80054ac <low_level_input+0x2c>)
 800548e:	781b      	ldrb	r3, [r3, #0]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d105      	bne.n	80054a0 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8005494:	f107 030c 	add.w	r3, r7, #12
 8005498:	4619      	mov	r1, r3
 800549a:	4805      	ldr	r0, [pc, #20]	@ (80054b0 <low_level_input+0x30>)
 800549c:	f7fc fedd 	bl	800225a <HAL_ETH_ReadData>
  }

  return p;
 80054a0:	68fb      	ldr	r3, [r7, #12]
}
 80054a2:	4618      	mov	r0, r3
 80054a4:	3710      	adds	r7, #16
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bd80      	pop	{r7, pc}
 80054aa:	bf00      	nop
 80054ac:	20005200 	.word	0x20005200
 80054b0:	2000534c 	.word	0x2000534c

080054b4 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
static void ethernetif_input(void const * argument)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b084      	sub	sp, #16
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80054bc:	2300      	movs	r3, #0
 80054be:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 80054c4:	4b0f      	ldr	r3, [pc, #60]	@ (8005504 <ethernetif_input+0x50>)
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f04f 31ff 	mov.w	r1, #4294967295
 80054cc:	4618      	mov	r0, r3
 80054ce:	f000 fc05 	bl	8005cdc <osSemaphoreWait>
 80054d2:	4603      	mov	r3, r0
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d1f5      	bne.n	80054c4 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 80054d8:	68b8      	ldr	r0, [r7, #8]
 80054da:	f7ff ffd1 	bl	8005480 <low_level_input>
 80054de:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d00a      	beq.n	80054fc <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 80054e6:	68bb      	ldr	r3, [r7, #8]
 80054e8:	691b      	ldr	r3, [r3, #16]
 80054ea:	68b9      	ldr	r1, [r7, #8]
 80054ec:	68f8      	ldr	r0, [r7, #12]
 80054ee:	4798      	blx	r3
 80054f0:	4603      	mov	r3, r0
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d002      	beq.n	80054fc <ethernetif_input+0x48>
          {
            pbuf_free(p);
 80054f6:	68f8      	ldr	r0, [r7, #12]
 80054f8:	f007 f99e 	bl	800c838 <pbuf_free>
          }
        }
      } while(p!=NULL);
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d1ea      	bne.n	80054d8 <ethernetif_input+0x24>
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8005502:	e7df      	b.n	80054c4 <ethernetif_input+0x10>
 8005504:	20005344 	.word	0x20005344

08005508 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b082      	sub	sp, #8
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d106      	bne.n	8005524 <ethernetif_init+0x1c>
 8005516:	4b0e      	ldr	r3, [pc, #56]	@ (8005550 <ethernetif_init+0x48>)
 8005518:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 800551c:	490d      	ldr	r1, [pc, #52]	@ (8005554 <ethernetif_init+0x4c>)
 800551e:	480e      	ldr	r0, [pc, #56]	@ (8005558 <ethernetif_init+0x50>)
 8005520:	f010 fef6 	bl	8016310 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2273      	movs	r2, #115	@ 0x73
 8005528:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2274      	movs	r2, #116	@ 0x74
 8005530:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	4a09      	ldr	r2, [pc, #36]	@ (800555c <ethernetif_init+0x54>)
 8005538:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	4a08      	ldr	r2, [pc, #32]	@ (8005560 <ethernetif_init+0x58>)
 800553e:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8005540:	6878      	ldr	r0, [r7, #4]
 8005542:	f7ff fdb7 	bl	80050b4 <low_level_init>

  return ERR_OK;
 8005546:	2300      	movs	r3, #0
}
 8005548:	4618      	mov	r0, r3
 800554a:	3708      	adds	r7, #8
 800554c:	46bd      	mov	sp, r7
 800554e:	bd80      	pop	{r7, pc}
 8005550:	08017840 	.word	0x08017840
 8005554:	0801785c 	.word	0x0801785c
 8005558:	0801786c 	.word	0x0801786c
 800555c:	08014059 	.word	0x08014059
 8005560:	0800534d 	.word	0x0800534d

08005564 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b084      	sub	sp, #16
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8005570:	68f9      	ldr	r1, [r7, #12]
 8005572:	4809      	ldr	r0, [pc, #36]	@ (8005598 <pbuf_free_custom+0x34>)
 8005574:	f006 fa98 	bl	800baa8 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8005578:	4b08      	ldr	r3, [pc, #32]	@ (800559c <pbuf_free_custom+0x38>)
 800557a:	781b      	ldrb	r3, [r3, #0]
 800557c:	2b01      	cmp	r3, #1
 800557e:	d107      	bne.n	8005590 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8005580:	4b06      	ldr	r3, [pc, #24]	@ (800559c <pbuf_free_custom+0x38>)
 8005582:	2200      	movs	r2, #0
 8005584:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 8005586:	4b06      	ldr	r3, [pc, #24]	@ (80055a0 <pbuf_free_custom+0x3c>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4618      	mov	r0, r3
 800558c:	f000 fbf4 	bl	8005d78 <osSemaphoreRelease>
  }
}
 8005590:	bf00      	nop
 8005592:	3710      	adds	r7, #16
 8005594:	46bd      	mov	sp, r7
 8005596:	bd80      	pop	{r7, pc}
 8005598:	0801ad84 	.word	0x0801ad84
 800559c:	20005200 	.word	0x20005200
 80055a0:	20005344 	.word	0x20005344

080055a4 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80055a8:	f7fc fb5e 	bl	8001c68 <HAL_GetTick>
 80055ac:	4603      	mov	r3, r0
}
 80055ae:	4618      	mov	r0, r3
 80055b0:	bd80      	pop	{r7, pc}
	...

080055b4 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b08e      	sub	sp, #56	@ 0x38
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80055bc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80055c0:	2200      	movs	r2, #0
 80055c2:	601a      	str	r2, [r3, #0]
 80055c4:	605a      	str	r2, [r3, #4]
 80055c6:	609a      	str	r2, [r3, #8]
 80055c8:	60da      	str	r2, [r3, #12]
 80055ca:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	4a59      	ldr	r2, [pc, #356]	@ (8005738 <HAL_ETH_MspInit+0x184>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	f040 80ac 	bne.w	8005730 <HAL_ETH_MspInit+0x17c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 80055d8:	2300      	movs	r3, #0
 80055da:	623b      	str	r3, [r7, #32]
 80055dc:	4b57      	ldr	r3, [pc, #348]	@ (800573c <HAL_ETH_MspInit+0x188>)
 80055de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055e0:	4a56      	ldr	r2, [pc, #344]	@ (800573c <HAL_ETH_MspInit+0x188>)
 80055e2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80055e6:	6313      	str	r3, [r2, #48]	@ 0x30
 80055e8:	4b54      	ldr	r3, [pc, #336]	@ (800573c <HAL_ETH_MspInit+0x188>)
 80055ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80055f0:	623b      	str	r3, [r7, #32]
 80055f2:	6a3b      	ldr	r3, [r7, #32]
 80055f4:	2300      	movs	r3, #0
 80055f6:	61fb      	str	r3, [r7, #28]
 80055f8:	4b50      	ldr	r3, [pc, #320]	@ (800573c <HAL_ETH_MspInit+0x188>)
 80055fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055fc:	4a4f      	ldr	r2, [pc, #316]	@ (800573c <HAL_ETH_MspInit+0x188>)
 80055fe:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005602:	6313      	str	r3, [r2, #48]	@ 0x30
 8005604:	4b4d      	ldr	r3, [pc, #308]	@ (800573c <HAL_ETH_MspInit+0x188>)
 8005606:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005608:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800560c:	61fb      	str	r3, [r7, #28]
 800560e:	69fb      	ldr	r3, [r7, #28]
 8005610:	2300      	movs	r3, #0
 8005612:	61bb      	str	r3, [r7, #24]
 8005614:	4b49      	ldr	r3, [pc, #292]	@ (800573c <HAL_ETH_MspInit+0x188>)
 8005616:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005618:	4a48      	ldr	r2, [pc, #288]	@ (800573c <HAL_ETH_MspInit+0x188>)
 800561a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800561e:	6313      	str	r3, [r2, #48]	@ 0x30
 8005620:	4b46      	ldr	r3, [pc, #280]	@ (800573c <HAL_ETH_MspInit+0x188>)
 8005622:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005624:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005628:	61bb      	str	r3, [r7, #24]
 800562a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800562c:	2300      	movs	r3, #0
 800562e:	617b      	str	r3, [r7, #20]
 8005630:	4b42      	ldr	r3, [pc, #264]	@ (800573c <HAL_ETH_MspInit+0x188>)
 8005632:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005634:	4a41      	ldr	r2, [pc, #260]	@ (800573c <HAL_ETH_MspInit+0x188>)
 8005636:	f043 0304 	orr.w	r3, r3, #4
 800563a:	6313      	str	r3, [r2, #48]	@ 0x30
 800563c:	4b3f      	ldr	r3, [pc, #252]	@ (800573c <HAL_ETH_MspInit+0x188>)
 800563e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005640:	f003 0304 	and.w	r3, r3, #4
 8005644:	617b      	str	r3, [r7, #20]
 8005646:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005648:	2300      	movs	r3, #0
 800564a:	613b      	str	r3, [r7, #16]
 800564c:	4b3b      	ldr	r3, [pc, #236]	@ (800573c <HAL_ETH_MspInit+0x188>)
 800564e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005650:	4a3a      	ldr	r2, [pc, #232]	@ (800573c <HAL_ETH_MspInit+0x188>)
 8005652:	f043 0301 	orr.w	r3, r3, #1
 8005656:	6313      	str	r3, [r2, #48]	@ 0x30
 8005658:	4b38      	ldr	r3, [pc, #224]	@ (800573c <HAL_ETH_MspInit+0x188>)
 800565a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800565c:	f003 0301 	and.w	r3, r3, #1
 8005660:	613b      	str	r3, [r7, #16]
 8005662:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005664:	2300      	movs	r3, #0
 8005666:	60fb      	str	r3, [r7, #12]
 8005668:	4b34      	ldr	r3, [pc, #208]	@ (800573c <HAL_ETH_MspInit+0x188>)
 800566a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800566c:	4a33      	ldr	r2, [pc, #204]	@ (800573c <HAL_ETH_MspInit+0x188>)
 800566e:	f043 0302 	orr.w	r3, r3, #2
 8005672:	6313      	str	r3, [r2, #48]	@ 0x30
 8005674:	4b31      	ldr	r3, [pc, #196]	@ (800573c <HAL_ETH_MspInit+0x188>)
 8005676:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005678:	f003 0302 	and.w	r3, r3, #2
 800567c:	60fb      	str	r3, [r7, #12]
 800567e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8005680:	2300      	movs	r3, #0
 8005682:	60bb      	str	r3, [r7, #8]
 8005684:	4b2d      	ldr	r3, [pc, #180]	@ (800573c <HAL_ETH_MspInit+0x188>)
 8005686:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005688:	4a2c      	ldr	r2, [pc, #176]	@ (800573c <HAL_ETH_MspInit+0x188>)
 800568a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800568e:	6313      	str	r3, [r2, #48]	@ 0x30
 8005690:	4b2a      	ldr	r3, [pc, #168]	@ (800573c <HAL_ETH_MspInit+0x188>)
 8005692:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005694:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005698:	60bb      	str	r3, [r7, #8]
 800569a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800569c:	2332      	movs	r3, #50	@ 0x32
 800569e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80056a0:	2302      	movs	r3, #2
 80056a2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056a4:	2300      	movs	r3, #0
 80056a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80056a8:	2303      	movs	r3, #3
 80056aa:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80056ac:	230b      	movs	r3, #11
 80056ae:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80056b0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80056b4:	4619      	mov	r1, r3
 80056b6:	4822      	ldr	r0, [pc, #136]	@ (8005740 <HAL_ETH_MspInit+0x18c>)
 80056b8:	f7fd fe44 	bl	8003344 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80056bc:	2386      	movs	r3, #134	@ 0x86
 80056be:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80056c0:	2302      	movs	r3, #2
 80056c2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056c4:	2300      	movs	r3, #0
 80056c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80056c8:	2303      	movs	r3, #3
 80056ca:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80056cc:	230b      	movs	r3, #11
 80056ce:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80056d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80056d4:	4619      	mov	r1, r3
 80056d6:	481b      	ldr	r0, [pc, #108]	@ (8005744 <HAL_ETH_MspInit+0x190>)
 80056d8:	f7fd fe34 	bl	8003344 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80056dc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80056e0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80056e2:	2302      	movs	r3, #2
 80056e4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056e6:	2300      	movs	r3, #0
 80056e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80056ea:	2303      	movs	r3, #3
 80056ec:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80056ee:	230b      	movs	r3, #11
 80056f0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80056f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80056f6:	4619      	mov	r1, r3
 80056f8:	4813      	ldr	r0, [pc, #76]	@ (8005748 <HAL_ETH_MspInit+0x194>)
 80056fa:	f7fd fe23 	bl	8003344 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 80056fe:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8005702:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005704:	2302      	movs	r3, #2
 8005706:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005708:	2300      	movs	r3, #0
 800570a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800570c:	2303      	movs	r3, #3
 800570e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005710:	230b      	movs	r3, #11
 8005712:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005714:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005718:	4619      	mov	r1, r3
 800571a:	480c      	ldr	r0, [pc, #48]	@ (800574c <HAL_ETH_MspInit+0x198>)
 800571c:	f7fd fe12 	bl	8003344 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8005720:	2200      	movs	r2, #0
 8005722:	2105      	movs	r1, #5
 8005724:	203d      	movs	r0, #61	@ 0x3d
 8005726:	f7fc fb87 	bl	8001e38 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800572a:	203d      	movs	r0, #61	@ 0x3d
 800572c:	f7fc fba0 	bl	8001e70 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8005730:	bf00      	nop
 8005732:	3738      	adds	r7, #56	@ 0x38
 8005734:	46bd      	mov	sp, r7
 8005736:	bd80      	pop	{r7, pc}
 8005738:	40028000 	.word	0x40028000
 800573c:	40023800 	.word	0x40023800
 8005740:	40020800 	.word	0x40020800
 8005744:	40020000 	.word	0x40020000
 8005748:	40020400 	.word	0x40020400
 800574c:	40021800 	.word	0x40021800

08005750 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8005754:	4802      	ldr	r0, [pc, #8]	@ (8005760 <ETH_PHY_IO_Init+0x10>)
 8005756:	f7fd f98d 	bl	8002a74 <HAL_ETH_SetMDIOClockRange>

  return 0;
 800575a:	2300      	movs	r3, #0
}
 800575c:	4618      	mov	r0, r3
 800575e:	bd80      	pop	{r7, pc}
 8005760:	2000534c 	.word	0x2000534c

08005764 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8005764:	b480      	push	{r7}
 8005766:	af00      	add	r7, sp, #0
  return 0;
 8005768:	2300      	movs	r3, #0
}
 800576a:	4618      	mov	r0, r3
 800576c:	46bd      	mov	sp, r7
 800576e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005772:	4770      	bx	lr

08005774 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b084      	sub	sp, #16
 8005778:	af00      	add	r7, sp, #0
 800577a:	60f8      	str	r0, [r7, #12]
 800577c:	60b9      	str	r1, [r7, #8]
 800577e:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	68ba      	ldr	r2, [r7, #8]
 8005784:	68f9      	ldr	r1, [r7, #12]
 8005786:	4807      	ldr	r0, [pc, #28]	@ (80057a4 <ETH_PHY_IO_ReadReg+0x30>)
 8005788:	f7fc ffdc 	bl	8002744 <HAL_ETH_ReadPHYRegister>
 800578c:	4603      	mov	r3, r0
 800578e:	2b00      	cmp	r3, #0
 8005790:	d002      	beq.n	8005798 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8005792:	f04f 33ff 	mov.w	r3, #4294967295
 8005796:	e000      	b.n	800579a <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8005798:	2300      	movs	r3, #0
}
 800579a:	4618      	mov	r0, r3
 800579c:	3710      	adds	r7, #16
 800579e:	46bd      	mov	sp, r7
 80057a0:	bd80      	pop	{r7, pc}
 80057a2:	bf00      	nop
 80057a4:	2000534c 	.word	0x2000534c

080057a8 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b084      	sub	sp, #16
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	60f8      	str	r0, [r7, #12]
 80057b0:	60b9      	str	r1, [r7, #8]
 80057b2:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	68ba      	ldr	r2, [r7, #8]
 80057b8:	68f9      	ldr	r1, [r7, #12]
 80057ba:	4807      	ldr	r0, [pc, #28]	@ (80057d8 <ETH_PHY_IO_WriteReg+0x30>)
 80057bc:	f7fd f80d 	bl	80027da <HAL_ETH_WritePHYRegister>
 80057c0:	4603      	mov	r3, r0
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d002      	beq.n	80057cc <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 80057c6:	f04f 33ff 	mov.w	r3, #4294967295
 80057ca:	e000      	b.n	80057ce <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 80057cc:	2300      	movs	r3, #0
}
 80057ce:	4618      	mov	r0, r3
 80057d0:	3710      	adds	r7, #16
 80057d2:	46bd      	mov	sp, r7
 80057d4:	bd80      	pop	{r7, pc}
 80057d6:	bf00      	nop
 80057d8:	2000534c 	.word	0x2000534c

080057dc <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80057e0:	f7fc fa42 	bl	8001c68 <HAL_GetTick>
 80057e4:	4603      	mov	r3, r0
}
 80057e6:	4618      	mov	r0, r3
 80057e8:	bd80      	pop	{r7, pc}
	...

080057ec <ethernet_link_thread>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */

void ethernet_link_thread(void const * argument)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b0a0      	sub	sp, #128	@ 0x80
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 80057f4:	f107 0308 	add.w	r3, r7, #8
 80057f8:	2264      	movs	r2, #100	@ 0x64
 80057fa:	2100      	movs	r1, #0
 80057fc:	4618      	mov	r0, r3
 80057fe:	f010 fe26 	bl	801644e <memset>
  int32_t PHYLinkState = 0;
 8005802:	2300      	movs	r3, #0
 8005804:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8005806:	2300      	movs	r3, #0
 8005808:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800580a:	2300      	movs	r3, #0
 800580c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800580e:	2300      	movs	r3, #0
 8005810:	677b      	str	r3, [r7, #116]	@ 0x74

  struct netif *netif = (struct netif *) argument;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	66fb      	str	r3, [r7, #108]	@ 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8005816:	483a      	ldr	r0, [pc, #232]	@ (8005900 <ethernet_link_thread+0x114>)
 8005818:	f7fc f969 	bl	8001aee <LAN8742_GetLinkState>
 800581c:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800581e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005820:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005824:	089b      	lsrs	r3, r3, #2
 8005826:	f003 0301 	and.w	r3, r3, #1
 800582a:	b2db      	uxtb	r3, r3
 800582c:	2b00      	cmp	r3, #0
 800582e:	d00c      	beq.n	800584a <ethernet_link_thread+0x5e>
 8005830:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005832:	2b01      	cmp	r3, #1
 8005834:	dc09      	bgt.n	800584a <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 8005836:	4833      	ldr	r0, [pc, #204]	@ (8005904 <ethernet_link_thread+0x118>)
 8005838:	f7fc fc34 	bl	80020a4 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 800583c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800583e:	f006 fbb7 	bl	800bfb0 <netif_set_down>
    netif_set_link_down(netif);
 8005842:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005844:	f006 fc1a 	bl	800c07c <netif_set_link_down>
 8005848:	e055      	b.n	80058f6 <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800584a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800584c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005850:	f003 0304 	and.w	r3, r3, #4
 8005854:	2b00      	cmp	r3, #0
 8005856:	d14e      	bne.n	80058f6 <ethernet_link_thread+0x10a>
 8005858:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800585a:	2b01      	cmp	r3, #1
 800585c:	dd4b      	ble.n	80058f6 <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 800585e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005860:	3b02      	subs	r3, #2
 8005862:	2b03      	cmp	r3, #3
 8005864:	d82a      	bhi.n	80058bc <ethernet_link_thread+0xd0>
 8005866:	a201      	add	r2, pc, #4	@ (adr r2, 800586c <ethernet_link_thread+0x80>)
 8005868:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800586c:	0800587d 	.word	0x0800587d
 8005870:	0800588f 	.word	0x0800588f
 8005874:	0800589f 	.word	0x0800589f
 8005878:	080058af 	.word	0x080058af
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800587c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005880:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 8005882:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005886:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8005888:	2301      	movs	r3, #1
 800588a:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800588c:	e017      	b.n	80058be <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800588e:	2300      	movs	r3, #0
 8005890:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 8005892:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005896:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8005898:	2301      	movs	r3, #1
 800589a:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800589c:	e00f      	b.n	80058be <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800589e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80058a2:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 80058a4:	2300      	movs	r3, #0
 80058a6:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 80058a8:	2301      	movs	r3, #1
 80058aa:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 80058ac:	e007      	b.n	80058be <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 80058ae:	2300      	movs	r3, #0
 80058b0:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 80058b2:	2300      	movs	r3, #0
 80058b4:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 80058b6:	2301      	movs	r3, #1
 80058b8:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 80058ba:	e000      	b.n	80058be <ethernet_link_thread+0xd2>
    default:
      break;
 80058bc:	bf00      	nop
    }

    if(linkchanged)
 80058be:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d018      	beq.n	80058f6 <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 80058c4:	f107 0308 	add.w	r3, r7, #8
 80058c8:	4619      	mov	r1, r3
 80058ca:	480e      	ldr	r0, [pc, #56]	@ (8005904 <ethernet_link_thread+0x118>)
 80058cc:	f7fc ffce 	bl	800286c <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 80058d0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80058d2:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 80058d4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80058d6:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 80058d8:	f107 0308 	add.w	r3, r7, #8
 80058dc:	4619      	mov	r1, r3
 80058de:	4809      	ldr	r0, [pc, #36]	@ (8005904 <ethernet_link_thread+0x118>)
 80058e0:	f7fd f8ae 	bl	8002a40 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 80058e4:	4807      	ldr	r0, [pc, #28]	@ (8005904 <ethernet_link_thread+0x118>)
 80058e6:	f7fc fb4f 	bl	8001f88 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 80058ea:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80058ec:	f006 faf4 	bl	800bed8 <netif_set_up>
      netif_set_link_up(netif);
 80058f0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80058f2:	f006 fb8f 	bl	800c014 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 80058f6:	2064      	movs	r0, #100	@ 0x64
 80058f8:	f000 f90e 	bl	8005b18 <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 80058fc:	e78b      	b.n	8005816 <ethernet_link_thread+0x2a>
 80058fe:	bf00      	nop
 8005900:	20005434 	.word	0x20005434
 8005904:	2000534c 	.word	0x2000534c

08005908 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b086      	sub	sp, #24
 800590c:	af02      	add	r7, sp, #8
 800590e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8005910:	4812      	ldr	r0, [pc, #72]	@ (800595c <HAL_ETH_RxAllocateCallback+0x54>)
 8005912:	f006 f855 	bl	800b9c0 <memp_malloc_pool>
 8005916:	60f8      	str	r0, [r7, #12]
  if (p)
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d014      	beq.n	8005948 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	f103 0220 	add.w	r2, r3, #32
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	4a0d      	ldr	r2, [pc, #52]	@ (8005960 <HAL_ETH_RxAllocateCallback+0x58>)
 800592c:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8005936:	9201      	str	r2, [sp, #4]
 8005938:	9300      	str	r3, [sp, #0]
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	2241      	movs	r2, #65	@ 0x41
 800593e:	2100      	movs	r1, #0
 8005940:	2000      	movs	r0, #0
 8005942:	f006 fdbf 	bl	800c4c4 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8005946:	e005      	b.n	8005954 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8005948:	4b06      	ldr	r3, [pc, #24]	@ (8005964 <HAL_ETH_RxAllocateCallback+0x5c>)
 800594a:	2201      	movs	r2, #1
 800594c:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2200      	movs	r2, #0
 8005952:	601a      	str	r2, [r3, #0]
}
 8005954:	bf00      	nop
 8005956:	3710      	adds	r7, #16
 8005958:	46bd      	mov	sp, r7
 800595a:	bd80      	pop	{r7, pc}
 800595c:	0801ad84 	.word	0x0801ad84
 8005960:	08005565 	.word	0x08005565
 8005964:	20005200 	.word	0x20005200

08005968 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8005968:	b480      	push	{r7}
 800596a:	b089      	sub	sp, #36	@ 0x24
 800596c:	af00      	add	r7, sp, #0
 800596e:	60f8      	str	r0, [r7, #12]
 8005970:	60b9      	str	r1, [r7, #8]
 8005972:	607a      	str	r2, [r7, #4]
 8005974:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 800597a:	68bb      	ldr	r3, [r7, #8]
 800597c:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800597e:	2300      	movs	r3, #0
 8005980:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	3b20      	subs	r3, #32
 8005986:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8005988:	69fb      	ldr	r3, [r7, #28]
 800598a:	2200      	movs	r2, #0
 800598c:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 800598e:	69fb      	ldr	r3, [r7, #28]
 8005990:	2200      	movs	r2, #0
 8005992:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8005994:	69fb      	ldr	r3, [r7, #28]
 8005996:	887a      	ldrh	r2, [r7, #2]
 8005998:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 800599a:	69bb      	ldr	r3, [r7, #24]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d103      	bne.n	80059aa <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 80059a2:	69bb      	ldr	r3, [r7, #24]
 80059a4:	69fa      	ldr	r2, [r7, #28]
 80059a6:	601a      	str	r2, [r3, #0]
 80059a8:	e003      	b.n	80059b2 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 80059aa:	697b      	ldr	r3, [r7, #20]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	69fa      	ldr	r2, [r7, #28]
 80059b0:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 80059b2:	697b      	ldr	r3, [r7, #20]
 80059b4:	69fa      	ldr	r2, [r7, #28]
 80059b6:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 80059b8:	69bb      	ldr	r3, [r7, #24]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	61fb      	str	r3, [r7, #28]
 80059be:	e009      	b.n	80059d4 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 80059c0:	69fb      	ldr	r3, [r7, #28]
 80059c2:	891a      	ldrh	r2, [r3, #8]
 80059c4:	887b      	ldrh	r3, [r7, #2]
 80059c6:	4413      	add	r3, r2
 80059c8:	b29a      	uxth	r2, r3
 80059ca:	69fb      	ldr	r3, [r7, #28]
 80059cc:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 80059ce:	69fb      	ldr	r3, [r7, #28]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	61fb      	str	r3, [r7, #28]
 80059d4:	69fb      	ldr	r3, [r7, #28]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d1f2      	bne.n	80059c0 <HAL_ETH_RxLinkCallback+0x58>
  }

/* USER CODE END HAL ETH RxLinkCallback */
}
 80059da:	bf00      	nop
 80059dc:	bf00      	nop
 80059de:	3724      	adds	r7, #36	@ 0x24
 80059e0:	46bd      	mov	sp, r7
 80059e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e6:	4770      	bx	lr

080059e8 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b082      	sub	sp, #8
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 80059f0:	6878      	ldr	r0, [r7, #4]
 80059f2:	f006 ff21 	bl	800c838 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 80059f6:	bf00      	nop
 80059f8:	3708      	adds	r7, #8
 80059fa:	46bd      	mov	sp, r7
 80059fc:	bd80      	pop	{r7, pc}

080059fe <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80059fe:	b480      	push	{r7}
 8005a00:	b085      	sub	sp, #20
 8005a02:	af00      	add	r7, sp, #0
 8005a04:	4603      	mov	r3, r0
 8005a06:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005a08:	2300      	movs	r3, #0
 8005a0a:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005a0c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005a10:	2b84      	cmp	r3, #132	@ 0x84
 8005a12:	d005      	beq.n	8005a20 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005a14:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	4413      	add	r3, r2
 8005a1c:	3303      	adds	r3, #3
 8005a1e:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005a20:	68fb      	ldr	r3, [r7, #12]
}
 8005a22:	4618      	mov	r0, r3
 8005a24:	3714      	adds	r7, #20
 8005a26:	46bd      	mov	sp, r7
 8005a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2c:	4770      	bx	lr

08005a2e <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8005a2e:	b480      	push	{r7}
 8005a30:	b083      	sub	sp, #12
 8005a32:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005a34:	f3ef 8305 	mrs	r3, IPSR
 8005a38:	607b      	str	r3, [r7, #4]
  return(result);
 8005a3a:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	bf14      	ite	ne
 8005a40:	2301      	movne	r3, #1
 8005a42:	2300      	moveq	r3, #0
 8005a44:	b2db      	uxtb	r3, r3
}
 8005a46:	4618      	mov	r0, r3
 8005a48:	370c      	adds	r7, #12
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a50:	4770      	bx	lr

08005a52 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005a52:	b580      	push	{r7, lr}
 8005a54:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005a56:	f001 fd5f 	bl	8007518 <vTaskStartScheduler>
  
  return osOK;
 8005a5a:	2300      	movs	r3, #0
}
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	bd80      	pop	{r7, pc}

08005a60 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8005a64:	f7ff ffe3 	bl	8005a2e <inHandlerMode>
 8005a68:	4603      	mov	r3, r0
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d003      	beq.n	8005a76 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8005a6e:	f001 fe79 	bl	8007764 <xTaskGetTickCountFromISR>
 8005a72:	4603      	mov	r3, r0
 8005a74:	e002      	b.n	8005a7c <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8005a76:	f001 fe65 	bl	8007744 <xTaskGetTickCount>
 8005a7a:	4603      	mov	r3, r0
  }
}
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	bd80      	pop	{r7, pc}

08005a80 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005a80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a82:	b089      	sub	sp, #36	@ 0x24
 8005a84:	af04      	add	r7, sp, #16
 8005a86:	6078      	str	r0, [r7, #4]
 8005a88:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	695b      	ldr	r3, [r3, #20]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d020      	beq.n	8005ad4 <osThreadCreate+0x54>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	699b      	ldr	r3, [r3, #24]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d01c      	beq.n	8005ad4 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	685c      	ldr	r4, [r3, #4]
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	691e      	ldr	r6, [r3, #16]
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005aac:	4618      	mov	r0, r3
 8005aae:	f7ff ffa6 	bl	80059fe <makeFreeRtosPriority>
 8005ab2:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	695b      	ldr	r3, [r3, #20]
 8005ab8:	687a      	ldr	r2, [r7, #4]
 8005aba:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005abc:	9202      	str	r2, [sp, #8]
 8005abe:	9301      	str	r3, [sp, #4]
 8005ac0:	9100      	str	r1, [sp, #0]
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	4632      	mov	r2, r6
 8005ac6:	4629      	mov	r1, r5
 8005ac8:	4620      	mov	r0, r4
 8005aca:	f001 fb3f 	bl	800714c <xTaskCreateStatic>
 8005ace:	4603      	mov	r3, r0
 8005ad0:	60fb      	str	r3, [r7, #12]
 8005ad2:	e01c      	b.n	8005b0e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	685c      	ldr	r4, [r3, #4]
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005ae0:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005ae8:	4618      	mov	r0, r3
 8005aea:	f7ff ff88 	bl	80059fe <makeFreeRtosPriority>
 8005aee:	4602      	mov	r2, r0
 8005af0:	f107 030c 	add.w	r3, r7, #12
 8005af4:	9301      	str	r3, [sp, #4]
 8005af6:	9200      	str	r2, [sp, #0]
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	4632      	mov	r2, r6
 8005afc:	4629      	mov	r1, r5
 8005afe:	4620      	mov	r0, r4
 8005b00:	f001 fb84 	bl	800720c <xTaskCreate>
 8005b04:	4603      	mov	r3, r0
 8005b06:	2b01      	cmp	r3, #1
 8005b08:	d001      	beq.n	8005b0e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	e000      	b.n	8005b10 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
}
 8005b10:	4618      	mov	r0, r3
 8005b12:	3714      	adds	r7, #20
 8005b14:	46bd      	mov	sp, r7
 8005b16:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005b18 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b084      	sub	sp, #16
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d001      	beq.n	8005b2e <osDelay+0x16>
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	e000      	b.n	8005b30 <osDelay+0x18>
 8005b2e:	2301      	movs	r3, #1
 8005b30:	4618      	mov	r0, r3
 8005b32:	f001 fcbb 	bl	80074ac <vTaskDelay>
  
  return osOK;
 8005b36:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005b38:	4618      	mov	r0, r3
 8005b3a:	3710      	adds	r7, #16
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	bd80      	pop	{r7, pc}

08005b40 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b082      	sub	sp, #8
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	685b      	ldr	r3, [r3, #4]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d007      	beq.n	8005b60 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	685b      	ldr	r3, [r3, #4]
 8005b54:	4619      	mov	r1, r3
 8005b56:	2001      	movs	r0, #1
 8005b58:	f000 fc85 	bl	8006466 <xQueueCreateMutexStatic>
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	e003      	b.n	8005b68 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8005b60:	2001      	movs	r0, #1
 8005b62:	f000 fc68 	bl	8006436 <xQueueCreateMutex>
 8005b66:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8005b68:	4618      	mov	r0, r3
 8005b6a:	3708      	adds	r7, #8
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	bd80      	pop	{r7, pc}

08005b70 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b084      	sub	sp, #16
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
 8005b78:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d101      	bne.n	8005b88 <osMutexWait+0x18>
    return osErrorParameter;
 8005b84:	2380      	movs	r3, #128	@ 0x80
 8005b86:	e03a      	b.n	8005bfe <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8005b88:	2300      	movs	r3, #0
 8005b8a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b92:	d103      	bne.n	8005b9c <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8005b94:	f04f 33ff 	mov.w	r3, #4294967295
 8005b98:	60fb      	str	r3, [r7, #12]
 8005b9a:	e009      	b.n	8005bb0 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d006      	beq.n	8005bb0 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d101      	bne.n	8005bb0 <osMutexWait+0x40>
      ticks = 1;
 8005bac:	2301      	movs	r3, #1
 8005bae:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8005bb0:	f7ff ff3d 	bl	8005a2e <inHandlerMode>
 8005bb4:	4603      	mov	r3, r0
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d017      	beq.n	8005bea <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8005bba:	f107 0308 	add.w	r3, r7, #8
 8005bbe:	461a      	mov	r2, r3
 8005bc0:	2100      	movs	r1, #0
 8005bc2:	6878      	ldr	r0, [r7, #4]
 8005bc4:	f001 f88c 	bl	8006ce0 <xQueueReceiveFromISR>
 8005bc8:	4603      	mov	r3, r0
 8005bca:	2b01      	cmp	r3, #1
 8005bcc:	d001      	beq.n	8005bd2 <osMutexWait+0x62>
      return osErrorOS;
 8005bce:	23ff      	movs	r3, #255	@ 0xff
 8005bd0:	e015      	b.n	8005bfe <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8005bd2:	68bb      	ldr	r3, [r7, #8]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d011      	beq.n	8005bfc <osMutexWait+0x8c>
 8005bd8:	4b0b      	ldr	r3, [pc, #44]	@ (8005c08 <osMutexWait+0x98>)
 8005bda:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005bde:	601a      	str	r2, [r3, #0]
 8005be0:	f3bf 8f4f 	dsb	sy
 8005be4:	f3bf 8f6f 	isb	sy
 8005be8:	e008      	b.n	8005bfc <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8005bea:	68f9      	ldr	r1, [r7, #12]
 8005bec:	6878      	ldr	r0, [r7, #4]
 8005bee:	f000 ff67 	bl	8006ac0 <xQueueSemaphoreTake>
 8005bf2:	4603      	mov	r3, r0
 8005bf4:	2b01      	cmp	r3, #1
 8005bf6:	d001      	beq.n	8005bfc <osMutexWait+0x8c>
    return osErrorOS;
 8005bf8:	23ff      	movs	r3, #255	@ 0xff
 8005bfa:	e000      	b.n	8005bfe <osMutexWait+0x8e>
  }
  
  return osOK;
 8005bfc:	2300      	movs	r3, #0
}
 8005bfe:	4618      	mov	r0, r3
 8005c00:	3710      	adds	r7, #16
 8005c02:	46bd      	mov	sp, r7
 8005c04:	bd80      	pop	{r7, pc}
 8005c06:	bf00      	nop
 8005c08:	e000ed04 	.word	0xe000ed04

08005c0c <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b084      	sub	sp, #16
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8005c14:	2300      	movs	r3, #0
 8005c16:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8005c18:	2300      	movs	r3, #0
 8005c1a:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8005c1c:	f7ff ff07 	bl	8005a2e <inHandlerMode>
 8005c20:	4603      	mov	r3, r0
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d016      	beq.n	8005c54 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8005c26:	f107 0308 	add.w	r3, r7, #8
 8005c2a:	4619      	mov	r1, r3
 8005c2c:	6878      	ldr	r0, [r7, #4]
 8005c2e:	f000 fdd5 	bl	80067dc <xQueueGiveFromISR>
 8005c32:	4603      	mov	r3, r0
 8005c34:	2b01      	cmp	r3, #1
 8005c36:	d001      	beq.n	8005c3c <osMutexRelease+0x30>
      return osErrorOS;
 8005c38:	23ff      	movs	r3, #255	@ 0xff
 8005c3a:	e017      	b.n	8005c6c <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005c3c:	68bb      	ldr	r3, [r7, #8]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d013      	beq.n	8005c6a <osMutexRelease+0x5e>
 8005c42:	4b0c      	ldr	r3, [pc, #48]	@ (8005c74 <osMutexRelease+0x68>)
 8005c44:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005c48:	601a      	str	r2, [r3, #0]
 8005c4a:	f3bf 8f4f 	dsb	sy
 8005c4e:	f3bf 8f6f 	isb	sy
 8005c52:	e00a      	b.n	8005c6a <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8005c54:	2300      	movs	r3, #0
 8005c56:	2200      	movs	r2, #0
 8005c58:	2100      	movs	r1, #0
 8005c5a:	6878      	ldr	r0, [r7, #4]
 8005c5c:	f000 fc1e 	bl	800649c <xQueueGenericSend>
 8005c60:	4603      	mov	r3, r0
 8005c62:	2b01      	cmp	r3, #1
 8005c64:	d001      	beq.n	8005c6a <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8005c66:	23ff      	movs	r3, #255	@ 0xff
 8005c68:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
}
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	3710      	adds	r7, #16
 8005c70:	46bd      	mov	sp, r7
 8005c72:	bd80      	pop	{r7, pc}
 8005c74:	e000ed04 	.word	0xe000ed04

08005c78 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b086      	sub	sp, #24
 8005c7c:	af02      	add	r7, sp, #8
 8005c7e:	6078      	str	r0, [r7, #4]
 8005c80:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	685b      	ldr	r3, [r3, #4]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d00f      	beq.n	8005caa <osSemaphoreCreate+0x32>
    if (count == 1) {
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	2b01      	cmp	r3, #1
 8005c8e:	d10a      	bne.n	8005ca6 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	685b      	ldr	r3, [r3, #4]
 8005c94:	2203      	movs	r2, #3
 8005c96:	9200      	str	r2, [sp, #0]
 8005c98:	2200      	movs	r2, #0
 8005c9a:	2100      	movs	r1, #0
 8005c9c:	2001      	movs	r0, #1
 8005c9e:	f000 fad9 	bl	8006254 <xQueueGenericCreateStatic>
 8005ca2:	4603      	mov	r3, r0
 8005ca4:	e016      	b.n	8005cd4 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	e014      	b.n	8005cd4 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	2b01      	cmp	r3, #1
 8005cae:	d110      	bne.n	8005cd2 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8005cb0:	2203      	movs	r2, #3
 8005cb2:	2100      	movs	r1, #0
 8005cb4:	2001      	movs	r0, #1
 8005cb6:	f000 fb4a 	bl	800634e <xQueueGenericCreate>
 8005cba:	60f8      	str	r0, [r7, #12]
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d005      	beq.n	8005cce <osSemaphoreCreate+0x56>
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	2100      	movs	r1, #0
 8005cc8:	68f8      	ldr	r0, [r7, #12]
 8005cca:	f000 fbe7 	bl	800649c <xQueueGenericSend>
      return sema;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	e000      	b.n	8005cd4 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8005cd2:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	3710      	adds	r7, #16
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	bd80      	pop	{r7, pc}

08005cdc <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b084      	sub	sp, #16
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
 8005ce4:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d101      	bne.n	8005cf4 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8005cf0:	2380      	movs	r3, #128	@ 0x80
 8005cf2:	e03a      	b.n	8005d6a <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cfe:	d103      	bne.n	8005d08 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8005d00:	f04f 33ff 	mov.w	r3, #4294967295
 8005d04:	60fb      	str	r3, [r7, #12]
 8005d06:	e009      	b.n	8005d1c <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d006      	beq.n	8005d1c <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d101      	bne.n	8005d1c <osSemaphoreWait+0x40>
      ticks = 1;
 8005d18:	2301      	movs	r3, #1
 8005d1a:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8005d1c:	f7ff fe87 	bl	8005a2e <inHandlerMode>
 8005d20:	4603      	mov	r3, r0
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d017      	beq.n	8005d56 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8005d26:	f107 0308 	add.w	r3, r7, #8
 8005d2a:	461a      	mov	r2, r3
 8005d2c:	2100      	movs	r1, #0
 8005d2e:	6878      	ldr	r0, [r7, #4]
 8005d30:	f000 ffd6 	bl	8006ce0 <xQueueReceiveFromISR>
 8005d34:	4603      	mov	r3, r0
 8005d36:	2b01      	cmp	r3, #1
 8005d38:	d001      	beq.n	8005d3e <osSemaphoreWait+0x62>
      return osErrorOS;
 8005d3a:	23ff      	movs	r3, #255	@ 0xff
 8005d3c:	e015      	b.n	8005d6a <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d011      	beq.n	8005d68 <osSemaphoreWait+0x8c>
 8005d44:	4b0b      	ldr	r3, [pc, #44]	@ (8005d74 <osSemaphoreWait+0x98>)
 8005d46:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005d4a:	601a      	str	r2, [r3, #0]
 8005d4c:	f3bf 8f4f 	dsb	sy
 8005d50:	f3bf 8f6f 	isb	sy
 8005d54:	e008      	b.n	8005d68 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8005d56:	68f9      	ldr	r1, [r7, #12]
 8005d58:	6878      	ldr	r0, [r7, #4]
 8005d5a:	f000 feb1 	bl	8006ac0 <xQueueSemaphoreTake>
 8005d5e:	4603      	mov	r3, r0
 8005d60:	2b01      	cmp	r3, #1
 8005d62:	d001      	beq.n	8005d68 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8005d64:	23ff      	movs	r3, #255	@ 0xff
 8005d66:	e000      	b.n	8005d6a <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8005d68:	2300      	movs	r3, #0
}
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	3710      	adds	r7, #16
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	bd80      	pop	{r7, pc}
 8005d72:	bf00      	nop
 8005d74:	e000ed04 	.word	0xe000ed04

08005d78 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b084      	sub	sp, #16
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8005d80:	2300      	movs	r3, #0
 8005d82:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8005d84:	2300      	movs	r3, #0
 8005d86:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8005d88:	f7ff fe51 	bl	8005a2e <inHandlerMode>
 8005d8c:	4603      	mov	r3, r0
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d016      	beq.n	8005dc0 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8005d92:	f107 0308 	add.w	r3, r7, #8
 8005d96:	4619      	mov	r1, r3
 8005d98:	6878      	ldr	r0, [r7, #4]
 8005d9a:	f000 fd1f 	bl	80067dc <xQueueGiveFromISR>
 8005d9e:	4603      	mov	r3, r0
 8005da0:	2b01      	cmp	r3, #1
 8005da2:	d001      	beq.n	8005da8 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8005da4:	23ff      	movs	r3, #255	@ 0xff
 8005da6:	e017      	b.n	8005dd8 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005da8:	68bb      	ldr	r3, [r7, #8]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d013      	beq.n	8005dd6 <osSemaphoreRelease+0x5e>
 8005dae:	4b0c      	ldr	r3, [pc, #48]	@ (8005de0 <osSemaphoreRelease+0x68>)
 8005db0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005db4:	601a      	str	r2, [r3, #0]
 8005db6:	f3bf 8f4f 	dsb	sy
 8005dba:	f3bf 8f6f 	isb	sy
 8005dbe:	e00a      	b.n	8005dd6 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	2100      	movs	r1, #0
 8005dc6:	6878      	ldr	r0, [r7, #4]
 8005dc8:	f000 fb68 	bl	800649c <xQueueGenericSend>
 8005dcc:	4603      	mov	r3, r0
 8005dce:	2b01      	cmp	r3, #1
 8005dd0:	d001      	beq.n	8005dd6 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8005dd2:	23ff      	movs	r3, #255	@ 0xff
 8005dd4:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
}
 8005dd8:	4618      	mov	r0, r3
 8005dda:	3710      	adds	r7, #16
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	bd80      	pop	{r7, pc}
 8005de0:	e000ed04 	.word	0xe000ed04

08005de4 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b082      	sub	sp, #8
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8005dec:	f7ff fe1f 	bl	8005a2e <inHandlerMode>
 8005df0:	4603      	mov	r3, r0
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d001      	beq.n	8005dfa <osSemaphoreDelete+0x16>
    return osErrorISR;
 8005df6:	2382      	movs	r3, #130	@ 0x82
 8005df8:	e003      	b.n	8005e02 <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 8005dfa:	6878      	ldr	r0, [r7, #4]
 8005dfc:	f001 f830 	bl	8006e60 <vQueueDelete>

  return osOK; 
 8005e00:	2300      	movs	r3, #0
}
 8005e02:	4618      	mov	r0, r3
 8005e04:	3708      	adds	r7, #8
 8005e06:	46bd      	mov	sp, r7
 8005e08:	bd80      	pop	{r7, pc}

08005e0a <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8005e0a:	b590      	push	{r4, r7, lr}
 8005e0c:	b085      	sub	sp, #20
 8005e0e:	af02      	add	r7, sp, #8
 8005e10:	6078      	str	r0, [r7, #4]
 8005e12:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	689b      	ldr	r3, [r3, #8]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d011      	beq.n	8005e40 <osMessageCreate+0x36>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	68db      	ldr	r3, [r3, #12]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d00d      	beq.n	8005e40 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6818      	ldr	r0, [r3, #0]
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6859      	ldr	r1, [r3, #4]
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	689a      	ldr	r2, [r3, #8]
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	68db      	ldr	r3, [r3, #12]
 8005e34:	2400      	movs	r4, #0
 8005e36:	9400      	str	r4, [sp, #0]
 8005e38:	f000 fa0c 	bl	8006254 <xQueueGenericCreateStatic>
 8005e3c:	4603      	mov	r3, r0
 8005e3e:	e008      	b.n	8005e52 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6818      	ldr	r0, [r3, #0]
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	685b      	ldr	r3, [r3, #4]
 8005e48:	2200      	movs	r2, #0
 8005e4a:	4619      	mov	r1, r3
 8005e4c:	f000 fa7f 	bl	800634e <xQueueGenericCreate>
 8005e50:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8005e52:	4618      	mov	r0, r3
 8005e54:	370c      	adds	r7, #12
 8005e56:	46bd      	mov	sp, r7
 8005e58:	bd90      	pop	{r4, r7, pc}
	...

08005e5c <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b086      	sub	sp, #24
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	60f8      	str	r0, [r7, #12]
 8005e64:	60b9      	str	r1, [r7, #8]
 8005e66:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8005e68:	2300      	movs	r3, #0
 8005e6a:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8005e70:	697b      	ldr	r3, [r7, #20]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d101      	bne.n	8005e7a <osMessagePut+0x1e>
    ticks = 1;
 8005e76:	2301      	movs	r3, #1
 8005e78:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8005e7a:	f7ff fdd8 	bl	8005a2e <inHandlerMode>
 8005e7e:	4603      	mov	r3, r0
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d018      	beq.n	8005eb6 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8005e84:	f107 0210 	add.w	r2, r7, #16
 8005e88:	f107 0108 	add.w	r1, r7, #8
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	68f8      	ldr	r0, [r7, #12]
 8005e90:	f000 fc06 	bl	80066a0 <xQueueGenericSendFromISR>
 8005e94:	4603      	mov	r3, r0
 8005e96:	2b01      	cmp	r3, #1
 8005e98:	d001      	beq.n	8005e9e <osMessagePut+0x42>
      return osErrorOS;
 8005e9a:	23ff      	movs	r3, #255	@ 0xff
 8005e9c:	e018      	b.n	8005ed0 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005e9e:	693b      	ldr	r3, [r7, #16]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d014      	beq.n	8005ece <osMessagePut+0x72>
 8005ea4:	4b0c      	ldr	r3, [pc, #48]	@ (8005ed8 <osMessagePut+0x7c>)
 8005ea6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005eaa:	601a      	str	r2, [r3, #0]
 8005eac:	f3bf 8f4f 	dsb	sy
 8005eb0:	f3bf 8f6f 	isb	sy
 8005eb4:	e00b      	b.n	8005ece <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8005eb6:	f107 0108 	add.w	r1, r7, #8
 8005eba:	2300      	movs	r3, #0
 8005ebc:	697a      	ldr	r2, [r7, #20]
 8005ebe:	68f8      	ldr	r0, [r7, #12]
 8005ec0:	f000 faec 	bl	800649c <xQueueGenericSend>
 8005ec4:	4603      	mov	r3, r0
 8005ec6:	2b01      	cmp	r3, #1
 8005ec8:	d001      	beq.n	8005ece <osMessagePut+0x72>
      return osErrorOS;
 8005eca:	23ff      	movs	r3, #255	@ 0xff
 8005ecc:	e000      	b.n	8005ed0 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8005ece:	2300      	movs	r3, #0
}
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	3718      	adds	r7, #24
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	bd80      	pop	{r7, pc}
 8005ed8:	e000ed04 	.word	0xe000ed04

08005edc <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8005edc:	b590      	push	{r4, r7, lr}
 8005ede:	b08b      	sub	sp, #44	@ 0x2c
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	60f8      	str	r0, [r7, #12]
 8005ee4:	60b9      	str	r1, [r7, #8]
 8005ee6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8005ee8:	68bb      	ldr	r3, [r7, #8]
 8005eea:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8005eec:	2300      	movs	r3, #0
 8005eee:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d10a      	bne.n	8005f0c <osMessageGet+0x30>
    event.status = osErrorParameter;
 8005ef6:	2380      	movs	r3, #128	@ 0x80
 8005ef8:	617b      	str	r3, [r7, #20]
    return event;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	461c      	mov	r4, r3
 8005efe:	f107 0314 	add.w	r3, r7, #20
 8005f02:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005f06:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005f0a:	e054      	b.n	8005fb6 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8005f10:	2300      	movs	r3, #0
 8005f12:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f1a:	d103      	bne.n	8005f24 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8005f1c:	f04f 33ff 	mov.w	r3, #4294967295
 8005f20:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f22:	e009      	b.n	8005f38 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d006      	beq.n	8005f38 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 8005f2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d101      	bne.n	8005f38 <osMessageGet+0x5c>
      ticks = 1;
 8005f34:	2301      	movs	r3, #1
 8005f36:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 8005f38:	f7ff fd79 	bl	8005a2e <inHandlerMode>
 8005f3c:	4603      	mov	r3, r0
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d01c      	beq.n	8005f7c <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8005f42:	f107 0220 	add.w	r2, r7, #32
 8005f46:	f107 0314 	add.w	r3, r7, #20
 8005f4a:	3304      	adds	r3, #4
 8005f4c:	4619      	mov	r1, r3
 8005f4e:	68b8      	ldr	r0, [r7, #8]
 8005f50:	f000 fec6 	bl	8006ce0 <xQueueReceiveFromISR>
 8005f54:	4603      	mov	r3, r0
 8005f56:	2b01      	cmp	r3, #1
 8005f58:	d102      	bne.n	8005f60 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8005f5a:	2310      	movs	r3, #16
 8005f5c:	617b      	str	r3, [r7, #20]
 8005f5e:	e001      	b.n	8005f64 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8005f60:	2300      	movs	r3, #0
 8005f62:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005f64:	6a3b      	ldr	r3, [r7, #32]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d01d      	beq.n	8005fa6 <osMessageGet+0xca>
 8005f6a:	4b15      	ldr	r3, [pc, #84]	@ (8005fc0 <osMessageGet+0xe4>)
 8005f6c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005f70:	601a      	str	r2, [r3, #0]
 8005f72:	f3bf 8f4f 	dsb	sy
 8005f76:	f3bf 8f6f 	isb	sy
 8005f7a:	e014      	b.n	8005fa6 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8005f7c:	f107 0314 	add.w	r3, r7, #20
 8005f80:	3304      	adds	r3, #4
 8005f82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f84:	4619      	mov	r1, r3
 8005f86:	68b8      	ldr	r0, [r7, #8]
 8005f88:	f000 fcb8 	bl	80068fc <xQueueReceive>
 8005f8c:	4603      	mov	r3, r0
 8005f8e:	2b01      	cmp	r3, #1
 8005f90:	d102      	bne.n	8005f98 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8005f92:	2310      	movs	r3, #16
 8005f94:	617b      	str	r3, [r7, #20]
 8005f96:	e006      	b.n	8005fa6 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8005f98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d101      	bne.n	8005fa2 <osMessageGet+0xc6>
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	e000      	b.n	8005fa4 <osMessageGet+0xc8>
 8005fa2:	2340      	movs	r3, #64	@ 0x40
 8005fa4:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	461c      	mov	r4, r3
 8005faa:	f107 0314 	add.w	r3, r7, #20
 8005fae:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005fb2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8005fb6:	68f8      	ldr	r0, [r7, #12]
 8005fb8:	372c      	adds	r7, #44	@ 0x2c
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	bd90      	pop	{r4, r7, pc}
 8005fbe:	bf00      	nop
 8005fc0:	e000ed04 	.word	0xe000ed04

08005fc4 <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b082      	sub	sp, #8
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8005fcc:	f7ff fd2f 	bl	8005a2e <inHandlerMode>
 8005fd0:	4603      	mov	r3, r0
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d004      	beq.n	8005fe0 <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 8005fd6:	6878      	ldr	r0, [r7, #4]
 8005fd8:	f000 ff23 	bl	8006e22 <uxQueueMessagesWaitingFromISR>
 8005fdc:	4603      	mov	r3, r0
 8005fde:	e003      	b.n	8005fe8 <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 8005fe0:	6878      	ldr	r0, [r7, #4]
 8005fe2:	f000 feff 	bl	8006de4 <uxQueueMessagesWaiting>
 8005fe6:	4603      	mov	r3, r0
  }
}
 8005fe8:	4618      	mov	r0, r3
 8005fea:	3708      	adds	r7, #8
 8005fec:	46bd      	mov	sp, r7
 8005fee:	bd80      	pop	{r7, pc}

08005ff0 <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b082      	sub	sp, #8
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8005ff8:	f7ff fd19 	bl	8005a2e <inHandlerMode>
 8005ffc:	4603      	mov	r3, r0
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d001      	beq.n	8006006 <osMessageDelete+0x16>
    return osErrorISR;
 8006002:	2382      	movs	r3, #130	@ 0x82
 8006004:	e003      	b.n	800600e <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 8006006:	6878      	ldr	r0, [r7, #4]
 8006008:	f000 ff2a 	bl	8006e60 <vQueueDelete>

  return osOK; 
 800600c:	2300      	movs	r3, #0
}
 800600e:	4618      	mov	r0, r3
 8006010:	3708      	adds	r7, #8
 8006012:	46bd      	mov	sp, r7
 8006014:	bd80      	pop	{r7, pc}

08006016 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006016:	b480      	push	{r7}
 8006018:	b083      	sub	sp, #12
 800601a:	af00      	add	r7, sp, #0
 800601c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	f103 0208 	add.w	r2, r3, #8
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	f04f 32ff 	mov.w	r2, #4294967295
 800602e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	f103 0208 	add.w	r2, r3, #8
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	f103 0208 	add.w	r2, r3, #8
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2200      	movs	r2, #0
 8006048:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800604a:	bf00      	nop
 800604c:	370c      	adds	r7, #12
 800604e:	46bd      	mov	sp, r7
 8006050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006054:	4770      	bx	lr

08006056 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006056:	b480      	push	{r7}
 8006058:	b083      	sub	sp, #12
 800605a:	af00      	add	r7, sp, #0
 800605c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2200      	movs	r2, #0
 8006062:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006064:	bf00      	nop
 8006066:	370c      	adds	r7, #12
 8006068:	46bd      	mov	sp, r7
 800606a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606e:	4770      	bx	lr

08006070 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006070:	b480      	push	{r7}
 8006072:	b085      	sub	sp, #20
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
 8006078:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	685b      	ldr	r3, [r3, #4]
 800607e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	68fa      	ldr	r2, [r7, #12]
 8006084:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	689a      	ldr	r2, [r3, #8]
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	689b      	ldr	r3, [r3, #8]
 8006092:	683a      	ldr	r2, [r7, #0]
 8006094:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	683a      	ldr	r2, [r7, #0]
 800609a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	687a      	ldr	r2, [r7, #4]
 80060a0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	1c5a      	adds	r2, r3, #1
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	601a      	str	r2, [r3, #0]
}
 80060ac:	bf00      	nop
 80060ae:	3714      	adds	r7, #20
 80060b0:	46bd      	mov	sp, r7
 80060b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b6:	4770      	bx	lr

080060b8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80060b8:	b480      	push	{r7}
 80060ba:	b085      	sub	sp, #20
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
 80060c0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060ce:	d103      	bne.n	80060d8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	691b      	ldr	r3, [r3, #16]
 80060d4:	60fb      	str	r3, [r7, #12]
 80060d6:	e00c      	b.n	80060f2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	3308      	adds	r3, #8
 80060dc:	60fb      	str	r3, [r7, #12]
 80060de:	e002      	b.n	80060e6 <vListInsert+0x2e>
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	685b      	ldr	r3, [r3, #4]
 80060e4:	60fb      	str	r3, [r7, #12]
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	685b      	ldr	r3, [r3, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	68ba      	ldr	r2, [r7, #8]
 80060ee:	429a      	cmp	r2, r3
 80060f0:	d2f6      	bcs.n	80060e0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	685a      	ldr	r2, [r3, #4]
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	685b      	ldr	r3, [r3, #4]
 80060fe:	683a      	ldr	r2, [r7, #0]
 8006100:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	68fa      	ldr	r2, [r7, #12]
 8006106:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	683a      	ldr	r2, [r7, #0]
 800610c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	687a      	ldr	r2, [r7, #4]
 8006112:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	1c5a      	adds	r2, r3, #1
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	601a      	str	r2, [r3, #0]
}
 800611e:	bf00      	nop
 8006120:	3714      	adds	r7, #20
 8006122:	46bd      	mov	sp, r7
 8006124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006128:	4770      	bx	lr

0800612a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800612a:	b480      	push	{r7}
 800612c:	b085      	sub	sp, #20
 800612e:	af00      	add	r7, sp, #0
 8006130:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	691b      	ldr	r3, [r3, #16]
 8006136:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	685b      	ldr	r3, [r3, #4]
 800613c:	687a      	ldr	r2, [r7, #4]
 800613e:	6892      	ldr	r2, [r2, #8]
 8006140:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	689b      	ldr	r3, [r3, #8]
 8006146:	687a      	ldr	r2, [r7, #4]
 8006148:	6852      	ldr	r2, [r2, #4]
 800614a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	685b      	ldr	r3, [r3, #4]
 8006150:	687a      	ldr	r2, [r7, #4]
 8006152:	429a      	cmp	r2, r3
 8006154:	d103      	bne.n	800615e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	689a      	ldr	r2, [r3, #8]
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2200      	movs	r2, #0
 8006162:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	1e5a      	subs	r2, r3, #1
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
}
 8006172:	4618      	mov	r0, r3
 8006174:	3714      	adds	r7, #20
 8006176:	46bd      	mov	sp, r7
 8006178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617c:	4770      	bx	lr
	...

08006180 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b084      	sub	sp, #16
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
 8006188:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d10b      	bne.n	80061ac <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006194:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006198:	f383 8811 	msr	BASEPRI, r3
 800619c:	f3bf 8f6f 	isb	sy
 80061a0:	f3bf 8f4f 	dsb	sy
 80061a4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80061a6:	bf00      	nop
 80061a8:	bf00      	nop
 80061aa:	e7fd      	b.n	80061a8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80061ac:	f002 f94c 	bl	8008448 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681a      	ldr	r2, [r3, #0]
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061b8:	68f9      	ldr	r1, [r7, #12]
 80061ba:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80061bc:	fb01 f303 	mul.w	r3, r1, r3
 80061c0:	441a      	add	r2, r3
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	2200      	movs	r2, #0
 80061ca:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681a      	ldr	r2, [r3, #0]
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	681a      	ldr	r2, [r3, #0]
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061dc:	3b01      	subs	r3, #1
 80061de:	68f9      	ldr	r1, [r7, #12]
 80061e0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80061e2:	fb01 f303 	mul.w	r3, r1, r3
 80061e6:	441a      	add	r2, r3
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	22ff      	movs	r2, #255	@ 0xff
 80061f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	22ff      	movs	r2, #255	@ 0xff
 80061f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d114      	bne.n	800622c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	691b      	ldr	r3, [r3, #16]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d01a      	beq.n	8006240 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	3310      	adds	r3, #16
 800620e:	4618      	mov	r0, r3
 8006210:	f001 fbfe 	bl	8007a10 <xTaskRemoveFromEventList>
 8006214:	4603      	mov	r3, r0
 8006216:	2b00      	cmp	r3, #0
 8006218:	d012      	beq.n	8006240 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800621a:	4b0d      	ldr	r3, [pc, #52]	@ (8006250 <xQueueGenericReset+0xd0>)
 800621c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006220:	601a      	str	r2, [r3, #0]
 8006222:	f3bf 8f4f 	dsb	sy
 8006226:	f3bf 8f6f 	isb	sy
 800622a:	e009      	b.n	8006240 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	3310      	adds	r3, #16
 8006230:	4618      	mov	r0, r3
 8006232:	f7ff fef0 	bl	8006016 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	3324      	adds	r3, #36	@ 0x24
 800623a:	4618      	mov	r0, r3
 800623c:	f7ff feeb 	bl	8006016 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006240:	f002 f934 	bl	80084ac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006244:	2301      	movs	r3, #1
}
 8006246:	4618      	mov	r0, r3
 8006248:	3710      	adds	r7, #16
 800624a:	46bd      	mov	sp, r7
 800624c:	bd80      	pop	{r7, pc}
 800624e:	bf00      	nop
 8006250:	e000ed04 	.word	0xe000ed04

08006254 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006254:	b580      	push	{r7, lr}
 8006256:	b08e      	sub	sp, #56	@ 0x38
 8006258:	af02      	add	r7, sp, #8
 800625a:	60f8      	str	r0, [r7, #12]
 800625c:	60b9      	str	r1, [r7, #8]
 800625e:	607a      	str	r2, [r7, #4]
 8006260:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d10b      	bne.n	8006280 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8006268:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800626c:	f383 8811 	msr	BASEPRI, r3
 8006270:	f3bf 8f6f 	isb	sy
 8006274:	f3bf 8f4f 	dsb	sy
 8006278:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800627a:	bf00      	nop
 800627c:	bf00      	nop
 800627e:	e7fd      	b.n	800627c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d10b      	bne.n	800629e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8006286:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800628a:	f383 8811 	msr	BASEPRI, r3
 800628e:	f3bf 8f6f 	isb	sy
 8006292:	f3bf 8f4f 	dsb	sy
 8006296:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006298:	bf00      	nop
 800629a:	bf00      	nop
 800629c:	e7fd      	b.n	800629a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d002      	beq.n	80062aa <xQueueGenericCreateStatic+0x56>
 80062a4:	68bb      	ldr	r3, [r7, #8]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d001      	beq.n	80062ae <xQueueGenericCreateStatic+0x5a>
 80062aa:	2301      	movs	r3, #1
 80062ac:	e000      	b.n	80062b0 <xQueueGenericCreateStatic+0x5c>
 80062ae:	2300      	movs	r3, #0
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d10b      	bne.n	80062cc <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80062b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062b8:	f383 8811 	msr	BASEPRI, r3
 80062bc:	f3bf 8f6f 	isb	sy
 80062c0:	f3bf 8f4f 	dsb	sy
 80062c4:	623b      	str	r3, [r7, #32]
}
 80062c6:	bf00      	nop
 80062c8:	bf00      	nop
 80062ca:	e7fd      	b.n	80062c8 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d102      	bne.n	80062d8 <xQueueGenericCreateStatic+0x84>
 80062d2:	68bb      	ldr	r3, [r7, #8]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d101      	bne.n	80062dc <xQueueGenericCreateStatic+0x88>
 80062d8:	2301      	movs	r3, #1
 80062da:	e000      	b.n	80062de <xQueueGenericCreateStatic+0x8a>
 80062dc:	2300      	movs	r3, #0
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d10b      	bne.n	80062fa <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80062e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062e6:	f383 8811 	msr	BASEPRI, r3
 80062ea:	f3bf 8f6f 	isb	sy
 80062ee:	f3bf 8f4f 	dsb	sy
 80062f2:	61fb      	str	r3, [r7, #28]
}
 80062f4:	bf00      	nop
 80062f6:	bf00      	nop
 80062f8:	e7fd      	b.n	80062f6 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80062fa:	2348      	movs	r3, #72	@ 0x48
 80062fc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80062fe:	697b      	ldr	r3, [r7, #20]
 8006300:	2b48      	cmp	r3, #72	@ 0x48
 8006302:	d00b      	beq.n	800631c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8006304:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006308:	f383 8811 	msr	BASEPRI, r3
 800630c:	f3bf 8f6f 	isb	sy
 8006310:	f3bf 8f4f 	dsb	sy
 8006314:	61bb      	str	r3, [r7, #24]
}
 8006316:	bf00      	nop
 8006318:	bf00      	nop
 800631a:	e7fd      	b.n	8006318 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800631c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8006322:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006324:	2b00      	cmp	r3, #0
 8006326:	d00d      	beq.n	8006344 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006328:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800632a:	2201      	movs	r2, #1
 800632c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006330:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8006334:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006336:	9300      	str	r3, [sp, #0]
 8006338:	4613      	mov	r3, r2
 800633a:	687a      	ldr	r2, [r7, #4]
 800633c:	68b9      	ldr	r1, [r7, #8]
 800633e:	68f8      	ldr	r0, [r7, #12]
 8006340:	f000 f840 	bl	80063c4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006344:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8006346:	4618      	mov	r0, r3
 8006348:	3730      	adds	r7, #48	@ 0x30
 800634a:	46bd      	mov	sp, r7
 800634c:	bd80      	pop	{r7, pc}

0800634e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800634e:	b580      	push	{r7, lr}
 8006350:	b08a      	sub	sp, #40	@ 0x28
 8006352:	af02      	add	r7, sp, #8
 8006354:	60f8      	str	r0, [r7, #12]
 8006356:	60b9      	str	r1, [r7, #8]
 8006358:	4613      	mov	r3, r2
 800635a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d10b      	bne.n	800637a <xQueueGenericCreate+0x2c>
	__asm volatile
 8006362:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006366:	f383 8811 	msr	BASEPRI, r3
 800636a:	f3bf 8f6f 	isb	sy
 800636e:	f3bf 8f4f 	dsb	sy
 8006372:	613b      	str	r3, [r7, #16]
}
 8006374:	bf00      	nop
 8006376:	bf00      	nop
 8006378:	e7fd      	b.n	8006376 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	68ba      	ldr	r2, [r7, #8]
 800637e:	fb02 f303 	mul.w	r3, r2, r3
 8006382:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006384:	69fb      	ldr	r3, [r7, #28]
 8006386:	3348      	adds	r3, #72	@ 0x48
 8006388:	4618      	mov	r0, r3
 800638a:	f002 f97f 	bl	800868c <pvPortMalloc>
 800638e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006390:	69bb      	ldr	r3, [r7, #24]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d011      	beq.n	80063ba <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006396:	69bb      	ldr	r3, [r7, #24]
 8006398:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800639a:	697b      	ldr	r3, [r7, #20]
 800639c:	3348      	adds	r3, #72	@ 0x48
 800639e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80063a0:	69bb      	ldr	r3, [r7, #24]
 80063a2:	2200      	movs	r2, #0
 80063a4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80063a8:	79fa      	ldrb	r2, [r7, #7]
 80063aa:	69bb      	ldr	r3, [r7, #24]
 80063ac:	9300      	str	r3, [sp, #0]
 80063ae:	4613      	mov	r3, r2
 80063b0:	697a      	ldr	r2, [r7, #20]
 80063b2:	68b9      	ldr	r1, [r7, #8]
 80063b4:	68f8      	ldr	r0, [r7, #12]
 80063b6:	f000 f805 	bl	80063c4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80063ba:	69bb      	ldr	r3, [r7, #24]
	}
 80063bc:	4618      	mov	r0, r3
 80063be:	3720      	adds	r7, #32
 80063c0:	46bd      	mov	sp, r7
 80063c2:	bd80      	pop	{r7, pc}

080063c4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b084      	sub	sp, #16
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	60f8      	str	r0, [r7, #12]
 80063cc:	60b9      	str	r1, [r7, #8]
 80063ce:	607a      	str	r2, [r7, #4]
 80063d0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80063d2:	68bb      	ldr	r3, [r7, #8]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d103      	bne.n	80063e0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80063d8:	69bb      	ldr	r3, [r7, #24]
 80063da:	69ba      	ldr	r2, [r7, #24]
 80063dc:	601a      	str	r2, [r3, #0]
 80063de:	e002      	b.n	80063e6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80063e0:	69bb      	ldr	r3, [r7, #24]
 80063e2:	687a      	ldr	r2, [r7, #4]
 80063e4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80063e6:	69bb      	ldr	r3, [r7, #24]
 80063e8:	68fa      	ldr	r2, [r7, #12]
 80063ea:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80063ec:	69bb      	ldr	r3, [r7, #24]
 80063ee:	68ba      	ldr	r2, [r7, #8]
 80063f0:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80063f2:	2101      	movs	r1, #1
 80063f4:	69b8      	ldr	r0, [r7, #24]
 80063f6:	f7ff fec3 	bl	8006180 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80063fa:	bf00      	nop
 80063fc:	3710      	adds	r7, #16
 80063fe:	46bd      	mov	sp, r7
 8006400:	bd80      	pop	{r7, pc}

08006402 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8006402:	b580      	push	{r7, lr}
 8006404:	b082      	sub	sp, #8
 8006406:	af00      	add	r7, sp, #0
 8006408:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d00e      	beq.n	800642e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2200      	movs	r2, #0
 8006414:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2200      	movs	r2, #0
 800641a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2200      	movs	r2, #0
 8006420:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8006422:	2300      	movs	r3, #0
 8006424:	2200      	movs	r2, #0
 8006426:	2100      	movs	r1, #0
 8006428:	6878      	ldr	r0, [r7, #4]
 800642a:	f000 f837 	bl	800649c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800642e:	bf00      	nop
 8006430:	3708      	adds	r7, #8
 8006432:	46bd      	mov	sp, r7
 8006434:	bd80      	pop	{r7, pc}

08006436 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8006436:	b580      	push	{r7, lr}
 8006438:	b086      	sub	sp, #24
 800643a:	af00      	add	r7, sp, #0
 800643c:	4603      	mov	r3, r0
 800643e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006440:	2301      	movs	r3, #1
 8006442:	617b      	str	r3, [r7, #20]
 8006444:	2300      	movs	r3, #0
 8006446:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8006448:	79fb      	ldrb	r3, [r7, #7]
 800644a:	461a      	mov	r2, r3
 800644c:	6939      	ldr	r1, [r7, #16]
 800644e:	6978      	ldr	r0, [r7, #20]
 8006450:	f7ff ff7d 	bl	800634e <xQueueGenericCreate>
 8006454:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006456:	68f8      	ldr	r0, [r7, #12]
 8006458:	f7ff ffd3 	bl	8006402 <prvInitialiseMutex>

		return xNewQueue;
 800645c:	68fb      	ldr	r3, [r7, #12]
	}
 800645e:	4618      	mov	r0, r3
 8006460:	3718      	adds	r7, #24
 8006462:	46bd      	mov	sp, r7
 8006464:	bd80      	pop	{r7, pc}

08006466 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8006466:	b580      	push	{r7, lr}
 8006468:	b088      	sub	sp, #32
 800646a:	af02      	add	r7, sp, #8
 800646c:	4603      	mov	r3, r0
 800646e:	6039      	str	r1, [r7, #0]
 8006470:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006472:	2301      	movs	r3, #1
 8006474:	617b      	str	r3, [r7, #20]
 8006476:	2300      	movs	r3, #0
 8006478:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800647a:	79fb      	ldrb	r3, [r7, #7]
 800647c:	9300      	str	r3, [sp, #0]
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	2200      	movs	r2, #0
 8006482:	6939      	ldr	r1, [r7, #16]
 8006484:	6978      	ldr	r0, [r7, #20]
 8006486:	f7ff fee5 	bl	8006254 <xQueueGenericCreateStatic>
 800648a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800648c:	68f8      	ldr	r0, [r7, #12]
 800648e:	f7ff ffb8 	bl	8006402 <prvInitialiseMutex>

		return xNewQueue;
 8006492:	68fb      	ldr	r3, [r7, #12]
	}
 8006494:	4618      	mov	r0, r3
 8006496:	3718      	adds	r7, #24
 8006498:	46bd      	mov	sp, r7
 800649a:	bd80      	pop	{r7, pc}

0800649c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b08e      	sub	sp, #56	@ 0x38
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	60f8      	str	r0, [r7, #12]
 80064a4:	60b9      	str	r1, [r7, #8]
 80064a6:	607a      	str	r2, [r7, #4]
 80064a8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80064aa:	2300      	movs	r3, #0
 80064ac:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80064b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d10b      	bne.n	80064d0 <xQueueGenericSend+0x34>
	__asm volatile
 80064b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064bc:	f383 8811 	msr	BASEPRI, r3
 80064c0:	f3bf 8f6f 	isb	sy
 80064c4:	f3bf 8f4f 	dsb	sy
 80064c8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80064ca:	bf00      	nop
 80064cc:	bf00      	nop
 80064ce:	e7fd      	b.n	80064cc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80064d0:	68bb      	ldr	r3, [r7, #8]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d103      	bne.n	80064de <xQueueGenericSend+0x42>
 80064d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d101      	bne.n	80064e2 <xQueueGenericSend+0x46>
 80064de:	2301      	movs	r3, #1
 80064e0:	e000      	b.n	80064e4 <xQueueGenericSend+0x48>
 80064e2:	2300      	movs	r3, #0
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d10b      	bne.n	8006500 <xQueueGenericSend+0x64>
	__asm volatile
 80064e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064ec:	f383 8811 	msr	BASEPRI, r3
 80064f0:	f3bf 8f6f 	isb	sy
 80064f4:	f3bf 8f4f 	dsb	sy
 80064f8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80064fa:	bf00      	nop
 80064fc:	bf00      	nop
 80064fe:	e7fd      	b.n	80064fc <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	2b02      	cmp	r3, #2
 8006504:	d103      	bne.n	800650e <xQueueGenericSend+0x72>
 8006506:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006508:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800650a:	2b01      	cmp	r3, #1
 800650c:	d101      	bne.n	8006512 <xQueueGenericSend+0x76>
 800650e:	2301      	movs	r3, #1
 8006510:	e000      	b.n	8006514 <xQueueGenericSend+0x78>
 8006512:	2300      	movs	r3, #0
 8006514:	2b00      	cmp	r3, #0
 8006516:	d10b      	bne.n	8006530 <xQueueGenericSend+0x94>
	__asm volatile
 8006518:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800651c:	f383 8811 	msr	BASEPRI, r3
 8006520:	f3bf 8f6f 	isb	sy
 8006524:	f3bf 8f4f 	dsb	sy
 8006528:	623b      	str	r3, [r7, #32]
}
 800652a:	bf00      	nop
 800652c:	bf00      	nop
 800652e:	e7fd      	b.n	800652c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006530:	f001 fc34 	bl	8007d9c <xTaskGetSchedulerState>
 8006534:	4603      	mov	r3, r0
 8006536:	2b00      	cmp	r3, #0
 8006538:	d102      	bne.n	8006540 <xQueueGenericSend+0xa4>
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d101      	bne.n	8006544 <xQueueGenericSend+0xa8>
 8006540:	2301      	movs	r3, #1
 8006542:	e000      	b.n	8006546 <xQueueGenericSend+0xaa>
 8006544:	2300      	movs	r3, #0
 8006546:	2b00      	cmp	r3, #0
 8006548:	d10b      	bne.n	8006562 <xQueueGenericSend+0xc6>
	__asm volatile
 800654a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800654e:	f383 8811 	msr	BASEPRI, r3
 8006552:	f3bf 8f6f 	isb	sy
 8006556:	f3bf 8f4f 	dsb	sy
 800655a:	61fb      	str	r3, [r7, #28]
}
 800655c:	bf00      	nop
 800655e:	bf00      	nop
 8006560:	e7fd      	b.n	800655e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006562:	f001 ff71 	bl	8008448 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006566:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006568:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800656a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800656c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800656e:	429a      	cmp	r2, r3
 8006570:	d302      	bcc.n	8006578 <xQueueGenericSend+0xdc>
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	2b02      	cmp	r3, #2
 8006576:	d129      	bne.n	80065cc <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006578:	683a      	ldr	r2, [r7, #0]
 800657a:	68b9      	ldr	r1, [r7, #8]
 800657c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800657e:	f000 fcab 	bl	8006ed8 <prvCopyDataToQueue>
 8006582:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006584:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006586:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006588:	2b00      	cmp	r3, #0
 800658a:	d010      	beq.n	80065ae <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800658c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800658e:	3324      	adds	r3, #36	@ 0x24
 8006590:	4618      	mov	r0, r3
 8006592:	f001 fa3d 	bl	8007a10 <xTaskRemoveFromEventList>
 8006596:	4603      	mov	r3, r0
 8006598:	2b00      	cmp	r3, #0
 800659a:	d013      	beq.n	80065c4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800659c:	4b3f      	ldr	r3, [pc, #252]	@ (800669c <xQueueGenericSend+0x200>)
 800659e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80065a2:	601a      	str	r2, [r3, #0]
 80065a4:	f3bf 8f4f 	dsb	sy
 80065a8:	f3bf 8f6f 	isb	sy
 80065ac:	e00a      	b.n	80065c4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80065ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d007      	beq.n	80065c4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80065b4:	4b39      	ldr	r3, [pc, #228]	@ (800669c <xQueueGenericSend+0x200>)
 80065b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80065ba:	601a      	str	r2, [r3, #0]
 80065bc:	f3bf 8f4f 	dsb	sy
 80065c0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80065c4:	f001 ff72 	bl	80084ac <vPortExitCritical>
				return pdPASS;
 80065c8:	2301      	movs	r3, #1
 80065ca:	e063      	b.n	8006694 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d103      	bne.n	80065da <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80065d2:	f001 ff6b 	bl	80084ac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80065d6:	2300      	movs	r3, #0
 80065d8:	e05c      	b.n	8006694 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80065da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d106      	bne.n	80065ee <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80065e0:	f107 0314 	add.w	r3, r7, #20
 80065e4:	4618      	mov	r0, r3
 80065e6:	f001 fa77 	bl	8007ad8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80065ea:	2301      	movs	r3, #1
 80065ec:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80065ee:	f001 ff5d 	bl	80084ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80065f2:	f000 fffb 	bl	80075ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80065f6:	f001 ff27 	bl	8008448 <vPortEnterCritical>
 80065fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065fc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006600:	b25b      	sxtb	r3, r3
 8006602:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006606:	d103      	bne.n	8006610 <xQueueGenericSend+0x174>
 8006608:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800660a:	2200      	movs	r2, #0
 800660c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006610:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006612:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006616:	b25b      	sxtb	r3, r3
 8006618:	f1b3 3fff 	cmp.w	r3, #4294967295
 800661c:	d103      	bne.n	8006626 <xQueueGenericSend+0x18a>
 800661e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006620:	2200      	movs	r2, #0
 8006622:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006626:	f001 ff41 	bl	80084ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800662a:	1d3a      	adds	r2, r7, #4
 800662c:	f107 0314 	add.w	r3, r7, #20
 8006630:	4611      	mov	r1, r2
 8006632:	4618      	mov	r0, r3
 8006634:	f001 fa66 	bl	8007b04 <xTaskCheckForTimeOut>
 8006638:	4603      	mov	r3, r0
 800663a:	2b00      	cmp	r3, #0
 800663c:	d124      	bne.n	8006688 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800663e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006640:	f000 fd42 	bl	80070c8 <prvIsQueueFull>
 8006644:	4603      	mov	r3, r0
 8006646:	2b00      	cmp	r3, #0
 8006648:	d018      	beq.n	800667c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800664a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800664c:	3310      	adds	r3, #16
 800664e:	687a      	ldr	r2, [r7, #4]
 8006650:	4611      	mov	r1, r2
 8006652:	4618      	mov	r0, r3
 8006654:	f001 f9b6 	bl	80079c4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006658:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800665a:	f000 fccd 	bl	8006ff8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800665e:	f000 ffd3 	bl	8007608 <xTaskResumeAll>
 8006662:	4603      	mov	r3, r0
 8006664:	2b00      	cmp	r3, #0
 8006666:	f47f af7c 	bne.w	8006562 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800666a:	4b0c      	ldr	r3, [pc, #48]	@ (800669c <xQueueGenericSend+0x200>)
 800666c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006670:	601a      	str	r2, [r3, #0]
 8006672:	f3bf 8f4f 	dsb	sy
 8006676:	f3bf 8f6f 	isb	sy
 800667a:	e772      	b.n	8006562 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800667c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800667e:	f000 fcbb 	bl	8006ff8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006682:	f000 ffc1 	bl	8007608 <xTaskResumeAll>
 8006686:	e76c      	b.n	8006562 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006688:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800668a:	f000 fcb5 	bl	8006ff8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800668e:	f000 ffbb 	bl	8007608 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006692:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006694:	4618      	mov	r0, r3
 8006696:	3738      	adds	r7, #56	@ 0x38
 8006698:	46bd      	mov	sp, r7
 800669a:	bd80      	pop	{r7, pc}
 800669c:	e000ed04 	.word	0xe000ed04

080066a0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b090      	sub	sp, #64	@ 0x40
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	60f8      	str	r0, [r7, #12]
 80066a8:	60b9      	str	r1, [r7, #8]
 80066aa:	607a      	str	r2, [r7, #4]
 80066ac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80066b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d10b      	bne.n	80066d0 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80066b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066bc:	f383 8811 	msr	BASEPRI, r3
 80066c0:	f3bf 8f6f 	isb	sy
 80066c4:	f3bf 8f4f 	dsb	sy
 80066c8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80066ca:	bf00      	nop
 80066cc:	bf00      	nop
 80066ce:	e7fd      	b.n	80066cc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80066d0:	68bb      	ldr	r3, [r7, #8]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d103      	bne.n	80066de <xQueueGenericSendFromISR+0x3e>
 80066d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d101      	bne.n	80066e2 <xQueueGenericSendFromISR+0x42>
 80066de:	2301      	movs	r3, #1
 80066e0:	e000      	b.n	80066e4 <xQueueGenericSendFromISR+0x44>
 80066e2:	2300      	movs	r3, #0
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d10b      	bne.n	8006700 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80066e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066ec:	f383 8811 	msr	BASEPRI, r3
 80066f0:	f3bf 8f6f 	isb	sy
 80066f4:	f3bf 8f4f 	dsb	sy
 80066f8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80066fa:	bf00      	nop
 80066fc:	bf00      	nop
 80066fe:	e7fd      	b.n	80066fc <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	2b02      	cmp	r3, #2
 8006704:	d103      	bne.n	800670e <xQueueGenericSendFromISR+0x6e>
 8006706:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006708:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800670a:	2b01      	cmp	r3, #1
 800670c:	d101      	bne.n	8006712 <xQueueGenericSendFromISR+0x72>
 800670e:	2301      	movs	r3, #1
 8006710:	e000      	b.n	8006714 <xQueueGenericSendFromISR+0x74>
 8006712:	2300      	movs	r3, #0
 8006714:	2b00      	cmp	r3, #0
 8006716:	d10b      	bne.n	8006730 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8006718:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800671c:	f383 8811 	msr	BASEPRI, r3
 8006720:	f3bf 8f6f 	isb	sy
 8006724:	f3bf 8f4f 	dsb	sy
 8006728:	623b      	str	r3, [r7, #32]
}
 800672a:	bf00      	nop
 800672c:	bf00      	nop
 800672e:	e7fd      	b.n	800672c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006730:	f001 ff6a 	bl	8008608 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006734:	f3ef 8211 	mrs	r2, BASEPRI
 8006738:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800673c:	f383 8811 	msr	BASEPRI, r3
 8006740:	f3bf 8f6f 	isb	sy
 8006744:	f3bf 8f4f 	dsb	sy
 8006748:	61fa      	str	r2, [r7, #28]
 800674a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800674c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800674e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006750:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006752:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006754:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006756:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006758:	429a      	cmp	r2, r3
 800675a:	d302      	bcc.n	8006762 <xQueueGenericSendFromISR+0xc2>
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	2b02      	cmp	r3, #2
 8006760:	d12f      	bne.n	80067c2 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006762:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006764:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006768:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800676c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800676e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006770:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006772:	683a      	ldr	r2, [r7, #0]
 8006774:	68b9      	ldr	r1, [r7, #8]
 8006776:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006778:	f000 fbae 	bl	8006ed8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800677c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8006780:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006784:	d112      	bne.n	80067ac <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006786:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006788:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800678a:	2b00      	cmp	r3, #0
 800678c:	d016      	beq.n	80067bc <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800678e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006790:	3324      	adds	r3, #36	@ 0x24
 8006792:	4618      	mov	r0, r3
 8006794:	f001 f93c 	bl	8007a10 <xTaskRemoveFromEventList>
 8006798:	4603      	mov	r3, r0
 800679a:	2b00      	cmp	r3, #0
 800679c:	d00e      	beq.n	80067bc <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d00b      	beq.n	80067bc <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2201      	movs	r2, #1
 80067a8:	601a      	str	r2, [r3, #0]
 80067aa:	e007      	b.n	80067bc <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80067ac:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80067b0:	3301      	adds	r3, #1
 80067b2:	b2db      	uxtb	r3, r3
 80067b4:	b25a      	sxtb	r2, r3
 80067b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80067bc:	2301      	movs	r3, #1
 80067be:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80067c0:	e001      	b.n	80067c6 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80067c2:	2300      	movs	r3, #0
 80067c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80067c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067c8:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80067ca:	697b      	ldr	r3, [r7, #20]
 80067cc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80067d0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80067d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80067d4:	4618      	mov	r0, r3
 80067d6:	3740      	adds	r7, #64	@ 0x40
 80067d8:	46bd      	mov	sp, r7
 80067da:	bd80      	pop	{r7, pc}

080067dc <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b08e      	sub	sp, #56	@ 0x38
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
 80067e4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80067ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d10b      	bne.n	8006808 <xQueueGiveFromISR+0x2c>
	__asm volatile
 80067f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067f4:	f383 8811 	msr	BASEPRI, r3
 80067f8:	f3bf 8f6f 	isb	sy
 80067fc:	f3bf 8f4f 	dsb	sy
 8006800:	623b      	str	r3, [r7, #32]
}
 8006802:	bf00      	nop
 8006804:	bf00      	nop
 8006806:	e7fd      	b.n	8006804 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006808:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800680a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800680c:	2b00      	cmp	r3, #0
 800680e:	d00b      	beq.n	8006828 <xQueueGiveFromISR+0x4c>
	__asm volatile
 8006810:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006814:	f383 8811 	msr	BASEPRI, r3
 8006818:	f3bf 8f6f 	isb	sy
 800681c:	f3bf 8f4f 	dsb	sy
 8006820:	61fb      	str	r3, [r7, #28]
}
 8006822:	bf00      	nop
 8006824:	bf00      	nop
 8006826:	e7fd      	b.n	8006824 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8006828:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d103      	bne.n	8006838 <xQueueGiveFromISR+0x5c>
 8006830:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006832:	689b      	ldr	r3, [r3, #8]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d101      	bne.n	800683c <xQueueGiveFromISR+0x60>
 8006838:	2301      	movs	r3, #1
 800683a:	e000      	b.n	800683e <xQueueGiveFromISR+0x62>
 800683c:	2300      	movs	r3, #0
 800683e:	2b00      	cmp	r3, #0
 8006840:	d10b      	bne.n	800685a <xQueueGiveFromISR+0x7e>
	__asm volatile
 8006842:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006846:	f383 8811 	msr	BASEPRI, r3
 800684a:	f3bf 8f6f 	isb	sy
 800684e:	f3bf 8f4f 	dsb	sy
 8006852:	61bb      	str	r3, [r7, #24]
}
 8006854:	bf00      	nop
 8006856:	bf00      	nop
 8006858:	e7fd      	b.n	8006856 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800685a:	f001 fed5 	bl	8008608 <vPortValidateInterruptPriority>
	__asm volatile
 800685e:	f3ef 8211 	mrs	r2, BASEPRI
 8006862:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006866:	f383 8811 	msr	BASEPRI, r3
 800686a:	f3bf 8f6f 	isb	sy
 800686e:	f3bf 8f4f 	dsb	sy
 8006872:	617a      	str	r2, [r7, #20]
 8006874:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8006876:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006878:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800687a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800687c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800687e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8006880:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006882:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006884:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006886:	429a      	cmp	r2, r3
 8006888:	d22b      	bcs.n	80068e2 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800688a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800688c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006890:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006894:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006896:	1c5a      	adds	r2, r3, #1
 8006898:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800689a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800689c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80068a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068a4:	d112      	bne.n	80068cc <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80068a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d016      	beq.n	80068dc <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80068ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068b0:	3324      	adds	r3, #36	@ 0x24
 80068b2:	4618      	mov	r0, r3
 80068b4:	f001 f8ac 	bl	8007a10 <xTaskRemoveFromEventList>
 80068b8:	4603      	mov	r3, r0
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d00e      	beq.n	80068dc <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d00b      	beq.n	80068dc <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	2201      	movs	r2, #1
 80068c8:	601a      	str	r2, [r3, #0]
 80068ca:	e007      	b.n	80068dc <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80068cc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80068d0:	3301      	adds	r3, #1
 80068d2:	b2db      	uxtb	r3, r3
 80068d4:	b25a      	sxtb	r2, r3
 80068d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80068dc:	2301      	movs	r3, #1
 80068de:	637b      	str	r3, [r7, #52]	@ 0x34
 80068e0:	e001      	b.n	80068e6 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80068e2:	2300      	movs	r3, #0
 80068e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80068e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068e8:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	f383 8811 	msr	BASEPRI, r3
}
 80068f0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80068f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80068f4:	4618      	mov	r0, r3
 80068f6:	3738      	adds	r7, #56	@ 0x38
 80068f8:	46bd      	mov	sp, r7
 80068fa:	bd80      	pop	{r7, pc}

080068fc <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b08c      	sub	sp, #48	@ 0x30
 8006900:	af00      	add	r7, sp, #0
 8006902:	60f8      	str	r0, [r7, #12]
 8006904:	60b9      	str	r1, [r7, #8]
 8006906:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006908:	2300      	movs	r3, #0
 800690a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006910:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006912:	2b00      	cmp	r3, #0
 8006914:	d10b      	bne.n	800692e <xQueueReceive+0x32>
	__asm volatile
 8006916:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800691a:	f383 8811 	msr	BASEPRI, r3
 800691e:	f3bf 8f6f 	isb	sy
 8006922:	f3bf 8f4f 	dsb	sy
 8006926:	623b      	str	r3, [r7, #32]
}
 8006928:	bf00      	nop
 800692a:	bf00      	nop
 800692c:	e7fd      	b.n	800692a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800692e:	68bb      	ldr	r3, [r7, #8]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d103      	bne.n	800693c <xQueueReceive+0x40>
 8006934:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006936:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006938:	2b00      	cmp	r3, #0
 800693a:	d101      	bne.n	8006940 <xQueueReceive+0x44>
 800693c:	2301      	movs	r3, #1
 800693e:	e000      	b.n	8006942 <xQueueReceive+0x46>
 8006940:	2300      	movs	r3, #0
 8006942:	2b00      	cmp	r3, #0
 8006944:	d10b      	bne.n	800695e <xQueueReceive+0x62>
	__asm volatile
 8006946:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800694a:	f383 8811 	msr	BASEPRI, r3
 800694e:	f3bf 8f6f 	isb	sy
 8006952:	f3bf 8f4f 	dsb	sy
 8006956:	61fb      	str	r3, [r7, #28]
}
 8006958:	bf00      	nop
 800695a:	bf00      	nop
 800695c:	e7fd      	b.n	800695a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800695e:	f001 fa1d 	bl	8007d9c <xTaskGetSchedulerState>
 8006962:	4603      	mov	r3, r0
 8006964:	2b00      	cmp	r3, #0
 8006966:	d102      	bne.n	800696e <xQueueReceive+0x72>
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d101      	bne.n	8006972 <xQueueReceive+0x76>
 800696e:	2301      	movs	r3, #1
 8006970:	e000      	b.n	8006974 <xQueueReceive+0x78>
 8006972:	2300      	movs	r3, #0
 8006974:	2b00      	cmp	r3, #0
 8006976:	d10b      	bne.n	8006990 <xQueueReceive+0x94>
	__asm volatile
 8006978:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800697c:	f383 8811 	msr	BASEPRI, r3
 8006980:	f3bf 8f6f 	isb	sy
 8006984:	f3bf 8f4f 	dsb	sy
 8006988:	61bb      	str	r3, [r7, #24]
}
 800698a:	bf00      	nop
 800698c:	bf00      	nop
 800698e:	e7fd      	b.n	800698c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006990:	f001 fd5a 	bl	8008448 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006994:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006996:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006998:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800699a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800699c:	2b00      	cmp	r3, #0
 800699e:	d01f      	beq.n	80069e0 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80069a0:	68b9      	ldr	r1, [r7, #8]
 80069a2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80069a4:	f000 fb02 	bl	8006fac <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80069a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069aa:	1e5a      	subs	r2, r3, #1
 80069ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069ae:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80069b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069b2:	691b      	ldr	r3, [r3, #16]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d00f      	beq.n	80069d8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80069b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069ba:	3310      	adds	r3, #16
 80069bc:	4618      	mov	r0, r3
 80069be:	f001 f827 	bl	8007a10 <xTaskRemoveFromEventList>
 80069c2:	4603      	mov	r3, r0
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d007      	beq.n	80069d8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80069c8:	4b3c      	ldr	r3, [pc, #240]	@ (8006abc <xQueueReceive+0x1c0>)
 80069ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80069ce:	601a      	str	r2, [r3, #0]
 80069d0:	f3bf 8f4f 	dsb	sy
 80069d4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80069d8:	f001 fd68 	bl	80084ac <vPortExitCritical>
				return pdPASS;
 80069dc:	2301      	movs	r3, #1
 80069de:	e069      	b.n	8006ab4 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d103      	bne.n	80069ee <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80069e6:	f001 fd61 	bl	80084ac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80069ea:	2300      	movs	r3, #0
 80069ec:	e062      	b.n	8006ab4 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80069ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d106      	bne.n	8006a02 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80069f4:	f107 0310 	add.w	r3, r7, #16
 80069f8:	4618      	mov	r0, r3
 80069fa:	f001 f86d 	bl	8007ad8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80069fe:	2301      	movs	r3, #1
 8006a00:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006a02:	f001 fd53 	bl	80084ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006a06:	f000 fdf1 	bl	80075ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006a0a:	f001 fd1d 	bl	8008448 <vPortEnterCritical>
 8006a0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a10:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006a14:	b25b      	sxtb	r3, r3
 8006a16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a1a:	d103      	bne.n	8006a24 <xQueueReceive+0x128>
 8006a1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a1e:	2200      	movs	r2, #0
 8006a20:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006a24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a26:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006a2a:	b25b      	sxtb	r3, r3
 8006a2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a30:	d103      	bne.n	8006a3a <xQueueReceive+0x13e>
 8006a32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a34:	2200      	movs	r2, #0
 8006a36:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006a3a:	f001 fd37 	bl	80084ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006a3e:	1d3a      	adds	r2, r7, #4
 8006a40:	f107 0310 	add.w	r3, r7, #16
 8006a44:	4611      	mov	r1, r2
 8006a46:	4618      	mov	r0, r3
 8006a48:	f001 f85c 	bl	8007b04 <xTaskCheckForTimeOut>
 8006a4c:	4603      	mov	r3, r0
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d123      	bne.n	8006a9a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006a52:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006a54:	f000 fb22 	bl	800709c <prvIsQueueEmpty>
 8006a58:	4603      	mov	r3, r0
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d017      	beq.n	8006a8e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006a5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a60:	3324      	adds	r3, #36	@ 0x24
 8006a62:	687a      	ldr	r2, [r7, #4]
 8006a64:	4611      	mov	r1, r2
 8006a66:	4618      	mov	r0, r3
 8006a68:	f000 ffac 	bl	80079c4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006a6c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006a6e:	f000 fac3 	bl	8006ff8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006a72:	f000 fdc9 	bl	8007608 <xTaskResumeAll>
 8006a76:	4603      	mov	r3, r0
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d189      	bne.n	8006990 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8006a7c:	4b0f      	ldr	r3, [pc, #60]	@ (8006abc <xQueueReceive+0x1c0>)
 8006a7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006a82:	601a      	str	r2, [r3, #0]
 8006a84:	f3bf 8f4f 	dsb	sy
 8006a88:	f3bf 8f6f 	isb	sy
 8006a8c:	e780      	b.n	8006990 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006a8e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006a90:	f000 fab2 	bl	8006ff8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006a94:	f000 fdb8 	bl	8007608 <xTaskResumeAll>
 8006a98:	e77a      	b.n	8006990 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006a9a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006a9c:	f000 faac 	bl	8006ff8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006aa0:	f000 fdb2 	bl	8007608 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006aa4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006aa6:	f000 faf9 	bl	800709c <prvIsQueueEmpty>
 8006aaa:	4603      	mov	r3, r0
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	f43f af6f 	beq.w	8006990 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006ab2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	3730      	adds	r7, #48	@ 0x30
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	bd80      	pop	{r7, pc}
 8006abc:	e000ed04 	.word	0xe000ed04

08006ac0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b08e      	sub	sp, #56	@ 0x38
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
 8006ac8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006aca:	2300      	movs	r3, #0
 8006acc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006ad6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d10b      	bne.n	8006af4 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8006adc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ae0:	f383 8811 	msr	BASEPRI, r3
 8006ae4:	f3bf 8f6f 	isb	sy
 8006ae8:	f3bf 8f4f 	dsb	sy
 8006aec:	623b      	str	r3, [r7, #32]
}
 8006aee:	bf00      	nop
 8006af0:	bf00      	nop
 8006af2:	e7fd      	b.n	8006af0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006af4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006af6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d00b      	beq.n	8006b14 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8006afc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b00:	f383 8811 	msr	BASEPRI, r3
 8006b04:	f3bf 8f6f 	isb	sy
 8006b08:	f3bf 8f4f 	dsb	sy
 8006b0c:	61fb      	str	r3, [r7, #28]
}
 8006b0e:	bf00      	nop
 8006b10:	bf00      	nop
 8006b12:	e7fd      	b.n	8006b10 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006b14:	f001 f942 	bl	8007d9c <xTaskGetSchedulerState>
 8006b18:	4603      	mov	r3, r0
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d102      	bne.n	8006b24 <xQueueSemaphoreTake+0x64>
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d101      	bne.n	8006b28 <xQueueSemaphoreTake+0x68>
 8006b24:	2301      	movs	r3, #1
 8006b26:	e000      	b.n	8006b2a <xQueueSemaphoreTake+0x6a>
 8006b28:	2300      	movs	r3, #0
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d10b      	bne.n	8006b46 <xQueueSemaphoreTake+0x86>
	__asm volatile
 8006b2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b32:	f383 8811 	msr	BASEPRI, r3
 8006b36:	f3bf 8f6f 	isb	sy
 8006b3a:	f3bf 8f4f 	dsb	sy
 8006b3e:	61bb      	str	r3, [r7, #24]
}
 8006b40:	bf00      	nop
 8006b42:	bf00      	nop
 8006b44:	e7fd      	b.n	8006b42 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006b46:	f001 fc7f 	bl	8008448 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006b4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b4e:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006b50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d024      	beq.n	8006ba0 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006b56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b58:	1e5a      	subs	r2, r3, #1
 8006b5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b5c:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006b5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d104      	bne.n	8006b70 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006b66:	f001 fac5 	bl	80080f4 <pvTaskIncrementMutexHeldCount>
 8006b6a:	4602      	mov	r2, r0
 8006b6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b6e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006b70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b72:	691b      	ldr	r3, [r3, #16]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d00f      	beq.n	8006b98 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006b78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b7a:	3310      	adds	r3, #16
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	f000 ff47 	bl	8007a10 <xTaskRemoveFromEventList>
 8006b82:	4603      	mov	r3, r0
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d007      	beq.n	8006b98 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006b88:	4b54      	ldr	r3, [pc, #336]	@ (8006cdc <xQueueSemaphoreTake+0x21c>)
 8006b8a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006b8e:	601a      	str	r2, [r3, #0]
 8006b90:	f3bf 8f4f 	dsb	sy
 8006b94:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006b98:	f001 fc88 	bl	80084ac <vPortExitCritical>
				return pdPASS;
 8006b9c:	2301      	movs	r3, #1
 8006b9e:	e098      	b.n	8006cd2 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d112      	bne.n	8006bcc <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006ba6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d00b      	beq.n	8006bc4 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8006bac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bb0:	f383 8811 	msr	BASEPRI, r3
 8006bb4:	f3bf 8f6f 	isb	sy
 8006bb8:	f3bf 8f4f 	dsb	sy
 8006bbc:	617b      	str	r3, [r7, #20]
}
 8006bbe:	bf00      	nop
 8006bc0:	bf00      	nop
 8006bc2:	e7fd      	b.n	8006bc0 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006bc4:	f001 fc72 	bl	80084ac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006bc8:	2300      	movs	r3, #0
 8006bca:	e082      	b.n	8006cd2 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006bcc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d106      	bne.n	8006be0 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006bd2:	f107 030c 	add.w	r3, r7, #12
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	f000 ff7e 	bl	8007ad8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006bdc:	2301      	movs	r3, #1
 8006bde:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006be0:	f001 fc64 	bl	80084ac <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006be4:	f000 fd02 	bl	80075ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006be8:	f001 fc2e 	bl	8008448 <vPortEnterCritical>
 8006bec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bee:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006bf2:	b25b      	sxtb	r3, r3
 8006bf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bf8:	d103      	bne.n	8006c02 <xQueueSemaphoreTake+0x142>
 8006bfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006c02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c04:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006c08:	b25b      	sxtb	r3, r3
 8006c0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c0e:	d103      	bne.n	8006c18 <xQueueSemaphoreTake+0x158>
 8006c10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c12:	2200      	movs	r2, #0
 8006c14:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006c18:	f001 fc48 	bl	80084ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006c1c:	463a      	mov	r2, r7
 8006c1e:	f107 030c 	add.w	r3, r7, #12
 8006c22:	4611      	mov	r1, r2
 8006c24:	4618      	mov	r0, r3
 8006c26:	f000 ff6d 	bl	8007b04 <xTaskCheckForTimeOut>
 8006c2a:	4603      	mov	r3, r0
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d132      	bne.n	8006c96 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006c30:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006c32:	f000 fa33 	bl	800709c <prvIsQueueEmpty>
 8006c36:	4603      	mov	r3, r0
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d026      	beq.n	8006c8a <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006c3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d109      	bne.n	8006c58 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8006c44:	f001 fc00 	bl	8008448 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006c48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c4a:	689b      	ldr	r3, [r3, #8]
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	f001 f8c3 	bl	8007dd8 <xTaskPriorityInherit>
 8006c52:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8006c54:	f001 fc2a 	bl	80084ac <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006c58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c5a:	3324      	adds	r3, #36	@ 0x24
 8006c5c:	683a      	ldr	r2, [r7, #0]
 8006c5e:	4611      	mov	r1, r2
 8006c60:	4618      	mov	r0, r3
 8006c62:	f000 feaf 	bl	80079c4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006c66:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006c68:	f000 f9c6 	bl	8006ff8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006c6c:	f000 fccc 	bl	8007608 <xTaskResumeAll>
 8006c70:	4603      	mov	r3, r0
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	f47f af67 	bne.w	8006b46 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8006c78:	4b18      	ldr	r3, [pc, #96]	@ (8006cdc <xQueueSemaphoreTake+0x21c>)
 8006c7a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006c7e:	601a      	str	r2, [r3, #0]
 8006c80:	f3bf 8f4f 	dsb	sy
 8006c84:	f3bf 8f6f 	isb	sy
 8006c88:	e75d      	b.n	8006b46 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006c8a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006c8c:	f000 f9b4 	bl	8006ff8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006c90:	f000 fcba 	bl	8007608 <xTaskResumeAll>
 8006c94:	e757      	b.n	8006b46 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006c96:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006c98:	f000 f9ae 	bl	8006ff8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006c9c:	f000 fcb4 	bl	8007608 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006ca0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006ca2:	f000 f9fb 	bl	800709c <prvIsQueueEmpty>
 8006ca6:	4603      	mov	r3, r0
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	f43f af4c 	beq.w	8006b46 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006cae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d00d      	beq.n	8006cd0 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8006cb4:	f001 fbc8 	bl	8008448 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006cb8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006cba:	f000 f8f5 	bl	8006ea8 <prvGetDisinheritPriorityAfterTimeout>
 8006cbe:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006cc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cc2:	689b      	ldr	r3, [r3, #8]
 8006cc4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	f001 f984 	bl	8007fd4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006ccc:	f001 fbee 	bl	80084ac <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006cd0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	3738      	adds	r7, #56	@ 0x38
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	bd80      	pop	{r7, pc}
 8006cda:	bf00      	nop
 8006cdc:	e000ed04 	.word	0xe000ed04

08006ce0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b08e      	sub	sp, #56	@ 0x38
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	60f8      	str	r0, [r7, #12]
 8006ce8:	60b9      	str	r1, [r7, #8]
 8006cea:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006cf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d10b      	bne.n	8006d0e <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8006cf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cfa:	f383 8811 	msr	BASEPRI, r3
 8006cfe:	f3bf 8f6f 	isb	sy
 8006d02:	f3bf 8f4f 	dsb	sy
 8006d06:	623b      	str	r3, [r7, #32]
}
 8006d08:	bf00      	nop
 8006d0a:	bf00      	nop
 8006d0c:	e7fd      	b.n	8006d0a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006d0e:	68bb      	ldr	r3, [r7, #8]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d103      	bne.n	8006d1c <xQueueReceiveFromISR+0x3c>
 8006d14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d101      	bne.n	8006d20 <xQueueReceiveFromISR+0x40>
 8006d1c:	2301      	movs	r3, #1
 8006d1e:	e000      	b.n	8006d22 <xQueueReceiveFromISR+0x42>
 8006d20:	2300      	movs	r3, #0
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d10b      	bne.n	8006d3e <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8006d26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d2a:	f383 8811 	msr	BASEPRI, r3
 8006d2e:	f3bf 8f6f 	isb	sy
 8006d32:	f3bf 8f4f 	dsb	sy
 8006d36:	61fb      	str	r3, [r7, #28]
}
 8006d38:	bf00      	nop
 8006d3a:	bf00      	nop
 8006d3c:	e7fd      	b.n	8006d3a <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006d3e:	f001 fc63 	bl	8008608 <vPortValidateInterruptPriority>
	__asm volatile
 8006d42:	f3ef 8211 	mrs	r2, BASEPRI
 8006d46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d4a:	f383 8811 	msr	BASEPRI, r3
 8006d4e:	f3bf 8f6f 	isb	sy
 8006d52:	f3bf 8f4f 	dsb	sy
 8006d56:	61ba      	str	r2, [r7, #24]
 8006d58:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006d5a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006d5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006d5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d62:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006d64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d02f      	beq.n	8006dca <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006d6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d6c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006d70:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006d74:	68b9      	ldr	r1, [r7, #8]
 8006d76:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006d78:	f000 f918 	bl	8006fac <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006d7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d7e:	1e5a      	subs	r2, r3, #1
 8006d80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d82:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006d84:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006d88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d8c:	d112      	bne.n	8006db4 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006d8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d90:	691b      	ldr	r3, [r3, #16]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d016      	beq.n	8006dc4 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006d96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d98:	3310      	adds	r3, #16
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	f000 fe38 	bl	8007a10 <xTaskRemoveFromEventList>
 8006da0:	4603      	mov	r3, r0
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d00e      	beq.n	8006dc4 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d00b      	beq.n	8006dc4 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2201      	movs	r2, #1
 8006db0:	601a      	str	r2, [r3, #0]
 8006db2:	e007      	b.n	8006dc4 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006db4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006db8:	3301      	adds	r3, #1
 8006dba:	b2db      	uxtb	r3, r3
 8006dbc:	b25a      	sxtb	r2, r3
 8006dbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dc0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8006dc4:	2301      	movs	r3, #1
 8006dc6:	637b      	str	r3, [r7, #52]	@ 0x34
 8006dc8:	e001      	b.n	8006dce <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8006dca:	2300      	movs	r3, #0
 8006dcc:	637b      	str	r3, [r7, #52]	@ 0x34
 8006dce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006dd0:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006dd2:	693b      	ldr	r3, [r7, #16]
 8006dd4:	f383 8811 	msr	BASEPRI, r3
}
 8006dd8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006dda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8006ddc:	4618      	mov	r0, r3
 8006dde:	3738      	adds	r7, #56	@ 0x38
 8006de0:	46bd      	mov	sp, r7
 8006de2:	bd80      	pop	{r7, pc}

08006de4 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b084      	sub	sp, #16
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d10b      	bne.n	8006e0a <uxQueueMessagesWaiting+0x26>
	__asm volatile
 8006df2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006df6:	f383 8811 	msr	BASEPRI, r3
 8006dfa:	f3bf 8f6f 	isb	sy
 8006dfe:	f3bf 8f4f 	dsb	sy
 8006e02:	60bb      	str	r3, [r7, #8]
}
 8006e04:	bf00      	nop
 8006e06:	bf00      	nop
 8006e08:	e7fd      	b.n	8006e06 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8006e0a:	f001 fb1d 	bl	8008448 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e12:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8006e14:	f001 fb4a 	bl	80084ac <vPortExitCritical>

	return uxReturn;
 8006e18:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	3710      	adds	r7, #16
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	bd80      	pop	{r7, pc}

08006e22 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8006e22:	b480      	push	{r7}
 8006e24:	b087      	sub	sp, #28
 8006e26:	af00      	add	r7, sp, #0
 8006e28:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8006e2e:	697b      	ldr	r3, [r7, #20]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d10b      	bne.n	8006e4c <uxQueueMessagesWaitingFromISR+0x2a>
	__asm volatile
 8006e34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e38:	f383 8811 	msr	BASEPRI, r3
 8006e3c:	f3bf 8f6f 	isb	sy
 8006e40:	f3bf 8f4f 	dsb	sy
 8006e44:	60fb      	str	r3, [r7, #12]
}
 8006e46:	bf00      	nop
 8006e48:	bf00      	nop
 8006e4a:	e7fd      	b.n	8006e48 <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 8006e4c:	697b      	ldr	r3, [r7, #20]
 8006e4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e50:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8006e52:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8006e54:	4618      	mov	r0, r3
 8006e56:	371c      	adds	r7, #28
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5e:	4770      	bx	lr

08006e60 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b084      	sub	sp, #16
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d10b      	bne.n	8006e8a <vQueueDelete+0x2a>
	__asm volatile
 8006e72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e76:	f383 8811 	msr	BASEPRI, r3
 8006e7a:	f3bf 8f6f 	isb	sy
 8006e7e:	f3bf 8f4f 	dsb	sy
 8006e82:	60bb      	str	r3, [r7, #8]
}
 8006e84:	bf00      	nop
 8006e86:	bf00      	nop
 8006e88:	e7fd      	b.n	8006e86 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8006e8a:	68f8      	ldr	r0, [r7, #12]
 8006e8c:	f000 f934 	bl	80070f8 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d102      	bne.n	8006ea0 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 8006e9a:	68f8      	ldr	r0, [r7, #12]
 8006e9c:	f001 fcc4 	bl	8008828 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8006ea0:	bf00      	nop
 8006ea2:	3710      	adds	r7, #16
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	bd80      	pop	{r7, pc}

08006ea8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006ea8:	b480      	push	{r7}
 8006eaa:	b085      	sub	sp, #20
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d006      	beq.n	8006ec6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f1c3 0307 	rsb	r3, r3, #7
 8006ec2:	60fb      	str	r3, [r7, #12]
 8006ec4:	e001      	b.n	8006eca <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006eca:	68fb      	ldr	r3, [r7, #12]
	}
 8006ecc:	4618      	mov	r0, r3
 8006ece:	3714      	adds	r7, #20
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed6:	4770      	bx	lr

08006ed8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b086      	sub	sp, #24
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	60f8      	str	r0, [r7, #12]
 8006ee0:	60b9      	str	r1, [r7, #8]
 8006ee2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006eec:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d10d      	bne.n	8006f12 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d14d      	bne.n	8006f9a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	689b      	ldr	r3, [r3, #8]
 8006f02:	4618      	mov	r0, r3
 8006f04:	f000 ffde 	bl	8007ec4 <xTaskPriorityDisinherit>
 8006f08:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	609a      	str	r2, [r3, #8]
 8006f10:	e043      	b.n	8006f9a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d119      	bne.n	8006f4c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	6858      	ldr	r0, [r3, #4]
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f20:	461a      	mov	r2, r3
 8006f22:	68b9      	ldr	r1, [r7, #8]
 8006f24:	f00f fb5f 	bl	80165e6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	685a      	ldr	r2, [r3, #4]
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f30:	441a      	add	r2, r3
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	685a      	ldr	r2, [r3, #4]
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	689b      	ldr	r3, [r3, #8]
 8006f3e:	429a      	cmp	r2, r3
 8006f40:	d32b      	bcc.n	8006f9a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	681a      	ldr	r2, [r3, #0]
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	605a      	str	r2, [r3, #4]
 8006f4a:	e026      	b.n	8006f9a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	68d8      	ldr	r0, [r3, #12]
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f54:	461a      	mov	r2, r3
 8006f56:	68b9      	ldr	r1, [r7, #8]
 8006f58:	f00f fb45 	bl	80165e6 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	68da      	ldr	r2, [r3, #12]
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f64:	425b      	negs	r3, r3
 8006f66:	441a      	add	r2, r3
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	68da      	ldr	r2, [r3, #12]
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	429a      	cmp	r2, r3
 8006f76:	d207      	bcs.n	8006f88 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	689a      	ldr	r2, [r3, #8]
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f80:	425b      	negs	r3, r3
 8006f82:	441a      	add	r2, r3
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2b02      	cmp	r3, #2
 8006f8c:	d105      	bne.n	8006f9a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006f8e:	693b      	ldr	r3, [r7, #16]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d002      	beq.n	8006f9a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006f94:	693b      	ldr	r3, [r7, #16]
 8006f96:	3b01      	subs	r3, #1
 8006f98:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006f9a:	693b      	ldr	r3, [r7, #16]
 8006f9c:	1c5a      	adds	r2, r3, #1
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8006fa2:	697b      	ldr	r3, [r7, #20]
}
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	3718      	adds	r7, #24
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	bd80      	pop	{r7, pc}

08006fac <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b082      	sub	sp, #8
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]
 8006fb4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d018      	beq.n	8006ff0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	68da      	ldr	r2, [r3, #12]
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fc6:	441a      	add	r2, r3
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	68da      	ldr	r2, [r3, #12]
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	689b      	ldr	r3, [r3, #8]
 8006fd4:	429a      	cmp	r2, r3
 8006fd6:	d303      	bcc.n	8006fe0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681a      	ldr	r2, [r3, #0]
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	68d9      	ldr	r1, [r3, #12]
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fe8:	461a      	mov	r2, r3
 8006fea:	6838      	ldr	r0, [r7, #0]
 8006fec:	f00f fafb 	bl	80165e6 <memcpy>
	}
}
 8006ff0:	bf00      	nop
 8006ff2:	3708      	adds	r7, #8
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	bd80      	pop	{r7, pc}

08006ff8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b084      	sub	sp, #16
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007000:	f001 fa22 	bl	8008448 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800700a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800700c:	e011      	b.n	8007032 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007012:	2b00      	cmp	r3, #0
 8007014:	d012      	beq.n	800703c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	3324      	adds	r3, #36	@ 0x24
 800701a:	4618      	mov	r0, r3
 800701c:	f000 fcf8 	bl	8007a10 <xTaskRemoveFromEventList>
 8007020:	4603      	mov	r3, r0
 8007022:	2b00      	cmp	r3, #0
 8007024:	d001      	beq.n	800702a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007026:	f000 fdd1 	bl	8007bcc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800702a:	7bfb      	ldrb	r3, [r7, #15]
 800702c:	3b01      	subs	r3, #1
 800702e:	b2db      	uxtb	r3, r3
 8007030:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007032:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007036:	2b00      	cmp	r3, #0
 8007038:	dce9      	bgt.n	800700e <prvUnlockQueue+0x16>
 800703a:	e000      	b.n	800703e <prvUnlockQueue+0x46>
					break;
 800703c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	22ff      	movs	r2, #255	@ 0xff
 8007042:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8007046:	f001 fa31 	bl	80084ac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800704a:	f001 f9fd 	bl	8008448 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007054:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007056:	e011      	b.n	800707c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	691b      	ldr	r3, [r3, #16]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d012      	beq.n	8007086 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	3310      	adds	r3, #16
 8007064:	4618      	mov	r0, r3
 8007066:	f000 fcd3 	bl	8007a10 <xTaskRemoveFromEventList>
 800706a:	4603      	mov	r3, r0
 800706c:	2b00      	cmp	r3, #0
 800706e:	d001      	beq.n	8007074 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007070:	f000 fdac 	bl	8007bcc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007074:	7bbb      	ldrb	r3, [r7, #14]
 8007076:	3b01      	subs	r3, #1
 8007078:	b2db      	uxtb	r3, r3
 800707a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800707c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007080:	2b00      	cmp	r3, #0
 8007082:	dce9      	bgt.n	8007058 <prvUnlockQueue+0x60>
 8007084:	e000      	b.n	8007088 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007086:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	22ff      	movs	r2, #255	@ 0xff
 800708c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8007090:	f001 fa0c 	bl	80084ac <vPortExitCritical>
}
 8007094:	bf00      	nop
 8007096:	3710      	adds	r7, #16
 8007098:	46bd      	mov	sp, r7
 800709a:	bd80      	pop	{r7, pc}

0800709c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b084      	sub	sp, #16
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80070a4:	f001 f9d0 	bl	8008448 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d102      	bne.n	80070b6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80070b0:	2301      	movs	r3, #1
 80070b2:	60fb      	str	r3, [r7, #12]
 80070b4:	e001      	b.n	80070ba <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80070b6:	2300      	movs	r3, #0
 80070b8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80070ba:	f001 f9f7 	bl	80084ac <vPortExitCritical>

	return xReturn;
 80070be:	68fb      	ldr	r3, [r7, #12]
}
 80070c0:	4618      	mov	r0, r3
 80070c2:	3710      	adds	r7, #16
 80070c4:	46bd      	mov	sp, r7
 80070c6:	bd80      	pop	{r7, pc}

080070c8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b084      	sub	sp, #16
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80070d0:	f001 f9ba 	bl	8008448 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070dc:	429a      	cmp	r2, r3
 80070de:	d102      	bne.n	80070e6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80070e0:	2301      	movs	r3, #1
 80070e2:	60fb      	str	r3, [r7, #12]
 80070e4:	e001      	b.n	80070ea <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80070e6:	2300      	movs	r3, #0
 80070e8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80070ea:	f001 f9df 	bl	80084ac <vPortExitCritical>

	return xReturn;
 80070ee:	68fb      	ldr	r3, [r7, #12]
}
 80070f0:	4618      	mov	r0, r3
 80070f2:	3710      	adds	r7, #16
 80070f4:	46bd      	mov	sp, r7
 80070f6:	bd80      	pop	{r7, pc}

080070f8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80070f8:	b480      	push	{r7}
 80070fa:	b085      	sub	sp, #20
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007100:	2300      	movs	r3, #0
 8007102:	60fb      	str	r3, [r7, #12]
 8007104:	e016      	b.n	8007134 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8007106:	4a10      	ldr	r2, [pc, #64]	@ (8007148 <vQueueUnregisterQueue+0x50>)
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	00db      	lsls	r3, r3, #3
 800710c:	4413      	add	r3, r2
 800710e:	685b      	ldr	r3, [r3, #4]
 8007110:	687a      	ldr	r2, [r7, #4]
 8007112:	429a      	cmp	r2, r3
 8007114:	d10b      	bne.n	800712e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8007116:	4a0c      	ldr	r2, [pc, #48]	@ (8007148 <vQueueUnregisterQueue+0x50>)
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	2100      	movs	r1, #0
 800711c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8007120:	4a09      	ldr	r2, [pc, #36]	@ (8007148 <vQueueUnregisterQueue+0x50>)
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	00db      	lsls	r3, r3, #3
 8007126:	4413      	add	r3, r2
 8007128:	2200      	movs	r2, #0
 800712a:	605a      	str	r2, [r3, #4]
				break;
 800712c:	e006      	b.n	800713c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	3301      	adds	r3, #1
 8007132:	60fb      	str	r3, [r7, #12]
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	2b07      	cmp	r3, #7
 8007138:	d9e5      	bls.n	8007106 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800713a:	bf00      	nop
 800713c:	bf00      	nop
 800713e:	3714      	adds	r7, #20
 8007140:	46bd      	mov	sp, r7
 8007142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007146:	4770      	bx	lr
 8007148:	20005454 	.word	0x20005454

0800714c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800714c:	b580      	push	{r7, lr}
 800714e:	b08e      	sub	sp, #56	@ 0x38
 8007150:	af04      	add	r7, sp, #16
 8007152:	60f8      	str	r0, [r7, #12]
 8007154:	60b9      	str	r1, [r7, #8]
 8007156:	607a      	str	r2, [r7, #4]
 8007158:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800715a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800715c:	2b00      	cmp	r3, #0
 800715e:	d10b      	bne.n	8007178 <xTaskCreateStatic+0x2c>
	__asm volatile
 8007160:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007164:	f383 8811 	msr	BASEPRI, r3
 8007168:	f3bf 8f6f 	isb	sy
 800716c:	f3bf 8f4f 	dsb	sy
 8007170:	623b      	str	r3, [r7, #32]
}
 8007172:	bf00      	nop
 8007174:	bf00      	nop
 8007176:	e7fd      	b.n	8007174 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007178:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800717a:	2b00      	cmp	r3, #0
 800717c:	d10b      	bne.n	8007196 <xTaskCreateStatic+0x4a>
	__asm volatile
 800717e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007182:	f383 8811 	msr	BASEPRI, r3
 8007186:	f3bf 8f6f 	isb	sy
 800718a:	f3bf 8f4f 	dsb	sy
 800718e:	61fb      	str	r3, [r7, #28]
}
 8007190:	bf00      	nop
 8007192:	bf00      	nop
 8007194:	e7fd      	b.n	8007192 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007196:	23a0      	movs	r3, #160	@ 0xa0
 8007198:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800719a:	693b      	ldr	r3, [r7, #16]
 800719c:	2ba0      	cmp	r3, #160	@ 0xa0
 800719e:	d00b      	beq.n	80071b8 <xTaskCreateStatic+0x6c>
	__asm volatile
 80071a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071a4:	f383 8811 	msr	BASEPRI, r3
 80071a8:	f3bf 8f6f 	isb	sy
 80071ac:	f3bf 8f4f 	dsb	sy
 80071b0:	61bb      	str	r3, [r7, #24]
}
 80071b2:	bf00      	nop
 80071b4:	bf00      	nop
 80071b6:	e7fd      	b.n	80071b4 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80071b8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80071ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d01e      	beq.n	80071fe <xTaskCreateStatic+0xb2>
 80071c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d01b      	beq.n	80071fe <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80071c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071c8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80071ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071cc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80071ce:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80071d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071d2:	2202      	movs	r2, #2
 80071d4:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80071d8:	2300      	movs	r3, #0
 80071da:	9303      	str	r3, [sp, #12]
 80071dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071de:	9302      	str	r3, [sp, #8]
 80071e0:	f107 0314 	add.w	r3, r7, #20
 80071e4:	9301      	str	r3, [sp, #4]
 80071e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071e8:	9300      	str	r3, [sp, #0]
 80071ea:	683b      	ldr	r3, [r7, #0]
 80071ec:	687a      	ldr	r2, [r7, #4]
 80071ee:	68b9      	ldr	r1, [r7, #8]
 80071f0:	68f8      	ldr	r0, [r7, #12]
 80071f2:	f000 f851 	bl	8007298 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80071f6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80071f8:	f000 f8ee 	bl	80073d8 <prvAddNewTaskToReadyList>
 80071fc:	e001      	b.n	8007202 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80071fe:	2300      	movs	r3, #0
 8007200:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007202:	697b      	ldr	r3, [r7, #20]
	}
 8007204:	4618      	mov	r0, r3
 8007206:	3728      	adds	r7, #40	@ 0x28
 8007208:	46bd      	mov	sp, r7
 800720a:	bd80      	pop	{r7, pc}

0800720c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800720c:	b580      	push	{r7, lr}
 800720e:	b08c      	sub	sp, #48	@ 0x30
 8007210:	af04      	add	r7, sp, #16
 8007212:	60f8      	str	r0, [r7, #12]
 8007214:	60b9      	str	r1, [r7, #8]
 8007216:	603b      	str	r3, [r7, #0]
 8007218:	4613      	mov	r3, r2
 800721a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800721c:	88fb      	ldrh	r3, [r7, #6]
 800721e:	009b      	lsls	r3, r3, #2
 8007220:	4618      	mov	r0, r3
 8007222:	f001 fa33 	bl	800868c <pvPortMalloc>
 8007226:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007228:	697b      	ldr	r3, [r7, #20]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d00e      	beq.n	800724c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800722e:	20a0      	movs	r0, #160	@ 0xa0
 8007230:	f001 fa2c 	bl	800868c <pvPortMalloc>
 8007234:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007236:	69fb      	ldr	r3, [r7, #28]
 8007238:	2b00      	cmp	r3, #0
 800723a:	d003      	beq.n	8007244 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800723c:	69fb      	ldr	r3, [r7, #28]
 800723e:	697a      	ldr	r2, [r7, #20]
 8007240:	631a      	str	r2, [r3, #48]	@ 0x30
 8007242:	e005      	b.n	8007250 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007244:	6978      	ldr	r0, [r7, #20]
 8007246:	f001 faef 	bl	8008828 <vPortFree>
 800724a:	e001      	b.n	8007250 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800724c:	2300      	movs	r3, #0
 800724e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007250:	69fb      	ldr	r3, [r7, #28]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d017      	beq.n	8007286 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007256:	69fb      	ldr	r3, [r7, #28]
 8007258:	2200      	movs	r2, #0
 800725a:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800725e:	88fa      	ldrh	r2, [r7, #6]
 8007260:	2300      	movs	r3, #0
 8007262:	9303      	str	r3, [sp, #12]
 8007264:	69fb      	ldr	r3, [r7, #28]
 8007266:	9302      	str	r3, [sp, #8]
 8007268:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800726a:	9301      	str	r3, [sp, #4]
 800726c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800726e:	9300      	str	r3, [sp, #0]
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	68b9      	ldr	r1, [r7, #8]
 8007274:	68f8      	ldr	r0, [r7, #12]
 8007276:	f000 f80f 	bl	8007298 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800727a:	69f8      	ldr	r0, [r7, #28]
 800727c:	f000 f8ac 	bl	80073d8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007280:	2301      	movs	r3, #1
 8007282:	61bb      	str	r3, [r7, #24]
 8007284:	e002      	b.n	800728c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007286:	f04f 33ff 	mov.w	r3, #4294967295
 800728a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800728c:	69bb      	ldr	r3, [r7, #24]
	}
 800728e:	4618      	mov	r0, r3
 8007290:	3720      	adds	r7, #32
 8007292:	46bd      	mov	sp, r7
 8007294:	bd80      	pop	{r7, pc}
	...

08007298 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007298:	b580      	push	{r7, lr}
 800729a:	b088      	sub	sp, #32
 800729c:	af00      	add	r7, sp, #0
 800729e:	60f8      	str	r0, [r7, #12]
 80072a0:	60b9      	str	r1, [r7, #8]
 80072a2:	607a      	str	r2, [r7, #4]
 80072a4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80072a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072a8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80072b0:	3b01      	subs	r3, #1
 80072b2:	009b      	lsls	r3, r3, #2
 80072b4:	4413      	add	r3, r2
 80072b6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80072b8:	69bb      	ldr	r3, [r7, #24]
 80072ba:	f023 0307 	bic.w	r3, r3, #7
 80072be:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80072c0:	69bb      	ldr	r3, [r7, #24]
 80072c2:	f003 0307 	and.w	r3, r3, #7
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d00b      	beq.n	80072e2 <prvInitialiseNewTask+0x4a>
	__asm volatile
 80072ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072ce:	f383 8811 	msr	BASEPRI, r3
 80072d2:	f3bf 8f6f 	isb	sy
 80072d6:	f3bf 8f4f 	dsb	sy
 80072da:	617b      	str	r3, [r7, #20]
}
 80072dc:	bf00      	nop
 80072de:	bf00      	nop
 80072e0:	e7fd      	b.n	80072de <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80072e2:	68bb      	ldr	r3, [r7, #8]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d01f      	beq.n	8007328 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80072e8:	2300      	movs	r3, #0
 80072ea:	61fb      	str	r3, [r7, #28]
 80072ec:	e012      	b.n	8007314 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80072ee:	68ba      	ldr	r2, [r7, #8]
 80072f0:	69fb      	ldr	r3, [r7, #28]
 80072f2:	4413      	add	r3, r2
 80072f4:	7819      	ldrb	r1, [r3, #0]
 80072f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80072f8:	69fb      	ldr	r3, [r7, #28]
 80072fa:	4413      	add	r3, r2
 80072fc:	3334      	adds	r3, #52	@ 0x34
 80072fe:	460a      	mov	r2, r1
 8007300:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007302:	68ba      	ldr	r2, [r7, #8]
 8007304:	69fb      	ldr	r3, [r7, #28]
 8007306:	4413      	add	r3, r2
 8007308:	781b      	ldrb	r3, [r3, #0]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d006      	beq.n	800731c <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800730e:	69fb      	ldr	r3, [r7, #28]
 8007310:	3301      	adds	r3, #1
 8007312:	61fb      	str	r3, [r7, #28]
 8007314:	69fb      	ldr	r3, [r7, #28]
 8007316:	2b0f      	cmp	r3, #15
 8007318:	d9e9      	bls.n	80072ee <prvInitialiseNewTask+0x56>
 800731a:	e000      	b.n	800731e <prvInitialiseNewTask+0x86>
			{
				break;
 800731c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800731e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007320:	2200      	movs	r2, #0
 8007322:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007326:	e003      	b.n	8007330 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007328:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800732a:	2200      	movs	r2, #0
 800732c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007330:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007332:	2b06      	cmp	r3, #6
 8007334:	d901      	bls.n	800733a <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007336:	2306      	movs	r3, #6
 8007338:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800733a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800733c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800733e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007340:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007342:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007344:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8007346:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007348:	2200      	movs	r2, #0
 800734a:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800734c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800734e:	3304      	adds	r3, #4
 8007350:	4618      	mov	r0, r3
 8007352:	f7fe fe80 	bl	8006056 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007356:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007358:	3318      	adds	r3, #24
 800735a:	4618      	mov	r0, r3
 800735c:	f7fe fe7b 	bl	8006056 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007360:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007362:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007364:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007366:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007368:	f1c3 0207 	rsb	r2, r3, #7
 800736c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800736e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007370:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007372:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007374:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007376:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007378:	2200      	movs	r2, #0
 800737a:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800737e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007380:	2200      	movs	r2, #0
 8007382:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007386:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007388:	334c      	adds	r3, #76	@ 0x4c
 800738a:	224c      	movs	r2, #76	@ 0x4c
 800738c:	2100      	movs	r1, #0
 800738e:	4618      	mov	r0, r3
 8007390:	f00f f85d 	bl	801644e <memset>
 8007394:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007396:	4a0d      	ldr	r2, [pc, #52]	@ (80073cc <prvInitialiseNewTask+0x134>)
 8007398:	651a      	str	r2, [r3, #80]	@ 0x50
 800739a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800739c:	4a0c      	ldr	r2, [pc, #48]	@ (80073d0 <prvInitialiseNewTask+0x138>)
 800739e:	655a      	str	r2, [r3, #84]	@ 0x54
 80073a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073a2:	4a0c      	ldr	r2, [pc, #48]	@ (80073d4 <prvInitialiseNewTask+0x13c>)
 80073a4:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80073a6:	683a      	ldr	r2, [r7, #0]
 80073a8:	68f9      	ldr	r1, [r7, #12]
 80073aa:	69b8      	ldr	r0, [r7, #24]
 80073ac:	f000 ff1c 	bl	80081e8 <pxPortInitialiseStack>
 80073b0:	4602      	mov	r2, r0
 80073b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073b4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80073b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d002      	beq.n	80073c2 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80073bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80073c0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80073c2:	bf00      	nop
 80073c4:	3720      	adds	r7, #32
 80073c6:	46bd      	mov	sp, r7
 80073c8:	bd80      	pop	{r7, pc}
 80073ca:	bf00      	nop
 80073cc:	2000eca4 	.word	0x2000eca4
 80073d0:	2000ed0c 	.word	0x2000ed0c
 80073d4:	2000ed74 	.word	0x2000ed74

080073d8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b082      	sub	sp, #8
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80073e0:	f001 f832 	bl	8008448 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80073e4:	4b2a      	ldr	r3, [pc, #168]	@ (8007490 <prvAddNewTaskToReadyList+0xb8>)
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	3301      	adds	r3, #1
 80073ea:	4a29      	ldr	r2, [pc, #164]	@ (8007490 <prvAddNewTaskToReadyList+0xb8>)
 80073ec:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80073ee:	4b29      	ldr	r3, [pc, #164]	@ (8007494 <prvAddNewTaskToReadyList+0xbc>)
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d109      	bne.n	800740a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80073f6:	4a27      	ldr	r2, [pc, #156]	@ (8007494 <prvAddNewTaskToReadyList+0xbc>)
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80073fc:	4b24      	ldr	r3, [pc, #144]	@ (8007490 <prvAddNewTaskToReadyList+0xb8>)
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	2b01      	cmp	r3, #1
 8007402:	d110      	bne.n	8007426 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007404:	f000 fc06 	bl	8007c14 <prvInitialiseTaskLists>
 8007408:	e00d      	b.n	8007426 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800740a:	4b23      	ldr	r3, [pc, #140]	@ (8007498 <prvAddNewTaskToReadyList+0xc0>)
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d109      	bne.n	8007426 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007412:	4b20      	ldr	r3, [pc, #128]	@ (8007494 <prvAddNewTaskToReadyList+0xbc>)
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800741c:	429a      	cmp	r2, r3
 800741e:	d802      	bhi.n	8007426 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007420:	4a1c      	ldr	r2, [pc, #112]	@ (8007494 <prvAddNewTaskToReadyList+0xbc>)
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007426:	4b1d      	ldr	r3, [pc, #116]	@ (800749c <prvAddNewTaskToReadyList+0xc4>)
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	3301      	adds	r3, #1
 800742c:	4a1b      	ldr	r2, [pc, #108]	@ (800749c <prvAddNewTaskToReadyList+0xc4>)
 800742e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007434:	2201      	movs	r2, #1
 8007436:	409a      	lsls	r2, r3
 8007438:	4b19      	ldr	r3, [pc, #100]	@ (80074a0 <prvAddNewTaskToReadyList+0xc8>)
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	4313      	orrs	r3, r2
 800743e:	4a18      	ldr	r2, [pc, #96]	@ (80074a0 <prvAddNewTaskToReadyList+0xc8>)
 8007440:	6013      	str	r3, [r2, #0]
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007446:	4613      	mov	r3, r2
 8007448:	009b      	lsls	r3, r3, #2
 800744a:	4413      	add	r3, r2
 800744c:	009b      	lsls	r3, r3, #2
 800744e:	4a15      	ldr	r2, [pc, #84]	@ (80074a4 <prvAddNewTaskToReadyList+0xcc>)
 8007450:	441a      	add	r2, r3
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	3304      	adds	r3, #4
 8007456:	4619      	mov	r1, r3
 8007458:	4610      	mov	r0, r2
 800745a:	f7fe fe09 	bl	8006070 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800745e:	f001 f825 	bl	80084ac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007462:	4b0d      	ldr	r3, [pc, #52]	@ (8007498 <prvAddNewTaskToReadyList+0xc0>)
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	2b00      	cmp	r3, #0
 8007468:	d00e      	beq.n	8007488 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800746a:	4b0a      	ldr	r3, [pc, #40]	@ (8007494 <prvAddNewTaskToReadyList+0xbc>)
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007474:	429a      	cmp	r2, r3
 8007476:	d207      	bcs.n	8007488 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007478:	4b0b      	ldr	r3, [pc, #44]	@ (80074a8 <prvAddNewTaskToReadyList+0xd0>)
 800747a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800747e:	601a      	str	r2, [r3, #0]
 8007480:	f3bf 8f4f 	dsb	sy
 8007484:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007488:	bf00      	nop
 800748a:	3708      	adds	r7, #8
 800748c:	46bd      	mov	sp, r7
 800748e:	bd80      	pop	{r7, pc}
 8007490:	20005594 	.word	0x20005594
 8007494:	20005494 	.word	0x20005494
 8007498:	200055a0 	.word	0x200055a0
 800749c:	200055b0 	.word	0x200055b0
 80074a0:	2000559c 	.word	0x2000559c
 80074a4:	20005498 	.word	0x20005498
 80074a8:	e000ed04 	.word	0xe000ed04

080074ac <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b084      	sub	sp, #16
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80074b4:	2300      	movs	r3, #0
 80074b6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d018      	beq.n	80074f0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80074be:	4b14      	ldr	r3, [pc, #80]	@ (8007510 <vTaskDelay+0x64>)
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d00b      	beq.n	80074de <vTaskDelay+0x32>
	__asm volatile
 80074c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074ca:	f383 8811 	msr	BASEPRI, r3
 80074ce:	f3bf 8f6f 	isb	sy
 80074d2:	f3bf 8f4f 	dsb	sy
 80074d6:	60bb      	str	r3, [r7, #8]
}
 80074d8:	bf00      	nop
 80074da:	bf00      	nop
 80074dc:	e7fd      	b.n	80074da <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80074de:	f000 f885 	bl	80075ec <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80074e2:	2100      	movs	r1, #0
 80074e4:	6878      	ldr	r0, [r7, #4]
 80074e6:	f000 fe19 	bl	800811c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80074ea:	f000 f88d 	bl	8007608 <xTaskResumeAll>
 80074ee:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d107      	bne.n	8007506 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80074f6:	4b07      	ldr	r3, [pc, #28]	@ (8007514 <vTaskDelay+0x68>)
 80074f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80074fc:	601a      	str	r2, [r3, #0]
 80074fe:	f3bf 8f4f 	dsb	sy
 8007502:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007506:	bf00      	nop
 8007508:	3710      	adds	r7, #16
 800750a:	46bd      	mov	sp, r7
 800750c:	bd80      	pop	{r7, pc}
 800750e:	bf00      	nop
 8007510:	200055bc 	.word	0x200055bc
 8007514:	e000ed04 	.word	0xe000ed04

08007518 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007518:	b580      	push	{r7, lr}
 800751a:	b08a      	sub	sp, #40	@ 0x28
 800751c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800751e:	2300      	movs	r3, #0
 8007520:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007522:	2300      	movs	r3, #0
 8007524:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007526:	463a      	mov	r2, r7
 8007528:	1d39      	adds	r1, r7, #4
 800752a:	f107 0308 	add.w	r3, r7, #8
 800752e:	4618      	mov	r0, r3
 8007530:	f7f9 f864 	bl	80005fc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007534:	6839      	ldr	r1, [r7, #0]
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	68ba      	ldr	r2, [r7, #8]
 800753a:	9202      	str	r2, [sp, #8]
 800753c:	9301      	str	r3, [sp, #4]
 800753e:	2300      	movs	r3, #0
 8007540:	9300      	str	r3, [sp, #0]
 8007542:	2300      	movs	r3, #0
 8007544:	460a      	mov	r2, r1
 8007546:	4921      	ldr	r1, [pc, #132]	@ (80075cc <vTaskStartScheduler+0xb4>)
 8007548:	4821      	ldr	r0, [pc, #132]	@ (80075d0 <vTaskStartScheduler+0xb8>)
 800754a:	f7ff fdff 	bl	800714c <xTaskCreateStatic>
 800754e:	4603      	mov	r3, r0
 8007550:	4a20      	ldr	r2, [pc, #128]	@ (80075d4 <vTaskStartScheduler+0xbc>)
 8007552:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007554:	4b1f      	ldr	r3, [pc, #124]	@ (80075d4 <vTaskStartScheduler+0xbc>)
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d002      	beq.n	8007562 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800755c:	2301      	movs	r3, #1
 800755e:	617b      	str	r3, [r7, #20]
 8007560:	e001      	b.n	8007566 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007562:	2300      	movs	r3, #0
 8007564:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007566:	697b      	ldr	r3, [r7, #20]
 8007568:	2b01      	cmp	r3, #1
 800756a:	d11b      	bne.n	80075a4 <vTaskStartScheduler+0x8c>
	__asm volatile
 800756c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007570:	f383 8811 	msr	BASEPRI, r3
 8007574:	f3bf 8f6f 	isb	sy
 8007578:	f3bf 8f4f 	dsb	sy
 800757c:	613b      	str	r3, [r7, #16]
}
 800757e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007580:	4b15      	ldr	r3, [pc, #84]	@ (80075d8 <vTaskStartScheduler+0xc0>)
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	334c      	adds	r3, #76	@ 0x4c
 8007586:	4a15      	ldr	r2, [pc, #84]	@ (80075dc <vTaskStartScheduler+0xc4>)
 8007588:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800758a:	4b15      	ldr	r3, [pc, #84]	@ (80075e0 <vTaskStartScheduler+0xc8>)
 800758c:	f04f 32ff 	mov.w	r2, #4294967295
 8007590:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007592:	4b14      	ldr	r3, [pc, #80]	@ (80075e4 <vTaskStartScheduler+0xcc>)
 8007594:	2201      	movs	r2, #1
 8007596:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007598:	4b13      	ldr	r3, [pc, #76]	@ (80075e8 <vTaskStartScheduler+0xd0>)
 800759a:	2200      	movs	r2, #0
 800759c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800759e:	f000 feaf 	bl	8008300 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80075a2:	e00f      	b.n	80075c4 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80075a4:	697b      	ldr	r3, [r7, #20]
 80075a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075aa:	d10b      	bne.n	80075c4 <vTaskStartScheduler+0xac>
	__asm volatile
 80075ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075b0:	f383 8811 	msr	BASEPRI, r3
 80075b4:	f3bf 8f6f 	isb	sy
 80075b8:	f3bf 8f4f 	dsb	sy
 80075bc:	60fb      	str	r3, [r7, #12]
}
 80075be:	bf00      	nop
 80075c0:	bf00      	nop
 80075c2:	e7fd      	b.n	80075c0 <vTaskStartScheduler+0xa8>
}
 80075c4:	bf00      	nop
 80075c6:	3718      	adds	r7, #24
 80075c8:	46bd      	mov	sp, r7
 80075ca:	bd80      	pop	{r7, pc}
 80075cc:	08017894 	.word	0x08017894
 80075d0:	08007be5 	.word	0x08007be5
 80075d4:	200055b8 	.word	0x200055b8
 80075d8:	20005494 	.word	0x20005494
 80075dc:	2000013c 	.word	0x2000013c
 80075e0:	200055b4 	.word	0x200055b4
 80075e4:	200055a0 	.word	0x200055a0
 80075e8:	20005598 	.word	0x20005598

080075ec <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80075ec:	b480      	push	{r7}
 80075ee:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80075f0:	4b04      	ldr	r3, [pc, #16]	@ (8007604 <vTaskSuspendAll+0x18>)
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	3301      	adds	r3, #1
 80075f6:	4a03      	ldr	r2, [pc, #12]	@ (8007604 <vTaskSuspendAll+0x18>)
 80075f8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80075fa:	bf00      	nop
 80075fc:	46bd      	mov	sp, r7
 80075fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007602:	4770      	bx	lr
 8007604:	200055bc 	.word	0x200055bc

08007608 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007608:	b580      	push	{r7, lr}
 800760a:	b084      	sub	sp, #16
 800760c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800760e:	2300      	movs	r3, #0
 8007610:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007612:	2300      	movs	r3, #0
 8007614:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007616:	4b42      	ldr	r3, [pc, #264]	@ (8007720 <xTaskResumeAll+0x118>)
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d10b      	bne.n	8007636 <xTaskResumeAll+0x2e>
	__asm volatile
 800761e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007622:	f383 8811 	msr	BASEPRI, r3
 8007626:	f3bf 8f6f 	isb	sy
 800762a:	f3bf 8f4f 	dsb	sy
 800762e:	603b      	str	r3, [r7, #0]
}
 8007630:	bf00      	nop
 8007632:	bf00      	nop
 8007634:	e7fd      	b.n	8007632 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007636:	f000 ff07 	bl	8008448 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800763a:	4b39      	ldr	r3, [pc, #228]	@ (8007720 <xTaskResumeAll+0x118>)
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	3b01      	subs	r3, #1
 8007640:	4a37      	ldr	r2, [pc, #220]	@ (8007720 <xTaskResumeAll+0x118>)
 8007642:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007644:	4b36      	ldr	r3, [pc, #216]	@ (8007720 <xTaskResumeAll+0x118>)
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d161      	bne.n	8007710 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800764c:	4b35      	ldr	r3, [pc, #212]	@ (8007724 <xTaskResumeAll+0x11c>)
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d05d      	beq.n	8007710 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007654:	e02e      	b.n	80076b4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007656:	4b34      	ldr	r3, [pc, #208]	@ (8007728 <xTaskResumeAll+0x120>)
 8007658:	68db      	ldr	r3, [r3, #12]
 800765a:	68db      	ldr	r3, [r3, #12]
 800765c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	3318      	adds	r3, #24
 8007662:	4618      	mov	r0, r3
 8007664:	f7fe fd61 	bl	800612a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	3304      	adds	r3, #4
 800766c:	4618      	mov	r0, r3
 800766e:	f7fe fd5c 	bl	800612a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007676:	2201      	movs	r2, #1
 8007678:	409a      	lsls	r2, r3
 800767a:	4b2c      	ldr	r3, [pc, #176]	@ (800772c <xTaskResumeAll+0x124>)
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	4313      	orrs	r3, r2
 8007680:	4a2a      	ldr	r2, [pc, #168]	@ (800772c <xTaskResumeAll+0x124>)
 8007682:	6013      	str	r3, [r2, #0]
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007688:	4613      	mov	r3, r2
 800768a:	009b      	lsls	r3, r3, #2
 800768c:	4413      	add	r3, r2
 800768e:	009b      	lsls	r3, r3, #2
 8007690:	4a27      	ldr	r2, [pc, #156]	@ (8007730 <xTaskResumeAll+0x128>)
 8007692:	441a      	add	r2, r3
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	3304      	adds	r3, #4
 8007698:	4619      	mov	r1, r3
 800769a:	4610      	mov	r0, r2
 800769c:	f7fe fce8 	bl	8006070 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80076a4:	4b23      	ldr	r3, [pc, #140]	@ (8007734 <xTaskResumeAll+0x12c>)
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076aa:	429a      	cmp	r2, r3
 80076ac:	d302      	bcc.n	80076b4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80076ae:	4b22      	ldr	r3, [pc, #136]	@ (8007738 <xTaskResumeAll+0x130>)
 80076b0:	2201      	movs	r2, #1
 80076b2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80076b4:	4b1c      	ldr	r3, [pc, #112]	@ (8007728 <xTaskResumeAll+0x120>)
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d1cc      	bne.n	8007656 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d001      	beq.n	80076c6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80076c2:	f000 fb4b 	bl	8007d5c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80076c6:	4b1d      	ldr	r3, [pc, #116]	@ (800773c <xTaskResumeAll+0x134>)
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d010      	beq.n	80076f4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80076d2:	f000 f859 	bl	8007788 <xTaskIncrementTick>
 80076d6:	4603      	mov	r3, r0
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d002      	beq.n	80076e2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80076dc:	4b16      	ldr	r3, [pc, #88]	@ (8007738 <xTaskResumeAll+0x130>)
 80076de:	2201      	movs	r2, #1
 80076e0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	3b01      	subs	r3, #1
 80076e6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d1f1      	bne.n	80076d2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80076ee:	4b13      	ldr	r3, [pc, #76]	@ (800773c <xTaskResumeAll+0x134>)
 80076f0:	2200      	movs	r2, #0
 80076f2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80076f4:	4b10      	ldr	r3, [pc, #64]	@ (8007738 <xTaskResumeAll+0x130>)
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d009      	beq.n	8007710 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80076fc:	2301      	movs	r3, #1
 80076fe:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007700:	4b0f      	ldr	r3, [pc, #60]	@ (8007740 <xTaskResumeAll+0x138>)
 8007702:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007706:	601a      	str	r2, [r3, #0]
 8007708:	f3bf 8f4f 	dsb	sy
 800770c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007710:	f000 fecc 	bl	80084ac <vPortExitCritical>

	return xAlreadyYielded;
 8007714:	68bb      	ldr	r3, [r7, #8]
}
 8007716:	4618      	mov	r0, r3
 8007718:	3710      	adds	r7, #16
 800771a:	46bd      	mov	sp, r7
 800771c:	bd80      	pop	{r7, pc}
 800771e:	bf00      	nop
 8007720:	200055bc 	.word	0x200055bc
 8007724:	20005594 	.word	0x20005594
 8007728:	20005554 	.word	0x20005554
 800772c:	2000559c 	.word	0x2000559c
 8007730:	20005498 	.word	0x20005498
 8007734:	20005494 	.word	0x20005494
 8007738:	200055a8 	.word	0x200055a8
 800773c:	200055a4 	.word	0x200055a4
 8007740:	e000ed04 	.word	0xe000ed04

08007744 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007744:	b480      	push	{r7}
 8007746:	b083      	sub	sp, #12
 8007748:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800774a:	4b05      	ldr	r3, [pc, #20]	@ (8007760 <xTaskGetTickCount+0x1c>)
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007750:	687b      	ldr	r3, [r7, #4]
}
 8007752:	4618      	mov	r0, r3
 8007754:	370c      	adds	r7, #12
 8007756:	46bd      	mov	sp, r7
 8007758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775c:	4770      	bx	lr
 800775e:	bf00      	nop
 8007760:	20005598 	.word	0x20005598

08007764 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8007764:	b580      	push	{r7, lr}
 8007766:	b082      	sub	sp, #8
 8007768:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800776a:	f000 ff4d 	bl	8008608 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800776e:	2300      	movs	r3, #0
 8007770:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8007772:	4b04      	ldr	r3, [pc, #16]	@ (8007784 <xTaskGetTickCountFromISR+0x20>)
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007778:	683b      	ldr	r3, [r7, #0]
}
 800777a:	4618      	mov	r0, r3
 800777c:	3708      	adds	r7, #8
 800777e:	46bd      	mov	sp, r7
 8007780:	bd80      	pop	{r7, pc}
 8007782:	bf00      	nop
 8007784:	20005598 	.word	0x20005598

08007788 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b086      	sub	sp, #24
 800778c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800778e:	2300      	movs	r3, #0
 8007790:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007792:	4b4f      	ldr	r3, [pc, #316]	@ (80078d0 <xTaskIncrementTick+0x148>)
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	2b00      	cmp	r3, #0
 8007798:	f040 808f 	bne.w	80078ba <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800779c:	4b4d      	ldr	r3, [pc, #308]	@ (80078d4 <xTaskIncrementTick+0x14c>)
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	3301      	adds	r3, #1
 80077a2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80077a4:	4a4b      	ldr	r2, [pc, #300]	@ (80078d4 <xTaskIncrementTick+0x14c>)
 80077a6:	693b      	ldr	r3, [r7, #16]
 80077a8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80077aa:	693b      	ldr	r3, [r7, #16]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d121      	bne.n	80077f4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80077b0:	4b49      	ldr	r3, [pc, #292]	@ (80078d8 <xTaskIncrementTick+0x150>)
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d00b      	beq.n	80077d2 <xTaskIncrementTick+0x4a>
	__asm volatile
 80077ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077be:	f383 8811 	msr	BASEPRI, r3
 80077c2:	f3bf 8f6f 	isb	sy
 80077c6:	f3bf 8f4f 	dsb	sy
 80077ca:	603b      	str	r3, [r7, #0]
}
 80077cc:	bf00      	nop
 80077ce:	bf00      	nop
 80077d0:	e7fd      	b.n	80077ce <xTaskIncrementTick+0x46>
 80077d2:	4b41      	ldr	r3, [pc, #260]	@ (80078d8 <xTaskIncrementTick+0x150>)
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	60fb      	str	r3, [r7, #12]
 80077d8:	4b40      	ldr	r3, [pc, #256]	@ (80078dc <xTaskIncrementTick+0x154>)
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	4a3e      	ldr	r2, [pc, #248]	@ (80078d8 <xTaskIncrementTick+0x150>)
 80077de:	6013      	str	r3, [r2, #0]
 80077e0:	4a3e      	ldr	r2, [pc, #248]	@ (80078dc <xTaskIncrementTick+0x154>)
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	6013      	str	r3, [r2, #0]
 80077e6:	4b3e      	ldr	r3, [pc, #248]	@ (80078e0 <xTaskIncrementTick+0x158>)
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	3301      	adds	r3, #1
 80077ec:	4a3c      	ldr	r2, [pc, #240]	@ (80078e0 <xTaskIncrementTick+0x158>)
 80077ee:	6013      	str	r3, [r2, #0]
 80077f0:	f000 fab4 	bl	8007d5c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80077f4:	4b3b      	ldr	r3, [pc, #236]	@ (80078e4 <xTaskIncrementTick+0x15c>)
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	693a      	ldr	r2, [r7, #16]
 80077fa:	429a      	cmp	r2, r3
 80077fc:	d348      	bcc.n	8007890 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80077fe:	4b36      	ldr	r3, [pc, #216]	@ (80078d8 <xTaskIncrementTick+0x150>)
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d104      	bne.n	8007812 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007808:	4b36      	ldr	r3, [pc, #216]	@ (80078e4 <xTaskIncrementTick+0x15c>)
 800780a:	f04f 32ff 	mov.w	r2, #4294967295
 800780e:	601a      	str	r2, [r3, #0]
					break;
 8007810:	e03e      	b.n	8007890 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007812:	4b31      	ldr	r3, [pc, #196]	@ (80078d8 <xTaskIncrementTick+0x150>)
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	68db      	ldr	r3, [r3, #12]
 8007818:	68db      	ldr	r3, [r3, #12]
 800781a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800781c:	68bb      	ldr	r3, [r7, #8]
 800781e:	685b      	ldr	r3, [r3, #4]
 8007820:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007822:	693a      	ldr	r2, [r7, #16]
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	429a      	cmp	r2, r3
 8007828:	d203      	bcs.n	8007832 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800782a:	4a2e      	ldr	r2, [pc, #184]	@ (80078e4 <xTaskIncrementTick+0x15c>)
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007830:	e02e      	b.n	8007890 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007832:	68bb      	ldr	r3, [r7, #8]
 8007834:	3304      	adds	r3, #4
 8007836:	4618      	mov	r0, r3
 8007838:	f7fe fc77 	bl	800612a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800783c:	68bb      	ldr	r3, [r7, #8]
 800783e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007840:	2b00      	cmp	r3, #0
 8007842:	d004      	beq.n	800784e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007844:	68bb      	ldr	r3, [r7, #8]
 8007846:	3318      	adds	r3, #24
 8007848:	4618      	mov	r0, r3
 800784a:	f7fe fc6e 	bl	800612a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800784e:	68bb      	ldr	r3, [r7, #8]
 8007850:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007852:	2201      	movs	r2, #1
 8007854:	409a      	lsls	r2, r3
 8007856:	4b24      	ldr	r3, [pc, #144]	@ (80078e8 <xTaskIncrementTick+0x160>)
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	4313      	orrs	r3, r2
 800785c:	4a22      	ldr	r2, [pc, #136]	@ (80078e8 <xTaskIncrementTick+0x160>)
 800785e:	6013      	str	r3, [r2, #0]
 8007860:	68bb      	ldr	r3, [r7, #8]
 8007862:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007864:	4613      	mov	r3, r2
 8007866:	009b      	lsls	r3, r3, #2
 8007868:	4413      	add	r3, r2
 800786a:	009b      	lsls	r3, r3, #2
 800786c:	4a1f      	ldr	r2, [pc, #124]	@ (80078ec <xTaskIncrementTick+0x164>)
 800786e:	441a      	add	r2, r3
 8007870:	68bb      	ldr	r3, [r7, #8]
 8007872:	3304      	adds	r3, #4
 8007874:	4619      	mov	r1, r3
 8007876:	4610      	mov	r0, r2
 8007878:	f7fe fbfa 	bl	8006070 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800787c:	68bb      	ldr	r3, [r7, #8]
 800787e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007880:	4b1b      	ldr	r3, [pc, #108]	@ (80078f0 <xTaskIncrementTick+0x168>)
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007886:	429a      	cmp	r2, r3
 8007888:	d3b9      	bcc.n	80077fe <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800788a:	2301      	movs	r3, #1
 800788c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800788e:	e7b6      	b.n	80077fe <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007890:	4b17      	ldr	r3, [pc, #92]	@ (80078f0 <xTaskIncrementTick+0x168>)
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007896:	4915      	ldr	r1, [pc, #84]	@ (80078ec <xTaskIncrementTick+0x164>)
 8007898:	4613      	mov	r3, r2
 800789a:	009b      	lsls	r3, r3, #2
 800789c:	4413      	add	r3, r2
 800789e:	009b      	lsls	r3, r3, #2
 80078a0:	440b      	add	r3, r1
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	2b01      	cmp	r3, #1
 80078a6:	d901      	bls.n	80078ac <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80078a8:	2301      	movs	r3, #1
 80078aa:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80078ac:	4b11      	ldr	r3, [pc, #68]	@ (80078f4 <xTaskIncrementTick+0x16c>)
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d007      	beq.n	80078c4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80078b4:	2301      	movs	r3, #1
 80078b6:	617b      	str	r3, [r7, #20]
 80078b8:	e004      	b.n	80078c4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80078ba:	4b0f      	ldr	r3, [pc, #60]	@ (80078f8 <xTaskIncrementTick+0x170>)
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	3301      	adds	r3, #1
 80078c0:	4a0d      	ldr	r2, [pc, #52]	@ (80078f8 <xTaskIncrementTick+0x170>)
 80078c2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80078c4:	697b      	ldr	r3, [r7, #20]
}
 80078c6:	4618      	mov	r0, r3
 80078c8:	3718      	adds	r7, #24
 80078ca:	46bd      	mov	sp, r7
 80078cc:	bd80      	pop	{r7, pc}
 80078ce:	bf00      	nop
 80078d0:	200055bc 	.word	0x200055bc
 80078d4:	20005598 	.word	0x20005598
 80078d8:	2000554c 	.word	0x2000554c
 80078dc:	20005550 	.word	0x20005550
 80078e0:	200055ac 	.word	0x200055ac
 80078e4:	200055b4 	.word	0x200055b4
 80078e8:	2000559c 	.word	0x2000559c
 80078ec:	20005498 	.word	0x20005498
 80078f0:	20005494 	.word	0x20005494
 80078f4:	200055a8 	.word	0x200055a8
 80078f8:	200055a4 	.word	0x200055a4

080078fc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80078fc:	b480      	push	{r7}
 80078fe:	b087      	sub	sp, #28
 8007900:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007902:	4b2a      	ldr	r3, [pc, #168]	@ (80079ac <vTaskSwitchContext+0xb0>)
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d003      	beq.n	8007912 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800790a:	4b29      	ldr	r3, [pc, #164]	@ (80079b0 <vTaskSwitchContext+0xb4>)
 800790c:	2201      	movs	r2, #1
 800790e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007910:	e045      	b.n	800799e <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8007912:	4b27      	ldr	r3, [pc, #156]	@ (80079b0 <vTaskSwitchContext+0xb4>)
 8007914:	2200      	movs	r2, #0
 8007916:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007918:	4b26      	ldr	r3, [pc, #152]	@ (80079b4 <vTaskSwitchContext+0xb8>)
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	fab3 f383 	clz	r3, r3
 8007924:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007926:	7afb      	ldrb	r3, [r7, #11]
 8007928:	f1c3 031f 	rsb	r3, r3, #31
 800792c:	617b      	str	r3, [r7, #20]
 800792e:	4922      	ldr	r1, [pc, #136]	@ (80079b8 <vTaskSwitchContext+0xbc>)
 8007930:	697a      	ldr	r2, [r7, #20]
 8007932:	4613      	mov	r3, r2
 8007934:	009b      	lsls	r3, r3, #2
 8007936:	4413      	add	r3, r2
 8007938:	009b      	lsls	r3, r3, #2
 800793a:	440b      	add	r3, r1
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d10b      	bne.n	800795a <vTaskSwitchContext+0x5e>
	__asm volatile
 8007942:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007946:	f383 8811 	msr	BASEPRI, r3
 800794a:	f3bf 8f6f 	isb	sy
 800794e:	f3bf 8f4f 	dsb	sy
 8007952:	607b      	str	r3, [r7, #4]
}
 8007954:	bf00      	nop
 8007956:	bf00      	nop
 8007958:	e7fd      	b.n	8007956 <vTaskSwitchContext+0x5a>
 800795a:	697a      	ldr	r2, [r7, #20]
 800795c:	4613      	mov	r3, r2
 800795e:	009b      	lsls	r3, r3, #2
 8007960:	4413      	add	r3, r2
 8007962:	009b      	lsls	r3, r3, #2
 8007964:	4a14      	ldr	r2, [pc, #80]	@ (80079b8 <vTaskSwitchContext+0xbc>)
 8007966:	4413      	add	r3, r2
 8007968:	613b      	str	r3, [r7, #16]
 800796a:	693b      	ldr	r3, [r7, #16]
 800796c:	685b      	ldr	r3, [r3, #4]
 800796e:	685a      	ldr	r2, [r3, #4]
 8007970:	693b      	ldr	r3, [r7, #16]
 8007972:	605a      	str	r2, [r3, #4]
 8007974:	693b      	ldr	r3, [r7, #16]
 8007976:	685a      	ldr	r2, [r3, #4]
 8007978:	693b      	ldr	r3, [r7, #16]
 800797a:	3308      	adds	r3, #8
 800797c:	429a      	cmp	r2, r3
 800797e:	d104      	bne.n	800798a <vTaskSwitchContext+0x8e>
 8007980:	693b      	ldr	r3, [r7, #16]
 8007982:	685b      	ldr	r3, [r3, #4]
 8007984:	685a      	ldr	r2, [r3, #4]
 8007986:	693b      	ldr	r3, [r7, #16]
 8007988:	605a      	str	r2, [r3, #4]
 800798a:	693b      	ldr	r3, [r7, #16]
 800798c:	685b      	ldr	r3, [r3, #4]
 800798e:	68db      	ldr	r3, [r3, #12]
 8007990:	4a0a      	ldr	r2, [pc, #40]	@ (80079bc <vTaskSwitchContext+0xc0>)
 8007992:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007994:	4b09      	ldr	r3, [pc, #36]	@ (80079bc <vTaskSwitchContext+0xc0>)
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	334c      	adds	r3, #76	@ 0x4c
 800799a:	4a09      	ldr	r2, [pc, #36]	@ (80079c0 <vTaskSwitchContext+0xc4>)
 800799c:	6013      	str	r3, [r2, #0]
}
 800799e:	bf00      	nop
 80079a0:	371c      	adds	r7, #28
 80079a2:	46bd      	mov	sp, r7
 80079a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a8:	4770      	bx	lr
 80079aa:	bf00      	nop
 80079ac:	200055bc 	.word	0x200055bc
 80079b0:	200055a8 	.word	0x200055a8
 80079b4:	2000559c 	.word	0x2000559c
 80079b8:	20005498 	.word	0x20005498
 80079bc:	20005494 	.word	0x20005494
 80079c0:	2000013c 	.word	0x2000013c

080079c4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b084      	sub	sp, #16
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
 80079cc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d10b      	bne.n	80079ec <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80079d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079d8:	f383 8811 	msr	BASEPRI, r3
 80079dc:	f3bf 8f6f 	isb	sy
 80079e0:	f3bf 8f4f 	dsb	sy
 80079e4:	60fb      	str	r3, [r7, #12]
}
 80079e6:	bf00      	nop
 80079e8:	bf00      	nop
 80079ea:	e7fd      	b.n	80079e8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80079ec:	4b07      	ldr	r3, [pc, #28]	@ (8007a0c <vTaskPlaceOnEventList+0x48>)
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	3318      	adds	r3, #24
 80079f2:	4619      	mov	r1, r3
 80079f4:	6878      	ldr	r0, [r7, #4]
 80079f6:	f7fe fb5f 	bl	80060b8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80079fa:	2101      	movs	r1, #1
 80079fc:	6838      	ldr	r0, [r7, #0]
 80079fe:	f000 fb8d 	bl	800811c <prvAddCurrentTaskToDelayedList>
}
 8007a02:	bf00      	nop
 8007a04:	3710      	adds	r7, #16
 8007a06:	46bd      	mov	sp, r7
 8007a08:	bd80      	pop	{r7, pc}
 8007a0a:	bf00      	nop
 8007a0c:	20005494 	.word	0x20005494

08007a10 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b086      	sub	sp, #24
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	68db      	ldr	r3, [r3, #12]
 8007a1c:	68db      	ldr	r3, [r3, #12]
 8007a1e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007a20:	693b      	ldr	r3, [r7, #16]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d10b      	bne.n	8007a3e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8007a26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a2a:	f383 8811 	msr	BASEPRI, r3
 8007a2e:	f3bf 8f6f 	isb	sy
 8007a32:	f3bf 8f4f 	dsb	sy
 8007a36:	60fb      	str	r3, [r7, #12]
}
 8007a38:	bf00      	nop
 8007a3a:	bf00      	nop
 8007a3c:	e7fd      	b.n	8007a3a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007a3e:	693b      	ldr	r3, [r7, #16]
 8007a40:	3318      	adds	r3, #24
 8007a42:	4618      	mov	r0, r3
 8007a44:	f7fe fb71 	bl	800612a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007a48:	4b1d      	ldr	r3, [pc, #116]	@ (8007ac0 <xTaskRemoveFromEventList+0xb0>)
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d11c      	bne.n	8007a8a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007a50:	693b      	ldr	r3, [r7, #16]
 8007a52:	3304      	adds	r3, #4
 8007a54:	4618      	mov	r0, r3
 8007a56:	f7fe fb68 	bl	800612a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007a5a:	693b      	ldr	r3, [r7, #16]
 8007a5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a5e:	2201      	movs	r2, #1
 8007a60:	409a      	lsls	r2, r3
 8007a62:	4b18      	ldr	r3, [pc, #96]	@ (8007ac4 <xTaskRemoveFromEventList+0xb4>)
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	4313      	orrs	r3, r2
 8007a68:	4a16      	ldr	r2, [pc, #88]	@ (8007ac4 <xTaskRemoveFromEventList+0xb4>)
 8007a6a:	6013      	str	r3, [r2, #0]
 8007a6c:	693b      	ldr	r3, [r7, #16]
 8007a6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a70:	4613      	mov	r3, r2
 8007a72:	009b      	lsls	r3, r3, #2
 8007a74:	4413      	add	r3, r2
 8007a76:	009b      	lsls	r3, r3, #2
 8007a78:	4a13      	ldr	r2, [pc, #76]	@ (8007ac8 <xTaskRemoveFromEventList+0xb8>)
 8007a7a:	441a      	add	r2, r3
 8007a7c:	693b      	ldr	r3, [r7, #16]
 8007a7e:	3304      	adds	r3, #4
 8007a80:	4619      	mov	r1, r3
 8007a82:	4610      	mov	r0, r2
 8007a84:	f7fe faf4 	bl	8006070 <vListInsertEnd>
 8007a88:	e005      	b.n	8007a96 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007a8a:	693b      	ldr	r3, [r7, #16]
 8007a8c:	3318      	adds	r3, #24
 8007a8e:	4619      	mov	r1, r3
 8007a90:	480e      	ldr	r0, [pc, #56]	@ (8007acc <xTaskRemoveFromEventList+0xbc>)
 8007a92:	f7fe faed 	bl	8006070 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007a96:	693b      	ldr	r3, [r7, #16]
 8007a98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a9a:	4b0d      	ldr	r3, [pc, #52]	@ (8007ad0 <xTaskRemoveFromEventList+0xc0>)
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007aa0:	429a      	cmp	r2, r3
 8007aa2:	d905      	bls.n	8007ab0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007aa4:	2301      	movs	r3, #1
 8007aa6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007aa8:	4b0a      	ldr	r3, [pc, #40]	@ (8007ad4 <xTaskRemoveFromEventList+0xc4>)
 8007aaa:	2201      	movs	r2, #1
 8007aac:	601a      	str	r2, [r3, #0]
 8007aae:	e001      	b.n	8007ab4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007ab0:	2300      	movs	r3, #0
 8007ab2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007ab4:	697b      	ldr	r3, [r7, #20]
}
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	3718      	adds	r7, #24
 8007aba:	46bd      	mov	sp, r7
 8007abc:	bd80      	pop	{r7, pc}
 8007abe:	bf00      	nop
 8007ac0:	200055bc 	.word	0x200055bc
 8007ac4:	2000559c 	.word	0x2000559c
 8007ac8:	20005498 	.word	0x20005498
 8007acc:	20005554 	.word	0x20005554
 8007ad0:	20005494 	.word	0x20005494
 8007ad4:	200055a8 	.word	0x200055a8

08007ad8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007ad8:	b480      	push	{r7}
 8007ada:	b083      	sub	sp, #12
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007ae0:	4b06      	ldr	r3, [pc, #24]	@ (8007afc <vTaskInternalSetTimeOutState+0x24>)
 8007ae2:	681a      	ldr	r2, [r3, #0]
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007ae8:	4b05      	ldr	r3, [pc, #20]	@ (8007b00 <vTaskInternalSetTimeOutState+0x28>)
 8007aea:	681a      	ldr	r2, [r3, #0]
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	605a      	str	r2, [r3, #4]
}
 8007af0:	bf00      	nop
 8007af2:	370c      	adds	r7, #12
 8007af4:	46bd      	mov	sp, r7
 8007af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afa:	4770      	bx	lr
 8007afc:	200055ac 	.word	0x200055ac
 8007b00:	20005598 	.word	0x20005598

08007b04 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007b04:	b580      	push	{r7, lr}
 8007b06:	b088      	sub	sp, #32
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
 8007b0c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d10b      	bne.n	8007b2c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8007b14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b18:	f383 8811 	msr	BASEPRI, r3
 8007b1c:	f3bf 8f6f 	isb	sy
 8007b20:	f3bf 8f4f 	dsb	sy
 8007b24:	613b      	str	r3, [r7, #16]
}
 8007b26:	bf00      	nop
 8007b28:	bf00      	nop
 8007b2a:	e7fd      	b.n	8007b28 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007b2c:	683b      	ldr	r3, [r7, #0]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d10b      	bne.n	8007b4a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8007b32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b36:	f383 8811 	msr	BASEPRI, r3
 8007b3a:	f3bf 8f6f 	isb	sy
 8007b3e:	f3bf 8f4f 	dsb	sy
 8007b42:	60fb      	str	r3, [r7, #12]
}
 8007b44:	bf00      	nop
 8007b46:	bf00      	nop
 8007b48:	e7fd      	b.n	8007b46 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8007b4a:	f000 fc7d 	bl	8008448 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007b4e:	4b1d      	ldr	r3, [pc, #116]	@ (8007bc4 <xTaskCheckForTimeOut+0xc0>)
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	685b      	ldr	r3, [r3, #4]
 8007b58:	69ba      	ldr	r2, [r7, #24]
 8007b5a:	1ad3      	subs	r3, r2, r3
 8007b5c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007b5e:	683b      	ldr	r3, [r7, #0]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b66:	d102      	bne.n	8007b6e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007b68:	2300      	movs	r3, #0
 8007b6a:	61fb      	str	r3, [r7, #28]
 8007b6c:	e023      	b.n	8007bb6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681a      	ldr	r2, [r3, #0]
 8007b72:	4b15      	ldr	r3, [pc, #84]	@ (8007bc8 <xTaskCheckForTimeOut+0xc4>)
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	429a      	cmp	r2, r3
 8007b78:	d007      	beq.n	8007b8a <xTaskCheckForTimeOut+0x86>
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	685b      	ldr	r3, [r3, #4]
 8007b7e:	69ba      	ldr	r2, [r7, #24]
 8007b80:	429a      	cmp	r2, r3
 8007b82:	d302      	bcc.n	8007b8a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007b84:	2301      	movs	r3, #1
 8007b86:	61fb      	str	r3, [r7, #28]
 8007b88:	e015      	b.n	8007bb6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007b8a:	683b      	ldr	r3, [r7, #0]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	697a      	ldr	r2, [r7, #20]
 8007b90:	429a      	cmp	r2, r3
 8007b92:	d20b      	bcs.n	8007bac <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007b94:	683b      	ldr	r3, [r7, #0]
 8007b96:	681a      	ldr	r2, [r3, #0]
 8007b98:	697b      	ldr	r3, [r7, #20]
 8007b9a:	1ad2      	subs	r2, r2, r3
 8007b9c:	683b      	ldr	r3, [r7, #0]
 8007b9e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007ba0:	6878      	ldr	r0, [r7, #4]
 8007ba2:	f7ff ff99 	bl	8007ad8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	61fb      	str	r3, [r7, #28]
 8007baa:	e004      	b.n	8007bb6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	2200      	movs	r2, #0
 8007bb0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007bb2:	2301      	movs	r3, #1
 8007bb4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007bb6:	f000 fc79 	bl	80084ac <vPortExitCritical>

	return xReturn;
 8007bba:	69fb      	ldr	r3, [r7, #28]
}
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	3720      	adds	r7, #32
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	bd80      	pop	{r7, pc}
 8007bc4:	20005598 	.word	0x20005598
 8007bc8:	200055ac 	.word	0x200055ac

08007bcc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007bcc:	b480      	push	{r7}
 8007bce:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007bd0:	4b03      	ldr	r3, [pc, #12]	@ (8007be0 <vTaskMissedYield+0x14>)
 8007bd2:	2201      	movs	r2, #1
 8007bd4:	601a      	str	r2, [r3, #0]
}
 8007bd6:	bf00      	nop
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bde:	4770      	bx	lr
 8007be0:	200055a8 	.word	0x200055a8

08007be4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007be4:	b580      	push	{r7, lr}
 8007be6:	b082      	sub	sp, #8
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007bec:	f000 f852 	bl	8007c94 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007bf0:	4b06      	ldr	r3, [pc, #24]	@ (8007c0c <prvIdleTask+0x28>)
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	2b01      	cmp	r3, #1
 8007bf6:	d9f9      	bls.n	8007bec <prvIdleTask+0x8>
			{
				taskYIELD();
 8007bf8:	4b05      	ldr	r3, [pc, #20]	@ (8007c10 <prvIdleTask+0x2c>)
 8007bfa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007bfe:	601a      	str	r2, [r3, #0]
 8007c00:	f3bf 8f4f 	dsb	sy
 8007c04:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007c08:	e7f0      	b.n	8007bec <prvIdleTask+0x8>
 8007c0a:	bf00      	nop
 8007c0c:	20005498 	.word	0x20005498
 8007c10:	e000ed04 	.word	0xe000ed04

08007c14 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b082      	sub	sp, #8
 8007c18:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	607b      	str	r3, [r7, #4]
 8007c1e:	e00c      	b.n	8007c3a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007c20:	687a      	ldr	r2, [r7, #4]
 8007c22:	4613      	mov	r3, r2
 8007c24:	009b      	lsls	r3, r3, #2
 8007c26:	4413      	add	r3, r2
 8007c28:	009b      	lsls	r3, r3, #2
 8007c2a:	4a12      	ldr	r2, [pc, #72]	@ (8007c74 <prvInitialiseTaskLists+0x60>)
 8007c2c:	4413      	add	r3, r2
 8007c2e:	4618      	mov	r0, r3
 8007c30:	f7fe f9f1 	bl	8006016 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	3301      	adds	r3, #1
 8007c38:	607b      	str	r3, [r7, #4]
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	2b06      	cmp	r3, #6
 8007c3e:	d9ef      	bls.n	8007c20 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007c40:	480d      	ldr	r0, [pc, #52]	@ (8007c78 <prvInitialiseTaskLists+0x64>)
 8007c42:	f7fe f9e8 	bl	8006016 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007c46:	480d      	ldr	r0, [pc, #52]	@ (8007c7c <prvInitialiseTaskLists+0x68>)
 8007c48:	f7fe f9e5 	bl	8006016 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007c4c:	480c      	ldr	r0, [pc, #48]	@ (8007c80 <prvInitialiseTaskLists+0x6c>)
 8007c4e:	f7fe f9e2 	bl	8006016 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007c52:	480c      	ldr	r0, [pc, #48]	@ (8007c84 <prvInitialiseTaskLists+0x70>)
 8007c54:	f7fe f9df 	bl	8006016 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007c58:	480b      	ldr	r0, [pc, #44]	@ (8007c88 <prvInitialiseTaskLists+0x74>)
 8007c5a:	f7fe f9dc 	bl	8006016 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007c5e:	4b0b      	ldr	r3, [pc, #44]	@ (8007c8c <prvInitialiseTaskLists+0x78>)
 8007c60:	4a05      	ldr	r2, [pc, #20]	@ (8007c78 <prvInitialiseTaskLists+0x64>)
 8007c62:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007c64:	4b0a      	ldr	r3, [pc, #40]	@ (8007c90 <prvInitialiseTaskLists+0x7c>)
 8007c66:	4a05      	ldr	r2, [pc, #20]	@ (8007c7c <prvInitialiseTaskLists+0x68>)
 8007c68:	601a      	str	r2, [r3, #0]
}
 8007c6a:	bf00      	nop
 8007c6c:	3708      	adds	r7, #8
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	bd80      	pop	{r7, pc}
 8007c72:	bf00      	nop
 8007c74:	20005498 	.word	0x20005498
 8007c78:	20005524 	.word	0x20005524
 8007c7c:	20005538 	.word	0x20005538
 8007c80:	20005554 	.word	0x20005554
 8007c84:	20005568 	.word	0x20005568
 8007c88:	20005580 	.word	0x20005580
 8007c8c:	2000554c 	.word	0x2000554c
 8007c90:	20005550 	.word	0x20005550

08007c94 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b082      	sub	sp, #8
 8007c98:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007c9a:	e019      	b.n	8007cd0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007c9c:	f000 fbd4 	bl	8008448 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ca0:	4b10      	ldr	r3, [pc, #64]	@ (8007ce4 <prvCheckTasksWaitingTermination+0x50>)
 8007ca2:	68db      	ldr	r3, [r3, #12]
 8007ca4:	68db      	ldr	r3, [r3, #12]
 8007ca6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	3304      	adds	r3, #4
 8007cac:	4618      	mov	r0, r3
 8007cae:	f7fe fa3c 	bl	800612a <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007cb2:	4b0d      	ldr	r3, [pc, #52]	@ (8007ce8 <prvCheckTasksWaitingTermination+0x54>)
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	3b01      	subs	r3, #1
 8007cb8:	4a0b      	ldr	r2, [pc, #44]	@ (8007ce8 <prvCheckTasksWaitingTermination+0x54>)
 8007cba:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007cbc:	4b0b      	ldr	r3, [pc, #44]	@ (8007cec <prvCheckTasksWaitingTermination+0x58>)
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	3b01      	subs	r3, #1
 8007cc2:	4a0a      	ldr	r2, [pc, #40]	@ (8007cec <prvCheckTasksWaitingTermination+0x58>)
 8007cc4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007cc6:	f000 fbf1 	bl	80084ac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007cca:	6878      	ldr	r0, [r7, #4]
 8007ccc:	f000 f810 	bl	8007cf0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007cd0:	4b06      	ldr	r3, [pc, #24]	@ (8007cec <prvCheckTasksWaitingTermination+0x58>)
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d1e1      	bne.n	8007c9c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007cd8:	bf00      	nop
 8007cda:	bf00      	nop
 8007cdc:	3708      	adds	r7, #8
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	bd80      	pop	{r7, pc}
 8007ce2:	bf00      	nop
 8007ce4:	20005568 	.word	0x20005568
 8007ce8:	20005594 	.word	0x20005594
 8007cec:	2000557c 	.word	0x2000557c

08007cf0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b084      	sub	sp, #16
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	334c      	adds	r3, #76	@ 0x4c
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	f00e fbbf 	bl	8016480 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d108      	bne.n	8007d1e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d10:	4618      	mov	r0, r3
 8007d12:	f000 fd89 	bl	8008828 <vPortFree>
				vPortFree( pxTCB );
 8007d16:	6878      	ldr	r0, [r7, #4]
 8007d18:	f000 fd86 	bl	8008828 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007d1c:	e019      	b.n	8007d52 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8007d24:	2b01      	cmp	r3, #1
 8007d26:	d103      	bne.n	8007d30 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007d28:	6878      	ldr	r0, [r7, #4]
 8007d2a:	f000 fd7d 	bl	8008828 <vPortFree>
	}
 8007d2e:	e010      	b.n	8007d52 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8007d36:	2b02      	cmp	r3, #2
 8007d38:	d00b      	beq.n	8007d52 <prvDeleteTCB+0x62>
	__asm volatile
 8007d3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d3e:	f383 8811 	msr	BASEPRI, r3
 8007d42:	f3bf 8f6f 	isb	sy
 8007d46:	f3bf 8f4f 	dsb	sy
 8007d4a:	60fb      	str	r3, [r7, #12]
}
 8007d4c:	bf00      	nop
 8007d4e:	bf00      	nop
 8007d50:	e7fd      	b.n	8007d4e <prvDeleteTCB+0x5e>
	}
 8007d52:	bf00      	nop
 8007d54:	3710      	adds	r7, #16
 8007d56:	46bd      	mov	sp, r7
 8007d58:	bd80      	pop	{r7, pc}
	...

08007d5c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007d5c:	b480      	push	{r7}
 8007d5e:	b083      	sub	sp, #12
 8007d60:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007d62:	4b0c      	ldr	r3, [pc, #48]	@ (8007d94 <prvResetNextTaskUnblockTime+0x38>)
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d104      	bne.n	8007d76 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007d6c:	4b0a      	ldr	r3, [pc, #40]	@ (8007d98 <prvResetNextTaskUnblockTime+0x3c>)
 8007d6e:	f04f 32ff 	mov.w	r2, #4294967295
 8007d72:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007d74:	e008      	b.n	8007d88 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d76:	4b07      	ldr	r3, [pc, #28]	@ (8007d94 <prvResetNextTaskUnblockTime+0x38>)
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	68db      	ldr	r3, [r3, #12]
 8007d7c:	68db      	ldr	r3, [r3, #12]
 8007d7e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	685b      	ldr	r3, [r3, #4]
 8007d84:	4a04      	ldr	r2, [pc, #16]	@ (8007d98 <prvResetNextTaskUnblockTime+0x3c>)
 8007d86:	6013      	str	r3, [r2, #0]
}
 8007d88:	bf00      	nop
 8007d8a:	370c      	adds	r7, #12
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d92:	4770      	bx	lr
 8007d94:	2000554c 	.word	0x2000554c
 8007d98:	200055b4 	.word	0x200055b4

08007d9c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007d9c:	b480      	push	{r7}
 8007d9e:	b083      	sub	sp, #12
 8007da0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007da2:	4b0b      	ldr	r3, [pc, #44]	@ (8007dd0 <xTaskGetSchedulerState+0x34>)
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d102      	bne.n	8007db0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007daa:	2301      	movs	r3, #1
 8007dac:	607b      	str	r3, [r7, #4]
 8007dae:	e008      	b.n	8007dc2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007db0:	4b08      	ldr	r3, [pc, #32]	@ (8007dd4 <xTaskGetSchedulerState+0x38>)
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d102      	bne.n	8007dbe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007db8:	2302      	movs	r3, #2
 8007dba:	607b      	str	r3, [r7, #4]
 8007dbc:	e001      	b.n	8007dc2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007dc2:	687b      	ldr	r3, [r7, #4]
	}
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	370c      	adds	r7, #12
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dce:	4770      	bx	lr
 8007dd0:	200055a0 	.word	0x200055a0
 8007dd4:	200055bc 	.word	0x200055bc

08007dd8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007dd8:	b580      	push	{r7, lr}
 8007dda:	b084      	sub	sp, #16
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007de4:	2300      	movs	r3, #0
 8007de6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d05e      	beq.n	8007eac <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007dee:	68bb      	ldr	r3, [r7, #8]
 8007df0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007df2:	4b31      	ldr	r3, [pc, #196]	@ (8007eb8 <xTaskPriorityInherit+0xe0>)
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007df8:	429a      	cmp	r2, r3
 8007dfa:	d24e      	bcs.n	8007e9a <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007dfc:	68bb      	ldr	r3, [r7, #8]
 8007dfe:	699b      	ldr	r3, [r3, #24]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	db06      	blt.n	8007e12 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007e04:	4b2c      	ldr	r3, [pc, #176]	@ (8007eb8 <xTaskPriorityInherit+0xe0>)
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e0a:	f1c3 0207 	rsb	r2, r3, #7
 8007e0e:	68bb      	ldr	r3, [r7, #8]
 8007e10:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007e12:	68bb      	ldr	r3, [r7, #8]
 8007e14:	6959      	ldr	r1, [r3, #20]
 8007e16:	68bb      	ldr	r3, [r7, #8]
 8007e18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e1a:	4613      	mov	r3, r2
 8007e1c:	009b      	lsls	r3, r3, #2
 8007e1e:	4413      	add	r3, r2
 8007e20:	009b      	lsls	r3, r3, #2
 8007e22:	4a26      	ldr	r2, [pc, #152]	@ (8007ebc <xTaskPriorityInherit+0xe4>)
 8007e24:	4413      	add	r3, r2
 8007e26:	4299      	cmp	r1, r3
 8007e28:	d12f      	bne.n	8007e8a <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007e2a:	68bb      	ldr	r3, [r7, #8]
 8007e2c:	3304      	adds	r3, #4
 8007e2e:	4618      	mov	r0, r3
 8007e30:	f7fe f97b 	bl	800612a <uxListRemove>
 8007e34:	4603      	mov	r3, r0
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d10a      	bne.n	8007e50 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8007e3a:	68bb      	ldr	r3, [r7, #8]
 8007e3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e3e:	2201      	movs	r2, #1
 8007e40:	fa02 f303 	lsl.w	r3, r2, r3
 8007e44:	43da      	mvns	r2, r3
 8007e46:	4b1e      	ldr	r3, [pc, #120]	@ (8007ec0 <xTaskPriorityInherit+0xe8>)
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	4013      	ands	r3, r2
 8007e4c:	4a1c      	ldr	r2, [pc, #112]	@ (8007ec0 <xTaskPriorityInherit+0xe8>)
 8007e4e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007e50:	4b19      	ldr	r3, [pc, #100]	@ (8007eb8 <xTaskPriorityInherit+0xe0>)
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e56:	68bb      	ldr	r3, [r7, #8]
 8007e58:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007e5a:	68bb      	ldr	r3, [r7, #8]
 8007e5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e5e:	2201      	movs	r2, #1
 8007e60:	409a      	lsls	r2, r3
 8007e62:	4b17      	ldr	r3, [pc, #92]	@ (8007ec0 <xTaskPriorityInherit+0xe8>)
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	4313      	orrs	r3, r2
 8007e68:	4a15      	ldr	r2, [pc, #84]	@ (8007ec0 <xTaskPriorityInherit+0xe8>)
 8007e6a:	6013      	str	r3, [r2, #0]
 8007e6c:	68bb      	ldr	r3, [r7, #8]
 8007e6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e70:	4613      	mov	r3, r2
 8007e72:	009b      	lsls	r3, r3, #2
 8007e74:	4413      	add	r3, r2
 8007e76:	009b      	lsls	r3, r3, #2
 8007e78:	4a10      	ldr	r2, [pc, #64]	@ (8007ebc <xTaskPriorityInherit+0xe4>)
 8007e7a:	441a      	add	r2, r3
 8007e7c:	68bb      	ldr	r3, [r7, #8]
 8007e7e:	3304      	adds	r3, #4
 8007e80:	4619      	mov	r1, r3
 8007e82:	4610      	mov	r0, r2
 8007e84:	f7fe f8f4 	bl	8006070 <vListInsertEnd>
 8007e88:	e004      	b.n	8007e94 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007e8a:	4b0b      	ldr	r3, [pc, #44]	@ (8007eb8 <xTaskPriorityInherit+0xe0>)
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e90:	68bb      	ldr	r3, [r7, #8]
 8007e92:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007e94:	2301      	movs	r3, #1
 8007e96:	60fb      	str	r3, [r7, #12]
 8007e98:	e008      	b.n	8007eac <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007e9a:	68bb      	ldr	r3, [r7, #8]
 8007e9c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007e9e:	4b06      	ldr	r3, [pc, #24]	@ (8007eb8 <xTaskPriorityInherit+0xe0>)
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ea4:	429a      	cmp	r2, r3
 8007ea6:	d201      	bcs.n	8007eac <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007ea8:	2301      	movs	r3, #1
 8007eaa:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007eac:	68fb      	ldr	r3, [r7, #12]
	}
 8007eae:	4618      	mov	r0, r3
 8007eb0:	3710      	adds	r7, #16
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	bd80      	pop	{r7, pc}
 8007eb6:	bf00      	nop
 8007eb8:	20005494 	.word	0x20005494
 8007ebc:	20005498 	.word	0x20005498
 8007ec0:	2000559c 	.word	0x2000559c

08007ec4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	b086      	sub	sp, #24
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007ed0:	2300      	movs	r3, #0
 8007ed2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d070      	beq.n	8007fbc <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007eda:	4b3b      	ldr	r3, [pc, #236]	@ (8007fc8 <xTaskPriorityDisinherit+0x104>)
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	693a      	ldr	r2, [r7, #16]
 8007ee0:	429a      	cmp	r2, r3
 8007ee2:	d00b      	beq.n	8007efc <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8007ee4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ee8:	f383 8811 	msr	BASEPRI, r3
 8007eec:	f3bf 8f6f 	isb	sy
 8007ef0:	f3bf 8f4f 	dsb	sy
 8007ef4:	60fb      	str	r3, [r7, #12]
}
 8007ef6:	bf00      	nop
 8007ef8:	bf00      	nop
 8007efa:	e7fd      	b.n	8007ef8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007efc:	693b      	ldr	r3, [r7, #16]
 8007efe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d10b      	bne.n	8007f1c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8007f04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f08:	f383 8811 	msr	BASEPRI, r3
 8007f0c:	f3bf 8f6f 	isb	sy
 8007f10:	f3bf 8f4f 	dsb	sy
 8007f14:	60bb      	str	r3, [r7, #8]
}
 8007f16:	bf00      	nop
 8007f18:	bf00      	nop
 8007f1a:	e7fd      	b.n	8007f18 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8007f1c:	693b      	ldr	r3, [r7, #16]
 8007f1e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007f20:	1e5a      	subs	r2, r3, #1
 8007f22:	693b      	ldr	r3, [r7, #16]
 8007f24:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007f26:	693b      	ldr	r3, [r7, #16]
 8007f28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f2a:	693b      	ldr	r3, [r7, #16]
 8007f2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f2e:	429a      	cmp	r2, r3
 8007f30:	d044      	beq.n	8007fbc <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007f32:	693b      	ldr	r3, [r7, #16]
 8007f34:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d140      	bne.n	8007fbc <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007f3a:	693b      	ldr	r3, [r7, #16]
 8007f3c:	3304      	adds	r3, #4
 8007f3e:	4618      	mov	r0, r3
 8007f40:	f7fe f8f3 	bl	800612a <uxListRemove>
 8007f44:	4603      	mov	r3, r0
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d115      	bne.n	8007f76 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007f4a:	693b      	ldr	r3, [r7, #16]
 8007f4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f4e:	491f      	ldr	r1, [pc, #124]	@ (8007fcc <xTaskPriorityDisinherit+0x108>)
 8007f50:	4613      	mov	r3, r2
 8007f52:	009b      	lsls	r3, r3, #2
 8007f54:	4413      	add	r3, r2
 8007f56:	009b      	lsls	r3, r3, #2
 8007f58:	440b      	add	r3, r1
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d10a      	bne.n	8007f76 <xTaskPriorityDisinherit+0xb2>
 8007f60:	693b      	ldr	r3, [r7, #16]
 8007f62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f64:	2201      	movs	r2, #1
 8007f66:	fa02 f303 	lsl.w	r3, r2, r3
 8007f6a:	43da      	mvns	r2, r3
 8007f6c:	4b18      	ldr	r3, [pc, #96]	@ (8007fd0 <xTaskPriorityDisinherit+0x10c>)
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	4013      	ands	r3, r2
 8007f72:	4a17      	ldr	r2, [pc, #92]	@ (8007fd0 <xTaskPriorityDisinherit+0x10c>)
 8007f74:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007f76:	693b      	ldr	r3, [r7, #16]
 8007f78:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007f7a:	693b      	ldr	r3, [r7, #16]
 8007f7c:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f7e:	693b      	ldr	r3, [r7, #16]
 8007f80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f82:	f1c3 0207 	rsb	r2, r3, #7
 8007f86:	693b      	ldr	r3, [r7, #16]
 8007f88:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007f8a:	693b      	ldr	r3, [r7, #16]
 8007f8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f8e:	2201      	movs	r2, #1
 8007f90:	409a      	lsls	r2, r3
 8007f92:	4b0f      	ldr	r3, [pc, #60]	@ (8007fd0 <xTaskPriorityDisinherit+0x10c>)
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	4313      	orrs	r3, r2
 8007f98:	4a0d      	ldr	r2, [pc, #52]	@ (8007fd0 <xTaskPriorityDisinherit+0x10c>)
 8007f9a:	6013      	str	r3, [r2, #0]
 8007f9c:	693b      	ldr	r3, [r7, #16]
 8007f9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007fa0:	4613      	mov	r3, r2
 8007fa2:	009b      	lsls	r3, r3, #2
 8007fa4:	4413      	add	r3, r2
 8007fa6:	009b      	lsls	r3, r3, #2
 8007fa8:	4a08      	ldr	r2, [pc, #32]	@ (8007fcc <xTaskPriorityDisinherit+0x108>)
 8007faa:	441a      	add	r2, r3
 8007fac:	693b      	ldr	r3, [r7, #16]
 8007fae:	3304      	adds	r3, #4
 8007fb0:	4619      	mov	r1, r3
 8007fb2:	4610      	mov	r0, r2
 8007fb4:	f7fe f85c 	bl	8006070 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007fb8:	2301      	movs	r3, #1
 8007fba:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007fbc:	697b      	ldr	r3, [r7, #20]
	}
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	3718      	adds	r7, #24
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	bd80      	pop	{r7, pc}
 8007fc6:	bf00      	nop
 8007fc8:	20005494 	.word	0x20005494
 8007fcc:	20005498 	.word	0x20005498
 8007fd0:	2000559c 	.word	0x2000559c

08007fd4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	b088      	sub	sp, #32
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	6078      	str	r0, [r7, #4]
 8007fdc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007fe2:	2301      	movs	r3, #1
 8007fe4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d079      	beq.n	80080e0 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007fec:	69bb      	ldr	r3, [r7, #24]
 8007fee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d10b      	bne.n	800800c <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8007ff4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ff8:	f383 8811 	msr	BASEPRI, r3
 8007ffc:	f3bf 8f6f 	isb	sy
 8008000:	f3bf 8f4f 	dsb	sy
 8008004:	60fb      	str	r3, [r7, #12]
}
 8008006:	bf00      	nop
 8008008:	bf00      	nop
 800800a:	e7fd      	b.n	8008008 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800800c:	69bb      	ldr	r3, [r7, #24]
 800800e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008010:	683a      	ldr	r2, [r7, #0]
 8008012:	429a      	cmp	r2, r3
 8008014:	d902      	bls.n	800801c <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008016:	683b      	ldr	r3, [r7, #0]
 8008018:	61fb      	str	r3, [r7, #28]
 800801a:	e002      	b.n	8008022 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800801c:	69bb      	ldr	r3, [r7, #24]
 800801e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008020:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008022:	69bb      	ldr	r3, [r7, #24]
 8008024:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008026:	69fa      	ldr	r2, [r7, #28]
 8008028:	429a      	cmp	r2, r3
 800802a:	d059      	beq.n	80080e0 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800802c:	69bb      	ldr	r3, [r7, #24]
 800802e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008030:	697a      	ldr	r2, [r7, #20]
 8008032:	429a      	cmp	r2, r3
 8008034:	d154      	bne.n	80080e0 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008036:	4b2c      	ldr	r3, [pc, #176]	@ (80080e8 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	69ba      	ldr	r2, [r7, #24]
 800803c:	429a      	cmp	r2, r3
 800803e:	d10b      	bne.n	8008058 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8008040:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008044:	f383 8811 	msr	BASEPRI, r3
 8008048:	f3bf 8f6f 	isb	sy
 800804c:	f3bf 8f4f 	dsb	sy
 8008050:	60bb      	str	r3, [r7, #8]
}
 8008052:	bf00      	nop
 8008054:	bf00      	nop
 8008056:	e7fd      	b.n	8008054 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008058:	69bb      	ldr	r3, [r7, #24]
 800805a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800805c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800805e:	69bb      	ldr	r3, [r7, #24]
 8008060:	69fa      	ldr	r2, [r7, #28]
 8008062:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008064:	69bb      	ldr	r3, [r7, #24]
 8008066:	699b      	ldr	r3, [r3, #24]
 8008068:	2b00      	cmp	r3, #0
 800806a:	db04      	blt.n	8008076 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800806c:	69fb      	ldr	r3, [r7, #28]
 800806e:	f1c3 0207 	rsb	r2, r3, #7
 8008072:	69bb      	ldr	r3, [r7, #24]
 8008074:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008076:	69bb      	ldr	r3, [r7, #24]
 8008078:	6959      	ldr	r1, [r3, #20]
 800807a:	693a      	ldr	r2, [r7, #16]
 800807c:	4613      	mov	r3, r2
 800807e:	009b      	lsls	r3, r3, #2
 8008080:	4413      	add	r3, r2
 8008082:	009b      	lsls	r3, r3, #2
 8008084:	4a19      	ldr	r2, [pc, #100]	@ (80080ec <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8008086:	4413      	add	r3, r2
 8008088:	4299      	cmp	r1, r3
 800808a:	d129      	bne.n	80080e0 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800808c:	69bb      	ldr	r3, [r7, #24]
 800808e:	3304      	adds	r3, #4
 8008090:	4618      	mov	r0, r3
 8008092:	f7fe f84a 	bl	800612a <uxListRemove>
 8008096:	4603      	mov	r3, r0
 8008098:	2b00      	cmp	r3, #0
 800809a:	d10a      	bne.n	80080b2 <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800809c:	69bb      	ldr	r3, [r7, #24]
 800809e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080a0:	2201      	movs	r2, #1
 80080a2:	fa02 f303 	lsl.w	r3, r2, r3
 80080a6:	43da      	mvns	r2, r3
 80080a8:	4b11      	ldr	r3, [pc, #68]	@ (80080f0 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	4013      	ands	r3, r2
 80080ae:	4a10      	ldr	r2, [pc, #64]	@ (80080f0 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80080b0:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80080b2:	69bb      	ldr	r3, [r7, #24]
 80080b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080b6:	2201      	movs	r2, #1
 80080b8:	409a      	lsls	r2, r3
 80080ba:	4b0d      	ldr	r3, [pc, #52]	@ (80080f0 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	4313      	orrs	r3, r2
 80080c0:	4a0b      	ldr	r2, [pc, #44]	@ (80080f0 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80080c2:	6013      	str	r3, [r2, #0]
 80080c4:	69bb      	ldr	r3, [r7, #24]
 80080c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80080c8:	4613      	mov	r3, r2
 80080ca:	009b      	lsls	r3, r3, #2
 80080cc:	4413      	add	r3, r2
 80080ce:	009b      	lsls	r3, r3, #2
 80080d0:	4a06      	ldr	r2, [pc, #24]	@ (80080ec <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80080d2:	441a      	add	r2, r3
 80080d4:	69bb      	ldr	r3, [r7, #24]
 80080d6:	3304      	adds	r3, #4
 80080d8:	4619      	mov	r1, r3
 80080da:	4610      	mov	r0, r2
 80080dc:	f7fd ffc8 	bl	8006070 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80080e0:	bf00      	nop
 80080e2:	3720      	adds	r7, #32
 80080e4:	46bd      	mov	sp, r7
 80080e6:	bd80      	pop	{r7, pc}
 80080e8:	20005494 	.word	0x20005494
 80080ec:	20005498 	.word	0x20005498
 80080f0:	2000559c 	.word	0x2000559c

080080f4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80080f4:	b480      	push	{r7}
 80080f6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80080f8:	4b07      	ldr	r3, [pc, #28]	@ (8008118 <pvTaskIncrementMutexHeldCount+0x24>)
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d004      	beq.n	800810a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008100:	4b05      	ldr	r3, [pc, #20]	@ (8008118 <pvTaskIncrementMutexHeldCount+0x24>)
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008106:	3201      	adds	r2, #1
 8008108:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 800810a:	4b03      	ldr	r3, [pc, #12]	@ (8008118 <pvTaskIncrementMutexHeldCount+0x24>)
 800810c:	681b      	ldr	r3, [r3, #0]
	}
 800810e:	4618      	mov	r0, r3
 8008110:	46bd      	mov	sp, r7
 8008112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008116:	4770      	bx	lr
 8008118:	20005494 	.word	0x20005494

0800811c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800811c:	b580      	push	{r7, lr}
 800811e:	b084      	sub	sp, #16
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
 8008124:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008126:	4b29      	ldr	r3, [pc, #164]	@ (80081cc <prvAddCurrentTaskToDelayedList+0xb0>)
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800812c:	4b28      	ldr	r3, [pc, #160]	@ (80081d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	3304      	adds	r3, #4
 8008132:	4618      	mov	r0, r3
 8008134:	f7fd fff9 	bl	800612a <uxListRemove>
 8008138:	4603      	mov	r3, r0
 800813a:	2b00      	cmp	r3, #0
 800813c:	d10b      	bne.n	8008156 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800813e:	4b24      	ldr	r3, [pc, #144]	@ (80081d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008144:	2201      	movs	r2, #1
 8008146:	fa02 f303 	lsl.w	r3, r2, r3
 800814a:	43da      	mvns	r2, r3
 800814c:	4b21      	ldr	r3, [pc, #132]	@ (80081d4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	4013      	ands	r3, r2
 8008152:	4a20      	ldr	r2, [pc, #128]	@ (80081d4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008154:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	f1b3 3fff 	cmp.w	r3, #4294967295
 800815c:	d10a      	bne.n	8008174 <prvAddCurrentTaskToDelayedList+0x58>
 800815e:	683b      	ldr	r3, [r7, #0]
 8008160:	2b00      	cmp	r3, #0
 8008162:	d007      	beq.n	8008174 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008164:	4b1a      	ldr	r3, [pc, #104]	@ (80081d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	3304      	adds	r3, #4
 800816a:	4619      	mov	r1, r3
 800816c:	481a      	ldr	r0, [pc, #104]	@ (80081d8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800816e:	f7fd ff7f 	bl	8006070 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008172:	e026      	b.n	80081c2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008174:	68fa      	ldr	r2, [r7, #12]
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	4413      	add	r3, r2
 800817a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800817c:	4b14      	ldr	r3, [pc, #80]	@ (80081d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	68ba      	ldr	r2, [r7, #8]
 8008182:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008184:	68ba      	ldr	r2, [r7, #8]
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	429a      	cmp	r2, r3
 800818a:	d209      	bcs.n	80081a0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800818c:	4b13      	ldr	r3, [pc, #76]	@ (80081dc <prvAddCurrentTaskToDelayedList+0xc0>)
 800818e:	681a      	ldr	r2, [r3, #0]
 8008190:	4b0f      	ldr	r3, [pc, #60]	@ (80081d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	3304      	adds	r3, #4
 8008196:	4619      	mov	r1, r3
 8008198:	4610      	mov	r0, r2
 800819a:	f7fd ff8d 	bl	80060b8 <vListInsert>
}
 800819e:	e010      	b.n	80081c2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80081a0:	4b0f      	ldr	r3, [pc, #60]	@ (80081e0 <prvAddCurrentTaskToDelayedList+0xc4>)
 80081a2:	681a      	ldr	r2, [r3, #0]
 80081a4:	4b0a      	ldr	r3, [pc, #40]	@ (80081d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	3304      	adds	r3, #4
 80081aa:	4619      	mov	r1, r3
 80081ac:	4610      	mov	r0, r2
 80081ae:	f7fd ff83 	bl	80060b8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80081b2:	4b0c      	ldr	r3, [pc, #48]	@ (80081e4 <prvAddCurrentTaskToDelayedList+0xc8>)
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	68ba      	ldr	r2, [r7, #8]
 80081b8:	429a      	cmp	r2, r3
 80081ba:	d202      	bcs.n	80081c2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80081bc:	4a09      	ldr	r2, [pc, #36]	@ (80081e4 <prvAddCurrentTaskToDelayedList+0xc8>)
 80081be:	68bb      	ldr	r3, [r7, #8]
 80081c0:	6013      	str	r3, [r2, #0]
}
 80081c2:	bf00      	nop
 80081c4:	3710      	adds	r7, #16
 80081c6:	46bd      	mov	sp, r7
 80081c8:	bd80      	pop	{r7, pc}
 80081ca:	bf00      	nop
 80081cc:	20005598 	.word	0x20005598
 80081d0:	20005494 	.word	0x20005494
 80081d4:	2000559c 	.word	0x2000559c
 80081d8:	20005580 	.word	0x20005580
 80081dc:	20005550 	.word	0x20005550
 80081e0:	2000554c 	.word	0x2000554c
 80081e4:	200055b4 	.word	0x200055b4

080081e8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80081e8:	b480      	push	{r7}
 80081ea:	b085      	sub	sp, #20
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	60f8      	str	r0, [r7, #12]
 80081f0:	60b9      	str	r1, [r7, #8]
 80081f2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	3b04      	subs	r3, #4
 80081f8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8008200:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	3b04      	subs	r3, #4
 8008206:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008208:	68bb      	ldr	r3, [r7, #8]
 800820a:	f023 0201 	bic.w	r2, r3, #1
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	3b04      	subs	r3, #4
 8008216:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008218:	4a0c      	ldr	r2, [pc, #48]	@ (800824c <pxPortInitialiseStack+0x64>)
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	3b14      	subs	r3, #20
 8008222:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008224:	687a      	ldr	r2, [r7, #4]
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	3b04      	subs	r3, #4
 800822e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	f06f 0202 	mvn.w	r2, #2
 8008236:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	3b20      	subs	r3, #32
 800823c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800823e:	68fb      	ldr	r3, [r7, #12]
}
 8008240:	4618      	mov	r0, r3
 8008242:	3714      	adds	r7, #20
 8008244:	46bd      	mov	sp, r7
 8008246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824a:	4770      	bx	lr
 800824c:	08008251 	.word	0x08008251

08008250 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008250:	b480      	push	{r7}
 8008252:	b085      	sub	sp, #20
 8008254:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008256:	2300      	movs	r3, #0
 8008258:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800825a:	4b13      	ldr	r3, [pc, #76]	@ (80082a8 <prvTaskExitError+0x58>)
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008262:	d00b      	beq.n	800827c <prvTaskExitError+0x2c>
	__asm volatile
 8008264:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008268:	f383 8811 	msr	BASEPRI, r3
 800826c:	f3bf 8f6f 	isb	sy
 8008270:	f3bf 8f4f 	dsb	sy
 8008274:	60fb      	str	r3, [r7, #12]
}
 8008276:	bf00      	nop
 8008278:	bf00      	nop
 800827a:	e7fd      	b.n	8008278 <prvTaskExitError+0x28>
	__asm volatile
 800827c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008280:	f383 8811 	msr	BASEPRI, r3
 8008284:	f3bf 8f6f 	isb	sy
 8008288:	f3bf 8f4f 	dsb	sy
 800828c:	60bb      	str	r3, [r7, #8]
}
 800828e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008290:	bf00      	nop
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	2b00      	cmp	r3, #0
 8008296:	d0fc      	beq.n	8008292 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008298:	bf00      	nop
 800829a:	bf00      	nop
 800829c:	3714      	adds	r7, #20
 800829e:	46bd      	mov	sp, r7
 80082a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a4:	4770      	bx	lr
 80082a6:	bf00      	nop
 80082a8:	20000120 	.word	0x20000120
 80082ac:	00000000 	.word	0x00000000

080082b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80082b0:	4b07      	ldr	r3, [pc, #28]	@ (80082d0 <pxCurrentTCBConst2>)
 80082b2:	6819      	ldr	r1, [r3, #0]
 80082b4:	6808      	ldr	r0, [r1, #0]
 80082b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082ba:	f380 8809 	msr	PSP, r0
 80082be:	f3bf 8f6f 	isb	sy
 80082c2:	f04f 0000 	mov.w	r0, #0
 80082c6:	f380 8811 	msr	BASEPRI, r0
 80082ca:	4770      	bx	lr
 80082cc:	f3af 8000 	nop.w

080082d0 <pxCurrentTCBConst2>:
 80082d0:	20005494 	.word	0x20005494
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80082d4:	bf00      	nop
 80082d6:	bf00      	nop

080082d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80082d8:	4808      	ldr	r0, [pc, #32]	@ (80082fc <prvPortStartFirstTask+0x24>)
 80082da:	6800      	ldr	r0, [r0, #0]
 80082dc:	6800      	ldr	r0, [r0, #0]
 80082de:	f380 8808 	msr	MSP, r0
 80082e2:	f04f 0000 	mov.w	r0, #0
 80082e6:	f380 8814 	msr	CONTROL, r0
 80082ea:	b662      	cpsie	i
 80082ec:	b661      	cpsie	f
 80082ee:	f3bf 8f4f 	dsb	sy
 80082f2:	f3bf 8f6f 	isb	sy
 80082f6:	df00      	svc	0
 80082f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80082fa:	bf00      	nop
 80082fc:	e000ed08 	.word	0xe000ed08

08008300 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008300:	b580      	push	{r7, lr}
 8008302:	b086      	sub	sp, #24
 8008304:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008306:	4b47      	ldr	r3, [pc, #284]	@ (8008424 <xPortStartScheduler+0x124>)
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	4a47      	ldr	r2, [pc, #284]	@ (8008428 <xPortStartScheduler+0x128>)
 800830c:	4293      	cmp	r3, r2
 800830e:	d10b      	bne.n	8008328 <xPortStartScheduler+0x28>
	__asm volatile
 8008310:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008314:	f383 8811 	msr	BASEPRI, r3
 8008318:	f3bf 8f6f 	isb	sy
 800831c:	f3bf 8f4f 	dsb	sy
 8008320:	613b      	str	r3, [r7, #16]
}
 8008322:	bf00      	nop
 8008324:	bf00      	nop
 8008326:	e7fd      	b.n	8008324 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008328:	4b3e      	ldr	r3, [pc, #248]	@ (8008424 <xPortStartScheduler+0x124>)
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	4a3f      	ldr	r2, [pc, #252]	@ (800842c <xPortStartScheduler+0x12c>)
 800832e:	4293      	cmp	r3, r2
 8008330:	d10b      	bne.n	800834a <xPortStartScheduler+0x4a>
	__asm volatile
 8008332:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008336:	f383 8811 	msr	BASEPRI, r3
 800833a:	f3bf 8f6f 	isb	sy
 800833e:	f3bf 8f4f 	dsb	sy
 8008342:	60fb      	str	r3, [r7, #12]
}
 8008344:	bf00      	nop
 8008346:	bf00      	nop
 8008348:	e7fd      	b.n	8008346 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800834a:	4b39      	ldr	r3, [pc, #228]	@ (8008430 <xPortStartScheduler+0x130>)
 800834c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800834e:	697b      	ldr	r3, [r7, #20]
 8008350:	781b      	ldrb	r3, [r3, #0]
 8008352:	b2db      	uxtb	r3, r3
 8008354:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008356:	697b      	ldr	r3, [r7, #20]
 8008358:	22ff      	movs	r2, #255	@ 0xff
 800835a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800835c:	697b      	ldr	r3, [r7, #20]
 800835e:	781b      	ldrb	r3, [r3, #0]
 8008360:	b2db      	uxtb	r3, r3
 8008362:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008364:	78fb      	ldrb	r3, [r7, #3]
 8008366:	b2db      	uxtb	r3, r3
 8008368:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800836c:	b2da      	uxtb	r2, r3
 800836e:	4b31      	ldr	r3, [pc, #196]	@ (8008434 <xPortStartScheduler+0x134>)
 8008370:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008372:	4b31      	ldr	r3, [pc, #196]	@ (8008438 <xPortStartScheduler+0x138>)
 8008374:	2207      	movs	r2, #7
 8008376:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008378:	e009      	b.n	800838e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800837a:	4b2f      	ldr	r3, [pc, #188]	@ (8008438 <xPortStartScheduler+0x138>)
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	3b01      	subs	r3, #1
 8008380:	4a2d      	ldr	r2, [pc, #180]	@ (8008438 <xPortStartScheduler+0x138>)
 8008382:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008384:	78fb      	ldrb	r3, [r7, #3]
 8008386:	b2db      	uxtb	r3, r3
 8008388:	005b      	lsls	r3, r3, #1
 800838a:	b2db      	uxtb	r3, r3
 800838c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800838e:	78fb      	ldrb	r3, [r7, #3]
 8008390:	b2db      	uxtb	r3, r3
 8008392:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008396:	2b80      	cmp	r3, #128	@ 0x80
 8008398:	d0ef      	beq.n	800837a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800839a:	4b27      	ldr	r3, [pc, #156]	@ (8008438 <xPortStartScheduler+0x138>)
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	f1c3 0307 	rsb	r3, r3, #7
 80083a2:	2b04      	cmp	r3, #4
 80083a4:	d00b      	beq.n	80083be <xPortStartScheduler+0xbe>
	__asm volatile
 80083a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083aa:	f383 8811 	msr	BASEPRI, r3
 80083ae:	f3bf 8f6f 	isb	sy
 80083b2:	f3bf 8f4f 	dsb	sy
 80083b6:	60bb      	str	r3, [r7, #8]
}
 80083b8:	bf00      	nop
 80083ba:	bf00      	nop
 80083bc:	e7fd      	b.n	80083ba <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80083be:	4b1e      	ldr	r3, [pc, #120]	@ (8008438 <xPortStartScheduler+0x138>)
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	021b      	lsls	r3, r3, #8
 80083c4:	4a1c      	ldr	r2, [pc, #112]	@ (8008438 <xPortStartScheduler+0x138>)
 80083c6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80083c8:	4b1b      	ldr	r3, [pc, #108]	@ (8008438 <xPortStartScheduler+0x138>)
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80083d0:	4a19      	ldr	r2, [pc, #100]	@ (8008438 <xPortStartScheduler+0x138>)
 80083d2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	b2da      	uxtb	r2, r3
 80083d8:	697b      	ldr	r3, [r7, #20]
 80083da:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80083dc:	4b17      	ldr	r3, [pc, #92]	@ (800843c <xPortStartScheduler+0x13c>)
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	4a16      	ldr	r2, [pc, #88]	@ (800843c <xPortStartScheduler+0x13c>)
 80083e2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80083e6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80083e8:	4b14      	ldr	r3, [pc, #80]	@ (800843c <xPortStartScheduler+0x13c>)
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	4a13      	ldr	r2, [pc, #76]	@ (800843c <xPortStartScheduler+0x13c>)
 80083ee:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80083f2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80083f4:	f000 f8da 	bl	80085ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80083f8:	4b11      	ldr	r3, [pc, #68]	@ (8008440 <xPortStartScheduler+0x140>)
 80083fa:	2200      	movs	r2, #0
 80083fc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80083fe:	f000 f8f9 	bl	80085f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008402:	4b10      	ldr	r3, [pc, #64]	@ (8008444 <xPortStartScheduler+0x144>)
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	4a0f      	ldr	r2, [pc, #60]	@ (8008444 <xPortStartScheduler+0x144>)
 8008408:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800840c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800840e:	f7ff ff63 	bl	80082d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008412:	f7ff fa73 	bl	80078fc <vTaskSwitchContext>
	prvTaskExitError();
 8008416:	f7ff ff1b 	bl	8008250 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800841a:	2300      	movs	r3, #0
}
 800841c:	4618      	mov	r0, r3
 800841e:	3718      	adds	r7, #24
 8008420:	46bd      	mov	sp, r7
 8008422:	bd80      	pop	{r7, pc}
 8008424:	e000ed00 	.word	0xe000ed00
 8008428:	410fc271 	.word	0x410fc271
 800842c:	410fc270 	.word	0x410fc270
 8008430:	e000e400 	.word	0xe000e400
 8008434:	200055c0 	.word	0x200055c0
 8008438:	200055c4 	.word	0x200055c4
 800843c:	e000ed20 	.word	0xe000ed20
 8008440:	20000120 	.word	0x20000120
 8008444:	e000ef34 	.word	0xe000ef34

08008448 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008448:	b480      	push	{r7}
 800844a:	b083      	sub	sp, #12
 800844c:	af00      	add	r7, sp, #0
	__asm volatile
 800844e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008452:	f383 8811 	msr	BASEPRI, r3
 8008456:	f3bf 8f6f 	isb	sy
 800845a:	f3bf 8f4f 	dsb	sy
 800845e:	607b      	str	r3, [r7, #4]
}
 8008460:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008462:	4b10      	ldr	r3, [pc, #64]	@ (80084a4 <vPortEnterCritical+0x5c>)
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	3301      	adds	r3, #1
 8008468:	4a0e      	ldr	r2, [pc, #56]	@ (80084a4 <vPortEnterCritical+0x5c>)
 800846a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800846c:	4b0d      	ldr	r3, [pc, #52]	@ (80084a4 <vPortEnterCritical+0x5c>)
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	2b01      	cmp	r3, #1
 8008472:	d110      	bne.n	8008496 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008474:	4b0c      	ldr	r3, [pc, #48]	@ (80084a8 <vPortEnterCritical+0x60>)
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	b2db      	uxtb	r3, r3
 800847a:	2b00      	cmp	r3, #0
 800847c:	d00b      	beq.n	8008496 <vPortEnterCritical+0x4e>
	__asm volatile
 800847e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008482:	f383 8811 	msr	BASEPRI, r3
 8008486:	f3bf 8f6f 	isb	sy
 800848a:	f3bf 8f4f 	dsb	sy
 800848e:	603b      	str	r3, [r7, #0]
}
 8008490:	bf00      	nop
 8008492:	bf00      	nop
 8008494:	e7fd      	b.n	8008492 <vPortEnterCritical+0x4a>
	}
}
 8008496:	bf00      	nop
 8008498:	370c      	adds	r7, #12
 800849a:	46bd      	mov	sp, r7
 800849c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a0:	4770      	bx	lr
 80084a2:	bf00      	nop
 80084a4:	20000120 	.word	0x20000120
 80084a8:	e000ed04 	.word	0xe000ed04

080084ac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80084ac:	b480      	push	{r7}
 80084ae:	b083      	sub	sp, #12
 80084b0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80084b2:	4b12      	ldr	r3, [pc, #72]	@ (80084fc <vPortExitCritical+0x50>)
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d10b      	bne.n	80084d2 <vPortExitCritical+0x26>
	__asm volatile
 80084ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084be:	f383 8811 	msr	BASEPRI, r3
 80084c2:	f3bf 8f6f 	isb	sy
 80084c6:	f3bf 8f4f 	dsb	sy
 80084ca:	607b      	str	r3, [r7, #4]
}
 80084cc:	bf00      	nop
 80084ce:	bf00      	nop
 80084d0:	e7fd      	b.n	80084ce <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80084d2:	4b0a      	ldr	r3, [pc, #40]	@ (80084fc <vPortExitCritical+0x50>)
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	3b01      	subs	r3, #1
 80084d8:	4a08      	ldr	r2, [pc, #32]	@ (80084fc <vPortExitCritical+0x50>)
 80084da:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80084dc:	4b07      	ldr	r3, [pc, #28]	@ (80084fc <vPortExitCritical+0x50>)
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d105      	bne.n	80084f0 <vPortExitCritical+0x44>
 80084e4:	2300      	movs	r3, #0
 80084e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80084e8:	683b      	ldr	r3, [r7, #0]
 80084ea:	f383 8811 	msr	BASEPRI, r3
}
 80084ee:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80084f0:	bf00      	nop
 80084f2:	370c      	adds	r7, #12
 80084f4:	46bd      	mov	sp, r7
 80084f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084fa:	4770      	bx	lr
 80084fc:	20000120 	.word	0x20000120

08008500 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008500:	f3ef 8009 	mrs	r0, PSP
 8008504:	f3bf 8f6f 	isb	sy
 8008508:	4b15      	ldr	r3, [pc, #84]	@ (8008560 <pxCurrentTCBConst>)
 800850a:	681a      	ldr	r2, [r3, #0]
 800850c:	f01e 0f10 	tst.w	lr, #16
 8008510:	bf08      	it	eq
 8008512:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008516:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800851a:	6010      	str	r0, [r2, #0]
 800851c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008520:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008524:	f380 8811 	msr	BASEPRI, r0
 8008528:	f3bf 8f4f 	dsb	sy
 800852c:	f3bf 8f6f 	isb	sy
 8008530:	f7ff f9e4 	bl	80078fc <vTaskSwitchContext>
 8008534:	f04f 0000 	mov.w	r0, #0
 8008538:	f380 8811 	msr	BASEPRI, r0
 800853c:	bc09      	pop	{r0, r3}
 800853e:	6819      	ldr	r1, [r3, #0]
 8008540:	6808      	ldr	r0, [r1, #0]
 8008542:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008546:	f01e 0f10 	tst.w	lr, #16
 800854a:	bf08      	it	eq
 800854c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008550:	f380 8809 	msr	PSP, r0
 8008554:	f3bf 8f6f 	isb	sy
 8008558:	4770      	bx	lr
 800855a:	bf00      	nop
 800855c:	f3af 8000 	nop.w

08008560 <pxCurrentTCBConst>:
 8008560:	20005494 	.word	0x20005494
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008564:	bf00      	nop
 8008566:	bf00      	nop

08008568 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008568:	b580      	push	{r7, lr}
 800856a:	b082      	sub	sp, #8
 800856c:	af00      	add	r7, sp, #0
	__asm volatile
 800856e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008572:	f383 8811 	msr	BASEPRI, r3
 8008576:	f3bf 8f6f 	isb	sy
 800857a:	f3bf 8f4f 	dsb	sy
 800857e:	607b      	str	r3, [r7, #4]
}
 8008580:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008582:	f7ff f901 	bl	8007788 <xTaskIncrementTick>
 8008586:	4603      	mov	r3, r0
 8008588:	2b00      	cmp	r3, #0
 800858a:	d003      	beq.n	8008594 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800858c:	4b06      	ldr	r3, [pc, #24]	@ (80085a8 <SysTick_Handler+0x40>)
 800858e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008592:	601a      	str	r2, [r3, #0]
 8008594:	2300      	movs	r3, #0
 8008596:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008598:	683b      	ldr	r3, [r7, #0]
 800859a:	f383 8811 	msr	BASEPRI, r3
}
 800859e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80085a0:	bf00      	nop
 80085a2:	3708      	adds	r7, #8
 80085a4:	46bd      	mov	sp, r7
 80085a6:	bd80      	pop	{r7, pc}
 80085a8:	e000ed04 	.word	0xe000ed04

080085ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80085ac:	b480      	push	{r7}
 80085ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80085b0:	4b0b      	ldr	r3, [pc, #44]	@ (80085e0 <vPortSetupTimerInterrupt+0x34>)
 80085b2:	2200      	movs	r2, #0
 80085b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80085b6:	4b0b      	ldr	r3, [pc, #44]	@ (80085e4 <vPortSetupTimerInterrupt+0x38>)
 80085b8:	2200      	movs	r2, #0
 80085ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80085bc:	4b0a      	ldr	r3, [pc, #40]	@ (80085e8 <vPortSetupTimerInterrupt+0x3c>)
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	4a0a      	ldr	r2, [pc, #40]	@ (80085ec <vPortSetupTimerInterrupt+0x40>)
 80085c2:	fba2 2303 	umull	r2, r3, r2, r3
 80085c6:	099b      	lsrs	r3, r3, #6
 80085c8:	4a09      	ldr	r2, [pc, #36]	@ (80085f0 <vPortSetupTimerInterrupt+0x44>)
 80085ca:	3b01      	subs	r3, #1
 80085cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80085ce:	4b04      	ldr	r3, [pc, #16]	@ (80085e0 <vPortSetupTimerInterrupt+0x34>)
 80085d0:	2207      	movs	r2, #7
 80085d2:	601a      	str	r2, [r3, #0]
}
 80085d4:	bf00      	nop
 80085d6:	46bd      	mov	sp, r7
 80085d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085dc:	4770      	bx	lr
 80085de:	bf00      	nop
 80085e0:	e000e010 	.word	0xe000e010
 80085e4:	e000e018 	.word	0xe000e018
 80085e8:	20000100 	.word	0x20000100
 80085ec:	10624dd3 	.word	0x10624dd3
 80085f0:	e000e014 	.word	0xe000e014

080085f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80085f4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008604 <vPortEnableVFP+0x10>
 80085f8:	6801      	ldr	r1, [r0, #0]
 80085fa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80085fe:	6001      	str	r1, [r0, #0]
 8008600:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008602:	bf00      	nop
 8008604:	e000ed88 	.word	0xe000ed88

08008608 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008608:	b480      	push	{r7}
 800860a:	b085      	sub	sp, #20
 800860c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800860e:	f3ef 8305 	mrs	r3, IPSR
 8008612:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	2b0f      	cmp	r3, #15
 8008618:	d915      	bls.n	8008646 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800861a:	4a18      	ldr	r2, [pc, #96]	@ (800867c <vPortValidateInterruptPriority+0x74>)
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	4413      	add	r3, r2
 8008620:	781b      	ldrb	r3, [r3, #0]
 8008622:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008624:	4b16      	ldr	r3, [pc, #88]	@ (8008680 <vPortValidateInterruptPriority+0x78>)
 8008626:	781b      	ldrb	r3, [r3, #0]
 8008628:	7afa      	ldrb	r2, [r7, #11]
 800862a:	429a      	cmp	r2, r3
 800862c:	d20b      	bcs.n	8008646 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800862e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008632:	f383 8811 	msr	BASEPRI, r3
 8008636:	f3bf 8f6f 	isb	sy
 800863a:	f3bf 8f4f 	dsb	sy
 800863e:	607b      	str	r3, [r7, #4]
}
 8008640:	bf00      	nop
 8008642:	bf00      	nop
 8008644:	e7fd      	b.n	8008642 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008646:	4b0f      	ldr	r3, [pc, #60]	@ (8008684 <vPortValidateInterruptPriority+0x7c>)
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800864e:	4b0e      	ldr	r3, [pc, #56]	@ (8008688 <vPortValidateInterruptPriority+0x80>)
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	429a      	cmp	r2, r3
 8008654:	d90b      	bls.n	800866e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8008656:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800865a:	f383 8811 	msr	BASEPRI, r3
 800865e:	f3bf 8f6f 	isb	sy
 8008662:	f3bf 8f4f 	dsb	sy
 8008666:	603b      	str	r3, [r7, #0]
}
 8008668:	bf00      	nop
 800866a:	bf00      	nop
 800866c:	e7fd      	b.n	800866a <vPortValidateInterruptPriority+0x62>
	}
 800866e:	bf00      	nop
 8008670:	3714      	adds	r7, #20
 8008672:	46bd      	mov	sp, r7
 8008674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008678:	4770      	bx	lr
 800867a:	bf00      	nop
 800867c:	e000e3f0 	.word	0xe000e3f0
 8008680:	200055c0 	.word	0x200055c0
 8008684:	e000ed0c 	.word	0xe000ed0c
 8008688:	200055c4 	.word	0x200055c4

0800868c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800868c:	b580      	push	{r7, lr}
 800868e:	b08a      	sub	sp, #40	@ 0x28
 8008690:	af00      	add	r7, sp, #0
 8008692:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008694:	2300      	movs	r3, #0
 8008696:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008698:	f7fe ffa8 	bl	80075ec <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800869c:	4b5c      	ldr	r3, [pc, #368]	@ (8008810 <pvPortMalloc+0x184>)
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d101      	bne.n	80086a8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80086a4:	f000 f924 	bl	80088f0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80086a8:	4b5a      	ldr	r3, [pc, #360]	@ (8008814 <pvPortMalloc+0x188>)
 80086aa:	681a      	ldr	r2, [r3, #0]
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	4013      	ands	r3, r2
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	f040 8095 	bne.w	80087e0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d01e      	beq.n	80086fa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80086bc:	2208      	movs	r2, #8
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	4413      	add	r3, r2
 80086c2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	f003 0307 	and.w	r3, r3, #7
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d015      	beq.n	80086fa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	f023 0307 	bic.w	r3, r3, #7
 80086d4:	3308      	adds	r3, #8
 80086d6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	f003 0307 	and.w	r3, r3, #7
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d00b      	beq.n	80086fa <pvPortMalloc+0x6e>
	__asm volatile
 80086e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086e6:	f383 8811 	msr	BASEPRI, r3
 80086ea:	f3bf 8f6f 	isb	sy
 80086ee:	f3bf 8f4f 	dsb	sy
 80086f2:	617b      	str	r3, [r7, #20]
}
 80086f4:	bf00      	nop
 80086f6:	bf00      	nop
 80086f8:	e7fd      	b.n	80086f6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d06f      	beq.n	80087e0 <pvPortMalloc+0x154>
 8008700:	4b45      	ldr	r3, [pc, #276]	@ (8008818 <pvPortMalloc+0x18c>)
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	687a      	ldr	r2, [r7, #4]
 8008706:	429a      	cmp	r2, r3
 8008708:	d86a      	bhi.n	80087e0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800870a:	4b44      	ldr	r3, [pc, #272]	@ (800881c <pvPortMalloc+0x190>)
 800870c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800870e:	4b43      	ldr	r3, [pc, #268]	@ (800881c <pvPortMalloc+0x190>)
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008714:	e004      	b.n	8008720 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8008716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008718:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800871a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008722:	685b      	ldr	r3, [r3, #4]
 8008724:	687a      	ldr	r2, [r7, #4]
 8008726:	429a      	cmp	r2, r3
 8008728:	d903      	bls.n	8008732 <pvPortMalloc+0xa6>
 800872a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	2b00      	cmp	r3, #0
 8008730:	d1f1      	bne.n	8008716 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008732:	4b37      	ldr	r3, [pc, #220]	@ (8008810 <pvPortMalloc+0x184>)
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008738:	429a      	cmp	r2, r3
 800873a:	d051      	beq.n	80087e0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800873c:	6a3b      	ldr	r3, [r7, #32]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	2208      	movs	r2, #8
 8008742:	4413      	add	r3, r2
 8008744:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008748:	681a      	ldr	r2, [r3, #0]
 800874a:	6a3b      	ldr	r3, [r7, #32]
 800874c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800874e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008750:	685a      	ldr	r2, [r3, #4]
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	1ad2      	subs	r2, r2, r3
 8008756:	2308      	movs	r3, #8
 8008758:	005b      	lsls	r3, r3, #1
 800875a:	429a      	cmp	r2, r3
 800875c:	d920      	bls.n	80087a0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800875e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	4413      	add	r3, r2
 8008764:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008766:	69bb      	ldr	r3, [r7, #24]
 8008768:	f003 0307 	and.w	r3, r3, #7
 800876c:	2b00      	cmp	r3, #0
 800876e:	d00b      	beq.n	8008788 <pvPortMalloc+0xfc>
	__asm volatile
 8008770:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008774:	f383 8811 	msr	BASEPRI, r3
 8008778:	f3bf 8f6f 	isb	sy
 800877c:	f3bf 8f4f 	dsb	sy
 8008780:	613b      	str	r3, [r7, #16]
}
 8008782:	bf00      	nop
 8008784:	bf00      	nop
 8008786:	e7fd      	b.n	8008784 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008788:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800878a:	685a      	ldr	r2, [r3, #4]
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	1ad2      	subs	r2, r2, r3
 8008790:	69bb      	ldr	r3, [r7, #24]
 8008792:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008796:	687a      	ldr	r2, [r7, #4]
 8008798:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800879a:	69b8      	ldr	r0, [r7, #24]
 800879c:	f000 f90a 	bl	80089b4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80087a0:	4b1d      	ldr	r3, [pc, #116]	@ (8008818 <pvPortMalloc+0x18c>)
 80087a2:	681a      	ldr	r2, [r3, #0]
 80087a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087a6:	685b      	ldr	r3, [r3, #4]
 80087a8:	1ad3      	subs	r3, r2, r3
 80087aa:	4a1b      	ldr	r2, [pc, #108]	@ (8008818 <pvPortMalloc+0x18c>)
 80087ac:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80087ae:	4b1a      	ldr	r3, [pc, #104]	@ (8008818 <pvPortMalloc+0x18c>)
 80087b0:	681a      	ldr	r2, [r3, #0]
 80087b2:	4b1b      	ldr	r3, [pc, #108]	@ (8008820 <pvPortMalloc+0x194>)
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	429a      	cmp	r2, r3
 80087b8:	d203      	bcs.n	80087c2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80087ba:	4b17      	ldr	r3, [pc, #92]	@ (8008818 <pvPortMalloc+0x18c>)
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	4a18      	ldr	r2, [pc, #96]	@ (8008820 <pvPortMalloc+0x194>)
 80087c0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80087c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087c4:	685a      	ldr	r2, [r3, #4]
 80087c6:	4b13      	ldr	r3, [pc, #76]	@ (8008814 <pvPortMalloc+0x188>)
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	431a      	orrs	r2, r3
 80087cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087ce:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80087d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087d2:	2200      	movs	r2, #0
 80087d4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80087d6:	4b13      	ldr	r3, [pc, #76]	@ (8008824 <pvPortMalloc+0x198>)
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	3301      	adds	r3, #1
 80087dc:	4a11      	ldr	r2, [pc, #68]	@ (8008824 <pvPortMalloc+0x198>)
 80087de:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80087e0:	f7fe ff12 	bl	8007608 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80087e4:	69fb      	ldr	r3, [r7, #28]
 80087e6:	f003 0307 	and.w	r3, r3, #7
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d00b      	beq.n	8008806 <pvPortMalloc+0x17a>
	__asm volatile
 80087ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087f2:	f383 8811 	msr	BASEPRI, r3
 80087f6:	f3bf 8f6f 	isb	sy
 80087fa:	f3bf 8f4f 	dsb	sy
 80087fe:	60fb      	str	r3, [r7, #12]
}
 8008800:	bf00      	nop
 8008802:	bf00      	nop
 8008804:	e7fd      	b.n	8008802 <pvPortMalloc+0x176>
	return pvReturn;
 8008806:	69fb      	ldr	r3, [r7, #28]
}
 8008808:	4618      	mov	r0, r3
 800880a:	3728      	adds	r7, #40	@ 0x28
 800880c:	46bd      	mov	sp, r7
 800880e:	bd80      	pop	{r7, pc}
 8008810:	200091d0 	.word	0x200091d0
 8008814:	200091e4 	.word	0x200091e4
 8008818:	200091d4 	.word	0x200091d4
 800881c:	200091c8 	.word	0x200091c8
 8008820:	200091d8 	.word	0x200091d8
 8008824:	200091dc 	.word	0x200091dc

08008828 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008828:	b580      	push	{r7, lr}
 800882a:	b086      	sub	sp, #24
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	2b00      	cmp	r3, #0
 8008838:	d04f      	beq.n	80088da <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800883a:	2308      	movs	r3, #8
 800883c:	425b      	negs	r3, r3
 800883e:	697a      	ldr	r2, [r7, #20]
 8008840:	4413      	add	r3, r2
 8008842:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008844:	697b      	ldr	r3, [r7, #20]
 8008846:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008848:	693b      	ldr	r3, [r7, #16]
 800884a:	685a      	ldr	r2, [r3, #4]
 800884c:	4b25      	ldr	r3, [pc, #148]	@ (80088e4 <vPortFree+0xbc>)
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	4013      	ands	r3, r2
 8008852:	2b00      	cmp	r3, #0
 8008854:	d10b      	bne.n	800886e <vPortFree+0x46>
	__asm volatile
 8008856:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800885a:	f383 8811 	msr	BASEPRI, r3
 800885e:	f3bf 8f6f 	isb	sy
 8008862:	f3bf 8f4f 	dsb	sy
 8008866:	60fb      	str	r3, [r7, #12]
}
 8008868:	bf00      	nop
 800886a:	bf00      	nop
 800886c:	e7fd      	b.n	800886a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800886e:	693b      	ldr	r3, [r7, #16]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	2b00      	cmp	r3, #0
 8008874:	d00b      	beq.n	800888e <vPortFree+0x66>
	__asm volatile
 8008876:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800887a:	f383 8811 	msr	BASEPRI, r3
 800887e:	f3bf 8f6f 	isb	sy
 8008882:	f3bf 8f4f 	dsb	sy
 8008886:	60bb      	str	r3, [r7, #8]
}
 8008888:	bf00      	nop
 800888a:	bf00      	nop
 800888c:	e7fd      	b.n	800888a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800888e:	693b      	ldr	r3, [r7, #16]
 8008890:	685a      	ldr	r2, [r3, #4]
 8008892:	4b14      	ldr	r3, [pc, #80]	@ (80088e4 <vPortFree+0xbc>)
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	4013      	ands	r3, r2
 8008898:	2b00      	cmp	r3, #0
 800889a:	d01e      	beq.n	80088da <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800889c:	693b      	ldr	r3, [r7, #16]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d11a      	bne.n	80088da <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80088a4:	693b      	ldr	r3, [r7, #16]
 80088a6:	685a      	ldr	r2, [r3, #4]
 80088a8:	4b0e      	ldr	r3, [pc, #56]	@ (80088e4 <vPortFree+0xbc>)
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	43db      	mvns	r3, r3
 80088ae:	401a      	ands	r2, r3
 80088b0:	693b      	ldr	r3, [r7, #16]
 80088b2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80088b4:	f7fe fe9a 	bl	80075ec <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80088b8:	693b      	ldr	r3, [r7, #16]
 80088ba:	685a      	ldr	r2, [r3, #4]
 80088bc:	4b0a      	ldr	r3, [pc, #40]	@ (80088e8 <vPortFree+0xc0>)
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	4413      	add	r3, r2
 80088c2:	4a09      	ldr	r2, [pc, #36]	@ (80088e8 <vPortFree+0xc0>)
 80088c4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80088c6:	6938      	ldr	r0, [r7, #16]
 80088c8:	f000 f874 	bl	80089b4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80088cc:	4b07      	ldr	r3, [pc, #28]	@ (80088ec <vPortFree+0xc4>)
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	3301      	adds	r3, #1
 80088d2:	4a06      	ldr	r2, [pc, #24]	@ (80088ec <vPortFree+0xc4>)
 80088d4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80088d6:	f7fe fe97 	bl	8007608 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80088da:	bf00      	nop
 80088dc:	3718      	adds	r7, #24
 80088de:	46bd      	mov	sp, r7
 80088e0:	bd80      	pop	{r7, pc}
 80088e2:	bf00      	nop
 80088e4:	200091e4 	.word	0x200091e4
 80088e8:	200091d4 	.word	0x200091d4
 80088ec:	200091e0 	.word	0x200091e0

080088f0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80088f0:	b480      	push	{r7}
 80088f2:	b085      	sub	sp, #20
 80088f4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80088f6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80088fa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80088fc:	4b27      	ldr	r3, [pc, #156]	@ (800899c <prvHeapInit+0xac>)
 80088fe:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	f003 0307 	and.w	r3, r3, #7
 8008906:	2b00      	cmp	r3, #0
 8008908:	d00c      	beq.n	8008924 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	3307      	adds	r3, #7
 800890e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	f023 0307 	bic.w	r3, r3, #7
 8008916:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008918:	68ba      	ldr	r2, [r7, #8]
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	1ad3      	subs	r3, r2, r3
 800891e:	4a1f      	ldr	r2, [pc, #124]	@ (800899c <prvHeapInit+0xac>)
 8008920:	4413      	add	r3, r2
 8008922:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008928:	4a1d      	ldr	r2, [pc, #116]	@ (80089a0 <prvHeapInit+0xb0>)
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800892e:	4b1c      	ldr	r3, [pc, #112]	@ (80089a0 <prvHeapInit+0xb0>)
 8008930:	2200      	movs	r2, #0
 8008932:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	68ba      	ldr	r2, [r7, #8]
 8008938:	4413      	add	r3, r2
 800893a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800893c:	2208      	movs	r2, #8
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	1a9b      	subs	r3, r3, r2
 8008942:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	f023 0307 	bic.w	r3, r3, #7
 800894a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	4a15      	ldr	r2, [pc, #84]	@ (80089a4 <prvHeapInit+0xb4>)
 8008950:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008952:	4b14      	ldr	r3, [pc, #80]	@ (80089a4 <prvHeapInit+0xb4>)
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	2200      	movs	r2, #0
 8008958:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800895a:	4b12      	ldr	r3, [pc, #72]	@ (80089a4 <prvHeapInit+0xb4>)
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	2200      	movs	r2, #0
 8008960:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008966:	683b      	ldr	r3, [r7, #0]
 8008968:	68fa      	ldr	r2, [r7, #12]
 800896a:	1ad2      	subs	r2, r2, r3
 800896c:	683b      	ldr	r3, [r7, #0]
 800896e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008970:	4b0c      	ldr	r3, [pc, #48]	@ (80089a4 <prvHeapInit+0xb4>)
 8008972:	681a      	ldr	r2, [r3, #0]
 8008974:	683b      	ldr	r3, [r7, #0]
 8008976:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008978:	683b      	ldr	r3, [r7, #0]
 800897a:	685b      	ldr	r3, [r3, #4]
 800897c:	4a0a      	ldr	r2, [pc, #40]	@ (80089a8 <prvHeapInit+0xb8>)
 800897e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008980:	683b      	ldr	r3, [r7, #0]
 8008982:	685b      	ldr	r3, [r3, #4]
 8008984:	4a09      	ldr	r2, [pc, #36]	@ (80089ac <prvHeapInit+0xbc>)
 8008986:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008988:	4b09      	ldr	r3, [pc, #36]	@ (80089b0 <prvHeapInit+0xc0>)
 800898a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800898e:	601a      	str	r2, [r3, #0]
}
 8008990:	bf00      	nop
 8008992:	3714      	adds	r7, #20
 8008994:	46bd      	mov	sp, r7
 8008996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899a:	4770      	bx	lr
 800899c:	200055c8 	.word	0x200055c8
 80089a0:	200091c8 	.word	0x200091c8
 80089a4:	200091d0 	.word	0x200091d0
 80089a8:	200091d8 	.word	0x200091d8
 80089ac:	200091d4 	.word	0x200091d4
 80089b0:	200091e4 	.word	0x200091e4

080089b4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80089b4:	b480      	push	{r7}
 80089b6:	b085      	sub	sp, #20
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80089bc:	4b28      	ldr	r3, [pc, #160]	@ (8008a60 <prvInsertBlockIntoFreeList+0xac>)
 80089be:	60fb      	str	r3, [r7, #12]
 80089c0:	e002      	b.n	80089c8 <prvInsertBlockIntoFreeList+0x14>
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	60fb      	str	r3, [r7, #12]
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	687a      	ldr	r2, [r7, #4]
 80089ce:	429a      	cmp	r2, r3
 80089d0:	d8f7      	bhi.n	80089c2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	685b      	ldr	r3, [r3, #4]
 80089da:	68ba      	ldr	r2, [r7, #8]
 80089dc:	4413      	add	r3, r2
 80089de:	687a      	ldr	r2, [r7, #4]
 80089e0:	429a      	cmp	r2, r3
 80089e2:	d108      	bne.n	80089f6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	685a      	ldr	r2, [r3, #4]
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	685b      	ldr	r3, [r3, #4]
 80089ec:	441a      	add	r2, r3
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	685b      	ldr	r3, [r3, #4]
 80089fe:	68ba      	ldr	r2, [r7, #8]
 8008a00:	441a      	add	r2, r3
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	429a      	cmp	r2, r3
 8008a08:	d118      	bne.n	8008a3c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	681a      	ldr	r2, [r3, #0]
 8008a0e:	4b15      	ldr	r3, [pc, #84]	@ (8008a64 <prvInsertBlockIntoFreeList+0xb0>)
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	429a      	cmp	r2, r3
 8008a14:	d00d      	beq.n	8008a32 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	685a      	ldr	r2, [r3, #4]
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	685b      	ldr	r3, [r3, #4]
 8008a20:	441a      	add	r2, r3
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	681a      	ldr	r2, [r3, #0]
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	601a      	str	r2, [r3, #0]
 8008a30:	e008      	b.n	8008a44 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008a32:	4b0c      	ldr	r3, [pc, #48]	@ (8008a64 <prvInsertBlockIntoFreeList+0xb0>)
 8008a34:	681a      	ldr	r2, [r3, #0]
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	601a      	str	r2, [r3, #0]
 8008a3a:	e003      	b.n	8008a44 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	681a      	ldr	r2, [r3, #0]
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008a44:	68fa      	ldr	r2, [r7, #12]
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	429a      	cmp	r2, r3
 8008a4a:	d002      	beq.n	8008a52 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	687a      	ldr	r2, [r7, #4]
 8008a50:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008a52:	bf00      	nop
 8008a54:	3714      	adds	r7, #20
 8008a56:	46bd      	mov	sp, r7
 8008a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a5c:	4770      	bx	lr
 8008a5e:	bf00      	nop
 8008a60:	200091c8 	.word	0x200091c8
 8008a64:	200091d0 	.word	0x200091d0

08008a68 <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 8008a68:	b580      	push	{r7, lr}
 8008a6a:	b084      	sub	sp, #16
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	6078      	str	r0, [r7, #4]
 8008a70:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8008a72:	683b      	ldr	r3, [r7, #0]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	330c      	adds	r3, #12
 8008a78:	461a      	mov	r2, r3
 8008a7a:	6839      	ldr	r1, [r7, #0]
 8008a7c:	6878      	ldr	r0, [r7, #4]
 8008a7e:	f002 fa89 	bl	800af94 <tcpip_send_msg_wait_sem>
 8008a82:	4603      	mov	r3, r0
 8008a84:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8008a86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d103      	bne.n	8008a96 <netconn_apimsg+0x2e>
    return apimsg->err;
 8008a8e:	683b      	ldr	r3, [r7, #0]
 8008a90:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8008a94:	e001      	b.n	8008a9a <netconn_apimsg+0x32>
  }
  return err;
 8008a96:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	3710      	adds	r7, #16
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	bd80      	pop	{r7, pc}
	...

08008aa4 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 8008aa4:	b580      	push	{r7, lr}
 8008aa6:	b08c      	sub	sp, #48	@ 0x30
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	4603      	mov	r3, r0
 8008aac:	603a      	str	r2, [r7, #0]
 8008aae:	71fb      	strb	r3, [r7, #7]
 8008ab0:	460b      	mov	r3, r1
 8008ab2:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 8008ab4:	79fb      	ldrb	r3, [r7, #7]
 8008ab6:	6839      	ldr	r1, [r7, #0]
 8008ab8:	4618      	mov	r0, r3
 8008aba:	f001 f949 	bl	8009d50 <netconn_alloc>
 8008abe:	62f8      	str	r0, [r7, #44]	@ 0x2c
  if (conn != NULL) {
 8008ac0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d054      	beq.n	8008b70 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 8008ac6:	79bb      	ldrb	r3, [r7, #6]
 8008ac8:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 8008aca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008acc:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 8008ace:	f107 0308 	add.w	r3, r7, #8
 8008ad2:	4619      	mov	r1, r3
 8008ad4:	4829      	ldr	r0, [pc, #164]	@ (8008b7c <netconn_new_with_proto_and_callback+0xd8>)
 8008ad6:	f7ff ffc7 	bl	8008a68 <netconn_apimsg>
 8008ada:	4603      	mov	r3, r0
 8008adc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    if (err != ERR_OK) {
 8008ae0:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d043      	beq.n	8008b70 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 8008ae8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008aea:	685b      	ldr	r3, [r3, #4]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d005      	beq.n	8008afc <netconn_new_with_proto_and_callback+0x58>
 8008af0:	4b23      	ldr	r3, [pc, #140]	@ (8008b80 <netconn_new_with_proto_and_callback+0xdc>)
 8008af2:	22a3      	movs	r2, #163	@ 0xa3
 8008af4:	4923      	ldr	r1, [pc, #140]	@ (8008b84 <netconn_new_with_proto_and_callback+0xe0>)
 8008af6:	4824      	ldr	r0, [pc, #144]	@ (8008b88 <netconn_new_with_proto_and_callback+0xe4>)
 8008af8:	f00d fc0a 	bl	8016310 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 8008afc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008afe:	3310      	adds	r3, #16
 8008b00:	4618      	mov	r0, r3
 8008b02:	f00d f9cc 	bl	8015e9e <sys_mbox_valid>
 8008b06:	4603      	mov	r3, r0
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d105      	bne.n	8008b18 <netconn_new_with_proto_and_callback+0x74>
 8008b0c:	4b1c      	ldr	r3, [pc, #112]	@ (8008b80 <netconn_new_with_proto_and_callback+0xdc>)
 8008b0e:	22a4      	movs	r2, #164	@ 0xa4
 8008b10:	491e      	ldr	r1, [pc, #120]	@ (8008b8c <netconn_new_with_proto_and_callback+0xe8>)
 8008b12:	481d      	ldr	r0, [pc, #116]	@ (8008b88 <netconn_new_with_proto_and_callback+0xe4>)
 8008b14:	f00d fbfc 	bl	8016310 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 8008b18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b1a:	3314      	adds	r3, #20
 8008b1c:	4618      	mov	r0, r3
 8008b1e:	f00d f9be 	bl	8015e9e <sys_mbox_valid>
 8008b22:	4603      	mov	r3, r0
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d005      	beq.n	8008b34 <netconn_new_with_proto_and_callback+0x90>
 8008b28:	4b15      	ldr	r3, [pc, #84]	@ (8008b80 <netconn_new_with_proto_and_callback+0xdc>)
 8008b2a:	22a6      	movs	r2, #166	@ 0xa6
 8008b2c:	4918      	ldr	r1, [pc, #96]	@ (8008b90 <netconn_new_with_proto_and_callback+0xec>)
 8008b2e:	4816      	ldr	r0, [pc, #88]	@ (8008b88 <netconn_new_with_proto_and_callback+0xe4>)
 8008b30:	f00d fbee 	bl	8016310 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 8008b34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b36:	330c      	adds	r3, #12
 8008b38:	4618      	mov	r0, r3
 8008b3a:	f00d fa41 	bl	8015fc0 <sys_sem_valid>
 8008b3e:	4603      	mov	r3, r0
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d105      	bne.n	8008b50 <netconn_new_with_proto_and_callback+0xac>
 8008b44:	4b0e      	ldr	r3, [pc, #56]	@ (8008b80 <netconn_new_with_proto_and_callback+0xdc>)
 8008b46:	22a9      	movs	r2, #169	@ 0xa9
 8008b48:	4912      	ldr	r1, [pc, #72]	@ (8008b94 <netconn_new_with_proto_and_callback+0xf0>)
 8008b4a:	480f      	ldr	r0, [pc, #60]	@ (8008b88 <netconn_new_with_proto_and_callback+0xe4>)
 8008b4c:	f00d fbe0 	bl	8016310 <iprintf>
      sys_sem_free(&conn->op_completed);
 8008b50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b52:	330c      	adds	r3, #12
 8008b54:	4618      	mov	r0, r3
 8008b56:	f00d fa26 	bl	8015fa6 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 8008b5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b5c:	3310      	adds	r3, #16
 8008b5e:	4618      	mov	r0, r3
 8008b60:	f00d f916 	bl	8015d90 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 8008b64:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008b66:	2007      	movs	r0, #7
 8008b68:	f002 ffc2 	bl	800baf0 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 8008b6c:	2300      	movs	r3, #0
 8008b6e:	e000      	b.n	8008b72 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 8008b70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8008b72:	4618      	mov	r0, r3
 8008b74:	3730      	adds	r7, #48	@ 0x30
 8008b76:	46bd      	mov	sp, r7
 8008b78:	bd80      	pop	{r7, pc}
 8008b7a:	bf00      	nop
 8008b7c:	08009d25 	.word	0x08009d25
 8008b80:	0801789c 	.word	0x0801789c
 8008b84:	080178d0 	.word	0x080178d0
 8008b88:	080178f4 	.word	0x080178f4
 8008b8c:	0801791c 	.word	0x0801791c
 8008b90:	08017934 	.word	0x08017934
 8008b94:	08017958 	.word	0x08017958

08008b98 <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 8008b98:	b580      	push	{r7, lr}
 8008b9a:	b08c      	sub	sp, #48	@ 0x30
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d101      	bne.n	8008baa <netconn_prepare_delete+0x12>
    return ERR_OK;
 8008ba6:	2300      	movs	r3, #0
 8008ba8:	e014      	b.n	8008bd4 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8008bae:	2329      	movs	r3, #41	@ 0x29
 8008bb0:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 8008bb2:	f107 030c 	add.w	r3, r7, #12
 8008bb6:	4619      	mov	r1, r3
 8008bb8:	4808      	ldr	r0, [pc, #32]	@ (8008bdc <netconn_prepare_delete+0x44>)
 8008bba:	f7ff ff55 	bl	8008a68 <netconn_apimsg>
 8008bbe:	4603      	mov	r3, r0
 8008bc0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 8008bc4:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d002      	beq.n	8008bd2 <netconn_prepare_delete+0x3a>
    return err;
 8008bcc:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8008bd0:	e000      	b.n	8008bd4 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 8008bd2:	2300      	movs	r3, #0
}
 8008bd4:	4618      	mov	r0, r3
 8008bd6:	3730      	adds	r7, #48	@ 0x30
 8008bd8:	46bd      	mov	sp, r7
 8008bda:	bd80      	pop	{r7, pc}
 8008bdc:	0800a299 	.word	0x0800a299

08008be0 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 8008be0:	b580      	push	{r7, lr}
 8008be2:	b084      	sub	sp, #16
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d101      	bne.n	8008bf2 <netconn_delete+0x12>
    return ERR_OK;
 8008bee:	2300      	movs	r3, #0
 8008bf0:	e00d      	b.n	8008c0e <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 8008bf2:	6878      	ldr	r0, [r7, #4]
 8008bf4:	f7ff ffd0 	bl	8008b98 <netconn_prepare_delete>
 8008bf8:	4603      	mov	r3, r0
 8008bfa:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 8008bfc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d102      	bne.n	8008c0a <netconn_delete+0x2a>
    netconn_free(conn);
 8008c04:	6878      	ldr	r0, [r7, #4]
 8008c06:	f001 f915 	bl	8009e34 <netconn_free>
  }
  return err;
 8008c0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008c0e:	4618      	mov	r0, r3
 8008c10:	3710      	adds	r7, #16
 8008c12:	46bd      	mov	sp, r7
 8008c14:	bd80      	pop	{r7, pc}
	...

08008c18 <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 8008c18:	b580      	push	{r7, lr}
 8008c1a:	b08e      	sub	sp, #56	@ 0x38
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	60f8      	str	r0, [r7, #12]
 8008c20:	60b9      	str	r1, [r7, #8]
 8008c22:	4613      	mov	r3, r2
 8008c24:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d109      	bne.n	8008c40 <netconn_bind+0x28>
 8008c2c:	4b11      	ldr	r3, [pc, #68]	@ (8008c74 <netconn_bind+0x5c>)
 8008c2e:	f44f 729c 	mov.w	r2, #312	@ 0x138
 8008c32:	4911      	ldr	r1, [pc, #68]	@ (8008c78 <netconn_bind+0x60>)
 8008c34:	4811      	ldr	r0, [pc, #68]	@ (8008c7c <netconn_bind+0x64>)
 8008c36:	f00d fb6b 	bl	8016310 <iprintf>
 8008c3a:	f06f 030f 	mvn.w	r3, #15
 8008c3e:	e015      	b.n	8008c6c <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 8008c40:	68bb      	ldr	r3, [r7, #8]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d101      	bne.n	8008c4a <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 8008c46:	4b0e      	ldr	r3, [pc, #56]	@ (8008c80 <netconn_bind+0x68>)
 8008c48:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 8008c4e:	68bb      	ldr	r3, [r7, #8]
 8008c50:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8008c52:	88fb      	ldrh	r3, [r7, #6]
 8008c54:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 8008c56:	f107 0314 	add.w	r3, r7, #20
 8008c5a:	4619      	mov	r1, r3
 8008c5c:	4809      	ldr	r0, [pc, #36]	@ (8008c84 <netconn_bind+0x6c>)
 8008c5e:	f7ff ff03 	bl	8008a68 <netconn_apimsg>
 8008c62:	4603      	mov	r3, r0
 8008c64:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 8008c68:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 8008c6c:	4618      	mov	r0, r3
 8008c6e:	3738      	adds	r7, #56	@ 0x38
 8008c70:	46bd      	mov	sp, r7
 8008c72:	bd80      	pop	{r7, pc}
 8008c74:	0801789c 	.word	0x0801789c
 8008c78:	080179d4 	.word	0x080179d4
 8008c7c:	080178f4 	.word	0x080178f4
 8008c80:	0801aea4 	.word	0x0801aea4
 8008c84:	0800a465 	.word	0x0800a465

08008c88 <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
 8008c88:	b580      	push	{r7, lr}
 8008c8a:	b08c      	sub	sp, #48	@ 0x30
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	6078      	str	r0, [r7, #4]
 8008c90:	460b      	mov	r3, r1
 8008c92:	70fb      	strb	r3, [r7, #3]
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d109      	bne.n	8008cae <netconn_listen_with_backlog+0x26>
 8008c9a:	4b0d      	ldr	r3, [pc, #52]	@ (8008cd0 <netconn_listen_with_backlog+0x48>)
 8008c9c:	f240 12bb 	movw	r2, #443	@ 0x1bb
 8008ca0:	490c      	ldr	r1, [pc, #48]	@ (8008cd4 <netconn_listen_with_backlog+0x4c>)
 8008ca2:	480d      	ldr	r0, [pc, #52]	@ (8008cd8 <netconn_listen_with_backlog+0x50>)
 8008ca4:	f00d fb34 	bl	8016310 <iprintf>
 8008ca8:	f06f 030f 	mvn.w	r3, #15
 8008cac:	e00c      	b.n	8008cc8 <netconn_listen_with_backlog+0x40>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	60fb      	str	r3, [r7, #12]
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 8008cb2:	f107 030c 	add.w	r3, r7, #12
 8008cb6:	4619      	mov	r1, r3
 8008cb8:	4808      	ldr	r0, [pc, #32]	@ (8008cdc <netconn_listen_with_backlog+0x54>)
 8008cba:	f7ff fed5 	bl	8008a68 <netconn_apimsg>
 8008cbe:	4603      	mov	r3, r0
 8008cc0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8008cc4:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 8008cc8:	4618      	mov	r0, r3
 8008cca:	3730      	adds	r7, #48	@ 0x30
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	bd80      	pop	{r7, pc}
 8008cd0:	0801789c 	.word	0x0801789c
 8008cd4:	08017a54 	.word	0x08017a54
 8008cd8:	080178f4 	.word	0x080178f4
 8008cdc:	0800a4d9 	.word	0x0800a4d9

08008ce0 <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
 8008ce0:	b580      	push	{r7, lr}
 8008ce2:	b086      	sub	sp, #24
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	6078      	str	r0, [r7, #4]
 8008ce8:	6039      	str	r1, [r7, #0]
  struct netconn *newconn;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 8008cea:	683b      	ldr	r3, [r7, #0]
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d109      	bne.n	8008d04 <netconn_accept+0x24>
 8008cf0:	4b42      	ldr	r3, [pc, #264]	@ (8008dfc <netconn_accept+0x11c>)
 8008cf2:	f240 12e1 	movw	r2, #481	@ 0x1e1
 8008cf6:	4942      	ldr	r1, [pc, #264]	@ (8008e00 <netconn_accept+0x120>)
 8008cf8:	4842      	ldr	r0, [pc, #264]	@ (8008e04 <netconn_accept+0x124>)
 8008cfa:	f00d fb09 	bl	8016310 <iprintf>
 8008cfe:	f06f 030f 	mvn.w	r3, #15
 8008d02:	e077      	b.n	8008df4 <netconn_accept+0x114>
  *new_conn = NULL;
 8008d04:	683b      	ldr	r3, [r7, #0]
 8008d06:	2200      	movs	r2, #0
 8008d08:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d109      	bne.n	8008d24 <netconn_accept+0x44>
 8008d10:	4b3a      	ldr	r3, [pc, #232]	@ (8008dfc <netconn_accept+0x11c>)
 8008d12:	f240 12e3 	movw	r2, #483	@ 0x1e3
 8008d16:	493c      	ldr	r1, [pc, #240]	@ (8008e08 <netconn_accept+0x128>)
 8008d18:	483a      	ldr	r0, [pc, #232]	@ (8008e04 <netconn_accept+0x124>)
 8008d1a:	f00d faf9 	bl	8016310 <iprintf>
 8008d1e:	f06f 030f 	mvn.w	r3, #15
 8008d22:	e067      	b.n	8008df4 <netconn_accept+0x114>

  /* NOTE: Although the opengroup spec says a pending error shall be returned to
           send/recv/getsockopt(SO_ERROR) only, we return it for listening
           connections also, to handle embedded-system errors */
  err = netconn_err(conn);
 8008d24:	6878      	ldr	r0, [r7, #4]
 8008d26:	f000 fb88 	bl	800943a <netconn_err>
 8008d2a:	4603      	mov	r3, r0
 8008d2c:	74fb      	strb	r3, [r7, #19]
  if (err != ERR_OK) {
 8008d2e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d002      	beq.n	8008d3c <netconn_accept+0x5c>
    /* return pending error */
    return err;
 8008d36:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008d3a:	e05b      	b.n	8008df4 <netconn_accept+0x114>
  }
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	3314      	adds	r3, #20
 8008d40:	4618      	mov	r0, r3
 8008d42:	f00d f8ac 	bl	8015e9e <sys_mbox_valid>
 8008d46:	4603      	mov	r3, r0
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d006      	beq.n	8008d5a <netconn_accept+0x7a>
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008d52:	f003 0301 	and.w	r3, r3, #1
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d002      	beq.n	8008d60 <netconn_accept+0x80>
    /* don't accept if closed: this might block the application task
       waiting on acceptmbox forever! */
    return ERR_CLSD;
 8008d5a:	f06f 030e 	mvn.w	r3, #14
 8008d5e:	e049      	b.n	8008df4 <netconn_accept+0x114>
  }

  API_MSG_VAR_ALLOC_ACCEPT(msg);

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn)) {
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008d66:	f003 0302 	and.w	r3, r3, #2
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d00e      	beq.n	8008d8c <netconn_accept+0xac>
    if (sys_arch_mbox_tryfetch(&conn->acceptmbox, &accept_ptr) == SYS_ARCH_TIMEOUT) {
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	3314      	adds	r3, #20
 8008d72:	f107 020c 	add.w	r2, r7, #12
 8008d76:	4611      	mov	r1, r2
 8008d78:	4618      	mov	r0, r3
 8008d7a:	f00d f874 	bl	8015e66 <sys_arch_mbox_tryfetch>
 8008d7e:	4603      	mov	r3, r0
 8008d80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d84:	d113      	bne.n	8008dae <netconn_accept+0xce>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_WOULDBLOCK;
 8008d86:	f06f 0306 	mvn.w	r3, #6
 8008d8a:	e033      	b.n	8008df4 <netconn_accept+0x114>
    }
  } else {
#if LWIP_SO_RCVTIMEO
    if (sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	f103 0014 	add.w	r0, r3, #20
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	69da      	ldr	r2, [r3, #28]
 8008d96:	f107 030c 	add.w	r3, r7, #12
 8008d9a:	4619      	mov	r1, r3
 8008d9c:	f00d f824 	bl	8015de8 <sys_arch_mbox_fetch>
 8008da0:	4603      	mov	r3, r0
 8008da2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008da6:	d102      	bne.n	8008dae <netconn_accept+0xce>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
 8008da8:	f06f 0302 	mvn.w	r3, #2
 8008dac:	e022      	b.n	8008df4 <netconn_accept+0x114>
    }
  }
#endif

  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d005      	beq.n	8008dc2 <netconn_accept+0xe2>
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008dba:	2200      	movs	r2, #0
 8008dbc:	2101      	movs	r1, #1
 8008dbe:	6878      	ldr	r0, [r7, #4]
 8008dc0:	4798      	blx	r3

  if (lwip_netconn_is_err_msg(accept_ptr, &err)) {
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	f107 0213 	add.w	r2, r7, #19
 8008dc8:	4611      	mov	r1, r2
 8008dca:	4618      	mov	r0, r3
 8008dcc:	f000 fb86 	bl	80094dc <lwip_netconn_is_err_msg>
 8008dd0:	4603      	mov	r3, r0
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d002      	beq.n	8008ddc <netconn_accept+0xfc>
    /* a connection has been aborted: e.g. out of pcbs or out of netconns during accept */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return err;
 8008dd6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008dda:	e00b      	b.n	8008df4 <netconn_accept+0x114>
  }
  if (accept_ptr == NULL) {
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d102      	bne.n	8008de8 <netconn_accept+0x108>
    /* connection has been aborted */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return ERR_CLSD;
 8008de2:	f06f 030e 	mvn.w	r3, #14
 8008de6:	e005      	b.n	8008df4 <netconn_accept+0x114>
  }
  newconn = (struct netconn *)accept_ptr;
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	617b      	str	r3, [r7, #20]
  /* don't care for the return value of lwip_netconn_do_recv */
  netconn_apimsg(lwip_netconn_do_accepted, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
 8008dec:	683b      	ldr	r3, [r7, #0]
 8008dee:	697a      	ldr	r2, [r7, #20]
 8008df0:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 8008df2:	2300      	movs	r3, #0
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 8008df4:	4618      	mov	r0, r3
 8008df6:	3718      	adds	r7, #24
 8008df8:	46bd      	mov	sp, r7
 8008dfa:	bd80      	pop	{r7, pc}
 8008dfc:	0801789c 	.word	0x0801789c
 8008e00:	08017a74 	.word	0x08017a74
 8008e04:	080178f4 	.word	0x080178f4
 8008e08:	08017a94 	.word	0x08017a94

08008e0c <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 8008e0c:	b580      	push	{r7, lr}
 8008e0e:	b088      	sub	sp, #32
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	60f8      	str	r0, [r7, #12]
 8008e14:	60b9      	str	r1, [r7, #8]
 8008e16:	4613      	mov	r3, r2
 8008e18:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8008e1e:	68bb      	ldr	r3, [r7, #8]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d109      	bne.n	8008e38 <netconn_recv_data+0x2c>
 8008e24:	4b5e      	ldr	r3, [pc, #376]	@ (8008fa0 <netconn_recv_data+0x194>)
 8008e26:	f44f 7212 	mov.w	r2, #584	@ 0x248
 8008e2a:	495e      	ldr	r1, [pc, #376]	@ (8008fa4 <netconn_recv_data+0x198>)
 8008e2c:	485e      	ldr	r0, [pc, #376]	@ (8008fa8 <netconn_recv_data+0x19c>)
 8008e2e:	f00d fa6f 	bl	8016310 <iprintf>
 8008e32:	f06f 030f 	mvn.w	r3, #15
 8008e36:	e0ae      	b.n	8008f96 <netconn_recv_data+0x18a>
  *new_buf = NULL;
 8008e38:	68bb      	ldr	r3, [r7, #8]
 8008e3a:	2200      	movs	r2, #0
 8008e3c:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d109      	bne.n	8008e58 <netconn_recv_data+0x4c>
 8008e44:	4b56      	ldr	r3, [pc, #344]	@ (8008fa0 <netconn_recv_data+0x194>)
 8008e46:	f240 224a 	movw	r2, #586	@ 0x24a
 8008e4a:	4958      	ldr	r1, [pc, #352]	@ (8008fac <netconn_recv_data+0x1a0>)
 8008e4c:	4856      	ldr	r0, [pc, #344]	@ (8008fa8 <netconn_recv_data+0x19c>)
 8008e4e:	f00d fa5f 	bl	8016310 <iprintf>
 8008e52:	f06f 030f 	mvn.w	r3, #15
 8008e56:	e09e      	b.n	8008f96 <netconn_recv_data+0x18a>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	3310      	adds	r3, #16
 8008e5c:	4618      	mov	r0, r3
 8008e5e:	f00d f81e 	bl	8015e9e <sys_mbox_valid>
 8008e62:	4603      	mov	r3, r0
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d10e      	bne.n	8008e86 <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 8008e68:	68f8      	ldr	r0, [r7, #12]
 8008e6a:	f000 fae6 	bl	800943a <netconn_err>
 8008e6e:	4603      	mov	r3, r0
 8008e70:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 8008e72:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d002      	beq.n	8008e80 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 8008e7a:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8008e7e:	e08a      	b.n	8008f96 <netconn_recv_data+0x18a>
    }
    return ERR_CONN;
 8008e80:	f06f 030a 	mvn.w	r3, #10
 8008e84:	e087      	b.n	8008f96 <netconn_recv_data+0x18a>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008e8c:	f003 0302 	and.w	r3, r3, #2
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d110      	bne.n	8008eb6 <netconn_recv_data+0xaa>
 8008e94:	79fb      	ldrb	r3, [r7, #7]
 8008e96:	f003 0304 	and.w	r3, r3, #4
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d10b      	bne.n	8008eb6 <netconn_recv_data+0xaa>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008ea4:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d104      	bne.n	8008eb6 <netconn_recv_data+0xaa>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d024      	beq.n	8008f00 <netconn_recv_data+0xf4>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	3310      	adds	r3, #16
 8008eba:	f107 0218 	add.w	r2, r7, #24
 8008ebe:	4611      	mov	r1, r2
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	f00c ffd0 	bl	8015e66 <sys_arch_mbox_tryfetch>
 8008ec6:	4603      	mov	r3, r0
 8008ec8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ecc:	d129      	bne.n	8008f22 <netconn_recv_data+0x116>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 8008ece:	68f8      	ldr	r0, [r7, #12]
 8008ed0:	f000 fab3 	bl	800943a <netconn_err>
 8008ed4:	4603      	mov	r3, r0
 8008ed6:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 8008ed8:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d002      	beq.n	8008ee6 <netconn_recv_data+0xda>
        /* return pending error */
        return err;
 8008ee0:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8008ee4:	e057      	b.n	8008f96 <netconn_recv_data+0x18a>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008eec:	f003 0301 	and.w	r3, r3, #1
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d002      	beq.n	8008efa <netconn_recv_data+0xee>
        return ERR_CONN;
 8008ef4:	f06f 030a 	mvn.w	r3, #10
 8008ef8:	e04d      	b.n	8008f96 <netconn_recv_data+0x18a>
      }
      return ERR_WOULDBLOCK;
 8008efa:	f06f 0306 	mvn.w	r3, #6
 8008efe:	e04a      	b.n	8008f96 <netconn_recv_data+0x18a>
    }
  } else {
#if LWIP_SO_RCVTIMEO
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	f103 0010 	add.w	r0, r3, #16
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	69da      	ldr	r2, [r3, #28]
 8008f0a:	f107 0318 	add.w	r3, r7, #24
 8008f0e:	4619      	mov	r1, r3
 8008f10:	f00c ff6a 	bl	8015de8 <sys_arch_mbox_fetch>
 8008f14:	4603      	mov	r3, r0
 8008f16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f1a:	d102      	bne.n	8008f22 <netconn_recv_data+0x116>
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
 8008f1c:	f06f 0302 	mvn.w	r3, #2
 8008f20:	e039      	b.n	8008f96 <netconn_recv_data+0x18a>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	781b      	ldrb	r3, [r3, #0]
 8008f26:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008f2a:	2b10      	cmp	r3, #16
 8008f2c:	d117      	bne.n	8008f5e <netconn_recv_data+0x152>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 8008f2e:	69bb      	ldr	r3, [r7, #24]
 8008f30:	f107 0217 	add.w	r2, r7, #23
 8008f34:	4611      	mov	r1, r2
 8008f36:	4618      	mov	r0, r3
 8008f38:	f000 fad0 	bl	80094dc <lwip_netconn_is_err_msg>
 8008f3c:	4603      	mov	r3, r0
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d009      	beq.n	8008f56 <netconn_recv_data+0x14a>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 8008f42:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008f46:	f113 0f0f 	cmn.w	r3, #15
 8008f4a:	d101      	bne.n	8008f50 <netconn_recv_data+0x144>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 8008f4c:	2300      	movs	r3, #0
 8008f4e:	e022      	b.n	8008f96 <netconn_recv_data+0x18a>
      }
      return err;
 8008f50:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008f54:	e01f      	b.n	8008f96 <netconn_recv_data+0x18a>
    }
    len = ((struct pbuf *)buf)->tot_len;
 8008f56:	69bb      	ldr	r3, [r7, #24]
 8008f58:	891b      	ldrh	r3, [r3, #8]
 8008f5a:	83fb      	strh	r3, [r7, #30]
 8008f5c:	e00d      	b.n	8008f7a <netconn_recv_data+0x16e>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 8008f5e:	69bb      	ldr	r3, [r7, #24]
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d106      	bne.n	8008f72 <netconn_recv_data+0x166>
 8008f64:	4b0e      	ldr	r3, [pc, #56]	@ (8008fa0 <netconn_recv_data+0x194>)
 8008f66:	f240 2291 	movw	r2, #657	@ 0x291
 8008f6a:	4911      	ldr	r1, [pc, #68]	@ (8008fb0 <netconn_recv_data+0x1a4>)
 8008f6c:	480e      	ldr	r0, [pc, #56]	@ (8008fa8 <netconn_recv_data+0x19c>)
 8008f6e:	f00d f9cf 	bl	8016310 <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 8008f72:	69bb      	ldr	r3, [r7, #24]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	891b      	ldrh	r3, [r3, #8]
 8008f78:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d005      	beq.n	8008f8e <netconn_recv_data+0x182>
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f86:	8bfa      	ldrh	r2, [r7, #30]
 8008f88:	2101      	movs	r1, #1
 8008f8a:	68f8      	ldr	r0, [r7, #12]
 8008f8c:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 8008f8e:	69ba      	ldr	r2, [r7, #24]
 8008f90:	68bb      	ldr	r3, [r7, #8]
 8008f92:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 8008f94:	2300      	movs	r3, #0
}
 8008f96:	4618      	mov	r0, r3
 8008f98:	3720      	adds	r7, #32
 8008f9a:	46bd      	mov	sp, r7
 8008f9c:	bd80      	pop	{r7, pc}
 8008f9e:	bf00      	nop
 8008fa0:	0801789c 	.word	0x0801789c
 8008fa4:	08017ab4 	.word	0x08017ab4
 8008fa8:	080178f4 	.word	0x080178f4
 8008fac:	08017ad4 	.word	0x08017ad4
 8008fb0:	08017af0 	.word	0x08017af0

08008fb4 <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 8008fb4:	b580      	push	{r7, lr}
 8008fb6:	b084      	sub	sp, #16
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	60f8      	str	r0, [r7, #12]
 8008fbc:	60b9      	str	r1, [r7, #8]
 8008fbe:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d005      	beq.n	8008fd2 <netconn_tcp_recvd_msg+0x1e>
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	781b      	ldrb	r3, [r3, #0]
 8008fca:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008fce:	2b10      	cmp	r3, #16
 8008fd0:	d009      	beq.n	8008fe6 <netconn_tcp_recvd_msg+0x32>
 8008fd2:	4b0c      	ldr	r3, [pc, #48]	@ (8009004 <netconn_tcp_recvd_msg+0x50>)
 8008fd4:	f240 22a7 	movw	r2, #679	@ 0x2a7
 8008fd8:	490b      	ldr	r1, [pc, #44]	@ (8009008 <netconn_tcp_recvd_msg+0x54>)
 8008fda:	480c      	ldr	r0, [pc, #48]	@ (800900c <netconn_tcp_recvd_msg+0x58>)
 8008fdc:	f00d f998 	bl	8016310 <iprintf>
 8008fe0:	f06f 030f 	mvn.w	r3, #15
 8008fe4:	e00a      	b.n	8008ffc <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	68fa      	ldr	r2, [r7, #12]
 8008fea:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	68ba      	ldr	r2, [r7, #8]
 8008ff0:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 8008ff2:	6879      	ldr	r1, [r7, #4]
 8008ff4:	4806      	ldr	r0, [pc, #24]	@ (8009010 <netconn_tcp_recvd_msg+0x5c>)
 8008ff6:	f7ff fd37 	bl	8008a68 <netconn_apimsg>
 8008ffa:	4603      	mov	r3, r0
}
 8008ffc:	4618      	mov	r0, r3
 8008ffe:	3710      	adds	r7, #16
 8009000:	46bd      	mov	sp, r7
 8009002:	bd80      	pop	{r7, pc}
 8009004:	0801789c 	.word	0x0801789c
 8009008:	08017afc 	.word	0x08017afc
 800900c:	080178f4 	.word	0x080178f4
 8009010:	0800a609 	.word	0x0800a609

08009014 <netconn_recv_data_tcp>:
  return err;
}

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 8009014:	b580      	push	{r7, lr}
 8009016:	b090      	sub	sp, #64	@ 0x40
 8009018:	af00      	add	r7, sp, #0
 800901a:	60f8      	str	r0, [r7, #12]
 800901c:	60b9      	str	r1, [r7, #8]
 800901e:	4613      	mov	r3, r2
 8009020:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	3310      	adds	r3, #16
 8009026:	4618      	mov	r0, r3
 8009028:	f00c ff39 	bl	8015e9e <sys_mbox_valid>
 800902c:	4603      	mov	r3, r0
 800902e:	2b00      	cmp	r3, #0
 8009030:	d102      	bne.n	8009038 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 8009032:	f06f 030a 	mvn.w	r3, #10
 8009036:	e072      	b.n	800911e <netconn_recv_data_tcp+0x10a>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800903e:	b25b      	sxtb	r3, r3
 8009040:	2b00      	cmp	r3, #0
 8009042:	da09      	bge.n	8009058 <netconn_recv_data_tcp+0x44>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	f893 3020 	ldrb.w	r3, [r3, #32]
 800904a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800904e:	b2da      	uxtb	r2, r3
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	f883 2020 	strb.w	r2, [r3, #32]
    goto handle_fin;
 8009056:	e03b      	b.n	80090d0 <netconn_recv_data_tcp+0xbc>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 8009058:	79fb      	ldrb	r3, [r7, #7]
 800905a:	461a      	mov	r2, r3
 800905c:	68b9      	ldr	r1, [r7, #8]
 800905e:	68f8      	ldr	r0, [r7, #12]
 8009060:	f7ff fed4 	bl	8008e0c <netconn_recv_data>
 8009064:	4603      	mov	r3, r0
 8009066:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  if (err != ERR_OK) {
 800906a:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800906e:	2b00      	cmp	r3, #0
 8009070:	d002      	beq.n	8009078 <netconn_recv_data_tcp+0x64>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 8009072:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8009076:	e052      	b.n	800911e <netconn_recv_data_tcp+0x10a>
  }
  buf = *new_buf;
 8009078:	68bb      	ldr	r3, [r7, #8]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 800907e:	79fb      	ldrb	r3, [r7, #7]
 8009080:	f003 0308 	and.w	r3, r3, #8
 8009084:	2b00      	cmp	r3, #0
 8009086:	d10e      	bne.n	80090a6 <netconn_recv_data_tcp+0x92>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 8009088:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800908a:	2b00      	cmp	r3, #0
 800908c:	d002      	beq.n	8009094 <netconn_recv_data_tcp+0x80>
 800908e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009090:	891b      	ldrh	r3, [r3, #8]
 8009092:	e000      	b.n	8009096 <netconn_recv_data_tcp+0x82>
 8009094:	2301      	movs	r3, #1
 8009096:	86fb      	strh	r3, [r7, #54]	@ 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 8009098:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800909a:	f107 0214 	add.w	r2, r7, #20
 800909e:	4619      	mov	r1, r3
 80090a0:	68f8      	ldr	r0, [r7, #12]
 80090a2:	f7ff ff87 	bl	8008fb4 <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 80090a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d136      	bne.n	800911a <netconn_recv_data_tcp+0x106>
    if (apiflags & NETCONN_NOFIN) {
 80090ac:	79fb      	ldrb	r3, [r7, #7]
 80090ae:	f003 0310 	and.w	r3, r3, #16
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d00b      	beq.n	80090ce <netconn_recv_data_tcp+0xba>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80090bc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80090c0:	b2da      	uxtb	r2, r3
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	f883 2020 	strb.w	r2, [r3, #32]
      return ERR_WOULDBLOCK;
 80090c8:	f06f 0306 	mvn.w	r3, #6
 80090cc:	e027      	b.n	800911e <netconn_recv_data_tcp+0x10a>
    } else {
handle_fin:
 80090ce:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d005      	beq.n	80090e4 <netconn_recv_data_tcp+0xd0>
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090dc:	2200      	movs	r2, #0
 80090de:	2101      	movs	r1, #1
 80090e0:	68f8      	ldr	r0, [r7, #12]
 80090e2:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	685b      	ldr	r3, [r3, #4]
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d10f      	bne.n	800910c <netconn_recv_data_tcp+0xf8>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 80090ec:	68f8      	ldr	r0, [r7, #12]
 80090ee:	f000 f9a4 	bl	800943a <netconn_err>
 80090f2:	4603      	mov	r3, r0
 80090f4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        if (err != ERR_OK) {
 80090f8:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d002      	beq.n	8009106 <netconn_recv_data_tcp+0xf2>
          return err;
 8009100:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8009104:	e00b      	b.n	800911e <netconn_recv_data_tcp+0x10a>
        }
        return ERR_RST;
 8009106:	f06f 030d 	mvn.w	r3, #13
 800910a:	e008      	b.n	800911e <netconn_recv_data_tcp+0x10a>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 800910c:	2101      	movs	r1, #1
 800910e:	68f8      	ldr	r0, [r7, #12]
 8009110:	f000 f956 	bl	80093c0 <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 8009114:	f06f 030e 	mvn.w	r3, #14
 8009118:	e001      	b.n	800911e <netconn_recv_data_tcp+0x10a>
    }
  }
  return err;
 800911a:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 800911e:	4618      	mov	r0, r3
 8009120:	3740      	adds	r7, #64	@ 0x40
 8009122:	46bd      	mov	sp, r7
 8009124:	bd80      	pop	{r7, pc}
	...

08009128 <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 8009128:	b580      	push	{r7, lr}
 800912a:	b086      	sub	sp, #24
 800912c:	af00      	add	r7, sp, #0
 800912e:	6078      	str	r0, [r7, #4]
 8009130:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 8009132:	2300      	movs	r3, #0
 8009134:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8009136:	683b      	ldr	r3, [r7, #0]
 8009138:	2b00      	cmp	r3, #0
 800913a:	d109      	bne.n	8009150 <netconn_recv+0x28>
 800913c:	4b32      	ldr	r3, [pc, #200]	@ (8009208 <netconn_recv+0xe0>)
 800913e:	f240 3263 	movw	r2, #867	@ 0x363
 8009142:	4932      	ldr	r1, [pc, #200]	@ (800920c <netconn_recv+0xe4>)
 8009144:	4832      	ldr	r0, [pc, #200]	@ (8009210 <netconn_recv+0xe8>)
 8009146:	f00d f8e3 	bl	8016310 <iprintf>
 800914a:	f06f 030f 	mvn.w	r3, #15
 800914e:	e056      	b.n	80091fe <netconn_recv+0xd6>
  *new_buf = NULL;
 8009150:	683b      	ldr	r3, [r7, #0]
 8009152:	2200      	movs	r2, #0
 8009154:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	2b00      	cmp	r3, #0
 800915a:	d109      	bne.n	8009170 <netconn_recv+0x48>
 800915c:	4b2a      	ldr	r3, [pc, #168]	@ (8009208 <netconn_recv+0xe0>)
 800915e:	f240 3265 	movw	r2, #869	@ 0x365
 8009162:	492c      	ldr	r1, [pc, #176]	@ (8009214 <netconn_recv+0xec>)
 8009164:	482a      	ldr	r0, [pc, #168]	@ (8009210 <netconn_recv+0xe8>)
 8009166:	f00d f8d3 	bl	8016310 <iprintf>
 800916a:	f06f 030f 	mvn.w	r3, #15
 800916e:	e046      	b.n	80091fe <netconn_recv+0xd6>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	781b      	ldrb	r3, [r3, #0]
 8009174:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009178:	2b10      	cmp	r3, #16
 800917a:	d13a      	bne.n	80091f2 <netconn_recv+0xca>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 800917c:	2300      	movs	r3, #0
 800917e:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8009180:	2006      	movs	r0, #6
 8009182:	f002 fc3f 	bl	800ba04 <memp_malloc>
 8009186:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 8009188:	697b      	ldr	r3, [r7, #20]
 800918a:	2b00      	cmp	r3, #0
 800918c:	d102      	bne.n	8009194 <netconn_recv+0x6c>
      return ERR_MEM;
 800918e:	f04f 33ff 	mov.w	r3, #4294967295
 8009192:	e034      	b.n	80091fe <netconn_recv+0xd6>
    }

    err = netconn_recv_data_tcp(conn, &p, 0);
 8009194:	f107 030c 	add.w	r3, r7, #12
 8009198:	2200      	movs	r2, #0
 800919a:	4619      	mov	r1, r3
 800919c:	6878      	ldr	r0, [r7, #4]
 800919e:	f7ff ff39 	bl	8009014 <netconn_recv_data_tcp>
 80091a2:	4603      	mov	r3, r0
 80091a4:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 80091a6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d006      	beq.n	80091bc <netconn_recv+0x94>
      memp_free(MEMP_NETBUF, buf);
 80091ae:	6979      	ldr	r1, [r7, #20]
 80091b0:	2006      	movs	r0, #6
 80091b2:	f002 fc9d 	bl	800baf0 <memp_free>
      return err;
 80091b6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80091ba:	e020      	b.n	80091fe <netconn_recv+0xd6>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d106      	bne.n	80091d0 <netconn_recv+0xa8>
 80091c2:	4b11      	ldr	r3, [pc, #68]	@ (8009208 <netconn_recv+0xe0>)
 80091c4:	f240 3279 	movw	r2, #889	@ 0x379
 80091c8:	4913      	ldr	r1, [pc, #76]	@ (8009218 <netconn_recv+0xf0>)
 80091ca:	4811      	ldr	r0, [pc, #68]	@ (8009210 <netconn_recv+0xe8>)
 80091cc:	f00d f8a0 	bl	8016310 <iprintf>

    buf->p = p;
 80091d0:	68fa      	ldr	r2, [r7, #12]
 80091d2:	697b      	ldr	r3, [r7, #20]
 80091d4:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 80091d6:	68fa      	ldr	r2, [r7, #12]
 80091d8:	697b      	ldr	r3, [r7, #20]
 80091da:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 80091dc:	697b      	ldr	r3, [r7, #20]
 80091de:	2200      	movs	r2, #0
 80091e0:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 80091e2:	697b      	ldr	r3, [r7, #20]
 80091e4:	2200      	movs	r2, #0
 80091e6:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 80091e8:	683b      	ldr	r3, [r7, #0]
 80091ea:	697a      	ldr	r2, [r7, #20]
 80091ec:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 80091ee:	2300      	movs	r3, #0
 80091f0:	e005      	b.n	80091fe <netconn_recv+0xd6>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf, 0);
 80091f2:	2200      	movs	r2, #0
 80091f4:	6839      	ldr	r1, [r7, #0]
 80091f6:	6878      	ldr	r0, [r7, #4]
 80091f8:	f7ff fe08 	bl	8008e0c <netconn_recv_data>
 80091fc:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 80091fe:	4618      	mov	r0, r3
 8009200:	3718      	adds	r7, #24
 8009202:	46bd      	mov	sp, r7
 8009204:	bd80      	pop	{r7, pc}
 8009206:	bf00      	nop
 8009208:	0801789c 	.word	0x0801789c
 800920c:	08017ab4 	.word	0x08017ab4
 8009210:	080178f4 	.word	0x080178f4
 8009214:	08017ad4 	.word	0x08017ad4
 8009218:	08017b4c 	.word	0x08017b4c

0800921c <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 800921c:	b580      	push	{r7, lr}
 800921e:	b088      	sub	sp, #32
 8009220:	af02      	add	r7, sp, #8
 8009222:	60f8      	str	r0, [r7, #12]
 8009224:	60b9      	str	r1, [r7, #8]
 8009226:	607a      	str	r2, [r7, #4]
 8009228:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 800922a:	68bb      	ldr	r3, [r7, #8]
 800922c:	613b      	str	r3, [r7, #16]
  vector.len = size;
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 8009232:	78fa      	ldrb	r2, [r7, #3]
 8009234:	f107 0110 	add.w	r1, r7, #16
 8009238:	6a3b      	ldr	r3, [r7, #32]
 800923a:	9300      	str	r3, [sp, #0]
 800923c:	4613      	mov	r3, r2
 800923e:	2201      	movs	r2, #1
 8009240:	68f8      	ldr	r0, [r7, #12]
 8009242:	f000 f805 	bl	8009250 <netconn_write_vectors_partly>
 8009246:	4603      	mov	r3, r0
}
 8009248:	4618      	mov	r0, r3
 800924a:	3718      	adds	r7, #24
 800924c:	46bd      	mov	sp, r7
 800924e:	bd80      	pop	{r7, pc}

08009250 <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 8009250:	b580      	push	{r7, lr}
 8009252:	b092      	sub	sp, #72	@ 0x48
 8009254:	af00      	add	r7, sp, #0
 8009256:	60f8      	str	r0, [r7, #12]
 8009258:	60b9      	str	r1, [r7, #8]
 800925a:	4611      	mov	r1, r2
 800925c:	461a      	mov	r2, r3
 800925e:	460b      	mov	r3, r1
 8009260:	80fb      	strh	r3, [r7, #6]
 8009262:	4613      	mov	r3, r2
 8009264:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	2b00      	cmp	r3, #0
 800926a:	d109      	bne.n	8009280 <netconn_write_vectors_partly+0x30>
 800926c:	4b4e      	ldr	r3, [pc, #312]	@ (80093a8 <netconn_write_vectors_partly+0x158>)
 800926e:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 8009272:	494e      	ldr	r1, [pc, #312]	@ (80093ac <netconn_write_vectors_partly+0x15c>)
 8009274:	484e      	ldr	r0, [pc, #312]	@ (80093b0 <netconn_write_vectors_partly+0x160>)
 8009276:	f00d f84b 	bl	8016310 <iprintf>
 800927a:	f06f 030f 	mvn.w	r3, #15
 800927e:	e08f      	b.n	80093a0 <netconn_write_vectors_partly+0x150>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	781b      	ldrb	r3, [r3, #0]
 8009284:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009288:	2b10      	cmp	r3, #16
 800928a:	d009      	beq.n	80092a0 <netconn_write_vectors_partly+0x50>
 800928c:	4b46      	ldr	r3, [pc, #280]	@ (80093a8 <netconn_write_vectors_partly+0x158>)
 800928e:	f240 32ef 	movw	r2, #1007	@ 0x3ef
 8009292:	4948      	ldr	r1, [pc, #288]	@ (80093b4 <netconn_write_vectors_partly+0x164>)
 8009294:	4846      	ldr	r0, [pc, #280]	@ (80093b0 <netconn_write_vectors_partly+0x160>)
 8009296:	f00d f83b 	bl	8016310 <iprintf>
 800929a:	f06f 0305 	mvn.w	r3, #5
 800929e:	e07f      	b.n	80093a0 <netconn_write_vectors_partly+0x150>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80092a6:	f003 0302 	and.w	r3, r3, #2
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d104      	bne.n	80092b8 <netconn_write_vectors_partly+0x68>
 80092ae:	797b      	ldrb	r3, [r7, #5]
 80092b0:	f003 0304 	and.w	r3, r3, #4
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d001      	beq.n	80092bc <netconn_write_vectors_partly+0x6c>
 80092b8:	2301      	movs	r3, #1
 80092ba:	e000      	b.n	80092be <netconn_write_vectors_partly+0x6e>
 80092bc:	2300      	movs	r3, #0
 80092be:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 80092c2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d005      	beq.n	80092d6 <netconn_write_vectors_partly+0x86>
 80092ca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d102      	bne.n	80092d6 <netconn_write_vectors_partly+0x86>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 80092d0:	f06f 0305 	mvn.w	r3, #5
 80092d4:	e064      	b.n	80093a0 <netconn_write_vectors_partly+0x150>
  }

  /* sum up the total size */
  size = 0;
 80092d6:	2300      	movs	r3, #0
 80092d8:	647b      	str	r3, [r7, #68]	@ 0x44
  for (i = 0; i < vectorcnt; i++) {
 80092da:	2300      	movs	r3, #0
 80092dc:	643b      	str	r3, [r7, #64]	@ 0x40
 80092de:	e015      	b.n	800930c <netconn_write_vectors_partly+0xbc>
    size += vectors[i].len;
 80092e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80092e2:	00db      	lsls	r3, r3, #3
 80092e4:	68ba      	ldr	r2, [r7, #8]
 80092e6:	4413      	add	r3, r2
 80092e8:	685b      	ldr	r3, [r3, #4]
 80092ea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80092ec:	4413      	add	r3, r2
 80092ee:	647b      	str	r3, [r7, #68]	@ 0x44
    if (size < vectors[i].len) {
 80092f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80092f2:	00db      	lsls	r3, r3, #3
 80092f4:	68ba      	ldr	r2, [r7, #8]
 80092f6:	4413      	add	r3, r2
 80092f8:	685b      	ldr	r3, [r3, #4]
 80092fa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80092fc:	429a      	cmp	r2, r3
 80092fe:	d202      	bcs.n	8009306 <netconn_write_vectors_partly+0xb6>
      /* overflow */
      return ERR_VAL;
 8009300:	f06f 0305 	mvn.w	r3, #5
 8009304:	e04c      	b.n	80093a0 <netconn_write_vectors_partly+0x150>
  for (i = 0; i < vectorcnt; i++) {
 8009306:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009308:	3301      	adds	r3, #1
 800930a:	643b      	str	r3, [r7, #64]	@ 0x40
 800930c:	88fb      	ldrh	r3, [r7, #6]
 800930e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009310:	429a      	cmp	r2, r3
 8009312:	dbe5      	blt.n	80092e0 <netconn_write_vectors_partly+0x90>
    }
  }
  if (size == 0) {
 8009314:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009316:	2b00      	cmp	r3, #0
 8009318:	d101      	bne.n	800931e <netconn_write_vectors_partly+0xce>
    return ERR_OK;
 800931a:	2300      	movs	r3, #0
 800931c:	e040      	b.n	80093a0 <netconn_write_vectors_partly+0x150>
  } else if (size > SSIZE_MAX) {
 800931e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009320:	2b00      	cmp	r3, #0
 8009322:	da0a      	bge.n	800933a <netconn_write_vectors_partly+0xea>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 8009324:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009326:	2b00      	cmp	r3, #0
 8009328:	d102      	bne.n	8009330 <netconn_write_vectors_partly+0xe0>
      return ERR_VAL;
 800932a:	f06f 0305 	mvn.w	r3, #5
 800932e:	e037      	b.n	80093a0 <netconn_write_vectors_partly+0x150>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 8009330:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8009334:	63bb      	str	r3, [r7, #56]	@ 0x38
    size = (size_t)limited;
 8009336:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009338:	647b      	str	r3, [r7, #68]	@ 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 800933e:	68bb      	ldr	r3, [r7, #8]
 8009340:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 8009342:	88fb      	ldrh	r3, [r7, #6]
 8009344:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 8009346:	2300      	movs	r3, #0
 8009348:	627b      	str	r3, [r7, #36]	@ 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 800934a:	797b      	ldrb	r3, [r7, #5]
 800934c:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 8009350:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009352:	62bb      	str	r3, [r7, #40]	@ 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 8009354:	2300      	movs	r3, #0
 8009356:	62fb      	str	r3, [r7, #44]	@ 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 8009358:	f107 0314 	add.w	r3, r7, #20
 800935c:	4619      	mov	r1, r3
 800935e:	4816      	ldr	r0, [pc, #88]	@ (80093b8 <netconn_write_vectors_partly+0x168>)
 8009360:	f7ff fb82 	bl	8008a68 <netconn_apimsg>
 8009364:	4603      	mov	r3, r0
 8009366:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  if (err == ERR_OK) {
 800936a:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800936e:	2b00      	cmp	r3, #0
 8009370:	d114      	bne.n	800939c <netconn_write_vectors_partly+0x14c>
    if (bytes_written != NULL) {
 8009372:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009374:	2b00      	cmp	r3, #0
 8009376:	d002      	beq.n	800937e <netconn_write_vectors_partly+0x12e>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 8009378:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800937a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800937c:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 800937e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8009382:	2b00      	cmp	r3, #0
 8009384:	d10a      	bne.n	800939c <netconn_write_vectors_partly+0x14c>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 8009386:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009388:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800938a:	429a      	cmp	r2, r3
 800938c:	d006      	beq.n	800939c <netconn_write_vectors_partly+0x14c>
 800938e:	4b06      	ldr	r3, [pc, #24]	@ (80093a8 <netconn_write_vectors_partly+0x158>)
 8009390:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 8009394:	4909      	ldr	r1, [pc, #36]	@ (80093bc <netconn_write_vectors_partly+0x16c>)
 8009396:	4806      	ldr	r0, [pc, #24]	@ (80093b0 <netconn_write_vectors_partly+0x160>)
 8009398:	f00c ffba 	bl	8016310 <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 800939c:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 80093a0:	4618      	mov	r0, r3
 80093a2:	3748      	adds	r7, #72	@ 0x48
 80093a4:	46bd      	mov	sp, r7
 80093a6:	bd80      	pop	{r7, pc}
 80093a8:	0801789c 	.word	0x0801789c
 80093ac:	08017b74 	.word	0x08017b74
 80093b0:	080178f4 	.word	0x080178f4
 80093b4:	08017b90 	.word	0x08017b90
 80093b8:	0800aa15 	.word	0x0800aa15
 80093bc:	08017bb4 	.word	0x08017bb4

080093c0 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 80093c0:	b580      	push	{r7, lr}
 80093c2:	b08c      	sub	sp, #48	@ 0x30
 80093c4:	af00      	add	r7, sp, #0
 80093c6:	6078      	str	r0, [r7, #4]
 80093c8:	460b      	mov	r3, r1
 80093ca:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d109      	bne.n	80093e6 <netconn_close_shutdown+0x26>
 80093d2:	4b0f      	ldr	r3, [pc, #60]	@ (8009410 <netconn_close_shutdown+0x50>)
 80093d4:	f240 4247 	movw	r2, #1095	@ 0x447
 80093d8:	490e      	ldr	r1, [pc, #56]	@ (8009414 <netconn_close_shutdown+0x54>)
 80093da:	480f      	ldr	r0, [pc, #60]	@ (8009418 <netconn_close_shutdown+0x58>)
 80093dc:	f00c ff98 	bl	8016310 <iprintf>
 80093e0:	f06f 030f 	mvn.w	r3, #15
 80093e4:	e010      	b.n	8009408 <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 80093ea:	78fb      	ldrb	r3, [r7, #3]
 80093ec:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 80093ee:	2329      	movs	r3, #41	@ 0x29
 80093f0:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 80093f2:	f107 030c 	add.w	r3, r7, #12
 80093f6:	4619      	mov	r1, r3
 80093f8:	4808      	ldr	r0, [pc, #32]	@ (800941c <netconn_close_shutdown+0x5c>)
 80093fa:	f7ff fb35 	bl	8008a68 <netconn_apimsg>
 80093fe:	4603      	mov	r3, r0
 8009400:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8009404:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 8009408:	4618      	mov	r0, r3
 800940a:	3730      	adds	r7, #48	@ 0x30
 800940c:	46bd      	mov	sp, r7
 800940e:	bd80      	pop	{r7, pc}
 8009410:	0801789c 	.word	0x0801789c
 8009414:	08017bd8 	.word	0x08017bd8
 8009418:	080178f4 	.word	0x080178f4
 800941c:	0800ab2d 	.word	0x0800ab2d

08009420 <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
 8009420:	b580      	push	{r7, lr}
 8009422:	b082      	sub	sp, #8
 8009424:	af00      	add	r7, sp, #0
 8009426:	6078      	str	r0, [r7, #4]
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 8009428:	2103      	movs	r1, #3
 800942a:	6878      	ldr	r0, [r7, #4]
 800942c:	f7ff ffc8 	bl	80093c0 <netconn_close_shutdown>
 8009430:	4603      	mov	r3, r0
}
 8009432:	4618      	mov	r0, r3
 8009434:	3708      	adds	r7, #8
 8009436:	46bd      	mov	sp, r7
 8009438:	bd80      	pop	{r7, pc}

0800943a <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 800943a:	b580      	push	{r7, lr}
 800943c:	b084      	sub	sp, #16
 800943e:	af00      	add	r7, sp, #0
 8009440:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	2b00      	cmp	r3, #0
 8009446:	d101      	bne.n	800944c <netconn_err+0x12>
    return ERR_OK;
 8009448:	2300      	movs	r3, #0
 800944a:	e00d      	b.n	8009468 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 800944c:	f00c fe42 	bl	80160d4 <sys_arch_protect>
 8009450:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	7a1b      	ldrb	r3, [r3, #8]
 8009456:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	2200      	movs	r2, #0
 800945c:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 800945e:	68f8      	ldr	r0, [r7, #12]
 8009460:	f00c fe46 	bl	80160f0 <sys_arch_unprotect>
  return err;
 8009464:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8009468:	4618      	mov	r0, r3
 800946a:	3710      	adds	r7, #16
 800946c:	46bd      	mov	sp, r7
 800946e:	bd80      	pop	{r7, pc}

08009470 <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 8009470:	b580      	push	{r7, lr}
 8009472:	b082      	sub	sp, #8
 8009474:	af00      	add	r7, sp, #0
 8009476:	4603      	mov	r3, r0
 8009478:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 800947a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800947e:	f113 0f0d 	cmn.w	r3, #13
 8009482:	d009      	beq.n	8009498 <lwip_netconn_err_to_msg+0x28>
 8009484:	f113 0f0d 	cmn.w	r3, #13
 8009488:	dc0c      	bgt.n	80094a4 <lwip_netconn_err_to_msg+0x34>
 800948a:	f113 0f0f 	cmn.w	r3, #15
 800948e:	d007      	beq.n	80094a0 <lwip_netconn_err_to_msg+0x30>
 8009490:	f113 0f0e 	cmn.w	r3, #14
 8009494:	d002      	beq.n	800949c <lwip_netconn_err_to_msg+0x2c>
 8009496:	e005      	b.n	80094a4 <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 8009498:	4b0a      	ldr	r3, [pc, #40]	@ (80094c4 <lwip_netconn_err_to_msg+0x54>)
 800949a:	e00e      	b.n	80094ba <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 800949c:	4b0a      	ldr	r3, [pc, #40]	@ (80094c8 <lwip_netconn_err_to_msg+0x58>)
 800949e:	e00c      	b.n	80094ba <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 80094a0:	4b0a      	ldr	r3, [pc, #40]	@ (80094cc <lwip_netconn_err_to_msg+0x5c>)
 80094a2:	e00a      	b.n	80094ba <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 80094a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d005      	beq.n	80094b8 <lwip_netconn_err_to_msg+0x48>
 80094ac:	4b08      	ldr	r3, [pc, #32]	@ (80094d0 <lwip_netconn_err_to_msg+0x60>)
 80094ae:	227d      	movs	r2, #125	@ 0x7d
 80094b0:	4908      	ldr	r1, [pc, #32]	@ (80094d4 <lwip_netconn_err_to_msg+0x64>)
 80094b2:	4809      	ldr	r0, [pc, #36]	@ (80094d8 <lwip_netconn_err_to_msg+0x68>)
 80094b4:	f00c ff2c 	bl	8016310 <iprintf>
      return NULL;
 80094b8:	2300      	movs	r3, #0
  }
}
 80094ba:	4618      	mov	r0, r3
 80094bc:	3708      	adds	r7, #8
 80094be:	46bd      	mov	sp, r7
 80094c0:	bd80      	pop	{r7, pc}
 80094c2:	bf00      	nop
 80094c4:	0801ad90 	.word	0x0801ad90
 80094c8:	0801ad91 	.word	0x0801ad91
 80094cc:	0801ad92 	.word	0x0801ad92
 80094d0:	08017bf4 	.word	0x08017bf4
 80094d4:	08017c28 	.word	0x08017c28
 80094d8:	08017c38 	.word	0x08017c38

080094dc <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 80094dc:	b580      	push	{r7, lr}
 80094de:	b082      	sub	sp, #8
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]
 80094e4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 80094e6:	683b      	ldr	r3, [r7, #0]
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d105      	bne.n	80094f8 <lwip_netconn_is_err_msg+0x1c>
 80094ec:	4b12      	ldr	r3, [pc, #72]	@ (8009538 <lwip_netconn_is_err_msg+0x5c>)
 80094ee:	2285      	movs	r2, #133	@ 0x85
 80094f0:	4912      	ldr	r1, [pc, #72]	@ (800953c <lwip_netconn_is_err_msg+0x60>)
 80094f2:	4813      	ldr	r0, [pc, #76]	@ (8009540 <lwip_netconn_is_err_msg+0x64>)
 80094f4:	f00c ff0c 	bl	8016310 <iprintf>

  if (msg == &netconn_aborted) {
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	4a12      	ldr	r2, [pc, #72]	@ (8009544 <lwip_netconn_is_err_msg+0x68>)
 80094fc:	4293      	cmp	r3, r2
 80094fe:	d104      	bne.n	800950a <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 8009500:	683b      	ldr	r3, [r7, #0]
 8009502:	22f3      	movs	r2, #243	@ 0xf3
 8009504:	701a      	strb	r2, [r3, #0]
    return 1;
 8009506:	2301      	movs	r3, #1
 8009508:	e012      	b.n	8009530 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	4a0e      	ldr	r2, [pc, #56]	@ (8009548 <lwip_netconn_is_err_msg+0x6c>)
 800950e:	4293      	cmp	r3, r2
 8009510:	d104      	bne.n	800951c <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 8009512:	683b      	ldr	r3, [r7, #0]
 8009514:	22f2      	movs	r2, #242	@ 0xf2
 8009516:	701a      	strb	r2, [r3, #0]
    return 1;
 8009518:	2301      	movs	r3, #1
 800951a:	e009      	b.n	8009530 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	4a0b      	ldr	r2, [pc, #44]	@ (800954c <lwip_netconn_is_err_msg+0x70>)
 8009520:	4293      	cmp	r3, r2
 8009522:	d104      	bne.n	800952e <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 8009524:	683b      	ldr	r3, [r7, #0]
 8009526:	22f1      	movs	r2, #241	@ 0xf1
 8009528:	701a      	strb	r2, [r3, #0]
    return 1;
 800952a:	2301      	movs	r3, #1
 800952c:	e000      	b.n	8009530 <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 800952e:	2300      	movs	r3, #0
}
 8009530:	4618      	mov	r0, r3
 8009532:	3708      	adds	r7, #8
 8009534:	46bd      	mov	sp, r7
 8009536:	bd80      	pop	{r7, pc}
 8009538:	08017bf4 	.word	0x08017bf4
 800953c:	08017c60 	.word	0x08017c60
 8009540:	08017c38 	.word	0x08017c38
 8009544:	0801ad90 	.word	0x0801ad90
 8009548:	0801ad91 	.word	0x0801ad91
 800954c:	0801ad92 	.word	0x0801ad92

08009550 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 8009550:	b580      	push	{r7, lr}
 8009552:	b088      	sub	sp, #32
 8009554:	af00      	add	r7, sp, #0
 8009556:	60f8      	str	r0, [r7, #12]
 8009558:	60b9      	str	r1, [r7, #8]
 800955a:	607a      	str	r2, [r7, #4]
 800955c:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 800955e:	68bb      	ldr	r3, [r7, #8]
 8009560:	2b00      	cmp	r3, #0
 8009562:	d105      	bne.n	8009570 <recv_udp+0x20>
 8009564:	4b34      	ldr	r3, [pc, #208]	@ (8009638 <recv_udp+0xe8>)
 8009566:	22e5      	movs	r2, #229	@ 0xe5
 8009568:	4934      	ldr	r1, [pc, #208]	@ (800963c <recv_udp+0xec>)
 800956a:	4835      	ldr	r0, [pc, #212]	@ (8009640 <recv_udp+0xf0>)
 800956c:	f00c fed0 	bl	8016310 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	2b00      	cmp	r3, #0
 8009574:	d105      	bne.n	8009582 <recv_udp+0x32>
 8009576:	4b30      	ldr	r3, [pc, #192]	@ (8009638 <recv_udp+0xe8>)
 8009578:	22e6      	movs	r2, #230	@ 0xe6
 800957a:	4932      	ldr	r1, [pc, #200]	@ (8009644 <recv_udp+0xf4>)
 800957c:	4830      	ldr	r0, [pc, #192]	@ (8009640 <recv_udp+0xf0>)
 800957e:	f00c fec7 	bl	8016310 <iprintf>
  conn = (struct netconn *)arg;
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 8009586:	69fb      	ldr	r3, [r7, #28]
 8009588:	2b00      	cmp	r3, #0
 800958a:	d103      	bne.n	8009594 <recv_udp+0x44>
    pbuf_free(p);
 800958c:	6878      	ldr	r0, [r7, #4]
 800958e:	f003 f953 	bl	800c838 <pbuf_free>
    return;
 8009592:	e04d      	b.n	8009630 <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 8009594:	69fb      	ldr	r3, [r7, #28]
 8009596:	685b      	ldr	r3, [r3, #4]
 8009598:	68ba      	ldr	r2, [r7, #8]
 800959a:	429a      	cmp	r2, r3
 800959c:	d005      	beq.n	80095aa <recv_udp+0x5a>
 800959e:	4b26      	ldr	r3, [pc, #152]	@ (8009638 <recv_udp+0xe8>)
 80095a0:	22ee      	movs	r2, #238	@ 0xee
 80095a2:	4929      	ldr	r1, [pc, #164]	@ (8009648 <recv_udp+0xf8>)
 80095a4:	4826      	ldr	r0, [pc, #152]	@ (8009640 <recv_udp+0xf0>)
 80095a6:	f00c feb3 	bl	8016310 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 80095aa:	69fb      	ldr	r3, [r7, #28]
 80095ac:	3310      	adds	r3, #16
 80095ae:	4618      	mov	r0, r3
 80095b0:	f00c fc75 	bl	8015e9e <sys_mbox_valid>
 80095b4:	4603      	mov	r3, r0
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d103      	bne.n	80095c2 <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 80095ba:	6878      	ldr	r0, [r7, #4]
 80095bc:	f003 f93c 	bl	800c838 <pbuf_free>
    return;
 80095c0:	e036      	b.n	8009630 <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 80095c2:	2006      	movs	r0, #6
 80095c4:	f002 fa1e 	bl	800ba04 <memp_malloc>
 80095c8:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 80095ca:	69bb      	ldr	r3, [r7, #24]
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d103      	bne.n	80095d8 <recv_udp+0x88>
    pbuf_free(p);
 80095d0:	6878      	ldr	r0, [r7, #4]
 80095d2:	f003 f931 	bl	800c838 <pbuf_free>
    return;
 80095d6:	e02b      	b.n	8009630 <recv_udp+0xe0>
  } else {
    buf->p = p;
 80095d8:	69bb      	ldr	r3, [r7, #24]
 80095da:	687a      	ldr	r2, [r7, #4]
 80095dc:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 80095de:	69bb      	ldr	r3, [r7, #24]
 80095e0:	687a      	ldr	r2, [r7, #4]
 80095e2:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 80095e4:	683b      	ldr	r3, [r7, #0]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d002      	beq.n	80095f0 <recv_udp+0xa0>
 80095ea:	683b      	ldr	r3, [r7, #0]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	e000      	b.n	80095f2 <recv_udp+0xa2>
 80095f0:	2300      	movs	r3, #0
 80095f2:	69ba      	ldr	r2, [r7, #24]
 80095f4:	6093      	str	r3, [r2, #8]
    buf->port = port;
 80095f6:	69bb      	ldr	r3, [r7, #24]
 80095f8:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80095fa:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	891b      	ldrh	r3, [r3, #8]
 8009600:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 8009602:	69fb      	ldr	r3, [r7, #28]
 8009604:	3310      	adds	r3, #16
 8009606:	69b9      	ldr	r1, [r7, #24]
 8009608:	4618      	mov	r0, r3
 800960a:	f00c fbd3 	bl	8015db4 <sys_mbox_trypost>
 800960e:	4603      	mov	r3, r0
 8009610:	2b00      	cmp	r3, #0
 8009612:	d003      	beq.n	800961c <recv_udp+0xcc>
    netbuf_delete(buf);
 8009614:	69b8      	ldr	r0, [r7, #24]
 8009616:	f001 fb15 	bl	800ac44 <netbuf_delete>
    return;
 800961a:	e009      	b.n	8009630 <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800961c:	69fb      	ldr	r3, [r7, #28]
 800961e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009620:	2b00      	cmp	r3, #0
 8009622:	d005      	beq.n	8009630 <recv_udp+0xe0>
 8009624:	69fb      	ldr	r3, [r7, #28]
 8009626:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009628:	8afa      	ldrh	r2, [r7, #22]
 800962a:	2100      	movs	r1, #0
 800962c:	69f8      	ldr	r0, [r7, #28]
 800962e:	4798      	blx	r3
  }
}
 8009630:	3720      	adds	r7, #32
 8009632:	46bd      	mov	sp, r7
 8009634:	bd80      	pop	{r7, pc}
 8009636:	bf00      	nop
 8009638:	08017bf4 	.word	0x08017bf4
 800963c:	08017c6c 	.word	0x08017c6c
 8009640:	08017c38 	.word	0x08017c38
 8009644:	08017c90 	.word	0x08017c90
 8009648:	08017cb0 	.word	0x08017cb0

0800964c <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800964c:	b580      	push	{r7, lr}
 800964e:	b088      	sub	sp, #32
 8009650:	af00      	add	r7, sp, #0
 8009652:	60f8      	str	r0, [r7, #12]
 8009654:	60b9      	str	r1, [r7, #8]
 8009656:	607a      	str	r2, [r7, #4]
 8009658:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 800965a:	68bb      	ldr	r3, [r7, #8]
 800965c:	2b00      	cmp	r3, #0
 800965e:	d106      	bne.n	800966e <recv_tcp+0x22>
 8009660:	4b36      	ldr	r3, [pc, #216]	@ (800973c <recv_tcp+0xf0>)
 8009662:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8009666:	4936      	ldr	r1, [pc, #216]	@ (8009740 <recv_tcp+0xf4>)
 8009668:	4836      	ldr	r0, [pc, #216]	@ (8009744 <recv_tcp+0xf8>)
 800966a:	f00c fe51 	bl	8016310 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	2b00      	cmp	r3, #0
 8009672:	d106      	bne.n	8009682 <recv_tcp+0x36>
 8009674:	4b31      	ldr	r3, [pc, #196]	@ (800973c <recv_tcp+0xf0>)
 8009676:	f240 122d 	movw	r2, #301	@ 0x12d
 800967a:	4933      	ldr	r1, [pc, #204]	@ (8009748 <recv_tcp+0xfc>)
 800967c:	4831      	ldr	r0, [pc, #196]	@ (8009744 <recv_tcp+0xf8>)
 800967e:	f00c fe47 	bl	8016310 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 8009682:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009686:	2b00      	cmp	r3, #0
 8009688:	d006      	beq.n	8009698 <recv_tcp+0x4c>
 800968a:	4b2c      	ldr	r3, [pc, #176]	@ (800973c <recv_tcp+0xf0>)
 800968c:	f44f 7297 	mov.w	r2, #302	@ 0x12e
 8009690:	492e      	ldr	r1, [pc, #184]	@ (800974c <recv_tcp+0x100>)
 8009692:	482c      	ldr	r0, [pc, #176]	@ (8009744 <recv_tcp+0xf8>)
 8009694:	f00c fe3c 	bl	8016310 <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 800969c:	697b      	ldr	r3, [r7, #20]
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d102      	bne.n	80096a8 <recv_tcp+0x5c>
    return ERR_VAL;
 80096a2:	f06f 0305 	mvn.w	r3, #5
 80096a6:	e045      	b.n	8009734 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 80096a8:	697b      	ldr	r3, [r7, #20]
 80096aa:	685b      	ldr	r3, [r3, #4]
 80096ac:	68ba      	ldr	r2, [r7, #8]
 80096ae:	429a      	cmp	r2, r3
 80096b0:	d006      	beq.n	80096c0 <recv_tcp+0x74>
 80096b2:	4b22      	ldr	r3, [pc, #136]	@ (800973c <recv_tcp+0xf0>)
 80096b4:	f240 1235 	movw	r2, #309	@ 0x135
 80096b8:	4925      	ldr	r1, [pc, #148]	@ (8009750 <recv_tcp+0x104>)
 80096ba:	4822      	ldr	r0, [pc, #136]	@ (8009744 <recv_tcp+0xf8>)
 80096bc:	f00c fe28 	bl	8016310 <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 80096c0:	697b      	ldr	r3, [r7, #20]
 80096c2:	3310      	adds	r3, #16
 80096c4:	4618      	mov	r0, r3
 80096c6:	f00c fbea 	bl	8015e9e <sys_mbox_valid>
 80096ca:	4603      	mov	r3, r0
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d10d      	bne.n	80096ec <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d008      	beq.n	80096e8 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	891b      	ldrh	r3, [r3, #8]
 80096da:	4619      	mov	r1, r3
 80096dc:	68b8      	ldr	r0, [r7, #8]
 80096de:	f004 f885 	bl	800d7ec <tcp_recved>
      pbuf_free(p);
 80096e2:	6878      	ldr	r0, [r7, #4]
 80096e4:	f003 f8a8 	bl	800c838 <pbuf_free>
    }
    return ERR_OK;
 80096e8:	2300      	movs	r3, #0
 80096ea:	e023      	b.n	8009734 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d005      	beq.n	80096fe <recv_tcp+0xb2>
    msg = p;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	891b      	ldrh	r3, [r3, #8]
 80096fa:	83fb      	strh	r3, [r7, #30]
 80096fc:	e003      	b.n	8009706 <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 80096fe:	4b15      	ldr	r3, [pc, #84]	@ (8009754 <recv_tcp+0x108>)
 8009700:	61bb      	str	r3, [r7, #24]
    len = 0;
 8009702:	2300      	movs	r3, #0
 8009704:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 8009706:	697b      	ldr	r3, [r7, #20]
 8009708:	3310      	adds	r3, #16
 800970a:	69b9      	ldr	r1, [r7, #24]
 800970c:	4618      	mov	r0, r3
 800970e:	f00c fb51 	bl	8015db4 <sys_mbox_trypost>
 8009712:	4603      	mov	r3, r0
 8009714:	2b00      	cmp	r3, #0
 8009716:	d002      	beq.n	800971e <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 8009718:	f04f 33ff 	mov.w	r3, #4294967295
 800971c:	e00a      	b.n	8009734 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800971e:	697b      	ldr	r3, [r7, #20]
 8009720:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009722:	2b00      	cmp	r3, #0
 8009724:	d005      	beq.n	8009732 <recv_tcp+0xe6>
 8009726:	697b      	ldr	r3, [r7, #20]
 8009728:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800972a:	8bfa      	ldrh	r2, [r7, #30]
 800972c:	2100      	movs	r1, #0
 800972e:	6978      	ldr	r0, [r7, #20]
 8009730:	4798      	blx	r3
  }

  return ERR_OK;
 8009732:	2300      	movs	r3, #0
}
 8009734:	4618      	mov	r0, r3
 8009736:	3720      	adds	r7, #32
 8009738:	46bd      	mov	sp, r7
 800973a:	bd80      	pop	{r7, pc}
 800973c:	08017bf4 	.word	0x08017bf4
 8009740:	08017cd0 	.word	0x08017cd0
 8009744:	08017c38 	.word	0x08017c38
 8009748:	08017cf4 	.word	0x08017cf4
 800974c:	08017d14 	.word	0x08017d14
 8009750:	08017d2c 	.word	0x08017d2c
 8009754:	0801ad92 	.word	0x0801ad92

08009758 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 8009758:	b580      	push	{r7, lr}
 800975a:	b084      	sub	sp, #16
 800975c:	af00      	add	r7, sp, #0
 800975e:	6078      	str	r0, [r7, #4]
 8009760:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	2b00      	cmp	r3, #0
 800976a:	d106      	bne.n	800977a <poll_tcp+0x22>
 800976c:	4b2b      	ldr	r3, [pc, #172]	@ (800981c <poll_tcp+0xc4>)
 800976e:	f44f 72b5 	mov.w	r2, #362	@ 0x16a
 8009772:	492b      	ldr	r1, [pc, #172]	@ (8009820 <poll_tcp+0xc8>)
 8009774:	482b      	ldr	r0, [pc, #172]	@ (8009824 <poll_tcp+0xcc>)
 8009776:	f00c fdcb 	bl	8016310 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	785b      	ldrb	r3, [r3, #1]
 800977e:	2b01      	cmp	r3, #1
 8009780:	d104      	bne.n	800978c <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8009782:	2101      	movs	r1, #1
 8009784:	68f8      	ldr	r0, [r7, #12]
 8009786:	f000 ff75 	bl	800a674 <lwip_netconn_do_writemore>
 800978a:	e016      	b.n	80097ba <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	785b      	ldrb	r3, [r3, #1]
 8009790:	2b04      	cmp	r3, #4
 8009792:	d112      	bne.n	80097ba <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009798:	2b00      	cmp	r3, #0
 800979a:	d00a      	beq.n	80097b2 <poll_tcp+0x5a>
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80097a0:	7a5b      	ldrb	r3, [r3, #9]
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d005      	beq.n	80097b2 <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80097aa:	7a5a      	ldrb	r2, [r3, #9]
 80097ac:	3a01      	subs	r2, #1
 80097ae:	b2d2      	uxtb	r2, r2
 80097b0:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 80097b2:	2101      	movs	r1, #1
 80097b4:	68f8      	ldr	r0, [r7, #12]
 80097b6:	f000 fc05 	bl	8009fc4 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80097c0:	f003 0310 	and.w	r3, r3, #16
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d023      	beq.n	8009810 <poll_tcp+0xb8>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	685b      	ldr	r3, [r3, #4]
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d01f      	beq.n	8009810 <poll_tcp+0xb8>
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	685b      	ldr	r3, [r3, #4]
 80097d4:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 80097d8:	f5b3 6f86 	cmp.w	r3, #1072	@ 0x430
 80097dc:	d318      	bcc.n	8009810 <poll_tcp+0xb8>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	685b      	ldr	r3, [r3, #4]
 80097e2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 80097e6:	2b04      	cmp	r3, #4
 80097e8:	d812      	bhi.n	8009810 <poll_tcp+0xb8>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80097f0:	f023 0310 	bic.w	r3, r3, #16
 80097f4:	b2da      	uxtb	r2, r3
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	f883 2020 	strb.w	r2, [r3, #32]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009800:	2b00      	cmp	r3, #0
 8009802:	d005      	beq.n	8009810 <poll_tcp+0xb8>
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009808:	2200      	movs	r2, #0
 800980a:	2102      	movs	r1, #2
 800980c:	68f8      	ldr	r0, [r7, #12]
 800980e:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8009810:	2300      	movs	r3, #0
}
 8009812:	4618      	mov	r0, r3
 8009814:	3710      	adds	r7, #16
 8009816:	46bd      	mov	sp, r7
 8009818:	bd80      	pop	{r7, pc}
 800981a:	bf00      	nop
 800981c:	08017bf4 	.word	0x08017bf4
 8009820:	08017d4c 	.word	0x08017d4c
 8009824:	08017c38 	.word	0x08017c38

08009828 <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 8009828:	b580      	push	{r7, lr}
 800982a:	b086      	sub	sp, #24
 800982c:	af00      	add	r7, sp, #0
 800982e:	60f8      	str	r0, [r7, #12]
 8009830:	60b9      	str	r1, [r7, #8]
 8009832:	4613      	mov	r3, r2
 8009834:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800983a:	697b      	ldr	r3, [r7, #20]
 800983c:	2b00      	cmp	r3, #0
 800983e:	d106      	bne.n	800984e <sent_tcp+0x26>
 8009840:	4b21      	ldr	r3, [pc, #132]	@ (80098c8 <sent_tcp+0xa0>)
 8009842:	f240 1293 	movw	r2, #403	@ 0x193
 8009846:	4921      	ldr	r1, [pc, #132]	@ (80098cc <sent_tcp+0xa4>)
 8009848:	4821      	ldr	r0, [pc, #132]	@ (80098d0 <sent_tcp+0xa8>)
 800984a:	f00c fd61 	bl	8016310 <iprintf>

  if (conn) {
 800984e:	697b      	ldr	r3, [r7, #20]
 8009850:	2b00      	cmp	r3, #0
 8009852:	d034      	beq.n	80098be <sent_tcp+0x96>
    if (conn->state == NETCONN_WRITE) {
 8009854:	697b      	ldr	r3, [r7, #20]
 8009856:	785b      	ldrb	r3, [r3, #1]
 8009858:	2b01      	cmp	r3, #1
 800985a:	d104      	bne.n	8009866 <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800985c:	2101      	movs	r1, #1
 800985e:	6978      	ldr	r0, [r7, #20]
 8009860:	f000 ff08 	bl	800a674 <lwip_netconn_do_writemore>
 8009864:	e007      	b.n	8009876 <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 8009866:	697b      	ldr	r3, [r7, #20]
 8009868:	785b      	ldrb	r3, [r3, #1]
 800986a:	2b04      	cmp	r3, #4
 800986c:	d103      	bne.n	8009876 <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800986e:	2101      	movs	r1, #1
 8009870:	6978      	ldr	r0, [r7, #20]
 8009872:	f000 fba7 	bl	8009fc4 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8009876:	697b      	ldr	r3, [r7, #20]
 8009878:	685b      	ldr	r3, [r3, #4]
 800987a:	2b00      	cmp	r3, #0
 800987c:	d01f      	beq.n	80098be <sent_tcp+0x96>
 800987e:	697b      	ldr	r3, [r7, #20]
 8009880:	685b      	ldr	r3, [r3, #4]
 8009882:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8009886:	f5b3 6f86 	cmp.w	r3, #1072	@ 0x430
 800988a:	d318      	bcc.n	80098be <sent_tcp+0x96>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800988c:	697b      	ldr	r3, [r7, #20]
 800988e:	685b      	ldr	r3, [r3, #4]
 8009890:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8009894:	2b04      	cmp	r3, #4
 8009896:	d812      	bhi.n	80098be <sent_tcp+0x96>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8009898:	697b      	ldr	r3, [r7, #20]
 800989a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800989e:	f023 0310 	bic.w	r3, r3, #16
 80098a2:	b2da      	uxtb	r2, r3
 80098a4:	697b      	ldr	r3, [r7, #20]
 80098a6:	f883 2020 	strb.w	r2, [r3, #32]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 80098aa:	697b      	ldr	r3, [r7, #20]
 80098ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d005      	beq.n	80098be <sent_tcp+0x96>
 80098b2:	697b      	ldr	r3, [r7, #20]
 80098b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098b6:	88fa      	ldrh	r2, [r7, #6]
 80098b8:	2102      	movs	r1, #2
 80098ba:	6978      	ldr	r0, [r7, #20]
 80098bc:	4798      	blx	r3
    }
  }

  return ERR_OK;
 80098be:	2300      	movs	r3, #0
}
 80098c0:	4618      	mov	r0, r3
 80098c2:	3718      	adds	r7, #24
 80098c4:	46bd      	mov	sp, r7
 80098c6:	bd80      	pop	{r7, pc}
 80098c8:	08017bf4 	.word	0x08017bf4
 80098cc:	08017d4c 	.word	0x08017d4c
 80098d0:	08017c38 	.word	0x08017c38

080098d4 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 80098d4:	b580      	push	{r7, lr}
 80098d6:	b088      	sub	sp, #32
 80098d8:	af00      	add	r7, sp, #0
 80098da:	6078      	str	r0, [r7, #4]
 80098dc:	460b      	mov	r3, r1
 80098de:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 80098e4:	69fb      	ldr	r3, [r7, #28]
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d106      	bne.n	80098f8 <err_tcp+0x24>
 80098ea:	4b61      	ldr	r3, [pc, #388]	@ (8009a70 <err_tcp+0x19c>)
 80098ec:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 80098f0:	4960      	ldr	r1, [pc, #384]	@ (8009a74 <err_tcp+0x1a0>)
 80098f2:	4861      	ldr	r0, [pc, #388]	@ (8009a78 <err_tcp+0x1a4>)
 80098f4:	f00c fd0c 	bl	8016310 <iprintf>

  SYS_ARCH_PROTECT(lev);
 80098f8:	f00c fbec 	bl	80160d4 <sys_arch_protect>
 80098fc:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 80098fe:	69fb      	ldr	r3, [r7, #28]
 8009900:	2200      	movs	r2, #0
 8009902:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 8009904:	69fb      	ldr	r3, [r7, #28]
 8009906:	78fa      	ldrb	r2, [r7, #3]
 8009908:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 800990a:	69fb      	ldr	r3, [r7, #28]
 800990c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009910:	f043 0301 	orr.w	r3, r3, #1
 8009914:	b2da      	uxtb	r2, r3
 8009916:	69fb      	ldr	r3, [r7, #28]
 8009918:	f883 2020 	strb.w	r2, [r3, #32]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 800991c:	69fb      	ldr	r3, [r7, #28]
 800991e:	785b      	ldrb	r3, [r3, #1]
 8009920:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 8009922:	69fb      	ldr	r3, [r7, #28]
 8009924:	2200      	movs	r2, #0
 8009926:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 8009928:	69b8      	ldr	r0, [r7, #24]
 800992a:	f00c fbe1 	bl	80160f0 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800992e:	69fb      	ldr	r3, [r7, #28]
 8009930:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009932:	2b00      	cmp	r3, #0
 8009934:	d005      	beq.n	8009942 <err_tcp+0x6e>
 8009936:	69fb      	ldr	r3, [r7, #28]
 8009938:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800993a:	2200      	movs	r2, #0
 800993c:	2104      	movs	r1, #4
 800993e:	69f8      	ldr	r0, [r7, #28]
 8009940:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8009942:	69fb      	ldr	r3, [r7, #28]
 8009944:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009946:	2b00      	cmp	r3, #0
 8009948:	d005      	beq.n	8009956 <err_tcp+0x82>
 800994a:	69fb      	ldr	r3, [r7, #28]
 800994c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800994e:	2200      	movs	r2, #0
 8009950:	2100      	movs	r1, #0
 8009952:	69f8      	ldr	r0, [r7, #28]
 8009954:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8009956:	69fb      	ldr	r3, [r7, #28]
 8009958:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800995a:	2b00      	cmp	r3, #0
 800995c:	d005      	beq.n	800996a <err_tcp+0x96>
 800995e:	69fb      	ldr	r3, [r7, #28]
 8009960:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009962:	2200      	movs	r2, #0
 8009964:	2102      	movs	r1, #2
 8009966:	69f8      	ldr	r0, [r7, #28]
 8009968:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 800996a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800996e:	4618      	mov	r0, r3
 8009970:	f7ff fd7e 	bl	8009470 <lwip_netconn_err_to_msg>
 8009974:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8009976:	69fb      	ldr	r3, [r7, #28]
 8009978:	3310      	adds	r3, #16
 800997a:	4618      	mov	r0, r3
 800997c:	f00c fa8f 	bl	8015e9e <sys_mbox_valid>
 8009980:	4603      	mov	r3, r0
 8009982:	2b00      	cmp	r3, #0
 8009984:	d005      	beq.n	8009992 <err_tcp+0xbe>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 8009986:	69fb      	ldr	r3, [r7, #28]
 8009988:	3310      	adds	r3, #16
 800998a:	6939      	ldr	r1, [r7, #16]
 800998c:	4618      	mov	r0, r3
 800998e:	f00c fa11 	bl	8015db4 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 8009992:	69fb      	ldr	r3, [r7, #28]
 8009994:	3314      	adds	r3, #20
 8009996:	4618      	mov	r0, r3
 8009998:	f00c fa81 	bl	8015e9e <sys_mbox_valid>
 800999c:	4603      	mov	r3, r0
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d005      	beq.n	80099ae <err_tcp+0xda>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 80099a2:	69fb      	ldr	r3, [r7, #28]
 80099a4:	3314      	adds	r3, #20
 80099a6:	6939      	ldr	r1, [r7, #16]
 80099a8:	4618      	mov	r0, r3
 80099aa:	f00c fa03 	bl	8015db4 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 80099ae:	7dfb      	ldrb	r3, [r7, #23]
 80099b0:	2b01      	cmp	r3, #1
 80099b2:	d005      	beq.n	80099c0 <err_tcp+0xec>
 80099b4:	7dfb      	ldrb	r3, [r7, #23]
 80099b6:	2b04      	cmp	r3, #4
 80099b8:	d002      	beq.n	80099c0 <err_tcp+0xec>
 80099ba:	7dfb      	ldrb	r3, [r7, #23]
 80099bc:	2b03      	cmp	r3, #3
 80099be:	d146      	bne.n	8009a4e <err_tcp+0x17a>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 80099c0:	69fb      	ldr	r3, [r7, #28]
 80099c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80099c6:	f003 0304 	and.w	r3, r3, #4
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	bf14      	ite	ne
 80099ce:	2301      	movne	r3, #1
 80099d0:	2300      	moveq	r3, #0
 80099d2:	b2db      	uxtb	r3, r3
 80099d4:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 80099d6:	69fb      	ldr	r3, [r7, #28]
 80099d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80099dc:	f023 0304 	bic.w	r3, r3, #4
 80099e0:	b2da      	uxtb	r2, r3
 80099e2:	69fb      	ldr	r3, [r7, #28]
 80099e4:	f883 2020 	strb.w	r2, [r3, #32]

    if (!was_nonblocking_connect) {
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d13b      	bne.n	8009a66 <err_tcp+0x192>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 80099ee:	69fb      	ldr	r3, [r7, #28]
 80099f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d106      	bne.n	8009a04 <err_tcp+0x130>
 80099f6:	4b1e      	ldr	r3, [pc, #120]	@ (8009a70 <err_tcp+0x19c>)
 80099f8:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 80099fc:	491f      	ldr	r1, [pc, #124]	@ (8009a7c <err_tcp+0x1a8>)
 80099fe:	481e      	ldr	r0, [pc, #120]	@ (8009a78 <err_tcp+0x1a4>)
 8009a00:	f00c fc86 	bl	8016310 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 8009a04:	7dfb      	ldrb	r3, [r7, #23]
 8009a06:	2b04      	cmp	r3, #4
 8009a08:	d104      	bne.n	8009a14 <err_tcp+0x140>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 8009a0a:	69fb      	ldr	r3, [r7, #28]
 8009a0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a0e:	2200      	movs	r2, #0
 8009a10:	711a      	strb	r2, [r3, #4]
 8009a12:	e003      	b.n	8009a1c <err_tcp+0x148>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 8009a14:	69fb      	ldr	r3, [r7, #28]
 8009a16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a18:	78fa      	ldrb	r2, [r7, #3]
 8009a1a:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8009a1c:	69fb      	ldr	r3, [r7, #28]
 8009a1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	330c      	adds	r3, #12
 8009a24:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 8009a26:	68b8      	ldr	r0, [r7, #8]
 8009a28:	f00c faca 	bl	8015fc0 <sys_sem_valid>
 8009a2c:	4603      	mov	r3, r0
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d106      	bne.n	8009a40 <err_tcp+0x16c>
 8009a32:	4b0f      	ldr	r3, [pc, #60]	@ (8009a70 <err_tcp+0x19c>)
 8009a34:	f240 12ef 	movw	r2, #495	@ 0x1ef
 8009a38:	4911      	ldr	r1, [pc, #68]	@ (8009a80 <err_tcp+0x1ac>)
 8009a3a:	480f      	ldr	r0, [pc, #60]	@ (8009a78 <err_tcp+0x1a4>)
 8009a3c:	f00c fc68 	bl	8016310 <iprintf>
      conn->current_msg = NULL;
 8009a40:	69fb      	ldr	r3, [r7, #28]
 8009a42:	2200      	movs	r2, #0
 8009a44:	625a      	str	r2, [r3, #36]	@ 0x24
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 8009a46:	68b8      	ldr	r0, [r7, #8]
 8009a48:	f00c faa0 	bl	8015f8c <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 8009a4c:	e00b      	b.n	8009a66 <err_tcp+0x192>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 8009a4e:	69fb      	ldr	r3, [r7, #28]
 8009a50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d008      	beq.n	8009a68 <err_tcp+0x194>
 8009a56:	4b06      	ldr	r3, [pc, #24]	@ (8009a70 <err_tcp+0x19c>)
 8009a58:	f240 12f7 	movw	r2, #503	@ 0x1f7
 8009a5c:	4909      	ldr	r1, [pc, #36]	@ (8009a84 <err_tcp+0x1b0>)
 8009a5e:	4806      	ldr	r0, [pc, #24]	@ (8009a78 <err_tcp+0x1a4>)
 8009a60:	f00c fc56 	bl	8016310 <iprintf>
  }
}
 8009a64:	e000      	b.n	8009a68 <err_tcp+0x194>
      (old_state == NETCONN_CONNECT)) {
 8009a66:	bf00      	nop
}
 8009a68:	bf00      	nop
 8009a6a:	3720      	adds	r7, #32
 8009a6c:	46bd      	mov	sp, r7
 8009a6e:	bd80      	pop	{r7, pc}
 8009a70:	08017bf4 	.word	0x08017bf4
 8009a74:	08017d4c 	.word	0x08017d4c
 8009a78:	08017c38 	.word	0x08017c38
 8009a7c:	08017d5c 	.word	0x08017d5c
 8009a80:	08017d78 	.word	0x08017d78
 8009a84:	08017d94 	.word	0x08017d94

08009a88 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 8009a88:	b580      	push	{r7, lr}
 8009a8a:	b084      	sub	sp, #16
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	685b      	ldr	r3, [r3, #4]
 8009a94:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 8009a96:	6879      	ldr	r1, [r7, #4]
 8009a98:	68f8      	ldr	r0, [r7, #12]
 8009a9a:	f004 fd7b 	bl	800e594 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 8009a9e:	490a      	ldr	r1, [pc, #40]	@ (8009ac8 <setup_tcp+0x40>)
 8009aa0:	68f8      	ldr	r0, [r7, #12]
 8009aa2:	f004 fd89 	bl	800e5b8 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 8009aa6:	4909      	ldr	r1, [pc, #36]	@ (8009acc <setup_tcp+0x44>)
 8009aa8:	68f8      	ldr	r0, [r7, #12]
 8009aaa:	f004 fda7 	bl	800e5fc <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 8009aae:	2202      	movs	r2, #2
 8009ab0:	4907      	ldr	r1, [pc, #28]	@ (8009ad0 <setup_tcp+0x48>)
 8009ab2:	68f8      	ldr	r0, [r7, #12]
 8009ab4:	f004 fdfe 	bl	800e6b4 <tcp_poll>
  tcp_err(pcb, err_tcp);
 8009ab8:	4906      	ldr	r1, [pc, #24]	@ (8009ad4 <setup_tcp+0x4c>)
 8009aba:	68f8      	ldr	r0, [r7, #12]
 8009abc:	f004 fdc0 	bl	800e640 <tcp_err>
}
 8009ac0:	bf00      	nop
 8009ac2:	3710      	adds	r7, #16
 8009ac4:	46bd      	mov	sp, r7
 8009ac6:	bd80      	pop	{r7, pc}
 8009ac8:	0800964d 	.word	0x0800964d
 8009acc:	08009829 	.word	0x08009829
 8009ad0:	08009759 	.word	0x08009759
 8009ad4:	080098d5 	.word	0x080098d5

08009ad8 <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 8009ad8:	b590      	push	{r4, r7, lr}
 8009ada:	b089      	sub	sp, #36	@ 0x24
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	60f8      	str	r0, [r7, #12]
 8009ae0:	60b9      	str	r1, [r7, #8]
 8009ae2:	4613      	mov	r3, r2
 8009ae4:	71fb      	strb	r3, [r7, #7]
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 8009aea:	69fb      	ldr	r3, [r7, #28]
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d102      	bne.n	8009af6 <accept_function+0x1e>
    return ERR_VAL;
 8009af0:	f06f 0305 	mvn.w	r3, #5
 8009af4:	e0a1      	b.n	8009c3a <accept_function+0x162>
  }
  if (!NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 8009af6:	69fb      	ldr	r3, [r7, #28]
 8009af8:	3314      	adds	r3, #20
 8009afa:	4618      	mov	r0, r3
 8009afc:	f00c f9cf 	bl	8015e9e <sys_mbox_valid>
 8009b00:	4603      	mov	r3, r0
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d102      	bne.n	8009b0c <accept_function+0x34>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
 8009b06:	f06f 0305 	mvn.w	r3, #5
 8009b0a:	e096      	b.n	8009c3a <accept_function+0x162>
  }

  if (newpcb == NULL) {
 8009b0c:	68bb      	ldr	r3, [r7, #8]
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d11b      	bne.n	8009b4a <accept_function+0x72>
    /* out-of-pcbs during connect: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 8009b12:	69fb      	ldr	r3, [r7, #28]
 8009b14:	f103 0414 	add.w	r4, r3, #20
 8009b18:	f06f 000c 	mvn.w	r0, #12
 8009b1c:	f7ff fca8 	bl	8009470 <lwip_netconn_err_to_msg>
 8009b20:	4603      	mov	r3, r0
 8009b22:	4619      	mov	r1, r3
 8009b24:	4620      	mov	r0, r4
 8009b26:	f00c f945 	bl	8015db4 <sys_mbox_trypost>
 8009b2a:	4603      	mov	r3, r0
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d109      	bne.n	8009b44 <accept_function+0x6c>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8009b30:	69fb      	ldr	r3, [r7, #28]
 8009b32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d005      	beq.n	8009b44 <accept_function+0x6c>
 8009b38:	69fb      	ldr	r3, [r7, #28]
 8009b3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b3c:	2200      	movs	r2, #0
 8009b3e:	2100      	movs	r1, #0
 8009b40:	69f8      	ldr	r0, [r7, #28]
 8009b42:	4798      	blx	r3
    }
    return ERR_VAL;
 8009b44:	f06f 0305 	mvn.w	r3, #5
 8009b48:	e077      	b.n	8009c3a <accept_function+0x162>
  }
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 8009b4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d006      	beq.n	8009b60 <accept_function+0x88>
 8009b52:	4b3c      	ldr	r3, [pc, #240]	@ (8009c44 <accept_function+0x16c>)
 8009b54:	f240 222a 	movw	r2, #554	@ 0x22a
 8009b58:	493b      	ldr	r1, [pc, #236]	@ (8009c48 <accept_function+0x170>)
 8009b5a:	483c      	ldr	r0, [pc, #240]	@ (8009c4c <accept_function+0x174>)
 8009b5c:	f00c fbd8 	bl	8016310 <iprintf>

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->state: %s\n", tcp_debug_state_str(newpcb->state)));

  /* We have to set the callback here even though
   * the new socket is unknown. newconn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
 8009b60:	69fb      	ldr	r3, [r7, #28]
 8009b62:	781a      	ldrb	r2, [r3, #0]
 8009b64:	69fb      	ldr	r3, [r7, #28]
 8009b66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b68:	4619      	mov	r1, r3
 8009b6a:	4610      	mov	r0, r2
 8009b6c:	f000 f8f0 	bl	8009d50 <netconn_alloc>
 8009b70:	61b8      	str	r0, [r7, #24]
  if (newconn == NULL) {
 8009b72:	69bb      	ldr	r3, [r7, #24]
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d11b      	bne.n	8009bb0 <accept_function+0xd8>
    /* outof netconns: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 8009b78:	69fb      	ldr	r3, [r7, #28]
 8009b7a:	f103 0414 	add.w	r4, r3, #20
 8009b7e:	f06f 000c 	mvn.w	r0, #12
 8009b82:	f7ff fc75 	bl	8009470 <lwip_netconn_err_to_msg>
 8009b86:	4603      	mov	r3, r0
 8009b88:	4619      	mov	r1, r3
 8009b8a:	4620      	mov	r0, r4
 8009b8c:	f00c f912 	bl	8015db4 <sys_mbox_trypost>
 8009b90:	4603      	mov	r3, r0
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d109      	bne.n	8009baa <accept_function+0xd2>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8009b96:	69fb      	ldr	r3, [r7, #28]
 8009b98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d005      	beq.n	8009baa <accept_function+0xd2>
 8009b9e:	69fb      	ldr	r3, [r7, #28]
 8009ba0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ba2:	2200      	movs	r2, #0
 8009ba4:	2100      	movs	r1, #0
 8009ba6:	69f8      	ldr	r0, [r7, #28]
 8009ba8:	4798      	blx	r3
    }
    return ERR_MEM;
 8009baa:	f04f 33ff 	mov.w	r3, #4294967295
 8009bae:	e044      	b.n	8009c3a <accept_function+0x162>
  }
  newconn->pcb.tcp = newpcb;
 8009bb0:	69bb      	ldr	r3, [r7, #24]
 8009bb2:	68ba      	ldr	r2, [r7, #8]
 8009bb4:	605a      	str	r2, [r3, #4]
  setup_tcp(newconn);
 8009bb6:	69b8      	ldr	r0, [r7, #24]
 8009bb8:	f7ff ff66 	bl	8009a88 <setup_tcp>

  /* handle backlog counter */
  tcp_backlog_delayed(newpcb);

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 8009bbc:	69fb      	ldr	r3, [r7, #28]
 8009bbe:	3314      	adds	r3, #20
 8009bc0:	69b9      	ldr	r1, [r7, #24]
 8009bc2:	4618      	mov	r0, r3
 8009bc4:	f00c f8f6 	bl	8015db4 <sys_mbox_trypost>
 8009bc8:	4603      	mov	r3, r0
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d02a      	beq.n	8009c24 <accept_function+0x14c>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb *pcb = newconn->pcb.tcp;
 8009bce:	69bb      	ldr	r3, [r7, #24]
 8009bd0:	685b      	ldr	r3, [r3, #4]
 8009bd2:	617b      	str	r3, [r7, #20]
    tcp_arg(pcb, NULL);
 8009bd4:	2100      	movs	r1, #0
 8009bd6:	6978      	ldr	r0, [r7, #20]
 8009bd8:	f004 fcdc 	bl	800e594 <tcp_arg>
    tcp_recv(pcb, NULL);
 8009bdc:	2100      	movs	r1, #0
 8009bde:	6978      	ldr	r0, [r7, #20]
 8009be0:	f004 fcea 	bl	800e5b8 <tcp_recv>
    tcp_sent(pcb, NULL);
 8009be4:	2100      	movs	r1, #0
 8009be6:	6978      	ldr	r0, [r7, #20]
 8009be8:	f004 fd08 	bl	800e5fc <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 8009bec:	2200      	movs	r2, #0
 8009bee:	2100      	movs	r1, #0
 8009bf0:	6978      	ldr	r0, [r7, #20]
 8009bf2:	f004 fd5f 	bl	800e6b4 <tcp_poll>
    tcp_err(pcb, NULL);
 8009bf6:	2100      	movs	r1, #0
 8009bf8:	6978      	ldr	r0, [r7, #20]
 8009bfa:	f004 fd21 	bl	800e640 <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
 8009bfe:	69bb      	ldr	r3, [r7, #24]
 8009c00:	2200      	movs	r2, #0
 8009c02:	605a      	str	r2, [r3, #4]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
 8009c04:	69bb      	ldr	r3, [r7, #24]
 8009c06:	3310      	adds	r3, #16
 8009c08:	4618      	mov	r0, r3
 8009c0a:	f00c f8c1 	bl	8015d90 <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 8009c0e:	69bb      	ldr	r3, [r7, #24]
 8009c10:	3310      	adds	r3, #16
 8009c12:	4618      	mov	r0, r3
 8009c14:	f00c f954 	bl	8015ec0 <sys_mbox_set_invalid>
    netconn_free(newconn);
 8009c18:	69b8      	ldr	r0, [r7, #24]
 8009c1a:	f000 f90b 	bl	8009e34 <netconn_free>
    return ERR_MEM;
 8009c1e:	f04f 33ff 	mov.w	r3, #4294967295
 8009c22:	e00a      	b.n	8009c3a <accept_function+0x162>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8009c24:	69fb      	ldr	r3, [r7, #28]
 8009c26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d005      	beq.n	8009c38 <accept_function+0x160>
 8009c2c:	69fb      	ldr	r3, [r7, #28]
 8009c2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c30:	2200      	movs	r2, #0
 8009c32:	2100      	movs	r1, #0
 8009c34:	69f8      	ldr	r0, [r7, #28]
 8009c36:	4798      	blx	r3
  }

  return ERR_OK;
 8009c38:	2300      	movs	r3, #0
}
 8009c3a:	4618      	mov	r0, r3
 8009c3c:	3724      	adds	r7, #36	@ 0x24
 8009c3e:	46bd      	mov	sp, r7
 8009c40:	bd90      	pop	{r4, r7, pc}
 8009c42:	bf00      	nop
 8009c44:	08017bf4 	.word	0x08017bf4
 8009c48:	08017db0 	.word	0x08017db0
 8009c4c:	08017c38 	.word	0x08017c38

08009c50 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 8009c50:	b590      	push	{r4, r7, lr}
 8009c52:	b085      	sub	sp, #20
 8009c54:	af00      	add	r7, sp, #0
 8009c56:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 8009c58:	2300      	movs	r3, #0
 8009c5a:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	685b      	ldr	r3, [r3, #4]
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d006      	beq.n	8009c74 <pcb_new+0x24>
 8009c66:	4b2b      	ldr	r3, [pc, #172]	@ (8009d14 <pcb_new+0xc4>)
 8009c68:	f240 2265 	movw	r2, #613	@ 0x265
 8009c6c:	492a      	ldr	r1, [pc, #168]	@ (8009d18 <pcb_new+0xc8>)
 8009c6e:	482b      	ldr	r0, [pc, #172]	@ (8009d1c <pcb_new+0xcc>)
 8009c70:	f00c fb4e 	bl	8016310 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	781b      	ldrb	r3, [r3, #0]
 8009c7a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009c7e:	2b10      	cmp	r3, #16
 8009c80:	d022      	beq.n	8009cc8 <pcb_new+0x78>
 8009c82:	2b20      	cmp	r3, #32
 8009c84:	d133      	bne.n	8009cee <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	681c      	ldr	r4, [r3, #0]
 8009c8a:	7bfb      	ldrb	r3, [r7, #15]
 8009c8c:	4618      	mov	r0, r3
 8009c8e:	f009 fd5a 	bl	8013746 <udp_new_ip_type>
 8009c92:	4603      	mov	r3, r0
 8009c94:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	685b      	ldr	r3, [r3, #4]
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d02a      	beq.n	8009cf6 <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	781b      	ldrb	r3, [r3, #0]
 8009ca6:	2b22      	cmp	r3, #34	@ 0x22
 8009ca8:	d104      	bne.n	8009cb4 <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	685b      	ldr	r3, [r3, #4]
 8009cb0:	2201      	movs	r2, #1
 8009cb2:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	6858      	ldr	r0, [r3, #4]
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	461a      	mov	r2, r3
 8009cc0:	4917      	ldr	r1, [pc, #92]	@ (8009d20 <pcb_new+0xd0>)
 8009cc2:	f009 fcc7 	bl	8013654 <udp_recv>
      }
      break;
 8009cc6:	e016      	b.n	8009cf6 <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	681c      	ldr	r4, [r3, #0]
 8009ccc:	7bfb      	ldrb	r3, [r7, #15]
 8009cce:	4618      	mov	r0, r3
 8009cd0:	f004 fc52 	bl	800e578 <tcp_new_ip_type>
 8009cd4:	4603      	mov	r3, r0
 8009cd6:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	685b      	ldr	r3, [r3, #4]
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d00b      	beq.n	8009cfa <pcb_new+0xaa>
        setup_tcp(msg->conn);
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	4618      	mov	r0, r3
 8009ce8:	f7ff fece 	bl	8009a88 <setup_tcp>
      }
      break;
 8009cec:	e005      	b.n	8009cfa <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	22fa      	movs	r2, #250	@ 0xfa
 8009cf2:	711a      	strb	r2, [r3, #4]
      return;
 8009cf4:	e00a      	b.n	8009d0c <pcb_new+0xbc>
      break;
 8009cf6:	bf00      	nop
 8009cf8:	e000      	b.n	8009cfc <pcb_new+0xac>
      break;
 8009cfa:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	685b      	ldr	r3, [r3, #4]
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d102      	bne.n	8009d0c <pcb_new+0xbc>
    msg->err = ERR_MEM;
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	22ff      	movs	r2, #255	@ 0xff
 8009d0a:	711a      	strb	r2, [r3, #4]
  }
}
 8009d0c:	3714      	adds	r7, #20
 8009d0e:	46bd      	mov	sp, r7
 8009d10:	bd90      	pop	{r4, r7, pc}
 8009d12:	bf00      	nop
 8009d14:	08017bf4 	.word	0x08017bf4
 8009d18:	08017dd8 	.word	0x08017dd8
 8009d1c:	08017c38 	.word	0x08017c38
 8009d20:	08009551 	.word	0x08009551

08009d24 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 8009d24:	b580      	push	{r7, lr}
 8009d26:	b084      	sub	sp, #16
 8009d28:	af00      	add	r7, sp, #0
 8009d2a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	2200      	movs	r2, #0
 8009d34:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	685b      	ldr	r3, [r3, #4]
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d102      	bne.n	8009d46 <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 8009d40:	68f8      	ldr	r0, [r7, #12]
 8009d42:	f7ff ff85 	bl	8009c50 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 8009d46:	bf00      	nop
 8009d48:	3710      	adds	r7, #16
 8009d4a:	46bd      	mov	sp, r7
 8009d4c:	bd80      	pop	{r7, pc}
	...

08009d50 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 8009d50:	b580      	push	{r7, lr}
 8009d52:	b086      	sub	sp, #24
 8009d54:	af00      	add	r7, sp, #0
 8009d56:	4603      	mov	r3, r0
 8009d58:	6039      	str	r1, [r7, #0]
 8009d5a:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 8009d5c:	2300      	movs	r3, #0
 8009d5e:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 8009d60:	2007      	movs	r0, #7
 8009d62:	f001 fe4f 	bl	800ba04 <memp_malloc>
 8009d66:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d101      	bne.n	8009d72 <netconn_alloc+0x22>
    return NULL;
 8009d6e:	2300      	movs	r3, #0
 8009d70:	e056      	b.n	8009e20 <netconn_alloc+0xd0>
  }

  conn->pending_err = ERR_OK;
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	2200      	movs	r2, #0
 8009d76:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	79fa      	ldrb	r2, [r7, #7]
 8009d7c:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	2200      	movs	r2, #0
 8009d82:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 8009d84:	79fb      	ldrb	r3, [r7, #7]
 8009d86:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009d8a:	2b10      	cmp	r3, #16
 8009d8c:	d004      	beq.n	8009d98 <netconn_alloc+0x48>
 8009d8e:	2b20      	cmp	r3, #32
 8009d90:	d105      	bne.n	8009d9e <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 8009d92:	2306      	movs	r3, #6
 8009d94:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 8009d96:	e00a      	b.n	8009dae <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 8009d98:	2306      	movs	r3, #6
 8009d9a:	617b      	str	r3, [r7, #20]
      break;
 8009d9c:	e007      	b.n	8009dae <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 8009d9e:	4b22      	ldr	r3, [pc, #136]	@ (8009e28 <netconn_alloc+0xd8>)
 8009da0:	f240 22e5 	movw	r2, #741	@ 0x2e5
 8009da4:	4921      	ldr	r1, [pc, #132]	@ (8009e2c <netconn_alloc+0xdc>)
 8009da6:	4822      	ldr	r0, [pc, #136]	@ (8009e30 <netconn_alloc+0xe0>)
 8009da8:	f00c fab2 	bl	8016310 <iprintf>
      goto free_and_return;
 8009dac:	e033      	b.n	8009e16 <netconn_alloc+0xc6>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	3310      	adds	r3, #16
 8009db2:	6979      	ldr	r1, [r7, #20]
 8009db4:	4618      	mov	r0, r3
 8009db6:	f00b ffc9 	bl	8015d4c <sys_mbox_new>
 8009dba:	4603      	mov	r3, r0
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d129      	bne.n	8009e14 <netconn_alloc+0xc4>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	330c      	adds	r3, #12
 8009dc4:	2100      	movs	r1, #0
 8009dc6:	4618      	mov	r0, r3
 8009dc8:	f00c f887 	bl	8015eda <sys_sem_new>
 8009dcc:	4603      	mov	r3, r0
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d005      	beq.n	8009dde <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	3310      	adds	r3, #16
 8009dd6:	4618      	mov	r0, r3
 8009dd8:	f00b ffda 	bl	8015d90 <sys_mbox_free>
    goto free_and_return;
 8009ddc:	e01b      	b.n	8009e16 <netconn_alloc+0xc6>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	3314      	adds	r3, #20
 8009de2:	4618      	mov	r0, r3
 8009de4:	f00c f86c 	bl	8015ec0 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	2200      	movs	r2, #0
 8009dec:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	f04f 32ff 	mov.w	r2, #4294967295
 8009df4:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	683a      	ldr	r2, [r7, #0]
 8009dfa:	629a      	str	r2, [r3, #40]	@ 0x28
#if LWIP_TCP
  conn->current_msg  = NULL;
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	2200      	movs	r2, #0
 8009e00:	625a      	str	r2, [r3, #36]	@ 0x24
#endif /* LWIP_TCP */
#if LWIP_SO_SNDTIMEO
  conn->send_timeout = 0;
#endif /* LWIP_SO_SNDTIMEO */
#if LWIP_SO_RCVTIMEO
  conn->recv_timeout = 0;
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	2200      	movs	r2, #0
 8009e06:	61da      	str	r2, [r3, #28]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	7cfa      	ldrb	r2, [r7, #19]
 8009e0c:	f883 2020 	strb.w	r2, [r3, #32]
  return conn;
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	e005      	b.n	8009e20 <netconn_alloc+0xd0>
    goto free_and_return;
 8009e14:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 8009e16:	68f9      	ldr	r1, [r7, #12]
 8009e18:	2007      	movs	r0, #7
 8009e1a:	f001 fe69 	bl	800baf0 <memp_free>
  return NULL;
 8009e1e:	2300      	movs	r3, #0
}
 8009e20:	4618      	mov	r0, r3
 8009e22:	3718      	adds	r7, #24
 8009e24:	46bd      	mov	sp, r7
 8009e26:	bd80      	pop	{r7, pc}
 8009e28:	08017bf4 	.word	0x08017bf4
 8009e2c:	08017df8 	.word	0x08017df8
 8009e30:	08017c38 	.word	0x08017c38

08009e34 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 8009e34:	b580      	push	{r7, lr}
 8009e36:	b082      	sub	sp, #8
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	685b      	ldr	r3, [r3, #4]
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d006      	beq.n	8009e52 <netconn_free+0x1e>
 8009e44:	4b1b      	ldr	r3, [pc, #108]	@ (8009eb4 <netconn_free+0x80>)
 8009e46:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 8009e4a:	491b      	ldr	r1, [pc, #108]	@ (8009eb8 <netconn_free+0x84>)
 8009e4c:	481b      	ldr	r0, [pc, #108]	@ (8009ebc <netconn_free+0x88>)
 8009e4e:	f00c fa5f 	bl	8016310 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	3310      	adds	r3, #16
 8009e56:	4618      	mov	r0, r3
 8009e58:	f00c f821 	bl	8015e9e <sys_mbox_valid>
 8009e5c:	4603      	mov	r3, r0
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d006      	beq.n	8009e70 <netconn_free+0x3c>
 8009e62:	4b14      	ldr	r3, [pc, #80]	@ (8009eb4 <netconn_free+0x80>)
 8009e64:	f240 3223 	movw	r2, #803	@ 0x323
 8009e68:	4915      	ldr	r1, [pc, #84]	@ (8009ec0 <netconn_free+0x8c>)
 8009e6a:	4814      	ldr	r0, [pc, #80]	@ (8009ebc <netconn_free+0x88>)
 8009e6c:	f00c fa50 	bl	8016310 <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	3314      	adds	r3, #20
 8009e74:	4618      	mov	r0, r3
 8009e76:	f00c f812 	bl	8015e9e <sys_mbox_valid>
 8009e7a:	4603      	mov	r3, r0
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d006      	beq.n	8009e8e <netconn_free+0x5a>
 8009e80:	4b0c      	ldr	r3, [pc, #48]	@ (8009eb4 <netconn_free+0x80>)
 8009e82:	f240 3226 	movw	r2, #806	@ 0x326
 8009e86:	490f      	ldr	r1, [pc, #60]	@ (8009ec4 <netconn_free+0x90>)
 8009e88:	480c      	ldr	r0, [pc, #48]	@ (8009ebc <netconn_free+0x88>)
 8009e8a:	f00c fa41 	bl	8016310 <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	330c      	adds	r3, #12
 8009e92:	4618      	mov	r0, r3
 8009e94:	f00c f887 	bl	8015fa6 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	330c      	adds	r3, #12
 8009e9c:	4618      	mov	r0, r3
 8009e9e:	f00c f8a0 	bl	8015fe2 <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 8009ea2:	6879      	ldr	r1, [r7, #4]
 8009ea4:	2007      	movs	r0, #7
 8009ea6:	f001 fe23 	bl	800baf0 <memp_free>
}
 8009eaa:	bf00      	nop
 8009eac:	3708      	adds	r7, #8
 8009eae:	46bd      	mov	sp, r7
 8009eb0:	bd80      	pop	{r7, pc}
 8009eb2:	bf00      	nop
 8009eb4:	08017bf4 	.word	0x08017bf4
 8009eb8:	08017e20 	.word	0x08017e20
 8009ebc:	08017c38 	.word	0x08017c38
 8009ec0:	08017e50 	.word	0x08017e50
 8009ec4:	08017e8c 	.word	0x08017e8c

08009ec8 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 8009ec8:	b580      	push	{r7, lr}
 8009eca:	b086      	sub	sp, #24
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	3310      	adds	r3, #16
 8009ed4:	4618      	mov	r0, r3
 8009ed6:	f00b ffe2 	bl	8015e9e <sys_mbox_valid>
 8009eda:	4603      	mov	r3, r0
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d02f      	beq.n	8009f40 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8009ee0:	e018      	b.n	8009f14 <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	781b      	ldrb	r3, [r3, #0]
 8009ee6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009eea:	2b10      	cmp	r3, #16
 8009eec:	d10e      	bne.n	8009f0c <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 8009eee:	693b      	ldr	r3, [r7, #16]
 8009ef0:	f107 020f 	add.w	r2, r7, #15
 8009ef4:	4611      	mov	r1, r2
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	f7ff faf0 	bl	80094dc <lwip_netconn_is_err_msg>
 8009efc:	4603      	mov	r3, r0
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d108      	bne.n	8009f14 <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 8009f02:	693b      	ldr	r3, [r7, #16]
 8009f04:	4618      	mov	r0, r3
 8009f06:	f002 fc97 	bl	800c838 <pbuf_free>
 8009f0a:	e003      	b.n	8009f14 <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 8009f0c:	693b      	ldr	r3, [r7, #16]
 8009f0e:	4618      	mov	r0, r3
 8009f10:	f000 fe98 	bl	800ac44 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	3310      	adds	r3, #16
 8009f18:	f107 0210 	add.w	r2, r7, #16
 8009f1c:	4611      	mov	r1, r2
 8009f1e:	4618      	mov	r0, r3
 8009f20:	f00b ffa1 	bl	8015e66 <sys_arch_mbox_tryfetch>
 8009f24:	4603      	mov	r3, r0
 8009f26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f2a:	d1da      	bne.n	8009ee2 <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	3310      	adds	r3, #16
 8009f30:	4618      	mov	r0, r3
 8009f32:	f00b ff2d 	bl	8015d90 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	3310      	adds	r3, #16
 8009f3a:	4618      	mov	r0, r3
 8009f3c:	f00b ffc0 	bl	8015ec0 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	3314      	adds	r3, #20
 8009f44:	4618      	mov	r0, r3
 8009f46:	f00b ffaa 	bl	8015e9e <sys_mbox_valid>
 8009f4a:	4603      	mov	r3, r0
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d034      	beq.n	8009fba <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8009f50:	e01d      	b.n	8009f8e <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 8009f52:	693b      	ldr	r3, [r7, #16]
 8009f54:	f107 020e 	add.w	r2, r7, #14
 8009f58:	4611      	mov	r1, r2
 8009f5a:	4618      	mov	r0, r3
 8009f5c:	f7ff fabe 	bl	80094dc <lwip_netconn_is_err_msg>
 8009f60:	4603      	mov	r3, r0
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d113      	bne.n	8009f8e <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 8009f66:	693b      	ldr	r3, [r7, #16]
 8009f68:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 8009f6a:	6978      	ldr	r0, [r7, #20]
 8009f6c:	f7ff ffac 	bl	8009ec8 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 8009f70:	697b      	ldr	r3, [r7, #20]
 8009f72:	685b      	ldr	r3, [r3, #4]
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d007      	beq.n	8009f88 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 8009f78:	697b      	ldr	r3, [r7, #20]
 8009f7a:	685b      	ldr	r3, [r3, #4]
 8009f7c:	4618      	mov	r0, r3
 8009f7e:	f003 fa6d 	bl	800d45c <tcp_abort>
            newconn->pcb.tcp = NULL;
 8009f82:	697b      	ldr	r3, [r7, #20]
 8009f84:	2200      	movs	r2, #0
 8009f86:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 8009f88:	6978      	ldr	r0, [r7, #20]
 8009f8a:	f7ff ff53 	bl	8009e34 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	3314      	adds	r3, #20
 8009f92:	f107 0210 	add.w	r2, r7, #16
 8009f96:	4611      	mov	r1, r2
 8009f98:	4618      	mov	r0, r3
 8009f9a:	f00b ff64 	bl	8015e66 <sys_arch_mbox_tryfetch>
 8009f9e:	4603      	mov	r3, r0
 8009fa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fa4:	d1d5      	bne.n	8009f52 <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	3314      	adds	r3, #20
 8009faa:	4618      	mov	r0, r3
 8009fac:	f00b fef0 	bl	8015d90 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	3314      	adds	r3, #20
 8009fb4:	4618      	mov	r0, r3
 8009fb6:	f00b ff83 	bl	8015ec0 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 8009fba:	bf00      	nop
 8009fbc:	3718      	adds	r7, #24
 8009fbe:	46bd      	mov	sp, r7
 8009fc0:	bd80      	pop	{r7, pc}
	...

08009fc4 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8009fc4:	b580      	push	{r7, lr}
 8009fc6:	b086      	sub	sp, #24
 8009fc8:	af00      	add	r7, sp, #0
 8009fca:	6078      	str	r0, [r7, #4]
 8009fcc:	460b      	mov	r3, r1
 8009fce:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 8009fd0:	2300      	movs	r3, #0
 8009fd2:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d106      	bne.n	8009fe8 <lwip_netconn_do_close_internal+0x24>
 8009fda:	4b87      	ldr	r3, [pc, #540]	@ (800a1f8 <lwip_netconn_do_close_internal+0x234>)
 8009fdc:	f240 32a2 	movw	r2, #930	@ 0x3a2
 8009fe0:	4986      	ldr	r1, [pc, #536]	@ (800a1fc <lwip_netconn_do_close_internal+0x238>)
 8009fe2:	4887      	ldr	r0, [pc, #540]	@ (800a200 <lwip_netconn_do_close_internal+0x23c>)
 8009fe4:	f00c f994 	bl	8016310 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	781b      	ldrb	r3, [r3, #0]
 8009fec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009ff0:	2b10      	cmp	r3, #16
 8009ff2:	d006      	beq.n	800a002 <lwip_netconn_do_close_internal+0x3e>
 8009ff4:	4b80      	ldr	r3, [pc, #512]	@ (800a1f8 <lwip_netconn_do_close_internal+0x234>)
 8009ff6:	f240 32a3 	movw	r2, #931	@ 0x3a3
 8009ffa:	4982      	ldr	r1, [pc, #520]	@ (800a204 <lwip_netconn_do_close_internal+0x240>)
 8009ffc:	4880      	ldr	r0, [pc, #512]	@ (800a200 <lwip_netconn_do_close_internal+0x23c>)
 8009ffe:	f00c f987 	bl	8016310 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	785b      	ldrb	r3, [r3, #1]
 800a006:	2b04      	cmp	r3, #4
 800a008:	d006      	beq.n	800a018 <lwip_netconn_do_close_internal+0x54>
 800a00a:	4b7b      	ldr	r3, [pc, #492]	@ (800a1f8 <lwip_netconn_do_close_internal+0x234>)
 800a00c:	f44f 7269 	mov.w	r2, #932	@ 0x3a4
 800a010:	497d      	ldr	r1, [pc, #500]	@ (800a208 <lwip_netconn_do_close_internal+0x244>)
 800a012:	487b      	ldr	r0, [pc, #492]	@ (800a200 <lwip_netconn_do_close_internal+0x23c>)
 800a014:	f00c f97c 	bl	8016310 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	685b      	ldr	r3, [r3, #4]
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d106      	bne.n	800a02e <lwip_netconn_do_close_internal+0x6a>
 800a020:	4b75      	ldr	r3, [pc, #468]	@ (800a1f8 <lwip_netconn_do_close_internal+0x234>)
 800a022:	f240 32a5 	movw	r2, #933	@ 0x3a5
 800a026:	4979      	ldr	r1, [pc, #484]	@ (800a20c <lwip_netconn_do_close_internal+0x248>)
 800a028:	4875      	ldr	r0, [pc, #468]	@ (800a200 <lwip_netconn_do_close_internal+0x23c>)
 800a02a:	f00c f971 	bl	8016310 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a032:	2b00      	cmp	r3, #0
 800a034:	d106      	bne.n	800a044 <lwip_netconn_do_close_internal+0x80>
 800a036:	4b70      	ldr	r3, [pc, #448]	@ (800a1f8 <lwip_netconn_do_close_internal+0x234>)
 800a038:	f240 32a6 	movw	r2, #934	@ 0x3a6
 800a03c:	4974      	ldr	r1, [pc, #464]	@ (800a210 <lwip_netconn_do_close_internal+0x24c>)
 800a03e:	4870      	ldr	r0, [pc, #448]	@ (800a200 <lwip_netconn_do_close_internal+0x23c>)
 800a040:	f00c f966 	bl	8016310 <iprintf>

  tpcb = conn->pcb.tcp;
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	685b      	ldr	r3, [r3, #4]
 800a048:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a04e:	7a1b      	ldrb	r3, [r3, #8]
 800a050:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 800a052:	7bfb      	ldrb	r3, [r7, #15]
 800a054:	f003 0301 	and.w	r3, r3, #1
 800a058:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 800a05a:	7bfb      	ldrb	r3, [r7, #15]
 800a05c:	f003 0302 	and.w	r3, r3, #2
 800a060:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 800a062:	7bfb      	ldrb	r3, [r7, #15]
 800a064:	2b03      	cmp	r3, #3
 800a066:	d102      	bne.n	800a06e <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 800a068:	2301      	movs	r3, #1
 800a06a:	75bb      	strb	r3, [r7, #22]
 800a06c:	e01f      	b.n	800a0ae <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 800a06e:	7bbb      	ldrb	r3, [r7, #14]
 800a070:	2b00      	cmp	r3, #0
 800a072:	d00e      	beq.n	800a092 <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 800a074:	693b      	ldr	r3, [r7, #16]
 800a076:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 800a078:	2b05      	cmp	r3, #5
 800a07a:	d007      	beq.n	800a08c <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 800a07c:	693b      	ldr	r3, [r7, #16]
 800a07e:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 800a080:	2b06      	cmp	r3, #6
 800a082:	d003      	beq.n	800a08c <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 800a084:	693b      	ldr	r3, [r7, #16]
 800a086:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 800a088:	2b08      	cmp	r3, #8
 800a08a:	d102      	bne.n	800a092 <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 800a08c:	2301      	movs	r3, #1
 800a08e:	75bb      	strb	r3, [r7, #22]
 800a090:	e00d      	b.n	800a0ae <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 800a092:	7b7b      	ldrb	r3, [r7, #13]
 800a094:	2b00      	cmp	r3, #0
 800a096:	d008      	beq.n	800a0aa <lwip_netconn_do_close_internal+0xe6>
 800a098:	693b      	ldr	r3, [r7, #16]
 800a09a:	8b5b      	ldrh	r3, [r3, #26]
 800a09c:	f003 0310 	and.w	r3, r3, #16
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d002      	beq.n	800a0aa <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 800a0a4:	2301      	movs	r3, #1
 800a0a6:	75bb      	strb	r3, [r7, #22]
 800a0a8:	e001      	b.n	800a0ae <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 800a0aa:	2300      	movs	r3, #0
 800a0ac:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 800a0ae:	7dbb      	ldrb	r3, [r7, #22]
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d003      	beq.n	800a0bc <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 800a0b4:	2100      	movs	r1, #0
 800a0b6:	6938      	ldr	r0, [r7, #16]
 800a0b8:	f004 fa6c 	bl	800e594 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 800a0bc:	693b      	ldr	r3, [r7, #16]
 800a0be:	7d1b      	ldrb	r3, [r3, #20]
 800a0c0:	2b01      	cmp	r3, #1
 800a0c2:	d104      	bne.n	800a0ce <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 800a0c4:	2100      	movs	r1, #0
 800a0c6:	6938      	ldr	r0, [r7, #16]
 800a0c8:	f004 fadc 	bl	800e684 <tcp_accept>
 800a0cc:	e01d      	b.n	800a10a <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 800a0ce:	7bbb      	ldrb	r3, [r7, #14]
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d007      	beq.n	800a0e4 <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 800a0d4:	2100      	movs	r1, #0
 800a0d6:	6938      	ldr	r0, [r7, #16]
 800a0d8:	f004 fa6e 	bl	800e5b8 <tcp_recv>
      tcp_accept(tpcb, NULL);
 800a0dc:	2100      	movs	r1, #0
 800a0de:	6938      	ldr	r0, [r7, #16]
 800a0e0:	f004 fad0 	bl	800e684 <tcp_accept>
    }
    if (shut_tx) {
 800a0e4:	7b7b      	ldrb	r3, [r7, #13]
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d003      	beq.n	800a0f2 <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 800a0ea:	2100      	movs	r1, #0
 800a0ec:	6938      	ldr	r0, [r7, #16]
 800a0ee:	f004 fa85 	bl	800e5fc <tcp_sent>
    }
    if (shut_close) {
 800a0f2:	7dbb      	ldrb	r3, [r7, #22]
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d008      	beq.n	800a10a <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 800a0f8:	2200      	movs	r2, #0
 800a0fa:	2100      	movs	r1, #0
 800a0fc:	6938      	ldr	r0, [r7, #16]
 800a0fe:	f004 fad9 	bl	800e6b4 <tcp_poll>
      tcp_err(tpcb, NULL);
 800a102:	2100      	movs	r1, #0
 800a104:	6938      	ldr	r0, [r7, #16]
 800a106:	f004 fa9b 	bl	800e640 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 800a10a:	7dbb      	ldrb	r3, [r7, #22]
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d005      	beq.n	800a11c <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 800a110:	6938      	ldr	r0, [r7, #16]
 800a112:	f003 f85d 	bl	800d1d0 <tcp_close>
 800a116:	4603      	mov	r3, r0
 800a118:	75fb      	strb	r3, [r7, #23]
 800a11a:	e007      	b.n	800a12c <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 800a11c:	7bbb      	ldrb	r3, [r7, #14]
 800a11e:	7b7a      	ldrb	r2, [r7, #13]
 800a120:	4619      	mov	r1, r3
 800a122:	6938      	ldr	r0, [r7, #16]
 800a124:	f003 f880 	bl	800d228 <tcp_shutdown>
 800a128:	4603      	mov	r3, r0
 800a12a:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 800a12c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a130:	2b00      	cmp	r3, #0
 800a132:	d102      	bne.n	800a13a <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 800a134:	2301      	movs	r3, #1
 800a136:	757b      	strb	r3, [r7, #21]
 800a138:	e016      	b.n	800a168 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 800a13a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a13e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a142:	d10f      	bne.n	800a164 <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a148:	7a5b      	ldrb	r3, [r3, #9]
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d10c      	bne.n	800a168 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 800a14e:	2301      	movs	r3, #1
 800a150:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 800a152:	7dbb      	ldrb	r3, [r7, #22]
 800a154:	2b00      	cmp	r3, #0
 800a156:	d007      	beq.n	800a168 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 800a158:	6938      	ldr	r0, [r7, #16]
 800a15a:	f003 f97f 	bl	800d45c <tcp_abort>
          err = ERR_OK;
 800a15e:	2300      	movs	r3, #0
 800a160:	75fb      	strb	r3, [r7, #23]
 800a162:	e001      	b.n	800a168 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 800a164:	2301      	movs	r3, #1
 800a166:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 800a168:	7d7b      	ldrb	r3, [r7, #21]
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d052      	beq.n	800a214 <lwip_netconn_do_close_internal+0x250>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	330c      	adds	r3, #12
 800a176:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a17c:	7dfa      	ldrb	r2, [r7, #23]
 800a17e:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	2200      	movs	r2, #0
 800a184:	625a      	str	r2, [r3, #36]	@ 0x24
    conn->state = NETCONN_NONE;
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	2200      	movs	r2, #0
 800a18a:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 800a18c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a190:	2b00      	cmp	r3, #0
 800a192:	d129      	bne.n	800a1e8 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 800a194:	7dbb      	ldrb	r3, [r7, #22]
 800a196:	2b00      	cmp	r3, #0
 800a198:	d00c      	beq.n	800a1b4 <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	2200      	movs	r2, #0
 800a19e:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d005      	beq.n	800a1b4 <lwip_netconn_do_close_internal+0x1f0>
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1ac:	2200      	movs	r2, #0
 800a1ae:	2104      	movs	r1, #4
 800a1b0:	6878      	ldr	r0, [r7, #4]
 800a1b2:	4798      	blx	r3
      }
      if (shut_rx) {
 800a1b4:	7bbb      	ldrb	r3, [r7, #14]
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d009      	beq.n	800a1ce <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d005      	beq.n	800a1ce <lwip_netconn_do_close_internal+0x20a>
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1c6:	2200      	movs	r2, #0
 800a1c8:	2100      	movs	r1, #0
 800a1ca:	6878      	ldr	r0, [r7, #4]
 800a1cc:	4798      	blx	r3
      }
      if (shut_tx) {
 800a1ce:	7b7b      	ldrb	r3, [r7, #13]
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d009      	beq.n	800a1e8 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d005      	beq.n	800a1e8 <lwip_netconn_do_close_internal+0x224>
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1e0:	2200      	movs	r2, #0
 800a1e2:	2102      	movs	r1, #2
 800a1e4:	6878      	ldr	r0, [r7, #4]
 800a1e6:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800a1e8:	78fb      	ldrb	r3, [r7, #3]
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d002      	beq.n	800a1f4 <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 800a1ee:	68b8      	ldr	r0, [r7, #8]
 800a1f0:	f00b fecc 	bl	8015f8c <sys_sem_signal>
    }
    return ERR_OK;
 800a1f4:	2300      	movs	r3, #0
 800a1f6:	e03c      	b.n	800a272 <lwip_netconn_do_close_internal+0x2ae>
 800a1f8:	08017bf4 	.word	0x08017bf4
 800a1fc:	08017ec8 	.word	0x08017ec8
 800a200:	08017c38 	.word	0x08017c38
 800a204:	08017ed8 	.word	0x08017ed8
 800a208:	08017ef8 	.word	0x08017ef8
 800a20c:	08017f1c 	.word	0x08017f1c
 800a210:	08017d5c 	.word	0x08017d5c
  }
  if (!close_finished) {
 800a214:	7d7b      	ldrb	r3, [r7, #21]
 800a216:	2b00      	cmp	r3, #0
 800a218:	d11e      	bne.n	800a258 <lwip_netconn_do_close_internal+0x294>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 800a21a:	693b      	ldr	r3, [r7, #16]
 800a21c:	7d1b      	ldrb	r3, [r3, #20]
 800a21e:	2b01      	cmp	r3, #1
 800a220:	d106      	bne.n	800a230 <lwip_netconn_do_close_internal+0x26c>
 800a222:	4b16      	ldr	r3, [pc, #88]	@ (800a27c <lwip_netconn_do_close_internal+0x2b8>)
 800a224:	f240 4241 	movw	r2, #1089	@ 0x441
 800a228:	4915      	ldr	r1, [pc, #84]	@ (800a280 <lwip_netconn_do_close_internal+0x2bc>)
 800a22a:	4816      	ldr	r0, [pc, #88]	@ (800a284 <lwip_netconn_do_close_internal+0x2c0>)
 800a22c:	f00c f870 	bl	8016310 <iprintf>
    if (shut_tx) {
 800a230:	7b7b      	ldrb	r3, [r7, #13]
 800a232:	2b00      	cmp	r3, #0
 800a234:	d003      	beq.n	800a23e <lwip_netconn_do_close_internal+0x27a>
      tcp_sent(tpcb, sent_tcp);
 800a236:	4914      	ldr	r1, [pc, #80]	@ (800a288 <lwip_netconn_do_close_internal+0x2c4>)
 800a238:	6938      	ldr	r0, [r7, #16]
 800a23a:	f004 f9df 	bl	800e5fc <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 800a23e:	2201      	movs	r2, #1
 800a240:	4912      	ldr	r1, [pc, #72]	@ (800a28c <lwip_netconn_do_close_internal+0x2c8>)
 800a242:	6938      	ldr	r0, [r7, #16]
 800a244:	f004 fa36 	bl	800e6b4 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 800a248:	4911      	ldr	r1, [pc, #68]	@ (800a290 <lwip_netconn_do_close_internal+0x2cc>)
 800a24a:	6938      	ldr	r0, [r7, #16]
 800a24c:	f004 f9f8 	bl	800e640 <tcp_err>
    tcp_arg(tpcb, conn);
 800a250:	6879      	ldr	r1, [r7, #4]
 800a252:	6938      	ldr	r0, [r7, #16]
 800a254:	f004 f99e 	bl	800e594 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 800a258:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d106      	bne.n	800a26e <lwip_netconn_do_close_internal+0x2aa>
 800a260:	4b06      	ldr	r3, [pc, #24]	@ (800a27c <lwip_netconn_do_close_internal+0x2b8>)
 800a262:	f240 424d 	movw	r2, #1101	@ 0x44d
 800a266:	490b      	ldr	r1, [pc, #44]	@ (800a294 <lwip_netconn_do_close_internal+0x2d0>)
 800a268:	4806      	ldr	r0, [pc, #24]	@ (800a284 <lwip_netconn_do_close_internal+0x2c0>)
 800a26a:	f00c f851 	bl	8016310 <iprintf>
  return err;
 800a26e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a272:	4618      	mov	r0, r3
 800a274:	3718      	adds	r7, #24
 800a276:	46bd      	mov	sp, r7
 800a278:	bd80      	pop	{r7, pc}
 800a27a:	bf00      	nop
 800a27c:	08017bf4 	.word	0x08017bf4
 800a280:	08017f30 	.word	0x08017f30
 800a284:	08017c38 	.word	0x08017c38
 800a288:	08009829 	.word	0x08009829
 800a28c:	08009759 	.word	0x08009759
 800a290:	080098d5 	.word	0x080098d5
 800a294:	08017f54 	.word	0x08017f54

0800a298 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 800a298:	b580      	push	{r7, lr}
 800a29a:	b084      	sub	sp, #16
 800a29c:	af00      	add	r7, sp, #0
 800a29e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	785b      	ldrb	r3, [r3, #1]
 800a2aa:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 800a2ac:	7afb      	ldrb	r3, [r7, #11]
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d00d      	beq.n	800a2ce <lwip_netconn_do_delconn+0x36>
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	781b      	ldrb	r3, [r3, #0]
 800a2b8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a2bc:	2b10      	cmp	r3, #16
 800a2be:	d006      	beq.n	800a2ce <lwip_netconn_do_delconn+0x36>
 800a2c0:	4b61      	ldr	r3, [pc, #388]	@ (800a448 <lwip_netconn_do_delconn+0x1b0>)
 800a2c2:	f240 425e 	movw	r2, #1118	@ 0x45e
 800a2c6:	4961      	ldr	r1, [pc, #388]	@ (800a44c <lwip_netconn_do_delconn+0x1b4>)
 800a2c8:	4861      	ldr	r0, [pc, #388]	@ (800a450 <lwip_netconn_do_delconn+0x1b8>)
 800a2ca:	f00c f821 	bl	8016310 <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 800a2ce:	7afb      	ldrb	r3, [r7, #11]
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d005      	beq.n	800a2e0 <lwip_netconn_do_delconn+0x48>
 800a2d4:	7afb      	ldrb	r3, [r7, #11]
 800a2d6:	2b02      	cmp	r3, #2
 800a2d8:	d002      	beq.n	800a2e0 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 800a2da:	7afb      	ldrb	r3, [r7, #11]
 800a2dc:	2b03      	cmp	r3, #3
 800a2de:	d10a      	bne.n	800a2f6 <lwip_netconn_do_delconn+0x5e>
       (state != NETCONN_CONNECT)) ||
 800a2e0:	7afb      	ldrb	r3, [r7, #11]
 800a2e2:	2b03      	cmp	r3, #3
 800a2e4:	d10b      	bne.n	800a2fe <lwip_netconn_do_delconn+0x66>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a2ee:	f003 0304 	and.w	r3, r3, #4
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d103      	bne.n	800a2fe <lwip_netconn_do_delconn+0x66>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	22fb      	movs	r2, #251	@ 0xfb
 800a2fa:	711a      	strb	r2, [r3, #4]
 800a2fc:	e098      	b.n	800a430 <lwip_netconn_do_delconn+0x198>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 800a2fe:	7afb      	ldrb	r3, [r7, #11]
 800a300:	2b03      	cmp	r3, #3
 800a302:	d10e      	bne.n	800a322 <lwip_netconn_do_delconn+0x8a>
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a30c:	f003 0304 	and.w	r3, r3, #4
 800a310:	2b00      	cmp	r3, #0
 800a312:	d106      	bne.n	800a322 <lwip_netconn_do_delconn+0x8a>
 800a314:	4b4c      	ldr	r3, [pc, #304]	@ (800a448 <lwip_netconn_do_delconn+0x1b0>)
 800a316:	f240 427a 	movw	r2, #1146	@ 0x47a
 800a31a:	494e      	ldr	r1, [pc, #312]	@ (800a454 <lwip_netconn_do_delconn+0x1bc>)
 800a31c:	484c      	ldr	r0, [pc, #304]	@ (800a450 <lwip_netconn_do_delconn+0x1b8>)
 800a31e:	f00b fff7 	bl	8016310 <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	2200      	movs	r2, #0
 800a326:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	4618      	mov	r0, r3
 800a32e:	f7ff fdcb 	bl	8009ec8 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	685b      	ldr	r3, [r3, #4]
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d05f      	beq.n	800a3fc <lwip_netconn_do_delconn+0x164>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	781b      	ldrb	r3, [r3, #0]
 800a342:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a346:	2b10      	cmp	r3, #16
 800a348:	d00d      	beq.n	800a366 <lwip_netconn_do_delconn+0xce>
 800a34a:	2b20      	cmp	r3, #32
 800a34c:	d151      	bne.n	800a3f2 <lwip_netconn_do_delconn+0x15a>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	685b      	ldr	r3, [r3, #4]
 800a354:	2200      	movs	r2, #0
 800a356:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	685b      	ldr	r3, [r3, #4]
 800a35e:	4618      	mov	r0, r3
 800a360:	f009 f998 	bl	8013694 <udp_remove>
          break;
 800a364:	e046      	b.n	800a3f4 <lwip_netconn_do_delconn+0x15c>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d006      	beq.n	800a37e <lwip_netconn_do_delconn+0xe6>
 800a370:	4b35      	ldr	r3, [pc, #212]	@ (800a448 <lwip_netconn_do_delconn+0x1b0>)
 800a372:	f240 4294 	movw	r2, #1172	@ 0x494
 800a376:	4938      	ldr	r1, [pc, #224]	@ (800a458 <lwip_netconn_do_delconn+0x1c0>)
 800a378:	4835      	ldr	r0, [pc, #212]	@ (800a450 <lwip_netconn_do_delconn+0x1b8>)
 800a37a:	f00b ffc9 	bl	8016310 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	2204      	movs	r2, #4
 800a384:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	2203      	movs	r2, #3
 800a38a:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	68fa      	ldr	r2, [r7, #12]
 800a392:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	2100      	movs	r1, #0
 800a39a:	4618      	mov	r0, r3
 800a39c:	f7ff fe12 	bl	8009fc4 <lwip_netconn_do_close_internal>
 800a3a0:	4603      	mov	r3, r0
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d04b      	beq.n	800a43e <lwip_netconn_do_delconn+0x1a6>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	785b      	ldrb	r3, [r3, #1]
 800a3ac:	2b04      	cmp	r3, #4
 800a3ae:	d006      	beq.n	800a3be <lwip_netconn_do_delconn+0x126>
 800a3b0:	4b25      	ldr	r3, [pc, #148]	@ (800a448 <lwip_netconn_do_delconn+0x1b0>)
 800a3b2:	f240 429a 	movw	r2, #1178	@ 0x49a
 800a3b6:	4929      	ldr	r1, [pc, #164]	@ (800a45c <lwip_netconn_do_delconn+0x1c4>)
 800a3b8:	4825      	ldr	r0, [pc, #148]	@ (800a450 <lwip_netconn_do_delconn+0x1b8>)
 800a3ba:	f00b ffa9 	bl	8016310 <iprintf>
            UNLOCK_TCPIP_CORE();
 800a3be:	4828      	ldr	r0, [pc, #160]	@ (800a460 <lwip_netconn_do_delconn+0x1c8>)
 800a3c0:	f00b fe55 	bl	801606e <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	330c      	adds	r3, #12
 800a3ca:	2100      	movs	r1, #0
 800a3cc:	4618      	mov	r0, r3
 800a3ce:	f00b fdac 	bl	8015f2a <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 800a3d2:	4823      	ldr	r0, [pc, #140]	@ (800a460 <lwip_netconn_do_delconn+0x1c8>)
 800a3d4:	f00b fe3c 	bl	8016050 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	785b      	ldrb	r3, [r3, #1]
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d02d      	beq.n	800a43e <lwip_netconn_do_delconn+0x1a6>
 800a3e2:	4b19      	ldr	r3, [pc, #100]	@ (800a448 <lwip_netconn_do_delconn+0x1b0>)
 800a3e4:	f240 429e 	movw	r2, #1182	@ 0x49e
 800a3e8:	491c      	ldr	r1, [pc, #112]	@ (800a45c <lwip_netconn_do_delconn+0x1c4>)
 800a3ea:	4819      	ldr	r0, [pc, #100]	@ (800a450 <lwip_netconn_do_delconn+0x1b8>)
 800a3ec:	f00b ff90 	bl	8016310 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 800a3f0:	e025      	b.n	800a43e <lwip_netconn_do_delconn+0x1a6>
#endif /* LWIP_TCP */
        default:
          break;
 800a3f2:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	2200      	movs	r2, #0
 800a3fa:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a402:	2b00      	cmp	r3, #0
 800a404:	d007      	beq.n	800a416 <lwip_netconn_do_delconn+0x17e>
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a40c:	68fa      	ldr	r2, [r7, #12]
 800a40e:	6810      	ldr	r0, [r2, #0]
 800a410:	2200      	movs	r2, #0
 800a412:	2100      	movs	r1, #0
 800a414:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d007      	beq.n	800a430 <lwip_netconn_do_delconn+0x198>
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a426:	68fa      	ldr	r2, [r7, #12]
 800a428:	6810      	ldr	r0, [r2, #0]
 800a42a:	2200      	movs	r2, #0
 800a42c:	2102      	movs	r1, #2
 800a42e:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	330c      	adds	r3, #12
 800a436:	4618      	mov	r0, r3
 800a438:	f00b fdc2 	bl	8015fc0 <sys_sem_valid>
 800a43c:	e000      	b.n	800a440 <lwip_netconn_do_delconn+0x1a8>
          return;
 800a43e:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 800a440:	3710      	adds	r7, #16
 800a442:	46bd      	mov	sp, r7
 800a444:	bd80      	pop	{r7, pc}
 800a446:	bf00      	nop
 800a448:	08017bf4 	.word	0x08017bf4
 800a44c:	08017f64 	.word	0x08017f64
 800a450:	08017c38 	.word	0x08017c38
 800a454:	08017f78 	.word	0x08017f78
 800a458:	08017f98 	.word	0x08017f98
 800a45c:	08017fb4 	.word	0x08017fb4
 800a460:	200091f4 	.word	0x200091f4

0800a464 <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 800a464:	b580      	push	{r7, lr}
 800a466:	b084      	sub	sp, #16
 800a468:	af00      	add	r7, sp, #0
 800a46a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800a470:	68bb      	ldr	r3, [r7, #8]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	685b      	ldr	r3, [r3, #4]
 800a476:	2b00      	cmp	r3, #0
 800a478:	d025      	beq.n	800a4c6 <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800a47a:	68bb      	ldr	r3, [r7, #8]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	781b      	ldrb	r3, [r3, #0]
 800a480:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a484:	2b10      	cmp	r3, #16
 800a486:	d00e      	beq.n	800a4a6 <lwip_netconn_do_bind+0x42>
 800a488:	2b20      	cmp	r3, #32
 800a48a:	d119      	bne.n	800a4c0 <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800a48c:	68bb      	ldr	r3, [r7, #8]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	6858      	ldr	r0, [r3, #4]
 800a492:	68bb      	ldr	r3, [r7, #8]
 800a494:	6899      	ldr	r1, [r3, #8]
 800a496:	68bb      	ldr	r3, [r7, #8]
 800a498:	899b      	ldrh	r3, [r3, #12]
 800a49a:	461a      	mov	r2, r3
 800a49c:	f009 f852 	bl	8013544 <udp_bind>
 800a4a0:	4603      	mov	r3, r0
 800a4a2:	73fb      	strb	r3, [r7, #15]
        break;
 800a4a4:	e011      	b.n	800a4ca <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800a4a6:	68bb      	ldr	r3, [r7, #8]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	6858      	ldr	r0, [r3, #4]
 800a4ac:	68bb      	ldr	r3, [r7, #8]
 800a4ae:	6899      	ldr	r1, [r3, #8]
 800a4b0:	68bb      	ldr	r3, [r7, #8]
 800a4b2:	899b      	ldrh	r3, [r3, #12]
 800a4b4:	461a      	mov	r2, r3
 800a4b6:	f002 ffdd 	bl	800d474 <tcp_bind>
 800a4ba:	4603      	mov	r3, r0
 800a4bc:	73fb      	strb	r3, [r7, #15]
        break;
 800a4be:	e004      	b.n	800a4ca <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 800a4c0:	23fa      	movs	r3, #250	@ 0xfa
 800a4c2:	73fb      	strb	r3, [r7, #15]
        break;
 800a4c4:	e001      	b.n	800a4ca <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
 800a4c6:	23fa      	movs	r3, #250	@ 0xfa
 800a4c8:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 800a4ca:	68bb      	ldr	r3, [r7, #8]
 800a4cc:	7bfa      	ldrb	r2, [r7, #15]
 800a4ce:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800a4d0:	bf00      	nop
 800a4d2:	3710      	adds	r7, #16
 800a4d4:	46bd      	mov	sp, r7
 800a4d6:	bd80      	pop	{r7, pc}

0800a4d8 <lwip_netconn_do_listen>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_listen(void *m)
{
 800a4d8:	b580      	push	{r7, lr}
 800a4da:	b086      	sub	sp, #24
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	617b      	str	r3, [r7, #20]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800a4e4:	697b      	ldr	r3, [r7, #20]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	685b      	ldr	r3, [r3, #4]
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d07f      	beq.n	800a5ee <lwip_netconn_do_listen+0x116>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800a4ee:	697b      	ldr	r3, [r7, #20]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	781b      	ldrb	r3, [r3, #0]
 800a4f4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a4f8:	2b10      	cmp	r3, #16
 800a4fa:	d175      	bne.n	800a5e8 <lwip_netconn_do_listen+0x110>
      if (msg->conn->state == NETCONN_NONE) {
 800a4fc:	697b      	ldr	r3, [r7, #20]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	785b      	ldrb	r3, [r3, #1]
 800a502:	2b00      	cmp	r3, #0
 800a504:	d165      	bne.n	800a5d2 <lwip_netconn_do_listen+0xfa>
        struct tcp_pcb *lpcb;
        if (msg->conn->pcb.tcp->state != CLOSED) {
 800a506:	697b      	ldr	r3, [r7, #20]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	685b      	ldr	r3, [r3, #4]
 800a50c:	7d1b      	ldrb	r3, [r3, #20]
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d002      	beq.n	800a518 <lwip_netconn_do_listen+0x40>
          /* connection is not closed, cannot listen */
          err = ERR_VAL;
 800a512:	23fa      	movs	r3, #250	@ 0xfa
 800a514:	72fb      	strb	r3, [r7, #11]
 800a516:	e06c      	b.n	800a5f2 <lwip_netconn_do_listen+0x11a>
        } else {
          u8_t backlog;
#if TCP_LISTEN_BACKLOG
          backlog = msg->msg.lb.backlog;
#else  /* TCP_LISTEN_BACKLOG */
          backlog = TCP_DEFAULT_LISTEN_BACKLOG;
 800a518:	23ff      	movs	r3, #255	@ 0xff
 800a51a:	74fb      	strb	r3, [r7, #19]
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->local_ip,  IPADDR_TYPE_ANY);
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->remote_ip, IPADDR_TYPE_ANY);
          }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

          lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 800a51c:	697b      	ldr	r3, [r7, #20]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	685b      	ldr	r3, [r3, #4]
 800a522:	f107 020b 	add.w	r2, r7, #11
 800a526:	7cf9      	ldrb	r1, [r7, #19]
 800a528:	4618      	mov	r0, r3
 800a52a:	f003 f85b 	bl	800d5e4 <tcp_listen_with_backlog_and_err>
 800a52e:	60f8      	str	r0, [r7, #12]

          if (lpcb == NULL) {
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	2b00      	cmp	r3, #0
 800a534:	d05d      	beq.n	800a5f2 <lwip_netconn_do_listen+0x11a>
            /* in this case, the old pcb is still allocated */
          } else {
            /* delete the recvmbox and allocate the acceptmbox */
            if (sys_mbox_valid(&msg->conn->recvmbox)) {
 800a536:	697b      	ldr	r3, [r7, #20]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	3310      	adds	r3, #16
 800a53c:	4618      	mov	r0, r3
 800a53e:	f00b fcae 	bl	8015e9e <sys_mbox_valid>
 800a542:	4603      	mov	r3, r0
 800a544:	2b00      	cmp	r3, #0
 800a546:	d00b      	beq.n	800a560 <lwip_netconn_do_listen+0x88>
              /** @todo: should we drain the recvmbox here? */
              sys_mbox_free(&msg->conn->recvmbox);
 800a548:	697b      	ldr	r3, [r7, #20]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	3310      	adds	r3, #16
 800a54e:	4618      	mov	r0, r3
 800a550:	f00b fc1e 	bl	8015d90 <sys_mbox_free>
              sys_mbox_set_invalid(&msg->conn->recvmbox);
 800a554:	697b      	ldr	r3, [r7, #20]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	3310      	adds	r3, #16
 800a55a:	4618      	mov	r0, r3
 800a55c:	f00b fcb0 	bl	8015ec0 <sys_mbox_set_invalid>
            }
            err = ERR_OK;
 800a560:	2300      	movs	r3, #0
 800a562:	72fb      	strb	r3, [r7, #11]
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 800a564:	697b      	ldr	r3, [r7, #20]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	3314      	adds	r3, #20
 800a56a:	4618      	mov	r0, r3
 800a56c:	f00b fc97 	bl	8015e9e <sys_mbox_valid>
 800a570:	4603      	mov	r3, r0
 800a572:	2b00      	cmp	r3, #0
 800a574:	d108      	bne.n	800a588 <lwip_netconn_do_listen+0xb0>
              err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 800a576:	697b      	ldr	r3, [r7, #20]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	3314      	adds	r3, #20
 800a57c:	2106      	movs	r1, #6
 800a57e:	4618      	mov	r0, r3
 800a580:	f00b fbe4 	bl	8015d4c <sys_mbox_new>
 800a584:	4603      	mov	r3, r0
 800a586:	72fb      	strb	r3, [r7, #11]
            }
            if (err == ERR_OK) {
 800a588:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d118      	bne.n	800a5c2 <lwip_netconn_do_listen+0xea>
              msg->conn->state = NETCONN_LISTEN;
 800a590:	697b      	ldr	r3, [r7, #20]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	2202      	movs	r2, #2
 800a596:	705a      	strb	r2, [r3, #1]
              msg->conn->pcb.tcp = lpcb;
 800a598:	697b      	ldr	r3, [r7, #20]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	68fa      	ldr	r2, [r7, #12]
 800a59e:	605a      	str	r2, [r3, #4]
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 800a5a0:	697b      	ldr	r3, [r7, #20]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	685a      	ldr	r2, [r3, #4]
 800a5a6:	697b      	ldr	r3, [r7, #20]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	4619      	mov	r1, r3
 800a5ac:	4610      	mov	r0, r2
 800a5ae:	f003 fff1 	bl	800e594 <tcp_arg>
              tcp_accept(msg->conn->pcb.tcp, accept_function);
 800a5b2:	697b      	ldr	r3, [r7, #20]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	685b      	ldr	r3, [r3, #4]
 800a5b8:	4912      	ldr	r1, [pc, #72]	@ (800a604 <lwip_netconn_do_listen+0x12c>)
 800a5ba:	4618      	mov	r0, r3
 800a5bc:	f004 f862 	bl	800e684 <tcp_accept>
 800a5c0:	e017      	b.n	800a5f2 <lwip_netconn_do_listen+0x11a>
            } else {
              /* since the old pcb is already deallocated, free lpcb now */
              tcp_close(lpcb);
 800a5c2:	68f8      	ldr	r0, [r7, #12]
 800a5c4:	f002 fe04 	bl	800d1d0 <tcp_close>
              msg->conn->pcb.tcp = NULL;
 800a5c8:	697b      	ldr	r3, [r7, #20]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	2200      	movs	r2, #0
 800a5ce:	605a      	str	r2, [r3, #4]
 800a5d0:	e00f      	b.n	800a5f2 <lwip_netconn_do_listen+0x11a>
            }
          }
        }
      } else if (msg->conn->state == NETCONN_LISTEN) {
 800a5d2:	697b      	ldr	r3, [r7, #20]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	785b      	ldrb	r3, [r3, #1]
 800a5d8:	2b02      	cmp	r3, #2
 800a5da:	d102      	bne.n	800a5e2 <lwip_netconn_do_listen+0x10a>
        /* already listening, allow updating of the backlog */
        err = ERR_OK;
 800a5dc:	2300      	movs	r3, #0
 800a5de:	72fb      	strb	r3, [r7, #11]
 800a5e0:	e007      	b.n	800a5f2 <lwip_netconn_do_listen+0x11a>
        tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
      } else {
        err = ERR_CONN;
 800a5e2:	23f5      	movs	r3, #245	@ 0xf5
 800a5e4:	72fb      	strb	r3, [r7, #11]
 800a5e6:	e004      	b.n	800a5f2 <lwip_netconn_do_listen+0x11a>
      }
    } else {
      err = ERR_ARG;
 800a5e8:	23f0      	movs	r3, #240	@ 0xf0
 800a5ea:	72fb      	strb	r3, [r7, #11]
 800a5ec:	e001      	b.n	800a5f2 <lwip_netconn_do_listen+0x11a>
    }
  } else {
    err = ERR_CONN;
 800a5ee:	23f5      	movs	r3, #245	@ 0xf5
 800a5f0:	72fb      	strb	r3, [r7, #11]
  }
  msg->err = err;
 800a5f2:	f997 200b 	ldrsb.w	r2, [r7, #11]
 800a5f6:	697b      	ldr	r3, [r7, #20]
 800a5f8:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800a5fa:	bf00      	nop
 800a5fc:	3718      	adds	r7, #24
 800a5fe:	46bd      	mov	sp, r7
 800a600:	bd80      	pop	{r7, pc}
 800a602:	bf00      	nop
 800a604:	08009ad9 	.word	0x08009ad9

0800a608 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 800a608:	b580      	push	{r7, lr}
 800a60a:	b086      	sub	sp, #24
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 800a614:	693b      	ldr	r3, [r7, #16]
 800a616:	2200      	movs	r2, #0
 800a618:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 800a61a:	693b      	ldr	r3, [r7, #16]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	685b      	ldr	r3, [r3, #4]
 800a620:	2b00      	cmp	r3, #0
 800a622:	d022      	beq.n	800a66a <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800a624:	693b      	ldr	r3, [r7, #16]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	781b      	ldrb	r3, [r3, #0]
 800a62a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a62e:	2b10      	cmp	r3, #16
 800a630:	d11b      	bne.n	800a66a <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 800a632:	693b      	ldr	r3, [r7, #16]
 800a634:	689b      	ldr	r3, [r3, #8]
 800a636:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 800a638:	697b      	ldr	r3, [r7, #20]
 800a63a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a63e:	d202      	bcs.n	800a646 <lwip_netconn_do_recv+0x3e>
 800a640:	697b      	ldr	r3, [r7, #20]
 800a642:	b29b      	uxth	r3, r3
 800a644:	e001      	b.n	800a64a <lwip_netconn_do_recv+0x42>
 800a646:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a64a:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 800a64c:	693b      	ldr	r3, [r7, #16]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	685b      	ldr	r3, [r3, #4]
 800a652:	89fa      	ldrh	r2, [r7, #14]
 800a654:	4611      	mov	r1, r2
 800a656:	4618      	mov	r0, r3
 800a658:	f003 f8c8 	bl	800d7ec <tcp_recved>
        remaining -= recved;
 800a65c:	89fb      	ldrh	r3, [r7, #14]
 800a65e:	697a      	ldr	r2, [r7, #20]
 800a660:	1ad3      	subs	r3, r2, r3
 800a662:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 800a664:	697b      	ldr	r3, [r7, #20]
 800a666:	2b00      	cmp	r3, #0
 800a668:	d1e6      	bne.n	800a638 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 800a66a:	bf00      	nop
 800a66c:	3718      	adds	r7, #24
 800a66e:	46bd      	mov	sp, r7
 800a670:	bd80      	pop	{r7, pc}
	...

0800a674 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800a674:	b580      	push	{r7, lr}
 800a676:	b088      	sub	sp, #32
 800a678:	af00      	add	r7, sp, #0
 800a67a:	6078      	str	r0, [r7, #4]
 800a67c:	460b      	mov	r3, r1
 800a67e:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 800a680:	2300      	movs	r3, #0
 800a682:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	2b00      	cmp	r3, #0
 800a688:	d106      	bne.n	800a698 <lwip_netconn_do_writemore+0x24>
 800a68a:	4b61      	ldr	r3, [pc, #388]	@ (800a810 <lwip_netconn_do_writemore+0x19c>)
 800a68c:	f240 6273 	movw	r2, #1651	@ 0x673
 800a690:	4960      	ldr	r1, [pc, #384]	@ (800a814 <lwip_netconn_do_writemore+0x1a0>)
 800a692:	4861      	ldr	r0, [pc, #388]	@ (800a818 <lwip_netconn_do_writemore+0x1a4>)
 800a694:	f00b fe3c 	bl	8016310 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	785b      	ldrb	r3, [r3, #1]
 800a69c:	2b01      	cmp	r3, #1
 800a69e:	d006      	beq.n	800a6ae <lwip_netconn_do_writemore+0x3a>
 800a6a0:	4b5b      	ldr	r3, [pc, #364]	@ (800a810 <lwip_netconn_do_writemore+0x19c>)
 800a6a2:	f240 6274 	movw	r2, #1652	@ 0x674
 800a6a6:	495d      	ldr	r1, [pc, #372]	@ (800a81c <lwip_netconn_do_writemore+0x1a8>)
 800a6a8:	485b      	ldr	r0, [pc, #364]	@ (800a818 <lwip_netconn_do_writemore+0x1a4>)
 800a6aa:	f00b fe31 	bl	8016310 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d106      	bne.n	800a6c4 <lwip_netconn_do_writemore+0x50>
 800a6b6:	4b56      	ldr	r3, [pc, #344]	@ (800a810 <lwip_netconn_do_writemore+0x19c>)
 800a6b8:	f240 6275 	movw	r2, #1653	@ 0x675
 800a6bc:	4958      	ldr	r1, [pc, #352]	@ (800a820 <lwip_netconn_do_writemore+0x1ac>)
 800a6be:	4856      	ldr	r0, [pc, #344]	@ (800a818 <lwip_netconn_do_writemore+0x1a4>)
 800a6c0:	f00b fe26 	bl	8016310 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	685b      	ldr	r3, [r3, #4]
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d106      	bne.n	800a6da <lwip_netconn_do_writemore+0x66>
 800a6cc:	4b50      	ldr	r3, [pc, #320]	@ (800a810 <lwip_netconn_do_writemore+0x19c>)
 800a6ce:	f240 6276 	movw	r2, #1654	@ 0x676
 800a6d2:	4954      	ldr	r1, [pc, #336]	@ (800a824 <lwip_netconn_do_writemore+0x1b0>)
 800a6d4:	4850      	ldr	r0, [pc, #320]	@ (800a818 <lwip_netconn_do_writemore+0x1a4>)
 800a6d6:	f00b fe1b 	bl	8016310 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a6de:	699a      	ldr	r2, [r3, #24]
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a6e4:	695b      	ldr	r3, [r3, #20]
 800a6e6:	429a      	cmp	r2, r3
 800a6e8:	d306      	bcc.n	800a6f8 <lwip_netconn_do_writemore+0x84>
 800a6ea:	4b49      	ldr	r3, [pc, #292]	@ (800a810 <lwip_netconn_do_writemore+0x19c>)
 800a6ec:	f240 6277 	movw	r2, #1655	@ 0x677
 800a6f0:	494d      	ldr	r1, [pc, #308]	@ (800a828 <lwip_netconn_do_writemore+0x1b4>)
 800a6f2:	4849      	ldr	r0, [pc, #292]	@ (800a818 <lwip_netconn_do_writemore+0x1a4>)
 800a6f4:	f00b fe0c 	bl	8016310 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a6fc:	899b      	ldrh	r3, [r3, #12]
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d106      	bne.n	800a710 <lwip_netconn_do_writemore+0x9c>
 800a702:	4b43      	ldr	r3, [pc, #268]	@ (800a810 <lwip_netconn_do_writemore+0x19c>)
 800a704:	f240 6279 	movw	r2, #1657	@ 0x679
 800a708:	4948      	ldr	r1, [pc, #288]	@ (800a82c <lwip_netconn_do_writemore+0x1b8>)
 800a70a:	4843      	ldr	r0, [pc, #268]	@ (800a818 <lwip_netconn_do_writemore+0x1a4>)
 800a70c:	f00b fe00 	bl	8016310 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a714:	7f1b      	ldrb	r3, [r3, #28]
 800a716:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a71e:	f003 0302 	and.w	r3, r3, #2
 800a722:	2b00      	cmp	r3, #0
 800a724:	d104      	bne.n	800a730 <lwip_netconn_do_writemore+0xbc>
 800a726:	7ebb      	ldrb	r3, [r7, #26]
 800a728:	f003 0304 	and.w	r3, r3, #4
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d001      	beq.n	800a734 <lwip_netconn_do_writemore+0xc0>
 800a730:	2301      	movs	r3, #1
 800a732:	e000      	b.n	800a736 <lwip_netconn_do_writemore+0xc2>
 800a734:	2300      	movs	r3, #0
 800a736:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a73c:	689b      	ldr	r3, [r3, #8]
 800a73e:	681a      	ldr	r2, [r3, #0]
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a744:	691b      	ldr	r3, [r3, #16]
 800a746:	4413      	add	r3, r2
 800a748:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a74e:	689b      	ldr	r3, [r3, #8]
 800a750:	685a      	ldr	r2, [r3, #4]
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a756:	691b      	ldr	r3, [r3, #16]
 800a758:	1ad3      	subs	r3, r2, r3
 800a75a:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 800a75c:	693b      	ldr	r3, [r7, #16]
 800a75e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a762:	d307      	bcc.n	800a774 <lwip_netconn_do_writemore+0x100>
        len = 0xffff;
 800a764:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a768:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800a76a:	7ebb      	ldrb	r3, [r7, #26]
 800a76c:	f043 0302 	orr.w	r3, r3, #2
 800a770:	76bb      	strb	r3, [r7, #26]
 800a772:	e001      	b.n	800a778 <lwip_netconn_do_writemore+0x104>
      } else {
        len = (u16_t)diff;
 800a774:	693b      	ldr	r3, [r7, #16]
 800a776:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	685b      	ldr	r3, [r3, #4]
 800a77c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800a780:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 800a782:	89fa      	ldrh	r2, [r7, #14]
 800a784:	8bbb      	ldrh	r3, [r7, #28]
 800a786:	429a      	cmp	r2, r3
 800a788:	d216      	bcs.n	800a7b8 <lwip_netconn_do_writemore+0x144>
        /* don't try to write more than sendbuf */
        len = available;
 800a78a:	89fb      	ldrh	r3, [r7, #14]
 800a78c:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 800a78e:	7e3b      	ldrb	r3, [r7, #24]
 800a790:	2b00      	cmp	r3, #0
 800a792:	d00d      	beq.n	800a7b0 <lwip_netconn_do_writemore+0x13c>
          if (!len) {
 800a794:	8bbb      	ldrh	r3, [r7, #28]
 800a796:	2b00      	cmp	r3, #0
 800a798:	d10e      	bne.n	800a7b8 <lwip_netconn_do_writemore+0x144>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a79e:	699b      	ldr	r3, [r3, #24]
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d102      	bne.n	800a7aa <lwip_netconn_do_writemore+0x136>
 800a7a4:	f06f 0306 	mvn.w	r3, #6
 800a7a8:	e000      	b.n	800a7ac <lwip_netconn_do_writemore+0x138>
 800a7aa:	2300      	movs	r3, #0
 800a7ac:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 800a7ae:	e08f      	b.n	800a8d0 <lwip_netconn_do_writemore+0x25c>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 800a7b0:	7ebb      	ldrb	r3, [r7, #26]
 800a7b2:	f043 0302 	orr.w	r3, r3, #2
 800a7b6:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a7bc:	691a      	ldr	r2, [r3, #16]
 800a7be:	8bbb      	ldrh	r3, [r7, #28]
 800a7c0:	441a      	add	r2, r3
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a7c6:	689b      	ldr	r3, [r3, #8]
 800a7c8:	685b      	ldr	r3, [r3, #4]
 800a7ca:	429a      	cmp	r2, r3
 800a7cc:	d906      	bls.n	800a7dc <lwip_netconn_do_writemore+0x168>
 800a7ce:	4b10      	ldr	r3, [pc, #64]	@ (800a810 <lwip_netconn_do_writemore+0x19c>)
 800a7d0:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 800a7d4:	4916      	ldr	r1, [pc, #88]	@ (800a830 <lwip_netconn_do_writemore+0x1bc>)
 800a7d6:	4810      	ldr	r0, [pc, #64]	@ (800a818 <lwip_netconn_do_writemore+0x1a4>)
 800a7d8:	f00b fd9a 	bl	8016310 <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 800a7dc:	8bbb      	ldrh	r3, [r7, #28]
 800a7de:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a7e2:	4293      	cmp	r3, r2
 800a7e4:	d103      	bne.n	800a7ee <lwip_netconn_do_writemore+0x17a>
 800a7e6:	693b      	ldr	r3, [r7, #16]
 800a7e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a7ec:	d209      	bcs.n	800a802 <lwip_netconn_do_writemore+0x18e>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800a7ee:	693b      	ldr	r3, [r7, #16]
 800a7f0:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 800a7f2:	8bba      	ldrh	r2, [r7, #28]
 800a7f4:	429a      	cmp	r2, r3
 800a7f6:	d11d      	bne.n	800a834 <lwip_netconn_do_writemore+0x1c0>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a7fc:	899b      	ldrh	r3, [r3, #12]
 800a7fe:	2b01      	cmp	r3, #1
 800a800:	d918      	bls.n	800a834 <lwip_netconn_do_writemore+0x1c0>
        write_more = 1;
 800a802:	2301      	movs	r3, #1
 800a804:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800a806:	7ebb      	ldrb	r3, [r7, #26]
 800a808:	f043 0302 	orr.w	r3, r3, #2
 800a80c:	76bb      	strb	r3, [r7, #26]
 800a80e:	e013      	b.n	800a838 <lwip_netconn_do_writemore+0x1c4>
 800a810:	08017bf4 	.word	0x08017bf4
 800a814:	08017d4c 	.word	0x08017d4c
 800a818:	08017c38 	.word	0x08017c38
 800a81c:	08018054 	.word	0x08018054
 800a820:	08017d5c 	.word	0x08017d5c
 800a824:	08018074 	.word	0x08018074
 800a828:	0801808c 	.word	0x0801808c
 800a82c:	080180cc 	.word	0x080180cc
 800a830:	080180f4 	.word	0x080180f4
      } else {
        write_more = 0;
 800a834:	2300      	movs	r3, #0
 800a836:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	6858      	ldr	r0, [r3, #4]
 800a83c:	7ebb      	ldrb	r3, [r7, #26]
 800a83e:	8bba      	ldrh	r2, [r7, #28]
 800a840:	6979      	ldr	r1, [r7, #20]
 800a842:	f006 fde3 	bl	801140c <tcp_write>
 800a846:	4603      	mov	r3, r0
 800a848:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 800a84a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d12c      	bne.n	800a8ac <lwip_netconn_do_writemore+0x238>
        conn->current_msg->msg.w.offset += len;
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a856:	6999      	ldr	r1, [r3, #24]
 800a858:	8bba      	ldrh	r2, [r7, #28]
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a85e:	440a      	add	r2, r1
 800a860:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a866:	6919      	ldr	r1, [r3, #16]
 800a868:	8bba      	ldrh	r2, [r7, #28]
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a86e:	440a      	add	r2, r1
 800a870:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a876:	691a      	ldr	r2, [r3, #16]
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a87c:	689b      	ldr	r3, [r3, #8]
 800a87e:	685b      	ldr	r3, [r3, #4]
 800a880:	429a      	cmp	r2, r3
 800a882:	d113      	bne.n	800a8ac <lwip_netconn_do_writemore+0x238>
          conn->current_msg->msg.w.vector_cnt--;
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a888:	899a      	ldrh	r2, [r3, #12]
 800a88a:	3a01      	subs	r2, #1
 800a88c:	b292      	uxth	r2, r2
 800a88e:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a894:	899b      	ldrh	r3, [r3, #12]
 800a896:	2b00      	cmp	r3, #0
 800a898:	d008      	beq.n	800a8ac <lwip_netconn_do_writemore+0x238>
            conn->current_msg->msg.w.vector++;
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a89e:	689a      	ldr	r2, [r3, #8]
 800a8a0:	3208      	adds	r2, #8
 800a8a2:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8a8:	2200      	movs	r2, #0
 800a8aa:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 800a8ac:	7e7b      	ldrb	r3, [r7, #25]
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d004      	beq.n	800a8bc <lwip_netconn_do_writemore+0x248>
 800a8b2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	f43f af3e 	beq.w	800a738 <lwip_netconn_do_writemore+0xc4>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 800a8bc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d004      	beq.n	800a8ce <lwip_netconn_do_writemore+0x25a>
 800a8c4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a8c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8cc:	d136      	bne.n	800a93c <lwip_netconn_do_writemore+0x2c8>
err_mem:
 800a8ce:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 800a8d0:	7e3b      	ldrb	r3, [r7, #24]
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d01b      	beq.n	800a90e <lwip_netconn_do_writemore+0x29a>
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8da:	699a      	ldr	r2, [r3, #24]
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8e0:	695b      	ldr	r3, [r3, #20]
 800a8e2:	429a      	cmp	r2, r3
 800a8e4:	d213      	bcs.n	800a90e <lwip_netconn_do_writemore+0x29a>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d005      	beq.n	800a8fa <lwip_netconn_do_writemore+0x286>
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a8f2:	2200      	movs	r2, #0
 800a8f4:	2103      	movs	r1, #3
 800a8f6:	6878      	ldr	r0, [r7, #4]
 800a8f8:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a900:	f043 0310 	orr.w	r3, r3, #16
 800a904:	b2da      	uxtb	r2, r3
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	f883 2020 	strb.w	r2, [r3, #32]
 800a90c:	e016      	b.n	800a93c <lwip_netconn_do_writemore+0x2c8>
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	685b      	ldr	r3, [r3, #4]
 800a912:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800a916:	f5b3 6f86 	cmp.w	r3, #1072	@ 0x430
 800a91a:	d305      	bcc.n	800a928 <lwip_netconn_do_writemore+0x2b4>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	685b      	ldr	r3, [r3, #4]
 800a920:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800a924:	2b04      	cmp	r3, #4
 800a926:	d909      	bls.n	800a93c <lwip_netconn_do_writemore+0x2c8>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d005      	beq.n	800a93c <lwip_netconn_do_writemore+0x2c8>
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a934:	2200      	movs	r2, #0
 800a936:	2103      	movs	r1, #3
 800a938:	6878      	ldr	r0, [r7, #4]
 800a93a:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 800a93c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a940:	2b00      	cmp	r3, #0
 800a942:	d11d      	bne.n	800a980 <lwip_netconn_do_writemore+0x30c>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a948:	699a      	ldr	r2, [r3, #24]
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a94e:	695b      	ldr	r3, [r3, #20]
 800a950:	429a      	cmp	r2, r3
 800a952:	d002      	beq.n	800a95a <lwip_netconn_do_writemore+0x2e6>
 800a954:	7e3b      	ldrb	r3, [r7, #24]
 800a956:	2b00      	cmp	r3, #0
 800a958:	d001      	beq.n	800a95e <lwip_netconn_do_writemore+0x2ea>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 800a95a:	2301      	movs	r3, #1
 800a95c:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	685b      	ldr	r3, [r3, #4]
 800a962:	4618      	mov	r0, r3
 800a964:	f007 fb3c 	bl	8011fe0 <tcp_output>
 800a968:	4603      	mov	r3, r0
 800a96a:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 800a96c:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800a970:	f113 0f04 	cmn.w	r3, #4
 800a974:	d12c      	bne.n	800a9d0 <lwip_netconn_do_writemore+0x35c>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800a976:	7b3b      	ldrb	r3, [r7, #12]
 800a978:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800a97a:	2301      	movs	r3, #1
 800a97c:	76fb      	strb	r3, [r7, #27]
 800a97e:	e027      	b.n	800a9d0 <lwip_netconn_do_writemore+0x35c>
      }
    } else if (err == ERR_MEM) {
 800a980:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a984:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a988:	d120      	bne.n	800a9cc <lwip_netconn_do_writemore+0x358>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	685b      	ldr	r3, [r3, #4]
 800a98e:	4618      	mov	r0, r3
 800a990:	f007 fb26 	bl	8011fe0 <tcp_output>
 800a994:	4603      	mov	r3, r0
 800a996:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 800a998:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800a99c:	f113 0f04 	cmn.w	r3, #4
 800a9a0:	d104      	bne.n	800a9ac <lwip_netconn_do_writemore+0x338>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800a9a2:	7b7b      	ldrb	r3, [r7, #13]
 800a9a4:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800a9a6:	2301      	movs	r3, #1
 800a9a8:	76fb      	strb	r3, [r7, #27]
 800a9aa:	e011      	b.n	800a9d0 <lwip_netconn_do_writemore+0x35c>
      } else if (dontblock) {
 800a9ac:	7e3b      	ldrb	r3, [r7, #24]
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d00e      	beq.n	800a9d0 <lwip_netconn_do_writemore+0x35c>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9b6:	699b      	ldr	r3, [r3, #24]
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d102      	bne.n	800a9c2 <lwip_netconn_do_writemore+0x34e>
 800a9bc:	f06f 0306 	mvn.w	r3, #6
 800a9c0:	e000      	b.n	800a9c4 <lwip_netconn_do_writemore+0x350>
 800a9c2:	2300      	movs	r3, #0
 800a9c4:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800a9c6:	2301      	movs	r3, #1
 800a9c8:	76fb      	strb	r3, [r7, #27]
 800a9ca:	e001      	b.n	800a9d0 <lwip_netconn_do_writemore+0x35c>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 800a9cc:	2301      	movs	r3, #1
 800a9ce:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 800a9d0:	7efb      	ldrb	r3, [r7, #27]
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d015      	beq.n	800aa02 <lwip_netconn_do_writemore+0x38e>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	330c      	adds	r3, #12
 800a9de:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9e4:	7ffa      	ldrb	r2, [r7, #31]
 800a9e6:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	2200      	movs	r2, #0
 800a9ec:	625a      	str	r2, [r3, #36]	@ 0x24
    conn->state = NETCONN_NONE;
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	2200      	movs	r2, #0
 800a9f2:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800a9f4:	78fb      	ldrb	r3, [r7, #3]
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d006      	beq.n	800aa08 <lwip_netconn_do_writemore+0x394>
#endif
    {
      sys_sem_signal(op_completed_sem);
 800a9fa:	68b8      	ldr	r0, [r7, #8]
 800a9fc:	f00b fac6 	bl	8015f8c <sys_sem_signal>
 800aa00:	e002      	b.n	800aa08 <lwip_netconn_do_writemore+0x394>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 800aa02:	f04f 33ff 	mov.w	r3, #4294967295
 800aa06:	e000      	b.n	800aa0a <lwip_netconn_do_writemore+0x396>
  }
#endif
  return ERR_OK;
 800aa08:	2300      	movs	r3, #0
}
 800aa0a:	4618      	mov	r0, r3
 800aa0c:	3720      	adds	r7, #32
 800aa0e:	46bd      	mov	sp, r7
 800aa10:	bd80      	pop	{r7, pc}
 800aa12:	bf00      	nop

0800aa14 <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 800aa14:	b580      	push	{r7, lr}
 800aa16:	b084      	sub	sp, #16
 800aa18:	af00      	add	r7, sp, #0
 800aa1a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 800aa20:	68bb      	ldr	r3, [r7, #8]
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	4618      	mov	r0, r3
 800aa26:	f7fe fd08 	bl	800943a <netconn_err>
 800aa2a:	4603      	mov	r3, r0
 800aa2c:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800aa2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d166      	bne.n	800ab04 <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800aa36:	68bb      	ldr	r3, [r7, #8]
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	781b      	ldrb	r3, [r3, #0]
 800aa3c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800aa40:	2b10      	cmp	r3, #16
 800aa42:	d15d      	bne.n	800ab00 <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 800aa44:	68bb      	ldr	r3, [r7, #8]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	785b      	ldrb	r3, [r3, #1]
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d002      	beq.n	800aa54 <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 800aa4e:	23fb      	movs	r3, #251	@ 0xfb
 800aa50:	73fb      	strb	r3, [r7, #15]
 800aa52:	e057      	b.n	800ab04 <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 800aa54:	68bb      	ldr	r3, [r7, #8]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	685b      	ldr	r3, [r3, #4]
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d04d      	beq.n	800aafa <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 800aa5e:	68bb      	ldr	r3, [r7, #8]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	2201      	movs	r2, #1
 800aa64:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800aa66:	68bb      	ldr	r3, [r7, #8]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d006      	beq.n	800aa7e <lwip_netconn_do_write+0x6a>
 800aa70:	4b28      	ldr	r3, [pc, #160]	@ (800ab14 <lwip_netconn_do_write+0x100>)
 800aa72:	f240 7223 	movw	r2, #1827	@ 0x723
 800aa76:	4928      	ldr	r1, [pc, #160]	@ (800ab18 <lwip_netconn_do_write+0x104>)
 800aa78:	4828      	ldr	r0, [pc, #160]	@ (800ab1c <lwip_netconn_do_write+0x108>)
 800aa7a:	f00b fc49 	bl	8016310 <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 800aa7e:	68bb      	ldr	r3, [r7, #8]
 800aa80:	695b      	ldr	r3, [r3, #20]
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d106      	bne.n	800aa94 <lwip_netconn_do_write+0x80>
 800aa86:	4b23      	ldr	r3, [pc, #140]	@ (800ab14 <lwip_netconn_do_write+0x100>)
 800aa88:	f240 7224 	movw	r2, #1828	@ 0x724
 800aa8c:	4924      	ldr	r1, [pc, #144]	@ (800ab20 <lwip_netconn_do_write+0x10c>)
 800aa8e:	4823      	ldr	r0, [pc, #140]	@ (800ab1c <lwip_netconn_do_write+0x108>)
 800aa90:	f00b fc3e 	bl	8016310 <iprintf>
        msg->conn->current_msg = msg;
 800aa94:	68bb      	ldr	r3, [r7, #8]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	68ba      	ldr	r2, [r7, #8]
 800aa9a:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 800aa9c:	68bb      	ldr	r3, [r7, #8]
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	2100      	movs	r1, #0
 800aaa2:	4618      	mov	r0, r3
 800aaa4:	f7ff fde6 	bl	800a674 <lwip_netconn_do_writemore>
 800aaa8:	4603      	mov	r3, r0
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d02e      	beq.n	800ab0c <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 800aaae:	68bb      	ldr	r3, [r7, #8]
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	785b      	ldrb	r3, [r3, #1]
 800aab4:	2b01      	cmp	r3, #1
 800aab6:	d006      	beq.n	800aac6 <lwip_netconn_do_write+0xb2>
 800aab8:	4b16      	ldr	r3, [pc, #88]	@ (800ab14 <lwip_netconn_do_write+0x100>)
 800aaba:	f44f 62e5 	mov.w	r2, #1832	@ 0x728
 800aabe:	4919      	ldr	r1, [pc, #100]	@ (800ab24 <lwip_netconn_do_write+0x110>)
 800aac0:	4816      	ldr	r0, [pc, #88]	@ (800ab1c <lwip_netconn_do_write+0x108>)
 800aac2:	f00b fc25 	bl	8016310 <iprintf>
          UNLOCK_TCPIP_CORE();
 800aac6:	4818      	ldr	r0, [pc, #96]	@ (800ab28 <lwip_netconn_do_write+0x114>)
 800aac8:	f00b fad1 	bl	801606e <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800aacc:	68bb      	ldr	r3, [r7, #8]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	330c      	adds	r3, #12
 800aad2:	2100      	movs	r1, #0
 800aad4:	4618      	mov	r0, r3
 800aad6:	f00b fa28 	bl	8015f2a <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 800aada:	4813      	ldr	r0, [pc, #76]	@ (800ab28 <lwip_netconn_do_write+0x114>)
 800aadc:	f00b fab8 	bl	8016050 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 800aae0:	68bb      	ldr	r3, [r7, #8]
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	785b      	ldrb	r3, [r3, #1]
 800aae6:	2b01      	cmp	r3, #1
 800aae8:	d110      	bne.n	800ab0c <lwip_netconn_do_write+0xf8>
 800aaea:	4b0a      	ldr	r3, [pc, #40]	@ (800ab14 <lwip_netconn_do_write+0x100>)
 800aaec:	f240 722c 	movw	r2, #1836	@ 0x72c
 800aaf0:	490c      	ldr	r1, [pc, #48]	@ (800ab24 <lwip_netconn_do_write+0x110>)
 800aaf2:	480a      	ldr	r0, [pc, #40]	@ (800ab1c <lwip_netconn_do_write+0x108>)
 800aaf4:	f00b fc0c 	bl	8016310 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 800aaf8:	e008      	b.n	800ab0c <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 800aafa:	23f5      	movs	r3, #245	@ 0xf5
 800aafc:	73fb      	strb	r3, [r7, #15]
 800aafe:	e001      	b.n	800ab04 <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 800ab00:	23fa      	movs	r3, #250	@ 0xfa
 800ab02:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 800ab04:	68bb      	ldr	r3, [r7, #8]
 800ab06:	7bfa      	ldrb	r2, [r7, #15]
 800ab08:	711a      	strb	r2, [r3, #4]
 800ab0a:	e000      	b.n	800ab0e <lwip_netconn_do_write+0xfa>
        return;
 800ab0c:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 800ab0e:	3710      	adds	r7, #16
 800ab10:	46bd      	mov	sp, r7
 800ab12:	bd80      	pop	{r7, pc}
 800ab14:	08017bf4 	.word	0x08017bf4
 800ab18:	08017f98 	.word	0x08017f98
 800ab1c:	08017c38 	.word	0x08017c38
 800ab20:	08018120 	.word	0x08018120
 800ab24:	08017fb4 	.word	0x08017fb4
 800ab28:	200091f4 	.word	0x200091f4

0800ab2c <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 800ab2c:	b580      	push	{r7, lr}
 800ab2e:	b084      	sub	sp, #16
 800ab30:	af00      	add	r7, sp, #0
 800ab32:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	785b      	ldrb	r3, [r3, #1]
 800ab3e:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	685b      	ldr	r3, [r3, #4]
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d069      	beq.n	800ac1e <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	781b      	ldrb	r3, [r3, #0]
 800ab50:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 800ab54:	2b10      	cmp	r3, #16
 800ab56:	d162      	bne.n	800ac1e <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800ab5c:	2b03      	cmp	r3, #3
 800ab5e:	d002      	beq.n	800ab66 <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800ab60:	7afb      	ldrb	r3, [r7, #11]
 800ab62:	2b02      	cmp	r3, #2
 800ab64:	d05b      	beq.n	800ac1e <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 800ab66:	7afb      	ldrb	r3, [r7, #11]
 800ab68:	2b03      	cmp	r3, #3
 800ab6a:	d103      	bne.n	800ab74 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	22f5      	movs	r2, #245	@ 0xf5
 800ab70:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800ab72:	e059      	b.n	800ac28 <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 800ab74:	7afb      	ldrb	r3, [r7, #11]
 800ab76:	2b01      	cmp	r3, #1
 800ab78:	d103      	bne.n	800ab82 <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	22fb      	movs	r2, #251	@ 0xfb
 800ab7e:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800ab80:	e052      	b.n	800ac28 <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	7a1b      	ldrb	r3, [r3, #8]
 800ab86:	f003 0301 	and.w	r3, r3, #1
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d004      	beq.n	800ab98 <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	4618      	mov	r0, r3
 800ab94:	f7ff f998 	bl	8009ec8 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d006      	beq.n	800abb0 <lwip_netconn_do_close+0x84>
 800aba2:	4b23      	ldr	r3, [pc, #140]	@ (800ac30 <lwip_netconn_do_close+0x104>)
 800aba4:	f240 72bd 	movw	r2, #1981	@ 0x7bd
 800aba8:	4922      	ldr	r1, [pc, #136]	@ (800ac34 <lwip_netconn_do_close+0x108>)
 800abaa:	4823      	ldr	r0, [pc, #140]	@ (800ac38 <lwip_netconn_do_close+0x10c>)
 800abac:	f00b fbb0 	bl	8016310 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	2204      	movs	r2, #4
 800abb6:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	68fa      	ldr	r2, [r7, #12]
 800abbe:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	2100      	movs	r1, #0
 800abc6:	4618      	mov	r0, r3
 800abc8:	f7ff f9fc 	bl	8009fc4 <lwip_netconn_do_close_internal>
 800abcc:	4603      	mov	r3, r0
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d029      	beq.n	800ac26 <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	785b      	ldrb	r3, [r3, #1]
 800abd8:	2b04      	cmp	r3, #4
 800abda:	d006      	beq.n	800abea <lwip_netconn_do_close+0xbe>
 800abdc:	4b14      	ldr	r3, [pc, #80]	@ (800ac30 <lwip_netconn_do_close+0x104>)
 800abde:	f240 72c2 	movw	r2, #1986	@ 0x7c2
 800abe2:	4916      	ldr	r1, [pc, #88]	@ (800ac3c <lwip_netconn_do_close+0x110>)
 800abe4:	4814      	ldr	r0, [pc, #80]	@ (800ac38 <lwip_netconn_do_close+0x10c>)
 800abe6:	f00b fb93 	bl	8016310 <iprintf>
        UNLOCK_TCPIP_CORE();
 800abea:	4815      	ldr	r0, [pc, #84]	@ (800ac40 <lwip_netconn_do_close+0x114>)
 800abec:	f00b fa3f 	bl	801606e <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	330c      	adds	r3, #12
 800abf6:	2100      	movs	r1, #0
 800abf8:	4618      	mov	r0, r3
 800abfa:	f00b f996 	bl	8015f2a <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 800abfe:	4810      	ldr	r0, [pc, #64]	@ (800ac40 <lwip_netconn_do_close+0x114>)
 800ac00:	f00b fa26 	bl	8016050 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	785b      	ldrb	r3, [r3, #1]
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d00b      	beq.n	800ac26 <lwip_netconn_do_close+0xfa>
 800ac0e:	4b08      	ldr	r3, [pc, #32]	@ (800ac30 <lwip_netconn_do_close+0x104>)
 800ac10:	f240 72c6 	movw	r2, #1990	@ 0x7c6
 800ac14:	4909      	ldr	r1, [pc, #36]	@ (800ac3c <lwip_netconn_do_close+0x110>)
 800ac16:	4808      	ldr	r0, [pc, #32]	@ (800ac38 <lwip_netconn_do_close+0x10c>)
 800ac18:	f00b fb7a 	bl	8016310 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 800ac1c:	e003      	b.n	800ac26 <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	22f5      	movs	r2, #245	@ 0xf5
 800ac22:	711a      	strb	r2, [r3, #4]
 800ac24:	e000      	b.n	800ac28 <lwip_netconn_do_close+0xfc>
      return;
 800ac26:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 800ac28:	3710      	adds	r7, #16
 800ac2a:	46bd      	mov	sp, r7
 800ac2c:	bd80      	pop	{r7, pc}
 800ac2e:	bf00      	nop
 800ac30:	08017bf4 	.word	0x08017bf4
 800ac34:	08017f98 	.word	0x08017f98
 800ac38:	08017c38 	.word	0x08017c38
 800ac3c:	08017fb4 	.word	0x08017fb4
 800ac40:	200091f4 	.word	0x200091f4

0800ac44 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 800ac44:	b580      	push	{r7, lr}
 800ac46:	b082      	sub	sp, #8
 800ac48:	af00      	add	r7, sp, #0
 800ac4a:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d013      	beq.n	800ac7a <netbuf_delete+0x36>
    if (buf->p != NULL) {
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d00b      	beq.n	800ac72 <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	4618      	mov	r0, r3
 800ac60:	f001 fdea 	bl	800c838 <pbuf_free>
      buf->p = buf->ptr = NULL;
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	2200      	movs	r2, #0
 800ac68:	605a      	str	r2, [r3, #4]
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	685a      	ldr	r2, [r3, #4]
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 800ac72:	6879      	ldr	r1, [r7, #4]
 800ac74:	2006      	movs	r0, #6
 800ac76:	f000 ff3b 	bl	800baf0 <memp_free>
  }
}
 800ac7a:	bf00      	nop
 800ac7c:	3708      	adds	r7, #8
 800ac7e:	46bd      	mov	sp, r7
 800ac80:	bd80      	pop	{r7, pc}
	...

0800ac84 <netbuf_next>:
 *         1  if moved to the next part but now there is no next part
 *         0  if moved to the next part and there are still more parts
 */
s8_t
netbuf_next(struct netbuf *buf)
{
 800ac84:	b580      	push	{r7, lr}
 800ac86:	b082      	sub	sp, #8
 800ac88:	af00      	add	r7, sp, #0
 800ac8a:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_next: invalid buf", (buf != NULL), return -1;);
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d108      	bne.n	800aca4 <netbuf_next+0x20>
 800ac92:	4b11      	ldr	r3, [pc, #68]	@ (800acd8 <netbuf_next+0x54>)
 800ac94:	22e0      	movs	r2, #224	@ 0xe0
 800ac96:	4911      	ldr	r1, [pc, #68]	@ (800acdc <netbuf_next+0x58>)
 800ac98:	4811      	ldr	r0, [pc, #68]	@ (800ace0 <netbuf_next+0x5c>)
 800ac9a:	f00b fb39 	bl	8016310 <iprintf>
 800ac9e:	f04f 33ff 	mov.w	r3, #4294967295
 800aca2:	e014      	b.n	800acce <netbuf_next+0x4a>
  if (buf->ptr->next == NULL) {
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	685b      	ldr	r3, [r3, #4]
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d102      	bne.n	800acb4 <netbuf_next+0x30>
    return -1;
 800acae:	f04f 33ff 	mov.w	r3, #4294967295
 800acb2:	e00c      	b.n	800acce <netbuf_next+0x4a>
  }
  buf->ptr = buf->ptr->next;
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	685b      	ldr	r3, [r3, #4]
 800acb8:	681a      	ldr	r2, [r3, #0]
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	605a      	str	r2, [r3, #4]
  if (buf->ptr->next == NULL) {
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	685b      	ldr	r3, [r3, #4]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d101      	bne.n	800accc <netbuf_next+0x48>
    return 1;
 800acc8:	2301      	movs	r3, #1
 800acca:	e000      	b.n	800acce <netbuf_next+0x4a>
  }
  return 0;
 800accc:	2300      	movs	r3, #0
}
 800acce:	4618      	mov	r0, r3
 800acd0:	3708      	adds	r7, #8
 800acd2:	46bd      	mov	sp, r7
 800acd4:	bd80      	pop	{r7, pc}
 800acd6:	bf00      	nop
 800acd8:	0801814c 	.word	0x0801814c
 800acdc:	080182ac 	.word	0x080182ac
 800ace0:	0801819c 	.word	0x0801819c

0800ace4 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800ace4:	b580      	push	{r7, lr}
 800ace6:	b084      	sub	sp, #16
 800ace8:	af00      	add	r7, sp, #0
 800acea:	6078      	str	r0, [r7, #4]
 800acec:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800acee:	f008 fa2f 	bl	8013150 <sys_timeouts_sleeptime>
 800acf2:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800acfa:	d10b      	bne.n	800ad14 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800acfc:	4813      	ldr	r0, [pc, #76]	@ (800ad4c <tcpip_timeouts_mbox_fetch+0x68>)
 800acfe:	f00b f9b6 	bl	801606e <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800ad02:	2200      	movs	r2, #0
 800ad04:	6839      	ldr	r1, [r7, #0]
 800ad06:	6878      	ldr	r0, [r7, #4]
 800ad08:	f00b f86e 	bl	8015de8 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800ad0c:	480f      	ldr	r0, [pc, #60]	@ (800ad4c <tcpip_timeouts_mbox_fetch+0x68>)
 800ad0e:	f00b f99f 	bl	8016050 <sys_mutex_lock>
    return;
 800ad12:	e018      	b.n	800ad46 <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d102      	bne.n	800ad20 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800ad1a:	f008 f9df 	bl	80130dc <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800ad1e:	e7e6      	b.n	800acee <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800ad20:	480a      	ldr	r0, [pc, #40]	@ (800ad4c <tcpip_timeouts_mbox_fetch+0x68>)
 800ad22:	f00b f9a4 	bl	801606e <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800ad26:	68fa      	ldr	r2, [r7, #12]
 800ad28:	6839      	ldr	r1, [r7, #0]
 800ad2a:	6878      	ldr	r0, [r7, #4]
 800ad2c:	f00b f85c 	bl	8015de8 <sys_arch_mbox_fetch>
 800ad30:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800ad32:	4806      	ldr	r0, [pc, #24]	@ (800ad4c <tcpip_timeouts_mbox_fetch+0x68>)
 800ad34:	f00b f98c 	bl	8016050 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800ad38:	68bb      	ldr	r3, [r7, #8]
 800ad3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad3e:	d102      	bne.n	800ad46 <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800ad40:	f008 f9cc 	bl	80130dc <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800ad44:	e7d3      	b.n	800acee <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800ad46:	3710      	adds	r7, #16
 800ad48:	46bd      	mov	sp, r7
 800ad4a:	bd80      	pop	{r7, pc}
 800ad4c:	200091f4 	.word	0x200091f4

0800ad50 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800ad50:	b580      	push	{r7, lr}
 800ad52:	b084      	sub	sp, #16
 800ad54:	af00      	add	r7, sp, #0
 800ad56:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800ad58:	4810      	ldr	r0, [pc, #64]	@ (800ad9c <tcpip_thread+0x4c>)
 800ad5a:	f00b f979 	bl	8016050 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800ad5e:	4b10      	ldr	r3, [pc, #64]	@ (800ada0 <tcpip_thread+0x50>)
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d005      	beq.n	800ad72 <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800ad66:	4b0e      	ldr	r3, [pc, #56]	@ (800ada0 <tcpip_thread+0x50>)
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	4a0e      	ldr	r2, [pc, #56]	@ (800ada4 <tcpip_thread+0x54>)
 800ad6c:	6812      	ldr	r2, [r2, #0]
 800ad6e:	4610      	mov	r0, r2
 800ad70:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800ad72:	f107 030c 	add.w	r3, r7, #12
 800ad76:	4619      	mov	r1, r3
 800ad78:	480b      	ldr	r0, [pc, #44]	@ (800ada8 <tcpip_thread+0x58>)
 800ad7a:	f7ff ffb3 	bl	800ace4 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d106      	bne.n	800ad92 <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800ad84:	4b09      	ldr	r3, [pc, #36]	@ (800adac <tcpip_thread+0x5c>)
 800ad86:	2291      	movs	r2, #145	@ 0x91
 800ad88:	4909      	ldr	r1, [pc, #36]	@ (800adb0 <tcpip_thread+0x60>)
 800ad8a:	480a      	ldr	r0, [pc, #40]	@ (800adb4 <tcpip_thread+0x64>)
 800ad8c:	f00b fac0 	bl	8016310 <iprintf>
      continue;
 800ad90:	e003      	b.n	800ad9a <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	4618      	mov	r0, r3
 800ad96:	f000 f80f 	bl	800adb8 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800ad9a:	e7ea      	b.n	800ad72 <tcpip_thread+0x22>
 800ad9c:	200091f4 	.word	0x200091f4
 800ada0:	200091e8 	.word	0x200091e8
 800ada4:	200091ec 	.word	0x200091ec
 800ada8:	200091f0 	.word	0x200091f0
 800adac:	080182e4 	.word	0x080182e4
 800adb0:	08018314 	.word	0x08018314
 800adb4:	08018334 	.word	0x08018334

0800adb8 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800adb8:	b580      	push	{r7, lr}
 800adba:	b082      	sub	sp, #8
 800adbc:	af00      	add	r7, sp, #0
 800adbe:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	781b      	ldrb	r3, [r3, #0]
 800adc4:	2b02      	cmp	r3, #2
 800adc6:	d026      	beq.n	800ae16 <tcpip_thread_handle_msg+0x5e>
 800adc8:	2b02      	cmp	r3, #2
 800adca:	dc2b      	bgt.n	800ae24 <tcpip_thread_handle_msg+0x6c>
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d002      	beq.n	800add6 <tcpip_thread_handle_msg+0x1e>
 800add0:	2b01      	cmp	r3, #1
 800add2:	d015      	beq.n	800ae00 <tcpip_thread_handle_msg+0x48>
 800add4:	e026      	b.n	800ae24 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	68db      	ldr	r3, [r3, #12]
 800adda:	687a      	ldr	r2, [r7, #4]
 800addc:	6850      	ldr	r0, [r2, #4]
 800adde:	687a      	ldr	r2, [r7, #4]
 800ade0:	6892      	ldr	r2, [r2, #8]
 800ade2:	4611      	mov	r1, r2
 800ade4:	4798      	blx	r3
 800ade6:	4603      	mov	r3, r0
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d004      	beq.n	800adf6 <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	685b      	ldr	r3, [r3, #4]
 800adf0:	4618      	mov	r0, r3
 800adf2:	f001 fd21 	bl	800c838 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800adf6:	6879      	ldr	r1, [r7, #4]
 800adf8:	2009      	movs	r0, #9
 800adfa:	f000 fe79 	bl	800baf0 <memp_free>
      break;
 800adfe:	e018      	b.n	800ae32 <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	685b      	ldr	r3, [r3, #4]
 800ae04:	687a      	ldr	r2, [r7, #4]
 800ae06:	6892      	ldr	r2, [r2, #8]
 800ae08:	4610      	mov	r0, r2
 800ae0a:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800ae0c:	6879      	ldr	r1, [r7, #4]
 800ae0e:	2008      	movs	r0, #8
 800ae10:	f000 fe6e 	bl	800baf0 <memp_free>
      break;
 800ae14:	e00d      	b.n	800ae32 <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	685b      	ldr	r3, [r3, #4]
 800ae1a:	687a      	ldr	r2, [r7, #4]
 800ae1c:	6892      	ldr	r2, [r2, #8]
 800ae1e:	4610      	mov	r0, r2
 800ae20:	4798      	blx	r3
      break;
 800ae22:	e006      	b.n	800ae32 <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800ae24:	4b05      	ldr	r3, [pc, #20]	@ (800ae3c <tcpip_thread_handle_msg+0x84>)
 800ae26:	22cf      	movs	r2, #207	@ 0xcf
 800ae28:	4905      	ldr	r1, [pc, #20]	@ (800ae40 <tcpip_thread_handle_msg+0x88>)
 800ae2a:	4806      	ldr	r0, [pc, #24]	@ (800ae44 <tcpip_thread_handle_msg+0x8c>)
 800ae2c:	f00b fa70 	bl	8016310 <iprintf>
      break;
 800ae30:	bf00      	nop
  }
}
 800ae32:	bf00      	nop
 800ae34:	3708      	adds	r7, #8
 800ae36:	46bd      	mov	sp, r7
 800ae38:	bd80      	pop	{r7, pc}
 800ae3a:	bf00      	nop
 800ae3c:	080182e4 	.word	0x080182e4
 800ae40:	08018314 	.word	0x08018314
 800ae44:	08018334 	.word	0x08018334

0800ae48 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800ae48:	b580      	push	{r7, lr}
 800ae4a:	b086      	sub	sp, #24
 800ae4c:	af00      	add	r7, sp, #0
 800ae4e:	60f8      	str	r0, [r7, #12]
 800ae50:	60b9      	str	r1, [r7, #8]
 800ae52:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800ae54:	481a      	ldr	r0, [pc, #104]	@ (800aec0 <tcpip_inpkt+0x78>)
 800ae56:	f00b f822 	bl	8015e9e <sys_mbox_valid>
 800ae5a:	4603      	mov	r3, r0
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d105      	bne.n	800ae6c <tcpip_inpkt+0x24>
 800ae60:	4b18      	ldr	r3, [pc, #96]	@ (800aec4 <tcpip_inpkt+0x7c>)
 800ae62:	22fc      	movs	r2, #252	@ 0xfc
 800ae64:	4918      	ldr	r1, [pc, #96]	@ (800aec8 <tcpip_inpkt+0x80>)
 800ae66:	4819      	ldr	r0, [pc, #100]	@ (800aecc <tcpip_inpkt+0x84>)
 800ae68:	f00b fa52 	bl	8016310 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800ae6c:	2009      	movs	r0, #9
 800ae6e:	f000 fdc9 	bl	800ba04 <memp_malloc>
 800ae72:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800ae74:	697b      	ldr	r3, [r7, #20]
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d102      	bne.n	800ae80 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800ae7a:	f04f 33ff 	mov.w	r3, #4294967295
 800ae7e:	e01a      	b.n	800aeb6 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800ae80:	697b      	ldr	r3, [r7, #20]
 800ae82:	2200      	movs	r2, #0
 800ae84:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800ae86:	697b      	ldr	r3, [r7, #20]
 800ae88:	68fa      	ldr	r2, [r7, #12]
 800ae8a:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800ae8c:	697b      	ldr	r3, [r7, #20]
 800ae8e:	68ba      	ldr	r2, [r7, #8]
 800ae90:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800ae92:	697b      	ldr	r3, [r7, #20]
 800ae94:	687a      	ldr	r2, [r7, #4]
 800ae96:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800ae98:	6979      	ldr	r1, [r7, #20]
 800ae9a:	4809      	ldr	r0, [pc, #36]	@ (800aec0 <tcpip_inpkt+0x78>)
 800ae9c:	f00a ff8a 	bl	8015db4 <sys_mbox_trypost>
 800aea0:	4603      	mov	r3, r0
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d006      	beq.n	800aeb4 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800aea6:	6979      	ldr	r1, [r7, #20]
 800aea8:	2009      	movs	r0, #9
 800aeaa:	f000 fe21 	bl	800baf0 <memp_free>
    return ERR_MEM;
 800aeae:	f04f 33ff 	mov.w	r3, #4294967295
 800aeb2:	e000      	b.n	800aeb6 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800aeb4:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800aeb6:	4618      	mov	r0, r3
 800aeb8:	3718      	adds	r7, #24
 800aeba:	46bd      	mov	sp, r7
 800aebc:	bd80      	pop	{r7, pc}
 800aebe:	bf00      	nop
 800aec0:	200091f0 	.word	0x200091f0
 800aec4:	080182e4 	.word	0x080182e4
 800aec8:	0801835c 	.word	0x0801835c
 800aecc:	08018334 	.word	0x08018334

0800aed0 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800aed0:	b580      	push	{r7, lr}
 800aed2:	b082      	sub	sp, #8
 800aed4:	af00      	add	r7, sp, #0
 800aed6:	6078      	str	r0, [r7, #4]
 800aed8:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800aeda:	683b      	ldr	r3, [r7, #0]
 800aedc:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800aee0:	f003 0318 	and.w	r3, r3, #24
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d006      	beq.n	800aef6 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800aee8:	4a08      	ldr	r2, [pc, #32]	@ (800af0c <tcpip_input+0x3c>)
 800aeea:	6839      	ldr	r1, [r7, #0]
 800aeec:	6878      	ldr	r0, [r7, #4]
 800aeee:	f7ff ffab 	bl	800ae48 <tcpip_inpkt>
 800aef2:	4603      	mov	r3, r0
 800aef4:	e005      	b.n	800af02 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800aef6:	4a06      	ldr	r2, [pc, #24]	@ (800af10 <tcpip_input+0x40>)
 800aef8:	6839      	ldr	r1, [r7, #0]
 800aefa:	6878      	ldr	r0, [r7, #4]
 800aefc:	f7ff ffa4 	bl	800ae48 <tcpip_inpkt>
 800af00:	4603      	mov	r3, r0
}
 800af02:	4618      	mov	r0, r3
 800af04:	3708      	adds	r7, #8
 800af06:	46bd      	mov	sp, r7
 800af08:	bd80      	pop	{r7, pc}
 800af0a:	bf00      	nop
 800af0c:	08015ba1 	.word	0x08015ba1
 800af10:	08014aa9 	.word	0x08014aa9

0800af14 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800af14:	b580      	push	{r7, lr}
 800af16:	b084      	sub	sp, #16
 800af18:	af00      	add	r7, sp, #0
 800af1a:	6078      	str	r0, [r7, #4]
 800af1c:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800af1e:	4819      	ldr	r0, [pc, #100]	@ (800af84 <tcpip_try_callback+0x70>)
 800af20:	f00a ffbd 	bl	8015e9e <sys_mbox_valid>
 800af24:	4603      	mov	r3, r0
 800af26:	2b00      	cmp	r3, #0
 800af28:	d106      	bne.n	800af38 <tcpip_try_callback+0x24>
 800af2a:	4b17      	ldr	r3, [pc, #92]	@ (800af88 <tcpip_try_callback+0x74>)
 800af2c:	f240 125d 	movw	r2, #349	@ 0x15d
 800af30:	4916      	ldr	r1, [pc, #88]	@ (800af8c <tcpip_try_callback+0x78>)
 800af32:	4817      	ldr	r0, [pc, #92]	@ (800af90 <tcpip_try_callback+0x7c>)
 800af34:	f00b f9ec 	bl	8016310 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800af38:	2008      	movs	r0, #8
 800af3a:	f000 fd63 	bl	800ba04 <memp_malloc>
 800af3e:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	2b00      	cmp	r3, #0
 800af44:	d102      	bne.n	800af4c <tcpip_try_callback+0x38>
    return ERR_MEM;
 800af46:	f04f 33ff 	mov.w	r3, #4294967295
 800af4a:	e017      	b.n	800af7c <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	2201      	movs	r2, #1
 800af50:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	687a      	ldr	r2, [r7, #4]
 800af56:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	683a      	ldr	r2, [r7, #0]
 800af5c:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800af5e:	68f9      	ldr	r1, [r7, #12]
 800af60:	4808      	ldr	r0, [pc, #32]	@ (800af84 <tcpip_try_callback+0x70>)
 800af62:	f00a ff27 	bl	8015db4 <sys_mbox_trypost>
 800af66:	4603      	mov	r3, r0
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d006      	beq.n	800af7a <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800af6c:	68f9      	ldr	r1, [r7, #12]
 800af6e:	2008      	movs	r0, #8
 800af70:	f000 fdbe 	bl	800baf0 <memp_free>
    return ERR_MEM;
 800af74:	f04f 33ff 	mov.w	r3, #4294967295
 800af78:	e000      	b.n	800af7c <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800af7a:	2300      	movs	r3, #0
}
 800af7c:	4618      	mov	r0, r3
 800af7e:	3710      	adds	r7, #16
 800af80:	46bd      	mov	sp, r7
 800af82:	bd80      	pop	{r7, pc}
 800af84:	200091f0 	.word	0x200091f0
 800af88:	080182e4 	.word	0x080182e4
 800af8c:	0801835c 	.word	0x0801835c
 800af90:	08018334 	.word	0x08018334

0800af94 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 800af94:	b580      	push	{r7, lr}
 800af96:	b084      	sub	sp, #16
 800af98:	af00      	add	r7, sp, #0
 800af9a:	60f8      	str	r0, [r7, #12]
 800af9c:	60b9      	str	r1, [r7, #8]
 800af9e:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 800afa0:	4806      	ldr	r0, [pc, #24]	@ (800afbc <tcpip_send_msg_wait_sem+0x28>)
 800afa2:	f00b f855 	bl	8016050 <sys_mutex_lock>
  fn(apimsg);
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	68b8      	ldr	r0, [r7, #8]
 800afaa:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 800afac:	4803      	ldr	r0, [pc, #12]	@ (800afbc <tcpip_send_msg_wait_sem+0x28>)
 800afae:	f00b f85e 	bl	801606e <sys_mutex_unlock>
  return ERR_OK;
 800afb2:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800afb4:	4618      	mov	r0, r3
 800afb6:	3710      	adds	r7, #16
 800afb8:	46bd      	mov	sp, r7
 800afba:	bd80      	pop	{r7, pc}
 800afbc:	200091f4 	.word	0x200091f4

0800afc0 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800afc0:	b580      	push	{r7, lr}
 800afc2:	b084      	sub	sp, #16
 800afc4:	af02      	add	r7, sp, #8
 800afc6:	6078      	str	r0, [r7, #4]
 800afc8:	6039      	str	r1, [r7, #0]
  lwip_init();
 800afca:	f000 f871 	bl	800b0b0 <lwip_init>

  tcpip_init_done = initfunc;
 800afce:	4a17      	ldr	r2, [pc, #92]	@ (800b02c <tcpip_init+0x6c>)
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800afd4:	4a16      	ldr	r2, [pc, #88]	@ (800b030 <tcpip_init+0x70>)
 800afd6:	683b      	ldr	r3, [r7, #0]
 800afd8:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800afda:	2106      	movs	r1, #6
 800afdc:	4815      	ldr	r0, [pc, #84]	@ (800b034 <tcpip_init+0x74>)
 800afde:	f00a feb5 	bl	8015d4c <sys_mbox_new>
 800afe2:	4603      	mov	r3, r0
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d006      	beq.n	800aff6 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800afe8:	4b13      	ldr	r3, [pc, #76]	@ (800b038 <tcpip_init+0x78>)
 800afea:	f240 2261 	movw	r2, #609	@ 0x261
 800afee:	4913      	ldr	r1, [pc, #76]	@ (800b03c <tcpip_init+0x7c>)
 800aff0:	4813      	ldr	r0, [pc, #76]	@ (800b040 <tcpip_init+0x80>)
 800aff2:	f00b f98d 	bl	8016310 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800aff6:	4813      	ldr	r0, [pc, #76]	@ (800b044 <tcpip_init+0x84>)
 800aff8:	f00b f80e 	bl	8016018 <sys_mutex_new>
 800affc:	4603      	mov	r3, r0
 800affe:	2b00      	cmp	r3, #0
 800b000:	d006      	beq.n	800b010 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800b002:	4b0d      	ldr	r3, [pc, #52]	@ (800b038 <tcpip_init+0x78>)
 800b004:	f240 2265 	movw	r2, #613	@ 0x265
 800b008:	490f      	ldr	r1, [pc, #60]	@ (800b048 <tcpip_init+0x88>)
 800b00a:	480d      	ldr	r0, [pc, #52]	@ (800b040 <tcpip_init+0x80>)
 800b00c:	f00b f980 	bl	8016310 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800b010:	2300      	movs	r3, #0
 800b012:	9300      	str	r3, [sp, #0]
 800b014:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b018:	2200      	movs	r2, #0
 800b01a:	490c      	ldr	r1, [pc, #48]	@ (800b04c <tcpip_init+0x8c>)
 800b01c:	480c      	ldr	r0, [pc, #48]	@ (800b050 <tcpip_init+0x90>)
 800b01e:	f00b f833 	bl	8016088 <sys_thread_new>
}
 800b022:	bf00      	nop
 800b024:	3708      	adds	r7, #8
 800b026:	46bd      	mov	sp, r7
 800b028:	bd80      	pop	{r7, pc}
 800b02a:	bf00      	nop
 800b02c:	200091e8 	.word	0x200091e8
 800b030:	200091ec 	.word	0x200091ec
 800b034:	200091f0 	.word	0x200091f0
 800b038:	080182e4 	.word	0x080182e4
 800b03c:	0801836c 	.word	0x0801836c
 800b040:	08018334 	.word	0x08018334
 800b044:	200091f4 	.word	0x200091f4
 800b048:	08018390 	.word	0x08018390
 800b04c:	0800ad51 	.word	0x0800ad51
 800b050:	080183b4 	.word	0x080183b4

0800b054 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800b054:	b480      	push	{r7}
 800b056:	b083      	sub	sp, #12
 800b058:	af00      	add	r7, sp, #0
 800b05a:	4603      	mov	r3, r0
 800b05c:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800b05e:	88fb      	ldrh	r3, [r7, #6]
 800b060:	021b      	lsls	r3, r3, #8
 800b062:	b21a      	sxth	r2, r3
 800b064:	88fb      	ldrh	r3, [r7, #6]
 800b066:	0a1b      	lsrs	r3, r3, #8
 800b068:	b29b      	uxth	r3, r3
 800b06a:	b21b      	sxth	r3, r3
 800b06c:	4313      	orrs	r3, r2
 800b06e:	b21b      	sxth	r3, r3
 800b070:	b29b      	uxth	r3, r3
}
 800b072:	4618      	mov	r0, r3
 800b074:	370c      	adds	r7, #12
 800b076:	46bd      	mov	sp, r7
 800b078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b07c:	4770      	bx	lr

0800b07e <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800b07e:	b480      	push	{r7}
 800b080:	b083      	sub	sp, #12
 800b082:	af00      	add	r7, sp, #0
 800b084:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	061a      	lsls	r2, r3, #24
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	021b      	lsls	r3, r3, #8
 800b08e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800b092:	431a      	orrs	r2, r3
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	0a1b      	lsrs	r3, r3, #8
 800b098:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800b09c:	431a      	orrs	r2, r3
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	0e1b      	lsrs	r3, r3, #24
 800b0a2:	4313      	orrs	r3, r2
}
 800b0a4:	4618      	mov	r0, r3
 800b0a6:	370c      	adds	r7, #12
 800b0a8:	46bd      	mov	sp, r7
 800b0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ae:	4770      	bx	lr

0800b0b0 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800b0b0:	b580      	push	{r7, lr}
 800b0b2:	b082      	sub	sp, #8
 800b0b4:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800b0b6:	2300      	movs	r3, #0
 800b0b8:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800b0ba:	f00a ff9f 	bl	8015ffc <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800b0be:	f000 f8d5 	bl	800b26c <mem_init>
  memp_init();
 800b0c2:	f000 fc31 	bl	800b928 <memp_init>
  pbuf_init();
  netif_init();
 800b0c6:	f000 fd3d 	bl	800bb44 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800b0ca:	f008 f879 	bl	80131c0 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800b0ce:	f001 fe6f 	bl	800cdb0 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800b0d2:	f007 ffbb 	bl	801304c <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800b0d6:	bf00      	nop
 800b0d8:	3708      	adds	r7, #8
 800b0da:	46bd      	mov	sp, r7
 800b0dc:	bd80      	pop	{r7, pc}
	...

0800b0e0 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800b0e0:	b480      	push	{r7}
 800b0e2:	b083      	sub	sp, #12
 800b0e4:	af00      	add	r7, sp, #0
 800b0e6:	4603      	mov	r3, r0
 800b0e8:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800b0ea:	4b05      	ldr	r3, [pc, #20]	@ (800b100 <ptr_to_mem+0x20>)
 800b0ec:	681a      	ldr	r2, [r3, #0]
 800b0ee:	88fb      	ldrh	r3, [r7, #6]
 800b0f0:	4413      	add	r3, r2
}
 800b0f2:	4618      	mov	r0, r3
 800b0f4:	370c      	adds	r7, #12
 800b0f6:	46bd      	mov	sp, r7
 800b0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0fc:	4770      	bx	lr
 800b0fe:	bf00      	nop
 800b100:	2000ba24 	.word	0x2000ba24

0800b104 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800b104:	b480      	push	{r7}
 800b106:	b083      	sub	sp, #12
 800b108:	af00      	add	r7, sp, #0
 800b10a:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800b10c:	4b05      	ldr	r3, [pc, #20]	@ (800b124 <mem_to_ptr+0x20>)
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	687a      	ldr	r2, [r7, #4]
 800b112:	1ad3      	subs	r3, r2, r3
 800b114:	b29b      	uxth	r3, r3
}
 800b116:	4618      	mov	r0, r3
 800b118:	370c      	adds	r7, #12
 800b11a:	46bd      	mov	sp, r7
 800b11c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b120:	4770      	bx	lr
 800b122:	bf00      	nop
 800b124:	2000ba24 	.word	0x2000ba24

0800b128 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800b128:	b590      	push	{r4, r7, lr}
 800b12a:	b085      	sub	sp, #20
 800b12c:	af00      	add	r7, sp, #0
 800b12e:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800b130:	4b45      	ldr	r3, [pc, #276]	@ (800b248 <plug_holes+0x120>)
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	687a      	ldr	r2, [r7, #4]
 800b136:	429a      	cmp	r2, r3
 800b138:	d206      	bcs.n	800b148 <plug_holes+0x20>
 800b13a:	4b44      	ldr	r3, [pc, #272]	@ (800b24c <plug_holes+0x124>)
 800b13c:	f240 12df 	movw	r2, #479	@ 0x1df
 800b140:	4943      	ldr	r1, [pc, #268]	@ (800b250 <plug_holes+0x128>)
 800b142:	4844      	ldr	r0, [pc, #272]	@ (800b254 <plug_holes+0x12c>)
 800b144:	f00b f8e4 	bl	8016310 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800b148:	4b43      	ldr	r3, [pc, #268]	@ (800b258 <plug_holes+0x130>)
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	687a      	ldr	r2, [r7, #4]
 800b14e:	429a      	cmp	r2, r3
 800b150:	d306      	bcc.n	800b160 <plug_holes+0x38>
 800b152:	4b3e      	ldr	r3, [pc, #248]	@ (800b24c <plug_holes+0x124>)
 800b154:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800b158:	4940      	ldr	r1, [pc, #256]	@ (800b25c <plug_holes+0x134>)
 800b15a:	483e      	ldr	r0, [pc, #248]	@ (800b254 <plug_holes+0x12c>)
 800b15c:	f00b f8d8 	bl	8016310 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	791b      	ldrb	r3, [r3, #4]
 800b164:	2b00      	cmp	r3, #0
 800b166:	d006      	beq.n	800b176 <plug_holes+0x4e>
 800b168:	4b38      	ldr	r3, [pc, #224]	@ (800b24c <plug_holes+0x124>)
 800b16a:	f240 12e1 	movw	r2, #481	@ 0x1e1
 800b16e:	493c      	ldr	r1, [pc, #240]	@ (800b260 <plug_holes+0x138>)
 800b170:	4838      	ldr	r0, [pc, #224]	@ (800b254 <plug_holes+0x12c>)
 800b172:	f00b f8cd 	bl	8016310 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	881b      	ldrh	r3, [r3, #0]
 800b17a:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800b17e:	d906      	bls.n	800b18e <plug_holes+0x66>
 800b180:	4b32      	ldr	r3, [pc, #200]	@ (800b24c <plug_holes+0x124>)
 800b182:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 800b186:	4937      	ldr	r1, [pc, #220]	@ (800b264 <plug_holes+0x13c>)
 800b188:	4832      	ldr	r0, [pc, #200]	@ (800b254 <plug_holes+0x12c>)
 800b18a:	f00b f8c1 	bl	8016310 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	881b      	ldrh	r3, [r3, #0]
 800b192:	4618      	mov	r0, r3
 800b194:	f7ff ffa4 	bl	800b0e0 <ptr_to_mem>
 800b198:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800b19a:	687a      	ldr	r2, [r7, #4]
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	429a      	cmp	r2, r3
 800b1a0:	d024      	beq.n	800b1ec <plug_holes+0xc4>
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	791b      	ldrb	r3, [r3, #4]
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d120      	bne.n	800b1ec <plug_holes+0xc4>
 800b1aa:	4b2b      	ldr	r3, [pc, #172]	@ (800b258 <plug_holes+0x130>)
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	68fa      	ldr	r2, [r7, #12]
 800b1b0:	429a      	cmp	r2, r3
 800b1b2:	d01b      	beq.n	800b1ec <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800b1b4:	4b2c      	ldr	r3, [pc, #176]	@ (800b268 <plug_holes+0x140>)
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	68fa      	ldr	r2, [r7, #12]
 800b1ba:	429a      	cmp	r2, r3
 800b1bc:	d102      	bne.n	800b1c4 <plug_holes+0x9c>
      lfree = mem;
 800b1be:	4a2a      	ldr	r2, [pc, #168]	@ (800b268 <plug_holes+0x140>)
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	881a      	ldrh	r2, [r3, #0]
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	881b      	ldrh	r3, [r3, #0]
 800b1d0:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800b1d4:	d00a      	beq.n	800b1ec <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	881b      	ldrh	r3, [r3, #0]
 800b1da:	4618      	mov	r0, r3
 800b1dc:	f7ff ff80 	bl	800b0e0 <ptr_to_mem>
 800b1e0:	4604      	mov	r4, r0
 800b1e2:	6878      	ldr	r0, [r7, #4]
 800b1e4:	f7ff ff8e 	bl	800b104 <mem_to_ptr>
 800b1e8:	4603      	mov	r3, r0
 800b1ea:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	885b      	ldrh	r3, [r3, #2]
 800b1f0:	4618      	mov	r0, r3
 800b1f2:	f7ff ff75 	bl	800b0e0 <ptr_to_mem>
 800b1f6:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800b1f8:	68ba      	ldr	r2, [r7, #8]
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	429a      	cmp	r2, r3
 800b1fe:	d01f      	beq.n	800b240 <plug_holes+0x118>
 800b200:	68bb      	ldr	r3, [r7, #8]
 800b202:	791b      	ldrb	r3, [r3, #4]
 800b204:	2b00      	cmp	r3, #0
 800b206:	d11b      	bne.n	800b240 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800b208:	4b17      	ldr	r3, [pc, #92]	@ (800b268 <plug_holes+0x140>)
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	687a      	ldr	r2, [r7, #4]
 800b20e:	429a      	cmp	r2, r3
 800b210:	d102      	bne.n	800b218 <plug_holes+0xf0>
      lfree = pmem;
 800b212:	4a15      	ldr	r2, [pc, #84]	@ (800b268 <plug_holes+0x140>)
 800b214:	68bb      	ldr	r3, [r7, #8]
 800b216:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	881a      	ldrh	r2, [r3, #0]
 800b21c:	68bb      	ldr	r3, [r7, #8]
 800b21e:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	881b      	ldrh	r3, [r3, #0]
 800b224:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800b228:	d00a      	beq.n	800b240 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	881b      	ldrh	r3, [r3, #0]
 800b22e:	4618      	mov	r0, r3
 800b230:	f7ff ff56 	bl	800b0e0 <ptr_to_mem>
 800b234:	4604      	mov	r4, r0
 800b236:	68b8      	ldr	r0, [r7, #8]
 800b238:	f7ff ff64 	bl	800b104 <mem_to_ptr>
 800b23c:	4603      	mov	r3, r0
 800b23e:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800b240:	bf00      	nop
 800b242:	3714      	adds	r7, #20
 800b244:	46bd      	mov	sp, r7
 800b246:	bd90      	pop	{r4, r7, pc}
 800b248:	2000ba24 	.word	0x2000ba24
 800b24c:	080183c4 	.word	0x080183c4
 800b250:	080183f4 	.word	0x080183f4
 800b254:	0801840c 	.word	0x0801840c
 800b258:	2000ba28 	.word	0x2000ba28
 800b25c:	08018434 	.word	0x08018434
 800b260:	08018450 	.word	0x08018450
 800b264:	0801846c 	.word	0x0801846c
 800b268:	2000ba30 	.word	0x2000ba30

0800b26c <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800b26c:	b580      	push	{r7, lr}
 800b26e:	b082      	sub	sp, #8
 800b270:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800b272:	4b1f      	ldr	r3, [pc, #124]	@ (800b2f0 <mem_init+0x84>)
 800b274:	3303      	adds	r3, #3
 800b276:	f023 0303 	bic.w	r3, r3, #3
 800b27a:	461a      	mov	r2, r3
 800b27c:	4b1d      	ldr	r3, [pc, #116]	@ (800b2f4 <mem_init+0x88>)
 800b27e:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800b280:	4b1c      	ldr	r3, [pc, #112]	@ (800b2f4 <mem_init+0x88>)
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 800b28c:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	2200      	movs	r2, #0
 800b292:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	2200      	movs	r2, #0
 800b298:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800b29a:	f44f 5020 	mov.w	r0, #10240	@ 0x2800
 800b29e:	f7ff ff1f 	bl	800b0e0 <ptr_to_mem>
 800b2a2:	4603      	mov	r3, r0
 800b2a4:	4a14      	ldr	r2, [pc, #80]	@ (800b2f8 <mem_init+0x8c>)
 800b2a6:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800b2a8:	4b13      	ldr	r3, [pc, #76]	@ (800b2f8 <mem_init+0x8c>)
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	2201      	movs	r2, #1
 800b2ae:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800b2b0:	4b11      	ldr	r3, [pc, #68]	@ (800b2f8 <mem_init+0x8c>)
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 800b2b8:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800b2ba:	4b0f      	ldr	r3, [pc, #60]	@ (800b2f8 <mem_init+0x8c>)
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 800b2c2:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800b2c4:	4b0b      	ldr	r3, [pc, #44]	@ (800b2f4 <mem_init+0x88>)
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	4a0c      	ldr	r2, [pc, #48]	@ (800b2fc <mem_init+0x90>)
 800b2ca:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800b2cc:	480c      	ldr	r0, [pc, #48]	@ (800b300 <mem_init+0x94>)
 800b2ce:	f00a fea3 	bl	8016018 <sys_mutex_new>
 800b2d2:	4603      	mov	r3, r0
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d006      	beq.n	800b2e6 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800b2d8:	4b0a      	ldr	r3, [pc, #40]	@ (800b304 <mem_init+0x98>)
 800b2da:	f240 221f 	movw	r2, #543	@ 0x21f
 800b2de:	490a      	ldr	r1, [pc, #40]	@ (800b308 <mem_init+0x9c>)
 800b2e0:	480a      	ldr	r0, [pc, #40]	@ (800b30c <mem_init+0xa0>)
 800b2e2:	f00b f815 	bl	8016310 <iprintf>
  }
}
 800b2e6:	bf00      	nop
 800b2e8:	3708      	adds	r7, #8
 800b2ea:	46bd      	mov	sp, r7
 800b2ec:	bd80      	pop	{r7, pc}
 800b2ee:	bf00      	nop
 800b2f0:	20009210 	.word	0x20009210
 800b2f4:	2000ba24 	.word	0x2000ba24
 800b2f8:	2000ba28 	.word	0x2000ba28
 800b2fc:	2000ba30 	.word	0x2000ba30
 800b300:	2000ba2c 	.word	0x2000ba2c
 800b304:	080183c4 	.word	0x080183c4
 800b308:	08018498 	.word	0x08018498
 800b30c:	0801840c 	.word	0x0801840c

0800b310 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800b310:	b580      	push	{r7, lr}
 800b312:	b086      	sub	sp, #24
 800b314:	af00      	add	r7, sp, #0
 800b316:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800b318:	6878      	ldr	r0, [r7, #4]
 800b31a:	f7ff fef3 	bl	800b104 <mem_to_ptr>
 800b31e:	4603      	mov	r3, r0
 800b320:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	881b      	ldrh	r3, [r3, #0]
 800b326:	4618      	mov	r0, r3
 800b328:	f7ff feda 	bl	800b0e0 <ptr_to_mem>
 800b32c:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	885b      	ldrh	r3, [r3, #2]
 800b332:	4618      	mov	r0, r3
 800b334:	f7ff fed4 	bl	800b0e0 <ptr_to_mem>
 800b338:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	881b      	ldrh	r3, [r3, #0]
 800b33e:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800b342:	d818      	bhi.n	800b376 <mem_link_valid+0x66>
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	885b      	ldrh	r3, [r3, #2]
 800b348:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800b34c:	d813      	bhi.n	800b376 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800b352:	8afa      	ldrh	r2, [r7, #22]
 800b354:	429a      	cmp	r2, r3
 800b356:	d004      	beq.n	800b362 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	881b      	ldrh	r3, [r3, #0]
 800b35c:	8afa      	ldrh	r2, [r7, #22]
 800b35e:	429a      	cmp	r2, r3
 800b360:	d109      	bne.n	800b376 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800b362:	4b08      	ldr	r3, [pc, #32]	@ (800b384 <mem_link_valid+0x74>)
 800b364:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800b366:	693a      	ldr	r2, [r7, #16]
 800b368:	429a      	cmp	r2, r3
 800b36a:	d006      	beq.n	800b37a <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800b36c:	693b      	ldr	r3, [r7, #16]
 800b36e:	885b      	ldrh	r3, [r3, #2]
 800b370:	8afa      	ldrh	r2, [r7, #22]
 800b372:	429a      	cmp	r2, r3
 800b374:	d001      	beq.n	800b37a <mem_link_valid+0x6a>
    return 0;
 800b376:	2300      	movs	r3, #0
 800b378:	e000      	b.n	800b37c <mem_link_valid+0x6c>
  }
  return 1;
 800b37a:	2301      	movs	r3, #1
}
 800b37c:	4618      	mov	r0, r3
 800b37e:	3718      	adds	r7, #24
 800b380:	46bd      	mov	sp, r7
 800b382:	bd80      	pop	{r7, pc}
 800b384:	2000ba28 	.word	0x2000ba28

0800b388 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800b388:	b580      	push	{r7, lr}
 800b38a:	b088      	sub	sp, #32
 800b38c:	af00      	add	r7, sp, #0
 800b38e:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	2b00      	cmp	r3, #0
 800b394:	d070      	beq.n	800b478 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	f003 0303 	and.w	r3, r3, #3
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d00d      	beq.n	800b3bc <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800b3a0:	4b37      	ldr	r3, [pc, #220]	@ (800b480 <mem_free+0xf8>)
 800b3a2:	f240 2273 	movw	r2, #627	@ 0x273
 800b3a6:	4937      	ldr	r1, [pc, #220]	@ (800b484 <mem_free+0xfc>)
 800b3a8:	4837      	ldr	r0, [pc, #220]	@ (800b488 <mem_free+0x100>)
 800b3aa:	f00a ffb1 	bl	8016310 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800b3ae:	f00a fe91 	bl	80160d4 <sys_arch_protect>
 800b3b2:	60f8      	str	r0, [r7, #12]
 800b3b4:	68f8      	ldr	r0, [r7, #12]
 800b3b6:	f00a fe9b 	bl	80160f0 <sys_arch_unprotect>
    return;
 800b3ba:	e05e      	b.n	800b47a <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	3b08      	subs	r3, #8
 800b3c0:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800b3c2:	4b32      	ldr	r3, [pc, #200]	@ (800b48c <mem_free+0x104>)
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	69fa      	ldr	r2, [r7, #28]
 800b3c8:	429a      	cmp	r2, r3
 800b3ca:	d306      	bcc.n	800b3da <mem_free+0x52>
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	f103 020c 	add.w	r2, r3, #12
 800b3d2:	4b2f      	ldr	r3, [pc, #188]	@ (800b490 <mem_free+0x108>)
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	429a      	cmp	r2, r3
 800b3d8:	d90d      	bls.n	800b3f6 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800b3da:	4b29      	ldr	r3, [pc, #164]	@ (800b480 <mem_free+0xf8>)
 800b3dc:	f240 227f 	movw	r2, #639	@ 0x27f
 800b3e0:	492c      	ldr	r1, [pc, #176]	@ (800b494 <mem_free+0x10c>)
 800b3e2:	4829      	ldr	r0, [pc, #164]	@ (800b488 <mem_free+0x100>)
 800b3e4:	f00a ff94 	bl	8016310 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800b3e8:	f00a fe74 	bl	80160d4 <sys_arch_protect>
 800b3ec:	6138      	str	r0, [r7, #16]
 800b3ee:	6938      	ldr	r0, [r7, #16]
 800b3f0:	f00a fe7e 	bl	80160f0 <sys_arch_unprotect>
    return;
 800b3f4:	e041      	b.n	800b47a <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800b3f6:	4828      	ldr	r0, [pc, #160]	@ (800b498 <mem_free+0x110>)
 800b3f8:	f00a fe2a 	bl	8016050 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800b3fc:	69fb      	ldr	r3, [r7, #28]
 800b3fe:	791b      	ldrb	r3, [r3, #4]
 800b400:	2b00      	cmp	r3, #0
 800b402:	d110      	bne.n	800b426 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800b404:	4b1e      	ldr	r3, [pc, #120]	@ (800b480 <mem_free+0xf8>)
 800b406:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 800b40a:	4924      	ldr	r1, [pc, #144]	@ (800b49c <mem_free+0x114>)
 800b40c:	481e      	ldr	r0, [pc, #120]	@ (800b488 <mem_free+0x100>)
 800b40e:	f00a ff7f 	bl	8016310 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800b412:	4821      	ldr	r0, [pc, #132]	@ (800b498 <mem_free+0x110>)
 800b414:	f00a fe2b 	bl	801606e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800b418:	f00a fe5c 	bl	80160d4 <sys_arch_protect>
 800b41c:	6178      	str	r0, [r7, #20]
 800b41e:	6978      	ldr	r0, [r7, #20]
 800b420:	f00a fe66 	bl	80160f0 <sys_arch_unprotect>
    return;
 800b424:	e029      	b.n	800b47a <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800b426:	69f8      	ldr	r0, [r7, #28]
 800b428:	f7ff ff72 	bl	800b310 <mem_link_valid>
 800b42c:	4603      	mov	r3, r0
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d110      	bne.n	800b454 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800b432:	4b13      	ldr	r3, [pc, #76]	@ (800b480 <mem_free+0xf8>)
 800b434:	f240 2295 	movw	r2, #661	@ 0x295
 800b438:	4919      	ldr	r1, [pc, #100]	@ (800b4a0 <mem_free+0x118>)
 800b43a:	4813      	ldr	r0, [pc, #76]	@ (800b488 <mem_free+0x100>)
 800b43c:	f00a ff68 	bl	8016310 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800b440:	4815      	ldr	r0, [pc, #84]	@ (800b498 <mem_free+0x110>)
 800b442:	f00a fe14 	bl	801606e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800b446:	f00a fe45 	bl	80160d4 <sys_arch_protect>
 800b44a:	61b8      	str	r0, [r7, #24]
 800b44c:	69b8      	ldr	r0, [r7, #24]
 800b44e:	f00a fe4f 	bl	80160f0 <sys_arch_unprotect>
    return;
 800b452:	e012      	b.n	800b47a <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800b454:	69fb      	ldr	r3, [r7, #28]
 800b456:	2200      	movs	r2, #0
 800b458:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800b45a:	4b12      	ldr	r3, [pc, #72]	@ (800b4a4 <mem_free+0x11c>)
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	69fa      	ldr	r2, [r7, #28]
 800b460:	429a      	cmp	r2, r3
 800b462:	d202      	bcs.n	800b46a <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800b464:	4a0f      	ldr	r2, [pc, #60]	@ (800b4a4 <mem_free+0x11c>)
 800b466:	69fb      	ldr	r3, [r7, #28]
 800b468:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800b46a:	69f8      	ldr	r0, [r7, #28]
 800b46c:	f7ff fe5c 	bl	800b128 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800b470:	4809      	ldr	r0, [pc, #36]	@ (800b498 <mem_free+0x110>)
 800b472:	f00a fdfc 	bl	801606e <sys_mutex_unlock>
 800b476:	e000      	b.n	800b47a <mem_free+0xf2>
    return;
 800b478:	bf00      	nop
}
 800b47a:	3720      	adds	r7, #32
 800b47c:	46bd      	mov	sp, r7
 800b47e:	bd80      	pop	{r7, pc}
 800b480:	080183c4 	.word	0x080183c4
 800b484:	080184b4 	.word	0x080184b4
 800b488:	0801840c 	.word	0x0801840c
 800b48c:	2000ba24 	.word	0x2000ba24
 800b490:	2000ba28 	.word	0x2000ba28
 800b494:	080184d8 	.word	0x080184d8
 800b498:	2000ba2c 	.word	0x2000ba2c
 800b49c:	080184f4 	.word	0x080184f4
 800b4a0:	0801851c 	.word	0x0801851c
 800b4a4:	2000ba30 	.word	0x2000ba30

0800b4a8 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800b4a8:	b580      	push	{r7, lr}
 800b4aa:	b088      	sub	sp, #32
 800b4ac:	af00      	add	r7, sp, #0
 800b4ae:	6078      	str	r0, [r7, #4]
 800b4b0:	460b      	mov	r3, r1
 800b4b2:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800b4b4:	887b      	ldrh	r3, [r7, #2]
 800b4b6:	3303      	adds	r3, #3
 800b4b8:	b29b      	uxth	r3, r3
 800b4ba:	f023 0303 	bic.w	r3, r3, #3
 800b4be:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800b4c0:	8bfb      	ldrh	r3, [r7, #30]
 800b4c2:	2b0b      	cmp	r3, #11
 800b4c4:	d801      	bhi.n	800b4ca <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800b4c6:	230c      	movs	r3, #12
 800b4c8:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800b4ca:	8bfb      	ldrh	r3, [r7, #30]
 800b4cc:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800b4d0:	d803      	bhi.n	800b4da <mem_trim+0x32>
 800b4d2:	8bfa      	ldrh	r2, [r7, #30]
 800b4d4:	887b      	ldrh	r3, [r7, #2]
 800b4d6:	429a      	cmp	r2, r3
 800b4d8:	d201      	bcs.n	800b4de <mem_trim+0x36>
    return NULL;
 800b4da:	2300      	movs	r3, #0
 800b4dc:	e0d8      	b.n	800b690 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800b4de:	4b6e      	ldr	r3, [pc, #440]	@ (800b698 <mem_trim+0x1f0>)
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	687a      	ldr	r2, [r7, #4]
 800b4e4:	429a      	cmp	r2, r3
 800b4e6:	d304      	bcc.n	800b4f2 <mem_trim+0x4a>
 800b4e8:	4b6c      	ldr	r3, [pc, #432]	@ (800b69c <mem_trim+0x1f4>)
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	687a      	ldr	r2, [r7, #4]
 800b4ee:	429a      	cmp	r2, r3
 800b4f0:	d306      	bcc.n	800b500 <mem_trim+0x58>
 800b4f2:	4b6b      	ldr	r3, [pc, #428]	@ (800b6a0 <mem_trim+0x1f8>)
 800b4f4:	f240 22d1 	movw	r2, #721	@ 0x2d1
 800b4f8:	496a      	ldr	r1, [pc, #424]	@ (800b6a4 <mem_trim+0x1fc>)
 800b4fa:	486b      	ldr	r0, [pc, #428]	@ (800b6a8 <mem_trim+0x200>)
 800b4fc:	f00a ff08 	bl	8016310 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800b500:	4b65      	ldr	r3, [pc, #404]	@ (800b698 <mem_trim+0x1f0>)
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	687a      	ldr	r2, [r7, #4]
 800b506:	429a      	cmp	r2, r3
 800b508:	d304      	bcc.n	800b514 <mem_trim+0x6c>
 800b50a:	4b64      	ldr	r3, [pc, #400]	@ (800b69c <mem_trim+0x1f4>)
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	687a      	ldr	r2, [r7, #4]
 800b510:	429a      	cmp	r2, r3
 800b512:	d307      	bcc.n	800b524 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800b514:	f00a fdde 	bl	80160d4 <sys_arch_protect>
 800b518:	60b8      	str	r0, [r7, #8]
 800b51a:	68b8      	ldr	r0, [r7, #8]
 800b51c:	f00a fde8 	bl	80160f0 <sys_arch_unprotect>
    return rmem;
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	e0b5      	b.n	800b690 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	3b08      	subs	r3, #8
 800b528:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800b52a:	69b8      	ldr	r0, [r7, #24]
 800b52c:	f7ff fdea 	bl	800b104 <mem_to_ptr>
 800b530:	4603      	mov	r3, r0
 800b532:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800b534:	69bb      	ldr	r3, [r7, #24]
 800b536:	881a      	ldrh	r2, [r3, #0]
 800b538:	8afb      	ldrh	r3, [r7, #22]
 800b53a:	1ad3      	subs	r3, r2, r3
 800b53c:	b29b      	uxth	r3, r3
 800b53e:	3b08      	subs	r3, #8
 800b540:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800b542:	8bfa      	ldrh	r2, [r7, #30]
 800b544:	8abb      	ldrh	r3, [r7, #20]
 800b546:	429a      	cmp	r2, r3
 800b548:	d906      	bls.n	800b558 <mem_trim+0xb0>
 800b54a:	4b55      	ldr	r3, [pc, #340]	@ (800b6a0 <mem_trim+0x1f8>)
 800b54c:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 800b550:	4956      	ldr	r1, [pc, #344]	@ (800b6ac <mem_trim+0x204>)
 800b552:	4855      	ldr	r0, [pc, #340]	@ (800b6a8 <mem_trim+0x200>)
 800b554:	f00a fedc 	bl	8016310 <iprintf>
  if (newsize > size) {
 800b558:	8bfa      	ldrh	r2, [r7, #30]
 800b55a:	8abb      	ldrh	r3, [r7, #20]
 800b55c:	429a      	cmp	r2, r3
 800b55e:	d901      	bls.n	800b564 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800b560:	2300      	movs	r3, #0
 800b562:	e095      	b.n	800b690 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800b564:	8bfa      	ldrh	r2, [r7, #30]
 800b566:	8abb      	ldrh	r3, [r7, #20]
 800b568:	429a      	cmp	r2, r3
 800b56a:	d101      	bne.n	800b570 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	e08f      	b.n	800b690 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800b570:	484f      	ldr	r0, [pc, #316]	@ (800b6b0 <mem_trim+0x208>)
 800b572:	f00a fd6d 	bl	8016050 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800b576:	69bb      	ldr	r3, [r7, #24]
 800b578:	881b      	ldrh	r3, [r3, #0]
 800b57a:	4618      	mov	r0, r3
 800b57c:	f7ff fdb0 	bl	800b0e0 <ptr_to_mem>
 800b580:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800b582:	693b      	ldr	r3, [r7, #16]
 800b584:	791b      	ldrb	r3, [r3, #4]
 800b586:	2b00      	cmp	r3, #0
 800b588:	d13f      	bne.n	800b60a <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800b58a:	69bb      	ldr	r3, [r7, #24]
 800b58c:	881b      	ldrh	r3, [r3, #0]
 800b58e:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800b592:	d106      	bne.n	800b5a2 <mem_trim+0xfa>
 800b594:	4b42      	ldr	r3, [pc, #264]	@ (800b6a0 <mem_trim+0x1f8>)
 800b596:	f240 22f5 	movw	r2, #757	@ 0x2f5
 800b59a:	4946      	ldr	r1, [pc, #280]	@ (800b6b4 <mem_trim+0x20c>)
 800b59c:	4842      	ldr	r0, [pc, #264]	@ (800b6a8 <mem_trim+0x200>)
 800b59e:	f00a feb7 	bl	8016310 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800b5a2:	693b      	ldr	r3, [r7, #16]
 800b5a4:	881b      	ldrh	r3, [r3, #0]
 800b5a6:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800b5a8:	8afa      	ldrh	r2, [r7, #22]
 800b5aa:	8bfb      	ldrh	r3, [r7, #30]
 800b5ac:	4413      	add	r3, r2
 800b5ae:	b29b      	uxth	r3, r3
 800b5b0:	3308      	adds	r3, #8
 800b5b2:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800b5b4:	4b40      	ldr	r3, [pc, #256]	@ (800b6b8 <mem_trim+0x210>)
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	693a      	ldr	r2, [r7, #16]
 800b5ba:	429a      	cmp	r2, r3
 800b5bc:	d106      	bne.n	800b5cc <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800b5be:	89fb      	ldrh	r3, [r7, #14]
 800b5c0:	4618      	mov	r0, r3
 800b5c2:	f7ff fd8d 	bl	800b0e0 <ptr_to_mem>
 800b5c6:	4603      	mov	r3, r0
 800b5c8:	4a3b      	ldr	r2, [pc, #236]	@ (800b6b8 <mem_trim+0x210>)
 800b5ca:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800b5cc:	89fb      	ldrh	r3, [r7, #14]
 800b5ce:	4618      	mov	r0, r3
 800b5d0:	f7ff fd86 	bl	800b0e0 <ptr_to_mem>
 800b5d4:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800b5d6:	693b      	ldr	r3, [r7, #16]
 800b5d8:	2200      	movs	r2, #0
 800b5da:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800b5dc:	693b      	ldr	r3, [r7, #16]
 800b5de:	89ba      	ldrh	r2, [r7, #12]
 800b5e0:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800b5e2:	693b      	ldr	r3, [r7, #16]
 800b5e4:	8afa      	ldrh	r2, [r7, #22]
 800b5e6:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800b5e8:	69bb      	ldr	r3, [r7, #24]
 800b5ea:	89fa      	ldrh	r2, [r7, #14]
 800b5ec:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800b5ee:	693b      	ldr	r3, [r7, #16]
 800b5f0:	881b      	ldrh	r3, [r3, #0]
 800b5f2:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800b5f6:	d047      	beq.n	800b688 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800b5f8:	693b      	ldr	r3, [r7, #16]
 800b5fa:	881b      	ldrh	r3, [r3, #0]
 800b5fc:	4618      	mov	r0, r3
 800b5fe:	f7ff fd6f 	bl	800b0e0 <ptr_to_mem>
 800b602:	4602      	mov	r2, r0
 800b604:	89fb      	ldrh	r3, [r7, #14]
 800b606:	8053      	strh	r3, [r2, #2]
 800b608:	e03e      	b.n	800b688 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800b60a:	8bfb      	ldrh	r3, [r7, #30]
 800b60c:	f103 0214 	add.w	r2, r3, #20
 800b610:	8abb      	ldrh	r3, [r7, #20]
 800b612:	429a      	cmp	r2, r3
 800b614:	d838      	bhi.n	800b688 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800b616:	8afa      	ldrh	r2, [r7, #22]
 800b618:	8bfb      	ldrh	r3, [r7, #30]
 800b61a:	4413      	add	r3, r2
 800b61c:	b29b      	uxth	r3, r3
 800b61e:	3308      	adds	r3, #8
 800b620:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800b622:	69bb      	ldr	r3, [r7, #24]
 800b624:	881b      	ldrh	r3, [r3, #0]
 800b626:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800b62a:	d106      	bne.n	800b63a <mem_trim+0x192>
 800b62c:	4b1c      	ldr	r3, [pc, #112]	@ (800b6a0 <mem_trim+0x1f8>)
 800b62e:	f240 3216 	movw	r2, #790	@ 0x316
 800b632:	4920      	ldr	r1, [pc, #128]	@ (800b6b4 <mem_trim+0x20c>)
 800b634:	481c      	ldr	r0, [pc, #112]	@ (800b6a8 <mem_trim+0x200>)
 800b636:	f00a fe6b 	bl	8016310 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800b63a:	89fb      	ldrh	r3, [r7, #14]
 800b63c:	4618      	mov	r0, r3
 800b63e:	f7ff fd4f 	bl	800b0e0 <ptr_to_mem>
 800b642:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800b644:	4b1c      	ldr	r3, [pc, #112]	@ (800b6b8 <mem_trim+0x210>)
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	693a      	ldr	r2, [r7, #16]
 800b64a:	429a      	cmp	r2, r3
 800b64c:	d202      	bcs.n	800b654 <mem_trim+0x1ac>
      lfree = mem2;
 800b64e:	4a1a      	ldr	r2, [pc, #104]	@ (800b6b8 <mem_trim+0x210>)
 800b650:	693b      	ldr	r3, [r7, #16]
 800b652:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800b654:	693b      	ldr	r3, [r7, #16]
 800b656:	2200      	movs	r2, #0
 800b658:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800b65a:	69bb      	ldr	r3, [r7, #24]
 800b65c:	881a      	ldrh	r2, [r3, #0]
 800b65e:	693b      	ldr	r3, [r7, #16]
 800b660:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800b662:	693b      	ldr	r3, [r7, #16]
 800b664:	8afa      	ldrh	r2, [r7, #22]
 800b666:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800b668:	69bb      	ldr	r3, [r7, #24]
 800b66a:	89fa      	ldrh	r2, [r7, #14]
 800b66c:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800b66e:	693b      	ldr	r3, [r7, #16]
 800b670:	881b      	ldrh	r3, [r3, #0]
 800b672:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800b676:	d007      	beq.n	800b688 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800b678:	693b      	ldr	r3, [r7, #16]
 800b67a:	881b      	ldrh	r3, [r3, #0]
 800b67c:	4618      	mov	r0, r3
 800b67e:	f7ff fd2f 	bl	800b0e0 <ptr_to_mem>
 800b682:	4602      	mov	r2, r0
 800b684:	89fb      	ldrh	r3, [r7, #14]
 800b686:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800b688:	4809      	ldr	r0, [pc, #36]	@ (800b6b0 <mem_trim+0x208>)
 800b68a:	f00a fcf0 	bl	801606e <sys_mutex_unlock>
  return rmem;
 800b68e:	687b      	ldr	r3, [r7, #4]
}
 800b690:	4618      	mov	r0, r3
 800b692:	3720      	adds	r7, #32
 800b694:	46bd      	mov	sp, r7
 800b696:	bd80      	pop	{r7, pc}
 800b698:	2000ba24 	.word	0x2000ba24
 800b69c:	2000ba28 	.word	0x2000ba28
 800b6a0:	080183c4 	.word	0x080183c4
 800b6a4:	08018550 	.word	0x08018550
 800b6a8:	0801840c 	.word	0x0801840c
 800b6ac:	08018568 	.word	0x08018568
 800b6b0:	2000ba2c 	.word	0x2000ba2c
 800b6b4:	08018588 	.word	0x08018588
 800b6b8:	2000ba30 	.word	0x2000ba30

0800b6bc <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800b6bc:	b580      	push	{r7, lr}
 800b6be:	b088      	sub	sp, #32
 800b6c0:	af00      	add	r7, sp, #0
 800b6c2:	4603      	mov	r3, r0
 800b6c4:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800b6c6:	88fb      	ldrh	r3, [r7, #6]
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d101      	bne.n	800b6d0 <mem_malloc+0x14>
    return NULL;
 800b6cc:	2300      	movs	r3, #0
 800b6ce:	e0e2      	b.n	800b896 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800b6d0:	88fb      	ldrh	r3, [r7, #6]
 800b6d2:	3303      	adds	r3, #3
 800b6d4:	b29b      	uxth	r3, r3
 800b6d6:	f023 0303 	bic.w	r3, r3, #3
 800b6da:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800b6dc:	8bbb      	ldrh	r3, [r7, #28]
 800b6de:	2b0b      	cmp	r3, #11
 800b6e0:	d801      	bhi.n	800b6e6 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800b6e2:	230c      	movs	r3, #12
 800b6e4:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800b6e6:	8bbb      	ldrh	r3, [r7, #28]
 800b6e8:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800b6ec:	d803      	bhi.n	800b6f6 <mem_malloc+0x3a>
 800b6ee:	8bba      	ldrh	r2, [r7, #28]
 800b6f0:	88fb      	ldrh	r3, [r7, #6]
 800b6f2:	429a      	cmp	r2, r3
 800b6f4:	d201      	bcs.n	800b6fa <mem_malloc+0x3e>
    return NULL;
 800b6f6:	2300      	movs	r3, #0
 800b6f8:	e0cd      	b.n	800b896 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800b6fa:	4869      	ldr	r0, [pc, #420]	@ (800b8a0 <mem_malloc+0x1e4>)
 800b6fc:	f00a fca8 	bl	8016050 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800b700:	4b68      	ldr	r3, [pc, #416]	@ (800b8a4 <mem_malloc+0x1e8>)
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	4618      	mov	r0, r3
 800b706:	f7ff fcfd 	bl	800b104 <mem_to_ptr>
 800b70a:	4603      	mov	r3, r0
 800b70c:	83fb      	strh	r3, [r7, #30]
 800b70e:	e0b7      	b.n	800b880 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800b710:	8bfb      	ldrh	r3, [r7, #30]
 800b712:	4618      	mov	r0, r3
 800b714:	f7ff fce4 	bl	800b0e0 <ptr_to_mem>
 800b718:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800b71a:	697b      	ldr	r3, [r7, #20]
 800b71c:	791b      	ldrb	r3, [r3, #4]
 800b71e:	2b00      	cmp	r3, #0
 800b720:	f040 80a7 	bne.w	800b872 <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800b724:	697b      	ldr	r3, [r7, #20]
 800b726:	881b      	ldrh	r3, [r3, #0]
 800b728:	461a      	mov	r2, r3
 800b72a:	8bfb      	ldrh	r3, [r7, #30]
 800b72c:	1ad3      	subs	r3, r2, r3
 800b72e:	f1a3 0208 	sub.w	r2, r3, #8
 800b732:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800b734:	429a      	cmp	r2, r3
 800b736:	f0c0 809c 	bcc.w	800b872 <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800b73a:	697b      	ldr	r3, [r7, #20]
 800b73c:	881b      	ldrh	r3, [r3, #0]
 800b73e:	461a      	mov	r2, r3
 800b740:	8bfb      	ldrh	r3, [r7, #30]
 800b742:	1ad3      	subs	r3, r2, r3
 800b744:	f1a3 0208 	sub.w	r2, r3, #8
 800b748:	8bbb      	ldrh	r3, [r7, #28]
 800b74a:	3314      	adds	r3, #20
 800b74c:	429a      	cmp	r2, r3
 800b74e:	d333      	bcc.n	800b7b8 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800b750:	8bfa      	ldrh	r2, [r7, #30]
 800b752:	8bbb      	ldrh	r3, [r7, #28]
 800b754:	4413      	add	r3, r2
 800b756:	b29b      	uxth	r3, r3
 800b758:	3308      	adds	r3, #8
 800b75a:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800b75c:	8a7b      	ldrh	r3, [r7, #18]
 800b75e:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800b762:	d106      	bne.n	800b772 <mem_malloc+0xb6>
 800b764:	4b50      	ldr	r3, [pc, #320]	@ (800b8a8 <mem_malloc+0x1ec>)
 800b766:	f240 3287 	movw	r2, #903	@ 0x387
 800b76a:	4950      	ldr	r1, [pc, #320]	@ (800b8ac <mem_malloc+0x1f0>)
 800b76c:	4850      	ldr	r0, [pc, #320]	@ (800b8b0 <mem_malloc+0x1f4>)
 800b76e:	f00a fdcf 	bl	8016310 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800b772:	8a7b      	ldrh	r3, [r7, #18]
 800b774:	4618      	mov	r0, r3
 800b776:	f7ff fcb3 	bl	800b0e0 <ptr_to_mem>
 800b77a:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	2200      	movs	r2, #0
 800b780:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800b782:	697b      	ldr	r3, [r7, #20]
 800b784:	881a      	ldrh	r2, [r3, #0]
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	8bfa      	ldrh	r2, [r7, #30]
 800b78e:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800b790:	697b      	ldr	r3, [r7, #20]
 800b792:	8a7a      	ldrh	r2, [r7, #18]
 800b794:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800b796:	697b      	ldr	r3, [r7, #20]
 800b798:	2201      	movs	r2, #1
 800b79a:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	881b      	ldrh	r3, [r3, #0]
 800b7a0:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800b7a4:	d00b      	beq.n	800b7be <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	881b      	ldrh	r3, [r3, #0]
 800b7aa:	4618      	mov	r0, r3
 800b7ac:	f7ff fc98 	bl	800b0e0 <ptr_to_mem>
 800b7b0:	4602      	mov	r2, r0
 800b7b2:	8a7b      	ldrh	r3, [r7, #18]
 800b7b4:	8053      	strh	r3, [r2, #2]
 800b7b6:	e002      	b.n	800b7be <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800b7b8:	697b      	ldr	r3, [r7, #20]
 800b7ba:	2201      	movs	r2, #1
 800b7bc:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800b7be:	4b39      	ldr	r3, [pc, #228]	@ (800b8a4 <mem_malloc+0x1e8>)
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	697a      	ldr	r2, [r7, #20]
 800b7c4:	429a      	cmp	r2, r3
 800b7c6:	d127      	bne.n	800b818 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800b7c8:	4b36      	ldr	r3, [pc, #216]	@ (800b8a4 <mem_malloc+0x1e8>)
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800b7ce:	e005      	b.n	800b7dc <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800b7d0:	69bb      	ldr	r3, [r7, #24]
 800b7d2:	881b      	ldrh	r3, [r3, #0]
 800b7d4:	4618      	mov	r0, r3
 800b7d6:	f7ff fc83 	bl	800b0e0 <ptr_to_mem>
 800b7da:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800b7dc:	69bb      	ldr	r3, [r7, #24]
 800b7de:	791b      	ldrb	r3, [r3, #4]
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d004      	beq.n	800b7ee <mem_malloc+0x132>
 800b7e4:	4b33      	ldr	r3, [pc, #204]	@ (800b8b4 <mem_malloc+0x1f8>)
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	69ba      	ldr	r2, [r7, #24]
 800b7ea:	429a      	cmp	r2, r3
 800b7ec:	d1f0      	bne.n	800b7d0 <mem_malloc+0x114>
          }
          lfree = cur;
 800b7ee:	4a2d      	ldr	r2, [pc, #180]	@ (800b8a4 <mem_malloc+0x1e8>)
 800b7f0:	69bb      	ldr	r3, [r7, #24]
 800b7f2:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800b7f4:	4b2b      	ldr	r3, [pc, #172]	@ (800b8a4 <mem_malloc+0x1e8>)
 800b7f6:	681a      	ldr	r2, [r3, #0]
 800b7f8:	4b2e      	ldr	r3, [pc, #184]	@ (800b8b4 <mem_malloc+0x1f8>)
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	429a      	cmp	r2, r3
 800b7fe:	d00b      	beq.n	800b818 <mem_malloc+0x15c>
 800b800:	4b28      	ldr	r3, [pc, #160]	@ (800b8a4 <mem_malloc+0x1e8>)
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	791b      	ldrb	r3, [r3, #4]
 800b806:	2b00      	cmp	r3, #0
 800b808:	d006      	beq.n	800b818 <mem_malloc+0x15c>
 800b80a:	4b27      	ldr	r3, [pc, #156]	@ (800b8a8 <mem_malloc+0x1ec>)
 800b80c:	f240 32b5 	movw	r2, #949	@ 0x3b5
 800b810:	4929      	ldr	r1, [pc, #164]	@ (800b8b8 <mem_malloc+0x1fc>)
 800b812:	4827      	ldr	r0, [pc, #156]	@ (800b8b0 <mem_malloc+0x1f4>)
 800b814:	f00a fd7c 	bl	8016310 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800b818:	4821      	ldr	r0, [pc, #132]	@ (800b8a0 <mem_malloc+0x1e4>)
 800b81a:	f00a fc28 	bl	801606e <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800b81e:	8bba      	ldrh	r2, [r7, #28]
 800b820:	697b      	ldr	r3, [r7, #20]
 800b822:	4413      	add	r3, r2
 800b824:	3308      	adds	r3, #8
 800b826:	4a23      	ldr	r2, [pc, #140]	@ (800b8b4 <mem_malloc+0x1f8>)
 800b828:	6812      	ldr	r2, [r2, #0]
 800b82a:	4293      	cmp	r3, r2
 800b82c:	d906      	bls.n	800b83c <mem_malloc+0x180>
 800b82e:	4b1e      	ldr	r3, [pc, #120]	@ (800b8a8 <mem_malloc+0x1ec>)
 800b830:	f240 32b9 	movw	r2, #953	@ 0x3b9
 800b834:	4921      	ldr	r1, [pc, #132]	@ (800b8bc <mem_malloc+0x200>)
 800b836:	481e      	ldr	r0, [pc, #120]	@ (800b8b0 <mem_malloc+0x1f4>)
 800b838:	f00a fd6a 	bl	8016310 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800b83c:	697b      	ldr	r3, [r7, #20]
 800b83e:	f003 0303 	and.w	r3, r3, #3
 800b842:	2b00      	cmp	r3, #0
 800b844:	d006      	beq.n	800b854 <mem_malloc+0x198>
 800b846:	4b18      	ldr	r3, [pc, #96]	@ (800b8a8 <mem_malloc+0x1ec>)
 800b848:	f240 32bb 	movw	r2, #955	@ 0x3bb
 800b84c:	491c      	ldr	r1, [pc, #112]	@ (800b8c0 <mem_malloc+0x204>)
 800b84e:	4818      	ldr	r0, [pc, #96]	@ (800b8b0 <mem_malloc+0x1f4>)
 800b850:	f00a fd5e 	bl	8016310 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800b854:	697b      	ldr	r3, [r7, #20]
 800b856:	f003 0303 	and.w	r3, r3, #3
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d006      	beq.n	800b86c <mem_malloc+0x1b0>
 800b85e:	4b12      	ldr	r3, [pc, #72]	@ (800b8a8 <mem_malloc+0x1ec>)
 800b860:	f240 32bd 	movw	r2, #957	@ 0x3bd
 800b864:	4917      	ldr	r1, [pc, #92]	@ (800b8c4 <mem_malloc+0x208>)
 800b866:	4812      	ldr	r0, [pc, #72]	@ (800b8b0 <mem_malloc+0x1f4>)
 800b868:	f00a fd52 	bl	8016310 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800b86c:	697b      	ldr	r3, [r7, #20]
 800b86e:	3308      	adds	r3, #8
 800b870:	e011      	b.n	800b896 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800b872:	8bfb      	ldrh	r3, [r7, #30]
 800b874:	4618      	mov	r0, r3
 800b876:	f7ff fc33 	bl	800b0e0 <ptr_to_mem>
 800b87a:	4603      	mov	r3, r0
 800b87c:	881b      	ldrh	r3, [r3, #0]
 800b87e:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800b880:	8bfa      	ldrh	r2, [r7, #30]
 800b882:	8bbb      	ldrh	r3, [r7, #28]
 800b884:	f5c3 5320 	rsb	r3, r3, #10240	@ 0x2800
 800b888:	429a      	cmp	r2, r3
 800b88a:	f4ff af41 	bcc.w	800b710 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800b88e:	4804      	ldr	r0, [pc, #16]	@ (800b8a0 <mem_malloc+0x1e4>)
 800b890:	f00a fbed 	bl	801606e <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800b894:	2300      	movs	r3, #0
}
 800b896:	4618      	mov	r0, r3
 800b898:	3720      	adds	r7, #32
 800b89a:	46bd      	mov	sp, r7
 800b89c:	bd80      	pop	{r7, pc}
 800b89e:	bf00      	nop
 800b8a0:	2000ba2c 	.word	0x2000ba2c
 800b8a4:	2000ba30 	.word	0x2000ba30
 800b8a8:	080183c4 	.word	0x080183c4
 800b8ac:	08018588 	.word	0x08018588
 800b8b0:	0801840c 	.word	0x0801840c
 800b8b4:	2000ba28 	.word	0x2000ba28
 800b8b8:	0801859c 	.word	0x0801859c
 800b8bc:	080185b8 	.word	0x080185b8
 800b8c0:	080185e8 	.word	0x080185e8
 800b8c4:	08018618 	.word	0x08018618

0800b8c8 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800b8c8:	b480      	push	{r7}
 800b8ca:	b085      	sub	sp, #20
 800b8cc:	af00      	add	r7, sp, #0
 800b8ce:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	689b      	ldr	r3, [r3, #8]
 800b8d4:	2200      	movs	r2, #0
 800b8d6:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	685b      	ldr	r3, [r3, #4]
 800b8dc:	3303      	adds	r3, #3
 800b8de:	f023 0303 	bic.w	r3, r3, #3
 800b8e2:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800b8e4:	2300      	movs	r3, #0
 800b8e6:	60fb      	str	r3, [r7, #12]
 800b8e8:	e011      	b.n	800b90e <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	689b      	ldr	r3, [r3, #8]
 800b8ee:	681a      	ldr	r2, [r3, #0]
 800b8f0:	68bb      	ldr	r3, [r7, #8]
 800b8f2:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	689b      	ldr	r3, [r3, #8]
 800b8f8:	68ba      	ldr	r2, [r7, #8]
 800b8fa:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	881b      	ldrh	r3, [r3, #0]
 800b900:	461a      	mov	r2, r3
 800b902:	68bb      	ldr	r3, [r7, #8]
 800b904:	4413      	add	r3, r2
 800b906:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	3301      	adds	r3, #1
 800b90c:	60fb      	str	r3, [r7, #12]
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	885b      	ldrh	r3, [r3, #2]
 800b912:	461a      	mov	r2, r3
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	4293      	cmp	r3, r2
 800b918:	dbe7      	blt.n	800b8ea <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800b91a:	bf00      	nop
 800b91c:	bf00      	nop
 800b91e:	3714      	adds	r7, #20
 800b920:	46bd      	mov	sp, r7
 800b922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b926:	4770      	bx	lr

0800b928 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800b928:	b580      	push	{r7, lr}
 800b92a:	b082      	sub	sp, #8
 800b92c:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800b92e:	2300      	movs	r3, #0
 800b930:	80fb      	strh	r3, [r7, #6]
 800b932:	e009      	b.n	800b948 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800b934:	88fb      	ldrh	r3, [r7, #6]
 800b936:	4a08      	ldr	r2, [pc, #32]	@ (800b958 <memp_init+0x30>)
 800b938:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b93c:	4618      	mov	r0, r3
 800b93e:	f7ff ffc3 	bl	800b8c8 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800b942:	88fb      	ldrh	r3, [r7, #6]
 800b944:	3301      	adds	r3, #1
 800b946:	80fb      	strh	r3, [r7, #6]
 800b948:	88fb      	ldrh	r3, [r7, #6]
 800b94a:	2b0c      	cmp	r3, #12
 800b94c:	d9f2      	bls.n	800b934 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800b94e:	bf00      	nop
 800b950:	bf00      	nop
 800b952:	3708      	adds	r7, #8
 800b954:	46bd      	mov	sp, r7
 800b956:	bd80      	pop	{r7, pc}
 800b958:	0801ae30 	.word	0x0801ae30

0800b95c <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800b95c:	b580      	push	{r7, lr}
 800b95e:	b084      	sub	sp, #16
 800b960:	af00      	add	r7, sp, #0
 800b962:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800b964:	f00a fbb6 	bl	80160d4 <sys_arch_protect>
 800b968:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	689b      	ldr	r3, [r3, #8]
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800b972:	68bb      	ldr	r3, [r7, #8]
 800b974:	2b00      	cmp	r3, #0
 800b976:	d015      	beq.n	800b9a4 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	689b      	ldr	r3, [r3, #8]
 800b97c:	68ba      	ldr	r2, [r7, #8]
 800b97e:	6812      	ldr	r2, [r2, #0]
 800b980:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800b982:	68bb      	ldr	r3, [r7, #8]
 800b984:	f003 0303 	and.w	r3, r3, #3
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d006      	beq.n	800b99a <do_memp_malloc_pool+0x3e>
 800b98c:	4b09      	ldr	r3, [pc, #36]	@ (800b9b4 <do_memp_malloc_pool+0x58>)
 800b98e:	f44f 728c 	mov.w	r2, #280	@ 0x118
 800b992:	4909      	ldr	r1, [pc, #36]	@ (800b9b8 <do_memp_malloc_pool+0x5c>)
 800b994:	4809      	ldr	r0, [pc, #36]	@ (800b9bc <do_memp_malloc_pool+0x60>)
 800b996:	f00a fcbb 	bl	8016310 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800b99a:	68f8      	ldr	r0, [r7, #12]
 800b99c:	f00a fba8 	bl	80160f0 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800b9a0:	68bb      	ldr	r3, [r7, #8]
 800b9a2:	e003      	b.n	800b9ac <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800b9a4:	68f8      	ldr	r0, [r7, #12]
 800b9a6:	f00a fba3 	bl	80160f0 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800b9aa:	2300      	movs	r3, #0
}
 800b9ac:	4618      	mov	r0, r3
 800b9ae:	3710      	adds	r7, #16
 800b9b0:	46bd      	mov	sp, r7
 800b9b2:	bd80      	pop	{r7, pc}
 800b9b4:	0801863c 	.word	0x0801863c
 800b9b8:	0801866c 	.word	0x0801866c
 800b9bc:	08018690 	.word	0x08018690

0800b9c0 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800b9c0:	b580      	push	{r7, lr}
 800b9c2:	b082      	sub	sp, #8
 800b9c4:	af00      	add	r7, sp, #0
 800b9c6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d106      	bne.n	800b9dc <memp_malloc_pool+0x1c>
 800b9ce:	4b0a      	ldr	r3, [pc, #40]	@ (800b9f8 <memp_malloc_pool+0x38>)
 800b9d0:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 800b9d4:	4909      	ldr	r1, [pc, #36]	@ (800b9fc <memp_malloc_pool+0x3c>)
 800b9d6:	480a      	ldr	r0, [pc, #40]	@ (800ba00 <memp_malloc_pool+0x40>)
 800b9d8:	f00a fc9a 	bl	8016310 <iprintf>
  if (desc == NULL) {
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d101      	bne.n	800b9e6 <memp_malloc_pool+0x26>
    return NULL;
 800b9e2:	2300      	movs	r3, #0
 800b9e4:	e003      	b.n	800b9ee <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800b9e6:	6878      	ldr	r0, [r7, #4]
 800b9e8:	f7ff ffb8 	bl	800b95c <do_memp_malloc_pool>
 800b9ec:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800b9ee:	4618      	mov	r0, r3
 800b9f0:	3708      	adds	r7, #8
 800b9f2:	46bd      	mov	sp, r7
 800b9f4:	bd80      	pop	{r7, pc}
 800b9f6:	bf00      	nop
 800b9f8:	0801863c 	.word	0x0801863c
 800b9fc:	080186b8 	.word	0x080186b8
 800ba00:	08018690 	.word	0x08018690

0800ba04 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800ba04:	b580      	push	{r7, lr}
 800ba06:	b084      	sub	sp, #16
 800ba08:	af00      	add	r7, sp, #0
 800ba0a:	4603      	mov	r3, r0
 800ba0c:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800ba0e:	79fb      	ldrb	r3, [r7, #7]
 800ba10:	2b0c      	cmp	r3, #12
 800ba12:	d908      	bls.n	800ba26 <memp_malloc+0x22>
 800ba14:	4b0a      	ldr	r3, [pc, #40]	@ (800ba40 <memp_malloc+0x3c>)
 800ba16:	f240 1257 	movw	r2, #343	@ 0x157
 800ba1a:	490a      	ldr	r1, [pc, #40]	@ (800ba44 <memp_malloc+0x40>)
 800ba1c:	480a      	ldr	r0, [pc, #40]	@ (800ba48 <memp_malloc+0x44>)
 800ba1e:	f00a fc77 	bl	8016310 <iprintf>
 800ba22:	2300      	movs	r3, #0
 800ba24:	e008      	b.n	800ba38 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800ba26:	79fb      	ldrb	r3, [r7, #7]
 800ba28:	4a08      	ldr	r2, [pc, #32]	@ (800ba4c <memp_malloc+0x48>)
 800ba2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ba2e:	4618      	mov	r0, r3
 800ba30:	f7ff ff94 	bl	800b95c <do_memp_malloc_pool>
 800ba34:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800ba36:	68fb      	ldr	r3, [r7, #12]
}
 800ba38:	4618      	mov	r0, r3
 800ba3a:	3710      	adds	r7, #16
 800ba3c:	46bd      	mov	sp, r7
 800ba3e:	bd80      	pop	{r7, pc}
 800ba40:	0801863c 	.word	0x0801863c
 800ba44:	080186cc 	.word	0x080186cc
 800ba48:	08018690 	.word	0x08018690
 800ba4c:	0801ae30 	.word	0x0801ae30

0800ba50 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800ba50:	b580      	push	{r7, lr}
 800ba52:	b084      	sub	sp, #16
 800ba54:	af00      	add	r7, sp, #0
 800ba56:	6078      	str	r0, [r7, #4]
 800ba58:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800ba5a:	683b      	ldr	r3, [r7, #0]
 800ba5c:	f003 0303 	and.w	r3, r3, #3
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d006      	beq.n	800ba72 <do_memp_free_pool+0x22>
 800ba64:	4b0d      	ldr	r3, [pc, #52]	@ (800ba9c <do_memp_free_pool+0x4c>)
 800ba66:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 800ba6a:	490d      	ldr	r1, [pc, #52]	@ (800baa0 <do_memp_free_pool+0x50>)
 800ba6c:	480d      	ldr	r0, [pc, #52]	@ (800baa4 <do_memp_free_pool+0x54>)
 800ba6e:	f00a fc4f 	bl	8016310 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800ba72:	683b      	ldr	r3, [r7, #0]
 800ba74:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800ba76:	f00a fb2d 	bl	80160d4 <sys_arch_protect>
 800ba7a:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	689b      	ldr	r3, [r3, #8]
 800ba80:	681a      	ldr	r2, [r3, #0]
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	689b      	ldr	r3, [r3, #8]
 800ba8a:	68fa      	ldr	r2, [r7, #12]
 800ba8c:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800ba8e:	68b8      	ldr	r0, [r7, #8]
 800ba90:	f00a fb2e 	bl	80160f0 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800ba94:	bf00      	nop
 800ba96:	3710      	adds	r7, #16
 800ba98:	46bd      	mov	sp, r7
 800ba9a:	bd80      	pop	{r7, pc}
 800ba9c:	0801863c 	.word	0x0801863c
 800baa0:	080186ec 	.word	0x080186ec
 800baa4:	08018690 	.word	0x08018690

0800baa8 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800baa8:	b580      	push	{r7, lr}
 800baaa:	b082      	sub	sp, #8
 800baac:	af00      	add	r7, sp, #0
 800baae:	6078      	str	r0, [r7, #4]
 800bab0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d106      	bne.n	800bac6 <memp_free_pool+0x1e>
 800bab8:	4b0a      	ldr	r3, [pc, #40]	@ (800bae4 <memp_free_pool+0x3c>)
 800baba:	f240 1295 	movw	r2, #405	@ 0x195
 800babe:	490a      	ldr	r1, [pc, #40]	@ (800bae8 <memp_free_pool+0x40>)
 800bac0:	480a      	ldr	r0, [pc, #40]	@ (800baec <memp_free_pool+0x44>)
 800bac2:	f00a fc25 	bl	8016310 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d007      	beq.n	800badc <memp_free_pool+0x34>
 800bacc:	683b      	ldr	r3, [r7, #0]
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d004      	beq.n	800badc <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800bad2:	6839      	ldr	r1, [r7, #0]
 800bad4:	6878      	ldr	r0, [r7, #4]
 800bad6:	f7ff ffbb 	bl	800ba50 <do_memp_free_pool>
 800bada:	e000      	b.n	800bade <memp_free_pool+0x36>
    return;
 800badc:	bf00      	nop
}
 800bade:	3708      	adds	r7, #8
 800bae0:	46bd      	mov	sp, r7
 800bae2:	bd80      	pop	{r7, pc}
 800bae4:	0801863c 	.word	0x0801863c
 800bae8:	080186b8 	.word	0x080186b8
 800baec:	08018690 	.word	0x08018690

0800baf0 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800baf0:	b580      	push	{r7, lr}
 800baf2:	b082      	sub	sp, #8
 800baf4:	af00      	add	r7, sp, #0
 800baf6:	4603      	mov	r3, r0
 800baf8:	6039      	str	r1, [r7, #0]
 800bafa:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800bafc:	79fb      	ldrb	r3, [r7, #7]
 800bafe:	2b0c      	cmp	r3, #12
 800bb00:	d907      	bls.n	800bb12 <memp_free+0x22>
 800bb02:	4b0c      	ldr	r3, [pc, #48]	@ (800bb34 <memp_free+0x44>)
 800bb04:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 800bb08:	490b      	ldr	r1, [pc, #44]	@ (800bb38 <memp_free+0x48>)
 800bb0a:	480c      	ldr	r0, [pc, #48]	@ (800bb3c <memp_free+0x4c>)
 800bb0c:	f00a fc00 	bl	8016310 <iprintf>
 800bb10:	e00c      	b.n	800bb2c <memp_free+0x3c>

  if (mem == NULL) {
 800bb12:	683b      	ldr	r3, [r7, #0]
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d008      	beq.n	800bb2a <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800bb18:	79fb      	ldrb	r3, [r7, #7]
 800bb1a:	4a09      	ldr	r2, [pc, #36]	@ (800bb40 <memp_free+0x50>)
 800bb1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bb20:	6839      	ldr	r1, [r7, #0]
 800bb22:	4618      	mov	r0, r3
 800bb24:	f7ff ff94 	bl	800ba50 <do_memp_free_pool>
 800bb28:	e000      	b.n	800bb2c <memp_free+0x3c>
    return;
 800bb2a:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800bb2c:	3708      	adds	r7, #8
 800bb2e:	46bd      	mov	sp, r7
 800bb30:	bd80      	pop	{r7, pc}
 800bb32:	bf00      	nop
 800bb34:	0801863c 	.word	0x0801863c
 800bb38:	0801870c 	.word	0x0801870c
 800bb3c:	08018690 	.word	0x08018690
 800bb40:	0801ae30 	.word	0x0801ae30

0800bb44 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800bb44:	b480      	push	{r7}
 800bb46:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800bb48:	bf00      	nop
 800bb4a:	46bd      	mov	sp, r7
 800bb4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb50:	4770      	bx	lr
	...

0800bb54 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800bb54:	b580      	push	{r7, lr}
 800bb56:	b086      	sub	sp, #24
 800bb58:	af00      	add	r7, sp, #0
 800bb5a:	60f8      	str	r0, [r7, #12]
 800bb5c:	60b9      	str	r1, [r7, #8]
 800bb5e:	607a      	str	r2, [r7, #4]
 800bb60:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d108      	bne.n	800bb7a <netif_add+0x26>
 800bb68:	4b57      	ldr	r3, [pc, #348]	@ (800bcc8 <netif_add+0x174>)
 800bb6a:	f240 1227 	movw	r2, #295	@ 0x127
 800bb6e:	4957      	ldr	r1, [pc, #348]	@ (800bccc <netif_add+0x178>)
 800bb70:	4857      	ldr	r0, [pc, #348]	@ (800bcd0 <netif_add+0x17c>)
 800bb72:	f00a fbcd 	bl	8016310 <iprintf>
 800bb76:	2300      	movs	r3, #0
 800bb78:	e0a2      	b.n	800bcc0 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800bb7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d108      	bne.n	800bb92 <netif_add+0x3e>
 800bb80:	4b51      	ldr	r3, [pc, #324]	@ (800bcc8 <netif_add+0x174>)
 800bb82:	f44f 7294 	mov.w	r2, #296	@ 0x128
 800bb86:	4953      	ldr	r1, [pc, #332]	@ (800bcd4 <netif_add+0x180>)
 800bb88:	4851      	ldr	r0, [pc, #324]	@ (800bcd0 <netif_add+0x17c>)
 800bb8a:	f00a fbc1 	bl	8016310 <iprintf>
 800bb8e:	2300      	movs	r3, #0
 800bb90:	e096      	b.n	800bcc0 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800bb92:	68bb      	ldr	r3, [r7, #8]
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d101      	bne.n	800bb9c <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800bb98:	4b4f      	ldr	r3, [pc, #316]	@ (800bcd8 <netif_add+0x184>)
 800bb9a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d101      	bne.n	800bba6 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800bba2:	4b4d      	ldr	r3, [pc, #308]	@ (800bcd8 <netif_add+0x184>)
 800bba4:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800bba6:	683b      	ldr	r3, [r7, #0]
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d101      	bne.n	800bbb0 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800bbac:	4b4a      	ldr	r3, [pc, #296]	@ (800bcd8 <netif_add+0x184>)
 800bbae:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	2200      	movs	r2, #0
 800bbb4:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	2200      	movs	r2, #0
 800bbba:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	2200      	movs	r2, #0
 800bbc0:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800bbc2:	68fb      	ldr	r3, [r7, #12]
 800bbc4:	4a45      	ldr	r2, [pc, #276]	@ (800bcdc <netif_add+0x188>)
 800bbc6:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	2200      	movs	r2, #0
 800bbcc:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	2200      	movs	r2, #0
 800bbd2:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	2200      	movs	r2, #0
 800bbda:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	6a3a      	ldr	r2, [r7, #32]
 800bbe0:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800bbe2:	4b3f      	ldr	r3, [pc, #252]	@ (800bce0 <netif_add+0x18c>)
 800bbe4:	781a      	ldrb	r2, [r3, #0]
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bbf0:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800bbf2:	683b      	ldr	r3, [r7, #0]
 800bbf4:	687a      	ldr	r2, [r7, #4]
 800bbf6:	68b9      	ldr	r1, [r7, #8]
 800bbf8:	68f8      	ldr	r0, [r7, #12]
 800bbfa:	f000 f913 	bl	800be24 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800bbfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc00:	68f8      	ldr	r0, [r7, #12]
 800bc02:	4798      	blx	r3
 800bc04:	4603      	mov	r3, r0
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d001      	beq.n	800bc0e <netif_add+0xba>
    return NULL;
 800bc0a:	2300      	movs	r3, #0
 800bc0c:	e058      	b.n	800bcc0 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800bc14:	2bff      	cmp	r3, #255	@ 0xff
 800bc16:	d103      	bne.n	800bc20 <netif_add+0xcc>
        netif->num = 0;
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	2200      	movs	r2, #0
 800bc1c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 800bc20:	2300      	movs	r3, #0
 800bc22:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800bc24:	4b2f      	ldr	r3, [pc, #188]	@ (800bce4 <netif_add+0x190>)
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	617b      	str	r3, [r7, #20]
 800bc2a:	e02b      	b.n	800bc84 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800bc2c:	697a      	ldr	r2, [r7, #20]
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	429a      	cmp	r2, r3
 800bc32:	d106      	bne.n	800bc42 <netif_add+0xee>
 800bc34:	4b24      	ldr	r3, [pc, #144]	@ (800bcc8 <netif_add+0x174>)
 800bc36:	f240 128b 	movw	r2, #395	@ 0x18b
 800bc3a:	492b      	ldr	r1, [pc, #172]	@ (800bce8 <netif_add+0x194>)
 800bc3c:	4824      	ldr	r0, [pc, #144]	@ (800bcd0 <netif_add+0x17c>)
 800bc3e:	f00a fb67 	bl	8016310 <iprintf>
        num_netifs++;
 800bc42:	693b      	ldr	r3, [r7, #16]
 800bc44:	3301      	adds	r3, #1
 800bc46:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800bc48:	693b      	ldr	r3, [r7, #16]
 800bc4a:	2bff      	cmp	r3, #255	@ 0xff
 800bc4c:	dd06      	ble.n	800bc5c <netif_add+0x108>
 800bc4e:	4b1e      	ldr	r3, [pc, #120]	@ (800bcc8 <netif_add+0x174>)
 800bc50:	f240 128d 	movw	r2, #397	@ 0x18d
 800bc54:	4925      	ldr	r1, [pc, #148]	@ (800bcec <netif_add+0x198>)
 800bc56:	481e      	ldr	r0, [pc, #120]	@ (800bcd0 <netif_add+0x17c>)
 800bc58:	f00a fb5a 	bl	8016310 <iprintf>
        if (netif2->num == netif->num) {
 800bc5c:	697b      	ldr	r3, [r7, #20]
 800bc5e:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800bc68:	429a      	cmp	r2, r3
 800bc6a:	d108      	bne.n	800bc7e <netif_add+0x12a>
          netif->num++;
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800bc72:	3301      	adds	r3, #1
 800bc74:	b2da      	uxtb	r2, r3
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 800bc7c:	e005      	b.n	800bc8a <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800bc7e:	697b      	ldr	r3, [r7, #20]
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	617b      	str	r3, [r7, #20]
 800bc84:	697b      	ldr	r3, [r7, #20]
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d1d0      	bne.n	800bc2c <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800bc8a:	697b      	ldr	r3, [r7, #20]
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d1be      	bne.n	800bc0e <netif_add+0xba>
  }
  if (netif->num == 254) {
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800bc96:	2bfe      	cmp	r3, #254	@ 0xfe
 800bc98:	d103      	bne.n	800bca2 <netif_add+0x14e>
    netif_num = 0;
 800bc9a:	4b11      	ldr	r3, [pc, #68]	@ (800bce0 <netif_add+0x18c>)
 800bc9c:	2200      	movs	r2, #0
 800bc9e:	701a      	strb	r2, [r3, #0]
 800bca0:	e006      	b.n	800bcb0 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800bca8:	3301      	adds	r3, #1
 800bcaa:	b2da      	uxtb	r2, r3
 800bcac:	4b0c      	ldr	r3, [pc, #48]	@ (800bce0 <netif_add+0x18c>)
 800bcae:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800bcb0:	4b0c      	ldr	r3, [pc, #48]	@ (800bce4 <netif_add+0x190>)
 800bcb2:	681a      	ldr	r2, [r3, #0]
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800bcb8:	4a0a      	ldr	r2, [pc, #40]	@ (800bce4 <netif_add+0x190>)
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800bcbe:	68fb      	ldr	r3, [r7, #12]
}
 800bcc0:	4618      	mov	r0, r3
 800bcc2:	3718      	adds	r7, #24
 800bcc4:	46bd      	mov	sp, r7
 800bcc6:	bd80      	pop	{r7, pc}
 800bcc8:	08018728 	.word	0x08018728
 800bccc:	080187bc 	.word	0x080187bc
 800bcd0:	08018778 	.word	0x08018778
 800bcd4:	080187d8 	.word	0x080187d8
 800bcd8:	0801aea4 	.word	0x0801aea4
 800bcdc:	0800c0ff 	.word	0x0800c0ff
 800bce0:	2000eb40 	.word	0x2000eb40
 800bce4:	2000eb38 	.word	0x2000eb38
 800bce8:	080187fc 	.word	0x080187fc
 800bcec:	08018810 	.word	0x08018810

0800bcf0 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800bcf0:	b580      	push	{r7, lr}
 800bcf2:	b082      	sub	sp, #8
 800bcf4:	af00      	add	r7, sp, #0
 800bcf6:	6078      	str	r0, [r7, #4]
 800bcf8:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800bcfa:	6839      	ldr	r1, [r7, #0]
 800bcfc:	6878      	ldr	r0, [r7, #4]
 800bcfe:	f002 fe7f 	bl	800ea00 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800bd02:	6839      	ldr	r1, [r7, #0]
 800bd04:	6878      	ldr	r0, [r7, #4]
 800bd06:	f007 fd2b 	bl	8013760 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800bd0a:	bf00      	nop
 800bd0c:	3708      	adds	r7, #8
 800bd0e:	46bd      	mov	sp, r7
 800bd10:	bd80      	pop	{r7, pc}
	...

0800bd14 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800bd14:	b580      	push	{r7, lr}
 800bd16:	b086      	sub	sp, #24
 800bd18:	af00      	add	r7, sp, #0
 800bd1a:	60f8      	str	r0, [r7, #12]
 800bd1c:	60b9      	str	r1, [r7, #8]
 800bd1e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800bd20:	68bb      	ldr	r3, [r7, #8]
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d106      	bne.n	800bd34 <netif_do_set_ipaddr+0x20>
 800bd26:	4b1d      	ldr	r3, [pc, #116]	@ (800bd9c <netif_do_set_ipaddr+0x88>)
 800bd28:	f240 12cb 	movw	r2, #459	@ 0x1cb
 800bd2c:	491c      	ldr	r1, [pc, #112]	@ (800bda0 <netif_do_set_ipaddr+0x8c>)
 800bd2e:	481d      	ldr	r0, [pc, #116]	@ (800bda4 <netif_do_set_ipaddr+0x90>)
 800bd30:	f00a faee 	bl	8016310 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d106      	bne.n	800bd48 <netif_do_set_ipaddr+0x34>
 800bd3a:	4b18      	ldr	r3, [pc, #96]	@ (800bd9c <netif_do_set_ipaddr+0x88>)
 800bd3c:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 800bd40:	4917      	ldr	r1, [pc, #92]	@ (800bda0 <netif_do_set_ipaddr+0x8c>)
 800bd42:	4818      	ldr	r0, [pc, #96]	@ (800bda4 <netif_do_set_ipaddr+0x90>)
 800bd44:	f00a fae4 	bl	8016310 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800bd48:	68bb      	ldr	r3, [r7, #8]
 800bd4a:	681a      	ldr	r2, [r3, #0]
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	3304      	adds	r3, #4
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	429a      	cmp	r2, r3
 800bd54:	d01c      	beq.n	800bd90 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800bd56:	68bb      	ldr	r3, [r7, #8]
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800bd5c:	68fb      	ldr	r3, [r7, #12]
 800bd5e:	3304      	adds	r3, #4
 800bd60:	681a      	ldr	r2, [r3, #0]
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800bd66:	f107 0314 	add.w	r3, r7, #20
 800bd6a:	4619      	mov	r1, r3
 800bd6c:	6878      	ldr	r0, [r7, #4]
 800bd6e:	f7ff ffbf 	bl	800bcf0 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800bd72:	68bb      	ldr	r3, [r7, #8]
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d002      	beq.n	800bd7e <netif_do_set_ipaddr+0x6a>
 800bd78:	68bb      	ldr	r3, [r7, #8]
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	e000      	b.n	800bd80 <netif_do_set_ipaddr+0x6c>
 800bd7e:	2300      	movs	r3, #0
 800bd80:	68fa      	ldr	r2, [r7, #12]
 800bd82:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800bd84:	2101      	movs	r1, #1
 800bd86:	68f8      	ldr	r0, [r7, #12]
 800bd88:	f000 f8d2 	bl	800bf30 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800bd8c:	2301      	movs	r3, #1
 800bd8e:	e000      	b.n	800bd92 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800bd90:	2300      	movs	r3, #0
}
 800bd92:	4618      	mov	r0, r3
 800bd94:	3718      	adds	r7, #24
 800bd96:	46bd      	mov	sp, r7
 800bd98:	bd80      	pop	{r7, pc}
 800bd9a:	bf00      	nop
 800bd9c:	08018728 	.word	0x08018728
 800bda0:	08018840 	.word	0x08018840
 800bda4:	08018778 	.word	0x08018778

0800bda8 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800bda8:	b480      	push	{r7}
 800bdaa:	b085      	sub	sp, #20
 800bdac:	af00      	add	r7, sp, #0
 800bdae:	60f8      	str	r0, [r7, #12]
 800bdb0:	60b9      	str	r1, [r7, #8]
 800bdb2:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800bdb4:	68bb      	ldr	r3, [r7, #8]
 800bdb6:	681a      	ldr	r2, [r3, #0]
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	3308      	adds	r3, #8
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	429a      	cmp	r2, r3
 800bdc0:	d00a      	beq.n	800bdd8 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800bdc2:	68bb      	ldr	r3, [r7, #8]
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d002      	beq.n	800bdce <netif_do_set_netmask+0x26>
 800bdc8:	68bb      	ldr	r3, [r7, #8]
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	e000      	b.n	800bdd0 <netif_do_set_netmask+0x28>
 800bdce:	2300      	movs	r3, #0
 800bdd0:	68fa      	ldr	r2, [r7, #12]
 800bdd2:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800bdd4:	2301      	movs	r3, #1
 800bdd6:	e000      	b.n	800bdda <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800bdd8:	2300      	movs	r3, #0
}
 800bdda:	4618      	mov	r0, r3
 800bddc:	3714      	adds	r7, #20
 800bdde:	46bd      	mov	sp, r7
 800bde0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bde4:	4770      	bx	lr

0800bde6 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800bde6:	b480      	push	{r7}
 800bde8:	b085      	sub	sp, #20
 800bdea:	af00      	add	r7, sp, #0
 800bdec:	60f8      	str	r0, [r7, #12]
 800bdee:	60b9      	str	r1, [r7, #8]
 800bdf0:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800bdf2:	68bb      	ldr	r3, [r7, #8]
 800bdf4:	681a      	ldr	r2, [r3, #0]
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	330c      	adds	r3, #12
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	429a      	cmp	r2, r3
 800bdfe:	d00a      	beq.n	800be16 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800be00:	68bb      	ldr	r3, [r7, #8]
 800be02:	2b00      	cmp	r3, #0
 800be04:	d002      	beq.n	800be0c <netif_do_set_gw+0x26>
 800be06:	68bb      	ldr	r3, [r7, #8]
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	e000      	b.n	800be0e <netif_do_set_gw+0x28>
 800be0c:	2300      	movs	r3, #0
 800be0e:	68fa      	ldr	r2, [r7, #12]
 800be10:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800be12:	2301      	movs	r3, #1
 800be14:	e000      	b.n	800be18 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800be16:	2300      	movs	r3, #0
}
 800be18:	4618      	mov	r0, r3
 800be1a:	3714      	adds	r7, #20
 800be1c:	46bd      	mov	sp, r7
 800be1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be22:	4770      	bx	lr

0800be24 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800be24:	b580      	push	{r7, lr}
 800be26:	b088      	sub	sp, #32
 800be28:	af00      	add	r7, sp, #0
 800be2a:	60f8      	str	r0, [r7, #12]
 800be2c:	60b9      	str	r1, [r7, #8]
 800be2e:	607a      	str	r2, [r7, #4]
 800be30:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800be32:	2300      	movs	r3, #0
 800be34:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800be36:	2300      	movs	r3, #0
 800be38:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800be3a:	68bb      	ldr	r3, [r7, #8]
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d101      	bne.n	800be44 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800be40:	4b1c      	ldr	r3, [pc, #112]	@ (800beb4 <netif_set_addr+0x90>)
 800be42:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	2b00      	cmp	r3, #0
 800be48:	d101      	bne.n	800be4e <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800be4a:	4b1a      	ldr	r3, [pc, #104]	@ (800beb4 <netif_set_addr+0x90>)
 800be4c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800be4e:	683b      	ldr	r3, [r7, #0]
 800be50:	2b00      	cmp	r3, #0
 800be52:	d101      	bne.n	800be58 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800be54:	4b17      	ldr	r3, [pc, #92]	@ (800beb4 <netif_set_addr+0x90>)
 800be56:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800be58:	68bb      	ldr	r3, [r7, #8]
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d003      	beq.n	800be66 <netif_set_addr+0x42>
 800be5e:	68bb      	ldr	r3, [r7, #8]
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	2b00      	cmp	r3, #0
 800be64:	d101      	bne.n	800be6a <netif_set_addr+0x46>
 800be66:	2301      	movs	r3, #1
 800be68:	e000      	b.n	800be6c <netif_set_addr+0x48>
 800be6a:	2300      	movs	r3, #0
 800be6c:	617b      	str	r3, [r7, #20]
  if (remove) {
 800be6e:	697b      	ldr	r3, [r7, #20]
 800be70:	2b00      	cmp	r3, #0
 800be72:	d006      	beq.n	800be82 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800be74:	f107 0310 	add.w	r3, r7, #16
 800be78:	461a      	mov	r2, r3
 800be7a:	68b9      	ldr	r1, [r7, #8]
 800be7c:	68f8      	ldr	r0, [r7, #12]
 800be7e:	f7ff ff49 	bl	800bd14 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800be82:	69fa      	ldr	r2, [r7, #28]
 800be84:	6879      	ldr	r1, [r7, #4]
 800be86:	68f8      	ldr	r0, [r7, #12]
 800be88:	f7ff ff8e 	bl	800bda8 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800be8c:	69ba      	ldr	r2, [r7, #24]
 800be8e:	6839      	ldr	r1, [r7, #0]
 800be90:	68f8      	ldr	r0, [r7, #12]
 800be92:	f7ff ffa8 	bl	800bde6 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800be96:	697b      	ldr	r3, [r7, #20]
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d106      	bne.n	800beaa <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800be9c:	f107 0310 	add.w	r3, r7, #16
 800bea0:	461a      	mov	r2, r3
 800bea2:	68b9      	ldr	r1, [r7, #8]
 800bea4:	68f8      	ldr	r0, [r7, #12]
 800bea6:	f7ff ff35 	bl	800bd14 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800beaa:	bf00      	nop
 800beac:	3720      	adds	r7, #32
 800beae:	46bd      	mov	sp, r7
 800beb0:	bd80      	pop	{r7, pc}
 800beb2:	bf00      	nop
 800beb4:	0801aea4 	.word	0x0801aea4

0800beb8 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800beb8:	b480      	push	{r7}
 800beba:	b083      	sub	sp, #12
 800bebc:	af00      	add	r7, sp, #0
 800bebe:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800bec0:	4a04      	ldr	r2, [pc, #16]	@ (800bed4 <netif_set_default+0x1c>)
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800bec6:	bf00      	nop
 800bec8:	370c      	adds	r7, #12
 800beca:	46bd      	mov	sp, r7
 800becc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bed0:	4770      	bx	lr
 800bed2:	bf00      	nop
 800bed4:	2000eb3c 	.word	0x2000eb3c

0800bed8 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800bed8:	b580      	push	{r7, lr}
 800beda:	b082      	sub	sp, #8
 800bedc:	af00      	add	r7, sp, #0
 800bede:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d107      	bne.n	800bef6 <netif_set_up+0x1e>
 800bee6:	4b0f      	ldr	r3, [pc, #60]	@ (800bf24 <netif_set_up+0x4c>)
 800bee8:	f44f 7254 	mov.w	r2, #848	@ 0x350
 800beec:	490e      	ldr	r1, [pc, #56]	@ (800bf28 <netif_set_up+0x50>)
 800beee:	480f      	ldr	r0, [pc, #60]	@ (800bf2c <netif_set_up+0x54>)
 800bef0:	f00a fa0e 	bl	8016310 <iprintf>
 800bef4:	e013      	b.n	800bf1e <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800befc:	f003 0301 	and.w	r3, r3, #1
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d10c      	bne.n	800bf1e <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800bf0a:	f043 0301 	orr.w	r3, r3, #1
 800bf0e:	b2da      	uxtb	r2, r3
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800bf16:	2103      	movs	r1, #3
 800bf18:	6878      	ldr	r0, [r7, #4]
 800bf1a:	f000 f809 	bl	800bf30 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800bf1e:	3708      	adds	r7, #8
 800bf20:	46bd      	mov	sp, r7
 800bf22:	bd80      	pop	{r7, pc}
 800bf24:	08018728 	.word	0x08018728
 800bf28:	080188b0 	.word	0x080188b0
 800bf2c:	08018778 	.word	0x08018778

0800bf30 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800bf30:	b580      	push	{r7, lr}
 800bf32:	b082      	sub	sp, #8
 800bf34:	af00      	add	r7, sp, #0
 800bf36:	6078      	str	r0, [r7, #4]
 800bf38:	460b      	mov	r3, r1
 800bf3a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d106      	bne.n	800bf50 <netif_issue_reports+0x20>
 800bf42:	4b18      	ldr	r3, [pc, #96]	@ (800bfa4 <netif_issue_reports+0x74>)
 800bf44:	f240 326d 	movw	r2, #877	@ 0x36d
 800bf48:	4917      	ldr	r1, [pc, #92]	@ (800bfa8 <netif_issue_reports+0x78>)
 800bf4a:	4818      	ldr	r0, [pc, #96]	@ (800bfac <netif_issue_reports+0x7c>)
 800bf4c:	f00a f9e0 	bl	8016310 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800bf56:	f003 0304 	and.w	r3, r3, #4
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d01e      	beq.n	800bf9c <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800bf64:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d017      	beq.n	800bf9c <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800bf6c:	78fb      	ldrb	r3, [r7, #3]
 800bf6e:	f003 0301 	and.w	r3, r3, #1
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d013      	beq.n	800bf9e <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	3304      	adds	r3, #4
 800bf7a:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d00e      	beq.n	800bf9e <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800bf86:	f003 0308 	and.w	r3, r3, #8
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d007      	beq.n	800bf9e <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	3304      	adds	r3, #4
 800bf92:	4619      	mov	r1, r3
 800bf94:	6878      	ldr	r0, [r7, #4]
 800bf96:	f008 fb4d 	bl	8014634 <etharp_request>
 800bf9a:	e000      	b.n	800bf9e <netif_issue_reports+0x6e>
    return;
 800bf9c:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800bf9e:	3708      	adds	r7, #8
 800bfa0:	46bd      	mov	sp, r7
 800bfa2:	bd80      	pop	{r7, pc}
 800bfa4:	08018728 	.word	0x08018728
 800bfa8:	080188cc 	.word	0x080188cc
 800bfac:	08018778 	.word	0x08018778

0800bfb0 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800bfb0:	b580      	push	{r7, lr}
 800bfb2:	b082      	sub	sp, #8
 800bfb4:	af00      	add	r7, sp, #0
 800bfb6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d107      	bne.n	800bfce <netif_set_down+0x1e>
 800bfbe:	4b12      	ldr	r3, [pc, #72]	@ (800c008 <netif_set_down+0x58>)
 800bfc0:	f240 329b 	movw	r2, #923	@ 0x39b
 800bfc4:	4911      	ldr	r1, [pc, #68]	@ (800c00c <netif_set_down+0x5c>)
 800bfc6:	4812      	ldr	r0, [pc, #72]	@ (800c010 <netif_set_down+0x60>)
 800bfc8:	f00a f9a2 	bl	8016310 <iprintf>
 800bfcc:	e019      	b.n	800c002 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800bfd4:	f003 0301 	and.w	r3, r3, #1
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d012      	beq.n	800c002 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800bfe2:	f023 0301 	bic.w	r3, r3, #1
 800bfe6:	b2da      	uxtb	r2, r3
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800bff4:	f003 0308 	and.w	r3, r3, #8
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d002      	beq.n	800c002 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800bffc:	6878      	ldr	r0, [r7, #4]
 800bffe:	f007 fed7 	bl	8013db0 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800c002:	3708      	adds	r7, #8
 800c004:	46bd      	mov	sp, r7
 800c006:	bd80      	pop	{r7, pc}
 800c008:	08018728 	.word	0x08018728
 800c00c:	080188f0 	.word	0x080188f0
 800c010:	08018778 	.word	0x08018778

0800c014 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800c014:	b580      	push	{r7, lr}
 800c016:	b082      	sub	sp, #8
 800c018:	af00      	add	r7, sp, #0
 800c01a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d107      	bne.n	800c032 <netif_set_link_up+0x1e>
 800c022:	4b13      	ldr	r3, [pc, #76]	@ (800c070 <netif_set_link_up+0x5c>)
 800c024:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 800c028:	4912      	ldr	r1, [pc, #72]	@ (800c074 <netif_set_link_up+0x60>)
 800c02a:	4813      	ldr	r0, [pc, #76]	@ (800c078 <netif_set_link_up+0x64>)
 800c02c:	f00a f970 	bl	8016310 <iprintf>
 800c030:	e01b      	b.n	800c06a <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c038:	f003 0304 	and.w	r3, r3, #4
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	d114      	bne.n	800c06a <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c046:	f043 0304 	orr.w	r3, r3, #4
 800c04a:	b2da      	uxtb	r2, r3
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800c052:	2103      	movs	r1, #3
 800c054:	6878      	ldr	r0, [r7, #4]
 800c056:	f7ff ff6b 	bl	800bf30 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	69db      	ldr	r3, [r3, #28]
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d003      	beq.n	800c06a <netif_set_link_up+0x56>
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	69db      	ldr	r3, [r3, #28]
 800c066:	6878      	ldr	r0, [r7, #4]
 800c068:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800c06a:	3708      	adds	r7, #8
 800c06c:	46bd      	mov	sp, r7
 800c06e:	bd80      	pop	{r7, pc}
 800c070:	08018728 	.word	0x08018728
 800c074:	08018910 	.word	0x08018910
 800c078:	08018778 	.word	0x08018778

0800c07c <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800c07c:	b580      	push	{r7, lr}
 800c07e:	b082      	sub	sp, #8
 800c080:	af00      	add	r7, sp, #0
 800c082:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	2b00      	cmp	r3, #0
 800c088:	d107      	bne.n	800c09a <netif_set_link_down+0x1e>
 800c08a:	4b11      	ldr	r3, [pc, #68]	@ (800c0d0 <netif_set_link_down+0x54>)
 800c08c:	f240 4206 	movw	r2, #1030	@ 0x406
 800c090:	4910      	ldr	r1, [pc, #64]	@ (800c0d4 <netif_set_link_down+0x58>)
 800c092:	4811      	ldr	r0, [pc, #68]	@ (800c0d8 <netif_set_link_down+0x5c>)
 800c094:	f00a f93c 	bl	8016310 <iprintf>
 800c098:	e017      	b.n	800c0ca <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c0a0:	f003 0304 	and.w	r3, r3, #4
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d010      	beq.n	800c0ca <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c0ae:	f023 0304 	bic.w	r3, r3, #4
 800c0b2:	b2da      	uxtb	r2, r3
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	69db      	ldr	r3, [r3, #28]
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d003      	beq.n	800c0ca <netif_set_link_down+0x4e>
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	69db      	ldr	r3, [r3, #28]
 800c0c6:	6878      	ldr	r0, [r7, #4]
 800c0c8:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800c0ca:	3708      	adds	r7, #8
 800c0cc:	46bd      	mov	sp, r7
 800c0ce:	bd80      	pop	{r7, pc}
 800c0d0:	08018728 	.word	0x08018728
 800c0d4:	08018934 	.word	0x08018934
 800c0d8:	08018778 	.word	0x08018778

0800c0dc <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800c0dc:	b480      	push	{r7}
 800c0de:	b083      	sub	sp, #12
 800c0e0:	af00      	add	r7, sp, #0
 800c0e2:	6078      	str	r0, [r7, #4]
 800c0e4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d002      	beq.n	800c0f2 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	683a      	ldr	r2, [r7, #0]
 800c0f0:	61da      	str	r2, [r3, #28]
  }
}
 800c0f2:	bf00      	nop
 800c0f4:	370c      	adds	r7, #12
 800c0f6:	46bd      	mov	sp, r7
 800c0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0fc:	4770      	bx	lr

0800c0fe <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800c0fe:	b480      	push	{r7}
 800c100:	b085      	sub	sp, #20
 800c102:	af00      	add	r7, sp, #0
 800c104:	60f8      	str	r0, [r7, #12]
 800c106:	60b9      	str	r1, [r7, #8]
 800c108:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800c10a:	f06f 030b 	mvn.w	r3, #11
}
 800c10e:	4618      	mov	r0, r3
 800c110:	3714      	adds	r7, #20
 800c112:	46bd      	mov	sp, r7
 800c114:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c118:	4770      	bx	lr
	...

0800c11c <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800c11c:	b480      	push	{r7}
 800c11e:	b085      	sub	sp, #20
 800c120:	af00      	add	r7, sp, #0
 800c122:	4603      	mov	r3, r0
 800c124:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800c126:	79fb      	ldrb	r3, [r7, #7]
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d013      	beq.n	800c154 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800c12c:	4b0d      	ldr	r3, [pc, #52]	@ (800c164 <netif_get_by_index+0x48>)
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	60fb      	str	r3, [r7, #12]
 800c132:	e00c      	b.n	800c14e <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c13a:	3301      	adds	r3, #1
 800c13c:	b2db      	uxtb	r3, r3
 800c13e:	79fa      	ldrb	r2, [r7, #7]
 800c140:	429a      	cmp	r2, r3
 800c142:	d101      	bne.n	800c148 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	e006      	b.n	800c156 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800c148:	68fb      	ldr	r3, [r7, #12]
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	60fb      	str	r3, [r7, #12]
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	2b00      	cmp	r3, #0
 800c152:	d1ef      	bne.n	800c134 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800c154:	2300      	movs	r3, #0
}
 800c156:	4618      	mov	r0, r3
 800c158:	3714      	adds	r7, #20
 800c15a:	46bd      	mov	sp, r7
 800c15c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c160:	4770      	bx	lr
 800c162:	bf00      	nop
 800c164:	2000eb38 	.word	0x2000eb38

0800c168 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800c168:	b580      	push	{r7, lr}
 800c16a:	b082      	sub	sp, #8
 800c16c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800c16e:	f009 ffb1 	bl	80160d4 <sys_arch_protect>
 800c172:	6038      	str	r0, [r7, #0]
 800c174:	4b0d      	ldr	r3, [pc, #52]	@ (800c1ac <pbuf_free_ooseq+0x44>)
 800c176:	2200      	movs	r2, #0
 800c178:	701a      	strb	r2, [r3, #0]
 800c17a:	6838      	ldr	r0, [r7, #0]
 800c17c:	f009 ffb8 	bl	80160f0 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800c180:	4b0b      	ldr	r3, [pc, #44]	@ (800c1b0 <pbuf_free_ooseq+0x48>)
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	607b      	str	r3, [r7, #4]
 800c186:	e00a      	b.n	800c19e <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d003      	beq.n	800c198 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800c190:	6878      	ldr	r0, [r7, #4]
 800c192:	f002 fc73 	bl	800ea7c <tcp_free_ooseq>
      return;
 800c196:	e005      	b.n	800c1a4 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	68db      	ldr	r3, [r3, #12]
 800c19c:	607b      	str	r3, [r7, #4]
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d1f1      	bne.n	800c188 <pbuf_free_ooseq+0x20>
    }
  }
}
 800c1a4:	3708      	adds	r7, #8
 800c1a6:	46bd      	mov	sp, r7
 800c1a8:	bd80      	pop	{r7, pc}
 800c1aa:	bf00      	nop
 800c1ac:	2000eb41 	.word	0x2000eb41
 800c1b0:	2000eb50 	.word	0x2000eb50

0800c1b4 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800c1b4:	b580      	push	{r7, lr}
 800c1b6:	b082      	sub	sp, #8
 800c1b8:	af00      	add	r7, sp, #0
 800c1ba:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800c1bc:	f7ff ffd4 	bl	800c168 <pbuf_free_ooseq>
}
 800c1c0:	bf00      	nop
 800c1c2:	3708      	adds	r7, #8
 800c1c4:	46bd      	mov	sp, r7
 800c1c6:	bd80      	pop	{r7, pc}

0800c1c8 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800c1c8:	b580      	push	{r7, lr}
 800c1ca:	b082      	sub	sp, #8
 800c1cc:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800c1ce:	f009 ff81 	bl	80160d4 <sys_arch_protect>
 800c1d2:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800c1d4:	4b0f      	ldr	r3, [pc, #60]	@ (800c214 <pbuf_pool_is_empty+0x4c>)
 800c1d6:	781b      	ldrb	r3, [r3, #0]
 800c1d8:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800c1da:	4b0e      	ldr	r3, [pc, #56]	@ (800c214 <pbuf_pool_is_empty+0x4c>)
 800c1dc:	2201      	movs	r2, #1
 800c1de:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800c1e0:	6878      	ldr	r0, [r7, #4]
 800c1e2:	f009 ff85 	bl	80160f0 <sys_arch_unprotect>

  if (!queued) {
 800c1e6:	78fb      	ldrb	r3, [r7, #3]
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d10f      	bne.n	800c20c <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800c1ec:	2100      	movs	r1, #0
 800c1ee:	480a      	ldr	r0, [pc, #40]	@ (800c218 <pbuf_pool_is_empty+0x50>)
 800c1f0:	f7fe fe90 	bl	800af14 <tcpip_try_callback>
 800c1f4:	4603      	mov	r3, r0
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d008      	beq.n	800c20c <pbuf_pool_is_empty+0x44>
 800c1fa:	f009 ff6b 	bl	80160d4 <sys_arch_protect>
 800c1fe:	6078      	str	r0, [r7, #4]
 800c200:	4b04      	ldr	r3, [pc, #16]	@ (800c214 <pbuf_pool_is_empty+0x4c>)
 800c202:	2200      	movs	r2, #0
 800c204:	701a      	strb	r2, [r3, #0]
 800c206:	6878      	ldr	r0, [r7, #4]
 800c208:	f009 ff72 	bl	80160f0 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800c20c:	bf00      	nop
 800c20e:	3708      	adds	r7, #8
 800c210:	46bd      	mov	sp, r7
 800c212:	bd80      	pop	{r7, pc}
 800c214:	2000eb41 	.word	0x2000eb41
 800c218:	0800c1b5 	.word	0x0800c1b5

0800c21c <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800c21c:	b480      	push	{r7}
 800c21e:	b085      	sub	sp, #20
 800c220:	af00      	add	r7, sp, #0
 800c222:	60f8      	str	r0, [r7, #12]
 800c224:	60b9      	str	r1, [r7, #8]
 800c226:	4611      	mov	r1, r2
 800c228:	461a      	mov	r2, r3
 800c22a:	460b      	mov	r3, r1
 800c22c:	80fb      	strh	r3, [r7, #6]
 800c22e:	4613      	mov	r3, r2
 800c230:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	2200      	movs	r2, #0
 800c236:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	68ba      	ldr	r2, [r7, #8]
 800c23c:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800c23e:	68fb      	ldr	r3, [r7, #12]
 800c240:	88fa      	ldrh	r2, [r7, #6]
 800c242:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	88ba      	ldrh	r2, [r7, #4]
 800c248:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800c24a:	8b3b      	ldrh	r3, [r7, #24]
 800c24c:	b2da      	uxtb	r2, r3
 800c24e:	68fb      	ldr	r3, [r7, #12]
 800c250:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	7f3a      	ldrb	r2, [r7, #28]
 800c256:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	2201      	movs	r2, #1
 800c25c:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	2200      	movs	r2, #0
 800c262:	73da      	strb	r2, [r3, #15]
}
 800c264:	bf00      	nop
 800c266:	3714      	adds	r7, #20
 800c268:	46bd      	mov	sp, r7
 800c26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c26e:	4770      	bx	lr

0800c270 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800c270:	b580      	push	{r7, lr}
 800c272:	b08c      	sub	sp, #48	@ 0x30
 800c274:	af02      	add	r7, sp, #8
 800c276:	4603      	mov	r3, r0
 800c278:	71fb      	strb	r3, [r7, #7]
 800c27a:	460b      	mov	r3, r1
 800c27c:	80bb      	strh	r3, [r7, #4]
 800c27e:	4613      	mov	r3, r2
 800c280:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800c282:	79fb      	ldrb	r3, [r7, #7]
 800c284:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800c286:	887b      	ldrh	r3, [r7, #2]
 800c288:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800c28c:	d07f      	beq.n	800c38e <pbuf_alloc+0x11e>
 800c28e:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800c292:	f300 80c8 	bgt.w	800c426 <pbuf_alloc+0x1b6>
 800c296:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800c29a:	d010      	beq.n	800c2be <pbuf_alloc+0x4e>
 800c29c:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800c2a0:	f300 80c1 	bgt.w	800c426 <pbuf_alloc+0x1b6>
 800c2a4:	2b01      	cmp	r3, #1
 800c2a6:	d002      	beq.n	800c2ae <pbuf_alloc+0x3e>
 800c2a8:	2b41      	cmp	r3, #65	@ 0x41
 800c2aa:	f040 80bc 	bne.w	800c426 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800c2ae:	887a      	ldrh	r2, [r7, #2]
 800c2b0:	88bb      	ldrh	r3, [r7, #4]
 800c2b2:	4619      	mov	r1, r3
 800c2b4:	2000      	movs	r0, #0
 800c2b6:	f000 f8d1 	bl	800c45c <pbuf_alloc_reference>
 800c2ba:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 800c2bc:	e0bd      	b.n	800c43a <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800c2be:	2300      	movs	r3, #0
 800c2c0:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 800c2c2:	2300      	movs	r3, #0
 800c2c4:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800c2c6:	88bb      	ldrh	r3, [r7, #4]
 800c2c8:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800c2ca:	200c      	movs	r0, #12
 800c2cc:	f7ff fb9a 	bl	800ba04 <memp_malloc>
 800c2d0:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800c2d2:	693b      	ldr	r3, [r7, #16]
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d109      	bne.n	800c2ec <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800c2d8:	f7ff ff76 	bl	800c1c8 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800c2dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d002      	beq.n	800c2e8 <pbuf_alloc+0x78>
            pbuf_free(p);
 800c2e2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c2e4:	f000 faa8 	bl	800c838 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800c2e8:	2300      	movs	r3, #0
 800c2ea:	e0a7      	b.n	800c43c <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800c2ec:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c2ee:	3303      	adds	r3, #3
 800c2f0:	b29b      	uxth	r3, r3
 800c2f2:	f023 0303 	bic.w	r3, r3, #3
 800c2f6:	b29b      	uxth	r3, r3
 800c2f8:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 800c2fc:	b29b      	uxth	r3, r3
 800c2fe:	8b7a      	ldrh	r2, [r7, #26]
 800c300:	4293      	cmp	r3, r2
 800c302:	bf28      	it	cs
 800c304:	4613      	movcs	r3, r2
 800c306:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800c308:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c30a:	3310      	adds	r3, #16
 800c30c:	693a      	ldr	r2, [r7, #16]
 800c30e:	4413      	add	r3, r2
 800c310:	3303      	adds	r3, #3
 800c312:	f023 0303 	bic.w	r3, r3, #3
 800c316:	4618      	mov	r0, r3
 800c318:	89f9      	ldrh	r1, [r7, #14]
 800c31a:	8b7a      	ldrh	r2, [r7, #26]
 800c31c:	2300      	movs	r3, #0
 800c31e:	9301      	str	r3, [sp, #4]
 800c320:	887b      	ldrh	r3, [r7, #2]
 800c322:	9300      	str	r3, [sp, #0]
 800c324:	460b      	mov	r3, r1
 800c326:	4601      	mov	r1, r0
 800c328:	6938      	ldr	r0, [r7, #16]
 800c32a:	f7ff ff77 	bl	800c21c <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800c32e:	693b      	ldr	r3, [r7, #16]
 800c330:	685b      	ldr	r3, [r3, #4]
 800c332:	f003 0303 	and.w	r3, r3, #3
 800c336:	2b00      	cmp	r3, #0
 800c338:	d006      	beq.n	800c348 <pbuf_alloc+0xd8>
 800c33a:	4b42      	ldr	r3, [pc, #264]	@ (800c444 <pbuf_alloc+0x1d4>)
 800c33c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800c340:	4941      	ldr	r1, [pc, #260]	@ (800c448 <pbuf_alloc+0x1d8>)
 800c342:	4842      	ldr	r0, [pc, #264]	@ (800c44c <pbuf_alloc+0x1dc>)
 800c344:	f009 ffe4 	bl	8016310 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800c348:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c34a:	3303      	adds	r3, #3
 800c34c:	f023 0303 	bic.w	r3, r3, #3
 800c350:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 800c354:	d106      	bne.n	800c364 <pbuf_alloc+0xf4>
 800c356:	4b3b      	ldr	r3, [pc, #236]	@ (800c444 <pbuf_alloc+0x1d4>)
 800c358:	f44f 7281 	mov.w	r2, #258	@ 0x102
 800c35c:	493c      	ldr	r1, [pc, #240]	@ (800c450 <pbuf_alloc+0x1e0>)
 800c35e:	483b      	ldr	r0, [pc, #236]	@ (800c44c <pbuf_alloc+0x1dc>)
 800c360:	f009 ffd6 	bl	8016310 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800c364:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c366:	2b00      	cmp	r3, #0
 800c368:	d102      	bne.n	800c370 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800c36a:	693b      	ldr	r3, [r7, #16]
 800c36c:	627b      	str	r3, [r7, #36]	@ 0x24
 800c36e:	e002      	b.n	800c376 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800c370:	69fb      	ldr	r3, [r7, #28]
 800c372:	693a      	ldr	r2, [r7, #16]
 800c374:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800c376:	693b      	ldr	r3, [r7, #16]
 800c378:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800c37a:	8b7a      	ldrh	r2, [r7, #26]
 800c37c:	89fb      	ldrh	r3, [r7, #14]
 800c37e:	1ad3      	subs	r3, r2, r3
 800c380:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800c382:	2300      	movs	r3, #0
 800c384:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 800c386:	8b7b      	ldrh	r3, [r7, #26]
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d19e      	bne.n	800c2ca <pbuf_alloc+0x5a>
      break;
 800c38c:	e055      	b.n	800c43a <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800c38e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c390:	3303      	adds	r3, #3
 800c392:	b29b      	uxth	r3, r3
 800c394:	f023 0303 	bic.w	r3, r3, #3
 800c398:	b29a      	uxth	r2, r3
 800c39a:	88bb      	ldrh	r3, [r7, #4]
 800c39c:	3303      	adds	r3, #3
 800c39e:	b29b      	uxth	r3, r3
 800c3a0:	f023 0303 	bic.w	r3, r3, #3
 800c3a4:	b29b      	uxth	r3, r3
 800c3a6:	4413      	add	r3, r2
 800c3a8:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800c3aa:	8b3b      	ldrh	r3, [r7, #24]
 800c3ac:	3310      	adds	r3, #16
 800c3ae:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800c3b0:	8b3a      	ldrh	r2, [r7, #24]
 800c3b2:	88bb      	ldrh	r3, [r7, #4]
 800c3b4:	3303      	adds	r3, #3
 800c3b6:	f023 0303 	bic.w	r3, r3, #3
 800c3ba:	429a      	cmp	r2, r3
 800c3bc:	d306      	bcc.n	800c3cc <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800c3be:	8afa      	ldrh	r2, [r7, #22]
 800c3c0:	88bb      	ldrh	r3, [r7, #4]
 800c3c2:	3303      	adds	r3, #3
 800c3c4:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800c3c8:	429a      	cmp	r2, r3
 800c3ca:	d201      	bcs.n	800c3d0 <pbuf_alloc+0x160>
        return NULL;
 800c3cc:	2300      	movs	r3, #0
 800c3ce:	e035      	b.n	800c43c <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800c3d0:	8afb      	ldrh	r3, [r7, #22]
 800c3d2:	4618      	mov	r0, r3
 800c3d4:	f7ff f972 	bl	800b6bc <mem_malloc>
 800c3d8:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 800c3da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d101      	bne.n	800c3e4 <pbuf_alloc+0x174>
        return NULL;
 800c3e0:	2300      	movs	r3, #0
 800c3e2:	e02b      	b.n	800c43c <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800c3e4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c3e6:	3310      	adds	r3, #16
 800c3e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c3ea:	4413      	add	r3, r2
 800c3ec:	3303      	adds	r3, #3
 800c3ee:	f023 0303 	bic.w	r3, r3, #3
 800c3f2:	4618      	mov	r0, r3
 800c3f4:	88b9      	ldrh	r1, [r7, #4]
 800c3f6:	88ba      	ldrh	r2, [r7, #4]
 800c3f8:	2300      	movs	r3, #0
 800c3fa:	9301      	str	r3, [sp, #4]
 800c3fc:	887b      	ldrh	r3, [r7, #2]
 800c3fe:	9300      	str	r3, [sp, #0]
 800c400:	460b      	mov	r3, r1
 800c402:	4601      	mov	r1, r0
 800c404:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c406:	f7ff ff09 	bl	800c21c <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800c40a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c40c:	685b      	ldr	r3, [r3, #4]
 800c40e:	f003 0303 	and.w	r3, r3, #3
 800c412:	2b00      	cmp	r3, #0
 800c414:	d010      	beq.n	800c438 <pbuf_alloc+0x1c8>
 800c416:	4b0b      	ldr	r3, [pc, #44]	@ (800c444 <pbuf_alloc+0x1d4>)
 800c418:	f44f 7291 	mov.w	r2, #290	@ 0x122
 800c41c:	490d      	ldr	r1, [pc, #52]	@ (800c454 <pbuf_alloc+0x1e4>)
 800c41e:	480b      	ldr	r0, [pc, #44]	@ (800c44c <pbuf_alloc+0x1dc>)
 800c420:	f009 ff76 	bl	8016310 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800c424:	e008      	b.n	800c438 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800c426:	4b07      	ldr	r3, [pc, #28]	@ (800c444 <pbuf_alloc+0x1d4>)
 800c428:	f240 1227 	movw	r2, #295	@ 0x127
 800c42c:	490a      	ldr	r1, [pc, #40]	@ (800c458 <pbuf_alloc+0x1e8>)
 800c42e:	4807      	ldr	r0, [pc, #28]	@ (800c44c <pbuf_alloc+0x1dc>)
 800c430:	f009 ff6e 	bl	8016310 <iprintf>
      return NULL;
 800c434:	2300      	movs	r3, #0
 800c436:	e001      	b.n	800c43c <pbuf_alloc+0x1cc>
      break;
 800c438:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800c43a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800c43c:	4618      	mov	r0, r3
 800c43e:	3728      	adds	r7, #40	@ 0x28
 800c440:	46bd      	mov	sp, r7
 800c442:	bd80      	pop	{r7, pc}
 800c444:	08018958 	.word	0x08018958
 800c448:	08018988 	.word	0x08018988
 800c44c:	080189b8 	.word	0x080189b8
 800c450:	080189e0 	.word	0x080189e0
 800c454:	08018a14 	.word	0x08018a14
 800c458:	08018a40 	.word	0x08018a40

0800c45c <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800c45c:	b580      	push	{r7, lr}
 800c45e:	b086      	sub	sp, #24
 800c460:	af02      	add	r7, sp, #8
 800c462:	6078      	str	r0, [r7, #4]
 800c464:	460b      	mov	r3, r1
 800c466:	807b      	strh	r3, [r7, #2]
 800c468:	4613      	mov	r3, r2
 800c46a:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800c46c:	883b      	ldrh	r3, [r7, #0]
 800c46e:	2b41      	cmp	r3, #65	@ 0x41
 800c470:	d009      	beq.n	800c486 <pbuf_alloc_reference+0x2a>
 800c472:	883b      	ldrh	r3, [r7, #0]
 800c474:	2b01      	cmp	r3, #1
 800c476:	d006      	beq.n	800c486 <pbuf_alloc_reference+0x2a>
 800c478:	4b0f      	ldr	r3, [pc, #60]	@ (800c4b8 <pbuf_alloc_reference+0x5c>)
 800c47a:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 800c47e:	490f      	ldr	r1, [pc, #60]	@ (800c4bc <pbuf_alloc_reference+0x60>)
 800c480:	480f      	ldr	r0, [pc, #60]	@ (800c4c0 <pbuf_alloc_reference+0x64>)
 800c482:	f009 ff45 	bl	8016310 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800c486:	200b      	movs	r0, #11
 800c488:	f7ff fabc 	bl	800ba04 <memp_malloc>
 800c48c:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800c48e:	68fb      	ldr	r3, [r7, #12]
 800c490:	2b00      	cmp	r3, #0
 800c492:	d101      	bne.n	800c498 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800c494:	2300      	movs	r3, #0
 800c496:	e00b      	b.n	800c4b0 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800c498:	8879      	ldrh	r1, [r7, #2]
 800c49a:	887a      	ldrh	r2, [r7, #2]
 800c49c:	2300      	movs	r3, #0
 800c49e:	9301      	str	r3, [sp, #4]
 800c4a0:	883b      	ldrh	r3, [r7, #0]
 800c4a2:	9300      	str	r3, [sp, #0]
 800c4a4:	460b      	mov	r3, r1
 800c4a6:	6879      	ldr	r1, [r7, #4]
 800c4a8:	68f8      	ldr	r0, [r7, #12]
 800c4aa:	f7ff feb7 	bl	800c21c <pbuf_init_alloced_pbuf>
  return p;
 800c4ae:	68fb      	ldr	r3, [r7, #12]
}
 800c4b0:	4618      	mov	r0, r3
 800c4b2:	3710      	adds	r7, #16
 800c4b4:	46bd      	mov	sp, r7
 800c4b6:	bd80      	pop	{r7, pc}
 800c4b8:	08018958 	.word	0x08018958
 800c4bc:	08018a5c 	.word	0x08018a5c
 800c4c0:	080189b8 	.word	0x080189b8

0800c4c4 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800c4c4:	b580      	push	{r7, lr}
 800c4c6:	b088      	sub	sp, #32
 800c4c8:	af02      	add	r7, sp, #8
 800c4ca:	607b      	str	r3, [r7, #4]
 800c4cc:	4603      	mov	r3, r0
 800c4ce:	73fb      	strb	r3, [r7, #15]
 800c4d0:	460b      	mov	r3, r1
 800c4d2:	81bb      	strh	r3, [r7, #12]
 800c4d4:	4613      	mov	r3, r2
 800c4d6:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800c4d8:	7bfb      	ldrb	r3, [r7, #15]
 800c4da:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800c4dc:	8a7b      	ldrh	r3, [r7, #18]
 800c4de:	3303      	adds	r3, #3
 800c4e0:	f023 0203 	bic.w	r2, r3, #3
 800c4e4:	89bb      	ldrh	r3, [r7, #12]
 800c4e6:	441a      	add	r2, r3
 800c4e8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c4ea:	429a      	cmp	r2, r3
 800c4ec:	d901      	bls.n	800c4f2 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800c4ee:	2300      	movs	r3, #0
 800c4f0:	e018      	b.n	800c524 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800c4f2:	6a3b      	ldr	r3, [r7, #32]
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d007      	beq.n	800c508 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800c4f8:	8a7b      	ldrh	r3, [r7, #18]
 800c4fa:	3303      	adds	r3, #3
 800c4fc:	f023 0303 	bic.w	r3, r3, #3
 800c500:	6a3a      	ldr	r2, [r7, #32]
 800c502:	4413      	add	r3, r2
 800c504:	617b      	str	r3, [r7, #20]
 800c506:	e001      	b.n	800c50c <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800c508:	2300      	movs	r3, #0
 800c50a:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800c50c:	6878      	ldr	r0, [r7, #4]
 800c50e:	89b9      	ldrh	r1, [r7, #12]
 800c510:	89ba      	ldrh	r2, [r7, #12]
 800c512:	2302      	movs	r3, #2
 800c514:	9301      	str	r3, [sp, #4]
 800c516:	897b      	ldrh	r3, [r7, #10]
 800c518:	9300      	str	r3, [sp, #0]
 800c51a:	460b      	mov	r3, r1
 800c51c:	6979      	ldr	r1, [r7, #20]
 800c51e:	f7ff fe7d 	bl	800c21c <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800c522:	687b      	ldr	r3, [r7, #4]
}
 800c524:	4618      	mov	r0, r3
 800c526:	3718      	adds	r7, #24
 800c528:	46bd      	mov	sp, r7
 800c52a:	bd80      	pop	{r7, pc}

0800c52c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800c52c:	b580      	push	{r7, lr}
 800c52e:	b084      	sub	sp, #16
 800c530:	af00      	add	r7, sp, #0
 800c532:	6078      	str	r0, [r7, #4]
 800c534:	460b      	mov	r3, r1
 800c536:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d106      	bne.n	800c54c <pbuf_realloc+0x20>
 800c53e:	4b3a      	ldr	r3, [pc, #232]	@ (800c628 <pbuf_realloc+0xfc>)
 800c540:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 800c544:	4939      	ldr	r1, [pc, #228]	@ (800c62c <pbuf_realloc+0x100>)
 800c546:	483a      	ldr	r0, [pc, #232]	@ (800c630 <pbuf_realloc+0x104>)
 800c548:	f009 fee2 	bl	8016310 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	891b      	ldrh	r3, [r3, #8]
 800c550:	887a      	ldrh	r2, [r7, #2]
 800c552:	429a      	cmp	r2, r3
 800c554:	d263      	bcs.n	800c61e <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	891a      	ldrh	r2, [r3, #8]
 800c55a:	887b      	ldrh	r3, [r7, #2]
 800c55c:	1ad3      	subs	r3, r2, r3
 800c55e:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800c560:	887b      	ldrh	r3, [r7, #2]
 800c562:	817b      	strh	r3, [r7, #10]
  q = p;
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800c568:	e018      	b.n	800c59c <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800c56a:	68fb      	ldr	r3, [r7, #12]
 800c56c:	895b      	ldrh	r3, [r3, #10]
 800c56e:	897a      	ldrh	r2, [r7, #10]
 800c570:	1ad3      	subs	r3, r2, r3
 800c572:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800c574:	68fb      	ldr	r3, [r7, #12]
 800c576:	891a      	ldrh	r2, [r3, #8]
 800c578:	893b      	ldrh	r3, [r7, #8]
 800c57a:	1ad3      	subs	r3, r2, r3
 800c57c:	b29a      	uxth	r2, r3
 800c57e:	68fb      	ldr	r3, [r7, #12]
 800c580:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800c588:	68fb      	ldr	r3, [r7, #12]
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d106      	bne.n	800c59c <pbuf_realloc+0x70>
 800c58e:	4b26      	ldr	r3, [pc, #152]	@ (800c628 <pbuf_realloc+0xfc>)
 800c590:	f240 12af 	movw	r2, #431	@ 0x1af
 800c594:	4927      	ldr	r1, [pc, #156]	@ (800c634 <pbuf_realloc+0x108>)
 800c596:	4826      	ldr	r0, [pc, #152]	@ (800c630 <pbuf_realloc+0x104>)
 800c598:	f009 feba 	bl	8016310 <iprintf>
  while (rem_len > q->len) {
 800c59c:	68fb      	ldr	r3, [r7, #12]
 800c59e:	895b      	ldrh	r3, [r3, #10]
 800c5a0:	897a      	ldrh	r2, [r7, #10]
 800c5a2:	429a      	cmp	r2, r3
 800c5a4:	d8e1      	bhi.n	800c56a <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800c5a6:	68fb      	ldr	r3, [r7, #12]
 800c5a8:	7b1b      	ldrb	r3, [r3, #12]
 800c5aa:	f003 030f 	and.w	r3, r3, #15
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d121      	bne.n	800c5f6 <pbuf_realloc+0xca>
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	895b      	ldrh	r3, [r3, #10]
 800c5b6:	897a      	ldrh	r2, [r7, #10]
 800c5b8:	429a      	cmp	r2, r3
 800c5ba:	d01c      	beq.n	800c5f6 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	7b5b      	ldrb	r3, [r3, #13]
 800c5c0:	f003 0302 	and.w	r3, r3, #2
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d116      	bne.n	800c5f6 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800c5c8:	68fb      	ldr	r3, [r7, #12]
 800c5ca:	685a      	ldr	r2, [r3, #4]
 800c5cc:	68fb      	ldr	r3, [r7, #12]
 800c5ce:	1ad3      	subs	r3, r2, r3
 800c5d0:	b29a      	uxth	r2, r3
 800c5d2:	897b      	ldrh	r3, [r7, #10]
 800c5d4:	4413      	add	r3, r2
 800c5d6:	b29b      	uxth	r3, r3
 800c5d8:	4619      	mov	r1, r3
 800c5da:	68f8      	ldr	r0, [r7, #12]
 800c5dc:	f7fe ff64 	bl	800b4a8 <mem_trim>
 800c5e0:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800c5e2:	68fb      	ldr	r3, [r7, #12]
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d106      	bne.n	800c5f6 <pbuf_realloc+0xca>
 800c5e8:	4b0f      	ldr	r3, [pc, #60]	@ (800c628 <pbuf_realloc+0xfc>)
 800c5ea:	f240 12bd 	movw	r2, #445	@ 0x1bd
 800c5ee:	4912      	ldr	r1, [pc, #72]	@ (800c638 <pbuf_realloc+0x10c>)
 800c5f0:	480f      	ldr	r0, [pc, #60]	@ (800c630 <pbuf_realloc+0x104>)
 800c5f2:	f009 fe8d 	bl	8016310 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	897a      	ldrh	r2, [r7, #10]
 800c5fa:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800c5fc:	68fb      	ldr	r3, [r7, #12]
 800c5fe:	895a      	ldrh	r2, [r3, #10]
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d004      	beq.n	800c616 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	4618      	mov	r0, r3
 800c612:	f000 f911 	bl	800c838 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800c616:	68fb      	ldr	r3, [r7, #12]
 800c618:	2200      	movs	r2, #0
 800c61a:	601a      	str	r2, [r3, #0]
 800c61c:	e000      	b.n	800c620 <pbuf_realloc+0xf4>
    return;
 800c61e:	bf00      	nop

}
 800c620:	3710      	adds	r7, #16
 800c622:	46bd      	mov	sp, r7
 800c624:	bd80      	pop	{r7, pc}
 800c626:	bf00      	nop
 800c628:	08018958 	.word	0x08018958
 800c62c:	08018a70 	.word	0x08018a70
 800c630:	080189b8 	.word	0x080189b8
 800c634:	08018a88 	.word	0x08018a88
 800c638:	08018aa0 	.word	0x08018aa0

0800c63c <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800c63c:	b580      	push	{r7, lr}
 800c63e:	b086      	sub	sp, #24
 800c640:	af00      	add	r7, sp, #0
 800c642:	60f8      	str	r0, [r7, #12]
 800c644:	60b9      	str	r1, [r7, #8]
 800c646:	4613      	mov	r3, r2
 800c648:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800c64a:	68fb      	ldr	r3, [r7, #12]
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d106      	bne.n	800c65e <pbuf_add_header_impl+0x22>
 800c650:	4b2b      	ldr	r3, [pc, #172]	@ (800c700 <pbuf_add_header_impl+0xc4>)
 800c652:	f240 12df 	movw	r2, #479	@ 0x1df
 800c656:	492b      	ldr	r1, [pc, #172]	@ (800c704 <pbuf_add_header_impl+0xc8>)
 800c658:	482b      	ldr	r0, [pc, #172]	@ (800c708 <pbuf_add_header_impl+0xcc>)
 800c65a:	f009 fe59 	bl	8016310 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800c65e:	68fb      	ldr	r3, [r7, #12]
 800c660:	2b00      	cmp	r3, #0
 800c662:	d003      	beq.n	800c66c <pbuf_add_header_impl+0x30>
 800c664:	68bb      	ldr	r3, [r7, #8]
 800c666:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c66a:	d301      	bcc.n	800c670 <pbuf_add_header_impl+0x34>
    return 1;
 800c66c:	2301      	movs	r3, #1
 800c66e:	e043      	b.n	800c6f8 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800c670:	68bb      	ldr	r3, [r7, #8]
 800c672:	2b00      	cmp	r3, #0
 800c674:	d101      	bne.n	800c67a <pbuf_add_header_impl+0x3e>
    return 0;
 800c676:	2300      	movs	r3, #0
 800c678:	e03e      	b.n	800c6f8 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800c67a:	68bb      	ldr	r3, [r7, #8]
 800c67c:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800c67e:	68fb      	ldr	r3, [r7, #12]
 800c680:	891a      	ldrh	r2, [r3, #8]
 800c682:	8a7b      	ldrh	r3, [r7, #18]
 800c684:	4413      	add	r3, r2
 800c686:	b29b      	uxth	r3, r3
 800c688:	8a7a      	ldrh	r2, [r7, #18]
 800c68a:	429a      	cmp	r2, r3
 800c68c:	d901      	bls.n	800c692 <pbuf_add_header_impl+0x56>
    return 1;
 800c68e:	2301      	movs	r3, #1
 800c690:	e032      	b.n	800c6f8 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800c692:	68fb      	ldr	r3, [r7, #12]
 800c694:	7b1b      	ldrb	r3, [r3, #12]
 800c696:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800c698:	8a3b      	ldrh	r3, [r7, #16]
 800c69a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d00c      	beq.n	800c6bc <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800c6a2:	68fb      	ldr	r3, [r7, #12]
 800c6a4:	685a      	ldr	r2, [r3, #4]
 800c6a6:	68bb      	ldr	r3, [r7, #8]
 800c6a8:	425b      	negs	r3, r3
 800c6aa:	4413      	add	r3, r2
 800c6ac:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800c6ae:	68fb      	ldr	r3, [r7, #12]
 800c6b0:	3310      	adds	r3, #16
 800c6b2:	697a      	ldr	r2, [r7, #20]
 800c6b4:	429a      	cmp	r2, r3
 800c6b6:	d20d      	bcs.n	800c6d4 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800c6b8:	2301      	movs	r3, #1
 800c6ba:	e01d      	b.n	800c6f8 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800c6bc:	79fb      	ldrb	r3, [r7, #7]
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d006      	beq.n	800c6d0 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800c6c2:	68fb      	ldr	r3, [r7, #12]
 800c6c4:	685a      	ldr	r2, [r3, #4]
 800c6c6:	68bb      	ldr	r3, [r7, #8]
 800c6c8:	425b      	negs	r3, r3
 800c6ca:	4413      	add	r3, r2
 800c6cc:	617b      	str	r3, [r7, #20]
 800c6ce:	e001      	b.n	800c6d4 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800c6d0:	2301      	movs	r3, #1
 800c6d2:	e011      	b.n	800c6f8 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800c6d4:	68fb      	ldr	r3, [r7, #12]
 800c6d6:	697a      	ldr	r2, [r7, #20]
 800c6d8:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800c6da:	68fb      	ldr	r3, [r7, #12]
 800c6dc:	895a      	ldrh	r2, [r3, #10]
 800c6de:	8a7b      	ldrh	r3, [r7, #18]
 800c6e0:	4413      	add	r3, r2
 800c6e2:	b29a      	uxth	r2, r3
 800c6e4:	68fb      	ldr	r3, [r7, #12]
 800c6e6:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	891a      	ldrh	r2, [r3, #8]
 800c6ec:	8a7b      	ldrh	r3, [r7, #18]
 800c6ee:	4413      	add	r3, r2
 800c6f0:	b29a      	uxth	r2, r3
 800c6f2:	68fb      	ldr	r3, [r7, #12]
 800c6f4:	811a      	strh	r2, [r3, #8]


  return 0;
 800c6f6:	2300      	movs	r3, #0
}
 800c6f8:	4618      	mov	r0, r3
 800c6fa:	3718      	adds	r7, #24
 800c6fc:	46bd      	mov	sp, r7
 800c6fe:	bd80      	pop	{r7, pc}
 800c700:	08018958 	.word	0x08018958
 800c704:	08018abc 	.word	0x08018abc
 800c708:	080189b8 	.word	0x080189b8

0800c70c <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800c70c:	b580      	push	{r7, lr}
 800c70e:	b082      	sub	sp, #8
 800c710:	af00      	add	r7, sp, #0
 800c712:	6078      	str	r0, [r7, #4]
 800c714:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800c716:	2200      	movs	r2, #0
 800c718:	6839      	ldr	r1, [r7, #0]
 800c71a:	6878      	ldr	r0, [r7, #4]
 800c71c:	f7ff ff8e 	bl	800c63c <pbuf_add_header_impl>
 800c720:	4603      	mov	r3, r0
}
 800c722:	4618      	mov	r0, r3
 800c724:	3708      	adds	r7, #8
 800c726:	46bd      	mov	sp, r7
 800c728:	bd80      	pop	{r7, pc}
	...

0800c72c <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800c72c:	b580      	push	{r7, lr}
 800c72e:	b084      	sub	sp, #16
 800c730:	af00      	add	r7, sp, #0
 800c732:	6078      	str	r0, [r7, #4]
 800c734:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d106      	bne.n	800c74a <pbuf_remove_header+0x1e>
 800c73c:	4b20      	ldr	r3, [pc, #128]	@ (800c7c0 <pbuf_remove_header+0x94>)
 800c73e:	f240 224b 	movw	r2, #587	@ 0x24b
 800c742:	4920      	ldr	r1, [pc, #128]	@ (800c7c4 <pbuf_remove_header+0x98>)
 800c744:	4820      	ldr	r0, [pc, #128]	@ (800c7c8 <pbuf_remove_header+0x9c>)
 800c746:	f009 fde3 	bl	8016310 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	d003      	beq.n	800c758 <pbuf_remove_header+0x2c>
 800c750:	683b      	ldr	r3, [r7, #0]
 800c752:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c756:	d301      	bcc.n	800c75c <pbuf_remove_header+0x30>
    return 1;
 800c758:	2301      	movs	r3, #1
 800c75a:	e02c      	b.n	800c7b6 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800c75c:	683b      	ldr	r3, [r7, #0]
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d101      	bne.n	800c766 <pbuf_remove_header+0x3a>
    return 0;
 800c762:	2300      	movs	r3, #0
 800c764:	e027      	b.n	800c7b6 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800c766:	683b      	ldr	r3, [r7, #0]
 800c768:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	895b      	ldrh	r3, [r3, #10]
 800c76e:	89fa      	ldrh	r2, [r7, #14]
 800c770:	429a      	cmp	r2, r3
 800c772:	d908      	bls.n	800c786 <pbuf_remove_header+0x5a>
 800c774:	4b12      	ldr	r3, [pc, #72]	@ (800c7c0 <pbuf_remove_header+0x94>)
 800c776:	f240 2255 	movw	r2, #597	@ 0x255
 800c77a:	4914      	ldr	r1, [pc, #80]	@ (800c7cc <pbuf_remove_header+0xa0>)
 800c77c:	4812      	ldr	r0, [pc, #72]	@ (800c7c8 <pbuf_remove_header+0x9c>)
 800c77e:	f009 fdc7 	bl	8016310 <iprintf>
 800c782:	2301      	movs	r3, #1
 800c784:	e017      	b.n	800c7b6 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	685b      	ldr	r3, [r3, #4]
 800c78a:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	685a      	ldr	r2, [r3, #4]
 800c790:	683b      	ldr	r3, [r7, #0]
 800c792:	441a      	add	r2, r3
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	895a      	ldrh	r2, [r3, #10]
 800c79c:	89fb      	ldrh	r3, [r7, #14]
 800c79e:	1ad3      	subs	r3, r2, r3
 800c7a0:	b29a      	uxth	r2, r3
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	891a      	ldrh	r2, [r3, #8]
 800c7aa:	89fb      	ldrh	r3, [r7, #14]
 800c7ac:	1ad3      	subs	r3, r2, r3
 800c7ae:	b29a      	uxth	r2, r3
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800c7b4:	2300      	movs	r3, #0
}
 800c7b6:	4618      	mov	r0, r3
 800c7b8:	3710      	adds	r7, #16
 800c7ba:	46bd      	mov	sp, r7
 800c7bc:	bd80      	pop	{r7, pc}
 800c7be:	bf00      	nop
 800c7c0:	08018958 	.word	0x08018958
 800c7c4:	08018abc 	.word	0x08018abc
 800c7c8:	080189b8 	.word	0x080189b8
 800c7cc:	08018ac8 	.word	0x08018ac8

0800c7d0 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800c7d0:	b580      	push	{r7, lr}
 800c7d2:	b082      	sub	sp, #8
 800c7d4:	af00      	add	r7, sp, #0
 800c7d6:	6078      	str	r0, [r7, #4]
 800c7d8:	460b      	mov	r3, r1
 800c7da:	807b      	strh	r3, [r7, #2]
 800c7dc:	4613      	mov	r3, r2
 800c7de:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800c7e0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	da08      	bge.n	800c7fa <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800c7e8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c7ec:	425b      	negs	r3, r3
 800c7ee:	4619      	mov	r1, r3
 800c7f0:	6878      	ldr	r0, [r7, #4]
 800c7f2:	f7ff ff9b 	bl	800c72c <pbuf_remove_header>
 800c7f6:	4603      	mov	r3, r0
 800c7f8:	e007      	b.n	800c80a <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800c7fa:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c7fe:	787a      	ldrb	r2, [r7, #1]
 800c800:	4619      	mov	r1, r3
 800c802:	6878      	ldr	r0, [r7, #4]
 800c804:	f7ff ff1a 	bl	800c63c <pbuf_add_header_impl>
 800c808:	4603      	mov	r3, r0
  }
}
 800c80a:	4618      	mov	r0, r3
 800c80c:	3708      	adds	r7, #8
 800c80e:	46bd      	mov	sp, r7
 800c810:	bd80      	pop	{r7, pc}

0800c812 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800c812:	b580      	push	{r7, lr}
 800c814:	b082      	sub	sp, #8
 800c816:	af00      	add	r7, sp, #0
 800c818:	6078      	str	r0, [r7, #4]
 800c81a:	460b      	mov	r3, r1
 800c81c:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800c81e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c822:	2201      	movs	r2, #1
 800c824:	4619      	mov	r1, r3
 800c826:	6878      	ldr	r0, [r7, #4]
 800c828:	f7ff ffd2 	bl	800c7d0 <pbuf_header_impl>
 800c82c:	4603      	mov	r3, r0
}
 800c82e:	4618      	mov	r0, r3
 800c830:	3708      	adds	r7, #8
 800c832:	46bd      	mov	sp, r7
 800c834:	bd80      	pop	{r7, pc}
	...

0800c838 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800c838:	b580      	push	{r7, lr}
 800c83a:	b088      	sub	sp, #32
 800c83c:	af00      	add	r7, sp, #0
 800c83e:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	2b00      	cmp	r3, #0
 800c844:	d10b      	bne.n	800c85e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	2b00      	cmp	r3, #0
 800c84a:	d106      	bne.n	800c85a <pbuf_free+0x22>
 800c84c:	4b3b      	ldr	r3, [pc, #236]	@ (800c93c <pbuf_free+0x104>)
 800c84e:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 800c852:	493b      	ldr	r1, [pc, #236]	@ (800c940 <pbuf_free+0x108>)
 800c854:	483b      	ldr	r0, [pc, #236]	@ (800c944 <pbuf_free+0x10c>)
 800c856:	f009 fd5b 	bl	8016310 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800c85a:	2300      	movs	r3, #0
 800c85c:	e069      	b.n	800c932 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800c85e:	2300      	movs	r3, #0
 800c860:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800c862:	e062      	b.n	800c92a <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800c864:	f009 fc36 	bl	80160d4 <sys_arch_protect>
 800c868:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	7b9b      	ldrb	r3, [r3, #14]
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d106      	bne.n	800c880 <pbuf_free+0x48>
 800c872:	4b32      	ldr	r3, [pc, #200]	@ (800c93c <pbuf_free+0x104>)
 800c874:	f240 22f1 	movw	r2, #753	@ 0x2f1
 800c878:	4933      	ldr	r1, [pc, #204]	@ (800c948 <pbuf_free+0x110>)
 800c87a:	4832      	ldr	r0, [pc, #200]	@ (800c944 <pbuf_free+0x10c>)
 800c87c:	f009 fd48 	bl	8016310 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	7b9b      	ldrb	r3, [r3, #14]
 800c884:	3b01      	subs	r3, #1
 800c886:	b2da      	uxtb	r2, r3
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	739a      	strb	r2, [r3, #14]
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	7b9b      	ldrb	r3, [r3, #14]
 800c890:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800c892:	69b8      	ldr	r0, [r7, #24]
 800c894:	f009 fc2c 	bl	80160f0 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800c898:	7dfb      	ldrb	r3, [r7, #23]
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d143      	bne.n	800c926 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	7b1b      	ldrb	r3, [r3, #12]
 800c8a8:	f003 030f 	and.w	r3, r3, #15
 800c8ac:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	7b5b      	ldrb	r3, [r3, #13]
 800c8b2:	f003 0302 	and.w	r3, r3, #2
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d011      	beq.n	800c8de <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800c8be:	68bb      	ldr	r3, [r7, #8]
 800c8c0:	691b      	ldr	r3, [r3, #16]
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	d106      	bne.n	800c8d4 <pbuf_free+0x9c>
 800c8c6:	4b1d      	ldr	r3, [pc, #116]	@ (800c93c <pbuf_free+0x104>)
 800c8c8:	f240 22ff 	movw	r2, #767	@ 0x2ff
 800c8cc:	491f      	ldr	r1, [pc, #124]	@ (800c94c <pbuf_free+0x114>)
 800c8ce:	481d      	ldr	r0, [pc, #116]	@ (800c944 <pbuf_free+0x10c>)
 800c8d0:	f009 fd1e 	bl	8016310 <iprintf>
        pc->custom_free_function(p);
 800c8d4:	68bb      	ldr	r3, [r7, #8]
 800c8d6:	691b      	ldr	r3, [r3, #16]
 800c8d8:	6878      	ldr	r0, [r7, #4]
 800c8da:	4798      	blx	r3
 800c8dc:	e01d      	b.n	800c91a <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800c8de:	7bfb      	ldrb	r3, [r7, #15]
 800c8e0:	2b02      	cmp	r3, #2
 800c8e2:	d104      	bne.n	800c8ee <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800c8e4:	6879      	ldr	r1, [r7, #4]
 800c8e6:	200c      	movs	r0, #12
 800c8e8:	f7ff f902 	bl	800baf0 <memp_free>
 800c8ec:	e015      	b.n	800c91a <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800c8ee:	7bfb      	ldrb	r3, [r7, #15]
 800c8f0:	2b01      	cmp	r3, #1
 800c8f2:	d104      	bne.n	800c8fe <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800c8f4:	6879      	ldr	r1, [r7, #4]
 800c8f6:	200b      	movs	r0, #11
 800c8f8:	f7ff f8fa 	bl	800baf0 <memp_free>
 800c8fc:	e00d      	b.n	800c91a <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800c8fe:	7bfb      	ldrb	r3, [r7, #15]
 800c900:	2b00      	cmp	r3, #0
 800c902:	d103      	bne.n	800c90c <pbuf_free+0xd4>
          mem_free(p);
 800c904:	6878      	ldr	r0, [r7, #4]
 800c906:	f7fe fd3f 	bl	800b388 <mem_free>
 800c90a:	e006      	b.n	800c91a <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800c90c:	4b0b      	ldr	r3, [pc, #44]	@ (800c93c <pbuf_free+0x104>)
 800c90e:	f240 320f 	movw	r2, #783	@ 0x30f
 800c912:	490f      	ldr	r1, [pc, #60]	@ (800c950 <pbuf_free+0x118>)
 800c914:	480b      	ldr	r0, [pc, #44]	@ (800c944 <pbuf_free+0x10c>)
 800c916:	f009 fcfb 	bl	8016310 <iprintf>
        }
      }
      count++;
 800c91a:	7ffb      	ldrb	r3, [r7, #31]
 800c91c:	3301      	adds	r3, #1
 800c91e:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800c920:	693b      	ldr	r3, [r7, #16]
 800c922:	607b      	str	r3, [r7, #4]
 800c924:	e001      	b.n	800c92a <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800c926:	2300      	movs	r3, #0
 800c928:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d199      	bne.n	800c864 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800c930:	7ffb      	ldrb	r3, [r7, #31]
}
 800c932:	4618      	mov	r0, r3
 800c934:	3720      	adds	r7, #32
 800c936:	46bd      	mov	sp, r7
 800c938:	bd80      	pop	{r7, pc}
 800c93a:	bf00      	nop
 800c93c:	08018958 	.word	0x08018958
 800c940:	08018abc 	.word	0x08018abc
 800c944:	080189b8 	.word	0x080189b8
 800c948:	08018ae8 	.word	0x08018ae8
 800c94c:	08018b00 	.word	0x08018b00
 800c950:	08018b24 	.word	0x08018b24

0800c954 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800c954:	b480      	push	{r7}
 800c956:	b085      	sub	sp, #20
 800c958:	af00      	add	r7, sp, #0
 800c95a:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800c95c:	2300      	movs	r3, #0
 800c95e:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800c960:	e005      	b.n	800c96e <pbuf_clen+0x1a>
    ++len;
 800c962:	89fb      	ldrh	r3, [r7, #14]
 800c964:	3301      	adds	r3, #1
 800c966:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	681b      	ldr	r3, [r3, #0]
 800c96c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	2b00      	cmp	r3, #0
 800c972:	d1f6      	bne.n	800c962 <pbuf_clen+0xe>
  }
  return len;
 800c974:	89fb      	ldrh	r3, [r7, #14]
}
 800c976:	4618      	mov	r0, r3
 800c978:	3714      	adds	r7, #20
 800c97a:	46bd      	mov	sp, r7
 800c97c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c980:	4770      	bx	lr
	...

0800c984 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800c984:	b580      	push	{r7, lr}
 800c986:	b084      	sub	sp, #16
 800c988:	af00      	add	r7, sp, #0
 800c98a:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	2b00      	cmp	r3, #0
 800c990:	d016      	beq.n	800c9c0 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800c992:	f009 fb9f 	bl	80160d4 <sys_arch_protect>
 800c996:	60f8      	str	r0, [r7, #12]
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	7b9b      	ldrb	r3, [r3, #14]
 800c99c:	3301      	adds	r3, #1
 800c99e:	b2da      	uxtb	r2, r3
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	739a      	strb	r2, [r3, #14]
 800c9a4:	68f8      	ldr	r0, [r7, #12]
 800c9a6:	f009 fba3 	bl	80160f0 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	7b9b      	ldrb	r3, [r3, #14]
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d106      	bne.n	800c9c0 <pbuf_ref+0x3c>
 800c9b2:	4b05      	ldr	r3, [pc, #20]	@ (800c9c8 <pbuf_ref+0x44>)
 800c9b4:	f240 3242 	movw	r2, #834	@ 0x342
 800c9b8:	4904      	ldr	r1, [pc, #16]	@ (800c9cc <pbuf_ref+0x48>)
 800c9ba:	4805      	ldr	r0, [pc, #20]	@ (800c9d0 <pbuf_ref+0x4c>)
 800c9bc:	f009 fca8 	bl	8016310 <iprintf>
  }
}
 800c9c0:	bf00      	nop
 800c9c2:	3710      	adds	r7, #16
 800c9c4:	46bd      	mov	sp, r7
 800c9c6:	bd80      	pop	{r7, pc}
 800c9c8:	08018958 	.word	0x08018958
 800c9cc:	08018b38 	.word	0x08018b38
 800c9d0:	080189b8 	.word	0x080189b8

0800c9d4 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800c9d4:	b580      	push	{r7, lr}
 800c9d6:	b084      	sub	sp, #16
 800c9d8:	af00      	add	r7, sp, #0
 800c9da:	6078      	str	r0, [r7, #4]
 800c9dc:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d002      	beq.n	800c9ea <pbuf_cat+0x16>
 800c9e4:	683b      	ldr	r3, [r7, #0]
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d107      	bne.n	800c9fa <pbuf_cat+0x26>
 800c9ea:	4b20      	ldr	r3, [pc, #128]	@ (800ca6c <pbuf_cat+0x98>)
 800c9ec:	f240 3259 	movw	r2, #857	@ 0x359
 800c9f0:	491f      	ldr	r1, [pc, #124]	@ (800ca70 <pbuf_cat+0x9c>)
 800c9f2:	4820      	ldr	r0, [pc, #128]	@ (800ca74 <pbuf_cat+0xa0>)
 800c9f4:	f009 fc8c 	bl	8016310 <iprintf>
 800c9f8:	e034      	b.n	800ca64 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	60fb      	str	r3, [r7, #12]
 800c9fe:	e00a      	b.n	800ca16 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800ca00:	68fb      	ldr	r3, [r7, #12]
 800ca02:	891a      	ldrh	r2, [r3, #8]
 800ca04:	683b      	ldr	r3, [r7, #0]
 800ca06:	891b      	ldrh	r3, [r3, #8]
 800ca08:	4413      	add	r3, r2
 800ca0a:	b29a      	uxth	r2, r3
 800ca0c:	68fb      	ldr	r3, [r7, #12]
 800ca0e:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800ca10:	68fb      	ldr	r3, [r7, #12]
 800ca12:	681b      	ldr	r3, [r3, #0]
 800ca14:	60fb      	str	r3, [r7, #12]
 800ca16:	68fb      	ldr	r3, [r7, #12]
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	d1f0      	bne.n	800ca00 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800ca1e:	68fb      	ldr	r3, [r7, #12]
 800ca20:	891a      	ldrh	r2, [r3, #8]
 800ca22:	68fb      	ldr	r3, [r7, #12]
 800ca24:	895b      	ldrh	r3, [r3, #10]
 800ca26:	429a      	cmp	r2, r3
 800ca28:	d006      	beq.n	800ca38 <pbuf_cat+0x64>
 800ca2a:	4b10      	ldr	r3, [pc, #64]	@ (800ca6c <pbuf_cat+0x98>)
 800ca2c:	f240 3262 	movw	r2, #866	@ 0x362
 800ca30:	4911      	ldr	r1, [pc, #68]	@ (800ca78 <pbuf_cat+0xa4>)
 800ca32:	4810      	ldr	r0, [pc, #64]	@ (800ca74 <pbuf_cat+0xa0>)
 800ca34:	f009 fc6c 	bl	8016310 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800ca38:	68fb      	ldr	r3, [r7, #12]
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	d006      	beq.n	800ca4e <pbuf_cat+0x7a>
 800ca40:	4b0a      	ldr	r3, [pc, #40]	@ (800ca6c <pbuf_cat+0x98>)
 800ca42:	f240 3263 	movw	r2, #867	@ 0x363
 800ca46:	490d      	ldr	r1, [pc, #52]	@ (800ca7c <pbuf_cat+0xa8>)
 800ca48:	480a      	ldr	r0, [pc, #40]	@ (800ca74 <pbuf_cat+0xa0>)
 800ca4a:	f009 fc61 	bl	8016310 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800ca4e:	68fb      	ldr	r3, [r7, #12]
 800ca50:	891a      	ldrh	r2, [r3, #8]
 800ca52:	683b      	ldr	r3, [r7, #0]
 800ca54:	891b      	ldrh	r3, [r3, #8]
 800ca56:	4413      	add	r3, r2
 800ca58:	b29a      	uxth	r2, r3
 800ca5a:	68fb      	ldr	r3, [r7, #12]
 800ca5c:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	683a      	ldr	r2, [r7, #0]
 800ca62:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800ca64:	3710      	adds	r7, #16
 800ca66:	46bd      	mov	sp, r7
 800ca68:	bd80      	pop	{r7, pc}
 800ca6a:	bf00      	nop
 800ca6c:	08018958 	.word	0x08018958
 800ca70:	08018b4c 	.word	0x08018b4c
 800ca74:	080189b8 	.word	0x080189b8
 800ca78:	08018b84 	.word	0x08018b84
 800ca7c:	08018bb4 	.word	0x08018bb4

0800ca80 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800ca80:	b580      	push	{r7, lr}
 800ca82:	b086      	sub	sp, #24
 800ca84:	af00      	add	r7, sp, #0
 800ca86:	6078      	str	r0, [r7, #4]
 800ca88:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800ca8a:	2300      	movs	r3, #0
 800ca8c:	617b      	str	r3, [r7, #20]
 800ca8e:	2300      	movs	r3, #0
 800ca90:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d008      	beq.n	800caaa <pbuf_copy+0x2a>
 800ca98:	683b      	ldr	r3, [r7, #0]
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d005      	beq.n	800caaa <pbuf_copy+0x2a>
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	891a      	ldrh	r2, [r3, #8]
 800caa2:	683b      	ldr	r3, [r7, #0]
 800caa4:	891b      	ldrh	r3, [r3, #8]
 800caa6:	429a      	cmp	r2, r3
 800caa8:	d209      	bcs.n	800cabe <pbuf_copy+0x3e>
 800caaa:	4b57      	ldr	r3, [pc, #348]	@ (800cc08 <pbuf_copy+0x188>)
 800caac:	f240 32c9 	movw	r2, #969	@ 0x3c9
 800cab0:	4956      	ldr	r1, [pc, #344]	@ (800cc0c <pbuf_copy+0x18c>)
 800cab2:	4857      	ldr	r0, [pc, #348]	@ (800cc10 <pbuf_copy+0x190>)
 800cab4:	f009 fc2c 	bl	8016310 <iprintf>
 800cab8:	f06f 030f 	mvn.w	r3, #15
 800cabc:	e09f      	b.n	800cbfe <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	895b      	ldrh	r3, [r3, #10]
 800cac2:	461a      	mov	r2, r3
 800cac4:	697b      	ldr	r3, [r7, #20]
 800cac6:	1ad2      	subs	r2, r2, r3
 800cac8:	683b      	ldr	r3, [r7, #0]
 800caca:	895b      	ldrh	r3, [r3, #10]
 800cacc:	4619      	mov	r1, r3
 800cace:	693b      	ldr	r3, [r7, #16]
 800cad0:	1acb      	subs	r3, r1, r3
 800cad2:	429a      	cmp	r2, r3
 800cad4:	d306      	bcc.n	800cae4 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800cad6:	683b      	ldr	r3, [r7, #0]
 800cad8:	895b      	ldrh	r3, [r3, #10]
 800cada:	461a      	mov	r2, r3
 800cadc:	693b      	ldr	r3, [r7, #16]
 800cade:	1ad3      	subs	r3, r2, r3
 800cae0:	60fb      	str	r3, [r7, #12]
 800cae2:	e005      	b.n	800caf0 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	895b      	ldrh	r3, [r3, #10]
 800cae8:	461a      	mov	r2, r3
 800caea:	697b      	ldr	r3, [r7, #20]
 800caec:	1ad3      	subs	r3, r2, r3
 800caee:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	685a      	ldr	r2, [r3, #4]
 800caf4:	697b      	ldr	r3, [r7, #20]
 800caf6:	18d0      	adds	r0, r2, r3
 800caf8:	683b      	ldr	r3, [r7, #0]
 800cafa:	685a      	ldr	r2, [r3, #4]
 800cafc:	693b      	ldr	r3, [r7, #16]
 800cafe:	4413      	add	r3, r2
 800cb00:	68fa      	ldr	r2, [r7, #12]
 800cb02:	4619      	mov	r1, r3
 800cb04:	f009 fd6f 	bl	80165e6 <memcpy>
    offset_to += len;
 800cb08:	697a      	ldr	r2, [r7, #20]
 800cb0a:	68fb      	ldr	r3, [r7, #12]
 800cb0c:	4413      	add	r3, r2
 800cb0e:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800cb10:	693a      	ldr	r2, [r7, #16]
 800cb12:	68fb      	ldr	r3, [r7, #12]
 800cb14:	4413      	add	r3, r2
 800cb16:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	895b      	ldrh	r3, [r3, #10]
 800cb1c:	461a      	mov	r2, r3
 800cb1e:	697b      	ldr	r3, [r7, #20]
 800cb20:	4293      	cmp	r3, r2
 800cb22:	d906      	bls.n	800cb32 <pbuf_copy+0xb2>
 800cb24:	4b38      	ldr	r3, [pc, #224]	@ (800cc08 <pbuf_copy+0x188>)
 800cb26:	f240 32d9 	movw	r2, #985	@ 0x3d9
 800cb2a:	493a      	ldr	r1, [pc, #232]	@ (800cc14 <pbuf_copy+0x194>)
 800cb2c:	4838      	ldr	r0, [pc, #224]	@ (800cc10 <pbuf_copy+0x190>)
 800cb2e:	f009 fbef 	bl	8016310 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800cb32:	683b      	ldr	r3, [r7, #0]
 800cb34:	895b      	ldrh	r3, [r3, #10]
 800cb36:	461a      	mov	r2, r3
 800cb38:	693b      	ldr	r3, [r7, #16]
 800cb3a:	4293      	cmp	r3, r2
 800cb3c:	d906      	bls.n	800cb4c <pbuf_copy+0xcc>
 800cb3e:	4b32      	ldr	r3, [pc, #200]	@ (800cc08 <pbuf_copy+0x188>)
 800cb40:	f240 32da 	movw	r2, #986	@ 0x3da
 800cb44:	4934      	ldr	r1, [pc, #208]	@ (800cc18 <pbuf_copy+0x198>)
 800cb46:	4832      	ldr	r0, [pc, #200]	@ (800cc10 <pbuf_copy+0x190>)
 800cb48:	f009 fbe2 	bl	8016310 <iprintf>
    if (offset_from >= p_from->len) {
 800cb4c:	683b      	ldr	r3, [r7, #0]
 800cb4e:	895b      	ldrh	r3, [r3, #10]
 800cb50:	461a      	mov	r2, r3
 800cb52:	693b      	ldr	r3, [r7, #16]
 800cb54:	4293      	cmp	r3, r2
 800cb56:	d304      	bcc.n	800cb62 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800cb58:	2300      	movs	r3, #0
 800cb5a:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800cb5c:	683b      	ldr	r3, [r7, #0]
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	895b      	ldrh	r3, [r3, #10]
 800cb66:	461a      	mov	r2, r3
 800cb68:	697b      	ldr	r3, [r7, #20]
 800cb6a:	4293      	cmp	r3, r2
 800cb6c:	d114      	bne.n	800cb98 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800cb6e:	2300      	movs	r3, #0
 800cb70:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	681b      	ldr	r3, [r3, #0]
 800cb76:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d10c      	bne.n	800cb98 <pbuf_copy+0x118>
 800cb7e:	683b      	ldr	r3, [r7, #0]
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	d009      	beq.n	800cb98 <pbuf_copy+0x118>
 800cb84:	4b20      	ldr	r3, [pc, #128]	@ (800cc08 <pbuf_copy+0x188>)
 800cb86:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 800cb8a:	4924      	ldr	r1, [pc, #144]	@ (800cc1c <pbuf_copy+0x19c>)
 800cb8c:	4820      	ldr	r0, [pc, #128]	@ (800cc10 <pbuf_copy+0x190>)
 800cb8e:	f009 fbbf 	bl	8016310 <iprintf>
 800cb92:	f06f 030f 	mvn.w	r3, #15
 800cb96:	e032      	b.n	800cbfe <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800cb98:	683b      	ldr	r3, [r7, #0]
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	d013      	beq.n	800cbc6 <pbuf_copy+0x146>
 800cb9e:	683b      	ldr	r3, [r7, #0]
 800cba0:	895a      	ldrh	r2, [r3, #10]
 800cba2:	683b      	ldr	r3, [r7, #0]
 800cba4:	891b      	ldrh	r3, [r3, #8]
 800cba6:	429a      	cmp	r2, r3
 800cba8:	d10d      	bne.n	800cbc6 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800cbaa:	683b      	ldr	r3, [r7, #0]
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	d009      	beq.n	800cbc6 <pbuf_copy+0x146>
 800cbb2:	4b15      	ldr	r3, [pc, #84]	@ (800cc08 <pbuf_copy+0x188>)
 800cbb4:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 800cbb8:	4919      	ldr	r1, [pc, #100]	@ (800cc20 <pbuf_copy+0x1a0>)
 800cbba:	4815      	ldr	r0, [pc, #84]	@ (800cc10 <pbuf_copy+0x190>)
 800cbbc:	f009 fba8 	bl	8016310 <iprintf>
 800cbc0:	f06f 0305 	mvn.w	r3, #5
 800cbc4:	e01b      	b.n	800cbfe <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d013      	beq.n	800cbf4 <pbuf_copy+0x174>
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	895a      	ldrh	r2, [r3, #10]
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	891b      	ldrh	r3, [r3, #8]
 800cbd4:	429a      	cmp	r2, r3
 800cbd6:	d10d      	bne.n	800cbf4 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	681b      	ldr	r3, [r3, #0]
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d009      	beq.n	800cbf4 <pbuf_copy+0x174>
 800cbe0:	4b09      	ldr	r3, [pc, #36]	@ (800cc08 <pbuf_copy+0x188>)
 800cbe2:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 800cbe6:	490e      	ldr	r1, [pc, #56]	@ (800cc20 <pbuf_copy+0x1a0>)
 800cbe8:	4809      	ldr	r0, [pc, #36]	@ (800cc10 <pbuf_copy+0x190>)
 800cbea:	f009 fb91 	bl	8016310 <iprintf>
 800cbee:	f06f 0305 	mvn.w	r3, #5
 800cbf2:	e004      	b.n	800cbfe <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800cbf4:	683b      	ldr	r3, [r7, #0]
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	f47f af61 	bne.w	800cabe <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800cbfc:	2300      	movs	r3, #0
}
 800cbfe:	4618      	mov	r0, r3
 800cc00:	3718      	adds	r7, #24
 800cc02:	46bd      	mov	sp, r7
 800cc04:	bd80      	pop	{r7, pc}
 800cc06:	bf00      	nop
 800cc08:	08018958 	.word	0x08018958
 800cc0c:	08018c00 	.word	0x08018c00
 800cc10:	080189b8 	.word	0x080189b8
 800cc14:	08018c30 	.word	0x08018c30
 800cc18:	08018c48 	.word	0x08018c48
 800cc1c:	08018c64 	.word	0x08018c64
 800cc20:	08018c74 	.word	0x08018c74

0800cc24 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800cc24:	b580      	push	{r7, lr}
 800cc26:	b088      	sub	sp, #32
 800cc28:	af00      	add	r7, sp, #0
 800cc2a:	60f8      	str	r0, [r7, #12]
 800cc2c:	60b9      	str	r1, [r7, #8]
 800cc2e:	4611      	mov	r1, r2
 800cc30:	461a      	mov	r2, r3
 800cc32:	460b      	mov	r3, r1
 800cc34:	80fb      	strh	r3, [r7, #6]
 800cc36:	4613      	mov	r3, r2
 800cc38:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800cc3a:	2300      	movs	r3, #0
 800cc3c:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800cc3e:	2300      	movs	r3, #0
 800cc40:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800cc42:	68fb      	ldr	r3, [r7, #12]
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d108      	bne.n	800cc5a <pbuf_copy_partial+0x36>
 800cc48:	4b2b      	ldr	r3, [pc, #172]	@ (800ccf8 <pbuf_copy_partial+0xd4>)
 800cc4a:	f240 420a 	movw	r2, #1034	@ 0x40a
 800cc4e:	492b      	ldr	r1, [pc, #172]	@ (800ccfc <pbuf_copy_partial+0xd8>)
 800cc50:	482b      	ldr	r0, [pc, #172]	@ (800cd00 <pbuf_copy_partial+0xdc>)
 800cc52:	f009 fb5d 	bl	8016310 <iprintf>
 800cc56:	2300      	movs	r3, #0
 800cc58:	e04a      	b.n	800ccf0 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800cc5a:	68bb      	ldr	r3, [r7, #8]
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	d108      	bne.n	800cc72 <pbuf_copy_partial+0x4e>
 800cc60:	4b25      	ldr	r3, [pc, #148]	@ (800ccf8 <pbuf_copy_partial+0xd4>)
 800cc62:	f240 420b 	movw	r2, #1035	@ 0x40b
 800cc66:	4927      	ldr	r1, [pc, #156]	@ (800cd04 <pbuf_copy_partial+0xe0>)
 800cc68:	4825      	ldr	r0, [pc, #148]	@ (800cd00 <pbuf_copy_partial+0xdc>)
 800cc6a:	f009 fb51 	bl	8016310 <iprintf>
 800cc6e:	2300      	movs	r3, #0
 800cc70:	e03e      	b.n	800ccf0 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800cc72:	68fb      	ldr	r3, [r7, #12]
 800cc74:	61fb      	str	r3, [r7, #28]
 800cc76:	e034      	b.n	800cce2 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800cc78:	88bb      	ldrh	r3, [r7, #4]
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	d00a      	beq.n	800cc94 <pbuf_copy_partial+0x70>
 800cc7e:	69fb      	ldr	r3, [r7, #28]
 800cc80:	895b      	ldrh	r3, [r3, #10]
 800cc82:	88ba      	ldrh	r2, [r7, #4]
 800cc84:	429a      	cmp	r2, r3
 800cc86:	d305      	bcc.n	800cc94 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800cc88:	69fb      	ldr	r3, [r7, #28]
 800cc8a:	895b      	ldrh	r3, [r3, #10]
 800cc8c:	88ba      	ldrh	r2, [r7, #4]
 800cc8e:	1ad3      	subs	r3, r2, r3
 800cc90:	80bb      	strh	r3, [r7, #4]
 800cc92:	e023      	b.n	800ccdc <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800cc94:	69fb      	ldr	r3, [r7, #28]
 800cc96:	895a      	ldrh	r2, [r3, #10]
 800cc98:	88bb      	ldrh	r3, [r7, #4]
 800cc9a:	1ad3      	subs	r3, r2, r3
 800cc9c:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800cc9e:	8b3a      	ldrh	r2, [r7, #24]
 800cca0:	88fb      	ldrh	r3, [r7, #6]
 800cca2:	429a      	cmp	r2, r3
 800cca4:	d901      	bls.n	800ccaa <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800cca6:	88fb      	ldrh	r3, [r7, #6]
 800cca8:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800ccaa:	8b7b      	ldrh	r3, [r7, #26]
 800ccac:	68ba      	ldr	r2, [r7, #8]
 800ccae:	18d0      	adds	r0, r2, r3
 800ccb0:	69fb      	ldr	r3, [r7, #28]
 800ccb2:	685a      	ldr	r2, [r3, #4]
 800ccb4:	88bb      	ldrh	r3, [r7, #4]
 800ccb6:	4413      	add	r3, r2
 800ccb8:	8b3a      	ldrh	r2, [r7, #24]
 800ccba:	4619      	mov	r1, r3
 800ccbc:	f009 fc93 	bl	80165e6 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800ccc0:	8afa      	ldrh	r2, [r7, #22]
 800ccc2:	8b3b      	ldrh	r3, [r7, #24]
 800ccc4:	4413      	add	r3, r2
 800ccc6:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800ccc8:	8b7a      	ldrh	r2, [r7, #26]
 800ccca:	8b3b      	ldrh	r3, [r7, #24]
 800cccc:	4413      	add	r3, r2
 800ccce:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800ccd0:	88fa      	ldrh	r2, [r7, #6]
 800ccd2:	8b3b      	ldrh	r3, [r7, #24]
 800ccd4:	1ad3      	subs	r3, r2, r3
 800ccd6:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800ccd8:	2300      	movs	r3, #0
 800ccda:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800ccdc:	69fb      	ldr	r3, [r7, #28]
 800ccde:	681b      	ldr	r3, [r3, #0]
 800cce0:	61fb      	str	r3, [r7, #28]
 800cce2:	88fb      	ldrh	r3, [r7, #6]
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d002      	beq.n	800ccee <pbuf_copy_partial+0xca>
 800cce8:	69fb      	ldr	r3, [r7, #28]
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	d1c4      	bne.n	800cc78 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800ccee:	8afb      	ldrh	r3, [r7, #22]
}
 800ccf0:	4618      	mov	r0, r3
 800ccf2:	3720      	adds	r7, #32
 800ccf4:	46bd      	mov	sp, r7
 800ccf6:	bd80      	pop	{r7, pc}
 800ccf8:	08018958 	.word	0x08018958
 800ccfc:	08018ca0 	.word	0x08018ca0
 800cd00:	080189b8 	.word	0x080189b8
 800cd04:	08018cc0 	.word	0x08018cc0

0800cd08 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800cd08:	b580      	push	{r7, lr}
 800cd0a:	b084      	sub	sp, #16
 800cd0c:	af00      	add	r7, sp, #0
 800cd0e:	4603      	mov	r3, r0
 800cd10:	603a      	str	r2, [r7, #0]
 800cd12:	71fb      	strb	r3, [r7, #7]
 800cd14:	460b      	mov	r3, r1
 800cd16:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800cd18:	683b      	ldr	r3, [r7, #0]
 800cd1a:	8919      	ldrh	r1, [r3, #8]
 800cd1c:	88ba      	ldrh	r2, [r7, #4]
 800cd1e:	79fb      	ldrb	r3, [r7, #7]
 800cd20:	4618      	mov	r0, r3
 800cd22:	f7ff faa5 	bl	800c270 <pbuf_alloc>
 800cd26:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800cd28:	68fb      	ldr	r3, [r7, #12]
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	d101      	bne.n	800cd32 <pbuf_clone+0x2a>
    return NULL;
 800cd2e:	2300      	movs	r3, #0
 800cd30:	e011      	b.n	800cd56 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800cd32:	6839      	ldr	r1, [r7, #0]
 800cd34:	68f8      	ldr	r0, [r7, #12]
 800cd36:	f7ff fea3 	bl	800ca80 <pbuf_copy>
 800cd3a:	4603      	mov	r3, r0
 800cd3c:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800cd3e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	d006      	beq.n	800cd54 <pbuf_clone+0x4c>
 800cd46:	4b06      	ldr	r3, [pc, #24]	@ (800cd60 <pbuf_clone+0x58>)
 800cd48:	f240 5224 	movw	r2, #1316	@ 0x524
 800cd4c:	4905      	ldr	r1, [pc, #20]	@ (800cd64 <pbuf_clone+0x5c>)
 800cd4e:	4806      	ldr	r0, [pc, #24]	@ (800cd68 <pbuf_clone+0x60>)
 800cd50:	f009 fade 	bl	8016310 <iprintf>
  return q;
 800cd54:	68fb      	ldr	r3, [r7, #12]
}
 800cd56:	4618      	mov	r0, r3
 800cd58:	3710      	adds	r7, #16
 800cd5a:	46bd      	mov	sp, r7
 800cd5c:	bd80      	pop	{r7, pc}
 800cd5e:	bf00      	nop
 800cd60:	08018958 	.word	0x08018958
 800cd64:	08018dcc 	.word	0x08018dcc
 800cd68:	080189b8 	.word	0x080189b8

0800cd6c <sys_msleep>:
 *
 * @param ms number of milliseconds to sleep
 */
void
sys_msleep(u32_t ms)
{
 800cd6c:	b580      	push	{r7, lr}
 800cd6e:	b084      	sub	sp, #16
 800cd70:	af00      	add	r7, sp, #0
 800cd72:	6078      	str	r0, [r7, #4]
  if (ms > 0) {
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	d016      	beq.n	800cda8 <sys_msleep+0x3c>
    sys_sem_t delaysem;
    err_t err = sys_sem_new(&delaysem, 0);
 800cd7a:	f107 0308 	add.w	r3, r7, #8
 800cd7e:	2100      	movs	r1, #0
 800cd80:	4618      	mov	r0, r3
 800cd82:	f009 f8aa 	bl	8015eda <sys_sem_new>
 800cd86:	4603      	mov	r3, r0
 800cd88:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800cd8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	d10a      	bne.n	800cda8 <sys_msleep+0x3c>
      sys_arch_sem_wait(&delaysem, ms);
 800cd92:	f107 0308 	add.w	r3, r7, #8
 800cd96:	6879      	ldr	r1, [r7, #4]
 800cd98:	4618      	mov	r0, r3
 800cd9a:	f009 f8c6 	bl	8015f2a <sys_arch_sem_wait>
      sys_sem_free(&delaysem);
 800cd9e:	f107 0308 	add.w	r3, r7, #8
 800cda2:	4618      	mov	r0, r3
 800cda4:	f009 f8ff 	bl	8015fa6 <sys_sem_free>
    }
  }
}
 800cda8:	bf00      	nop
 800cdaa:	3710      	adds	r7, #16
 800cdac:	46bd      	mov	sp, r7
 800cdae:	bd80      	pop	{r7, pc}

0800cdb0 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800cdb0:	b580      	push	{r7, lr}
 800cdb2:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800cdb4:	f009 f9ac 	bl	8016110 <rand>
 800cdb8:	4603      	mov	r3, r0
 800cdba:	b29b      	uxth	r3, r3
 800cdbc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800cdc0:	b29b      	uxth	r3, r3
 800cdc2:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800cdc6:	b29a      	uxth	r2, r3
 800cdc8:	4b01      	ldr	r3, [pc, #4]	@ (800cdd0 <tcp_init+0x20>)
 800cdca:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800cdcc:	bf00      	nop
 800cdce:	bd80      	pop	{r7, pc}
 800cdd0:	20000124 	.word	0x20000124

0800cdd4 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800cdd4:	b580      	push	{r7, lr}
 800cdd6:	b082      	sub	sp, #8
 800cdd8:	af00      	add	r7, sp, #0
 800cdda:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	7d1b      	ldrb	r3, [r3, #20]
 800cde0:	2b01      	cmp	r3, #1
 800cde2:	d105      	bne.n	800cdf0 <tcp_free+0x1c>
 800cde4:	4b06      	ldr	r3, [pc, #24]	@ (800ce00 <tcp_free+0x2c>)
 800cde6:	22d4      	movs	r2, #212	@ 0xd4
 800cde8:	4906      	ldr	r1, [pc, #24]	@ (800ce04 <tcp_free+0x30>)
 800cdea:	4807      	ldr	r0, [pc, #28]	@ (800ce08 <tcp_free+0x34>)
 800cdec:	f009 fa90 	bl	8016310 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800cdf0:	6879      	ldr	r1, [r7, #4]
 800cdf2:	2001      	movs	r0, #1
 800cdf4:	f7fe fe7c 	bl	800baf0 <memp_free>
}
 800cdf8:	bf00      	nop
 800cdfa:	3708      	adds	r7, #8
 800cdfc:	46bd      	mov	sp, r7
 800cdfe:	bd80      	pop	{r7, pc}
 800ce00:	08018e58 	.word	0x08018e58
 800ce04:	08018e88 	.word	0x08018e88
 800ce08:	08018e9c 	.word	0x08018e9c

0800ce0c <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800ce0c:	b580      	push	{r7, lr}
 800ce0e:	b082      	sub	sp, #8
 800ce10:	af00      	add	r7, sp, #0
 800ce12:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	7d1b      	ldrb	r3, [r3, #20]
 800ce18:	2b01      	cmp	r3, #1
 800ce1a:	d105      	bne.n	800ce28 <tcp_free_listen+0x1c>
 800ce1c:	4b06      	ldr	r3, [pc, #24]	@ (800ce38 <tcp_free_listen+0x2c>)
 800ce1e:	22df      	movs	r2, #223	@ 0xdf
 800ce20:	4906      	ldr	r1, [pc, #24]	@ (800ce3c <tcp_free_listen+0x30>)
 800ce22:	4807      	ldr	r0, [pc, #28]	@ (800ce40 <tcp_free_listen+0x34>)
 800ce24:	f009 fa74 	bl	8016310 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800ce28:	6879      	ldr	r1, [r7, #4]
 800ce2a:	2002      	movs	r0, #2
 800ce2c:	f7fe fe60 	bl	800baf0 <memp_free>
}
 800ce30:	bf00      	nop
 800ce32:	3708      	adds	r7, #8
 800ce34:	46bd      	mov	sp, r7
 800ce36:	bd80      	pop	{r7, pc}
 800ce38:	08018e58 	.word	0x08018e58
 800ce3c:	08018ec4 	.word	0x08018ec4
 800ce40:	08018e9c 	.word	0x08018e9c

0800ce44 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800ce44:	b580      	push	{r7, lr}
 800ce46:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800ce48:	f001 f8ac 	bl	800dfa4 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800ce4c:	4b07      	ldr	r3, [pc, #28]	@ (800ce6c <tcp_tmr+0x28>)
 800ce4e:	781b      	ldrb	r3, [r3, #0]
 800ce50:	3301      	adds	r3, #1
 800ce52:	b2da      	uxtb	r2, r3
 800ce54:	4b05      	ldr	r3, [pc, #20]	@ (800ce6c <tcp_tmr+0x28>)
 800ce56:	701a      	strb	r2, [r3, #0]
 800ce58:	4b04      	ldr	r3, [pc, #16]	@ (800ce6c <tcp_tmr+0x28>)
 800ce5a:	781b      	ldrb	r3, [r3, #0]
 800ce5c:	f003 0301 	and.w	r3, r3, #1
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	d001      	beq.n	800ce68 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800ce64:	f000 fd58 	bl	800d918 <tcp_slowtmr>
  }
}
 800ce68:	bf00      	nop
 800ce6a:	bd80      	pop	{r7, pc}
 800ce6c:	2000eb59 	.word	0x2000eb59

0800ce70 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800ce70:	b580      	push	{r7, lr}
 800ce72:	b084      	sub	sp, #16
 800ce74:	af00      	add	r7, sp, #0
 800ce76:	6078      	str	r0, [r7, #4]
 800ce78:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800ce7a:	683b      	ldr	r3, [r7, #0]
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	d105      	bne.n	800ce8c <tcp_remove_listener+0x1c>
 800ce80:	4b0d      	ldr	r3, [pc, #52]	@ (800ceb8 <tcp_remove_listener+0x48>)
 800ce82:	22ff      	movs	r2, #255	@ 0xff
 800ce84:	490d      	ldr	r1, [pc, #52]	@ (800cebc <tcp_remove_listener+0x4c>)
 800ce86:	480e      	ldr	r0, [pc, #56]	@ (800cec0 <tcp_remove_listener+0x50>)
 800ce88:	f009 fa42 	bl	8016310 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	60fb      	str	r3, [r7, #12]
 800ce90:	e00a      	b.n	800cea8 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800ce92:	68fb      	ldr	r3, [r7, #12]
 800ce94:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ce96:	683a      	ldr	r2, [r7, #0]
 800ce98:	429a      	cmp	r2, r3
 800ce9a:	d102      	bne.n	800cea2 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800ce9c:	68fb      	ldr	r3, [r7, #12]
 800ce9e:	2200      	movs	r2, #0
 800cea0:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800cea2:	68fb      	ldr	r3, [r7, #12]
 800cea4:	68db      	ldr	r3, [r3, #12]
 800cea6:	60fb      	str	r3, [r7, #12]
 800cea8:	68fb      	ldr	r3, [r7, #12]
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d1f1      	bne.n	800ce92 <tcp_remove_listener+0x22>
    }
  }
}
 800ceae:	bf00      	nop
 800ceb0:	bf00      	nop
 800ceb2:	3710      	adds	r7, #16
 800ceb4:	46bd      	mov	sp, r7
 800ceb6:	bd80      	pop	{r7, pc}
 800ceb8:	08018e58 	.word	0x08018e58
 800cebc:	08018ee0 	.word	0x08018ee0
 800cec0:	08018e9c 	.word	0x08018e9c

0800cec4 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800cec4:	b580      	push	{r7, lr}
 800cec6:	b084      	sub	sp, #16
 800cec8:	af00      	add	r7, sp, #0
 800ceca:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d106      	bne.n	800cee0 <tcp_listen_closed+0x1c>
 800ced2:	4b14      	ldr	r3, [pc, #80]	@ (800cf24 <tcp_listen_closed+0x60>)
 800ced4:	f240 1211 	movw	r2, #273	@ 0x111
 800ced8:	4913      	ldr	r1, [pc, #76]	@ (800cf28 <tcp_listen_closed+0x64>)
 800ceda:	4814      	ldr	r0, [pc, #80]	@ (800cf2c <tcp_listen_closed+0x68>)
 800cedc:	f009 fa18 	bl	8016310 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	7d1b      	ldrb	r3, [r3, #20]
 800cee4:	2b01      	cmp	r3, #1
 800cee6:	d006      	beq.n	800cef6 <tcp_listen_closed+0x32>
 800cee8:	4b0e      	ldr	r3, [pc, #56]	@ (800cf24 <tcp_listen_closed+0x60>)
 800ceea:	f44f 7289 	mov.w	r2, #274	@ 0x112
 800ceee:	4910      	ldr	r1, [pc, #64]	@ (800cf30 <tcp_listen_closed+0x6c>)
 800cef0:	480e      	ldr	r0, [pc, #56]	@ (800cf2c <tcp_listen_closed+0x68>)
 800cef2:	f009 fa0d 	bl	8016310 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800cef6:	2301      	movs	r3, #1
 800cef8:	60fb      	str	r3, [r7, #12]
 800cefa:	e00b      	b.n	800cf14 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800cefc:	4a0d      	ldr	r2, [pc, #52]	@ (800cf34 <tcp_listen_closed+0x70>)
 800cefe:	68fb      	ldr	r3, [r7, #12]
 800cf00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cf04:	681b      	ldr	r3, [r3, #0]
 800cf06:	6879      	ldr	r1, [r7, #4]
 800cf08:	4618      	mov	r0, r3
 800cf0a:	f7ff ffb1 	bl	800ce70 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800cf0e:	68fb      	ldr	r3, [r7, #12]
 800cf10:	3301      	adds	r3, #1
 800cf12:	60fb      	str	r3, [r7, #12]
 800cf14:	68fb      	ldr	r3, [r7, #12]
 800cf16:	2b03      	cmp	r3, #3
 800cf18:	d9f0      	bls.n	800cefc <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800cf1a:	bf00      	nop
 800cf1c:	bf00      	nop
 800cf1e:	3710      	adds	r7, #16
 800cf20:	46bd      	mov	sp, r7
 800cf22:	bd80      	pop	{r7, pc}
 800cf24:	08018e58 	.word	0x08018e58
 800cf28:	08018f08 	.word	0x08018f08
 800cf2c:	08018e9c 	.word	0x08018e9c
 800cf30:	08018f14 	.word	0x08018f14
 800cf34:	0801ae7c 	.word	0x0801ae7c

0800cf38 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800cf38:	b5b0      	push	{r4, r5, r7, lr}
 800cf3a:	b088      	sub	sp, #32
 800cf3c:	af04      	add	r7, sp, #16
 800cf3e:	6078      	str	r0, [r7, #4]
 800cf40:	460b      	mov	r3, r1
 800cf42:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	d106      	bne.n	800cf58 <tcp_close_shutdown+0x20>
 800cf4a:	4b63      	ldr	r3, [pc, #396]	@ (800d0d8 <tcp_close_shutdown+0x1a0>)
 800cf4c:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 800cf50:	4962      	ldr	r1, [pc, #392]	@ (800d0dc <tcp_close_shutdown+0x1a4>)
 800cf52:	4863      	ldr	r0, [pc, #396]	@ (800d0e0 <tcp_close_shutdown+0x1a8>)
 800cf54:	f009 f9dc 	bl	8016310 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800cf58:	78fb      	ldrb	r3, [r7, #3]
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	d066      	beq.n	800d02c <tcp_close_shutdown+0xf4>
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	7d1b      	ldrb	r3, [r3, #20]
 800cf62:	2b04      	cmp	r3, #4
 800cf64:	d003      	beq.n	800cf6e <tcp_close_shutdown+0x36>
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	7d1b      	ldrb	r3, [r3, #20]
 800cf6a:	2b07      	cmp	r3, #7
 800cf6c:	d15e      	bne.n	800d02c <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	d104      	bne.n	800cf80 <tcp_close_shutdown+0x48>
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800cf7a:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800cf7e:	d055      	beq.n	800d02c <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	8b5b      	ldrh	r3, [r3, #26]
 800cf84:	f003 0310 	and.w	r3, r3, #16
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	d106      	bne.n	800cf9a <tcp_close_shutdown+0x62>
 800cf8c:	4b52      	ldr	r3, [pc, #328]	@ (800d0d8 <tcp_close_shutdown+0x1a0>)
 800cf8e:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 800cf92:	4954      	ldr	r1, [pc, #336]	@ (800d0e4 <tcp_close_shutdown+0x1ac>)
 800cf94:	4852      	ldr	r0, [pc, #328]	@ (800d0e0 <tcp_close_shutdown+0x1a8>)
 800cf96:	f009 f9bb 	bl	8016310 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800cfa2:	687d      	ldr	r5, [r7, #4]
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	3304      	adds	r3, #4
 800cfa8:	687a      	ldr	r2, [r7, #4]
 800cfaa:	8ad2      	ldrh	r2, [r2, #22]
 800cfac:	6879      	ldr	r1, [r7, #4]
 800cfae:	8b09      	ldrh	r1, [r1, #24]
 800cfb0:	9102      	str	r1, [sp, #8]
 800cfb2:	9201      	str	r2, [sp, #4]
 800cfb4:	9300      	str	r3, [sp, #0]
 800cfb6:	462b      	mov	r3, r5
 800cfb8:	4622      	mov	r2, r4
 800cfba:	4601      	mov	r1, r0
 800cfbc:	6878      	ldr	r0, [r7, #4]
 800cfbe:	f005 fdc3 	bl	8012b48 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800cfc2:	6878      	ldr	r0, [r7, #4]
 800cfc4:	f001 fba6 	bl	800e714 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800cfc8:	4b47      	ldr	r3, [pc, #284]	@ (800d0e8 <tcp_close_shutdown+0x1b0>)
 800cfca:	681b      	ldr	r3, [r3, #0]
 800cfcc:	687a      	ldr	r2, [r7, #4]
 800cfce:	429a      	cmp	r2, r3
 800cfd0:	d105      	bne.n	800cfde <tcp_close_shutdown+0xa6>
 800cfd2:	4b45      	ldr	r3, [pc, #276]	@ (800d0e8 <tcp_close_shutdown+0x1b0>)
 800cfd4:	681b      	ldr	r3, [r3, #0]
 800cfd6:	68db      	ldr	r3, [r3, #12]
 800cfd8:	4a43      	ldr	r2, [pc, #268]	@ (800d0e8 <tcp_close_shutdown+0x1b0>)
 800cfda:	6013      	str	r3, [r2, #0]
 800cfdc:	e013      	b.n	800d006 <tcp_close_shutdown+0xce>
 800cfde:	4b42      	ldr	r3, [pc, #264]	@ (800d0e8 <tcp_close_shutdown+0x1b0>)
 800cfe0:	681b      	ldr	r3, [r3, #0]
 800cfe2:	60fb      	str	r3, [r7, #12]
 800cfe4:	e00c      	b.n	800d000 <tcp_close_shutdown+0xc8>
 800cfe6:	68fb      	ldr	r3, [r7, #12]
 800cfe8:	68db      	ldr	r3, [r3, #12]
 800cfea:	687a      	ldr	r2, [r7, #4]
 800cfec:	429a      	cmp	r2, r3
 800cfee:	d104      	bne.n	800cffa <tcp_close_shutdown+0xc2>
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	68da      	ldr	r2, [r3, #12]
 800cff4:	68fb      	ldr	r3, [r7, #12]
 800cff6:	60da      	str	r2, [r3, #12]
 800cff8:	e005      	b.n	800d006 <tcp_close_shutdown+0xce>
 800cffa:	68fb      	ldr	r3, [r7, #12]
 800cffc:	68db      	ldr	r3, [r3, #12]
 800cffe:	60fb      	str	r3, [r7, #12]
 800d000:	68fb      	ldr	r3, [r7, #12]
 800d002:	2b00      	cmp	r3, #0
 800d004:	d1ef      	bne.n	800cfe6 <tcp_close_shutdown+0xae>
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	2200      	movs	r2, #0
 800d00a:	60da      	str	r2, [r3, #12]
 800d00c:	4b37      	ldr	r3, [pc, #220]	@ (800d0ec <tcp_close_shutdown+0x1b4>)
 800d00e:	2201      	movs	r2, #1
 800d010:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800d012:	4b37      	ldr	r3, [pc, #220]	@ (800d0f0 <tcp_close_shutdown+0x1b8>)
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	687a      	ldr	r2, [r7, #4]
 800d018:	429a      	cmp	r2, r3
 800d01a:	d102      	bne.n	800d022 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800d01c:	f004 f83a 	bl	8011094 <tcp_trigger_input_pcb_close>
 800d020:	e002      	b.n	800d028 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800d022:	6878      	ldr	r0, [r7, #4]
 800d024:	f7ff fed6 	bl	800cdd4 <tcp_free>
      }
      return ERR_OK;
 800d028:	2300      	movs	r3, #0
 800d02a:	e050      	b.n	800d0ce <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	7d1b      	ldrb	r3, [r3, #20]
 800d030:	2b02      	cmp	r3, #2
 800d032:	d03b      	beq.n	800d0ac <tcp_close_shutdown+0x174>
 800d034:	2b02      	cmp	r3, #2
 800d036:	dc44      	bgt.n	800d0c2 <tcp_close_shutdown+0x18a>
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d002      	beq.n	800d042 <tcp_close_shutdown+0x10a>
 800d03c:	2b01      	cmp	r3, #1
 800d03e:	d02a      	beq.n	800d096 <tcp_close_shutdown+0x15e>
 800d040:	e03f      	b.n	800d0c2 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	8adb      	ldrh	r3, [r3, #22]
 800d046:	2b00      	cmp	r3, #0
 800d048:	d021      	beq.n	800d08e <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800d04a:	4b2a      	ldr	r3, [pc, #168]	@ (800d0f4 <tcp_close_shutdown+0x1bc>)
 800d04c:	681b      	ldr	r3, [r3, #0]
 800d04e:	687a      	ldr	r2, [r7, #4]
 800d050:	429a      	cmp	r2, r3
 800d052:	d105      	bne.n	800d060 <tcp_close_shutdown+0x128>
 800d054:	4b27      	ldr	r3, [pc, #156]	@ (800d0f4 <tcp_close_shutdown+0x1bc>)
 800d056:	681b      	ldr	r3, [r3, #0]
 800d058:	68db      	ldr	r3, [r3, #12]
 800d05a:	4a26      	ldr	r2, [pc, #152]	@ (800d0f4 <tcp_close_shutdown+0x1bc>)
 800d05c:	6013      	str	r3, [r2, #0]
 800d05e:	e013      	b.n	800d088 <tcp_close_shutdown+0x150>
 800d060:	4b24      	ldr	r3, [pc, #144]	@ (800d0f4 <tcp_close_shutdown+0x1bc>)
 800d062:	681b      	ldr	r3, [r3, #0]
 800d064:	60bb      	str	r3, [r7, #8]
 800d066:	e00c      	b.n	800d082 <tcp_close_shutdown+0x14a>
 800d068:	68bb      	ldr	r3, [r7, #8]
 800d06a:	68db      	ldr	r3, [r3, #12]
 800d06c:	687a      	ldr	r2, [r7, #4]
 800d06e:	429a      	cmp	r2, r3
 800d070:	d104      	bne.n	800d07c <tcp_close_shutdown+0x144>
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	68da      	ldr	r2, [r3, #12]
 800d076:	68bb      	ldr	r3, [r7, #8]
 800d078:	60da      	str	r2, [r3, #12]
 800d07a:	e005      	b.n	800d088 <tcp_close_shutdown+0x150>
 800d07c:	68bb      	ldr	r3, [r7, #8]
 800d07e:	68db      	ldr	r3, [r3, #12]
 800d080:	60bb      	str	r3, [r7, #8]
 800d082:	68bb      	ldr	r3, [r7, #8]
 800d084:	2b00      	cmp	r3, #0
 800d086:	d1ef      	bne.n	800d068 <tcp_close_shutdown+0x130>
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	2200      	movs	r2, #0
 800d08c:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800d08e:	6878      	ldr	r0, [r7, #4]
 800d090:	f7ff fea0 	bl	800cdd4 <tcp_free>
      break;
 800d094:	e01a      	b.n	800d0cc <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800d096:	6878      	ldr	r0, [r7, #4]
 800d098:	f7ff ff14 	bl	800cec4 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800d09c:	6879      	ldr	r1, [r7, #4]
 800d09e:	4816      	ldr	r0, [pc, #88]	@ (800d0f8 <tcp_close_shutdown+0x1c0>)
 800d0a0:	f001 fb88 	bl	800e7b4 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800d0a4:	6878      	ldr	r0, [r7, #4]
 800d0a6:	f7ff feb1 	bl	800ce0c <tcp_free_listen>
      break;
 800d0aa:	e00f      	b.n	800d0cc <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800d0ac:	6879      	ldr	r1, [r7, #4]
 800d0ae:	480e      	ldr	r0, [pc, #56]	@ (800d0e8 <tcp_close_shutdown+0x1b0>)
 800d0b0:	f001 fb80 	bl	800e7b4 <tcp_pcb_remove>
 800d0b4:	4b0d      	ldr	r3, [pc, #52]	@ (800d0ec <tcp_close_shutdown+0x1b4>)
 800d0b6:	2201      	movs	r2, #1
 800d0b8:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800d0ba:	6878      	ldr	r0, [r7, #4]
 800d0bc:	f7ff fe8a 	bl	800cdd4 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800d0c0:	e004      	b.n	800d0cc <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800d0c2:	6878      	ldr	r0, [r7, #4]
 800d0c4:	f000 f81a 	bl	800d0fc <tcp_close_shutdown_fin>
 800d0c8:	4603      	mov	r3, r0
 800d0ca:	e000      	b.n	800d0ce <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800d0cc:	2300      	movs	r3, #0
}
 800d0ce:	4618      	mov	r0, r3
 800d0d0:	3710      	adds	r7, #16
 800d0d2:	46bd      	mov	sp, r7
 800d0d4:	bdb0      	pop	{r4, r5, r7, pc}
 800d0d6:	bf00      	nop
 800d0d8:	08018e58 	.word	0x08018e58
 800d0dc:	08018f2c 	.word	0x08018f2c
 800d0e0:	08018e9c 	.word	0x08018e9c
 800d0e4:	08018f4c 	.word	0x08018f4c
 800d0e8:	2000eb50 	.word	0x2000eb50
 800d0ec:	2000eb58 	.word	0x2000eb58
 800d0f0:	2000eb90 	.word	0x2000eb90
 800d0f4:	2000eb48 	.word	0x2000eb48
 800d0f8:	2000eb4c 	.word	0x2000eb4c

0800d0fc <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800d0fc:	b580      	push	{r7, lr}
 800d0fe:	b084      	sub	sp, #16
 800d100:	af00      	add	r7, sp, #0
 800d102:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	2b00      	cmp	r3, #0
 800d108:	d106      	bne.n	800d118 <tcp_close_shutdown_fin+0x1c>
 800d10a:	4b2e      	ldr	r3, [pc, #184]	@ (800d1c4 <tcp_close_shutdown_fin+0xc8>)
 800d10c:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 800d110:	492d      	ldr	r1, [pc, #180]	@ (800d1c8 <tcp_close_shutdown_fin+0xcc>)
 800d112:	482e      	ldr	r0, [pc, #184]	@ (800d1cc <tcp_close_shutdown_fin+0xd0>)
 800d114:	f009 f8fc 	bl	8016310 <iprintf>

  switch (pcb->state) {
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	7d1b      	ldrb	r3, [r3, #20]
 800d11c:	2b07      	cmp	r3, #7
 800d11e:	d020      	beq.n	800d162 <tcp_close_shutdown_fin+0x66>
 800d120:	2b07      	cmp	r3, #7
 800d122:	dc2b      	bgt.n	800d17c <tcp_close_shutdown_fin+0x80>
 800d124:	2b03      	cmp	r3, #3
 800d126:	d002      	beq.n	800d12e <tcp_close_shutdown_fin+0x32>
 800d128:	2b04      	cmp	r3, #4
 800d12a:	d00d      	beq.n	800d148 <tcp_close_shutdown_fin+0x4c>
 800d12c:	e026      	b.n	800d17c <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800d12e:	6878      	ldr	r0, [r7, #4]
 800d130:	f004 fe18 	bl	8011d64 <tcp_send_fin>
 800d134:	4603      	mov	r3, r0
 800d136:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800d138:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	d11f      	bne.n	800d180 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	2205      	movs	r2, #5
 800d144:	751a      	strb	r2, [r3, #20]
      }
      break;
 800d146:	e01b      	b.n	800d180 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800d148:	6878      	ldr	r0, [r7, #4]
 800d14a:	f004 fe0b 	bl	8011d64 <tcp_send_fin>
 800d14e:	4603      	mov	r3, r0
 800d150:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800d152:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d156:	2b00      	cmp	r3, #0
 800d158:	d114      	bne.n	800d184 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	2205      	movs	r2, #5
 800d15e:	751a      	strb	r2, [r3, #20]
      }
      break;
 800d160:	e010      	b.n	800d184 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800d162:	6878      	ldr	r0, [r7, #4]
 800d164:	f004 fdfe 	bl	8011d64 <tcp_send_fin>
 800d168:	4603      	mov	r3, r0
 800d16a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800d16c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d170:	2b00      	cmp	r3, #0
 800d172:	d109      	bne.n	800d188 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	2209      	movs	r2, #9
 800d178:	751a      	strb	r2, [r3, #20]
      }
      break;
 800d17a:	e005      	b.n	800d188 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800d17c:	2300      	movs	r3, #0
 800d17e:	e01c      	b.n	800d1ba <tcp_close_shutdown_fin+0xbe>
      break;
 800d180:	bf00      	nop
 800d182:	e002      	b.n	800d18a <tcp_close_shutdown_fin+0x8e>
      break;
 800d184:	bf00      	nop
 800d186:	e000      	b.n	800d18a <tcp_close_shutdown_fin+0x8e>
      break;
 800d188:	bf00      	nop
  }

  if (err == ERR_OK) {
 800d18a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d18e:	2b00      	cmp	r3, #0
 800d190:	d103      	bne.n	800d19a <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800d192:	6878      	ldr	r0, [r7, #4]
 800d194:	f004 ff24 	bl	8011fe0 <tcp_output>
 800d198:	e00d      	b.n	800d1b6 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800d19a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d19e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d1a2:	d108      	bne.n	800d1b6 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	8b5b      	ldrh	r3, [r3, #26]
 800d1a8:	f043 0308 	orr.w	r3, r3, #8
 800d1ac:	b29a      	uxth	r2, r3
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800d1b2:	2300      	movs	r3, #0
 800d1b4:	e001      	b.n	800d1ba <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800d1b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d1ba:	4618      	mov	r0, r3
 800d1bc:	3710      	adds	r7, #16
 800d1be:	46bd      	mov	sp, r7
 800d1c0:	bd80      	pop	{r7, pc}
 800d1c2:	bf00      	nop
 800d1c4:	08018e58 	.word	0x08018e58
 800d1c8:	08018f08 	.word	0x08018f08
 800d1cc:	08018e9c 	.word	0x08018e9c

0800d1d0 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800d1d0:	b580      	push	{r7, lr}
 800d1d2:	b082      	sub	sp, #8
 800d1d4:	af00      	add	r7, sp, #0
 800d1d6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d109      	bne.n	800d1f2 <tcp_close+0x22>
 800d1de:	4b0f      	ldr	r3, [pc, #60]	@ (800d21c <tcp_close+0x4c>)
 800d1e0:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 800d1e4:	490e      	ldr	r1, [pc, #56]	@ (800d220 <tcp_close+0x50>)
 800d1e6:	480f      	ldr	r0, [pc, #60]	@ (800d224 <tcp_close+0x54>)
 800d1e8:	f009 f892 	bl	8016310 <iprintf>
 800d1ec:	f06f 030f 	mvn.w	r3, #15
 800d1f0:	e00f      	b.n	800d212 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	7d1b      	ldrb	r3, [r3, #20]
 800d1f6:	2b01      	cmp	r3, #1
 800d1f8:	d006      	beq.n	800d208 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	8b5b      	ldrh	r3, [r3, #26]
 800d1fe:	f043 0310 	orr.w	r3, r3, #16
 800d202:	b29a      	uxth	r2, r3
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800d208:	2101      	movs	r1, #1
 800d20a:	6878      	ldr	r0, [r7, #4]
 800d20c:	f7ff fe94 	bl	800cf38 <tcp_close_shutdown>
 800d210:	4603      	mov	r3, r0
}
 800d212:	4618      	mov	r0, r3
 800d214:	3708      	adds	r7, #8
 800d216:	46bd      	mov	sp, r7
 800d218:	bd80      	pop	{r7, pc}
 800d21a:	bf00      	nop
 800d21c:	08018e58 	.word	0x08018e58
 800d220:	08018f68 	.word	0x08018f68
 800d224:	08018e9c 	.word	0x08018e9c

0800d228 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 800d228:	b580      	push	{r7, lr}
 800d22a:	b084      	sub	sp, #16
 800d22c:	af00      	add	r7, sp, #0
 800d22e:	60f8      	str	r0, [r7, #12]
 800d230:	60b9      	str	r1, [r7, #8]
 800d232:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 800d234:	68fb      	ldr	r3, [r7, #12]
 800d236:	2b00      	cmp	r3, #0
 800d238:	d109      	bne.n	800d24e <tcp_shutdown+0x26>
 800d23a:	4b26      	ldr	r3, [pc, #152]	@ (800d2d4 <tcp_shutdown+0xac>)
 800d23c:	f240 2207 	movw	r2, #519	@ 0x207
 800d240:	4925      	ldr	r1, [pc, #148]	@ (800d2d8 <tcp_shutdown+0xb0>)
 800d242:	4826      	ldr	r0, [pc, #152]	@ (800d2dc <tcp_shutdown+0xb4>)
 800d244:	f009 f864 	bl	8016310 <iprintf>
 800d248:	f06f 030f 	mvn.w	r3, #15
 800d24c:	e03d      	b.n	800d2ca <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 800d24e:	68fb      	ldr	r3, [r7, #12]
 800d250:	7d1b      	ldrb	r3, [r3, #20]
 800d252:	2b01      	cmp	r3, #1
 800d254:	d102      	bne.n	800d25c <tcp_shutdown+0x34>
    return ERR_CONN;
 800d256:	f06f 030a 	mvn.w	r3, #10
 800d25a:	e036      	b.n	800d2ca <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 800d25c:	68bb      	ldr	r3, [r7, #8]
 800d25e:	2b00      	cmp	r3, #0
 800d260:	d01b      	beq.n	800d29a <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800d262:	68fb      	ldr	r3, [r7, #12]
 800d264:	8b5b      	ldrh	r3, [r3, #26]
 800d266:	f043 0310 	orr.w	r3, r3, #16
 800d26a:	b29a      	uxth	r2, r3
 800d26c:	68fb      	ldr	r3, [r7, #12]
 800d26e:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	2b00      	cmp	r3, #0
 800d274:	d005      	beq.n	800d282 <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 800d276:	2101      	movs	r1, #1
 800d278:	68f8      	ldr	r0, [r7, #12]
 800d27a:	f7ff fe5d 	bl	800cf38 <tcp_close_shutdown>
 800d27e:	4603      	mov	r3, r0
 800d280:	e023      	b.n	800d2ca <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 800d282:	68fb      	ldr	r3, [r7, #12]
 800d284:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d286:	2b00      	cmp	r3, #0
 800d288:	d007      	beq.n	800d29a <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 800d28a:	68fb      	ldr	r3, [r7, #12]
 800d28c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d28e:	4618      	mov	r0, r3
 800d290:	f7ff fad2 	bl	800c838 <pbuf_free>
      pcb->refused_data = NULL;
 800d294:	68fb      	ldr	r3, [r7, #12]
 800d296:	2200      	movs	r2, #0
 800d298:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }
  if (shut_tx) {
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	d013      	beq.n	800d2c8 <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 800d2a0:	68fb      	ldr	r3, [r7, #12]
 800d2a2:	7d1b      	ldrb	r3, [r3, #20]
 800d2a4:	2b04      	cmp	r3, #4
 800d2a6:	dc02      	bgt.n	800d2ae <tcp_shutdown+0x86>
 800d2a8:	2b03      	cmp	r3, #3
 800d2aa:	da02      	bge.n	800d2b2 <tcp_shutdown+0x8a>
 800d2ac:	e009      	b.n	800d2c2 <tcp_shutdown+0x9a>
 800d2ae:	2b07      	cmp	r3, #7
 800d2b0:	d107      	bne.n	800d2c2 <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800d2b2:	68bb      	ldr	r3, [r7, #8]
 800d2b4:	b2db      	uxtb	r3, r3
 800d2b6:	4619      	mov	r1, r3
 800d2b8:	68f8      	ldr	r0, [r7, #12]
 800d2ba:	f7ff fe3d 	bl	800cf38 <tcp_close_shutdown>
 800d2be:	4603      	mov	r3, r0
 800d2c0:	e003      	b.n	800d2ca <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 800d2c2:	f06f 030a 	mvn.w	r3, #10
 800d2c6:	e000      	b.n	800d2ca <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 800d2c8:	2300      	movs	r3, #0
}
 800d2ca:	4618      	mov	r0, r3
 800d2cc:	3710      	adds	r7, #16
 800d2ce:	46bd      	mov	sp, r7
 800d2d0:	bd80      	pop	{r7, pc}
 800d2d2:	bf00      	nop
 800d2d4:	08018e58 	.word	0x08018e58
 800d2d8:	08018f80 	.word	0x08018f80
 800d2dc:	08018e9c 	.word	0x08018e9c

0800d2e0 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800d2e0:	b580      	push	{r7, lr}
 800d2e2:	b08e      	sub	sp, #56	@ 0x38
 800d2e4:	af04      	add	r7, sp, #16
 800d2e6:	6078      	str	r0, [r7, #4]
 800d2e8:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	d107      	bne.n	800d300 <tcp_abandon+0x20>
 800d2f0:	4b52      	ldr	r3, [pc, #328]	@ (800d43c <tcp_abandon+0x15c>)
 800d2f2:	f240 223d 	movw	r2, #573	@ 0x23d
 800d2f6:	4952      	ldr	r1, [pc, #328]	@ (800d440 <tcp_abandon+0x160>)
 800d2f8:	4852      	ldr	r0, [pc, #328]	@ (800d444 <tcp_abandon+0x164>)
 800d2fa:	f009 f809 	bl	8016310 <iprintf>
 800d2fe:	e099      	b.n	800d434 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	7d1b      	ldrb	r3, [r3, #20]
 800d304:	2b01      	cmp	r3, #1
 800d306:	d106      	bne.n	800d316 <tcp_abandon+0x36>
 800d308:	4b4c      	ldr	r3, [pc, #304]	@ (800d43c <tcp_abandon+0x15c>)
 800d30a:	f44f 7210 	mov.w	r2, #576	@ 0x240
 800d30e:	494e      	ldr	r1, [pc, #312]	@ (800d448 <tcp_abandon+0x168>)
 800d310:	484c      	ldr	r0, [pc, #304]	@ (800d444 <tcp_abandon+0x164>)
 800d312:	f008 fffd 	bl	8016310 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	7d1b      	ldrb	r3, [r3, #20]
 800d31a:	2b0a      	cmp	r3, #10
 800d31c:	d107      	bne.n	800d32e <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800d31e:	6879      	ldr	r1, [r7, #4]
 800d320:	484a      	ldr	r0, [pc, #296]	@ (800d44c <tcp_abandon+0x16c>)
 800d322:	f001 fa47 	bl	800e7b4 <tcp_pcb_remove>
    tcp_free(pcb);
 800d326:	6878      	ldr	r0, [r7, #4]
 800d328:	f7ff fd54 	bl	800cdd4 <tcp_free>
 800d32c:	e082      	b.n	800d434 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800d32e:	2300      	movs	r3, #0
 800d330:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 800d332:	2300      	movs	r3, #0
 800d334:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d33a:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d340:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d348:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	691b      	ldr	r3, [r3, #16]
 800d34e:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	7d1b      	ldrb	r3, [r3, #20]
 800d354:	2b00      	cmp	r3, #0
 800d356:	d126      	bne.n	800d3a6 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	8adb      	ldrh	r3, [r3, #22]
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	d02e      	beq.n	800d3be <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800d360:	4b3b      	ldr	r3, [pc, #236]	@ (800d450 <tcp_abandon+0x170>)
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	687a      	ldr	r2, [r7, #4]
 800d366:	429a      	cmp	r2, r3
 800d368:	d105      	bne.n	800d376 <tcp_abandon+0x96>
 800d36a:	4b39      	ldr	r3, [pc, #228]	@ (800d450 <tcp_abandon+0x170>)
 800d36c:	681b      	ldr	r3, [r3, #0]
 800d36e:	68db      	ldr	r3, [r3, #12]
 800d370:	4a37      	ldr	r2, [pc, #220]	@ (800d450 <tcp_abandon+0x170>)
 800d372:	6013      	str	r3, [r2, #0]
 800d374:	e013      	b.n	800d39e <tcp_abandon+0xbe>
 800d376:	4b36      	ldr	r3, [pc, #216]	@ (800d450 <tcp_abandon+0x170>)
 800d378:	681b      	ldr	r3, [r3, #0]
 800d37a:	61fb      	str	r3, [r7, #28]
 800d37c:	e00c      	b.n	800d398 <tcp_abandon+0xb8>
 800d37e:	69fb      	ldr	r3, [r7, #28]
 800d380:	68db      	ldr	r3, [r3, #12]
 800d382:	687a      	ldr	r2, [r7, #4]
 800d384:	429a      	cmp	r2, r3
 800d386:	d104      	bne.n	800d392 <tcp_abandon+0xb2>
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	68da      	ldr	r2, [r3, #12]
 800d38c:	69fb      	ldr	r3, [r7, #28]
 800d38e:	60da      	str	r2, [r3, #12]
 800d390:	e005      	b.n	800d39e <tcp_abandon+0xbe>
 800d392:	69fb      	ldr	r3, [r7, #28]
 800d394:	68db      	ldr	r3, [r3, #12]
 800d396:	61fb      	str	r3, [r7, #28]
 800d398:	69fb      	ldr	r3, [r7, #28]
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	d1ef      	bne.n	800d37e <tcp_abandon+0x9e>
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	2200      	movs	r2, #0
 800d3a2:	60da      	str	r2, [r3, #12]
 800d3a4:	e00b      	b.n	800d3be <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800d3a6:	683b      	ldr	r3, [r7, #0]
 800d3a8:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	8adb      	ldrh	r3, [r3, #22]
 800d3ae:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800d3b0:	6879      	ldr	r1, [r7, #4]
 800d3b2:	4828      	ldr	r0, [pc, #160]	@ (800d454 <tcp_abandon+0x174>)
 800d3b4:	f001 f9fe 	bl	800e7b4 <tcp_pcb_remove>
 800d3b8:	4b27      	ldr	r3, [pc, #156]	@ (800d458 <tcp_abandon+0x178>)
 800d3ba:	2201      	movs	r2, #1
 800d3bc:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	d004      	beq.n	800d3d0 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d3ca:	4618      	mov	r0, r3
 800d3cc:	f000 feca 	bl	800e164 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	d004      	beq.n	800d3e2 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d3dc:	4618      	mov	r0, r3
 800d3de:	f000 fec1 	bl	800e164 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	d004      	beq.n	800d3f4 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d3ee:	4618      	mov	r0, r3
 800d3f0:	f000 feb8 	bl	800e164 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800d3f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	d00e      	beq.n	800d418 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800d3fa:	6879      	ldr	r1, [r7, #4]
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	3304      	adds	r3, #4
 800d400:	687a      	ldr	r2, [r7, #4]
 800d402:	8b12      	ldrh	r2, [r2, #24]
 800d404:	9202      	str	r2, [sp, #8]
 800d406:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800d408:	9201      	str	r2, [sp, #4]
 800d40a:	9300      	str	r3, [sp, #0]
 800d40c:	460b      	mov	r3, r1
 800d40e:	697a      	ldr	r2, [r7, #20]
 800d410:	69b9      	ldr	r1, [r7, #24]
 800d412:	6878      	ldr	r0, [r7, #4]
 800d414:	f005 fb98 	bl	8012b48 <tcp_rst>
    }
    last_state = pcb->state;
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	7d1b      	ldrb	r3, [r3, #20]
 800d41c:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800d41e:	6878      	ldr	r0, [r7, #4]
 800d420:	f7ff fcd8 	bl	800cdd4 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800d424:	693b      	ldr	r3, [r7, #16]
 800d426:	2b00      	cmp	r3, #0
 800d428:	d004      	beq.n	800d434 <tcp_abandon+0x154>
 800d42a:	693b      	ldr	r3, [r7, #16]
 800d42c:	f06f 010c 	mvn.w	r1, #12
 800d430:	68f8      	ldr	r0, [r7, #12]
 800d432:	4798      	blx	r3
  }
}
 800d434:	3728      	adds	r7, #40	@ 0x28
 800d436:	46bd      	mov	sp, r7
 800d438:	bd80      	pop	{r7, pc}
 800d43a:	bf00      	nop
 800d43c:	08018e58 	.word	0x08018e58
 800d440:	08018f9c 	.word	0x08018f9c
 800d444:	08018e9c 	.word	0x08018e9c
 800d448:	08018fb8 	.word	0x08018fb8
 800d44c:	2000eb54 	.word	0x2000eb54
 800d450:	2000eb48 	.word	0x2000eb48
 800d454:	2000eb50 	.word	0x2000eb50
 800d458:	2000eb58 	.word	0x2000eb58

0800d45c <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800d45c:	b580      	push	{r7, lr}
 800d45e:	b082      	sub	sp, #8
 800d460:	af00      	add	r7, sp, #0
 800d462:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800d464:	2101      	movs	r1, #1
 800d466:	6878      	ldr	r0, [r7, #4]
 800d468:	f7ff ff3a 	bl	800d2e0 <tcp_abandon>
}
 800d46c:	bf00      	nop
 800d46e:	3708      	adds	r7, #8
 800d470:	46bd      	mov	sp, r7
 800d472:	bd80      	pop	{r7, pc}

0800d474 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800d474:	b580      	push	{r7, lr}
 800d476:	b088      	sub	sp, #32
 800d478:	af00      	add	r7, sp, #0
 800d47a:	60f8      	str	r0, [r7, #12]
 800d47c:	60b9      	str	r1, [r7, #8]
 800d47e:	4613      	mov	r3, r2
 800d480:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800d482:	2304      	movs	r3, #4
 800d484:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800d486:	68bb      	ldr	r3, [r7, #8]
 800d488:	2b00      	cmp	r3, #0
 800d48a:	d101      	bne.n	800d490 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800d48c:	4b3e      	ldr	r3, [pc, #248]	@ (800d588 <tcp_bind+0x114>)
 800d48e:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800d490:	68fb      	ldr	r3, [r7, #12]
 800d492:	2b00      	cmp	r3, #0
 800d494:	d109      	bne.n	800d4aa <tcp_bind+0x36>
 800d496:	4b3d      	ldr	r3, [pc, #244]	@ (800d58c <tcp_bind+0x118>)
 800d498:	f240 22a9 	movw	r2, #681	@ 0x2a9
 800d49c:	493c      	ldr	r1, [pc, #240]	@ (800d590 <tcp_bind+0x11c>)
 800d49e:	483d      	ldr	r0, [pc, #244]	@ (800d594 <tcp_bind+0x120>)
 800d4a0:	f008 ff36 	bl	8016310 <iprintf>
 800d4a4:	f06f 030f 	mvn.w	r3, #15
 800d4a8:	e06a      	b.n	800d580 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800d4aa:	68fb      	ldr	r3, [r7, #12]
 800d4ac:	7d1b      	ldrb	r3, [r3, #20]
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	d009      	beq.n	800d4c6 <tcp_bind+0x52>
 800d4b2:	4b36      	ldr	r3, [pc, #216]	@ (800d58c <tcp_bind+0x118>)
 800d4b4:	f240 22ab 	movw	r2, #683	@ 0x2ab
 800d4b8:	4937      	ldr	r1, [pc, #220]	@ (800d598 <tcp_bind+0x124>)
 800d4ba:	4836      	ldr	r0, [pc, #216]	@ (800d594 <tcp_bind+0x120>)
 800d4bc:	f008 ff28 	bl	8016310 <iprintf>
 800d4c0:	f06f 0305 	mvn.w	r3, #5
 800d4c4:	e05c      	b.n	800d580 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800d4c6:	88fb      	ldrh	r3, [r7, #6]
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	d109      	bne.n	800d4e0 <tcp_bind+0x6c>
    port = tcp_new_port();
 800d4cc:	f000 f9de 	bl	800d88c <tcp_new_port>
 800d4d0:	4603      	mov	r3, r0
 800d4d2:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800d4d4:	88fb      	ldrh	r3, [r7, #6]
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	d135      	bne.n	800d546 <tcp_bind+0xd2>
      return ERR_BUF;
 800d4da:	f06f 0301 	mvn.w	r3, #1
 800d4de:	e04f      	b.n	800d580 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800d4e0:	2300      	movs	r3, #0
 800d4e2:	61fb      	str	r3, [r7, #28]
 800d4e4:	e02b      	b.n	800d53e <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800d4e6:	4a2d      	ldr	r2, [pc, #180]	@ (800d59c <tcp_bind+0x128>)
 800d4e8:	69fb      	ldr	r3, [r7, #28]
 800d4ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d4ee:	681b      	ldr	r3, [r3, #0]
 800d4f0:	61bb      	str	r3, [r7, #24]
 800d4f2:	e01e      	b.n	800d532 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 800d4f4:	69bb      	ldr	r3, [r7, #24]
 800d4f6:	8adb      	ldrh	r3, [r3, #22]
 800d4f8:	88fa      	ldrh	r2, [r7, #6]
 800d4fa:	429a      	cmp	r2, r3
 800d4fc:	d116      	bne.n	800d52c <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800d4fe:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800d500:	2b00      	cmp	r3, #0
 800d502:	d010      	beq.n	800d526 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 800d504:	69bb      	ldr	r3, [r7, #24]
 800d506:	681b      	ldr	r3, [r3, #0]
 800d508:	2b00      	cmp	r3, #0
 800d50a:	d00c      	beq.n	800d526 <tcp_bind+0xb2>
 800d50c:	68bb      	ldr	r3, [r7, #8]
 800d50e:	2b00      	cmp	r3, #0
 800d510:	d009      	beq.n	800d526 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 800d512:	68bb      	ldr	r3, [r7, #8]
 800d514:	681b      	ldr	r3, [r3, #0]
 800d516:	2b00      	cmp	r3, #0
 800d518:	d005      	beq.n	800d526 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800d51a:	69bb      	ldr	r3, [r7, #24]
 800d51c:	681a      	ldr	r2, [r3, #0]
 800d51e:	68bb      	ldr	r3, [r7, #8]
 800d520:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800d522:	429a      	cmp	r2, r3
 800d524:	d102      	bne.n	800d52c <tcp_bind+0xb8>
              return ERR_USE;
 800d526:	f06f 0307 	mvn.w	r3, #7
 800d52a:	e029      	b.n	800d580 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800d52c:	69bb      	ldr	r3, [r7, #24]
 800d52e:	68db      	ldr	r3, [r3, #12]
 800d530:	61bb      	str	r3, [r7, #24]
 800d532:	69bb      	ldr	r3, [r7, #24]
 800d534:	2b00      	cmp	r3, #0
 800d536:	d1dd      	bne.n	800d4f4 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 800d538:	69fb      	ldr	r3, [r7, #28]
 800d53a:	3301      	adds	r3, #1
 800d53c:	61fb      	str	r3, [r7, #28]
 800d53e:	69fa      	ldr	r2, [r7, #28]
 800d540:	697b      	ldr	r3, [r7, #20]
 800d542:	429a      	cmp	r2, r3
 800d544:	dbcf      	blt.n	800d4e6 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800d546:	68bb      	ldr	r3, [r7, #8]
 800d548:	2b00      	cmp	r3, #0
 800d54a:	d00c      	beq.n	800d566 <tcp_bind+0xf2>
 800d54c:	68bb      	ldr	r3, [r7, #8]
 800d54e:	681b      	ldr	r3, [r3, #0]
 800d550:	2b00      	cmp	r3, #0
 800d552:	d008      	beq.n	800d566 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 800d554:	68bb      	ldr	r3, [r7, #8]
 800d556:	2b00      	cmp	r3, #0
 800d558:	d002      	beq.n	800d560 <tcp_bind+0xec>
 800d55a:	68bb      	ldr	r3, [r7, #8]
 800d55c:	681b      	ldr	r3, [r3, #0]
 800d55e:	e000      	b.n	800d562 <tcp_bind+0xee>
 800d560:	2300      	movs	r3, #0
 800d562:	68fa      	ldr	r2, [r7, #12]
 800d564:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800d566:	68fb      	ldr	r3, [r7, #12]
 800d568:	88fa      	ldrh	r2, [r7, #6]
 800d56a:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800d56c:	4b0c      	ldr	r3, [pc, #48]	@ (800d5a0 <tcp_bind+0x12c>)
 800d56e:	681a      	ldr	r2, [r3, #0]
 800d570:	68fb      	ldr	r3, [r7, #12]
 800d572:	60da      	str	r2, [r3, #12]
 800d574:	4a0a      	ldr	r2, [pc, #40]	@ (800d5a0 <tcp_bind+0x12c>)
 800d576:	68fb      	ldr	r3, [r7, #12]
 800d578:	6013      	str	r3, [r2, #0]
 800d57a:	f005 fca7 	bl	8012ecc <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800d57e:	2300      	movs	r3, #0
}
 800d580:	4618      	mov	r0, r3
 800d582:	3720      	adds	r7, #32
 800d584:	46bd      	mov	sp, r7
 800d586:	bd80      	pop	{r7, pc}
 800d588:	0801aea4 	.word	0x0801aea4
 800d58c:	08018e58 	.word	0x08018e58
 800d590:	08018fec 	.word	0x08018fec
 800d594:	08018e9c 	.word	0x08018e9c
 800d598:	08019004 	.word	0x08019004
 800d59c:	0801ae7c 	.word	0x0801ae7c
 800d5a0:	2000eb48 	.word	0x2000eb48

0800d5a4 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800d5a4:	b580      	push	{r7, lr}
 800d5a6:	b084      	sub	sp, #16
 800d5a8:	af00      	add	r7, sp, #0
 800d5aa:	60f8      	str	r0, [r7, #12]
 800d5ac:	60b9      	str	r1, [r7, #8]
 800d5ae:	4613      	mov	r3, r2
 800d5b0:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 800d5b2:	68bb      	ldr	r3, [r7, #8]
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d106      	bne.n	800d5c6 <tcp_accept_null+0x22>
 800d5b8:	4b07      	ldr	r3, [pc, #28]	@ (800d5d8 <tcp_accept_null+0x34>)
 800d5ba:	f240 320f 	movw	r2, #783	@ 0x30f
 800d5be:	4907      	ldr	r1, [pc, #28]	@ (800d5dc <tcp_accept_null+0x38>)
 800d5c0:	4807      	ldr	r0, [pc, #28]	@ (800d5e0 <tcp_accept_null+0x3c>)
 800d5c2:	f008 fea5 	bl	8016310 <iprintf>

  tcp_abort(pcb);
 800d5c6:	68b8      	ldr	r0, [r7, #8]
 800d5c8:	f7ff ff48 	bl	800d45c <tcp_abort>

  return ERR_ABRT;
 800d5cc:	f06f 030c 	mvn.w	r3, #12
}
 800d5d0:	4618      	mov	r0, r3
 800d5d2:	3710      	adds	r7, #16
 800d5d4:	46bd      	mov	sp, r7
 800d5d6:	bd80      	pop	{r7, pc}
 800d5d8:	08018e58 	.word	0x08018e58
 800d5dc:	0801902c 	.word	0x0801902c
 800d5e0:	08018e9c 	.word	0x08018e9c

0800d5e4 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 800d5e4:	b580      	push	{r7, lr}
 800d5e6:	b088      	sub	sp, #32
 800d5e8:	af00      	add	r7, sp, #0
 800d5ea:	60f8      	str	r0, [r7, #12]
 800d5ec:	460b      	mov	r3, r1
 800d5ee:	607a      	str	r2, [r7, #4]
 800d5f0:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 800d5f2:	2300      	movs	r3, #0
 800d5f4:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800d5f6:	68fb      	ldr	r3, [r7, #12]
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	d109      	bne.n	800d610 <tcp_listen_with_backlog_and_err+0x2c>
 800d5fc:	4b47      	ldr	r3, [pc, #284]	@ (800d71c <tcp_listen_with_backlog_and_err+0x138>)
 800d5fe:	f240 3259 	movw	r2, #857	@ 0x359
 800d602:	4947      	ldr	r1, [pc, #284]	@ (800d720 <tcp_listen_with_backlog_and_err+0x13c>)
 800d604:	4847      	ldr	r0, [pc, #284]	@ (800d724 <tcp_listen_with_backlog_and_err+0x140>)
 800d606:	f008 fe83 	bl	8016310 <iprintf>
 800d60a:	23f0      	movs	r3, #240	@ 0xf0
 800d60c:	76fb      	strb	r3, [r7, #27]
 800d60e:	e079      	b.n	800d704 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800d610:	68fb      	ldr	r3, [r7, #12]
 800d612:	7d1b      	ldrb	r3, [r3, #20]
 800d614:	2b00      	cmp	r3, #0
 800d616:	d009      	beq.n	800d62c <tcp_listen_with_backlog_and_err+0x48>
 800d618:	4b40      	ldr	r3, [pc, #256]	@ (800d71c <tcp_listen_with_backlog_and_err+0x138>)
 800d61a:	f240 325a 	movw	r2, #858	@ 0x35a
 800d61e:	4942      	ldr	r1, [pc, #264]	@ (800d728 <tcp_listen_with_backlog_and_err+0x144>)
 800d620:	4840      	ldr	r0, [pc, #256]	@ (800d724 <tcp_listen_with_backlog_and_err+0x140>)
 800d622:	f008 fe75 	bl	8016310 <iprintf>
 800d626:	23f1      	movs	r3, #241	@ 0xf1
 800d628:	76fb      	strb	r3, [r7, #27]
 800d62a:	e06b      	b.n	800d704 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 800d62c:	68fb      	ldr	r3, [r7, #12]
 800d62e:	7d1b      	ldrb	r3, [r3, #20]
 800d630:	2b01      	cmp	r3, #1
 800d632:	d104      	bne.n	800d63e <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 800d634:	68fb      	ldr	r3, [r7, #12]
 800d636:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 800d638:	23f7      	movs	r3, #247	@ 0xf7
 800d63a:	76fb      	strb	r3, [r7, #27]
    goto done;
 800d63c:	e062      	b.n	800d704 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800d63e:	2002      	movs	r0, #2
 800d640:	f7fe f9e0 	bl	800ba04 <memp_malloc>
 800d644:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 800d646:	69fb      	ldr	r3, [r7, #28]
 800d648:	2b00      	cmp	r3, #0
 800d64a:	d102      	bne.n	800d652 <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 800d64c:	23ff      	movs	r3, #255	@ 0xff
 800d64e:	76fb      	strb	r3, [r7, #27]
    goto done;
 800d650:	e058      	b.n	800d704 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 800d652:	68fb      	ldr	r3, [r7, #12]
 800d654:	691a      	ldr	r2, [r3, #16]
 800d656:	69fb      	ldr	r3, [r7, #28]
 800d658:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 800d65a:	68fb      	ldr	r3, [r7, #12]
 800d65c:	8ada      	ldrh	r2, [r3, #22]
 800d65e:	69fb      	ldr	r3, [r7, #28]
 800d660:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 800d662:	69fb      	ldr	r3, [r7, #28]
 800d664:	2201      	movs	r2, #1
 800d666:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 800d668:	68fb      	ldr	r3, [r7, #12]
 800d66a:	7d5a      	ldrb	r2, [r3, #21]
 800d66c:	69fb      	ldr	r3, [r7, #28]
 800d66e:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 800d670:	68fb      	ldr	r3, [r7, #12]
 800d672:	7a5a      	ldrb	r2, [r3, #9]
 800d674:	69fb      	ldr	r3, [r7, #28]
 800d676:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 800d678:	69fb      	ldr	r3, [r7, #28]
 800d67a:	2200      	movs	r2, #0
 800d67c:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 800d67e:	68fb      	ldr	r3, [r7, #12]
 800d680:	7ada      	ldrb	r2, [r3, #11]
 800d682:	69fb      	ldr	r3, [r7, #28]
 800d684:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 800d686:	68fb      	ldr	r3, [r7, #12]
 800d688:	7a9a      	ldrb	r2, [r3, #10]
 800d68a:	69fb      	ldr	r3, [r7, #28]
 800d68c:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800d68e:	68fb      	ldr	r3, [r7, #12]
 800d690:	681a      	ldr	r2, [r3, #0]
 800d692:	69fb      	ldr	r3, [r7, #28]
 800d694:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 800d696:	68fb      	ldr	r3, [r7, #12]
 800d698:	8adb      	ldrh	r3, [r3, #22]
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d021      	beq.n	800d6e2 <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800d69e:	4b23      	ldr	r3, [pc, #140]	@ (800d72c <tcp_listen_with_backlog_and_err+0x148>)
 800d6a0:	681b      	ldr	r3, [r3, #0]
 800d6a2:	68fa      	ldr	r2, [r7, #12]
 800d6a4:	429a      	cmp	r2, r3
 800d6a6:	d105      	bne.n	800d6b4 <tcp_listen_with_backlog_and_err+0xd0>
 800d6a8:	4b20      	ldr	r3, [pc, #128]	@ (800d72c <tcp_listen_with_backlog_and_err+0x148>)
 800d6aa:	681b      	ldr	r3, [r3, #0]
 800d6ac:	68db      	ldr	r3, [r3, #12]
 800d6ae:	4a1f      	ldr	r2, [pc, #124]	@ (800d72c <tcp_listen_with_backlog_and_err+0x148>)
 800d6b0:	6013      	str	r3, [r2, #0]
 800d6b2:	e013      	b.n	800d6dc <tcp_listen_with_backlog_and_err+0xf8>
 800d6b4:	4b1d      	ldr	r3, [pc, #116]	@ (800d72c <tcp_listen_with_backlog_and_err+0x148>)
 800d6b6:	681b      	ldr	r3, [r3, #0]
 800d6b8:	617b      	str	r3, [r7, #20]
 800d6ba:	e00c      	b.n	800d6d6 <tcp_listen_with_backlog_and_err+0xf2>
 800d6bc:	697b      	ldr	r3, [r7, #20]
 800d6be:	68db      	ldr	r3, [r3, #12]
 800d6c0:	68fa      	ldr	r2, [r7, #12]
 800d6c2:	429a      	cmp	r2, r3
 800d6c4:	d104      	bne.n	800d6d0 <tcp_listen_with_backlog_and_err+0xec>
 800d6c6:	68fb      	ldr	r3, [r7, #12]
 800d6c8:	68da      	ldr	r2, [r3, #12]
 800d6ca:	697b      	ldr	r3, [r7, #20]
 800d6cc:	60da      	str	r2, [r3, #12]
 800d6ce:	e005      	b.n	800d6dc <tcp_listen_with_backlog_and_err+0xf8>
 800d6d0:	697b      	ldr	r3, [r7, #20]
 800d6d2:	68db      	ldr	r3, [r3, #12]
 800d6d4:	617b      	str	r3, [r7, #20]
 800d6d6:	697b      	ldr	r3, [r7, #20]
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	d1ef      	bne.n	800d6bc <tcp_listen_with_backlog_and_err+0xd8>
 800d6dc:	68fb      	ldr	r3, [r7, #12]
 800d6de:	2200      	movs	r2, #0
 800d6e0:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 800d6e2:	68f8      	ldr	r0, [r7, #12]
 800d6e4:	f7ff fb76 	bl	800cdd4 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 800d6e8:	69fb      	ldr	r3, [r7, #28]
 800d6ea:	4a11      	ldr	r2, [pc, #68]	@ (800d730 <tcp_listen_with_backlog_and_err+0x14c>)
 800d6ec:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800d6ee:	4b11      	ldr	r3, [pc, #68]	@ (800d734 <tcp_listen_with_backlog_and_err+0x150>)
 800d6f0:	681a      	ldr	r2, [r3, #0]
 800d6f2:	69fb      	ldr	r3, [r7, #28]
 800d6f4:	60da      	str	r2, [r3, #12]
 800d6f6:	4a0f      	ldr	r2, [pc, #60]	@ (800d734 <tcp_listen_with_backlog_and_err+0x150>)
 800d6f8:	69fb      	ldr	r3, [r7, #28]
 800d6fa:	6013      	str	r3, [r2, #0]
 800d6fc:	f005 fbe6 	bl	8012ecc <tcp_timer_needed>
  res = ERR_OK;
 800d700:	2300      	movs	r3, #0
 800d702:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	2b00      	cmp	r3, #0
 800d708:	d002      	beq.n	800d710 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	7efa      	ldrb	r2, [r7, #27]
 800d70e:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 800d710:	69fb      	ldr	r3, [r7, #28]
}
 800d712:	4618      	mov	r0, r3
 800d714:	3720      	adds	r7, #32
 800d716:	46bd      	mov	sp, r7
 800d718:	bd80      	pop	{r7, pc}
 800d71a:	bf00      	nop
 800d71c:	08018e58 	.word	0x08018e58
 800d720:	0801904c 	.word	0x0801904c
 800d724:	08018e9c 	.word	0x08018e9c
 800d728:	0801907c 	.word	0x0801907c
 800d72c:	2000eb48 	.word	0x2000eb48
 800d730:	0800d5a5 	.word	0x0800d5a5
 800d734:	2000eb4c 	.word	0x2000eb4c

0800d738 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800d738:	b580      	push	{r7, lr}
 800d73a:	b084      	sub	sp, #16
 800d73c:	af00      	add	r7, sp, #0
 800d73e:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	2b00      	cmp	r3, #0
 800d744:	d106      	bne.n	800d754 <tcp_update_rcv_ann_wnd+0x1c>
 800d746:	4b25      	ldr	r3, [pc, #148]	@ (800d7dc <tcp_update_rcv_ann_wnd+0xa4>)
 800d748:	f240 32a6 	movw	r2, #934	@ 0x3a6
 800d74c:	4924      	ldr	r1, [pc, #144]	@ (800d7e0 <tcp_update_rcv_ann_wnd+0xa8>)
 800d74e:	4825      	ldr	r0, [pc, #148]	@ (800d7e4 <tcp_update_rcv_ann_wnd+0xac>)
 800d750:	f008 fdde 	bl	8016310 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d758:	687a      	ldr	r2, [r7, #4]
 800d75a:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800d75c:	4413      	add	r3, r2
 800d75e:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d764:	687a      	ldr	r2, [r7, #4]
 800d766:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 800d768:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 800d76c:	bf28      	it	cs
 800d76e:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 800d772:	b292      	uxth	r2, r2
 800d774:	4413      	add	r3, r2
 800d776:	68fa      	ldr	r2, [r7, #12]
 800d778:	1ad3      	subs	r3, r2, r3
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	db08      	blt.n	800d790 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d78a:	68fa      	ldr	r2, [r7, #12]
 800d78c:	1ad3      	subs	r3, r2, r3
 800d78e:	e020      	b.n	800d7d2 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d798:	1ad3      	subs	r3, r2, r3
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	dd03      	ble.n	800d7a6 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	2200      	movs	r2, #0
 800d7a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800d7a4:	e014      	b.n	800d7d0 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d7ae:	1ad3      	subs	r3, r2, r3
 800d7b0:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800d7b2:	68bb      	ldr	r3, [r7, #8]
 800d7b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d7b8:	d306      	bcc.n	800d7c8 <tcp_update_rcv_ann_wnd+0x90>
 800d7ba:	4b08      	ldr	r3, [pc, #32]	@ (800d7dc <tcp_update_rcv_ann_wnd+0xa4>)
 800d7bc:	f240 32b6 	movw	r2, #950	@ 0x3b6
 800d7c0:	4909      	ldr	r1, [pc, #36]	@ (800d7e8 <tcp_update_rcv_ann_wnd+0xb0>)
 800d7c2:	4808      	ldr	r0, [pc, #32]	@ (800d7e4 <tcp_update_rcv_ann_wnd+0xac>)
 800d7c4:	f008 fda4 	bl	8016310 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800d7c8:	68bb      	ldr	r3, [r7, #8]
 800d7ca:	b29a      	uxth	r2, r3
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 800d7d0:	2300      	movs	r3, #0
  }
}
 800d7d2:	4618      	mov	r0, r3
 800d7d4:	3710      	adds	r7, #16
 800d7d6:	46bd      	mov	sp, r7
 800d7d8:	bd80      	pop	{r7, pc}
 800d7da:	bf00      	nop
 800d7dc:	08018e58 	.word	0x08018e58
 800d7e0:	080190b4 	.word	0x080190b4
 800d7e4:	08018e9c 	.word	0x08018e9c
 800d7e8:	080190d8 	.word	0x080190d8

0800d7ec <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800d7ec:	b580      	push	{r7, lr}
 800d7ee:	b084      	sub	sp, #16
 800d7f0:	af00      	add	r7, sp, #0
 800d7f2:	6078      	str	r0, [r7, #4]
 800d7f4:	460b      	mov	r3, r1
 800d7f6:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	2b00      	cmp	r3, #0
 800d7fc:	d107      	bne.n	800d80e <tcp_recved+0x22>
 800d7fe:	4b1f      	ldr	r3, [pc, #124]	@ (800d87c <tcp_recved+0x90>)
 800d800:	f240 32cf 	movw	r2, #975	@ 0x3cf
 800d804:	491e      	ldr	r1, [pc, #120]	@ (800d880 <tcp_recved+0x94>)
 800d806:	481f      	ldr	r0, [pc, #124]	@ (800d884 <tcp_recved+0x98>)
 800d808:	f008 fd82 	bl	8016310 <iprintf>
 800d80c:	e032      	b.n	800d874 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	7d1b      	ldrb	r3, [r3, #20]
 800d812:	2b01      	cmp	r3, #1
 800d814:	d106      	bne.n	800d824 <tcp_recved+0x38>
 800d816:	4b19      	ldr	r3, [pc, #100]	@ (800d87c <tcp_recved+0x90>)
 800d818:	f240 32d2 	movw	r2, #978	@ 0x3d2
 800d81c:	491a      	ldr	r1, [pc, #104]	@ (800d888 <tcp_recved+0x9c>)
 800d81e:	4819      	ldr	r0, [pc, #100]	@ (800d884 <tcp_recved+0x98>)
 800d820:	f008 fd76 	bl	8016310 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800d828:	887b      	ldrh	r3, [r7, #2]
 800d82a:	4413      	add	r3, r2
 800d82c:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800d82e:	89fb      	ldrh	r3, [r7, #14]
 800d830:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800d834:	d804      	bhi.n	800d840 <tcp_recved+0x54>
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d83a:	89fa      	ldrh	r2, [r7, #14]
 800d83c:	429a      	cmp	r2, r3
 800d83e:	d204      	bcs.n	800d84a <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800d846:	851a      	strh	r2, [r3, #40]	@ 0x28
 800d848:	e002      	b.n	800d850 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	89fa      	ldrh	r2, [r7, #14]
 800d84e:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800d850:	6878      	ldr	r0, [r7, #4]
 800d852:	f7ff ff71 	bl	800d738 <tcp_update_rcv_ann_wnd>
 800d856:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800d858:	68bb      	ldr	r3, [r7, #8]
 800d85a:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 800d85e:	d309      	bcc.n	800d874 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	8b5b      	ldrh	r3, [r3, #26]
 800d864:	f043 0302 	orr.w	r3, r3, #2
 800d868:	b29a      	uxth	r2, r3
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800d86e:	6878      	ldr	r0, [r7, #4]
 800d870:	f004 fbb6 	bl	8011fe0 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800d874:	3710      	adds	r7, #16
 800d876:	46bd      	mov	sp, r7
 800d878:	bd80      	pop	{r7, pc}
 800d87a:	bf00      	nop
 800d87c:	08018e58 	.word	0x08018e58
 800d880:	080190f4 	.word	0x080190f4
 800d884:	08018e9c 	.word	0x08018e9c
 800d888:	0801910c 	.word	0x0801910c

0800d88c <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800d88c:	b480      	push	{r7}
 800d88e:	b083      	sub	sp, #12
 800d890:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800d892:	2300      	movs	r3, #0
 800d894:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800d896:	4b1e      	ldr	r3, [pc, #120]	@ (800d910 <tcp_new_port+0x84>)
 800d898:	881b      	ldrh	r3, [r3, #0]
 800d89a:	3301      	adds	r3, #1
 800d89c:	b29a      	uxth	r2, r3
 800d89e:	4b1c      	ldr	r3, [pc, #112]	@ (800d910 <tcp_new_port+0x84>)
 800d8a0:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800d8a2:	4b1b      	ldr	r3, [pc, #108]	@ (800d910 <tcp_new_port+0x84>)
 800d8a4:	881b      	ldrh	r3, [r3, #0]
 800d8a6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d8aa:	4293      	cmp	r3, r2
 800d8ac:	d103      	bne.n	800d8b6 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800d8ae:	4b18      	ldr	r3, [pc, #96]	@ (800d910 <tcp_new_port+0x84>)
 800d8b0:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 800d8b4:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800d8b6:	2300      	movs	r3, #0
 800d8b8:	71fb      	strb	r3, [r7, #7]
 800d8ba:	e01e      	b.n	800d8fa <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800d8bc:	79fb      	ldrb	r3, [r7, #7]
 800d8be:	4a15      	ldr	r2, [pc, #84]	@ (800d914 <tcp_new_port+0x88>)
 800d8c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d8c4:	681b      	ldr	r3, [r3, #0]
 800d8c6:	603b      	str	r3, [r7, #0]
 800d8c8:	e011      	b.n	800d8ee <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800d8ca:	683b      	ldr	r3, [r7, #0]
 800d8cc:	8ada      	ldrh	r2, [r3, #22]
 800d8ce:	4b10      	ldr	r3, [pc, #64]	@ (800d910 <tcp_new_port+0x84>)
 800d8d0:	881b      	ldrh	r3, [r3, #0]
 800d8d2:	429a      	cmp	r2, r3
 800d8d4:	d108      	bne.n	800d8e8 <tcp_new_port+0x5c>
        n++;
 800d8d6:	88bb      	ldrh	r3, [r7, #4]
 800d8d8:	3301      	adds	r3, #1
 800d8da:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800d8dc:	88bb      	ldrh	r3, [r7, #4]
 800d8de:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800d8e2:	d3d8      	bcc.n	800d896 <tcp_new_port+0xa>
          return 0;
 800d8e4:	2300      	movs	r3, #0
 800d8e6:	e00d      	b.n	800d904 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800d8e8:	683b      	ldr	r3, [r7, #0]
 800d8ea:	68db      	ldr	r3, [r3, #12]
 800d8ec:	603b      	str	r3, [r7, #0]
 800d8ee:	683b      	ldr	r3, [r7, #0]
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	d1ea      	bne.n	800d8ca <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800d8f4:	79fb      	ldrb	r3, [r7, #7]
 800d8f6:	3301      	adds	r3, #1
 800d8f8:	71fb      	strb	r3, [r7, #7]
 800d8fa:	79fb      	ldrb	r3, [r7, #7]
 800d8fc:	2b03      	cmp	r3, #3
 800d8fe:	d9dd      	bls.n	800d8bc <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800d900:	4b03      	ldr	r3, [pc, #12]	@ (800d910 <tcp_new_port+0x84>)
 800d902:	881b      	ldrh	r3, [r3, #0]
}
 800d904:	4618      	mov	r0, r3
 800d906:	370c      	adds	r7, #12
 800d908:	46bd      	mov	sp, r7
 800d90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d90e:	4770      	bx	lr
 800d910:	20000124 	.word	0x20000124
 800d914:	0801ae7c 	.word	0x0801ae7c

0800d918 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800d918:	b5b0      	push	{r4, r5, r7, lr}
 800d91a:	b090      	sub	sp, #64	@ 0x40
 800d91c:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800d91e:	2300      	movs	r3, #0
 800d920:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 800d924:	4b95      	ldr	r3, [pc, #596]	@ (800db7c <tcp_slowtmr+0x264>)
 800d926:	681b      	ldr	r3, [r3, #0]
 800d928:	3301      	adds	r3, #1
 800d92a:	4a94      	ldr	r2, [pc, #592]	@ (800db7c <tcp_slowtmr+0x264>)
 800d92c:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800d92e:	4b94      	ldr	r3, [pc, #592]	@ (800db80 <tcp_slowtmr+0x268>)
 800d930:	781b      	ldrb	r3, [r3, #0]
 800d932:	3301      	adds	r3, #1
 800d934:	b2da      	uxtb	r2, r3
 800d936:	4b92      	ldr	r3, [pc, #584]	@ (800db80 <tcp_slowtmr+0x268>)
 800d938:	701a      	strb	r2, [r3, #0]
 800d93a:	e000      	b.n	800d93e <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 800d93c:	bf00      	nop
  prev = NULL;
 800d93e:	2300      	movs	r3, #0
 800d940:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 800d942:	4b90      	ldr	r3, [pc, #576]	@ (800db84 <tcp_slowtmr+0x26c>)
 800d944:	681b      	ldr	r3, [r3, #0]
 800d946:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800d948:	e2b7      	b.n	800deba <tcp_slowtmr+0x5a2>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800d94a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d94c:	7d1b      	ldrb	r3, [r3, #20]
 800d94e:	2b00      	cmp	r3, #0
 800d950:	d106      	bne.n	800d960 <tcp_slowtmr+0x48>
 800d952:	4b8d      	ldr	r3, [pc, #564]	@ (800db88 <tcp_slowtmr+0x270>)
 800d954:	f240 42be 	movw	r2, #1214	@ 0x4be
 800d958:	498c      	ldr	r1, [pc, #560]	@ (800db8c <tcp_slowtmr+0x274>)
 800d95a:	488d      	ldr	r0, [pc, #564]	@ (800db90 <tcp_slowtmr+0x278>)
 800d95c:	f008 fcd8 	bl	8016310 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800d960:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d962:	7d1b      	ldrb	r3, [r3, #20]
 800d964:	2b01      	cmp	r3, #1
 800d966:	d106      	bne.n	800d976 <tcp_slowtmr+0x5e>
 800d968:	4b87      	ldr	r3, [pc, #540]	@ (800db88 <tcp_slowtmr+0x270>)
 800d96a:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 800d96e:	4989      	ldr	r1, [pc, #548]	@ (800db94 <tcp_slowtmr+0x27c>)
 800d970:	4887      	ldr	r0, [pc, #540]	@ (800db90 <tcp_slowtmr+0x278>)
 800d972:	f008 fccd 	bl	8016310 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800d976:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d978:	7d1b      	ldrb	r3, [r3, #20]
 800d97a:	2b0a      	cmp	r3, #10
 800d97c:	d106      	bne.n	800d98c <tcp_slowtmr+0x74>
 800d97e:	4b82      	ldr	r3, [pc, #520]	@ (800db88 <tcp_slowtmr+0x270>)
 800d980:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 800d984:	4984      	ldr	r1, [pc, #528]	@ (800db98 <tcp_slowtmr+0x280>)
 800d986:	4882      	ldr	r0, [pc, #520]	@ (800db90 <tcp_slowtmr+0x278>)
 800d988:	f008 fcc2 	bl	8016310 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800d98c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d98e:	7f9a      	ldrb	r2, [r3, #30]
 800d990:	4b7b      	ldr	r3, [pc, #492]	@ (800db80 <tcp_slowtmr+0x268>)
 800d992:	781b      	ldrb	r3, [r3, #0]
 800d994:	429a      	cmp	r2, r3
 800d996:	d105      	bne.n	800d9a4 <tcp_slowtmr+0x8c>
      prev = pcb;
 800d998:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d99a:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800d99c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d99e:	68db      	ldr	r3, [r3, #12]
 800d9a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 800d9a2:	e28a      	b.n	800deba <tcp_slowtmr+0x5a2>
    pcb->last_timer = tcp_timer_ctr;
 800d9a4:	4b76      	ldr	r3, [pc, #472]	@ (800db80 <tcp_slowtmr+0x268>)
 800d9a6:	781a      	ldrb	r2, [r3, #0]
 800d9a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d9aa:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 800d9ac:	2300      	movs	r3, #0
 800d9ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 800d9b2:	2300      	movs	r3, #0
 800d9b4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800d9b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d9ba:	7d1b      	ldrb	r3, [r3, #20]
 800d9bc:	2b02      	cmp	r3, #2
 800d9be:	d10a      	bne.n	800d9d6 <tcp_slowtmr+0xbe>
 800d9c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d9c2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d9c6:	2b05      	cmp	r3, #5
 800d9c8:	d905      	bls.n	800d9d6 <tcp_slowtmr+0xbe>
      ++pcb_remove;
 800d9ca:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d9ce:	3301      	adds	r3, #1
 800d9d0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800d9d4:	e11e      	b.n	800dc14 <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800d9d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d9d8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d9dc:	2b0b      	cmp	r3, #11
 800d9de:	d905      	bls.n	800d9ec <tcp_slowtmr+0xd4>
      ++pcb_remove;
 800d9e0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d9e4:	3301      	adds	r3, #1
 800d9e6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800d9ea:	e113      	b.n	800dc14 <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 800d9ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d9ee:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 800d9f2:	2b00      	cmp	r3, #0
 800d9f4:	d075      	beq.n	800dae2 <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800d9f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d9f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	d006      	beq.n	800da0c <tcp_slowtmr+0xf4>
 800d9fe:	4b62      	ldr	r3, [pc, #392]	@ (800db88 <tcp_slowtmr+0x270>)
 800da00:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 800da04:	4965      	ldr	r1, [pc, #404]	@ (800db9c <tcp_slowtmr+0x284>)
 800da06:	4862      	ldr	r0, [pc, #392]	@ (800db90 <tcp_slowtmr+0x278>)
 800da08:	f008 fc82 	bl	8016310 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800da0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da0e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800da10:	2b00      	cmp	r3, #0
 800da12:	d106      	bne.n	800da22 <tcp_slowtmr+0x10a>
 800da14:	4b5c      	ldr	r3, [pc, #368]	@ (800db88 <tcp_slowtmr+0x270>)
 800da16:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 800da1a:	4961      	ldr	r1, [pc, #388]	@ (800dba0 <tcp_slowtmr+0x288>)
 800da1c:	485c      	ldr	r0, [pc, #368]	@ (800db90 <tcp_slowtmr+0x278>)
 800da1e:	f008 fc77 	bl	8016310 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800da22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da24:	f893 30a2 	ldrb.w	r3, [r3, #162]	@ 0xa2
 800da28:	2b0b      	cmp	r3, #11
 800da2a:	d905      	bls.n	800da38 <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 800da2c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800da30:	3301      	adds	r3, #1
 800da32:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800da36:	e0ed      	b.n	800dc14 <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800da38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da3a:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 800da3e:	3b01      	subs	r3, #1
 800da40:	4a58      	ldr	r2, [pc, #352]	@ (800dba4 <tcp_slowtmr+0x28c>)
 800da42:	5cd3      	ldrb	r3, [r2, r3]
 800da44:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800da46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da48:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 800da4c:	7c7a      	ldrb	r2, [r7, #17]
 800da4e:	429a      	cmp	r2, r3
 800da50:	d907      	bls.n	800da62 <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 800da52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da54:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 800da58:	3301      	adds	r3, #1
 800da5a:	b2da      	uxtb	r2, r3
 800da5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da5e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
          if (pcb->persist_cnt >= backoff_cnt) {
 800da62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da64:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 800da68:	7c7a      	ldrb	r2, [r7, #17]
 800da6a:	429a      	cmp	r2, r3
 800da6c:	f200 80d2 	bhi.w	800dc14 <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 800da70:	2301      	movs	r3, #1
 800da72:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 800da74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da76:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800da7a:	2b00      	cmp	r3, #0
 800da7c:	d108      	bne.n	800da90 <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800da7e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800da80:	f005 f956 	bl	8012d30 <tcp_zero_window_probe>
 800da84:	4603      	mov	r3, r0
 800da86:	2b00      	cmp	r3, #0
 800da88:	d014      	beq.n	800dab4 <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 800da8a:	2300      	movs	r3, #0
 800da8c:	623b      	str	r3, [r7, #32]
 800da8e:	e011      	b.n	800dab4 <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800da90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da92:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800da96:	4619      	mov	r1, r3
 800da98:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800da9a:	f004 f81b 	bl	8011ad4 <tcp_split_unsent_seg>
 800da9e:	4603      	mov	r3, r0
 800daa0:	2b00      	cmp	r3, #0
 800daa2:	d107      	bne.n	800dab4 <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 800daa4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800daa6:	f004 fa9b 	bl	8011fe0 <tcp_output>
 800daaa:	4603      	mov	r3, r0
 800daac:	2b00      	cmp	r3, #0
 800daae:	d101      	bne.n	800dab4 <tcp_slowtmr+0x19c>
                  next_slot = 0;
 800dab0:	2300      	movs	r3, #0
 800dab2:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 800dab4:	6a3b      	ldr	r3, [r7, #32]
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	f000 80ac 	beq.w	800dc14 <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 800dabc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dabe:	2200      	movs	r2, #0
 800dac0:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800dac4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dac6:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 800daca:	2b06      	cmp	r3, #6
 800dacc:	f200 80a2 	bhi.w	800dc14 <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 800dad0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dad2:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 800dad6:	3301      	adds	r3, #1
 800dad8:	b2da      	uxtb	r2, r3
 800dada:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dadc:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1
 800dae0:	e098      	b.n	800dc14 <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800dae2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dae4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800dae8:	2b00      	cmp	r3, #0
 800daea:	db0f      	blt.n	800db0c <tcp_slowtmr+0x1f4>
 800daec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800daee:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800daf2:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800daf6:	4293      	cmp	r3, r2
 800daf8:	d008      	beq.n	800db0c <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 800dafa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dafc:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800db00:	b29b      	uxth	r3, r3
 800db02:	3301      	adds	r3, #1
 800db04:	b29b      	uxth	r3, r3
 800db06:	b21a      	sxth	r2, r3
 800db08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db0a:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 800db0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db0e:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 800db12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db14:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800db18:	429a      	cmp	r2, r3
 800db1a:	db7b      	blt.n	800dc14 <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800db1c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800db1e:	f004 fd53 	bl	80125c8 <tcp_rexmit_rto_prepare>
 800db22:	4603      	mov	r3, r0
 800db24:	2b00      	cmp	r3, #0
 800db26:	d007      	beq.n	800db38 <tcp_slowtmr+0x220>
 800db28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	d171      	bne.n	800dc14 <tcp_slowtmr+0x2fc>
 800db30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db32:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800db34:	2b00      	cmp	r3, #0
 800db36:	d06d      	beq.n	800dc14 <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 800db38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db3a:	7d1b      	ldrb	r3, [r3, #20]
 800db3c:	2b02      	cmp	r3, #2
 800db3e:	d03a      	beq.n	800dbb6 <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800db40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db42:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800db46:	2b0c      	cmp	r3, #12
 800db48:	bf28      	it	cs
 800db4a:	230c      	movcs	r3, #12
 800db4c:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800db4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db50:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800db54:	10db      	asrs	r3, r3, #3
 800db56:	b21b      	sxth	r3, r3
 800db58:	461a      	mov	r2, r3
 800db5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db5c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800db60:	4413      	add	r3, r2
 800db62:	7efa      	ldrb	r2, [r7, #27]
 800db64:	4910      	ldr	r1, [pc, #64]	@ (800dba8 <tcp_slowtmr+0x290>)
 800db66:	5c8a      	ldrb	r2, [r1, r2]
 800db68:	4093      	lsls	r3, r2
 800db6a:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800db6c:	697b      	ldr	r3, [r7, #20]
 800db6e:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 800db72:	4293      	cmp	r3, r2
 800db74:	dc1a      	bgt.n	800dbac <tcp_slowtmr+0x294>
 800db76:	697b      	ldr	r3, [r7, #20]
 800db78:	b21a      	sxth	r2, r3
 800db7a:	e019      	b.n	800dbb0 <tcp_slowtmr+0x298>
 800db7c:	2000eb44 	.word	0x2000eb44
 800db80:	2000eb5a 	.word	0x2000eb5a
 800db84:	2000eb50 	.word	0x2000eb50
 800db88:	08018e58 	.word	0x08018e58
 800db8c:	0801919c 	.word	0x0801919c
 800db90:	08018e9c 	.word	0x08018e9c
 800db94:	080191c8 	.word	0x080191c8
 800db98:	080191f4 	.word	0x080191f4
 800db9c:	08019224 	.word	0x08019224
 800dba0:	08019258 	.word	0x08019258
 800dba4:	0801ae74 	.word	0x0801ae74
 800dba8:	0801ae64 	.word	0x0801ae64
 800dbac:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800dbb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dbb2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 800dbb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dbb8:	2200      	movs	r2, #0
 800dbba:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800dbbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dbbe:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800dbc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dbc4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800dbc8:	4293      	cmp	r3, r2
 800dbca:	bf28      	it	cs
 800dbcc:	4613      	movcs	r3, r2
 800dbce:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800dbd0:	8a7b      	ldrh	r3, [r7, #18]
 800dbd2:	085b      	lsrs	r3, r3, #1
 800dbd4:	b29a      	uxth	r2, r3
 800dbd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dbd8:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800dbdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dbde:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800dbe2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dbe4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800dbe6:	005b      	lsls	r3, r3, #1
 800dbe8:	b29b      	uxth	r3, r3
 800dbea:	429a      	cmp	r2, r3
 800dbec:	d206      	bcs.n	800dbfc <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800dbee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dbf0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800dbf2:	005b      	lsls	r3, r3, #1
 800dbf4:	b29a      	uxth	r2, r3
 800dbf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dbf8:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 800dbfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dbfe:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 800dc00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc02:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 800dc06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc08:	2200      	movs	r2, #0
 800dc0a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 800dc0e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800dc10:	f004 fd4a 	bl	80126a8 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 800dc14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc16:	7d1b      	ldrb	r3, [r3, #20]
 800dc18:	2b06      	cmp	r3, #6
 800dc1a:	d111      	bne.n	800dc40 <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 800dc1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc1e:	8b5b      	ldrh	r3, [r3, #26]
 800dc20:	f003 0310 	and.w	r3, r3, #16
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	d00b      	beq.n	800dc40 <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800dc28:	4b94      	ldr	r3, [pc, #592]	@ (800de7c <tcp_slowtmr+0x564>)
 800dc2a:	681a      	ldr	r2, [r3, #0]
 800dc2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc2e:	6a1b      	ldr	r3, [r3, #32]
 800dc30:	1ad3      	subs	r3, r2, r3
 800dc32:	2b28      	cmp	r3, #40	@ 0x28
 800dc34:	d904      	bls.n	800dc40 <tcp_slowtmr+0x328>
          ++pcb_remove;
 800dc36:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800dc3a:	3301      	adds	r3, #1
 800dc3c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800dc40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc42:	7a5b      	ldrb	r3, [r3, #9]
 800dc44:	f003 0308 	and.w	r3, r3, #8
 800dc48:	2b00      	cmp	r3, #0
 800dc4a:	d053      	beq.n	800dcf4 <tcp_slowtmr+0x3dc>
        ((pcb->state == ESTABLISHED) ||
 800dc4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc4e:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800dc50:	2b04      	cmp	r3, #4
 800dc52:	d003      	beq.n	800dc5c <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 800dc54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc56:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800dc58:	2b07      	cmp	r3, #7
 800dc5a:	d14b      	bne.n	800dcf4 <tcp_slowtmr+0x3dc>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800dc5c:	4b87      	ldr	r3, [pc, #540]	@ (800de7c <tcp_slowtmr+0x564>)
 800dc5e:	681a      	ldr	r2, [r3, #0]
 800dc60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc62:	6a1b      	ldr	r3, [r3, #32]
 800dc64:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800dc66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc68:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 800dc6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc6e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800dc72:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800dc74:	f8d0 0098 	ldr.w	r0, [r0, #152]	@ 0x98
 800dc78:	fb00 f303 	mul.w	r3, r0, r3
 800dc7c:	440b      	add	r3, r1
 800dc7e:	4980      	ldr	r1, [pc, #512]	@ (800de80 <tcp_slowtmr+0x568>)
 800dc80:	fba1 1303 	umull	r1, r3, r1, r3
 800dc84:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800dc86:	429a      	cmp	r2, r3
 800dc88:	d90a      	bls.n	800dca0 <tcp_slowtmr+0x388>
        ++pcb_remove;
 800dc8a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800dc8e:	3301      	adds	r3, #1
 800dc90:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 800dc94:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800dc98:	3301      	adds	r3, #1
 800dc9a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800dc9e:	e029      	b.n	800dcf4 <tcp_slowtmr+0x3dc>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800dca0:	4b76      	ldr	r3, [pc, #472]	@ (800de7c <tcp_slowtmr+0x564>)
 800dca2:	681a      	ldr	r2, [r3, #0]
 800dca4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dca6:	6a1b      	ldr	r3, [r3, #32]
 800dca8:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800dcaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dcac:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 800dcb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dcb2:	f893 30a3 	ldrb.w	r3, [r3, #163]	@ 0xa3
 800dcb6:	4618      	mov	r0, r3
 800dcb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dcba:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800dcbe:	fb00 f303 	mul.w	r3, r0, r3
 800dcc2:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800dcc4:	496e      	ldr	r1, [pc, #440]	@ (800de80 <tcp_slowtmr+0x568>)
 800dcc6:	fba1 1303 	umull	r1, r3, r1, r3
 800dcca:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800dccc:	429a      	cmp	r2, r3
 800dcce:	d911      	bls.n	800dcf4 <tcp_slowtmr+0x3dc>
        err = tcp_keepalive(pcb);
 800dcd0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800dcd2:	f004 ffed 	bl	8012cb0 <tcp_keepalive>
 800dcd6:	4603      	mov	r3, r0
 800dcd8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 800dcdc:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800dce0:	2b00      	cmp	r3, #0
 800dce2:	d107      	bne.n	800dcf4 <tcp_slowtmr+0x3dc>
          pcb->keep_cnt_sent++;
 800dce4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dce6:	f893 30a3 	ldrb.w	r3, [r3, #163]	@ 0xa3
 800dcea:	3301      	adds	r3, #1
 800dcec:	b2da      	uxtb	r2, r3
 800dcee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dcf0:	f883 20a3 	strb.w	r2, [r3, #163]	@ 0xa3
    if (pcb->ooseq != NULL &&
 800dcf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dcf6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	d011      	beq.n	800dd20 <tcp_slowtmr+0x408>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800dcfc:	4b5f      	ldr	r3, [pc, #380]	@ (800de7c <tcp_slowtmr+0x564>)
 800dcfe:	681a      	ldr	r2, [r3, #0]
 800dd00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd02:	6a1b      	ldr	r3, [r3, #32]
 800dd04:	1ad2      	subs	r2, r2, r3
 800dd06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd08:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800dd0c:	4619      	mov	r1, r3
 800dd0e:	460b      	mov	r3, r1
 800dd10:	005b      	lsls	r3, r3, #1
 800dd12:	440b      	add	r3, r1
 800dd14:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800dd16:	429a      	cmp	r2, r3
 800dd18:	d302      	bcc.n	800dd20 <tcp_slowtmr+0x408>
      tcp_free_ooseq(pcb);
 800dd1a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800dd1c:	f000 feae 	bl	800ea7c <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 800dd20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd22:	7d1b      	ldrb	r3, [r3, #20]
 800dd24:	2b03      	cmp	r3, #3
 800dd26:	d10b      	bne.n	800dd40 <tcp_slowtmr+0x428>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800dd28:	4b54      	ldr	r3, [pc, #336]	@ (800de7c <tcp_slowtmr+0x564>)
 800dd2a:	681a      	ldr	r2, [r3, #0]
 800dd2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd2e:	6a1b      	ldr	r3, [r3, #32]
 800dd30:	1ad3      	subs	r3, r2, r3
 800dd32:	2b28      	cmp	r3, #40	@ 0x28
 800dd34:	d904      	bls.n	800dd40 <tcp_slowtmr+0x428>
        ++pcb_remove;
 800dd36:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800dd3a:	3301      	adds	r3, #1
 800dd3c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 800dd40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd42:	7d1b      	ldrb	r3, [r3, #20]
 800dd44:	2b09      	cmp	r3, #9
 800dd46:	d10b      	bne.n	800dd60 <tcp_slowtmr+0x448>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800dd48:	4b4c      	ldr	r3, [pc, #304]	@ (800de7c <tcp_slowtmr+0x564>)
 800dd4a:	681a      	ldr	r2, [r3, #0]
 800dd4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd4e:	6a1b      	ldr	r3, [r3, #32]
 800dd50:	1ad3      	subs	r3, r2, r3
 800dd52:	2bf0      	cmp	r3, #240	@ 0xf0
 800dd54:	d904      	bls.n	800dd60 <tcp_slowtmr+0x448>
        ++pcb_remove;
 800dd56:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800dd5a:	3301      	adds	r3, #1
 800dd5c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 800dd60:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	d060      	beq.n	800de2a <tcp_slowtmr+0x512>
      tcp_err_fn err_fn = pcb->errf;
 800dd68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800dd6e:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 800dd70:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800dd72:	f000 fccf 	bl	800e714 <tcp_pcb_purge>
      if (prev != NULL) {
 800dd76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd78:	2b00      	cmp	r3, #0
 800dd7a:	d010      	beq.n	800dd9e <tcp_slowtmr+0x486>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800dd7c:	4b41      	ldr	r3, [pc, #260]	@ (800de84 <tcp_slowtmr+0x56c>)
 800dd7e:	681b      	ldr	r3, [r3, #0]
 800dd80:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800dd82:	429a      	cmp	r2, r3
 800dd84:	d106      	bne.n	800dd94 <tcp_slowtmr+0x47c>
 800dd86:	4b40      	ldr	r3, [pc, #256]	@ (800de88 <tcp_slowtmr+0x570>)
 800dd88:	f240 526d 	movw	r2, #1389	@ 0x56d
 800dd8c:	493f      	ldr	r1, [pc, #252]	@ (800de8c <tcp_slowtmr+0x574>)
 800dd8e:	4840      	ldr	r0, [pc, #256]	@ (800de90 <tcp_slowtmr+0x578>)
 800dd90:	f008 fabe 	bl	8016310 <iprintf>
        prev->next = pcb->next;
 800dd94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd96:	68da      	ldr	r2, [r3, #12]
 800dd98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd9a:	60da      	str	r2, [r3, #12]
 800dd9c:	e00f      	b.n	800ddbe <tcp_slowtmr+0x4a6>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800dd9e:	4b39      	ldr	r3, [pc, #228]	@ (800de84 <tcp_slowtmr+0x56c>)
 800dda0:	681b      	ldr	r3, [r3, #0]
 800dda2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800dda4:	429a      	cmp	r2, r3
 800dda6:	d006      	beq.n	800ddb6 <tcp_slowtmr+0x49e>
 800dda8:	4b37      	ldr	r3, [pc, #220]	@ (800de88 <tcp_slowtmr+0x570>)
 800ddaa:	f240 5271 	movw	r2, #1393	@ 0x571
 800ddae:	4939      	ldr	r1, [pc, #228]	@ (800de94 <tcp_slowtmr+0x57c>)
 800ddb0:	4837      	ldr	r0, [pc, #220]	@ (800de90 <tcp_slowtmr+0x578>)
 800ddb2:	f008 faad 	bl	8016310 <iprintf>
        tcp_active_pcbs = pcb->next;
 800ddb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ddb8:	68db      	ldr	r3, [r3, #12]
 800ddba:	4a32      	ldr	r2, [pc, #200]	@ (800de84 <tcp_slowtmr+0x56c>)
 800ddbc:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 800ddbe:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	d013      	beq.n	800ddee <tcp_slowtmr+0x4d6>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800ddc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ddc8:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800ddca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ddcc:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800ddce:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 800ddd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ddd2:	3304      	adds	r3, #4
 800ddd4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ddd6:	8ad2      	ldrh	r2, [r2, #22]
 800ddd8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ddda:	8b09      	ldrh	r1, [r1, #24]
 800dddc:	9102      	str	r1, [sp, #8]
 800ddde:	9201      	str	r2, [sp, #4]
 800dde0:	9300      	str	r3, [sp, #0]
 800dde2:	462b      	mov	r3, r5
 800dde4:	4622      	mov	r2, r4
 800dde6:	4601      	mov	r1, r0
 800dde8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ddea:	f004 fead 	bl	8012b48 <tcp_rst>
      err_arg = pcb->callback_arg;
 800ddee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ddf0:	691b      	ldr	r3, [r3, #16]
 800ddf2:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800ddf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ddf6:	7d1b      	ldrb	r3, [r3, #20]
 800ddf8:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800ddfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ddfc:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800ddfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de00:	68db      	ldr	r3, [r3, #12]
 800de02:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800de04:	6838      	ldr	r0, [r7, #0]
 800de06:	f7fe ffe5 	bl	800cdd4 <tcp_free>
      tcp_active_pcbs_changed = 0;
 800de0a:	4b23      	ldr	r3, [pc, #140]	@ (800de98 <tcp_slowtmr+0x580>)
 800de0c:	2200      	movs	r2, #0
 800de0e:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800de10:	68fb      	ldr	r3, [r7, #12]
 800de12:	2b00      	cmp	r3, #0
 800de14:	d004      	beq.n	800de20 <tcp_slowtmr+0x508>
 800de16:	68fb      	ldr	r3, [r7, #12]
 800de18:	f06f 010c 	mvn.w	r1, #12
 800de1c:	68b8      	ldr	r0, [r7, #8]
 800de1e:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800de20:	4b1d      	ldr	r3, [pc, #116]	@ (800de98 <tcp_slowtmr+0x580>)
 800de22:	781b      	ldrb	r3, [r3, #0]
 800de24:	2b00      	cmp	r3, #0
 800de26:	d048      	beq.n	800deba <tcp_slowtmr+0x5a2>
        goto tcp_slowtmr_start;
 800de28:	e589      	b.n	800d93e <tcp_slowtmr+0x26>
      prev = pcb;
 800de2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de2c:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800de2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de30:	68db      	ldr	r3, [r3, #12]
 800de32:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 800de34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de36:	7f1b      	ldrb	r3, [r3, #28]
 800de38:	3301      	adds	r3, #1
 800de3a:	b2da      	uxtb	r2, r3
 800de3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de3e:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800de40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de42:	7f1a      	ldrb	r2, [r3, #28]
 800de44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de46:	7f5b      	ldrb	r3, [r3, #29]
 800de48:	429a      	cmp	r2, r3
 800de4a:	d336      	bcc.n	800deba <tcp_slowtmr+0x5a2>
        prev->polltmr = 0;
 800de4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de4e:	2200      	movs	r2, #0
 800de50:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 800de52:	4b11      	ldr	r3, [pc, #68]	@ (800de98 <tcp_slowtmr+0x580>)
 800de54:	2200      	movs	r2, #0
 800de56:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800de58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800de5e:	2b00      	cmp	r3, #0
 800de60:	d01c      	beq.n	800de9c <tcp_slowtmr+0x584>
 800de62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de64:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800de68:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800de6a:	6912      	ldr	r2, [r2, #16]
 800de6c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800de6e:	4610      	mov	r0, r2
 800de70:	4798      	blx	r3
 800de72:	4603      	mov	r3, r0
 800de74:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 800de78:	e013      	b.n	800dea2 <tcp_slowtmr+0x58a>
 800de7a:	bf00      	nop
 800de7c:	2000eb44 	.word	0x2000eb44
 800de80:	10624dd3 	.word	0x10624dd3
 800de84:	2000eb50 	.word	0x2000eb50
 800de88:	08018e58 	.word	0x08018e58
 800de8c:	08019290 	.word	0x08019290
 800de90:	08018e9c 	.word	0x08018e9c
 800de94:	080192bc 	.word	0x080192bc
 800de98:	2000eb58 	.word	0x2000eb58
 800de9c:	2300      	movs	r3, #0
 800de9e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 800dea2:	4b38      	ldr	r3, [pc, #224]	@ (800df84 <tcp_slowtmr+0x66c>)
 800dea4:	781b      	ldrb	r3, [r3, #0]
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	f47f ad48 	bne.w	800d93c <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800deac:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	d102      	bne.n	800deba <tcp_slowtmr+0x5a2>
          tcp_output(prev);
 800deb4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800deb6:	f004 f893 	bl	8011fe0 <tcp_output>
  while (pcb != NULL) {
 800deba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800debc:	2b00      	cmp	r3, #0
 800debe:	f47f ad44 	bne.w	800d94a <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800dec2:	2300      	movs	r3, #0
 800dec4:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 800dec6:	4b30      	ldr	r3, [pc, #192]	@ (800df88 <tcp_slowtmr+0x670>)
 800dec8:	681b      	ldr	r3, [r3, #0]
 800deca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800decc:	e052      	b.n	800df74 <tcp_slowtmr+0x65c>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800dece:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ded0:	7d1b      	ldrb	r3, [r3, #20]
 800ded2:	2b0a      	cmp	r3, #10
 800ded4:	d006      	beq.n	800dee4 <tcp_slowtmr+0x5cc>
 800ded6:	4b2d      	ldr	r3, [pc, #180]	@ (800df8c <tcp_slowtmr+0x674>)
 800ded8:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 800dedc:	492c      	ldr	r1, [pc, #176]	@ (800df90 <tcp_slowtmr+0x678>)
 800dede:	482d      	ldr	r0, [pc, #180]	@ (800df94 <tcp_slowtmr+0x67c>)
 800dee0:	f008 fa16 	bl	8016310 <iprintf>
    pcb_remove = 0;
 800dee4:	2300      	movs	r3, #0
 800dee6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800deea:	4b2b      	ldr	r3, [pc, #172]	@ (800df98 <tcp_slowtmr+0x680>)
 800deec:	681a      	ldr	r2, [r3, #0]
 800deee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800def0:	6a1b      	ldr	r3, [r3, #32]
 800def2:	1ad3      	subs	r3, r2, r3
 800def4:	2bf0      	cmp	r3, #240	@ 0xf0
 800def6:	d904      	bls.n	800df02 <tcp_slowtmr+0x5ea>
      ++pcb_remove;
 800def8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800defc:	3301      	adds	r3, #1
 800defe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800df02:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800df06:	2b00      	cmp	r3, #0
 800df08:	d02f      	beq.n	800df6a <tcp_slowtmr+0x652>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800df0a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800df0c:	f000 fc02 	bl	800e714 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800df10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df12:	2b00      	cmp	r3, #0
 800df14:	d010      	beq.n	800df38 <tcp_slowtmr+0x620>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800df16:	4b1c      	ldr	r3, [pc, #112]	@ (800df88 <tcp_slowtmr+0x670>)
 800df18:	681b      	ldr	r3, [r3, #0]
 800df1a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800df1c:	429a      	cmp	r2, r3
 800df1e:	d106      	bne.n	800df2e <tcp_slowtmr+0x616>
 800df20:	4b1a      	ldr	r3, [pc, #104]	@ (800df8c <tcp_slowtmr+0x674>)
 800df22:	f240 52af 	movw	r2, #1455	@ 0x5af
 800df26:	491d      	ldr	r1, [pc, #116]	@ (800df9c <tcp_slowtmr+0x684>)
 800df28:	481a      	ldr	r0, [pc, #104]	@ (800df94 <tcp_slowtmr+0x67c>)
 800df2a:	f008 f9f1 	bl	8016310 <iprintf>
        prev->next = pcb->next;
 800df2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df30:	68da      	ldr	r2, [r3, #12]
 800df32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df34:	60da      	str	r2, [r3, #12]
 800df36:	e00f      	b.n	800df58 <tcp_slowtmr+0x640>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800df38:	4b13      	ldr	r3, [pc, #76]	@ (800df88 <tcp_slowtmr+0x670>)
 800df3a:	681b      	ldr	r3, [r3, #0]
 800df3c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800df3e:	429a      	cmp	r2, r3
 800df40:	d006      	beq.n	800df50 <tcp_slowtmr+0x638>
 800df42:	4b12      	ldr	r3, [pc, #72]	@ (800df8c <tcp_slowtmr+0x674>)
 800df44:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 800df48:	4915      	ldr	r1, [pc, #84]	@ (800dfa0 <tcp_slowtmr+0x688>)
 800df4a:	4812      	ldr	r0, [pc, #72]	@ (800df94 <tcp_slowtmr+0x67c>)
 800df4c:	f008 f9e0 	bl	8016310 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800df50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df52:	68db      	ldr	r3, [r3, #12]
 800df54:	4a0c      	ldr	r2, [pc, #48]	@ (800df88 <tcp_slowtmr+0x670>)
 800df56:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800df58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df5a:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800df5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df5e:	68db      	ldr	r3, [r3, #12]
 800df60:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800df62:	69f8      	ldr	r0, [r7, #28]
 800df64:	f7fe ff36 	bl	800cdd4 <tcp_free>
 800df68:	e004      	b.n	800df74 <tcp_slowtmr+0x65c>
    } else {
      prev = pcb;
 800df6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df6c:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800df6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df70:	68db      	ldr	r3, [r3, #12]
 800df72:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800df74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df76:	2b00      	cmp	r3, #0
 800df78:	d1a9      	bne.n	800dece <tcp_slowtmr+0x5b6>
    }
  }
}
 800df7a:	bf00      	nop
 800df7c:	bf00      	nop
 800df7e:	3730      	adds	r7, #48	@ 0x30
 800df80:	46bd      	mov	sp, r7
 800df82:	bdb0      	pop	{r4, r5, r7, pc}
 800df84:	2000eb58 	.word	0x2000eb58
 800df88:	2000eb54 	.word	0x2000eb54
 800df8c:	08018e58 	.word	0x08018e58
 800df90:	080192e8 	.word	0x080192e8
 800df94:	08018e9c 	.word	0x08018e9c
 800df98:	2000eb44 	.word	0x2000eb44
 800df9c:	08019318 	.word	0x08019318
 800dfa0:	08019340 	.word	0x08019340

0800dfa4 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800dfa4:	b580      	push	{r7, lr}
 800dfa6:	b082      	sub	sp, #8
 800dfa8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800dfaa:	4b2d      	ldr	r3, [pc, #180]	@ (800e060 <tcp_fasttmr+0xbc>)
 800dfac:	781b      	ldrb	r3, [r3, #0]
 800dfae:	3301      	adds	r3, #1
 800dfb0:	b2da      	uxtb	r2, r3
 800dfb2:	4b2b      	ldr	r3, [pc, #172]	@ (800e060 <tcp_fasttmr+0xbc>)
 800dfb4:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800dfb6:	4b2b      	ldr	r3, [pc, #172]	@ (800e064 <tcp_fasttmr+0xc0>)
 800dfb8:	681b      	ldr	r3, [r3, #0]
 800dfba:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800dfbc:	e048      	b.n	800e050 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	7f9a      	ldrb	r2, [r3, #30]
 800dfc2:	4b27      	ldr	r3, [pc, #156]	@ (800e060 <tcp_fasttmr+0xbc>)
 800dfc4:	781b      	ldrb	r3, [r3, #0]
 800dfc6:	429a      	cmp	r2, r3
 800dfc8:	d03f      	beq.n	800e04a <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800dfca:	4b25      	ldr	r3, [pc, #148]	@ (800e060 <tcp_fasttmr+0xbc>)
 800dfcc:	781a      	ldrb	r2, [r3, #0]
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	8b5b      	ldrh	r3, [r3, #26]
 800dfd6:	f003 0301 	and.w	r3, r3, #1
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	d010      	beq.n	800e000 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	8b5b      	ldrh	r3, [r3, #26]
 800dfe2:	f043 0302 	orr.w	r3, r3, #2
 800dfe6:	b29a      	uxth	r2, r3
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800dfec:	6878      	ldr	r0, [r7, #4]
 800dfee:	f003 fff7 	bl	8011fe0 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	8b5b      	ldrh	r3, [r3, #26]
 800dff6:	f023 0303 	bic.w	r3, r3, #3
 800dffa:	b29a      	uxth	r2, r3
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	8b5b      	ldrh	r3, [r3, #26]
 800e004:	f003 0308 	and.w	r3, r3, #8
 800e008:	2b00      	cmp	r3, #0
 800e00a:	d009      	beq.n	800e020 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	8b5b      	ldrh	r3, [r3, #26]
 800e010:	f023 0308 	bic.w	r3, r3, #8
 800e014:	b29a      	uxth	r2, r3
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800e01a:	6878      	ldr	r0, [r7, #4]
 800e01c:	f7ff f86e 	bl	800d0fc <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	68db      	ldr	r3, [r3, #12]
 800e024:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e02a:	2b00      	cmp	r3, #0
 800e02c:	d00a      	beq.n	800e044 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800e02e:	4b0e      	ldr	r3, [pc, #56]	@ (800e068 <tcp_fasttmr+0xc4>)
 800e030:	2200      	movs	r2, #0
 800e032:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800e034:	6878      	ldr	r0, [r7, #4]
 800e036:	f000 f819 	bl	800e06c <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800e03a:	4b0b      	ldr	r3, [pc, #44]	@ (800e068 <tcp_fasttmr+0xc4>)
 800e03c:	781b      	ldrb	r3, [r3, #0]
 800e03e:	2b00      	cmp	r3, #0
 800e040:	d000      	beq.n	800e044 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800e042:	e7b8      	b.n	800dfb6 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800e044:	683b      	ldr	r3, [r7, #0]
 800e046:	607b      	str	r3, [r7, #4]
 800e048:	e002      	b.n	800e050 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	68db      	ldr	r3, [r3, #12]
 800e04e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	2b00      	cmp	r3, #0
 800e054:	d1b3      	bne.n	800dfbe <tcp_fasttmr+0x1a>
    }
  }
}
 800e056:	bf00      	nop
 800e058:	bf00      	nop
 800e05a:	3708      	adds	r7, #8
 800e05c:	46bd      	mov	sp, r7
 800e05e:	bd80      	pop	{r7, pc}
 800e060:	2000eb5a 	.word	0x2000eb5a
 800e064:	2000eb50 	.word	0x2000eb50
 800e068:	2000eb58 	.word	0x2000eb58

0800e06c <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800e06c:	b590      	push	{r4, r7, lr}
 800e06e:	b085      	sub	sp, #20
 800e070:	af00      	add	r7, sp, #0
 800e072:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	2b00      	cmp	r3, #0
 800e078:	d109      	bne.n	800e08e <tcp_process_refused_data+0x22>
 800e07a:	4b37      	ldr	r3, [pc, #220]	@ (800e158 <tcp_process_refused_data+0xec>)
 800e07c:	f240 6209 	movw	r2, #1545	@ 0x609
 800e080:	4936      	ldr	r1, [pc, #216]	@ (800e15c <tcp_process_refused_data+0xf0>)
 800e082:	4837      	ldr	r0, [pc, #220]	@ (800e160 <tcp_process_refused_data+0xf4>)
 800e084:	f008 f944 	bl	8016310 <iprintf>
 800e088:	f06f 030f 	mvn.w	r3, #15
 800e08c:	e060      	b.n	800e150 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e092:	7b5b      	ldrb	r3, [r3, #13]
 800e094:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e09a:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	2200      	movs	r2, #0
 800e0a0:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	d00b      	beq.n	800e0c4 <tcp_process_refused_data+0x58>
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	6918      	ldr	r0, [r3, #16]
 800e0b6:	2300      	movs	r3, #0
 800e0b8:	68ba      	ldr	r2, [r7, #8]
 800e0ba:	6879      	ldr	r1, [r7, #4]
 800e0bc:	47a0      	blx	r4
 800e0be:	4603      	mov	r3, r0
 800e0c0:	73fb      	strb	r3, [r7, #15]
 800e0c2:	e007      	b.n	800e0d4 <tcp_process_refused_data+0x68>
 800e0c4:	2300      	movs	r3, #0
 800e0c6:	68ba      	ldr	r2, [r7, #8]
 800e0c8:	6879      	ldr	r1, [r7, #4]
 800e0ca:	2000      	movs	r0, #0
 800e0cc:	f000 f8a4 	bl	800e218 <tcp_recv_null>
 800e0d0:	4603      	mov	r3, r0
 800e0d2:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800e0d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e0d8:	2b00      	cmp	r3, #0
 800e0da:	d12a      	bne.n	800e132 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800e0dc:	7bbb      	ldrb	r3, [r7, #14]
 800e0de:	f003 0320 	and.w	r3, r3, #32
 800e0e2:	2b00      	cmp	r3, #0
 800e0e4:	d033      	beq.n	800e14e <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e0ea:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800e0ee:	d005      	beq.n	800e0fc <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e0f4:	3301      	adds	r3, #1
 800e0f6:	b29a      	uxth	r2, r3
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e102:	2b00      	cmp	r3, #0
 800e104:	d00b      	beq.n	800e11e <tcp_process_refused_data+0xb2>
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	6918      	ldr	r0, [r3, #16]
 800e110:	2300      	movs	r3, #0
 800e112:	2200      	movs	r2, #0
 800e114:	6879      	ldr	r1, [r7, #4]
 800e116:	47a0      	blx	r4
 800e118:	4603      	mov	r3, r0
 800e11a:	73fb      	strb	r3, [r7, #15]
 800e11c:	e001      	b.n	800e122 <tcp_process_refused_data+0xb6>
 800e11e:	2300      	movs	r3, #0
 800e120:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800e122:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e126:	f113 0f0d 	cmn.w	r3, #13
 800e12a:	d110      	bne.n	800e14e <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800e12c:	f06f 030c 	mvn.w	r3, #12
 800e130:	e00e      	b.n	800e150 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800e132:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e136:	f113 0f0d 	cmn.w	r3, #13
 800e13a:	d102      	bne.n	800e142 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800e13c:	f06f 030c 	mvn.w	r3, #12
 800e140:	e006      	b.n	800e150 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	68ba      	ldr	r2, [r7, #8]
 800e146:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 800e148:	f06f 0304 	mvn.w	r3, #4
 800e14c:	e000      	b.n	800e150 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800e14e:	2300      	movs	r3, #0
}
 800e150:	4618      	mov	r0, r3
 800e152:	3714      	adds	r7, #20
 800e154:	46bd      	mov	sp, r7
 800e156:	bd90      	pop	{r4, r7, pc}
 800e158:	08018e58 	.word	0x08018e58
 800e15c:	08019368 	.word	0x08019368
 800e160:	08018e9c 	.word	0x08018e9c

0800e164 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800e164:	b580      	push	{r7, lr}
 800e166:	b084      	sub	sp, #16
 800e168:	af00      	add	r7, sp, #0
 800e16a:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800e16c:	e007      	b.n	800e17e <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	681b      	ldr	r3, [r3, #0]
 800e172:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800e174:	6878      	ldr	r0, [r7, #4]
 800e176:	f000 f80a 	bl	800e18e <tcp_seg_free>
    seg = next;
 800e17a:	68fb      	ldr	r3, [r7, #12]
 800e17c:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	2b00      	cmp	r3, #0
 800e182:	d1f4      	bne.n	800e16e <tcp_segs_free+0xa>
  }
}
 800e184:	bf00      	nop
 800e186:	bf00      	nop
 800e188:	3710      	adds	r7, #16
 800e18a:	46bd      	mov	sp, r7
 800e18c:	bd80      	pop	{r7, pc}

0800e18e <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800e18e:	b580      	push	{r7, lr}
 800e190:	b082      	sub	sp, #8
 800e192:	af00      	add	r7, sp, #0
 800e194:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	2b00      	cmp	r3, #0
 800e19a:	d00c      	beq.n	800e1b6 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	685b      	ldr	r3, [r3, #4]
 800e1a0:	2b00      	cmp	r3, #0
 800e1a2:	d004      	beq.n	800e1ae <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	685b      	ldr	r3, [r3, #4]
 800e1a8:	4618      	mov	r0, r3
 800e1aa:	f7fe fb45 	bl	800c838 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800e1ae:	6879      	ldr	r1, [r7, #4]
 800e1b0:	2003      	movs	r0, #3
 800e1b2:	f7fd fc9d 	bl	800baf0 <memp_free>
  }
}
 800e1b6:	bf00      	nop
 800e1b8:	3708      	adds	r7, #8
 800e1ba:	46bd      	mov	sp, r7
 800e1bc:	bd80      	pop	{r7, pc}
	...

0800e1c0 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800e1c0:	b580      	push	{r7, lr}
 800e1c2:	b084      	sub	sp, #16
 800e1c4:	af00      	add	r7, sp, #0
 800e1c6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	2b00      	cmp	r3, #0
 800e1cc:	d106      	bne.n	800e1dc <tcp_seg_copy+0x1c>
 800e1ce:	4b0f      	ldr	r3, [pc, #60]	@ (800e20c <tcp_seg_copy+0x4c>)
 800e1d0:	f240 6282 	movw	r2, #1666	@ 0x682
 800e1d4:	490e      	ldr	r1, [pc, #56]	@ (800e210 <tcp_seg_copy+0x50>)
 800e1d6:	480f      	ldr	r0, [pc, #60]	@ (800e214 <tcp_seg_copy+0x54>)
 800e1d8:	f008 f89a 	bl	8016310 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800e1dc:	2003      	movs	r0, #3
 800e1de:	f7fd fc11 	bl	800ba04 <memp_malloc>
 800e1e2:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800e1e4:	68fb      	ldr	r3, [r7, #12]
 800e1e6:	2b00      	cmp	r3, #0
 800e1e8:	d101      	bne.n	800e1ee <tcp_seg_copy+0x2e>
    return NULL;
 800e1ea:	2300      	movs	r3, #0
 800e1ec:	e00a      	b.n	800e204 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800e1ee:	2210      	movs	r2, #16
 800e1f0:	6879      	ldr	r1, [r7, #4]
 800e1f2:	68f8      	ldr	r0, [r7, #12]
 800e1f4:	f008 f9f7 	bl	80165e6 <memcpy>
  pbuf_ref(cseg->p);
 800e1f8:	68fb      	ldr	r3, [r7, #12]
 800e1fa:	685b      	ldr	r3, [r3, #4]
 800e1fc:	4618      	mov	r0, r3
 800e1fe:	f7fe fbc1 	bl	800c984 <pbuf_ref>
  return cseg;
 800e202:	68fb      	ldr	r3, [r7, #12]
}
 800e204:	4618      	mov	r0, r3
 800e206:	3710      	adds	r7, #16
 800e208:	46bd      	mov	sp, r7
 800e20a:	bd80      	pop	{r7, pc}
 800e20c:	08018e58 	.word	0x08018e58
 800e210:	080193ac 	.word	0x080193ac
 800e214:	08018e9c 	.word	0x08018e9c

0800e218 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800e218:	b580      	push	{r7, lr}
 800e21a:	b084      	sub	sp, #16
 800e21c:	af00      	add	r7, sp, #0
 800e21e:	60f8      	str	r0, [r7, #12]
 800e220:	60b9      	str	r1, [r7, #8]
 800e222:	607a      	str	r2, [r7, #4]
 800e224:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800e226:	68bb      	ldr	r3, [r7, #8]
 800e228:	2b00      	cmp	r3, #0
 800e22a:	d109      	bne.n	800e240 <tcp_recv_null+0x28>
 800e22c:	4b12      	ldr	r3, [pc, #72]	@ (800e278 <tcp_recv_null+0x60>)
 800e22e:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 800e232:	4912      	ldr	r1, [pc, #72]	@ (800e27c <tcp_recv_null+0x64>)
 800e234:	4812      	ldr	r0, [pc, #72]	@ (800e280 <tcp_recv_null+0x68>)
 800e236:	f008 f86b 	bl	8016310 <iprintf>
 800e23a:	f06f 030f 	mvn.w	r3, #15
 800e23e:	e016      	b.n	800e26e <tcp_recv_null+0x56>

  if (p != NULL) {
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	2b00      	cmp	r3, #0
 800e244:	d009      	beq.n	800e25a <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	891b      	ldrh	r3, [r3, #8]
 800e24a:	4619      	mov	r1, r3
 800e24c:	68b8      	ldr	r0, [r7, #8]
 800e24e:	f7ff facd 	bl	800d7ec <tcp_recved>
    pbuf_free(p);
 800e252:	6878      	ldr	r0, [r7, #4]
 800e254:	f7fe faf0 	bl	800c838 <pbuf_free>
 800e258:	e008      	b.n	800e26c <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800e25a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e25e:	2b00      	cmp	r3, #0
 800e260:	d104      	bne.n	800e26c <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800e262:	68b8      	ldr	r0, [r7, #8]
 800e264:	f7fe ffb4 	bl	800d1d0 <tcp_close>
 800e268:	4603      	mov	r3, r0
 800e26a:	e000      	b.n	800e26e <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800e26c:	2300      	movs	r3, #0
}
 800e26e:	4618      	mov	r0, r3
 800e270:	3710      	adds	r7, #16
 800e272:	46bd      	mov	sp, r7
 800e274:	bd80      	pop	{r7, pc}
 800e276:	bf00      	nop
 800e278:	08018e58 	.word	0x08018e58
 800e27c:	080193c8 	.word	0x080193c8
 800e280:	08018e9c 	.word	0x08018e9c

0800e284 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800e284:	b580      	push	{r7, lr}
 800e286:	b086      	sub	sp, #24
 800e288:	af00      	add	r7, sp, #0
 800e28a:	4603      	mov	r3, r0
 800e28c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800e28e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e292:	2b00      	cmp	r3, #0
 800e294:	db01      	blt.n	800e29a <tcp_kill_prio+0x16>
 800e296:	79fb      	ldrb	r3, [r7, #7]
 800e298:	e000      	b.n	800e29c <tcp_kill_prio+0x18>
 800e29a:	237f      	movs	r3, #127	@ 0x7f
 800e29c:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800e29e:	7afb      	ldrb	r3, [r7, #11]
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	d034      	beq.n	800e30e <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800e2a4:	7afb      	ldrb	r3, [r7, #11]
 800e2a6:	3b01      	subs	r3, #1
 800e2a8:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800e2aa:	2300      	movs	r3, #0
 800e2ac:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800e2ae:	2300      	movs	r3, #0
 800e2b0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e2b2:	4b19      	ldr	r3, [pc, #100]	@ (800e318 <tcp_kill_prio+0x94>)
 800e2b4:	681b      	ldr	r3, [r3, #0]
 800e2b6:	617b      	str	r3, [r7, #20]
 800e2b8:	e01f      	b.n	800e2fa <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800e2ba:	697b      	ldr	r3, [r7, #20]
 800e2bc:	7d5b      	ldrb	r3, [r3, #21]
 800e2be:	7afa      	ldrb	r2, [r7, #11]
 800e2c0:	429a      	cmp	r2, r3
 800e2c2:	d80c      	bhi.n	800e2de <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800e2c4:	697b      	ldr	r3, [r7, #20]
 800e2c6:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800e2c8:	7afa      	ldrb	r2, [r7, #11]
 800e2ca:	429a      	cmp	r2, r3
 800e2cc:	d112      	bne.n	800e2f4 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800e2ce:	4b13      	ldr	r3, [pc, #76]	@ (800e31c <tcp_kill_prio+0x98>)
 800e2d0:	681a      	ldr	r2, [r3, #0]
 800e2d2:	697b      	ldr	r3, [r7, #20]
 800e2d4:	6a1b      	ldr	r3, [r3, #32]
 800e2d6:	1ad3      	subs	r3, r2, r3
 800e2d8:	68fa      	ldr	r2, [r7, #12]
 800e2da:	429a      	cmp	r2, r3
 800e2dc:	d80a      	bhi.n	800e2f4 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800e2de:	4b0f      	ldr	r3, [pc, #60]	@ (800e31c <tcp_kill_prio+0x98>)
 800e2e0:	681a      	ldr	r2, [r3, #0]
 800e2e2:	697b      	ldr	r3, [r7, #20]
 800e2e4:	6a1b      	ldr	r3, [r3, #32]
 800e2e6:	1ad3      	subs	r3, r2, r3
 800e2e8:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800e2ea:	697b      	ldr	r3, [r7, #20]
 800e2ec:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800e2ee:	697b      	ldr	r3, [r7, #20]
 800e2f0:	7d5b      	ldrb	r3, [r3, #21]
 800e2f2:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e2f4:	697b      	ldr	r3, [r7, #20]
 800e2f6:	68db      	ldr	r3, [r3, #12]
 800e2f8:	617b      	str	r3, [r7, #20]
 800e2fa:	697b      	ldr	r3, [r7, #20]
 800e2fc:	2b00      	cmp	r3, #0
 800e2fe:	d1dc      	bne.n	800e2ba <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800e300:	693b      	ldr	r3, [r7, #16]
 800e302:	2b00      	cmp	r3, #0
 800e304:	d004      	beq.n	800e310 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800e306:	6938      	ldr	r0, [r7, #16]
 800e308:	f7ff f8a8 	bl	800d45c <tcp_abort>
 800e30c:	e000      	b.n	800e310 <tcp_kill_prio+0x8c>
    return;
 800e30e:	bf00      	nop
  }
}
 800e310:	3718      	adds	r7, #24
 800e312:	46bd      	mov	sp, r7
 800e314:	bd80      	pop	{r7, pc}
 800e316:	bf00      	nop
 800e318:	2000eb50 	.word	0x2000eb50
 800e31c:	2000eb44 	.word	0x2000eb44

0800e320 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800e320:	b580      	push	{r7, lr}
 800e322:	b086      	sub	sp, #24
 800e324:	af00      	add	r7, sp, #0
 800e326:	4603      	mov	r3, r0
 800e328:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800e32a:	79fb      	ldrb	r3, [r7, #7]
 800e32c:	2b08      	cmp	r3, #8
 800e32e:	d009      	beq.n	800e344 <tcp_kill_state+0x24>
 800e330:	79fb      	ldrb	r3, [r7, #7]
 800e332:	2b09      	cmp	r3, #9
 800e334:	d006      	beq.n	800e344 <tcp_kill_state+0x24>
 800e336:	4b1a      	ldr	r3, [pc, #104]	@ (800e3a0 <tcp_kill_state+0x80>)
 800e338:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 800e33c:	4919      	ldr	r1, [pc, #100]	@ (800e3a4 <tcp_kill_state+0x84>)
 800e33e:	481a      	ldr	r0, [pc, #104]	@ (800e3a8 <tcp_kill_state+0x88>)
 800e340:	f007 ffe6 	bl	8016310 <iprintf>

  inactivity = 0;
 800e344:	2300      	movs	r3, #0
 800e346:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800e348:	2300      	movs	r3, #0
 800e34a:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e34c:	4b17      	ldr	r3, [pc, #92]	@ (800e3ac <tcp_kill_state+0x8c>)
 800e34e:	681b      	ldr	r3, [r3, #0]
 800e350:	617b      	str	r3, [r7, #20]
 800e352:	e017      	b.n	800e384 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800e354:	697b      	ldr	r3, [r7, #20]
 800e356:	7d1b      	ldrb	r3, [r3, #20]
 800e358:	79fa      	ldrb	r2, [r7, #7]
 800e35a:	429a      	cmp	r2, r3
 800e35c:	d10f      	bne.n	800e37e <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800e35e:	4b14      	ldr	r3, [pc, #80]	@ (800e3b0 <tcp_kill_state+0x90>)
 800e360:	681a      	ldr	r2, [r3, #0]
 800e362:	697b      	ldr	r3, [r7, #20]
 800e364:	6a1b      	ldr	r3, [r3, #32]
 800e366:	1ad3      	subs	r3, r2, r3
 800e368:	68fa      	ldr	r2, [r7, #12]
 800e36a:	429a      	cmp	r2, r3
 800e36c:	d807      	bhi.n	800e37e <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800e36e:	4b10      	ldr	r3, [pc, #64]	@ (800e3b0 <tcp_kill_state+0x90>)
 800e370:	681a      	ldr	r2, [r3, #0]
 800e372:	697b      	ldr	r3, [r7, #20]
 800e374:	6a1b      	ldr	r3, [r3, #32]
 800e376:	1ad3      	subs	r3, r2, r3
 800e378:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800e37a:	697b      	ldr	r3, [r7, #20]
 800e37c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e37e:	697b      	ldr	r3, [r7, #20]
 800e380:	68db      	ldr	r3, [r3, #12]
 800e382:	617b      	str	r3, [r7, #20]
 800e384:	697b      	ldr	r3, [r7, #20]
 800e386:	2b00      	cmp	r3, #0
 800e388:	d1e4      	bne.n	800e354 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800e38a:	693b      	ldr	r3, [r7, #16]
 800e38c:	2b00      	cmp	r3, #0
 800e38e:	d003      	beq.n	800e398 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800e390:	2100      	movs	r1, #0
 800e392:	6938      	ldr	r0, [r7, #16]
 800e394:	f7fe ffa4 	bl	800d2e0 <tcp_abandon>
  }
}
 800e398:	bf00      	nop
 800e39a:	3718      	adds	r7, #24
 800e39c:	46bd      	mov	sp, r7
 800e39e:	bd80      	pop	{r7, pc}
 800e3a0:	08018e58 	.word	0x08018e58
 800e3a4:	080193e4 	.word	0x080193e4
 800e3a8:	08018e9c 	.word	0x08018e9c
 800e3ac:	2000eb50 	.word	0x2000eb50
 800e3b0:	2000eb44 	.word	0x2000eb44

0800e3b4 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800e3b4:	b580      	push	{r7, lr}
 800e3b6:	b084      	sub	sp, #16
 800e3b8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800e3ba:	2300      	movs	r3, #0
 800e3bc:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800e3be:	2300      	movs	r3, #0
 800e3c0:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e3c2:	4b12      	ldr	r3, [pc, #72]	@ (800e40c <tcp_kill_timewait+0x58>)
 800e3c4:	681b      	ldr	r3, [r3, #0]
 800e3c6:	60fb      	str	r3, [r7, #12]
 800e3c8:	e012      	b.n	800e3f0 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800e3ca:	4b11      	ldr	r3, [pc, #68]	@ (800e410 <tcp_kill_timewait+0x5c>)
 800e3cc:	681a      	ldr	r2, [r3, #0]
 800e3ce:	68fb      	ldr	r3, [r7, #12]
 800e3d0:	6a1b      	ldr	r3, [r3, #32]
 800e3d2:	1ad3      	subs	r3, r2, r3
 800e3d4:	687a      	ldr	r2, [r7, #4]
 800e3d6:	429a      	cmp	r2, r3
 800e3d8:	d807      	bhi.n	800e3ea <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800e3da:	4b0d      	ldr	r3, [pc, #52]	@ (800e410 <tcp_kill_timewait+0x5c>)
 800e3dc:	681a      	ldr	r2, [r3, #0]
 800e3de:	68fb      	ldr	r3, [r7, #12]
 800e3e0:	6a1b      	ldr	r3, [r3, #32]
 800e3e2:	1ad3      	subs	r3, r2, r3
 800e3e4:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800e3e6:	68fb      	ldr	r3, [r7, #12]
 800e3e8:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e3ea:	68fb      	ldr	r3, [r7, #12]
 800e3ec:	68db      	ldr	r3, [r3, #12]
 800e3ee:	60fb      	str	r3, [r7, #12]
 800e3f0:	68fb      	ldr	r3, [r7, #12]
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	d1e9      	bne.n	800e3ca <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800e3f6:	68bb      	ldr	r3, [r7, #8]
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	d002      	beq.n	800e402 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800e3fc:	68b8      	ldr	r0, [r7, #8]
 800e3fe:	f7ff f82d 	bl	800d45c <tcp_abort>
  }
}
 800e402:	bf00      	nop
 800e404:	3710      	adds	r7, #16
 800e406:	46bd      	mov	sp, r7
 800e408:	bd80      	pop	{r7, pc}
 800e40a:	bf00      	nop
 800e40c:	2000eb54 	.word	0x2000eb54
 800e410:	2000eb44 	.word	0x2000eb44

0800e414 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800e414:	b580      	push	{r7, lr}
 800e416:	b082      	sub	sp, #8
 800e418:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800e41a:	4b10      	ldr	r3, [pc, #64]	@ (800e45c <tcp_handle_closepend+0x48>)
 800e41c:	681b      	ldr	r3, [r3, #0]
 800e41e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800e420:	e014      	b.n	800e44c <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	68db      	ldr	r3, [r3, #12]
 800e426:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	8b5b      	ldrh	r3, [r3, #26]
 800e42c:	f003 0308 	and.w	r3, r3, #8
 800e430:	2b00      	cmp	r3, #0
 800e432:	d009      	beq.n	800e448 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	8b5b      	ldrh	r3, [r3, #26]
 800e438:	f023 0308 	bic.w	r3, r3, #8
 800e43c:	b29a      	uxth	r2, r3
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800e442:	6878      	ldr	r0, [r7, #4]
 800e444:	f7fe fe5a 	bl	800d0fc <tcp_close_shutdown_fin>
    }
    pcb = next;
 800e448:	683b      	ldr	r3, [r7, #0]
 800e44a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	2b00      	cmp	r3, #0
 800e450:	d1e7      	bne.n	800e422 <tcp_handle_closepend+0xe>
  }
}
 800e452:	bf00      	nop
 800e454:	bf00      	nop
 800e456:	3708      	adds	r7, #8
 800e458:	46bd      	mov	sp, r7
 800e45a:	bd80      	pop	{r7, pc}
 800e45c:	2000eb50 	.word	0x2000eb50

0800e460 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800e460:	b580      	push	{r7, lr}
 800e462:	b084      	sub	sp, #16
 800e464:	af00      	add	r7, sp, #0
 800e466:	4603      	mov	r3, r0
 800e468:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e46a:	2001      	movs	r0, #1
 800e46c:	f7fd faca 	bl	800ba04 <memp_malloc>
 800e470:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800e472:	68fb      	ldr	r3, [r7, #12]
 800e474:	2b00      	cmp	r3, #0
 800e476:	d126      	bne.n	800e4c6 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800e478:	f7ff ffcc 	bl	800e414 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800e47c:	f7ff ff9a 	bl	800e3b4 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e480:	2001      	movs	r0, #1
 800e482:	f7fd fabf 	bl	800ba04 <memp_malloc>
 800e486:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800e488:	68fb      	ldr	r3, [r7, #12]
 800e48a:	2b00      	cmp	r3, #0
 800e48c:	d11b      	bne.n	800e4c6 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800e48e:	2009      	movs	r0, #9
 800e490:	f7ff ff46 	bl	800e320 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e494:	2001      	movs	r0, #1
 800e496:	f7fd fab5 	bl	800ba04 <memp_malloc>
 800e49a:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800e49c:	68fb      	ldr	r3, [r7, #12]
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	d111      	bne.n	800e4c6 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800e4a2:	2008      	movs	r0, #8
 800e4a4:	f7ff ff3c 	bl	800e320 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e4a8:	2001      	movs	r0, #1
 800e4aa:	f7fd faab 	bl	800ba04 <memp_malloc>
 800e4ae:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800e4b0:	68fb      	ldr	r3, [r7, #12]
 800e4b2:	2b00      	cmp	r3, #0
 800e4b4:	d107      	bne.n	800e4c6 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800e4b6:	79fb      	ldrb	r3, [r7, #7]
 800e4b8:	4618      	mov	r0, r3
 800e4ba:	f7ff fee3 	bl	800e284 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e4be:	2001      	movs	r0, #1
 800e4c0:	f7fd faa0 	bl	800ba04 <memp_malloc>
 800e4c4:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800e4c6:	68fb      	ldr	r3, [r7, #12]
 800e4c8:	2b00      	cmp	r3, #0
 800e4ca:	d049      	beq.n	800e560 <tcp_alloc+0x100>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800e4cc:	22a4      	movs	r2, #164	@ 0xa4
 800e4ce:	2100      	movs	r1, #0
 800e4d0:	68f8      	ldr	r0, [r7, #12]
 800e4d2:	f007 ffbc 	bl	801644e <memset>
    pcb->prio = prio;
 800e4d6:	68fb      	ldr	r3, [r7, #12]
 800e4d8:	79fa      	ldrb	r2, [r7, #7]
 800e4da:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800e4dc:	68fb      	ldr	r3, [r7, #12]
 800e4de:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800e4e2:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800e4e6:	68fb      	ldr	r3, [r7, #12]
 800e4e8:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800e4ec:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800e4ee:	68fb      	ldr	r3, [r7, #12]
 800e4f0:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800e4f2:	68fb      	ldr	r3, [r7, #12]
 800e4f4:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 800e4f6:	68fb      	ldr	r3, [r7, #12]
 800e4f8:	22ff      	movs	r2, #255	@ 0xff
 800e4fa:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800e4fc:	68fb      	ldr	r3, [r7, #12]
 800e4fe:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800e502:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800e504:	68fb      	ldr	r3, [r7, #12]
 800e506:	2206      	movs	r2, #6
 800e508:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800e50c:	68fb      	ldr	r3, [r7, #12]
 800e50e:	2206      	movs	r2, #6
 800e510:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 800e512:	68fb      	ldr	r3, [r7, #12]
 800e514:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e518:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 800e51a:	68fb      	ldr	r3, [r7, #12]
 800e51c:	2201      	movs	r2, #1
 800e51e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 800e522:	4b12      	ldr	r3, [pc, #72]	@ (800e56c <tcp_alloc+0x10c>)
 800e524:	681a      	ldr	r2, [r3, #0]
 800e526:	68fb      	ldr	r3, [r7, #12]
 800e528:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800e52a:	4b11      	ldr	r3, [pc, #68]	@ (800e570 <tcp_alloc+0x110>)
 800e52c:	781a      	ldrb	r2, [r3, #0]
 800e52e:	68fb      	ldr	r3, [r7, #12]
 800e530:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800e532:	68fb      	ldr	r3, [r7, #12]
 800e534:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800e538:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800e53c:	68fb      	ldr	r3, [r7, #12]
 800e53e:	4a0d      	ldr	r2, [pc, #52]	@ (800e574 <tcp_alloc+0x114>)
 800e540:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800e544:	68fb      	ldr	r3, [r7, #12]
 800e546:	f242 7210 	movw	r2, #10000	@ 0x2710
 800e54a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
 800e54e:	68fb      	ldr	r3, [r7, #12]
 800e550:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800e554:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
 800e558:	68fb      	ldr	r3, [r7, #12]
 800e55a:	2203      	movs	r2, #3
 800e55c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800e560:	68fb      	ldr	r3, [r7, #12]
}
 800e562:	4618      	mov	r0, r3
 800e564:	3710      	adds	r7, #16
 800e566:	46bd      	mov	sp, r7
 800e568:	bd80      	pop	{r7, pc}
 800e56a:	bf00      	nop
 800e56c:	2000eb44 	.word	0x2000eb44
 800e570:	2000eb5a 	.word	0x2000eb5a
 800e574:	0800e219 	.word	0x0800e219

0800e578 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 800e578:	b580      	push	{r7, lr}
 800e57a:	b084      	sub	sp, #16
 800e57c:	af00      	add	r7, sp, #0
 800e57e:	4603      	mov	r3, r0
 800e580:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800e582:	2040      	movs	r0, #64	@ 0x40
 800e584:	f7ff ff6c 	bl	800e460 <tcp_alloc>
 800e588:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 800e58a:	68fb      	ldr	r3, [r7, #12]
}
 800e58c:	4618      	mov	r0, r3
 800e58e:	3710      	adds	r7, #16
 800e590:	46bd      	mov	sp, r7
 800e592:	bd80      	pop	{r7, pc}

0800e594 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800e594:	b480      	push	{r7}
 800e596:	b083      	sub	sp, #12
 800e598:	af00      	add	r7, sp, #0
 800e59a:	6078      	str	r0, [r7, #4]
 800e59c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	2b00      	cmp	r3, #0
 800e5a2:	d002      	beq.n	800e5aa <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	683a      	ldr	r2, [r7, #0]
 800e5a8:	611a      	str	r2, [r3, #16]
  }
}
 800e5aa:	bf00      	nop
 800e5ac:	370c      	adds	r7, #12
 800e5ae:	46bd      	mov	sp, r7
 800e5b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5b4:	4770      	bx	lr
	...

0800e5b8 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800e5b8:	b580      	push	{r7, lr}
 800e5ba:	b082      	sub	sp, #8
 800e5bc:	af00      	add	r7, sp, #0
 800e5be:	6078      	str	r0, [r7, #4]
 800e5c0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	2b00      	cmp	r3, #0
 800e5c6:	d00e      	beq.n	800e5e6 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	7d1b      	ldrb	r3, [r3, #20]
 800e5cc:	2b01      	cmp	r3, #1
 800e5ce:	d106      	bne.n	800e5de <tcp_recv+0x26>
 800e5d0:	4b07      	ldr	r3, [pc, #28]	@ (800e5f0 <tcp_recv+0x38>)
 800e5d2:	f240 72df 	movw	r2, #2015	@ 0x7df
 800e5d6:	4907      	ldr	r1, [pc, #28]	@ (800e5f4 <tcp_recv+0x3c>)
 800e5d8:	4807      	ldr	r0, [pc, #28]	@ (800e5f8 <tcp_recv+0x40>)
 800e5da:	f007 fe99 	bl	8016310 <iprintf>
    pcb->recv = recv;
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	683a      	ldr	r2, [r7, #0]
 800e5e2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }
}
 800e5e6:	bf00      	nop
 800e5e8:	3708      	adds	r7, #8
 800e5ea:	46bd      	mov	sp, r7
 800e5ec:	bd80      	pop	{r7, pc}
 800e5ee:	bf00      	nop
 800e5f0:	08018e58 	.word	0x08018e58
 800e5f4:	080193f4 	.word	0x080193f4
 800e5f8:	08018e9c 	.word	0x08018e9c

0800e5fc <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800e5fc:	b580      	push	{r7, lr}
 800e5fe:	b082      	sub	sp, #8
 800e600:	af00      	add	r7, sp, #0
 800e602:	6078      	str	r0, [r7, #4]
 800e604:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	2b00      	cmp	r3, #0
 800e60a:	d00e      	beq.n	800e62a <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	7d1b      	ldrb	r3, [r3, #20]
 800e610:	2b01      	cmp	r3, #1
 800e612:	d106      	bne.n	800e622 <tcp_sent+0x26>
 800e614:	4b07      	ldr	r3, [pc, #28]	@ (800e634 <tcp_sent+0x38>)
 800e616:	f240 72f3 	movw	r2, #2035	@ 0x7f3
 800e61a:	4907      	ldr	r1, [pc, #28]	@ (800e638 <tcp_sent+0x3c>)
 800e61c:	4807      	ldr	r0, [pc, #28]	@ (800e63c <tcp_sent+0x40>)
 800e61e:	f007 fe77 	bl	8016310 <iprintf>
    pcb->sent = sent;
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	683a      	ldr	r2, [r7, #0]
 800e626:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  }
}
 800e62a:	bf00      	nop
 800e62c:	3708      	adds	r7, #8
 800e62e:	46bd      	mov	sp, r7
 800e630:	bd80      	pop	{r7, pc}
 800e632:	bf00      	nop
 800e634:	08018e58 	.word	0x08018e58
 800e638:	0801941c 	.word	0x0801941c
 800e63c:	08018e9c 	.word	0x08018e9c

0800e640 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800e640:	b580      	push	{r7, lr}
 800e642:	b082      	sub	sp, #8
 800e644:	af00      	add	r7, sp, #0
 800e646:	6078      	str	r0, [r7, #4]
 800e648:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	d00e      	beq.n	800e66e <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	7d1b      	ldrb	r3, [r3, #20]
 800e654:	2b01      	cmp	r3, #1
 800e656:	d106      	bne.n	800e666 <tcp_err+0x26>
 800e658:	4b07      	ldr	r3, [pc, #28]	@ (800e678 <tcp_err+0x38>)
 800e65a:	f640 020d 	movw	r2, #2061	@ 0x80d
 800e65e:	4907      	ldr	r1, [pc, #28]	@ (800e67c <tcp_err+0x3c>)
 800e660:	4807      	ldr	r0, [pc, #28]	@ (800e680 <tcp_err+0x40>)
 800e662:	f007 fe55 	bl	8016310 <iprintf>
    pcb->errf = err;
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	683a      	ldr	r2, [r7, #0]
 800e66a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  }
}
 800e66e:	bf00      	nop
 800e670:	3708      	adds	r7, #8
 800e672:	46bd      	mov	sp, r7
 800e674:	bd80      	pop	{r7, pc}
 800e676:	bf00      	nop
 800e678:	08018e58 	.word	0x08018e58
 800e67c:	08019444 	.word	0x08019444
 800e680:	08018e9c 	.word	0x08018e9c

0800e684 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800e684:	b480      	push	{r7}
 800e686:	b085      	sub	sp, #20
 800e688:	af00      	add	r7, sp, #0
 800e68a:	6078      	str	r0, [r7, #4]
 800e68c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	2b00      	cmp	r3, #0
 800e692:	d008      	beq.n	800e6a6 <tcp_accept+0x22>
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	7d1b      	ldrb	r3, [r3, #20]
 800e698:	2b01      	cmp	r3, #1
 800e69a:	d104      	bne.n	800e6a6 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800e6a0:	68fb      	ldr	r3, [r7, #12]
 800e6a2:	683a      	ldr	r2, [r7, #0]
 800e6a4:	619a      	str	r2, [r3, #24]
  }
}
 800e6a6:	bf00      	nop
 800e6a8:	3714      	adds	r7, #20
 800e6aa:	46bd      	mov	sp, r7
 800e6ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6b0:	4770      	bx	lr
	...

0800e6b4 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800e6b4:	b580      	push	{r7, lr}
 800e6b6:	b084      	sub	sp, #16
 800e6b8:	af00      	add	r7, sp, #0
 800e6ba:	60f8      	str	r0, [r7, #12]
 800e6bc:	60b9      	str	r1, [r7, #8]
 800e6be:	4613      	mov	r3, r2
 800e6c0:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800e6c2:	68fb      	ldr	r3, [r7, #12]
 800e6c4:	2b00      	cmp	r3, #0
 800e6c6:	d107      	bne.n	800e6d8 <tcp_poll+0x24>
 800e6c8:	4b0e      	ldr	r3, [pc, #56]	@ (800e704 <tcp_poll+0x50>)
 800e6ca:	f640 023d 	movw	r2, #2109	@ 0x83d
 800e6ce:	490e      	ldr	r1, [pc, #56]	@ (800e708 <tcp_poll+0x54>)
 800e6d0:	480e      	ldr	r0, [pc, #56]	@ (800e70c <tcp_poll+0x58>)
 800e6d2:	f007 fe1d 	bl	8016310 <iprintf>
 800e6d6:	e011      	b.n	800e6fc <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800e6d8:	68fb      	ldr	r3, [r7, #12]
 800e6da:	7d1b      	ldrb	r3, [r3, #20]
 800e6dc:	2b01      	cmp	r3, #1
 800e6de:	d106      	bne.n	800e6ee <tcp_poll+0x3a>
 800e6e0:	4b08      	ldr	r3, [pc, #32]	@ (800e704 <tcp_poll+0x50>)
 800e6e2:	f640 023e 	movw	r2, #2110	@ 0x83e
 800e6e6:	490a      	ldr	r1, [pc, #40]	@ (800e710 <tcp_poll+0x5c>)
 800e6e8:	4808      	ldr	r0, [pc, #32]	@ (800e70c <tcp_poll+0x58>)
 800e6ea:	f007 fe11 	bl	8016310 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800e6ee:	68fb      	ldr	r3, [r7, #12]
 800e6f0:	68ba      	ldr	r2, [r7, #8]
 800e6f2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800e6f6:	68fb      	ldr	r3, [r7, #12]
 800e6f8:	79fa      	ldrb	r2, [r7, #7]
 800e6fa:	775a      	strb	r2, [r3, #29]
}
 800e6fc:	3710      	adds	r7, #16
 800e6fe:	46bd      	mov	sp, r7
 800e700:	bd80      	pop	{r7, pc}
 800e702:	bf00      	nop
 800e704:	08018e58 	.word	0x08018e58
 800e708:	0801946c 	.word	0x0801946c
 800e70c:	08018e9c 	.word	0x08018e9c
 800e710:	08019484 	.word	0x08019484

0800e714 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800e714:	b580      	push	{r7, lr}
 800e716:	b082      	sub	sp, #8
 800e718:	af00      	add	r7, sp, #0
 800e71a:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	2b00      	cmp	r3, #0
 800e720:	d107      	bne.n	800e732 <tcp_pcb_purge+0x1e>
 800e722:	4b21      	ldr	r3, [pc, #132]	@ (800e7a8 <tcp_pcb_purge+0x94>)
 800e724:	f640 0251 	movw	r2, #2129	@ 0x851
 800e728:	4920      	ldr	r1, [pc, #128]	@ (800e7ac <tcp_pcb_purge+0x98>)
 800e72a:	4821      	ldr	r0, [pc, #132]	@ (800e7b0 <tcp_pcb_purge+0x9c>)
 800e72c:	f007 fdf0 	bl	8016310 <iprintf>
 800e730:	e037      	b.n	800e7a2 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	7d1b      	ldrb	r3, [r3, #20]
 800e736:	2b00      	cmp	r3, #0
 800e738:	d033      	beq.n	800e7a2 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800e73e:	2b0a      	cmp	r3, #10
 800e740:	d02f      	beq.n	800e7a2 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800e746:	2b01      	cmp	r3, #1
 800e748:	d02b      	beq.n	800e7a2 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e74e:	2b00      	cmp	r3, #0
 800e750:	d007      	beq.n	800e762 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e756:	4618      	mov	r0, r3
 800e758:	f7fe f86e 	bl	800c838 <pbuf_free>
      pcb->refused_data = NULL;
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	2200      	movs	r2, #0
 800e760:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e766:	2b00      	cmp	r3, #0
 800e768:	d002      	beq.n	800e770 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800e76a:	6878      	ldr	r0, [r7, #4]
 800e76c:	f000 f986 	bl	800ea7c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e776:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e77c:	4618      	mov	r0, r3
 800e77e:	f7ff fcf1 	bl	800e164 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e786:	4618      	mov	r0, r3
 800e788:	f7ff fcec 	bl	800e164 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	2200      	movs	r2, #0
 800e790:	66da      	str	r2, [r3, #108]	@ 0x6c
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	2200      	movs	r2, #0
 800e79e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800e7a2:	3708      	adds	r7, #8
 800e7a4:	46bd      	mov	sp, r7
 800e7a6:	bd80      	pop	{r7, pc}
 800e7a8:	08018e58 	.word	0x08018e58
 800e7ac:	080194a4 	.word	0x080194a4
 800e7b0:	08018e9c 	.word	0x08018e9c

0800e7b4 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800e7b4:	b580      	push	{r7, lr}
 800e7b6:	b084      	sub	sp, #16
 800e7b8:	af00      	add	r7, sp, #0
 800e7ba:	6078      	str	r0, [r7, #4]
 800e7bc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800e7be:	683b      	ldr	r3, [r7, #0]
 800e7c0:	2b00      	cmp	r3, #0
 800e7c2:	d106      	bne.n	800e7d2 <tcp_pcb_remove+0x1e>
 800e7c4:	4b3e      	ldr	r3, [pc, #248]	@ (800e8c0 <tcp_pcb_remove+0x10c>)
 800e7c6:	f640 0283 	movw	r2, #2179	@ 0x883
 800e7ca:	493e      	ldr	r1, [pc, #248]	@ (800e8c4 <tcp_pcb_remove+0x110>)
 800e7cc:	483e      	ldr	r0, [pc, #248]	@ (800e8c8 <tcp_pcb_remove+0x114>)
 800e7ce:	f007 fd9f 	bl	8016310 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	2b00      	cmp	r3, #0
 800e7d6:	d106      	bne.n	800e7e6 <tcp_pcb_remove+0x32>
 800e7d8:	4b39      	ldr	r3, [pc, #228]	@ (800e8c0 <tcp_pcb_remove+0x10c>)
 800e7da:	f640 0284 	movw	r2, #2180	@ 0x884
 800e7de:	493b      	ldr	r1, [pc, #236]	@ (800e8cc <tcp_pcb_remove+0x118>)
 800e7e0:	4839      	ldr	r0, [pc, #228]	@ (800e8c8 <tcp_pcb_remove+0x114>)
 800e7e2:	f007 fd95 	bl	8016310 <iprintf>

  TCP_RMV(pcblist, pcb);
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	681b      	ldr	r3, [r3, #0]
 800e7ea:	683a      	ldr	r2, [r7, #0]
 800e7ec:	429a      	cmp	r2, r3
 800e7ee:	d105      	bne.n	800e7fc <tcp_pcb_remove+0x48>
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	681b      	ldr	r3, [r3, #0]
 800e7f4:	68da      	ldr	r2, [r3, #12]
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	601a      	str	r2, [r3, #0]
 800e7fa:	e013      	b.n	800e824 <tcp_pcb_remove+0x70>
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	681b      	ldr	r3, [r3, #0]
 800e800:	60fb      	str	r3, [r7, #12]
 800e802:	e00c      	b.n	800e81e <tcp_pcb_remove+0x6a>
 800e804:	68fb      	ldr	r3, [r7, #12]
 800e806:	68db      	ldr	r3, [r3, #12]
 800e808:	683a      	ldr	r2, [r7, #0]
 800e80a:	429a      	cmp	r2, r3
 800e80c:	d104      	bne.n	800e818 <tcp_pcb_remove+0x64>
 800e80e:	683b      	ldr	r3, [r7, #0]
 800e810:	68da      	ldr	r2, [r3, #12]
 800e812:	68fb      	ldr	r3, [r7, #12]
 800e814:	60da      	str	r2, [r3, #12]
 800e816:	e005      	b.n	800e824 <tcp_pcb_remove+0x70>
 800e818:	68fb      	ldr	r3, [r7, #12]
 800e81a:	68db      	ldr	r3, [r3, #12]
 800e81c:	60fb      	str	r3, [r7, #12]
 800e81e:	68fb      	ldr	r3, [r7, #12]
 800e820:	2b00      	cmp	r3, #0
 800e822:	d1ef      	bne.n	800e804 <tcp_pcb_remove+0x50>
 800e824:	683b      	ldr	r3, [r7, #0]
 800e826:	2200      	movs	r2, #0
 800e828:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800e82a:	6838      	ldr	r0, [r7, #0]
 800e82c:	f7ff ff72 	bl	800e714 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800e830:	683b      	ldr	r3, [r7, #0]
 800e832:	7d1b      	ldrb	r3, [r3, #20]
 800e834:	2b0a      	cmp	r3, #10
 800e836:	d013      	beq.n	800e860 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800e838:	683b      	ldr	r3, [r7, #0]
 800e83a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800e83c:	2b01      	cmp	r3, #1
 800e83e:	d00f      	beq.n	800e860 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800e840:	683b      	ldr	r3, [r7, #0]
 800e842:	8b5b      	ldrh	r3, [r3, #26]
 800e844:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800e848:	2b00      	cmp	r3, #0
 800e84a:	d009      	beq.n	800e860 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800e84c:	683b      	ldr	r3, [r7, #0]
 800e84e:	8b5b      	ldrh	r3, [r3, #26]
 800e850:	f043 0302 	orr.w	r3, r3, #2
 800e854:	b29a      	uxth	r2, r3
 800e856:	683b      	ldr	r3, [r7, #0]
 800e858:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800e85a:	6838      	ldr	r0, [r7, #0]
 800e85c:	f003 fbc0 	bl	8011fe0 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800e860:	683b      	ldr	r3, [r7, #0]
 800e862:	7d1b      	ldrb	r3, [r3, #20]
 800e864:	2b01      	cmp	r3, #1
 800e866:	d020      	beq.n	800e8aa <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800e868:	683b      	ldr	r3, [r7, #0]
 800e86a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e86c:	2b00      	cmp	r3, #0
 800e86e:	d006      	beq.n	800e87e <tcp_pcb_remove+0xca>
 800e870:	4b13      	ldr	r3, [pc, #76]	@ (800e8c0 <tcp_pcb_remove+0x10c>)
 800e872:	f640 0293 	movw	r2, #2195	@ 0x893
 800e876:	4916      	ldr	r1, [pc, #88]	@ (800e8d0 <tcp_pcb_remove+0x11c>)
 800e878:	4813      	ldr	r0, [pc, #76]	@ (800e8c8 <tcp_pcb_remove+0x114>)
 800e87a:	f007 fd49 	bl	8016310 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800e87e:	683b      	ldr	r3, [r7, #0]
 800e880:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e882:	2b00      	cmp	r3, #0
 800e884:	d006      	beq.n	800e894 <tcp_pcb_remove+0xe0>
 800e886:	4b0e      	ldr	r3, [pc, #56]	@ (800e8c0 <tcp_pcb_remove+0x10c>)
 800e888:	f640 0294 	movw	r2, #2196	@ 0x894
 800e88c:	4911      	ldr	r1, [pc, #68]	@ (800e8d4 <tcp_pcb_remove+0x120>)
 800e88e:	480e      	ldr	r0, [pc, #56]	@ (800e8c8 <tcp_pcb_remove+0x114>)
 800e890:	f007 fd3e 	bl	8016310 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800e894:	683b      	ldr	r3, [r7, #0]
 800e896:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e898:	2b00      	cmp	r3, #0
 800e89a:	d006      	beq.n	800e8aa <tcp_pcb_remove+0xf6>
 800e89c:	4b08      	ldr	r3, [pc, #32]	@ (800e8c0 <tcp_pcb_remove+0x10c>)
 800e89e:	f640 0296 	movw	r2, #2198	@ 0x896
 800e8a2:	490d      	ldr	r1, [pc, #52]	@ (800e8d8 <tcp_pcb_remove+0x124>)
 800e8a4:	4808      	ldr	r0, [pc, #32]	@ (800e8c8 <tcp_pcb_remove+0x114>)
 800e8a6:	f007 fd33 	bl	8016310 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800e8aa:	683b      	ldr	r3, [r7, #0]
 800e8ac:	2200      	movs	r2, #0
 800e8ae:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800e8b0:	683b      	ldr	r3, [r7, #0]
 800e8b2:	2200      	movs	r2, #0
 800e8b4:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800e8b6:	bf00      	nop
 800e8b8:	3710      	adds	r7, #16
 800e8ba:	46bd      	mov	sp, r7
 800e8bc:	bd80      	pop	{r7, pc}
 800e8be:	bf00      	nop
 800e8c0:	08018e58 	.word	0x08018e58
 800e8c4:	080194c0 	.word	0x080194c0
 800e8c8:	08018e9c 	.word	0x08018e9c
 800e8cc:	080194dc 	.word	0x080194dc
 800e8d0:	080194fc 	.word	0x080194fc
 800e8d4:	08019514 	.word	0x08019514
 800e8d8:	08019530 	.word	0x08019530

0800e8dc <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800e8dc:	b580      	push	{r7, lr}
 800e8de:	b082      	sub	sp, #8
 800e8e0:	af00      	add	r7, sp, #0
 800e8e2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	2b00      	cmp	r3, #0
 800e8e8:	d106      	bne.n	800e8f8 <tcp_next_iss+0x1c>
 800e8ea:	4b0a      	ldr	r3, [pc, #40]	@ (800e914 <tcp_next_iss+0x38>)
 800e8ec:	f640 02af 	movw	r2, #2223	@ 0x8af
 800e8f0:	4909      	ldr	r1, [pc, #36]	@ (800e918 <tcp_next_iss+0x3c>)
 800e8f2:	480a      	ldr	r0, [pc, #40]	@ (800e91c <tcp_next_iss+0x40>)
 800e8f4:	f007 fd0c 	bl	8016310 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800e8f8:	4b09      	ldr	r3, [pc, #36]	@ (800e920 <tcp_next_iss+0x44>)
 800e8fa:	681a      	ldr	r2, [r3, #0]
 800e8fc:	4b09      	ldr	r3, [pc, #36]	@ (800e924 <tcp_next_iss+0x48>)
 800e8fe:	681b      	ldr	r3, [r3, #0]
 800e900:	4413      	add	r3, r2
 800e902:	4a07      	ldr	r2, [pc, #28]	@ (800e920 <tcp_next_iss+0x44>)
 800e904:	6013      	str	r3, [r2, #0]
  return iss;
 800e906:	4b06      	ldr	r3, [pc, #24]	@ (800e920 <tcp_next_iss+0x44>)
 800e908:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800e90a:	4618      	mov	r0, r3
 800e90c:	3708      	adds	r7, #8
 800e90e:	46bd      	mov	sp, r7
 800e910:	bd80      	pop	{r7, pc}
 800e912:	bf00      	nop
 800e914:	08018e58 	.word	0x08018e58
 800e918:	08019548 	.word	0x08019548
 800e91c:	08018e9c 	.word	0x08018e9c
 800e920:	20000128 	.word	0x20000128
 800e924:	2000eb44 	.word	0x2000eb44

0800e928 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800e928:	b580      	push	{r7, lr}
 800e92a:	b086      	sub	sp, #24
 800e92c:	af00      	add	r7, sp, #0
 800e92e:	4603      	mov	r3, r0
 800e930:	60b9      	str	r1, [r7, #8]
 800e932:	607a      	str	r2, [r7, #4]
 800e934:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	2b00      	cmp	r3, #0
 800e93a:	d106      	bne.n	800e94a <tcp_eff_send_mss_netif+0x22>
 800e93c:	4b14      	ldr	r3, [pc, #80]	@ (800e990 <tcp_eff_send_mss_netif+0x68>)
 800e93e:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 800e942:	4914      	ldr	r1, [pc, #80]	@ (800e994 <tcp_eff_send_mss_netif+0x6c>)
 800e944:	4814      	ldr	r0, [pc, #80]	@ (800e998 <tcp_eff_send_mss_netif+0x70>)
 800e946:	f007 fce3 	bl	8016310 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800e94a:	68bb      	ldr	r3, [r7, #8]
 800e94c:	2b00      	cmp	r3, #0
 800e94e:	d101      	bne.n	800e954 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800e950:	89fb      	ldrh	r3, [r7, #14]
 800e952:	e019      	b.n	800e988 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800e954:	68bb      	ldr	r3, [r7, #8]
 800e956:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800e958:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800e95a:	8afb      	ldrh	r3, [r7, #22]
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	d012      	beq.n	800e986 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800e960:	2328      	movs	r3, #40	@ 0x28
 800e962:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800e964:	8afa      	ldrh	r2, [r7, #22]
 800e966:	8abb      	ldrh	r3, [r7, #20]
 800e968:	429a      	cmp	r2, r3
 800e96a:	d904      	bls.n	800e976 <tcp_eff_send_mss_netif+0x4e>
 800e96c:	8afa      	ldrh	r2, [r7, #22]
 800e96e:	8abb      	ldrh	r3, [r7, #20]
 800e970:	1ad3      	subs	r3, r2, r3
 800e972:	b29b      	uxth	r3, r3
 800e974:	e000      	b.n	800e978 <tcp_eff_send_mss_netif+0x50>
 800e976:	2300      	movs	r3, #0
 800e978:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800e97a:	8a7a      	ldrh	r2, [r7, #18]
 800e97c:	89fb      	ldrh	r3, [r7, #14]
 800e97e:	4293      	cmp	r3, r2
 800e980:	bf28      	it	cs
 800e982:	4613      	movcs	r3, r2
 800e984:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800e986:	89fb      	ldrh	r3, [r7, #14]
}
 800e988:	4618      	mov	r0, r3
 800e98a:	3718      	adds	r7, #24
 800e98c:	46bd      	mov	sp, r7
 800e98e:	bd80      	pop	{r7, pc}
 800e990:	08018e58 	.word	0x08018e58
 800e994:	08019564 	.word	0x08019564
 800e998:	08018e9c 	.word	0x08018e9c

0800e99c <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800e99c:	b580      	push	{r7, lr}
 800e99e:	b084      	sub	sp, #16
 800e9a0:	af00      	add	r7, sp, #0
 800e9a2:	6078      	str	r0, [r7, #4]
 800e9a4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800e9a6:	683b      	ldr	r3, [r7, #0]
 800e9a8:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	2b00      	cmp	r3, #0
 800e9ae:	d119      	bne.n	800e9e4 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800e9b0:	4b10      	ldr	r3, [pc, #64]	@ (800e9f4 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800e9b2:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 800e9b6:	4910      	ldr	r1, [pc, #64]	@ (800e9f8 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800e9b8:	4810      	ldr	r0, [pc, #64]	@ (800e9fc <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800e9ba:	f007 fca9 	bl	8016310 <iprintf>

  while (pcb != NULL) {
 800e9be:	e011      	b.n	800e9e4 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800e9c0:	68fb      	ldr	r3, [r7, #12]
 800e9c2:	681a      	ldr	r2, [r3, #0]
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	681b      	ldr	r3, [r3, #0]
 800e9c8:	429a      	cmp	r2, r3
 800e9ca:	d108      	bne.n	800e9de <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800e9cc:	68fb      	ldr	r3, [r7, #12]
 800e9ce:	68db      	ldr	r3, [r3, #12]
 800e9d0:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800e9d2:	68f8      	ldr	r0, [r7, #12]
 800e9d4:	f7fe fd42 	bl	800d45c <tcp_abort>
      pcb = next;
 800e9d8:	68bb      	ldr	r3, [r7, #8]
 800e9da:	60fb      	str	r3, [r7, #12]
 800e9dc:	e002      	b.n	800e9e4 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800e9de:	68fb      	ldr	r3, [r7, #12]
 800e9e0:	68db      	ldr	r3, [r3, #12]
 800e9e2:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800e9e4:	68fb      	ldr	r3, [r7, #12]
 800e9e6:	2b00      	cmp	r3, #0
 800e9e8:	d1ea      	bne.n	800e9c0 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800e9ea:	bf00      	nop
 800e9ec:	bf00      	nop
 800e9ee:	3710      	adds	r7, #16
 800e9f0:	46bd      	mov	sp, r7
 800e9f2:	bd80      	pop	{r7, pc}
 800e9f4:	08018e58 	.word	0x08018e58
 800e9f8:	0801958c 	.word	0x0801958c
 800e9fc:	08018e9c 	.word	0x08018e9c

0800ea00 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800ea00:	b580      	push	{r7, lr}
 800ea02:	b084      	sub	sp, #16
 800ea04:	af00      	add	r7, sp, #0
 800ea06:	6078      	str	r0, [r7, #4]
 800ea08:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	2b00      	cmp	r3, #0
 800ea0e:	d02a      	beq.n	800ea66 <tcp_netif_ip_addr_changed+0x66>
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	681b      	ldr	r3, [r3, #0]
 800ea14:	2b00      	cmp	r3, #0
 800ea16:	d026      	beq.n	800ea66 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800ea18:	4b15      	ldr	r3, [pc, #84]	@ (800ea70 <tcp_netif_ip_addr_changed+0x70>)
 800ea1a:	681b      	ldr	r3, [r3, #0]
 800ea1c:	4619      	mov	r1, r3
 800ea1e:	6878      	ldr	r0, [r7, #4]
 800ea20:	f7ff ffbc 	bl	800e99c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800ea24:	4b13      	ldr	r3, [pc, #76]	@ (800ea74 <tcp_netif_ip_addr_changed+0x74>)
 800ea26:	681b      	ldr	r3, [r3, #0]
 800ea28:	4619      	mov	r1, r3
 800ea2a:	6878      	ldr	r0, [r7, #4]
 800ea2c:	f7ff ffb6 	bl	800e99c <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800ea30:	683b      	ldr	r3, [r7, #0]
 800ea32:	2b00      	cmp	r3, #0
 800ea34:	d017      	beq.n	800ea66 <tcp_netif_ip_addr_changed+0x66>
 800ea36:	683b      	ldr	r3, [r7, #0]
 800ea38:	681b      	ldr	r3, [r3, #0]
 800ea3a:	2b00      	cmp	r3, #0
 800ea3c:	d013      	beq.n	800ea66 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800ea3e:	4b0e      	ldr	r3, [pc, #56]	@ (800ea78 <tcp_netif_ip_addr_changed+0x78>)
 800ea40:	681b      	ldr	r3, [r3, #0]
 800ea42:	60fb      	str	r3, [r7, #12]
 800ea44:	e00c      	b.n	800ea60 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800ea46:	68fb      	ldr	r3, [r7, #12]
 800ea48:	681a      	ldr	r2, [r3, #0]
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	681b      	ldr	r3, [r3, #0]
 800ea4e:	429a      	cmp	r2, r3
 800ea50:	d103      	bne.n	800ea5a <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800ea52:	683b      	ldr	r3, [r7, #0]
 800ea54:	681a      	ldr	r2, [r3, #0]
 800ea56:	68fb      	ldr	r3, [r7, #12]
 800ea58:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800ea5a:	68fb      	ldr	r3, [r7, #12]
 800ea5c:	68db      	ldr	r3, [r3, #12]
 800ea5e:	60fb      	str	r3, [r7, #12]
 800ea60:	68fb      	ldr	r3, [r7, #12]
 800ea62:	2b00      	cmp	r3, #0
 800ea64:	d1ef      	bne.n	800ea46 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800ea66:	bf00      	nop
 800ea68:	3710      	adds	r7, #16
 800ea6a:	46bd      	mov	sp, r7
 800ea6c:	bd80      	pop	{r7, pc}
 800ea6e:	bf00      	nop
 800ea70:	2000eb50 	.word	0x2000eb50
 800ea74:	2000eb48 	.word	0x2000eb48
 800ea78:	2000eb4c 	.word	0x2000eb4c

0800ea7c <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800ea7c:	b580      	push	{r7, lr}
 800ea7e:	b082      	sub	sp, #8
 800ea80:	af00      	add	r7, sp, #0
 800ea82:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ea88:	2b00      	cmp	r3, #0
 800ea8a:	d007      	beq.n	800ea9c <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ea90:	4618      	mov	r0, r3
 800ea92:	f7ff fb67 	bl	800e164 <tcp_segs_free>
    pcb->ooseq = NULL;
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	2200      	movs	r2, #0
 800ea9a:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800ea9c:	bf00      	nop
 800ea9e:	3708      	adds	r7, #8
 800eaa0:	46bd      	mov	sp, r7
 800eaa2:	bd80      	pop	{r7, pc}

0800eaa4 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800eaa4:	b590      	push	{r4, r7, lr}
 800eaa6:	b08d      	sub	sp, #52	@ 0x34
 800eaa8:	af04      	add	r7, sp, #16
 800eaaa:	6078      	str	r0, [r7, #4]
 800eaac:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	2b00      	cmp	r3, #0
 800eab2:	d105      	bne.n	800eac0 <tcp_input+0x1c>
 800eab4:	4b9b      	ldr	r3, [pc, #620]	@ (800ed24 <tcp_input+0x280>)
 800eab6:	2283      	movs	r2, #131	@ 0x83
 800eab8:	499b      	ldr	r1, [pc, #620]	@ (800ed28 <tcp_input+0x284>)
 800eaba:	489c      	ldr	r0, [pc, #624]	@ (800ed2c <tcp_input+0x288>)
 800eabc:	f007 fc28 	bl	8016310 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	685b      	ldr	r3, [r3, #4]
 800eac4:	4a9a      	ldr	r2, [pc, #616]	@ (800ed30 <tcp_input+0x28c>)
 800eac6:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	895b      	ldrh	r3, [r3, #10]
 800eacc:	2b13      	cmp	r3, #19
 800eace:	f240 83d1 	bls.w	800f274 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800ead2:	4b98      	ldr	r3, [pc, #608]	@ (800ed34 <tcp_input+0x290>)
 800ead4:	695b      	ldr	r3, [r3, #20]
 800ead6:	4a97      	ldr	r2, [pc, #604]	@ (800ed34 <tcp_input+0x290>)
 800ead8:	6812      	ldr	r2, [r2, #0]
 800eada:	4611      	mov	r1, r2
 800eadc:	4618      	mov	r0, r3
 800eade:	f006 f9df 	bl	8014ea0 <ip4_addr_isbroadcast_u32>
 800eae2:	4603      	mov	r3, r0
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	f040 83c7 	bne.w	800f278 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800eaea:	4b92      	ldr	r3, [pc, #584]	@ (800ed34 <tcp_input+0x290>)
 800eaec:	695b      	ldr	r3, [r3, #20]
 800eaee:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800eaf2:	2be0      	cmp	r3, #224	@ 0xe0
 800eaf4:	f000 83c0 	beq.w	800f278 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800eaf8:	4b8d      	ldr	r3, [pc, #564]	@ (800ed30 <tcp_input+0x28c>)
 800eafa:	681b      	ldr	r3, [r3, #0]
 800eafc:	899b      	ldrh	r3, [r3, #12]
 800eafe:	b29b      	uxth	r3, r3
 800eb00:	4618      	mov	r0, r3
 800eb02:	f7fc faa7 	bl	800b054 <lwip_htons>
 800eb06:	4603      	mov	r3, r0
 800eb08:	0b1b      	lsrs	r3, r3, #12
 800eb0a:	b29b      	uxth	r3, r3
 800eb0c:	b2db      	uxtb	r3, r3
 800eb0e:	009b      	lsls	r3, r3, #2
 800eb10:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800eb12:	7cbb      	ldrb	r3, [r7, #18]
 800eb14:	2b13      	cmp	r3, #19
 800eb16:	f240 83b1 	bls.w	800f27c <tcp_input+0x7d8>
 800eb1a:	7cbb      	ldrb	r3, [r7, #18]
 800eb1c:	b29a      	uxth	r2, r3
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	891b      	ldrh	r3, [r3, #8]
 800eb22:	429a      	cmp	r2, r3
 800eb24:	f200 83aa 	bhi.w	800f27c <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800eb28:	7cbb      	ldrb	r3, [r7, #18]
 800eb2a:	b29b      	uxth	r3, r3
 800eb2c:	3b14      	subs	r3, #20
 800eb2e:	b29a      	uxth	r2, r3
 800eb30:	4b81      	ldr	r3, [pc, #516]	@ (800ed38 <tcp_input+0x294>)
 800eb32:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800eb34:	4b81      	ldr	r3, [pc, #516]	@ (800ed3c <tcp_input+0x298>)
 800eb36:	2200      	movs	r2, #0
 800eb38:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	895a      	ldrh	r2, [r3, #10]
 800eb3e:	7cbb      	ldrb	r3, [r7, #18]
 800eb40:	b29b      	uxth	r3, r3
 800eb42:	429a      	cmp	r2, r3
 800eb44:	d309      	bcc.n	800eb5a <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800eb46:	4b7c      	ldr	r3, [pc, #496]	@ (800ed38 <tcp_input+0x294>)
 800eb48:	881a      	ldrh	r2, [r3, #0]
 800eb4a:	4b7d      	ldr	r3, [pc, #500]	@ (800ed40 <tcp_input+0x29c>)
 800eb4c:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800eb4e:	7cbb      	ldrb	r3, [r7, #18]
 800eb50:	4619      	mov	r1, r3
 800eb52:	6878      	ldr	r0, [r7, #4]
 800eb54:	f7fd fdea 	bl	800c72c <pbuf_remove_header>
 800eb58:	e04e      	b.n	800ebf8 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	681b      	ldr	r3, [r3, #0]
 800eb5e:	2b00      	cmp	r3, #0
 800eb60:	d105      	bne.n	800eb6e <tcp_input+0xca>
 800eb62:	4b70      	ldr	r3, [pc, #448]	@ (800ed24 <tcp_input+0x280>)
 800eb64:	22c2      	movs	r2, #194	@ 0xc2
 800eb66:	4977      	ldr	r1, [pc, #476]	@ (800ed44 <tcp_input+0x2a0>)
 800eb68:	4870      	ldr	r0, [pc, #448]	@ (800ed2c <tcp_input+0x288>)
 800eb6a:	f007 fbd1 	bl	8016310 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800eb6e:	2114      	movs	r1, #20
 800eb70:	6878      	ldr	r0, [r7, #4]
 800eb72:	f7fd fddb 	bl	800c72c <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	895a      	ldrh	r2, [r3, #10]
 800eb7a:	4b71      	ldr	r3, [pc, #452]	@ (800ed40 <tcp_input+0x29c>)
 800eb7c:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800eb7e:	4b6e      	ldr	r3, [pc, #440]	@ (800ed38 <tcp_input+0x294>)
 800eb80:	881a      	ldrh	r2, [r3, #0]
 800eb82:	4b6f      	ldr	r3, [pc, #444]	@ (800ed40 <tcp_input+0x29c>)
 800eb84:	881b      	ldrh	r3, [r3, #0]
 800eb86:	1ad3      	subs	r3, r2, r3
 800eb88:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800eb8a:	4b6d      	ldr	r3, [pc, #436]	@ (800ed40 <tcp_input+0x29c>)
 800eb8c:	881b      	ldrh	r3, [r3, #0]
 800eb8e:	4619      	mov	r1, r3
 800eb90:	6878      	ldr	r0, [r7, #4]
 800eb92:	f7fd fdcb 	bl	800c72c <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	681b      	ldr	r3, [r3, #0]
 800eb9a:	895b      	ldrh	r3, [r3, #10]
 800eb9c:	8a3a      	ldrh	r2, [r7, #16]
 800eb9e:	429a      	cmp	r2, r3
 800eba0:	f200 836e 	bhi.w	800f280 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	681b      	ldr	r3, [r3, #0]
 800eba8:	685b      	ldr	r3, [r3, #4]
 800ebaa:	4a64      	ldr	r2, [pc, #400]	@ (800ed3c <tcp_input+0x298>)
 800ebac:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	681b      	ldr	r3, [r3, #0]
 800ebb2:	8a3a      	ldrh	r2, [r7, #16]
 800ebb4:	4611      	mov	r1, r2
 800ebb6:	4618      	mov	r0, r3
 800ebb8:	f7fd fdb8 	bl	800c72c <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	891a      	ldrh	r2, [r3, #8]
 800ebc0:	8a3b      	ldrh	r3, [r7, #16]
 800ebc2:	1ad3      	subs	r3, r2, r3
 800ebc4:	b29a      	uxth	r2, r3
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	895b      	ldrh	r3, [r3, #10]
 800ebce:	2b00      	cmp	r3, #0
 800ebd0:	d005      	beq.n	800ebde <tcp_input+0x13a>
 800ebd2:	4b54      	ldr	r3, [pc, #336]	@ (800ed24 <tcp_input+0x280>)
 800ebd4:	22df      	movs	r2, #223	@ 0xdf
 800ebd6:	495c      	ldr	r1, [pc, #368]	@ (800ed48 <tcp_input+0x2a4>)
 800ebd8:	4854      	ldr	r0, [pc, #336]	@ (800ed2c <tcp_input+0x288>)
 800ebda:	f007 fb99 	bl	8016310 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	891a      	ldrh	r2, [r3, #8]
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	681b      	ldr	r3, [r3, #0]
 800ebe6:	891b      	ldrh	r3, [r3, #8]
 800ebe8:	429a      	cmp	r2, r3
 800ebea:	d005      	beq.n	800ebf8 <tcp_input+0x154>
 800ebec:	4b4d      	ldr	r3, [pc, #308]	@ (800ed24 <tcp_input+0x280>)
 800ebee:	22e0      	movs	r2, #224	@ 0xe0
 800ebf0:	4956      	ldr	r1, [pc, #344]	@ (800ed4c <tcp_input+0x2a8>)
 800ebf2:	484e      	ldr	r0, [pc, #312]	@ (800ed2c <tcp_input+0x288>)
 800ebf4:	f007 fb8c 	bl	8016310 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800ebf8:	4b4d      	ldr	r3, [pc, #308]	@ (800ed30 <tcp_input+0x28c>)
 800ebfa:	681b      	ldr	r3, [r3, #0]
 800ebfc:	881b      	ldrh	r3, [r3, #0]
 800ebfe:	b29b      	uxth	r3, r3
 800ec00:	4a4b      	ldr	r2, [pc, #300]	@ (800ed30 <tcp_input+0x28c>)
 800ec02:	6814      	ldr	r4, [r2, #0]
 800ec04:	4618      	mov	r0, r3
 800ec06:	f7fc fa25 	bl	800b054 <lwip_htons>
 800ec0a:	4603      	mov	r3, r0
 800ec0c:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800ec0e:	4b48      	ldr	r3, [pc, #288]	@ (800ed30 <tcp_input+0x28c>)
 800ec10:	681b      	ldr	r3, [r3, #0]
 800ec12:	885b      	ldrh	r3, [r3, #2]
 800ec14:	b29b      	uxth	r3, r3
 800ec16:	4a46      	ldr	r2, [pc, #280]	@ (800ed30 <tcp_input+0x28c>)
 800ec18:	6814      	ldr	r4, [r2, #0]
 800ec1a:	4618      	mov	r0, r3
 800ec1c:	f7fc fa1a 	bl	800b054 <lwip_htons>
 800ec20:	4603      	mov	r3, r0
 800ec22:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800ec24:	4b42      	ldr	r3, [pc, #264]	@ (800ed30 <tcp_input+0x28c>)
 800ec26:	681b      	ldr	r3, [r3, #0]
 800ec28:	685b      	ldr	r3, [r3, #4]
 800ec2a:	4a41      	ldr	r2, [pc, #260]	@ (800ed30 <tcp_input+0x28c>)
 800ec2c:	6814      	ldr	r4, [r2, #0]
 800ec2e:	4618      	mov	r0, r3
 800ec30:	f7fc fa25 	bl	800b07e <lwip_htonl>
 800ec34:	4603      	mov	r3, r0
 800ec36:	6063      	str	r3, [r4, #4]
 800ec38:	6863      	ldr	r3, [r4, #4]
 800ec3a:	4a45      	ldr	r2, [pc, #276]	@ (800ed50 <tcp_input+0x2ac>)
 800ec3c:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800ec3e:	4b3c      	ldr	r3, [pc, #240]	@ (800ed30 <tcp_input+0x28c>)
 800ec40:	681b      	ldr	r3, [r3, #0]
 800ec42:	689b      	ldr	r3, [r3, #8]
 800ec44:	4a3a      	ldr	r2, [pc, #232]	@ (800ed30 <tcp_input+0x28c>)
 800ec46:	6814      	ldr	r4, [r2, #0]
 800ec48:	4618      	mov	r0, r3
 800ec4a:	f7fc fa18 	bl	800b07e <lwip_htonl>
 800ec4e:	4603      	mov	r3, r0
 800ec50:	60a3      	str	r3, [r4, #8]
 800ec52:	68a3      	ldr	r3, [r4, #8]
 800ec54:	4a3f      	ldr	r2, [pc, #252]	@ (800ed54 <tcp_input+0x2b0>)
 800ec56:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800ec58:	4b35      	ldr	r3, [pc, #212]	@ (800ed30 <tcp_input+0x28c>)
 800ec5a:	681b      	ldr	r3, [r3, #0]
 800ec5c:	89db      	ldrh	r3, [r3, #14]
 800ec5e:	b29b      	uxth	r3, r3
 800ec60:	4a33      	ldr	r2, [pc, #204]	@ (800ed30 <tcp_input+0x28c>)
 800ec62:	6814      	ldr	r4, [r2, #0]
 800ec64:	4618      	mov	r0, r3
 800ec66:	f7fc f9f5 	bl	800b054 <lwip_htons>
 800ec6a:	4603      	mov	r3, r0
 800ec6c:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800ec6e:	4b30      	ldr	r3, [pc, #192]	@ (800ed30 <tcp_input+0x28c>)
 800ec70:	681b      	ldr	r3, [r3, #0]
 800ec72:	899b      	ldrh	r3, [r3, #12]
 800ec74:	b29b      	uxth	r3, r3
 800ec76:	4618      	mov	r0, r3
 800ec78:	f7fc f9ec 	bl	800b054 <lwip_htons>
 800ec7c:	4603      	mov	r3, r0
 800ec7e:	b2db      	uxtb	r3, r3
 800ec80:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ec84:	b2da      	uxtb	r2, r3
 800ec86:	4b34      	ldr	r3, [pc, #208]	@ (800ed58 <tcp_input+0x2b4>)
 800ec88:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	891a      	ldrh	r2, [r3, #8]
 800ec8e:	4b33      	ldr	r3, [pc, #204]	@ (800ed5c <tcp_input+0x2b8>)
 800ec90:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800ec92:	4b31      	ldr	r3, [pc, #196]	@ (800ed58 <tcp_input+0x2b4>)
 800ec94:	781b      	ldrb	r3, [r3, #0]
 800ec96:	f003 0303 	and.w	r3, r3, #3
 800ec9a:	2b00      	cmp	r3, #0
 800ec9c:	d00c      	beq.n	800ecb8 <tcp_input+0x214>
    tcplen++;
 800ec9e:	4b2f      	ldr	r3, [pc, #188]	@ (800ed5c <tcp_input+0x2b8>)
 800eca0:	881b      	ldrh	r3, [r3, #0]
 800eca2:	3301      	adds	r3, #1
 800eca4:	b29a      	uxth	r2, r3
 800eca6:	4b2d      	ldr	r3, [pc, #180]	@ (800ed5c <tcp_input+0x2b8>)
 800eca8:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	891a      	ldrh	r2, [r3, #8]
 800ecae:	4b2b      	ldr	r3, [pc, #172]	@ (800ed5c <tcp_input+0x2b8>)
 800ecb0:	881b      	ldrh	r3, [r3, #0]
 800ecb2:	429a      	cmp	r2, r3
 800ecb4:	f200 82e6 	bhi.w	800f284 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800ecb8:	2300      	movs	r3, #0
 800ecba:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ecbc:	4b28      	ldr	r3, [pc, #160]	@ (800ed60 <tcp_input+0x2bc>)
 800ecbe:	681b      	ldr	r3, [r3, #0]
 800ecc0:	61fb      	str	r3, [r7, #28]
 800ecc2:	e09d      	b.n	800ee00 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800ecc4:	69fb      	ldr	r3, [r7, #28]
 800ecc6:	7d1b      	ldrb	r3, [r3, #20]
 800ecc8:	2b00      	cmp	r3, #0
 800ecca:	d105      	bne.n	800ecd8 <tcp_input+0x234>
 800eccc:	4b15      	ldr	r3, [pc, #84]	@ (800ed24 <tcp_input+0x280>)
 800ecce:	22fb      	movs	r2, #251	@ 0xfb
 800ecd0:	4924      	ldr	r1, [pc, #144]	@ (800ed64 <tcp_input+0x2c0>)
 800ecd2:	4816      	ldr	r0, [pc, #88]	@ (800ed2c <tcp_input+0x288>)
 800ecd4:	f007 fb1c 	bl	8016310 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800ecd8:	69fb      	ldr	r3, [r7, #28]
 800ecda:	7d1b      	ldrb	r3, [r3, #20]
 800ecdc:	2b0a      	cmp	r3, #10
 800ecde:	d105      	bne.n	800ecec <tcp_input+0x248>
 800ece0:	4b10      	ldr	r3, [pc, #64]	@ (800ed24 <tcp_input+0x280>)
 800ece2:	22fc      	movs	r2, #252	@ 0xfc
 800ece4:	4920      	ldr	r1, [pc, #128]	@ (800ed68 <tcp_input+0x2c4>)
 800ece6:	4811      	ldr	r0, [pc, #68]	@ (800ed2c <tcp_input+0x288>)
 800ece8:	f007 fb12 	bl	8016310 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800ecec:	69fb      	ldr	r3, [r7, #28]
 800ecee:	7d1b      	ldrb	r3, [r3, #20]
 800ecf0:	2b01      	cmp	r3, #1
 800ecf2:	d105      	bne.n	800ed00 <tcp_input+0x25c>
 800ecf4:	4b0b      	ldr	r3, [pc, #44]	@ (800ed24 <tcp_input+0x280>)
 800ecf6:	22fd      	movs	r2, #253	@ 0xfd
 800ecf8:	491c      	ldr	r1, [pc, #112]	@ (800ed6c <tcp_input+0x2c8>)
 800ecfa:	480c      	ldr	r0, [pc, #48]	@ (800ed2c <tcp_input+0x288>)
 800ecfc:	f007 fb08 	bl	8016310 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ed00:	69fb      	ldr	r3, [r7, #28]
 800ed02:	7a1b      	ldrb	r3, [r3, #8]
 800ed04:	2b00      	cmp	r3, #0
 800ed06:	d033      	beq.n	800ed70 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800ed08:	69fb      	ldr	r3, [r7, #28]
 800ed0a:	7a1a      	ldrb	r2, [r3, #8]
 800ed0c:	4b09      	ldr	r3, [pc, #36]	@ (800ed34 <tcp_input+0x290>)
 800ed0e:	685b      	ldr	r3, [r3, #4]
 800ed10:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ed14:	3301      	adds	r3, #1
 800ed16:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ed18:	429a      	cmp	r2, r3
 800ed1a:	d029      	beq.n	800ed70 <tcp_input+0x2cc>
      prev = pcb;
 800ed1c:	69fb      	ldr	r3, [r7, #28]
 800ed1e:	61bb      	str	r3, [r7, #24]
      continue;
 800ed20:	e06b      	b.n	800edfa <tcp_input+0x356>
 800ed22:	bf00      	nop
 800ed24:	080195c0 	.word	0x080195c0
 800ed28:	080195f4 	.word	0x080195f4
 800ed2c:	0801960c 	.word	0x0801960c
 800ed30:	2000eb6c 	.word	0x2000eb6c
 800ed34:	200091f8 	.word	0x200091f8
 800ed38:	2000eb70 	.word	0x2000eb70
 800ed3c:	2000eb74 	.word	0x2000eb74
 800ed40:	2000eb72 	.word	0x2000eb72
 800ed44:	08019634 	.word	0x08019634
 800ed48:	08019644 	.word	0x08019644
 800ed4c:	08019650 	.word	0x08019650
 800ed50:	2000eb7c 	.word	0x2000eb7c
 800ed54:	2000eb80 	.word	0x2000eb80
 800ed58:	2000eb88 	.word	0x2000eb88
 800ed5c:	2000eb86 	.word	0x2000eb86
 800ed60:	2000eb50 	.word	0x2000eb50
 800ed64:	08019670 	.word	0x08019670
 800ed68:	08019698 	.word	0x08019698
 800ed6c:	080196c4 	.word	0x080196c4
    }

    if (pcb->remote_port == tcphdr->src &&
 800ed70:	69fb      	ldr	r3, [r7, #28]
 800ed72:	8b1a      	ldrh	r2, [r3, #24]
 800ed74:	4b72      	ldr	r3, [pc, #456]	@ (800ef40 <tcp_input+0x49c>)
 800ed76:	681b      	ldr	r3, [r3, #0]
 800ed78:	881b      	ldrh	r3, [r3, #0]
 800ed7a:	b29b      	uxth	r3, r3
 800ed7c:	429a      	cmp	r2, r3
 800ed7e:	d13a      	bne.n	800edf6 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800ed80:	69fb      	ldr	r3, [r7, #28]
 800ed82:	8ada      	ldrh	r2, [r3, #22]
 800ed84:	4b6e      	ldr	r3, [pc, #440]	@ (800ef40 <tcp_input+0x49c>)
 800ed86:	681b      	ldr	r3, [r3, #0]
 800ed88:	885b      	ldrh	r3, [r3, #2]
 800ed8a:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800ed8c:	429a      	cmp	r2, r3
 800ed8e:	d132      	bne.n	800edf6 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800ed90:	69fb      	ldr	r3, [r7, #28]
 800ed92:	685a      	ldr	r2, [r3, #4]
 800ed94:	4b6b      	ldr	r3, [pc, #428]	@ (800ef44 <tcp_input+0x4a0>)
 800ed96:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800ed98:	429a      	cmp	r2, r3
 800ed9a:	d12c      	bne.n	800edf6 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800ed9c:	69fb      	ldr	r3, [r7, #28]
 800ed9e:	681a      	ldr	r2, [r3, #0]
 800eda0:	4b68      	ldr	r3, [pc, #416]	@ (800ef44 <tcp_input+0x4a0>)
 800eda2:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800eda4:	429a      	cmp	r2, r3
 800eda6:	d126      	bne.n	800edf6 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800eda8:	69fb      	ldr	r3, [r7, #28]
 800edaa:	68db      	ldr	r3, [r3, #12]
 800edac:	69fa      	ldr	r2, [r7, #28]
 800edae:	429a      	cmp	r2, r3
 800edb0:	d106      	bne.n	800edc0 <tcp_input+0x31c>
 800edb2:	4b65      	ldr	r3, [pc, #404]	@ (800ef48 <tcp_input+0x4a4>)
 800edb4:	f240 120d 	movw	r2, #269	@ 0x10d
 800edb8:	4964      	ldr	r1, [pc, #400]	@ (800ef4c <tcp_input+0x4a8>)
 800edba:	4865      	ldr	r0, [pc, #404]	@ (800ef50 <tcp_input+0x4ac>)
 800edbc:	f007 faa8 	bl	8016310 <iprintf>
      if (prev != NULL) {
 800edc0:	69bb      	ldr	r3, [r7, #24]
 800edc2:	2b00      	cmp	r3, #0
 800edc4:	d00a      	beq.n	800eddc <tcp_input+0x338>
        prev->next = pcb->next;
 800edc6:	69fb      	ldr	r3, [r7, #28]
 800edc8:	68da      	ldr	r2, [r3, #12]
 800edca:	69bb      	ldr	r3, [r7, #24]
 800edcc:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800edce:	4b61      	ldr	r3, [pc, #388]	@ (800ef54 <tcp_input+0x4b0>)
 800edd0:	681a      	ldr	r2, [r3, #0]
 800edd2:	69fb      	ldr	r3, [r7, #28]
 800edd4:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800edd6:	4a5f      	ldr	r2, [pc, #380]	@ (800ef54 <tcp_input+0x4b0>)
 800edd8:	69fb      	ldr	r3, [r7, #28]
 800edda:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800eddc:	69fb      	ldr	r3, [r7, #28]
 800edde:	68db      	ldr	r3, [r3, #12]
 800ede0:	69fa      	ldr	r2, [r7, #28]
 800ede2:	429a      	cmp	r2, r3
 800ede4:	d111      	bne.n	800ee0a <tcp_input+0x366>
 800ede6:	4b58      	ldr	r3, [pc, #352]	@ (800ef48 <tcp_input+0x4a4>)
 800ede8:	f240 1215 	movw	r2, #277	@ 0x115
 800edec:	495a      	ldr	r1, [pc, #360]	@ (800ef58 <tcp_input+0x4b4>)
 800edee:	4858      	ldr	r0, [pc, #352]	@ (800ef50 <tcp_input+0x4ac>)
 800edf0:	f007 fa8e 	bl	8016310 <iprintf>
      break;
 800edf4:	e009      	b.n	800ee0a <tcp_input+0x366>
    }
    prev = pcb;
 800edf6:	69fb      	ldr	r3, [r7, #28]
 800edf8:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800edfa:	69fb      	ldr	r3, [r7, #28]
 800edfc:	68db      	ldr	r3, [r3, #12]
 800edfe:	61fb      	str	r3, [r7, #28]
 800ee00:	69fb      	ldr	r3, [r7, #28]
 800ee02:	2b00      	cmp	r3, #0
 800ee04:	f47f af5e 	bne.w	800ecc4 <tcp_input+0x220>
 800ee08:	e000      	b.n	800ee0c <tcp_input+0x368>
      break;
 800ee0a:	bf00      	nop
  }

  if (pcb == NULL) {
 800ee0c:	69fb      	ldr	r3, [r7, #28]
 800ee0e:	2b00      	cmp	r3, #0
 800ee10:	f040 80aa 	bne.w	800ef68 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800ee14:	4b51      	ldr	r3, [pc, #324]	@ (800ef5c <tcp_input+0x4b8>)
 800ee16:	681b      	ldr	r3, [r3, #0]
 800ee18:	61fb      	str	r3, [r7, #28]
 800ee1a:	e03f      	b.n	800ee9c <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800ee1c:	69fb      	ldr	r3, [r7, #28]
 800ee1e:	7d1b      	ldrb	r3, [r3, #20]
 800ee20:	2b0a      	cmp	r3, #10
 800ee22:	d006      	beq.n	800ee32 <tcp_input+0x38e>
 800ee24:	4b48      	ldr	r3, [pc, #288]	@ (800ef48 <tcp_input+0x4a4>)
 800ee26:	f240 121f 	movw	r2, #287	@ 0x11f
 800ee2a:	494d      	ldr	r1, [pc, #308]	@ (800ef60 <tcp_input+0x4bc>)
 800ee2c:	4848      	ldr	r0, [pc, #288]	@ (800ef50 <tcp_input+0x4ac>)
 800ee2e:	f007 fa6f 	bl	8016310 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ee32:	69fb      	ldr	r3, [r7, #28]
 800ee34:	7a1b      	ldrb	r3, [r3, #8]
 800ee36:	2b00      	cmp	r3, #0
 800ee38:	d009      	beq.n	800ee4e <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800ee3a:	69fb      	ldr	r3, [r7, #28]
 800ee3c:	7a1a      	ldrb	r2, [r3, #8]
 800ee3e:	4b41      	ldr	r3, [pc, #260]	@ (800ef44 <tcp_input+0x4a0>)
 800ee40:	685b      	ldr	r3, [r3, #4]
 800ee42:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ee46:	3301      	adds	r3, #1
 800ee48:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ee4a:	429a      	cmp	r2, r3
 800ee4c:	d122      	bne.n	800ee94 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800ee4e:	69fb      	ldr	r3, [r7, #28]
 800ee50:	8b1a      	ldrh	r2, [r3, #24]
 800ee52:	4b3b      	ldr	r3, [pc, #236]	@ (800ef40 <tcp_input+0x49c>)
 800ee54:	681b      	ldr	r3, [r3, #0]
 800ee56:	881b      	ldrh	r3, [r3, #0]
 800ee58:	b29b      	uxth	r3, r3
 800ee5a:	429a      	cmp	r2, r3
 800ee5c:	d11b      	bne.n	800ee96 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800ee5e:	69fb      	ldr	r3, [r7, #28]
 800ee60:	8ada      	ldrh	r2, [r3, #22]
 800ee62:	4b37      	ldr	r3, [pc, #220]	@ (800ef40 <tcp_input+0x49c>)
 800ee64:	681b      	ldr	r3, [r3, #0]
 800ee66:	885b      	ldrh	r3, [r3, #2]
 800ee68:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800ee6a:	429a      	cmp	r2, r3
 800ee6c:	d113      	bne.n	800ee96 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800ee6e:	69fb      	ldr	r3, [r7, #28]
 800ee70:	685a      	ldr	r2, [r3, #4]
 800ee72:	4b34      	ldr	r3, [pc, #208]	@ (800ef44 <tcp_input+0x4a0>)
 800ee74:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800ee76:	429a      	cmp	r2, r3
 800ee78:	d10d      	bne.n	800ee96 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800ee7a:	69fb      	ldr	r3, [r7, #28]
 800ee7c:	681a      	ldr	r2, [r3, #0]
 800ee7e:	4b31      	ldr	r3, [pc, #196]	@ (800ef44 <tcp_input+0x4a0>)
 800ee80:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800ee82:	429a      	cmp	r2, r3
 800ee84:	d107      	bne.n	800ee96 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800ee86:	69f8      	ldr	r0, [r7, #28]
 800ee88:	f000 fb56 	bl	800f538 <tcp_timewait_input>
        }
        pbuf_free(p);
 800ee8c:	6878      	ldr	r0, [r7, #4]
 800ee8e:	f7fd fcd3 	bl	800c838 <pbuf_free>
        return;
 800ee92:	e1fd      	b.n	800f290 <tcp_input+0x7ec>
        continue;
 800ee94:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800ee96:	69fb      	ldr	r3, [r7, #28]
 800ee98:	68db      	ldr	r3, [r3, #12]
 800ee9a:	61fb      	str	r3, [r7, #28]
 800ee9c:	69fb      	ldr	r3, [r7, #28]
 800ee9e:	2b00      	cmp	r3, #0
 800eea0:	d1bc      	bne.n	800ee1c <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800eea2:	2300      	movs	r3, #0
 800eea4:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800eea6:	4b2f      	ldr	r3, [pc, #188]	@ (800ef64 <tcp_input+0x4c0>)
 800eea8:	681b      	ldr	r3, [r3, #0]
 800eeaa:	617b      	str	r3, [r7, #20]
 800eeac:	e02a      	b.n	800ef04 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800eeae:	697b      	ldr	r3, [r7, #20]
 800eeb0:	7a1b      	ldrb	r3, [r3, #8]
 800eeb2:	2b00      	cmp	r3, #0
 800eeb4:	d00c      	beq.n	800eed0 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800eeb6:	697b      	ldr	r3, [r7, #20]
 800eeb8:	7a1a      	ldrb	r2, [r3, #8]
 800eeba:	4b22      	ldr	r3, [pc, #136]	@ (800ef44 <tcp_input+0x4a0>)
 800eebc:	685b      	ldr	r3, [r3, #4]
 800eebe:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800eec2:	3301      	adds	r3, #1
 800eec4:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800eec6:	429a      	cmp	r2, r3
 800eec8:	d002      	beq.n	800eed0 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800eeca:	697b      	ldr	r3, [r7, #20]
 800eecc:	61bb      	str	r3, [r7, #24]
        continue;
 800eece:	e016      	b.n	800eefe <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800eed0:	697b      	ldr	r3, [r7, #20]
 800eed2:	8ada      	ldrh	r2, [r3, #22]
 800eed4:	4b1a      	ldr	r3, [pc, #104]	@ (800ef40 <tcp_input+0x49c>)
 800eed6:	681b      	ldr	r3, [r3, #0]
 800eed8:	885b      	ldrh	r3, [r3, #2]
 800eeda:	b29b      	uxth	r3, r3
 800eedc:	429a      	cmp	r2, r3
 800eede:	d10c      	bne.n	800eefa <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800eee0:	697b      	ldr	r3, [r7, #20]
 800eee2:	681a      	ldr	r2, [r3, #0]
 800eee4:	4b17      	ldr	r3, [pc, #92]	@ (800ef44 <tcp_input+0x4a0>)
 800eee6:	695b      	ldr	r3, [r3, #20]
 800eee8:	429a      	cmp	r2, r3
 800eeea:	d00f      	beq.n	800ef0c <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800eeec:	697b      	ldr	r3, [r7, #20]
 800eeee:	2b00      	cmp	r3, #0
 800eef0:	d00d      	beq.n	800ef0e <tcp_input+0x46a>
 800eef2:	697b      	ldr	r3, [r7, #20]
 800eef4:	681b      	ldr	r3, [r3, #0]
 800eef6:	2b00      	cmp	r3, #0
 800eef8:	d009      	beq.n	800ef0e <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800eefa:	697b      	ldr	r3, [r7, #20]
 800eefc:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800eefe:	697b      	ldr	r3, [r7, #20]
 800ef00:	68db      	ldr	r3, [r3, #12]
 800ef02:	617b      	str	r3, [r7, #20]
 800ef04:	697b      	ldr	r3, [r7, #20]
 800ef06:	2b00      	cmp	r3, #0
 800ef08:	d1d1      	bne.n	800eeae <tcp_input+0x40a>
 800ef0a:	e000      	b.n	800ef0e <tcp_input+0x46a>
            break;
 800ef0c:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800ef0e:	697b      	ldr	r3, [r7, #20]
 800ef10:	2b00      	cmp	r3, #0
 800ef12:	d029      	beq.n	800ef68 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800ef14:	69bb      	ldr	r3, [r7, #24]
 800ef16:	2b00      	cmp	r3, #0
 800ef18:	d00a      	beq.n	800ef30 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800ef1a:	697b      	ldr	r3, [r7, #20]
 800ef1c:	68da      	ldr	r2, [r3, #12]
 800ef1e:	69bb      	ldr	r3, [r7, #24]
 800ef20:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800ef22:	4b10      	ldr	r3, [pc, #64]	@ (800ef64 <tcp_input+0x4c0>)
 800ef24:	681a      	ldr	r2, [r3, #0]
 800ef26:	697b      	ldr	r3, [r7, #20]
 800ef28:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800ef2a:	4a0e      	ldr	r2, [pc, #56]	@ (800ef64 <tcp_input+0x4c0>)
 800ef2c:	697b      	ldr	r3, [r7, #20]
 800ef2e:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800ef30:	6978      	ldr	r0, [r7, #20]
 800ef32:	f000 fa03 	bl	800f33c <tcp_listen_input>
      }
      pbuf_free(p);
 800ef36:	6878      	ldr	r0, [r7, #4]
 800ef38:	f7fd fc7e 	bl	800c838 <pbuf_free>
      return;
 800ef3c:	e1a8      	b.n	800f290 <tcp_input+0x7ec>
 800ef3e:	bf00      	nop
 800ef40:	2000eb6c 	.word	0x2000eb6c
 800ef44:	200091f8 	.word	0x200091f8
 800ef48:	080195c0 	.word	0x080195c0
 800ef4c:	080196ec 	.word	0x080196ec
 800ef50:	0801960c 	.word	0x0801960c
 800ef54:	2000eb50 	.word	0x2000eb50
 800ef58:	08019718 	.word	0x08019718
 800ef5c:	2000eb54 	.word	0x2000eb54
 800ef60:	08019744 	.word	0x08019744
 800ef64:	2000eb4c 	.word	0x2000eb4c
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800ef68:	69fb      	ldr	r3, [r7, #28]
 800ef6a:	2b00      	cmp	r3, #0
 800ef6c:	f000 8158 	beq.w	800f220 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800ef70:	4b95      	ldr	r3, [pc, #596]	@ (800f1c8 <tcp_input+0x724>)
 800ef72:	2200      	movs	r2, #0
 800ef74:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	891a      	ldrh	r2, [r3, #8]
 800ef7a:	4b93      	ldr	r3, [pc, #588]	@ (800f1c8 <tcp_input+0x724>)
 800ef7c:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800ef7e:	4a92      	ldr	r2, [pc, #584]	@ (800f1c8 <tcp_input+0x724>)
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800ef84:	4b91      	ldr	r3, [pc, #580]	@ (800f1cc <tcp_input+0x728>)
 800ef86:	681b      	ldr	r3, [r3, #0]
 800ef88:	4a8f      	ldr	r2, [pc, #572]	@ (800f1c8 <tcp_input+0x724>)
 800ef8a:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800ef8c:	4b90      	ldr	r3, [pc, #576]	@ (800f1d0 <tcp_input+0x72c>)
 800ef8e:	2200      	movs	r2, #0
 800ef90:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800ef92:	4b90      	ldr	r3, [pc, #576]	@ (800f1d4 <tcp_input+0x730>)
 800ef94:	2200      	movs	r2, #0
 800ef96:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800ef98:	4b8f      	ldr	r3, [pc, #572]	@ (800f1d8 <tcp_input+0x734>)
 800ef9a:	2200      	movs	r2, #0
 800ef9c:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800ef9e:	4b8f      	ldr	r3, [pc, #572]	@ (800f1dc <tcp_input+0x738>)
 800efa0:	781b      	ldrb	r3, [r3, #0]
 800efa2:	f003 0308 	and.w	r3, r3, #8
 800efa6:	2b00      	cmp	r3, #0
 800efa8:	d006      	beq.n	800efb8 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	7b5b      	ldrb	r3, [r3, #13]
 800efae:	f043 0301 	orr.w	r3, r3, #1
 800efb2:	b2da      	uxtb	r2, r3
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800efb8:	69fb      	ldr	r3, [r7, #28]
 800efba:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800efbc:	2b00      	cmp	r3, #0
 800efbe:	d017      	beq.n	800eff0 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800efc0:	69f8      	ldr	r0, [r7, #28]
 800efc2:	f7ff f853 	bl	800e06c <tcp_process_refused_data>
 800efc6:	4603      	mov	r3, r0
 800efc8:	f113 0f0d 	cmn.w	r3, #13
 800efcc:	d007      	beq.n	800efde <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800efce:	69fb      	ldr	r3, [r7, #28]
 800efd0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800efd2:	2b00      	cmp	r3, #0
 800efd4:	d00c      	beq.n	800eff0 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800efd6:	4b82      	ldr	r3, [pc, #520]	@ (800f1e0 <tcp_input+0x73c>)
 800efd8:	881b      	ldrh	r3, [r3, #0]
 800efda:	2b00      	cmp	r3, #0
 800efdc:	d008      	beq.n	800eff0 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800efde:	69fb      	ldr	r3, [r7, #28]
 800efe0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800efe2:	2b00      	cmp	r3, #0
 800efe4:	f040 80e3 	bne.w	800f1ae <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800efe8:	69f8      	ldr	r0, [r7, #28]
 800efea:	f003 fdff 	bl	8012bec <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800efee:	e0de      	b.n	800f1ae <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800eff0:	4a7c      	ldr	r2, [pc, #496]	@ (800f1e4 <tcp_input+0x740>)
 800eff2:	69fb      	ldr	r3, [r7, #28]
 800eff4:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800eff6:	69f8      	ldr	r0, [r7, #28]
 800eff8:	f000 fb18 	bl	800f62c <tcp_process>
 800effc:	4603      	mov	r3, r0
 800effe:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800f000:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f004:	f113 0f0d 	cmn.w	r3, #13
 800f008:	f000 80d3 	beq.w	800f1b2 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800f00c:	4b71      	ldr	r3, [pc, #452]	@ (800f1d4 <tcp_input+0x730>)
 800f00e:	781b      	ldrb	r3, [r3, #0]
 800f010:	f003 0308 	and.w	r3, r3, #8
 800f014:	2b00      	cmp	r3, #0
 800f016:	d015      	beq.n	800f044 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800f018:	69fb      	ldr	r3, [r7, #28]
 800f01a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f01e:	2b00      	cmp	r3, #0
 800f020:	d008      	beq.n	800f034 <tcp_input+0x590>
 800f022:	69fb      	ldr	r3, [r7, #28]
 800f024:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f028:	69fa      	ldr	r2, [r7, #28]
 800f02a:	6912      	ldr	r2, [r2, #16]
 800f02c:	f06f 010d 	mvn.w	r1, #13
 800f030:	4610      	mov	r0, r2
 800f032:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800f034:	69f9      	ldr	r1, [r7, #28]
 800f036:	486c      	ldr	r0, [pc, #432]	@ (800f1e8 <tcp_input+0x744>)
 800f038:	f7ff fbbc 	bl	800e7b4 <tcp_pcb_remove>
        tcp_free(pcb);
 800f03c:	69f8      	ldr	r0, [r7, #28]
 800f03e:	f7fd fec9 	bl	800cdd4 <tcp_free>
 800f042:	e0da      	b.n	800f1fa <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800f044:	2300      	movs	r3, #0
 800f046:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800f048:	4b63      	ldr	r3, [pc, #396]	@ (800f1d8 <tcp_input+0x734>)
 800f04a:	881b      	ldrh	r3, [r3, #0]
 800f04c:	2b00      	cmp	r3, #0
 800f04e:	d01d      	beq.n	800f08c <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800f050:	4b61      	ldr	r3, [pc, #388]	@ (800f1d8 <tcp_input+0x734>)
 800f052:	881b      	ldrh	r3, [r3, #0]
 800f054:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800f056:	69fb      	ldr	r3, [r7, #28]
 800f058:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f05c:	2b00      	cmp	r3, #0
 800f05e:	d00a      	beq.n	800f076 <tcp_input+0x5d2>
 800f060:	69fb      	ldr	r3, [r7, #28]
 800f062:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f066:	69fa      	ldr	r2, [r7, #28]
 800f068:	6910      	ldr	r0, [r2, #16]
 800f06a:	89fa      	ldrh	r2, [r7, #14]
 800f06c:	69f9      	ldr	r1, [r7, #28]
 800f06e:	4798      	blx	r3
 800f070:	4603      	mov	r3, r0
 800f072:	74fb      	strb	r3, [r7, #19]
 800f074:	e001      	b.n	800f07a <tcp_input+0x5d6>
 800f076:	2300      	movs	r3, #0
 800f078:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800f07a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f07e:	f113 0f0d 	cmn.w	r3, #13
 800f082:	f000 8098 	beq.w	800f1b6 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800f086:	4b54      	ldr	r3, [pc, #336]	@ (800f1d8 <tcp_input+0x734>)
 800f088:	2200      	movs	r2, #0
 800f08a:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800f08c:	69f8      	ldr	r0, [r7, #28]
 800f08e:	f000 f915 	bl	800f2bc <tcp_input_delayed_close>
 800f092:	4603      	mov	r3, r0
 800f094:	2b00      	cmp	r3, #0
 800f096:	f040 8090 	bne.w	800f1ba <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800f09a:	4b4d      	ldr	r3, [pc, #308]	@ (800f1d0 <tcp_input+0x72c>)
 800f09c:	681b      	ldr	r3, [r3, #0]
 800f09e:	2b00      	cmp	r3, #0
 800f0a0:	d041      	beq.n	800f126 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800f0a2:	69fb      	ldr	r3, [r7, #28]
 800f0a4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f0a6:	2b00      	cmp	r3, #0
 800f0a8:	d006      	beq.n	800f0b8 <tcp_input+0x614>
 800f0aa:	4b50      	ldr	r3, [pc, #320]	@ (800f1ec <tcp_input+0x748>)
 800f0ac:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 800f0b0:	494f      	ldr	r1, [pc, #316]	@ (800f1f0 <tcp_input+0x74c>)
 800f0b2:	4850      	ldr	r0, [pc, #320]	@ (800f1f4 <tcp_input+0x750>)
 800f0b4:	f007 f92c 	bl	8016310 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800f0b8:	69fb      	ldr	r3, [r7, #28]
 800f0ba:	8b5b      	ldrh	r3, [r3, #26]
 800f0bc:	f003 0310 	and.w	r3, r3, #16
 800f0c0:	2b00      	cmp	r3, #0
 800f0c2:	d008      	beq.n	800f0d6 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800f0c4:	4b42      	ldr	r3, [pc, #264]	@ (800f1d0 <tcp_input+0x72c>)
 800f0c6:	681b      	ldr	r3, [r3, #0]
 800f0c8:	4618      	mov	r0, r3
 800f0ca:	f7fd fbb5 	bl	800c838 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800f0ce:	69f8      	ldr	r0, [r7, #28]
 800f0d0:	f7fe f9c4 	bl	800d45c <tcp_abort>
            goto aborted;
 800f0d4:	e091      	b.n	800f1fa <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800f0d6:	69fb      	ldr	r3, [r7, #28]
 800f0d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f0dc:	2b00      	cmp	r3, #0
 800f0de:	d00c      	beq.n	800f0fa <tcp_input+0x656>
 800f0e0:	69fb      	ldr	r3, [r7, #28]
 800f0e2:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800f0e6:	69fb      	ldr	r3, [r7, #28]
 800f0e8:	6918      	ldr	r0, [r3, #16]
 800f0ea:	4b39      	ldr	r3, [pc, #228]	@ (800f1d0 <tcp_input+0x72c>)
 800f0ec:	681a      	ldr	r2, [r3, #0]
 800f0ee:	2300      	movs	r3, #0
 800f0f0:	69f9      	ldr	r1, [r7, #28]
 800f0f2:	47a0      	blx	r4
 800f0f4:	4603      	mov	r3, r0
 800f0f6:	74fb      	strb	r3, [r7, #19]
 800f0f8:	e008      	b.n	800f10c <tcp_input+0x668>
 800f0fa:	4b35      	ldr	r3, [pc, #212]	@ (800f1d0 <tcp_input+0x72c>)
 800f0fc:	681a      	ldr	r2, [r3, #0]
 800f0fe:	2300      	movs	r3, #0
 800f100:	69f9      	ldr	r1, [r7, #28]
 800f102:	2000      	movs	r0, #0
 800f104:	f7ff f888 	bl	800e218 <tcp_recv_null>
 800f108:	4603      	mov	r3, r0
 800f10a:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800f10c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f110:	f113 0f0d 	cmn.w	r3, #13
 800f114:	d053      	beq.n	800f1be <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800f116:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f11a:	2b00      	cmp	r3, #0
 800f11c:	d003      	beq.n	800f126 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800f11e:	4b2c      	ldr	r3, [pc, #176]	@ (800f1d0 <tcp_input+0x72c>)
 800f120:	681a      	ldr	r2, [r3, #0]
 800f122:	69fb      	ldr	r3, [r7, #28]
 800f124:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800f126:	4b2b      	ldr	r3, [pc, #172]	@ (800f1d4 <tcp_input+0x730>)
 800f128:	781b      	ldrb	r3, [r3, #0]
 800f12a:	f003 0320 	and.w	r3, r3, #32
 800f12e:	2b00      	cmp	r3, #0
 800f130:	d030      	beq.n	800f194 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800f132:	69fb      	ldr	r3, [r7, #28]
 800f134:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f136:	2b00      	cmp	r3, #0
 800f138:	d009      	beq.n	800f14e <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800f13a:	69fb      	ldr	r3, [r7, #28]
 800f13c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f13e:	7b5a      	ldrb	r2, [r3, #13]
 800f140:	69fb      	ldr	r3, [r7, #28]
 800f142:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f144:	f042 0220 	orr.w	r2, r2, #32
 800f148:	b2d2      	uxtb	r2, r2
 800f14a:	735a      	strb	r2, [r3, #13]
 800f14c:	e022      	b.n	800f194 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800f14e:	69fb      	ldr	r3, [r7, #28]
 800f150:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f152:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800f156:	d005      	beq.n	800f164 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800f158:	69fb      	ldr	r3, [r7, #28]
 800f15a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f15c:	3301      	adds	r3, #1
 800f15e:	b29a      	uxth	r2, r3
 800f160:	69fb      	ldr	r3, [r7, #28]
 800f162:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800f164:	69fb      	ldr	r3, [r7, #28]
 800f166:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f16a:	2b00      	cmp	r3, #0
 800f16c:	d00b      	beq.n	800f186 <tcp_input+0x6e2>
 800f16e:	69fb      	ldr	r3, [r7, #28]
 800f170:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800f174:	69fb      	ldr	r3, [r7, #28]
 800f176:	6918      	ldr	r0, [r3, #16]
 800f178:	2300      	movs	r3, #0
 800f17a:	2200      	movs	r2, #0
 800f17c:	69f9      	ldr	r1, [r7, #28]
 800f17e:	47a0      	blx	r4
 800f180:	4603      	mov	r3, r0
 800f182:	74fb      	strb	r3, [r7, #19]
 800f184:	e001      	b.n	800f18a <tcp_input+0x6e6>
 800f186:	2300      	movs	r3, #0
 800f188:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800f18a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f18e:	f113 0f0d 	cmn.w	r3, #13
 800f192:	d016      	beq.n	800f1c2 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800f194:	4b13      	ldr	r3, [pc, #76]	@ (800f1e4 <tcp_input+0x740>)
 800f196:	2200      	movs	r2, #0
 800f198:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800f19a:	69f8      	ldr	r0, [r7, #28]
 800f19c:	f000 f88e 	bl	800f2bc <tcp_input_delayed_close>
 800f1a0:	4603      	mov	r3, r0
 800f1a2:	2b00      	cmp	r3, #0
 800f1a4:	d128      	bne.n	800f1f8 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800f1a6:	69f8      	ldr	r0, [r7, #28]
 800f1a8:	f002 ff1a 	bl	8011fe0 <tcp_output>
 800f1ac:	e025      	b.n	800f1fa <tcp_input+0x756>
        goto aborted;
 800f1ae:	bf00      	nop
 800f1b0:	e023      	b.n	800f1fa <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800f1b2:	bf00      	nop
 800f1b4:	e021      	b.n	800f1fa <tcp_input+0x756>
              goto aborted;
 800f1b6:	bf00      	nop
 800f1b8:	e01f      	b.n	800f1fa <tcp_input+0x756>
          goto aborted;
 800f1ba:	bf00      	nop
 800f1bc:	e01d      	b.n	800f1fa <tcp_input+0x756>
            goto aborted;
 800f1be:	bf00      	nop
 800f1c0:	e01b      	b.n	800f1fa <tcp_input+0x756>
              goto aborted;
 800f1c2:	bf00      	nop
 800f1c4:	e019      	b.n	800f1fa <tcp_input+0x756>
 800f1c6:	bf00      	nop
 800f1c8:	2000eb5c 	.word	0x2000eb5c
 800f1cc:	2000eb6c 	.word	0x2000eb6c
 800f1d0:	2000eb8c 	.word	0x2000eb8c
 800f1d4:	2000eb89 	.word	0x2000eb89
 800f1d8:	2000eb84 	.word	0x2000eb84
 800f1dc:	2000eb88 	.word	0x2000eb88
 800f1e0:	2000eb86 	.word	0x2000eb86
 800f1e4:	2000eb90 	.word	0x2000eb90
 800f1e8:	2000eb50 	.word	0x2000eb50
 800f1ec:	080195c0 	.word	0x080195c0
 800f1f0:	08019774 	.word	0x08019774
 800f1f4:	0801960c 	.word	0x0801960c
          goto aborted;
 800f1f8:	bf00      	nop
    tcp_input_pcb = NULL;
 800f1fa:	4b27      	ldr	r3, [pc, #156]	@ (800f298 <tcp_input+0x7f4>)
 800f1fc:	2200      	movs	r2, #0
 800f1fe:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800f200:	4b26      	ldr	r3, [pc, #152]	@ (800f29c <tcp_input+0x7f8>)
 800f202:	2200      	movs	r2, #0
 800f204:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800f206:	4b26      	ldr	r3, [pc, #152]	@ (800f2a0 <tcp_input+0x7fc>)
 800f208:	685b      	ldr	r3, [r3, #4]
 800f20a:	2b00      	cmp	r3, #0
 800f20c:	d03f      	beq.n	800f28e <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800f20e:	4b24      	ldr	r3, [pc, #144]	@ (800f2a0 <tcp_input+0x7fc>)
 800f210:	685b      	ldr	r3, [r3, #4]
 800f212:	4618      	mov	r0, r3
 800f214:	f7fd fb10 	bl	800c838 <pbuf_free>
      inseg.p = NULL;
 800f218:	4b21      	ldr	r3, [pc, #132]	@ (800f2a0 <tcp_input+0x7fc>)
 800f21a:	2200      	movs	r2, #0
 800f21c:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800f21e:	e036      	b.n	800f28e <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800f220:	4b20      	ldr	r3, [pc, #128]	@ (800f2a4 <tcp_input+0x800>)
 800f222:	681b      	ldr	r3, [r3, #0]
 800f224:	899b      	ldrh	r3, [r3, #12]
 800f226:	b29b      	uxth	r3, r3
 800f228:	4618      	mov	r0, r3
 800f22a:	f7fb ff13 	bl	800b054 <lwip_htons>
 800f22e:	4603      	mov	r3, r0
 800f230:	b2db      	uxtb	r3, r3
 800f232:	f003 0304 	and.w	r3, r3, #4
 800f236:	2b00      	cmp	r3, #0
 800f238:	d118      	bne.n	800f26c <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f23a:	4b1b      	ldr	r3, [pc, #108]	@ (800f2a8 <tcp_input+0x804>)
 800f23c:	6819      	ldr	r1, [r3, #0]
 800f23e:	4b1b      	ldr	r3, [pc, #108]	@ (800f2ac <tcp_input+0x808>)
 800f240:	881b      	ldrh	r3, [r3, #0]
 800f242:	461a      	mov	r2, r3
 800f244:	4b1a      	ldr	r3, [pc, #104]	@ (800f2b0 <tcp_input+0x80c>)
 800f246:	681b      	ldr	r3, [r3, #0]
 800f248:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f24a:	4b16      	ldr	r3, [pc, #88]	@ (800f2a4 <tcp_input+0x800>)
 800f24c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f24e:	885b      	ldrh	r3, [r3, #2]
 800f250:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f252:	4a14      	ldr	r2, [pc, #80]	@ (800f2a4 <tcp_input+0x800>)
 800f254:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f256:	8812      	ldrh	r2, [r2, #0]
 800f258:	b292      	uxth	r2, r2
 800f25a:	9202      	str	r2, [sp, #8]
 800f25c:	9301      	str	r3, [sp, #4]
 800f25e:	4b15      	ldr	r3, [pc, #84]	@ (800f2b4 <tcp_input+0x810>)
 800f260:	9300      	str	r3, [sp, #0]
 800f262:	4b15      	ldr	r3, [pc, #84]	@ (800f2b8 <tcp_input+0x814>)
 800f264:	4602      	mov	r2, r0
 800f266:	2000      	movs	r0, #0
 800f268:	f003 fc6e 	bl	8012b48 <tcp_rst>
    pbuf_free(p);
 800f26c:	6878      	ldr	r0, [r7, #4]
 800f26e:	f7fd fae3 	bl	800c838 <pbuf_free>
  return;
 800f272:	e00c      	b.n	800f28e <tcp_input+0x7ea>
    goto dropped;
 800f274:	bf00      	nop
 800f276:	e006      	b.n	800f286 <tcp_input+0x7e2>
    goto dropped;
 800f278:	bf00      	nop
 800f27a:	e004      	b.n	800f286 <tcp_input+0x7e2>
    goto dropped;
 800f27c:	bf00      	nop
 800f27e:	e002      	b.n	800f286 <tcp_input+0x7e2>
      goto dropped;
 800f280:	bf00      	nop
 800f282:	e000      	b.n	800f286 <tcp_input+0x7e2>
      goto dropped;
 800f284:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800f286:	6878      	ldr	r0, [r7, #4]
 800f288:	f7fd fad6 	bl	800c838 <pbuf_free>
 800f28c:	e000      	b.n	800f290 <tcp_input+0x7ec>
  return;
 800f28e:	bf00      	nop
}
 800f290:	3724      	adds	r7, #36	@ 0x24
 800f292:	46bd      	mov	sp, r7
 800f294:	bd90      	pop	{r4, r7, pc}
 800f296:	bf00      	nop
 800f298:	2000eb90 	.word	0x2000eb90
 800f29c:	2000eb8c 	.word	0x2000eb8c
 800f2a0:	2000eb5c 	.word	0x2000eb5c
 800f2a4:	2000eb6c 	.word	0x2000eb6c
 800f2a8:	2000eb80 	.word	0x2000eb80
 800f2ac:	2000eb86 	.word	0x2000eb86
 800f2b0:	2000eb7c 	.word	0x2000eb7c
 800f2b4:	20009208 	.word	0x20009208
 800f2b8:	2000920c 	.word	0x2000920c

0800f2bc <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800f2bc:	b580      	push	{r7, lr}
 800f2be:	b082      	sub	sp, #8
 800f2c0:	af00      	add	r7, sp, #0
 800f2c2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	2b00      	cmp	r3, #0
 800f2c8:	d106      	bne.n	800f2d8 <tcp_input_delayed_close+0x1c>
 800f2ca:	4b17      	ldr	r3, [pc, #92]	@ (800f328 <tcp_input_delayed_close+0x6c>)
 800f2cc:	f240 225a 	movw	r2, #602	@ 0x25a
 800f2d0:	4916      	ldr	r1, [pc, #88]	@ (800f32c <tcp_input_delayed_close+0x70>)
 800f2d2:	4817      	ldr	r0, [pc, #92]	@ (800f330 <tcp_input_delayed_close+0x74>)
 800f2d4:	f007 f81c 	bl	8016310 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800f2d8:	4b16      	ldr	r3, [pc, #88]	@ (800f334 <tcp_input_delayed_close+0x78>)
 800f2da:	781b      	ldrb	r3, [r3, #0]
 800f2dc:	f003 0310 	and.w	r3, r3, #16
 800f2e0:	2b00      	cmp	r3, #0
 800f2e2:	d01c      	beq.n	800f31e <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	8b5b      	ldrh	r3, [r3, #26]
 800f2e8:	f003 0310 	and.w	r3, r3, #16
 800f2ec:	2b00      	cmp	r3, #0
 800f2ee:	d10d      	bne.n	800f30c <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f2f6:	2b00      	cmp	r3, #0
 800f2f8:	d008      	beq.n	800f30c <tcp_input_delayed_close+0x50>
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f300:	687a      	ldr	r2, [r7, #4]
 800f302:	6912      	ldr	r2, [r2, #16]
 800f304:	f06f 010e 	mvn.w	r1, #14
 800f308:	4610      	mov	r0, r2
 800f30a:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800f30c:	6879      	ldr	r1, [r7, #4]
 800f30e:	480a      	ldr	r0, [pc, #40]	@ (800f338 <tcp_input_delayed_close+0x7c>)
 800f310:	f7ff fa50 	bl	800e7b4 <tcp_pcb_remove>
    tcp_free(pcb);
 800f314:	6878      	ldr	r0, [r7, #4]
 800f316:	f7fd fd5d 	bl	800cdd4 <tcp_free>
    return 1;
 800f31a:	2301      	movs	r3, #1
 800f31c:	e000      	b.n	800f320 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800f31e:	2300      	movs	r3, #0
}
 800f320:	4618      	mov	r0, r3
 800f322:	3708      	adds	r7, #8
 800f324:	46bd      	mov	sp, r7
 800f326:	bd80      	pop	{r7, pc}
 800f328:	080195c0 	.word	0x080195c0
 800f32c:	08019790 	.word	0x08019790
 800f330:	0801960c 	.word	0x0801960c
 800f334:	2000eb89 	.word	0x2000eb89
 800f338:	2000eb50 	.word	0x2000eb50

0800f33c <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800f33c:	b590      	push	{r4, r7, lr}
 800f33e:	b08b      	sub	sp, #44	@ 0x2c
 800f340:	af04      	add	r7, sp, #16
 800f342:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800f344:	4b6f      	ldr	r3, [pc, #444]	@ (800f504 <tcp_listen_input+0x1c8>)
 800f346:	781b      	ldrb	r3, [r3, #0]
 800f348:	f003 0304 	and.w	r3, r3, #4
 800f34c:	2b00      	cmp	r3, #0
 800f34e:	f040 80d2 	bne.w	800f4f6 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	2b00      	cmp	r3, #0
 800f356:	d106      	bne.n	800f366 <tcp_listen_input+0x2a>
 800f358:	4b6b      	ldr	r3, [pc, #428]	@ (800f508 <tcp_listen_input+0x1cc>)
 800f35a:	f240 2281 	movw	r2, #641	@ 0x281
 800f35e:	496b      	ldr	r1, [pc, #428]	@ (800f50c <tcp_listen_input+0x1d0>)
 800f360:	486b      	ldr	r0, [pc, #428]	@ (800f510 <tcp_listen_input+0x1d4>)
 800f362:	f006 ffd5 	bl	8016310 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800f366:	4b67      	ldr	r3, [pc, #412]	@ (800f504 <tcp_listen_input+0x1c8>)
 800f368:	781b      	ldrb	r3, [r3, #0]
 800f36a:	f003 0310 	and.w	r3, r3, #16
 800f36e:	2b00      	cmp	r3, #0
 800f370:	d019      	beq.n	800f3a6 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f372:	4b68      	ldr	r3, [pc, #416]	@ (800f514 <tcp_listen_input+0x1d8>)
 800f374:	6819      	ldr	r1, [r3, #0]
 800f376:	4b68      	ldr	r3, [pc, #416]	@ (800f518 <tcp_listen_input+0x1dc>)
 800f378:	881b      	ldrh	r3, [r3, #0]
 800f37a:	461a      	mov	r2, r3
 800f37c:	4b67      	ldr	r3, [pc, #412]	@ (800f51c <tcp_listen_input+0x1e0>)
 800f37e:	681b      	ldr	r3, [r3, #0]
 800f380:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f382:	4b67      	ldr	r3, [pc, #412]	@ (800f520 <tcp_listen_input+0x1e4>)
 800f384:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f386:	885b      	ldrh	r3, [r3, #2]
 800f388:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f38a:	4a65      	ldr	r2, [pc, #404]	@ (800f520 <tcp_listen_input+0x1e4>)
 800f38c:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f38e:	8812      	ldrh	r2, [r2, #0]
 800f390:	b292      	uxth	r2, r2
 800f392:	9202      	str	r2, [sp, #8]
 800f394:	9301      	str	r3, [sp, #4]
 800f396:	4b63      	ldr	r3, [pc, #396]	@ (800f524 <tcp_listen_input+0x1e8>)
 800f398:	9300      	str	r3, [sp, #0]
 800f39a:	4b63      	ldr	r3, [pc, #396]	@ (800f528 <tcp_listen_input+0x1ec>)
 800f39c:	4602      	mov	r2, r0
 800f39e:	6878      	ldr	r0, [r7, #4]
 800f3a0:	f003 fbd2 	bl	8012b48 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800f3a4:	e0a9      	b.n	800f4fa <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800f3a6:	4b57      	ldr	r3, [pc, #348]	@ (800f504 <tcp_listen_input+0x1c8>)
 800f3a8:	781b      	ldrb	r3, [r3, #0]
 800f3aa:	f003 0302 	and.w	r3, r3, #2
 800f3ae:	2b00      	cmp	r3, #0
 800f3b0:	f000 80a3 	beq.w	800f4fa <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	7d5b      	ldrb	r3, [r3, #21]
 800f3b8:	4618      	mov	r0, r3
 800f3ba:	f7ff f851 	bl	800e460 <tcp_alloc>
 800f3be:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800f3c0:	697b      	ldr	r3, [r7, #20]
 800f3c2:	2b00      	cmp	r3, #0
 800f3c4:	d111      	bne.n	800f3ea <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	699b      	ldr	r3, [r3, #24]
 800f3ca:	2b00      	cmp	r3, #0
 800f3cc:	d00a      	beq.n	800f3e4 <tcp_listen_input+0xa8>
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	699b      	ldr	r3, [r3, #24]
 800f3d2:	687a      	ldr	r2, [r7, #4]
 800f3d4:	6910      	ldr	r0, [r2, #16]
 800f3d6:	f04f 32ff 	mov.w	r2, #4294967295
 800f3da:	2100      	movs	r1, #0
 800f3dc:	4798      	blx	r3
 800f3de:	4603      	mov	r3, r0
 800f3e0:	73bb      	strb	r3, [r7, #14]
      return;
 800f3e2:	e08b      	b.n	800f4fc <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800f3e4:	23f0      	movs	r3, #240	@ 0xf0
 800f3e6:	73bb      	strb	r3, [r7, #14]
      return;
 800f3e8:	e088      	b.n	800f4fc <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800f3ea:	4b50      	ldr	r3, [pc, #320]	@ (800f52c <tcp_listen_input+0x1f0>)
 800f3ec:	695a      	ldr	r2, [r3, #20]
 800f3ee:	697b      	ldr	r3, [r7, #20]
 800f3f0:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800f3f2:	4b4e      	ldr	r3, [pc, #312]	@ (800f52c <tcp_listen_input+0x1f0>)
 800f3f4:	691a      	ldr	r2, [r3, #16]
 800f3f6:	697b      	ldr	r3, [r7, #20]
 800f3f8:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	8ada      	ldrh	r2, [r3, #22]
 800f3fe:	697b      	ldr	r3, [r7, #20]
 800f400:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800f402:	4b47      	ldr	r3, [pc, #284]	@ (800f520 <tcp_listen_input+0x1e4>)
 800f404:	681b      	ldr	r3, [r3, #0]
 800f406:	881b      	ldrh	r3, [r3, #0]
 800f408:	b29a      	uxth	r2, r3
 800f40a:	697b      	ldr	r3, [r7, #20]
 800f40c:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800f40e:	697b      	ldr	r3, [r7, #20]
 800f410:	2203      	movs	r2, #3
 800f412:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800f414:	4b41      	ldr	r3, [pc, #260]	@ (800f51c <tcp_listen_input+0x1e0>)
 800f416:	681b      	ldr	r3, [r3, #0]
 800f418:	1c5a      	adds	r2, r3, #1
 800f41a:	697b      	ldr	r3, [r7, #20]
 800f41c:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800f41e:	697b      	ldr	r3, [r7, #20]
 800f420:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f422:	697b      	ldr	r3, [r7, #20]
 800f424:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 800f426:	6978      	ldr	r0, [r7, #20]
 800f428:	f7ff fa58 	bl	800e8dc <tcp_next_iss>
 800f42c:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800f42e:	697b      	ldr	r3, [r7, #20]
 800f430:	693a      	ldr	r2, [r7, #16]
 800f432:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 800f434:	697b      	ldr	r3, [r7, #20]
 800f436:	693a      	ldr	r2, [r7, #16]
 800f438:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 800f43a:	697b      	ldr	r3, [r7, #20]
 800f43c:	693a      	ldr	r2, [r7, #16]
 800f43e:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 800f440:	697b      	ldr	r3, [r7, #20]
 800f442:	693a      	ldr	r2, [r7, #16]
 800f444:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800f446:	4b35      	ldr	r3, [pc, #212]	@ (800f51c <tcp_listen_input+0x1e0>)
 800f448:	681b      	ldr	r3, [r3, #0]
 800f44a:	1e5a      	subs	r2, r3, #1
 800f44c:	697b      	ldr	r3, [r7, #20]
 800f44e:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	691a      	ldr	r2, [r3, #16]
 800f454:	697b      	ldr	r3, [r7, #20]
 800f456:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800f458:	697b      	ldr	r3, [r7, #20]
 800f45a:	687a      	ldr	r2, [r7, #4]
 800f45c:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	7a5b      	ldrb	r3, [r3, #9]
 800f462:	f003 030c 	and.w	r3, r3, #12
 800f466:	b2da      	uxtb	r2, r3
 800f468:	697b      	ldr	r3, [r7, #20]
 800f46a:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	7a1a      	ldrb	r2, [r3, #8]
 800f470:	697b      	ldr	r3, [r7, #20]
 800f472:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800f474:	4b2e      	ldr	r3, [pc, #184]	@ (800f530 <tcp_listen_input+0x1f4>)
 800f476:	681a      	ldr	r2, [r3, #0]
 800f478:	697b      	ldr	r3, [r7, #20]
 800f47a:	60da      	str	r2, [r3, #12]
 800f47c:	4a2c      	ldr	r2, [pc, #176]	@ (800f530 <tcp_listen_input+0x1f4>)
 800f47e:	697b      	ldr	r3, [r7, #20]
 800f480:	6013      	str	r3, [r2, #0]
 800f482:	f003 fd23 	bl	8012ecc <tcp_timer_needed>
 800f486:	4b2b      	ldr	r3, [pc, #172]	@ (800f534 <tcp_listen_input+0x1f8>)
 800f488:	2201      	movs	r2, #1
 800f48a:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800f48c:	6978      	ldr	r0, [r7, #20]
 800f48e:	f001 fd8b 	bl	8010fa8 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800f492:	4b23      	ldr	r3, [pc, #140]	@ (800f520 <tcp_listen_input+0x1e4>)
 800f494:	681b      	ldr	r3, [r3, #0]
 800f496:	89db      	ldrh	r3, [r3, #14]
 800f498:	b29a      	uxth	r2, r3
 800f49a:	697b      	ldr	r3, [r7, #20]
 800f49c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800f4a0:	697b      	ldr	r3, [r7, #20]
 800f4a2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800f4a6:	697b      	ldr	r3, [r7, #20]
 800f4a8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800f4ac:	697b      	ldr	r3, [r7, #20]
 800f4ae:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 800f4b0:	697b      	ldr	r3, [r7, #20]
 800f4b2:	3304      	adds	r3, #4
 800f4b4:	4618      	mov	r0, r3
 800f4b6:	f005 fa5d 	bl	8014974 <ip4_route>
 800f4ba:	4601      	mov	r1, r0
 800f4bc:	697b      	ldr	r3, [r7, #20]
 800f4be:	3304      	adds	r3, #4
 800f4c0:	461a      	mov	r2, r3
 800f4c2:	4620      	mov	r0, r4
 800f4c4:	f7ff fa30 	bl	800e928 <tcp_eff_send_mss_netif>
 800f4c8:	4603      	mov	r3, r0
 800f4ca:	461a      	mov	r2, r3
 800f4cc:	697b      	ldr	r3, [r7, #20]
 800f4ce:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800f4d0:	2112      	movs	r1, #18
 800f4d2:	6978      	ldr	r0, [r7, #20]
 800f4d4:	f002 fc96 	bl	8011e04 <tcp_enqueue_flags>
 800f4d8:	4603      	mov	r3, r0
 800f4da:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800f4dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f4e0:	2b00      	cmp	r3, #0
 800f4e2:	d004      	beq.n	800f4ee <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800f4e4:	2100      	movs	r1, #0
 800f4e6:	6978      	ldr	r0, [r7, #20]
 800f4e8:	f7fd fefa 	bl	800d2e0 <tcp_abandon>
      return;
 800f4ec:	e006      	b.n	800f4fc <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800f4ee:	6978      	ldr	r0, [r7, #20]
 800f4f0:	f002 fd76 	bl	8011fe0 <tcp_output>
  return;
 800f4f4:	e001      	b.n	800f4fa <tcp_listen_input+0x1be>
    return;
 800f4f6:	bf00      	nop
 800f4f8:	e000      	b.n	800f4fc <tcp_listen_input+0x1c0>
  return;
 800f4fa:	bf00      	nop
}
 800f4fc:	371c      	adds	r7, #28
 800f4fe:	46bd      	mov	sp, r7
 800f500:	bd90      	pop	{r4, r7, pc}
 800f502:	bf00      	nop
 800f504:	2000eb88 	.word	0x2000eb88
 800f508:	080195c0 	.word	0x080195c0
 800f50c:	080197b8 	.word	0x080197b8
 800f510:	0801960c 	.word	0x0801960c
 800f514:	2000eb80 	.word	0x2000eb80
 800f518:	2000eb86 	.word	0x2000eb86
 800f51c:	2000eb7c 	.word	0x2000eb7c
 800f520:	2000eb6c 	.word	0x2000eb6c
 800f524:	20009208 	.word	0x20009208
 800f528:	2000920c 	.word	0x2000920c
 800f52c:	200091f8 	.word	0x200091f8
 800f530:	2000eb50 	.word	0x2000eb50
 800f534:	2000eb58 	.word	0x2000eb58

0800f538 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800f538:	b580      	push	{r7, lr}
 800f53a:	b086      	sub	sp, #24
 800f53c:	af04      	add	r7, sp, #16
 800f53e:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800f540:	4b2f      	ldr	r3, [pc, #188]	@ (800f600 <tcp_timewait_input+0xc8>)
 800f542:	781b      	ldrb	r3, [r3, #0]
 800f544:	f003 0304 	and.w	r3, r3, #4
 800f548:	2b00      	cmp	r3, #0
 800f54a:	d153      	bne.n	800f5f4 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	2b00      	cmp	r3, #0
 800f550:	d106      	bne.n	800f560 <tcp_timewait_input+0x28>
 800f552:	4b2c      	ldr	r3, [pc, #176]	@ (800f604 <tcp_timewait_input+0xcc>)
 800f554:	f240 22ee 	movw	r2, #750	@ 0x2ee
 800f558:	492b      	ldr	r1, [pc, #172]	@ (800f608 <tcp_timewait_input+0xd0>)
 800f55a:	482c      	ldr	r0, [pc, #176]	@ (800f60c <tcp_timewait_input+0xd4>)
 800f55c:	f006 fed8 	bl	8016310 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800f560:	4b27      	ldr	r3, [pc, #156]	@ (800f600 <tcp_timewait_input+0xc8>)
 800f562:	781b      	ldrb	r3, [r3, #0]
 800f564:	f003 0302 	and.w	r3, r3, #2
 800f568:	2b00      	cmp	r3, #0
 800f56a:	d02a      	beq.n	800f5c2 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800f56c:	4b28      	ldr	r3, [pc, #160]	@ (800f610 <tcp_timewait_input+0xd8>)
 800f56e:	681a      	ldr	r2, [r3, #0]
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f574:	1ad3      	subs	r3, r2, r3
 800f576:	2b00      	cmp	r3, #0
 800f578:	db2d      	blt.n	800f5d6 <tcp_timewait_input+0x9e>
 800f57a:	4b25      	ldr	r3, [pc, #148]	@ (800f610 <tcp_timewait_input+0xd8>)
 800f57c:	681a      	ldr	r2, [r3, #0]
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f582:	6879      	ldr	r1, [r7, #4]
 800f584:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800f586:	440b      	add	r3, r1
 800f588:	1ad3      	subs	r3, r2, r3
 800f58a:	2b00      	cmp	r3, #0
 800f58c:	dc23      	bgt.n	800f5d6 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f58e:	4b21      	ldr	r3, [pc, #132]	@ (800f614 <tcp_timewait_input+0xdc>)
 800f590:	6819      	ldr	r1, [r3, #0]
 800f592:	4b21      	ldr	r3, [pc, #132]	@ (800f618 <tcp_timewait_input+0xe0>)
 800f594:	881b      	ldrh	r3, [r3, #0]
 800f596:	461a      	mov	r2, r3
 800f598:	4b1d      	ldr	r3, [pc, #116]	@ (800f610 <tcp_timewait_input+0xd8>)
 800f59a:	681b      	ldr	r3, [r3, #0]
 800f59c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f59e:	4b1f      	ldr	r3, [pc, #124]	@ (800f61c <tcp_timewait_input+0xe4>)
 800f5a0:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f5a2:	885b      	ldrh	r3, [r3, #2]
 800f5a4:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f5a6:	4a1d      	ldr	r2, [pc, #116]	@ (800f61c <tcp_timewait_input+0xe4>)
 800f5a8:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f5aa:	8812      	ldrh	r2, [r2, #0]
 800f5ac:	b292      	uxth	r2, r2
 800f5ae:	9202      	str	r2, [sp, #8]
 800f5b0:	9301      	str	r3, [sp, #4]
 800f5b2:	4b1b      	ldr	r3, [pc, #108]	@ (800f620 <tcp_timewait_input+0xe8>)
 800f5b4:	9300      	str	r3, [sp, #0]
 800f5b6:	4b1b      	ldr	r3, [pc, #108]	@ (800f624 <tcp_timewait_input+0xec>)
 800f5b8:	4602      	mov	r2, r0
 800f5ba:	6878      	ldr	r0, [r7, #4]
 800f5bc:	f003 fac4 	bl	8012b48 <tcp_rst>
      return;
 800f5c0:	e01b      	b.n	800f5fa <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800f5c2:	4b0f      	ldr	r3, [pc, #60]	@ (800f600 <tcp_timewait_input+0xc8>)
 800f5c4:	781b      	ldrb	r3, [r3, #0]
 800f5c6:	f003 0301 	and.w	r3, r3, #1
 800f5ca:	2b00      	cmp	r3, #0
 800f5cc:	d003      	beq.n	800f5d6 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800f5ce:	4b16      	ldr	r3, [pc, #88]	@ (800f628 <tcp_timewait_input+0xf0>)
 800f5d0:	681a      	ldr	r2, [r3, #0]
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800f5d6:	4b10      	ldr	r3, [pc, #64]	@ (800f618 <tcp_timewait_input+0xe0>)
 800f5d8:	881b      	ldrh	r3, [r3, #0]
 800f5da:	2b00      	cmp	r3, #0
 800f5dc:	d00c      	beq.n	800f5f8 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	8b5b      	ldrh	r3, [r3, #26]
 800f5e2:	f043 0302 	orr.w	r3, r3, #2
 800f5e6:	b29a      	uxth	r2, r3
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800f5ec:	6878      	ldr	r0, [r7, #4]
 800f5ee:	f002 fcf7 	bl	8011fe0 <tcp_output>
  }
  return;
 800f5f2:	e001      	b.n	800f5f8 <tcp_timewait_input+0xc0>
    return;
 800f5f4:	bf00      	nop
 800f5f6:	e000      	b.n	800f5fa <tcp_timewait_input+0xc2>
  return;
 800f5f8:	bf00      	nop
}
 800f5fa:	3708      	adds	r7, #8
 800f5fc:	46bd      	mov	sp, r7
 800f5fe:	bd80      	pop	{r7, pc}
 800f600:	2000eb88 	.word	0x2000eb88
 800f604:	080195c0 	.word	0x080195c0
 800f608:	080197d8 	.word	0x080197d8
 800f60c:	0801960c 	.word	0x0801960c
 800f610:	2000eb7c 	.word	0x2000eb7c
 800f614:	2000eb80 	.word	0x2000eb80
 800f618:	2000eb86 	.word	0x2000eb86
 800f61c:	2000eb6c 	.word	0x2000eb6c
 800f620:	20009208 	.word	0x20009208
 800f624:	2000920c 	.word	0x2000920c
 800f628:	2000eb44 	.word	0x2000eb44

0800f62c <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800f62c:	b590      	push	{r4, r7, lr}
 800f62e:	b08d      	sub	sp, #52	@ 0x34
 800f630:	af04      	add	r7, sp, #16
 800f632:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800f634:	2300      	movs	r3, #0
 800f636:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800f638:	2300      	movs	r3, #0
 800f63a:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	2b00      	cmp	r3, #0
 800f640:	d106      	bne.n	800f650 <tcp_process+0x24>
 800f642:	4b9d      	ldr	r3, [pc, #628]	@ (800f8b8 <tcp_process+0x28c>)
 800f644:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 800f648:	499c      	ldr	r1, [pc, #624]	@ (800f8bc <tcp_process+0x290>)
 800f64a:	489d      	ldr	r0, [pc, #628]	@ (800f8c0 <tcp_process+0x294>)
 800f64c:	f006 fe60 	bl	8016310 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800f650:	4b9c      	ldr	r3, [pc, #624]	@ (800f8c4 <tcp_process+0x298>)
 800f652:	781b      	ldrb	r3, [r3, #0]
 800f654:	f003 0304 	and.w	r3, r3, #4
 800f658:	2b00      	cmp	r3, #0
 800f65a:	d04e      	beq.n	800f6fa <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	7d1b      	ldrb	r3, [r3, #20]
 800f660:	2b02      	cmp	r3, #2
 800f662:	d108      	bne.n	800f676 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f668:	4b97      	ldr	r3, [pc, #604]	@ (800f8c8 <tcp_process+0x29c>)
 800f66a:	681b      	ldr	r3, [r3, #0]
 800f66c:	429a      	cmp	r2, r3
 800f66e:	d123      	bne.n	800f6b8 <tcp_process+0x8c>
        acceptable = 1;
 800f670:	2301      	movs	r3, #1
 800f672:	76fb      	strb	r3, [r7, #27]
 800f674:	e020      	b.n	800f6b8 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f67a:	4b94      	ldr	r3, [pc, #592]	@ (800f8cc <tcp_process+0x2a0>)
 800f67c:	681b      	ldr	r3, [r3, #0]
 800f67e:	429a      	cmp	r2, r3
 800f680:	d102      	bne.n	800f688 <tcp_process+0x5c>
        acceptable = 1;
 800f682:	2301      	movs	r3, #1
 800f684:	76fb      	strb	r3, [r7, #27]
 800f686:	e017      	b.n	800f6b8 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800f688:	4b90      	ldr	r3, [pc, #576]	@ (800f8cc <tcp_process+0x2a0>)
 800f68a:	681a      	ldr	r2, [r3, #0]
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f690:	1ad3      	subs	r3, r2, r3
 800f692:	2b00      	cmp	r3, #0
 800f694:	db10      	blt.n	800f6b8 <tcp_process+0x8c>
 800f696:	4b8d      	ldr	r3, [pc, #564]	@ (800f8cc <tcp_process+0x2a0>)
 800f698:	681a      	ldr	r2, [r3, #0]
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f69e:	6879      	ldr	r1, [r7, #4]
 800f6a0:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800f6a2:	440b      	add	r3, r1
 800f6a4:	1ad3      	subs	r3, r2, r3
 800f6a6:	2b00      	cmp	r3, #0
 800f6a8:	dc06      	bgt.n	800f6b8 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	8b5b      	ldrh	r3, [r3, #26]
 800f6ae:	f043 0302 	orr.w	r3, r3, #2
 800f6b2:	b29a      	uxth	r2, r3
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800f6b8:	7efb      	ldrb	r3, [r7, #27]
 800f6ba:	2b00      	cmp	r3, #0
 800f6bc:	d01b      	beq.n	800f6f6 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	7d1b      	ldrb	r3, [r3, #20]
 800f6c2:	2b00      	cmp	r3, #0
 800f6c4:	d106      	bne.n	800f6d4 <tcp_process+0xa8>
 800f6c6:	4b7c      	ldr	r3, [pc, #496]	@ (800f8b8 <tcp_process+0x28c>)
 800f6c8:	f44f 724e 	mov.w	r2, #824	@ 0x338
 800f6cc:	4980      	ldr	r1, [pc, #512]	@ (800f8d0 <tcp_process+0x2a4>)
 800f6ce:	487c      	ldr	r0, [pc, #496]	@ (800f8c0 <tcp_process+0x294>)
 800f6d0:	f006 fe1e 	bl	8016310 <iprintf>
      recv_flags |= TF_RESET;
 800f6d4:	4b7f      	ldr	r3, [pc, #508]	@ (800f8d4 <tcp_process+0x2a8>)
 800f6d6:	781b      	ldrb	r3, [r3, #0]
 800f6d8:	f043 0308 	orr.w	r3, r3, #8
 800f6dc:	b2da      	uxtb	r2, r3
 800f6de:	4b7d      	ldr	r3, [pc, #500]	@ (800f8d4 <tcp_process+0x2a8>)
 800f6e0:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	8b5b      	ldrh	r3, [r3, #26]
 800f6e6:	f023 0301 	bic.w	r3, r3, #1
 800f6ea:	b29a      	uxth	r2, r3
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800f6f0:	f06f 030d 	mvn.w	r3, #13
 800f6f4:	e37a      	b.n	800fdec <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800f6f6:	2300      	movs	r3, #0
 800f6f8:	e378      	b.n	800fdec <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800f6fa:	4b72      	ldr	r3, [pc, #456]	@ (800f8c4 <tcp_process+0x298>)
 800f6fc:	781b      	ldrb	r3, [r3, #0]
 800f6fe:	f003 0302 	and.w	r3, r3, #2
 800f702:	2b00      	cmp	r3, #0
 800f704:	d010      	beq.n	800f728 <tcp_process+0xfc>
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	7d1b      	ldrb	r3, [r3, #20]
 800f70a:	2b02      	cmp	r3, #2
 800f70c:	d00c      	beq.n	800f728 <tcp_process+0xfc>
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	7d1b      	ldrb	r3, [r3, #20]
 800f712:	2b03      	cmp	r3, #3
 800f714:	d008      	beq.n	800f728 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	8b5b      	ldrh	r3, [r3, #26]
 800f71a:	f043 0302 	orr.w	r3, r3, #2
 800f71e:	b29a      	uxth	r2, r3
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800f724:	2300      	movs	r3, #0
 800f726:	e361      	b.n	800fdec <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	8b5b      	ldrh	r3, [r3, #26]
 800f72c:	f003 0310 	and.w	r3, r3, #16
 800f730:	2b00      	cmp	r3, #0
 800f732:	d103      	bne.n	800f73c <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800f734:	4b68      	ldr	r3, [pc, #416]	@ (800f8d8 <tcp_process+0x2ac>)
 800f736:	681a      	ldr	r2, [r3, #0]
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	2200      	movs	r2, #0
 800f740:	f883 20a3 	strb.w	r2, [r3, #163]	@ 0xa3
  pcb->persist_probe = 0;
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	2200      	movs	r2, #0
 800f748:	f883 20a2 	strb.w	r2, [r3, #162]	@ 0xa2

  tcp_parseopt(pcb);
 800f74c:	6878      	ldr	r0, [r7, #4]
 800f74e:	f001 fc2b 	bl	8010fa8 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	7d1b      	ldrb	r3, [r3, #20]
 800f756:	3b02      	subs	r3, #2
 800f758:	2b07      	cmp	r3, #7
 800f75a:	f200 8337 	bhi.w	800fdcc <tcp_process+0x7a0>
 800f75e:	a201      	add	r2, pc, #4	@ (adr r2, 800f764 <tcp_process+0x138>)
 800f760:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f764:	0800f785 	.word	0x0800f785
 800f768:	0800f9b5 	.word	0x0800f9b5
 800f76c:	0800fb2d 	.word	0x0800fb2d
 800f770:	0800fb57 	.word	0x0800fb57
 800f774:	0800fc7b 	.word	0x0800fc7b
 800f778:	0800fb2d 	.word	0x0800fb2d
 800f77c:	0800fd07 	.word	0x0800fd07
 800f780:	0800fd97 	.word	0x0800fd97
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800f784:	4b4f      	ldr	r3, [pc, #316]	@ (800f8c4 <tcp_process+0x298>)
 800f786:	781b      	ldrb	r3, [r3, #0]
 800f788:	f003 0310 	and.w	r3, r3, #16
 800f78c:	2b00      	cmp	r3, #0
 800f78e:	f000 80e4 	beq.w	800f95a <tcp_process+0x32e>
 800f792:	4b4c      	ldr	r3, [pc, #304]	@ (800f8c4 <tcp_process+0x298>)
 800f794:	781b      	ldrb	r3, [r3, #0]
 800f796:	f003 0302 	and.w	r3, r3, #2
 800f79a:	2b00      	cmp	r3, #0
 800f79c:	f000 80dd 	beq.w	800f95a <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f7a4:	1c5a      	adds	r2, r3, #1
 800f7a6:	4b48      	ldr	r3, [pc, #288]	@ (800f8c8 <tcp_process+0x29c>)
 800f7a8:	681b      	ldr	r3, [r3, #0]
 800f7aa:	429a      	cmp	r2, r3
 800f7ac:	f040 80d5 	bne.w	800f95a <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800f7b0:	4b46      	ldr	r3, [pc, #280]	@ (800f8cc <tcp_process+0x2a0>)
 800f7b2:	681b      	ldr	r3, [r3, #0]
 800f7b4:	1c5a      	adds	r2, r3, #1
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 800f7c2:	4b41      	ldr	r3, [pc, #260]	@ (800f8c8 <tcp_process+0x29c>)
 800f7c4:	681a      	ldr	r2, [r3, #0]
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800f7ca:	4b44      	ldr	r3, [pc, #272]	@ (800f8dc <tcp_process+0x2b0>)
 800f7cc:	681b      	ldr	r3, [r3, #0]
 800f7ce:	89db      	ldrh	r3, [r3, #14]
 800f7d0:	b29a      	uxth	r2, r3
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800f7d8:	687b      	ldr	r3, [r7, #4]
 800f7da:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800f7e4:	4b39      	ldr	r3, [pc, #228]	@ (800f8cc <tcp_process+0x2a0>)
 800f7e6:	681b      	ldr	r3, [r3, #0]
 800f7e8:	1e5a      	subs	r2, r3, #1
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	2204      	movs	r2, #4
 800f7f2:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	3304      	adds	r3, #4
 800f7fc:	4618      	mov	r0, r3
 800f7fe:	f005 f8b9 	bl	8014974 <ip4_route>
 800f802:	4601      	mov	r1, r0
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	3304      	adds	r3, #4
 800f808:	461a      	mov	r2, r3
 800f80a:	4620      	mov	r0, r4
 800f80c:	f7ff f88c 	bl	800e928 <tcp_eff_send_mss_netif>
 800f810:	4603      	mov	r3, r0
 800f812:	461a      	mov	r2, r3
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f81c:	009a      	lsls	r2, r3, #2
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f822:	005b      	lsls	r3, r3, #1
 800f824:	f241 111c 	movw	r1, #4380	@ 0x111c
 800f828:	428b      	cmp	r3, r1
 800f82a:	bf38      	it	cc
 800f82c:	460b      	movcc	r3, r1
 800f82e:	429a      	cmp	r2, r3
 800f830:	d204      	bcs.n	800f83c <tcp_process+0x210>
 800f832:	687b      	ldr	r3, [r7, #4]
 800f834:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f836:	009b      	lsls	r3, r3, #2
 800f838:	b29b      	uxth	r3, r3
 800f83a:	e00d      	b.n	800f858 <tcp_process+0x22c>
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f840:	005b      	lsls	r3, r3, #1
 800f842:	f241 121c 	movw	r2, #4380	@ 0x111c
 800f846:	4293      	cmp	r3, r2
 800f848:	d904      	bls.n	800f854 <tcp_process+0x228>
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f84e:	005b      	lsls	r3, r3, #1
 800f850:	b29b      	uxth	r3, r3
 800f852:	e001      	b.n	800f858 <tcp_process+0x22c>
 800f854:	f241 131c 	movw	r3, #4380	@ 0x111c
 800f858:	687a      	ldr	r2, [r7, #4]
 800f85a:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800f864:	2b00      	cmp	r3, #0
 800f866:	d106      	bne.n	800f876 <tcp_process+0x24a>
 800f868:	4b13      	ldr	r3, [pc, #76]	@ (800f8b8 <tcp_process+0x28c>)
 800f86a:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 800f86e:	491c      	ldr	r1, [pc, #112]	@ (800f8e0 <tcp_process+0x2b4>)
 800f870:	4813      	ldr	r0, [pc, #76]	@ (800f8c0 <tcp_process+0x294>)
 800f872:	f006 fd4d 	bl	8016310 <iprintf>
        --pcb->snd_queuelen;
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800f87c:	3b01      	subs	r3, #1
 800f87e:	b29a      	uxth	r2, r3
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f88a:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800f88c:	69fb      	ldr	r3, [r7, #28]
 800f88e:	2b00      	cmp	r3, #0
 800f890:	d12a      	bne.n	800f8e8 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f896:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800f898:	69fb      	ldr	r3, [r7, #28]
 800f89a:	2b00      	cmp	r3, #0
 800f89c:	d106      	bne.n	800f8ac <tcp_process+0x280>
 800f89e:	4b06      	ldr	r3, [pc, #24]	@ (800f8b8 <tcp_process+0x28c>)
 800f8a0:	f44f 725d 	mov.w	r2, #884	@ 0x374
 800f8a4:	490f      	ldr	r1, [pc, #60]	@ (800f8e4 <tcp_process+0x2b8>)
 800f8a6:	4806      	ldr	r0, [pc, #24]	@ (800f8c0 <tcp_process+0x294>)
 800f8a8:	f006 fd32 	bl	8016310 <iprintf>
          pcb->unsent = rseg->next;
 800f8ac:	69fb      	ldr	r3, [r7, #28]
 800f8ae:	681a      	ldr	r2, [r3, #0]
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	66da      	str	r2, [r3, #108]	@ 0x6c
 800f8b4:	e01c      	b.n	800f8f0 <tcp_process+0x2c4>
 800f8b6:	bf00      	nop
 800f8b8:	080195c0 	.word	0x080195c0
 800f8bc:	080197f8 	.word	0x080197f8
 800f8c0:	0801960c 	.word	0x0801960c
 800f8c4:	2000eb88 	.word	0x2000eb88
 800f8c8:	2000eb80 	.word	0x2000eb80
 800f8cc:	2000eb7c 	.word	0x2000eb7c
 800f8d0:	08019814 	.word	0x08019814
 800f8d4:	2000eb89 	.word	0x2000eb89
 800f8d8:	2000eb44 	.word	0x2000eb44
 800f8dc:	2000eb6c 	.word	0x2000eb6c
 800f8e0:	08019834 	.word	0x08019834
 800f8e4:	0801984c 	.word	0x0801984c
        } else {
          pcb->unacked = rseg->next;
 800f8e8:	69fb      	ldr	r3, [r7, #28]
 800f8ea:	681a      	ldr	r2, [r3, #0]
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 800f8f0:	69f8      	ldr	r0, [r7, #28]
 800f8f2:	f7fe fc4c 	bl	800e18e <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f8fa:	2b00      	cmp	r3, #0
 800f8fc:	d104      	bne.n	800f908 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f904:	861a      	strh	r2, [r3, #48]	@ 0x30
 800f906:	e006      	b.n	800f916 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	2200      	movs	r2, #0
 800f90c:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	2200      	movs	r2, #0
 800f912:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f91c:	2b00      	cmp	r3, #0
 800f91e:	d00a      	beq.n	800f936 <tcp_process+0x30a>
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f926:	687a      	ldr	r2, [r7, #4]
 800f928:	6910      	ldr	r0, [r2, #16]
 800f92a:	2200      	movs	r2, #0
 800f92c:	6879      	ldr	r1, [r7, #4]
 800f92e:	4798      	blx	r3
 800f930:	4603      	mov	r3, r0
 800f932:	76bb      	strb	r3, [r7, #26]
 800f934:	e001      	b.n	800f93a <tcp_process+0x30e>
 800f936:	2300      	movs	r3, #0
 800f938:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800f93a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800f93e:	f113 0f0d 	cmn.w	r3, #13
 800f942:	d102      	bne.n	800f94a <tcp_process+0x31e>
          return ERR_ABRT;
 800f944:	f06f 030c 	mvn.w	r3, #12
 800f948:	e250      	b.n	800fdec <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	8b5b      	ldrh	r3, [r3, #26]
 800f94e:	f043 0302 	orr.w	r3, r3, #2
 800f952:	b29a      	uxth	r2, r3
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800f958:	e23a      	b.n	800fdd0 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800f95a:	4b98      	ldr	r3, [pc, #608]	@ (800fbbc <tcp_process+0x590>)
 800f95c:	781b      	ldrb	r3, [r3, #0]
 800f95e:	f003 0310 	and.w	r3, r3, #16
 800f962:	2b00      	cmp	r3, #0
 800f964:	f000 8234 	beq.w	800fdd0 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f968:	4b95      	ldr	r3, [pc, #596]	@ (800fbc0 <tcp_process+0x594>)
 800f96a:	6819      	ldr	r1, [r3, #0]
 800f96c:	4b95      	ldr	r3, [pc, #596]	@ (800fbc4 <tcp_process+0x598>)
 800f96e:	881b      	ldrh	r3, [r3, #0]
 800f970:	461a      	mov	r2, r3
 800f972:	4b95      	ldr	r3, [pc, #596]	@ (800fbc8 <tcp_process+0x59c>)
 800f974:	681b      	ldr	r3, [r3, #0]
 800f976:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f978:	4b94      	ldr	r3, [pc, #592]	@ (800fbcc <tcp_process+0x5a0>)
 800f97a:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f97c:	885b      	ldrh	r3, [r3, #2]
 800f97e:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f980:	4a92      	ldr	r2, [pc, #584]	@ (800fbcc <tcp_process+0x5a0>)
 800f982:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f984:	8812      	ldrh	r2, [r2, #0]
 800f986:	b292      	uxth	r2, r2
 800f988:	9202      	str	r2, [sp, #8]
 800f98a:	9301      	str	r3, [sp, #4]
 800f98c:	4b90      	ldr	r3, [pc, #576]	@ (800fbd0 <tcp_process+0x5a4>)
 800f98e:	9300      	str	r3, [sp, #0]
 800f990:	4b90      	ldr	r3, [pc, #576]	@ (800fbd4 <tcp_process+0x5a8>)
 800f992:	4602      	mov	r2, r0
 800f994:	6878      	ldr	r0, [r7, #4]
 800f996:	f003 f8d7 	bl	8012b48 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800f9a0:	2b05      	cmp	r3, #5
 800f9a2:	f200 8215 	bhi.w	800fdd0 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	2200      	movs	r2, #0
 800f9aa:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 800f9ac:	6878      	ldr	r0, [r7, #4]
 800f9ae:	f002 fea3 	bl	80126f8 <tcp_rexmit_rto>
      break;
 800f9b2:	e20d      	b.n	800fdd0 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800f9b4:	4b81      	ldr	r3, [pc, #516]	@ (800fbbc <tcp_process+0x590>)
 800f9b6:	781b      	ldrb	r3, [r3, #0]
 800f9b8:	f003 0310 	and.w	r3, r3, #16
 800f9bc:	2b00      	cmp	r3, #0
 800f9be:	f000 80a1 	beq.w	800fb04 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f9c2:	4b7f      	ldr	r3, [pc, #508]	@ (800fbc0 <tcp_process+0x594>)
 800f9c4:	681a      	ldr	r2, [r3, #0]
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f9ca:	1ad3      	subs	r3, r2, r3
 800f9cc:	3b01      	subs	r3, #1
 800f9ce:	2b00      	cmp	r3, #0
 800f9d0:	db7e      	blt.n	800fad0 <tcp_process+0x4a4>
 800f9d2:	4b7b      	ldr	r3, [pc, #492]	@ (800fbc0 <tcp_process+0x594>)
 800f9d4:	681a      	ldr	r2, [r3, #0]
 800f9d6:	687b      	ldr	r3, [r7, #4]
 800f9d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f9da:	1ad3      	subs	r3, r2, r3
 800f9dc:	2b00      	cmp	r3, #0
 800f9de:	dc77      	bgt.n	800fad0 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	2204      	movs	r2, #4
 800f9e4:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f9ea:	2b00      	cmp	r3, #0
 800f9ec:	d102      	bne.n	800f9f4 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800f9ee:	23fa      	movs	r3, #250	@ 0xfa
 800f9f0:	76bb      	strb	r3, [r7, #26]
 800f9f2:	e01d      	b.n	800fa30 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f9f8:	699b      	ldr	r3, [r3, #24]
 800f9fa:	2b00      	cmp	r3, #0
 800f9fc:	d106      	bne.n	800fa0c <tcp_process+0x3e0>
 800f9fe:	4b76      	ldr	r3, [pc, #472]	@ (800fbd8 <tcp_process+0x5ac>)
 800fa00:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 800fa04:	4975      	ldr	r1, [pc, #468]	@ (800fbdc <tcp_process+0x5b0>)
 800fa06:	4876      	ldr	r0, [pc, #472]	@ (800fbe0 <tcp_process+0x5b4>)
 800fa08:	f006 fc82 	bl	8016310 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800fa10:	699b      	ldr	r3, [r3, #24]
 800fa12:	2b00      	cmp	r3, #0
 800fa14:	d00a      	beq.n	800fa2c <tcp_process+0x400>
 800fa16:	687b      	ldr	r3, [r7, #4]
 800fa18:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800fa1a:	699b      	ldr	r3, [r3, #24]
 800fa1c:	687a      	ldr	r2, [r7, #4]
 800fa1e:	6910      	ldr	r0, [r2, #16]
 800fa20:	2200      	movs	r2, #0
 800fa22:	6879      	ldr	r1, [r7, #4]
 800fa24:	4798      	blx	r3
 800fa26:	4603      	mov	r3, r0
 800fa28:	76bb      	strb	r3, [r7, #26]
 800fa2a:	e001      	b.n	800fa30 <tcp_process+0x404>
 800fa2c:	23f0      	movs	r3, #240	@ 0xf0
 800fa2e:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800fa30:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800fa34:	2b00      	cmp	r3, #0
 800fa36:	d00a      	beq.n	800fa4e <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800fa38:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800fa3c:	f113 0f0d 	cmn.w	r3, #13
 800fa40:	d002      	beq.n	800fa48 <tcp_process+0x41c>
              tcp_abort(pcb);
 800fa42:	6878      	ldr	r0, [r7, #4]
 800fa44:	f7fd fd0a 	bl	800d45c <tcp_abort>
            }
            return ERR_ABRT;
 800fa48:	f06f 030c 	mvn.w	r3, #12
 800fa4c:	e1ce      	b.n	800fdec <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800fa4e:	6878      	ldr	r0, [r7, #4]
 800fa50:	f000 fae0 	bl	8010014 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800fa54:	4b63      	ldr	r3, [pc, #396]	@ (800fbe4 <tcp_process+0x5b8>)
 800fa56:	881b      	ldrh	r3, [r3, #0]
 800fa58:	2b00      	cmp	r3, #0
 800fa5a:	d005      	beq.n	800fa68 <tcp_process+0x43c>
            recv_acked--;
 800fa5c:	4b61      	ldr	r3, [pc, #388]	@ (800fbe4 <tcp_process+0x5b8>)
 800fa5e:	881b      	ldrh	r3, [r3, #0]
 800fa60:	3b01      	subs	r3, #1
 800fa62:	b29a      	uxth	r2, r3
 800fa64:	4b5f      	ldr	r3, [pc, #380]	@ (800fbe4 <tcp_process+0x5b8>)
 800fa66:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800fa6c:	009a      	lsls	r2, r3, #2
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800fa72:	005b      	lsls	r3, r3, #1
 800fa74:	f241 111c 	movw	r1, #4380	@ 0x111c
 800fa78:	428b      	cmp	r3, r1
 800fa7a:	bf38      	it	cc
 800fa7c:	460b      	movcc	r3, r1
 800fa7e:	429a      	cmp	r2, r3
 800fa80:	d204      	bcs.n	800fa8c <tcp_process+0x460>
 800fa82:	687b      	ldr	r3, [r7, #4]
 800fa84:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800fa86:	009b      	lsls	r3, r3, #2
 800fa88:	b29b      	uxth	r3, r3
 800fa8a:	e00d      	b.n	800faa8 <tcp_process+0x47c>
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800fa90:	005b      	lsls	r3, r3, #1
 800fa92:	f241 121c 	movw	r2, #4380	@ 0x111c
 800fa96:	4293      	cmp	r3, r2
 800fa98:	d904      	bls.n	800faa4 <tcp_process+0x478>
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800fa9e:	005b      	lsls	r3, r3, #1
 800faa0:	b29b      	uxth	r3, r3
 800faa2:	e001      	b.n	800faa8 <tcp_process+0x47c>
 800faa4:	f241 131c 	movw	r3, #4380	@ 0x111c
 800faa8:	687a      	ldr	r2, [r7, #4]
 800faaa:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800faae:	4b4e      	ldr	r3, [pc, #312]	@ (800fbe8 <tcp_process+0x5bc>)
 800fab0:	781b      	ldrb	r3, [r3, #0]
 800fab2:	f003 0320 	and.w	r3, r3, #32
 800fab6:	2b00      	cmp	r3, #0
 800fab8:	d037      	beq.n	800fb2a <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	8b5b      	ldrh	r3, [r3, #26]
 800fabe:	f043 0302 	orr.w	r3, r3, #2
 800fac2:	b29a      	uxth	r2, r3
 800fac4:	687b      	ldr	r3, [r7, #4]
 800fac6:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	2207      	movs	r2, #7
 800facc:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800face:	e02c      	b.n	800fb2a <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fad0:	4b3b      	ldr	r3, [pc, #236]	@ (800fbc0 <tcp_process+0x594>)
 800fad2:	6819      	ldr	r1, [r3, #0]
 800fad4:	4b3b      	ldr	r3, [pc, #236]	@ (800fbc4 <tcp_process+0x598>)
 800fad6:	881b      	ldrh	r3, [r3, #0]
 800fad8:	461a      	mov	r2, r3
 800fada:	4b3b      	ldr	r3, [pc, #236]	@ (800fbc8 <tcp_process+0x59c>)
 800fadc:	681b      	ldr	r3, [r3, #0]
 800fade:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fae0:	4b3a      	ldr	r3, [pc, #232]	@ (800fbcc <tcp_process+0x5a0>)
 800fae2:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fae4:	885b      	ldrh	r3, [r3, #2]
 800fae6:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fae8:	4a38      	ldr	r2, [pc, #224]	@ (800fbcc <tcp_process+0x5a0>)
 800faea:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800faec:	8812      	ldrh	r2, [r2, #0]
 800faee:	b292      	uxth	r2, r2
 800faf0:	9202      	str	r2, [sp, #8]
 800faf2:	9301      	str	r3, [sp, #4]
 800faf4:	4b36      	ldr	r3, [pc, #216]	@ (800fbd0 <tcp_process+0x5a4>)
 800faf6:	9300      	str	r3, [sp, #0]
 800faf8:	4b36      	ldr	r3, [pc, #216]	@ (800fbd4 <tcp_process+0x5a8>)
 800fafa:	4602      	mov	r2, r0
 800fafc:	6878      	ldr	r0, [r7, #4]
 800fafe:	f003 f823 	bl	8012b48 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800fb02:	e167      	b.n	800fdd4 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800fb04:	4b2d      	ldr	r3, [pc, #180]	@ (800fbbc <tcp_process+0x590>)
 800fb06:	781b      	ldrb	r3, [r3, #0]
 800fb08:	f003 0302 	and.w	r3, r3, #2
 800fb0c:	2b00      	cmp	r3, #0
 800fb0e:	f000 8161 	beq.w	800fdd4 <tcp_process+0x7a8>
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fb16:	1e5a      	subs	r2, r3, #1
 800fb18:	4b2b      	ldr	r3, [pc, #172]	@ (800fbc8 <tcp_process+0x59c>)
 800fb1a:	681b      	ldr	r3, [r3, #0]
 800fb1c:	429a      	cmp	r2, r3
 800fb1e:	f040 8159 	bne.w	800fdd4 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800fb22:	6878      	ldr	r0, [r7, #4]
 800fb24:	f002 fe0a 	bl	801273c <tcp_rexmit>
      break;
 800fb28:	e154      	b.n	800fdd4 <tcp_process+0x7a8>
 800fb2a:	e153      	b.n	800fdd4 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800fb2c:	6878      	ldr	r0, [r7, #4]
 800fb2e:	f000 fa71 	bl	8010014 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800fb32:	4b2d      	ldr	r3, [pc, #180]	@ (800fbe8 <tcp_process+0x5bc>)
 800fb34:	781b      	ldrb	r3, [r3, #0]
 800fb36:	f003 0320 	and.w	r3, r3, #32
 800fb3a:	2b00      	cmp	r3, #0
 800fb3c:	f000 814c 	beq.w	800fdd8 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	8b5b      	ldrh	r3, [r3, #26]
 800fb44:	f043 0302 	orr.w	r3, r3, #2
 800fb48:	b29a      	uxth	r2, r3
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	2207      	movs	r2, #7
 800fb52:	751a      	strb	r2, [r3, #20]
      }
      break;
 800fb54:	e140      	b.n	800fdd8 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800fb56:	6878      	ldr	r0, [r7, #4]
 800fb58:	f000 fa5c 	bl	8010014 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800fb5c:	4b22      	ldr	r3, [pc, #136]	@ (800fbe8 <tcp_process+0x5bc>)
 800fb5e:	781b      	ldrb	r3, [r3, #0]
 800fb60:	f003 0320 	and.w	r3, r3, #32
 800fb64:	2b00      	cmp	r3, #0
 800fb66:	d071      	beq.n	800fc4c <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800fb68:	4b14      	ldr	r3, [pc, #80]	@ (800fbbc <tcp_process+0x590>)
 800fb6a:	781b      	ldrb	r3, [r3, #0]
 800fb6c:	f003 0310 	and.w	r3, r3, #16
 800fb70:	2b00      	cmp	r3, #0
 800fb72:	d060      	beq.n	800fc36 <tcp_process+0x60a>
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800fb78:	4b11      	ldr	r3, [pc, #68]	@ (800fbc0 <tcp_process+0x594>)
 800fb7a:	681b      	ldr	r3, [r3, #0]
 800fb7c:	429a      	cmp	r2, r3
 800fb7e:	d15a      	bne.n	800fc36 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800fb80:	687b      	ldr	r3, [r7, #4]
 800fb82:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800fb84:	2b00      	cmp	r3, #0
 800fb86:	d156      	bne.n	800fc36 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	8b5b      	ldrh	r3, [r3, #26]
 800fb8c:	f043 0302 	orr.w	r3, r3, #2
 800fb90:	b29a      	uxth	r2, r3
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800fb96:	6878      	ldr	r0, [r7, #4]
 800fb98:	f7fe fdbc 	bl	800e714 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800fb9c:	4b13      	ldr	r3, [pc, #76]	@ (800fbec <tcp_process+0x5c0>)
 800fb9e:	681b      	ldr	r3, [r3, #0]
 800fba0:	687a      	ldr	r2, [r7, #4]
 800fba2:	429a      	cmp	r2, r3
 800fba4:	d105      	bne.n	800fbb2 <tcp_process+0x586>
 800fba6:	4b11      	ldr	r3, [pc, #68]	@ (800fbec <tcp_process+0x5c0>)
 800fba8:	681b      	ldr	r3, [r3, #0]
 800fbaa:	68db      	ldr	r3, [r3, #12]
 800fbac:	4a0f      	ldr	r2, [pc, #60]	@ (800fbec <tcp_process+0x5c0>)
 800fbae:	6013      	str	r3, [r2, #0]
 800fbb0:	e02e      	b.n	800fc10 <tcp_process+0x5e4>
 800fbb2:	4b0e      	ldr	r3, [pc, #56]	@ (800fbec <tcp_process+0x5c0>)
 800fbb4:	681b      	ldr	r3, [r3, #0]
 800fbb6:	617b      	str	r3, [r7, #20]
 800fbb8:	e027      	b.n	800fc0a <tcp_process+0x5de>
 800fbba:	bf00      	nop
 800fbbc:	2000eb88 	.word	0x2000eb88
 800fbc0:	2000eb80 	.word	0x2000eb80
 800fbc4:	2000eb86 	.word	0x2000eb86
 800fbc8:	2000eb7c 	.word	0x2000eb7c
 800fbcc:	2000eb6c 	.word	0x2000eb6c
 800fbd0:	20009208 	.word	0x20009208
 800fbd4:	2000920c 	.word	0x2000920c
 800fbd8:	080195c0 	.word	0x080195c0
 800fbdc:	08019860 	.word	0x08019860
 800fbe0:	0801960c 	.word	0x0801960c
 800fbe4:	2000eb84 	.word	0x2000eb84
 800fbe8:	2000eb89 	.word	0x2000eb89
 800fbec:	2000eb50 	.word	0x2000eb50
 800fbf0:	697b      	ldr	r3, [r7, #20]
 800fbf2:	68db      	ldr	r3, [r3, #12]
 800fbf4:	687a      	ldr	r2, [r7, #4]
 800fbf6:	429a      	cmp	r2, r3
 800fbf8:	d104      	bne.n	800fc04 <tcp_process+0x5d8>
 800fbfa:	687b      	ldr	r3, [r7, #4]
 800fbfc:	68da      	ldr	r2, [r3, #12]
 800fbfe:	697b      	ldr	r3, [r7, #20]
 800fc00:	60da      	str	r2, [r3, #12]
 800fc02:	e005      	b.n	800fc10 <tcp_process+0x5e4>
 800fc04:	697b      	ldr	r3, [r7, #20]
 800fc06:	68db      	ldr	r3, [r3, #12]
 800fc08:	617b      	str	r3, [r7, #20]
 800fc0a:	697b      	ldr	r3, [r7, #20]
 800fc0c:	2b00      	cmp	r3, #0
 800fc0e:	d1ef      	bne.n	800fbf0 <tcp_process+0x5c4>
 800fc10:	687b      	ldr	r3, [r7, #4]
 800fc12:	2200      	movs	r2, #0
 800fc14:	60da      	str	r2, [r3, #12]
 800fc16:	4b77      	ldr	r3, [pc, #476]	@ (800fdf4 <tcp_process+0x7c8>)
 800fc18:	2201      	movs	r2, #1
 800fc1a:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	220a      	movs	r2, #10
 800fc20:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800fc22:	4b75      	ldr	r3, [pc, #468]	@ (800fdf8 <tcp_process+0x7cc>)
 800fc24:	681a      	ldr	r2, [r3, #0]
 800fc26:	687b      	ldr	r3, [r7, #4]
 800fc28:	60da      	str	r2, [r3, #12]
 800fc2a:	4a73      	ldr	r2, [pc, #460]	@ (800fdf8 <tcp_process+0x7cc>)
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	6013      	str	r3, [r2, #0]
 800fc30:	f003 f94c 	bl	8012ecc <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800fc34:	e0d2      	b.n	800fddc <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	8b5b      	ldrh	r3, [r3, #26]
 800fc3a:	f043 0302 	orr.w	r3, r3, #2
 800fc3e:	b29a      	uxth	r2, r3
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800fc44:	687b      	ldr	r3, [r7, #4]
 800fc46:	2208      	movs	r2, #8
 800fc48:	751a      	strb	r2, [r3, #20]
      break;
 800fc4a:	e0c7      	b.n	800fddc <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800fc4c:	4b6b      	ldr	r3, [pc, #428]	@ (800fdfc <tcp_process+0x7d0>)
 800fc4e:	781b      	ldrb	r3, [r3, #0]
 800fc50:	f003 0310 	and.w	r3, r3, #16
 800fc54:	2b00      	cmp	r3, #0
 800fc56:	f000 80c1 	beq.w	800fddc <tcp_process+0x7b0>
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800fc5e:	4b68      	ldr	r3, [pc, #416]	@ (800fe00 <tcp_process+0x7d4>)
 800fc60:	681b      	ldr	r3, [r3, #0]
 800fc62:	429a      	cmp	r2, r3
 800fc64:	f040 80ba 	bne.w	800fddc <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800fc6c:	2b00      	cmp	r3, #0
 800fc6e:	f040 80b5 	bne.w	800fddc <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800fc72:	687b      	ldr	r3, [r7, #4]
 800fc74:	2206      	movs	r2, #6
 800fc76:	751a      	strb	r2, [r3, #20]
      break;
 800fc78:	e0b0      	b.n	800fddc <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800fc7a:	6878      	ldr	r0, [r7, #4]
 800fc7c:	f000 f9ca 	bl	8010014 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800fc80:	4b60      	ldr	r3, [pc, #384]	@ (800fe04 <tcp_process+0x7d8>)
 800fc82:	781b      	ldrb	r3, [r3, #0]
 800fc84:	f003 0320 	and.w	r3, r3, #32
 800fc88:	2b00      	cmp	r3, #0
 800fc8a:	f000 80a9 	beq.w	800fde0 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	8b5b      	ldrh	r3, [r3, #26]
 800fc92:	f043 0302 	orr.w	r3, r3, #2
 800fc96:	b29a      	uxth	r2, r3
 800fc98:	687b      	ldr	r3, [r7, #4]
 800fc9a:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800fc9c:	6878      	ldr	r0, [r7, #4]
 800fc9e:	f7fe fd39 	bl	800e714 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800fca2:	4b59      	ldr	r3, [pc, #356]	@ (800fe08 <tcp_process+0x7dc>)
 800fca4:	681b      	ldr	r3, [r3, #0]
 800fca6:	687a      	ldr	r2, [r7, #4]
 800fca8:	429a      	cmp	r2, r3
 800fcaa:	d105      	bne.n	800fcb8 <tcp_process+0x68c>
 800fcac:	4b56      	ldr	r3, [pc, #344]	@ (800fe08 <tcp_process+0x7dc>)
 800fcae:	681b      	ldr	r3, [r3, #0]
 800fcb0:	68db      	ldr	r3, [r3, #12]
 800fcb2:	4a55      	ldr	r2, [pc, #340]	@ (800fe08 <tcp_process+0x7dc>)
 800fcb4:	6013      	str	r3, [r2, #0]
 800fcb6:	e013      	b.n	800fce0 <tcp_process+0x6b4>
 800fcb8:	4b53      	ldr	r3, [pc, #332]	@ (800fe08 <tcp_process+0x7dc>)
 800fcba:	681b      	ldr	r3, [r3, #0]
 800fcbc:	613b      	str	r3, [r7, #16]
 800fcbe:	e00c      	b.n	800fcda <tcp_process+0x6ae>
 800fcc0:	693b      	ldr	r3, [r7, #16]
 800fcc2:	68db      	ldr	r3, [r3, #12]
 800fcc4:	687a      	ldr	r2, [r7, #4]
 800fcc6:	429a      	cmp	r2, r3
 800fcc8:	d104      	bne.n	800fcd4 <tcp_process+0x6a8>
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	68da      	ldr	r2, [r3, #12]
 800fcce:	693b      	ldr	r3, [r7, #16]
 800fcd0:	60da      	str	r2, [r3, #12]
 800fcd2:	e005      	b.n	800fce0 <tcp_process+0x6b4>
 800fcd4:	693b      	ldr	r3, [r7, #16]
 800fcd6:	68db      	ldr	r3, [r3, #12]
 800fcd8:	613b      	str	r3, [r7, #16]
 800fcda:	693b      	ldr	r3, [r7, #16]
 800fcdc:	2b00      	cmp	r3, #0
 800fcde:	d1ef      	bne.n	800fcc0 <tcp_process+0x694>
 800fce0:	687b      	ldr	r3, [r7, #4]
 800fce2:	2200      	movs	r2, #0
 800fce4:	60da      	str	r2, [r3, #12]
 800fce6:	4b43      	ldr	r3, [pc, #268]	@ (800fdf4 <tcp_process+0x7c8>)
 800fce8:	2201      	movs	r2, #1
 800fcea:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800fcec:	687b      	ldr	r3, [r7, #4]
 800fcee:	220a      	movs	r2, #10
 800fcf0:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800fcf2:	4b41      	ldr	r3, [pc, #260]	@ (800fdf8 <tcp_process+0x7cc>)
 800fcf4:	681a      	ldr	r2, [r3, #0]
 800fcf6:	687b      	ldr	r3, [r7, #4]
 800fcf8:	60da      	str	r2, [r3, #12]
 800fcfa:	4a3f      	ldr	r2, [pc, #252]	@ (800fdf8 <tcp_process+0x7cc>)
 800fcfc:	687b      	ldr	r3, [r7, #4]
 800fcfe:	6013      	str	r3, [r2, #0]
 800fd00:	f003 f8e4 	bl	8012ecc <tcp_timer_needed>
      }
      break;
 800fd04:	e06c      	b.n	800fde0 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800fd06:	6878      	ldr	r0, [r7, #4]
 800fd08:	f000 f984 	bl	8010014 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800fd0c:	4b3b      	ldr	r3, [pc, #236]	@ (800fdfc <tcp_process+0x7d0>)
 800fd0e:	781b      	ldrb	r3, [r3, #0]
 800fd10:	f003 0310 	and.w	r3, r3, #16
 800fd14:	2b00      	cmp	r3, #0
 800fd16:	d065      	beq.n	800fde4 <tcp_process+0x7b8>
 800fd18:	687b      	ldr	r3, [r7, #4]
 800fd1a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800fd1c:	4b38      	ldr	r3, [pc, #224]	@ (800fe00 <tcp_process+0x7d4>)
 800fd1e:	681b      	ldr	r3, [r3, #0]
 800fd20:	429a      	cmp	r2, r3
 800fd22:	d15f      	bne.n	800fde4 <tcp_process+0x7b8>
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fd28:	2b00      	cmp	r3, #0
 800fd2a:	d15b      	bne.n	800fde4 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800fd2c:	6878      	ldr	r0, [r7, #4]
 800fd2e:	f7fe fcf1 	bl	800e714 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800fd32:	4b35      	ldr	r3, [pc, #212]	@ (800fe08 <tcp_process+0x7dc>)
 800fd34:	681b      	ldr	r3, [r3, #0]
 800fd36:	687a      	ldr	r2, [r7, #4]
 800fd38:	429a      	cmp	r2, r3
 800fd3a:	d105      	bne.n	800fd48 <tcp_process+0x71c>
 800fd3c:	4b32      	ldr	r3, [pc, #200]	@ (800fe08 <tcp_process+0x7dc>)
 800fd3e:	681b      	ldr	r3, [r3, #0]
 800fd40:	68db      	ldr	r3, [r3, #12]
 800fd42:	4a31      	ldr	r2, [pc, #196]	@ (800fe08 <tcp_process+0x7dc>)
 800fd44:	6013      	str	r3, [r2, #0]
 800fd46:	e013      	b.n	800fd70 <tcp_process+0x744>
 800fd48:	4b2f      	ldr	r3, [pc, #188]	@ (800fe08 <tcp_process+0x7dc>)
 800fd4a:	681b      	ldr	r3, [r3, #0]
 800fd4c:	60fb      	str	r3, [r7, #12]
 800fd4e:	e00c      	b.n	800fd6a <tcp_process+0x73e>
 800fd50:	68fb      	ldr	r3, [r7, #12]
 800fd52:	68db      	ldr	r3, [r3, #12]
 800fd54:	687a      	ldr	r2, [r7, #4]
 800fd56:	429a      	cmp	r2, r3
 800fd58:	d104      	bne.n	800fd64 <tcp_process+0x738>
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	68da      	ldr	r2, [r3, #12]
 800fd5e:	68fb      	ldr	r3, [r7, #12]
 800fd60:	60da      	str	r2, [r3, #12]
 800fd62:	e005      	b.n	800fd70 <tcp_process+0x744>
 800fd64:	68fb      	ldr	r3, [r7, #12]
 800fd66:	68db      	ldr	r3, [r3, #12]
 800fd68:	60fb      	str	r3, [r7, #12]
 800fd6a:	68fb      	ldr	r3, [r7, #12]
 800fd6c:	2b00      	cmp	r3, #0
 800fd6e:	d1ef      	bne.n	800fd50 <tcp_process+0x724>
 800fd70:	687b      	ldr	r3, [r7, #4]
 800fd72:	2200      	movs	r2, #0
 800fd74:	60da      	str	r2, [r3, #12]
 800fd76:	4b1f      	ldr	r3, [pc, #124]	@ (800fdf4 <tcp_process+0x7c8>)
 800fd78:	2201      	movs	r2, #1
 800fd7a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800fd7c:	687b      	ldr	r3, [r7, #4]
 800fd7e:	220a      	movs	r2, #10
 800fd80:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800fd82:	4b1d      	ldr	r3, [pc, #116]	@ (800fdf8 <tcp_process+0x7cc>)
 800fd84:	681a      	ldr	r2, [r3, #0]
 800fd86:	687b      	ldr	r3, [r7, #4]
 800fd88:	60da      	str	r2, [r3, #12]
 800fd8a:	4a1b      	ldr	r2, [pc, #108]	@ (800fdf8 <tcp_process+0x7cc>)
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	6013      	str	r3, [r2, #0]
 800fd90:	f003 f89c 	bl	8012ecc <tcp_timer_needed>
      }
      break;
 800fd94:	e026      	b.n	800fde4 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800fd96:	6878      	ldr	r0, [r7, #4]
 800fd98:	f000 f93c 	bl	8010014 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800fd9c:	4b17      	ldr	r3, [pc, #92]	@ (800fdfc <tcp_process+0x7d0>)
 800fd9e:	781b      	ldrb	r3, [r3, #0]
 800fda0:	f003 0310 	and.w	r3, r3, #16
 800fda4:	2b00      	cmp	r3, #0
 800fda6:	d01f      	beq.n	800fde8 <tcp_process+0x7bc>
 800fda8:	687b      	ldr	r3, [r7, #4]
 800fdaa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800fdac:	4b14      	ldr	r3, [pc, #80]	@ (800fe00 <tcp_process+0x7d4>)
 800fdae:	681b      	ldr	r3, [r3, #0]
 800fdb0:	429a      	cmp	r2, r3
 800fdb2:	d119      	bne.n	800fde8 <tcp_process+0x7bc>
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fdb8:	2b00      	cmp	r3, #0
 800fdba:	d115      	bne.n	800fde8 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800fdbc:	4b11      	ldr	r3, [pc, #68]	@ (800fe04 <tcp_process+0x7d8>)
 800fdbe:	781b      	ldrb	r3, [r3, #0]
 800fdc0:	f043 0310 	orr.w	r3, r3, #16
 800fdc4:	b2da      	uxtb	r2, r3
 800fdc6:	4b0f      	ldr	r3, [pc, #60]	@ (800fe04 <tcp_process+0x7d8>)
 800fdc8:	701a      	strb	r2, [r3, #0]
      }
      break;
 800fdca:	e00d      	b.n	800fde8 <tcp_process+0x7bc>
    default:
      break;
 800fdcc:	bf00      	nop
 800fdce:	e00c      	b.n	800fdea <tcp_process+0x7be>
      break;
 800fdd0:	bf00      	nop
 800fdd2:	e00a      	b.n	800fdea <tcp_process+0x7be>
      break;
 800fdd4:	bf00      	nop
 800fdd6:	e008      	b.n	800fdea <tcp_process+0x7be>
      break;
 800fdd8:	bf00      	nop
 800fdda:	e006      	b.n	800fdea <tcp_process+0x7be>
      break;
 800fddc:	bf00      	nop
 800fdde:	e004      	b.n	800fdea <tcp_process+0x7be>
      break;
 800fde0:	bf00      	nop
 800fde2:	e002      	b.n	800fdea <tcp_process+0x7be>
      break;
 800fde4:	bf00      	nop
 800fde6:	e000      	b.n	800fdea <tcp_process+0x7be>
      break;
 800fde8:	bf00      	nop
  }
  return ERR_OK;
 800fdea:	2300      	movs	r3, #0
}
 800fdec:	4618      	mov	r0, r3
 800fdee:	3724      	adds	r7, #36	@ 0x24
 800fdf0:	46bd      	mov	sp, r7
 800fdf2:	bd90      	pop	{r4, r7, pc}
 800fdf4:	2000eb58 	.word	0x2000eb58
 800fdf8:	2000eb54 	.word	0x2000eb54
 800fdfc:	2000eb88 	.word	0x2000eb88
 800fe00:	2000eb80 	.word	0x2000eb80
 800fe04:	2000eb89 	.word	0x2000eb89
 800fe08:	2000eb50 	.word	0x2000eb50

0800fe0c <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800fe0c:	b590      	push	{r4, r7, lr}
 800fe0e:	b085      	sub	sp, #20
 800fe10:	af00      	add	r7, sp, #0
 800fe12:	6078      	str	r0, [r7, #4]
 800fe14:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800fe16:	687b      	ldr	r3, [r7, #4]
 800fe18:	2b00      	cmp	r3, #0
 800fe1a:	d106      	bne.n	800fe2a <tcp_oos_insert_segment+0x1e>
 800fe1c:	4b3b      	ldr	r3, [pc, #236]	@ (800ff0c <tcp_oos_insert_segment+0x100>)
 800fe1e:	f240 421f 	movw	r2, #1055	@ 0x41f
 800fe22:	493b      	ldr	r1, [pc, #236]	@ (800ff10 <tcp_oos_insert_segment+0x104>)
 800fe24:	483b      	ldr	r0, [pc, #236]	@ (800ff14 <tcp_oos_insert_segment+0x108>)
 800fe26:	f006 fa73 	bl	8016310 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800fe2a:	687b      	ldr	r3, [r7, #4]
 800fe2c:	68db      	ldr	r3, [r3, #12]
 800fe2e:	899b      	ldrh	r3, [r3, #12]
 800fe30:	b29b      	uxth	r3, r3
 800fe32:	4618      	mov	r0, r3
 800fe34:	f7fb f90e 	bl	800b054 <lwip_htons>
 800fe38:	4603      	mov	r3, r0
 800fe3a:	b2db      	uxtb	r3, r3
 800fe3c:	f003 0301 	and.w	r3, r3, #1
 800fe40:	2b00      	cmp	r3, #0
 800fe42:	d028      	beq.n	800fe96 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800fe44:	6838      	ldr	r0, [r7, #0]
 800fe46:	f7fe f98d 	bl	800e164 <tcp_segs_free>
    next = NULL;
 800fe4a:	2300      	movs	r3, #0
 800fe4c:	603b      	str	r3, [r7, #0]
 800fe4e:	e056      	b.n	800fefe <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800fe50:	683b      	ldr	r3, [r7, #0]
 800fe52:	68db      	ldr	r3, [r3, #12]
 800fe54:	899b      	ldrh	r3, [r3, #12]
 800fe56:	b29b      	uxth	r3, r3
 800fe58:	4618      	mov	r0, r3
 800fe5a:	f7fb f8fb 	bl	800b054 <lwip_htons>
 800fe5e:	4603      	mov	r3, r0
 800fe60:	b2db      	uxtb	r3, r3
 800fe62:	f003 0301 	and.w	r3, r3, #1
 800fe66:	2b00      	cmp	r3, #0
 800fe68:	d00d      	beq.n	800fe86 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	68db      	ldr	r3, [r3, #12]
 800fe6e:	899b      	ldrh	r3, [r3, #12]
 800fe70:	b29c      	uxth	r4, r3
 800fe72:	2001      	movs	r0, #1
 800fe74:	f7fb f8ee 	bl	800b054 <lwip_htons>
 800fe78:	4603      	mov	r3, r0
 800fe7a:	461a      	mov	r2, r3
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	68db      	ldr	r3, [r3, #12]
 800fe80:	4322      	orrs	r2, r4
 800fe82:	b292      	uxth	r2, r2
 800fe84:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800fe86:	683b      	ldr	r3, [r7, #0]
 800fe88:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800fe8a:	683b      	ldr	r3, [r7, #0]
 800fe8c:	681b      	ldr	r3, [r3, #0]
 800fe8e:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800fe90:	68f8      	ldr	r0, [r7, #12]
 800fe92:	f7fe f97c 	bl	800e18e <tcp_seg_free>
    while (next &&
 800fe96:	683b      	ldr	r3, [r7, #0]
 800fe98:	2b00      	cmp	r3, #0
 800fe9a:	d00e      	beq.n	800feba <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800fe9c:	687b      	ldr	r3, [r7, #4]
 800fe9e:	891b      	ldrh	r3, [r3, #8]
 800fea0:	461a      	mov	r2, r3
 800fea2:	4b1d      	ldr	r3, [pc, #116]	@ (800ff18 <tcp_oos_insert_segment+0x10c>)
 800fea4:	681b      	ldr	r3, [r3, #0]
 800fea6:	441a      	add	r2, r3
 800fea8:	683b      	ldr	r3, [r7, #0]
 800feaa:	68db      	ldr	r3, [r3, #12]
 800feac:	685b      	ldr	r3, [r3, #4]
 800feae:	6839      	ldr	r1, [r7, #0]
 800feb0:	8909      	ldrh	r1, [r1, #8]
 800feb2:	440b      	add	r3, r1
 800feb4:	1ad3      	subs	r3, r2, r3
    while (next &&
 800feb6:	2b00      	cmp	r3, #0
 800feb8:	daca      	bge.n	800fe50 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800feba:	683b      	ldr	r3, [r7, #0]
 800febc:	2b00      	cmp	r3, #0
 800febe:	d01e      	beq.n	800fefe <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800fec0:	687b      	ldr	r3, [r7, #4]
 800fec2:	891b      	ldrh	r3, [r3, #8]
 800fec4:	461a      	mov	r2, r3
 800fec6:	4b14      	ldr	r3, [pc, #80]	@ (800ff18 <tcp_oos_insert_segment+0x10c>)
 800fec8:	681b      	ldr	r3, [r3, #0]
 800feca:	441a      	add	r2, r3
 800fecc:	683b      	ldr	r3, [r7, #0]
 800fece:	68db      	ldr	r3, [r3, #12]
 800fed0:	685b      	ldr	r3, [r3, #4]
 800fed2:	1ad3      	subs	r3, r2, r3
    if (next &&
 800fed4:	2b00      	cmp	r3, #0
 800fed6:	dd12      	ble.n	800fefe <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800fed8:	683b      	ldr	r3, [r7, #0]
 800feda:	68db      	ldr	r3, [r3, #12]
 800fedc:	685b      	ldr	r3, [r3, #4]
 800fede:	b29a      	uxth	r2, r3
 800fee0:	4b0d      	ldr	r3, [pc, #52]	@ (800ff18 <tcp_oos_insert_segment+0x10c>)
 800fee2:	681b      	ldr	r3, [r3, #0]
 800fee4:	b29b      	uxth	r3, r3
 800fee6:	1ad3      	subs	r3, r2, r3
 800fee8:	b29a      	uxth	r2, r3
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	685a      	ldr	r2, [r3, #4]
 800fef2:	687b      	ldr	r3, [r7, #4]
 800fef4:	891b      	ldrh	r3, [r3, #8]
 800fef6:	4619      	mov	r1, r3
 800fef8:	4610      	mov	r0, r2
 800fefa:	f7fc fb17 	bl	800c52c <pbuf_realloc>
    }
  }
  cseg->next = next;
 800fefe:	687b      	ldr	r3, [r7, #4]
 800ff00:	683a      	ldr	r2, [r7, #0]
 800ff02:	601a      	str	r2, [r3, #0]
}
 800ff04:	bf00      	nop
 800ff06:	3714      	adds	r7, #20
 800ff08:	46bd      	mov	sp, r7
 800ff0a:	bd90      	pop	{r4, r7, pc}
 800ff0c:	080195c0 	.word	0x080195c0
 800ff10:	08019880 	.word	0x08019880
 800ff14:	0801960c 	.word	0x0801960c
 800ff18:	2000eb7c 	.word	0x2000eb7c

0800ff1c <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800ff1c:	b5b0      	push	{r4, r5, r7, lr}
 800ff1e:	b086      	sub	sp, #24
 800ff20:	af00      	add	r7, sp, #0
 800ff22:	60f8      	str	r0, [r7, #12]
 800ff24:	60b9      	str	r1, [r7, #8]
 800ff26:	607a      	str	r2, [r7, #4]
 800ff28:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800ff2a:	e03e      	b.n	800ffaa <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800ff2c:	68bb      	ldr	r3, [r7, #8]
 800ff2e:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800ff30:	68bb      	ldr	r3, [r7, #8]
 800ff32:	681b      	ldr	r3, [r3, #0]
 800ff34:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800ff36:	697b      	ldr	r3, [r7, #20]
 800ff38:	685b      	ldr	r3, [r3, #4]
 800ff3a:	4618      	mov	r0, r3
 800ff3c:	f7fc fd0a 	bl	800c954 <pbuf_clen>
 800ff40:	4603      	mov	r3, r0
 800ff42:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800ff44:	68fb      	ldr	r3, [r7, #12]
 800ff46:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800ff4a:	8a7a      	ldrh	r2, [r7, #18]
 800ff4c:	429a      	cmp	r2, r3
 800ff4e:	d906      	bls.n	800ff5e <tcp_free_acked_segments+0x42>
 800ff50:	4b2a      	ldr	r3, [pc, #168]	@ (800fffc <tcp_free_acked_segments+0xe0>)
 800ff52:	f240 4257 	movw	r2, #1111	@ 0x457
 800ff56:	492a      	ldr	r1, [pc, #168]	@ (8010000 <tcp_free_acked_segments+0xe4>)
 800ff58:	482a      	ldr	r0, [pc, #168]	@ (8010004 <tcp_free_acked_segments+0xe8>)
 800ff5a:	f006 f9d9 	bl	8016310 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800ff5e:	68fb      	ldr	r3, [r7, #12]
 800ff60:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 800ff64:	8a7b      	ldrh	r3, [r7, #18]
 800ff66:	1ad3      	subs	r3, r2, r3
 800ff68:	b29a      	uxth	r2, r3
 800ff6a:	68fb      	ldr	r3, [r7, #12]
 800ff6c:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800ff70:	697b      	ldr	r3, [r7, #20]
 800ff72:	891a      	ldrh	r2, [r3, #8]
 800ff74:	4b24      	ldr	r3, [pc, #144]	@ (8010008 <tcp_free_acked_segments+0xec>)
 800ff76:	881b      	ldrh	r3, [r3, #0]
 800ff78:	4413      	add	r3, r2
 800ff7a:	b29a      	uxth	r2, r3
 800ff7c:	4b22      	ldr	r3, [pc, #136]	@ (8010008 <tcp_free_acked_segments+0xec>)
 800ff7e:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800ff80:	6978      	ldr	r0, [r7, #20]
 800ff82:	f7fe f904 	bl	800e18e <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800ff86:	68fb      	ldr	r3, [r7, #12]
 800ff88:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800ff8c:	2b00      	cmp	r3, #0
 800ff8e:	d00c      	beq.n	800ffaa <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800ff90:	68bb      	ldr	r3, [r7, #8]
 800ff92:	2b00      	cmp	r3, #0
 800ff94:	d109      	bne.n	800ffaa <tcp_free_acked_segments+0x8e>
 800ff96:	683b      	ldr	r3, [r7, #0]
 800ff98:	2b00      	cmp	r3, #0
 800ff9a:	d106      	bne.n	800ffaa <tcp_free_acked_segments+0x8e>
 800ff9c:	4b17      	ldr	r3, [pc, #92]	@ (800fffc <tcp_free_acked_segments+0xe0>)
 800ff9e:	f240 4261 	movw	r2, #1121	@ 0x461
 800ffa2:	491a      	ldr	r1, [pc, #104]	@ (801000c <tcp_free_acked_segments+0xf0>)
 800ffa4:	4817      	ldr	r0, [pc, #92]	@ (8010004 <tcp_free_acked_segments+0xe8>)
 800ffa6:	f006 f9b3 	bl	8016310 <iprintf>
  while (seg_list != NULL &&
 800ffaa:	68bb      	ldr	r3, [r7, #8]
 800ffac:	2b00      	cmp	r3, #0
 800ffae:	d020      	beq.n	800fff2 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800ffb0:	68bb      	ldr	r3, [r7, #8]
 800ffb2:	68db      	ldr	r3, [r3, #12]
 800ffb4:	685b      	ldr	r3, [r3, #4]
 800ffb6:	4618      	mov	r0, r3
 800ffb8:	f7fb f861 	bl	800b07e <lwip_htonl>
 800ffbc:	4604      	mov	r4, r0
 800ffbe:	68bb      	ldr	r3, [r7, #8]
 800ffc0:	891b      	ldrh	r3, [r3, #8]
 800ffc2:	461d      	mov	r5, r3
 800ffc4:	68bb      	ldr	r3, [r7, #8]
 800ffc6:	68db      	ldr	r3, [r3, #12]
 800ffc8:	899b      	ldrh	r3, [r3, #12]
 800ffca:	b29b      	uxth	r3, r3
 800ffcc:	4618      	mov	r0, r3
 800ffce:	f7fb f841 	bl	800b054 <lwip_htons>
 800ffd2:	4603      	mov	r3, r0
 800ffd4:	b2db      	uxtb	r3, r3
 800ffd6:	f003 0303 	and.w	r3, r3, #3
 800ffda:	2b00      	cmp	r3, #0
 800ffdc:	d001      	beq.n	800ffe2 <tcp_free_acked_segments+0xc6>
 800ffde:	2301      	movs	r3, #1
 800ffe0:	e000      	b.n	800ffe4 <tcp_free_acked_segments+0xc8>
 800ffe2:	2300      	movs	r3, #0
 800ffe4:	442b      	add	r3, r5
 800ffe6:	18e2      	adds	r2, r4, r3
 800ffe8:	4b09      	ldr	r3, [pc, #36]	@ (8010010 <tcp_free_acked_segments+0xf4>)
 800ffea:	681b      	ldr	r3, [r3, #0]
 800ffec:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800ffee:	2b00      	cmp	r3, #0
 800fff0:	dd9c      	ble.n	800ff2c <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800fff2:	68bb      	ldr	r3, [r7, #8]
}
 800fff4:	4618      	mov	r0, r3
 800fff6:	3718      	adds	r7, #24
 800fff8:	46bd      	mov	sp, r7
 800fffa:	bdb0      	pop	{r4, r5, r7, pc}
 800fffc:	080195c0 	.word	0x080195c0
 8010000:	080198a8 	.word	0x080198a8
 8010004:	0801960c 	.word	0x0801960c
 8010008:	2000eb84 	.word	0x2000eb84
 801000c:	080198d0 	.word	0x080198d0
 8010010:	2000eb80 	.word	0x2000eb80

08010014 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8010014:	b5b0      	push	{r4, r5, r7, lr}
 8010016:	b094      	sub	sp, #80	@ 0x50
 8010018:	af00      	add	r7, sp, #0
 801001a:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 801001c:	2300      	movs	r3, #0
 801001e:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8010020:	687b      	ldr	r3, [r7, #4]
 8010022:	2b00      	cmp	r3, #0
 8010024:	d106      	bne.n	8010034 <tcp_receive+0x20>
 8010026:	4b91      	ldr	r3, [pc, #580]	@ (801026c <tcp_receive+0x258>)
 8010028:	f240 427b 	movw	r2, #1147	@ 0x47b
 801002c:	4990      	ldr	r1, [pc, #576]	@ (8010270 <tcp_receive+0x25c>)
 801002e:	4891      	ldr	r0, [pc, #580]	@ (8010274 <tcp_receive+0x260>)
 8010030:	f006 f96e 	bl	8016310 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	7d1b      	ldrb	r3, [r3, #20]
 8010038:	2b03      	cmp	r3, #3
 801003a:	d806      	bhi.n	801004a <tcp_receive+0x36>
 801003c:	4b8b      	ldr	r3, [pc, #556]	@ (801026c <tcp_receive+0x258>)
 801003e:	f240 427c 	movw	r2, #1148	@ 0x47c
 8010042:	498d      	ldr	r1, [pc, #564]	@ (8010278 <tcp_receive+0x264>)
 8010044:	488b      	ldr	r0, [pc, #556]	@ (8010274 <tcp_receive+0x260>)
 8010046:	f006 f963 	bl	8016310 <iprintf>

  if (flags & TCP_ACK) {
 801004a:	4b8c      	ldr	r3, [pc, #560]	@ (801027c <tcp_receive+0x268>)
 801004c:	781b      	ldrb	r3, [r3, #0]
 801004e:	f003 0310 	and.w	r3, r3, #16
 8010052:	2b00      	cmp	r3, #0
 8010054:	f000 8264 	beq.w	8010520 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8010058:	687b      	ldr	r3, [r7, #4]
 801005a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801005e:	461a      	mov	r2, r3
 8010060:	687b      	ldr	r3, [r7, #4]
 8010062:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010064:	4413      	add	r3, r2
 8010066:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801006c:	4b84      	ldr	r3, [pc, #528]	@ (8010280 <tcp_receive+0x26c>)
 801006e:	681b      	ldr	r3, [r3, #0]
 8010070:	1ad3      	subs	r3, r2, r3
 8010072:	2b00      	cmp	r3, #0
 8010074:	db1b      	blt.n	80100ae <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801007a:	4b81      	ldr	r3, [pc, #516]	@ (8010280 <tcp_receive+0x26c>)
 801007c:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801007e:	429a      	cmp	r2, r3
 8010080:	d106      	bne.n	8010090 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8010082:	687b      	ldr	r3, [r7, #4]
 8010084:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8010086:	4b7f      	ldr	r3, [pc, #508]	@ (8010284 <tcp_receive+0x270>)
 8010088:	681b      	ldr	r3, [r3, #0]
 801008a:	1ad3      	subs	r3, r2, r3
 801008c:	2b00      	cmp	r3, #0
 801008e:	db0e      	blt.n	80100ae <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8010094:	4b7b      	ldr	r3, [pc, #492]	@ (8010284 <tcp_receive+0x270>)
 8010096:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8010098:	429a      	cmp	r2, r3
 801009a:	d125      	bne.n	80100e8 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801009c:	4b7a      	ldr	r3, [pc, #488]	@ (8010288 <tcp_receive+0x274>)
 801009e:	681b      	ldr	r3, [r3, #0]
 80100a0:	89db      	ldrh	r3, [r3, #14]
 80100a2:	b29a      	uxth	r2, r3
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80100aa:	429a      	cmp	r2, r3
 80100ac:	d91c      	bls.n	80100e8 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 80100ae:	4b76      	ldr	r3, [pc, #472]	@ (8010288 <tcp_receive+0x274>)
 80100b0:	681b      	ldr	r3, [r3, #0]
 80100b2:	89db      	ldrh	r3, [r3, #14]
 80100b4:	b29a      	uxth	r2, r3
 80100b6:	687b      	ldr	r3, [r7, #4]
 80100b8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 80100bc:	687b      	ldr	r3, [r7, #4]
 80100be:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 80100c2:	687b      	ldr	r3, [r7, #4]
 80100c4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80100c8:	429a      	cmp	r2, r3
 80100ca:	d205      	bcs.n	80100d8 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 80100cc:	687b      	ldr	r3, [r7, #4]
 80100ce:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 80100d2:	687b      	ldr	r3, [r7, #4]
 80100d4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 80100d8:	4b69      	ldr	r3, [pc, #420]	@ (8010280 <tcp_receive+0x26c>)
 80100da:	681a      	ldr	r2, [r3, #0]
 80100dc:	687b      	ldr	r3, [r7, #4]
 80100de:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 80100e0:	4b68      	ldr	r3, [pc, #416]	@ (8010284 <tcp_receive+0x270>)
 80100e2:	681a      	ldr	r2, [r3, #0]
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 80100e8:	4b66      	ldr	r3, [pc, #408]	@ (8010284 <tcp_receive+0x270>)
 80100ea:	681a      	ldr	r2, [r3, #0]
 80100ec:	687b      	ldr	r3, [r7, #4]
 80100ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80100f0:	1ad3      	subs	r3, r2, r3
 80100f2:	2b00      	cmp	r3, #0
 80100f4:	dc58      	bgt.n	80101a8 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 80100f6:	4b65      	ldr	r3, [pc, #404]	@ (801028c <tcp_receive+0x278>)
 80100f8:	881b      	ldrh	r3, [r3, #0]
 80100fa:	2b00      	cmp	r3, #0
 80100fc:	d14b      	bne.n	8010196 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 80100fe:	687b      	ldr	r3, [r7, #4]
 8010100:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010102:	687a      	ldr	r2, [r7, #4]
 8010104:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 8010108:	4413      	add	r3, r2
 801010a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801010c:	429a      	cmp	r2, r3
 801010e:	d142      	bne.n	8010196 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8010110:	687b      	ldr	r3, [r7, #4]
 8010112:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8010116:	2b00      	cmp	r3, #0
 8010118:	db3d      	blt.n	8010196 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801011e:	4b59      	ldr	r3, [pc, #356]	@ (8010284 <tcp_receive+0x270>)
 8010120:	681b      	ldr	r3, [r3, #0]
 8010122:	429a      	cmp	r2, r3
 8010124:	d137      	bne.n	8010196 <tcp_receive+0x182>
              found_dupack = 1;
 8010126:	2301      	movs	r3, #1
 8010128:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 801012a:	687b      	ldr	r3, [r7, #4]
 801012c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8010130:	2bff      	cmp	r3, #255	@ 0xff
 8010132:	d007      	beq.n	8010144 <tcp_receive+0x130>
                ++pcb->dupacks;
 8010134:	687b      	ldr	r3, [r7, #4]
 8010136:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 801013a:	3301      	adds	r3, #1
 801013c:	b2da      	uxtb	r2, r3
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 801014a:	2b03      	cmp	r3, #3
 801014c:	d91b      	bls.n	8010186 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 801014e:	687b      	ldr	r3, [r7, #4]
 8010150:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8010154:	687b      	ldr	r3, [r7, #4]
 8010156:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010158:	4413      	add	r3, r2
 801015a:	b29a      	uxth	r2, r3
 801015c:	687b      	ldr	r3, [r7, #4]
 801015e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8010162:	429a      	cmp	r2, r3
 8010164:	d30a      	bcc.n	801017c <tcp_receive+0x168>
 8010166:	687b      	ldr	r3, [r7, #4]
 8010168:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010170:	4413      	add	r3, r2
 8010172:	b29a      	uxth	r2, r3
 8010174:	687b      	ldr	r3, [r7, #4]
 8010176:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 801017a:	e004      	b.n	8010186 <tcp_receive+0x172>
 801017c:	687b      	ldr	r3, [r7, #4]
 801017e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010182:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 8010186:	687b      	ldr	r3, [r7, #4]
 8010188:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 801018c:	2b02      	cmp	r3, #2
 801018e:	d902      	bls.n	8010196 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8010190:	6878      	ldr	r0, [r7, #4]
 8010192:	f002 fb3f 	bl	8012814 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8010196:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010198:	2b00      	cmp	r3, #0
 801019a:	f040 8161 	bne.w	8010460 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	2200      	movs	r2, #0
 80101a2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80101a6:	e15b      	b.n	8010460 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80101a8:	4b36      	ldr	r3, [pc, #216]	@ (8010284 <tcp_receive+0x270>)
 80101aa:	681a      	ldr	r2, [r3, #0]
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80101b0:	1ad3      	subs	r3, r2, r3
 80101b2:	3b01      	subs	r3, #1
 80101b4:	2b00      	cmp	r3, #0
 80101b6:	f2c0 814e 	blt.w	8010456 <tcp_receive+0x442>
 80101ba:	4b32      	ldr	r3, [pc, #200]	@ (8010284 <tcp_receive+0x270>)
 80101bc:	681a      	ldr	r2, [r3, #0]
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80101c2:	1ad3      	subs	r3, r2, r3
 80101c4:	2b00      	cmp	r3, #0
 80101c6:	f300 8146 	bgt.w	8010456 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	8b5b      	ldrh	r3, [r3, #26]
 80101ce:	f003 0304 	and.w	r3, r3, #4
 80101d2:	2b00      	cmp	r3, #0
 80101d4:	d010      	beq.n	80101f8 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	8b5b      	ldrh	r3, [r3, #26]
 80101da:	f023 0304 	bic.w	r3, r3, #4
 80101de:	b29a      	uxth	r2, r3
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 80101ea:	687b      	ldr	r3, [r7, #4]
 80101ec:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 80101f0:	687b      	ldr	r3, [r7, #4]
 80101f2:	2200      	movs	r2, #0
 80101f4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 80101f8:	687b      	ldr	r3, [r7, #4]
 80101fa:	2200      	movs	r2, #0
 80101fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8010200:	687b      	ldr	r3, [r7, #4]
 8010202:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8010206:	10db      	asrs	r3, r3, #3
 8010208:	b21b      	sxth	r3, r3
 801020a:	b29a      	uxth	r2, r3
 801020c:	687b      	ldr	r3, [r7, #4]
 801020e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8010212:	b29b      	uxth	r3, r3
 8010214:	4413      	add	r3, r2
 8010216:	b29b      	uxth	r3, r3
 8010218:	b21a      	sxth	r2, r3
 801021a:	687b      	ldr	r3, [r7, #4]
 801021c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8010220:	4b18      	ldr	r3, [pc, #96]	@ (8010284 <tcp_receive+0x270>)
 8010222:	681b      	ldr	r3, [r3, #0]
 8010224:	b29a      	uxth	r2, r3
 8010226:	687b      	ldr	r3, [r7, #4]
 8010228:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801022a:	b29b      	uxth	r3, r3
 801022c:	1ad3      	subs	r3, r2, r3
 801022e:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8010230:	687b      	ldr	r3, [r7, #4]
 8010232:	2200      	movs	r2, #0
 8010234:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 8010238:	4b12      	ldr	r3, [pc, #72]	@ (8010284 <tcp_receive+0x270>)
 801023a:	681a      	ldr	r2, [r3, #0]
 801023c:	687b      	ldr	r3, [r7, #4]
 801023e:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	7d1b      	ldrb	r3, [r3, #20]
 8010244:	2b03      	cmp	r3, #3
 8010246:	f240 8097 	bls.w	8010378 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8010250:	687b      	ldr	r3, [r7, #4]
 8010252:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8010256:	429a      	cmp	r2, r3
 8010258:	d245      	bcs.n	80102e6 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 801025a:	687b      	ldr	r3, [r7, #4]
 801025c:	8b5b      	ldrh	r3, [r3, #26]
 801025e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8010262:	2b00      	cmp	r3, #0
 8010264:	d014      	beq.n	8010290 <tcp_receive+0x27c>
 8010266:	2301      	movs	r3, #1
 8010268:	e013      	b.n	8010292 <tcp_receive+0x27e>
 801026a:	bf00      	nop
 801026c:	080195c0 	.word	0x080195c0
 8010270:	080198f0 	.word	0x080198f0
 8010274:	0801960c 	.word	0x0801960c
 8010278:	0801990c 	.word	0x0801990c
 801027c:	2000eb88 	.word	0x2000eb88
 8010280:	2000eb7c 	.word	0x2000eb7c
 8010284:	2000eb80 	.word	0x2000eb80
 8010288:	2000eb6c 	.word	0x2000eb6c
 801028c:	2000eb86 	.word	0x2000eb86
 8010290:	2302      	movs	r3, #2
 8010292:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8010296:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 801029a:	b29a      	uxth	r2, r3
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80102a0:	fb12 f303 	smulbb	r3, r2, r3
 80102a4:	b29b      	uxth	r3, r3
 80102a6:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80102a8:	4293      	cmp	r3, r2
 80102aa:	bf28      	it	cs
 80102ac:	4613      	movcs	r3, r2
 80102ae:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 80102b0:	687b      	ldr	r3, [r7, #4]
 80102b2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80102b6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80102b8:	4413      	add	r3, r2
 80102ba:	b29a      	uxth	r2, r3
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80102c2:	429a      	cmp	r2, r3
 80102c4:	d309      	bcc.n	80102da <tcp_receive+0x2c6>
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80102cc:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80102ce:	4413      	add	r3, r2
 80102d0:	b29a      	uxth	r2, r3
 80102d2:	687b      	ldr	r3, [r7, #4]
 80102d4:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 80102d8:	e04e      	b.n	8010378 <tcp_receive+0x364>
 80102da:	687b      	ldr	r3, [r7, #4]
 80102dc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80102e0:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 80102e4:	e048      	b.n	8010378 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 80102e6:	687b      	ldr	r3, [r7, #4]
 80102e8:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 80102ec:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80102ee:	4413      	add	r3, r2
 80102f0:	b29a      	uxth	r2, r3
 80102f2:	687b      	ldr	r3, [r7, #4]
 80102f4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80102f8:	429a      	cmp	r2, r3
 80102fa:	d309      	bcc.n	8010310 <tcp_receive+0x2fc>
 80102fc:	687b      	ldr	r3, [r7, #4]
 80102fe:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8010302:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8010304:	4413      	add	r3, r2
 8010306:	b29a      	uxth	r2, r3
 8010308:	687b      	ldr	r3, [r7, #4]
 801030a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 801030e:	e004      	b.n	801031a <tcp_receive+0x306>
 8010310:	687b      	ldr	r3, [r7, #4]
 8010312:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010316:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 801031a:	687b      	ldr	r3, [r7, #4]
 801031c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8010326:	429a      	cmp	r2, r3
 8010328:	d326      	bcc.n	8010378 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 801032a:	687b      	ldr	r3, [r7, #4]
 801032c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8010330:	687b      	ldr	r3, [r7, #4]
 8010332:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8010336:	1ad3      	subs	r3, r2, r3
 8010338:	b29a      	uxth	r2, r3
 801033a:	687b      	ldr	r3, [r7, #4]
 801033c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8010346:	687b      	ldr	r3, [r7, #4]
 8010348:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801034a:	4413      	add	r3, r2
 801034c:	b29a      	uxth	r2, r3
 801034e:	687b      	ldr	r3, [r7, #4]
 8010350:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8010354:	429a      	cmp	r2, r3
 8010356:	d30a      	bcc.n	801036e <tcp_receive+0x35a>
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801035e:	687b      	ldr	r3, [r7, #4]
 8010360:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010362:	4413      	add	r3, r2
 8010364:	b29a      	uxth	r2, r3
 8010366:	687b      	ldr	r3, [r7, #4]
 8010368:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 801036c:	e004      	b.n	8010378 <tcp_receive+0x364>
 801036e:	687b      	ldr	r3, [r7, #4]
 8010370:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010374:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8010378:	687b      	ldr	r3, [r7, #4]
 801037a:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010380:	4a98      	ldr	r2, [pc, #608]	@ (80105e4 <tcp_receive+0x5d0>)
 8010382:	6878      	ldr	r0, [r7, #4]
 8010384:	f7ff fdca 	bl	800ff1c <tcp_free_acked_segments>
 8010388:	4602      	mov	r2, r0
 801038a:	687b      	ldr	r3, [r7, #4]
 801038c:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 801038e:	687b      	ldr	r3, [r7, #4]
 8010390:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 8010392:	687b      	ldr	r3, [r7, #4]
 8010394:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010396:	4a94      	ldr	r2, [pc, #592]	@ (80105e8 <tcp_receive+0x5d4>)
 8010398:	6878      	ldr	r0, [r7, #4]
 801039a:	f7ff fdbf 	bl	800ff1c <tcp_free_acked_segments>
 801039e:	4602      	mov	r2, r0
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80103a8:	2b00      	cmp	r3, #0
 80103aa:	d104      	bne.n	80103b6 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 80103ac:	687b      	ldr	r3, [r7, #4]
 80103ae:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80103b2:	861a      	strh	r2, [r3, #48]	@ 0x30
 80103b4:	e002      	b.n	80103bc <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 80103b6:	687b      	ldr	r3, [r7, #4]
 80103b8:	2200      	movs	r2, #0
 80103ba:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 80103bc:	687b      	ldr	r3, [r7, #4]
 80103be:	2200      	movs	r2, #0
 80103c0:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 80103c2:	687b      	ldr	r3, [r7, #4]
 80103c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80103c6:	2b00      	cmp	r3, #0
 80103c8:	d103      	bne.n	80103d2 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 80103ca:	687b      	ldr	r3, [r7, #4]
 80103cc:	2200      	movs	r2, #0
 80103ce:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 80103d2:	687b      	ldr	r3, [r7, #4]
 80103d4:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 80103d8:	4b84      	ldr	r3, [pc, #528]	@ (80105ec <tcp_receive+0x5d8>)
 80103da:	881b      	ldrh	r3, [r3, #0]
 80103dc:	4413      	add	r3, r2
 80103de:	b29a      	uxth	r2, r3
 80103e0:	687b      	ldr	r3, [r7, #4]
 80103e2:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 80103e6:	687b      	ldr	r3, [r7, #4]
 80103e8:	8b5b      	ldrh	r3, [r3, #26]
 80103ea:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80103ee:	2b00      	cmp	r3, #0
 80103f0:	d035      	beq.n	801045e <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 80103f2:	687b      	ldr	r3, [r7, #4]
 80103f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80103f6:	2b00      	cmp	r3, #0
 80103f8:	d118      	bne.n	801042c <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 80103fa:	687b      	ldr	r3, [r7, #4]
 80103fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80103fe:	2b00      	cmp	r3, #0
 8010400:	d00c      	beq.n	801041c <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8010402:	687b      	ldr	r3, [r7, #4]
 8010404:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8010406:	687b      	ldr	r3, [r7, #4]
 8010408:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801040a:	68db      	ldr	r3, [r3, #12]
 801040c:	685b      	ldr	r3, [r3, #4]
 801040e:	4618      	mov	r0, r3
 8010410:	f7fa fe35 	bl	800b07e <lwip_htonl>
 8010414:	4603      	mov	r3, r0
 8010416:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8010418:	2b00      	cmp	r3, #0
 801041a:	dc20      	bgt.n	801045e <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 801041c:	687b      	ldr	r3, [r7, #4]
 801041e:	8b5b      	ldrh	r3, [r3, #26]
 8010420:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8010424:	b29a      	uxth	r2, r3
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801042a:	e018      	b.n	801045e <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 801042c:	687b      	ldr	r3, [r7, #4]
 801042e:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8010430:	687b      	ldr	r3, [r7, #4]
 8010432:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010434:	68db      	ldr	r3, [r3, #12]
 8010436:	685b      	ldr	r3, [r3, #4]
 8010438:	4618      	mov	r0, r3
 801043a:	f7fa fe20 	bl	800b07e <lwip_htonl>
 801043e:	4603      	mov	r3, r0
 8010440:	1ae3      	subs	r3, r4, r3
 8010442:	2b00      	cmp	r3, #0
 8010444:	dc0b      	bgt.n	801045e <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8010446:	687b      	ldr	r3, [r7, #4]
 8010448:	8b5b      	ldrh	r3, [r3, #26]
 801044a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 801044e:	b29a      	uxth	r2, r3
 8010450:	687b      	ldr	r3, [r7, #4]
 8010452:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010454:	e003      	b.n	801045e <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8010456:	6878      	ldr	r0, [r7, #4]
 8010458:	f002 fbc8 	bl	8012bec <tcp_send_empty_ack>
 801045c:	e000      	b.n	8010460 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801045e:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010464:	2b00      	cmp	r3, #0
 8010466:	d05b      	beq.n	8010520 <tcp_receive+0x50c>
 8010468:	687b      	ldr	r3, [r7, #4]
 801046a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801046c:	4b60      	ldr	r3, [pc, #384]	@ (80105f0 <tcp_receive+0x5dc>)
 801046e:	681b      	ldr	r3, [r3, #0]
 8010470:	1ad3      	subs	r3, r2, r3
 8010472:	2b00      	cmp	r3, #0
 8010474:	da54      	bge.n	8010520 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8010476:	4b5f      	ldr	r3, [pc, #380]	@ (80105f4 <tcp_receive+0x5e0>)
 8010478:	681b      	ldr	r3, [r3, #0]
 801047a:	b29a      	uxth	r2, r3
 801047c:	687b      	ldr	r3, [r7, #4]
 801047e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010480:	b29b      	uxth	r3, r3
 8010482:	1ad3      	subs	r3, r2, r3
 8010484:	b29b      	uxth	r3, r3
 8010486:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 801048a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 801048e:	687b      	ldr	r3, [r7, #4]
 8010490:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8010494:	10db      	asrs	r3, r3, #3
 8010496:	b21b      	sxth	r3, r3
 8010498:	b29b      	uxth	r3, r3
 801049a:	1ad3      	subs	r3, r2, r3
 801049c:	b29b      	uxth	r3, r3
 801049e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 80104a2:	687b      	ldr	r3, [r7, #4]
 80104a4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80104a8:	b29a      	uxth	r2, r3
 80104aa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80104ae:	4413      	add	r3, r2
 80104b0:	b29b      	uxth	r3, r3
 80104b2:	b21a      	sxth	r2, r3
 80104b4:	687b      	ldr	r3, [r7, #4]
 80104b6:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 80104b8:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 80104bc:	2b00      	cmp	r3, #0
 80104be:	da05      	bge.n	80104cc <tcp_receive+0x4b8>
        m = (s16_t) - m;
 80104c0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80104c4:	425b      	negs	r3, r3
 80104c6:	b29b      	uxth	r3, r3
 80104c8:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 80104cc:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 80104d0:	687b      	ldr	r3, [r7, #4]
 80104d2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80104d6:	109b      	asrs	r3, r3, #2
 80104d8:	b21b      	sxth	r3, r3
 80104da:	b29b      	uxth	r3, r3
 80104dc:	1ad3      	subs	r3, r2, r3
 80104de:	b29b      	uxth	r3, r3
 80104e0:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 80104e4:	687b      	ldr	r3, [r7, #4]
 80104e6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80104ea:	b29a      	uxth	r2, r3
 80104ec:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80104f0:	4413      	add	r3, r2
 80104f2:	b29b      	uxth	r3, r3
 80104f4:	b21a      	sxth	r2, r3
 80104f6:	687b      	ldr	r3, [r7, #4]
 80104f8:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80104fa:	687b      	ldr	r3, [r7, #4]
 80104fc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8010500:	10db      	asrs	r3, r3, #3
 8010502:	b21b      	sxth	r3, r3
 8010504:	b29a      	uxth	r2, r3
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 801050c:	b29b      	uxth	r3, r3
 801050e:	4413      	add	r3, r2
 8010510:	b29b      	uxth	r3, r3
 8010512:	b21a      	sxth	r2, r3
 8010514:	687b      	ldr	r3, [r7, #4]
 8010516:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 801051a:	687b      	ldr	r3, [r7, #4]
 801051c:	2200      	movs	r2, #0
 801051e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8010520:	4b35      	ldr	r3, [pc, #212]	@ (80105f8 <tcp_receive+0x5e4>)
 8010522:	881b      	ldrh	r3, [r3, #0]
 8010524:	2b00      	cmp	r3, #0
 8010526:	f000 84df 	beq.w	8010ee8 <tcp_receive+0xed4>
 801052a:	687b      	ldr	r3, [r7, #4]
 801052c:	7d1b      	ldrb	r3, [r3, #20]
 801052e:	2b06      	cmp	r3, #6
 8010530:	f200 84da 	bhi.w	8010ee8 <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010538:	4b30      	ldr	r3, [pc, #192]	@ (80105fc <tcp_receive+0x5e8>)
 801053a:	681b      	ldr	r3, [r3, #0]
 801053c:	1ad3      	subs	r3, r2, r3
 801053e:	3b01      	subs	r3, #1
 8010540:	2b00      	cmp	r3, #0
 8010542:	f2c0 808f 	blt.w	8010664 <tcp_receive+0x650>
 8010546:	687b      	ldr	r3, [r7, #4]
 8010548:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801054a:	4b2b      	ldr	r3, [pc, #172]	@ (80105f8 <tcp_receive+0x5e4>)
 801054c:	881b      	ldrh	r3, [r3, #0]
 801054e:	4619      	mov	r1, r3
 8010550:	4b2a      	ldr	r3, [pc, #168]	@ (80105fc <tcp_receive+0x5e8>)
 8010552:	681b      	ldr	r3, [r3, #0]
 8010554:	440b      	add	r3, r1
 8010556:	1ad3      	subs	r3, r2, r3
 8010558:	3301      	adds	r3, #1
 801055a:	2b00      	cmp	r3, #0
 801055c:	f300 8082 	bgt.w	8010664 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8010560:	4b27      	ldr	r3, [pc, #156]	@ (8010600 <tcp_receive+0x5ec>)
 8010562:	685b      	ldr	r3, [r3, #4]
 8010564:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801056a:	4b24      	ldr	r3, [pc, #144]	@ (80105fc <tcp_receive+0x5e8>)
 801056c:	681b      	ldr	r3, [r3, #0]
 801056e:	1ad3      	subs	r3, r2, r3
 8010570:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8010572:	4b23      	ldr	r3, [pc, #140]	@ (8010600 <tcp_receive+0x5ec>)
 8010574:	685b      	ldr	r3, [r3, #4]
 8010576:	2b00      	cmp	r3, #0
 8010578:	d106      	bne.n	8010588 <tcp_receive+0x574>
 801057a:	4b22      	ldr	r3, [pc, #136]	@ (8010604 <tcp_receive+0x5f0>)
 801057c:	f240 5294 	movw	r2, #1428	@ 0x594
 8010580:	4921      	ldr	r1, [pc, #132]	@ (8010608 <tcp_receive+0x5f4>)
 8010582:	4822      	ldr	r0, [pc, #136]	@ (801060c <tcp_receive+0x5f8>)
 8010584:	f005 fec4 	bl	8016310 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8010588:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801058a:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801058e:	4293      	cmp	r3, r2
 8010590:	d906      	bls.n	80105a0 <tcp_receive+0x58c>
 8010592:	4b1c      	ldr	r3, [pc, #112]	@ (8010604 <tcp_receive+0x5f0>)
 8010594:	f240 5295 	movw	r2, #1429	@ 0x595
 8010598:	491d      	ldr	r1, [pc, #116]	@ (8010610 <tcp_receive+0x5fc>)
 801059a:	481c      	ldr	r0, [pc, #112]	@ (801060c <tcp_receive+0x5f8>)
 801059c:	f005 feb8 	bl	8016310 <iprintf>
      off = (u16_t)off32;
 80105a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80105a2:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 80105a6:	4b16      	ldr	r3, [pc, #88]	@ (8010600 <tcp_receive+0x5ec>)
 80105a8:	685b      	ldr	r3, [r3, #4]
 80105aa:	891b      	ldrh	r3, [r3, #8]
 80105ac:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80105b0:	429a      	cmp	r2, r3
 80105b2:	d906      	bls.n	80105c2 <tcp_receive+0x5ae>
 80105b4:	4b13      	ldr	r3, [pc, #76]	@ (8010604 <tcp_receive+0x5f0>)
 80105b6:	f240 5297 	movw	r2, #1431	@ 0x597
 80105ba:	4916      	ldr	r1, [pc, #88]	@ (8010614 <tcp_receive+0x600>)
 80105bc:	4813      	ldr	r0, [pc, #76]	@ (801060c <tcp_receive+0x5f8>)
 80105be:	f005 fea7 	bl	8016310 <iprintf>
      inseg.len -= off;
 80105c2:	4b0f      	ldr	r3, [pc, #60]	@ (8010600 <tcp_receive+0x5ec>)
 80105c4:	891a      	ldrh	r2, [r3, #8]
 80105c6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80105ca:	1ad3      	subs	r3, r2, r3
 80105cc:	b29a      	uxth	r2, r3
 80105ce:	4b0c      	ldr	r3, [pc, #48]	@ (8010600 <tcp_receive+0x5ec>)
 80105d0:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 80105d2:	4b0b      	ldr	r3, [pc, #44]	@ (8010600 <tcp_receive+0x5ec>)
 80105d4:	685b      	ldr	r3, [r3, #4]
 80105d6:	891a      	ldrh	r2, [r3, #8]
 80105d8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80105dc:	1ad3      	subs	r3, r2, r3
 80105de:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 80105e0:	e02a      	b.n	8010638 <tcp_receive+0x624>
 80105e2:	bf00      	nop
 80105e4:	08019928 	.word	0x08019928
 80105e8:	08019930 	.word	0x08019930
 80105ec:	2000eb84 	.word	0x2000eb84
 80105f0:	2000eb80 	.word	0x2000eb80
 80105f4:	2000eb44 	.word	0x2000eb44
 80105f8:	2000eb86 	.word	0x2000eb86
 80105fc:	2000eb7c 	.word	0x2000eb7c
 8010600:	2000eb5c 	.word	0x2000eb5c
 8010604:	080195c0 	.word	0x080195c0
 8010608:	08019938 	.word	0x08019938
 801060c:	0801960c 	.word	0x0801960c
 8010610:	08019948 	.word	0x08019948
 8010614:	08019958 	.word	0x08019958
        off -= p->len;
 8010618:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801061a:	895b      	ldrh	r3, [r3, #10]
 801061c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8010620:	1ad3      	subs	r3, r2, r3
 8010622:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8010626:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010628:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 801062a:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 801062c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801062e:	2200      	movs	r2, #0
 8010630:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8010632:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010634:	681b      	ldr	r3, [r3, #0]
 8010636:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 8010638:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801063a:	895b      	ldrh	r3, [r3, #10]
 801063c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8010640:	429a      	cmp	r2, r3
 8010642:	d8e9      	bhi.n	8010618 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8010644:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8010648:	4619      	mov	r1, r3
 801064a:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 801064c:	f7fc f86e 	bl	800c72c <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8010650:	687b      	ldr	r3, [r7, #4]
 8010652:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010654:	4a90      	ldr	r2, [pc, #576]	@ (8010898 <tcp_receive+0x884>)
 8010656:	6013      	str	r3, [r2, #0]
 8010658:	4b90      	ldr	r3, [pc, #576]	@ (801089c <tcp_receive+0x888>)
 801065a:	68db      	ldr	r3, [r3, #12]
 801065c:	4a8e      	ldr	r2, [pc, #568]	@ (8010898 <tcp_receive+0x884>)
 801065e:	6812      	ldr	r2, [r2, #0]
 8010660:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8010662:	e00d      	b.n	8010680 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8010664:	4b8c      	ldr	r3, [pc, #560]	@ (8010898 <tcp_receive+0x884>)
 8010666:	681a      	ldr	r2, [r3, #0]
 8010668:	687b      	ldr	r3, [r7, #4]
 801066a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801066c:	1ad3      	subs	r3, r2, r3
 801066e:	2b00      	cmp	r3, #0
 8010670:	da06      	bge.n	8010680 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8010672:	687b      	ldr	r3, [r7, #4]
 8010674:	8b5b      	ldrh	r3, [r3, #26]
 8010676:	f043 0302 	orr.w	r3, r3, #2
 801067a:	b29a      	uxth	r2, r3
 801067c:	687b      	ldr	r3, [r7, #4]
 801067e:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8010680:	4b85      	ldr	r3, [pc, #532]	@ (8010898 <tcp_receive+0x884>)
 8010682:	681a      	ldr	r2, [r3, #0]
 8010684:	687b      	ldr	r3, [r7, #4]
 8010686:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010688:	1ad3      	subs	r3, r2, r3
 801068a:	2b00      	cmp	r3, #0
 801068c:	f2c0 8427 	blt.w	8010ede <tcp_receive+0xeca>
 8010690:	4b81      	ldr	r3, [pc, #516]	@ (8010898 <tcp_receive+0x884>)
 8010692:	681a      	ldr	r2, [r3, #0]
 8010694:	687b      	ldr	r3, [r7, #4]
 8010696:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010698:	6879      	ldr	r1, [r7, #4]
 801069a:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801069c:	440b      	add	r3, r1
 801069e:	1ad3      	subs	r3, r2, r3
 80106a0:	3301      	adds	r3, #1
 80106a2:	2b00      	cmp	r3, #0
 80106a4:	f300 841b 	bgt.w	8010ede <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 80106a8:	687b      	ldr	r3, [r7, #4]
 80106aa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80106ac:	4b7a      	ldr	r3, [pc, #488]	@ (8010898 <tcp_receive+0x884>)
 80106ae:	681b      	ldr	r3, [r3, #0]
 80106b0:	429a      	cmp	r2, r3
 80106b2:	f040 8298 	bne.w	8010be6 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 80106b6:	4b79      	ldr	r3, [pc, #484]	@ (801089c <tcp_receive+0x888>)
 80106b8:	891c      	ldrh	r4, [r3, #8]
 80106ba:	4b78      	ldr	r3, [pc, #480]	@ (801089c <tcp_receive+0x888>)
 80106bc:	68db      	ldr	r3, [r3, #12]
 80106be:	899b      	ldrh	r3, [r3, #12]
 80106c0:	b29b      	uxth	r3, r3
 80106c2:	4618      	mov	r0, r3
 80106c4:	f7fa fcc6 	bl	800b054 <lwip_htons>
 80106c8:	4603      	mov	r3, r0
 80106ca:	b2db      	uxtb	r3, r3
 80106cc:	f003 0303 	and.w	r3, r3, #3
 80106d0:	2b00      	cmp	r3, #0
 80106d2:	d001      	beq.n	80106d8 <tcp_receive+0x6c4>
 80106d4:	2301      	movs	r3, #1
 80106d6:	e000      	b.n	80106da <tcp_receive+0x6c6>
 80106d8:	2300      	movs	r3, #0
 80106da:	4423      	add	r3, r4
 80106dc:	b29a      	uxth	r2, r3
 80106de:	4b70      	ldr	r3, [pc, #448]	@ (80108a0 <tcp_receive+0x88c>)
 80106e0:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 80106e2:	687b      	ldr	r3, [r7, #4]
 80106e4:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80106e6:	4b6e      	ldr	r3, [pc, #440]	@ (80108a0 <tcp_receive+0x88c>)
 80106e8:	881b      	ldrh	r3, [r3, #0]
 80106ea:	429a      	cmp	r2, r3
 80106ec:	d274      	bcs.n	80107d8 <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80106ee:	4b6b      	ldr	r3, [pc, #428]	@ (801089c <tcp_receive+0x888>)
 80106f0:	68db      	ldr	r3, [r3, #12]
 80106f2:	899b      	ldrh	r3, [r3, #12]
 80106f4:	b29b      	uxth	r3, r3
 80106f6:	4618      	mov	r0, r3
 80106f8:	f7fa fcac 	bl	800b054 <lwip_htons>
 80106fc:	4603      	mov	r3, r0
 80106fe:	b2db      	uxtb	r3, r3
 8010700:	f003 0301 	and.w	r3, r3, #1
 8010704:	2b00      	cmp	r3, #0
 8010706:	d01e      	beq.n	8010746 <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8010708:	4b64      	ldr	r3, [pc, #400]	@ (801089c <tcp_receive+0x888>)
 801070a:	68db      	ldr	r3, [r3, #12]
 801070c:	899b      	ldrh	r3, [r3, #12]
 801070e:	b29b      	uxth	r3, r3
 8010710:	b21b      	sxth	r3, r3
 8010712:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8010716:	b21c      	sxth	r4, r3
 8010718:	4b60      	ldr	r3, [pc, #384]	@ (801089c <tcp_receive+0x888>)
 801071a:	68db      	ldr	r3, [r3, #12]
 801071c:	899b      	ldrh	r3, [r3, #12]
 801071e:	b29b      	uxth	r3, r3
 8010720:	4618      	mov	r0, r3
 8010722:	f7fa fc97 	bl	800b054 <lwip_htons>
 8010726:	4603      	mov	r3, r0
 8010728:	b2db      	uxtb	r3, r3
 801072a:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 801072e:	b29b      	uxth	r3, r3
 8010730:	4618      	mov	r0, r3
 8010732:	f7fa fc8f 	bl	800b054 <lwip_htons>
 8010736:	4603      	mov	r3, r0
 8010738:	b21b      	sxth	r3, r3
 801073a:	4323      	orrs	r3, r4
 801073c:	b21a      	sxth	r2, r3
 801073e:	4b57      	ldr	r3, [pc, #348]	@ (801089c <tcp_receive+0x888>)
 8010740:	68db      	ldr	r3, [r3, #12]
 8010742:	b292      	uxth	r2, r2
 8010744:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8010746:	687b      	ldr	r3, [r7, #4]
 8010748:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801074a:	4b54      	ldr	r3, [pc, #336]	@ (801089c <tcp_receive+0x888>)
 801074c:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801074e:	4b53      	ldr	r3, [pc, #332]	@ (801089c <tcp_receive+0x888>)
 8010750:	68db      	ldr	r3, [r3, #12]
 8010752:	899b      	ldrh	r3, [r3, #12]
 8010754:	b29b      	uxth	r3, r3
 8010756:	4618      	mov	r0, r3
 8010758:	f7fa fc7c 	bl	800b054 <lwip_htons>
 801075c:	4603      	mov	r3, r0
 801075e:	b2db      	uxtb	r3, r3
 8010760:	f003 0302 	and.w	r3, r3, #2
 8010764:	2b00      	cmp	r3, #0
 8010766:	d005      	beq.n	8010774 <tcp_receive+0x760>
            inseg.len -= 1;
 8010768:	4b4c      	ldr	r3, [pc, #304]	@ (801089c <tcp_receive+0x888>)
 801076a:	891b      	ldrh	r3, [r3, #8]
 801076c:	3b01      	subs	r3, #1
 801076e:	b29a      	uxth	r2, r3
 8010770:	4b4a      	ldr	r3, [pc, #296]	@ (801089c <tcp_receive+0x888>)
 8010772:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8010774:	4b49      	ldr	r3, [pc, #292]	@ (801089c <tcp_receive+0x888>)
 8010776:	685b      	ldr	r3, [r3, #4]
 8010778:	4a48      	ldr	r2, [pc, #288]	@ (801089c <tcp_receive+0x888>)
 801077a:	8912      	ldrh	r2, [r2, #8]
 801077c:	4611      	mov	r1, r2
 801077e:	4618      	mov	r0, r3
 8010780:	f7fb fed4 	bl	800c52c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8010784:	4b45      	ldr	r3, [pc, #276]	@ (801089c <tcp_receive+0x888>)
 8010786:	891c      	ldrh	r4, [r3, #8]
 8010788:	4b44      	ldr	r3, [pc, #272]	@ (801089c <tcp_receive+0x888>)
 801078a:	68db      	ldr	r3, [r3, #12]
 801078c:	899b      	ldrh	r3, [r3, #12]
 801078e:	b29b      	uxth	r3, r3
 8010790:	4618      	mov	r0, r3
 8010792:	f7fa fc5f 	bl	800b054 <lwip_htons>
 8010796:	4603      	mov	r3, r0
 8010798:	b2db      	uxtb	r3, r3
 801079a:	f003 0303 	and.w	r3, r3, #3
 801079e:	2b00      	cmp	r3, #0
 80107a0:	d001      	beq.n	80107a6 <tcp_receive+0x792>
 80107a2:	2301      	movs	r3, #1
 80107a4:	e000      	b.n	80107a8 <tcp_receive+0x794>
 80107a6:	2300      	movs	r3, #0
 80107a8:	4423      	add	r3, r4
 80107aa:	b29a      	uxth	r2, r3
 80107ac:	4b3c      	ldr	r3, [pc, #240]	@ (80108a0 <tcp_receive+0x88c>)
 80107ae:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80107b0:	4b3b      	ldr	r3, [pc, #236]	@ (80108a0 <tcp_receive+0x88c>)
 80107b2:	881b      	ldrh	r3, [r3, #0]
 80107b4:	461a      	mov	r2, r3
 80107b6:	4b38      	ldr	r3, [pc, #224]	@ (8010898 <tcp_receive+0x884>)
 80107b8:	681b      	ldr	r3, [r3, #0]
 80107ba:	441a      	add	r2, r3
 80107bc:	687b      	ldr	r3, [r7, #4]
 80107be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80107c0:	6879      	ldr	r1, [r7, #4]
 80107c2:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80107c4:	440b      	add	r3, r1
 80107c6:	429a      	cmp	r2, r3
 80107c8:	d006      	beq.n	80107d8 <tcp_receive+0x7c4>
 80107ca:	4b36      	ldr	r3, [pc, #216]	@ (80108a4 <tcp_receive+0x890>)
 80107cc:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 80107d0:	4935      	ldr	r1, [pc, #212]	@ (80108a8 <tcp_receive+0x894>)
 80107d2:	4836      	ldr	r0, [pc, #216]	@ (80108ac <tcp_receive+0x898>)
 80107d4:	f005 fd9c 	bl	8016310 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 80107d8:	687b      	ldr	r3, [r7, #4]
 80107da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80107dc:	2b00      	cmp	r3, #0
 80107de:	f000 80e6 	beq.w	80109ae <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80107e2:	4b2e      	ldr	r3, [pc, #184]	@ (801089c <tcp_receive+0x888>)
 80107e4:	68db      	ldr	r3, [r3, #12]
 80107e6:	899b      	ldrh	r3, [r3, #12]
 80107e8:	b29b      	uxth	r3, r3
 80107ea:	4618      	mov	r0, r3
 80107ec:	f7fa fc32 	bl	800b054 <lwip_htons>
 80107f0:	4603      	mov	r3, r0
 80107f2:	b2db      	uxtb	r3, r3
 80107f4:	f003 0301 	and.w	r3, r3, #1
 80107f8:	2b00      	cmp	r3, #0
 80107fa:	d010      	beq.n	801081e <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 80107fc:	e00a      	b.n	8010814 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 80107fe:	687b      	ldr	r3, [r7, #4]
 8010800:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010802:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8010804:	687b      	ldr	r3, [r7, #4]
 8010806:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010808:	681a      	ldr	r2, [r3, #0]
 801080a:	687b      	ldr	r3, [r7, #4]
 801080c:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 801080e:	68f8      	ldr	r0, [r7, #12]
 8010810:	f7fd fcbd 	bl	800e18e <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8010814:	687b      	ldr	r3, [r7, #4]
 8010816:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010818:	2b00      	cmp	r3, #0
 801081a:	d1f0      	bne.n	80107fe <tcp_receive+0x7ea>
 801081c:	e0c7      	b.n	80109ae <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 801081e:	687b      	ldr	r3, [r7, #4]
 8010820:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010822:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8010824:	e051      	b.n	80108ca <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8010826:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010828:	68db      	ldr	r3, [r3, #12]
 801082a:	899b      	ldrh	r3, [r3, #12]
 801082c:	b29b      	uxth	r3, r3
 801082e:	4618      	mov	r0, r3
 8010830:	f7fa fc10 	bl	800b054 <lwip_htons>
 8010834:	4603      	mov	r3, r0
 8010836:	b2db      	uxtb	r3, r3
 8010838:	f003 0301 	and.w	r3, r3, #1
 801083c:	2b00      	cmp	r3, #0
 801083e:	d03c      	beq.n	80108ba <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8010840:	4b16      	ldr	r3, [pc, #88]	@ (801089c <tcp_receive+0x888>)
 8010842:	68db      	ldr	r3, [r3, #12]
 8010844:	899b      	ldrh	r3, [r3, #12]
 8010846:	b29b      	uxth	r3, r3
 8010848:	4618      	mov	r0, r3
 801084a:	f7fa fc03 	bl	800b054 <lwip_htons>
 801084e:	4603      	mov	r3, r0
 8010850:	b2db      	uxtb	r3, r3
 8010852:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8010856:	2b00      	cmp	r3, #0
 8010858:	d12f      	bne.n	80108ba <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 801085a:	4b10      	ldr	r3, [pc, #64]	@ (801089c <tcp_receive+0x888>)
 801085c:	68db      	ldr	r3, [r3, #12]
 801085e:	899b      	ldrh	r3, [r3, #12]
 8010860:	b29c      	uxth	r4, r3
 8010862:	2001      	movs	r0, #1
 8010864:	f7fa fbf6 	bl	800b054 <lwip_htons>
 8010868:	4603      	mov	r3, r0
 801086a:	461a      	mov	r2, r3
 801086c:	4b0b      	ldr	r3, [pc, #44]	@ (801089c <tcp_receive+0x888>)
 801086e:	68db      	ldr	r3, [r3, #12]
 8010870:	4322      	orrs	r2, r4
 8010872:	b292      	uxth	r2, r2
 8010874:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8010876:	4b09      	ldr	r3, [pc, #36]	@ (801089c <tcp_receive+0x888>)
 8010878:	891c      	ldrh	r4, [r3, #8]
 801087a:	4b08      	ldr	r3, [pc, #32]	@ (801089c <tcp_receive+0x888>)
 801087c:	68db      	ldr	r3, [r3, #12]
 801087e:	899b      	ldrh	r3, [r3, #12]
 8010880:	b29b      	uxth	r3, r3
 8010882:	4618      	mov	r0, r3
 8010884:	f7fa fbe6 	bl	800b054 <lwip_htons>
 8010888:	4603      	mov	r3, r0
 801088a:	b2db      	uxtb	r3, r3
 801088c:	f003 0303 	and.w	r3, r3, #3
 8010890:	2b00      	cmp	r3, #0
 8010892:	d00d      	beq.n	80108b0 <tcp_receive+0x89c>
 8010894:	2301      	movs	r3, #1
 8010896:	e00c      	b.n	80108b2 <tcp_receive+0x89e>
 8010898:	2000eb7c 	.word	0x2000eb7c
 801089c:	2000eb5c 	.word	0x2000eb5c
 80108a0:	2000eb86 	.word	0x2000eb86
 80108a4:	080195c0 	.word	0x080195c0
 80108a8:	08019968 	.word	0x08019968
 80108ac:	0801960c 	.word	0x0801960c
 80108b0:	2300      	movs	r3, #0
 80108b2:	4423      	add	r3, r4
 80108b4:	b29a      	uxth	r2, r3
 80108b6:	4b98      	ldr	r3, [pc, #608]	@ (8010b18 <tcp_receive+0xb04>)
 80108b8:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 80108ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80108bc:	613b      	str	r3, [r7, #16]
              next = next->next;
 80108be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80108c0:	681b      	ldr	r3, [r3, #0]
 80108c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 80108c4:	6938      	ldr	r0, [r7, #16]
 80108c6:	f7fd fc62 	bl	800e18e <tcp_seg_free>
            while (next &&
 80108ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80108cc:	2b00      	cmp	r3, #0
 80108ce:	d00e      	beq.n	80108ee <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 80108d0:	4b91      	ldr	r3, [pc, #580]	@ (8010b18 <tcp_receive+0xb04>)
 80108d2:	881b      	ldrh	r3, [r3, #0]
 80108d4:	461a      	mov	r2, r3
 80108d6:	4b91      	ldr	r3, [pc, #580]	@ (8010b1c <tcp_receive+0xb08>)
 80108d8:	681b      	ldr	r3, [r3, #0]
 80108da:	441a      	add	r2, r3
 80108dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80108de:	68db      	ldr	r3, [r3, #12]
 80108e0:	685b      	ldr	r3, [r3, #4]
 80108e2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80108e4:	8909      	ldrh	r1, [r1, #8]
 80108e6:	440b      	add	r3, r1
 80108e8:	1ad3      	subs	r3, r2, r3
            while (next &&
 80108ea:	2b00      	cmp	r3, #0
 80108ec:	da9b      	bge.n	8010826 <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 80108ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80108f0:	2b00      	cmp	r3, #0
 80108f2:	d059      	beq.n	80109a8 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 80108f4:	4b88      	ldr	r3, [pc, #544]	@ (8010b18 <tcp_receive+0xb04>)
 80108f6:	881b      	ldrh	r3, [r3, #0]
 80108f8:	461a      	mov	r2, r3
 80108fa:	4b88      	ldr	r3, [pc, #544]	@ (8010b1c <tcp_receive+0xb08>)
 80108fc:	681b      	ldr	r3, [r3, #0]
 80108fe:	441a      	add	r2, r3
 8010900:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010902:	68db      	ldr	r3, [r3, #12]
 8010904:	685b      	ldr	r3, [r3, #4]
 8010906:	1ad3      	subs	r3, r2, r3
            if (next &&
 8010908:	2b00      	cmp	r3, #0
 801090a:	dd4d      	ble.n	80109a8 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 801090c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801090e:	68db      	ldr	r3, [r3, #12]
 8010910:	685b      	ldr	r3, [r3, #4]
 8010912:	b29a      	uxth	r2, r3
 8010914:	4b81      	ldr	r3, [pc, #516]	@ (8010b1c <tcp_receive+0xb08>)
 8010916:	681b      	ldr	r3, [r3, #0]
 8010918:	b29b      	uxth	r3, r3
 801091a:	1ad3      	subs	r3, r2, r3
 801091c:	b29a      	uxth	r2, r3
 801091e:	4b80      	ldr	r3, [pc, #512]	@ (8010b20 <tcp_receive+0xb0c>)
 8010920:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8010922:	4b7f      	ldr	r3, [pc, #508]	@ (8010b20 <tcp_receive+0xb0c>)
 8010924:	68db      	ldr	r3, [r3, #12]
 8010926:	899b      	ldrh	r3, [r3, #12]
 8010928:	b29b      	uxth	r3, r3
 801092a:	4618      	mov	r0, r3
 801092c:	f7fa fb92 	bl	800b054 <lwip_htons>
 8010930:	4603      	mov	r3, r0
 8010932:	b2db      	uxtb	r3, r3
 8010934:	f003 0302 	and.w	r3, r3, #2
 8010938:	2b00      	cmp	r3, #0
 801093a:	d005      	beq.n	8010948 <tcp_receive+0x934>
                inseg.len -= 1;
 801093c:	4b78      	ldr	r3, [pc, #480]	@ (8010b20 <tcp_receive+0xb0c>)
 801093e:	891b      	ldrh	r3, [r3, #8]
 8010940:	3b01      	subs	r3, #1
 8010942:	b29a      	uxth	r2, r3
 8010944:	4b76      	ldr	r3, [pc, #472]	@ (8010b20 <tcp_receive+0xb0c>)
 8010946:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8010948:	4b75      	ldr	r3, [pc, #468]	@ (8010b20 <tcp_receive+0xb0c>)
 801094a:	685b      	ldr	r3, [r3, #4]
 801094c:	4a74      	ldr	r2, [pc, #464]	@ (8010b20 <tcp_receive+0xb0c>)
 801094e:	8912      	ldrh	r2, [r2, #8]
 8010950:	4611      	mov	r1, r2
 8010952:	4618      	mov	r0, r3
 8010954:	f7fb fdea 	bl	800c52c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8010958:	4b71      	ldr	r3, [pc, #452]	@ (8010b20 <tcp_receive+0xb0c>)
 801095a:	891c      	ldrh	r4, [r3, #8]
 801095c:	4b70      	ldr	r3, [pc, #448]	@ (8010b20 <tcp_receive+0xb0c>)
 801095e:	68db      	ldr	r3, [r3, #12]
 8010960:	899b      	ldrh	r3, [r3, #12]
 8010962:	b29b      	uxth	r3, r3
 8010964:	4618      	mov	r0, r3
 8010966:	f7fa fb75 	bl	800b054 <lwip_htons>
 801096a:	4603      	mov	r3, r0
 801096c:	b2db      	uxtb	r3, r3
 801096e:	f003 0303 	and.w	r3, r3, #3
 8010972:	2b00      	cmp	r3, #0
 8010974:	d001      	beq.n	801097a <tcp_receive+0x966>
 8010976:	2301      	movs	r3, #1
 8010978:	e000      	b.n	801097c <tcp_receive+0x968>
 801097a:	2300      	movs	r3, #0
 801097c:	4423      	add	r3, r4
 801097e:	b29a      	uxth	r2, r3
 8010980:	4b65      	ldr	r3, [pc, #404]	@ (8010b18 <tcp_receive+0xb04>)
 8010982:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8010984:	4b64      	ldr	r3, [pc, #400]	@ (8010b18 <tcp_receive+0xb04>)
 8010986:	881b      	ldrh	r3, [r3, #0]
 8010988:	461a      	mov	r2, r3
 801098a:	4b64      	ldr	r3, [pc, #400]	@ (8010b1c <tcp_receive+0xb08>)
 801098c:	681b      	ldr	r3, [r3, #0]
 801098e:	441a      	add	r2, r3
 8010990:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010992:	68db      	ldr	r3, [r3, #12]
 8010994:	685b      	ldr	r3, [r3, #4]
 8010996:	429a      	cmp	r2, r3
 8010998:	d006      	beq.n	80109a8 <tcp_receive+0x994>
 801099a:	4b62      	ldr	r3, [pc, #392]	@ (8010b24 <tcp_receive+0xb10>)
 801099c:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 80109a0:	4961      	ldr	r1, [pc, #388]	@ (8010b28 <tcp_receive+0xb14>)
 80109a2:	4862      	ldr	r0, [pc, #392]	@ (8010b2c <tcp_receive+0xb18>)
 80109a4:	f005 fcb4 	bl	8016310 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 80109a8:	687b      	ldr	r3, [r7, #4]
 80109aa:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80109ac:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 80109ae:	4b5a      	ldr	r3, [pc, #360]	@ (8010b18 <tcp_receive+0xb04>)
 80109b0:	881b      	ldrh	r3, [r3, #0]
 80109b2:	461a      	mov	r2, r3
 80109b4:	4b59      	ldr	r3, [pc, #356]	@ (8010b1c <tcp_receive+0xb08>)
 80109b6:	681b      	ldr	r3, [r3, #0]
 80109b8:	441a      	add	r2, r3
 80109ba:	687b      	ldr	r3, [r7, #4]
 80109bc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 80109be:	687b      	ldr	r3, [r7, #4]
 80109c0:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80109c2:	4b55      	ldr	r3, [pc, #340]	@ (8010b18 <tcp_receive+0xb04>)
 80109c4:	881b      	ldrh	r3, [r3, #0]
 80109c6:	429a      	cmp	r2, r3
 80109c8:	d206      	bcs.n	80109d8 <tcp_receive+0x9c4>
 80109ca:	4b56      	ldr	r3, [pc, #344]	@ (8010b24 <tcp_receive+0xb10>)
 80109cc:	f240 6207 	movw	r2, #1543	@ 0x607
 80109d0:	4957      	ldr	r1, [pc, #348]	@ (8010b30 <tcp_receive+0xb1c>)
 80109d2:	4856      	ldr	r0, [pc, #344]	@ (8010b2c <tcp_receive+0xb18>)
 80109d4:	f005 fc9c 	bl	8016310 <iprintf>
        pcb->rcv_wnd -= tcplen;
 80109d8:	687b      	ldr	r3, [r7, #4]
 80109da:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80109dc:	4b4e      	ldr	r3, [pc, #312]	@ (8010b18 <tcp_receive+0xb04>)
 80109de:	881b      	ldrh	r3, [r3, #0]
 80109e0:	1ad3      	subs	r3, r2, r3
 80109e2:	b29a      	uxth	r2, r3
 80109e4:	687b      	ldr	r3, [r7, #4]
 80109e6:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 80109e8:	6878      	ldr	r0, [r7, #4]
 80109ea:	f7fc fea5 	bl	800d738 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 80109ee:	4b4c      	ldr	r3, [pc, #304]	@ (8010b20 <tcp_receive+0xb0c>)
 80109f0:	685b      	ldr	r3, [r3, #4]
 80109f2:	891b      	ldrh	r3, [r3, #8]
 80109f4:	2b00      	cmp	r3, #0
 80109f6:	d006      	beq.n	8010a06 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 80109f8:	4b49      	ldr	r3, [pc, #292]	@ (8010b20 <tcp_receive+0xb0c>)
 80109fa:	685b      	ldr	r3, [r3, #4]
 80109fc:	4a4d      	ldr	r2, [pc, #308]	@ (8010b34 <tcp_receive+0xb20>)
 80109fe:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8010a00:	4b47      	ldr	r3, [pc, #284]	@ (8010b20 <tcp_receive+0xb0c>)
 8010a02:	2200      	movs	r2, #0
 8010a04:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8010a06:	4b46      	ldr	r3, [pc, #280]	@ (8010b20 <tcp_receive+0xb0c>)
 8010a08:	68db      	ldr	r3, [r3, #12]
 8010a0a:	899b      	ldrh	r3, [r3, #12]
 8010a0c:	b29b      	uxth	r3, r3
 8010a0e:	4618      	mov	r0, r3
 8010a10:	f7fa fb20 	bl	800b054 <lwip_htons>
 8010a14:	4603      	mov	r3, r0
 8010a16:	b2db      	uxtb	r3, r3
 8010a18:	f003 0301 	and.w	r3, r3, #1
 8010a1c:	2b00      	cmp	r3, #0
 8010a1e:	f000 80b8 	beq.w	8010b92 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8010a22:	4b45      	ldr	r3, [pc, #276]	@ (8010b38 <tcp_receive+0xb24>)
 8010a24:	781b      	ldrb	r3, [r3, #0]
 8010a26:	f043 0320 	orr.w	r3, r3, #32
 8010a2a:	b2da      	uxtb	r2, r3
 8010a2c:	4b42      	ldr	r3, [pc, #264]	@ (8010b38 <tcp_receive+0xb24>)
 8010a2e:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8010a30:	e0af      	b.n	8010b92 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8010a32:	687b      	ldr	r3, [r7, #4]
 8010a34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010a36:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8010a38:	687b      	ldr	r3, [r7, #4]
 8010a3a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010a3c:	68db      	ldr	r3, [r3, #12]
 8010a3e:	685b      	ldr	r3, [r3, #4]
 8010a40:	4a36      	ldr	r2, [pc, #216]	@ (8010b1c <tcp_receive+0xb08>)
 8010a42:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8010a44:	68bb      	ldr	r3, [r7, #8]
 8010a46:	891b      	ldrh	r3, [r3, #8]
 8010a48:	461c      	mov	r4, r3
 8010a4a:	68bb      	ldr	r3, [r7, #8]
 8010a4c:	68db      	ldr	r3, [r3, #12]
 8010a4e:	899b      	ldrh	r3, [r3, #12]
 8010a50:	b29b      	uxth	r3, r3
 8010a52:	4618      	mov	r0, r3
 8010a54:	f7fa fafe 	bl	800b054 <lwip_htons>
 8010a58:	4603      	mov	r3, r0
 8010a5a:	b2db      	uxtb	r3, r3
 8010a5c:	f003 0303 	and.w	r3, r3, #3
 8010a60:	2b00      	cmp	r3, #0
 8010a62:	d001      	beq.n	8010a68 <tcp_receive+0xa54>
 8010a64:	2301      	movs	r3, #1
 8010a66:	e000      	b.n	8010a6a <tcp_receive+0xa56>
 8010a68:	2300      	movs	r3, #0
 8010a6a:	191a      	adds	r2, r3, r4
 8010a6c:	687b      	ldr	r3, [r7, #4]
 8010a6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010a70:	441a      	add	r2, r3
 8010a72:	687b      	ldr	r3, [r7, #4]
 8010a74:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8010a76:	687b      	ldr	r3, [r7, #4]
 8010a78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010a7a:	461c      	mov	r4, r3
 8010a7c:	68bb      	ldr	r3, [r7, #8]
 8010a7e:	891b      	ldrh	r3, [r3, #8]
 8010a80:	461d      	mov	r5, r3
 8010a82:	68bb      	ldr	r3, [r7, #8]
 8010a84:	68db      	ldr	r3, [r3, #12]
 8010a86:	899b      	ldrh	r3, [r3, #12]
 8010a88:	b29b      	uxth	r3, r3
 8010a8a:	4618      	mov	r0, r3
 8010a8c:	f7fa fae2 	bl	800b054 <lwip_htons>
 8010a90:	4603      	mov	r3, r0
 8010a92:	b2db      	uxtb	r3, r3
 8010a94:	f003 0303 	and.w	r3, r3, #3
 8010a98:	2b00      	cmp	r3, #0
 8010a9a:	d001      	beq.n	8010aa0 <tcp_receive+0xa8c>
 8010a9c:	2301      	movs	r3, #1
 8010a9e:	e000      	b.n	8010aa2 <tcp_receive+0xa8e>
 8010aa0:	2300      	movs	r3, #0
 8010aa2:	442b      	add	r3, r5
 8010aa4:	429c      	cmp	r4, r3
 8010aa6:	d206      	bcs.n	8010ab6 <tcp_receive+0xaa2>
 8010aa8:	4b1e      	ldr	r3, [pc, #120]	@ (8010b24 <tcp_receive+0xb10>)
 8010aaa:	f240 622b 	movw	r2, #1579	@ 0x62b
 8010aae:	4923      	ldr	r1, [pc, #140]	@ (8010b3c <tcp_receive+0xb28>)
 8010ab0:	481e      	ldr	r0, [pc, #120]	@ (8010b2c <tcp_receive+0xb18>)
 8010ab2:	f005 fc2d 	bl	8016310 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8010ab6:	68bb      	ldr	r3, [r7, #8]
 8010ab8:	891b      	ldrh	r3, [r3, #8]
 8010aba:	461c      	mov	r4, r3
 8010abc:	68bb      	ldr	r3, [r7, #8]
 8010abe:	68db      	ldr	r3, [r3, #12]
 8010ac0:	899b      	ldrh	r3, [r3, #12]
 8010ac2:	b29b      	uxth	r3, r3
 8010ac4:	4618      	mov	r0, r3
 8010ac6:	f7fa fac5 	bl	800b054 <lwip_htons>
 8010aca:	4603      	mov	r3, r0
 8010acc:	b2db      	uxtb	r3, r3
 8010ace:	f003 0303 	and.w	r3, r3, #3
 8010ad2:	2b00      	cmp	r3, #0
 8010ad4:	d001      	beq.n	8010ada <tcp_receive+0xac6>
 8010ad6:	2301      	movs	r3, #1
 8010ad8:	e000      	b.n	8010adc <tcp_receive+0xac8>
 8010ada:	2300      	movs	r3, #0
 8010adc:	1919      	adds	r1, r3, r4
 8010ade:	687b      	ldr	r3, [r7, #4]
 8010ae0:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8010ae2:	b28b      	uxth	r3, r1
 8010ae4:	1ad3      	subs	r3, r2, r3
 8010ae6:	b29a      	uxth	r2, r3
 8010ae8:	687b      	ldr	r3, [r7, #4]
 8010aea:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8010aec:	6878      	ldr	r0, [r7, #4]
 8010aee:	f7fc fe23 	bl	800d738 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8010af2:	68bb      	ldr	r3, [r7, #8]
 8010af4:	685b      	ldr	r3, [r3, #4]
 8010af6:	891b      	ldrh	r3, [r3, #8]
 8010af8:	2b00      	cmp	r3, #0
 8010afa:	d028      	beq.n	8010b4e <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8010afc:	4b0d      	ldr	r3, [pc, #52]	@ (8010b34 <tcp_receive+0xb20>)
 8010afe:	681b      	ldr	r3, [r3, #0]
 8010b00:	2b00      	cmp	r3, #0
 8010b02:	d01d      	beq.n	8010b40 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8010b04:	4b0b      	ldr	r3, [pc, #44]	@ (8010b34 <tcp_receive+0xb20>)
 8010b06:	681a      	ldr	r2, [r3, #0]
 8010b08:	68bb      	ldr	r3, [r7, #8]
 8010b0a:	685b      	ldr	r3, [r3, #4]
 8010b0c:	4619      	mov	r1, r3
 8010b0e:	4610      	mov	r0, r2
 8010b10:	f7fb ff60 	bl	800c9d4 <pbuf_cat>
 8010b14:	e018      	b.n	8010b48 <tcp_receive+0xb34>
 8010b16:	bf00      	nop
 8010b18:	2000eb86 	.word	0x2000eb86
 8010b1c:	2000eb7c 	.word	0x2000eb7c
 8010b20:	2000eb5c 	.word	0x2000eb5c
 8010b24:	080195c0 	.word	0x080195c0
 8010b28:	080199a0 	.word	0x080199a0
 8010b2c:	0801960c 	.word	0x0801960c
 8010b30:	080199dc 	.word	0x080199dc
 8010b34:	2000eb8c 	.word	0x2000eb8c
 8010b38:	2000eb89 	.word	0x2000eb89
 8010b3c:	080199fc 	.word	0x080199fc
            } else {
              recv_data = cseg->p;
 8010b40:	68bb      	ldr	r3, [r7, #8]
 8010b42:	685b      	ldr	r3, [r3, #4]
 8010b44:	4a70      	ldr	r2, [pc, #448]	@ (8010d08 <tcp_receive+0xcf4>)
 8010b46:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8010b48:	68bb      	ldr	r3, [r7, #8]
 8010b4a:	2200      	movs	r2, #0
 8010b4c:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8010b4e:	68bb      	ldr	r3, [r7, #8]
 8010b50:	68db      	ldr	r3, [r3, #12]
 8010b52:	899b      	ldrh	r3, [r3, #12]
 8010b54:	b29b      	uxth	r3, r3
 8010b56:	4618      	mov	r0, r3
 8010b58:	f7fa fa7c 	bl	800b054 <lwip_htons>
 8010b5c:	4603      	mov	r3, r0
 8010b5e:	b2db      	uxtb	r3, r3
 8010b60:	f003 0301 	and.w	r3, r3, #1
 8010b64:	2b00      	cmp	r3, #0
 8010b66:	d00d      	beq.n	8010b84 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8010b68:	4b68      	ldr	r3, [pc, #416]	@ (8010d0c <tcp_receive+0xcf8>)
 8010b6a:	781b      	ldrb	r3, [r3, #0]
 8010b6c:	f043 0320 	orr.w	r3, r3, #32
 8010b70:	b2da      	uxtb	r2, r3
 8010b72:	4b66      	ldr	r3, [pc, #408]	@ (8010d0c <tcp_receive+0xcf8>)
 8010b74:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8010b76:	687b      	ldr	r3, [r7, #4]
 8010b78:	7d1b      	ldrb	r3, [r3, #20]
 8010b7a:	2b04      	cmp	r3, #4
 8010b7c:	d102      	bne.n	8010b84 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 8010b7e:	687b      	ldr	r3, [r7, #4]
 8010b80:	2207      	movs	r2, #7
 8010b82:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8010b84:	68bb      	ldr	r3, [r7, #8]
 8010b86:	681a      	ldr	r2, [r3, #0]
 8010b88:	687b      	ldr	r3, [r7, #4]
 8010b8a:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 8010b8c:	68b8      	ldr	r0, [r7, #8]
 8010b8e:	f7fd fafe 	bl	800e18e <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8010b92:	687b      	ldr	r3, [r7, #4]
 8010b94:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010b96:	2b00      	cmp	r3, #0
 8010b98:	d008      	beq.n	8010bac <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8010b9a:	687b      	ldr	r3, [r7, #4]
 8010b9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010b9e:	68db      	ldr	r3, [r3, #12]
 8010ba0:	685a      	ldr	r2, [r3, #4]
 8010ba2:	687b      	ldr	r3, [r7, #4]
 8010ba4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 8010ba6:	429a      	cmp	r2, r3
 8010ba8:	f43f af43 	beq.w	8010a32 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8010bac:	687b      	ldr	r3, [r7, #4]
 8010bae:	8b5b      	ldrh	r3, [r3, #26]
 8010bb0:	f003 0301 	and.w	r3, r3, #1
 8010bb4:	2b00      	cmp	r3, #0
 8010bb6:	d00e      	beq.n	8010bd6 <tcp_receive+0xbc2>
 8010bb8:	687b      	ldr	r3, [r7, #4]
 8010bba:	8b5b      	ldrh	r3, [r3, #26]
 8010bbc:	f023 0301 	bic.w	r3, r3, #1
 8010bc0:	b29a      	uxth	r2, r3
 8010bc2:	687b      	ldr	r3, [r7, #4]
 8010bc4:	835a      	strh	r2, [r3, #26]
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	8b5b      	ldrh	r3, [r3, #26]
 8010bca:	f043 0302 	orr.w	r3, r3, #2
 8010bce:	b29a      	uxth	r2, r3
 8010bd0:	687b      	ldr	r3, [r7, #4]
 8010bd2:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8010bd4:	e187      	b.n	8010ee6 <tcp_receive+0xed2>
        tcp_ack(pcb);
 8010bd6:	687b      	ldr	r3, [r7, #4]
 8010bd8:	8b5b      	ldrh	r3, [r3, #26]
 8010bda:	f043 0301 	orr.w	r3, r3, #1
 8010bde:	b29a      	uxth	r2, r3
 8010be0:	687b      	ldr	r3, [r7, #4]
 8010be2:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8010be4:	e17f      	b.n	8010ee6 <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8010be6:	687b      	ldr	r3, [r7, #4]
 8010be8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010bea:	2b00      	cmp	r3, #0
 8010bec:	d106      	bne.n	8010bfc <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8010bee:	4848      	ldr	r0, [pc, #288]	@ (8010d10 <tcp_receive+0xcfc>)
 8010bf0:	f7fd fae6 	bl	800e1c0 <tcp_seg_copy>
 8010bf4:	4602      	mov	r2, r0
 8010bf6:	687b      	ldr	r3, [r7, #4]
 8010bf8:	675a      	str	r2, [r3, #116]	@ 0x74
 8010bfa:	e16c      	b.n	8010ed6 <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8010bfc:	2300      	movs	r3, #0
 8010bfe:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8010c00:	687b      	ldr	r3, [r7, #4]
 8010c02:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010c04:	63bb      	str	r3, [r7, #56]	@ 0x38
 8010c06:	e156      	b.n	8010eb6 <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 8010c08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c0a:	68db      	ldr	r3, [r3, #12]
 8010c0c:	685a      	ldr	r2, [r3, #4]
 8010c0e:	4b41      	ldr	r3, [pc, #260]	@ (8010d14 <tcp_receive+0xd00>)
 8010c10:	681b      	ldr	r3, [r3, #0]
 8010c12:	429a      	cmp	r2, r3
 8010c14:	d11d      	bne.n	8010c52 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8010c16:	4b3e      	ldr	r3, [pc, #248]	@ (8010d10 <tcp_receive+0xcfc>)
 8010c18:	891a      	ldrh	r2, [r3, #8]
 8010c1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c1c:	891b      	ldrh	r3, [r3, #8]
 8010c1e:	429a      	cmp	r2, r3
 8010c20:	f240 814e 	bls.w	8010ec0 <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8010c24:	483a      	ldr	r0, [pc, #232]	@ (8010d10 <tcp_receive+0xcfc>)
 8010c26:	f7fd facb 	bl	800e1c0 <tcp_seg_copy>
 8010c2a:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8010c2c:	697b      	ldr	r3, [r7, #20]
 8010c2e:	2b00      	cmp	r3, #0
 8010c30:	f000 8148 	beq.w	8010ec4 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 8010c34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010c36:	2b00      	cmp	r3, #0
 8010c38:	d003      	beq.n	8010c42 <tcp_receive+0xc2e>
                    prev->next = cseg;
 8010c3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010c3c:	697a      	ldr	r2, [r7, #20]
 8010c3e:	601a      	str	r2, [r3, #0]
 8010c40:	e002      	b.n	8010c48 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 8010c42:	687b      	ldr	r3, [r7, #4]
 8010c44:	697a      	ldr	r2, [r7, #20]
 8010c46:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8010c48:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8010c4a:	6978      	ldr	r0, [r7, #20]
 8010c4c:	f7ff f8de 	bl	800fe0c <tcp_oos_insert_segment>
                }
                break;
 8010c50:	e138      	b.n	8010ec4 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8010c52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010c54:	2b00      	cmp	r3, #0
 8010c56:	d117      	bne.n	8010c88 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8010c58:	4b2e      	ldr	r3, [pc, #184]	@ (8010d14 <tcp_receive+0xd00>)
 8010c5a:	681a      	ldr	r2, [r3, #0]
 8010c5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c5e:	68db      	ldr	r3, [r3, #12]
 8010c60:	685b      	ldr	r3, [r3, #4]
 8010c62:	1ad3      	subs	r3, r2, r3
 8010c64:	2b00      	cmp	r3, #0
 8010c66:	da57      	bge.n	8010d18 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8010c68:	4829      	ldr	r0, [pc, #164]	@ (8010d10 <tcp_receive+0xcfc>)
 8010c6a:	f7fd faa9 	bl	800e1c0 <tcp_seg_copy>
 8010c6e:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8010c70:	69bb      	ldr	r3, [r7, #24]
 8010c72:	2b00      	cmp	r3, #0
 8010c74:	f000 8128 	beq.w	8010ec8 <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 8010c78:	687b      	ldr	r3, [r7, #4]
 8010c7a:	69ba      	ldr	r2, [r7, #24]
 8010c7c:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 8010c7e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8010c80:	69b8      	ldr	r0, [r7, #24]
 8010c82:	f7ff f8c3 	bl	800fe0c <tcp_oos_insert_segment>
                  }
                  break;
 8010c86:	e11f      	b.n	8010ec8 <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8010c88:	4b22      	ldr	r3, [pc, #136]	@ (8010d14 <tcp_receive+0xd00>)
 8010c8a:	681a      	ldr	r2, [r3, #0]
 8010c8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010c8e:	68db      	ldr	r3, [r3, #12]
 8010c90:	685b      	ldr	r3, [r3, #4]
 8010c92:	1ad3      	subs	r3, r2, r3
 8010c94:	3b01      	subs	r3, #1
 8010c96:	2b00      	cmp	r3, #0
 8010c98:	db3e      	blt.n	8010d18 <tcp_receive+0xd04>
 8010c9a:	4b1e      	ldr	r3, [pc, #120]	@ (8010d14 <tcp_receive+0xd00>)
 8010c9c:	681a      	ldr	r2, [r3, #0]
 8010c9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010ca0:	68db      	ldr	r3, [r3, #12]
 8010ca2:	685b      	ldr	r3, [r3, #4]
 8010ca4:	1ad3      	subs	r3, r2, r3
 8010ca6:	3301      	adds	r3, #1
 8010ca8:	2b00      	cmp	r3, #0
 8010caa:	dc35      	bgt.n	8010d18 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8010cac:	4818      	ldr	r0, [pc, #96]	@ (8010d10 <tcp_receive+0xcfc>)
 8010cae:	f7fd fa87 	bl	800e1c0 <tcp_seg_copy>
 8010cb2:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8010cb4:	69fb      	ldr	r3, [r7, #28]
 8010cb6:	2b00      	cmp	r3, #0
 8010cb8:	f000 8108 	beq.w	8010ecc <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8010cbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010cbe:	68db      	ldr	r3, [r3, #12]
 8010cc0:	685b      	ldr	r3, [r3, #4]
 8010cc2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010cc4:	8912      	ldrh	r2, [r2, #8]
 8010cc6:	441a      	add	r2, r3
 8010cc8:	4b12      	ldr	r3, [pc, #72]	@ (8010d14 <tcp_receive+0xd00>)
 8010cca:	681b      	ldr	r3, [r3, #0]
 8010ccc:	1ad3      	subs	r3, r2, r3
 8010cce:	2b00      	cmp	r3, #0
 8010cd0:	dd12      	ble.n	8010cf8 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8010cd2:	4b10      	ldr	r3, [pc, #64]	@ (8010d14 <tcp_receive+0xd00>)
 8010cd4:	681b      	ldr	r3, [r3, #0]
 8010cd6:	b29a      	uxth	r2, r3
 8010cd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010cda:	68db      	ldr	r3, [r3, #12]
 8010cdc:	685b      	ldr	r3, [r3, #4]
 8010cde:	b29b      	uxth	r3, r3
 8010ce0:	1ad3      	subs	r3, r2, r3
 8010ce2:	b29a      	uxth	r2, r3
 8010ce4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010ce6:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8010ce8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010cea:	685a      	ldr	r2, [r3, #4]
 8010cec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010cee:	891b      	ldrh	r3, [r3, #8]
 8010cf0:	4619      	mov	r1, r3
 8010cf2:	4610      	mov	r0, r2
 8010cf4:	f7fb fc1a 	bl	800c52c <pbuf_realloc>
                    }
                    prev->next = cseg;
 8010cf8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010cfa:	69fa      	ldr	r2, [r7, #28]
 8010cfc:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8010cfe:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8010d00:	69f8      	ldr	r0, [r7, #28]
 8010d02:	f7ff f883 	bl	800fe0c <tcp_oos_insert_segment>
                  }
                  break;
 8010d06:	e0e1      	b.n	8010ecc <tcp_receive+0xeb8>
 8010d08:	2000eb8c 	.word	0x2000eb8c
 8010d0c:	2000eb89 	.word	0x2000eb89
 8010d10:	2000eb5c 	.word	0x2000eb5c
 8010d14:	2000eb7c 	.word	0x2000eb7c
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8010d18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d1a:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8010d1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d1e:	681b      	ldr	r3, [r3, #0]
 8010d20:	2b00      	cmp	r3, #0
 8010d22:	f040 80c5 	bne.w	8010eb0 <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8010d26:	4b7f      	ldr	r3, [pc, #508]	@ (8010f24 <tcp_receive+0xf10>)
 8010d28:	681a      	ldr	r2, [r3, #0]
 8010d2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d2c:	68db      	ldr	r3, [r3, #12]
 8010d2e:	685b      	ldr	r3, [r3, #4]
 8010d30:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8010d32:	2b00      	cmp	r3, #0
 8010d34:	f340 80bc 	ble.w	8010eb0 <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8010d38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d3a:	68db      	ldr	r3, [r3, #12]
 8010d3c:	899b      	ldrh	r3, [r3, #12]
 8010d3e:	b29b      	uxth	r3, r3
 8010d40:	4618      	mov	r0, r3
 8010d42:	f7fa f987 	bl	800b054 <lwip_htons>
 8010d46:	4603      	mov	r3, r0
 8010d48:	b2db      	uxtb	r3, r3
 8010d4a:	f003 0301 	and.w	r3, r3, #1
 8010d4e:	2b00      	cmp	r3, #0
 8010d50:	f040 80be 	bne.w	8010ed0 <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8010d54:	4874      	ldr	r0, [pc, #464]	@ (8010f28 <tcp_receive+0xf14>)
 8010d56:	f7fd fa33 	bl	800e1c0 <tcp_seg_copy>
 8010d5a:	4602      	mov	r2, r0
 8010d5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d5e:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8010d60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d62:	681b      	ldr	r3, [r3, #0]
 8010d64:	2b00      	cmp	r3, #0
 8010d66:	f000 80b5 	beq.w	8010ed4 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8010d6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d6c:	68db      	ldr	r3, [r3, #12]
 8010d6e:	685b      	ldr	r3, [r3, #4]
 8010d70:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010d72:	8912      	ldrh	r2, [r2, #8]
 8010d74:	441a      	add	r2, r3
 8010d76:	4b6b      	ldr	r3, [pc, #428]	@ (8010f24 <tcp_receive+0xf10>)
 8010d78:	681b      	ldr	r3, [r3, #0]
 8010d7a:	1ad3      	subs	r3, r2, r3
 8010d7c:	2b00      	cmp	r3, #0
 8010d7e:	dd12      	ble.n	8010da6 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8010d80:	4b68      	ldr	r3, [pc, #416]	@ (8010f24 <tcp_receive+0xf10>)
 8010d82:	681b      	ldr	r3, [r3, #0]
 8010d84:	b29a      	uxth	r2, r3
 8010d86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d88:	68db      	ldr	r3, [r3, #12]
 8010d8a:	685b      	ldr	r3, [r3, #4]
 8010d8c:	b29b      	uxth	r3, r3
 8010d8e:	1ad3      	subs	r3, r2, r3
 8010d90:	b29a      	uxth	r2, r3
 8010d92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d94:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8010d96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d98:	685a      	ldr	r2, [r3, #4]
 8010d9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d9c:	891b      	ldrh	r3, [r3, #8]
 8010d9e:	4619      	mov	r1, r3
 8010da0:	4610      	mov	r0, r2
 8010da2:	f7fb fbc3 	bl	800c52c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8010da6:	4b61      	ldr	r3, [pc, #388]	@ (8010f2c <tcp_receive+0xf18>)
 8010da8:	881b      	ldrh	r3, [r3, #0]
 8010daa:	461a      	mov	r2, r3
 8010dac:	4b5d      	ldr	r3, [pc, #372]	@ (8010f24 <tcp_receive+0xf10>)
 8010dae:	681b      	ldr	r3, [r3, #0]
 8010db0:	441a      	add	r2, r3
 8010db2:	687b      	ldr	r3, [r7, #4]
 8010db4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010db6:	6879      	ldr	r1, [r7, #4]
 8010db8:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8010dba:	440b      	add	r3, r1
 8010dbc:	1ad3      	subs	r3, r2, r3
 8010dbe:	2b00      	cmp	r3, #0
 8010dc0:	f340 8088 	ble.w	8010ed4 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8010dc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010dc6:	681b      	ldr	r3, [r3, #0]
 8010dc8:	68db      	ldr	r3, [r3, #12]
 8010dca:	899b      	ldrh	r3, [r3, #12]
 8010dcc:	b29b      	uxth	r3, r3
 8010dce:	4618      	mov	r0, r3
 8010dd0:	f7fa f940 	bl	800b054 <lwip_htons>
 8010dd4:	4603      	mov	r3, r0
 8010dd6:	b2db      	uxtb	r3, r3
 8010dd8:	f003 0301 	and.w	r3, r3, #1
 8010ddc:	2b00      	cmp	r3, #0
 8010dde:	d021      	beq.n	8010e24 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8010de0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010de2:	681b      	ldr	r3, [r3, #0]
 8010de4:	68db      	ldr	r3, [r3, #12]
 8010de6:	899b      	ldrh	r3, [r3, #12]
 8010de8:	b29b      	uxth	r3, r3
 8010dea:	b21b      	sxth	r3, r3
 8010dec:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8010df0:	b21c      	sxth	r4, r3
 8010df2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010df4:	681b      	ldr	r3, [r3, #0]
 8010df6:	68db      	ldr	r3, [r3, #12]
 8010df8:	899b      	ldrh	r3, [r3, #12]
 8010dfa:	b29b      	uxth	r3, r3
 8010dfc:	4618      	mov	r0, r3
 8010dfe:	f7fa f929 	bl	800b054 <lwip_htons>
 8010e02:	4603      	mov	r3, r0
 8010e04:	b2db      	uxtb	r3, r3
 8010e06:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8010e0a:	b29b      	uxth	r3, r3
 8010e0c:	4618      	mov	r0, r3
 8010e0e:	f7fa f921 	bl	800b054 <lwip_htons>
 8010e12:	4603      	mov	r3, r0
 8010e14:	b21b      	sxth	r3, r3
 8010e16:	4323      	orrs	r3, r4
 8010e18:	b21a      	sxth	r2, r3
 8010e1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010e1c:	681b      	ldr	r3, [r3, #0]
 8010e1e:	68db      	ldr	r3, [r3, #12]
 8010e20:	b292      	uxth	r2, r2
 8010e22:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8010e24:	687b      	ldr	r3, [r7, #4]
 8010e26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010e28:	b29a      	uxth	r2, r3
 8010e2a:	687b      	ldr	r3, [r7, #4]
 8010e2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010e2e:	4413      	add	r3, r2
 8010e30:	b299      	uxth	r1, r3
 8010e32:	4b3c      	ldr	r3, [pc, #240]	@ (8010f24 <tcp_receive+0xf10>)
 8010e34:	681b      	ldr	r3, [r3, #0]
 8010e36:	b29a      	uxth	r2, r3
 8010e38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010e3a:	681b      	ldr	r3, [r3, #0]
 8010e3c:	1a8a      	subs	r2, r1, r2
 8010e3e:	b292      	uxth	r2, r2
 8010e40:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8010e42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010e44:	681b      	ldr	r3, [r3, #0]
 8010e46:	685a      	ldr	r2, [r3, #4]
 8010e48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010e4a:	681b      	ldr	r3, [r3, #0]
 8010e4c:	891b      	ldrh	r3, [r3, #8]
 8010e4e:	4619      	mov	r1, r3
 8010e50:	4610      	mov	r0, r2
 8010e52:	f7fb fb6b 	bl	800c52c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8010e56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010e58:	681b      	ldr	r3, [r3, #0]
 8010e5a:	891c      	ldrh	r4, [r3, #8]
 8010e5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010e5e:	681b      	ldr	r3, [r3, #0]
 8010e60:	68db      	ldr	r3, [r3, #12]
 8010e62:	899b      	ldrh	r3, [r3, #12]
 8010e64:	b29b      	uxth	r3, r3
 8010e66:	4618      	mov	r0, r3
 8010e68:	f7fa f8f4 	bl	800b054 <lwip_htons>
 8010e6c:	4603      	mov	r3, r0
 8010e6e:	b2db      	uxtb	r3, r3
 8010e70:	f003 0303 	and.w	r3, r3, #3
 8010e74:	2b00      	cmp	r3, #0
 8010e76:	d001      	beq.n	8010e7c <tcp_receive+0xe68>
 8010e78:	2301      	movs	r3, #1
 8010e7a:	e000      	b.n	8010e7e <tcp_receive+0xe6a>
 8010e7c:	2300      	movs	r3, #0
 8010e7e:	4423      	add	r3, r4
 8010e80:	b29a      	uxth	r2, r3
 8010e82:	4b2a      	ldr	r3, [pc, #168]	@ (8010f2c <tcp_receive+0xf18>)
 8010e84:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8010e86:	4b29      	ldr	r3, [pc, #164]	@ (8010f2c <tcp_receive+0xf18>)
 8010e88:	881b      	ldrh	r3, [r3, #0]
 8010e8a:	461a      	mov	r2, r3
 8010e8c:	4b25      	ldr	r3, [pc, #148]	@ (8010f24 <tcp_receive+0xf10>)
 8010e8e:	681b      	ldr	r3, [r3, #0]
 8010e90:	441a      	add	r2, r3
 8010e92:	687b      	ldr	r3, [r7, #4]
 8010e94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010e96:	6879      	ldr	r1, [r7, #4]
 8010e98:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8010e9a:	440b      	add	r3, r1
 8010e9c:	429a      	cmp	r2, r3
 8010e9e:	d019      	beq.n	8010ed4 <tcp_receive+0xec0>
 8010ea0:	4b23      	ldr	r3, [pc, #140]	@ (8010f30 <tcp_receive+0xf1c>)
 8010ea2:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 8010ea6:	4923      	ldr	r1, [pc, #140]	@ (8010f34 <tcp_receive+0xf20>)
 8010ea8:	4823      	ldr	r0, [pc, #140]	@ (8010f38 <tcp_receive+0xf24>)
 8010eaa:	f005 fa31 	bl	8016310 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8010eae:	e011      	b.n	8010ed4 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8010eb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010eb2:	681b      	ldr	r3, [r3, #0]
 8010eb4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8010eb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010eb8:	2b00      	cmp	r3, #0
 8010eba:	f47f aea5 	bne.w	8010c08 <tcp_receive+0xbf4>
 8010ebe:	e00a      	b.n	8010ed6 <tcp_receive+0xec2>
                break;
 8010ec0:	bf00      	nop
 8010ec2:	e008      	b.n	8010ed6 <tcp_receive+0xec2>
                break;
 8010ec4:	bf00      	nop
 8010ec6:	e006      	b.n	8010ed6 <tcp_receive+0xec2>
                  break;
 8010ec8:	bf00      	nop
 8010eca:	e004      	b.n	8010ed6 <tcp_receive+0xec2>
                  break;
 8010ecc:	bf00      	nop
 8010ece:	e002      	b.n	8010ed6 <tcp_receive+0xec2>
                  break;
 8010ed0:	bf00      	nop
 8010ed2:	e000      	b.n	8010ed6 <tcp_receive+0xec2>
                break;
 8010ed4:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8010ed6:	6878      	ldr	r0, [r7, #4]
 8010ed8:	f001 fe88 	bl	8012bec <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8010edc:	e003      	b.n	8010ee6 <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8010ede:	6878      	ldr	r0, [r7, #4]
 8010ee0:	f001 fe84 	bl	8012bec <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8010ee4:	e01a      	b.n	8010f1c <tcp_receive+0xf08>
 8010ee6:	e019      	b.n	8010f1c <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8010ee8:	4b0e      	ldr	r3, [pc, #56]	@ (8010f24 <tcp_receive+0xf10>)
 8010eea:	681a      	ldr	r2, [r3, #0]
 8010eec:	687b      	ldr	r3, [r7, #4]
 8010eee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010ef0:	1ad3      	subs	r3, r2, r3
 8010ef2:	2b00      	cmp	r3, #0
 8010ef4:	db0a      	blt.n	8010f0c <tcp_receive+0xef8>
 8010ef6:	4b0b      	ldr	r3, [pc, #44]	@ (8010f24 <tcp_receive+0xf10>)
 8010ef8:	681a      	ldr	r2, [r3, #0]
 8010efa:	687b      	ldr	r3, [r7, #4]
 8010efc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010efe:	6879      	ldr	r1, [r7, #4]
 8010f00:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8010f02:	440b      	add	r3, r1
 8010f04:	1ad3      	subs	r3, r2, r3
 8010f06:	3301      	adds	r3, #1
 8010f08:	2b00      	cmp	r3, #0
 8010f0a:	dd07      	ble.n	8010f1c <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 8010f0c:	687b      	ldr	r3, [r7, #4]
 8010f0e:	8b5b      	ldrh	r3, [r3, #26]
 8010f10:	f043 0302 	orr.w	r3, r3, #2
 8010f14:	b29a      	uxth	r2, r3
 8010f16:	687b      	ldr	r3, [r7, #4]
 8010f18:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8010f1a:	e7ff      	b.n	8010f1c <tcp_receive+0xf08>
 8010f1c:	bf00      	nop
 8010f1e:	3750      	adds	r7, #80	@ 0x50
 8010f20:	46bd      	mov	sp, r7
 8010f22:	bdb0      	pop	{r4, r5, r7, pc}
 8010f24:	2000eb7c 	.word	0x2000eb7c
 8010f28:	2000eb5c 	.word	0x2000eb5c
 8010f2c:	2000eb86 	.word	0x2000eb86
 8010f30:	080195c0 	.word	0x080195c0
 8010f34:	08019968 	.word	0x08019968
 8010f38:	0801960c 	.word	0x0801960c

08010f3c <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8010f3c:	b480      	push	{r7}
 8010f3e:	b083      	sub	sp, #12
 8010f40:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8010f42:	4b15      	ldr	r3, [pc, #84]	@ (8010f98 <tcp_get_next_optbyte+0x5c>)
 8010f44:	881b      	ldrh	r3, [r3, #0]
 8010f46:	1c5a      	adds	r2, r3, #1
 8010f48:	b291      	uxth	r1, r2
 8010f4a:	4a13      	ldr	r2, [pc, #76]	@ (8010f98 <tcp_get_next_optbyte+0x5c>)
 8010f4c:	8011      	strh	r1, [r2, #0]
 8010f4e:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8010f50:	4b12      	ldr	r3, [pc, #72]	@ (8010f9c <tcp_get_next_optbyte+0x60>)
 8010f52:	681b      	ldr	r3, [r3, #0]
 8010f54:	2b00      	cmp	r3, #0
 8010f56:	d004      	beq.n	8010f62 <tcp_get_next_optbyte+0x26>
 8010f58:	4b11      	ldr	r3, [pc, #68]	@ (8010fa0 <tcp_get_next_optbyte+0x64>)
 8010f5a:	881b      	ldrh	r3, [r3, #0]
 8010f5c:	88fa      	ldrh	r2, [r7, #6]
 8010f5e:	429a      	cmp	r2, r3
 8010f60:	d208      	bcs.n	8010f74 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8010f62:	4b10      	ldr	r3, [pc, #64]	@ (8010fa4 <tcp_get_next_optbyte+0x68>)
 8010f64:	681b      	ldr	r3, [r3, #0]
 8010f66:	3314      	adds	r3, #20
 8010f68:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8010f6a:	88fb      	ldrh	r3, [r7, #6]
 8010f6c:	683a      	ldr	r2, [r7, #0]
 8010f6e:	4413      	add	r3, r2
 8010f70:	781b      	ldrb	r3, [r3, #0]
 8010f72:	e00b      	b.n	8010f8c <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8010f74:	88fb      	ldrh	r3, [r7, #6]
 8010f76:	b2da      	uxtb	r2, r3
 8010f78:	4b09      	ldr	r3, [pc, #36]	@ (8010fa0 <tcp_get_next_optbyte+0x64>)
 8010f7a:	881b      	ldrh	r3, [r3, #0]
 8010f7c:	b2db      	uxtb	r3, r3
 8010f7e:	1ad3      	subs	r3, r2, r3
 8010f80:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8010f82:	4b06      	ldr	r3, [pc, #24]	@ (8010f9c <tcp_get_next_optbyte+0x60>)
 8010f84:	681a      	ldr	r2, [r3, #0]
 8010f86:	797b      	ldrb	r3, [r7, #5]
 8010f88:	4413      	add	r3, r2
 8010f8a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8010f8c:	4618      	mov	r0, r3
 8010f8e:	370c      	adds	r7, #12
 8010f90:	46bd      	mov	sp, r7
 8010f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f96:	4770      	bx	lr
 8010f98:	2000eb78 	.word	0x2000eb78
 8010f9c:	2000eb74 	.word	0x2000eb74
 8010fa0:	2000eb72 	.word	0x2000eb72
 8010fa4:	2000eb6c 	.word	0x2000eb6c

08010fa8 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8010fa8:	b580      	push	{r7, lr}
 8010faa:	b084      	sub	sp, #16
 8010fac:	af00      	add	r7, sp, #0
 8010fae:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8010fb0:	687b      	ldr	r3, [r7, #4]
 8010fb2:	2b00      	cmp	r3, #0
 8010fb4:	d106      	bne.n	8010fc4 <tcp_parseopt+0x1c>
 8010fb6:	4b32      	ldr	r3, [pc, #200]	@ (8011080 <tcp_parseopt+0xd8>)
 8010fb8:	f240 727d 	movw	r2, #1917	@ 0x77d
 8010fbc:	4931      	ldr	r1, [pc, #196]	@ (8011084 <tcp_parseopt+0xdc>)
 8010fbe:	4832      	ldr	r0, [pc, #200]	@ (8011088 <tcp_parseopt+0xe0>)
 8010fc0:	f005 f9a6 	bl	8016310 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8010fc4:	4b31      	ldr	r3, [pc, #196]	@ (801108c <tcp_parseopt+0xe4>)
 8010fc6:	881b      	ldrh	r3, [r3, #0]
 8010fc8:	2b00      	cmp	r3, #0
 8010fca:	d056      	beq.n	801107a <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8010fcc:	4b30      	ldr	r3, [pc, #192]	@ (8011090 <tcp_parseopt+0xe8>)
 8010fce:	2200      	movs	r2, #0
 8010fd0:	801a      	strh	r2, [r3, #0]
 8010fd2:	e046      	b.n	8011062 <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 8010fd4:	f7ff ffb2 	bl	8010f3c <tcp_get_next_optbyte>
 8010fd8:	4603      	mov	r3, r0
 8010fda:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8010fdc:	7bfb      	ldrb	r3, [r7, #15]
 8010fde:	2b02      	cmp	r3, #2
 8010fe0:	d006      	beq.n	8010ff0 <tcp_parseopt+0x48>
 8010fe2:	2b02      	cmp	r3, #2
 8010fe4:	dc2a      	bgt.n	801103c <tcp_parseopt+0x94>
 8010fe6:	2b00      	cmp	r3, #0
 8010fe8:	d042      	beq.n	8011070 <tcp_parseopt+0xc8>
 8010fea:	2b01      	cmp	r3, #1
 8010fec:	d038      	beq.n	8011060 <tcp_parseopt+0xb8>
 8010fee:	e025      	b.n	801103c <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8010ff0:	f7ff ffa4 	bl	8010f3c <tcp_get_next_optbyte>
 8010ff4:	4603      	mov	r3, r0
 8010ff6:	2b04      	cmp	r3, #4
 8010ff8:	d13c      	bne.n	8011074 <tcp_parseopt+0xcc>
 8010ffa:	4b25      	ldr	r3, [pc, #148]	@ (8011090 <tcp_parseopt+0xe8>)
 8010ffc:	881b      	ldrh	r3, [r3, #0]
 8010ffe:	3301      	adds	r3, #1
 8011000:	4a22      	ldr	r2, [pc, #136]	@ (801108c <tcp_parseopt+0xe4>)
 8011002:	8812      	ldrh	r2, [r2, #0]
 8011004:	4293      	cmp	r3, r2
 8011006:	da35      	bge.n	8011074 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8011008:	f7ff ff98 	bl	8010f3c <tcp_get_next_optbyte>
 801100c:	4603      	mov	r3, r0
 801100e:	021b      	lsls	r3, r3, #8
 8011010:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8011012:	f7ff ff93 	bl	8010f3c <tcp_get_next_optbyte>
 8011016:	4603      	mov	r3, r0
 8011018:	461a      	mov	r2, r3
 801101a:	89bb      	ldrh	r3, [r7, #12]
 801101c:	4313      	orrs	r3, r2
 801101e:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8011020:	89bb      	ldrh	r3, [r7, #12]
 8011022:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8011026:	d804      	bhi.n	8011032 <tcp_parseopt+0x8a>
 8011028:	89bb      	ldrh	r3, [r7, #12]
 801102a:	2b00      	cmp	r3, #0
 801102c:	d001      	beq.n	8011032 <tcp_parseopt+0x8a>
 801102e:	89ba      	ldrh	r2, [r7, #12]
 8011030:	e001      	b.n	8011036 <tcp_parseopt+0x8e>
 8011032:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8011036:	687b      	ldr	r3, [r7, #4]
 8011038:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 801103a:	e012      	b.n	8011062 <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 801103c:	f7ff ff7e 	bl	8010f3c <tcp_get_next_optbyte>
 8011040:	4603      	mov	r3, r0
 8011042:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8011044:	7afb      	ldrb	r3, [r7, #11]
 8011046:	2b01      	cmp	r3, #1
 8011048:	d916      	bls.n	8011078 <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 801104a:	7afb      	ldrb	r3, [r7, #11]
 801104c:	b29a      	uxth	r2, r3
 801104e:	4b10      	ldr	r3, [pc, #64]	@ (8011090 <tcp_parseopt+0xe8>)
 8011050:	881b      	ldrh	r3, [r3, #0]
 8011052:	4413      	add	r3, r2
 8011054:	b29b      	uxth	r3, r3
 8011056:	3b02      	subs	r3, #2
 8011058:	b29a      	uxth	r2, r3
 801105a:	4b0d      	ldr	r3, [pc, #52]	@ (8011090 <tcp_parseopt+0xe8>)
 801105c:	801a      	strh	r2, [r3, #0]
 801105e:	e000      	b.n	8011062 <tcp_parseopt+0xba>
          break;
 8011060:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8011062:	4b0b      	ldr	r3, [pc, #44]	@ (8011090 <tcp_parseopt+0xe8>)
 8011064:	881a      	ldrh	r2, [r3, #0]
 8011066:	4b09      	ldr	r3, [pc, #36]	@ (801108c <tcp_parseopt+0xe4>)
 8011068:	881b      	ldrh	r3, [r3, #0]
 801106a:	429a      	cmp	r2, r3
 801106c:	d3b2      	bcc.n	8010fd4 <tcp_parseopt+0x2c>
 801106e:	e004      	b.n	801107a <tcp_parseopt+0xd2>
          return;
 8011070:	bf00      	nop
 8011072:	e002      	b.n	801107a <tcp_parseopt+0xd2>
            return;
 8011074:	bf00      	nop
 8011076:	e000      	b.n	801107a <tcp_parseopt+0xd2>
            return;
 8011078:	bf00      	nop
      }
    }
  }
}
 801107a:	3710      	adds	r7, #16
 801107c:	46bd      	mov	sp, r7
 801107e:	bd80      	pop	{r7, pc}
 8011080:	080195c0 	.word	0x080195c0
 8011084:	08019a24 	.word	0x08019a24
 8011088:	0801960c 	.word	0x0801960c
 801108c:	2000eb70 	.word	0x2000eb70
 8011090:	2000eb78 	.word	0x2000eb78

08011094 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8011094:	b480      	push	{r7}
 8011096:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8011098:	4b05      	ldr	r3, [pc, #20]	@ (80110b0 <tcp_trigger_input_pcb_close+0x1c>)
 801109a:	781b      	ldrb	r3, [r3, #0]
 801109c:	f043 0310 	orr.w	r3, r3, #16
 80110a0:	b2da      	uxtb	r2, r3
 80110a2:	4b03      	ldr	r3, [pc, #12]	@ (80110b0 <tcp_trigger_input_pcb_close+0x1c>)
 80110a4:	701a      	strb	r2, [r3, #0]
}
 80110a6:	bf00      	nop
 80110a8:	46bd      	mov	sp, r7
 80110aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110ae:	4770      	bx	lr
 80110b0:	2000eb89 	.word	0x2000eb89

080110b4 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 80110b4:	b580      	push	{r7, lr}
 80110b6:	b084      	sub	sp, #16
 80110b8:	af00      	add	r7, sp, #0
 80110ba:	60f8      	str	r0, [r7, #12]
 80110bc:	60b9      	str	r1, [r7, #8]
 80110be:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 80110c0:	68fb      	ldr	r3, [r7, #12]
 80110c2:	2b00      	cmp	r3, #0
 80110c4:	d00a      	beq.n	80110dc <tcp_route+0x28>
 80110c6:	68fb      	ldr	r3, [r7, #12]
 80110c8:	7a1b      	ldrb	r3, [r3, #8]
 80110ca:	2b00      	cmp	r3, #0
 80110cc:	d006      	beq.n	80110dc <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 80110ce:	68fb      	ldr	r3, [r7, #12]
 80110d0:	7a1b      	ldrb	r3, [r3, #8]
 80110d2:	4618      	mov	r0, r3
 80110d4:	f7fb f822 	bl	800c11c <netif_get_by_index>
 80110d8:	4603      	mov	r3, r0
 80110da:	e003      	b.n	80110e4 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 80110dc:	6878      	ldr	r0, [r7, #4]
 80110de:	f003 fc49 	bl	8014974 <ip4_route>
 80110e2:	4603      	mov	r3, r0
  }
}
 80110e4:	4618      	mov	r0, r3
 80110e6:	3710      	adds	r7, #16
 80110e8:	46bd      	mov	sp, r7
 80110ea:	bd80      	pop	{r7, pc}

080110ec <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 80110ec:	b590      	push	{r4, r7, lr}
 80110ee:	b087      	sub	sp, #28
 80110f0:	af00      	add	r7, sp, #0
 80110f2:	60f8      	str	r0, [r7, #12]
 80110f4:	60b9      	str	r1, [r7, #8]
 80110f6:	603b      	str	r3, [r7, #0]
 80110f8:	4613      	mov	r3, r2
 80110fa:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 80110fc:	68fb      	ldr	r3, [r7, #12]
 80110fe:	2b00      	cmp	r3, #0
 8011100:	d105      	bne.n	801110e <tcp_create_segment+0x22>
 8011102:	4b43      	ldr	r3, [pc, #268]	@ (8011210 <tcp_create_segment+0x124>)
 8011104:	22a3      	movs	r2, #163	@ 0xa3
 8011106:	4943      	ldr	r1, [pc, #268]	@ (8011214 <tcp_create_segment+0x128>)
 8011108:	4843      	ldr	r0, [pc, #268]	@ (8011218 <tcp_create_segment+0x12c>)
 801110a:	f005 f901 	bl	8016310 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 801110e:	68bb      	ldr	r3, [r7, #8]
 8011110:	2b00      	cmp	r3, #0
 8011112:	d105      	bne.n	8011120 <tcp_create_segment+0x34>
 8011114:	4b3e      	ldr	r3, [pc, #248]	@ (8011210 <tcp_create_segment+0x124>)
 8011116:	22a4      	movs	r2, #164	@ 0xa4
 8011118:	4940      	ldr	r1, [pc, #256]	@ (801121c <tcp_create_segment+0x130>)
 801111a:	483f      	ldr	r0, [pc, #252]	@ (8011218 <tcp_create_segment+0x12c>)
 801111c:	f005 f8f8 	bl	8016310 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8011120:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8011124:	009b      	lsls	r3, r3, #2
 8011126:	b2db      	uxtb	r3, r3
 8011128:	f003 0304 	and.w	r3, r3, #4
 801112c:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801112e:	2003      	movs	r0, #3
 8011130:	f7fa fc68 	bl	800ba04 <memp_malloc>
 8011134:	6138      	str	r0, [r7, #16]
 8011136:	693b      	ldr	r3, [r7, #16]
 8011138:	2b00      	cmp	r3, #0
 801113a:	d104      	bne.n	8011146 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 801113c:	68b8      	ldr	r0, [r7, #8]
 801113e:	f7fb fb7b 	bl	800c838 <pbuf_free>
    return NULL;
 8011142:	2300      	movs	r3, #0
 8011144:	e060      	b.n	8011208 <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 8011146:	693b      	ldr	r3, [r7, #16]
 8011148:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 801114c:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 801114e:	693b      	ldr	r3, [r7, #16]
 8011150:	2200      	movs	r2, #0
 8011152:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8011154:	693b      	ldr	r3, [r7, #16]
 8011156:	68ba      	ldr	r2, [r7, #8]
 8011158:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801115a:	68bb      	ldr	r3, [r7, #8]
 801115c:	891a      	ldrh	r2, [r3, #8]
 801115e:	7dfb      	ldrb	r3, [r7, #23]
 8011160:	b29b      	uxth	r3, r3
 8011162:	429a      	cmp	r2, r3
 8011164:	d205      	bcs.n	8011172 <tcp_create_segment+0x86>
 8011166:	4b2a      	ldr	r3, [pc, #168]	@ (8011210 <tcp_create_segment+0x124>)
 8011168:	22b0      	movs	r2, #176	@ 0xb0
 801116a:	492d      	ldr	r1, [pc, #180]	@ (8011220 <tcp_create_segment+0x134>)
 801116c:	482a      	ldr	r0, [pc, #168]	@ (8011218 <tcp_create_segment+0x12c>)
 801116e:	f005 f8cf 	bl	8016310 <iprintf>
  seg->len = p->tot_len - optlen;
 8011172:	68bb      	ldr	r3, [r7, #8]
 8011174:	891a      	ldrh	r2, [r3, #8]
 8011176:	7dfb      	ldrb	r3, [r7, #23]
 8011178:	b29b      	uxth	r3, r3
 801117a:	1ad3      	subs	r3, r2, r3
 801117c:	b29a      	uxth	r2, r3
 801117e:	693b      	ldr	r3, [r7, #16]
 8011180:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8011182:	2114      	movs	r1, #20
 8011184:	68b8      	ldr	r0, [r7, #8]
 8011186:	f7fb fac1 	bl	800c70c <pbuf_add_header>
 801118a:	4603      	mov	r3, r0
 801118c:	2b00      	cmp	r3, #0
 801118e:	d004      	beq.n	801119a <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8011190:	6938      	ldr	r0, [r7, #16]
 8011192:	f7fc fffc 	bl	800e18e <tcp_seg_free>
    return NULL;
 8011196:	2300      	movs	r3, #0
 8011198:	e036      	b.n	8011208 <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801119a:	693b      	ldr	r3, [r7, #16]
 801119c:	685b      	ldr	r3, [r3, #4]
 801119e:	685a      	ldr	r2, [r3, #4]
 80111a0:	693b      	ldr	r3, [r7, #16]
 80111a2:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 80111a4:	68fb      	ldr	r3, [r7, #12]
 80111a6:	8ada      	ldrh	r2, [r3, #22]
 80111a8:	693b      	ldr	r3, [r7, #16]
 80111aa:	68dc      	ldr	r4, [r3, #12]
 80111ac:	4610      	mov	r0, r2
 80111ae:	f7f9 ff51 	bl	800b054 <lwip_htons>
 80111b2:	4603      	mov	r3, r0
 80111b4:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 80111b6:	68fb      	ldr	r3, [r7, #12]
 80111b8:	8b1a      	ldrh	r2, [r3, #24]
 80111ba:	693b      	ldr	r3, [r7, #16]
 80111bc:	68dc      	ldr	r4, [r3, #12]
 80111be:	4610      	mov	r0, r2
 80111c0:	f7f9 ff48 	bl	800b054 <lwip_htons>
 80111c4:	4603      	mov	r3, r0
 80111c6:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 80111c8:	693b      	ldr	r3, [r7, #16]
 80111ca:	68dc      	ldr	r4, [r3, #12]
 80111cc:	6838      	ldr	r0, [r7, #0]
 80111ce:	f7f9 ff56 	bl	800b07e <lwip_htonl>
 80111d2:	4603      	mov	r3, r0
 80111d4:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 80111d6:	7dfb      	ldrb	r3, [r7, #23]
 80111d8:	089b      	lsrs	r3, r3, #2
 80111da:	b2db      	uxtb	r3, r3
 80111dc:	3305      	adds	r3, #5
 80111de:	b29b      	uxth	r3, r3
 80111e0:	031b      	lsls	r3, r3, #12
 80111e2:	b29a      	uxth	r2, r3
 80111e4:	79fb      	ldrb	r3, [r7, #7]
 80111e6:	b29b      	uxth	r3, r3
 80111e8:	4313      	orrs	r3, r2
 80111ea:	b29a      	uxth	r2, r3
 80111ec:	693b      	ldr	r3, [r7, #16]
 80111ee:	68dc      	ldr	r4, [r3, #12]
 80111f0:	4610      	mov	r0, r2
 80111f2:	f7f9 ff2f 	bl	800b054 <lwip_htons>
 80111f6:	4603      	mov	r3, r0
 80111f8:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 80111fa:	693b      	ldr	r3, [r7, #16]
 80111fc:	68db      	ldr	r3, [r3, #12]
 80111fe:	2200      	movs	r2, #0
 8011200:	749a      	strb	r2, [r3, #18]
 8011202:	2200      	movs	r2, #0
 8011204:	74da      	strb	r2, [r3, #19]
  return seg;
 8011206:	693b      	ldr	r3, [r7, #16]
}
 8011208:	4618      	mov	r0, r3
 801120a:	371c      	adds	r7, #28
 801120c:	46bd      	mov	sp, r7
 801120e:	bd90      	pop	{r4, r7, pc}
 8011210:	08019a40 	.word	0x08019a40
 8011214:	08019a74 	.word	0x08019a74
 8011218:	08019a94 	.word	0x08019a94
 801121c:	08019abc 	.word	0x08019abc
 8011220:	08019ae0 	.word	0x08019ae0

08011224 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8011224:	b580      	push	{r7, lr}
 8011226:	b086      	sub	sp, #24
 8011228:	af00      	add	r7, sp, #0
 801122a:	607b      	str	r3, [r7, #4]
 801122c:	4603      	mov	r3, r0
 801122e:	73fb      	strb	r3, [r7, #15]
 8011230:	460b      	mov	r3, r1
 8011232:	81bb      	strh	r3, [r7, #12]
 8011234:	4613      	mov	r3, r2
 8011236:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8011238:	89bb      	ldrh	r3, [r7, #12]
 801123a:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 801123c:	687b      	ldr	r3, [r7, #4]
 801123e:	2b00      	cmp	r3, #0
 8011240:	d105      	bne.n	801124e <tcp_pbuf_prealloc+0x2a>
 8011242:	4b30      	ldr	r3, [pc, #192]	@ (8011304 <tcp_pbuf_prealloc+0xe0>)
 8011244:	22e8      	movs	r2, #232	@ 0xe8
 8011246:	4930      	ldr	r1, [pc, #192]	@ (8011308 <tcp_pbuf_prealloc+0xe4>)
 8011248:	4830      	ldr	r0, [pc, #192]	@ (801130c <tcp_pbuf_prealloc+0xe8>)
 801124a:	f005 f861 	bl	8016310 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 801124e:	6a3b      	ldr	r3, [r7, #32]
 8011250:	2b00      	cmp	r3, #0
 8011252:	d105      	bne.n	8011260 <tcp_pbuf_prealloc+0x3c>
 8011254:	4b2b      	ldr	r3, [pc, #172]	@ (8011304 <tcp_pbuf_prealloc+0xe0>)
 8011256:	22e9      	movs	r2, #233	@ 0xe9
 8011258:	492d      	ldr	r1, [pc, #180]	@ (8011310 <tcp_pbuf_prealloc+0xec>)
 801125a:	482c      	ldr	r0, [pc, #176]	@ (801130c <tcp_pbuf_prealloc+0xe8>)
 801125c:	f005 f858 	bl	8016310 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8011260:	89ba      	ldrh	r2, [r7, #12]
 8011262:	897b      	ldrh	r3, [r7, #10]
 8011264:	429a      	cmp	r2, r3
 8011266:	d221      	bcs.n	80112ac <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8011268:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801126c:	f003 0302 	and.w	r3, r3, #2
 8011270:	2b00      	cmp	r3, #0
 8011272:	d111      	bne.n	8011298 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8011274:	6a3b      	ldr	r3, [r7, #32]
 8011276:	8b5b      	ldrh	r3, [r3, #26]
 8011278:	f003 0340 	and.w	r3, r3, #64	@ 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801127c:	2b00      	cmp	r3, #0
 801127e:	d115      	bne.n	80112ac <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8011280:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8011284:	2b00      	cmp	r3, #0
 8011286:	d007      	beq.n	8011298 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8011288:	6a3b      	ldr	r3, [r7, #32]
 801128a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
         (!first_seg ||
 801128c:	2b00      	cmp	r3, #0
 801128e:	d103      	bne.n	8011298 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8011290:	6a3b      	ldr	r3, [r7, #32]
 8011292:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
          pcb->unsent != NULL ||
 8011294:	2b00      	cmp	r3, #0
 8011296:	d009      	beq.n	80112ac <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8011298:	89bb      	ldrh	r3, [r7, #12]
 801129a:	f203 231b 	addw	r3, r3, #539	@ 0x21b
 801129e:	f023 0203 	bic.w	r2, r3, #3
 80112a2:	897b      	ldrh	r3, [r7, #10]
 80112a4:	4293      	cmp	r3, r2
 80112a6:	bf28      	it	cs
 80112a8:	4613      	movcs	r3, r2
 80112aa:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 80112ac:	8af9      	ldrh	r1, [r7, #22]
 80112ae:	7bfb      	ldrb	r3, [r7, #15]
 80112b0:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80112b4:	4618      	mov	r0, r3
 80112b6:	f7fa ffdb 	bl	800c270 <pbuf_alloc>
 80112ba:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80112bc:	693b      	ldr	r3, [r7, #16]
 80112be:	2b00      	cmp	r3, #0
 80112c0:	d101      	bne.n	80112c6 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 80112c2:	2300      	movs	r3, #0
 80112c4:	e019      	b.n	80112fa <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 80112c6:	693b      	ldr	r3, [r7, #16]
 80112c8:	681b      	ldr	r3, [r3, #0]
 80112ca:	2b00      	cmp	r3, #0
 80112cc:	d006      	beq.n	80112dc <tcp_pbuf_prealloc+0xb8>
 80112ce:	4b0d      	ldr	r3, [pc, #52]	@ (8011304 <tcp_pbuf_prealloc+0xe0>)
 80112d0:	f240 120b 	movw	r2, #267	@ 0x10b
 80112d4:	490f      	ldr	r1, [pc, #60]	@ (8011314 <tcp_pbuf_prealloc+0xf0>)
 80112d6:	480d      	ldr	r0, [pc, #52]	@ (801130c <tcp_pbuf_prealloc+0xe8>)
 80112d8:	f005 f81a 	bl	8016310 <iprintf>
  *oversize = p->len - length;
 80112dc:	693b      	ldr	r3, [r7, #16]
 80112de:	895a      	ldrh	r2, [r3, #10]
 80112e0:	89bb      	ldrh	r3, [r7, #12]
 80112e2:	1ad3      	subs	r3, r2, r3
 80112e4:	b29a      	uxth	r2, r3
 80112e6:	687b      	ldr	r3, [r7, #4]
 80112e8:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 80112ea:	693b      	ldr	r3, [r7, #16]
 80112ec:	89ba      	ldrh	r2, [r7, #12]
 80112ee:	811a      	strh	r2, [r3, #8]
 80112f0:	693b      	ldr	r3, [r7, #16]
 80112f2:	891a      	ldrh	r2, [r3, #8]
 80112f4:	693b      	ldr	r3, [r7, #16]
 80112f6:	815a      	strh	r2, [r3, #10]
  return p;
 80112f8:	693b      	ldr	r3, [r7, #16]
}
 80112fa:	4618      	mov	r0, r3
 80112fc:	3718      	adds	r7, #24
 80112fe:	46bd      	mov	sp, r7
 8011300:	bd80      	pop	{r7, pc}
 8011302:	bf00      	nop
 8011304:	08019a40 	.word	0x08019a40
 8011308:	08019af8 	.word	0x08019af8
 801130c:	08019a94 	.word	0x08019a94
 8011310:	08019b1c 	.word	0x08019b1c
 8011314:	08019b3c 	.word	0x08019b3c

08011318 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8011318:	b580      	push	{r7, lr}
 801131a:	b082      	sub	sp, #8
 801131c:	af00      	add	r7, sp, #0
 801131e:	6078      	str	r0, [r7, #4]
 8011320:	460b      	mov	r3, r1
 8011322:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8011324:	687b      	ldr	r3, [r7, #4]
 8011326:	2b00      	cmp	r3, #0
 8011328:	d106      	bne.n	8011338 <tcp_write_checks+0x20>
 801132a:	4b33      	ldr	r3, [pc, #204]	@ (80113f8 <tcp_write_checks+0xe0>)
 801132c:	f240 1233 	movw	r2, #307	@ 0x133
 8011330:	4932      	ldr	r1, [pc, #200]	@ (80113fc <tcp_write_checks+0xe4>)
 8011332:	4833      	ldr	r0, [pc, #204]	@ (8011400 <tcp_write_checks+0xe8>)
 8011334:	f004 ffec 	bl	8016310 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8011338:	687b      	ldr	r3, [r7, #4]
 801133a:	7d1b      	ldrb	r3, [r3, #20]
 801133c:	2b04      	cmp	r3, #4
 801133e:	d00e      	beq.n	801135e <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8011340:	687b      	ldr	r3, [r7, #4]
 8011342:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8011344:	2b07      	cmp	r3, #7
 8011346:	d00a      	beq.n	801135e <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8011348:	687b      	ldr	r3, [r7, #4]
 801134a:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 801134c:	2b02      	cmp	r3, #2
 801134e:	d006      	beq.n	801135e <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8011350:	687b      	ldr	r3, [r7, #4]
 8011352:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8011354:	2b03      	cmp	r3, #3
 8011356:	d002      	beq.n	801135e <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8011358:	f06f 030a 	mvn.w	r3, #10
 801135c:	e048      	b.n	80113f0 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 801135e:	887b      	ldrh	r3, [r7, #2]
 8011360:	2b00      	cmp	r3, #0
 8011362:	d101      	bne.n	8011368 <tcp_write_checks+0x50>
    return ERR_OK;
 8011364:	2300      	movs	r3, #0
 8011366:	e043      	b.n	80113f0 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8011368:	687b      	ldr	r3, [r7, #4]
 801136a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 801136e:	887a      	ldrh	r2, [r7, #2]
 8011370:	429a      	cmp	r2, r3
 8011372:	d909      	bls.n	8011388 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011374:	687b      	ldr	r3, [r7, #4]
 8011376:	8b5b      	ldrh	r3, [r3, #26]
 8011378:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801137c:	b29a      	uxth	r2, r3
 801137e:	687b      	ldr	r3, [r7, #4]
 8011380:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8011382:	f04f 33ff 	mov.w	r3, #4294967295
 8011386:	e033      	b.n	80113f0 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8011388:	687b      	ldr	r3, [r7, #4]
 801138a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801138e:	2b08      	cmp	r3, #8
 8011390:	d909      	bls.n	80113a6 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011392:	687b      	ldr	r3, [r7, #4]
 8011394:	8b5b      	ldrh	r3, [r3, #26]
 8011396:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801139a:	b29a      	uxth	r2, r3
 801139c:	687b      	ldr	r3, [r7, #4]
 801139e:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 80113a0:	f04f 33ff 	mov.w	r3, #4294967295
 80113a4:	e024      	b.n	80113f0 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 80113a6:	687b      	ldr	r3, [r7, #4]
 80113a8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80113ac:	2b00      	cmp	r3, #0
 80113ae:	d00f      	beq.n	80113d0 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 80113b0:	687b      	ldr	r3, [r7, #4]
 80113b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80113b4:	2b00      	cmp	r3, #0
 80113b6:	d11a      	bne.n	80113ee <tcp_write_checks+0xd6>
 80113b8:	687b      	ldr	r3, [r7, #4]
 80113ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80113bc:	2b00      	cmp	r3, #0
 80113be:	d116      	bne.n	80113ee <tcp_write_checks+0xd6>
 80113c0:	4b0d      	ldr	r3, [pc, #52]	@ (80113f8 <tcp_write_checks+0xe0>)
 80113c2:	f240 1255 	movw	r2, #341	@ 0x155
 80113c6:	490f      	ldr	r1, [pc, #60]	@ (8011404 <tcp_write_checks+0xec>)
 80113c8:	480d      	ldr	r0, [pc, #52]	@ (8011400 <tcp_write_checks+0xe8>)
 80113ca:	f004 ffa1 	bl	8016310 <iprintf>
 80113ce:	e00e      	b.n	80113ee <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 80113d0:	687b      	ldr	r3, [r7, #4]
 80113d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80113d4:	2b00      	cmp	r3, #0
 80113d6:	d103      	bne.n	80113e0 <tcp_write_checks+0xc8>
 80113d8:	687b      	ldr	r3, [r7, #4]
 80113da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80113dc:	2b00      	cmp	r3, #0
 80113de:	d006      	beq.n	80113ee <tcp_write_checks+0xd6>
 80113e0:	4b05      	ldr	r3, [pc, #20]	@ (80113f8 <tcp_write_checks+0xe0>)
 80113e2:	f44f 72ac 	mov.w	r2, #344	@ 0x158
 80113e6:	4908      	ldr	r1, [pc, #32]	@ (8011408 <tcp_write_checks+0xf0>)
 80113e8:	4805      	ldr	r0, [pc, #20]	@ (8011400 <tcp_write_checks+0xe8>)
 80113ea:	f004 ff91 	bl	8016310 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 80113ee:	2300      	movs	r3, #0
}
 80113f0:	4618      	mov	r0, r3
 80113f2:	3708      	adds	r7, #8
 80113f4:	46bd      	mov	sp, r7
 80113f6:	bd80      	pop	{r7, pc}
 80113f8:	08019a40 	.word	0x08019a40
 80113fc:	08019b50 	.word	0x08019b50
 8011400:	08019a94 	.word	0x08019a94
 8011404:	08019b70 	.word	0x08019b70
 8011408:	08019bac 	.word	0x08019bac

0801140c <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 801140c:	b590      	push	{r4, r7, lr}
 801140e:	b09b      	sub	sp, #108	@ 0x6c
 8011410:	af04      	add	r7, sp, #16
 8011412:	60f8      	str	r0, [r7, #12]
 8011414:	60b9      	str	r1, [r7, #8]
 8011416:	4611      	mov	r1, r2
 8011418:	461a      	mov	r2, r3
 801141a:	460b      	mov	r3, r1
 801141c:	80fb      	strh	r3, [r7, #6]
 801141e:	4613      	mov	r3, r2
 8011420:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8011422:	2300      	movs	r3, #0
 8011424:	657b      	str	r3, [r7, #84]	@ 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8011426:	2300      	movs	r3, #0
 8011428:	653b      	str	r3, [r7, #80]	@ 0x50
 801142a:	2300      	movs	r3, #0
 801142c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801142e:	2300      	movs	r3, #0
 8011430:	64bb      	str	r3, [r7, #72]	@ 0x48
 8011432:	2300      	movs	r3, #0
 8011434:	647b      	str	r3, [r7, #68]	@ 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8011436:	2300      	movs	r3, #0
 8011438:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 801143c:	2300      	movs	r3, #0
 801143e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8011442:	2300      	movs	r3, #0
 8011444:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8011446:	2300      	movs	r3, #0
 8011448:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 801144a:	2300      	movs	r3, #0
 801144c:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 801144e:	68fb      	ldr	r3, [r7, #12]
 8011450:	2b00      	cmp	r3, #0
 8011452:	d109      	bne.n	8011468 <tcp_write+0x5c>
 8011454:	4ba4      	ldr	r3, [pc, #656]	@ (80116e8 <tcp_write+0x2dc>)
 8011456:	f44f 72cf 	mov.w	r2, #414	@ 0x19e
 801145a:	49a4      	ldr	r1, [pc, #656]	@ (80116ec <tcp_write+0x2e0>)
 801145c:	48a4      	ldr	r0, [pc, #656]	@ (80116f0 <tcp_write+0x2e4>)
 801145e:	f004 ff57 	bl	8016310 <iprintf>
 8011462:	f06f 030f 	mvn.w	r3, #15
 8011466:	e32a      	b.n	8011abe <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8011468:	68fb      	ldr	r3, [r7, #12]
 801146a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801146e:	085b      	lsrs	r3, r3, #1
 8011470:	b29a      	uxth	r2, r3
 8011472:	68fb      	ldr	r3, [r7, #12]
 8011474:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011476:	4293      	cmp	r3, r2
 8011478:	bf28      	it	cs
 801147a:	4613      	movcs	r3, r2
 801147c:	84bb      	strh	r3, [r7, #36]	@ 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 801147e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8011480:	2b00      	cmp	r3, #0
 8011482:	d102      	bne.n	801148a <tcp_write+0x7e>
 8011484:	68fb      	ldr	r3, [r7, #12]
 8011486:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011488:	e000      	b.n	801148c <tcp_write+0x80>
 801148a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801148c:	84bb      	strh	r3, [r7, #36]	@ 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 801148e:	68bb      	ldr	r3, [r7, #8]
 8011490:	2b00      	cmp	r3, #0
 8011492:	d109      	bne.n	80114a8 <tcp_write+0x9c>
 8011494:	4b94      	ldr	r3, [pc, #592]	@ (80116e8 <tcp_write+0x2dc>)
 8011496:	f240 12ad 	movw	r2, #429	@ 0x1ad
 801149a:	4996      	ldr	r1, [pc, #600]	@ (80116f4 <tcp_write+0x2e8>)
 801149c:	4894      	ldr	r0, [pc, #592]	@ (80116f0 <tcp_write+0x2e4>)
 801149e:	f004 ff37 	bl	8016310 <iprintf>
 80114a2:	f06f 030f 	mvn.w	r3, #15
 80114a6:	e30a      	b.n	8011abe <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 80114a8:	88fb      	ldrh	r3, [r7, #6]
 80114aa:	4619      	mov	r1, r3
 80114ac:	68f8      	ldr	r0, [r7, #12]
 80114ae:	f7ff ff33 	bl	8011318 <tcp_write_checks>
 80114b2:	4603      	mov	r3, r0
 80114b4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (err != ERR_OK) {
 80114b8:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 80114bc:	2b00      	cmp	r3, #0
 80114be:	d002      	beq.n	80114c6 <tcp_write+0xba>
    return err;
 80114c0:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 80114c4:	e2fb      	b.n	8011abe <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 80114c6:	68fb      	ldr	r3, [r7, #12]
 80114c8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80114cc:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80114d0:	2300      	movs	r3, #0
 80114d2:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 80114d6:	68fb      	ldr	r3, [r7, #12]
 80114d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80114da:	2b00      	cmp	r3, #0
 80114dc:	f000 80f6 	beq.w	80116cc <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80114e0:	68fb      	ldr	r3, [r7, #12]
 80114e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80114e4:	653b      	str	r3, [r7, #80]	@ 0x50
 80114e6:	e002      	b.n	80114ee <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 80114e8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80114ea:	681b      	ldr	r3, [r3, #0]
 80114ec:	653b      	str	r3, [r7, #80]	@ 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80114ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80114f0:	681b      	ldr	r3, [r3, #0]
 80114f2:	2b00      	cmp	r3, #0
 80114f4:	d1f8      	bne.n	80114e8 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 80114f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80114f8:	7a9b      	ldrb	r3, [r3, #10]
 80114fa:	009b      	lsls	r3, r3, #2
 80114fc:	b29b      	uxth	r3, r3
 80114fe:	f003 0304 	and.w	r3, r3, #4
 8011502:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8011504:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8011506:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011508:	891b      	ldrh	r3, [r3, #8]
 801150a:	4619      	mov	r1, r3
 801150c:	8c3b      	ldrh	r3, [r7, #32]
 801150e:	440b      	add	r3, r1
 8011510:	429a      	cmp	r2, r3
 8011512:	da06      	bge.n	8011522 <tcp_write+0x116>
 8011514:	4b74      	ldr	r3, [pc, #464]	@ (80116e8 <tcp_write+0x2dc>)
 8011516:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 801151a:	4977      	ldr	r1, [pc, #476]	@ (80116f8 <tcp_write+0x2ec>)
 801151c:	4874      	ldr	r0, [pc, #464]	@ (80116f0 <tcp_write+0x2e4>)
 801151e:	f004 fef7 	bl	8016310 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8011522:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011524:	891a      	ldrh	r2, [r3, #8]
 8011526:	8c3b      	ldrh	r3, [r7, #32]
 8011528:	4413      	add	r3, r2
 801152a:	b29b      	uxth	r3, r3
 801152c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801152e:	1ad3      	subs	r3, r2, r3
 8011530:	877b      	strh	r3, [r7, #58]	@ 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8011532:	68fb      	ldr	r3, [r7, #12]
 8011534:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8011538:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 801153a:	8a7b      	ldrh	r3, [r7, #18]
 801153c:	2b00      	cmp	r3, #0
 801153e:	d026      	beq.n	801158e <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8011540:	8a7b      	ldrh	r3, [r7, #18]
 8011542:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8011544:	429a      	cmp	r2, r3
 8011546:	d206      	bcs.n	8011556 <tcp_write+0x14a>
 8011548:	4b67      	ldr	r3, [pc, #412]	@ (80116e8 <tcp_write+0x2dc>)
 801154a:	f44f 72fc 	mov.w	r2, #504	@ 0x1f8
 801154e:	496b      	ldr	r1, [pc, #428]	@ (80116fc <tcp_write+0x2f0>)
 8011550:	4867      	ldr	r0, [pc, #412]	@ (80116f0 <tcp_write+0x2e4>)
 8011552:	f004 fedd 	bl	8016310 <iprintf>
      seg = last_unsent;
 8011556:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011558:	64fb      	str	r3, [r7, #76]	@ 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 801155a:	8a7b      	ldrh	r3, [r7, #18]
 801155c:	88fa      	ldrh	r2, [r7, #6]
 801155e:	4293      	cmp	r3, r2
 8011560:	bf28      	it	cs
 8011562:	4613      	movcs	r3, r2
 8011564:	b29b      	uxth	r3, r3
 8011566:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8011568:	4293      	cmp	r3, r2
 801156a:	bf28      	it	cs
 801156c:	4613      	movcs	r3, r2
 801156e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
      pos += oversize_used;
 8011570:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8011574:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8011576:	4413      	add	r3, r2
 8011578:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      oversize -= oversize_used;
 801157c:	8a7a      	ldrh	r2, [r7, #18]
 801157e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8011580:	1ad3      	subs	r3, r2, r3
 8011582:	b29b      	uxth	r3, r3
 8011584:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8011586:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8011588:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801158a:	1ad3      	subs	r3, r2, r3
 801158c:	877b      	strh	r3, [r7, #58]	@ 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 801158e:	8a7b      	ldrh	r3, [r7, #18]
 8011590:	2b00      	cmp	r3, #0
 8011592:	d00b      	beq.n	80115ac <tcp_write+0x1a0>
 8011594:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8011598:	88fb      	ldrh	r3, [r7, #6]
 801159a:	429a      	cmp	r2, r3
 801159c:	d006      	beq.n	80115ac <tcp_write+0x1a0>
 801159e:	4b52      	ldr	r3, [pc, #328]	@ (80116e8 <tcp_write+0x2dc>)
 80115a0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80115a4:	4956      	ldr	r1, [pc, #344]	@ (8011700 <tcp_write+0x2f4>)
 80115a6:	4852      	ldr	r0, [pc, #328]	@ (80116f0 <tcp_write+0x2e4>)
 80115a8:	f004 feb2 	bl	8016310 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 80115ac:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80115b0:	88fb      	ldrh	r3, [r7, #6]
 80115b2:	429a      	cmp	r2, r3
 80115b4:	f080 8167 	bcs.w	8011886 <tcp_write+0x47a>
 80115b8:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80115ba:	2b00      	cmp	r3, #0
 80115bc:	f000 8163 	beq.w	8011886 <tcp_write+0x47a>
 80115c0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80115c2:	891b      	ldrh	r3, [r3, #8]
 80115c4:	2b00      	cmp	r3, #0
 80115c6:	f000 815e 	beq.w	8011886 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 80115ca:	88fa      	ldrh	r2, [r7, #6]
 80115cc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80115d0:	1ad2      	subs	r2, r2, r3
 80115d2:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80115d4:	4293      	cmp	r3, r2
 80115d6:	bfa8      	it	ge
 80115d8:	4613      	movge	r3, r2
 80115da:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 80115dc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80115de:	64fb      	str	r3, [r7, #76]	@ 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 80115e0:	797b      	ldrb	r3, [r7, #5]
 80115e2:	f003 0301 	and.w	r3, r3, #1
 80115e6:	2b00      	cmp	r3, #0
 80115e8:	d027      	beq.n	801163a <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 80115ea:	f107 0012 	add.w	r0, r7, #18
 80115ee:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 80115f0:	8bf9      	ldrh	r1, [r7, #30]
 80115f2:	2301      	movs	r3, #1
 80115f4:	9302      	str	r3, [sp, #8]
 80115f6:	797b      	ldrb	r3, [r7, #5]
 80115f8:	9301      	str	r3, [sp, #4]
 80115fa:	68fb      	ldr	r3, [r7, #12]
 80115fc:	9300      	str	r3, [sp, #0]
 80115fe:	4603      	mov	r3, r0
 8011600:	2000      	movs	r0, #0
 8011602:	f7ff fe0f 	bl	8011224 <tcp_pbuf_prealloc>
 8011606:	6578      	str	r0, [r7, #84]	@ 0x54
 8011608:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801160a:	2b00      	cmp	r3, #0
 801160c:	f000 8225 	beq.w	8011a5a <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8011610:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011612:	6858      	ldr	r0, [r3, #4]
 8011614:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8011618:	68ba      	ldr	r2, [r7, #8]
 801161a:	4413      	add	r3, r2
 801161c:	8bfa      	ldrh	r2, [r7, #30]
 801161e:	4619      	mov	r1, r3
 8011620:	f004 ffe1 	bl	80165e6 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8011624:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8011626:	f7fb f995 	bl	800c954 <pbuf_clen>
 801162a:	4603      	mov	r3, r0
 801162c:	461a      	mov	r2, r3
 801162e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8011632:	4413      	add	r3, r2
 8011634:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8011638:	e041      	b.n	80116be <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 801163a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801163c:	685b      	ldr	r3, [r3, #4]
 801163e:	637b      	str	r3, [r7, #52]	@ 0x34
 8011640:	e002      	b.n	8011648 <tcp_write+0x23c>
 8011642:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011644:	681b      	ldr	r3, [r3, #0]
 8011646:	637b      	str	r3, [r7, #52]	@ 0x34
 8011648:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801164a:	681b      	ldr	r3, [r3, #0]
 801164c:	2b00      	cmp	r3, #0
 801164e:	d1f8      	bne.n	8011642 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8011650:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011652:	7b1b      	ldrb	r3, [r3, #12]
 8011654:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8011658:	2b00      	cmp	r3, #0
 801165a:	d115      	bne.n	8011688 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 801165c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801165e:	685b      	ldr	r3, [r3, #4]
 8011660:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011662:	8952      	ldrh	r2, [r2, #10]
 8011664:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8011666:	68ba      	ldr	r2, [r7, #8]
 8011668:	429a      	cmp	r2, r3
 801166a:	d10d      	bne.n	8011688 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 801166c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8011670:	2b00      	cmp	r3, #0
 8011672:	d006      	beq.n	8011682 <tcp_write+0x276>
 8011674:	4b1c      	ldr	r3, [pc, #112]	@ (80116e8 <tcp_write+0x2dc>)
 8011676:	f240 2231 	movw	r2, #561	@ 0x231
 801167a:	4922      	ldr	r1, [pc, #136]	@ (8011704 <tcp_write+0x2f8>)
 801167c:	481c      	ldr	r0, [pc, #112]	@ (80116f0 <tcp_write+0x2e4>)
 801167e:	f004 fe47 	bl	8016310 <iprintf>
          extendlen = seglen;
 8011682:	8bfb      	ldrh	r3, [r7, #30]
 8011684:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8011686:	e01a      	b.n	80116be <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8011688:	8bfb      	ldrh	r3, [r7, #30]
 801168a:	2201      	movs	r2, #1
 801168c:	4619      	mov	r1, r3
 801168e:	2000      	movs	r0, #0
 8011690:	f7fa fdee 	bl	800c270 <pbuf_alloc>
 8011694:	6578      	str	r0, [r7, #84]	@ 0x54
 8011696:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011698:	2b00      	cmp	r3, #0
 801169a:	f000 81e0 	beq.w	8011a5e <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 801169e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80116a2:	68ba      	ldr	r2, [r7, #8]
 80116a4:	441a      	add	r2, r3
 80116a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80116a8:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 80116aa:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 80116ac:	f7fb f952 	bl	800c954 <pbuf_clen>
 80116b0:	4603      	mov	r3, r0
 80116b2:	461a      	mov	r2, r3
 80116b4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80116b8:	4413      	add	r3, r2
 80116ba:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 80116be:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80116c2:	8bfb      	ldrh	r3, [r7, #30]
 80116c4:	4413      	add	r3, r2
 80116c6:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 80116ca:	e0dc      	b.n	8011886 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 80116cc:	68fb      	ldr	r3, [r7, #12]
 80116ce:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80116d2:	2b00      	cmp	r3, #0
 80116d4:	f000 80d7 	beq.w	8011886 <tcp_write+0x47a>
 80116d8:	4b03      	ldr	r3, [pc, #12]	@ (80116e8 <tcp_write+0x2dc>)
 80116da:	f240 224a 	movw	r2, #586	@ 0x24a
 80116de:	490a      	ldr	r1, [pc, #40]	@ (8011708 <tcp_write+0x2fc>)
 80116e0:	4803      	ldr	r0, [pc, #12]	@ (80116f0 <tcp_write+0x2e4>)
 80116e2:	f004 fe15 	bl	8016310 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 80116e6:	e0ce      	b.n	8011886 <tcp_write+0x47a>
 80116e8:	08019a40 	.word	0x08019a40
 80116ec:	08019be0 	.word	0x08019be0
 80116f0:	08019a94 	.word	0x08019a94
 80116f4:	08019bf8 	.word	0x08019bf8
 80116f8:	08019c2c 	.word	0x08019c2c
 80116fc:	08019c44 	.word	0x08019c44
 8011700:	08019c64 	.word	0x08019c64
 8011704:	08019c84 	.word	0x08019c84
 8011708:	08019cb0 	.word	0x08019cb0
    struct pbuf *p;
    u16_t left = len - pos;
 801170c:	88fa      	ldrh	r2, [r7, #6]
 801170e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8011712:	1ad3      	subs	r3, r2, r3
 8011714:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8011716:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801171a:	b29b      	uxth	r3, r3
 801171c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801171e:	1ad3      	subs	r3, r2, r3
 8011720:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 8011722:	8b7a      	ldrh	r2, [r7, #26]
 8011724:	8bbb      	ldrh	r3, [r7, #28]
 8011726:	4293      	cmp	r3, r2
 8011728:	bf28      	it	cs
 801172a:	4613      	movcs	r3, r2
 801172c:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 801172e:	797b      	ldrb	r3, [r7, #5]
 8011730:	f003 0301 	and.w	r3, r3, #1
 8011734:	2b00      	cmp	r3, #0
 8011736:	d036      	beq.n	80117a6 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8011738:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801173c:	b29a      	uxth	r2, r3
 801173e:	8b3b      	ldrh	r3, [r7, #24]
 8011740:	4413      	add	r3, r2
 8011742:	b299      	uxth	r1, r3
 8011744:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011746:	2b00      	cmp	r3, #0
 8011748:	bf0c      	ite	eq
 801174a:	2301      	moveq	r3, #1
 801174c:	2300      	movne	r3, #0
 801174e:	b2db      	uxtb	r3, r3
 8011750:	f107 0012 	add.w	r0, r7, #18
 8011754:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8011756:	9302      	str	r3, [sp, #8]
 8011758:	797b      	ldrb	r3, [r7, #5]
 801175a:	9301      	str	r3, [sp, #4]
 801175c:	68fb      	ldr	r3, [r7, #12]
 801175e:	9300      	str	r3, [sp, #0]
 8011760:	4603      	mov	r3, r0
 8011762:	2036      	movs	r0, #54	@ 0x36
 8011764:	f7ff fd5e 	bl	8011224 <tcp_pbuf_prealloc>
 8011768:	6338      	str	r0, [r7, #48]	@ 0x30
 801176a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801176c:	2b00      	cmp	r3, #0
 801176e:	f000 8178 	beq.w	8011a62 <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8011772:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011774:	895b      	ldrh	r3, [r3, #10]
 8011776:	8b3a      	ldrh	r2, [r7, #24]
 8011778:	429a      	cmp	r2, r3
 801177a:	d906      	bls.n	801178a <tcp_write+0x37e>
 801177c:	4b8c      	ldr	r3, [pc, #560]	@ (80119b0 <tcp_write+0x5a4>)
 801177e:	f240 2266 	movw	r2, #614	@ 0x266
 8011782:	498c      	ldr	r1, [pc, #560]	@ (80119b4 <tcp_write+0x5a8>)
 8011784:	488c      	ldr	r0, [pc, #560]	@ (80119b8 <tcp_write+0x5ac>)
 8011786:	f004 fdc3 	bl	8016310 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 801178a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801178c:	685a      	ldr	r2, [r3, #4]
 801178e:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8011792:	18d0      	adds	r0, r2, r3
 8011794:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8011798:	68ba      	ldr	r2, [r7, #8]
 801179a:	4413      	add	r3, r2
 801179c:	8b3a      	ldrh	r2, [r7, #24]
 801179e:	4619      	mov	r1, r3
 80117a0:	f004 ff21 	bl	80165e6 <memcpy>
 80117a4:	e02f      	b.n	8011806 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 80117a6:	8a7b      	ldrh	r3, [r7, #18]
 80117a8:	2b00      	cmp	r3, #0
 80117aa:	d006      	beq.n	80117ba <tcp_write+0x3ae>
 80117ac:	4b80      	ldr	r3, [pc, #512]	@ (80119b0 <tcp_write+0x5a4>)
 80117ae:	f240 2271 	movw	r2, #625	@ 0x271
 80117b2:	4982      	ldr	r1, [pc, #520]	@ (80119bc <tcp_write+0x5b0>)
 80117b4:	4880      	ldr	r0, [pc, #512]	@ (80119b8 <tcp_write+0x5ac>)
 80117b6:	f004 fdab 	bl	8016310 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 80117ba:	8b3b      	ldrh	r3, [r7, #24]
 80117bc:	2201      	movs	r2, #1
 80117be:	4619      	mov	r1, r3
 80117c0:	2036      	movs	r0, #54	@ 0x36
 80117c2:	f7fa fd55 	bl	800c270 <pbuf_alloc>
 80117c6:	6178      	str	r0, [r7, #20]
 80117c8:	697b      	ldr	r3, [r7, #20]
 80117ca:	2b00      	cmp	r3, #0
 80117cc:	f000 814b 	beq.w	8011a66 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 80117d0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80117d4:	68ba      	ldr	r2, [r7, #8]
 80117d6:	441a      	add	r2, r3
 80117d8:	697b      	ldr	r3, [r7, #20]
 80117da:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80117dc:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80117e0:	b29b      	uxth	r3, r3
 80117e2:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80117e6:	4619      	mov	r1, r3
 80117e8:	2036      	movs	r0, #54	@ 0x36
 80117ea:	f7fa fd41 	bl	800c270 <pbuf_alloc>
 80117ee:	6338      	str	r0, [r7, #48]	@ 0x30
 80117f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80117f2:	2b00      	cmp	r3, #0
 80117f4:	d103      	bne.n	80117fe <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 80117f6:	6978      	ldr	r0, [r7, #20]
 80117f8:	f7fb f81e 	bl	800c838 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 80117fc:	e136      	b.n	8011a6c <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 80117fe:	6979      	ldr	r1, [r7, #20]
 8011800:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8011802:	f7fb f8e7 	bl	800c9d4 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8011806:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8011808:	f7fb f8a4 	bl	800c954 <pbuf_clen>
 801180c:	4603      	mov	r3, r0
 801180e:	461a      	mov	r2, r3
 8011810:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8011814:	4413      	add	r3, r2
 8011816:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 801181a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 801181e:	2b09      	cmp	r3, #9
 8011820:	d903      	bls.n	801182a <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8011822:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8011824:	f7fb f808 	bl	800c838 <pbuf_free>
      goto memerr;
 8011828:	e120      	b.n	8011a6c <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 801182a:	68fb      	ldr	r3, [r7, #12]
 801182c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 801182e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8011832:	441a      	add	r2, r3
 8011834:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011838:	9300      	str	r3, [sp, #0]
 801183a:	4613      	mov	r3, r2
 801183c:	2200      	movs	r2, #0
 801183e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8011840:	68f8      	ldr	r0, [r7, #12]
 8011842:	f7ff fc53 	bl	80110ec <tcp_create_segment>
 8011846:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8011848:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801184a:	2b00      	cmp	r3, #0
 801184c:	f000 810d 	beq.w	8011a6a <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8011850:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011852:	2b00      	cmp	r3, #0
 8011854:	d102      	bne.n	801185c <tcp_write+0x450>
      queue = seg;
 8011856:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011858:	647b      	str	r3, [r7, #68]	@ 0x44
 801185a:	e00c      	b.n	8011876 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 801185c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801185e:	2b00      	cmp	r3, #0
 8011860:	d106      	bne.n	8011870 <tcp_write+0x464>
 8011862:	4b53      	ldr	r3, [pc, #332]	@ (80119b0 <tcp_write+0x5a4>)
 8011864:	f240 22ab 	movw	r2, #683	@ 0x2ab
 8011868:	4955      	ldr	r1, [pc, #340]	@ (80119c0 <tcp_write+0x5b4>)
 801186a:	4853      	ldr	r0, [pc, #332]	@ (80119b8 <tcp_write+0x5ac>)
 801186c:	f004 fd50 	bl	8016310 <iprintf>
      prev_seg->next = seg;
 8011870:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011872:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8011874:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8011876:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011878:	64bb      	str	r3, [r7, #72]	@ 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 801187a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801187e:	8b3b      	ldrh	r3, [r7, #24]
 8011880:	4413      	add	r3, r2
 8011882:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  while (pos < len) {
 8011886:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801188a:	88fb      	ldrh	r3, [r7, #6]
 801188c:	429a      	cmp	r2, r3
 801188e:	f4ff af3d 	bcc.w	801170c <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8011892:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8011894:	2b00      	cmp	r3, #0
 8011896:	d02c      	beq.n	80118f2 <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8011898:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801189a:	685b      	ldr	r3, [r3, #4]
 801189c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801189e:	e01e      	b.n	80118de <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 80118a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80118a2:	891a      	ldrh	r2, [r3, #8]
 80118a4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80118a6:	4413      	add	r3, r2
 80118a8:	b29a      	uxth	r2, r3
 80118aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80118ac:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 80118ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80118b0:	681b      	ldr	r3, [r3, #0]
 80118b2:	2b00      	cmp	r3, #0
 80118b4:	d110      	bne.n	80118d8 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 80118b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80118b8:	685b      	ldr	r3, [r3, #4]
 80118ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80118bc:	8952      	ldrh	r2, [r2, #10]
 80118be:	4413      	add	r3, r2
 80118c0:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 80118c2:	68b9      	ldr	r1, [r7, #8]
 80118c4:	4618      	mov	r0, r3
 80118c6:	f004 fe8e 	bl	80165e6 <memcpy>
        p->len += oversize_used;
 80118ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80118cc:	895a      	ldrh	r2, [r3, #10]
 80118ce:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80118d0:	4413      	add	r3, r2
 80118d2:	b29a      	uxth	r2, r3
 80118d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80118d6:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 80118d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80118da:	681b      	ldr	r3, [r3, #0]
 80118dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80118de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80118e0:	2b00      	cmp	r3, #0
 80118e2:	d1dd      	bne.n	80118a0 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 80118e4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80118e6:	891a      	ldrh	r2, [r3, #8]
 80118e8:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80118ea:	4413      	add	r3, r2
 80118ec:	b29a      	uxth	r2, r3
 80118ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80118f0:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 80118f2:	8a7a      	ldrh	r2, [r7, #18]
 80118f4:	68fb      	ldr	r3, [r7, #12]
 80118f6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 80118fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80118fc:	2b00      	cmp	r3, #0
 80118fe:	d018      	beq.n	8011932 <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8011900:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011902:	2b00      	cmp	r3, #0
 8011904:	d106      	bne.n	8011914 <tcp_write+0x508>
 8011906:	4b2a      	ldr	r3, [pc, #168]	@ (80119b0 <tcp_write+0x5a4>)
 8011908:	f44f 7238 	mov.w	r2, #736	@ 0x2e0
 801190c:	492d      	ldr	r1, [pc, #180]	@ (80119c4 <tcp_write+0x5b8>)
 801190e:	482a      	ldr	r0, [pc, #168]	@ (80119b8 <tcp_write+0x5ac>)
 8011910:	f004 fcfe 	bl	8016310 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8011914:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011916:	685b      	ldr	r3, [r3, #4]
 8011918:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801191a:	4618      	mov	r0, r3
 801191c:	f7fb f85a 	bl	800c9d4 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8011920:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011922:	891a      	ldrh	r2, [r3, #8]
 8011924:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011926:	891b      	ldrh	r3, [r3, #8]
 8011928:	4413      	add	r3, r2
 801192a:	b29a      	uxth	r2, r3
 801192c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801192e:	811a      	strh	r2, [r3, #8]
 8011930:	e037      	b.n	80119a2 <tcp_write+0x596>
  } else if (extendlen > 0) {
 8011932:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8011934:	2b00      	cmp	r3, #0
 8011936:	d034      	beq.n	80119a2 <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8011938:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801193a:	2b00      	cmp	r3, #0
 801193c:	d003      	beq.n	8011946 <tcp_write+0x53a>
 801193e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011940:	685b      	ldr	r3, [r3, #4]
 8011942:	2b00      	cmp	r3, #0
 8011944:	d106      	bne.n	8011954 <tcp_write+0x548>
 8011946:	4b1a      	ldr	r3, [pc, #104]	@ (80119b0 <tcp_write+0x5a4>)
 8011948:	f240 22e6 	movw	r2, #742	@ 0x2e6
 801194c:	491e      	ldr	r1, [pc, #120]	@ (80119c8 <tcp_write+0x5bc>)
 801194e:	481a      	ldr	r0, [pc, #104]	@ (80119b8 <tcp_write+0x5ac>)
 8011950:	f004 fcde 	bl	8016310 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8011954:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011956:	685b      	ldr	r3, [r3, #4]
 8011958:	62bb      	str	r3, [r7, #40]	@ 0x28
 801195a:	e009      	b.n	8011970 <tcp_write+0x564>
      p->tot_len += extendlen;
 801195c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801195e:	891a      	ldrh	r2, [r3, #8]
 8011960:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8011962:	4413      	add	r3, r2
 8011964:	b29a      	uxth	r2, r3
 8011966:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011968:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801196a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801196c:	681b      	ldr	r3, [r3, #0]
 801196e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011970:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011972:	681b      	ldr	r3, [r3, #0]
 8011974:	2b00      	cmp	r3, #0
 8011976:	d1f1      	bne.n	801195c <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 8011978:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801197a:	891a      	ldrh	r2, [r3, #8]
 801197c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801197e:	4413      	add	r3, r2
 8011980:	b29a      	uxth	r2, r3
 8011982:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011984:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8011986:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011988:	895a      	ldrh	r2, [r3, #10]
 801198a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801198c:	4413      	add	r3, r2
 801198e:	b29a      	uxth	r2, r3
 8011990:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011992:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8011994:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011996:	891a      	ldrh	r2, [r3, #8]
 8011998:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801199a:	4413      	add	r3, r2
 801199c:	b29a      	uxth	r2, r3
 801199e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80119a0:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 80119a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80119a4:	2b00      	cmp	r3, #0
 80119a6:	d111      	bne.n	80119cc <tcp_write+0x5c0>
    pcb->unsent = queue;
 80119a8:	68fb      	ldr	r3, [r7, #12]
 80119aa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80119ac:	66da      	str	r2, [r3, #108]	@ 0x6c
 80119ae:	e010      	b.n	80119d2 <tcp_write+0x5c6>
 80119b0:	08019a40 	.word	0x08019a40
 80119b4:	08019ce0 	.word	0x08019ce0
 80119b8:	08019a94 	.word	0x08019a94
 80119bc:	08019d20 	.word	0x08019d20
 80119c0:	08019d30 	.word	0x08019d30
 80119c4:	08019d44 	.word	0x08019d44
 80119c8:	08019d7c 	.word	0x08019d7c
  } else {
    last_unsent->next = queue;
 80119cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80119ce:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80119d0:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 80119d2:	68fb      	ldr	r3, [r7, #12]
 80119d4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80119d6:	88fb      	ldrh	r3, [r7, #6]
 80119d8:	441a      	add	r2, r3
 80119da:	68fb      	ldr	r3, [r7, #12]
 80119dc:	65da      	str	r2, [r3, #92]	@ 0x5c
  pcb->snd_buf -= len;
 80119de:	68fb      	ldr	r3, [r7, #12]
 80119e0:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 80119e4:	88fb      	ldrh	r3, [r7, #6]
 80119e6:	1ad3      	subs	r3, r2, r3
 80119e8:	b29a      	uxth	r2, r3
 80119ea:	68fb      	ldr	r3, [r7, #12]
 80119ec:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  pcb->snd_queuelen = queuelen;
 80119f0:	68fb      	ldr	r3, [r7, #12]
 80119f2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 80119f6:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80119fa:	68fb      	ldr	r3, [r7, #12]
 80119fc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8011a00:	2b00      	cmp	r3, #0
 8011a02:	d00e      	beq.n	8011a22 <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 8011a04:	68fb      	ldr	r3, [r7, #12]
 8011a06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011a08:	2b00      	cmp	r3, #0
 8011a0a:	d10a      	bne.n	8011a22 <tcp_write+0x616>
 8011a0c:	68fb      	ldr	r3, [r7, #12]
 8011a0e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011a10:	2b00      	cmp	r3, #0
 8011a12:	d106      	bne.n	8011a22 <tcp_write+0x616>
 8011a14:	4b2c      	ldr	r3, [pc, #176]	@ (8011ac8 <tcp_write+0x6bc>)
 8011a16:	f240 3212 	movw	r2, #786	@ 0x312
 8011a1a:	492c      	ldr	r1, [pc, #176]	@ (8011acc <tcp_write+0x6c0>)
 8011a1c:	482c      	ldr	r0, [pc, #176]	@ (8011ad0 <tcp_write+0x6c4>)
 8011a1e:	f004 fc77 	bl	8016310 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 8011a22:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011a24:	2b00      	cmp	r3, #0
 8011a26:	d016      	beq.n	8011a56 <tcp_write+0x64a>
 8011a28:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011a2a:	68db      	ldr	r3, [r3, #12]
 8011a2c:	2b00      	cmp	r3, #0
 8011a2e:	d012      	beq.n	8011a56 <tcp_write+0x64a>
 8011a30:	797b      	ldrb	r3, [r7, #5]
 8011a32:	f003 0302 	and.w	r3, r3, #2
 8011a36:	2b00      	cmp	r3, #0
 8011a38:	d10d      	bne.n	8011a56 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8011a3a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011a3c:	68db      	ldr	r3, [r3, #12]
 8011a3e:	899b      	ldrh	r3, [r3, #12]
 8011a40:	b29c      	uxth	r4, r3
 8011a42:	2008      	movs	r0, #8
 8011a44:	f7f9 fb06 	bl	800b054 <lwip_htons>
 8011a48:	4603      	mov	r3, r0
 8011a4a:	461a      	mov	r2, r3
 8011a4c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011a4e:	68db      	ldr	r3, [r3, #12]
 8011a50:	4322      	orrs	r2, r4
 8011a52:	b292      	uxth	r2, r2
 8011a54:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8011a56:	2300      	movs	r3, #0
 8011a58:	e031      	b.n	8011abe <tcp_write+0x6b2>
          goto memerr;
 8011a5a:	bf00      	nop
 8011a5c:	e006      	b.n	8011a6c <tcp_write+0x660>
            goto memerr;
 8011a5e:	bf00      	nop
 8011a60:	e004      	b.n	8011a6c <tcp_write+0x660>
        goto memerr;
 8011a62:	bf00      	nop
 8011a64:	e002      	b.n	8011a6c <tcp_write+0x660>
        goto memerr;
 8011a66:	bf00      	nop
 8011a68:	e000      	b.n	8011a6c <tcp_write+0x660>
      goto memerr;
 8011a6a:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011a6c:	68fb      	ldr	r3, [r7, #12]
 8011a6e:	8b5b      	ldrh	r3, [r3, #26]
 8011a70:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011a74:	b29a      	uxth	r2, r3
 8011a76:	68fb      	ldr	r3, [r7, #12]
 8011a78:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8011a7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011a7c:	2b00      	cmp	r3, #0
 8011a7e:	d002      	beq.n	8011a86 <tcp_write+0x67a>
    pbuf_free(concat_p);
 8011a80:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8011a82:	f7fa fed9 	bl	800c838 <pbuf_free>
  }
  if (queue != NULL) {
 8011a86:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011a88:	2b00      	cmp	r3, #0
 8011a8a:	d002      	beq.n	8011a92 <tcp_write+0x686>
    tcp_segs_free(queue);
 8011a8c:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8011a8e:	f7fc fb69 	bl	800e164 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8011a92:	68fb      	ldr	r3, [r7, #12]
 8011a94:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8011a98:	2b00      	cmp	r3, #0
 8011a9a:	d00e      	beq.n	8011aba <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8011a9c:	68fb      	ldr	r3, [r7, #12]
 8011a9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011aa0:	2b00      	cmp	r3, #0
 8011aa2:	d10a      	bne.n	8011aba <tcp_write+0x6ae>
 8011aa4:	68fb      	ldr	r3, [r7, #12]
 8011aa6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011aa8:	2b00      	cmp	r3, #0
 8011aaa:	d106      	bne.n	8011aba <tcp_write+0x6ae>
 8011aac:	4b06      	ldr	r3, [pc, #24]	@ (8011ac8 <tcp_write+0x6bc>)
 8011aae:	f240 3227 	movw	r2, #807	@ 0x327
 8011ab2:	4906      	ldr	r1, [pc, #24]	@ (8011acc <tcp_write+0x6c0>)
 8011ab4:	4806      	ldr	r0, [pc, #24]	@ (8011ad0 <tcp_write+0x6c4>)
 8011ab6:	f004 fc2b 	bl	8016310 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8011aba:	f04f 33ff 	mov.w	r3, #4294967295
}
 8011abe:	4618      	mov	r0, r3
 8011ac0:	375c      	adds	r7, #92	@ 0x5c
 8011ac2:	46bd      	mov	sp, r7
 8011ac4:	bd90      	pop	{r4, r7, pc}
 8011ac6:	bf00      	nop
 8011ac8:	08019a40 	.word	0x08019a40
 8011acc:	08019db4 	.word	0x08019db4
 8011ad0:	08019a94 	.word	0x08019a94

08011ad4 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8011ad4:	b590      	push	{r4, r7, lr}
 8011ad6:	b08b      	sub	sp, #44	@ 0x2c
 8011ad8:	af02      	add	r7, sp, #8
 8011ada:	6078      	str	r0, [r7, #4]
 8011adc:	460b      	mov	r3, r1
 8011ade:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8011ae0:	2300      	movs	r3, #0
 8011ae2:	61fb      	str	r3, [r7, #28]
 8011ae4:	2300      	movs	r3, #0
 8011ae6:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8011ae8:	2300      	movs	r3, #0
 8011aea:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8011aec:	687b      	ldr	r3, [r7, #4]
 8011aee:	2b00      	cmp	r3, #0
 8011af0:	d106      	bne.n	8011b00 <tcp_split_unsent_seg+0x2c>
 8011af2:	4b95      	ldr	r3, [pc, #596]	@ (8011d48 <tcp_split_unsent_seg+0x274>)
 8011af4:	f240 324b 	movw	r2, #843	@ 0x34b
 8011af8:	4994      	ldr	r1, [pc, #592]	@ (8011d4c <tcp_split_unsent_seg+0x278>)
 8011afa:	4895      	ldr	r0, [pc, #596]	@ (8011d50 <tcp_split_unsent_seg+0x27c>)
 8011afc:	f004 fc08 	bl	8016310 <iprintf>

  useg = pcb->unsent;
 8011b00:	687b      	ldr	r3, [r7, #4]
 8011b02:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011b04:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8011b06:	697b      	ldr	r3, [r7, #20]
 8011b08:	2b00      	cmp	r3, #0
 8011b0a:	d102      	bne.n	8011b12 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8011b0c:	f04f 33ff 	mov.w	r3, #4294967295
 8011b10:	e116      	b.n	8011d40 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8011b12:	887b      	ldrh	r3, [r7, #2]
 8011b14:	2b00      	cmp	r3, #0
 8011b16:	d109      	bne.n	8011b2c <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8011b18:	4b8b      	ldr	r3, [pc, #556]	@ (8011d48 <tcp_split_unsent_seg+0x274>)
 8011b1a:	f240 3253 	movw	r2, #851	@ 0x353
 8011b1e:	498d      	ldr	r1, [pc, #564]	@ (8011d54 <tcp_split_unsent_seg+0x280>)
 8011b20:	488b      	ldr	r0, [pc, #556]	@ (8011d50 <tcp_split_unsent_seg+0x27c>)
 8011b22:	f004 fbf5 	bl	8016310 <iprintf>
    return ERR_VAL;
 8011b26:	f06f 0305 	mvn.w	r3, #5
 8011b2a:	e109      	b.n	8011d40 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8011b2c:	697b      	ldr	r3, [r7, #20]
 8011b2e:	891b      	ldrh	r3, [r3, #8]
 8011b30:	887a      	ldrh	r2, [r7, #2]
 8011b32:	429a      	cmp	r2, r3
 8011b34:	d301      	bcc.n	8011b3a <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8011b36:	2300      	movs	r3, #0
 8011b38:	e102      	b.n	8011d40 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8011b3a:	687b      	ldr	r3, [r7, #4]
 8011b3c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011b3e:	887a      	ldrh	r2, [r7, #2]
 8011b40:	429a      	cmp	r2, r3
 8011b42:	d906      	bls.n	8011b52 <tcp_split_unsent_seg+0x7e>
 8011b44:	4b80      	ldr	r3, [pc, #512]	@ (8011d48 <tcp_split_unsent_seg+0x274>)
 8011b46:	f240 325b 	movw	r2, #859	@ 0x35b
 8011b4a:	4983      	ldr	r1, [pc, #524]	@ (8011d58 <tcp_split_unsent_seg+0x284>)
 8011b4c:	4880      	ldr	r0, [pc, #512]	@ (8011d50 <tcp_split_unsent_seg+0x27c>)
 8011b4e:	f004 fbdf 	bl	8016310 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8011b52:	697b      	ldr	r3, [r7, #20]
 8011b54:	891b      	ldrh	r3, [r3, #8]
 8011b56:	2b00      	cmp	r3, #0
 8011b58:	d106      	bne.n	8011b68 <tcp_split_unsent_seg+0x94>
 8011b5a:	4b7b      	ldr	r3, [pc, #492]	@ (8011d48 <tcp_split_unsent_seg+0x274>)
 8011b5c:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 8011b60:	497e      	ldr	r1, [pc, #504]	@ (8011d5c <tcp_split_unsent_seg+0x288>)
 8011b62:	487b      	ldr	r0, [pc, #492]	@ (8011d50 <tcp_split_unsent_seg+0x27c>)
 8011b64:	f004 fbd4 	bl	8016310 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8011b68:	697b      	ldr	r3, [r7, #20]
 8011b6a:	7a9b      	ldrb	r3, [r3, #10]
 8011b6c:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8011b6e:	7bfb      	ldrb	r3, [r7, #15]
 8011b70:	009b      	lsls	r3, r3, #2
 8011b72:	b2db      	uxtb	r3, r3
 8011b74:	f003 0304 	and.w	r3, r3, #4
 8011b78:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8011b7a:	697b      	ldr	r3, [r7, #20]
 8011b7c:	891a      	ldrh	r2, [r3, #8]
 8011b7e:	887b      	ldrh	r3, [r7, #2]
 8011b80:	1ad3      	subs	r3, r2, r3
 8011b82:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8011b84:	7bbb      	ldrb	r3, [r7, #14]
 8011b86:	b29a      	uxth	r2, r3
 8011b88:	89bb      	ldrh	r3, [r7, #12]
 8011b8a:	4413      	add	r3, r2
 8011b8c:	b29b      	uxth	r3, r3
 8011b8e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8011b92:	4619      	mov	r1, r3
 8011b94:	2036      	movs	r0, #54	@ 0x36
 8011b96:	f7fa fb6b 	bl	800c270 <pbuf_alloc>
 8011b9a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011b9c:	693b      	ldr	r3, [r7, #16]
 8011b9e:	2b00      	cmp	r3, #0
 8011ba0:	f000 80b7 	beq.w	8011d12 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8011ba4:	697b      	ldr	r3, [r7, #20]
 8011ba6:	685b      	ldr	r3, [r3, #4]
 8011ba8:	891a      	ldrh	r2, [r3, #8]
 8011baa:	697b      	ldr	r3, [r7, #20]
 8011bac:	891b      	ldrh	r3, [r3, #8]
 8011bae:	1ad3      	subs	r3, r2, r3
 8011bb0:	b29a      	uxth	r2, r3
 8011bb2:	887b      	ldrh	r3, [r7, #2]
 8011bb4:	4413      	add	r3, r2
 8011bb6:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8011bb8:	697b      	ldr	r3, [r7, #20]
 8011bba:	6858      	ldr	r0, [r3, #4]
 8011bbc:	693b      	ldr	r3, [r7, #16]
 8011bbe:	685a      	ldr	r2, [r3, #4]
 8011bc0:	7bbb      	ldrb	r3, [r7, #14]
 8011bc2:	18d1      	adds	r1, r2, r3
 8011bc4:	897b      	ldrh	r3, [r7, #10]
 8011bc6:	89ba      	ldrh	r2, [r7, #12]
 8011bc8:	f7fb f82c 	bl	800cc24 <pbuf_copy_partial>
 8011bcc:	4603      	mov	r3, r0
 8011bce:	461a      	mov	r2, r3
 8011bd0:	89bb      	ldrh	r3, [r7, #12]
 8011bd2:	4293      	cmp	r3, r2
 8011bd4:	f040 809f 	bne.w	8011d16 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8011bd8:	697b      	ldr	r3, [r7, #20]
 8011bda:	68db      	ldr	r3, [r3, #12]
 8011bdc:	899b      	ldrh	r3, [r3, #12]
 8011bde:	b29b      	uxth	r3, r3
 8011be0:	4618      	mov	r0, r3
 8011be2:	f7f9 fa37 	bl	800b054 <lwip_htons>
 8011be6:	4603      	mov	r3, r0
 8011be8:	b2db      	uxtb	r3, r3
 8011bea:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8011bee:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8011bf0:	2300      	movs	r3, #0
 8011bf2:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8011bf4:	7efb      	ldrb	r3, [r7, #27]
 8011bf6:	f003 0308 	and.w	r3, r3, #8
 8011bfa:	2b00      	cmp	r3, #0
 8011bfc:	d007      	beq.n	8011c0e <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8011bfe:	7efb      	ldrb	r3, [r7, #27]
 8011c00:	f023 0308 	bic.w	r3, r3, #8
 8011c04:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8011c06:	7ebb      	ldrb	r3, [r7, #26]
 8011c08:	f043 0308 	orr.w	r3, r3, #8
 8011c0c:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8011c0e:	7efb      	ldrb	r3, [r7, #27]
 8011c10:	f003 0301 	and.w	r3, r3, #1
 8011c14:	2b00      	cmp	r3, #0
 8011c16:	d007      	beq.n	8011c28 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8011c18:	7efb      	ldrb	r3, [r7, #27]
 8011c1a:	f023 0301 	bic.w	r3, r3, #1
 8011c1e:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8011c20:	7ebb      	ldrb	r3, [r7, #26]
 8011c22:	f043 0301 	orr.w	r3, r3, #1
 8011c26:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8011c28:	697b      	ldr	r3, [r7, #20]
 8011c2a:	68db      	ldr	r3, [r3, #12]
 8011c2c:	685b      	ldr	r3, [r3, #4]
 8011c2e:	4618      	mov	r0, r3
 8011c30:	f7f9 fa25 	bl	800b07e <lwip_htonl>
 8011c34:	4602      	mov	r2, r0
 8011c36:	887b      	ldrh	r3, [r7, #2]
 8011c38:	18d1      	adds	r1, r2, r3
 8011c3a:	7eba      	ldrb	r2, [r7, #26]
 8011c3c:	7bfb      	ldrb	r3, [r7, #15]
 8011c3e:	9300      	str	r3, [sp, #0]
 8011c40:	460b      	mov	r3, r1
 8011c42:	6939      	ldr	r1, [r7, #16]
 8011c44:	6878      	ldr	r0, [r7, #4]
 8011c46:	f7ff fa51 	bl	80110ec <tcp_create_segment>
 8011c4a:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8011c4c:	69fb      	ldr	r3, [r7, #28]
 8011c4e:	2b00      	cmp	r3, #0
 8011c50:	d063      	beq.n	8011d1a <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8011c52:	697b      	ldr	r3, [r7, #20]
 8011c54:	685b      	ldr	r3, [r3, #4]
 8011c56:	4618      	mov	r0, r3
 8011c58:	f7fa fe7c 	bl	800c954 <pbuf_clen>
 8011c5c:	4603      	mov	r3, r0
 8011c5e:	461a      	mov	r2, r3
 8011c60:	687b      	ldr	r3, [r7, #4]
 8011c62:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8011c66:	1a9b      	subs	r3, r3, r2
 8011c68:	b29a      	uxth	r2, r3
 8011c6a:	687b      	ldr	r3, [r7, #4]
 8011c6c:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8011c70:	697b      	ldr	r3, [r7, #20]
 8011c72:	6858      	ldr	r0, [r3, #4]
 8011c74:	697b      	ldr	r3, [r7, #20]
 8011c76:	685b      	ldr	r3, [r3, #4]
 8011c78:	891a      	ldrh	r2, [r3, #8]
 8011c7a:	89bb      	ldrh	r3, [r7, #12]
 8011c7c:	1ad3      	subs	r3, r2, r3
 8011c7e:	b29b      	uxth	r3, r3
 8011c80:	4619      	mov	r1, r3
 8011c82:	f7fa fc53 	bl	800c52c <pbuf_realloc>
  useg->len -= remainder;
 8011c86:	697b      	ldr	r3, [r7, #20]
 8011c88:	891a      	ldrh	r2, [r3, #8]
 8011c8a:	89bb      	ldrh	r3, [r7, #12]
 8011c8c:	1ad3      	subs	r3, r2, r3
 8011c8e:	b29a      	uxth	r2, r3
 8011c90:	697b      	ldr	r3, [r7, #20]
 8011c92:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8011c94:	697b      	ldr	r3, [r7, #20]
 8011c96:	68db      	ldr	r3, [r3, #12]
 8011c98:	899b      	ldrh	r3, [r3, #12]
 8011c9a:	b29c      	uxth	r4, r3
 8011c9c:	7efb      	ldrb	r3, [r7, #27]
 8011c9e:	b29b      	uxth	r3, r3
 8011ca0:	4618      	mov	r0, r3
 8011ca2:	f7f9 f9d7 	bl	800b054 <lwip_htons>
 8011ca6:	4603      	mov	r3, r0
 8011ca8:	461a      	mov	r2, r3
 8011caa:	697b      	ldr	r3, [r7, #20]
 8011cac:	68db      	ldr	r3, [r3, #12]
 8011cae:	4322      	orrs	r2, r4
 8011cb0:	b292      	uxth	r2, r2
 8011cb2:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8011cb4:	697b      	ldr	r3, [r7, #20]
 8011cb6:	685b      	ldr	r3, [r3, #4]
 8011cb8:	4618      	mov	r0, r3
 8011cba:	f7fa fe4b 	bl	800c954 <pbuf_clen>
 8011cbe:	4603      	mov	r3, r0
 8011cc0:	461a      	mov	r2, r3
 8011cc2:	687b      	ldr	r3, [r7, #4]
 8011cc4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8011cc8:	4413      	add	r3, r2
 8011cca:	b29a      	uxth	r2, r3
 8011ccc:	687b      	ldr	r3, [r7, #4]
 8011cce:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8011cd2:	69fb      	ldr	r3, [r7, #28]
 8011cd4:	685b      	ldr	r3, [r3, #4]
 8011cd6:	4618      	mov	r0, r3
 8011cd8:	f7fa fe3c 	bl	800c954 <pbuf_clen>
 8011cdc:	4603      	mov	r3, r0
 8011cde:	461a      	mov	r2, r3
 8011ce0:	687b      	ldr	r3, [r7, #4]
 8011ce2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8011ce6:	4413      	add	r3, r2
 8011ce8:	b29a      	uxth	r2, r3
 8011cea:	687b      	ldr	r3, [r7, #4]
 8011cec:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8011cf0:	697b      	ldr	r3, [r7, #20]
 8011cf2:	681a      	ldr	r2, [r3, #0]
 8011cf4:	69fb      	ldr	r3, [r7, #28]
 8011cf6:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8011cf8:	697b      	ldr	r3, [r7, #20]
 8011cfa:	69fa      	ldr	r2, [r7, #28]
 8011cfc:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8011cfe:	69fb      	ldr	r3, [r7, #28]
 8011d00:	681b      	ldr	r3, [r3, #0]
 8011d02:	2b00      	cmp	r3, #0
 8011d04:	d103      	bne.n	8011d0e <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8011d06:	687b      	ldr	r3, [r7, #4]
 8011d08:	2200      	movs	r2, #0
 8011d0a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8011d0e:	2300      	movs	r3, #0
 8011d10:	e016      	b.n	8011d40 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8011d12:	bf00      	nop
 8011d14:	e002      	b.n	8011d1c <tcp_split_unsent_seg+0x248>
    goto memerr;
 8011d16:	bf00      	nop
 8011d18:	e000      	b.n	8011d1c <tcp_split_unsent_seg+0x248>
    goto memerr;
 8011d1a:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8011d1c:	69fb      	ldr	r3, [r7, #28]
 8011d1e:	2b00      	cmp	r3, #0
 8011d20:	d006      	beq.n	8011d30 <tcp_split_unsent_seg+0x25c>
 8011d22:	4b09      	ldr	r3, [pc, #36]	@ (8011d48 <tcp_split_unsent_seg+0x274>)
 8011d24:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 8011d28:	490d      	ldr	r1, [pc, #52]	@ (8011d60 <tcp_split_unsent_seg+0x28c>)
 8011d2a:	4809      	ldr	r0, [pc, #36]	@ (8011d50 <tcp_split_unsent_seg+0x27c>)
 8011d2c:	f004 faf0 	bl	8016310 <iprintf>
  if (p != NULL) {
 8011d30:	693b      	ldr	r3, [r7, #16]
 8011d32:	2b00      	cmp	r3, #0
 8011d34:	d002      	beq.n	8011d3c <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8011d36:	6938      	ldr	r0, [r7, #16]
 8011d38:	f7fa fd7e 	bl	800c838 <pbuf_free>
  }

  return ERR_MEM;
 8011d3c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8011d40:	4618      	mov	r0, r3
 8011d42:	3724      	adds	r7, #36	@ 0x24
 8011d44:	46bd      	mov	sp, r7
 8011d46:	bd90      	pop	{r4, r7, pc}
 8011d48:	08019a40 	.word	0x08019a40
 8011d4c:	08019dd4 	.word	0x08019dd4
 8011d50:	08019a94 	.word	0x08019a94
 8011d54:	08019df8 	.word	0x08019df8
 8011d58:	08019e1c 	.word	0x08019e1c
 8011d5c:	08019e2c 	.word	0x08019e2c
 8011d60:	08019e3c 	.word	0x08019e3c

08011d64 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8011d64:	b590      	push	{r4, r7, lr}
 8011d66:	b085      	sub	sp, #20
 8011d68:	af00      	add	r7, sp, #0
 8011d6a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8011d6c:	687b      	ldr	r3, [r7, #4]
 8011d6e:	2b00      	cmp	r3, #0
 8011d70:	d106      	bne.n	8011d80 <tcp_send_fin+0x1c>
 8011d72:	4b21      	ldr	r3, [pc, #132]	@ (8011df8 <tcp_send_fin+0x94>)
 8011d74:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 8011d78:	4920      	ldr	r1, [pc, #128]	@ (8011dfc <tcp_send_fin+0x98>)
 8011d7a:	4821      	ldr	r0, [pc, #132]	@ (8011e00 <tcp_send_fin+0x9c>)
 8011d7c:	f004 fac8 	bl	8016310 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8011d80:	687b      	ldr	r3, [r7, #4]
 8011d82:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011d84:	2b00      	cmp	r3, #0
 8011d86:	d02e      	beq.n	8011de6 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8011d88:	687b      	ldr	r3, [r7, #4]
 8011d8a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011d8c:	60fb      	str	r3, [r7, #12]
 8011d8e:	e002      	b.n	8011d96 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8011d90:	68fb      	ldr	r3, [r7, #12]
 8011d92:	681b      	ldr	r3, [r3, #0]
 8011d94:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8011d96:	68fb      	ldr	r3, [r7, #12]
 8011d98:	681b      	ldr	r3, [r3, #0]
 8011d9a:	2b00      	cmp	r3, #0
 8011d9c:	d1f8      	bne.n	8011d90 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8011d9e:	68fb      	ldr	r3, [r7, #12]
 8011da0:	68db      	ldr	r3, [r3, #12]
 8011da2:	899b      	ldrh	r3, [r3, #12]
 8011da4:	b29b      	uxth	r3, r3
 8011da6:	4618      	mov	r0, r3
 8011da8:	f7f9 f954 	bl	800b054 <lwip_htons>
 8011dac:	4603      	mov	r3, r0
 8011dae:	b2db      	uxtb	r3, r3
 8011db0:	f003 0307 	and.w	r3, r3, #7
 8011db4:	2b00      	cmp	r3, #0
 8011db6:	d116      	bne.n	8011de6 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8011db8:	68fb      	ldr	r3, [r7, #12]
 8011dba:	68db      	ldr	r3, [r3, #12]
 8011dbc:	899b      	ldrh	r3, [r3, #12]
 8011dbe:	b29c      	uxth	r4, r3
 8011dc0:	2001      	movs	r0, #1
 8011dc2:	f7f9 f947 	bl	800b054 <lwip_htons>
 8011dc6:	4603      	mov	r3, r0
 8011dc8:	461a      	mov	r2, r3
 8011dca:	68fb      	ldr	r3, [r7, #12]
 8011dcc:	68db      	ldr	r3, [r3, #12]
 8011dce:	4322      	orrs	r2, r4
 8011dd0:	b292      	uxth	r2, r2
 8011dd2:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8011dd4:	687b      	ldr	r3, [r7, #4]
 8011dd6:	8b5b      	ldrh	r3, [r3, #26]
 8011dd8:	f043 0320 	orr.w	r3, r3, #32
 8011ddc:	b29a      	uxth	r2, r3
 8011dde:	687b      	ldr	r3, [r7, #4]
 8011de0:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8011de2:	2300      	movs	r3, #0
 8011de4:	e004      	b.n	8011df0 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8011de6:	2101      	movs	r1, #1
 8011de8:	6878      	ldr	r0, [r7, #4]
 8011dea:	f000 f80b 	bl	8011e04 <tcp_enqueue_flags>
 8011dee:	4603      	mov	r3, r0
}
 8011df0:	4618      	mov	r0, r3
 8011df2:	3714      	adds	r7, #20
 8011df4:	46bd      	mov	sp, r7
 8011df6:	bd90      	pop	{r4, r7, pc}
 8011df8:	08019a40 	.word	0x08019a40
 8011dfc:	08019e48 	.word	0x08019e48
 8011e00:	08019a94 	.word	0x08019a94

08011e04 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8011e04:	b580      	push	{r7, lr}
 8011e06:	b08a      	sub	sp, #40	@ 0x28
 8011e08:	af02      	add	r7, sp, #8
 8011e0a:	6078      	str	r0, [r7, #4]
 8011e0c:	460b      	mov	r3, r1
 8011e0e:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8011e10:	2300      	movs	r3, #0
 8011e12:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8011e14:	2300      	movs	r3, #0
 8011e16:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8011e18:	78fb      	ldrb	r3, [r7, #3]
 8011e1a:	f003 0303 	and.w	r3, r3, #3
 8011e1e:	2b00      	cmp	r3, #0
 8011e20:	d106      	bne.n	8011e30 <tcp_enqueue_flags+0x2c>
 8011e22:	4b67      	ldr	r3, [pc, #412]	@ (8011fc0 <tcp_enqueue_flags+0x1bc>)
 8011e24:	f240 4211 	movw	r2, #1041	@ 0x411
 8011e28:	4966      	ldr	r1, [pc, #408]	@ (8011fc4 <tcp_enqueue_flags+0x1c0>)
 8011e2a:	4867      	ldr	r0, [pc, #412]	@ (8011fc8 <tcp_enqueue_flags+0x1c4>)
 8011e2c:	f004 fa70 	bl	8016310 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8011e30:	687b      	ldr	r3, [r7, #4]
 8011e32:	2b00      	cmp	r3, #0
 8011e34:	d106      	bne.n	8011e44 <tcp_enqueue_flags+0x40>
 8011e36:	4b62      	ldr	r3, [pc, #392]	@ (8011fc0 <tcp_enqueue_flags+0x1bc>)
 8011e38:	f240 4213 	movw	r2, #1043	@ 0x413
 8011e3c:	4963      	ldr	r1, [pc, #396]	@ (8011fcc <tcp_enqueue_flags+0x1c8>)
 8011e3e:	4862      	ldr	r0, [pc, #392]	@ (8011fc8 <tcp_enqueue_flags+0x1c4>)
 8011e40:	f004 fa66 	bl	8016310 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8011e44:	78fb      	ldrb	r3, [r7, #3]
 8011e46:	f003 0302 	and.w	r3, r3, #2
 8011e4a:	2b00      	cmp	r3, #0
 8011e4c:	d001      	beq.n	8011e52 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8011e4e:	2301      	movs	r3, #1
 8011e50:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8011e52:	7ffb      	ldrb	r3, [r7, #31]
 8011e54:	009b      	lsls	r3, r3, #2
 8011e56:	b2db      	uxtb	r3, r3
 8011e58:	f003 0304 	and.w	r3, r3, #4
 8011e5c:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8011e5e:	7dfb      	ldrb	r3, [r7, #23]
 8011e60:	b29b      	uxth	r3, r3
 8011e62:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8011e66:	4619      	mov	r1, r3
 8011e68:	2036      	movs	r0, #54	@ 0x36
 8011e6a:	f7fa fa01 	bl	800c270 <pbuf_alloc>
 8011e6e:	6138      	str	r0, [r7, #16]
 8011e70:	693b      	ldr	r3, [r7, #16]
 8011e72:	2b00      	cmp	r3, #0
 8011e74:	d109      	bne.n	8011e8a <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011e76:	687b      	ldr	r3, [r7, #4]
 8011e78:	8b5b      	ldrh	r3, [r3, #26]
 8011e7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011e7e:	b29a      	uxth	r2, r3
 8011e80:	687b      	ldr	r3, [r7, #4]
 8011e82:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8011e84:	f04f 33ff 	mov.w	r3, #4294967295
 8011e88:	e095      	b.n	8011fb6 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8011e8a:	693b      	ldr	r3, [r7, #16]
 8011e8c:	895a      	ldrh	r2, [r3, #10]
 8011e8e:	7dfb      	ldrb	r3, [r7, #23]
 8011e90:	b29b      	uxth	r3, r3
 8011e92:	429a      	cmp	r2, r3
 8011e94:	d206      	bcs.n	8011ea4 <tcp_enqueue_flags+0xa0>
 8011e96:	4b4a      	ldr	r3, [pc, #296]	@ (8011fc0 <tcp_enqueue_flags+0x1bc>)
 8011e98:	f240 4239 	movw	r2, #1081	@ 0x439
 8011e9c:	494c      	ldr	r1, [pc, #304]	@ (8011fd0 <tcp_enqueue_flags+0x1cc>)
 8011e9e:	484a      	ldr	r0, [pc, #296]	@ (8011fc8 <tcp_enqueue_flags+0x1c4>)
 8011ea0:	f004 fa36 	bl	8016310 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8011ea4:	687b      	ldr	r3, [r7, #4]
 8011ea6:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 8011ea8:	78fa      	ldrb	r2, [r7, #3]
 8011eaa:	7ffb      	ldrb	r3, [r7, #31]
 8011eac:	9300      	str	r3, [sp, #0]
 8011eae:	460b      	mov	r3, r1
 8011eb0:	6939      	ldr	r1, [r7, #16]
 8011eb2:	6878      	ldr	r0, [r7, #4]
 8011eb4:	f7ff f91a 	bl	80110ec <tcp_create_segment>
 8011eb8:	60f8      	str	r0, [r7, #12]
 8011eba:	68fb      	ldr	r3, [r7, #12]
 8011ebc:	2b00      	cmp	r3, #0
 8011ebe:	d109      	bne.n	8011ed4 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011ec0:	687b      	ldr	r3, [r7, #4]
 8011ec2:	8b5b      	ldrh	r3, [r3, #26]
 8011ec4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011ec8:	b29a      	uxth	r2, r3
 8011eca:	687b      	ldr	r3, [r7, #4]
 8011ecc:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8011ece:	f04f 33ff 	mov.w	r3, #4294967295
 8011ed2:	e070      	b.n	8011fb6 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8011ed4:	68fb      	ldr	r3, [r7, #12]
 8011ed6:	68db      	ldr	r3, [r3, #12]
 8011ed8:	f003 0303 	and.w	r3, r3, #3
 8011edc:	2b00      	cmp	r3, #0
 8011ede:	d006      	beq.n	8011eee <tcp_enqueue_flags+0xea>
 8011ee0:	4b37      	ldr	r3, [pc, #220]	@ (8011fc0 <tcp_enqueue_flags+0x1bc>)
 8011ee2:	f240 4242 	movw	r2, #1090	@ 0x442
 8011ee6:	493b      	ldr	r1, [pc, #236]	@ (8011fd4 <tcp_enqueue_flags+0x1d0>)
 8011ee8:	4837      	ldr	r0, [pc, #220]	@ (8011fc8 <tcp_enqueue_flags+0x1c4>)
 8011eea:	f004 fa11 	bl	8016310 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8011eee:	68fb      	ldr	r3, [r7, #12]
 8011ef0:	891b      	ldrh	r3, [r3, #8]
 8011ef2:	2b00      	cmp	r3, #0
 8011ef4:	d006      	beq.n	8011f04 <tcp_enqueue_flags+0x100>
 8011ef6:	4b32      	ldr	r3, [pc, #200]	@ (8011fc0 <tcp_enqueue_flags+0x1bc>)
 8011ef8:	f240 4243 	movw	r2, #1091	@ 0x443
 8011efc:	4936      	ldr	r1, [pc, #216]	@ (8011fd8 <tcp_enqueue_flags+0x1d4>)
 8011efe:	4832      	ldr	r0, [pc, #200]	@ (8011fc8 <tcp_enqueue_flags+0x1c4>)
 8011f00:	f004 fa06 	bl	8016310 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8011f04:	687b      	ldr	r3, [r7, #4]
 8011f06:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011f08:	2b00      	cmp	r3, #0
 8011f0a:	d103      	bne.n	8011f14 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8011f0c:	687b      	ldr	r3, [r7, #4]
 8011f0e:	68fa      	ldr	r2, [r7, #12]
 8011f10:	66da      	str	r2, [r3, #108]	@ 0x6c
 8011f12:	e00d      	b.n	8011f30 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8011f14:	687b      	ldr	r3, [r7, #4]
 8011f16:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011f18:	61bb      	str	r3, [r7, #24]
 8011f1a:	e002      	b.n	8011f22 <tcp_enqueue_flags+0x11e>
 8011f1c:	69bb      	ldr	r3, [r7, #24]
 8011f1e:	681b      	ldr	r3, [r3, #0]
 8011f20:	61bb      	str	r3, [r7, #24]
 8011f22:	69bb      	ldr	r3, [r7, #24]
 8011f24:	681b      	ldr	r3, [r3, #0]
 8011f26:	2b00      	cmp	r3, #0
 8011f28:	d1f8      	bne.n	8011f1c <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8011f2a:	69bb      	ldr	r3, [r7, #24]
 8011f2c:	68fa      	ldr	r2, [r7, #12]
 8011f2e:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8011f30:	687b      	ldr	r3, [r7, #4]
 8011f32:	2200      	movs	r2, #0
 8011f34:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8011f38:	78fb      	ldrb	r3, [r7, #3]
 8011f3a:	f003 0302 	and.w	r3, r3, #2
 8011f3e:	2b00      	cmp	r3, #0
 8011f40:	d104      	bne.n	8011f4c <tcp_enqueue_flags+0x148>
 8011f42:	78fb      	ldrb	r3, [r7, #3]
 8011f44:	f003 0301 	and.w	r3, r3, #1
 8011f48:	2b00      	cmp	r3, #0
 8011f4a:	d004      	beq.n	8011f56 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8011f4c:	687b      	ldr	r3, [r7, #4]
 8011f4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8011f50:	1c5a      	adds	r2, r3, #1
 8011f52:	687b      	ldr	r3, [r7, #4]
 8011f54:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8011f56:	78fb      	ldrb	r3, [r7, #3]
 8011f58:	f003 0301 	and.w	r3, r3, #1
 8011f5c:	2b00      	cmp	r3, #0
 8011f5e:	d006      	beq.n	8011f6e <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8011f60:	687b      	ldr	r3, [r7, #4]
 8011f62:	8b5b      	ldrh	r3, [r3, #26]
 8011f64:	f043 0320 	orr.w	r3, r3, #32
 8011f68:	b29a      	uxth	r2, r3
 8011f6a:	687b      	ldr	r3, [r7, #4]
 8011f6c:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8011f6e:	68fb      	ldr	r3, [r7, #12]
 8011f70:	685b      	ldr	r3, [r3, #4]
 8011f72:	4618      	mov	r0, r3
 8011f74:	f7fa fcee 	bl	800c954 <pbuf_clen>
 8011f78:	4603      	mov	r3, r0
 8011f7a:	461a      	mov	r2, r3
 8011f7c:	687b      	ldr	r3, [r7, #4]
 8011f7e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8011f82:	4413      	add	r3, r2
 8011f84:	b29a      	uxth	r2, r3
 8011f86:	687b      	ldr	r3, [r7, #4]
 8011f88:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8011f8c:	687b      	ldr	r3, [r7, #4]
 8011f8e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8011f92:	2b00      	cmp	r3, #0
 8011f94:	d00e      	beq.n	8011fb4 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8011f96:	687b      	ldr	r3, [r7, #4]
 8011f98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011f9a:	2b00      	cmp	r3, #0
 8011f9c:	d10a      	bne.n	8011fb4 <tcp_enqueue_flags+0x1b0>
 8011f9e:	687b      	ldr	r3, [r7, #4]
 8011fa0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011fa2:	2b00      	cmp	r3, #0
 8011fa4:	d106      	bne.n	8011fb4 <tcp_enqueue_flags+0x1b0>
 8011fa6:	4b06      	ldr	r3, [pc, #24]	@ (8011fc0 <tcp_enqueue_flags+0x1bc>)
 8011fa8:	f240 4265 	movw	r2, #1125	@ 0x465
 8011fac:	490b      	ldr	r1, [pc, #44]	@ (8011fdc <tcp_enqueue_flags+0x1d8>)
 8011fae:	4806      	ldr	r0, [pc, #24]	@ (8011fc8 <tcp_enqueue_flags+0x1c4>)
 8011fb0:	f004 f9ae 	bl	8016310 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8011fb4:	2300      	movs	r3, #0
}
 8011fb6:	4618      	mov	r0, r3
 8011fb8:	3720      	adds	r7, #32
 8011fba:	46bd      	mov	sp, r7
 8011fbc:	bd80      	pop	{r7, pc}
 8011fbe:	bf00      	nop
 8011fc0:	08019a40 	.word	0x08019a40
 8011fc4:	08019e64 	.word	0x08019e64
 8011fc8:	08019a94 	.word	0x08019a94
 8011fcc:	08019ebc 	.word	0x08019ebc
 8011fd0:	08019edc 	.word	0x08019edc
 8011fd4:	08019f18 	.word	0x08019f18
 8011fd8:	08019f30 	.word	0x08019f30
 8011fdc:	08019f5c 	.word	0x08019f5c

08011fe0 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8011fe0:	b5b0      	push	{r4, r5, r7, lr}
 8011fe2:	b08a      	sub	sp, #40	@ 0x28
 8011fe4:	af00      	add	r7, sp, #0
 8011fe6:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8011fe8:	687b      	ldr	r3, [r7, #4]
 8011fea:	2b00      	cmp	r3, #0
 8011fec:	d106      	bne.n	8011ffc <tcp_output+0x1c>
 8011fee:	4b8a      	ldr	r3, [pc, #552]	@ (8012218 <tcp_output+0x238>)
 8011ff0:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 8011ff4:	4989      	ldr	r1, [pc, #548]	@ (801221c <tcp_output+0x23c>)
 8011ff6:	488a      	ldr	r0, [pc, #552]	@ (8012220 <tcp_output+0x240>)
 8011ff8:	f004 f98a 	bl	8016310 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8011ffc:	687b      	ldr	r3, [r7, #4]
 8011ffe:	7d1b      	ldrb	r3, [r3, #20]
 8012000:	2b01      	cmp	r3, #1
 8012002:	d106      	bne.n	8012012 <tcp_output+0x32>
 8012004:	4b84      	ldr	r3, [pc, #528]	@ (8012218 <tcp_output+0x238>)
 8012006:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 801200a:	4986      	ldr	r1, [pc, #536]	@ (8012224 <tcp_output+0x244>)
 801200c:	4884      	ldr	r0, [pc, #528]	@ (8012220 <tcp_output+0x240>)
 801200e:	f004 f97f 	bl	8016310 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8012012:	4b85      	ldr	r3, [pc, #532]	@ (8012228 <tcp_output+0x248>)
 8012014:	681b      	ldr	r3, [r3, #0]
 8012016:	687a      	ldr	r2, [r7, #4]
 8012018:	429a      	cmp	r2, r3
 801201a:	d101      	bne.n	8012020 <tcp_output+0x40>
    return ERR_OK;
 801201c:	2300      	movs	r3, #0
 801201e:	e1ce      	b.n	80123be <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8012020:	687b      	ldr	r3, [r7, #4]
 8012022:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8012026:	687b      	ldr	r3, [r7, #4]
 8012028:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801202c:	4293      	cmp	r3, r2
 801202e:	bf28      	it	cs
 8012030:	4613      	movcs	r3, r2
 8012032:	b29b      	uxth	r3, r3
 8012034:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8012036:	687b      	ldr	r3, [r7, #4]
 8012038:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801203a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 801203c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801203e:	2b00      	cmp	r3, #0
 8012040:	d10b      	bne.n	801205a <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8012042:	687b      	ldr	r3, [r7, #4]
 8012044:	8b5b      	ldrh	r3, [r3, #26]
 8012046:	f003 0302 	and.w	r3, r3, #2
 801204a:	2b00      	cmp	r3, #0
 801204c:	f000 81aa 	beq.w	80123a4 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8012050:	6878      	ldr	r0, [r7, #4]
 8012052:	f000 fdcb 	bl	8012bec <tcp_send_empty_ack>
 8012056:	4603      	mov	r3, r0
 8012058:	e1b1      	b.n	80123be <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 801205a:	6879      	ldr	r1, [r7, #4]
 801205c:	687b      	ldr	r3, [r7, #4]
 801205e:	3304      	adds	r3, #4
 8012060:	461a      	mov	r2, r3
 8012062:	6878      	ldr	r0, [r7, #4]
 8012064:	f7ff f826 	bl	80110b4 <tcp_route>
 8012068:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 801206a:	697b      	ldr	r3, [r7, #20]
 801206c:	2b00      	cmp	r3, #0
 801206e:	d102      	bne.n	8012076 <tcp_output+0x96>
    return ERR_RTE;
 8012070:	f06f 0303 	mvn.w	r3, #3
 8012074:	e1a3      	b.n	80123be <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8012076:	687b      	ldr	r3, [r7, #4]
 8012078:	2b00      	cmp	r3, #0
 801207a:	d003      	beq.n	8012084 <tcp_output+0xa4>
 801207c:	687b      	ldr	r3, [r7, #4]
 801207e:	681b      	ldr	r3, [r3, #0]
 8012080:	2b00      	cmp	r3, #0
 8012082:	d111      	bne.n	80120a8 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8012084:	697b      	ldr	r3, [r7, #20]
 8012086:	2b00      	cmp	r3, #0
 8012088:	d002      	beq.n	8012090 <tcp_output+0xb0>
 801208a:	697b      	ldr	r3, [r7, #20]
 801208c:	3304      	adds	r3, #4
 801208e:	e000      	b.n	8012092 <tcp_output+0xb2>
 8012090:	2300      	movs	r3, #0
 8012092:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8012094:	693b      	ldr	r3, [r7, #16]
 8012096:	2b00      	cmp	r3, #0
 8012098:	d102      	bne.n	80120a0 <tcp_output+0xc0>
      return ERR_RTE;
 801209a:	f06f 0303 	mvn.w	r3, #3
 801209e:	e18e      	b.n	80123be <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 80120a0:	693b      	ldr	r3, [r7, #16]
 80120a2:	681a      	ldr	r2, [r3, #0]
 80120a4:	687b      	ldr	r3, [r7, #4]
 80120a6:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 80120a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80120aa:	68db      	ldr	r3, [r3, #12]
 80120ac:	685b      	ldr	r3, [r3, #4]
 80120ae:	4618      	mov	r0, r3
 80120b0:	f7f8 ffe5 	bl	800b07e <lwip_htonl>
 80120b4:	4602      	mov	r2, r0
 80120b6:	687b      	ldr	r3, [r7, #4]
 80120b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80120ba:	1ad3      	subs	r3, r2, r3
 80120bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80120be:	8912      	ldrh	r2, [r2, #8]
 80120c0:	4413      	add	r3, r2
 80120c2:	69ba      	ldr	r2, [r7, #24]
 80120c4:	429a      	cmp	r2, r3
 80120c6:	d227      	bcs.n	8012118 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 80120c8:	687b      	ldr	r3, [r7, #4]
 80120ca:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80120ce:	461a      	mov	r2, r3
 80120d0:	69bb      	ldr	r3, [r7, #24]
 80120d2:	4293      	cmp	r3, r2
 80120d4:	d114      	bne.n	8012100 <tcp_output+0x120>
 80120d6:	687b      	ldr	r3, [r7, #4]
 80120d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80120da:	2b00      	cmp	r3, #0
 80120dc:	d110      	bne.n	8012100 <tcp_output+0x120>
 80120de:	687b      	ldr	r3, [r7, #4]
 80120e0:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 80120e4:	2b00      	cmp	r3, #0
 80120e6:	d10b      	bne.n	8012100 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 80120e8:	687b      	ldr	r3, [r7, #4]
 80120ea:	2200      	movs	r2, #0
 80120ec:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
      pcb->persist_backoff = 1;
 80120f0:	687b      	ldr	r3, [r7, #4]
 80120f2:	2201      	movs	r2, #1
 80120f4:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1
      pcb->persist_probe = 0;
 80120f8:	687b      	ldr	r3, [r7, #4]
 80120fa:	2200      	movs	r2, #0
 80120fc:	f883 20a2 	strb.w	r2, [r3, #162]	@ 0xa2
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8012100:	687b      	ldr	r3, [r7, #4]
 8012102:	8b5b      	ldrh	r3, [r3, #26]
 8012104:	f003 0302 	and.w	r3, r3, #2
 8012108:	2b00      	cmp	r3, #0
 801210a:	f000 814d 	beq.w	80123a8 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 801210e:	6878      	ldr	r0, [r7, #4]
 8012110:	f000 fd6c 	bl	8012bec <tcp_send_empty_ack>
 8012114:	4603      	mov	r3, r0
 8012116:	e152      	b.n	80123be <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8012118:	687b      	ldr	r3, [r7, #4]
 801211a:	2200      	movs	r2, #0
 801211c:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8012120:	687b      	ldr	r3, [r7, #4]
 8012122:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012124:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8012126:	6a3b      	ldr	r3, [r7, #32]
 8012128:	2b00      	cmp	r3, #0
 801212a:	f000 811c 	beq.w	8012366 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 801212e:	e002      	b.n	8012136 <tcp_output+0x156>
 8012130:	6a3b      	ldr	r3, [r7, #32]
 8012132:	681b      	ldr	r3, [r3, #0]
 8012134:	623b      	str	r3, [r7, #32]
 8012136:	6a3b      	ldr	r3, [r7, #32]
 8012138:	681b      	ldr	r3, [r3, #0]
 801213a:	2b00      	cmp	r3, #0
 801213c:	d1f8      	bne.n	8012130 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 801213e:	e112      	b.n	8012366 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8012140:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012142:	68db      	ldr	r3, [r3, #12]
 8012144:	899b      	ldrh	r3, [r3, #12]
 8012146:	b29b      	uxth	r3, r3
 8012148:	4618      	mov	r0, r3
 801214a:	f7f8 ff83 	bl	800b054 <lwip_htons>
 801214e:	4603      	mov	r3, r0
 8012150:	b2db      	uxtb	r3, r3
 8012152:	f003 0304 	and.w	r3, r3, #4
 8012156:	2b00      	cmp	r3, #0
 8012158:	d006      	beq.n	8012168 <tcp_output+0x188>
 801215a:	4b2f      	ldr	r3, [pc, #188]	@ (8012218 <tcp_output+0x238>)
 801215c:	f240 5236 	movw	r2, #1334	@ 0x536
 8012160:	4932      	ldr	r1, [pc, #200]	@ (801222c <tcp_output+0x24c>)
 8012162:	482f      	ldr	r0, [pc, #188]	@ (8012220 <tcp_output+0x240>)
 8012164:	f004 f8d4 	bl	8016310 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8012168:	687b      	ldr	r3, [r7, #4]
 801216a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801216c:	2b00      	cmp	r3, #0
 801216e:	d01f      	beq.n	80121b0 <tcp_output+0x1d0>
 8012170:	687b      	ldr	r3, [r7, #4]
 8012172:	8b5b      	ldrh	r3, [r3, #26]
 8012174:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 8012178:	2b00      	cmp	r3, #0
 801217a:	d119      	bne.n	80121b0 <tcp_output+0x1d0>
 801217c:	687b      	ldr	r3, [r7, #4]
 801217e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012180:	2b00      	cmp	r3, #0
 8012182:	d00b      	beq.n	801219c <tcp_output+0x1bc>
 8012184:	687b      	ldr	r3, [r7, #4]
 8012186:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012188:	681b      	ldr	r3, [r3, #0]
 801218a:	2b00      	cmp	r3, #0
 801218c:	d110      	bne.n	80121b0 <tcp_output+0x1d0>
 801218e:	687b      	ldr	r3, [r7, #4]
 8012190:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012192:	891a      	ldrh	r2, [r3, #8]
 8012194:	687b      	ldr	r3, [r7, #4]
 8012196:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012198:	429a      	cmp	r2, r3
 801219a:	d209      	bcs.n	80121b0 <tcp_output+0x1d0>
 801219c:	687b      	ldr	r3, [r7, #4]
 801219e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 80121a2:	2b00      	cmp	r3, #0
 80121a4:	d004      	beq.n	80121b0 <tcp_output+0x1d0>
 80121a6:	687b      	ldr	r3, [r7, #4]
 80121a8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80121ac:	2b08      	cmp	r3, #8
 80121ae:	d901      	bls.n	80121b4 <tcp_output+0x1d4>
 80121b0:	2301      	movs	r3, #1
 80121b2:	e000      	b.n	80121b6 <tcp_output+0x1d6>
 80121b4:	2300      	movs	r3, #0
 80121b6:	2b00      	cmp	r3, #0
 80121b8:	d106      	bne.n	80121c8 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 80121ba:	687b      	ldr	r3, [r7, #4]
 80121bc:	8b5b      	ldrh	r3, [r3, #26]
 80121be:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80121c2:	2b00      	cmp	r3, #0
 80121c4:	f000 80e4 	beq.w	8012390 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 80121c8:	687b      	ldr	r3, [r7, #4]
 80121ca:	7d1b      	ldrb	r3, [r3, #20]
 80121cc:	2b02      	cmp	r3, #2
 80121ce:	d00d      	beq.n	80121ec <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 80121d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80121d2:	68db      	ldr	r3, [r3, #12]
 80121d4:	899b      	ldrh	r3, [r3, #12]
 80121d6:	b29c      	uxth	r4, r3
 80121d8:	2010      	movs	r0, #16
 80121da:	f7f8 ff3b 	bl	800b054 <lwip_htons>
 80121de:	4603      	mov	r3, r0
 80121e0:	461a      	mov	r2, r3
 80121e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80121e4:	68db      	ldr	r3, [r3, #12]
 80121e6:	4322      	orrs	r2, r4
 80121e8:	b292      	uxth	r2, r2
 80121ea:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 80121ec:	697a      	ldr	r2, [r7, #20]
 80121ee:	6879      	ldr	r1, [r7, #4]
 80121f0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80121f2:	f000 f909 	bl	8012408 <tcp_output_segment>
 80121f6:	4603      	mov	r3, r0
 80121f8:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 80121fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80121fe:	2b00      	cmp	r3, #0
 8012200:	d016      	beq.n	8012230 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012202:	687b      	ldr	r3, [r7, #4]
 8012204:	8b5b      	ldrh	r3, [r3, #26]
 8012206:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801220a:	b29a      	uxth	r2, r3
 801220c:	687b      	ldr	r3, [r7, #4]
 801220e:	835a      	strh	r2, [r3, #26]
      return err;
 8012210:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012214:	e0d3      	b.n	80123be <tcp_output+0x3de>
 8012216:	bf00      	nop
 8012218:	08019a40 	.word	0x08019a40
 801221c:	08019f84 	.word	0x08019f84
 8012220:	08019a94 	.word	0x08019a94
 8012224:	08019f9c 	.word	0x08019f9c
 8012228:	2000eb90 	.word	0x2000eb90
 801222c:	08019fc4 	.word	0x08019fc4
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8012230:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012232:	681a      	ldr	r2, [r3, #0]
 8012234:	687b      	ldr	r3, [r7, #4]
 8012236:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 8012238:	687b      	ldr	r3, [r7, #4]
 801223a:	7d1b      	ldrb	r3, [r3, #20]
 801223c:	2b02      	cmp	r3, #2
 801223e:	d006      	beq.n	801224e <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012240:	687b      	ldr	r3, [r7, #4]
 8012242:	8b5b      	ldrh	r3, [r3, #26]
 8012244:	f023 0303 	bic.w	r3, r3, #3
 8012248:	b29a      	uxth	r2, r3
 801224a:	687b      	ldr	r3, [r7, #4]
 801224c:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801224e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012250:	68db      	ldr	r3, [r3, #12]
 8012252:	685b      	ldr	r3, [r3, #4]
 8012254:	4618      	mov	r0, r3
 8012256:	f7f8 ff12 	bl	800b07e <lwip_htonl>
 801225a:	4604      	mov	r4, r0
 801225c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801225e:	891b      	ldrh	r3, [r3, #8]
 8012260:	461d      	mov	r5, r3
 8012262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012264:	68db      	ldr	r3, [r3, #12]
 8012266:	899b      	ldrh	r3, [r3, #12]
 8012268:	b29b      	uxth	r3, r3
 801226a:	4618      	mov	r0, r3
 801226c:	f7f8 fef2 	bl	800b054 <lwip_htons>
 8012270:	4603      	mov	r3, r0
 8012272:	b2db      	uxtb	r3, r3
 8012274:	f003 0303 	and.w	r3, r3, #3
 8012278:	2b00      	cmp	r3, #0
 801227a:	d001      	beq.n	8012280 <tcp_output+0x2a0>
 801227c:	2301      	movs	r3, #1
 801227e:	e000      	b.n	8012282 <tcp_output+0x2a2>
 8012280:	2300      	movs	r3, #0
 8012282:	442b      	add	r3, r5
 8012284:	4423      	add	r3, r4
 8012286:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8012288:	687b      	ldr	r3, [r7, #4]
 801228a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801228c:	68bb      	ldr	r3, [r7, #8]
 801228e:	1ad3      	subs	r3, r2, r3
 8012290:	2b00      	cmp	r3, #0
 8012292:	da02      	bge.n	801229a <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8012294:	687b      	ldr	r3, [r7, #4]
 8012296:	68ba      	ldr	r2, [r7, #8]
 8012298:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 801229a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801229c:	891b      	ldrh	r3, [r3, #8]
 801229e:	461c      	mov	r4, r3
 80122a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80122a2:	68db      	ldr	r3, [r3, #12]
 80122a4:	899b      	ldrh	r3, [r3, #12]
 80122a6:	b29b      	uxth	r3, r3
 80122a8:	4618      	mov	r0, r3
 80122aa:	f7f8 fed3 	bl	800b054 <lwip_htons>
 80122ae:	4603      	mov	r3, r0
 80122b0:	b2db      	uxtb	r3, r3
 80122b2:	f003 0303 	and.w	r3, r3, #3
 80122b6:	2b00      	cmp	r3, #0
 80122b8:	d001      	beq.n	80122be <tcp_output+0x2de>
 80122ba:	2301      	movs	r3, #1
 80122bc:	e000      	b.n	80122c0 <tcp_output+0x2e0>
 80122be:	2300      	movs	r3, #0
 80122c0:	4423      	add	r3, r4
 80122c2:	2b00      	cmp	r3, #0
 80122c4:	d049      	beq.n	801235a <tcp_output+0x37a>
      seg->next = NULL;
 80122c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80122c8:	2200      	movs	r2, #0
 80122ca:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 80122cc:	687b      	ldr	r3, [r7, #4]
 80122ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80122d0:	2b00      	cmp	r3, #0
 80122d2:	d105      	bne.n	80122e0 <tcp_output+0x300>
        pcb->unacked = seg;
 80122d4:	687b      	ldr	r3, [r7, #4]
 80122d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80122d8:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 80122da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80122dc:	623b      	str	r3, [r7, #32]
 80122de:	e03f      	b.n	8012360 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 80122e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80122e2:	68db      	ldr	r3, [r3, #12]
 80122e4:	685b      	ldr	r3, [r3, #4]
 80122e6:	4618      	mov	r0, r3
 80122e8:	f7f8 fec9 	bl	800b07e <lwip_htonl>
 80122ec:	4604      	mov	r4, r0
 80122ee:	6a3b      	ldr	r3, [r7, #32]
 80122f0:	68db      	ldr	r3, [r3, #12]
 80122f2:	685b      	ldr	r3, [r3, #4]
 80122f4:	4618      	mov	r0, r3
 80122f6:	f7f8 fec2 	bl	800b07e <lwip_htonl>
 80122fa:	4603      	mov	r3, r0
 80122fc:	1ae3      	subs	r3, r4, r3
 80122fe:	2b00      	cmp	r3, #0
 8012300:	da24      	bge.n	801234c <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8012302:	687b      	ldr	r3, [r7, #4]
 8012304:	3370      	adds	r3, #112	@ 0x70
 8012306:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8012308:	e002      	b.n	8012310 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 801230a:	69fb      	ldr	r3, [r7, #28]
 801230c:	681b      	ldr	r3, [r3, #0]
 801230e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8012310:	69fb      	ldr	r3, [r7, #28]
 8012312:	681b      	ldr	r3, [r3, #0]
 8012314:	2b00      	cmp	r3, #0
 8012316:	d011      	beq.n	801233c <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8012318:	69fb      	ldr	r3, [r7, #28]
 801231a:	681b      	ldr	r3, [r3, #0]
 801231c:	68db      	ldr	r3, [r3, #12]
 801231e:	685b      	ldr	r3, [r3, #4]
 8012320:	4618      	mov	r0, r3
 8012322:	f7f8 feac 	bl	800b07e <lwip_htonl>
 8012326:	4604      	mov	r4, r0
 8012328:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801232a:	68db      	ldr	r3, [r3, #12]
 801232c:	685b      	ldr	r3, [r3, #4]
 801232e:	4618      	mov	r0, r3
 8012330:	f7f8 fea5 	bl	800b07e <lwip_htonl>
 8012334:	4603      	mov	r3, r0
 8012336:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8012338:	2b00      	cmp	r3, #0
 801233a:	dbe6      	blt.n	801230a <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 801233c:	69fb      	ldr	r3, [r7, #28]
 801233e:	681a      	ldr	r2, [r3, #0]
 8012340:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012342:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8012344:	69fb      	ldr	r3, [r7, #28]
 8012346:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012348:	601a      	str	r2, [r3, #0]
 801234a:	e009      	b.n	8012360 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 801234c:	6a3b      	ldr	r3, [r7, #32]
 801234e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012350:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8012352:	6a3b      	ldr	r3, [r7, #32]
 8012354:	681b      	ldr	r3, [r3, #0]
 8012356:	623b      	str	r3, [r7, #32]
 8012358:	e002      	b.n	8012360 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 801235a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801235c:	f7fb ff17 	bl	800e18e <tcp_seg_free>
    }
    seg = pcb->unsent;
 8012360:	687b      	ldr	r3, [r7, #4]
 8012362:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012364:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 8012366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012368:	2b00      	cmp	r3, #0
 801236a:	d012      	beq.n	8012392 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 801236c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801236e:	68db      	ldr	r3, [r3, #12]
 8012370:	685b      	ldr	r3, [r3, #4]
 8012372:	4618      	mov	r0, r3
 8012374:	f7f8 fe83 	bl	800b07e <lwip_htonl>
 8012378:	4602      	mov	r2, r0
 801237a:	687b      	ldr	r3, [r7, #4]
 801237c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801237e:	1ad3      	subs	r3, r2, r3
 8012380:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012382:	8912      	ldrh	r2, [r2, #8]
 8012384:	4413      	add	r3, r2
  while (seg != NULL &&
 8012386:	69ba      	ldr	r2, [r7, #24]
 8012388:	429a      	cmp	r2, r3
 801238a:	f4bf aed9 	bcs.w	8012140 <tcp_output+0x160>
 801238e:	e000      	b.n	8012392 <tcp_output+0x3b2>
      break;
 8012390:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8012392:	687b      	ldr	r3, [r7, #4]
 8012394:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012396:	2b00      	cmp	r3, #0
 8012398:	d108      	bne.n	80123ac <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801239a:	687b      	ldr	r3, [r7, #4]
 801239c:	2200      	movs	r2, #0
 801239e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 80123a2:	e004      	b.n	80123ae <tcp_output+0x3ce>
    goto output_done;
 80123a4:	bf00      	nop
 80123a6:	e002      	b.n	80123ae <tcp_output+0x3ce>
    goto output_done;
 80123a8:	bf00      	nop
 80123aa:	e000      	b.n	80123ae <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 80123ac:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 80123ae:	687b      	ldr	r3, [r7, #4]
 80123b0:	8b5b      	ldrh	r3, [r3, #26]
 80123b2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80123b6:	b29a      	uxth	r2, r3
 80123b8:	687b      	ldr	r3, [r7, #4]
 80123ba:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 80123bc:	2300      	movs	r3, #0
}
 80123be:	4618      	mov	r0, r3
 80123c0:	3728      	adds	r7, #40	@ 0x28
 80123c2:	46bd      	mov	sp, r7
 80123c4:	bdb0      	pop	{r4, r5, r7, pc}
 80123c6:	bf00      	nop

080123c8 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 80123c8:	b580      	push	{r7, lr}
 80123ca:	b082      	sub	sp, #8
 80123cc:	af00      	add	r7, sp, #0
 80123ce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 80123d0:	687b      	ldr	r3, [r7, #4]
 80123d2:	2b00      	cmp	r3, #0
 80123d4:	d106      	bne.n	80123e4 <tcp_output_segment_busy+0x1c>
 80123d6:	4b09      	ldr	r3, [pc, #36]	@ (80123fc <tcp_output_segment_busy+0x34>)
 80123d8:	f240 529a 	movw	r2, #1434	@ 0x59a
 80123dc:	4908      	ldr	r1, [pc, #32]	@ (8012400 <tcp_output_segment_busy+0x38>)
 80123de:	4809      	ldr	r0, [pc, #36]	@ (8012404 <tcp_output_segment_busy+0x3c>)
 80123e0:	f003 ff96 	bl	8016310 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 80123e4:	687b      	ldr	r3, [r7, #4]
 80123e6:	685b      	ldr	r3, [r3, #4]
 80123e8:	7b9b      	ldrb	r3, [r3, #14]
 80123ea:	2b01      	cmp	r3, #1
 80123ec:	d001      	beq.n	80123f2 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 80123ee:	2301      	movs	r3, #1
 80123f0:	e000      	b.n	80123f4 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 80123f2:	2300      	movs	r3, #0
}
 80123f4:	4618      	mov	r0, r3
 80123f6:	3708      	adds	r7, #8
 80123f8:	46bd      	mov	sp, r7
 80123fa:	bd80      	pop	{r7, pc}
 80123fc:	08019a40 	.word	0x08019a40
 8012400:	08019fdc 	.word	0x08019fdc
 8012404:	08019a94 	.word	0x08019a94

08012408 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8012408:	b5b0      	push	{r4, r5, r7, lr}
 801240a:	b08c      	sub	sp, #48	@ 0x30
 801240c:	af04      	add	r7, sp, #16
 801240e:	60f8      	str	r0, [r7, #12]
 8012410:	60b9      	str	r1, [r7, #8]
 8012412:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8012414:	68fb      	ldr	r3, [r7, #12]
 8012416:	2b00      	cmp	r3, #0
 8012418:	d106      	bne.n	8012428 <tcp_output_segment+0x20>
 801241a:	4b64      	ldr	r3, [pc, #400]	@ (80125ac <tcp_output_segment+0x1a4>)
 801241c:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 8012420:	4963      	ldr	r1, [pc, #396]	@ (80125b0 <tcp_output_segment+0x1a8>)
 8012422:	4864      	ldr	r0, [pc, #400]	@ (80125b4 <tcp_output_segment+0x1ac>)
 8012424:	f003 ff74 	bl	8016310 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8012428:	68bb      	ldr	r3, [r7, #8]
 801242a:	2b00      	cmp	r3, #0
 801242c:	d106      	bne.n	801243c <tcp_output_segment+0x34>
 801242e:	4b5f      	ldr	r3, [pc, #380]	@ (80125ac <tcp_output_segment+0x1a4>)
 8012430:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 8012434:	4960      	ldr	r1, [pc, #384]	@ (80125b8 <tcp_output_segment+0x1b0>)
 8012436:	485f      	ldr	r0, [pc, #380]	@ (80125b4 <tcp_output_segment+0x1ac>)
 8012438:	f003 ff6a 	bl	8016310 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 801243c:	687b      	ldr	r3, [r7, #4]
 801243e:	2b00      	cmp	r3, #0
 8012440:	d106      	bne.n	8012450 <tcp_output_segment+0x48>
 8012442:	4b5a      	ldr	r3, [pc, #360]	@ (80125ac <tcp_output_segment+0x1a4>)
 8012444:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 8012448:	495c      	ldr	r1, [pc, #368]	@ (80125bc <tcp_output_segment+0x1b4>)
 801244a:	485a      	ldr	r0, [pc, #360]	@ (80125b4 <tcp_output_segment+0x1ac>)
 801244c:	f003 ff60 	bl	8016310 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8012450:	68f8      	ldr	r0, [r7, #12]
 8012452:	f7ff ffb9 	bl	80123c8 <tcp_output_segment_busy>
 8012456:	4603      	mov	r3, r0
 8012458:	2b00      	cmp	r3, #0
 801245a:	d001      	beq.n	8012460 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 801245c:	2300      	movs	r3, #0
 801245e:	e0a1      	b.n	80125a4 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8012460:	68bb      	ldr	r3, [r7, #8]
 8012462:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012464:	68fb      	ldr	r3, [r7, #12]
 8012466:	68dc      	ldr	r4, [r3, #12]
 8012468:	4610      	mov	r0, r2
 801246a:	f7f8 fe08 	bl	800b07e <lwip_htonl>
 801246e:	4603      	mov	r3, r0
 8012470:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8012472:	68bb      	ldr	r3, [r7, #8]
 8012474:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8012476:	68fb      	ldr	r3, [r7, #12]
 8012478:	68dc      	ldr	r4, [r3, #12]
 801247a:	4610      	mov	r0, r2
 801247c:	f7f8 fdea 	bl	800b054 <lwip_htons>
 8012480:	4603      	mov	r3, r0
 8012482:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8012484:	68bb      	ldr	r3, [r7, #8]
 8012486:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012488:	68ba      	ldr	r2, [r7, #8]
 801248a:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 801248c:	441a      	add	r2, r3
 801248e:	68bb      	ldr	r3, [r7, #8]
 8012490:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8012492:	68fb      	ldr	r3, [r7, #12]
 8012494:	68db      	ldr	r3, [r3, #12]
 8012496:	3314      	adds	r3, #20
 8012498:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801249a:	68fb      	ldr	r3, [r7, #12]
 801249c:	7a9b      	ldrb	r3, [r3, #10]
 801249e:	f003 0301 	and.w	r3, r3, #1
 80124a2:	2b00      	cmp	r3, #0
 80124a4:	d015      	beq.n	80124d2 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 80124a6:	68bb      	ldr	r3, [r7, #8]
 80124a8:	3304      	adds	r3, #4
 80124aa:	461a      	mov	r2, r3
 80124ac:	6879      	ldr	r1, [r7, #4]
 80124ae:	f44f 7006 	mov.w	r0, #536	@ 0x218
 80124b2:	f7fc fa39 	bl	800e928 <tcp_eff_send_mss_netif>
 80124b6:	4603      	mov	r3, r0
 80124b8:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 80124ba:	8b7b      	ldrh	r3, [r7, #26]
 80124bc:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 80124c0:	4618      	mov	r0, r3
 80124c2:	f7f8 fddc 	bl	800b07e <lwip_htonl>
 80124c6:	4602      	mov	r2, r0
 80124c8:	69fb      	ldr	r3, [r7, #28]
 80124ca:	601a      	str	r2, [r3, #0]
    opts += 1;
 80124cc:	69fb      	ldr	r3, [r7, #28]
 80124ce:	3304      	adds	r3, #4
 80124d0:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 80124d2:	68bb      	ldr	r3, [r7, #8]
 80124d4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80124d8:	2b00      	cmp	r3, #0
 80124da:	da02      	bge.n	80124e2 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 80124dc:	68bb      	ldr	r3, [r7, #8]
 80124de:	2200      	movs	r2, #0
 80124e0:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 80124e2:	68bb      	ldr	r3, [r7, #8]
 80124e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80124e6:	2b00      	cmp	r3, #0
 80124e8:	d10c      	bne.n	8012504 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 80124ea:	4b35      	ldr	r3, [pc, #212]	@ (80125c0 <tcp_output_segment+0x1b8>)
 80124ec:	681a      	ldr	r2, [r3, #0]
 80124ee:	68bb      	ldr	r3, [r7, #8]
 80124f0:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 80124f2:	68fb      	ldr	r3, [r7, #12]
 80124f4:	68db      	ldr	r3, [r3, #12]
 80124f6:	685b      	ldr	r3, [r3, #4]
 80124f8:	4618      	mov	r0, r3
 80124fa:	f7f8 fdc0 	bl	800b07e <lwip_htonl>
 80124fe:	4602      	mov	r2, r0
 8012500:	68bb      	ldr	r3, [r7, #8]
 8012502:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8012504:	68fb      	ldr	r3, [r7, #12]
 8012506:	68da      	ldr	r2, [r3, #12]
 8012508:	68fb      	ldr	r3, [r7, #12]
 801250a:	685b      	ldr	r3, [r3, #4]
 801250c:	685b      	ldr	r3, [r3, #4]
 801250e:	1ad3      	subs	r3, r2, r3
 8012510:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8012512:	68fb      	ldr	r3, [r7, #12]
 8012514:	685b      	ldr	r3, [r3, #4]
 8012516:	8959      	ldrh	r1, [r3, #10]
 8012518:	68fb      	ldr	r3, [r7, #12]
 801251a:	685b      	ldr	r3, [r3, #4]
 801251c:	8b3a      	ldrh	r2, [r7, #24]
 801251e:	1a8a      	subs	r2, r1, r2
 8012520:	b292      	uxth	r2, r2
 8012522:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8012524:	68fb      	ldr	r3, [r7, #12]
 8012526:	685b      	ldr	r3, [r3, #4]
 8012528:	8919      	ldrh	r1, [r3, #8]
 801252a:	68fb      	ldr	r3, [r7, #12]
 801252c:	685b      	ldr	r3, [r3, #4]
 801252e:	8b3a      	ldrh	r2, [r7, #24]
 8012530:	1a8a      	subs	r2, r1, r2
 8012532:	b292      	uxth	r2, r2
 8012534:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8012536:	68fb      	ldr	r3, [r7, #12]
 8012538:	685b      	ldr	r3, [r3, #4]
 801253a:	68fa      	ldr	r2, [r7, #12]
 801253c:	68d2      	ldr	r2, [r2, #12]
 801253e:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8012540:	68fb      	ldr	r3, [r7, #12]
 8012542:	68db      	ldr	r3, [r3, #12]
 8012544:	2200      	movs	r2, #0
 8012546:	741a      	strb	r2, [r3, #16]
 8012548:	2200      	movs	r2, #0
 801254a:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 801254c:	68fb      	ldr	r3, [r7, #12]
 801254e:	68da      	ldr	r2, [r3, #12]
 8012550:	68fb      	ldr	r3, [r7, #12]
 8012552:	7a9b      	ldrb	r3, [r3, #10]
 8012554:	f003 0301 	and.w	r3, r3, #1
 8012558:	2b00      	cmp	r3, #0
 801255a:	d001      	beq.n	8012560 <tcp_output_segment+0x158>
 801255c:	2318      	movs	r3, #24
 801255e:	e000      	b.n	8012562 <tcp_output_segment+0x15a>
 8012560:	2314      	movs	r3, #20
 8012562:	4413      	add	r3, r2
 8012564:	69fa      	ldr	r2, [r7, #28]
 8012566:	429a      	cmp	r2, r3
 8012568:	d006      	beq.n	8012578 <tcp_output_segment+0x170>
 801256a:	4b10      	ldr	r3, [pc, #64]	@ (80125ac <tcp_output_segment+0x1a4>)
 801256c:	f240 621c 	movw	r2, #1564	@ 0x61c
 8012570:	4914      	ldr	r1, [pc, #80]	@ (80125c4 <tcp_output_segment+0x1bc>)
 8012572:	4810      	ldr	r0, [pc, #64]	@ (80125b4 <tcp_output_segment+0x1ac>)
 8012574:	f003 fecc 	bl	8016310 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8012578:	68fb      	ldr	r3, [r7, #12]
 801257a:	6858      	ldr	r0, [r3, #4]
 801257c:	68b9      	ldr	r1, [r7, #8]
 801257e:	68bb      	ldr	r3, [r7, #8]
 8012580:	1d1c      	adds	r4, r3, #4
 8012582:	68bb      	ldr	r3, [r7, #8]
 8012584:	7add      	ldrb	r5, [r3, #11]
 8012586:	68bb      	ldr	r3, [r7, #8]
 8012588:	7a9b      	ldrb	r3, [r3, #10]
 801258a:	687a      	ldr	r2, [r7, #4]
 801258c:	9202      	str	r2, [sp, #8]
 801258e:	2206      	movs	r2, #6
 8012590:	9201      	str	r2, [sp, #4]
 8012592:	9300      	str	r3, [sp, #0]
 8012594:	462b      	mov	r3, r5
 8012596:	4622      	mov	r2, r4
 8012598:	f002 fbaa 	bl	8014cf0 <ip4_output_if>
 801259c:	4603      	mov	r3, r0
 801259e:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 80125a0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80125a4:	4618      	mov	r0, r3
 80125a6:	3720      	adds	r7, #32
 80125a8:	46bd      	mov	sp, r7
 80125aa:	bdb0      	pop	{r4, r5, r7, pc}
 80125ac:	08019a40 	.word	0x08019a40
 80125b0:	0801a004 	.word	0x0801a004
 80125b4:	08019a94 	.word	0x08019a94
 80125b8:	0801a024 	.word	0x0801a024
 80125bc:	0801a044 	.word	0x0801a044
 80125c0:	2000eb44 	.word	0x2000eb44
 80125c4:	0801a068 	.word	0x0801a068

080125c8 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 80125c8:	b5b0      	push	{r4, r5, r7, lr}
 80125ca:	b084      	sub	sp, #16
 80125cc:	af00      	add	r7, sp, #0
 80125ce:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 80125d0:	687b      	ldr	r3, [r7, #4]
 80125d2:	2b00      	cmp	r3, #0
 80125d4:	d106      	bne.n	80125e4 <tcp_rexmit_rto_prepare+0x1c>
 80125d6:	4b31      	ldr	r3, [pc, #196]	@ (801269c <tcp_rexmit_rto_prepare+0xd4>)
 80125d8:	f240 6263 	movw	r2, #1635	@ 0x663
 80125dc:	4930      	ldr	r1, [pc, #192]	@ (80126a0 <tcp_rexmit_rto_prepare+0xd8>)
 80125de:	4831      	ldr	r0, [pc, #196]	@ (80126a4 <tcp_rexmit_rto_prepare+0xdc>)
 80125e0:	f003 fe96 	bl	8016310 <iprintf>

  if (pcb->unacked == NULL) {
 80125e4:	687b      	ldr	r3, [r7, #4]
 80125e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80125e8:	2b00      	cmp	r3, #0
 80125ea:	d102      	bne.n	80125f2 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 80125ec:	f06f 0305 	mvn.w	r3, #5
 80125f0:	e050      	b.n	8012694 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80125f2:	687b      	ldr	r3, [r7, #4]
 80125f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80125f6:	60fb      	str	r3, [r7, #12]
 80125f8:	e00b      	b.n	8012612 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 80125fa:	68f8      	ldr	r0, [r7, #12]
 80125fc:	f7ff fee4 	bl	80123c8 <tcp_output_segment_busy>
 8012600:	4603      	mov	r3, r0
 8012602:	2b00      	cmp	r3, #0
 8012604:	d002      	beq.n	801260c <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8012606:	f06f 0305 	mvn.w	r3, #5
 801260a:	e043      	b.n	8012694 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801260c:	68fb      	ldr	r3, [r7, #12]
 801260e:	681b      	ldr	r3, [r3, #0]
 8012610:	60fb      	str	r3, [r7, #12]
 8012612:	68fb      	ldr	r3, [r7, #12]
 8012614:	681b      	ldr	r3, [r3, #0]
 8012616:	2b00      	cmp	r3, #0
 8012618:	d1ef      	bne.n	80125fa <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 801261a:	68f8      	ldr	r0, [r7, #12]
 801261c:	f7ff fed4 	bl	80123c8 <tcp_output_segment_busy>
 8012620:	4603      	mov	r3, r0
 8012622:	2b00      	cmp	r3, #0
 8012624:	d002      	beq.n	801262c <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8012626:	f06f 0305 	mvn.w	r3, #5
 801262a:	e033      	b.n	8012694 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 801262c:	687b      	ldr	r3, [r7, #4]
 801262e:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8012630:	68fb      	ldr	r3, [r7, #12]
 8012632:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8012634:	687b      	ldr	r3, [r7, #4]
 8012636:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8012638:	687b      	ldr	r3, [r7, #4]
 801263a:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 801263c:	687b      	ldr	r3, [r7, #4]
 801263e:	2200      	movs	r2, #0
 8012640:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8012642:	687b      	ldr	r3, [r7, #4]
 8012644:	8b5b      	ldrh	r3, [r3, #26]
 8012646:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 801264a:	b29a      	uxth	r2, r3
 801264c:	687b      	ldr	r3, [r7, #4]
 801264e:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8012650:	68fb      	ldr	r3, [r7, #12]
 8012652:	68db      	ldr	r3, [r3, #12]
 8012654:	685b      	ldr	r3, [r3, #4]
 8012656:	4618      	mov	r0, r3
 8012658:	f7f8 fd11 	bl	800b07e <lwip_htonl>
 801265c:	4604      	mov	r4, r0
 801265e:	68fb      	ldr	r3, [r7, #12]
 8012660:	891b      	ldrh	r3, [r3, #8]
 8012662:	461d      	mov	r5, r3
 8012664:	68fb      	ldr	r3, [r7, #12]
 8012666:	68db      	ldr	r3, [r3, #12]
 8012668:	899b      	ldrh	r3, [r3, #12]
 801266a:	b29b      	uxth	r3, r3
 801266c:	4618      	mov	r0, r3
 801266e:	f7f8 fcf1 	bl	800b054 <lwip_htons>
 8012672:	4603      	mov	r3, r0
 8012674:	b2db      	uxtb	r3, r3
 8012676:	f003 0303 	and.w	r3, r3, #3
 801267a:	2b00      	cmp	r3, #0
 801267c:	d001      	beq.n	8012682 <tcp_rexmit_rto_prepare+0xba>
 801267e:	2301      	movs	r3, #1
 8012680:	e000      	b.n	8012684 <tcp_rexmit_rto_prepare+0xbc>
 8012682:	2300      	movs	r3, #0
 8012684:	442b      	add	r3, r5
 8012686:	18e2      	adds	r2, r4, r3
 8012688:	687b      	ldr	r3, [r7, #4]
 801268a:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 801268c:	687b      	ldr	r3, [r7, #4]
 801268e:	2200      	movs	r2, #0
 8012690:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 8012692:	2300      	movs	r3, #0
}
 8012694:	4618      	mov	r0, r3
 8012696:	3710      	adds	r7, #16
 8012698:	46bd      	mov	sp, r7
 801269a:	bdb0      	pop	{r4, r5, r7, pc}
 801269c:	08019a40 	.word	0x08019a40
 80126a0:	0801a07c 	.word	0x0801a07c
 80126a4:	08019a94 	.word	0x08019a94

080126a8 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 80126a8:	b580      	push	{r7, lr}
 80126aa:	b082      	sub	sp, #8
 80126ac:	af00      	add	r7, sp, #0
 80126ae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 80126b0:	687b      	ldr	r3, [r7, #4]
 80126b2:	2b00      	cmp	r3, #0
 80126b4:	d106      	bne.n	80126c4 <tcp_rexmit_rto_commit+0x1c>
 80126b6:	4b0d      	ldr	r3, [pc, #52]	@ (80126ec <tcp_rexmit_rto_commit+0x44>)
 80126b8:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 80126bc:	490c      	ldr	r1, [pc, #48]	@ (80126f0 <tcp_rexmit_rto_commit+0x48>)
 80126be:	480d      	ldr	r0, [pc, #52]	@ (80126f4 <tcp_rexmit_rto_commit+0x4c>)
 80126c0:	f003 fe26 	bl	8016310 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 80126c4:	687b      	ldr	r3, [r7, #4]
 80126c6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80126ca:	2bff      	cmp	r3, #255	@ 0xff
 80126cc:	d007      	beq.n	80126de <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 80126ce:	687b      	ldr	r3, [r7, #4]
 80126d0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80126d4:	3301      	adds	r3, #1
 80126d6:	b2da      	uxtb	r2, r3
 80126d8:	687b      	ldr	r3, [r7, #4]
 80126da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 80126de:	6878      	ldr	r0, [r7, #4]
 80126e0:	f7ff fc7e 	bl	8011fe0 <tcp_output>
}
 80126e4:	bf00      	nop
 80126e6:	3708      	adds	r7, #8
 80126e8:	46bd      	mov	sp, r7
 80126ea:	bd80      	pop	{r7, pc}
 80126ec:	08019a40 	.word	0x08019a40
 80126f0:	0801a0a0 	.word	0x0801a0a0
 80126f4:	08019a94 	.word	0x08019a94

080126f8 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 80126f8:	b580      	push	{r7, lr}
 80126fa:	b082      	sub	sp, #8
 80126fc:	af00      	add	r7, sp, #0
 80126fe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8012700:	687b      	ldr	r3, [r7, #4]
 8012702:	2b00      	cmp	r3, #0
 8012704:	d106      	bne.n	8012714 <tcp_rexmit_rto+0x1c>
 8012706:	4b0a      	ldr	r3, [pc, #40]	@ (8012730 <tcp_rexmit_rto+0x38>)
 8012708:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 801270c:	4909      	ldr	r1, [pc, #36]	@ (8012734 <tcp_rexmit_rto+0x3c>)
 801270e:	480a      	ldr	r0, [pc, #40]	@ (8012738 <tcp_rexmit_rto+0x40>)
 8012710:	f003 fdfe 	bl	8016310 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8012714:	6878      	ldr	r0, [r7, #4]
 8012716:	f7ff ff57 	bl	80125c8 <tcp_rexmit_rto_prepare>
 801271a:	4603      	mov	r3, r0
 801271c:	2b00      	cmp	r3, #0
 801271e:	d102      	bne.n	8012726 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8012720:	6878      	ldr	r0, [r7, #4]
 8012722:	f7ff ffc1 	bl	80126a8 <tcp_rexmit_rto_commit>
  }
}
 8012726:	bf00      	nop
 8012728:	3708      	adds	r7, #8
 801272a:	46bd      	mov	sp, r7
 801272c:	bd80      	pop	{r7, pc}
 801272e:	bf00      	nop
 8012730:	08019a40 	.word	0x08019a40
 8012734:	0801a0c4 	.word	0x0801a0c4
 8012738:	08019a94 	.word	0x08019a94

0801273c <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 801273c:	b590      	push	{r4, r7, lr}
 801273e:	b085      	sub	sp, #20
 8012740:	af00      	add	r7, sp, #0
 8012742:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8012744:	687b      	ldr	r3, [r7, #4]
 8012746:	2b00      	cmp	r3, #0
 8012748:	d106      	bne.n	8012758 <tcp_rexmit+0x1c>
 801274a:	4b2f      	ldr	r3, [pc, #188]	@ (8012808 <tcp_rexmit+0xcc>)
 801274c:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 8012750:	492e      	ldr	r1, [pc, #184]	@ (801280c <tcp_rexmit+0xd0>)
 8012752:	482f      	ldr	r0, [pc, #188]	@ (8012810 <tcp_rexmit+0xd4>)
 8012754:	f003 fddc 	bl	8016310 <iprintf>

  if (pcb->unacked == NULL) {
 8012758:	687b      	ldr	r3, [r7, #4]
 801275a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801275c:	2b00      	cmp	r3, #0
 801275e:	d102      	bne.n	8012766 <tcp_rexmit+0x2a>
    return ERR_VAL;
 8012760:	f06f 0305 	mvn.w	r3, #5
 8012764:	e04c      	b.n	8012800 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8012766:	687b      	ldr	r3, [r7, #4]
 8012768:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801276a:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 801276c:	68b8      	ldr	r0, [r7, #8]
 801276e:	f7ff fe2b 	bl	80123c8 <tcp_output_segment_busy>
 8012772:	4603      	mov	r3, r0
 8012774:	2b00      	cmp	r3, #0
 8012776:	d002      	beq.n	801277e <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8012778:	f06f 0305 	mvn.w	r3, #5
 801277c:	e040      	b.n	8012800 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 801277e:	68bb      	ldr	r3, [r7, #8]
 8012780:	681a      	ldr	r2, [r3, #0]
 8012782:	687b      	ldr	r3, [r7, #4]
 8012784:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 8012786:	687b      	ldr	r3, [r7, #4]
 8012788:	336c      	adds	r3, #108	@ 0x6c
 801278a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801278c:	e002      	b.n	8012794 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 801278e:	68fb      	ldr	r3, [r7, #12]
 8012790:	681b      	ldr	r3, [r3, #0]
 8012792:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8012794:	68fb      	ldr	r3, [r7, #12]
 8012796:	681b      	ldr	r3, [r3, #0]
 8012798:	2b00      	cmp	r3, #0
 801279a:	d011      	beq.n	80127c0 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801279c:	68fb      	ldr	r3, [r7, #12]
 801279e:	681b      	ldr	r3, [r3, #0]
 80127a0:	68db      	ldr	r3, [r3, #12]
 80127a2:	685b      	ldr	r3, [r3, #4]
 80127a4:	4618      	mov	r0, r3
 80127a6:	f7f8 fc6a 	bl	800b07e <lwip_htonl>
 80127aa:	4604      	mov	r4, r0
 80127ac:	68bb      	ldr	r3, [r7, #8]
 80127ae:	68db      	ldr	r3, [r3, #12]
 80127b0:	685b      	ldr	r3, [r3, #4]
 80127b2:	4618      	mov	r0, r3
 80127b4:	f7f8 fc63 	bl	800b07e <lwip_htonl>
 80127b8:	4603      	mov	r3, r0
 80127ba:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 80127bc:	2b00      	cmp	r3, #0
 80127be:	dbe6      	blt.n	801278e <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 80127c0:	68fb      	ldr	r3, [r7, #12]
 80127c2:	681a      	ldr	r2, [r3, #0]
 80127c4:	68bb      	ldr	r3, [r7, #8]
 80127c6:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 80127c8:	68fb      	ldr	r3, [r7, #12]
 80127ca:	68ba      	ldr	r2, [r7, #8]
 80127cc:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 80127ce:	68bb      	ldr	r3, [r7, #8]
 80127d0:	681b      	ldr	r3, [r3, #0]
 80127d2:	2b00      	cmp	r3, #0
 80127d4:	d103      	bne.n	80127de <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80127d6:	687b      	ldr	r3, [r7, #4]
 80127d8:	2200      	movs	r2, #0
 80127da:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 80127de:	687b      	ldr	r3, [r7, #4]
 80127e0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80127e4:	2bff      	cmp	r3, #255	@ 0xff
 80127e6:	d007      	beq.n	80127f8 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 80127e8:	687b      	ldr	r3, [r7, #4]
 80127ea:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80127ee:	3301      	adds	r3, #1
 80127f0:	b2da      	uxtb	r2, r3
 80127f2:	687b      	ldr	r3, [r7, #4]
 80127f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 80127f8:	687b      	ldr	r3, [r7, #4]
 80127fa:	2200      	movs	r2, #0
 80127fc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 80127fe:	2300      	movs	r3, #0
}
 8012800:	4618      	mov	r0, r3
 8012802:	3714      	adds	r7, #20
 8012804:	46bd      	mov	sp, r7
 8012806:	bd90      	pop	{r4, r7, pc}
 8012808:	08019a40 	.word	0x08019a40
 801280c:	0801a0e0 	.word	0x0801a0e0
 8012810:	08019a94 	.word	0x08019a94

08012814 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8012814:	b580      	push	{r7, lr}
 8012816:	b082      	sub	sp, #8
 8012818:	af00      	add	r7, sp, #0
 801281a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 801281c:	687b      	ldr	r3, [r7, #4]
 801281e:	2b00      	cmp	r3, #0
 8012820:	d106      	bne.n	8012830 <tcp_rexmit_fast+0x1c>
 8012822:	4b2a      	ldr	r3, [pc, #168]	@ (80128cc <tcp_rexmit_fast+0xb8>)
 8012824:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 8012828:	4929      	ldr	r1, [pc, #164]	@ (80128d0 <tcp_rexmit_fast+0xbc>)
 801282a:	482a      	ldr	r0, [pc, #168]	@ (80128d4 <tcp_rexmit_fast+0xc0>)
 801282c:	f003 fd70 	bl	8016310 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8012830:	687b      	ldr	r3, [r7, #4]
 8012832:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012834:	2b00      	cmp	r3, #0
 8012836:	d044      	beq.n	80128c2 <tcp_rexmit_fast+0xae>
 8012838:	687b      	ldr	r3, [r7, #4]
 801283a:	8b5b      	ldrh	r3, [r3, #26]
 801283c:	f003 0304 	and.w	r3, r3, #4
 8012840:	2b00      	cmp	r3, #0
 8012842:	d13e      	bne.n	80128c2 <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8012844:	6878      	ldr	r0, [r7, #4]
 8012846:	f7ff ff79 	bl	801273c <tcp_rexmit>
 801284a:	4603      	mov	r3, r0
 801284c:	2b00      	cmp	r3, #0
 801284e:	d138      	bne.n	80128c2 <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8012850:	687b      	ldr	r3, [r7, #4]
 8012852:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8012856:	687b      	ldr	r3, [r7, #4]
 8012858:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801285c:	4293      	cmp	r3, r2
 801285e:	bf28      	it	cs
 8012860:	4613      	movcs	r3, r2
 8012862:	b29b      	uxth	r3, r3
 8012864:	0fda      	lsrs	r2, r3, #31
 8012866:	4413      	add	r3, r2
 8012868:	105b      	asrs	r3, r3, #1
 801286a:	b29a      	uxth	r2, r3
 801286c:	687b      	ldr	r3, [r7, #4]
 801286e:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8012872:	687b      	ldr	r3, [r7, #4]
 8012874:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8012878:	461a      	mov	r2, r3
 801287a:	687b      	ldr	r3, [r7, #4]
 801287c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801287e:	005b      	lsls	r3, r3, #1
 8012880:	429a      	cmp	r2, r3
 8012882:	d206      	bcs.n	8012892 <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8012884:	687b      	ldr	r3, [r7, #4]
 8012886:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012888:	005b      	lsls	r3, r3, #1
 801288a:	b29a      	uxth	r2, r3
 801288c:	687b      	ldr	r3, [r7, #4]
 801288e:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8012892:	687b      	ldr	r3, [r7, #4]
 8012894:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8012898:	687b      	ldr	r3, [r7, #4]
 801289a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801289c:	4619      	mov	r1, r3
 801289e:	0049      	lsls	r1, r1, #1
 80128a0:	440b      	add	r3, r1
 80128a2:	b29b      	uxth	r3, r3
 80128a4:	4413      	add	r3, r2
 80128a6:	b29a      	uxth	r2, r3
 80128a8:	687b      	ldr	r3, [r7, #4]
 80128aa:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 80128ae:	687b      	ldr	r3, [r7, #4]
 80128b0:	8b5b      	ldrh	r3, [r3, #26]
 80128b2:	f043 0304 	orr.w	r3, r3, #4
 80128b6:	b29a      	uxth	r2, r3
 80128b8:	687b      	ldr	r3, [r7, #4]
 80128ba:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 80128bc:	687b      	ldr	r3, [r7, #4]
 80128be:	2200      	movs	r2, #0
 80128c0:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 80128c2:	bf00      	nop
 80128c4:	3708      	adds	r7, #8
 80128c6:	46bd      	mov	sp, r7
 80128c8:	bd80      	pop	{r7, pc}
 80128ca:	bf00      	nop
 80128cc:	08019a40 	.word	0x08019a40
 80128d0:	0801a0f8 	.word	0x0801a0f8
 80128d4:	08019a94 	.word	0x08019a94

080128d8 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 80128d8:	b580      	push	{r7, lr}
 80128da:	b086      	sub	sp, #24
 80128dc:	af00      	add	r7, sp, #0
 80128de:	60f8      	str	r0, [r7, #12]
 80128e0:	607b      	str	r3, [r7, #4]
 80128e2:	460b      	mov	r3, r1
 80128e4:	817b      	strh	r3, [r7, #10]
 80128e6:	4613      	mov	r3, r2
 80128e8:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 80128ea:	897a      	ldrh	r2, [r7, #10]
 80128ec:	893b      	ldrh	r3, [r7, #8]
 80128ee:	4413      	add	r3, r2
 80128f0:	b29b      	uxth	r3, r3
 80128f2:	3314      	adds	r3, #20
 80128f4:	b29b      	uxth	r3, r3
 80128f6:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80128fa:	4619      	mov	r1, r3
 80128fc:	2022      	movs	r0, #34	@ 0x22
 80128fe:	f7f9 fcb7 	bl	800c270 <pbuf_alloc>
 8012902:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8012904:	697b      	ldr	r3, [r7, #20]
 8012906:	2b00      	cmp	r3, #0
 8012908:	d04d      	beq.n	80129a6 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801290a:	897b      	ldrh	r3, [r7, #10]
 801290c:	3313      	adds	r3, #19
 801290e:	697a      	ldr	r2, [r7, #20]
 8012910:	8952      	ldrh	r2, [r2, #10]
 8012912:	4293      	cmp	r3, r2
 8012914:	db06      	blt.n	8012924 <tcp_output_alloc_header_common+0x4c>
 8012916:	4b26      	ldr	r3, [pc, #152]	@ (80129b0 <tcp_output_alloc_header_common+0xd8>)
 8012918:	f240 7223 	movw	r2, #1827	@ 0x723
 801291c:	4925      	ldr	r1, [pc, #148]	@ (80129b4 <tcp_output_alloc_header_common+0xdc>)
 801291e:	4826      	ldr	r0, [pc, #152]	@ (80129b8 <tcp_output_alloc_header_common+0xe0>)
 8012920:	f003 fcf6 	bl	8016310 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8012924:	697b      	ldr	r3, [r7, #20]
 8012926:	685b      	ldr	r3, [r3, #4]
 8012928:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 801292a:	8c3b      	ldrh	r3, [r7, #32]
 801292c:	4618      	mov	r0, r3
 801292e:	f7f8 fb91 	bl	800b054 <lwip_htons>
 8012932:	4603      	mov	r3, r0
 8012934:	461a      	mov	r2, r3
 8012936:	693b      	ldr	r3, [r7, #16]
 8012938:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801293a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801293c:	4618      	mov	r0, r3
 801293e:	f7f8 fb89 	bl	800b054 <lwip_htons>
 8012942:	4603      	mov	r3, r0
 8012944:	461a      	mov	r2, r3
 8012946:	693b      	ldr	r3, [r7, #16]
 8012948:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 801294a:	693b      	ldr	r3, [r7, #16]
 801294c:	687a      	ldr	r2, [r7, #4]
 801294e:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8012950:	68f8      	ldr	r0, [r7, #12]
 8012952:	f7f8 fb94 	bl	800b07e <lwip_htonl>
 8012956:	4602      	mov	r2, r0
 8012958:	693b      	ldr	r3, [r7, #16]
 801295a:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 801295c:	897b      	ldrh	r3, [r7, #10]
 801295e:	089b      	lsrs	r3, r3, #2
 8012960:	b29b      	uxth	r3, r3
 8012962:	3305      	adds	r3, #5
 8012964:	b29b      	uxth	r3, r3
 8012966:	031b      	lsls	r3, r3, #12
 8012968:	b29a      	uxth	r2, r3
 801296a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 801296e:	b29b      	uxth	r3, r3
 8012970:	4313      	orrs	r3, r2
 8012972:	b29b      	uxth	r3, r3
 8012974:	4618      	mov	r0, r3
 8012976:	f7f8 fb6d 	bl	800b054 <lwip_htons>
 801297a:	4603      	mov	r3, r0
 801297c:	461a      	mov	r2, r3
 801297e:	693b      	ldr	r3, [r7, #16]
 8012980:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8012982:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8012984:	4618      	mov	r0, r3
 8012986:	f7f8 fb65 	bl	800b054 <lwip_htons>
 801298a:	4603      	mov	r3, r0
 801298c:	461a      	mov	r2, r3
 801298e:	693b      	ldr	r3, [r7, #16]
 8012990:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8012992:	693b      	ldr	r3, [r7, #16]
 8012994:	2200      	movs	r2, #0
 8012996:	741a      	strb	r2, [r3, #16]
 8012998:	2200      	movs	r2, #0
 801299a:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 801299c:	693b      	ldr	r3, [r7, #16]
 801299e:	2200      	movs	r2, #0
 80129a0:	749a      	strb	r2, [r3, #18]
 80129a2:	2200      	movs	r2, #0
 80129a4:	74da      	strb	r2, [r3, #19]
  }
  return p;
 80129a6:	697b      	ldr	r3, [r7, #20]
}
 80129a8:	4618      	mov	r0, r3
 80129aa:	3718      	adds	r7, #24
 80129ac:	46bd      	mov	sp, r7
 80129ae:	bd80      	pop	{r7, pc}
 80129b0:	08019a40 	.word	0x08019a40
 80129b4:	0801a118 	.word	0x0801a118
 80129b8:	08019a94 	.word	0x08019a94

080129bc <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 80129bc:	b5b0      	push	{r4, r5, r7, lr}
 80129be:	b08a      	sub	sp, #40	@ 0x28
 80129c0:	af04      	add	r7, sp, #16
 80129c2:	60f8      	str	r0, [r7, #12]
 80129c4:	607b      	str	r3, [r7, #4]
 80129c6:	460b      	mov	r3, r1
 80129c8:	817b      	strh	r3, [r7, #10]
 80129ca:	4613      	mov	r3, r2
 80129cc:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 80129ce:	68fb      	ldr	r3, [r7, #12]
 80129d0:	2b00      	cmp	r3, #0
 80129d2:	d106      	bne.n	80129e2 <tcp_output_alloc_header+0x26>
 80129d4:	4b15      	ldr	r3, [pc, #84]	@ (8012a2c <tcp_output_alloc_header+0x70>)
 80129d6:	f240 7242 	movw	r2, #1858	@ 0x742
 80129da:	4915      	ldr	r1, [pc, #84]	@ (8012a30 <tcp_output_alloc_header+0x74>)
 80129dc:	4815      	ldr	r0, [pc, #84]	@ (8012a34 <tcp_output_alloc_header+0x78>)
 80129de:	f003 fc97 	bl	8016310 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 80129e2:	68fb      	ldr	r3, [r7, #12]
 80129e4:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80129e6:	68fb      	ldr	r3, [r7, #12]
 80129e8:	8adb      	ldrh	r3, [r3, #22]
 80129ea:	68fa      	ldr	r2, [r7, #12]
 80129ec:	8b12      	ldrh	r2, [r2, #24]
 80129ee:	68f9      	ldr	r1, [r7, #12]
 80129f0:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 80129f2:	893d      	ldrh	r5, [r7, #8]
 80129f4:	897c      	ldrh	r4, [r7, #10]
 80129f6:	9103      	str	r1, [sp, #12]
 80129f8:	2110      	movs	r1, #16
 80129fa:	9102      	str	r1, [sp, #8]
 80129fc:	9201      	str	r2, [sp, #4]
 80129fe:	9300      	str	r3, [sp, #0]
 8012a00:	687b      	ldr	r3, [r7, #4]
 8012a02:	462a      	mov	r2, r5
 8012a04:	4621      	mov	r1, r4
 8012a06:	f7ff ff67 	bl	80128d8 <tcp_output_alloc_header_common>
 8012a0a:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8012a0c:	697b      	ldr	r3, [r7, #20]
 8012a0e:	2b00      	cmp	r3, #0
 8012a10:	d006      	beq.n	8012a20 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8012a12:	68fb      	ldr	r3, [r7, #12]
 8012a14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012a16:	68fa      	ldr	r2, [r7, #12]
 8012a18:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8012a1a:	441a      	add	r2, r3
 8012a1c:	68fb      	ldr	r3, [r7, #12]
 8012a1e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 8012a20:	697b      	ldr	r3, [r7, #20]
}
 8012a22:	4618      	mov	r0, r3
 8012a24:	3718      	adds	r7, #24
 8012a26:	46bd      	mov	sp, r7
 8012a28:	bdb0      	pop	{r4, r5, r7, pc}
 8012a2a:	bf00      	nop
 8012a2c:	08019a40 	.word	0x08019a40
 8012a30:	0801a148 	.word	0x0801a148
 8012a34:	08019a94 	.word	0x08019a94

08012a38 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8012a38:	b580      	push	{r7, lr}
 8012a3a:	b088      	sub	sp, #32
 8012a3c:	af00      	add	r7, sp, #0
 8012a3e:	60f8      	str	r0, [r7, #12]
 8012a40:	60b9      	str	r1, [r7, #8]
 8012a42:	4611      	mov	r1, r2
 8012a44:	461a      	mov	r2, r3
 8012a46:	460b      	mov	r3, r1
 8012a48:	71fb      	strb	r3, [r7, #7]
 8012a4a:	4613      	mov	r3, r2
 8012a4c:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8012a4e:	2300      	movs	r3, #0
 8012a50:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8012a52:	68bb      	ldr	r3, [r7, #8]
 8012a54:	2b00      	cmp	r3, #0
 8012a56:	d106      	bne.n	8012a66 <tcp_output_fill_options+0x2e>
 8012a58:	4b12      	ldr	r3, [pc, #72]	@ (8012aa4 <tcp_output_fill_options+0x6c>)
 8012a5a:	f240 7256 	movw	r2, #1878	@ 0x756
 8012a5e:	4912      	ldr	r1, [pc, #72]	@ (8012aa8 <tcp_output_fill_options+0x70>)
 8012a60:	4812      	ldr	r0, [pc, #72]	@ (8012aac <tcp_output_fill_options+0x74>)
 8012a62:	f003 fc55 	bl	8016310 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8012a66:	68bb      	ldr	r3, [r7, #8]
 8012a68:	685b      	ldr	r3, [r3, #4]
 8012a6a:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8012a6c:	69bb      	ldr	r3, [r7, #24]
 8012a6e:	3314      	adds	r3, #20
 8012a70:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8012a72:	8bfb      	ldrh	r3, [r7, #30]
 8012a74:	009b      	lsls	r3, r3, #2
 8012a76:	461a      	mov	r2, r3
 8012a78:	79fb      	ldrb	r3, [r7, #7]
 8012a7a:	009b      	lsls	r3, r3, #2
 8012a7c:	f003 0304 	and.w	r3, r3, #4
 8012a80:	4413      	add	r3, r2
 8012a82:	3314      	adds	r3, #20
 8012a84:	69ba      	ldr	r2, [r7, #24]
 8012a86:	4413      	add	r3, r2
 8012a88:	697a      	ldr	r2, [r7, #20]
 8012a8a:	429a      	cmp	r2, r3
 8012a8c:	d006      	beq.n	8012a9c <tcp_output_fill_options+0x64>
 8012a8e:	4b05      	ldr	r3, [pc, #20]	@ (8012aa4 <tcp_output_fill_options+0x6c>)
 8012a90:	f240 7275 	movw	r2, #1909	@ 0x775
 8012a94:	4906      	ldr	r1, [pc, #24]	@ (8012ab0 <tcp_output_fill_options+0x78>)
 8012a96:	4805      	ldr	r0, [pc, #20]	@ (8012aac <tcp_output_fill_options+0x74>)
 8012a98:	f003 fc3a 	bl	8016310 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8012a9c:	bf00      	nop
 8012a9e:	3720      	adds	r7, #32
 8012aa0:	46bd      	mov	sp, r7
 8012aa2:	bd80      	pop	{r7, pc}
 8012aa4:	08019a40 	.word	0x08019a40
 8012aa8:	0801a170 	.word	0x0801a170
 8012aac:	08019a94 	.word	0x08019a94
 8012ab0:	0801a068 	.word	0x0801a068

08012ab4 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8012ab4:	b580      	push	{r7, lr}
 8012ab6:	b08a      	sub	sp, #40	@ 0x28
 8012ab8:	af04      	add	r7, sp, #16
 8012aba:	60f8      	str	r0, [r7, #12]
 8012abc:	60b9      	str	r1, [r7, #8]
 8012abe:	607a      	str	r2, [r7, #4]
 8012ac0:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8012ac2:	68bb      	ldr	r3, [r7, #8]
 8012ac4:	2b00      	cmp	r3, #0
 8012ac6:	d106      	bne.n	8012ad6 <tcp_output_control_segment+0x22>
 8012ac8:	4b1c      	ldr	r3, [pc, #112]	@ (8012b3c <tcp_output_control_segment+0x88>)
 8012aca:	f240 7287 	movw	r2, #1927	@ 0x787
 8012ace:	491c      	ldr	r1, [pc, #112]	@ (8012b40 <tcp_output_control_segment+0x8c>)
 8012ad0:	481c      	ldr	r0, [pc, #112]	@ (8012b44 <tcp_output_control_segment+0x90>)
 8012ad2:	f003 fc1d 	bl	8016310 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8012ad6:	683a      	ldr	r2, [r7, #0]
 8012ad8:	6879      	ldr	r1, [r7, #4]
 8012ada:	68f8      	ldr	r0, [r7, #12]
 8012adc:	f7fe faea 	bl	80110b4 <tcp_route>
 8012ae0:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8012ae2:	693b      	ldr	r3, [r7, #16]
 8012ae4:	2b00      	cmp	r3, #0
 8012ae6:	d102      	bne.n	8012aee <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8012ae8:	23fc      	movs	r3, #252	@ 0xfc
 8012aea:	75fb      	strb	r3, [r7, #23]
 8012aec:	e01c      	b.n	8012b28 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8012aee:	68fb      	ldr	r3, [r7, #12]
 8012af0:	2b00      	cmp	r3, #0
 8012af2:	d006      	beq.n	8012b02 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8012af4:	68fb      	ldr	r3, [r7, #12]
 8012af6:	7adb      	ldrb	r3, [r3, #11]
 8012af8:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8012afa:	68fb      	ldr	r3, [r7, #12]
 8012afc:	7a9b      	ldrb	r3, [r3, #10]
 8012afe:	757b      	strb	r3, [r7, #21]
 8012b00:	e003      	b.n	8012b0a <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8012b02:	23ff      	movs	r3, #255	@ 0xff
 8012b04:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8012b06:	2300      	movs	r3, #0
 8012b08:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8012b0a:	7dba      	ldrb	r2, [r7, #22]
 8012b0c:	693b      	ldr	r3, [r7, #16]
 8012b0e:	9302      	str	r3, [sp, #8]
 8012b10:	2306      	movs	r3, #6
 8012b12:	9301      	str	r3, [sp, #4]
 8012b14:	7d7b      	ldrb	r3, [r7, #21]
 8012b16:	9300      	str	r3, [sp, #0]
 8012b18:	4613      	mov	r3, r2
 8012b1a:	683a      	ldr	r2, [r7, #0]
 8012b1c:	6879      	ldr	r1, [r7, #4]
 8012b1e:	68b8      	ldr	r0, [r7, #8]
 8012b20:	f002 f8e6 	bl	8014cf0 <ip4_output_if>
 8012b24:	4603      	mov	r3, r0
 8012b26:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8012b28:	68b8      	ldr	r0, [r7, #8]
 8012b2a:	f7f9 fe85 	bl	800c838 <pbuf_free>
  return err;
 8012b2e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012b32:	4618      	mov	r0, r3
 8012b34:	3718      	adds	r7, #24
 8012b36:	46bd      	mov	sp, r7
 8012b38:	bd80      	pop	{r7, pc}
 8012b3a:	bf00      	nop
 8012b3c:	08019a40 	.word	0x08019a40
 8012b40:	0801a198 	.word	0x0801a198
 8012b44:	08019a94 	.word	0x08019a94

08012b48 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8012b48:	b590      	push	{r4, r7, lr}
 8012b4a:	b08b      	sub	sp, #44	@ 0x2c
 8012b4c:	af04      	add	r7, sp, #16
 8012b4e:	60f8      	str	r0, [r7, #12]
 8012b50:	60b9      	str	r1, [r7, #8]
 8012b52:	607a      	str	r2, [r7, #4]
 8012b54:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8012b56:	683b      	ldr	r3, [r7, #0]
 8012b58:	2b00      	cmp	r3, #0
 8012b5a:	d106      	bne.n	8012b6a <tcp_rst+0x22>
 8012b5c:	4b1f      	ldr	r3, [pc, #124]	@ (8012bdc <tcp_rst+0x94>)
 8012b5e:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 8012b62:	491f      	ldr	r1, [pc, #124]	@ (8012be0 <tcp_rst+0x98>)
 8012b64:	481f      	ldr	r0, [pc, #124]	@ (8012be4 <tcp_rst+0x9c>)
 8012b66:	f003 fbd3 	bl	8016310 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8012b6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012b6c:	2b00      	cmp	r3, #0
 8012b6e:	d106      	bne.n	8012b7e <tcp_rst+0x36>
 8012b70:	4b1a      	ldr	r3, [pc, #104]	@ (8012bdc <tcp_rst+0x94>)
 8012b72:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 8012b76:	491c      	ldr	r1, [pc, #112]	@ (8012be8 <tcp_rst+0xa0>)
 8012b78:	481a      	ldr	r0, [pc, #104]	@ (8012be4 <tcp_rst+0x9c>)
 8012b7a:	f003 fbc9 	bl	8016310 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8012b7e:	2300      	movs	r3, #0
 8012b80:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8012b82:	f246 0308 	movw	r3, #24584	@ 0x6008
 8012b86:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8012b88:	7dfb      	ldrb	r3, [r7, #23]
 8012b8a:	b29c      	uxth	r4, r3
 8012b8c:	68b8      	ldr	r0, [r7, #8]
 8012b8e:	f7f8 fa76 	bl	800b07e <lwip_htonl>
 8012b92:	4602      	mov	r2, r0
 8012b94:	8abb      	ldrh	r3, [r7, #20]
 8012b96:	9303      	str	r3, [sp, #12]
 8012b98:	2314      	movs	r3, #20
 8012b9a:	9302      	str	r3, [sp, #8]
 8012b9c:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8012b9e:	9301      	str	r3, [sp, #4]
 8012ba0:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8012ba2:	9300      	str	r3, [sp, #0]
 8012ba4:	4613      	mov	r3, r2
 8012ba6:	2200      	movs	r2, #0
 8012ba8:	4621      	mov	r1, r4
 8012baa:	6878      	ldr	r0, [r7, #4]
 8012bac:	f7ff fe94 	bl	80128d8 <tcp_output_alloc_header_common>
 8012bb0:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8012bb2:	693b      	ldr	r3, [r7, #16]
 8012bb4:	2b00      	cmp	r3, #0
 8012bb6:	d00c      	beq.n	8012bd2 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8012bb8:	7dfb      	ldrb	r3, [r7, #23]
 8012bba:	2200      	movs	r2, #0
 8012bbc:	6939      	ldr	r1, [r7, #16]
 8012bbe:	68f8      	ldr	r0, [r7, #12]
 8012bc0:	f7ff ff3a 	bl	8012a38 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8012bc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012bc6:	683a      	ldr	r2, [r7, #0]
 8012bc8:	6939      	ldr	r1, [r7, #16]
 8012bca:	68f8      	ldr	r0, [r7, #12]
 8012bcc:	f7ff ff72 	bl	8012ab4 <tcp_output_control_segment>
 8012bd0:	e000      	b.n	8012bd4 <tcp_rst+0x8c>
    return;
 8012bd2:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8012bd4:	371c      	adds	r7, #28
 8012bd6:	46bd      	mov	sp, r7
 8012bd8:	bd90      	pop	{r4, r7, pc}
 8012bda:	bf00      	nop
 8012bdc:	08019a40 	.word	0x08019a40
 8012be0:	0801a1c4 	.word	0x0801a1c4
 8012be4:	08019a94 	.word	0x08019a94
 8012be8:	0801a1e0 	.word	0x0801a1e0

08012bec <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8012bec:	b590      	push	{r4, r7, lr}
 8012bee:	b087      	sub	sp, #28
 8012bf0:	af00      	add	r7, sp, #0
 8012bf2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8012bf4:	2300      	movs	r3, #0
 8012bf6:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8012bf8:	2300      	movs	r3, #0
 8012bfa:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8012bfc:	687b      	ldr	r3, [r7, #4]
 8012bfe:	2b00      	cmp	r3, #0
 8012c00:	d106      	bne.n	8012c10 <tcp_send_empty_ack+0x24>
 8012c02:	4b28      	ldr	r3, [pc, #160]	@ (8012ca4 <tcp_send_empty_ack+0xb8>)
 8012c04:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 8012c08:	4927      	ldr	r1, [pc, #156]	@ (8012ca8 <tcp_send_empty_ack+0xbc>)
 8012c0a:	4828      	ldr	r0, [pc, #160]	@ (8012cac <tcp_send_empty_ack+0xc0>)
 8012c0c:	f003 fb80 	bl	8016310 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8012c10:	7dfb      	ldrb	r3, [r7, #23]
 8012c12:	009b      	lsls	r3, r3, #2
 8012c14:	b2db      	uxtb	r3, r3
 8012c16:	f003 0304 	and.w	r3, r3, #4
 8012c1a:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8012c1c:	7d7b      	ldrb	r3, [r7, #21]
 8012c1e:	b29c      	uxth	r4, r3
 8012c20:	687b      	ldr	r3, [r7, #4]
 8012c22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012c24:	4618      	mov	r0, r3
 8012c26:	f7f8 fa2a 	bl	800b07e <lwip_htonl>
 8012c2a:	4603      	mov	r3, r0
 8012c2c:	2200      	movs	r2, #0
 8012c2e:	4621      	mov	r1, r4
 8012c30:	6878      	ldr	r0, [r7, #4]
 8012c32:	f7ff fec3 	bl	80129bc <tcp_output_alloc_header>
 8012c36:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8012c38:	693b      	ldr	r3, [r7, #16]
 8012c3a:	2b00      	cmp	r3, #0
 8012c3c:	d109      	bne.n	8012c52 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012c3e:	687b      	ldr	r3, [r7, #4]
 8012c40:	8b5b      	ldrh	r3, [r3, #26]
 8012c42:	f043 0303 	orr.w	r3, r3, #3
 8012c46:	b29a      	uxth	r2, r3
 8012c48:	687b      	ldr	r3, [r7, #4]
 8012c4a:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8012c4c:	f06f 0301 	mvn.w	r3, #1
 8012c50:	e023      	b.n	8012c9a <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8012c52:	7dbb      	ldrb	r3, [r7, #22]
 8012c54:	7dfa      	ldrb	r2, [r7, #23]
 8012c56:	6939      	ldr	r1, [r7, #16]
 8012c58:	6878      	ldr	r0, [r7, #4]
 8012c5a:	f7ff feed 	bl	8012a38 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8012c5e:	687a      	ldr	r2, [r7, #4]
 8012c60:	687b      	ldr	r3, [r7, #4]
 8012c62:	3304      	adds	r3, #4
 8012c64:	6939      	ldr	r1, [r7, #16]
 8012c66:	6878      	ldr	r0, [r7, #4]
 8012c68:	f7ff ff24 	bl	8012ab4 <tcp_output_control_segment>
 8012c6c:	4603      	mov	r3, r0
 8012c6e:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8012c70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012c74:	2b00      	cmp	r3, #0
 8012c76:	d007      	beq.n	8012c88 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012c78:	687b      	ldr	r3, [r7, #4]
 8012c7a:	8b5b      	ldrh	r3, [r3, #26]
 8012c7c:	f043 0303 	orr.w	r3, r3, #3
 8012c80:	b29a      	uxth	r2, r3
 8012c82:	687b      	ldr	r3, [r7, #4]
 8012c84:	835a      	strh	r2, [r3, #26]
 8012c86:	e006      	b.n	8012c96 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012c88:	687b      	ldr	r3, [r7, #4]
 8012c8a:	8b5b      	ldrh	r3, [r3, #26]
 8012c8c:	f023 0303 	bic.w	r3, r3, #3
 8012c90:	b29a      	uxth	r2, r3
 8012c92:	687b      	ldr	r3, [r7, #4]
 8012c94:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8012c96:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8012c9a:	4618      	mov	r0, r3
 8012c9c:	371c      	adds	r7, #28
 8012c9e:	46bd      	mov	sp, r7
 8012ca0:	bd90      	pop	{r4, r7, pc}
 8012ca2:	bf00      	nop
 8012ca4:	08019a40 	.word	0x08019a40
 8012ca8:	0801a1fc 	.word	0x0801a1fc
 8012cac:	08019a94 	.word	0x08019a94

08012cb0 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8012cb0:	b590      	push	{r4, r7, lr}
 8012cb2:	b087      	sub	sp, #28
 8012cb4:	af00      	add	r7, sp, #0
 8012cb6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8012cb8:	2300      	movs	r3, #0
 8012cba:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8012cbc:	687b      	ldr	r3, [r7, #4]
 8012cbe:	2b00      	cmp	r3, #0
 8012cc0:	d106      	bne.n	8012cd0 <tcp_keepalive+0x20>
 8012cc2:	4b18      	ldr	r3, [pc, #96]	@ (8012d24 <tcp_keepalive+0x74>)
 8012cc4:	f640 0224 	movw	r2, #2084	@ 0x824
 8012cc8:	4917      	ldr	r1, [pc, #92]	@ (8012d28 <tcp_keepalive+0x78>)
 8012cca:	4818      	ldr	r0, [pc, #96]	@ (8012d2c <tcp_keepalive+0x7c>)
 8012ccc:	f003 fb20 	bl	8016310 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8012cd0:	7dfb      	ldrb	r3, [r7, #23]
 8012cd2:	b29c      	uxth	r4, r3
 8012cd4:	687b      	ldr	r3, [r7, #4]
 8012cd6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012cd8:	3b01      	subs	r3, #1
 8012cda:	4618      	mov	r0, r3
 8012cdc:	f7f8 f9cf 	bl	800b07e <lwip_htonl>
 8012ce0:	4603      	mov	r3, r0
 8012ce2:	2200      	movs	r2, #0
 8012ce4:	4621      	mov	r1, r4
 8012ce6:	6878      	ldr	r0, [r7, #4]
 8012ce8:	f7ff fe68 	bl	80129bc <tcp_output_alloc_header>
 8012cec:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8012cee:	693b      	ldr	r3, [r7, #16]
 8012cf0:	2b00      	cmp	r3, #0
 8012cf2:	d102      	bne.n	8012cfa <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8012cf4:	f04f 33ff 	mov.w	r3, #4294967295
 8012cf8:	e010      	b.n	8012d1c <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8012cfa:	7dfb      	ldrb	r3, [r7, #23]
 8012cfc:	2200      	movs	r2, #0
 8012cfe:	6939      	ldr	r1, [r7, #16]
 8012d00:	6878      	ldr	r0, [r7, #4]
 8012d02:	f7ff fe99 	bl	8012a38 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8012d06:	687a      	ldr	r2, [r7, #4]
 8012d08:	687b      	ldr	r3, [r7, #4]
 8012d0a:	3304      	adds	r3, #4
 8012d0c:	6939      	ldr	r1, [r7, #16]
 8012d0e:	6878      	ldr	r0, [r7, #4]
 8012d10:	f7ff fed0 	bl	8012ab4 <tcp_output_control_segment>
 8012d14:	4603      	mov	r3, r0
 8012d16:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8012d18:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8012d1c:	4618      	mov	r0, r3
 8012d1e:	371c      	adds	r7, #28
 8012d20:	46bd      	mov	sp, r7
 8012d22:	bd90      	pop	{r4, r7, pc}
 8012d24:	08019a40 	.word	0x08019a40
 8012d28:	0801a21c 	.word	0x0801a21c
 8012d2c:	08019a94 	.word	0x08019a94

08012d30 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8012d30:	b590      	push	{r4, r7, lr}
 8012d32:	b08b      	sub	sp, #44	@ 0x2c
 8012d34:	af00      	add	r7, sp, #0
 8012d36:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8012d38:	2300      	movs	r3, #0
 8012d3a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8012d3e:	687b      	ldr	r3, [r7, #4]
 8012d40:	2b00      	cmp	r3, #0
 8012d42:	d106      	bne.n	8012d52 <tcp_zero_window_probe+0x22>
 8012d44:	4b4c      	ldr	r3, [pc, #304]	@ (8012e78 <tcp_zero_window_probe+0x148>)
 8012d46:	f640 024f 	movw	r2, #2127	@ 0x84f
 8012d4a:	494c      	ldr	r1, [pc, #304]	@ (8012e7c <tcp_zero_window_probe+0x14c>)
 8012d4c:	484c      	ldr	r0, [pc, #304]	@ (8012e80 <tcp_zero_window_probe+0x150>)
 8012d4e:	f003 fadf 	bl	8016310 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8012d52:	687b      	ldr	r3, [r7, #4]
 8012d54:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012d56:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8012d58:	6a3b      	ldr	r3, [r7, #32]
 8012d5a:	2b00      	cmp	r3, #0
 8012d5c:	d101      	bne.n	8012d62 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8012d5e:	2300      	movs	r3, #0
 8012d60:	e086      	b.n	8012e70 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8012d62:	687b      	ldr	r3, [r7, #4]
 8012d64:	f893 30a2 	ldrb.w	r3, [r3, #162]	@ 0xa2
 8012d68:	2bff      	cmp	r3, #255	@ 0xff
 8012d6a:	d007      	beq.n	8012d7c <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8012d6c:	687b      	ldr	r3, [r7, #4]
 8012d6e:	f893 30a2 	ldrb.w	r3, [r3, #162]	@ 0xa2
 8012d72:	3301      	adds	r3, #1
 8012d74:	b2da      	uxtb	r2, r3
 8012d76:	687b      	ldr	r3, [r7, #4]
 8012d78:	f883 20a2 	strb.w	r2, [r3, #162]	@ 0xa2
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8012d7c:	6a3b      	ldr	r3, [r7, #32]
 8012d7e:	68db      	ldr	r3, [r3, #12]
 8012d80:	899b      	ldrh	r3, [r3, #12]
 8012d82:	b29b      	uxth	r3, r3
 8012d84:	4618      	mov	r0, r3
 8012d86:	f7f8 f965 	bl	800b054 <lwip_htons>
 8012d8a:	4603      	mov	r3, r0
 8012d8c:	b2db      	uxtb	r3, r3
 8012d8e:	f003 0301 	and.w	r3, r3, #1
 8012d92:	2b00      	cmp	r3, #0
 8012d94:	d005      	beq.n	8012da2 <tcp_zero_window_probe+0x72>
 8012d96:	6a3b      	ldr	r3, [r7, #32]
 8012d98:	891b      	ldrh	r3, [r3, #8]
 8012d9a:	2b00      	cmp	r3, #0
 8012d9c:	d101      	bne.n	8012da2 <tcp_zero_window_probe+0x72>
 8012d9e:	2301      	movs	r3, #1
 8012da0:	e000      	b.n	8012da4 <tcp_zero_window_probe+0x74>
 8012da2:	2300      	movs	r3, #0
 8012da4:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8012da6:	7ffb      	ldrb	r3, [r7, #31]
 8012da8:	2b00      	cmp	r3, #0
 8012daa:	bf0c      	ite	eq
 8012dac:	2301      	moveq	r3, #1
 8012dae:	2300      	movne	r3, #0
 8012db0:	b2db      	uxtb	r3, r3
 8012db2:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8012db4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012db8:	b299      	uxth	r1, r3
 8012dba:	6a3b      	ldr	r3, [r7, #32]
 8012dbc:	68db      	ldr	r3, [r3, #12]
 8012dbe:	685b      	ldr	r3, [r3, #4]
 8012dc0:	8bba      	ldrh	r2, [r7, #28]
 8012dc2:	6878      	ldr	r0, [r7, #4]
 8012dc4:	f7ff fdfa 	bl	80129bc <tcp_output_alloc_header>
 8012dc8:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8012dca:	69bb      	ldr	r3, [r7, #24]
 8012dcc:	2b00      	cmp	r3, #0
 8012dce:	d102      	bne.n	8012dd6 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8012dd0:	f04f 33ff 	mov.w	r3, #4294967295
 8012dd4:	e04c      	b.n	8012e70 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8012dd6:	69bb      	ldr	r3, [r7, #24]
 8012dd8:	685b      	ldr	r3, [r3, #4]
 8012dda:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8012ddc:	7ffb      	ldrb	r3, [r7, #31]
 8012dde:	2b00      	cmp	r3, #0
 8012de0:	d011      	beq.n	8012e06 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8012de2:	697b      	ldr	r3, [r7, #20]
 8012de4:	899b      	ldrh	r3, [r3, #12]
 8012de6:	b29b      	uxth	r3, r3
 8012de8:	b21b      	sxth	r3, r3
 8012dea:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8012dee:	b21c      	sxth	r4, r3
 8012df0:	2011      	movs	r0, #17
 8012df2:	f7f8 f92f 	bl	800b054 <lwip_htons>
 8012df6:	4603      	mov	r3, r0
 8012df8:	b21b      	sxth	r3, r3
 8012dfa:	4323      	orrs	r3, r4
 8012dfc:	b21b      	sxth	r3, r3
 8012dfe:	b29a      	uxth	r2, r3
 8012e00:	697b      	ldr	r3, [r7, #20]
 8012e02:	819a      	strh	r2, [r3, #12]
 8012e04:	e010      	b.n	8012e28 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8012e06:	69bb      	ldr	r3, [r7, #24]
 8012e08:	685b      	ldr	r3, [r3, #4]
 8012e0a:	3314      	adds	r3, #20
 8012e0c:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8012e0e:	6a3b      	ldr	r3, [r7, #32]
 8012e10:	6858      	ldr	r0, [r3, #4]
 8012e12:	6a3b      	ldr	r3, [r7, #32]
 8012e14:	685b      	ldr	r3, [r3, #4]
 8012e16:	891a      	ldrh	r2, [r3, #8]
 8012e18:	6a3b      	ldr	r3, [r7, #32]
 8012e1a:	891b      	ldrh	r3, [r3, #8]
 8012e1c:	1ad3      	subs	r3, r2, r3
 8012e1e:	b29b      	uxth	r3, r3
 8012e20:	2201      	movs	r2, #1
 8012e22:	6939      	ldr	r1, [r7, #16]
 8012e24:	f7f9 fefe 	bl	800cc24 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8012e28:	6a3b      	ldr	r3, [r7, #32]
 8012e2a:	68db      	ldr	r3, [r3, #12]
 8012e2c:	685b      	ldr	r3, [r3, #4]
 8012e2e:	4618      	mov	r0, r3
 8012e30:	f7f8 f925 	bl	800b07e <lwip_htonl>
 8012e34:	4603      	mov	r3, r0
 8012e36:	3301      	adds	r3, #1
 8012e38:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8012e3a:	687b      	ldr	r3, [r7, #4]
 8012e3c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8012e3e:	68fb      	ldr	r3, [r7, #12]
 8012e40:	1ad3      	subs	r3, r2, r3
 8012e42:	2b00      	cmp	r3, #0
 8012e44:	da02      	bge.n	8012e4c <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8012e46:	687b      	ldr	r3, [r7, #4]
 8012e48:	68fa      	ldr	r2, [r7, #12]
 8012e4a:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8012e4c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012e50:	2200      	movs	r2, #0
 8012e52:	69b9      	ldr	r1, [r7, #24]
 8012e54:	6878      	ldr	r0, [r7, #4]
 8012e56:	f7ff fdef 	bl	8012a38 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8012e5a:	687a      	ldr	r2, [r7, #4]
 8012e5c:	687b      	ldr	r3, [r7, #4]
 8012e5e:	3304      	adds	r3, #4
 8012e60:	69b9      	ldr	r1, [r7, #24]
 8012e62:	6878      	ldr	r0, [r7, #4]
 8012e64:	f7ff fe26 	bl	8012ab4 <tcp_output_control_segment>
 8012e68:	4603      	mov	r3, r0
 8012e6a:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8012e6c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8012e70:	4618      	mov	r0, r3
 8012e72:	372c      	adds	r7, #44	@ 0x2c
 8012e74:	46bd      	mov	sp, r7
 8012e76:	bd90      	pop	{r4, r7, pc}
 8012e78:	08019a40 	.word	0x08019a40
 8012e7c:	0801a238 	.word	0x0801a238
 8012e80:	08019a94 	.word	0x08019a94

08012e84 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8012e84:	b580      	push	{r7, lr}
 8012e86:	b082      	sub	sp, #8
 8012e88:	af00      	add	r7, sp, #0
 8012e8a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8012e8c:	f7f9 ffda 	bl	800ce44 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8012e90:	4b0a      	ldr	r3, [pc, #40]	@ (8012ebc <tcpip_tcp_timer+0x38>)
 8012e92:	681b      	ldr	r3, [r3, #0]
 8012e94:	2b00      	cmp	r3, #0
 8012e96:	d103      	bne.n	8012ea0 <tcpip_tcp_timer+0x1c>
 8012e98:	4b09      	ldr	r3, [pc, #36]	@ (8012ec0 <tcpip_tcp_timer+0x3c>)
 8012e9a:	681b      	ldr	r3, [r3, #0]
 8012e9c:	2b00      	cmp	r3, #0
 8012e9e:	d005      	beq.n	8012eac <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8012ea0:	2200      	movs	r2, #0
 8012ea2:	4908      	ldr	r1, [pc, #32]	@ (8012ec4 <tcpip_tcp_timer+0x40>)
 8012ea4:	20fa      	movs	r0, #250	@ 0xfa
 8012ea6:	f000 f8f3 	bl	8013090 <sys_timeout>
 8012eaa:	e003      	b.n	8012eb4 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8012eac:	4b06      	ldr	r3, [pc, #24]	@ (8012ec8 <tcpip_tcp_timer+0x44>)
 8012eae:	2200      	movs	r2, #0
 8012eb0:	601a      	str	r2, [r3, #0]
  }
}
 8012eb2:	bf00      	nop
 8012eb4:	bf00      	nop
 8012eb6:	3708      	adds	r7, #8
 8012eb8:	46bd      	mov	sp, r7
 8012eba:	bd80      	pop	{r7, pc}
 8012ebc:	2000eb50 	.word	0x2000eb50
 8012ec0:	2000eb54 	.word	0x2000eb54
 8012ec4:	08012e85 	.word	0x08012e85
 8012ec8:	2000eb9c 	.word	0x2000eb9c

08012ecc <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8012ecc:	b580      	push	{r7, lr}
 8012ece:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8012ed0:	4b0a      	ldr	r3, [pc, #40]	@ (8012efc <tcp_timer_needed+0x30>)
 8012ed2:	681b      	ldr	r3, [r3, #0]
 8012ed4:	2b00      	cmp	r3, #0
 8012ed6:	d10f      	bne.n	8012ef8 <tcp_timer_needed+0x2c>
 8012ed8:	4b09      	ldr	r3, [pc, #36]	@ (8012f00 <tcp_timer_needed+0x34>)
 8012eda:	681b      	ldr	r3, [r3, #0]
 8012edc:	2b00      	cmp	r3, #0
 8012ede:	d103      	bne.n	8012ee8 <tcp_timer_needed+0x1c>
 8012ee0:	4b08      	ldr	r3, [pc, #32]	@ (8012f04 <tcp_timer_needed+0x38>)
 8012ee2:	681b      	ldr	r3, [r3, #0]
 8012ee4:	2b00      	cmp	r3, #0
 8012ee6:	d007      	beq.n	8012ef8 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8012ee8:	4b04      	ldr	r3, [pc, #16]	@ (8012efc <tcp_timer_needed+0x30>)
 8012eea:	2201      	movs	r2, #1
 8012eec:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8012eee:	2200      	movs	r2, #0
 8012ef0:	4905      	ldr	r1, [pc, #20]	@ (8012f08 <tcp_timer_needed+0x3c>)
 8012ef2:	20fa      	movs	r0, #250	@ 0xfa
 8012ef4:	f000 f8cc 	bl	8013090 <sys_timeout>
  }
}
 8012ef8:	bf00      	nop
 8012efa:	bd80      	pop	{r7, pc}
 8012efc:	2000eb9c 	.word	0x2000eb9c
 8012f00:	2000eb50 	.word	0x2000eb50
 8012f04:	2000eb54 	.word	0x2000eb54
 8012f08:	08012e85 	.word	0x08012e85

08012f0c <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8012f0c:	b580      	push	{r7, lr}
 8012f0e:	b086      	sub	sp, #24
 8012f10:	af00      	add	r7, sp, #0
 8012f12:	60f8      	str	r0, [r7, #12]
 8012f14:	60b9      	str	r1, [r7, #8]
 8012f16:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8012f18:	200a      	movs	r0, #10
 8012f1a:	f7f8 fd73 	bl	800ba04 <memp_malloc>
 8012f1e:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8012f20:	693b      	ldr	r3, [r7, #16]
 8012f22:	2b00      	cmp	r3, #0
 8012f24:	d109      	bne.n	8012f3a <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8012f26:	693b      	ldr	r3, [r7, #16]
 8012f28:	2b00      	cmp	r3, #0
 8012f2a:	d151      	bne.n	8012fd0 <sys_timeout_abs+0xc4>
 8012f2c:	4b2a      	ldr	r3, [pc, #168]	@ (8012fd8 <sys_timeout_abs+0xcc>)
 8012f2e:	22be      	movs	r2, #190	@ 0xbe
 8012f30:	492a      	ldr	r1, [pc, #168]	@ (8012fdc <sys_timeout_abs+0xd0>)
 8012f32:	482b      	ldr	r0, [pc, #172]	@ (8012fe0 <sys_timeout_abs+0xd4>)
 8012f34:	f003 f9ec 	bl	8016310 <iprintf>
    return;
 8012f38:	e04a      	b.n	8012fd0 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8012f3a:	693b      	ldr	r3, [r7, #16]
 8012f3c:	2200      	movs	r2, #0
 8012f3e:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8012f40:	693b      	ldr	r3, [r7, #16]
 8012f42:	68ba      	ldr	r2, [r7, #8]
 8012f44:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8012f46:	693b      	ldr	r3, [r7, #16]
 8012f48:	687a      	ldr	r2, [r7, #4]
 8012f4a:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8012f4c:	693b      	ldr	r3, [r7, #16]
 8012f4e:	68fa      	ldr	r2, [r7, #12]
 8012f50:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8012f52:	4b24      	ldr	r3, [pc, #144]	@ (8012fe4 <sys_timeout_abs+0xd8>)
 8012f54:	681b      	ldr	r3, [r3, #0]
 8012f56:	2b00      	cmp	r3, #0
 8012f58:	d103      	bne.n	8012f62 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8012f5a:	4a22      	ldr	r2, [pc, #136]	@ (8012fe4 <sys_timeout_abs+0xd8>)
 8012f5c:	693b      	ldr	r3, [r7, #16]
 8012f5e:	6013      	str	r3, [r2, #0]
    return;
 8012f60:	e037      	b.n	8012fd2 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8012f62:	693b      	ldr	r3, [r7, #16]
 8012f64:	685a      	ldr	r2, [r3, #4]
 8012f66:	4b1f      	ldr	r3, [pc, #124]	@ (8012fe4 <sys_timeout_abs+0xd8>)
 8012f68:	681b      	ldr	r3, [r3, #0]
 8012f6a:	685b      	ldr	r3, [r3, #4]
 8012f6c:	1ad3      	subs	r3, r2, r3
 8012f6e:	0fdb      	lsrs	r3, r3, #31
 8012f70:	f003 0301 	and.w	r3, r3, #1
 8012f74:	b2db      	uxtb	r3, r3
 8012f76:	2b00      	cmp	r3, #0
 8012f78:	d007      	beq.n	8012f8a <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8012f7a:	4b1a      	ldr	r3, [pc, #104]	@ (8012fe4 <sys_timeout_abs+0xd8>)
 8012f7c:	681a      	ldr	r2, [r3, #0]
 8012f7e:	693b      	ldr	r3, [r7, #16]
 8012f80:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8012f82:	4a18      	ldr	r2, [pc, #96]	@ (8012fe4 <sys_timeout_abs+0xd8>)
 8012f84:	693b      	ldr	r3, [r7, #16]
 8012f86:	6013      	str	r3, [r2, #0]
 8012f88:	e023      	b.n	8012fd2 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8012f8a:	4b16      	ldr	r3, [pc, #88]	@ (8012fe4 <sys_timeout_abs+0xd8>)
 8012f8c:	681b      	ldr	r3, [r3, #0]
 8012f8e:	617b      	str	r3, [r7, #20]
 8012f90:	e01a      	b.n	8012fc8 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8012f92:	697b      	ldr	r3, [r7, #20]
 8012f94:	681b      	ldr	r3, [r3, #0]
 8012f96:	2b00      	cmp	r3, #0
 8012f98:	d00b      	beq.n	8012fb2 <sys_timeout_abs+0xa6>
 8012f9a:	693b      	ldr	r3, [r7, #16]
 8012f9c:	685a      	ldr	r2, [r3, #4]
 8012f9e:	697b      	ldr	r3, [r7, #20]
 8012fa0:	681b      	ldr	r3, [r3, #0]
 8012fa2:	685b      	ldr	r3, [r3, #4]
 8012fa4:	1ad3      	subs	r3, r2, r3
 8012fa6:	0fdb      	lsrs	r3, r3, #31
 8012fa8:	f003 0301 	and.w	r3, r3, #1
 8012fac:	b2db      	uxtb	r3, r3
 8012fae:	2b00      	cmp	r3, #0
 8012fb0:	d007      	beq.n	8012fc2 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8012fb2:	697b      	ldr	r3, [r7, #20]
 8012fb4:	681a      	ldr	r2, [r3, #0]
 8012fb6:	693b      	ldr	r3, [r7, #16]
 8012fb8:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8012fba:	697b      	ldr	r3, [r7, #20]
 8012fbc:	693a      	ldr	r2, [r7, #16]
 8012fbe:	601a      	str	r2, [r3, #0]
        break;
 8012fc0:	e007      	b.n	8012fd2 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8012fc2:	697b      	ldr	r3, [r7, #20]
 8012fc4:	681b      	ldr	r3, [r3, #0]
 8012fc6:	617b      	str	r3, [r7, #20]
 8012fc8:	697b      	ldr	r3, [r7, #20]
 8012fca:	2b00      	cmp	r3, #0
 8012fcc:	d1e1      	bne.n	8012f92 <sys_timeout_abs+0x86>
 8012fce:	e000      	b.n	8012fd2 <sys_timeout_abs+0xc6>
    return;
 8012fd0:	bf00      	nop
      }
    }
  }
}
 8012fd2:	3718      	adds	r7, #24
 8012fd4:	46bd      	mov	sp, r7
 8012fd6:	bd80      	pop	{r7, pc}
 8012fd8:	0801a25c 	.word	0x0801a25c
 8012fdc:	0801a290 	.word	0x0801a290
 8012fe0:	0801a2d0 	.word	0x0801a2d0
 8012fe4:	2000eb94 	.word	0x2000eb94

08012fe8 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8012fe8:	b580      	push	{r7, lr}
 8012fea:	b086      	sub	sp, #24
 8012fec:	af00      	add	r7, sp, #0
 8012fee:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8012ff0:	687b      	ldr	r3, [r7, #4]
 8012ff2:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8012ff4:	697b      	ldr	r3, [r7, #20]
 8012ff6:	685b      	ldr	r3, [r3, #4]
 8012ff8:	4798      	blx	r3

  now = sys_now();
 8012ffa:	f7f2 fad3 	bl	80055a4 <sys_now>
 8012ffe:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8013000:	697b      	ldr	r3, [r7, #20]
 8013002:	681a      	ldr	r2, [r3, #0]
 8013004:	4b0f      	ldr	r3, [pc, #60]	@ (8013044 <lwip_cyclic_timer+0x5c>)
 8013006:	681b      	ldr	r3, [r3, #0]
 8013008:	4413      	add	r3, r2
 801300a:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 801300c:	68fa      	ldr	r2, [r7, #12]
 801300e:	693b      	ldr	r3, [r7, #16]
 8013010:	1ad3      	subs	r3, r2, r3
 8013012:	0fdb      	lsrs	r3, r3, #31
 8013014:	f003 0301 	and.w	r3, r3, #1
 8013018:	b2db      	uxtb	r3, r3
 801301a:	2b00      	cmp	r3, #0
 801301c:	d009      	beq.n	8013032 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801301e:	697b      	ldr	r3, [r7, #20]
 8013020:	681a      	ldr	r2, [r3, #0]
 8013022:	693b      	ldr	r3, [r7, #16]
 8013024:	4413      	add	r3, r2
 8013026:	687a      	ldr	r2, [r7, #4]
 8013028:	4907      	ldr	r1, [pc, #28]	@ (8013048 <lwip_cyclic_timer+0x60>)
 801302a:	4618      	mov	r0, r3
 801302c:	f7ff ff6e 	bl	8012f0c <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8013030:	e004      	b.n	801303c <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8013032:	687a      	ldr	r2, [r7, #4]
 8013034:	4904      	ldr	r1, [pc, #16]	@ (8013048 <lwip_cyclic_timer+0x60>)
 8013036:	68f8      	ldr	r0, [r7, #12]
 8013038:	f7ff ff68 	bl	8012f0c <sys_timeout_abs>
}
 801303c:	bf00      	nop
 801303e:	3718      	adds	r7, #24
 8013040:	46bd      	mov	sp, r7
 8013042:	bd80      	pop	{r7, pc}
 8013044:	2000eb98 	.word	0x2000eb98
 8013048:	08012fe9 	.word	0x08012fe9

0801304c <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 801304c:	b580      	push	{r7, lr}
 801304e:	b082      	sub	sp, #8
 8013050:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8013052:	2301      	movs	r3, #1
 8013054:	607b      	str	r3, [r7, #4]
 8013056:	e00e      	b.n	8013076 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8013058:	4a0b      	ldr	r2, [pc, #44]	@ (8013088 <sys_timeouts_init+0x3c>)
 801305a:	687b      	ldr	r3, [r7, #4]
 801305c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8013060:	687b      	ldr	r3, [r7, #4]
 8013062:	00db      	lsls	r3, r3, #3
 8013064:	4a08      	ldr	r2, [pc, #32]	@ (8013088 <sys_timeouts_init+0x3c>)
 8013066:	4413      	add	r3, r2
 8013068:	461a      	mov	r2, r3
 801306a:	4908      	ldr	r1, [pc, #32]	@ (801308c <sys_timeouts_init+0x40>)
 801306c:	f000 f810 	bl	8013090 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8013070:	687b      	ldr	r3, [r7, #4]
 8013072:	3301      	adds	r3, #1
 8013074:	607b      	str	r3, [r7, #4]
 8013076:	687b      	ldr	r3, [r7, #4]
 8013078:	2b02      	cmp	r3, #2
 801307a:	d9ed      	bls.n	8013058 <sys_timeouts_init+0xc>
  }
}
 801307c:	bf00      	nop
 801307e:	bf00      	nop
 8013080:	3708      	adds	r7, #8
 8013082:	46bd      	mov	sp, r7
 8013084:	bd80      	pop	{r7, pc}
 8013086:	bf00      	nop
 8013088:	0801ae8c 	.word	0x0801ae8c
 801308c:	08012fe9 	.word	0x08012fe9

08013090 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8013090:	b580      	push	{r7, lr}
 8013092:	b086      	sub	sp, #24
 8013094:	af00      	add	r7, sp, #0
 8013096:	60f8      	str	r0, [r7, #12]
 8013098:	60b9      	str	r1, [r7, #8]
 801309a:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 801309c:	68fb      	ldr	r3, [r7, #12]
 801309e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80130a2:	d306      	bcc.n	80130b2 <sys_timeout+0x22>
 80130a4:	4b0a      	ldr	r3, [pc, #40]	@ (80130d0 <sys_timeout+0x40>)
 80130a6:	f240 1229 	movw	r2, #297	@ 0x129
 80130aa:	490a      	ldr	r1, [pc, #40]	@ (80130d4 <sys_timeout+0x44>)
 80130ac:	480a      	ldr	r0, [pc, #40]	@ (80130d8 <sys_timeout+0x48>)
 80130ae:	f003 f92f 	bl	8016310 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 80130b2:	f7f2 fa77 	bl	80055a4 <sys_now>
 80130b6:	4602      	mov	r2, r0
 80130b8:	68fb      	ldr	r3, [r7, #12]
 80130ba:	4413      	add	r3, r2
 80130bc:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 80130be:	687a      	ldr	r2, [r7, #4]
 80130c0:	68b9      	ldr	r1, [r7, #8]
 80130c2:	6978      	ldr	r0, [r7, #20]
 80130c4:	f7ff ff22 	bl	8012f0c <sys_timeout_abs>
#endif
}
 80130c8:	bf00      	nop
 80130ca:	3718      	adds	r7, #24
 80130cc:	46bd      	mov	sp, r7
 80130ce:	bd80      	pop	{r7, pc}
 80130d0:	0801a25c 	.word	0x0801a25c
 80130d4:	0801a2f8 	.word	0x0801a2f8
 80130d8:	0801a2d0 	.word	0x0801a2d0

080130dc <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 80130dc:	b580      	push	{r7, lr}
 80130de:	b084      	sub	sp, #16
 80130e0:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 80130e2:	f7f2 fa5f 	bl	80055a4 <sys_now>
 80130e6:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 80130e8:	4b17      	ldr	r3, [pc, #92]	@ (8013148 <sys_check_timeouts+0x6c>)
 80130ea:	681b      	ldr	r3, [r3, #0]
 80130ec:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 80130ee:	68bb      	ldr	r3, [r7, #8]
 80130f0:	2b00      	cmp	r3, #0
 80130f2:	d022      	beq.n	801313a <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 80130f4:	68bb      	ldr	r3, [r7, #8]
 80130f6:	685b      	ldr	r3, [r3, #4]
 80130f8:	68fa      	ldr	r2, [r7, #12]
 80130fa:	1ad3      	subs	r3, r2, r3
 80130fc:	0fdb      	lsrs	r3, r3, #31
 80130fe:	f003 0301 	and.w	r3, r3, #1
 8013102:	b2db      	uxtb	r3, r3
 8013104:	2b00      	cmp	r3, #0
 8013106:	d11a      	bne.n	801313e <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8013108:	68bb      	ldr	r3, [r7, #8]
 801310a:	681b      	ldr	r3, [r3, #0]
 801310c:	4a0e      	ldr	r2, [pc, #56]	@ (8013148 <sys_check_timeouts+0x6c>)
 801310e:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8013110:	68bb      	ldr	r3, [r7, #8]
 8013112:	689b      	ldr	r3, [r3, #8]
 8013114:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8013116:	68bb      	ldr	r3, [r7, #8]
 8013118:	68db      	ldr	r3, [r3, #12]
 801311a:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 801311c:	68bb      	ldr	r3, [r7, #8]
 801311e:	685b      	ldr	r3, [r3, #4]
 8013120:	4a0a      	ldr	r2, [pc, #40]	@ (801314c <sys_check_timeouts+0x70>)
 8013122:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8013124:	68b9      	ldr	r1, [r7, #8]
 8013126:	200a      	movs	r0, #10
 8013128:	f7f8 fce2 	bl	800baf0 <memp_free>
    if (handler != NULL) {
 801312c:	687b      	ldr	r3, [r7, #4]
 801312e:	2b00      	cmp	r3, #0
 8013130:	d0da      	beq.n	80130e8 <sys_check_timeouts+0xc>
      handler(arg);
 8013132:	687b      	ldr	r3, [r7, #4]
 8013134:	6838      	ldr	r0, [r7, #0]
 8013136:	4798      	blx	r3
  do {
 8013138:	e7d6      	b.n	80130e8 <sys_check_timeouts+0xc>
      return;
 801313a:	bf00      	nop
 801313c:	e000      	b.n	8013140 <sys_check_timeouts+0x64>
      return;
 801313e:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8013140:	3710      	adds	r7, #16
 8013142:	46bd      	mov	sp, r7
 8013144:	bd80      	pop	{r7, pc}
 8013146:	bf00      	nop
 8013148:	2000eb94 	.word	0x2000eb94
 801314c:	2000eb98 	.word	0x2000eb98

08013150 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8013150:	b580      	push	{r7, lr}
 8013152:	b082      	sub	sp, #8
 8013154:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8013156:	4b16      	ldr	r3, [pc, #88]	@ (80131b0 <sys_timeouts_sleeptime+0x60>)
 8013158:	681b      	ldr	r3, [r3, #0]
 801315a:	2b00      	cmp	r3, #0
 801315c:	d102      	bne.n	8013164 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 801315e:	f04f 33ff 	mov.w	r3, #4294967295
 8013162:	e020      	b.n	80131a6 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8013164:	f7f2 fa1e 	bl	80055a4 <sys_now>
 8013168:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 801316a:	4b11      	ldr	r3, [pc, #68]	@ (80131b0 <sys_timeouts_sleeptime+0x60>)
 801316c:	681b      	ldr	r3, [r3, #0]
 801316e:	685a      	ldr	r2, [r3, #4]
 8013170:	687b      	ldr	r3, [r7, #4]
 8013172:	1ad3      	subs	r3, r2, r3
 8013174:	0fdb      	lsrs	r3, r3, #31
 8013176:	f003 0301 	and.w	r3, r3, #1
 801317a:	b2db      	uxtb	r3, r3
 801317c:	2b00      	cmp	r3, #0
 801317e:	d001      	beq.n	8013184 <sys_timeouts_sleeptime+0x34>
    return 0;
 8013180:	2300      	movs	r3, #0
 8013182:	e010      	b.n	80131a6 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8013184:	4b0a      	ldr	r3, [pc, #40]	@ (80131b0 <sys_timeouts_sleeptime+0x60>)
 8013186:	681b      	ldr	r3, [r3, #0]
 8013188:	685a      	ldr	r2, [r3, #4]
 801318a:	687b      	ldr	r3, [r7, #4]
 801318c:	1ad3      	subs	r3, r2, r3
 801318e:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8013190:	683b      	ldr	r3, [r7, #0]
 8013192:	2b00      	cmp	r3, #0
 8013194:	da06      	bge.n	80131a4 <sys_timeouts_sleeptime+0x54>
 8013196:	4b07      	ldr	r3, [pc, #28]	@ (80131b4 <sys_timeouts_sleeptime+0x64>)
 8013198:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 801319c:	4906      	ldr	r1, [pc, #24]	@ (80131b8 <sys_timeouts_sleeptime+0x68>)
 801319e:	4807      	ldr	r0, [pc, #28]	@ (80131bc <sys_timeouts_sleeptime+0x6c>)
 80131a0:	f003 f8b6 	bl	8016310 <iprintf>
    return ret;
 80131a4:	683b      	ldr	r3, [r7, #0]
  }
}
 80131a6:	4618      	mov	r0, r3
 80131a8:	3708      	adds	r7, #8
 80131aa:	46bd      	mov	sp, r7
 80131ac:	bd80      	pop	{r7, pc}
 80131ae:	bf00      	nop
 80131b0:	2000eb94 	.word	0x2000eb94
 80131b4:	0801a25c 	.word	0x0801a25c
 80131b8:	0801a330 	.word	0x0801a330
 80131bc:	0801a2d0 	.word	0x0801a2d0

080131c0 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 80131c0:	b580      	push	{r7, lr}
 80131c2:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80131c4:	f002 ffa4 	bl	8016110 <rand>
 80131c8:	4603      	mov	r3, r0
 80131ca:	b29b      	uxth	r3, r3
 80131cc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80131d0:	b29b      	uxth	r3, r3
 80131d2:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 80131d6:	b29a      	uxth	r2, r3
 80131d8:	4b01      	ldr	r3, [pc, #4]	@ (80131e0 <udp_init+0x20>)
 80131da:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80131dc:	bf00      	nop
 80131de:	bd80      	pop	{r7, pc}
 80131e0:	2000012c 	.word	0x2000012c

080131e4 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 80131e4:	b480      	push	{r7}
 80131e6:	b083      	sub	sp, #12
 80131e8:	af00      	add	r7, sp, #0
  u16_t n = 0;
 80131ea:	2300      	movs	r3, #0
 80131ec:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 80131ee:	4b17      	ldr	r3, [pc, #92]	@ (801324c <udp_new_port+0x68>)
 80131f0:	881b      	ldrh	r3, [r3, #0]
 80131f2:	1c5a      	adds	r2, r3, #1
 80131f4:	b291      	uxth	r1, r2
 80131f6:	4a15      	ldr	r2, [pc, #84]	@ (801324c <udp_new_port+0x68>)
 80131f8:	8011      	strh	r1, [r2, #0]
 80131fa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80131fe:	4293      	cmp	r3, r2
 8013200:	d103      	bne.n	801320a <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8013202:	4b12      	ldr	r3, [pc, #72]	@ (801324c <udp_new_port+0x68>)
 8013204:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8013208:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801320a:	4b11      	ldr	r3, [pc, #68]	@ (8013250 <udp_new_port+0x6c>)
 801320c:	681b      	ldr	r3, [r3, #0]
 801320e:	603b      	str	r3, [r7, #0]
 8013210:	e011      	b.n	8013236 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8013212:	683b      	ldr	r3, [r7, #0]
 8013214:	8a5a      	ldrh	r2, [r3, #18]
 8013216:	4b0d      	ldr	r3, [pc, #52]	@ (801324c <udp_new_port+0x68>)
 8013218:	881b      	ldrh	r3, [r3, #0]
 801321a:	429a      	cmp	r2, r3
 801321c:	d108      	bne.n	8013230 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801321e:	88fb      	ldrh	r3, [r7, #6]
 8013220:	3301      	adds	r3, #1
 8013222:	80fb      	strh	r3, [r7, #6]
 8013224:	88fb      	ldrh	r3, [r7, #6]
 8013226:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801322a:	d3e0      	bcc.n	80131ee <udp_new_port+0xa>
        return 0;
 801322c:	2300      	movs	r3, #0
 801322e:	e007      	b.n	8013240 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013230:	683b      	ldr	r3, [r7, #0]
 8013232:	68db      	ldr	r3, [r3, #12]
 8013234:	603b      	str	r3, [r7, #0]
 8013236:	683b      	ldr	r3, [r7, #0]
 8013238:	2b00      	cmp	r3, #0
 801323a:	d1ea      	bne.n	8013212 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 801323c:	4b03      	ldr	r3, [pc, #12]	@ (801324c <udp_new_port+0x68>)
 801323e:	881b      	ldrh	r3, [r3, #0]
}
 8013240:	4618      	mov	r0, r3
 8013242:	370c      	adds	r7, #12
 8013244:	46bd      	mov	sp, r7
 8013246:	f85d 7b04 	ldr.w	r7, [sp], #4
 801324a:	4770      	bx	lr
 801324c:	2000012c 	.word	0x2000012c
 8013250:	2000eba0 	.word	0x2000eba0

08013254 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8013254:	b580      	push	{r7, lr}
 8013256:	b084      	sub	sp, #16
 8013258:	af00      	add	r7, sp, #0
 801325a:	60f8      	str	r0, [r7, #12]
 801325c:	60b9      	str	r1, [r7, #8]
 801325e:	4613      	mov	r3, r2
 8013260:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8013262:	68fb      	ldr	r3, [r7, #12]
 8013264:	2b00      	cmp	r3, #0
 8013266:	d105      	bne.n	8013274 <udp_input_local_match+0x20>
 8013268:	4b27      	ldr	r3, [pc, #156]	@ (8013308 <udp_input_local_match+0xb4>)
 801326a:	2287      	movs	r2, #135	@ 0x87
 801326c:	4927      	ldr	r1, [pc, #156]	@ (801330c <udp_input_local_match+0xb8>)
 801326e:	4828      	ldr	r0, [pc, #160]	@ (8013310 <udp_input_local_match+0xbc>)
 8013270:	f003 f84e 	bl	8016310 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8013274:	68bb      	ldr	r3, [r7, #8]
 8013276:	2b00      	cmp	r3, #0
 8013278:	d105      	bne.n	8013286 <udp_input_local_match+0x32>
 801327a:	4b23      	ldr	r3, [pc, #140]	@ (8013308 <udp_input_local_match+0xb4>)
 801327c:	2288      	movs	r2, #136	@ 0x88
 801327e:	4925      	ldr	r1, [pc, #148]	@ (8013314 <udp_input_local_match+0xc0>)
 8013280:	4823      	ldr	r0, [pc, #140]	@ (8013310 <udp_input_local_match+0xbc>)
 8013282:	f003 f845 	bl	8016310 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013286:	68fb      	ldr	r3, [r7, #12]
 8013288:	7a1b      	ldrb	r3, [r3, #8]
 801328a:	2b00      	cmp	r3, #0
 801328c:	d00b      	beq.n	80132a6 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801328e:	68fb      	ldr	r3, [r7, #12]
 8013290:	7a1a      	ldrb	r2, [r3, #8]
 8013292:	4b21      	ldr	r3, [pc, #132]	@ (8013318 <udp_input_local_match+0xc4>)
 8013294:	685b      	ldr	r3, [r3, #4]
 8013296:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801329a:	3301      	adds	r3, #1
 801329c:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801329e:	429a      	cmp	r2, r3
 80132a0:	d001      	beq.n	80132a6 <udp_input_local_match+0x52>
    return 0;
 80132a2:	2300      	movs	r3, #0
 80132a4:	e02b      	b.n	80132fe <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 80132a6:	79fb      	ldrb	r3, [r7, #7]
 80132a8:	2b00      	cmp	r3, #0
 80132aa:	d018      	beq.n	80132de <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80132ac:	68fb      	ldr	r3, [r7, #12]
 80132ae:	2b00      	cmp	r3, #0
 80132b0:	d013      	beq.n	80132da <udp_input_local_match+0x86>
 80132b2:	68fb      	ldr	r3, [r7, #12]
 80132b4:	681b      	ldr	r3, [r3, #0]
 80132b6:	2b00      	cmp	r3, #0
 80132b8:	d00f      	beq.n	80132da <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80132ba:	4b17      	ldr	r3, [pc, #92]	@ (8013318 <udp_input_local_match+0xc4>)
 80132bc:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80132be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80132c2:	d00a      	beq.n	80132da <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 80132c4:	68fb      	ldr	r3, [r7, #12]
 80132c6:	681a      	ldr	r2, [r3, #0]
 80132c8:	4b13      	ldr	r3, [pc, #76]	@ (8013318 <udp_input_local_match+0xc4>)
 80132ca:	695b      	ldr	r3, [r3, #20]
 80132cc:	405a      	eors	r2, r3
 80132ce:	68bb      	ldr	r3, [r7, #8]
 80132d0:	3308      	adds	r3, #8
 80132d2:	681b      	ldr	r3, [r3, #0]
 80132d4:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80132d6:	2b00      	cmp	r3, #0
 80132d8:	d110      	bne.n	80132fc <udp_input_local_match+0xa8>
          return 1;
 80132da:	2301      	movs	r3, #1
 80132dc:	e00f      	b.n	80132fe <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80132de:	68fb      	ldr	r3, [r7, #12]
 80132e0:	2b00      	cmp	r3, #0
 80132e2:	d009      	beq.n	80132f8 <udp_input_local_match+0xa4>
 80132e4:	68fb      	ldr	r3, [r7, #12]
 80132e6:	681b      	ldr	r3, [r3, #0]
 80132e8:	2b00      	cmp	r3, #0
 80132ea:	d005      	beq.n	80132f8 <udp_input_local_match+0xa4>
 80132ec:	68fb      	ldr	r3, [r7, #12]
 80132ee:	681a      	ldr	r2, [r3, #0]
 80132f0:	4b09      	ldr	r3, [pc, #36]	@ (8013318 <udp_input_local_match+0xc4>)
 80132f2:	695b      	ldr	r3, [r3, #20]
 80132f4:	429a      	cmp	r2, r3
 80132f6:	d101      	bne.n	80132fc <udp_input_local_match+0xa8>
        return 1;
 80132f8:	2301      	movs	r3, #1
 80132fa:	e000      	b.n	80132fe <udp_input_local_match+0xaa>
      }
  }

  return 0;
 80132fc:	2300      	movs	r3, #0
}
 80132fe:	4618      	mov	r0, r3
 8013300:	3710      	adds	r7, #16
 8013302:	46bd      	mov	sp, r7
 8013304:	bd80      	pop	{r7, pc}
 8013306:	bf00      	nop
 8013308:	0801a344 	.word	0x0801a344
 801330c:	0801a374 	.word	0x0801a374
 8013310:	0801a398 	.word	0x0801a398
 8013314:	0801a3c0 	.word	0x0801a3c0
 8013318:	200091f8 	.word	0x200091f8

0801331c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 801331c:	b590      	push	{r4, r7, lr}
 801331e:	b08d      	sub	sp, #52	@ 0x34
 8013320:	af02      	add	r7, sp, #8
 8013322:	6078      	str	r0, [r7, #4]
 8013324:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8013326:	2300      	movs	r3, #0
 8013328:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801332a:	687b      	ldr	r3, [r7, #4]
 801332c:	2b00      	cmp	r3, #0
 801332e:	d105      	bne.n	801333c <udp_input+0x20>
 8013330:	4b7c      	ldr	r3, [pc, #496]	@ (8013524 <udp_input+0x208>)
 8013332:	22cf      	movs	r2, #207	@ 0xcf
 8013334:	497c      	ldr	r1, [pc, #496]	@ (8013528 <udp_input+0x20c>)
 8013336:	487d      	ldr	r0, [pc, #500]	@ (801352c <udp_input+0x210>)
 8013338:	f002 ffea 	bl	8016310 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 801333c:	683b      	ldr	r3, [r7, #0]
 801333e:	2b00      	cmp	r3, #0
 8013340:	d105      	bne.n	801334e <udp_input+0x32>
 8013342:	4b78      	ldr	r3, [pc, #480]	@ (8013524 <udp_input+0x208>)
 8013344:	22d0      	movs	r2, #208	@ 0xd0
 8013346:	497a      	ldr	r1, [pc, #488]	@ (8013530 <udp_input+0x214>)
 8013348:	4878      	ldr	r0, [pc, #480]	@ (801352c <udp_input+0x210>)
 801334a:	f002 ffe1 	bl	8016310 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801334e:	687b      	ldr	r3, [r7, #4]
 8013350:	895b      	ldrh	r3, [r3, #10]
 8013352:	2b07      	cmp	r3, #7
 8013354:	d803      	bhi.n	801335e <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8013356:	6878      	ldr	r0, [r7, #4]
 8013358:	f7f9 fa6e 	bl	800c838 <pbuf_free>
    goto end;
 801335c:	e0de      	b.n	801351c <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801335e:	687b      	ldr	r3, [r7, #4]
 8013360:	685b      	ldr	r3, [r3, #4]
 8013362:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8013364:	4b73      	ldr	r3, [pc, #460]	@ (8013534 <udp_input+0x218>)
 8013366:	695b      	ldr	r3, [r3, #20]
 8013368:	4a72      	ldr	r2, [pc, #456]	@ (8013534 <udp_input+0x218>)
 801336a:	6812      	ldr	r2, [r2, #0]
 801336c:	4611      	mov	r1, r2
 801336e:	4618      	mov	r0, r3
 8013370:	f001 fd96 	bl	8014ea0 <ip4_addr_isbroadcast_u32>
 8013374:	4603      	mov	r3, r0
 8013376:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8013378:	697b      	ldr	r3, [r7, #20]
 801337a:	881b      	ldrh	r3, [r3, #0]
 801337c:	b29b      	uxth	r3, r3
 801337e:	4618      	mov	r0, r3
 8013380:	f7f7 fe68 	bl	800b054 <lwip_htons>
 8013384:	4603      	mov	r3, r0
 8013386:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8013388:	697b      	ldr	r3, [r7, #20]
 801338a:	885b      	ldrh	r3, [r3, #2]
 801338c:	b29b      	uxth	r3, r3
 801338e:	4618      	mov	r0, r3
 8013390:	f7f7 fe60 	bl	800b054 <lwip_htons>
 8013394:	4603      	mov	r3, r0
 8013396:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8013398:	2300      	movs	r3, #0
 801339a:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 801339c:	2300      	movs	r3, #0
 801339e:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 80133a0:	2300      	movs	r3, #0
 80133a2:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80133a4:	4b64      	ldr	r3, [pc, #400]	@ (8013538 <udp_input+0x21c>)
 80133a6:	681b      	ldr	r3, [r3, #0]
 80133a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80133aa:	e054      	b.n	8013456 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 80133ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80133ae:	8a5b      	ldrh	r3, [r3, #18]
 80133b0:	89fa      	ldrh	r2, [r7, #14]
 80133b2:	429a      	cmp	r2, r3
 80133b4:	d14a      	bne.n	801344c <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 80133b6:	7cfb      	ldrb	r3, [r7, #19]
 80133b8:	461a      	mov	r2, r3
 80133ba:	6839      	ldr	r1, [r7, #0]
 80133bc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80133be:	f7ff ff49 	bl	8013254 <udp_input_local_match>
 80133c2:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 80133c4:	2b00      	cmp	r3, #0
 80133c6:	d041      	beq.n	801344c <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 80133c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80133ca:	7c1b      	ldrb	r3, [r3, #16]
 80133cc:	f003 0304 	and.w	r3, r3, #4
 80133d0:	2b00      	cmp	r3, #0
 80133d2:	d11d      	bne.n	8013410 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 80133d4:	69fb      	ldr	r3, [r7, #28]
 80133d6:	2b00      	cmp	r3, #0
 80133d8:	d102      	bne.n	80133e0 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 80133da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80133dc:	61fb      	str	r3, [r7, #28]
 80133de:	e017      	b.n	8013410 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 80133e0:	7cfb      	ldrb	r3, [r7, #19]
 80133e2:	2b00      	cmp	r3, #0
 80133e4:	d014      	beq.n	8013410 <udp_input+0xf4>
 80133e6:	4b53      	ldr	r3, [pc, #332]	@ (8013534 <udp_input+0x218>)
 80133e8:	695b      	ldr	r3, [r3, #20]
 80133ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80133ee:	d10f      	bne.n	8013410 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 80133f0:	69fb      	ldr	r3, [r7, #28]
 80133f2:	681a      	ldr	r2, [r3, #0]
 80133f4:	683b      	ldr	r3, [r7, #0]
 80133f6:	3304      	adds	r3, #4
 80133f8:	681b      	ldr	r3, [r3, #0]
 80133fa:	429a      	cmp	r2, r3
 80133fc:	d008      	beq.n	8013410 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 80133fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013400:	681a      	ldr	r2, [r3, #0]
 8013402:	683b      	ldr	r3, [r7, #0]
 8013404:	3304      	adds	r3, #4
 8013406:	681b      	ldr	r3, [r3, #0]
 8013408:	429a      	cmp	r2, r3
 801340a:	d101      	bne.n	8013410 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 801340c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801340e:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8013410:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013412:	8a9b      	ldrh	r3, [r3, #20]
 8013414:	8a3a      	ldrh	r2, [r7, #16]
 8013416:	429a      	cmp	r2, r3
 8013418:	d118      	bne.n	801344c <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801341a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801341c:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801341e:	2b00      	cmp	r3, #0
 8013420:	d005      	beq.n	801342e <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8013422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013424:	685a      	ldr	r2, [r3, #4]
 8013426:	4b43      	ldr	r3, [pc, #268]	@ (8013534 <udp_input+0x218>)
 8013428:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801342a:	429a      	cmp	r2, r3
 801342c:	d10e      	bne.n	801344c <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801342e:	6a3b      	ldr	r3, [r7, #32]
 8013430:	2b00      	cmp	r3, #0
 8013432:	d014      	beq.n	801345e <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8013434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013436:	68da      	ldr	r2, [r3, #12]
 8013438:	6a3b      	ldr	r3, [r7, #32]
 801343a:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 801343c:	4b3e      	ldr	r3, [pc, #248]	@ (8013538 <udp_input+0x21c>)
 801343e:	681a      	ldr	r2, [r3, #0]
 8013440:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013442:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8013444:	4a3c      	ldr	r2, [pc, #240]	@ (8013538 <udp_input+0x21c>)
 8013446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013448:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801344a:	e008      	b.n	801345e <udp_input+0x142>
      }
    }

    prev = pcb;
 801344c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801344e:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013450:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013452:	68db      	ldr	r3, [r3, #12]
 8013454:	627b      	str	r3, [r7, #36]	@ 0x24
 8013456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013458:	2b00      	cmp	r3, #0
 801345a:	d1a7      	bne.n	80133ac <udp_input+0x90>
 801345c:	e000      	b.n	8013460 <udp_input+0x144>
        break;
 801345e:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8013460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013462:	2b00      	cmp	r3, #0
 8013464:	d101      	bne.n	801346a <udp_input+0x14e>
    pcb = uncon_pcb;
 8013466:	69fb      	ldr	r3, [r7, #28]
 8013468:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801346a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801346c:	2b00      	cmp	r3, #0
 801346e:	d002      	beq.n	8013476 <udp_input+0x15a>
    for_us = 1;
 8013470:	2301      	movs	r3, #1
 8013472:	76fb      	strb	r3, [r7, #27]
 8013474:	e00a      	b.n	801348c <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8013476:	683b      	ldr	r3, [r7, #0]
 8013478:	3304      	adds	r3, #4
 801347a:	681a      	ldr	r2, [r3, #0]
 801347c:	4b2d      	ldr	r3, [pc, #180]	@ (8013534 <udp_input+0x218>)
 801347e:	695b      	ldr	r3, [r3, #20]
 8013480:	429a      	cmp	r2, r3
 8013482:	bf0c      	ite	eq
 8013484:	2301      	moveq	r3, #1
 8013486:	2300      	movne	r3, #0
 8013488:	b2db      	uxtb	r3, r3
 801348a:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 801348c:	7efb      	ldrb	r3, [r7, #27]
 801348e:	2b00      	cmp	r3, #0
 8013490:	d041      	beq.n	8013516 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8013492:	2108      	movs	r1, #8
 8013494:	6878      	ldr	r0, [r7, #4]
 8013496:	f7f9 f949 	bl	800c72c <pbuf_remove_header>
 801349a:	4603      	mov	r3, r0
 801349c:	2b00      	cmp	r3, #0
 801349e:	d00a      	beq.n	80134b6 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 80134a0:	4b20      	ldr	r3, [pc, #128]	@ (8013524 <udp_input+0x208>)
 80134a2:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 80134a6:	4925      	ldr	r1, [pc, #148]	@ (801353c <udp_input+0x220>)
 80134a8:	4820      	ldr	r0, [pc, #128]	@ (801352c <udp_input+0x210>)
 80134aa:	f002 ff31 	bl	8016310 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 80134ae:	6878      	ldr	r0, [r7, #4]
 80134b0:	f7f9 f9c2 	bl	800c838 <pbuf_free>
      goto end;
 80134b4:	e032      	b.n	801351c <udp_input+0x200>
    }

    if (pcb != NULL) {
 80134b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80134b8:	2b00      	cmp	r3, #0
 80134ba:	d012      	beq.n	80134e2 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 80134bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80134be:	699b      	ldr	r3, [r3, #24]
 80134c0:	2b00      	cmp	r3, #0
 80134c2:	d00a      	beq.n	80134da <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 80134c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80134c6:	699c      	ldr	r4, [r3, #24]
 80134c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80134ca:	69d8      	ldr	r0, [r3, #28]
 80134cc:	8a3b      	ldrh	r3, [r7, #16]
 80134ce:	9300      	str	r3, [sp, #0]
 80134d0:	4b1b      	ldr	r3, [pc, #108]	@ (8013540 <udp_input+0x224>)
 80134d2:	687a      	ldr	r2, [r7, #4]
 80134d4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80134d6:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 80134d8:	e021      	b.n	801351e <udp_input+0x202>
        pbuf_free(p);
 80134da:	6878      	ldr	r0, [r7, #4]
 80134dc:	f7f9 f9ac 	bl	800c838 <pbuf_free>
        goto end;
 80134e0:	e01c      	b.n	801351c <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 80134e2:	7cfb      	ldrb	r3, [r7, #19]
 80134e4:	2b00      	cmp	r3, #0
 80134e6:	d112      	bne.n	801350e <udp_input+0x1f2>
 80134e8:	4b12      	ldr	r3, [pc, #72]	@ (8013534 <udp_input+0x218>)
 80134ea:	695b      	ldr	r3, [r3, #20]
 80134ec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80134f0:	2be0      	cmp	r3, #224	@ 0xe0
 80134f2:	d00c      	beq.n	801350e <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 80134f4:	4b0f      	ldr	r3, [pc, #60]	@ (8013534 <udp_input+0x218>)
 80134f6:	899b      	ldrh	r3, [r3, #12]
 80134f8:	3308      	adds	r3, #8
 80134fa:	b29b      	uxth	r3, r3
 80134fc:	b21b      	sxth	r3, r3
 80134fe:	4619      	mov	r1, r3
 8013500:	6878      	ldr	r0, [r7, #4]
 8013502:	f7f9 f986 	bl	800c812 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8013506:	2103      	movs	r1, #3
 8013508:	6878      	ldr	r0, [r7, #4]
 801350a:	f001 f9a9 	bl	8014860 <icmp_dest_unreach>
      pbuf_free(p);
 801350e:	6878      	ldr	r0, [r7, #4]
 8013510:	f7f9 f992 	bl	800c838 <pbuf_free>
  return;
 8013514:	e003      	b.n	801351e <udp_input+0x202>
    pbuf_free(p);
 8013516:	6878      	ldr	r0, [r7, #4]
 8013518:	f7f9 f98e 	bl	800c838 <pbuf_free>
  return;
 801351c:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801351e:	372c      	adds	r7, #44	@ 0x2c
 8013520:	46bd      	mov	sp, r7
 8013522:	bd90      	pop	{r4, r7, pc}
 8013524:	0801a344 	.word	0x0801a344
 8013528:	0801a3e8 	.word	0x0801a3e8
 801352c:	0801a398 	.word	0x0801a398
 8013530:	0801a400 	.word	0x0801a400
 8013534:	200091f8 	.word	0x200091f8
 8013538:	2000eba0 	.word	0x2000eba0
 801353c:	0801a41c 	.word	0x0801a41c
 8013540:	20009208 	.word	0x20009208

08013544 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8013544:	b580      	push	{r7, lr}
 8013546:	b086      	sub	sp, #24
 8013548:	af00      	add	r7, sp, #0
 801354a:	60f8      	str	r0, [r7, #12]
 801354c:	60b9      	str	r1, [r7, #8]
 801354e:	4613      	mov	r3, r2
 8013550:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8013552:	68bb      	ldr	r3, [r7, #8]
 8013554:	2b00      	cmp	r3, #0
 8013556:	d101      	bne.n	801355c <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8013558:	4b39      	ldr	r3, [pc, #228]	@ (8013640 <udp_bind+0xfc>)
 801355a:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801355c:	68fb      	ldr	r3, [r7, #12]
 801355e:	2b00      	cmp	r3, #0
 8013560:	d109      	bne.n	8013576 <udp_bind+0x32>
 8013562:	4b38      	ldr	r3, [pc, #224]	@ (8013644 <udp_bind+0x100>)
 8013564:	f240 32b7 	movw	r2, #951	@ 0x3b7
 8013568:	4937      	ldr	r1, [pc, #220]	@ (8013648 <udp_bind+0x104>)
 801356a:	4838      	ldr	r0, [pc, #224]	@ (801364c <udp_bind+0x108>)
 801356c:	f002 fed0 	bl	8016310 <iprintf>
 8013570:	f06f 030f 	mvn.w	r3, #15
 8013574:	e060      	b.n	8013638 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8013576:	2300      	movs	r3, #0
 8013578:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801357a:	4b35      	ldr	r3, [pc, #212]	@ (8013650 <udp_bind+0x10c>)
 801357c:	681b      	ldr	r3, [r3, #0]
 801357e:	617b      	str	r3, [r7, #20]
 8013580:	e009      	b.n	8013596 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8013582:	68fa      	ldr	r2, [r7, #12]
 8013584:	697b      	ldr	r3, [r7, #20]
 8013586:	429a      	cmp	r2, r3
 8013588:	d102      	bne.n	8013590 <udp_bind+0x4c>
      rebind = 1;
 801358a:	2301      	movs	r3, #1
 801358c:	74fb      	strb	r3, [r7, #19]
      break;
 801358e:	e005      	b.n	801359c <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013590:	697b      	ldr	r3, [r7, #20]
 8013592:	68db      	ldr	r3, [r3, #12]
 8013594:	617b      	str	r3, [r7, #20]
 8013596:	697b      	ldr	r3, [r7, #20]
 8013598:	2b00      	cmp	r3, #0
 801359a:	d1f2      	bne.n	8013582 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 801359c:	88fb      	ldrh	r3, [r7, #6]
 801359e:	2b00      	cmp	r3, #0
 80135a0:	d109      	bne.n	80135b6 <udp_bind+0x72>
    port = udp_new_port();
 80135a2:	f7ff fe1f 	bl	80131e4 <udp_new_port>
 80135a6:	4603      	mov	r3, r0
 80135a8:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 80135aa:	88fb      	ldrh	r3, [r7, #6]
 80135ac:	2b00      	cmp	r3, #0
 80135ae:	d12c      	bne.n	801360a <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 80135b0:	f06f 0307 	mvn.w	r3, #7
 80135b4:	e040      	b.n	8013638 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80135b6:	4b26      	ldr	r3, [pc, #152]	@ (8013650 <udp_bind+0x10c>)
 80135b8:	681b      	ldr	r3, [r3, #0]
 80135ba:	617b      	str	r3, [r7, #20]
 80135bc:	e022      	b.n	8013604 <udp_bind+0xc0>
      if (pcb != ipcb) {
 80135be:	68fa      	ldr	r2, [r7, #12]
 80135c0:	697b      	ldr	r3, [r7, #20]
 80135c2:	429a      	cmp	r2, r3
 80135c4:	d01b      	beq.n	80135fe <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 80135c6:	697b      	ldr	r3, [r7, #20]
 80135c8:	8a5b      	ldrh	r3, [r3, #18]
 80135ca:	88fa      	ldrh	r2, [r7, #6]
 80135cc:	429a      	cmp	r2, r3
 80135ce:	d116      	bne.n	80135fe <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80135d0:	697b      	ldr	r3, [r7, #20]
 80135d2:	681a      	ldr	r2, [r3, #0]
 80135d4:	68bb      	ldr	r3, [r7, #8]
 80135d6:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 80135d8:	429a      	cmp	r2, r3
 80135da:	d00d      	beq.n	80135f8 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80135dc:	68bb      	ldr	r3, [r7, #8]
 80135de:	2b00      	cmp	r3, #0
 80135e0:	d00a      	beq.n	80135f8 <udp_bind+0xb4>
 80135e2:	68bb      	ldr	r3, [r7, #8]
 80135e4:	681b      	ldr	r3, [r3, #0]
 80135e6:	2b00      	cmp	r3, #0
 80135e8:	d006      	beq.n	80135f8 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80135ea:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80135ec:	2b00      	cmp	r3, #0
 80135ee:	d003      	beq.n	80135f8 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80135f0:	697b      	ldr	r3, [r7, #20]
 80135f2:	681b      	ldr	r3, [r3, #0]
 80135f4:	2b00      	cmp	r3, #0
 80135f6:	d102      	bne.n	80135fe <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 80135f8:	f06f 0307 	mvn.w	r3, #7
 80135fc:	e01c      	b.n	8013638 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80135fe:	697b      	ldr	r3, [r7, #20]
 8013600:	68db      	ldr	r3, [r3, #12]
 8013602:	617b      	str	r3, [r7, #20]
 8013604:	697b      	ldr	r3, [r7, #20]
 8013606:	2b00      	cmp	r3, #0
 8013608:	d1d9      	bne.n	80135be <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801360a:	68bb      	ldr	r3, [r7, #8]
 801360c:	2b00      	cmp	r3, #0
 801360e:	d002      	beq.n	8013616 <udp_bind+0xd2>
 8013610:	68bb      	ldr	r3, [r7, #8]
 8013612:	681b      	ldr	r3, [r3, #0]
 8013614:	e000      	b.n	8013618 <udp_bind+0xd4>
 8013616:	2300      	movs	r3, #0
 8013618:	68fa      	ldr	r2, [r7, #12]
 801361a:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 801361c:	68fb      	ldr	r3, [r7, #12]
 801361e:	88fa      	ldrh	r2, [r7, #6]
 8013620:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8013622:	7cfb      	ldrb	r3, [r7, #19]
 8013624:	2b00      	cmp	r3, #0
 8013626:	d106      	bne.n	8013636 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8013628:	4b09      	ldr	r3, [pc, #36]	@ (8013650 <udp_bind+0x10c>)
 801362a:	681a      	ldr	r2, [r3, #0]
 801362c:	68fb      	ldr	r3, [r7, #12]
 801362e:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8013630:	4a07      	ldr	r2, [pc, #28]	@ (8013650 <udp_bind+0x10c>)
 8013632:	68fb      	ldr	r3, [r7, #12]
 8013634:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8013636:	2300      	movs	r3, #0
}
 8013638:	4618      	mov	r0, r3
 801363a:	3718      	adds	r7, #24
 801363c:	46bd      	mov	sp, r7
 801363e:	bd80      	pop	{r7, pc}
 8013640:	0801aea4 	.word	0x0801aea4
 8013644:	0801a344 	.word	0x0801a344
 8013648:	0801a60c 	.word	0x0801a60c
 801364c:	0801a398 	.word	0x0801a398
 8013650:	2000eba0 	.word	0x2000eba0

08013654 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8013654:	b580      	push	{r7, lr}
 8013656:	b084      	sub	sp, #16
 8013658:	af00      	add	r7, sp, #0
 801365a:	60f8      	str	r0, [r7, #12]
 801365c:	60b9      	str	r1, [r7, #8]
 801365e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8013660:	68fb      	ldr	r3, [r7, #12]
 8013662:	2b00      	cmp	r3, #0
 8013664:	d107      	bne.n	8013676 <udp_recv+0x22>
 8013666:	4b08      	ldr	r3, [pc, #32]	@ (8013688 <udp_recv+0x34>)
 8013668:	f240 428a 	movw	r2, #1162	@ 0x48a
 801366c:	4907      	ldr	r1, [pc, #28]	@ (801368c <udp_recv+0x38>)
 801366e:	4808      	ldr	r0, [pc, #32]	@ (8013690 <udp_recv+0x3c>)
 8013670:	f002 fe4e 	bl	8016310 <iprintf>
 8013674:	e005      	b.n	8013682 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8013676:	68fb      	ldr	r3, [r7, #12]
 8013678:	68ba      	ldr	r2, [r7, #8]
 801367a:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 801367c:	68fb      	ldr	r3, [r7, #12]
 801367e:	687a      	ldr	r2, [r7, #4]
 8013680:	61da      	str	r2, [r3, #28]
}
 8013682:	3710      	adds	r7, #16
 8013684:	46bd      	mov	sp, r7
 8013686:	bd80      	pop	{r7, pc}
 8013688:	0801a344 	.word	0x0801a344
 801368c:	0801a678 	.word	0x0801a678
 8013690:	0801a398 	.word	0x0801a398

08013694 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8013694:	b580      	push	{r7, lr}
 8013696:	b084      	sub	sp, #16
 8013698:	af00      	add	r7, sp, #0
 801369a:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 801369c:	687b      	ldr	r3, [r7, #4]
 801369e:	2b00      	cmp	r3, #0
 80136a0:	d107      	bne.n	80136b2 <udp_remove+0x1e>
 80136a2:	4b19      	ldr	r3, [pc, #100]	@ (8013708 <udp_remove+0x74>)
 80136a4:	f240 42a1 	movw	r2, #1185	@ 0x4a1
 80136a8:	4918      	ldr	r1, [pc, #96]	@ (801370c <udp_remove+0x78>)
 80136aa:	4819      	ldr	r0, [pc, #100]	@ (8013710 <udp_remove+0x7c>)
 80136ac:	f002 fe30 	bl	8016310 <iprintf>
 80136b0:	e026      	b.n	8013700 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 80136b2:	4b18      	ldr	r3, [pc, #96]	@ (8013714 <udp_remove+0x80>)
 80136b4:	681b      	ldr	r3, [r3, #0]
 80136b6:	687a      	ldr	r2, [r7, #4]
 80136b8:	429a      	cmp	r2, r3
 80136ba:	d105      	bne.n	80136c8 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 80136bc:	4b15      	ldr	r3, [pc, #84]	@ (8013714 <udp_remove+0x80>)
 80136be:	681b      	ldr	r3, [r3, #0]
 80136c0:	68db      	ldr	r3, [r3, #12]
 80136c2:	4a14      	ldr	r2, [pc, #80]	@ (8013714 <udp_remove+0x80>)
 80136c4:	6013      	str	r3, [r2, #0]
 80136c6:	e017      	b.n	80136f8 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80136c8:	4b12      	ldr	r3, [pc, #72]	@ (8013714 <udp_remove+0x80>)
 80136ca:	681b      	ldr	r3, [r3, #0]
 80136cc:	60fb      	str	r3, [r7, #12]
 80136ce:	e010      	b.n	80136f2 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 80136d0:	68fb      	ldr	r3, [r7, #12]
 80136d2:	68db      	ldr	r3, [r3, #12]
 80136d4:	2b00      	cmp	r3, #0
 80136d6:	d009      	beq.n	80136ec <udp_remove+0x58>
 80136d8:	68fb      	ldr	r3, [r7, #12]
 80136da:	68db      	ldr	r3, [r3, #12]
 80136dc:	687a      	ldr	r2, [r7, #4]
 80136de:	429a      	cmp	r2, r3
 80136e0:	d104      	bne.n	80136ec <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 80136e2:	687b      	ldr	r3, [r7, #4]
 80136e4:	68da      	ldr	r2, [r3, #12]
 80136e6:	68fb      	ldr	r3, [r7, #12]
 80136e8:	60da      	str	r2, [r3, #12]
        break;
 80136ea:	e005      	b.n	80136f8 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80136ec:	68fb      	ldr	r3, [r7, #12]
 80136ee:	68db      	ldr	r3, [r3, #12]
 80136f0:	60fb      	str	r3, [r7, #12]
 80136f2:	68fb      	ldr	r3, [r7, #12]
 80136f4:	2b00      	cmp	r3, #0
 80136f6:	d1eb      	bne.n	80136d0 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 80136f8:	6879      	ldr	r1, [r7, #4]
 80136fa:	2000      	movs	r0, #0
 80136fc:	f7f8 f9f8 	bl	800baf0 <memp_free>
}
 8013700:	3710      	adds	r7, #16
 8013702:	46bd      	mov	sp, r7
 8013704:	bd80      	pop	{r7, pc}
 8013706:	bf00      	nop
 8013708:	0801a344 	.word	0x0801a344
 801370c:	0801a690 	.word	0x0801a690
 8013710:	0801a398 	.word	0x0801a398
 8013714:	2000eba0 	.word	0x2000eba0

08013718 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8013718:	b580      	push	{r7, lr}
 801371a:	b082      	sub	sp, #8
 801371c:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801371e:	2000      	movs	r0, #0
 8013720:	f7f8 f970 	bl	800ba04 <memp_malloc>
 8013724:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8013726:	687b      	ldr	r3, [r7, #4]
 8013728:	2b00      	cmp	r3, #0
 801372a:	d007      	beq.n	801373c <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 801372c:	2220      	movs	r2, #32
 801372e:	2100      	movs	r1, #0
 8013730:	6878      	ldr	r0, [r7, #4]
 8013732:	f002 fe8c 	bl	801644e <memset>
    pcb->ttl = UDP_TTL;
 8013736:	687b      	ldr	r3, [r7, #4]
 8013738:	22ff      	movs	r2, #255	@ 0xff
 801373a:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 801373c:	687b      	ldr	r3, [r7, #4]
}
 801373e:	4618      	mov	r0, r3
 8013740:	3708      	adds	r7, #8
 8013742:	46bd      	mov	sp, r7
 8013744:	bd80      	pop	{r7, pc}

08013746 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 8013746:	b580      	push	{r7, lr}
 8013748:	b084      	sub	sp, #16
 801374a:	af00      	add	r7, sp, #0
 801374c:	4603      	mov	r3, r0
 801374e:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 8013750:	f7ff ffe2 	bl	8013718 <udp_new>
 8013754:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8013756:	68fb      	ldr	r3, [r7, #12]
}
 8013758:	4618      	mov	r0, r3
 801375a:	3710      	adds	r7, #16
 801375c:	46bd      	mov	sp, r7
 801375e:	bd80      	pop	{r7, pc}

08013760 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8013760:	b480      	push	{r7}
 8013762:	b085      	sub	sp, #20
 8013764:	af00      	add	r7, sp, #0
 8013766:	6078      	str	r0, [r7, #4]
 8013768:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801376a:	687b      	ldr	r3, [r7, #4]
 801376c:	2b00      	cmp	r3, #0
 801376e:	d01e      	beq.n	80137ae <udp_netif_ip_addr_changed+0x4e>
 8013770:	687b      	ldr	r3, [r7, #4]
 8013772:	681b      	ldr	r3, [r3, #0]
 8013774:	2b00      	cmp	r3, #0
 8013776:	d01a      	beq.n	80137ae <udp_netif_ip_addr_changed+0x4e>
 8013778:	683b      	ldr	r3, [r7, #0]
 801377a:	2b00      	cmp	r3, #0
 801377c:	d017      	beq.n	80137ae <udp_netif_ip_addr_changed+0x4e>
 801377e:	683b      	ldr	r3, [r7, #0]
 8013780:	681b      	ldr	r3, [r3, #0]
 8013782:	2b00      	cmp	r3, #0
 8013784:	d013      	beq.n	80137ae <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8013786:	4b0d      	ldr	r3, [pc, #52]	@ (80137bc <udp_netif_ip_addr_changed+0x5c>)
 8013788:	681b      	ldr	r3, [r3, #0]
 801378a:	60fb      	str	r3, [r7, #12]
 801378c:	e00c      	b.n	80137a8 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801378e:	68fb      	ldr	r3, [r7, #12]
 8013790:	681a      	ldr	r2, [r3, #0]
 8013792:	687b      	ldr	r3, [r7, #4]
 8013794:	681b      	ldr	r3, [r3, #0]
 8013796:	429a      	cmp	r2, r3
 8013798:	d103      	bne.n	80137a2 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801379a:	683b      	ldr	r3, [r7, #0]
 801379c:	681a      	ldr	r2, [r3, #0]
 801379e:	68fb      	ldr	r3, [r7, #12]
 80137a0:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80137a2:	68fb      	ldr	r3, [r7, #12]
 80137a4:	68db      	ldr	r3, [r3, #12]
 80137a6:	60fb      	str	r3, [r7, #12]
 80137a8:	68fb      	ldr	r3, [r7, #12]
 80137aa:	2b00      	cmp	r3, #0
 80137ac:	d1ef      	bne.n	801378e <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 80137ae:	bf00      	nop
 80137b0:	3714      	adds	r7, #20
 80137b2:	46bd      	mov	sp, r7
 80137b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137b8:	4770      	bx	lr
 80137ba:	bf00      	nop
 80137bc:	2000eba0 	.word	0x2000eba0

080137c0 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 80137c0:	b580      	push	{r7, lr}
 80137c2:	b082      	sub	sp, #8
 80137c4:	af00      	add	r7, sp, #0
 80137c6:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 80137c8:	4915      	ldr	r1, [pc, #84]	@ (8013820 <etharp_free_entry+0x60>)
 80137ca:	687a      	ldr	r2, [r7, #4]
 80137cc:	4613      	mov	r3, r2
 80137ce:	005b      	lsls	r3, r3, #1
 80137d0:	4413      	add	r3, r2
 80137d2:	00db      	lsls	r3, r3, #3
 80137d4:	440b      	add	r3, r1
 80137d6:	681b      	ldr	r3, [r3, #0]
 80137d8:	2b00      	cmp	r3, #0
 80137da:	d013      	beq.n	8013804 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 80137dc:	4910      	ldr	r1, [pc, #64]	@ (8013820 <etharp_free_entry+0x60>)
 80137de:	687a      	ldr	r2, [r7, #4]
 80137e0:	4613      	mov	r3, r2
 80137e2:	005b      	lsls	r3, r3, #1
 80137e4:	4413      	add	r3, r2
 80137e6:	00db      	lsls	r3, r3, #3
 80137e8:	440b      	add	r3, r1
 80137ea:	681b      	ldr	r3, [r3, #0]
 80137ec:	4618      	mov	r0, r3
 80137ee:	f7f9 f823 	bl	800c838 <pbuf_free>
    arp_table[i].q = NULL;
 80137f2:	490b      	ldr	r1, [pc, #44]	@ (8013820 <etharp_free_entry+0x60>)
 80137f4:	687a      	ldr	r2, [r7, #4]
 80137f6:	4613      	mov	r3, r2
 80137f8:	005b      	lsls	r3, r3, #1
 80137fa:	4413      	add	r3, r2
 80137fc:	00db      	lsls	r3, r3, #3
 80137fe:	440b      	add	r3, r1
 8013800:	2200      	movs	r2, #0
 8013802:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8013804:	4906      	ldr	r1, [pc, #24]	@ (8013820 <etharp_free_entry+0x60>)
 8013806:	687a      	ldr	r2, [r7, #4]
 8013808:	4613      	mov	r3, r2
 801380a:	005b      	lsls	r3, r3, #1
 801380c:	4413      	add	r3, r2
 801380e:	00db      	lsls	r3, r3, #3
 8013810:	440b      	add	r3, r1
 8013812:	3314      	adds	r3, #20
 8013814:	2200      	movs	r2, #0
 8013816:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8013818:	bf00      	nop
 801381a:	3708      	adds	r7, #8
 801381c:	46bd      	mov	sp, r7
 801381e:	bd80      	pop	{r7, pc}
 8013820:	2000eba4 	.word	0x2000eba4

08013824 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8013824:	b580      	push	{r7, lr}
 8013826:	b082      	sub	sp, #8
 8013828:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801382a:	2300      	movs	r3, #0
 801382c:	607b      	str	r3, [r7, #4]
 801382e:	e096      	b.n	801395e <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8013830:	494f      	ldr	r1, [pc, #316]	@ (8013970 <etharp_tmr+0x14c>)
 8013832:	687a      	ldr	r2, [r7, #4]
 8013834:	4613      	mov	r3, r2
 8013836:	005b      	lsls	r3, r3, #1
 8013838:	4413      	add	r3, r2
 801383a:	00db      	lsls	r3, r3, #3
 801383c:	440b      	add	r3, r1
 801383e:	3314      	adds	r3, #20
 8013840:	781b      	ldrb	r3, [r3, #0]
 8013842:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8013844:	78fb      	ldrb	r3, [r7, #3]
 8013846:	2b00      	cmp	r3, #0
 8013848:	f000 8086 	beq.w	8013958 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 801384c:	4948      	ldr	r1, [pc, #288]	@ (8013970 <etharp_tmr+0x14c>)
 801384e:	687a      	ldr	r2, [r7, #4]
 8013850:	4613      	mov	r3, r2
 8013852:	005b      	lsls	r3, r3, #1
 8013854:	4413      	add	r3, r2
 8013856:	00db      	lsls	r3, r3, #3
 8013858:	440b      	add	r3, r1
 801385a:	3312      	adds	r3, #18
 801385c:	881b      	ldrh	r3, [r3, #0]
 801385e:	3301      	adds	r3, #1
 8013860:	b298      	uxth	r0, r3
 8013862:	4943      	ldr	r1, [pc, #268]	@ (8013970 <etharp_tmr+0x14c>)
 8013864:	687a      	ldr	r2, [r7, #4]
 8013866:	4613      	mov	r3, r2
 8013868:	005b      	lsls	r3, r3, #1
 801386a:	4413      	add	r3, r2
 801386c:	00db      	lsls	r3, r3, #3
 801386e:	440b      	add	r3, r1
 8013870:	3312      	adds	r3, #18
 8013872:	4602      	mov	r2, r0
 8013874:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8013876:	493e      	ldr	r1, [pc, #248]	@ (8013970 <etharp_tmr+0x14c>)
 8013878:	687a      	ldr	r2, [r7, #4]
 801387a:	4613      	mov	r3, r2
 801387c:	005b      	lsls	r3, r3, #1
 801387e:	4413      	add	r3, r2
 8013880:	00db      	lsls	r3, r3, #3
 8013882:	440b      	add	r3, r1
 8013884:	3312      	adds	r3, #18
 8013886:	881b      	ldrh	r3, [r3, #0]
 8013888:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 801388c:	d215      	bcs.n	80138ba <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801388e:	4938      	ldr	r1, [pc, #224]	@ (8013970 <etharp_tmr+0x14c>)
 8013890:	687a      	ldr	r2, [r7, #4]
 8013892:	4613      	mov	r3, r2
 8013894:	005b      	lsls	r3, r3, #1
 8013896:	4413      	add	r3, r2
 8013898:	00db      	lsls	r3, r3, #3
 801389a:	440b      	add	r3, r1
 801389c:	3314      	adds	r3, #20
 801389e:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80138a0:	2b01      	cmp	r3, #1
 80138a2:	d10e      	bne.n	80138c2 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 80138a4:	4932      	ldr	r1, [pc, #200]	@ (8013970 <etharp_tmr+0x14c>)
 80138a6:	687a      	ldr	r2, [r7, #4]
 80138a8:	4613      	mov	r3, r2
 80138aa:	005b      	lsls	r3, r3, #1
 80138ac:	4413      	add	r3, r2
 80138ae:	00db      	lsls	r3, r3, #3
 80138b0:	440b      	add	r3, r1
 80138b2:	3312      	adds	r3, #18
 80138b4:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80138b6:	2b04      	cmp	r3, #4
 80138b8:	d903      	bls.n	80138c2 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 80138ba:	6878      	ldr	r0, [r7, #4]
 80138bc:	f7ff ff80 	bl	80137c0 <etharp_free_entry>
 80138c0:	e04a      	b.n	8013958 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 80138c2:	492b      	ldr	r1, [pc, #172]	@ (8013970 <etharp_tmr+0x14c>)
 80138c4:	687a      	ldr	r2, [r7, #4]
 80138c6:	4613      	mov	r3, r2
 80138c8:	005b      	lsls	r3, r3, #1
 80138ca:	4413      	add	r3, r2
 80138cc:	00db      	lsls	r3, r3, #3
 80138ce:	440b      	add	r3, r1
 80138d0:	3314      	adds	r3, #20
 80138d2:	781b      	ldrb	r3, [r3, #0]
 80138d4:	2b03      	cmp	r3, #3
 80138d6:	d10a      	bne.n	80138ee <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 80138d8:	4925      	ldr	r1, [pc, #148]	@ (8013970 <etharp_tmr+0x14c>)
 80138da:	687a      	ldr	r2, [r7, #4]
 80138dc:	4613      	mov	r3, r2
 80138de:	005b      	lsls	r3, r3, #1
 80138e0:	4413      	add	r3, r2
 80138e2:	00db      	lsls	r3, r3, #3
 80138e4:	440b      	add	r3, r1
 80138e6:	3314      	adds	r3, #20
 80138e8:	2204      	movs	r2, #4
 80138ea:	701a      	strb	r2, [r3, #0]
 80138ec:	e034      	b.n	8013958 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 80138ee:	4920      	ldr	r1, [pc, #128]	@ (8013970 <etharp_tmr+0x14c>)
 80138f0:	687a      	ldr	r2, [r7, #4]
 80138f2:	4613      	mov	r3, r2
 80138f4:	005b      	lsls	r3, r3, #1
 80138f6:	4413      	add	r3, r2
 80138f8:	00db      	lsls	r3, r3, #3
 80138fa:	440b      	add	r3, r1
 80138fc:	3314      	adds	r3, #20
 80138fe:	781b      	ldrb	r3, [r3, #0]
 8013900:	2b04      	cmp	r3, #4
 8013902:	d10a      	bne.n	801391a <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8013904:	491a      	ldr	r1, [pc, #104]	@ (8013970 <etharp_tmr+0x14c>)
 8013906:	687a      	ldr	r2, [r7, #4]
 8013908:	4613      	mov	r3, r2
 801390a:	005b      	lsls	r3, r3, #1
 801390c:	4413      	add	r3, r2
 801390e:	00db      	lsls	r3, r3, #3
 8013910:	440b      	add	r3, r1
 8013912:	3314      	adds	r3, #20
 8013914:	2202      	movs	r2, #2
 8013916:	701a      	strb	r2, [r3, #0]
 8013918:	e01e      	b.n	8013958 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801391a:	4915      	ldr	r1, [pc, #84]	@ (8013970 <etharp_tmr+0x14c>)
 801391c:	687a      	ldr	r2, [r7, #4]
 801391e:	4613      	mov	r3, r2
 8013920:	005b      	lsls	r3, r3, #1
 8013922:	4413      	add	r3, r2
 8013924:	00db      	lsls	r3, r3, #3
 8013926:	440b      	add	r3, r1
 8013928:	3314      	adds	r3, #20
 801392a:	781b      	ldrb	r3, [r3, #0]
 801392c:	2b01      	cmp	r3, #1
 801392e:	d113      	bne.n	8013958 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8013930:	490f      	ldr	r1, [pc, #60]	@ (8013970 <etharp_tmr+0x14c>)
 8013932:	687a      	ldr	r2, [r7, #4]
 8013934:	4613      	mov	r3, r2
 8013936:	005b      	lsls	r3, r3, #1
 8013938:	4413      	add	r3, r2
 801393a:	00db      	lsls	r3, r3, #3
 801393c:	440b      	add	r3, r1
 801393e:	3308      	adds	r3, #8
 8013940:	6818      	ldr	r0, [r3, #0]
 8013942:	687a      	ldr	r2, [r7, #4]
 8013944:	4613      	mov	r3, r2
 8013946:	005b      	lsls	r3, r3, #1
 8013948:	4413      	add	r3, r2
 801394a:	00db      	lsls	r3, r3, #3
 801394c:	4a08      	ldr	r2, [pc, #32]	@ (8013970 <etharp_tmr+0x14c>)
 801394e:	4413      	add	r3, r2
 8013950:	3304      	adds	r3, #4
 8013952:	4619      	mov	r1, r3
 8013954:	f000 fe6e 	bl	8014634 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013958:	687b      	ldr	r3, [r7, #4]
 801395a:	3301      	adds	r3, #1
 801395c:	607b      	str	r3, [r7, #4]
 801395e:	687b      	ldr	r3, [r7, #4]
 8013960:	2b09      	cmp	r3, #9
 8013962:	f77f af65 	ble.w	8013830 <etharp_tmr+0xc>
      }
    }
  }
}
 8013966:	bf00      	nop
 8013968:	bf00      	nop
 801396a:	3708      	adds	r7, #8
 801396c:	46bd      	mov	sp, r7
 801396e:	bd80      	pop	{r7, pc}
 8013970:	2000eba4 	.word	0x2000eba4

08013974 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8013974:	b580      	push	{r7, lr}
 8013976:	b08a      	sub	sp, #40	@ 0x28
 8013978:	af00      	add	r7, sp, #0
 801397a:	60f8      	str	r0, [r7, #12]
 801397c:	460b      	mov	r3, r1
 801397e:	607a      	str	r2, [r7, #4]
 8013980:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8013982:	230a      	movs	r3, #10
 8013984:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8013986:	230a      	movs	r3, #10
 8013988:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801398a:	230a      	movs	r3, #10
 801398c:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 801398e:	2300      	movs	r3, #0
 8013990:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8013992:	230a      	movs	r3, #10
 8013994:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8013996:	2300      	movs	r3, #0
 8013998:	83bb      	strh	r3, [r7, #28]
 801399a:	2300      	movs	r3, #0
 801399c:	837b      	strh	r3, [r7, #26]
 801399e:	2300      	movs	r3, #0
 80139a0:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80139a2:	2300      	movs	r3, #0
 80139a4:	843b      	strh	r3, [r7, #32]
 80139a6:	e0ae      	b.n	8013b06 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 80139a8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80139ac:	49a6      	ldr	r1, [pc, #664]	@ (8013c48 <etharp_find_entry+0x2d4>)
 80139ae:	4613      	mov	r3, r2
 80139b0:	005b      	lsls	r3, r3, #1
 80139b2:	4413      	add	r3, r2
 80139b4:	00db      	lsls	r3, r3, #3
 80139b6:	440b      	add	r3, r1
 80139b8:	3314      	adds	r3, #20
 80139ba:	781b      	ldrb	r3, [r3, #0]
 80139bc:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 80139be:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 80139c2:	2b0a      	cmp	r3, #10
 80139c4:	d105      	bne.n	80139d2 <etharp_find_entry+0x5e>
 80139c6:	7dfb      	ldrb	r3, [r7, #23]
 80139c8:	2b00      	cmp	r3, #0
 80139ca:	d102      	bne.n	80139d2 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 80139cc:	8c3b      	ldrh	r3, [r7, #32]
 80139ce:	847b      	strh	r3, [r7, #34]	@ 0x22
 80139d0:	e095      	b.n	8013afe <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 80139d2:	7dfb      	ldrb	r3, [r7, #23]
 80139d4:	2b00      	cmp	r3, #0
 80139d6:	f000 8092 	beq.w	8013afe <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 80139da:	7dfb      	ldrb	r3, [r7, #23]
 80139dc:	2b01      	cmp	r3, #1
 80139de:	d009      	beq.n	80139f4 <etharp_find_entry+0x80>
 80139e0:	7dfb      	ldrb	r3, [r7, #23]
 80139e2:	2b01      	cmp	r3, #1
 80139e4:	d806      	bhi.n	80139f4 <etharp_find_entry+0x80>
 80139e6:	4b99      	ldr	r3, [pc, #612]	@ (8013c4c <etharp_find_entry+0x2d8>)
 80139e8:	f240 1223 	movw	r2, #291	@ 0x123
 80139ec:	4998      	ldr	r1, [pc, #608]	@ (8013c50 <etharp_find_entry+0x2dc>)
 80139ee:	4899      	ldr	r0, [pc, #612]	@ (8013c54 <etharp_find_entry+0x2e0>)
 80139f0:	f002 fc8e 	bl	8016310 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 80139f4:	68fb      	ldr	r3, [r7, #12]
 80139f6:	2b00      	cmp	r3, #0
 80139f8:	d020      	beq.n	8013a3c <etharp_find_entry+0xc8>
 80139fa:	68fb      	ldr	r3, [r7, #12]
 80139fc:	6819      	ldr	r1, [r3, #0]
 80139fe:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013a02:	4891      	ldr	r0, [pc, #580]	@ (8013c48 <etharp_find_entry+0x2d4>)
 8013a04:	4613      	mov	r3, r2
 8013a06:	005b      	lsls	r3, r3, #1
 8013a08:	4413      	add	r3, r2
 8013a0a:	00db      	lsls	r3, r3, #3
 8013a0c:	4403      	add	r3, r0
 8013a0e:	3304      	adds	r3, #4
 8013a10:	681b      	ldr	r3, [r3, #0]
 8013a12:	4299      	cmp	r1, r3
 8013a14:	d112      	bne.n	8013a3c <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8013a16:	687b      	ldr	r3, [r7, #4]
 8013a18:	2b00      	cmp	r3, #0
 8013a1a:	d00c      	beq.n	8013a36 <etharp_find_entry+0xc2>
 8013a1c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013a20:	4989      	ldr	r1, [pc, #548]	@ (8013c48 <etharp_find_entry+0x2d4>)
 8013a22:	4613      	mov	r3, r2
 8013a24:	005b      	lsls	r3, r3, #1
 8013a26:	4413      	add	r3, r2
 8013a28:	00db      	lsls	r3, r3, #3
 8013a2a:	440b      	add	r3, r1
 8013a2c:	3308      	adds	r3, #8
 8013a2e:	681b      	ldr	r3, [r3, #0]
 8013a30:	687a      	ldr	r2, [r7, #4]
 8013a32:	429a      	cmp	r2, r3
 8013a34:	d102      	bne.n	8013a3c <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8013a36:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8013a3a:	e100      	b.n	8013c3e <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8013a3c:	7dfb      	ldrb	r3, [r7, #23]
 8013a3e:	2b01      	cmp	r3, #1
 8013a40:	d140      	bne.n	8013ac4 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8013a42:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013a46:	4980      	ldr	r1, [pc, #512]	@ (8013c48 <etharp_find_entry+0x2d4>)
 8013a48:	4613      	mov	r3, r2
 8013a4a:	005b      	lsls	r3, r3, #1
 8013a4c:	4413      	add	r3, r2
 8013a4e:	00db      	lsls	r3, r3, #3
 8013a50:	440b      	add	r3, r1
 8013a52:	681b      	ldr	r3, [r3, #0]
 8013a54:	2b00      	cmp	r3, #0
 8013a56:	d01a      	beq.n	8013a8e <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8013a58:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013a5c:	497a      	ldr	r1, [pc, #488]	@ (8013c48 <etharp_find_entry+0x2d4>)
 8013a5e:	4613      	mov	r3, r2
 8013a60:	005b      	lsls	r3, r3, #1
 8013a62:	4413      	add	r3, r2
 8013a64:	00db      	lsls	r3, r3, #3
 8013a66:	440b      	add	r3, r1
 8013a68:	3312      	adds	r3, #18
 8013a6a:	881b      	ldrh	r3, [r3, #0]
 8013a6c:	8bba      	ldrh	r2, [r7, #28]
 8013a6e:	429a      	cmp	r2, r3
 8013a70:	d845      	bhi.n	8013afe <etharp_find_entry+0x18a>
            old_queue = i;
 8013a72:	8c3b      	ldrh	r3, [r7, #32]
 8013a74:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8013a76:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013a7a:	4973      	ldr	r1, [pc, #460]	@ (8013c48 <etharp_find_entry+0x2d4>)
 8013a7c:	4613      	mov	r3, r2
 8013a7e:	005b      	lsls	r3, r3, #1
 8013a80:	4413      	add	r3, r2
 8013a82:	00db      	lsls	r3, r3, #3
 8013a84:	440b      	add	r3, r1
 8013a86:	3312      	adds	r3, #18
 8013a88:	881b      	ldrh	r3, [r3, #0]
 8013a8a:	83bb      	strh	r3, [r7, #28]
 8013a8c:	e037      	b.n	8013afe <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8013a8e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013a92:	496d      	ldr	r1, [pc, #436]	@ (8013c48 <etharp_find_entry+0x2d4>)
 8013a94:	4613      	mov	r3, r2
 8013a96:	005b      	lsls	r3, r3, #1
 8013a98:	4413      	add	r3, r2
 8013a9a:	00db      	lsls	r3, r3, #3
 8013a9c:	440b      	add	r3, r1
 8013a9e:	3312      	adds	r3, #18
 8013aa0:	881b      	ldrh	r3, [r3, #0]
 8013aa2:	8b7a      	ldrh	r2, [r7, #26]
 8013aa4:	429a      	cmp	r2, r3
 8013aa6:	d82a      	bhi.n	8013afe <etharp_find_entry+0x18a>
            old_pending = i;
 8013aa8:	8c3b      	ldrh	r3, [r7, #32]
 8013aaa:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 8013aac:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013ab0:	4965      	ldr	r1, [pc, #404]	@ (8013c48 <etharp_find_entry+0x2d4>)
 8013ab2:	4613      	mov	r3, r2
 8013ab4:	005b      	lsls	r3, r3, #1
 8013ab6:	4413      	add	r3, r2
 8013ab8:	00db      	lsls	r3, r3, #3
 8013aba:	440b      	add	r3, r1
 8013abc:	3312      	adds	r3, #18
 8013abe:	881b      	ldrh	r3, [r3, #0]
 8013ac0:	837b      	strh	r3, [r7, #26]
 8013ac2:	e01c      	b.n	8013afe <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8013ac4:	7dfb      	ldrb	r3, [r7, #23]
 8013ac6:	2b01      	cmp	r3, #1
 8013ac8:	d919      	bls.n	8013afe <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8013aca:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013ace:	495e      	ldr	r1, [pc, #376]	@ (8013c48 <etharp_find_entry+0x2d4>)
 8013ad0:	4613      	mov	r3, r2
 8013ad2:	005b      	lsls	r3, r3, #1
 8013ad4:	4413      	add	r3, r2
 8013ad6:	00db      	lsls	r3, r3, #3
 8013ad8:	440b      	add	r3, r1
 8013ada:	3312      	adds	r3, #18
 8013adc:	881b      	ldrh	r3, [r3, #0]
 8013ade:	8b3a      	ldrh	r2, [r7, #24]
 8013ae0:	429a      	cmp	r2, r3
 8013ae2:	d80c      	bhi.n	8013afe <etharp_find_entry+0x18a>
            old_stable = i;
 8013ae4:	8c3b      	ldrh	r3, [r7, #32]
 8013ae6:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 8013ae8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013aec:	4956      	ldr	r1, [pc, #344]	@ (8013c48 <etharp_find_entry+0x2d4>)
 8013aee:	4613      	mov	r3, r2
 8013af0:	005b      	lsls	r3, r3, #1
 8013af2:	4413      	add	r3, r2
 8013af4:	00db      	lsls	r3, r3, #3
 8013af6:	440b      	add	r3, r1
 8013af8:	3312      	adds	r3, #18
 8013afa:	881b      	ldrh	r3, [r3, #0]
 8013afc:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013afe:	8c3b      	ldrh	r3, [r7, #32]
 8013b00:	3301      	adds	r3, #1
 8013b02:	b29b      	uxth	r3, r3
 8013b04:	843b      	strh	r3, [r7, #32]
 8013b06:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8013b0a:	2b09      	cmp	r3, #9
 8013b0c:	f77f af4c 	ble.w	80139a8 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8013b10:	7afb      	ldrb	r3, [r7, #11]
 8013b12:	f003 0302 	and.w	r3, r3, #2
 8013b16:	2b00      	cmp	r3, #0
 8013b18:	d108      	bne.n	8013b2c <etharp_find_entry+0x1b8>
 8013b1a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8013b1e:	2b0a      	cmp	r3, #10
 8013b20:	d107      	bne.n	8013b32 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8013b22:	7afb      	ldrb	r3, [r7, #11]
 8013b24:	f003 0301 	and.w	r3, r3, #1
 8013b28:	2b00      	cmp	r3, #0
 8013b2a:	d102      	bne.n	8013b32 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8013b2c:	f04f 33ff 	mov.w	r3, #4294967295
 8013b30:	e085      	b.n	8013c3e <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8013b32:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8013b36:	2b09      	cmp	r3, #9
 8013b38:	dc02      	bgt.n	8013b40 <etharp_find_entry+0x1cc>
    i = empty;
 8013b3a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8013b3c:	843b      	strh	r3, [r7, #32]
 8013b3e:	e039      	b.n	8013bb4 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8013b40:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8013b44:	2b09      	cmp	r3, #9
 8013b46:	dc14      	bgt.n	8013b72 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8013b48:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013b4a:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8013b4c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013b50:	493d      	ldr	r1, [pc, #244]	@ (8013c48 <etharp_find_entry+0x2d4>)
 8013b52:	4613      	mov	r3, r2
 8013b54:	005b      	lsls	r3, r3, #1
 8013b56:	4413      	add	r3, r2
 8013b58:	00db      	lsls	r3, r3, #3
 8013b5a:	440b      	add	r3, r1
 8013b5c:	681b      	ldr	r3, [r3, #0]
 8013b5e:	2b00      	cmp	r3, #0
 8013b60:	d018      	beq.n	8013b94 <etharp_find_entry+0x220>
 8013b62:	4b3a      	ldr	r3, [pc, #232]	@ (8013c4c <etharp_find_entry+0x2d8>)
 8013b64:	f240 126d 	movw	r2, #365	@ 0x16d
 8013b68:	493b      	ldr	r1, [pc, #236]	@ (8013c58 <etharp_find_entry+0x2e4>)
 8013b6a:	483a      	ldr	r0, [pc, #232]	@ (8013c54 <etharp_find_entry+0x2e0>)
 8013b6c:	f002 fbd0 	bl	8016310 <iprintf>
 8013b70:	e010      	b.n	8013b94 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8013b72:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8013b76:	2b09      	cmp	r3, #9
 8013b78:	dc02      	bgt.n	8013b80 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8013b7a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8013b7c:	843b      	strh	r3, [r7, #32]
 8013b7e:	e009      	b.n	8013b94 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8013b80:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8013b84:	2b09      	cmp	r3, #9
 8013b86:	dc02      	bgt.n	8013b8e <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8013b88:	8bfb      	ldrh	r3, [r7, #30]
 8013b8a:	843b      	strh	r3, [r7, #32]
 8013b8c:	e002      	b.n	8013b94 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8013b8e:	f04f 33ff 	mov.w	r3, #4294967295
 8013b92:	e054      	b.n	8013c3e <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8013b94:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8013b98:	2b09      	cmp	r3, #9
 8013b9a:	dd06      	ble.n	8013baa <etharp_find_entry+0x236>
 8013b9c:	4b2b      	ldr	r3, [pc, #172]	@ (8013c4c <etharp_find_entry+0x2d8>)
 8013b9e:	f240 127f 	movw	r2, #383	@ 0x17f
 8013ba2:	492e      	ldr	r1, [pc, #184]	@ (8013c5c <etharp_find_entry+0x2e8>)
 8013ba4:	482b      	ldr	r0, [pc, #172]	@ (8013c54 <etharp_find_entry+0x2e0>)
 8013ba6:	f002 fbb3 	bl	8016310 <iprintf>
    etharp_free_entry(i);
 8013baa:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8013bae:	4618      	mov	r0, r3
 8013bb0:	f7ff fe06 	bl	80137c0 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8013bb4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8013bb8:	2b09      	cmp	r3, #9
 8013bba:	dd06      	ble.n	8013bca <etharp_find_entry+0x256>
 8013bbc:	4b23      	ldr	r3, [pc, #140]	@ (8013c4c <etharp_find_entry+0x2d8>)
 8013bbe:	f240 1283 	movw	r2, #387	@ 0x183
 8013bc2:	4926      	ldr	r1, [pc, #152]	@ (8013c5c <etharp_find_entry+0x2e8>)
 8013bc4:	4823      	ldr	r0, [pc, #140]	@ (8013c54 <etharp_find_entry+0x2e0>)
 8013bc6:	f002 fba3 	bl	8016310 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8013bca:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013bce:	491e      	ldr	r1, [pc, #120]	@ (8013c48 <etharp_find_entry+0x2d4>)
 8013bd0:	4613      	mov	r3, r2
 8013bd2:	005b      	lsls	r3, r3, #1
 8013bd4:	4413      	add	r3, r2
 8013bd6:	00db      	lsls	r3, r3, #3
 8013bd8:	440b      	add	r3, r1
 8013bda:	3314      	adds	r3, #20
 8013bdc:	781b      	ldrb	r3, [r3, #0]
 8013bde:	2b00      	cmp	r3, #0
 8013be0:	d006      	beq.n	8013bf0 <etharp_find_entry+0x27c>
 8013be2:	4b1a      	ldr	r3, [pc, #104]	@ (8013c4c <etharp_find_entry+0x2d8>)
 8013be4:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 8013be8:	491d      	ldr	r1, [pc, #116]	@ (8013c60 <etharp_find_entry+0x2ec>)
 8013bea:	481a      	ldr	r0, [pc, #104]	@ (8013c54 <etharp_find_entry+0x2e0>)
 8013bec:	f002 fb90 	bl	8016310 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8013bf0:	68fb      	ldr	r3, [r7, #12]
 8013bf2:	2b00      	cmp	r3, #0
 8013bf4:	d00b      	beq.n	8013c0e <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8013bf6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013bfa:	68fb      	ldr	r3, [r7, #12]
 8013bfc:	6819      	ldr	r1, [r3, #0]
 8013bfe:	4812      	ldr	r0, [pc, #72]	@ (8013c48 <etharp_find_entry+0x2d4>)
 8013c00:	4613      	mov	r3, r2
 8013c02:	005b      	lsls	r3, r3, #1
 8013c04:	4413      	add	r3, r2
 8013c06:	00db      	lsls	r3, r3, #3
 8013c08:	4403      	add	r3, r0
 8013c0a:	3304      	adds	r3, #4
 8013c0c:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8013c0e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013c12:	490d      	ldr	r1, [pc, #52]	@ (8013c48 <etharp_find_entry+0x2d4>)
 8013c14:	4613      	mov	r3, r2
 8013c16:	005b      	lsls	r3, r3, #1
 8013c18:	4413      	add	r3, r2
 8013c1a:	00db      	lsls	r3, r3, #3
 8013c1c:	440b      	add	r3, r1
 8013c1e:	3312      	adds	r3, #18
 8013c20:	2200      	movs	r2, #0
 8013c22:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8013c24:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013c28:	4907      	ldr	r1, [pc, #28]	@ (8013c48 <etharp_find_entry+0x2d4>)
 8013c2a:	4613      	mov	r3, r2
 8013c2c:	005b      	lsls	r3, r3, #1
 8013c2e:	4413      	add	r3, r2
 8013c30:	00db      	lsls	r3, r3, #3
 8013c32:	440b      	add	r3, r1
 8013c34:	3308      	adds	r3, #8
 8013c36:	687a      	ldr	r2, [r7, #4]
 8013c38:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8013c3a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8013c3e:	4618      	mov	r0, r3
 8013c40:	3728      	adds	r7, #40	@ 0x28
 8013c42:	46bd      	mov	sp, r7
 8013c44:	bd80      	pop	{r7, pc}
 8013c46:	bf00      	nop
 8013c48:	2000eba4 	.word	0x2000eba4
 8013c4c:	0801a6a8 	.word	0x0801a6a8
 8013c50:	0801a6e0 	.word	0x0801a6e0
 8013c54:	0801a720 	.word	0x0801a720
 8013c58:	0801a748 	.word	0x0801a748
 8013c5c:	0801a760 	.word	0x0801a760
 8013c60:	0801a774 	.word	0x0801a774

08013c64 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8013c64:	b580      	push	{r7, lr}
 8013c66:	b088      	sub	sp, #32
 8013c68:	af02      	add	r7, sp, #8
 8013c6a:	60f8      	str	r0, [r7, #12]
 8013c6c:	60b9      	str	r1, [r7, #8]
 8013c6e:	607a      	str	r2, [r7, #4]
 8013c70:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8013c72:	68fb      	ldr	r3, [r7, #12]
 8013c74:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8013c78:	2b06      	cmp	r3, #6
 8013c7a:	d006      	beq.n	8013c8a <etharp_update_arp_entry+0x26>
 8013c7c:	4b48      	ldr	r3, [pc, #288]	@ (8013da0 <etharp_update_arp_entry+0x13c>)
 8013c7e:	f240 12a9 	movw	r2, #425	@ 0x1a9
 8013c82:	4948      	ldr	r1, [pc, #288]	@ (8013da4 <etharp_update_arp_entry+0x140>)
 8013c84:	4848      	ldr	r0, [pc, #288]	@ (8013da8 <etharp_update_arp_entry+0x144>)
 8013c86:	f002 fb43 	bl	8016310 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8013c8a:	68bb      	ldr	r3, [r7, #8]
 8013c8c:	2b00      	cmp	r3, #0
 8013c8e:	d012      	beq.n	8013cb6 <etharp_update_arp_entry+0x52>
 8013c90:	68bb      	ldr	r3, [r7, #8]
 8013c92:	681b      	ldr	r3, [r3, #0]
 8013c94:	2b00      	cmp	r3, #0
 8013c96:	d00e      	beq.n	8013cb6 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8013c98:	68bb      	ldr	r3, [r7, #8]
 8013c9a:	681b      	ldr	r3, [r3, #0]
 8013c9c:	68f9      	ldr	r1, [r7, #12]
 8013c9e:	4618      	mov	r0, r3
 8013ca0:	f001 f8fe 	bl	8014ea0 <ip4_addr_isbroadcast_u32>
 8013ca4:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8013ca6:	2b00      	cmp	r3, #0
 8013ca8:	d105      	bne.n	8013cb6 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8013caa:	68bb      	ldr	r3, [r7, #8]
 8013cac:	681b      	ldr	r3, [r3, #0]
 8013cae:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8013cb2:	2be0      	cmp	r3, #224	@ 0xe0
 8013cb4:	d102      	bne.n	8013cbc <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8013cb6:	f06f 030f 	mvn.w	r3, #15
 8013cba:	e06c      	b.n	8013d96 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8013cbc:	78fb      	ldrb	r3, [r7, #3]
 8013cbe:	68fa      	ldr	r2, [r7, #12]
 8013cc0:	4619      	mov	r1, r3
 8013cc2:	68b8      	ldr	r0, [r7, #8]
 8013cc4:	f7ff fe56 	bl	8013974 <etharp_find_entry>
 8013cc8:	4603      	mov	r3, r0
 8013cca:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8013ccc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8013cd0:	2b00      	cmp	r3, #0
 8013cd2:	da02      	bge.n	8013cda <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8013cd4:	8afb      	ldrh	r3, [r7, #22]
 8013cd6:	b25b      	sxtb	r3, r3
 8013cd8:	e05d      	b.n	8013d96 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8013cda:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013cde:	4933      	ldr	r1, [pc, #204]	@ (8013dac <etharp_update_arp_entry+0x148>)
 8013ce0:	4613      	mov	r3, r2
 8013ce2:	005b      	lsls	r3, r3, #1
 8013ce4:	4413      	add	r3, r2
 8013ce6:	00db      	lsls	r3, r3, #3
 8013ce8:	440b      	add	r3, r1
 8013cea:	3314      	adds	r3, #20
 8013cec:	2202      	movs	r2, #2
 8013cee:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8013cf0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013cf4:	492d      	ldr	r1, [pc, #180]	@ (8013dac <etharp_update_arp_entry+0x148>)
 8013cf6:	4613      	mov	r3, r2
 8013cf8:	005b      	lsls	r3, r3, #1
 8013cfa:	4413      	add	r3, r2
 8013cfc:	00db      	lsls	r3, r3, #3
 8013cfe:	440b      	add	r3, r1
 8013d00:	3308      	adds	r3, #8
 8013d02:	68fa      	ldr	r2, [r7, #12]
 8013d04:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8013d06:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013d0a:	4613      	mov	r3, r2
 8013d0c:	005b      	lsls	r3, r3, #1
 8013d0e:	4413      	add	r3, r2
 8013d10:	00db      	lsls	r3, r3, #3
 8013d12:	3308      	adds	r3, #8
 8013d14:	4a25      	ldr	r2, [pc, #148]	@ (8013dac <etharp_update_arp_entry+0x148>)
 8013d16:	4413      	add	r3, r2
 8013d18:	3304      	adds	r3, #4
 8013d1a:	2206      	movs	r2, #6
 8013d1c:	6879      	ldr	r1, [r7, #4]
 8013d1e:	4618      	mov	r0, r3
 8013d20:	f002 fc61 	bl	80165e6 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8013d24:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013d28:	4920      	ldr	r1, [pc, #128]	@ (8013dac <etharp_update_arp_entry+0x148>)
 8013d2a:	4613      	mov	r3, r2
 8013d2c:	005b      	lsls	r3, r3, #1
 8013d2e:	4413      	add	r3, r2
 8013d30:	00db      	lsls	r3, r3, #3
 8013d32:	440b      	add	r3, r1
 8013d34:	3312      	adds	r3, #18
 8013d36:	2200      	movs	r2, #0
 8013d38:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8013d3a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013d3e:	491b      	ldr	r1, [pc, #108]	@ (8013dac <etharp_update_arp_entry+0x148>)
 8013d40:	4613      	mov	r3, r2
 8013d42:	005b      	lsls	r3, r3, #1
 8013d44:	4413      	add	r3, r2
 8013d46:	00db      	lsls	r3, r3, #3
 8013d48:	440b      	add	r3, r1
 8013d4a:	681b      	ldr	r3, [r3, #0]
 8013d4c:	2b00      	cmp	r3, #0
 8013d4e:	d021      	beq.n	8013d94 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8013d50:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013d54:	4915      	ldr	r1, [pc, #84]	@ (8013dac <etharp_update_arp_entry+0x148>)
 8013d56:	4613      	mov	r3, r2
 8013d58:	005b      	lsls	r3, r3, #1
 8013d5a:	4413      	add	r3, r2
 8013d5c:	00db      	lsls	r3, r3, #3
 8013d5e:	440b      	add	r3, r1
 8013d60:	681b      	ldr	r3, [r3, #0]
 8013d62:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8013d64:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013d68:	4910      	ldr	r1, [pc, #64]	@ (8013dac <etharp_update_arp_entry+0x148>)
 8013d6a:	4613      	mov	r3, r2
 8013d6c:	005b      	lsls	r3, r3, #1
 8013d6e:	4413      	add	r3, r2
 8013d70:	00db      	lsls	r3, r3, #3
 8013d72:	440b      	add	r3, r1
 8013d74:	2200      	movs	r2, #0
 8013d76:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8013d78:	68fb      	ldr	r3, [r7, #12]
 8013d7a:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 8013d7e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8013d82:	9300      	str	r3, [sp, #0]
 8013d84:	687b      	ldr	r3, [r7, #4]
 8013d86:	6939      	ldr	r1, [r7, #16]
 8013d88:	68f8      	ldr	r0, [r7, #12]
 8013d8a:	f001 ff97 	bl	8015cbc <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8013d8e:	6938      	ldr	r0, [r7, #16]
 8013d90:	f7f8 fd52 	bl	800c838 <pbuf_free>
  }
  return ERR_OK;
 8013d94:	2300      	movs	r3, #0
}
 8013d96:	4618      	mov	r0, r3
 8013d98:	3718      	adds	r7, #24
 8013d9a:	46bd      	mov	sp, r7
 8013d9c:	bd80      	pop	{r7, pc}
 8013d9e:	bf00      	nop
 8013da0:	0801a6a8 	.word	0x0801a6a8
 8013da4:	0801a7a0 	.word	0x0801a7a0
 8013da8:	0801a720 	.word	0x0801a720
 8013dac:	2000eba4 	.word	0x2000eba4

08013db0 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8013db0:	b580      	push	{r7, lr}
 8013db2:	b084      	sub	sp, #16
 8013db4:	af00      	add	r7, sp, #0
 8013db6:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013db8:	2300      	movs	r3, #0
 8013dba:	60fb      	str	r3, [r7, #12]
 8013dbc:	e01e      	b.n	8013dfc <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8013dbe:	4913      	ldr	r1, [pc, #76]	@ (8013e0c <etharp_cleanup_netif+0x5c>)
 8013dc0:	68fa      	ldr	r2, [r7, #12]
 8013dc2:	4613      	mov	r3, r2
 8013dc4:	005b      	lsls	r3, r3, #1
 8013dc6:	4413      	add	r3, r2
 8013dc8:	00db      	lsls	r3, r3, #3
 8013dca:	440b      	add	r3, r1
 8013dcc:	3314      	adds	r3, #20
 8013dce:	781b      	ldrb	r3, [r3, #0]
 8013dd0:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8013dd2:	7afb      	ldrb	r3, [r7, #11]
 8013dd4:	2b00      	cmp	r3, #0
 8013dd6:	d00e      	beq.n	8013df6 <etharp_cleanup_netif+0x46>
 8013dd8:	490c      	ldr	r1, [pc, #48]	@ (8013e0c <etharp_cleanup_netif+0x5c>)
 8013dda:	68fa      	ldr	r2, [r7, #12]
 8013ddc:	4613      	mov	r3, r2
 8013dde:	005b      	lsls	r3, r3, #1
 8013de0:	4413      	add	r3, r2
 8013de2:	00db      	lsls	r3, r3, #3
 8013de4:	440b      	add	r3, r1
 8013de6:	3308      	adds	r3, #8
 8013de8:	681b      	ldr	r3, [r3, #0]
 8013dea:	687a      	ldr	r2, [r7, #4]
 8013dec:	429a      	cmp	r2, r3
 8013dee:	d102      	bne.n	8013df6 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8013df0:	68f8      	ldr	r0, [r7, #12]
 8013df2:	f7ff fce5 	bl	80137c0 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013df6:	68fb      	ldr	r3, [r7, #12]
 8013df8:	3301      	adds	r3, #1
 8013dfa:	60fb      	str	r3, [r7, #12]
 8013dfc:	68fb      	ldr	r3, [r7, #12]
 8013dfe:	2b09      	cmp	r3, #9
 8013e00:	dddd      	ble.n	8013dbe <etharp_cleanup_netif+0xe>
    }
  }
}
 8013e02:	bf00      	nop
 8013e04:	bf00      	nop
 8013e06:	3710      	adds	r7, #16
 8013e08:	46bd      	mov	sp, r7
 8013e0a:	bd80      	pop	{r7, pc}
 8013e0c:	2000eba4 	.word	0x2000eba4

08013e10 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8013e10:	b5b0      	push	{r4, r5, r7, lr}
 8013e12:	b08a      	sub	sp, #40	@ 0x28
 8013e14:	af04      	add	r7, sp, #16
 8013e16:	6078      	str	r0, [r7, #4]
 8013e18:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8013e1a:	683b      	ldr	r3, [r7, #0]
 8013e1c:	2b00      	cmp	r3, #0
 8013e1e:	d107      	bne.n	8013e30 <etharp_input+0x20>
 8013e20:	4b3d      	ldr	r3, [pc, #244]	@ (8013f18 <etharp_input+0x108>)
 8013e22:	f240 228a 	movw	r2, #650	@ 0x28a
 8013e26:	493d      	ldr	r1, [pc, #244]	@ (8013f1c <etharp_input+0x10c>)
 8013e28:	483d      	ldr	r0, [pc, #244]	@ (8013f20 <etharp_input+0x110>)
 8013e2a:	f002 fa71 	bl	8016310 <iprintf>
 8013e2e:	e06f      	b.n	8013f10 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8013e30:	687b      	ldr	r3, [r7, #4]
 8013e32:	685b      	ldr	r3, [r3, #4]
 8013e34:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8013e36:	693b      	ldr	r3, [r7, #16]
 8013e38:	881b      	ldrh	r3, [r3, #0]
 8013e3a:	b29b      	uxth	r3, r3
 8013e3c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8013e40:	d10c      	bne.n	8013e5c <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8013e42:	693b      	ldr	r3, [r7, #16]
 8013e44:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8013e46:	2b06      	cmp	r3, #6
 8013e48:	d108      	bne.n	8013e5c <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8013e4a:	693b      	ldr	r3, [r7, #16]
 8013e4c:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8013e4e:	2b04      	cmp	r3, #4
 8013e50:	d104      	bne.n	8013e5c <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8013e52:	693b      	ldr	r3, [r7, #16]
 8013e54:	885b      	ldrh	r3, [r3, #2]
 8013e56:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8013e58:	2b08      	cmp	r3, #8
 8013e5a:	d003      	beq.n	8013e64 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8013e5c:	6878      	ldr	r0, [r7, #4]
 8013e5e:	f7f8 fceb 	bl	800c838 <pbuf_free>
    return;
 8013e62:	e055      	b.n	8013f10 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8013e64:	693b      	ldr	r3, [r7, #16]
 8013e66:	330e      	adds	r3, #14
 8013e68:	681b      	ldr	r3, [r3, #0]
 8013e6a:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8013e6c:	693b      	ldr	r3, [r7, #16]
 8013e6e:	3318      	adds	r3, #24
 8013e70:	681b      	ldr	r3, [r3, #0]
 8013e72:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8013e74:	683b      	ldr	r3, [r7, #0]
 8013e76:	3304      	adds	r3, #4
 8013e78:	681b      	ldr	r3, [r3, #0]
 8013e7a:	2b00      	cmp	r3, #0
 8013e7c:	d102      	bne.n	8013e84 <etharp_input+0x74>
    for_us = 0;
 8013e7e:	2300      	movs	r3, #0
 8013e80:	75fb      	strb	r3, [r7, #23]
 8013e82:	e009      	b.n	8013e98 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8013e84:	68ba      	ldr	r2, [r7, #8]
 8013e86:	683b      	ldr	r3, [r7, #0]
 8013e88:	3304      	adds	r3, #4
 8013e8a:	681b      	ldr	r3, [r3, #0]
 8013e8c:	429a      	cmp	r2, r3
 8013e8e:	bf0c      	ite	eq
 8013e90:	2301      	moveq	r3, #1
 8013e92:	2300      	movne	r3, #0
 8013e94:	b2db      	uxtb	r3, r3
 8013e96:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8013e98:	693b      	ldr	r3, [r7, #16]
 8013e9a:	f103 0208 	add.w	r2, r3, #8
 8013e9e:	7dfb      	ldrb	r3, [r7, #23]
 8013ea0:	2b00      	cmp	r3, #0
 8013ea2:	d001      	beq.n	8013ea8 <etharp_input+0x98>
 8013ea4:	2301      	movs	r3, #1
 8013ea6:	e000      	b.n	8013eaa <etharp_input+0x9a>
 8013ea8:	2302      	movs	r3, #2
 8013eaa:	f107 010c 	add.w	r1, r7, #12
 8013eae:	6838      	ldr	r0, [r7, #0]
 8013eb0:	f7ff fed8 	bl	8013c64 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8013eb4:	693b      	ldr	r3, [r7, #16]
 8013eb6:	88db      	ldrh	r3, [r3, #6]
 8013eb8:	b29b      	uxth	r3, r3
 8013eba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8013ebe:	d003      	beq.n	8013ec8 <etharp_input+0xb8>
 8013ec0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8013ec4:	d01e      	beq.n	8013f04 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8013ec6:	e020      	b.n	8013f0a <etharp_input+0xfa>
      if (for_us) {
 8013ec8:	7dfb      	ldrb	r3, [r7, #23]
 8013eca:	2b00      	cmp	r3, #0
 8013ecc:	d01c      	beq.n	8013f08 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8013ece:	683b      	ldr	r3, [r7, #0]
 8013ed0:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 8013ed4:	693b      	ldr	r3, [r7, #16]
 8013ed6:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8013eda:	683b      	ldr	r3, [r7, #0]
 8013edc:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 8013ee0:	683b      	ldr	r3, [r7, #0]
 8013ee2:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8013ee4:	693a      	ldr	r2, [r7, #16]
 8013ee6:	3208      	adds	r2, #8
        etharp_raw(netif,
 8013ee8:	2102      	movs	r1, #2
 8013eea:	9103      	str	r1, [sp, #12]
 8013eec:	f107 010c 	add.w	r1, r7, #12
 8013ef0:	9102      	str	r1, [sp, #8]
 8013ef2:	9201      	str	r2, [sp, #4]
 8013ef4:	9300      	str	r3, [sp, #0]
 8013ef6:	462b      	mov	r3, r5
 8013ef8:	4622      	mov	r2, r4
 8013efa:	4601      	mov	r1, r0
 8013efc:	6838      	ldr	r0, [r7, #0]
 8013efe:	f000 faeb 	bl	80144d8 <etharp_raw>
      break;
 8013f02:	e001      	b.n	8013f08 <etharp_input+0xf8>
      break;
 8013f04:	bf00      	nop
 8013f06:	e000      	b.n	8013f0a <etharp_input+0xfa>
      break;
 8013f08:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8013f0a:	6878      	ldr	r0, [r7, #4]
 8013f0c:	f7f8 fc94 	bl	800c838 <pbuf_free>
}
 8013f10:	3718      	adds	r7, #24
 8013f12:	46bd      	mov	sp, r7
 8013f14:	bdb0      	pop	{r4, r5, r7, pc}
 8013f16:	bf00      	nop
 8013f18:	0801a6a8 	.word	0x0801a6a8
 8013f1c:	0801a7f8 	.word	0x0801a7f8
 8013f20:	0801a720 	.word	0x0801a720

08013f24 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8013f24:	b580      	push	{r7, lr}
 8013f26:	b086      	sub	sp, #24
 8013f28:	af02      	add	r7, sp, #8
 8013f2a:	60f8      	str	r0, [r7, #12]
 8013f2c:	60b9      	str	r1, [r7, #8]
 8013f2e:	4613      	mov	r3, r2
 8013f30:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8013f32:	79fa      	ldrb	r2, [r7, #7]
 8013f34:	4944      	ldr	r1, [pc, #272]	@ (8014048 <etharp_output_to_arp_index+0x124>)
 8013f36:	4613      	mov	r3, r2
 8013f38:	005b      	lsls	r3, r3, #1
 8013f3a:	4413      	add	r3, r2
 8013f3c:	00db      	lsls	r3, r3, #3
 8013f3e:	440b      	add	r3, r1
 8013f40:	3314      	adds	r3, #20
 8013f42:	781b      	ldrb	r3, [r3, #0]
 8013f44:	2b01      	cmp	r3, #1
 8013f46:	d806      	bhi.n	8013f56 <etharp_output_to_arp_index+0x32>
 8013f48:	4b40      	ldr	r3, [pc, #256]	@ (801404c <etharp_output_to_arp_index+0x128>)
 8013f4a:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8013f4e:	4940      	ldr	r1, [pc, #256]	@ (8014050 <etharp_output_to_arp_index+0x12c>)
 8013f50:	4840      	ldr	r0, [pc, #256]	@ (8014054 <etharp_output_to_arp_index+0x130>)
 8013f52:	f002 f9dd 	bl	8016310 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8013f56:	79fa      	ldrb	r2, [r7, #7]
 8013f58:	493b      	ldr	r1, [pc, #236]	@ (8014048 <etharp_output_to_arp_index+0x124>)
 8013f5a:	4613      	mov	r3, r2
 8013f5c:	005b      	lsls	r3, r3, #1
 8013f5e:	4413      	add	r3, r2
 8013f60:	00db      	lsls	r3, r3, #3
 8013f62:	440b      	add	r3, r1
 8013f64:	3314      	adds	r3, #20
 8013f66:	781b      	ldrb	r3, [r3, #0]
 8013f68:	2b02      	cmp	r3, #2
 8013f6a:	d153      	bne.n	8014014 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8013f6c:	79fa      	ldrb	r2, [r7, #7]
 8013f6e:	4936      	ldr	r1, [pc, #216]	@ (8014048 <etharp_output_to_arp_index+0x124>)
 8013f70:	4613      	mov	r3, r2
 8013f72:	005b      	lsls	r3, r3, #1
 8013f74:	4413      	add	r3, r2
 8013f76:	00db      	lsls	r3, r3, #3
 8013f78:	440b      	add	r3, r1
 8013f7a:	3312      	adds	r3, #18
 8013f7c:	881b      	ldrh	r3, [r3, #0]
 8013f7e:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 8013f82:	d919      	bls.n	8013fb8 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8013f84:	79fa      	ldrb	r2, [r7, #7]
 8013f86:	4613      	mov	r3, r2
 8013f88:	005b      	lsls	r3, r3, #1
 8013f8a:	4413      	add	r3, r2
 8013f8c:	00db      	lsls	r3, r3, #3
 8013f8e:	4a2e      	ldr	r2, [pc, #184]	@ (8014048 <etharp_output_to_arp_index+0x124>)
 8013f90:	4413      	add	r3, r2
 8013f92:	3304      	adds	r3, #4
 8013f94:	4619      	mov	r1, r3
 8013f96:	68f8      	ldr	r0, [r7, #12]
 8013f98:	f000 fb4c 	bl	8014634 <etharp_request>
 8013f9c:	4603      	mov	r3, r0
 8013f9e:	2b00      	cmp	r3, #0
 8013fa0:	d138      	bne.n	8014014 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8013fa2:	79fa      	ldrb	r2, [r7, #7]
 8013fa4:	4928      	ldr	r1, [pc, #160]	@ (8014048 <etharp_output_to_arp_index+0x124>)
 8013fa6:	4613      	mov	r3, r2
 8013fa8:	005b      	lsls	r3, r3, #1
 8013faa:	4413      	add	r3, r2
 8013fac:	00db      	lsls	r3, r3, #3
 8013fae:	440b      	add	r3, r1
 8013fb0:	3314      	adds	r3, #20
 8013fb2:	2203      	movs	r2, #3
 8013fb4:	701a      	strb	r2, [r3, #0]
 8013fb6:	e02d      	b.n	8014014 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8013fb8:	79fa      	ldrb	r2, [r7, #7]
 8013fba:	4923      	ldr	r1, [pc, #140]	@ (8014048 <etharp_output_to_arp_index+0x124>)
 8013fbc:	4613      	mov	r3, r2
 8013fbe:	005b      	lsls	r3, r3, #1
 8013fc0:	4413      	add	r3, r2
 8013fc2:	00db      	lsls	r3, r3, #3
 8013fc4:	440b      	add	r3, r1
 8013fc6:	3312      	adds	r3, #18
 8013fc8:	881b      	ldrh	r3, [r3, #0]
 8013fca:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 8013fce:	d321      	bcc.n	8014014 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8013fd0:	79fa      	ldrb	r2, [r7, #7]
 8013fd2:	4613      	mov	r3, r2
 8013fd4:	005b      	lsls	r3, r3, #1
 8013fd6:	4413      	add	r3, r2
 8013fd8:	00db      	lsls	r3, r3, #3
 8013fda:	4a1b      	ldr	r2, [pc, #108]	@ (8014048 <etharp_output_to_arp_index+0x124>)
 8013fdc:	4413      	add	r3, r2
 8013fde:	1d19      	adds	r1, r3, #4
 8013fe0:	79fa      	ldrb	r2, [r7, #7]
 8013fe2:	4613      	mov	r3, r2
 8013fe4:	005b      	lsls	r3, r3, #1
 8013fe6:	4413      	add	r3, r2
 8013fe8:	00db      	lsls	r3, r3, #3
 8013fea:	3308      	adds	r3, #8
 8013fec:	4a16      	ldr	r2, [pc, #88]	@ (8014048 <etharp_output_to_arp_index+0x124>)
 8013fee:	4413      	add	r3, r2
 8013ff0:	3304      	adds	r3, #4
 8013ff2:	461a      	mov	r2, r3
 8013ff4:	68f8      	ldr	r0, [r7, #12]
 8013ff6:	f000 fafb 	bl	80145f0 <etharp_request_dst>
 8013ffa:	4603      	mov	r3, r0
 8013ffc:	2b00      	cmp	r3, #0
 8013ffe:	d109      	bne.n	8014014 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8014000:	79fa      	ldrb	r2, [r7, #7]
 8014002:	4911      	ldr	r1, [pc, #68]	@ (8014048 <etharp_output_to_arp_index+0x124>)
 8014004:	4613      	mov	r3, r2
 8014006:	005b      	lsls	r3, r3, #1
 8014008:	4413      	add	r3, r2
 801400a:	00db      	lsls	r3, r3, #3
 801400c:	440b      	add	r3, r1
 801400e:	3314      	adds	r3, #20
 8014010:	2203      	movs	r2, #3
 8014012:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8014014:	68fb      	ldr	r3, [r7, #12]
 8014016:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 801401a:	79fa      	ldrb	r2, [r7, #7]
 801401c:	4613      	mov	r3, r2
 801401e:	005b      	lsls	r3, r3, #1
 8014020:	4413      	add	r3, r2
 8014022:	00db      	lsls	r3, r3, #3
 8014024:	3308      	adds	r3, #8
 8014026:	4a08      	ldr	r2, [pc, #32]	@ (8014048 <etharp_output_to_arp_index+0x124>)
 8014028:	4413      	add	r3, r2
 801402a:	3304      	adds	r3, #4
 801402c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8014030:	9200      	str	r2, [sp, #0]
 8014032:	460a      	mov	r2, r1
 8014034:	68b9      	ldr	r1, [r7, #8]
 8014036:	68f8      	ldr	r0, [r7, #12]
 8014038:	f001 fe40 	bl	8015cbc <ethernet_output>
 801403c:	4603      	mov	r3, r0
}
 801403e:	4618      	mov	r0, r3
 8014040:	3710      	adds	r7, #16
 8014042:	46bd      	mov	sp, r7
 8014044:	bd80      	pop	{r7, pc}
 8014046:	bf00      	nop
 8014048:	2000eba4 	.word	0x2000eba4
 801404c:	0801a6a8 	.word	0x0801a6a8
 8014050:	0801a818 	.word	0x0801a818
 8014054:	0801a720 	.word	0x0801a720

08014058 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8014058:	b580      	push	{r7, lr}
 801405a:	b08a      	sub	sp, #40	@ 0x28
 801405c:	af02      	add	r7, sp, #8
 801405e:	60f8      	str	r0, [r7, #12]
 8014060:	60b9      	str	r1, [r7, #8]
 8014062:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8014064:	687b      	ldr	r3, [r7, #4]
 8014066:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8014068:	68fb      	ldr	r3, [r7, #12]
 801406a:	2b00      	cmp	r3, #0
 801406c:	d106      	bne.n	801407c <etharp_output+0x24>
 801406e:	4b73      	ldr	r3, [pc, #460]	@ (801423c <etharp_output+0x1e4>)
 8014070:	f240 321e 	movw	r2, #798	@ 0x31e
 8014074:	4972      	ldr	r1, [pc, #456]	@ (8014240 <etharp_output+0x1e8>)
 8014076:	4873      	ldr	r0, [pc, #460]	@ (8014244 <etharp_output+0x1ec>)
 8014078:	f002 f94a 	bl	8016310 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 801407c:	68bb      	ldr	r3, [r7, #8]
 801407e:	2b00      	cmp	r3, #0
 8014080:	d106      	bne.n	8014090 <etharp_output+0x38>
 8014082:	4b6e      	ldr	r3, [pc, #440]	@ (801423c <etharp_output+0x1e4>)
 8014084:	f240 321f 	movw	r2, #799	@ 0x31f
 8014088:	496f      	ldr	r1, [pc, #444]	@ (8014248 <etharp_output+0x1f0>)
 801408a:	486e      	ldr	r0, [pc, #440]	@ (8014244 <etharp_output+0x1ec>)
 801408c:	f002 f940 	bl	8016310 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8014090:	687b      	ldr	r3, [r7, #4]
 8014092:	2b00      	cmp	r3, #0
 8014094:	d106      	bne.n	80140a4 <etharp_output+0x4c>
 8014096:	4b69      	ldr	r3, [pc, #420]	@ (801423c <etharp_output+0x1e4>)
 8014098:	f44f 7248 	mov.w	r2, #800	@ 0x320
 801409c:	496b      	ldr	r1, [pc, #428]	@ (801424c <etharp_output+0x1f4>)
 801409e:	4869      	ldr	r0, [pc, #420]	@ (8014244 <etharp_output+0x1ec>)
 80140a0:	f002 f936 	bl	8016310 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 80140a4:	687b      	ldr	r3, [r7, #4]
 80140a6:	681b      	ldr	r3, [r3, #0]
 80140a8:	68f9      	ldr	r1, [r7, #12]
 80140aa:	4618      	mov	r0, r3
 80140ac:	f000 fef8 	bl	8014ea0 <ip4_addr_isbroadcast_u32>
 80140b0:	4603      	mov	r3, r0
 80140b2:	2b00      	cmp	r3, #0
 80140b4:	d002      	beq.n	80140bc <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 80140b6:	4b66      	ldr	r3, [pc, #408]	@ (8014250 <etharp_output+0x1f8>)
 80140b8:	61fb      	str	r3, [r7, #28]
 80140ba:	e0af      	b.n	801421c <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 80140bc:	687b      	ldr	r3, [r7, #4]
 80140be:	681b      	ldr	r3, [r3, #0]
 80140c0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80140c4:	2be0      	cmp	r3, #224	@ 0xe0
 80140c6:	d118      	bne.n	80140fa <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 80140c8:	2301      	movs	r3, #1
 80140ca:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 80140cc:	2300      	movs	r3, #0
 80140ce:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 80140d0:	235e      	movs	r3, #94	@ 0x5e
 80140d2:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 80140d4:	687b      	ldr	r3, [r7, #4]
 80140d6:	3301      	adds	r3, #1
 80140d8:	781b      	ldrb	r3, [r3, #0]
 80140da:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80140de:	b2db      	uxtb	r3, r3
 80140e0:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 80140e2:	687b      	ldr	r3, [r7, #4]
 80140e4:	3302      	adds	r3, #2
 80140e6:	781b      	ldrb	r3, [r3, #0]
 80140e8:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 80140ea:	687b      	ldr	r3, [r7, #4]
 80140ec:	3303      	adds	r3, #3
 80140ee:	781b      	ldrb	r3, [r3, #0]
 80140f0:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 80140f2:	f107 0310 	add.w	r3, r7, #16
 80140f6:	61fb      	str	r3, [r7, #28]
 80140f8:	e090      	b.n	801421c <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80140fa:	687b      	ldr	r3, [r7, #4]
 80140fc:	681a      	ldr	r2, [r3, #0]
 80140fe:	68fb      	ldr	r3, [r7, #12]
 8014100:	3304      	adds	r3, #4
 8014102:	681b      	ldr	r3, [r3, #0]
 8014104:	405a      	eors	r2, r3
 8014106:	68fb      	ldr	r3, [r7, #12]
 8014108:	3308      	adds	r3, #8
 801410a:	681b      	ldr	r3, [r3, #0]
 801410c:	4013      	ands	r3, r2
 801410e:	2b00      	cmp	r3, #0
 8014110:	d012      	beq.n	8014138 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8014112:	687b      	ldr	r3, [r7, #4]
 8014114:	681b      	ldr	r3, [r3, #0]
 8014116:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8014118:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 801411c:	4293      	cmp	r3, r2
 801411e:	d00b      	beq.n	8014138 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8014120:	68fb      	ldr	r3, [r7, #12]
 8014122:	330c      	adds	r3, #12
 8014124:	681b      	ldr	r3, [r3, #0]
 8014126:	2b00      	cmp	r3, #0
 8014128:	d003      	beq.n	8014132 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801412a:	68fb      	ldr	r3, [r7, #12]
 801412c:	330c      	adds	r3, #12
 801412e:	61bb      	str	r3, [r7, #24]
 8014130:	e002      	b.n	8014138 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8014132:	f06f 0303 	mvn.w	r3, #3
 8014136:	e07d      	b.n	8014234 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8014138:	4b46      	ldr	r3, [pc, #280]	@ (8014254 <etharp_output+0x1fc>)
 801413a:	781b      	ldrb	r3, [r3, #0]
 801413c:	4619      	mov	r1, r3
 801413e:	4a46      	ldr	r2, [pc, #280]	@ (8014258 <etharp_output+0x200>)
 8014140:	460b      	mov	r3, r1
 8014142:	005b      	lsls	r3, r3, #1
 8014144:	440b      	add	r3, r1
 8014146:	00db      	lsls	r3, r3, #3
 8014148:	4413      	add	r3, r2
 801414a:	3314      	adds	r3, #20
 801414c:	781b      	ldrb	r3, [r3, #0]
 801414e:	2b01      	cmp	r3, #1
 8014150:	d925      	bls.n	801419e <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8014152:	4b40      	ldr	r3, [pc, #256]	@ (8014254 <etharp_output+0x1fc>)
 8014154:	781b      	ldrb	r3, [r3, #0]
 8014156:	4619      	mov	r1, r3
 8014158:	4a3f      	ldr	r2, [pc, #252]	@ (8014258 <etharp_output+0x200>)
 801415a:	460b      	mov	r3, r1
 801415c:	005b      	lsls	r3, r3, #1
 801415e:	440b      	add	r3, r1
 8014160:	00db      	lsls	r3, r3, #3
 8014162:	4413      	add	r3, r2
 8014164:	3308      	adds	r3, #8
 8014166:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8014168:	68fa      	ldr	r2, [r7, #12]
 801416a:	429a      	cmp	r2, r3
 801416c:	d117      	bne.n	801419e <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801416e:	69bb      	ldr	r3, [r7, #24]
 8014170:	681a      	ldr	r2, [r3, #0]
 8014172:	4b38      	ldr	r3, [pc, #224]	@ (8014254 <etharp_output+0x1fc>)
 8014174:	781b      	ldrb	r3, [r3, #0]
 8014176:	4618      	mov	r0, r3
 8014178:	4937      	ldr	r1, [pc, #220]	@ (8014258 <etharp_output+0x200>)
 801417a:	4603      	mov	r3, r0
 801417c:	005b      	lsls	r3, r3, #1
 801417e:	4403      	add	r3, r0
 8014180:	00db      	lsls	r3, r3, #3
 8014182:	440b      	add	r3, r1
 8014184:	3304      	adds	r3, #4
 8014186:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8014188:	429a      	cmp	r2, r3
 801418a:	d108      	bne.n	801419e <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 801418c:	4b31      	ldr	r3, [pc, #196]	@ (8014254 <etharp_output+0x1fc>)
 801418e:	781b      	ldrb	r3, [r3, #0]
 8014190:	461a      	mov	r2, r3
 8014192:	68b9      	ldr	r1, [r7, #8]
 8014194:	68f8      	ldr	r0, [r7, #12]
 8014196:	f7ff fec5 	bl	8013f24 <etharp_output_to_arp_index>
 801419a:	4603      	mov	r3, r0
 801419c:	e04a      	b.n	8014234 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801419e:	2300      	movs	r3, #0
 80141a0:	75fb      	strb	r3, [r7, #23]
 80141a2:	e031      	b.n	8014208 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80141a4:	7dfa      	ldrb	r2, [r7, #23]
 80141a6:	492c      	ldr	r1, [pc, #176]	@ (8014258 <etharp_output+0x200>)
 80141a8:	4613      	mov	r3, r2
 80141aa:	005b      	lsls	r3, r3, #1
 80141ac:	4413      	add	r3, r2
 80141ae:	00db      	lsls	r3, r3, #3
 80141b0:	440b      	add	r3, r1
 80141b2:	3314      	adds	r3, #20
 80141b4:	781b      	ldrb	r3, [r3, #0]
 80141b6:	2b01      	cmp	r3, #1
 80141b8:	d923      	bls.n	8014202 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 80141ba:	7dfa      	ldrb	r2, [r7, #23]
 80141bc:	4926      	ldr	r1, [pc, #152]	@ (8014258 <etharp_output+0x200>)
 80141be:	4613      	mov	r3, r2
 80141c0:	005b      	lsls	r3, r3, #1
 80141c2:	4413      	add	r3, r2
 80141c4:	00db      	lsls	r3, r3, #3
 80141c6:	440b      	add	r3, r1
 80141c8:	3308      	adds	r3, #8
 80141ca:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80141cc:	68fa      	ldr	r2, [r7, #12]
 80141ce:	429a      	cmp	r2, r3
 80141d0:	d117      	bne.n	8014202 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 80141d2:	69bb      	ldr	r3, [r7, #24]
 80141d4:	6819      	ldr	r1, [r3, #0]
 80141d6:	7dfa      	ldrb	r2, [r7, #23]
 80141d8:	481f      	ldr	r0, [pc, #124]	@ (8014258 <etharp_output+0x200>)
 80141da:	4613      	mov	r3, r2
 80141dc:	005b      	lsls	r3, r3, #1
 80141de:	4413      	add	r3, r2
 80141e0:	00db      	lsls	r3, r3, #3
 80141e2:	4403      	add	r3, r0
 80141e4:	3304      	adds	r3, #4
 80141e6:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 80141e8:	4299      	cmp	r1, r3
 80141ea:	d10a      	bne.n	8014202 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 80141ec:	4a19      	ldr	r2, [pc, #100]	@ (8014254 <etharp_output+0x1fc>)
 80141ee:	7dfb      	ldrb	r3, [r7, #23]
 80141f0:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 80141f2:	7dfb      	ldrb	r3, [r7, #23]
 80141f4:	461a      	mov	r2, r3
 80141f6:	68b9      	ldr	r1, [r7, #8]
 80141f8:	68f8      	ldr	r0, [r7, #12]
 80141fa:	f7ff fe93 	bl	8013f24 <etharp_output_to_arp_index>
 80141fe:	4603      	mov	r3, r0
 8014200:	e018      	b.n	8014234 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8014202:	7dfb      	ldrb	r3, [r7, #23]
 8014204:	3301      	adds	r3, #1
 8014206:	75fb      	strb	r3, [r7, #23]
 8014208:	7dfb      	ldrb	r3, [r7, #23]
 801420a:	2b09      	cmp	r3, #9
 801420c:	d9ca      	bls.n	80141a4 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801420e:	68ba      	ldr	r2, [r7, #8]
 8014210:	69b9      	ldr	r1, [r7, #24]
 8014212:	68f8      	ldr	r0, [r7, #12]
 8014214:	f000 f822 	bl	801425c <etharp_query>
 8014218:	4603      	mov	r3, r0
 801421a:	e00b      	b.n	8014234 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 801421c:	68fb      	ldr	r3, [r7, #12]
 801421e:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 8014222:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8014226:	9300      	str	r3, [sp, #0]
 8014228:	69fb      	ldr	r3, [r7, #28]
 801422a:	68b9      	ldr	r1, [r7, #8]
 801422c:	68f8      	ldr	r0, [r7, #12]
 801422e:	f001 fd45 	bl	8015cbc <ethernet_output>
 8014232:	4603      	mov	r3, r0
}
 8014234:	4618      	mov	r0, r3
 8014236:	3720      	adds	r7, #32
 8014238:	46bd      	mov	sp, r7
 801423a:	bd80      	pop	{r7, pc}
 801423c:	0801a6a8 	.word	0x0801a6a8
 8014240:	0801a7f8 	.word	0x0801a7f8
 8014244:	0801a720 	.word	0x0801a720
 8014248:	0801a848 	.word	0x0801a848
 801424c:	0801a7e8 	.word	0x0801a7e8
 8014250:	0801aea8 	.word	0x0801aea8
 8014254:	2000ec94 	.word	0x2000ec94
 8014258:	2000eba4 	.word	0x2000eba4

0801425c <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 801425c:	b580      	push	{r7, lr}
 801425e:	b08c      	sub	sp, #48	@ 0x30
 8014260:	af02      	add	r7, sp, #8
 8014262:	60f8      	str	r0, [r7, #12]
 8014264:	60b9      	str	r1, [r7, #8]
 8014266:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8014268:	68fb      	ldr	r3, [r7, #12]
 801426a:	3326      	adds	r3, #38	@ 0x26
 801426c:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801426e:	23ff      	movs	r3, #255	@ 0xff
 8014270:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 8014274:	2300      	movs	r3, #0
 8014276:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8014278:	68bb      	ldr	r3, [r7, #8]
 801427a:	681b      	ldr	r3, [r3, #0]
 801427c:	68f9      	ldr	r1, [r7, #12]
 801427e:	4618      	mov	r0, r3
 8014280:	f000 fe0e 	bl	8014ea0 <ip4_addr_isbroadcast_u32>
 8014284:	4603      	mov	r3, r0
 8014286:	2b00      	cmp	r3, #0
 8014288:	d10c      	bne.n	80142a4 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801428a:	68bb      	ldr	r3, [r7, #8]
 801428c:	681b      	ldr	r3, [r3, #0]
 801428e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8014292:	2be0      	cmp	r3, #224	@ 0xe0
 8014294:	d006      	beq.n	80142a4 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8014296:	68bb      	ldr	r3, [r7, #8]
 8014298:	2b00      	cmp	r3, #0
 801429a:	d003      	beq.n	80142a4 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 801429c:	68bb      	ldr	r3, [r7, #8]
 801429e:	681b      	ldr	r3, [r3, #0]
 80142a0:	2b00      	cmp	r3, #0
 80142a2:	d102      	bne.n	80142aa <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80142a4:	f06f 030f 	mvn.w	r3, #15
 80142a8:	e101      	b.n	80144ae <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 80142aa:	68fa      	ldr	r2, [r7, #12]
 80142ac:	2101      	movs	r1, #1
 80142ae:	68b8      	ldr	r0, [r7, #8]
 80142b0:	f7ff fb60 	bl	8013974 <etharp_find_entry>
 80142b4:	4603      	mov	r3, r0
 80142b6:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 80142b8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80142bc:	2b00      	cmp	r3, #0
 80142be:	da02      	bge.n	80142c6 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 80142c0:	8a7b      	ldrh	r3, [r7, #18]
 80142c2:	b25b      	sxtb	r3, r3
 80142c4:	e0f3      	b.n	80144ae <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 80142c6:	8a7b      	ldrh	r3, [r7, #18]
 80142c8:	2b7e      	cmp	r3, #126	@ 0x7e
 80142ca:	d906      	bls.n	80142da <etharp_query+0x7e>
 80142cc:	4b7a      	ldr	r3, [pc, #488]	@ (80144b8 <etharp_query+0x25c>)
 80142ce:	f240 32c1 	movw	r2, #961	@ 0x3c1
 80142d2:	497a      	ldr	r1, [pc, #488]	@ (80144bc <etharp_query+0x260>)
 80142d4:	487a      	ldr	r0, [pc, #488]	@ (80144c0 <etharp_query+0x264>)
 80142d6:	f002 f81b 	bl	8016310 <iprintf>
  i = (netif_addr_idx_t)i_err;
 80142da:	8a7b      	ldrh	r3, [r7, #18]
 80142dc:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 80142de:	7c7a      	ldrb	r2, [r7, #17]
 80142e0:	4978      	ldr	r1, [pc, #480]	@ (80144c4 <etharp_query+0x268>)
 80142e2:	4613      	mov	r3, r2
 80142e4:	005b      	lsls	r3, r3, #1
 80142e6:	4413      	add	r3, r2
 80142e8:	00db      	lsls	r3, r3, #3
 80142ea:	440b      	add	r3, r1
 80142ec:	3314      	adds	r3, #20
 80142ee:	781b      	ldrb	r3, [r3, #0]
 80142f0:	2b00      	cmp	r3, #0
 80142f2:	d115      	bne.n	8014320 <etharp_query+0xc4>
    is_new_entry = 1;
 80142f4:	2301      	movs	r3, #1
 80142f6:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 80142f8:	7c7a      	ldrb	r2, [r7, #17]
 80142fa:	4972      	ldr	r1, [pc, #456]	@ (80144c4 <etharp_query+0x268>)
 80142fc:	4613      	mov	r3, r2
 80142fe:	005b      	lsls	r3, r3, #1
 8014300:	4413      	add	r3, r2
 8014302:	00db      	lsls	r3, r3, #3
 8014304:	440b      	add	r3, r1
 8014306:	3314      	adds	r3, #20
 8014308:	2201      	movs	r2, #1
 801430a:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 801430c:	7c7a      	ldrb	r2, [r7, #17]
 801430e:	496d      	ldr	r1, [pc, #436]	@ (80144c4 <etharp_query+0x268>)
 8014310:	4613      	mov	r3, r2
 8014312:	005b      	lsls	r3, r3, #1
 8014314:	4413      	add	r3, r2
 8014316:	00db      	lsls	r3, r3, #3
 8014318:	440b      	add	r3, r1
 801431a:	3308      	adds	r3, #8
 801431c:	68fa      	ldr	r2, [r7, #12]
 801431e:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8014320:	7c7a      	ldrb	r2, [r7, #17]
 8014322:	4968      	ldr	r1, [pc, #416]	@ (80144c4 <etharp_query+0x268>)
 8014324:	4613      	mov	r3, r2
 8014326:	005b      	lsls	r3, r3, #1
 8014328:	4413      	add	r3, r2
 801432a:	00db      	lsls	r3, r3, #3
 801432c:	440b      	add	r3, r1
 801432e:	3314      	adds	r3, #20
 8014330:	781b      	ldrb	r3, [r3, #0]
 8014332:	2b01      	cmp	r3, #1
 8014334:	d011      	beq.n	801435a <etharp_query+0xfe>
 8014336:	7c7a      	ldrb	r2, [r7, #17]
 8014338:	4962      	ldr	r1, [pc, #392]	@ (80144c4 <etharp_query+0x268>)
 801433a:	4613      	mov	r3, r2
 801433c:	005b      	lsls	r3, r3, #1
 801433e:	4413      	add	r3, r2
 8014340:	00db      	lsls	r3, r3, #3
 8014342:	440b      	add	r3, r1
 8014344:	3314      	adds	r3, #20
 8014346:	781b      	ldrb	r3, [r3, #0]
 8014348:	2b01      	cmp	r3, #1
 801434a:	d806      	bhi.n	801435a <etharp_query+0xfe>
 801434c:	4b5a      	ldr	r3, [pc, #360]	@ (80144b8 <etharp_query+0x25c>)
 801434e:	f240 32cd 	movw	r2, #973	@ 0x3cd
 8014352:	495d      	ldr	r1, [pc, #372]	@ (80144c8 <etharp_query+0x26c>)
 8014354:	485a      	ldr	r0, [pc, #360]	@ (80144c0 <etharp_query+0x264>)
 8014356:	f001 ffdb 	bl	8016310 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801435a:	6a3b      	ldr	r3, [r7, #32]
 801435c:	2b00      	cmp	r3, #0
 801435e:	d102      	bne.n	8014366 <etharp_query+0x10a>
 8014360:	687b      	ldr	r3, [r7, #4]
 8014362:	2b00      	cmp	r3, #0
 8014364:	d10c      	bne.n	8014380 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8014366:	68b9      	ldr	r1, [r7, #8]
 8014368:	68f8      	ldr	r0, [r7, #12]
 801436a:	f000 f963 	bl	8014634 <etharp_request>
 801436e:	4603      	mov	r3, r0
 8014370:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8014374:	687b      	ldr	r3, [r7, #4]
 8014376:	2b00      	cmp	r3, #0
 8014378:	d102      	bne.n	8014380 <etharp_query+0x124>
      return result;
 801437a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 801437e:	e096      	b.n	80144ae <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8014380:	687b      	ldr	r3, [r7, #4]
 8014382:	2b00      	cmp	r3, #0
 8014384:	d106      	bne.n	8014394 <etharp_query+0x138>
 8014386:	4b4c      	ldr	r3, [pc, #304]	@ (80144b8 <etharp_query+0x25c>)
 8014388:	f240 32e1 	movw	r2, #993	@ 0x3e1
 801438c:	494f      	ldr	r1, [pc, #316]	@ (80144cc <etharp_query+0x270>)
 801438e:	484c      	ldr	r0, [pc, #304]	@ (80144c0 <etharp_query+0x264>)
 8014390:	f001 ffbe 	bl	8016310 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8014394:	7c7a      	ldrb	r2, [r7, #17]
 8014396:	494b      	ldr	r1, [pc, #300]	@ (80144c4 <etharp_query+0x268>)
 8014398:	4613      	mov	r3, r2
 801439a:	005b      	lsls	r3, r3, #1
 801439c:	4413      	add	r3, r2
 801439e:	00db      	lsls	r3, r3, #3
 80143a0:	440b      	add	r3, r1
 80143a2:	3314      	adds	r3, #20
 80143a4:	781b      	ldrb	r3, [r3, #0]
 80143a6:	2b01      	cmp	r3, #1
 80143a8:	d917      	bls.n	80143da <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 80143aa:	4a49      	ldr	r2, [pc, #292]	@ (80144d0 <etharp_query+0x274>)
 80143ac:	7c7b      	ldrb	r3, [r7, #17]
 80143ae:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 80143b0:	7c7a      	ldrb	r2, [r7, #17]
 80143b2:	4613      	mov	r3, r2
 80143b4:	005b      	lsls	r3, r3, #1
 80143b6:	4413      	add	r3, r2
 80143b8:	00db      	lsls	r3, r3, #3
 80143ba:	3308      	adds	r3, #8
 80143bc:	4a41      	ldr	r2, [pc, #260]	@ (80144c4 <etharp_query+0x268>)
 80143be:	4413      	add	r3, r2
 80143c0:	3304      	adds	r3, #4
 80143c2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80143c6:	9200      	str	r2, [sp, #0]
 80143c8:	697a      	ldr	r2, [r7, #20]
 80143ca:	6879      	ldr	r1, [r7, #4]
 80143cc:	68f8      	ldr	r0, [r7, #12]
 80143ce:	f001 fc75 	bl	8015cbc <ethernet_output>
 80143d2:	4603      	mov	r3, r0
 80143d4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80143d8:	e067      	b.n	80144aa <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80143da:	7c7a      	ldrb	r2, [r7, #17]
 80143dc:	4939      	ldr	r1, [pc, #228]	@ (80144c4 <etharp_query+0x268>)
 80143de:	4613      	mov	r3, r2
 80143e0:	005b      	lsls	r3, r3, #1
 80143e2:	4413      	add	r3, r2
 80143e4:	00db      	lsls	r3, r3, #3
 80143e6:	440b      	add	r3, r1
 80143e8:	3314      	adds	r3, #20
 80143ea:	781b      	ldrb	r3, [r3, #0]
 80143ec:	2b01      	cmp	r3, #1
 80143ee:	d15c      	bne.n	80144aa <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 80143f0:	2300      	movs	r3, #0
 80143f2:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 80143f4:	687b      	ldr	r3, [r7, #4]
 80143f6:	61fb      	str	r3, [r7, #28]
    while (p) {
 80143f8:	e01c      	b.n	8014434 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 80143fa:	69fb      	ldr	r3, [r7, #28]
 80143fc:	895a      	ldrh	r2, [r3, #10]
 80143fe:	69fb      	ldr	r3, [r7, #28]
 8014400:	891b      	ldrh	r3, [r3, #8]
 8014402:	429a      	cmp	r2, r3
 8014404:	d10a      	bne.n	801441c <etharp_query+0x1c0>
 8014406:	69fb      	ldr	r3, [r7, #28]
 8014408:	681b      	ldr	r3, [r3, #0]
 801440a:	2b00      	cmp	r3, #0
 801440c:	d006      	beq.n	801441c <etharp_query+0x1c0>
 801440e:	4b2a      	ldr	r3, [pc, #168]	@ (80144b8 <etharp_query+0x25c>)
 8014410:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 8014414:	492f      	ldr	r1, [pc, #188]	@ (80144d4 <etharp_query+0x278>)
 8014416:	482a      	ldr	r0, [pc, #168]	@ (80144c0 <etharp_query+0x264>)
 8014418:	f001 ff7a 	bl	8016310 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 801441c:	69fb      	ldr	r3, [r7, #28]
 801441e:	7b1b      	ldrb	r3, [r3, #12]
 8014420:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8014424:	2b00      	cmp	r3, #0
 8014426:	d002      	beq.n	801442e <etharp_query+0x1d2>
        copy_needed = 1;
 8014428:	2301      	movs	r3, #1
 801442a:	61bb      	str	r3, [r7, #24]
        break;
 801442c:	e005      	b.n	801443a <etharp_query+0x1de>
      }
      p = p->next;
 801442e:	69fb      	ldr	r3, [r7, #28]
 8014430:	681b      	ldr	r3, [r3, #0]
 8014432:	61fb      	str	r3, [r7, #28]
    while (p) {
 8014434:	69fb      	ldr	r3, [r7, #28]
 8014436:	2b00      	cmp	r3, #0
 8014438:	d1df      	bne.n	80143fa <etharp_query+0x19e>
    }
    if (copy_needed) {
 801443a:	69bb      	ldr	r3, [r7, #24]
 801443c:	2b00      	cmp	r3, #0
 801443e:	d007      	beq.n	8014450 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8014440:	687a      	ldr	r2, [r7, #4]
 8014442:	f44f 7120 	mov.w	r1, #640	@ 0x280
 8014446:	200e      	movs	r0, #14
 8014448:	f7f8 fc5e 	bl	800cd08 <pbuf_clone>
 801444c:	61f8      	str	r0, [r7, #28]
 801444e:	e004      	b.n	801445a <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8014450:	687b      	ldr	r3, [r7, #4]
 8014452:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8014454:	69f8      	ldr	r0, [r7, #28]
 8014456:	f7f8 fa95 	bl	800c984 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801445a:	69fb      	ldr	r3, [r7, #28]
 801445c:	2b00      	cmp	r3, #0
 801445e:	d021      	beq.n	80144a4 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8014460:	7c7a      	ldrb	r2, [r7, #17]
 8014462:	4918      	ldr	r1, [pc, #96]	@ (80144c4 <etharp_query+0x268>)
 8014464:	4613      	mov	r3, r2
 8014466:	005b      	lsls	r3, r3, #1
 8014468:	4413      	add	r3, r2
 801446a:	00db      	lsls	r3, r3, #3
 801446c:	440b      	add	r3, r1
 801446e:	681b      	ldr	r3, [r3, #0]
 8014470:	2b00      	cmp	r3, #0
 8014472:	d00a      	beq.n	801448a <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8014474:	7c7a      	ldrb	r2, [r7, #17]
 8014476:	4913      	ldr	r1, [pc, #76]	@ (80144c4 <etharp_query+0x268>)
 8014478:	4613      	mov	r3, r2
 801447a:	005b      	lsls	r3, r3, #1
 801447c:	4413      	add	r3, r2
 801447e:	00db      	lsls	r3, r3, #3
 8014480:	440b      	add	r3, r1
 8014482:	681b      	ldr	r3, [r3, #0]
 8014484:	4618      	mov	r0, r3
 8014486:	f7f8 f9d7 	bl	800c838 <pbuf_free>
      }
      arp_table[i].q = p;
 801448a:	7c7a      	ldrb	r2, [r7, #17]
 801448c:	490d      	ldr	r1, [pc, #52]	@ (80144c4 <etharp_query+0x268>)
 801448e:	4613      	mov	r3, r2
 8014490:	005b      	lsls	r3, r3, #1
 8014492:	4413      	add	r3, r2
 8014494:	00db      	lsls	r3, r3, #3
 8014496:	440b      	add	r3, r1
 8014498:	69fa      	ldr	r2, [r7, #28]
 801449a:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 801449c:	2300      	movs	r3, #0
 801449e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80144a2:	e002      	b.n	80144aa <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 80144a4:	23ff      	movs	r3, #255	@ 0xff
 80144a6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 80144aa:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 80144ae:	4618      	mov	r0, r3
 80144b0:	3728      	adds	r7, #40	@ 0x28
 80144b2:	46bd      	mov	sp, r7
 80144b4:	bd80      	pop	{r7, pc}
 80144b6:	bf00      	nop
 80144b8:	0801a6a8 	.word	0x0801a6a8
 80144bc:	0801a854 	.word	0x0801a854
 80144c0:	0801a720 	.word	0x0801a720
 80144c4:	2000eba4 	.word	0x2000eba4
 80144c8:	0801a864 	.word	0x0801a864
 80144cc:	0801a848 	.word	0x0801a848
 80144d0:	2000ec94 	.word	0x2000ec94
 80144d4:	0801a88c 	.word	0x0801a88c

080144d8 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 80144d8:	b580      	push	{r7, lr}
 80144da:	b08a      	sub	sp, #40	@ 0x28
 80144dc:	af02      	add	r7, sp, #8
 80144de:	60f8      	str	r0, [r7, #12]
 80144e0:	60b9      	str	r1, [r7, #8]
 80144e2:	607a      	str	r2, [r7, #4]
 80144e4:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 80144e6:	2300      	movs	r3, #0
 80144e8:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 80144ea:	68fb      	ldr	r3, [r7, #12]
 80144ec:	2b00      	cmp	r3, #0
 80144ee:	d106      	bne.n	80144fe <etharp_raw+0x26>
 80144f0:	4b3a      	ldr	r3, [pc, #232]	@ (80145dc <etharp_raw+0x104>)
 80144f2:	f240 4257 	movw	r2, #1111	@ 0x457
 80144f6:	493a      	ldr	r1, [pc, #232]	@ (80145e0 <etharp_raw+0x108>)
 80144f8:	483a      	ldr	r0, [pc, #232]	@ (80145e4 <etharp_raw+0x10c>)
 80144fa:	f001 ff09 	bl	8016310 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 80144fe:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8014502:	211c      	movs	r1, #28
 8014504:	200e      	movs	r0, #14
 8014506:	f7f7 feb3 	bl	800c270 <pbuf_alloc>
 801450a:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 801450c:	69bb      	ldr	r3, [r7, #24]
 801450e:	2b00      	cmp	r3, #0
 8014510:	d102      	bne.n	8014518 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8014512:	f04f 33ff 	mov.w	r3, #4294967295
 8014516:	e05d      	b.n	80145d4 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8014518:	69bb      	ldr	r3, [r7, #24]
 801451a:	895b      	ldrh	r3, [r3, #10]
 801451c:	2b1b      	cmp	r3, #27
 801451e:	d806      	bhi.n	801452e <etharp_raw+0x56>
 8014520:	4b2e      	ldr	r3, [pc, #184]	@ (80145dc <etharp_raw+0x104>)
 8014522:	f240 4262 	movw	r2, #1122	@ 0x462
 8014526:	4930      	ldr	r1, [pc, #192]	@ (80145e8 <etharp_raw+0x110>)
 8014528:	482e      	ldr	r0, [pc, #184]	@ (80145e4 <etharp_raw+0x10c>)
 801452a:	f001 fef1 	bl	8016310 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801452e:	69bb      	ldr	r3, [r7, #24]
 8014530:	685b      	ldr	r3, [r3, #4]
 8014532:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8014534:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8014536:	4618      	mov	r0, r3
 8014538:	f7f6 fd8c 	bl	800b054 <lwip_htons>
 801453c:	4603      	mov	r3, r0
 801453e:	461a      	mov	r2, r3
 8014540:	697b      	ldr	r3, [r7, #20]
 8014542:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8014544:	68fb      	ldr	r3, [r7, #12]
 8014546:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801454a:	2b06      	cmp	r3, #6
 801454c:	d006      	beq.n	801455c <etharp_raw+0x84>
 801454e:	4b23      	ldr	r3, [pc, #140]	@ (80145dc <etharp_raw+0x104>)
 8014550:	f240 4269 	movw	r2, #1129	@ 0x469
 8014554:	4925      	ldr	r1, [pc, #148]	@ (80145ec <etharp_raw+0x114>)
 8014556:	4823      	ldr	r0, [pc, #140]	@ (80145e4 <etharp_raw+0x10c>)
 8014558:	f001 feda 	bl	8016310 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 801455c:	697b      	ldr	r3, [r7, #20]
 801455e:	3308      	adds	r3, #8
 8014560:	2206      	movs	r2, #6
 8014562:	6839      	ldr	r1, [r7, #0]
 8014564:	4618      	mov	r0, r3
 8014566:	f002 f83e 	bl	80165e6 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801456a:	697b      	ldr	r3, [r7, #20]
 801456c:	3312      	adds	r3, #18
 801456e:	2206      	movs	r2, #6
 8014570:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8014572:	4618      	mov	r0, r3
 8014574:	f002 f837 	bl	80165e6 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8014578:	697b      	ldr	r3, [r7, #20]
 801457a:	330e      	adds	r3, #14
 801457c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801457e:	6812      	ldr	r2, [r2, #0]
 8014580:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8014582:	697b      	ldr	r3, [r7, #20]
 8014584:	3318      	adds	r3, #24
 8014586:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014588:	6812      	ldr	r2, [r2, #0]
 801458a:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 801458c:	697b      	ldr	r3, [r7, #20]
 801458e:	2200      	movs	r2, #0
 8014590:	701a      	strb	r2, [r3, #0]
 8014592:	2200      	movs	r2, #0
 8014594:	f042 0201 	orr.w	r2, r2, #1
 8014598:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801459a:	697b      	ldr	r3, [r7, #20]
 801459c:	2200      	movs	r2, #0
 801459e:	f042 0208 	orr.w	r2, r2, #8
 80145a2:	709a      	strb	r2, [r3, #2]
 80145a4:	2200      	movs	r2, #0
 80145a6:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 80145a8:	697b      	ldr	r3, [r7, #20]
 80145aa:	2206      	movs	r2, #6
 80145ac:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 80145ae:	697b      	ldr	r3, [r7, #20]
 80145b0:	2204      	movs	r2, #4
 80145b2:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80145b4:	f640 0306 	movw	r3, #2054	@ 0x806
 80145b8:	9300      	str	r3, [sp, #0]
 80145ba:	687b      	ldr	r3, [r7, #4]
 80145bc:	68ba      	ldr	r2, [r7, #8]
 80145be:	69b9      	ldr	r1, [r7, #24]
 80145c0:	68f8      	ldr	r0, [r7, #12]
 80145c2:	f001 fb7b 	bl	8015cbc <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 80145c6:	69b8      	ldr	r0, [r7, #24]
 80145c8:	f7f8 f936 	bl	800c838 <pbuf_free>
  p = NULL;
 80145cc:	2300      	movs	r3, #0
 80145ce:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 80145d0:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80145d4:	4618      	mov	r0, r3
 80145d6:	3720      	adds	r7, #32
 80145d8:	46bd      	mov	sp, r7
 80145da:	bd80      	pop	{r7, pc}
 80145dc:	0801a6a8 	.word	0x0801a6a8
 80145e0:	0801a7f8 	.word	0x0801a7f8
 80145e4:	0801a720 	.word	0x0801a720
 80145e8:	0801a8a8 	.word	0x0801a8a8
 80145ec:	0801a8dc 	.word	0x0801a8dc

080145f0 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 80145f0:	b580      	push	{r7, lr}
 80145f2:	b088      	sub	sp, #32
 80145f4:	af04      	add	r7, sp, #16
 80145f6:	60f8      	str	r0, [r7, #12]
 80145f8:	60b9      	str	r1, [r7, #8]
 80145fa:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80145fc:	68fb      	ldr	r3, [r7, #12]
 80145fe:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8014602:	68fb      	ldr	r3, [r7, #12]
 8014604:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 8014608:	68fb      	ldr	r3, [r7, #12]
 801460a:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801460c:	2201      	movs	r2, #1
 801460e:	9203      	str	r2, [sp, #12]
 8014610:	68ba      	ldr	r2, [r7, #8]
 8014612:	9202      	str	r2, [sp, #8]
 8014614:	4a06      	ldr	r2, [pc, #24]	@ (8014630 <etharp_request_dst+0x40>)
 8014616:	9201      	str	r2, [sp, #4]
 8014618:	9300      	str	r3, [sp, #0]
 801461a:	4603      	mov	r3, r0
 801461c:	687a      	ldr	r2, [r7, #4]
 801461e:	68f8      	ldr	r0, [r7, #12]
 8014620:	f7ff ff5a 	bl	80144d8 <etharp_raw>
 8014624:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8014626:	4618      	mov	r0, r3
 8014628:	3710      	adds	r7, #16
 801462a:	46bd      	mov	sp, r7
 801462c:	bd80      	pop	{r7, pc}
 801462e:	bf00      	nop
 8014630:	0801aeb0 	.word	0x0801aeb0

08014634 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8014634:	b580      	push	{r7, lr}
 8014636:	b082      	sub	sp, #8
 8014638:	af00      	add	r7, sp, #0
 801463a:	6078      	str	r0, [r7, #4]
 801463c:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801463e:	4a05      	ldr	r2, [pc, #20]	@ (8014654 <etharp_request+0x20>)
 8014640:	6839      	ldr	r1, [r7, #0]
 8014642:	6878      	ldr	r0, [r7, #4]
 8014644:	f7ff ffd4 	bl	80145f0 <etharp_request_dst>
 8014648:	4603      	mov	r3, r0
}
 801464a:	4618      	mov	r0, r3
 801464c:	3708      	adds	r7, #8
 801464e:	46bd      	mov	sp, r7
 8014650:	bd80      	pop	{r7, pc}
 8014652:	bf00      	nop
 8014654:	0801aea8 	.word	0x0801aea8

08014658 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8014658:	b580      	push	{r7, lr}
 801465a:	b08e      	sub	sp, #56	@ 0x38
 801465c:	af04      	add	r7, sp, #16
 801465e:	6078      	str	r0, [r7, #4]
 8014660:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8014662:	4b79      	ldr	r3, [pc, #484]	@ (8014848 <icmp_input+0x1f0>)
 8014664:	689b      	ldr	r3, [r3, #8]
 8014666:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8014668:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801466a:	781b      	ldrb	r3, [r3, #0]
 801466c:	f003 030f 	and.w	r3, r3, #15
 8014670:	b2db      	uxtb	r3, r3
 8014672:	009b      	lsls	r3, r3, #2
 8014674:	b2db      	uxtb	r3, r3
 8014676:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 8014678:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801467a:	2b13      	cmp	r3, #19
 801467c:	f240 80cd 	bls.w	801481a <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8014680:	687b      	ldr	r3, [r7, #4]
 8014682:	895b      	ldrh	r3, [r3, #10]
 8014684:	2b03      	cmp	r3, #3
 8014686:	f240 80ca 	bls.w	801481e <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801468a:	687b      	ldr	r3, [r7, #4]
 801468c:	685b      	ldr	r3, [r3, #4]
 801468e:	781b      	ldrb	r3, [r3, #0]
 8014690:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8014694:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8014698:	2b00      	cmp	r3, #0
 801469a:	f000 80b7 	beq.w	801480c <icmp_input+0x1b4>
 801469e:	2b08      	cmp	r3, #8
 80146a0:	f040 80b7 	bne.w	8014812 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 80146a4:	4b69      	ldr	r3, [pc, #420]	@ (801484c <icmp_input+0x1f4>)
 80146a6:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80146a8:	4b67      	ldr	r3, [pc, #412]	@ (8014848 <icmp_input+0x1f0>)
 80146aa:	695b      	ldr	r3, [r3, #20]
 80146ac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80146b0:	2be0      	cmp	r3, #224	@ 0xe0
 80146b2:	f000 80bb 	beq.w	801482c <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 80146b6:	4b64      	ldr	r3, [pc, #400]	@ (8014848 <icmp_input+0x1f0>)
 80146b8:	695b      	ldr	r3, [r3, #20]
 80146ba:	4a63      	ldr	r2, [pc, #396]	@ (8014848 <icmp_input+0x1f0>)
 80146bc:	6812      	ldr	r2, [r2, #0]
 80146be:	4611      	mov	r1, r2
 80146c0:	4618      	mov	r0, r3
 80146c2:	f000 fbed 	bl	8014ea0 <ip4_addr_isbroadcast_u32>
 80146c6:	4603      	mov	r3, r0
 80146c8:	2b00      	cmp	r3, #0
 80146ca:	f040 80b1 	bne.w	8014830 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 80146ce:	687b      	ldr	r3, [r7, #4]
 80146d0:	891b      	ldrh	r3, [r3, #8]
 80146d2:	2b07      	cmp	r3, #7
 80146d4:	f240 80a5 	bls.w	8014822 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80146d8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80146da:	330e      	adds	r3, #14
 80146dc:	4619      	mov	r1, r3
 80146de:	6878      	ldr	r0, [r7, #4]
 80146e0:	f7f8 f814 	bl	800c70c <pbuf_add_header>
 80146e4:	4603      	mov	r3, r0
 80146e6:	2b00      	cmp	r3, #0
 80146e8:	d04b      	beq.n	8014782 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 80146ea:	687b      	ldr	r3, [r7, #4]
 80146ec:	891a      	ldrh	r2, [r3, #8]
 80146ee:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80146f0:	4413      	add	r3, r2
 80146f2:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 80146f4:	687b      	ldr	r3, [r7, #4]
 80146f6:	891b      	ldrh	r3, [r3, #8]
 80146f8:	8b7a      	ldrh	r2, [r7, #26]
 80146fa:	429a      	cmp	r2, r3
 80146fc:	f0c0 809a 	bcc.w	8014834 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8014700:	8b7b      	ldrh	r3, [r7, #26]
 8014702:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8014706:	4619      	mov	r1, r3
 8014708:	200e      	movs	r0, #14
 801470a:	f7f7 fdb1 	bl	800c270 <pbuf_alloc>
 801470e:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8014710:	697b      	ldr	r3, [r7, #20]
 8014712:	2b00      	cmp	r3, #0
 8014714:	f000 8090 	beq.w	8014838 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8014718:	697b      	ldr	r3, [r7, #20]
 801471a:	895b      	ldrh	r3, [r3, #10]
 801471c:	461a      	mov	r2, r3
 801471e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8014720:	3308      	adds	r3, #8
 8014722:	429a      	cmp	r2, r3
 8014724:	d203      	bcs.n	801472e <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8014726:	6978      	ldr	r0, [r7, #20]
 8014728:	f7f8 f886 	bl	800c838 <pbuf_free>
          goto icmperr;
 801472c:	e085      	b.n	801483a <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801472e:	697b      	ldr	r3, [r7, #20]
 8014730:	685b      	ldr	r3, [r3, #4]
 8014732:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8014734:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8014736:	4618      	mov	r0, r3
 8014738:	f001 ff55 	bl	80165e6 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 801473c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801473e:	4619      	mov	r1, r3
 8014740:	6978      	ldr	r0, [r7, #20]
 8014742:	f7f7 fff3 	bl	800c72c <pbuf_remove_header>
 8014746:	4603      	mov	r3, r0
 8014748:	2b00      	cmp	r3, #0
 801474a:	d009      	beq.n	8014760 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 801474c:	4b40      	ldr	r3, [pc, #256]	@ (8014850 <icmp_input+0x1f8>)
 801474e:	22b6      	movs	r2, #182	@ 0xb6
 8014750:	4940      	ldr	r1, [pc, #256]	@ (8014854 <icmp_input+0x1fc>)
 8014752:	4841      	ldr	r0, [pc, #260]	@ (8014858 <icmp_input+0x200>)
 8014754:	f001 fddc 	bl	8016310 <iprintf>
          pbuf_free(r);
 8014758:	6978      	ldr	r0, [r7, #20]
 801475a:	f7f8 f86d 	bl	800c838 <pbuf_free>
          goto icmperr;
 801475e:	e06c      	b.n	801483a <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8014760:	6879      	ldr	r1, [r7, #4]
 8014762:	6978      	ldr	r0, [r7, #20]
 8014764:	f7f8 f98c 	bl	800ca80 <pbuf_copy>
 8014768:	4603      	mov	r3, r0
 801476a:	2b00      	cmp	r3, #0
 801476c:	d003      	beq.n	8014776 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 801476e:	6978      	ldr	r0, [r7, #20]
 8014770:	f7f8 f862 	bl	800c838 <pbuf_free>
          goto icmperr;
 8014774:	e061      	b.n	801483a <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8014776:	6878      	ldr	r0, [r7, #4]
 8014778:	f7f8 f85e 	bl	800c838 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 801477c:	697b      	ldr	r3, [r7, #20]
 801477e:	607b      	str	r3, [r7, #4]
 8014780:	e00f      	b.n	80147a2 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8014782:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8014784:	330e      	adds	r3, #14
 8014786:	4619      	mov	r1, r3
 8014788:	6878      	ldr	r0, [r7, #4]
 801478a:	f7f7 ffcf 	bl	800c72c <pbuf_remove_header>
 801478e:	4603      	mov	r3, r0
 8014790:	2b00      	cmp	r3, #0
 8014792:	d006      	beq.n	80147a2 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8014794:	4b2e      	ldr	r3, [pc, #184]	@ (8014850 <icmp_input+0x1f8>)
 8014796:	22c7      	movs	r2, #199	@ 0xc7
 8014798:	4930      	ldr	r1, [pc, #192]	@ (801485c <icmp_input+0x204>)
 801479a:	482f      	ldr	r0, [pc, #188]	@ (8014858 <icmp_input+0x200>)
 801479c:	f001 fdb8 	bl	8016310 <iprintf>
          goto icmperr;
 80147a0:	e04b      	b.n	801483a <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 80147a2:	687b      	ldr	r3, [r7, #4]
 80147a4:	685b      	ldr	r3, [r3, #4]
 80147a6:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 80147a8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80147aa:	4619      	mov	r1, r3
 80147ac:	6878      	ldr	r0, [r7, #4]
 80147ae:	f7f7 ffad 	bl	800c70c <pbuf_add_header>
 80147b2:	4603      	mov	r3, r0
 80147b4:	2b00      	cmp	r3, #0
 80147b6:	d12b      	bne.n	8014810 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 80147b8:	687b      	ldr	r3, [r7, #4]
 80147ba:	685b      	ldr	r3, [r3, #4]
 80147bc:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 80147be:	69fb      	ldr	r3, [r7, #28]
 80147c0:	681a      	ldr	r2, [r3, #0]
 80147c2:	68fb      	ldr	r3, [r7, #12]
 80147c4:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 80147c6:	4b20      	ldr	r3, [pc, #128]	@ (8014848 <icmp_input+0x1f0>)
 80147c8:	691a      	ldr	r2, [r3, #16]
 80147ca:	68fb      	ldr	r3, [r7, #12]
 80147cc:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 80147ce:	693b      	ldr	r3, [r7, #16]
 80147d0:	2200      	movs	r2, #0
 80147d2:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 80147d4:	693b      	ldr	r3, [r7, #16]
 80147d6:	2200      	movs	r2, #0
 80147d8:	709a      	strb	r2, [r3, #2]
 80147da:	2200      	movs	r2, #0
 80147dc:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 80147de:	68fb      	ldr	r3, [r7, #12]
 80147e0:	22ff      	movs	r2, #255	@ 0xff
 80147e2:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 80147e4:	68fb      	ldr	r3, [r7, #12]
 80147e6:	2200      	movs	r2, #0
 80147e8:	729a      	strb	r2, [r3, #10]
 80147ea:	2200      	movs	r2, #0
 80147ec:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 80147ee:	683b      	ldr	r3, [r7, #0]
 80147f0:	9302      	str	r3, [sp, #8]
 80147f2:	2301      	movs	r3, #1
 80147f4:	9301      	str	r3, [sp, #4]
 80147f6:	2300      	movs	r3, #0
 80147f8:	9300      	str	r3, [sp, #0]
 80147fa:	23ff      	movs	r3, #255	@ 0xff
 80147fc:	2200      	movs	r2, #0
 80147fe:	69f9      	ldr	r1, [r7, #28]
 8014800:	6878      	ldr	r0, [r7, #4]
 8014802:	f000 fa75 	bl	8014cf0 <ip4_output_if>
 8014806:	4603      	mov	r3, r0
 8014808:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801480a:	e001      	b.n	8014810 <icmp_input+0x1b8>
      break;
 801480c:	bf00      	nop
 801480e:	e000      	b.n	8014812 <icmp_input+0x1ba>
      break;
 8014810:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8014812:	6878      	ldr	r0, [r7, #4]
 8014814:	f7f8 f810 	bl	800c838 <pbuf_free>
  return;
 8014818:	e013      	b.n	8014842 <icmp_input+0x1ea>
    goto lenerr;
 801481a:	bf00      	nop
 801481c:	e002      	b.n	8014824 <icmp_input+0x1cc>
    goto lenerr;
 801481e:	bf00      	nop
 8014820:	e000      	b.n	8014824 <icmp_input+0x1cc>
        goto lenerr;
 8014822:	bf00      	nop
lenerr:
  pbuf_free(p);
 8014824:	6878      	ldr	r0, [r7, #4]
 8014826:	f7f8 f807 	bl	800c838 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801482a:	e00a      	b.n	8014842 <icmp_input+0x1ea>
        goto icmperr;
 801482c:	bf00      	nop
 801482e:	e004      	b.n	801483a <icmp_input+0x1e2>
        goto icmperr;
 8014830:	bf00      	nop
 8014832:	e002      	b.n	801483a <icmp_input+0x1e2>
          goto icmperr;
 8014834:	bf00      	nop
 8014836:	e000      	b.n	801483a <icmp_input+0x1e2>
          goto icmperr;
 8014838:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801483a:	6878      	ldr	r0, [r7, #4]
 801483c:	f7f7 fffc 	bl	800c838 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8014840:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8014842:	3728      	adds	r7, #40	@ 0x28
 8014844:	46bd      	mov	sp, r7
 8014846:	bd80      	pop	{r7, pc}
 8014848:	200091f8 	.word	0x200091f8
 801484c:	2000920c 	.word	0x2000920c
 8014850:	0801a920 	.word	0x0801a920
 8014854:	0801a958 	.word	0x0801a958
 8014858:	0801a990 	.word	0x0801a990
 801485c:	0801a9b8 	.word	0x0801a9b8

08014860 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8014860:	b580      	push	{r7, lr}
 8014862:	b082      	sub	sp, #8
 8014864:	af00      	add	r7, sp, #0
 8014866:	6078      	str	r0, [r7, #4]
 8014868:	460b      	mov	r3, r1
 801486a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 801486c:	78fb      	ldrb	r3, [r7, #3]
 801486e:	461a      	mov	r2, r3
 8014870:	2103      	movs	r1, #3
 8014872:	6878      	ldr	r0, [r7, #4]
 8014874:	f000 f814 	bl	80148a0 <icmp_send_response>
}
 8014878:	bf00      	nop
 801487a:	3708      	adds	r7, #8
 801487c:	46bd      	mov	sp, r7
 801487e:	bd80      	pop	{r7, pc}

08014880 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8014880:	b580      	push	{r7, lr}
 8014882:	b082      	sub	sp, #8
 8014884:	af00      	add	r7, sp, #0
 8014886:	6078      	str	r0, [r7, #4]
 8014888:	460b      	mov	r3, r1
 801488a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 801488c:	78fb      	ldrb	r3, [r7, #3]
 801488e:	461a      	mov	r2, r3
 8014890:	210b      	movs	r1, #11
 8014892:	6878      	ldr	r0, [r7, #4]
 8014894:	f000 f804 	bl	80148a0 <icmp_send_response>
}
 8014898:	bf00      	nop
 801489a:	3708      	adds	r7, #8
 801489c:	46bd      	mov	sp, r7
 801489e:	bd80      	pop	{r7, pc}

080148a0 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 80148a0:	b580      	push	{r7, lr}
 80148a2:	b08c      	sub	sp, #48	@ 0x30
 80148a4:	af04      	add	r7, sp, #16
 80148a6:	6078      	str	r0, [r7, #4]
 80148a8:	460b      	mov	r3, r1
 80148aa:	70fb      	strb	r3, [r7, #3]
 80148ac:	4613      	mov	r3, r2
 80148ae:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 80148b0:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80148b4:	2124      	movs	r1, #36	@ 0x24
 80148b6:	2022      	movs	r0, #34	@ 0x22
 80148b8:	f7f7 fcda 	bl	800c270 <pbuf_alloc>
 80148bc:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 80148be:	69fb      	ldr	r3, [r7, #28]
 80148c0:	2b00      	cmp	r3, #0
 80148c2:	d04c      	beq.n	801495e <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 80148c4:	69fb      	ldr	r3, [r7, #28]
 80148c6:	895b      	ldrh	r3, [r3, #10]
 80148c8:	2b23      	cmp	r3, #35	@ 0x23
 80148ca:	d806      	bhi.n	80148da <icmp_send_response+0x3a>
 80148cc:	4b26      	ldr	r3, [pc, #152]	@ (8014968 <icmp_send_response+0xc8>)
 80148ce:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 80148d2:	4926      	ldr	r1, [pc, #152]	@ (801496c <icmp_send_response+0xcc>)
 80148d4:	4826      	ldr	r0, [pc, #152]	@ (8014970 <icmp_send_response+0xd0>)
 80148d6:	f001 fd1b 	bl	8016310 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 80148da:	687b      	ldr	r3, [r7, #4]
 80148dc:	685b      	ldr	r3, [r3, #4]
 80148de:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 80148e0:	69fb      	ldr	r3, [r7, #28]
 80148e2:	685b      	ldr	r3, [r3, #4]
 80148e4:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 80148e6:	697b      	ldr	r3, [r7, #20]
 80148e8:	78fa      	ldrb	r2, [r7, #3]
 80148ea:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 80148ec:	697b      	ldr	r3, [r7, #20]
 80148ee:	78ba      	ldrb	r2, [r7, #2]
 80148f0:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 80148f2:	697b      	ldr	r3, [r7, #20]
 80148f4:	2200      	movs	r2, #0
 80148f6:	711a      	strb	r2, [r3, #4]
 80148f8:	2200      	movs	r2, #0
 80148fa:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 80148fc:	697b      	ldr	r3, [r7, #20]
 80148fe:	2200      	movs	r2, #0
 8014900:	719a      	strb	r2, [r3, #6]
 8014902:	2200      	movs	r2, #0
 8014904:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8014906:	69fb      	ldr	r3, [r7, #28]
 8014908:	685b      	ldr	r3, [r3, #4]
 801490a:	f103 0008 	add.w	r0, r3, #8
 801490e:	687b      	ldr	r3, [r7, #4]
 8014910:	685b      	ldr	r3, [r3, #4]
 8014912:	221c      	movs	r2, #28
 8014914:	4619      	mov	r1, r3
 8014916:	f001 fe66 	bl	80165e6 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801491a:	69bb      	ldr	r3, [r7, #24]
 801491c:	68db      	ldr	r3, [r3, #12]
 801491e:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8014920:	f107 030c 	add.w	r3, r7, #12
 8014924:	4618      	mov	r0, r3
 8014926:	f000 f825 	bl	8014974 <ip4_route>
 801492a:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 801492c:	693b      	ldr	r3, [r7, #16]
 801492e:	2b00      	cmp	r3, #0
 8014930:	d011      	beq.n	8014956 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8014932:	697b      	ldr	r3, [r7, #20]
 8014934:	2200      	movs	r2, #0
 8014936:	709a      	strb	r2, [r3, #2]
 8014938:	2200      	movs	r2, #0
 801493a:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801493c:	f107 020c 	add.w	r2, r7, #12
 8014940:	693b      	ldr	r3, [r7, #16]
 8014942:	9302      	str	r3, [sp, #8]
 8014944:	2301      	movs	r3, #1
 8014946:	9301      	str	r3, [sp, #4]
 8014948:	2300      	movs	r3, #0
 801494a:	9300      	str	r3, [sp, #0]
 801494c:	23ff      	movs	r3, #255	@ 0xff
 801494e:	2100      	movs	r1, #0
 8014950:	69f8      	ldr	r0, [r7, #28]
 8014952:	f000 f9cd 	bl	8014cf0 <ip4_output_if>
  }
  pbuf_free(q);
 8014956:	69f8      	ldr	r0, [r7, #28]
 8014958:	f7f7 ff6e 	bl	800c838 <pbuf_free>
 801495c:	e000      	b.n	8014960 <icmp_send_response+0xc0>
    return;
 801495e:	bf00      	nop
}
 8014960:	3720      	adds	r7, #32
 8014962:	46bd      	mov	sp, r7
 8014964:	bd80      	pop	{r7, pc}
 8014966:	bf00      	nop
 8014968:	0801a920 	.word	0x0801a920
 801496c:	0801a9ec 	.word	0x0801a9ec
 8014970:	0801a990 	.word	0x0801a990

08014974 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8014974:	b480      	push	{r7}
 8014976:	b085      	sub	sp, #20
 8014978:	af00      	add	r7, sp, #0
 801497a:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 801497c:	4b33      	ldr	r3, [pc, #204]	@ (8014a4c <ip4_route+0xd8>)
 801497e:	681b      	ldr	r3, [r3, #0]
 8014980:	60fb      	str	r3, [r7, #12]
 8014982:	e036      	b.n	80149f2 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8014984:	68fb      	ldr	r3, [r7, #12]
 8014986:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801498a:	f003 0301 	and.w	r3, r3, #1
 801498e:	b2db      	uxtb	r3, r3
 8014990:	2b00      	cmp	r3, #0
 8014992:	d02b      	beq.n	80149ec <ip4_route+0x78>
 8014994:	68fb      	ldr	r3, [r7, #12]
 8014996:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801499a:	089b      	lsrs	r3, r3, #2
 801499c:	f003 0301 	and.w	r3, r3, #1
 80149a0:	b2db      	uxtb	r3, r3
 80149a2:	2b00      	cmp	r3, #0
 80149a4:	d022      	beq.n	80149ec <ip4_route+0x78>
 80149a6:	68fb      	ldr	r3, [r7, #12]
 80149a8:	3304      	adds	r3, #4
 80149aa:	681b      	ldr	r3, [r3, #0]
 80149ac:	2b00      	cmp	r3, #0
 80149ae:	d01d      	beq.n	80149ec <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 80149b0:	687b      	ldr	r3, [r7, #4]
 80149b2:	681a      	ldr	r2, [r3, #0]
 80149b4:	68fb      	ldr	r3, [r7, #12]
 80149b6:	3304      	adds	r3, #4
 80149b8:	681b      	ldr	r3, [r3, #0]
 80149ba:	405a      	eors	r2, r3
 80149bc:	68fb      	ldr	r3, [r7, #12]
 80149be:	3308      	adds	r3, #8
 80149c0:	681b      	ldr	r3, [r3, #0]
 80149c2:	4013      	ands	r3, r2
 80149c4:	2b00      	cmp	r3, #0
 80149c6:	d101      	bne.n	80149cc <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 80149c8:	68fb      	ldr	r3, [r7, #12]
 80149ca:	e038      	b.n	8014a3e <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 80149cc:	68fb      	ldr	r3, [r7, #12]
 80149ce:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80149d2:	f003 0302 	and.w	r3, r3, #2
 80149d6:	2b00      	cmp	r3, #0
 80149d8:	d108      	bne.n	80149ec <ip4_route+0x78>
 80149da:	687b      	ldr	r3, [r7, #4]
 80149dc:	681a      	ldr	r2, [r3, #0]
 80149de:	68fb      	ldr	r3, [r7, #12]
 80149e0:	330c      	adds	r3, #12
 80149e2:	681b      	ldr	r3, [r3, #0]
 80149e4:	429a      	cmp	r2, r3
 80149e6:	d101      	bne.n	80149ec <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 80149e8:	68fb      	ldr	r3, [r7, #12]
 80149ea:	e028      	b.n	8014a3e <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 80149ec:	68fb      	ldr	r3, [r7, #12]
 80149ee:	681b      	ldr	r3, [r3, #0]
 80149f0:	60fb      	str	r3, [r7, #12]
 80149f2:	68fb      	ldr	r3, [r7, #12]
 80149f4:	2b00      	cmp	r3, #0
 80149f6:	d1c5      	bne.n	8014984 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80149f8:	4b15      	ldr	r3, [pc, #84]	@ (8014a50 <ip4_route+0xdc>)
 80149fa:	681b      	ldr	r3, [r3, #0]
 80149fc:	2b00      	cmp	r3, #0
 80149fe:	d01a      	beq.n	8014a36 <ip4_route+0xc2>
 8014a00:	4b13      	ldr	r3, [pc, #76]	@ (8014a50 <ip4_route+0xdc>)
 8014a02:	681b      	ldr	r3, [r3, #0]
 8014a04:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8014a08:	f003 0301 	and.w	r3, r3, #1
 8014a0c:	2b00      	cmp	r3, #0
 8014a0e:	d012      	beq.n	8014a36 <ip4_route+0xc2>
 8014a10:	4b0f      	ldr	r3, [pc, #60]	@ (8014a50 <ip4_route+0xdc>)
 8014a12:	681b      	ldr	r3, [r3, #0]
 8014a14:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8014a18:	f003 0304 	and.w	r3, r3, #4
 8014a1c:	2b00      	cmp	r3, #0
 8014a1e:	d00a      	beq.n	8014a36 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8014a20:	4b0b      	ldr	r3, [pc, #44]	@ (8014a50 <ip4_route+0xdc>)
 8014a22:	681b      	ldr	r3, [r3, #0]
 8014a24:	3304      	adds	r3, #4
 8014a26:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8014a28:	2b00      	cmp	r3, #0
 8014a2a:	d004      	beq.n	8014a36 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8014a2c:	687b      	ldr	r3, [r7, #4]
 8014a2e:	681b      	ldr	r3, [r3, #0]
 8014a30:	b2db      	uxtb	r3, r3
 8014a32:	2b7f      	cmp	r3, #127	@ 0x7f
 8014a34:	d101      	bne.n	8014a3a <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8014a36:	2300      	movs	r3, #0
 8014a38:	e001      	b.n	8014a3e <ip4_route+0xca>
  }

  return netif_default;
 8014a3a:	4b05      	ldr	r3, [pc, #20]	@ (8014a50 <ip4_route+0xdc>)
 8014a3c:	681b      	ldr	r3, [r3, #0]
}
 8014a3e:	4618      	mov	r0, r3
 8014a40:	3714      	adds	r7, #20
 8014a42:	46bd      	mov	sp, r7
 8014a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a48:	4770      	bx	lr
 8014a4a:	bf00      	nop
 8014a4c:	2000eb38 	.word	0x2000eb38
 8014a50:	2000eb3c 	.word	0x2000eb3c

08014a54 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8014a54:	b580      	push	{r7, lr}
 8014a56:	b082      	sub	sp, #8
 8014a58:	af00      	add	r7, sp, #0
 8014a5a:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8014a5c:	687b      	ldr	r3, [r7, #4]
 8014a5e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8014a62:	f003 0301 	and.w	r3, r3, #1
 8014a66:	b2db      	uxtb	r3, r3
 8014a68:	2b00      	cmp	r3, #0
 8014a6a:	d016      	beq.n	8014a9a <ip4_input_accept+0x46>
 8014a6c:	687b      	ldr	r3, [r7, #4]
 8014a6e:	3304      	adds	r3, #4
 8014a70:	681b      	ldr	r3, [r3, #0]
 8014a72:	2b00      	cmp	r3, #0
 8014a74:	d011      	beq.n	8014a9a <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8014a76:	4b0b      	ldr	r3, [pc, #44]	@ (8014aa4 <ip4_input_accept+0x50>)
 8014a78:	695a      	ldr	r2, [r3, #20]
 8014a7a:	687b      	ldr	r3, [r7, #4]
 8014a7c:	3304      	adds	r3, #4
 8014a7e:	681b      	ldr	r3, [r3, #0]
 8014a80:	429a      	cmp	r2, r3
 8014a82:	d008      	beq.n	8014a96 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8014a84:	4b07      	ldr	r3, [pc, #28]	@ (8014aa4 <ip4_input_accept+0x50>)
 8014a86:	695b      	ldr	r3, [r3, #20]
 8014a88:	6879      	ldr	r1, [r7, #4]
 8014a8a:	4618      	mov	r0, r3
 8014a8c:	f000 fa08 	bl	8014ea0 <ip4_addr_isbroadcast_u32>
 8014a90:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8014a92:	2b00      	cmp	r3, #0
 8014a94:	d001      	beq.n	8014a9a <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8014a96:	2301      	movs	r3, #1
 8014a98:	e000      	b.n	8014a9c <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8014a9a:	2300      	movs	r3, #0
}
 8014a9c:	4618      	mov	r0, r3
 8014a9e:	3708      	adds	r7, #8
 8014aa0:	46bd      	mov	sp, r7
 8014aa2:	bd80      	pop	{r7, pc}
 8014aa4:	200091f8 	.word	0x200091f8

08014aa8 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8014aa8:	b580      	push	{r7, lr}
 8014aaa:	b086      	sub	sp, #24
 8014aac:	af00      	add	r7, sp, #0
 8014aae:	6078      	str	r0, [r7, #4]
 8014ab0:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8014ab2:	687b      	ldr	r3, [r7, #4]
 8014ab4:	685b      	ldr	r3, [r3, #4]
 8014ab6:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8014ab8:	697b      	ldr	r3, [r7, #20]
 8014aba:	781b      	ldrb	r3, [r3, #0]
 8014abc:	091b      	lsrs	r3, r3, #4
 8014abe:	b2db      	uxtb	r3, r3
 8014ac0:	2b04      	cmp	r3, #4
 8014ac2:	d004      	beq.n	8014ace <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8014ac4:	6878      	ldr	r0, [r7, #4]
 8014ac6:	f7f7 feb7 	bl	800c838 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8014aca:	2300      	movs	r3, #0
 8014acc:	e107      	b.n	8014cde <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8014ace:	697b      	ldr	r3, [r7, #20]
 8014ad0:	781b      	ldrb	r3, [r3, #0]
 8014ad2:	f003 030f 	and.w	r3, r3, #15
 8014ad6:	b2db      	uxtb	r3, r3
 8014ad8:	009b      	lsls	r3, r3, #2
 8014ada:	b2db      	uxtb	r3, r3
 8014adc:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8014ade:	697b      	ldr	r3, [r7, #20]
 8014ae0:	885b      	ldrh	r3, [r3, #2]
 8014ae2:	b29b      	uxth	r3, r3
 8014ae4:	4618      	mov	r0, r3
 8014ae6:	f7f6 fab5 	bl	800b054 <lwip_htons>
 8014aea:	4603      	mov	r3, r0
 8014aec:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8014aee:	687b      	ldr	r3, [r7, #4]
 8014af0:	891b      	ldrh	r3, [r3, #8]
 8014af2:	89ba      	ldrh	r2, [r7, #12]
 8014af4:	429a      	cmp	r2, r3
 8014af6:	d204      	bcs.n	8014b02 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8014af8:	89bb      	ldrh	r3, [r7, #12]
 8014afa:	4619      	mov	r1, r3
 8014afc:	6878      	ldr	r0, [r7, #4]
 8014afe:	f7f7 fd15 	bl	800c52c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8014b02:	687b      	ldr	r3, [r7, #4]
 8014b04:	895b      	ldrh	r3, [r3, #10]
 8014b06:	89fa      	ldrh	r2, [r7, #14]
 8014b08:	429a      	cmp	r2, r3
 8014b0a:	d807      	bhi.n	8014b1c <ip4_input+0x74>
 8014b0c:	687b      	ldr	r3, [r7, #4]
 8014b0e:	891b      	ldrh	r3, [r3, #8]
 8014b10:	89ba      	ldrh	r2, [r7, #12]
 8014b12:	429a      	cmp	r2, r3
 8014b14:	d802      	bhi.n	8014b1c <ip4_input+0x74>
 8014b16:	89fb      	ldrh	r3, [r7, #14]
 8014b18:	2b13      	cmp	r3, #19
 8014b1a:	d804      	bhi.n	8014b26 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8014b1c:	6878      	ldr	r0, [r7, #4]
 8014b1e:	f7f7 fe8b 	bl	800c838 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8014b22:	2300      	movs	r3, #0
 8014b24:	e0db      	b.n	8014cde <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8014b26:	697b      	ldr	r3, [r7, #20]
 8014b28:	691b      	ldr	r3, [r3, #16]
 8014b2a:	4a6f      	ldr	r2, [pc, #444]	@ (8014ce8 <ip4_input+0x240>)
 8014b2c:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8014b2e:	697b      	ldr	r3, [r7, #20]
 8014b30:	68db      	ldr	r3, [r3, #12]
 8014b32:	4a6d      	ldr	r2, [pc, #436]	@ (8014ce8 <ip4_input+0x240>)
 8014b34:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8014b36:	4b6c      	ldr	r3, [pc, #432]	@ (8014ce8 <ip4_input+0x240>)
 8014b38:	695b      	ldr	r3, [r3, #20]
 8014b3a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8014b3e:	2be0      	cmp	r3, #224	@ 0xe0
 8014b40:	d112      	bne.n	8014b68 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8014b42:	683b      	ldr	r3, [r7, #0]
 8014b44:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8014b48:	f003 0301 	and.w	r3, r3, #1
 8014b4c:	b2db      	uxtb	r3, r3
 8014b4e:	2b00      	cmp	r3, #0
 8014b50:	d007      	beq.n	8014b62 <ip4_input+0xba>
 8014b52:	683b      	ldr	r3, [r7, #0]
 8014b54:	3304      	adds	r3, #4
 8014b56:	681b      	ldr	r3, [r3, #0]
 8014b58:	2b00      	cmp	r3, #0
 8014b5a:	d002      	beq.n	8014b62 <ip4_input+0xba>
      netif = inp;
 8014b5c:	683b      	ldr	r3, [r7, #0]
 8014b5e:	613b      	str	r3, [r7, #16]
 8014b60:	e02a      	b.n	8014bb8 <ip4_input+0x110>
    } else {
      netif = NULL;
 8014b62:	2300      	movs	r3, #0
 8014b64:	613b      	str	r3, [r7, #16]
 8014b66:	e027      	b.n	8014bb8 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8014b68:	6838      	ldr	r0, [r7, #0]
 8014b6a:	f7ff ff73 	bl	8014a54 <ip4_input_accept>
 8014b6e:	4603      	mov	r3, r0
 8014b70:	2b00      	cmp	r3, #0
 8014b72:	d002      	beq.n	8014b7a <ip4_input+0xd2>
      netif = inp;
 8014b74:	683b      	ldr	r3, [r7, #0]
 8014b76:	613b      	str	r3, [r7, #16]
 8014b78:	e01e      	b.n	8014bb8 <ip4_input+0x110>
    } else {
      netif = NULL;
 8014b7a:	2300      	movs	r3, #0
 8014b7c:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8014b7e:	4b5a      	ldr	r3, [pc, #360]	@ (8014ce8 <ip4_input+0x240>)
 8014b80:	695b      	ldr	r3, [r3, #20]
 8014b82:	b2db      	uxtb	r3, r3
 8014b84:	2b7f      	cmp	r3, #127	@ 0x7f
 8014b86:	d017      	beq.n	8014bb8 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8014b88:	4b58      	ldr	r3, [pc, #352]	@ (8014cec <ip4_input+0x244>)
 8014b8a:	681b      	ldr	r3, [r3, #0]
 8014b8c:	613b      	str	r3, [r7, #16]
 8014b8e:	e00e      	b.n	8014bae <ip4_input+0x106>
          if (netif == inp) {
 8014b90:	693a      	ldr	r2, [r7, #16]
 8014b92:	683b      	ldr	r3, [r7, #0]
 8014b94:	429a      	cmp	r2, r3
 8014b96:	d006      	beq.n	8014ba6 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8014b98:	6938      	ldr	r0, [r7, #16]
 8014b9a:	f7ff ff5b 	bl	8014a54 <ip4_input_accept>
 8014b9e:	4603      	mov	r3, r0
 8014ba0:	2b00      	cmp	r3, #0
 8014ba2:	d108      	bne.n	8014bb6 <ip4_input+0x10e>
 8014ba4:	e000      	b.n	8014ba8 <ip4_input+0x100>
            continue;
 8014ba6:	bf00      	nop
        NETIF_FOREACH(netif) {
 8014ba8:	693b      	ldr	r3, [r7, #16]
 8014baa:	681b      	ldr	r3, [r3, #0]
 8014bac:	613b      	str	r3, [r7, #16]
 8014bae:	693b      	ldr	r3, [r7, #16]
 8014bb0:	2b00      	cmp	r3, #0
 8014bb2:	d1ed      	bne.n	8014b90 <ip4_input+0xe8>
 8014bb4:	e000      	b.n	8014bb8 <ip4_input+0x110>
            break;
 8014bb6:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8014bb8:	4b4b      	ldr	r3, [pc, #300]	@ (8014ce8 <ip4_input+0x240>)
 8014bba:	691b      	ldr	r3, [r3, #16]
 8014bbc:	6839      	ldr	r1, [r7, #0]
 8014bbe:	4618      	mov	r0, r3
 8014bc0:	f000 f96e 	bl	8014ea0 <ip4_addr_isbroadcast_u32>
 8014bc4:	4603      	mov	r3, r0
 8014bc6:	2b00      	cmp	r3, #0
 8014bc8:	d105      	bne.n	8014bd6 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8014bca:	4b47      	ldr	r3, [pc, #284]	@ (8014ce8 <ip4_input+0x240>)
 8014bcc:	691b      	ldr	r3, [r3, #16]
 8014bce:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8014bd2:	2be0      	cmp	r3, #224	@ 0xe0
 8014bd4:	d104      	bne.n	8014be0 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8014bd6:	6878      	ldr	r0, [r7, #4]
 8014bd8:	f7f7 fe2e 	bl	800c838 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8014bdc:	2300      	movs	r3, #0
 8014bde:	e07e      	b.n	8014cde <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8014be0:	693b      	ldr	r3, [r7, #16]
 8014be2:	2b00      	cmp	r3, #0
 8014be4:	d104      	bne.n	8014bf0 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8014be6:	6878      	ldr	r0, [r7, #4]
 8014be8:	f7f7 fe26 	bl	800c838 <pbuf_free>
    return ERR_OK;
 8014bec:	2300      	movs	r3, #0
 8014bee:	e076      	b.n	8014cde <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8014bf0:	697b      	ldr	r3, [r7, #20]
 8014bf2:	88db      	ldrh	r3, [r3, #6]
 8014bf4:	b29b      	uxth	r3, r3
 8014bf6:	461a      	mov	r2, r3
 8014bf8:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 8014bfc:	4013      	ands	r3, r2
 8014bfe:	2b00      	cmp	r3, #0
 8014c00:	d00b      	beq.n	8014c1a <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8014c02:	6878      	ldr	r0, [r7, #4]
 8014c04:	f000 fc92 	bl	801552c <ip4_reass>
 8014c08:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8014c0a:	687b      	ldr	r3, [r7, #4]
 8014c0c:	2b00      	cmp	r3, #0
 8014c0e:	d101      	bne.n	8014c14 <ip4_input+0x16c>
      return ERR_OK;
 8014c10:	2300      	movs	r3, #0
 8014c12:	e064      	b.n	8014cde <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8014c14:	687b      	ldr	r3, [r7, #4]
 8014c16:	685b      	ldr	r3, [r3, #4]
 8014c18:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8014c1a:	4a33      	ldr	r2, [pc, #204]	@ (8014ce8 <ip4_input+0x240>)
 8014c1c:	693b      	ldr	r3, [r7, #16]
 8014c1e:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8014c20:	4a31      	ldr	r2, [pc, #196]	@ (8014ce8 <ip4_input+0x240>)
 8014c22:	683b      	ldr	r3, [r7, #0]
 8014c24:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8014c26:	4a30      	ldr	r2, [pc, #192]	@ (8014ce8 <ip4_input+0x240>)
 8014c28:	697b      	ldr	r3, [r7, #20]
 8014c2a:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8014c2c:	697b      	ldr	r3, [r7, #20]
 8014c2e:	781b      	ldrb	r3, [r3, #0]
 8014c30:	f003 030f 	and.w	r3, r3, #15
 8014c34:	b2db      	uxtb	r3, r3
 8014c36:	009b      	lsls	r3, r3, #2
 8014c38:	b2db      	uxtb	r3, r3
 8014c3a:	461a      	mov	r2, r3
 8014c3c:	4b2a      	ldr	r3, [pc, #168]	@ (8014ce8 <ip4_input+0x240>)
 8014c3e:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8014c40:	89fb      	ldrh	r3, [r7, #14]
 8014c42:	4619      	mov	r1, r3
 8014c44:	6878      	ldr	r0, [r7, #4]
 8014c46:	f7f7 fd71 	bl	800c72c <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8014c4a:	697b      	ldr	r3, [r7, #20]
 8014c4c:	7a5b      	ldrb	r3, [r3, #9]
 8014c4e:	2b11      	cmp	r3, #17
 8014c50:	d006      	beq.n	8014c60 <ip4_input+0x1b8>
 8014c52:	2b11      	cmp	r3, #17
 8014c54:	dc13      	bgt.n	8014c7e <ip4_input+0x1d6>
 8014c56:	2b01      	cmp	r3, #1
 8014c58:	d00c      	beq.n	8014c74 <ip4_input+0x1cc>
 8014c5a:	2b06      	cmp	r3, #6
 8014c5c:	d005      	beq.n	8014c6a <ip4_input+0x1c2>
 8014c5e:	e00e      	b.n	8014c7e <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8014c60:	6839      	ldr	r1, [r7, #0]
 8014c62:	6878      	ldr	r0, [r7, #4]
 8014c64:	f7fe fb5a 	bl	801331c <udp_input>
        break;
 8014c68:	e026      	b.n	8014cb8 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8014c6a:	6839      	ldr	r1, [r7, #0]
 8014c6c:	6878      	ldr	r0, [r7, #4]
 8014c6e:	f7f9 ff19 	bl	800eaa4 <tcp_input>
        break;
 8014c72:	e021      	b.n	8014cb8 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8014c74:	6839      	ldr	r1, [r7, #0]
 8014c76:	6878      	ldr	r0, [r7, #4]
 8014c78:	f7ff fcee 	bl	8014658 <icmp_input>
        break;
 8014c7c:	e01c      	b.n	8014cb8 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8014c7e:	4b1a      	ldr	r3, [pc, #104]	@ (8014ce8 <ip4_input+0x240>)
 8014c80:	695b      	ldr	r3, [r3, #20]
 8014c82:	6939      	ldr	r1, [r7, #16]
 8014c84:	4618      	mov	r0, r3
 8014c86:	f000 f90b 	bl	8014ea0 <ip4_addr_isbroadcast_u32>
 8014c8a:	4603      	mov	r3, r0
 8014c8c:	2b00      	cmp	r3, #0
 8014c8e:	d10f      	bne.n	8014cb0 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8014c90:	4b15      	ldr	r3, [pc, #84]	@ (8014ce8 <ip4_input+0x240>)
 8014c92:	695b      	ldr	r3, [r3, #20]
 8014c94:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8014c98:	2be0      	cmp	r3, #224	@ 0xe0
 8014c9a:	d009      	beq.n	8014cb0 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8014c9c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014ca0:	4619      	mov	r1, r3
 8014ca2:	6878      	ldr	r0, [r7, #4]
 8014ca4:	f7f7 fdb5 	bl	800c812 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8014ca8:	2102      	movs	r1, #2
 8014caa:	6878      	ldr	r0, [r7, #4]
 8014cac:	f7ff fdd8 	bl	8014860 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8014cb0:	6878      	ldr	r0, [r7, #4]
 8014cb2:	f7f7 fdc1 	bl	800c838 <pbuf_free>
        break;
 8014cb6:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8014cb8:	4b0b      	ldr	r3, [pc, #44]	@ (8014ce8 <ip4_input+0x240>)
 8014cba:	2200      	movs	r2, #0
 8014cbc:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8014cbe:	4b0a      	ldr	r3, [pc, #40]	@ (8014ce8 <ip4_input+0x240>)
 8014cc0:	2200      	movs	r2, #0
 8014cc2:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8014cc4:	4b08      	ldr	r3, [pc, #32]	@ (8014ce8 <ip4_input+0x240>)
 8014cc6:	2200      	movs	r2, #0
 8014cc8:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8014cca:	4b07      	ldr	r3, [pc, #28]	@ (8014ce8 <ip4_input+0x240>)
 8014ccc:	2200      	movs	r2, #0
 8014cce:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8014cd0:	4b05      	ldr	r3, [pc, #20]	@ (8014ce8 <ip4_input+0x240>)
 8014cd2:	2200      	movs	r2, #0
 8014cd4:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8014cd6:	4b04      	ldr	r3, [pc, #16]	@ (8014ce8 <ip4_input+0x240>)
 8014cd8:	2200      	movs	r2, #0
 8014cda:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8014cdc:	2300      	movs	r3, #0
}
 8014cde:	4618      	mov	r0, r3
 8014ce0:	3718      	adds	r7, #24
 8014ce2:	46bd      	mov	sp, r7
 8014ce4:	bd80      	pop	{r7, pc}
 8014ce6:	bf00      	nop
 8014ce8:	200091f8 	.word	0x200091f8
 8014cec:	2000eb38 	.word	0x2000eb38

08014cf0 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8014cf0:	b580      	push	{r7, lr}
 8014cf2:	b08a      	sub	sp, #40	@ 0x28
 8014cf4:	af04      	add	r7, sp, #16
 8014cf6:	60f8      	str	r0, [r7, #12]
 8014cf8:	60b9      	str	r1, [r7, #8]
 8014cfa:	607a      	str	r2, [r7, #4]
 8014cfc:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8014cfe:	68bb      	ldr	r3, [r7, #8]
 8014d00:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8014d02:	687b      	ldr	r3, [r7, #4]
 8014d04:	2b00      	cmp	r3, #0
 8014d06:	d009      	beq.n	8014d1c <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8014d08:	68bb      	ldr	r3, [r7, #8]
 8014d0a:	2b00      	cmp	r3, #0
 8014d0c:	d003      	beq.n	8014d16 <ip4_output_if+0x26>
 8014d0e:	68bb      	ldr	r3, [r7, #8]
 8014d10:	681b      	ldr	r3, [r3, #0]
 8014d12:	2b00      	cmp	r3, #0
 8014d14:	d102      	bne.n	8014d1c <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8014d16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014d18:	3304      	adds	r3, #4
 8014d1a:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8014d1c:	78fa      	ldrb	r2, [r7, #3]
 8014d1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014d20:	9302      	str	r3, [sp, #8]
 8014d22:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8014d26:	9301      	str	r3, [sp, #4]
 8014d28:	f897 3020 	ldrb.w	r3, [r7, #32]
 8014d2c:	9300      	str	r3, [sp, #0]
 8014d2e:	4613      	mov	r3, r2
 8014d30:	687a      	ldr	r2, [r7, #4]
 8014d32:	6979      	ldr	r1, [r7, #20]
 8014d34:	68f8      	ldr	r0, [r7, #12]
 8014d36:	f000 f805 	bl	8014d44 <ip4_output_if_src>
 8014d3a:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8014d3c:	4618      	mov	r0, r3
 8014d3e:	3718      	adds	r7, #24
 8014d40:	46bd      	mov	sp, r7
 8014d42:	bd80      	pop	{r7, pc}

08014d44 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8014d44:	b580      	push	{r7, lr}
 8014d46:	b088      	sub	sp, #32
 8014d48:	af00      	add	r7, sp, #0
 8014d4a:	60f8      	str	r0, [r7, #12]
 8014d4c:	60b9      	str	r1, [r7, #8]
 8014d4e:	607a      	str	r2, [r7, #4]
 8014d50:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8014d52:	68fb      	ldr	r3, [r7, #12]
 8014d54:	7b9b      	ldrb	r3, [r3, #14]
 8014d56:	2b01      	cmp	r3, #1
 8014d58:	d006      	beq.n	8014d68 <ip4_output_if_src+0x24>
 8014d5a:	4b4b      	ldr	r3, [pc, #300]	@ (8014e88 <ip4_output_if_src+0x144>)
 8014d5c:	f44f 7255 	mov.w	r2, #852	@ 0x354
 8014d60:	494a      	ldr	r1, [pc, #296]	@ (8014e8c <ip4_output_if_src+0x148>)
 8014d62:	484b      	ldr	r0, [pc, #300]	@ (8014e90 <ip4_output_if_src+0x14c>)
 8014d64:	f001 fad4 	bl	8016310 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8014d68:	687b      	ldr	r3, [r7, #4]
 8014d6a:	2b00      	cmp	r3, #0
 8014d6c:	d060      	beq.n	8014e30 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8014d6e:	2314      	movs	r3, #20
 8014d70:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8014d72:	2114      	movs	r1, #20
 8014d74:	68f8      	ldr	r0, [r7, #12]
 8014d76:	f7f7 fcc9 	bl	800c70c <pbuf_add_header>
 8014d7a:	4603      	mov	r3, r0
 8014d7c:	2b00      	cmp	r3, #0
 8014d7e:	d002      	beq.n	8014d86 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8014d80:	f06f 0301 	mvn.w	r3, #1
 8014d84:	e07c      	b.n	8014e80 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8014d86:	68fb      	ldr	r3, [r7, #12]
 8014d88:	685b      	ldr	r3, [r3, #4]
 8014d8a:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8014d8c:	68fb      	ldr	r3, [r7, #12]
 8014d8e:	895b      	ldrh	r3, [r3, #10]
 8014d90:	2b13      	cmp	r3, #19
 8014d92:	d806      	bhi.n	8014da2 <ip4_output_if_src+0x5e>
 8014d94:	4b3c      	ldr	r3, [pc, #240]	@ (8014e88 <ip4_output_if_src+0x144>)
 8014d96:	f44f 7262 	mov.w	r2, #904	@ 0x388
 8014d9a:	493e      	ldr	r1, [pc, #248]	@ (8014e94 <ip4_output_if_src+0x150>)
 8014d9c:	483c      	ldr	r0, [pc, #240]	@ (8014e90 <ip4_output_if_src+0x14c>)
 8014d9e:	f001 fab7 	bl	8016310 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8014da2:	69fb      	ldr	r3, [r7, #28]
 8014da4:	78fa      	ldrb	r2, [r7, #3]
 8014da6:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8014da8:	69fb      	ldr	r3, [r7, #28]
 8014daa:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8014dae:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8014db0:	687b      	ldr	r3, [r7, #4]
 8014db2:	681a      	ldr	r2, [r3, #0]
 8014db4:	69fb      	ldr	r3, [r7, #28]
 8014db6:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8014db8:	8b7b      	ldrh	r3, [r7, #26]
 8014dba:	089b      	lsrs	r3, r3, #2
 8014dbc:	b29b      	uxth	r3, r3
 8014dbe:	b2db      	uxtb	r3, r3
 8014dc0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014dc4:	b2da      	uxtb	r2, r3
 8014dc6:	69fb      	ldr	r3, [r7, #28]
 8014dc8:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8014dca:	69fb      	ldr	r3, [r7, #28]
 8014dcc:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8014dd0:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8014dd2:	68fb      	ldr	r3, [r7, #12]
 8014dd4:	891b      	ldrh	r3, [r3, #8]
 8014dd6:	4618      	mov	r0, r3
 8014dd8:	f7f6 f93c 	bl	800b054 <lwip_htons>
 8014ddc:	4603      	mov	r3, r0
 8014dde:	461a      	mov	r2, r3
 8014de0:	69fb      	ldr	r3, [r7, #28]
 8014de2:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8014de4:	69fb      	ldr	r3, [r7, #28]
 8014de6:	2200      	movs	r2, #0
 8014de8:	719a      	strb	r2, [r3, #6]
 8014dea:	2200      	movs	r2, #0
 8014dec:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8014dee:	4b2a      	ldr	r3, [pc, #168]	@ (8014e98 <ip4_output_if_src+0x154>)
 8014df0:	881b      	ldrh	r3, [r3, #0]
 8014df2:	4618      	mov	r0, r3
 8014df4:	f7f6 f92e 	bl	800b054 <lwip_htons>
 8014df8:	4603      	mov	r3, r0
 8014dfa:	461a      	mov	r2, r3
 8014dfc:	69fb      	ldr	r3, [r7, #28]
 8014dfe:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8014e00:	4b25      	ldr	r3, [pc, #148]	@ (8014e98 <ip4_output_if_src+0x154>)
 8014e02:	881b      	ldrh	r3, [r3, #0]
 8014e04:	3301      	adds	r3, #1
 8014e06:	b29a      	uxth	r2, r3
 8014e08:	4b23      	ldr	r3, [pc, #140]	@ (8014e98 <ip4_output_if_src+0x154>)
 8014e0a:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8014e0c:	68bb      	ldr	r3, [r7, #8]
 8014e0e:	2b00      	cmp	r3, #0
 8014e10:	d104      	bne.n	8014e1c <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8014e12:	4b22      	ldr	r3, [pc, #136]	@ (8014e9c <ip4_output_if_src+0x158>)
 8014e14:	681a      	ldr	r2, [r3, #0]
 8014e16:	69fb      	ldr	r3, [r7, #28]
 8014e18:	60da      	str	r2, [r3, #12]
 8014e1a:	e003      	b.n	8014e24 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8014e1c:	68bb      	ldr	r3, [r7, #8]
 8014e1e:	681a      	ldr	r2, [r3, #0]
 8014e20:	69fb      	ldr	r3, [r7, #28]
 8014e22:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8014e24:	69fb      	ldr	r3, [r7, #28]
 8014e26:	2200      	movs	r2, #0
 8014e28:	729a      	strb	r2, [r3, #10]
 8014e2a:	2200      	movs	r2, #0
 8014e2c:	72da      	strb	r2, [r3, #11]
 8014e2e:	e00f      	b.n	8014e50 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8014e30:	68fb      	ldr	r3, [r7, #12]
 8014e32:	895b      	ldrh	r3, [r3, #10]
 8014e34:	2b13      	cmp	r3, #19
 8014e36:	d802      	bhi.n	8014e3e <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8014e38:	f06f 0301 	mvn.w	r3, #1
 8014e3c:	e020      	b.n	8014e80 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8014e3e:	68fb      	ldr	r3, [r7, #12]
 8014e40:	685b      	ldr	r3, [r3, #4]
 8014e42:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8014e44:	69fb      	ldr	r3, [r7, #28]
 8014e46:	691b      	ldr	r3, [r3, #16]
 8014e48:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8014e4a:	f107 0314 	add.w	r3, r7, #20
 8014e4e:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8014e50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014e52:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8014e54:	2b00      	cmp	r3, #0
 8014e56:	d00c      	beq.n	8014e72 <ip4_output_if_src+0x12e>
 8014e58:	68fb      	ldr	r3, [r7, #12]
 8014e5a:	891a      	ldrh	r2, [r3, #8]
 8014e5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014e5e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8014e60:	429a      	cmp	r2, r3
 8014e62:	d906      	bls.n	8014e72 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8014e64:	687a      	ldr	r2, [r7, #4]
 8014e66:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8014e68:	68f8      	ldr	r0, [r7, #12]
 8014e6a:	f000 fd53 	bl	8015914 <ip4_frag>
 8014e6e:	4603      	mov	r3, r0
 8014e70:	e006      	b.n	8014e80 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8014e72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014e74:	695b      	ldr	r3, [r3, #20]
 8014e76:	687a      	ldr	r2, [r7, #4]
 8014e78:	68f9      	ldr	r1, [r7, #12]
 8014e7a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014e7c:	4798      	blx	r3
 8014e7e:	4603      	mov	r3, r0
}
 8014e80:	4618      	mov	r0, r3
 8014e82:	3720      	adds	r7, #32
 8014e84:	46bd      	mov	sp, r7
 8014e86:	bd80      	pop	{r7, pc}
 8014e88:	0801aa18 	.word	0x0801aa18
 8014e8c:	0801aa4c 	.word	0x0801aa4c
 8014e90:	0801aa58 	.word	0x0801aa58
 8014e94:	0801aa80 	.word	0x0801aa80
 8014e98:	2000ec96 	.word	0x2000ec96
 8014e9c:	0801aea4 	.word	0x0801aea4

08014ea0 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8014ea0:	b480      	push	{r7}
 8014ea2:	b085      	sub	sp, #20
 8014ea4:	af00      	add	r7, sp, #0
 8014ea6:	6078      	str	r0, [r7, #4]
 8014ea8:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8014eaa:	687b      	ldr	r3, [r7, #4]
 8014eac:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8014eae:	687b      	ldr	r3, [r7, #4]
 8014eb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014eb4:	d002      	beq.n	8014ebc <ip4_addr_isbroadcast_u32+0x1c>
 8014eb6:	687b      	ldr	r3, [r7, #4]
 8014eb8:	2b00      	cmp	r3, #0
 8014eba:	d101      	bne.n	8014ec0 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8014ebc:	2301      	movs	r3, #1
 8014ebe:	e02a      	b.n	8014f16 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8014ec0:	683b      	ldr	r3, [r7, #0]
 8014ec2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8014ec6:	f003 0302 	and.w	r3, r3, #2
 8014eca:	2b00      	cmp	r3, #0
 8014ecc:	d101      	bne.n	8014ed2 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8014ece:	2300      	movs	r3, #0
 8014ed0:	e021      	b.n	8014f16 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8014ed2:	683b      	ldr	r3, [r7, #0]
 8014ed4:	3304      	adds	r3, #4
 8014ed6:	681b      	ldr	r3, [r3, #0]
 8014ed8:	687a      	ldr	r2, [r7, #4]
 8014eda:	429a      	cmp	r2, r3
 8014edc:	d101      	bne.n	8014ee2 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8014ede:	2300      	movs	r3, #0
 8014ee0:	e019      	b.n	8014f16 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8014ee2:	68fa      	ldr	r2, [r7, #12]
 8014ee4:	683b      	ldr	r3, [r7, #0]
 8014ee6:	3304      	adds	r3, #4
 8014ee8:	681b      	ldr	r3, [r3, #0]
 8014eea:	405a      	eors	r2, r3
 8014eec:	683b      	ldr	r3, [r7, #0]
 8014eee:	3308      	adds	r3, #8
 8014ef0:	681b      	ldr	r3, [r3, #0]
 8014ef2:	4013      	ands	r3, r2
 8014ef4:	2b00      	cmp	r3, #0
 8014ef6:	d10d      	bne.n	8014f14 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8014ef8:	683b      	ldr	r3, [r7, #0]
 8014efa:	3308      	adds	r3, #8
 8014efc:	681b      	ldr	r3, [r3, #0]
 8014efe:	43da      	mvns	r2, r3
 8014f00:	687b      	ldr	r3, [r7, #4]
 8014f02:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8014f04:	683b      	ldr	r3, [r7, #0]
 8014f06:	3308      	adds	r3, #8
 8014f08:	681b      	ldr	r3, [r3, #0]
 8014f0a:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8014f0c:	429a      	cmp	r2, r3
 8014f0e:	d101      	bne.n	8014f14 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8014f10:	2301      	movs	r3, #1
 8014f12:	e000      	b.n	8014f16 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8014f14:	2300      	movs	r3, #0
  }
}
 8014f16:	4618      	mov	r0, r3
 8014f18:	3714      	adds	r7, #20
 8014f1a:	46bd      	mov	sp, r7
 8014f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f20:	4770      	bx	lr
	...

08014f24 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8014f24:	b580      	push	{r7, lr}
 8014f26:	b084      	sub	sp, #16
 8014f28:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8014f2a:	2300      	movs	r3, #0
 8014f2c:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8014f2e:	4b12      	ldr	r3, [pc, #72]	@ (8014f78 <ip_reass_tmr+0x54>)
 8014f30:	681b      	ldr	r3, [r3, #0]
 8014f32:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8014f34:	e018      	b.n	8014f68 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8014f36:	68fb      	ldr	r3, [r7, #12]
 8014f38:	7fdb      	ldrb	r3, [r3, #31]
 8014f3a:	2b00      	cmp	r3, #0
 8014f3c:	d00b      	beq.n	8014f56 <ip_reass_tmr+0x32>
      r->timer--;
 8014f3e:	68fb      	ldr	r3, [r7, #12]
 8014f40:	7fdb      	ldrb	r3, [r3, #31]
 8014f42:	3b01      	subs	r3, #1
 8014f44:	b2da      	uxtb	r2, r3
 8014f46:	68fb      	ldr	r3, [r7, #12]
 8014f48:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8014f4a:	68fb      	ldr	r3, [r7, #12]
 8014f4c:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8014f4e:	68fb      	ldr	r3, [r7, #12]
 8014f50:	681b      	ldr	r3, [r3, #0]
 8014f52:	60fb      	str	r3, [r7, #12]
 8014f54:	e008      	b.n	8014f68 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8014f56:	68fb      	ldr	r3, [r7, #12]
 8014f58:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8014f5a:	68fb      	ldr	r3, [r7, #12]
 8014f5c:	681b      	ldr	r3, [r3, #0]
 8014f5e:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8014f60:	68b9      	ldr	r1, [r7, #8]
 8014f62:	6878      	ldr	r0, [r7, #4]
 8014f64:	f000 f80a 	bl	8014f7c <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8014f68:	68fb      	ldr	r3, [r7, #12]
 8014f6a:	2b00      	cmp	r3, #0
 8014f6c:	d1e3      	bne.n	8014f36 <ip_reass_tmr+0x12>
    }
  }
}
 8014f6e:	bf00      	nop
 8014f70:	bf00      	nop
 8014f72:	3710      	adds	r7, #16
 8014f74:	46bd      	mov	sp, r7
 8014f76:	bd80      	pop	{r7, pc}
 8014f78:	2000ec98 	.word	0x2000ec98

08014f7c <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8014f7c:	b580      	push	{r7, lr}
 8014f7e:	b088      	sub	sp, #32
 8014f80:	af00      	add	r7, sp, #0
 8014f82:	6078      	str	r0, [r7, #4]
 8014f84:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8014f86:	2300      	movs	r3, #0
 8014f88:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8014f8a:	683a      	ldr	r2, [r7, #0]
 8014f8c:	687b      	ldr	r3, [r7, #4]
 8014f8e:	429a      	cmp	r2, r3
 8014f90:	d105      	bne.n	8014f9e <ip_reass_free_complete_datagram+0x22>
 8014f92:	4b45      	ldr	r3, [pc, #276]	@ (80150a8 <ip_reass_free_complete_datagram+0x12c>)
 8014f94:	22ab      	movs	r2, #171	@ 0xab
 8014f96:	4945      	ldr	r1, [pc, #276]	@ (80150ac <ip_reass_free_complete_datagram+0x130>)
 8014f98:	4845      	ldr	r0, [pc, #276]	@ (80150b0 <ip_reass_free_complete_datagram+0x134>)
 8014f9a:	f001 f9b9 	bl	8016310 <iprintf>
  if (prev != NULL) {
 8014f9e:	683b      	ldr	r3, [r7, #0]
 8014fa0:	2b00      	cmp	r3, #0
 8014fa2:	d00a      	beq.n	8014fba <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8014fa4:	683b      	ldr	r3, [r7, #0]
 8014fa6:	681b      	ldr	r3, [r3, #0]
 8014fa8:	687a      	ldr	r2, [r7, #4]
 8014faa:	429a      	cmp	r2, r3
 8014fac:	d005      	beq.n	8014fba <ip_reass_free_complete_datagram+0x3e>
 8014fae:	4b3e      	ldr	r3, [pc, #248]	@ (80150a8 <ip_reass_free_complete_datagram+0x12c>)
 8014fb0:	22ad      	movs	r2, #173	@ 0xad
 8014fb2:	4940      	ldr	r1, [pc, #256]	@ (80150b4 <ip_reass_free_complete_datagram+0x138>)
 8014fb4:	483e      	ldr	r0, [pc, #248]	@ (80150b0 <ip_reass_free_complete_datagram+0x134>)
 8014fb6:	f001 f9ab 	bl	8016310 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8014fba:	687b      	ldr	r3, [r7, #4]
 8014fbc:	685b      	ldr	r3, [r3, #4]
 8014fbe:	685b      	ldr	r3, [r3, #4]
 8014fc0:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8014fc2:	697b      	ldr	r3, [r7, #20]
 8014fc4:	889b      	ldrh	r3, [r3, #4]
 8014fc6:	b29b      	uxth	r3, r3
 8014fc8:	2b00      	cmp	r3, #0
 8014fca:	d12a      	bne.n	8015022 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8014fcc:	687b      	ldr	r3, [r7, #4]
 8014fce:	685b      	ldr	r3, [r3, #4]
 8014fd0:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8014fd2:	697b      	ldr	r3, [r7, #20]
 8014fd4:	681a      	ldr	r2, [r3, #0]
 8014fd6:	687b      	ldr	r3, [r7, #4]
 8014fd8:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8014fda:	69bb      	ldr	r3, [r7, #24]
 8014fdc:	6858      	ldr	r0, [r3, #4]
 8014fde:	687b      	ldr	r3, [r7, #4]
 8014fe0:	3308      	adds	r3, #8
 8014fe2:	2214      	movs	r2, #20
 8014fe4:	4619      	mov	r1, r3
 8014fe6:	f001 fafe 	bl	80165e6 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8014fea:	2101      	movs	r1, #1
 8014fec:	69b8      	ldr	r0, [r7, #24]
 8014fee:	f7ff fc47 	bl	8014880 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8014ff2:	69b8      	ldr	r0, [r7, #24]
 8014ff4:	f7f7 fcae 	bl	800c954 <pbuf_clen>
 8014ff8:	4603      	mov	r3, r0
 8014ffa:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8014ffc:	8bfa      	ldrh	r2, [r7, #30]
 8014ffe:	8a7b      	ldrh	r3, [r7, #18]
 8015000:	4413      	add	r3, r2
 8015002:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8015006:	db05      	blt.n	8015014 <ip_reass_free_complete_datagram+0x98>
 8015008:	4b27      	ldr	r3, [pc, #156]	@ (80150a8 <ip_reass_free_complete_datagram+0x12c>)
 801500a:	22bc      	movs	r2, #188	@ 0xbc
 801500c:	492a      	ldr	r1, [pc, #168]	@ (80150b8 <ip_reass_free_complete_datagram+0x13c>)
 801500e:	4828      	ldr	r0, [pc, #160]	@ (80150b0 <ip_reass_free_complete_datagram+0x134>)
 8015010:	f001 f97e 	bl	8016310 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8015014:	8bfa      	ldrh	r2, [r7, #30]
 8015016:	8a7b      	ldrh	r3, [r7, #18]
 8015018:	4413      	add	r3, r2
 801501a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801501c:	69b8      	ldr	r0, [r7, #24]
 801501e:	f7f7 fc0b 	bl	800c838 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8015022:	687b      	ldr	r3, [r7, #4]
 8015024:	685b      	ldr	r3, [r3, #4]
 8015026:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8015028:	e01f      	b.n	801506a <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801502a:	69bb      	ldr	r3, [r7, #24]
 801502c:	685b      	ldr	r3, [r3, #4]
 801502e:	617b      	str	r3, [r7, #20]
    pcur = p;
 8015030:	69bb      	ldr	r3, [r7, #24]
 8015032:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8015034:	697b      	ldr	r3, [r7, #20]
 8015036:	681b      	ldr	r3, [r3, #0]
 8015038:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801503a:	68f8      	ldr	r0, [r7, #12]
 801503c:	f7f7 fc8a 	bl	800c954 <pbuf_clen>
 8015040:	4603      	mov	r3, r0
 8015042:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8015044:	8bfa      	ldrh	r2, [r7, #30]
 8015046:	8a7b      	ldrh	r3, [r7, #18]
 8015048:	4413      	add	r3, r2
 801504a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801504e:	db05      	blt.n	801505c <ip_reass_free_complete_datagram+0xe0>
 8015050:	4b15      	ldr	r3, [pc, #84]	@ (80150a8 <ip_reass_free_complete_datagram+0x12c>)
 8015052:	22cc      	movs	r2, #204	@ 0xcc
 8015054:	4918      	ldr	r1, [pc, #96]	@ (80150b8 <ip_reass_free_complete_datagram+0x13c>)
 8015056:	4816      	ldr	r0, [pc, #88]	@ (80150b0 <ip_reass_free_complete_datagram+0x134>)
 8015058:	f001 f95a 	bl	8016310 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801505c:	8bfa      	ldrh	r2, [r7, #30]
 801505e:	8a7b      	ldrh	r3, [r7, #18]
 8015060:	4413      	add	r3, r2
 8015062:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8015064:	68f8      	ldr	r0, [r7, #12]
 8015066:	f7f7 fbe7 	bl	800c838 <pbuf_free>
  while (p != NULL) {
 801506a:	69bb      	ldr	r3, [r7, #24]
 801506c:	2b00      	cmp	r3, #0
 801506e:	d1dc      	bne.n	801502a <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8015070:	6839      	ldr	r1, [r7, #0]
 8015072:	6878      	ldr	r0, [r7, #4]
 8015074:	f000 f8c2 	bl	80151fc <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8015078:	4b10      	ldr	r3, [pc, #64]	@ (80150bc <ip_reass_free_complete_datagram+0x140>)
 801507a:	881b      	ldrh	r3, [r3, #0]
 801507c:	8bfa      	ldrh	r2, [r7, #30]
 801507e:	429a      	cmp	r2, r3
 8015080:	d905      	bls.n	801508e <ip_reass_free_complete_datagram+0x112>
 8015082:	4b09      	ldr	r3, [pc, #36]	@ (80150a8 <ip_reass_free_complete_datagram+0x12c>)
 8015084:	22d2      	movs	r2, #210	@ 0xd2
 8015086:	490e      	ldr	r1, [pc, #56]	@ (80150c0 <ip_reass_free_complete_datagram+0x144>)
 8015088:	4809      	ldr	r0, [pc, #36]	@ (80150b0 <ip_reass_free_complete_datagram+0x134>)
 801508a:	f001 f941 	bl	8016310 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801508e:	4b0b      	ldr	r3, [pc, #44]	@ (80150bc <ip_reass_free_complete_datagram+0x140>)
 8015090:	881a      	ldrh	r2, [r3, #0]
 8015092:	8bfb      	ldrh	r3, [r7, #30]
 8015094:	1ad3      	subs	r3, r2, r3
 8015096:	b29a      	uxth	r2, r3
 8015098:	4b08      	ldr	r3, [pc, #32]	@ (80150bc <ip_reass_free_complete_datagram+0x140>)
 801509a:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801509c:	8bfb      	ldrh	r3, [r7, #30]
}
 801509e:	4618      	mov	r0, r3
 80150a0:	3720      	adds	r7, #32
 80150a2:	46bd      	mov	sp, r7
 80150a4:	bd80      	pop	{r7, pc}
 80150a6:	bf00      	nop
 80150a8:	0801aab0 	.word	0x0801aab0
 80150ac:	0801aaec 	.word	0x0801aaec
 80150b0:	0801aaf8 	.word	0x0801aaf8
 80150b4:	0801ab20 	.word	0x0801ab20
 80150b8:	0801ab34 	.word	0x0801ab34
 80150bc:	2000ec9c 	.word	0x2000ec9c
 80150c0:	0801ab54 	.word	0x0801ab54

080150c4 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 80150c4:	b580      	push	{r7, lr}
 80150c6:	b08a      	sub	sp, #40	@ 0x28
 80150c8:	af00      	add	r7, sp, #0
 80150ca:	6078      	str	r0, [r7, #4]
 80150cc:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 80150ce:	2300      	movs	r3, #0
 80150d0:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 80150d2:	2300      	movs	r3, #0
 80150d4:	623b      	str	r3, [r7, #32]
    prev = NULL;
 80150d6:	2300      	movs	r3, #0
 80150d8:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 80150da:	2300      	movs	r3, #0
 80150dc:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 80150de:	2300      	movs	r3, #0
 80150e0:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 80150e2:	4b28      	ldr	r3, [pc, #160]	@ (8015184 <ip_reass_remove_oldest_datagram+0xc0>)
 80150e4:	681b      	ldr	r3, [r3, #0]
 80150e6:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 80150e8:	e030      	b.n	801514c <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 80150ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80150ec:	695a      	ldr	r2, [r3, #20]
 80150ee:	687b      	ldr	r3, [r7, #4]
 80150f0:	68db      	ldr	r3, [r3, #12]
 80150f2:	429a      	cmp	r2, r3
 80150f4:	d10c      	bne.n	8015110 <ip_reass_remove_oldest_datagram+0x4c>
 80150f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80150f8:	699a      	ldr	r2, [r3, #24]
 80150fa:	687b      	ldr	r3, [r7, #4]
 80150fc:	691b      	ldr	r3, [r3, #16]
 80150fe:	429a      	cmp	r2, r3
 8015100:	d106      	bne.n	8015110 <ip_reass_remove_oldest_datagram+0x4c>
 8015102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015104:	899a      	ldrh	r2, [r3, #12]
 8015106:	687b      	ldr	r3, [r7, #4]
 8015108:	889b      	ldrh	r3, [r3, #4]
 801510a:	b29b      	uxth	r3, r3
 801510c:	429a      	cmp	r2, r3
 801510e:	d014      	beq.n	801513a <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8015110:	693b      	ldr	r3, [r7, #16]
 8015112:	3301      	adds	r3, #1
 8015114:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8015116:	6a3b      	ldr	r3, [r7, #32]
 8015118:	2b00      	cmp	r3, #0
 801511a:	d104      	bne.n	8015126 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 801511c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801511e:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8015120:	69fb      	ldr	r3, [r7, #28]
 8015122:	61bb      	str	r3, [r7, #24]
 8015124:	e009      	b.n	801513a <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8015126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015128:	7fda      	ldrb	r2, [r3, #31]
 801512a:	6a3b      	ldr	r3, [r7, #32]
 801512c:	7fdb      	ldrb	r3, [r3, #31]
 801512e:	429a      	cmp	r2, r3
 8015130:	d803      	bhi.n	801513a <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8015132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015134:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8015136:	69fb      	ldr	r3, [r7, #28]
 8015138:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801513a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801513c:	681b      	ldr	r3, [r3, #0]
 801513e:	2b00      	cmp	r3, #0
 8015140:	d001      	beq.n	8015146 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8015142:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015144:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8015146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015148:	681b      	ldr	r3, [r3, #0]
 801514a:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 801514c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801514e:	2b00      	cmp	r3, #0
 8015150:	d1cb      	bne.n	80150ea <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8015152:	6a3b      	ldr	r3, [r7, #32]
 8015154:	2b00      	cmp	r3, #0
 8015156:	d008      	beq.n	801516a <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8015158:	69b9      	ldr	r1, [r7, #24]
 801515a:	6a38      	ldr	r0, [r7, #32]
 801515c:	f7ff ff0e 	bl	8014f7c <ip_reass_free_complete_datagram>
 8015160:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8015162:	697a      	ldr	r2, [r7, #20]
 8015164:	68fb      	ldr	r3, [r7, #12]
 8015166:	4413      	add	r3, r2
 8015168:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801516a:	697a      	ldr	r2, [r7, #20]
 801516c:	683b      	ldr	r3, [r7, #0]
 801516e:	429a      	cmp	r2, r3
 8015170:	da02      	bge.n	8015178 <ip_reass_remove_oldest_datagram+0xb4>
 8015172:	693b      	ldr	r3, [r7, #16]
 8015174:	2b01      	cmp	r3, #1
 8015176:	dcac      	bgt.n	80150d2 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8015178:	697b      	ldr	r3, [r7, #20]
}
 801517a:	4618      	mov	r0, r3
 801517c:	3728      	adds	r7, #40	@ 0x28
 801517e:	46bd      	mov	sp, r7
 8015180:	bd80      	pop	{r7, pc}
 8015182:	bf00      	nop
 8015184:	2000ec98 	.word	0x2000ec98

08015188 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8015188:	b580      	push	{r7, lr}
 801518a:	b084      	sub	sp, #16
 801518c:	af00      	add	r7, sp, #0
 801518e:	6078      	str	r0, [r7, #4]
 8015190:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8015192:	2004      	movs	r0, #4
 8015194:	f7f6 fc36 	bl	800ba04 <memp_malloc>
 8015198:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801519a:	68fb      	ldr	r3, [r7, #12]
 801519c:	2b00      	cmp	r3, #0
 801519e:	d110      	bne.n	80151c2 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 80151a0:	6839      	ldr	r1, [r7, #0]
 80151a2:	6878      	ldr	r0, [r7, #4]
 80151a4:	f7ff ff8e 	bl	80150c4 <ip_reass_remove_oldest_datagram>
 80151a8:	4602      	mov	r2, r0
 80151aa:	683b      	ldr	r3, [r7, #0]
 80151ac:	4293      	cmp	r3, r2
 80151ae:	dc03      	bgt.n	80151b8 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80151b0:	2004      	movs	r0, #4
 80151b2:	f7f6 fc27 	bl	800ba04 <memp_malloc>
 80151b6:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 80151b8:	68fb      	ldr	r3, [r7, #12]
 80151ba:	2b00      	cmp	r3, #0
 80151bc:	d101      	bne.n	80151c2 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 80151be:	2300      	movs	r3, #0
 80151c0:	e016      	b.n	80151f0 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 80151c2:	2220      	movs	r2, #32
 80151c4:	2100      	movs	r1, #0
 80151c6:	68f8      	ldr	r0, [r7, #12]
 80151c8:	f001 f941 	bl	801644e <memset>
  ipr->timer = IP_REASS_MAXAGE;
 80151cc:	68fb      	ldr	r3, [r7, #12]
 80151ce:	220f      	movs	r2, #15
 80151d0:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 80151d2:	4b09      	ldr	r3, [pc, #36]	@ (80151f8 <ip_reass_enqueue_new_datagram+0x70>)
 80151d4:	681a      	ldr	r2, [r3, #0]
 80151d6:	68fb      	ldr	r3, [r7, #12]
 80151d8:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 80151da:	4a07      	ldr	r2, [pc, #28]	@ (80151f8 <ip_reass_enqueue_new_datagram+0x70>)
 80151dc:	68fb      	ldr	r3, [r7, #12]
 80151de:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 80151e0:	68fb      	ldr	r3, [r7, #12]
 80151e2:	3308      	adds	r3, #8
 80151e4:	2214      	movs	r2, #20
 80151e6:	6879      	ldr	r1, [r7, #4]
 80151e8:	4618      	mov	r0, r3
 80151ea:	f001 f9fc 	bl	80165e6 <memcpy>
  return ipr;
 80151ee:	68fb      	ldr	r3, [r7, #12]
}
 80151f0:	4618      	mov	r0, r3
 80151f2:	3710      	adds	r7, #16
 80151f4:	46bd      	mov	sp, r7
 80151f6:	bd80      	pop	{r7, pc}
 80151f8:	2000ec98 	.word	0x2000ec98

080151fc <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80151fc:	b580      	push	{r7, lr}
 80151fe:	b082      	sub	sp, #8
 8015200:	af00      	add	r7, sp, #0
 8015202:	6078      	str	r0, [r7, #4]
 8015204:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8015206:	4b10      	ldr	r3, [pc, #64]	@ (8015248 <ip_reass_dequeue_datagram+0x4c>)
 8015208:	681b      	ldr	r3, [r3, #0]
 801520a:	687a      	ldr	r2, [r7, #4]
 801520c:	429a      	cmp	r2, r3
 801520e:	d104      	bne.n	801521a <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8015210:	687b      	ldr	r3, [r7, #4]
 8015212:	681b      	ldr	r3, [r3, #0]
 8015214:	4a0c      	ldr	r2, [pc, #48]	@ (8015248 <ip_reass_dequeue_datagram+0x4c>)
 8015216:	6013      	str	r3, [r2, #0]
 8015218:	e00d      	b.n	8015236 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801521a:	683b      	ldr	r3, [r7, #0]
 801521c:	2b00      	cmp	r3, #0
 801521e:	d106      	bne.n	801522e <ip_reass_dequeue_datagram+0x32>
 8015220:	4b0a      	ldr	r3, [pc, #40]	@ (801524c <ip_reass_dequeue_datagram+0x50>)
 8015222:	f240 1245 	movw	r2, #325	@ 0x145
 8015226:	490a      	ldr	r1, [pc, #40]	@ (8015250 <ip_reass_dequeue_datagram+0x54>)
 8015228:	480a      	ldr	r0, [pc, #40]	@ (8015254 <ip_reass_dequeue_datagram+0x58>)
 801522a:	f001 f871 	bl	8016310 <iprintf>
    prev->next = ipr->next;
 801522e:	687b      	ldr	r3, [r7, #4]
 8015230:	681a      	ldr	r2, [r3, #0]
 8015232:	683b      	ldr	r3, [r7, #0]
 8015234:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8015236:	6879      	ldr	r1, [r7, #4]
 8015238:	2004      	movs	r0, #4
 801523a:	f7f6 fc59 	bl	800baf0 <memp_free>
}
 801523e:	bf00      	nop
 8015240:	3708      	adds	r7, #8
 8015242:	46bd      	mov	sp, r7
 8015244:	bd80      	pop	{r7, pc}
 8015246:	bf00      	nop
 8015248:	2000ec98 	.word	0x2000ec98
 801524c:	0801aab0 	.word	0x0801aab0
 8015250:	0801ab78 	.word	0x0801ab78
 8015254:	0801aaf8 	.word	0x0801aaf8

08015258 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8015258:	b580      	push	{r7, lr}
 801525a:	b08c      	sub	sp, #48	@ 0x30
 801525c:	af00      	add	r7, sp, #0
 801525e:	60f8      	str	r0, [r7, #12]
 8015260:	60b9      	str	r1, [r7, #8]
 8015262:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8015264:	2300      	movs	r3, #0
 8015266:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8015268:	2301      	movs	r3, #1
 801526a:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 801526c:	68bb      	ldr	r3, [r7, #8]
 801526e:	685b      	ldr	r3, [r3, #4]
 8015270:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8015272:	69fb      	ldr	r3, [r7, #28]
 8015274:	885b      	ldrh	r3, [r3, #2]
 8015276:	b29b      	uxth	r3, r3
 8015278:	4618      	mov	r0, r3
 801527a:	f7f5 feeb 	bl	800b054 <lwip_htons>
 801527e:	4603      	mov	r3, r0
 8015280:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8015282:	69fb      	ldr	r3, [r7, #28]
 8015284:	781b      	ldrb	r3, [r3, #0]
 8015286:	f003 030f 	and.w	r3, r3, #15
 801528a:	b2db      	uxtb	r3, r3
 801528c:	009b      	lsls	r3, r3, #2
 801528e:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8015290:	7e7b      	ldrb	r3, [r7, #25]
 8015292:	b29b      	uxth	r3, r3
 8015294:	8b7a      	ldrh	r2, [r7, #26]
 8015296:	429a      	cmp	r2, r3
 8015298:	d202      	bcs.n	80152a0 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801529a:	f04f 33ff 	mov.w	r3, #4294967295
 801529e:	e135      	b.n	801550c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 80152a0:	7e7b      	ldrb	r3, [r7, #25]
 80152a2:	b29b      	uxth	r3, r3
 80152a4:	8b7a      	ldrh	r2, [r7, #26]
 80152a6:	1ad3      	subs	r3, r2, r3
 80152a8:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 80152aa:	69fb      	ldr	r3, [r7, #28]
 80152ac:	88db      	ldrh	r3, [r3, #6]
 80152ae:	b29b      	uxth	r3, r3
 80152b0:	4618      	mov	r0, r3
 80152b2:	f7f5 fecf 	bl	800b054 <lwip_htons>
 80152b6:	4603      	mov	r3, r0
 80152b8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80152bc:	b29b      	uxth	r3, r3
 80152be:	00db      	lsls	r3, r3, #3
 80152c0:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 80152c2:	68bb      	ldr	r3, [r7, #8]
 80152c4:	685b      	ldr	r3, [r3, #4]
 80152c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 80152c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80152ca:	2200      	movs	r2, #0
 80152cc:	701a      	strb	r2, [r3, #0]
 80152ce:	2200      	movs	r2, #0
 80152d0:	705a      	strb	r2, [r3, #1]
 80152d2:	2200      	movs	r2, #0
 80152d4:	709a      	strb	r2, [r3, #2]
 80152d6:	2200      	movs	r2, #0
 80152d8:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 80152da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80152dc:	8afa      	ldrh	r2, [r7, #22]
 80152de:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 80152e0:	8afa      	ldrh	r2, [r7, #22]
 80152e2:	8b7b      	ldrh	r3, [r7, #26]
 80152e4:	4413      	add	r3, r2
 80152e6:	b29a      	uxth	r2, r3
 80152e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80152ea:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 80152ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80152ee:	88db      	ldrh	r3, [r3, #6]
 80152f0:	b29b      	uxth	r3, r3
 80152f2:	8afa      	ldrh	r2, [r7, #22]
 80152f4:	429a      	cmp	r2, r3
 80152f6:	d902      	bls.n	80152fe <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80152f8:	f04f 33ff 	mov.w	r3, #4294967295
 80152fc:	e106      	b.n	801550c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 80152fe:	68fb      	ldr	r3, [r7, #12]
 8015300:	685b      	ldr	r3, [r3, #4]
 8015302:	627b      	str	r3, [r7, #36]	@ 0x24
 8015304:	e068      	b.n	80153d8 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8015306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015308:	685b      	ldr	r3, [r3, #4]
 801530a:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 801530c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801530e:	889b      	ldrh	r3, [r3, #4]
 8015310:	b29a      	uxth	r2, r3
 8015312:	693b      	ldr	r3, [r7, #16]
 8015314:	889b      	ldrh	r3, [r3, #4]
 8015316:	b29b      	uxth	r3, r3
 8015318:	429a      	cmp	r2, r3
 801531a:	d235      	bcs.n	8015388 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 801531c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801531e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015320:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8015322:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015324:	2b00      	cmp	r3, #0
 8015326:	d020      	beq.n	801536a <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8015328:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801532a:	889b      	ldrh	r3, [r3, #4]
 801532c:	b29a      	uxth	r2, r3
 801532e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015330:	88db      	ldrh	r3, [r3, #6]
 8015332:	b29b      	uxth	r3, r3
 8015334:	429a      	cmp	r2, r3
 8015336:	d307      	bcc.n	8015348 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8015338:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801533a:	88db      	ldrh	r3, [r3, #6]
 801533c:	b29a      	uxth	r2, r3
 801533e:	693b      	ldr	r3, [r7, #16]
 8015340:	889b      	ldrh	r3, [r3, #4]
 8015342:	b29b      	uxth	r3, r3
 8015344:	429a      	cmp	r2, r3
 8015346:	d902      	bls.n	801534e <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015348:	f04f 33ff 	mov.w	r3, #4294967295
 801534c:	e0de      	b.n	801550c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801534e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015350:	68ba      	ldr	r2, [r7, #8]
 8015352:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8015354:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015356:	88db      	ldrh	r3, [r3, #6]
 8015358:	b29a      	uxth	r2, r3
 801535a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801535c:	889b      	ldrh	r3, [r3, #4]
 801535e:	b29b      	uxth	r3, r3
 8015360:	429a      	cmp	r2, r3
 8015362:	d03d      	beq.n	80153e0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8015364:	2300      	movs	r3, #0
 8015366:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8015368:	e03a      	b.n	80153e0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801536a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801536c:	88db      	ldrh	r3, [r3, #6]
 801536e:	b29a      	uxth	r2, r3
 8015370:	693b      	ldr	r3, [r7, #16]
 8015372:	889b      	ldrh	r3, [r3, #4]
 8015374:	b29b      	uxth	r3, r3
 8015376:	429a      	cmp	r2, r3
 8015378:	d902      	bls.n	8015380 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801537a:	f04f 33ff 	mov.w	r3, #4294967295
 801537e:	e0c5      	b.n	801550c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8015380:	68fb      	ldr	r3, [r7, #12]
 8015382:	68ba      	ldr	r2, [r7, #8]
 8015384:	605a      	str	r2, [r3, #4]
      break;
 8015386:	e02b      	b.n	80153e0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8015388:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801538a:	889b      	ldrh	r3, [r3, #4]
 801538c:	b29a      	uxth	r2, r3
 801538e:	693b      	ldr	r3, [r7, #16]
 8015390:	889b      	ldrh	r3, [r3, #4]
 8015392:	b29b      	uxth	r3, r3
 8015394:	429a      	cmp	r2, r3
 8015396:	d102      	bne.n	801539e <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015398:	f04f 33ff 	mov.w	r3, #4294967295
 801539c:	e0b6      	b.n	801550c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801539e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80153a0:	889b      	ldrh	r3, [r3, #4]
 80153a2:	b29a      	uxth	r2, r3
 80153a4:	693b      	ldr	r3, [r7, #16]
 80153a6:	88db      	ldrh	r3, [r3, #6]
 80153a8:	b29b      	uxth	r3, r3
 80153aa:	429a      	cmp	r2, r3
 80153ac:	d202      	bcs.n	80153b4 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80153ae:	f04f 33ff 	mov.w	r3, #4294967295
 80153b2:	e0ab      	b.n	801550c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 80153b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80153b6:	2b00      	cmp	r3, #0
 80153b8:	d009      	beq.n	80153ce <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 80153ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80153bc:	88db      	ldrh	r3, [r3, #6]
 80153be:	b29a      	uxth	r2, r3
 80153c0:	693b      	ldr	r3, [r7, #16]
 80153c2:	889b      	ldrh	r3, [r3, #4]
 80153c4:	b29b      	uxth	r3, r3
 80153c6:	429a      	cmp	r2, r3
 80153c8:	d001      	beq.n	80153ce <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80153ca:	2300      	movs	r3, #0
 80153cc:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 80153ce:	693b      	ldr	r3, [r7, #16]
 80153d0:	681b      	ldr	r3, [r3, #0]
 80153d2:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 80153d4:	693b      	ldr	r3, [r7, #16]
 80153d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 80153d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80153da:	2b00      	cmp	r3, #0
 80153dc:	d193      	bne.n	8015306 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 80153de:	e000      	b.n	80153e2 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 80153e0:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 80153e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80153e4:	2b00      	cmp	r3, #0
 80153e6:	d12d      	bne.n	8015444 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 80153e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80153ea:	2b00      	cmp	r3, #0
 80153ec:	d01c      	beq.n	8015428 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 80153ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80153f0:	88db      	ldrh	r3, [r3, #6]
 80153f2:	b29a      	uxth	r2, r3
 80153f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80153f6:	889b      	ldrh	r3, [r3, #4]
 80153f8:	b29b      	uxth	r3, r3
 80153fa:	429a      	cmp	r2, r3
 80153fc:	d906      	bls.n	801540c <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 80153fe:	4b45      	ldr	r3, [pc, #276]	@ (8015514 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015400:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 8015404:	4944      	ldr	r1, [pc, #272]	@ (8015518 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8015406:	4845      	ldr	r0, [pc, #276]	@ (801551c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015408:	f000 ff82 	bl	8016310 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 801540c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801540e:	68ba      	ldr	r2, [r7, #8]
 8015410:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8015412:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015414:	88db      	ldrh	r3, [r3, #6]
 8015416:	b29a      	uxth	r2, r3
 8015418:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801541a:	889b      	ldrh	r3, [r3, #4]
 801541c:	b29b      	uxth	r3, r3
 801541e:	429a      	cmp	r2, r3
 8015420:	d010      	beq.n	8015444 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8015422:	2300      	movs	r3, #0
 8015424:	623b      	str	r3, [r7, #32]
 8015426:	e00d      	b.n	8015444 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8015428:	68fb      	ldr	r3, [r7, #12]
 801542a:	685b      	ldr	r3, [r3, #4]
 801542c:	2b00      	cmp	r3, #0
 801542e:	d006      	beq.n	801543e <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8015430:	4b38      	ldr	r3, [pc, #224]	@ (8015514 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015432:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 8015436:	493a      	ldr	r1, [pc, #232]	@ (8015520 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8015438:	4838      	ldr	r0, [pc, #224]	@ (801551c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801543a:	f000 ff69 	bl	8016310 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801543e:	68fb      	ldr	r3, [r7, #12]
 8015440:	68ba      	ldr	r2, [r7, #8]
 8015442:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8015444:	687b      	ldr	r3, [r7, #4]
 8015446:	2b00      	cmp	r3, #0
 8015448:	d105      	bne.n	8015456 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801544a:	68fb      	ldr	r3, [r7, #12]
 801544c:	7f9b      	ldrb	r3, [r3, #30]
 801544e:	f003 0301 	and.w	r3, r3, #1
 8015452:	2b00      	cmp	r3, #0
 8015454:	d059      	beq.n	801550a <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8015456:	6a3b      	ldr	r3, [r7, #32]
 8015458:	2b00      	cmp	r3, #0
 801545a:	d04f      	beq.n	80154fc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801545c:	68fb      	ldr	r3, [r7, #12]
 801545e:	685b      	ldr	r3, [r3, #4]
 8015460:	2b00      	cmp	r3, #0
 8015462:	d006      	beq.n	8015472 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8015464:	68fb      	ldr	r3, [r7, #12]
 8015466:	685b      	ldr	r3, [r3, #4]
 8015468:	685b      	ldr	r3, [r3, #4]
 801546a:	889b      	ldrh	r3, [r3, #4]
 801546c:	b29b      	uxth	r3, r3
 801546e:	2b00      	cmp	r3, #0
 8015470:	d002      	beq.n	8015478 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8015472:	2300      	movs	r3, #0
 8015474:	623b      	str	r3, [r7, #32]
 8015476:	e041      	b.n	80154fc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8015478:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801547a:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 801547c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801547e:	681b      	ldr	r3, [r3, #0]
 8015480:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 8015482:	e012      	b.n	80154aa <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8015484:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015486:	685b      	ldr	r3, [r3, #4]
 8015488:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 801548a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801548c:	88db      	ldrh	r3, [r3, #6]
 801548e:	b29a      	uxth	r2, r3
 8015490:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015492:	889b      	ldrh	r3, [r3, #4]
 8015494:	b29b      	uxth	r3, r3
 8015496:	429a      	cmp	r2, r3
 8015498:	d002      	beq.n	80154a0 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801549a:	2300      	movs	r3, #0
 801549c:	623b      	str	r3, [r7, #32]
            break;
 801549e:	e007      	b.n	80154b0 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 80154a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80154a2:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 80154a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80154a6:	681b      	ldr	r3, [r3, #0]
 80154a8:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 80154aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80154ac:	2b00      	cmp	r3, #0
 80154ae:	d1e9      	bne.n	8015484 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 80154b0:	6a3b      	ldr	r3, [r7, #32]
 80154b2:	2b00      	cmp	r3, #0
 80154b4:	d022      	beq.n	80154fc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 80154b6:	68fb      	ldr	r3, [r7, #12]
 80154b8:	685b      	ldr	r3, [r3, #4]
 80154ba:	2b00      	cmp	r3, #0
 80154bc:	d106      	bne.n	80154cc <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 80154be:	4b15      	ldr	r3, [pc, #84]	@ (8015514 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80154c0:	f240 12df 	movw	r2, #479	@ 0x1df
 80154c4:	4917      	ldr	r1, [pc, #92]	@ (8015524 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80154c6:	4815      	ldr	r0, [pc, #84]	@ (801551c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80154c8:	f000 ff22 	bl	8016310 <iprintf>
          LWIP_ASSERT("sanity check",
 80154cc:	68fb      	ldr	r3, [r7, #12]
 80154ce:	685b      	ldr	r3, [r3, #4]
 80154d0:	685b      	ldr	r3, [r3, #4]
 80154d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80154d4:	429a      	cmp	r2, r3
 80154d6:	d106      	bne.n	80154e6 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 80154d8:	4b0e      	ldr	r3, [pc, #56]	@ (8015514 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80154da:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80154de:	4911      	ldr	r1, [pc, #68]	@ (8015524 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80154e0:	480e      	ldr	r0, [pc, #56]	@ (801551c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80154e2:	f000 ff15 	bl	8016310 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 80154e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80154e8:	681b      	ldr	r3, [r3, #0]
 80154ea:	2b00      	cmp	r3, #0
 80154ec:	d006      	beq.n	80154fc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 80154ee:	4b09      	ldr	r3, [pc, #36]	@ (8015514 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80154f0:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 80154f4:	490c      	ldr	r1, [pc, #48]	@ (8015528 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 80154f6:	4809      	ldr	r0, [pc, #36]	@ (801551c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80154f8:	f000 ff0a 	bl	8016310 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 80154fc:	6a3b      	ldr	r3, [r7, #32]
 80154fe:	2b00      	cmp	r3, #0
 8015500:	bf14      	ite	ne
 8015502:	2301      	movne	r3, #1
 8015504:	2300      	moveq	r3, #0
 8015506:	b2db      	uxtb	r3, r3
 8015508:	e000      	b.n	801550c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801550a:	2300      	movs	r3, #0
}
 801550c:	4618      	mov	r0, r3
 801550e:	3730      	adds	r7, #48	@ 0x30
 8015510:	46bd      	mov	sp, r7
 8015512:	bd80      	pop	{r7, pc}
 8015514:	0801aab0 	.word	0x0801aab0
 8015518:	0801ab94 	.word	0x0801ab94
 801551c:	0801aaf8 	.word	0x0801aaf8
 8015520:	0801abb4 	.word	0x0801abb4
 8015524:	0801abec 	.word	0x0801abec
 8015528:	0801abfc 	.word	0x0801abfc

0801552c <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801552c:	b580      	push	{r7, lr}
 801552e:	b08e      	sub	sp, #56	@ 0x38
 8015530:	af00      	add	r7, sp, #0
 8015532:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8015534:	687b      	ldr	r3, [r7, #4]
 8015536:	685b      	ldr	r3, [r3, #4]
 8015538:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801553a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801553c:	781b      	ldrb	r3, [r3, #0]
 801553e:	f003 030f 	and.w	r3, r3, #15
 8015542:	b2db      	uxtb	r3, r3
 8015544:	009b      	lsls	r3, r3, #2
 8015546:	b2db      	uxtb	r3, r3
 8015548:	2b14      	cmp	r3, #20
 801554a:	f040 8171 	bne.w	8015830 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801554e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015550:	88db      	ldrh	r3, [r3, #6]
 8015552:	b29b      	uxth	r3, r3
 8015554:	4618      	mov	r0, r3
 8015556:	f7f5 fd7d 	bl	800b054 <lwip_htons>
 801555a:	4603      	mov	r3, r0
 801555c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015560:	b29b      	uxth	r3, r3
 8015562:	00db      	lsls	r3, r3, #3
 8015564:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8015566:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015568:	885b      	ldrh	r3, [r3, #2]
 801556a:	b29b      	uxth	r3, r3
 801556c:	4618      	mov	r0, r3
 801556e:	f7f5 fd71 	bl	800b054 <lwip_htons>
 8015572:	4603      	mov	r3, r0
 8015574:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8015576:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015578:	781b      	ldrb	r3, [r3, #0]
 801557a:	f003 030f 	and.w	r3, r3, #15
 801557e:	b2db      	uxtb	r3, r3
 8015580:	009b      	lsls	r3, r3, #2
 8015582:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 8015586:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801558a:	b29b      	uxth	r3, r3
 801558c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801558e:	429a      	cmp	r2, r3
 8015590:	f0c0 8150 	bcc.w	8015834 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8015594:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8015598:	b29b      	uxth	r3, r3
 801559a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801559c:	1ad3      	subs	r3, r2, r3
 801559e:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 80155a0:	6878      	ldr	r0, [r7, #4]
 80155a2:	f7f7 f9d7 	bl	800c954 <pbuf_clen>
 80155a6:	4603      	mov	r3, r0
 80155a8:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80155aa:	4b8c      	ldr	r3, [pc, #560]	@ (80157dc <ip4_reass+0x2b0>)
 80155ac:	881b      	ldrh	r3, [r3, #0]
 80155ae:	461a      	mov	r2, r3
 80155b0:	8c3b      	ldrh	r3, [r7, #32]
 80155b2:	4413      	add	r3, r2
 80155b4:	2b0a      	cmp	r3, #10
 80155b6:	dd10      	ble.n	80155da <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80155b8:	8c3b      	ldrh	r3, [r7, #32]
 80155ba:	4619      	mov	r1, r3
 80155bc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80155be:	f7ff fd81 	bl	80150c4 <ip_reass_remove_oldest_datagram>
 80155c2:	4603      	mov	r3, r0
 80155c4:	2b00      	cmp	r3, #0
 80155c6:	f000 8137 	beq.w	8015838 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 80155ca:	4b84      	ldr	r3, [pc, #528]	@ (80157dc <ip4_reass+0x2b0>)
 80155cc:	881b      	ldrh	r3, [r3, #0]
 80155ce:	461a      	mov	r2, r3
 80155d0:	8c3b      	ldrh	r3, [r7, #32]
 80155d2:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80155d4:	2b0a      	cmp	r3, #10
 80155d6:	f300 812f 	bgt.w	8015838 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80155da:	4b81      	ldr	r3, [pc, #516]	@ (80157e0 <ip4_reass+0x2b4>)
 80155dc:	681b      	ldr	r3, [r3, #0]
 80155de:	633b      	str	r3, [r7, #48]	@ 0x30
 80155e0:	e015      	b.n	801560e <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 80155e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80155e4:	695a      	ldr	r2, [r3, #20]
 80155e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80155e8:	68db      	ldr	r3, [r3, #12]
 80155ea:	429a      	cmp	r2, r3
 80155ec:	d10c      	bne.n	8015608 <ip4_reass+0xdc>
 80155ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80155f0:	699a      	ldr	r2, [r3, #24]
 80155f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80155f4:	691b      	ldr	r3, [r3, #16]
 80155f6:	429a      	cmp	r2, r3
 80155f8:	d106      	bne.n	8015608 <ip4_reass+0xdc>
 80155fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80155fc:	899a      	ldrh	r2, [r3, #12]
 80155fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015600:	889b      	ldrh	r3, [r3, #4]
 8015602:	b29b      	uxth	r3, r3
 8015604:	429a      	cmp	r2, r3
 8015606:	d006      	beq.n	8015616 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8015608:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801560a:	681b      	ldr	r3, [r3, #0]
 801560c:	633b      	str	r3, [r7, #48]	@ 0x30
 801560e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015610:	2b00      	cmp	r3, #0
 8015612:	d1e6      	bne.n	80155e2 <ip4_reass+0xb6>
 8015614:	e000      	b.n	8015618 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8015616:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8015618:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801561a:	2b00      	cmp	r3, #0
 801561c:	d109      	bne.n	8015632 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801561e:	8c3b      	ldrh	r3, [r7, #32]
 8015620:	4619      	mov	r1, r3
 8015622:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8015624:	f7ff fdb0 	bl	8015188 <ip_reass_enqueue_new_datagram>
 8015628:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801562a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801562c:	2b00      	cmp	r3, #0
 801562e:	d11c      	bne.n	801566a <ip4_reass+0x13e>
      goto nullreturn;
 8015630:	e105      	b.n	801583e <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8015632:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015634:	88db      	ldrh	r3, [r3, #6]
 8015636:	b29b      	uxth	r3, r3
 8015638:	4618      	mov	r0, r3
 801563a:	f7f5 fd0b 	bl	800b054 <lwip_htons>
 801563e:	4603      	mov	r3, r0
 8015640:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015644:	2b00      	cmp	r3, #0
 8015646:	d110      	bne.n	801566a <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8015648:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801564a:	89db      	ldrh	r3, [r3, #14]
 801564c:	4618      	mov	r0, r3
 801564e:	f7f5 fd01 	bl	800b054 <lwip_htons>
 8015652:	4603      	mov	r3, r0
 8015654:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8015658:	2b00      	cmp	r3, #0
 801565a:	d006      	beq.n	801566a <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801565c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801565e:	3308      	adds	r3, #8
 8015660:	2214      	movs	r2, #20
 8015662:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8015664:	4618      	mov	r0, r3
 8015666:	f000 ffbe 	bl	80165e6 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801566a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801566c:	88db      	ldrh	r3, [r3, #6]
 801566e:	b29b      	uxth	r3, r3
 8015670:	f003 0320 	and.w	r3, r3, #32
 8015674:	2b00      	cmp	r3, #0
 8015676:	bf0c      	ite	eq
 8015678:	2301      	moveq	r3, #1
 801567a:	2300      	movne	r3, #0
 801567c:	b2db      	uxtb	r3, r3
 801567e:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8015680:	69fb      	ldr	r3, [r7, #28]
 8015682:	2b00      	cmp	r3, #0
 8015684:	d00e      	beq.n	80156a4 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8015686:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8015688:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801568a:	4413      	add	r3, r2
 801568c:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801568e:	8b7a      	ldrh	r2, [r7, #26]
 8015690:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8015692:	429a      	cmp	r2, r3
 8015694:	f0c0 80a0 	bcc.w	80157d8 <ip4_reass+0x2ac>
 8015698:	8b7b      	ldrh	r3, [r7, #26]
 801569a:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 801569e:	4293      	cmp	r3, r2
 80156a0:	f200 809a 	bhi.w	80157d8 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 80156a4:	69fa      	ldr	r2, [r7, #28]
 80156a6:	6879      	ldr	r1, [r7, #4]
 80156a8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80156aa:	f7ff fdd5 	bl	8015258 <ip_reass_chain_frag_into_datagram_and_validate>
 80156ae:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 80156b0:	697b      	ldr	r3, [r7, #20]
 80156b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80156b6:	f000 809b 	beq.w	80157f0 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80156ba:	4b48      	ldr	r3, [pc, #288]	@ (80157dc <ip4_reass+0x2b0>)
 80156bc:	881a      	ldrh	r2, [r3, #0]
 80156be:	8c3b      	ldrh	r3, [r7, #32]
 80156c0:	4413      	add	r3, r2
 80156c2:	b29a      	uxth	r2, r3
 80156c4:	4b45      	ldr	r3, [pc, #276]	@ (80157dc <ip4_reass+0x2b0>)
 80156c6:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 80156c8:	69fb      	ldr	r3, [r7, #28]
 80156ca:	2b00      	cmp	r3, #0
 80156cc:	d00d      	beq.n	80156ea <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 80156ce:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80156d0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80156d2:	4413      	add	r3, r2
 80156d4:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 80156d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80156d8:	8a7a      	ldrh	r2, [r7, #18]
 80156da:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80156dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80156de:	7f9b      	ldrb	r3, [r3, #30]
 80156e0:	f043 0301 	orr.w	r3, r3, #1
 80156e4:	b2da      	uxtb	r2, r3
 80156e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80156e8:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 80156ea:	697b      	ldr	r3, [r7, #20]
 80156ec:	2b01      	cmp	r3, #1
 80156ee:	d171      	bne.n	80157d4 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 80156f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80156f2:	8b9b      	ldrh	r3, [r3, #28]
 80156f4:	3314      	adds	r3, #20
 80156f6:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 80156f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80156fa:	685b      	ldr	r3, [r3, #4]
 80156fc:	685b      	ldr	r3, [r3, #4]
 80156fe:	681b      	ldr	r3, [r3, #0]
 8015700:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8015702:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015704:	685b      	ldr	r3, [r3, #4]
 8015706:	685b      	ldr	r3, [r3, #4]
 8015708:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801570a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801570c:	3308      	adds	r3, #8
 801570e:	2214      	movs	r2, #20
 8015710:	4619      	mov	r1, r3
 8015712:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8015714:	f000 ff67 	bl	80165e6 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8015718:	8a3b      	ldrh	r3, [r7, #16]
 801571a:	4618      	mov	r0, r3
 801571c:	f7f5 fc9a 	bl	800b054 <lwip_htons>
 8015720:	4603      	mov	r3, r0
 8015722:	461a      	mov	r2, r3
 8015724:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015726:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8015728:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801572a:	2200      	movs	r2, #0
 801572c:	719a      	strb	r2, [r3, #6]
 801572e:	2200      	movs	r2, #0
 8015730:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8015732:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015734:	2200      	movs	r2, #0
 8015736:	729a      	strb	r2, [r3, #10]
 8015738:	2200      	movs	r2, #0
 801573a:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801573c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801573e:	685b      	ldr	r3, [r3, #4]
 8015740:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8015742:	e00d      	b.n	8015760 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8015744:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015746:	685b      	ldr	r3, [r3, #4]
 8015748:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801574a:	2114      	movs	r1, #20
 801574c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 801574e:	f7f6 ffed 	bl	800c72c <pbuf_remove_header>
      pbuf_cat(p, r);
 8015752:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8015754:	6878      	ldr	r0, [r7, #4]
 8015756:	f7f7 f93d 	bl	800c9d4 <pbuf_cat>
      r = iprh->next_pbuf;
 801575a:	68fb      	ldr	r3, [r7, #12]
 801575c:	681b      	ldr	r3, [r3, #0]
 801575e:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 8015760:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015762:	2b00      	cmp	r3, #0
 8015764:	d1ee      	bne.n	8015744 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8015766:	4b1e      	ldr	r3, [pc, #120]	@ (80157e0 <ip4_reass+0x2b4>)
 8015768:	681b      	ldr	r3, [r3, #0]
 801576a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801576c:	429a      	cmp	r2, r3
 801576e:	d102      	bne.n	8015776 <ip4_reass+0x24a>
      ipr_prev = NULL;
 8015770:	2300      	movs	r3, #0
 8015772:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8015774:	e010      	b.n	8015798 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8015776:	4b1a      	ldr	r3, [pc, #104]	@ (80157e0 <ip4_reass+0x2b4>)
 8015778:	681b      	ldr	r3, [r3, #0]
 801577a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801577c:	e007      	b.n	801578e <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801577e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015780:	681b      	ldr	r3, [r3, #0]
 8015782:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8015784:	429a      	cmp	r2, r3
 8015786:	d006      	beq.n	8015796 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8015788:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801578a:	681b      	ldr	r3, [r3, #0]
 801578c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801578e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015790:	2b00      	cmp	r3, #0
 8015792:	d1f4      	bne.n	801577e <ip4_reass+0x252>
 8015794:	e000      	b.n	8015798 <ip4_reass+0x26c>
          break;
 8015796:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8015798:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801579a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801579c:	f7ff fd2e 	bl	80151fc <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 80157a0:	6878      	ldr	r0, [r7, #4]
 80157a2:	f7f7 f8d7 	bl	800c954 <pbuf_clen>
 80157a6:	4603      	mov	r3, r0
 80157a8:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 80157aa:	4b0c      	ldr	r3, [pc, #48]	@ (80157dc <ip4_reass+0x2b0>)
 80157ac:	881b      	ldrh	r3, [r3, #0]
 80157ae:	8c3a      	ldrh	r2, [r7, #32]
 80157b0:	429a      	cmp	r2, r3
 80157b2:	d906      	bls.n	80157c2 <ip4_reass+0x296>
 80157b4:	4b0b      	ldr	r3, [pc, #44]	@ (80157e4 <ip4_reass+0x2b8>)
 80157b6:	f240 229b 	movw	r2, #667	@ 0x29b
 80157ba:	490b      	ldr	r1, [pc, #44]	@ (80157e8 <ip4_reass+0x2bc>)
 80157bc:	480b      	ldr	r0, [pc, #44]	@ (80157ec <ip4_reass+0x2c0>)
 80157be:	f000 fda7 	bl	8016310 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 80157c2:	4b06      	ldr	r3, [pc, #24]	@ (80157dc <ip4_reass+0x2b0>)
 80157c4:	881a      	ldrh	r2, [r3, #0]
 80157c6:	8c3b      	ldrh	r3, [r7, #32]
 80157c8:	1ad3      	subs	r3, r2, r3
 80157ca:	b29a      	uxth	r2, r3
 80157cc:	4b03      	ldr	r3, [pc, #12]	@ (80157dc <ip4_reass+0x2b0>)
 80157ce:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 80157d0:	687b      	ldr	r3, [r7, #4]
 80157d2:	e038      	b.n	8015846 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 80157d4:	2300      	movs	r3, #0
 80157d6:	e036      	b.n	8015846 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 80157d8:	bf00      	nop
 80157da:	e00a      	b.n	80157f2 <ip4_reass+0x2c6>
 80157dc:	2000ec9c 	.word	0x2000ec9c
 80157e0:	2000ec98 	.word	0x2000ec98
 80157e4:	0801aab0 	.word	0x0801aab0
 80157e8:	0801ac20 	.word	0x0801ac20
 80157ec:	0801aaf8 	.word	0x0801aaf8
    goto nullreturn_ipr;
 80157f0:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 80157f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80157f4:	2b00      	cmp	r3, #0
 80157f6:	d106      	bne.n	8015806 <ip4_reass+0x2da>
 80157f8:	4b15      	ldr	r3, [pc, #84]	@ (8015850 <ip4_reass+0x324>)
 80157fa:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 80157fe:	4915      	ldr	r1, [pc, #84]	@ (8015854 <ip4_reass+0x328>)
 8015800:	4815      	ldr	r0, [pc, #84]	@ (8015858 <ip4_reass+0x32c>)
 8015802:	f000 fd85 	bl	8016310 <iprintf>
  if (ipr->p == NULL) {
 8015806:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015808:	685b      	ldr	r3, [r3, #4]
 801580a:	2b00      	cmp	r3, #0
 801580c:	d116      	bne.n	801583c <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801580e:	4b13      	ldr	r3, [pc, #76]	@ (801585c <ip4_reass+0x330>)
 8015810:	681b      	ldr	r3, [r3, #0]
 8015812:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8015814:	429a      	cmp	r2, r3
 8015816:	d006      	beq.n	8015826 <ip4_reass+0x2fa>
 8015818:	4b0d      	ldr	r3, [pc, #52]	@ (8015850 <ip4_reass+0x324>)
 801581a:	f240 22ab 	movw	r2, #683	@ 0x2ab
 801581e:	4910      	ldr	r1, [pc, #64]	@ (8015860 <ip4_reass+0x334>)
 8015820:	480d      	ldr	r0, [pc, #52]	@ (8015858 <ip4_reass+0x32c>)
 8015822:	f000 fd75 	bl	8016310 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8015826:	2100      	movs	r1, #0
 8015828:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801582a:	f7ff fce7 	bl	80151fc <ip_reass_dequeue_datagram>
 801582e:	e006      	b.n	801583e <ip4_reass+0x312>
    goto nullreturn;
 8015830:	bf00      	nop
 8015832:	e004      	b.n	801583e <ip4_reass+0x312>
    goto nullreturn;
 8015834:	bf00      	nop
 8015836:	e002      	b.n	801583e <ip4_reass+0x312>
      goto nullreturn;
 8015838:	bf00      	nop
 801583a:	e000      	b.n	801583e <ip4_reass+0x312>
  }

nullreturn:
 801583c:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801583e:	6878      	ldr	r0, [r7, #4]
 8015840:	f7f6 fffa 	bl	800c838 <pbuf_free>
  return NULL;
 8015844:	2300      	movs	r3, #0
}
 8015846:	4618      	mov	r0, r3
 8015848:	3738      	adds	r7, #56	@ 0x38
 801584a:	46bd      	mov	sp, r7
 801584c:	bd80      	pop	{r7, pc}
 801584e:	bf00      	nop
 8015850:	0801aab0 	.word	0x0801aab0
 8015854:	0801ac3c 	.word	0x0801ac3c
 8015858:	0801aaf8 	.word	0x0801aaf8
 801585c:	2000ec98 	.word	0x2000ec98
 8015860:	0801ac48 	.word	0x0801ac48

08015864 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8015864:	b580      	push	{r7, lr}
 8015866:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8015868:	2005      	movs	r0, #5
 801586a:	f7f6 f8cb 	bl	800ba04 <memp_malloc>
 801586e:	4603      	mov	r3, r0
}
 8015870:	4618      	mov	r0, r3
 8015872:	bd80      	pop	{r7, pc}

08015874 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8015874:	b580      	push	{r7, lr}
 8015876:	b082      	sub	sp, #8
 8015878:	af00      	add	r7, sp, #0
 801587a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801587c:	687b      	ldr	r3, [r7, #4]
 801587e:	2b00      	cmp	r3, #0
 8015880:	d106      	bne.n	8015890 <ip_frag_free_pbuf_custom_ref+0x1c>
 8015882:	4b07      	ldr	r3, [pc, #28]	@ (80158a0 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8015884:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 8015888:	4906      	ldr	r1, [pc, #24]	@ (80158a4 <ip_frag_free_pbuf_custom_ref+0x30>)
 801588a:	4807      	ldr	r0, [pc, #28]	@ (80158a8 <ip_frag_free_pbuf_custom_ref+0x34>)
 801588c:	f000 fd40 	bl	8016310 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8015890:	6879      	ldr	r1, [r7, #4]
 8015892:	2005      	movs	r0, #5
 8015894:	f7f6 f92c 	bl	800baf0 <memp_free>
}
 8015898:	bf00      	nop
 801589a:	3708      	adds	r7, #8
 801589c:	46bd      	mov	sp, r7
 801589e:	bd80      	pop	{r7, pc}
 80158a0:	0801aab0 	.word	0x0801aab0
 80158a4:	0801ac68 	.word	0x0801ac68
 80158a8:	0801aaf8 	.word	0x0801aaf8

080158ac <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 80158ac:	b580      	push	{r7, lr}
 80158ae:	b084      	sub	sp, #16
 80158b0:	af00      	add	r7, sp, #0
 80158b2:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 80158b4:	687b      	ldr	r3, [r7, #4]
 80158b6:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 80158b8:	68fb      	ldr	r3, [r7, #12]
 80158ba:	2b00      	cmp	r3, #0
 80158bc:	d106      	bne.n	80158cc <ipfrag_free_pbuf_custom+0x20>
 80158be:	4b11      	ldr	r3, [pc, #68]	@ (8015904 <ipfrag_free_pbuf_custom+0x58>)
 80158c0:	f240 22ce 	movw	r2, #718	@ 0x2ce
 80158c4:	4910      	ldr	r1, [pc, #64]	@ (8015908 <ipfrag_free_pbuf_custom+0x5c>)
 80158c6:	4811      	ldr	r0, [pc, #68]	@ (801590c <ipfrag_free_pbuf_custom+0x60>)
 80158c8:	f000 fd22 	bl	8016310 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 80158cc:	68fa      	ldr	r2, [r7, #12]
 80158ce:	687b      	ldr	r3, [r7, #4]
 80158d0:	429a      	cmp	r2, r3
 80158d2:	d006      	beq.n	80158e2 <ipfrag_free_pbuf_custom+0x36>
 80158d4:	4b0b      	ldr	r3, [pc, #44]	@ (8015904 <ipfrag_free_pbuf_custom+0x58>)
 80158d6:	f240 22cf 	movw	r2, #719	@ 0x2cf
 80158da:	490d      	ldr	r1, [pc, #52]	@ (8015910 <ipfrag_free_pbuf_custom+0x64>)
 80158dc:	480b      	ldr	r0, [pc, #44]	@ (801590c <ipfrag_free_pbuf_custom+0x60>)
 80158de:	f000 fd17 	bl	8016310 <iprintf>
  if (pcr->original != NULL) {
 80158e2:	68fb      	ldr	r3, [r7, #12]
 80158e4:	695b      	ldr	r3, [r3, #20]
 80158e6:	2b00      	cmp	r3, #0
 80158e8:	d004      	beq.n	80158f4 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 80158ea:	68fb      	ldr	r3, [r7, #12]
 80158ec:	695b      	ldr	r3, [r3, #20]
 80158ee:	4618      	mov	r0, r3
 80158f0:	f7f6 ffa2 	bl	800c838 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 80158f4:	68f8      	ldr	r0, [r7, #12]
 80158f6:	f7ff ffbd 	bl	8015874 <ip_frag_free_pbuf_custom_ref>
}
 80158fa:	bf00      	nop
 80158fc:	3710      	adds	r7, #16
 80158fe:	46bd      	mov	sp, r7
 8015900:	bd80      	pop	{r7, pc}
 8015902:	bf00      	nop
 8015904:	0801aab0 	.word	0x0801aab0
 8015908:	0801ac74 	.word	0x0801ac74
 801590c:	0801aaf8 	.word	0x0801aaf8
 8015910:	0801ac80 	.word	0x0801ac80

08015914 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8015914:	b580      	push	{r7, lr}
 8015916:	b094      	sub	sp, #80	@ 0x50
 8015918:	af02      	add	r7, sp, #8
 801591a:	60f8      	str	r0, [r7, #12]
 801591c:	60b9      	str	r1, [r7, #8]
 801591e:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8015920:	2300      	movs	r3, #0
 8015922:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8015926:	68bb      	ldr	r3, [r7, #8]
 8015928:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801592a:	3b14      	subs	r3, #20
 801592c:	2b00      	cmp	r3, #0
 801592e:	da00      	bge.n	8015932 <ip4_frag+0x1e>
 8015930:	3307      	adds	r3, #7
 8015932:	10db      	asrs	r3, r3, #3
 8015934:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8015936:	2314      	movs	r3, #20
 8015938:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801593a:	68fb      	ldr	r3, [r7, #12]
 801593c:	685b      	ldr	r3, [r3, #4]
 801593e:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 8015940:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015942:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8015944:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015946:	781b      	ldrb	r3, [r3, #0]
 8015948:	f003 030f 	and.w	r3, r3, #15
 801594c:	b2db      	uxtb	r3, r3
 801594e:	009b      	lsls	r3, r3, #2
 8015950:	b2db      	uxtb	r3, r3
 8015952:	2b14      	cmp	r3, #20
 8015954:	d002      	beq.n	801595c <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8015956:	f06f 0305 	mvn.w	r3, #5
 801595a:	e110      	b.n	8015b7e <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801595c:	68fb      	ldr	r3, [r7, #12]
 801595e:	895b      	ldrh	r3, [r3, #10]
 8015960:	2b13      	cmp	r3, #19
 8015962:	d809      	bhi.n	8015978 <ip4_frag+0x64>
 8015964:	4b88      	ldr	r3, [pc, #544]	@ (8015b88 <ip4_frag+0x274>)
 8015966:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 801596a:	4988      	ldr	r1, [pc, #544]	@ (8015b8c <ip4_frag+0x278>)
 801596c:	4888      	ldr	r0, [pc, #544]	@ (8015b90 <ip4_frag+0x27c>)
 801596e:	f000 fccf 	bl	8016310 <iprintf>
 8015972:	f06f 0305 	mvn.w	r3, #5
 8015976:	e102      	b.n	8015b7e <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8015978:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801597a:	88db      	ldrh	r3, [r3, #6]
 801597c:	b29b      	uxth	r3, r3
 801597e:	4618      	mov	r0, r3
 8015980:	f7f5 fb68 	bl	800b054 <lwip_htons>
 8015984:	4603      	mov	r3, r0
 8015986:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 8015988:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801598a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801598e:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8015992:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8015994:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8015998:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801599a:	68fb      	ldr	r3, [r7, #12]
 801599c:	891b      	ldrh	r3, [r3, #8]
 801599e:	3b14      	subs	r3, #20
 80159a0:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 80159a4:	e0e1      	b.n	8015b6a <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 80159a6:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80159a8:	00db      	lsls	r3, r3, #3
 80159aa:	b29b      	uxth	r3, r3
 80159ac:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80159b0:	4293      	cmp	r3, r2
 80159b2:	bf28      	it	cs
 80159b4:	4613      	movcs	r3, r2
 80159b6:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 80159b8:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80159bc:	2114      	movs	r1, #20
 80159be:	200e      	movs	r0, #14
 80159c0:	f7f6 fc56 	bl	800c270 <pbuf_alloc>
 80159c4:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 80159c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80159c8:	2b00      	cmp	r3, #0
 80159ca:	f000 80d5 	beq.w	8015b78 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80159ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80159d0:	895b      	ldrh	r3, [r3, #10]
 80159d2:	2b13      	cmp	r3, #19
 80159d4:	d806      	bhi.n	80159e4 <ip4_frag+0xd0>
 80159d6:	4b6c      	ldr	r3, [pc, #432]	@ (8015b88 <ip4_frag+0x274>)
 80159d8:	f44f 7249 	mov.w	r2, #804	@ 0x324
 80159dc:	496d      	ldr	r1, [pc, #436]	@ (8015b94 <ip4_frag+0x280>)
 80159de:	486c      	ldr	r0, [pc, #432]	@ (8015b90 <ip4_frag+0x27c>)
 80159e0:	f000 fc96 	bl	8016310 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 80159e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80159e6:	685b      	ldr	r3, [r3, #4]
 80159e8:	2214      	movs	r2, #20
 80159ea:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80159ec:	4618      	mov	r0, r3
 80159ee:	f000 fdfa 	bl	80165e6 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 80159f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80159f4:	685b      	ldr	r3, [r3, #4]
 80159f6:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 80159f8:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80159fa:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 80159fe:	e064      	b.n	8015aca <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8015a00:	68fb      	ldr	r3, [r7, #12]
 8015a02:	895a      	ldrh	r2, [r3, #10]
 8015a04:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8015a06:	1ad3      	subs	r3, r2, r3
 8015a08:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8015a0a:	68fb      	ldr	r3, [r7, #12]
 8015a0c:	895b      	ldrh	r3, [r3, #10]
 8015a0e:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8015a10:	429a      	cmp	r2, r3
 8015a12:	d906      	bls.n	8015a22 <ip4_frag+0x10e>
 8015a14:	4b5c      	ldr	r3, [pc, #368]	@ (8015b88 <ip4_frag+0x274>)
 8015a16:	f240 322d 	movw	r2, #813	@ 0x32d
 8015a1a:	495f      	ldr	r1, [pc, #380]	@ (8015b98 <ip4_frag+0x284>)
 8015a1c:	485c      	ldr	r0, [pc, #368]	@ (8015b90 <ip4_frag+0x27c>)
 8015a1e:	f000 fc77 	bl	8016310 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8015a22:	8bfa      	ldrh	r2, [r7, #30]
 8015a24:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8015a28:	4293      	cmp	r3, r2
 8015a2a:	bf28      	it	cs
 8015a2c:	4613      	movcs	r3, r2
 8015a2e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8015a32:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8015a36:	2b00      	cmp	r3, #0
 8015a38:	d105      	bne.n	8015a46 <ip4_frag+0x132>
        poff = 0;
 8015a3a:	2300      	movs	r3, #0
 8015a3c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 8015a3e:	68fb      	ldr	r3, [r7, #12]
 8015a40:	681b      	ldr	r3, [r3, #0]
 8015a42:	60fb      	str	r3, [r7, #12]
        continue;
 8015a44:	e041      	b.n	8015aca <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8015a46:	f7ff ff0d 	bl	8015864 <ip_frag_alloc_pbuf_custom_ref>
 8015a4a:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8015a4c:	69bb      	ldr	r3, [r7, #24]
 8015a4e:	2b00      	cmp	r3, #0
 8015a50:	d103      	bne.n	8015a5a <ip4_frag+0x146>
        pbuf_free(rambuf);
 8015a52:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8015a54:	f7f6 fef0 	bl	800c838 <pbuf_free>
        goto memerr;
 8015a58:	e08f      	b.n	8015b7a <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8015a5a:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8015a5c:	68fb      	ldr	r3, [r7, #12]
 8015a5e:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8015a60:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8015a62:	4413      	add	r3, r2
 8015a64:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 8015a68:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8015a6c:	9201      	str	r2, [sp, #4]
 8015a6e:	9300      	str	r3, [sp, #0]
 8015a70:	4603      	mov	r3, r0
 8015a72:	2241      	movs	r2, #65	@ 0x41
 8015a74:	2000      	movs	r0, #0
 8015a76:	f7f6 fd25 	bl	800c4c4 <pbuf_alloced_custom>
 8015a7a:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8015a7c:	697b      	ldr	r3, [r7, #20]
 8015a7e:	2b00      	cmp	r3, #0
 8015a80:	d106      	bne.n	8015a90 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8015a82:	69b8      	ldr	r0, [r7, #24]
 8015a84:	f7ff fef6 	bl	8015874 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8015a88:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8015a8a:	f7f6 fed5 	bl	800c838 <pbuf_free>
        goto memerr;
 8015a8e:	e074      	b.n	8015b7a <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8015a90:	68f8      	ldr	r0, [r7, #12]
 8015a92:	f7f6 ff77 	bl	800c984 <pbuf_ref>
      pcr->original = p;
 8015a96:	69bb      	ldr	r3, [r7, #24]
 8015a98:	68fa      	ldr	r2, [r7, #12]
 8015a9a:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8015a9c:	69bb      	ldr	r3, [r7, #24]
 8015a9e:	4a3f      	ldr	r2, [pc, #252]	@ (8015b9c <ip4_frag+0x288>)
 8015aa0:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8015aa2:	6979      	ldr	r1, [r7, #20]
 8015aa4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8015aa6:	f7f6 ff95 	bl	800c9d4 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8015aaa:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 8015aae:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8015ab2:	1ad3      	subs	r3, r2, r3
 8015ab4:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 8015ab8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8015abc:	2b00      	cmp	r3, #0
 8015abe:	d004      	beq.n	8015aca <ip4_frag+0x1b6>
        poff = 0;
 8015ac0:	2300      	movs	r3, #0
 8015ac2:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 8015ac4:	68fb      	ldr	r3, [r7, #12]
 8015ac6:	681b      	ldr	r3, [r3, #0]
 8015ac8:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8015aca:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8015ace:	2b00      	cmp	r3, #0
 8015ad0:	d196      	bne.n	8015a00 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8015ad2:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8015ad4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8015ad8:	4413      	add	r3, r2
 8015ada:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8015adc:	68bb      	ldr	r3, [r7, #8]
 8015ade:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8015ae0:	f1a3 0213 	sub.w	r2, r3, #19
 8015ae4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8015ae8:	429a      	cmp	r2, r3
 8015aea:	bfcc      	ite	gt
 8015aec:	2301      	movgt	r3, #1
 8015aee:	2300      	movle	r3, #0
 8015af0:	b2db      	uxtb	r3, r3
 8015af2:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8015af4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8015af8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015afc:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 8015afe:	6a3b      	ldr	r3, [r7, #32]
 8015b00:	2b00      	cmp	r3, #0
 8015b02:	d002      	beq.n	8015b0a <ip4_frag+0x1f6>
 8015b04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015b06:	2b00      	cmp	r3, #0
 8015b08:	d003      	beq.n	8015b12 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8015b0a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8015b0c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8015b10:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8015b12:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8015b14:	4618      	mov	r0, r3
 8015b16:	f7f5 fa9d 	bl	800b054 <lwip_htons>
 8015b1a:	4603      	mov	r3, r0
 8015b1c:	461a      	mov	r2, r3
 8015b1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015b20:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8015b22:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8015b24:	3314      	adds	r3, #20
 8015b26:	b29b      	uxth	r3, r3
 8015b28:	4618      	mov	r0, r3
 8015b2a:	f7f5 fa93 	bl	800b054 <lwip_htons>
 8015b2e:	4603      	mov	r3, r0
 8015b30:	461a      	mov	r2, r3
 8015b32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015b34:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8015b36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015b38:	2200      	movs	r2, #0
 8015b3a:	729a      	strb	r2, [r3, #10]
 8015b3c:	2200      	movs	r2, #0
 8015b3e:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8015b40:	68bb      	ldr	r3, [r7, #8]
 8015b42:	695b      	ldr	r3, [r3, #20]
 8015b44:	687a      	ldr	r2, [r7, #4]
 8015b46:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8015b48:	68b8      	ldr	r0, [r7, #8]
 8015b4a:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8015b4c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8015b4e:	f7f6 fe73 	bl	800c838 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8015b52:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8015b56:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8015b58:	1ad3      	subs	r3, r2, r3
 8015b5a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 8015b5e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8015b62:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8015b64:	4413      	add	r3, r2
 8015b66:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 8015b6a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8015b6e:	2b00      	cmp	r3, #0
 8015b70:	f47f af19 	bne.w	80159a6 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8015b74:	2300      	movs	r3, #0
 8015b76:	e002      	b.n	8015b7e <ip4_frag+0x26a>
      goto memerr;
 8015b78:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8015b7a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8015b7e:	4618      	mov	r0, r3
 8015b80:	3748      	adds	r7, #72	@ 0x48
 8015b82:	46bd      	mov	sp, r7
 8015b84:	bd80      	pop	{r7, pc}
 8015b86:	bf00      	nop
 8015b88:	0801aab0 	.word	0x0801aab0
 8015b8c:	0801ac8c 	.word	0x0801ac8c
 8015b90:	0801aaf8 	.word	0x0801aaf8
 8015b94:	0801aca8 	.word	0x0801aca8
 8015b98:	0801acc8 	.word	0x0801acc8
 8015b9c:	080158ad 	.word	0x080158ad

08015ba0 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8015ba0:	b580      	push	{r7, lr}
 8015ba2:	b086      	sub	sp, #24
 8015ba4:	af00      	add	r7, sp, #0
 8015ba6:	6078      	str	r0, [r7, #4]
 8015ba8:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8015baa:	230e      	movs	r3, #14
 8015bac:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8015bae:	687b      	ldr	r3, [r7, #4]
 8015bb0:	895b      	ldrh	r3, [r3, #10]
 8015bb2:	2b0e      	cmp	r3, #14
 8015bb4:	d96e      	bls.n	8015c94 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8015bb6:	687b      	ldr	r3, [r7, #4]
 8015bb8:	7bdb      	ldrb	r3, [r3, #15]
 8015bba:	2b00      	cmp	r3, #0
 8015bbc:	d106      	bne.n	8015bcc <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8015bbe:	683b      	ldr	r3, [r7, #0]
 8015bc0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8015bc4:	3301      	adds	r3, #1
 8015bc6:	b2da      	uxtb	r2, r3
 8015bc8:	687b      	ldr	r3, [r7, #4]
 8015bca:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8015bcc:	687b      	ldr	r3, [r7, #4]
 8015bce:	685b      	ldr	r3, [r3, #4]
 8015bd0:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8015bd2:	693b      	ldr	r3, [r7, #16]
 8015bd4:	7b1a      	ldrb	r2, [r3, #12]
 8015bd6:	7b5b      	ldrb	r3, [r3, #13]
 8015bd8:	021b      	lsls	r3, r3, #8
 8015bda:	4313      	orrs	r3, r2
 8015bdc:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8015bde:	693b      	ldr	r3, [r7, #16]
 8015be0:	781b      	ldrb	r3, [r3, #0]
 8015be2:	f003 0301 	and.w	r3, r3, #1
 8015be6:	2b00      	cmp	r3, #0
 8015be8:	d023      	beq.n	8015c32 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8015bea:	693b      	ldr	r3, [r7, #16]
 8015bec:	781b      	ldrb	r3, [r3, #0]
 8015bee:	2b01      	cmp	r3, #1
 8015bf0:	d10f      	bne.n	8015c12 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8015bf2:	693b      	ldr	r3, [r7, #16]
 8015bf4:	785b      	ldrb	r3, [r3, #1]
 8015bf6:	2b00      	cmp	r3, #0
 8015bf8:	d11b      	bne.n	8015c32 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8015bfa:	693b      	ldr	r3, [r7, #16]
 8015bfc:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8015bfe:	2b5e      	cmp	r3, #94	@ 0x5e
 8015c00:	d117      	bne.n	8015c32 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8015c02:	687b      	ldr	r3, [r7, #4]
 8015c04:	7b5b      	ldrb	r3, [r3, #13]
 8015c06:	f043 0310 	orr.w	r3, r3, #16
 8015c0a:	b2da      	uxtb	r2, r3
 8015c0c:	687b      	ldr	r3, [r7, #4]
 8015c0e:	735a      	strb	r2, [r3, #13]
 8015c10:	e00f      	b.n	8015c32 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8015c12:	693b      	ldr	r3, [r7, #16]
 8015c14:	2206      	movs	r2, #6
 8015c16:	4928      	ldr	r1, [pc, #160]	@ (8015cb8 <ethernet_input+0x118>)
 8015c18:	4618      	mov	r0, r3
 8015c1a:	f000 fbee 	bl	80163fa <memcmp>
 8015c1e:	4603      	mov	r3, r0
 8015c20:	2b00      	cmp	r3, #0
 8015c22:	d106      	bne.n	8015c32 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8015c24:	687b      	ldr	r3, [r7, #4]
 8015c26:	7b5b      	ldrb	r3, [r3, #13]
 8015c28:	f043 0308 	orr.w	r3, r3, #8
 8015c2c:	b2da      	uxtb	r2, r3
 8015c2e:	687b      	ldr	r3, [r7, #4]
 8015c30:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8015c32:	89fb      	ldrh	r3, [r7, #14]
 8015c34:	2b08      	cmp	r3, #8
 8015c36:	d003      	beq.n	8015c40 <ethernet_input+0xa0>
 8015c38:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 8015c3c:	d014      	beq.n	8015c68 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8015c3e:	e032      	b.n	8015ca6 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8015c40:	683b      	ldr	r3, [r7, #0]
 8015c42:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8015c46:	f003 0308 	and.w	r3, r3, #8
 8015c4a:	2b00      	cmp	r3, #0
 8015c4c:	d024      	beq.n	8015c98 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8015c4e:	8afb      	ldrh	r3, [r7, #22]
 8015c50:	4619      	mov	r1, r3
 8015c52:	6878      	ldr	r0, [r7, #4]
 8015c54:	f7f6 fd6a 	bl	800c72c <pbuf_remove_header>
 8015c58:	4603      	mov	r3, r0
 8015c5a:	2b00      	cmp	r3, #0
 8015c5c:	d11e      	bne.n	8015c9c <ethernet_input+0xfc>
        ip4_input(p, netif);
 8015c5e:	6839      	ldr	r1, [r7, #0]
 8015c60:	6878      	ldr	r0, [r7, #4]
 8015c62:	f7fe ff21 	bl	8014aa8 <ip4_input>
      break;
 8015c66:	e013      	b.n	8015c90 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8015c68:	683b      	ldr	r3, [r7, #0]
 8015c6a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8015c6e:	f003 0308 	and.w	r3, r3, #8
 8015c72:	2b00      	cmp	r3, #0
 8015c74:	d014      	beq.n	8015ca0 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8015c76:	8afb      	ldrh	r3, [r7, #22]
 8015c78:	4619      	mov	r1, r3
 8015c7a:	6878      	ldr	r0, [r7, #4]
 8015c7c:	f7f6 fd56 	bl	800c72c <pbuf_remove_header>
 8015c80:	4603      	mov	r3, r0
 8015c82:	2b00      	cmp	r3, #0
 8015c84:	d10e      	bne.n	8015ca4 <ethernet_input+0x104>
        etharp_input(p, netif);
 8015c86:	6839      	ldr	r1, [r7, #0]
 8015c88:	6878      	ldr	r0, [r7, #4]
 8015c8a:	f7fe f8c1 	bl	8013e10 <etharp_input>
      break;
 8015c8e:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8015c90:	2300      	movs	r3, #0
 8015c92:	e00c      	b.n	8015cae <ethernet_input+0x10e>
    goto free_and_return;
 8015c94:	bf00      	nop
 8015c96:	e006      	b.n	8015ca6 <ethernet_input+0x106>
        goto free_and_return;
 8015c98:	bf00      	nop
 8015c9a:	e004      	b.n	8015ca6 <ethernet_input+0x106>
        goto free_and_return;
 8015c9c:	bf00      	nop
 8015c9e:	e002      	b.n	8015ca6 <ethernet_input+0x106>
        goto free_and_return;
 8015ca0:	bf00      	nop
 8015ca2:	e000      	b.n	8015ca6 <ethernet_input+0x106>
        goto free_and_return;
 8015ca4:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8015ca6:	6878      	ldr	r0, [r7, #4]
 8015ca8:	f7f6 fdc6 	bl	800c838 <pbuf_free>
  return ERR_OK;
 8015cac:	2300      	movs	r3, #0
}
 8015cae:	4618      	mov	r0, r3
 8015cb0:	3718      	adds	r7, #24
 8015cb2:	46bd      	mov	sp, r7
 8015cb4:	bd80      	pop	{r7, pc}
 8015cb6:	bf00      	nop
 8015cb8:	0801aea8 	.word	0x0801aea8

08015cbc <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8015cbc:	b580      	push	{r7, lr}
 8015cbe:	b086      	sub	sp, #24
 8015cc0:	af00      	add	r7, sp, #0
 8015cc2:	60f8      	str	r0, [r7, #12]
 8015cc4:	60b9      	str	r1, [r7, #8]
 8015cc6:	607a      	str	r2, [r7, #4]
 8015cc8:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8015cca:	8c3b      	ldrh	r3, [r7, #32]
 8015ccc:	4618      	mov	r0, r3
 8015cce:	f7f5 f9c1 	bl	800b054 <lwip_htons>
 8015cd2:	4603      	mov	r3, r0
 8015cd4:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8015cd6:	210e      	movs	r1, #14
 8015cd8:	68b8      	ldr	r0, [r7, #8]
 8015cda:	f7f6 fd17 	bl	800c70c <pbuf_add_header>
 8015cde:	4603      	mov	r3, r0
 8015ce0:	2b00      	cmp	r3, #0
 8015ce2:	d125      	bne.n	8015d30 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8015ce4:	68bb      	ldr	r3, [r7, #8]
 8015ce6:	685b      	ldr	r3, [r3, #4]
 8015ce8:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8015cea:	693b      	ldr	r3, [r7, #16]
 8015cec:	8afa      	ldrh	r2, [r7, #22]
 8015cee:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8015cf0:	693b      	ldr	r3, [r7, #16]
 8015cf2:	2206      	movs	r2, #6
 8015cf4:	6839      	ldr	r1, [r7, #0]
 8015cf6:	4618      	mov	r0, r3
 8015cf8:	f000 fc75 	bl	80165e6 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8015cfc:	693b      	ldr	r3, [r7, #16]
 8015cfe:	3306      	adds	r3, #6
 8015d00:	2206      	movs	r2, #6
 8015d02:	6879      	ldr	r1, [r7, #4]
 8015d04:	4618      	mov	r0, r3
 8015d06:	f000 fc6e 	bl	80165e6 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8015d0a:	68fb      	ldr	r3, [r7, #12]
 8015d0c:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8015d10:	2b06      	cmp	r3, #6
 8015d12:	d006      	beq.n	8015d22 <ethernet_output+0x66>
 8015d14:	4b0a      	ldr	r3, [pc, #40]	@ (8015d40 <ethernet_output+0x84>)
 8015d16:	f44f 7299 	mov.w	r2, #306	@ 0x132
 8015d1a:	490a      	ldr	r1, [pc, #40]	@ (8015d44 <ethernet_output+0x88>)
 8015d1c:	480a      	ldr	r0, [pc, #40]	@ (8015d48 <ethernet_output+0x8c>)
 8015d1e:	f000 faf7 	bl	8016310 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8015d22:	68fb      	ldr	r3, [r7, #12]
 8015d24:	699b      	ldr	r3, [r3, #24]
 8015d26:	68b9      	ldr	r1, [r7, #8]
 8015d28:	68f8      	ldr	r0, [r7, #12]
 8015d2a:	4798      	blx	r3
 8015d2c:	4603      	mov	r3, r0
 8015d2e:	e002      	b.n	8015d36 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8015d30:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8015d32:	f06f 0301 	mvn.w	r3, #1
}
 8015d36:	4618      	mov	r0, r3
 8015d38:	3718      	adds	r7, #24
 8015d3a:	46bd      	mov	sp, r7
 8015d3c:	bd80      	pop	{r7, pc}
 8015d3e:	bf00      	nop
 8015d40:	0801acd8 	.word	0x0801acd8
 8015d44:	0801ad10 	.word	0x0801ad10
 8015d48:	0801ad44 	.word	0x0801ad44

08015d4c <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8015d4c:	b580      	push	{r7, lr}
 8015d4e:	b086      	sub	sp, #24
 8015d50:	af00      	add	r7, sp, #0
 8015d52:	6078      	str	r0, [r7, #4]
 8015d54:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 8015d56:	683b      	ldr	r3, [r7, #0]
 8015d58:	60bb      	str	r3, [r7, #8]
 8015d5a:	2304      	movs	r3, #4
 8015d5c:	60fb      	str	r3, [r7, #12]
 8015d5e:	2300      	movs	r3, #0
 8015d60:	613b      	str	r3, [r7, #16]
 8015d62:	2300      	movs	r3, #0
 8015d64:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 8015d66:	f107 0308 	add.w	r3, r7, #8
 8015d6a:	2100      	movs	r1, #0
 8015d6c:	4618      	mov	r0, r3
 8015d6e:	f7f0 f84c 	bl	8005e0a <osMessageCreate>
 8015d72:	4602      	mov	r2, r0
 8015d74:	687b      	ldr	r3, [r7, #4]
 8015d76:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8015d78:	687b      	ldr	r3, [r7, #4]
 8015d7a:	681b      	ldr	r3, [r3, #0]
 8015d7c:	2b00      	cmp	r3, #0
 8015d7e:	d102      	bne.n	8015d86 <sys_mbox_new+0x3a>
    return ERR_MEM;
 8015d80:	f04f 33ff 	mov.w	r3, #4294967295
 8015d84:	e000      	b.n	8015d88 <sys_mbox_new+0x3c>

  return ERR_OK;
 8015d86:	2300      	movs	r3, #0
}
 8015d88:	4618      	mov	r0, r3
 8015d8a:	3718      	adds	r7, #24
 8015d8c:	46bd      	mov	sp, r7
 8015d8e:	bd80      	pop	{r7, pc}

08015d90 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 8015d90:	b580      	push	{r7, lr}
 8015d92:	b082      	sub	sp, #8
 8015d94:	af00      	add	r7, sp, #0
 8015d96:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 8015d98:	687b      	ldr	r3, [r7, #4]
 8015d9a:	681b      	ldr	r3, [r3, #0]
 8015d9c:	4618      	mov	r0, r3
 8015d9e:	f7f0 f911 	bl	8005fc4 <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 8015da2:	687b      	ldr	r3, [r7, #4]
 8015da4:	681b      	ldr	r3, [r3, #0]
 8015da6:	4618      	mov	r0, r3
 8015da8:	f7f0 f922 	bl	8005ff0 <osMessageDelete>
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 8015dac:	bf00      	nop
 8015dae:	3708      	adds	r7, #8
 8015db0:	46bd      	mov	sp, r7
 8015db2:	bd80      	pop	{r7, pc}

08015db4 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8015db4:	b580      	push	{r7, lr}
 8015db6:	b084      	sub	sp, #16
 8015db8:	af00      	add	r7, sp, #0
 8015dba:	6078      	str	r0, [r7, #4]
 8015dbc:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 8015dbe:	687b      	ldr	r3, [r7, #4]
 8015dc0:	681b      	ldr	r3, [r3, #0]
 8015dc2:	6839      	ldr	r1, [r7, #0]
 8015dc4:	2200      	movs	r2, #0
 8015dc6:	4618      	mov	r0, r3
 8015dc8:	f7f0 f848 	bl	8005e5c <osMessagePut>
 8015dcc:	4603      	mov	r3, r0
 8015dce:	2b00      	cmp	r3, #0
 8015dd0:	d102      	bne.n	8015dd8 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 8015dd2:	2300      	movs	r3, #0
 8015dd4:	73fb      	strb	r3, [r7, #15]
 8015dd6:	e001      	b.n	8015ddc <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8015dd8:	23ff      	movs	r3, #255	@ 0xff
 8015dda:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8015ddc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8015de0:	4618      	mov	r0, r3
 8015de2:	3710      	adds	r7, #16
 8015de4:	46bd      	mov	sp, r7
 8015de6:	bd80      	pop	{r7, pc}

08015de8 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8015de8:	b580      	push	{r7, lr}
 8015dea:	b08c      	sub	sp, #48	@ 0x30
 8015dec:	af00      	add	r7, sp, #0
 8015dee:	61f8      	str	r0, [r7, #28]
 8015df0:	61b9      	str	r1, [r7, #24]
 8015df2:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 8015df4:	f7ef fe34 	bl	8005a60 <osKernelSysTick>
 8015df8:	62f8      	str	r0, [r7, #44]	@ 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8015dfa:	697b      	ldr	r3, [r7, #20]
 8015dfc:	2b00      	cmp	r3, #0
 8015dfe:	d017      	beq.n	8015e30 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8015e00:	69fb      	ldr	r3, [r7, #28]
 8015e02:	6819      	ldr	r1, [r3, #0]
 8015e04:	f107 0320 	add.w	r3, r7, #32
 8015e08:	697a      	ldr	r2, [r7, #20]
 8015e0a:	4618      	mov	r0, r3
 8015e0c:	f7f0 f866 	bl	8005edc <osMessageGet>

    if(event.status == osEventMessage)
 8015e10:	6a3b      	ldr	r3, [r7, #32]
 8015e12:	2b10      	cmp	r3, #16
 8015e14:	d109      	bne.n	8015e2a <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 8015e16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015e18:	461a      	mov	r2, r3
 8015e1a:	69bb      	ldr	r3, [r7, #24]
 8015e1c:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 8015e1e:	f7ef fe1f 	bl	8005a60 <osKernelSysTick>
 8015e22:	4602      	mov	r2, r0
 8015e24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015e26:	1ad3      	subs	r3, r2, r3
 8015e28:	e019      	b.n	8015e5e <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8015e2a:	f04f 33ff 	mov.w	r3, #4294967295
 8015e2e:	e016      	b.n	8015e5e <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 8015e30:	69fb      	ldr	r3, [r7, #28]
 8015e32:	6819      	ldr	r1, [r3, #0]
 8015e34:	463b      	mov	r3, r7
 8015e36:	f04f 32ff 	mov.w	r2, #4294967295
 8015e3a:	4618      	mov	r0, r3
 8015e3c:	f7f0 f84e 	bl	8005edc <osMessageGet>
 8015e40:	f107 0320 	add.w	r3, r7, #32
 8015e44:	463a      	mov	r2, r7
 8015e46:	ca07      	ldmia	r2, {r0, r1, r2}
 8015e48:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 8015e4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015e4e:	461a      	mov	r2, r3
 8015e50:	69bb      	ldr	r3, [r7, #24]
 8015e52:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 8015e54:	f7ef fe04 	bl	8005a60 <osKernelSysTick>
 8015e58:	4602      	mov	r2, r0
 8015e5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015e5c:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8015e5e:	4618      	mov	r0, r3
 8015e60:	3730      	adds	r7, #48	@ 0x30
 8015e62:	46bd      	mov	sp, r7
 8015e64:	bd80      	pop	{r7, pc}

08015e66 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 8015e66:	b580      	push	{r7, lr}
 8015e68:	b086      	sub	sp, #24
 8015e6a:	af00      	add	r7, sp, #0
 8015e6c:	6078      	str	r0, [r7, #4]
 8015e6e:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 8015e70:	687b      	ldr	r3, [r7, #4]
 8015e72:	6819      	ldr	r1, [r3, #0]
 8015e74:	f107 030c 	add.w	r3, r7, #12
 8015e78:	2200      	movs	r2, #0
 8015e7a:	4618      	mov	r0, r3
 8015e7c:	f7f0 f82e 	bl	8005edc <osMessageGet>

  if(event.status == osEventMessage)
 8015e80:	68fb      	ldr	r3, [r7, #12]
 8015e82:	2b10      	cmp	r3, #16
 8015e84:	d105      	bne.n	8015e92 <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 8015e86:	693b      	ldr	r3, [r7, #16]
 8015e88:	461a      	mov	r2, r3
 8015e8a:	683b      	ldr	r3, [r7, #0]
 8015e8c:	601a      	str	r2, [r3, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 8015e8e:	2300      	movs	r3, #0
 8015e90:	e001      	b.n	8015e96 <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 8015e92:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 8015e96:	4618      	mov	r0, r3
 8015e98:	3718      	adds	r7, #24
 8015e9a:	46bd      	mov	sp, r7
 8015e9c:	bd80      	pop	{r7, pc}

08015e9e <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8015e9e:	b480      	push	{r7}
 8015ea0:	b083      	sub	sp, #12
 8015ea2:	af00      	add	r7, sp, #0
 8015ea4:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8015ea6:	687b      	ldr	r3, [r7, #4]
 8015ea8:	681b      	ldr	r3, [r3, #0]
 8015eaa:	2b00      	cmp	r3, #0
 8015eac:	d101      	bne.n	8015eb2 <sys_mbox_valid+0x14>
    return 0;
 8015eae:	2300      	movs	r3, #0
 8015eb0:	e000      	b.n	8015eb4 <sys_mbox_valid+0x16>
  else
    return 1;
 8015eb2:	2301      	movs	r3, #1
}
 8015eb4:	4618      	mov	r0, r3
 8015eb6:	370c      	adds	r7, #12
 8015eb8:	46bd      	mov	sp, r7
 8015eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ebe:	4770      	bx	lr

08015ec0 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 8015ec0:	b480      	push	{r7}
 8015ec2:	b083      	sub	sp, #12
 8015ec4:	af00      	add	r7, sp, #0
 8015ec6:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 8015ec8:	687b      	ldr	r3, [r7, #4]
 8015eca:	2200      	movs	r2, #0
 8015ecc:	601a      	str	r2, [r3, #0]
}
 8015ece:	bf00      	nop
 8015ed0:	370c      	adds	r7, #12
 8015ed2:	46bd      	mov	sp, r7
 8015ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ed8:	4770      	bx	lr

08015eda <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 8015eda:	b580      	push	{r7, lr}
 8015edc:	b084      	sub	sp, #16
 8015ede:	af00      	add	r7, sp, #0
 8015ee0:	6078      	str	r0, [r7, #4]
 8015ee2:	460b      	mov	r3, r1
 8015ee4:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 8015ee6:	2300      	movs	r3, #0
 8015ee8:	60bb      	str	r3, [r7, #8]
 8015eea:	2300      	movs	r3, #0
 8015eec:	60fb      	str	r3, [r7, #12]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 8015eee:	f107 0308 	add.w	r3, r7, #8
 8015ef2:	2101      	movs	r1, #1
 8015ef4:	4618      	mov	r0, r3
 8015ef6:	f7ef febf 	bl	8005c78 <osSemaphoreCreate>
 8015efa:	4602      	mov	r2, r0
 8015efc:	687b      	ldr	r3, [r7, #4]
 8015efe:	601a      	str	r2, [r3, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 8015f00:	687b      	ldr	r3, [r7, #4]
 8015f02:	681b      	ldr	r3, [r3, #0]
 8015f04:	2b00      	cmp	r3, #0
 8015f06:	d102      	bne.n	8015f0e <sys_sem_new+0x34>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8015f08:	f04f 33ff 	mov.w	r3, #4294967295
 8015f0c:	e009      	b.n	8015f22 <sys_sem_new+0x48>
  }

  if(count == 0)	// Means it can't be taken
 8015f0e:	78fb      	ldrb	r3, [r7, #3]
 8015f10:	2b00      	cmp	r3, #0
 8015f12:	d105      	bne.n	8015f20 <sys_sem_new+0x46>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 8015f14:	687b      	ldr	r3, [r7, #4]
 8015f16:	681b      	ldr	r3, [r3, #0]
 8015f18:	2100      	movs	r1, #0
 8015f1a:	4618      	mov	r0, r3
 8015f1c:	f7ef fede 	bl	8005cdc <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 8015f20:	2300      	movs	r3, #0
}
 8015f22:	4618      	mov	r0, r3
 8015f24:	3710      	adds	r7, #16
 8015f26:	46bd      	mov	sp, r7
 8015f28:	bd80      	pop	{r7, pc}

08015f2a <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 8015f2a:	b580      	push	{r7, lr}
 8015f2c:	b084      	sub	sp, #16
 8015f2e:	af00      	add	r7, sp, #0
 8015f30:	6078      	str	r0, [r7, #4]
 8015f32:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 8015f34:	f7ef fd94 	bl	8005a60 <osKernelSysTick>
 8015f38:	60f8      	str	r0, [r7, #12]
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8015f3a:	683b      	ldr	r3, [r7, #0]
 8015f3c:	2b00      	cmp	r3, #0
 8015f3e:	d011      	beq.n	8015f64 <sys_arch_sem_wait+0x3a>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 8015f40:	687b      	ldr	r3, [r7, #4]
 8015f42:	681b      	ldr	r3, [r3, #0]
 8015f44:	6839      	ldr	r1, [r7, #0]
 8015f46:	4618      	mov	r0, r3
 8015f48:	f7ef fec8 	bl	8005cdc <osSemaphoreWait>
 8015f4c:	4603      	mov	r3, r0
 8015f4e:	2b00      	cmp	r3, #0
 8015f50:	d105      	bne.n	8015f5e <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 8015f52:	f7ef fd85 	bl	8005a60 <osKernelSysTick>
 8015f56:	4602      	mov	r2, r0
 8015f58:	68fb      	ldr	r3, [r7, #12]
 8015f5a:	1ad3      	subs	r3, r2, r3
 8015f5c:	e012      	b.n	8015f84 <sys_arch_sem_wait+0x5a>
        return (osKernelGetTickCount() - starttime);
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 8015f5e:	f04f 33ff 	mov.w	r3, #4294967295
 8015f62:	e00f      	b.n	8015f84 <sys_arch_sem_wait+0x5a>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 8015f64:	bf00      	nop
 8015f66:	687b      	ldr	r3, [r7, #4]
 8015f68:	681b      	ldr	r3, [r3, #0]
 8015f6a:	f04f 31ff 	mov.w	r1, #4294967295
 8015f6e:	4618      	mov	r0, r3
 8015f70:	f7ef feb4 	bl	8005cdc <osSemaphoreWait>
 8015f74:	4603      	mov	r3, r0
 8015f76:	2b00      	cmp	r3, #0
 8015f78:	d1f5      	bne.n	8015f66 <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 8015f7a:	f7ef fd71 	bl	8005a60 <osKernelSysTick>
 8015f7e:	4602      	mov	r2, r0
 8015f80:	68fb      	ldr	r3, [r7, #12]
 8015f82:	1ad3      	subs	r3, r2, r3
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8015f84:	4618      	mov	r0, r3
 8015f86:	3710      	adds	r7, #16
 8015f88:	46bd      	mov	sp, r7
 8015f8a:	bd80      	pop	{r7, pc}

08015f8c <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 8015f8c:	b580      	push	{r7, lr}
 8015f8e:	b082      	sub	sp, #8
 8015f90:	af00      	add	r7, sp, #0
 8015f92:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 8015f94:	687b      	ldr	r3, [r7, #4]
 8015f96:	681b      	ldr	r3, [r3, #0]
 8015f98:	4618      	mov	r0, r3
 8015f9a:	f7ef feed 	bl	8005d78 <osSemaphoreRelease>
}
 8015f9e:	bf00      	nop
 8015fa0:	3708      	adds	r7, #8
 8015fa2:	46bd      	mov	sp, r7
 8015fa4:	bd80      	pop	{r7, pc}

08015fa6 <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 8015fa6:	b580      	push	{r7, lr}
 8015fa8:	b082      	sub	sp, #8
 8015faa:	af00      	add	r7, sp, #0
 8015fac:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 8015fae:	687b      	ldr	r3, [r7, #4]
 8015fb0:	681b      	ldr	r3, [r3, #0]
 8015fb2:	4618      	mov	r0, r3
 8015fb4:	f7ef ff16 	bl	8005de4 <osSemaphoreDelete>
}
 8015fb8:	bf00      	nop
 8015fba:	3708      	adds	r7, #8
 8015fbc:	46bd      	mov	sp, r7
 8015fbe:	bd80      	pop	{r7, pc}

08015fc0 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 8015fc0:	b480      	push	{r7}
 8015fc2:	b083      	sub	sp, #12
 8015fc4:	af00      	add	r7, sp, #0
 8015fc6:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 8015fc8:	687b      	ldr	r3, [r7, #4]
 8015fca:	681b      	ldr	r3, [r3, #0]
 8015fcc:	2b00      	cmp	r3, #0
 8015fce:	d101      	bne.n	8015fd4 <sys_sem_valid+0x14>
    return 0;
 8015fd0:	2300      	movs	r3, #0
 8015fd2:	e000      	b.n	8015fd6 <sys_sem_valid+0x16>
  else
    return 1;
 8015fd4:	2301      	movs	r3, #1
}
 8015fd6:	4618      	mov	r0, r3
 8015fd8:	370c      	adds	r7, #12
 8015fda:	46bd      	mov	sp, r7
 8015fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fe0:	4770      	bx	lr

08015fe2 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 8015fe2:	b480      	push	{r7}
 8015fe4:	b083      	sub	sp, #12
 8015fe6:	af00      	add	r7, sp, #0
 8015fe8:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 8015fea:	687b      	ldr	r3, [r7, #4]
 8015fec:	2200      	movs	r2, #0
 8015fee:	601a      	str	r2, [r3, #0]
}
 8015ff0:	bf00      	nop
 8015ff2:	370c      	adds	r7, #12
 8015ff4:	46bd      	mov	sp, r7
 8015ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ffa:	4770      	bx	lr

08015ffc <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8015ffc:	b580      	push	{r7, lr}
 8015ffe:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8016000:	4803      	ldr	r0, [pc, #12]	@ (8016010 <sys_init+0x14>)
 8016002:	f7ef fd9d 	bl	8005b40 <osMutexCreate>
 8016006:	4603      	mov	r3, r0
 8016008:	4a02      	ldr	r2, [pc, #8]	@ (8016014 <sys_init+0x18>)
 801600a:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 801600c:	bf00      	nop
 801600e:	bd80      	pop	{r7, pc}
 8016010:	0801aeb8 	.word	0x0801aeb8
 8016014:	2000eca0 	.word	0x2000eca0

08016018 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8016018:	b580      	push	{r7, lr}
 801601a:	b084      	sub	sp, #16
 801601c:	af00      	add	r7, sp, #0
 801601e:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 8016020:	2300      	movs	r3, #0
 8016022:	60bb      	str	r3, [r7, #8]
 8016024:	2300      	movs	r3, #0
 8016026:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8016028:	f107 0308 	add.w	r3, r7, #8
 801602c:	4618      	mov	r0, r3
 801602e:	f7ef fd87 	bl	8005b40 <osMutexCreate>
 8016032:	4602      	mov	r2, r0
 8016034:	687b      	ldr	r3, [r7, #4]
 8016036:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8016038:	687b      	ldr	r3, [r7, #4]
 801603a:	681b      	ldr	r3, [r3, #0]
 801603c:	2b00      	cmp	r3, #0
 801603e:	d102      	bne.n	8016046 <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8016040:	f04f 33ff 	mov.w	r3, #4294967295
 8016044:	e000      	b.n	8016048 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8016046:	2300      	movs	r3, #0
}
 8016048:	4618      	mov	r0, r3
 801604a:	3710      	adds	r7, #16
 801604c:	46bd      	mov	sp, r7
 801604e:	bd80      	pop	{r7, pc}

08016050 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8016050:	b580      	push	{r7, lr}
 8016052:	b082      	sub	sp, #8
 8016054:	af00      	add	r7, sp, #0
 8016056:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8016058:	687b      	ldr	r3, [r7, #4]
 801605a:	681b      	ldr	r3, [r3, #0]
 801605c:	f04f 31ff 	mov.w	r1, #4294967295
 8016060:	4618      	mov	r0, r3
 8016062:	f7ef fd85 	bl	8005b70 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 8016066:	bf00      	nop
 8016068:	3708      	adds	r7, #8
 801606a:	46bd      	mov	sp, r7
 801606c:	bd80      	pop	{r7, pc}

0801606e <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801606e:	b580      	push	{r7, lr}
 8016070:	b082      	sub	sp, #8
 8016072:	af00      	add	r7, sp, #0
 8016074:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8016076:	687b      	ldr	r3, [r7, #4]
 8016078:	681b      	ldr	r3, [r3, #0]
 801607a:	4618      	mov	r0, r3
 801607c:	f7ef fdc6 	bl	8005c0c <osMutexRelease>
}
 8016080:	bf00      	nop
 8016082:	3708      	adds	r7, #8
 8016084:	46bd      	mov	sp, r7
 8016086:	bd80      	pop	{r7, pc}

08016088 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8016088:	b580      	push	{r7, lr}
 801608a:	b08c      	sub	sp, #48	@ 0x30
 801608c:	af00      	add	r7, sp, #0
 801608e:	60f8      	str	r0, [r7, #12]
 8016090:	60b9      	str	r1, [r7, #8]
 8016092:	607a      	str	r2, [r7, #4]
 8016094:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8016096:	f107 0314 	add.w	r3, r7, #20
 801609a:	2200      	movs	r2, #0
 801609c:	601a      	str	r2, [r3, #0]
 801609e:	605a      	str	r2, [r3, #4]
 80160a0:	609a      	str	r2, [r3, #8]
 80160a2:	60da      	str	r2, [r3, #12]
 80160a4:	611a      	str	r2, [r3, #16]
 80160a6:	615a      	str	r2, [r3, #20]
 80160a8:	619a      	str	r2, [r3, #24]
 80160aa:	68fb      	ldr	r3, [r7, #12]
 80160ac:	617b      	str	r3, [r7, #20]
 80160ae:	68bb      	ldr	r3, [r7, #8]
 80160b0:	61bb      	str	r3, [r7, #24]
 80160b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80160b4:	b21b      	sxth	r3, r3
 80160b6:	83bb      	strh	r3, [r7, #28]
 80160b8:	683b      	ldr	r3, [r7, #0]
 80160ba:	627b      	str	r3, [r7, #36]	@ 0x24
  return osThreadCreate(&os_thread_def, arg);
 80160bc:	f107 0314 	add.w	r3, r7, #20
 80160c0:	6879      	ldr	r1, [r7, #4]
 80160c2:	4618      	mov	r0, r3
 80160c4:	f7ef fcdc 	bl	8005a80 <osThreadCreate>
 80160c8:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 80160ca:	4618      	mov	r0, r3
 80160cc:	3730      	adds	r7, #48	@ 0x30
 80160ce:	46bd      	mov	sp, r7
 80160d0:	bd80      	pop	{r7, pc}
	...

080160d4 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 80160d4:	b580      	push	{r7, lr}
 80160d6:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 80160d8:	4b04      	ldr	r3, [pc, #16]	@ (80160ec <sys_arch_protect+0x18>)
 80160da:	681b      	ldr	r3, [r3, #0]
 80160dc:	f04f 31ff 	mov.w	r1, #4294967295
 80160e0:	4618      	mov	r0, r3
 80160e2:	f7ef fd45 	bl	8005b70 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 80160e6:	2301      	movs	r3, #1
}
 80160e8:	4618      	mov	r0, r3
 80160ea:	bd80      	pop	{r7, pc}
 80160ec:	2000eca0 	.word	0x2000eca0

080160f0 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 80160f0:	b580      	push	{r7, lr}
 80160f2:	b082      	sub	sp, #8
 80160f4:	af00      	add	r7, sp, #0
 80160f6:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 80160f8:	4b04      	ldr	r3, [pc, #16]	@ (801610c <sys_arch_unprotect+0x1c>)
 80160fa:	681b      	ldr	r3, [r3, #0]
 80160fc:	4618      	mov	r0, r3
 80160fe:	f7ef fd85 	bl	8005c0c <osMutexRelease>
}
 8016102:	bf00      	nop
 8016104:	3708      	adds	r7, #8
 8016106:	46bd      	mov	sp, r7
 8016108:	bd80      	pop	{r7, pc}
 801610a:	bf00      	nop
 801610c:	2000eca0 	.word	0x2000eca0

08016110 <rand>:
 8016110:	4b16      	ldr	r3, [pc, #88]	@ (801616c <rand+0x5c>)
 8016112:	b510      	push	{r4, lr}
 8016114:	681c      	ldr	r4, [r3, #0]
 8016116:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8016118:	b9b3      	cbnz	r3, 8016148 <rand+0x38>
 801611a:	2018      	movs	r0, #24
 801611c:	f000 fada 	bl	80166d4 <malloc>
 8016120:	4602      	mov	r2, r0
 8016122:	6320      	str	r0, [r4, #48]	@ 0x30
 8016124:	b920      	cbnz	r0, 8016130 <rand+0x20>
 8016126:	4b12      	ldr	r3, [pc, #72]	@ (8016170 <rand+0x60>)
 8016128:	4812      	ldr	r0, [pc, #72]	@ (8016174 <rand+0x64>)
 801612a:	2152      	movs	r1, #82	@ 0x52
 801612c:	f000 fa6a 	bl	8016604 <__assert_func>
 8016130:	4911      	ldr	r1, [pc, #68]	@ (8016178 <rand+0x68>)
 8016132:	4b12      	ldr	r3, [pc, #72]	@ (801617c <rand+0x6c>)
 8016134:	e9c0 1300 	strd	r1, r3, [r0]
 8016138:	4b11      	ldr	r3, [pc, #68]	@ (8016180 <rand+0x70>)
 801613a:	6083      	str	r3, [r0, #8]
 801613c:	230b      	movs	r3, #11
 801613e:	8183      	strh	r3, [r0, #12]
 8016140:	2100      	movs	r1, #0
 8016142:	2001      	movs	r0, #1
 8016144:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8016148:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801614a:	480e      	ldr	r0, [pc, #56]	@ (8016184 <rand+0x74>)
 801614c:	690b      	ldr	r3, [r1, #16]
 801614e:	694c      	ldr	r4, [r1, #20]
 8016150:	4a0d      	ldr	r2, [pc, #52]	@ (8016188 <rand+0x78>)
 8016152:	4358      	muls	r0, r3
 8016154:	fb02 0004 	mla	r0, r2, r4, r0
 8016158:	fba3 3202 	umull	r3, r2, r3, r2
 801615c:	3301      	adds	r3, #1
 801615e:	eb40 0002 	adc.w	r0, r0, r2
 8016162:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8016166:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 801616a:	bd10      	pop	{r4, pc}
 801616c:	2000013c 	.word	0x2000013c
 8016170:	0801aec0 	.word	0x0801aec0
 8016174:	0801aed7 	.word	0x0801aed7
 8016178:	abcd330e 	.word	0xabcd330e
 801617c:	e66d1234 	.word	0xe66d1234
 8016180:	0005deec 	.word	0x0005deec
 8016184:	5851f42d 	.word	0x5851f42d
 8016188:	4c957f2d 	.word	0x4c957f2d

0801618c <std>:
 801618c:	2300      	movs	r3, #0
 801618e:	b510      	push	{r4, lr}
 8016190:	4604      	mov	r4, r0
 8016192:	e9c0 3300 	strd	r3, r3, [r0]
 8016196:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801619a:	6083      	str	r3, [r0, #8]
 801619c:	8181      	strh	r1, [r0, #12]
 801619e:	6643      	str	r3, [r0, #100]	@ 0x64
 80161a0:	81c2      	strh	r2, [r0, #14]
 80161a2:	6183      	str	r3, [r0, #24]
 80161a4:	4619      	mov	r1, r3
 80161a6:	2208      	movs	r2, #8
 80161a8:	305c      	adds	r0, #92	@ 0x5c
 80161aa:	f000 f950 	bl	801644e <memset>
 80161ae:	4b0d      	ldr	r3, [pc, #52]	@ (80161e4 <std+0x58>)
 80161b0:	6263      	str	r3, [r4, #36]	@ 0x24
 80161b2:	4b0d      	ldr	r3, [pc, #52]	@ (80161e8 <std+0x5c>)
 80161b4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80161b6:	4b0d      	ldr	r3, [pc, #52]	@ (80161ec <std+0x60>)
 80161b8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80161ba:	4b0d      	ldr	r3, [pc, #52]	@ (80161f0 <std+0x64>)
 80161bc:	6323      	str	r3, [r4, #48]	@ 0x30
 80161be:	4b0d      	ldr	r3, [pc, #52]	@ (80161f4 <std+0x68>)
 80161c0:	6224      	str	r4, [r4, #32]
 80161c2:	429c      	cmp	r4, r3
 80161c4:	d006      	beq.n	80161d4 <std+0x48>
 80161c6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80161ca:	4294      	cmp	r4, r2
 80161cc:	d002      	beq.n	80161d4 <std+0x48>
 80161ce:	33d0      	adds	r3, #208	@ 0xd0
 80161d0:	429c      	cmp	r4, r3
 80161d2:	d105      	bne.n	80161e0 <std+0x54>
 80161d4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80161d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80161dc:	f000 ba00 	b.w	80165e0 <__retarget_lock_init_recursive>
 80161e0:	bd10      	pop	{r4, pc}
 80161e2:	bf00      	nop
 80161e4:	08016375 	.word	0x08016375
 80161e8:	08016397 	.word	0x08016397
 80161ec:	080163cf 	.word	0x080163cf
 80161f0:	080163f3 	.word	0x080163f3
 80161f4:	2000eca4 	.word	0x2000eca4

080161f8 <stdio_exit_handler>:
 80161f8:	4a02      	ldr	r2, [pc, #8]	@ (8016204 <stdio_exit_handler+0xc>)
 80161fa:	4903      	ldr	r1, [pc, #12]	@ (8016208 <stdio_exit_handler+0x10>)
 80161fc:	4803      	ldr	r0, [pc, #12]	@ (801620c <stdio_exit_handler+0x14>)
 80161fe:	f000 b869 	b.w	80162d4 <_fwalk_sglue>
 8016202:	bf00      	nop
 8016204:	20000130 	.word	0x20000130
 8016208:	08017199 	.word	0x08017199
 801620c:	20000140 	.word	0x20000140

08016210 <cleanup_stdio>:
 8016210:	6841      	ldr	r1, [r0, #4]
 8016212:	4b0c      	ldr	r3, [pc, #48]	@ (8016244 <cleanup_stdio+0x34>)
 8016214:	4299      	cmp	r1, r3
 8016216:	b510      	push	{r4, lr}
 8016218:	4604      	mov	r4, r0
 801621a:	d001      	beq.n	8016220 <cleanup_stdio+0x10>
 801621c:	f000 ffbc 	bl	8017198 <_fflush_r>
 8016220:	68a1      	ldr	r1, [r4, #8]
 8016222:	4b09      	ldr	r3, [pc, #36]	@ (8016248 <cleanup_stdio+0x38>)
 8016224:	4299      	cmp	r1, r3
 8016226:	d002      	beq.n	801622e <cleanup_stdio+0x1e>
 8016228:	4620      	mov	r0, r4
 801622a:	f000 ffb5 	bl	8017198 <_fflush_r>
 801622e:	68e1      	ldr	r1, [r4, #12]
 8016230:	4b06      	ldr	r3, [pc, #24]	@ (801624c <cleanup_stdio+0x3c>)
 8016232:	4299      	cmp	r1, r3
 8016234:	d004      	beq.n	8016240 <cleanup_stdio+0x30>
 8016236:	4620      	mov	r0, r4
 8016238:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801623c:	f000 bfac 	b.w	8017198 <_fflush_r>
 8016240:	bd10      	pop	{r4, pc}
 8016242:	bf00      	nop
 8016244:	2000eca4 	.word	0x2000eca4
 8016248:	2000ed0c 	.word	0x2000ed0c
 801624c:	2000ed74 	.word	0x2000ed74

08016250 <global_stdio_init.part.0>:
 8016250:	b510      	push	{r4, lr}
 8016252:	4b0b      	ldr	r3, [pc, #44]	@ (8016280 <global_stdio_init.part.0+0x30>)
 8016254:	4c0b      	ldr	r4, [pc, #44]	@ (8016284 <global_stdio_init.part.0+0x34>)
 8016256:	4a0c      	ldr	r2, [pc, #48]	@ (8016288 <global_stdio_init.part.0+0x38>)
 8016258:	601a      	str	r2, [r3, #0]
 801625a:	4620      	mov	r0, r4
 801625c:	2200      	movs	r2, #0
 801625e:	2104      	movs	r1, #4
 8016260:	f7ff ff94 	bl	801618c <std>
 8016264:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8016268:	2201      	movs	r2, #1
 801626a:	2109      	movs	r1, #9
 801626c:	f7ff ff8e 	bl	801618c <std>
 8016270:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8016274:	2202      	movs	r2, #2
 8016276:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801627a:	2112      	movs	r1, #18
 801627c:	f7ff bf86 	b.w	801618c <std>
 8016280:	2000eddc 	.word	0x2000eddc
 8016284:	2000eca4 	.word	0x2000eca4
 8016288:	080161f9 	.word	0x080161f9

0801628c <__sfp_lock_acquire>:
 801628c:	4801      	ldr	r0, [pc, #4]	@ (8016294 <__sfp_lock_acquire+0x8>)
 801628e:	f000 b9a8 	b.w	80165e2 <__retarget_lock_acquire_recursive>
 8016292:	bf00      	nop
 8016294:	2000ede5 	.word	0x2000ede5

08016298 <__sfp_lock_release>:
 8016298:	4801      	ldr	r0, [pc, #4]	@ (80162a0 <__sfp_lock_release+0x8>)
 801629a:	f000 b9a3 	b.w	80165e4 <__retarget_lock_release_recursive>
 801629e:	bf00      	nop
 80162a0:	2000ede5 	.word	0x2000ede5

080162a4 <__sinit>:
 80162a4:	b510      	push	{r4, lr}
 80162a6:	4604      	mov	r4, r0
 80162a8:	f7ff fff0 	bl	801628c <__sfp_lock_acquire>
 80162ac:	6a23      	ldr	r3, [r4, #32]
 80162ae:	b11b      	cbz	r3, 80162b8 <__sinit+0x14>
 80162b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80162b4:	f7ff bff0 	b.w	8016298 <__sfp_lock_release>
 80162b8:	4b04      	ldr	r3, [pc, #16]	@ (80162cc <__sinit+0x28>)
 80162ba:	6223      	str	r3, [r4, #32]
 80162bc:	4b04      	ldr	r3, [pc, #16]	@ (80162d0 <__sinit+0x2c>)
 80162be:	681b      	ldr	r3, [r3, #0]
 80162c0:	2b00      	cmp	r3, #0
 80162c2:	d1f5      	bne.n	80162b0 <__sinit+0xc>
 80162c4:	f7ff ffc4 	bl	8016250 <global_stdio_init.part.0>
 80162c8:	e7f2      	b.n	80162b0 <__sinit+0xc>
 80162ca:	bf00      	nop
 80162cc:	08016211 	.word	0x08016211
 80162d0:	2000eddc 	.word	0x2000eddc

080162d4 <_fwalk_sglue>:
 80162d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80162d8:	4607      	mov	r7, r0
 80162da:	4688      	mov	r8, r1
 80162dc:	4614      	mov	r4, r2
 80162de:	2600      	movs	r6, #0
 80162e0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80162e4:	f1b9 0901 	subs.w	r9, r9, #1
 80162e8:	d505      	bpl.n	80162f6 <_fwalk_sglue+0x22>
 80162ea:	6824      	ldr	r4, [r4, #0]
 80162ec:	2c00      	cmp	r4, #0
 80162ee:	d1f7      	bne.n	80162e0 <_fwalk_sglue+0xc>
 80162f0:	4630      	mov	r0, r6
 80162f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80162f6:	89ab      	ldrh	r3, [r5, #12]
 80162f8:	2b01      	cmp	r3, #1
 80162fa:	d907      	bls.n	801630c <_fwalk_sglue+0x38>
 80162fc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8016300:	3301      	adds	r3, #1
 8016302:	d003      	beq.n	801630c <_fwalk_sglue+0x38>
 8016304:	4629      	mov	r1, r5
 8016306:	4638      	mov	r0, r7
 8016308:	47c0      	blx	r8
 801630a:	4306      	orrs	r6, r0
 801630c:	3568      	adds	r5, #104	@ 0x68
 801630e:	e7e9      	b.n	80162e4 <_fwalk_sglue+0x10>

08016310 <iprintf>:
 8016310:	b40f      	push	{r0, r1, r2, r3}
 8016312:	b507      	push	{r0, r1, r2, lr}
 8016314:	4906      	ldr	r1, [pc, #24]	@ (8016330 <iprintf+0x20>)
 8016316:	ab04      	add	r3, sp, #16
 8016318:	6808      	ldr	r0, [r1, #0]
 801631a:	f853 2b04 	ldr.w	r2, [r3], #4
 801631e:	6881      	ldr	r1, [r0, #8]
 8016320:	9301      	str	r3, [sp, #4]
 8016322:	f000 fc0f 	bl	8016b44 <_vfiprintf_r>
 8016326:	b003      	add	sp, #12
 8016328:	f85d eb04 	ldr.w	lr, [sp], #4
 801632c:	b004      	add	sp, #16
 801632e:	4770      	bx	lr
 8016330:	2000013c 	.word	0x2000013c

08016334 <siprintf>:
 8016334:	b40e      	push	{r1, r2, r3}
 8016336:	b500      	push	{lr}
 8016338:	b09c      	sub	sp, #112	@ 0x70
 801633a:	ab1d      	add	r3, sp, #116	@ 0x74
 801633c:	9002      	str	r0, [sp, #8]
 801633e:	9006      	str	r0, [sp, #24]
 8016340:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8016344:	4809      	ldr	r0, [pc, #36]	@ (801636c <siprintf+0x38>)
 8016346:	9107      	str	r1, [sp, #28]
 8016348:	9104      	str	r1, [sp, #16]
 801634a:	4909      	ldr	r1, [pc, #36]	@ (8016370 <siprintf+0x3c>)
 801634c:	f853 2b04 	ldr.w	r2, [r3], #4
 8016350:	9105      	str	r1, [sp, #20]
 8016352:	6800      	ldr	r0, [r0, #0]
 8016354:	9301      	str	r3, [sp, #4]
 8016356:	a902      	add	r1, sp, #8
 8016358:	f000 face 	bl	80168f8 <_svfiprintf_r>
 801635c:	9b02      	ldr	r3, [sp, #8]
 801635e:	2200      	movs	r2, #0
 8016360:	701a      	strb	r2, [r3, #0]
 8016362:	b01c      	add	sp, #112	@ 0x70
 8016364:	f85d eb04 	ldr.w	lr, [sp], #4
 8016368:	b003      	add	sp, #12
 801636a:	4770      	bx	lr
 801636c:	2000013c 	.word	0x2000013c
 8016370:	ffff0208 	.word	0xffff0208

08016374 <__sread>:
 8016374:	b510      	push	{r4, lr}
 8016376:	460c      	mov	r4, r1
 8016378:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801637c:	f000 f8e8 	bl	8016550 <_read_r>
 8016380:	2800      	cmp	r0, #0
 8016382:	bfab      	itete	ge
 8016384:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8016386:	89a3      	ldrhlt	r3, [r4, #12]
 8016388:	181b      	addge	r3, r3, r0
 801638a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801638e:	bfac      	ite	ge
 8016390:	6563      	strge	r3, [r4, #84]	@ 0x54
 8016392:	81a3      	strhlt	r3, [r4, #12]
 8016394:	bd10      	pop	{r4, pc}

08016396 <__swrite>:
 8016396:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801639a:	461f      	mov	r7, r3
 801639c:	898b      	ldrh	r3, [r1, #12]
 801639e:	05db      	lsls	r3, r3, #23
 80163a0:	4605      	mov	r5, r0
 80163a2:	460c      	mov	r4, r1
 80163a4:	4616      	mov	r6, r2
 80163a6:	d505      	bpl.n	80163b4 <__swrite+0x1e>
 80163a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80163ac:	2302      	movs	r3, #2
 80163ae:	2200      	movs	r2, #0
 80163b0:	f000 f8bc 	bl	801652c <_lseek_r>
 80163b4:	89a3      	ldrh	r3, [r4, #12]
 80163b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80163ba:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80163be:	81a3      	strh	r3, [r4, #12]
 80163c0:	4632      	mov	r2, r6
 80163c2:	463b      	mov	r3, r7
 80163c4:	4628      	mov	r0, r5
 80163c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80163ca:	f000 b8d3 	b.w	8016574 <_write_r>

080163ce <__sseek>:
 80163ce:	b510      	push	{r4, lr}
 80163d0:	460c      	mov	r4, r1
 80163d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80163d6:	f000 f8a9 	bl	801652c <_lseek_r>
 80163da:	1c43      	adds	r3, r0, #1
 80163dc:	89a3      	ldrh	r3, [r4, #12]
 80163de:	bf15      	itete	ne
 80163e0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80163e2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80163e6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80163ea:	81a3      	strheq	r3, [r4, #12]
 80163ec:	bf18      	it	ne
 80163ee:	81a3      	strhne	r3, [r4, #12]
 80163f0:	bd10      	pop	{r4, pc}

080163f2 <__sclose>:
 80163f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80163f6:	f000 b833 	b.w	8016460 <_close_r>

080163fa <memcmp>:
 80163fa:	b510      	push	{r4, lr}
 80163fc:	3901      	subs	r1, #1
 80163fe:	4402      	add	r2, r0
 8016400:	4290      	cmp	r0, r2
 8016402:	d101      	bne.n	8016408 <memcmp+0xe>
 8016404:	2000      	movs	r0, #0
 8016406:	e005      	b.n	8016414 <memcmp+0x1a>
 8016408:	7803      	ldrb	r3, [r0, #0]
 801640a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801640e:	42a3      	cmp	r3, r4
 8016410:	d001      	beq.n	8016416 <memcmp+0x1c>
 8016412:	1b18      	subs	r0, r3, r4
 8016414:	bd10      	pop	{r4, pc}
 8016416:	3001      	adds	r0, #1
 8016418:	e7f2      	b.n	8016400 <memcmp+0x6>

0801641a <memmove>:
 801641a:	4288      	cmp	r0, r1
 801641c:	b510      	push	{r4, lr}
 801641e:	eb01 0402 	add.w	r4, r1, r2
 8016422:	d902      	bls.n	801642a <memmove+0x10>
 8016424:	4284      	cmp	r4, r0
 8016426:	4623      	mov	r3, r4
 8016428:	d807      	bhi.n	801643a <memmove+0x20>
 801642a:	1e43      	subs	r3, r0, #1
 801642c:	42a1      	cmp	r1, r4
 801642e:	d008      	beq.n	8016442 <memmove+0x28>
 8016430:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016434:	f803 2f01 	strb.w	r2, [r3, #1]!
 8016438:	e7f8      	b.n	801642c <memmove+0x12>
 801643a:	4402      	add	r2, r0
 801643c:	4601      	mov	r1, r0
 801643e:	428a      	cmp	r2, r1
 8016440:	d100      	bne.n	8016444 <memmove+0x2a>
 8016442:	bd10      	pop	{r4, pc}
 8016444:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8016448:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801644c:	e7f7      	b.n	801643e <memmove+0x24>

0801644e <memset>:
 801644e:	4402      	add	r2, r0
 8016450:	4603      	mov	r3, r0
 8016452:	4293      	cmp	r3, r2
 8016454:	d100      	bne.n	8016458 <memset+0xa>
 8016456:	4770      	bx	lr
 8016458:	f803 1b01 	strb.w	r1, [r3], #1
 801645c:	e7f9      	b.n	8016452 <memset+0x4>
	...

08016460 <_close_r>:
 8016460:	b538      	push	{r3, r4, r5, lr}
 8016462:	4d06      	ldr	r5, [pc, #24]	@ (801647c <_close_r+0x1c>)
 8016464:	2300      	movs	r3, #0
 8016466:	4604      	mov	r4, r0
 8016468:	4608      	mov	r0, r1
 801646a:	602b      	str	r3, [r5, #0]
 801646c:	f7eb f854 	bl	8001518 <_close>
 8016470:	1c43      	adds	r3, r0, #1
 8016472:	d102      	bne.n	801647a <_close_r+0x1a>
 8016474:	682b      	ldr	r3, [r5, #0]
 8016476:	b103      	cbz	r3, 801647a <_close_r+0x1a>
 8016478:	6023      	str	r3, [r4, #0]
 801647a:	bd38      	pop	{r3, r4, r5, pc}
 801647c:	2000ede0 	.word	0x2000ede0

08016480 <_reclaim_reent>:
 8016480:	4b29      	ldr	r3, [pc, #164]	@ (8016528 <_reclaim_reent+0xa8>)
 8016482:	681b      	ldr	r3, [r3, #0]
 8016484:	4283      	cmp	r3, r0
 8016486:	b570      	push	{r4, r5, r6, lr}
 8016488:	4604      	mov	r4, r0
 801648a:	d04b      	beq.n	8016524 <_reclaim_reent+0xa4>
 801648c:	69c3      	ldr	r3, [r0, #28]
 801648e:	b1ab      	cbz	r3, 80164bc <_reclaim_reent+0x3c>
 8016490:	68db      	ldr	r3, [r3, #12]
 8016492:	b16b      	cbz	r3, 80164b0 <_reclaim_reent+0x30>
 8016494:	2500      	movs	r5, #0
 8016496:	69e3      	ldr	r3, [r4, #28]
 8016498:	68db      	ldr	r3, [r3, #12]
 801649a:	5959      	ldr	r1, [r3, r5]
 801649c:	2900      	cmp	r1, #0
 801649e:	d13b      	bne.n	8016518 <_reclaim_reent+0x98>
 80164a0:	3504      	adds	r5, #4
 80164a2:	2d80      	cmp	r5, #128	@ 0x80
 80164a4:	d1f7      	bne.n	8016496 <_reclaim_reent+0x16>
 80164a6:	69e3      	ldr	r3, [r4, #28]
 80164a8:	4620      	mov	r0, r4
 80164aa:	68d9      	ldr	r1, [r3, #12]
 80164ac:	f000 f8c8 	bl	8016640 <_free_r>
 80164b0:	69e3      	ldr	r3, [r4, #28]
 80164b2:	6819      	ldr	r1, [r3, #0]
 80164b4:	b111      	cbz	r1, 80164bc <_reclaim_reent+0x3c>
 80164b6:	4620      	mov	r0, r4
 80164b8:	f000 f8c2 	bl	8016640 <_free_r>
 80164bc:	6961      	ldr	r1, [r4, #20]
 80164be:	b111      	cbz	r1, 80164c6 <_reclaim_reent+0x46>
 80164c0:	4620      	mov	r0, r4
 80164c2:	f000 f8bd 	bl	8016640 <_free_r>
 80164c6:	69e1      	ldr	r1, [r4, #28]
 80164c8:	b111      	cbz	r1, 80164d0 <_reclaim_reent+0x50>
 80164ca:	4620      	mov	r0, r4
 80164cc:	f000 f8b8 	bl	8016640 <_free_r>
 80164d0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80164d2:	b111      	cbz	r1, 80164da <_reclaim_reent+0x5a>
 80164d4:	4620      	mov	r0, r4
 80164d6:	f000 f8b3 	bl	8016640 <_free_r>
 80164da:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80164dc:	b111      	cbz	r1, 80164e4 <_reclaim_reent+0x64>
 80164de:	4620      	mov	r0, r4
 80164e0:	f000 f8ae 	bl	8016640 <_free_r>
 80164e4:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80164e6:	b111      	cbz	r1, 80164ee <_reclaim_reent+0x6e>
 80164e8:	4620      	mov	r0, r4
 80164ea:	f000 f8a9 	bl	8016640 <_free_r>
 80164ee:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80164f0:	b111      	cbz	r1, 80164f8 <_reclaim_reent+0x78>
 80164f2:	4620      	mov	r0, r4
 80164f4:	f000 f8a4 	bl	8016640 <_free_r>
 80164f8:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80164fa:	b111      	cbz	r1, 8016502 <_reclaim_reent+0x82>
 80164fc:	4620      	mov	r0, r4
 80164fe:	f000 f89f 	bl	8016640 <_free_r>
 8016502:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8016504:	b111      	cbz	r1, 801650c <_reclaim_reent+0x8c>
 8016506:	4620      	mov	r0, r4
 8016508:	f000 f89a 	bl	8016640 <_free_r>
 801650c:	6a23      	ldr	r3, [r4, #32]
 801650e:	b14b      	cbz	r3, 8016524 <_reclaim_reent+0xa4>
 8016510:	4620      	mov	r0, r4
 8016512:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016516:	4718      	bx	r3
 8016518:	680e      	ldr	r6, [r1, #0]
 801651a:	4620      	mov	r0, r4
 801651c:	f000 f890 	bl	8016640 <_free_r>
 8016520:	4631      	mov	r1, r6
 8016522:	e7bb      	b.n	801649c <_reclaim_reent+0x1c>
 8016524:	bd70      	pop	{r4, r5, r6, pc}
 8016526:	bf00      	nop
 8016528:	2000013c 	.word	0x2000013c

0801652c <_lseek_r>:
 801652c:	b538      	push	{r3, r4, r5, lr}
 801652e:	4d07      	ldr	r5, [pc, #28]	@ (801654c <_lseek_r+0x20>)
 8016530:	4604      	mov	r4, r0
 8016532:	4608      	mov	r0, r1
 8016534:	4611      	mov	r1, r2
 8016536:	2200      	movs	r2, #0
 8016538:	602a      	str	r2, [r5, #0]
 801653a:	461a      	mov	r2, r3
 801653c:	f7eb f813 	bl	8001566 <_lseek>
 8016540:	1c43      	adds	r3, r0, #1
 8016542:	d102      	bne.n	801654a <_lseek_r+0x1e>
 8016544:	682b      	ldr	r3, [r5, #0]
 8016546:	b103      	cbz	r3, 801654a <_lseek_r+0x1e>
 8016548:	6023      	str	r3, [r4, #0]
 801654a:	bd38      	pop	{r3, r4, r5, pc}
 801654c:	2000ede0 	.word	0x2000ede0

08016550 <_read_r>:
 8016550:	b538      	push	{r3, r4, r5, lr}
 8016552:	4d07      	ldr	r5, [pc, #28]	@ (8016570 <_read_r+0x20>)
 8016554:	4604      	mov	r4, r0
 8016556:	4608      	mov	r0, r1
 8016558:	4611      	mov	r1, r2
 801655a:	2200      	movs	r2, #0
 801655c:	602a      	str	r2, [r5, #0]
 801655e:	461a      	mov	r2, r3
 8016560:	f7ea ffa1 	bl	80014a6 <_read>
 8016564:	1c43      	adds	r3, r0, #1
 8016566:	d102      	bne.n	801656e <_read_r+0x1e>
 8016568:	682b      	ldr	r3, [r5, #0]
 801656a:	b103      	cbz	r3, 801656e <_read_r+0x1e>
 801656c:	6023      	str	r3, [r4, #0]
 801656e:	bd38      	pop	{r3, r4, r5, pc}
 8016570:	2000ede0 	.word	0x2000ede0

08016574 <_write_r>:
 8016574:	b538      	push	{r3, r4, r5, lr}
 8016576:	4d07      	ldr	r5, [pc, #28]	@ (8016594 <_write_r+0x20>)
 8016578:	4604      	mov	r4, r0
 801657a:	4608      	mov	r0, r1
 801657c:	4611      	mov	r1, r2
 801657e:	2200      	movs	r2, #0
 8016580:	602a      	str	r2, [r5, #0]
 8016582:	461a      	mov	r2, r3
 8016584:	f7ea ffac 	bl	80014e0 <_write>
 8016588:	1c43      	adds	r3, r0, #1
 801658a:	d102      	bne.n	8016592 <_write_r+0x1e>
 801658c:	682b      	ldr	r3, [r5, #0]
 801658e:	b103      	cbz	r3, 8016592 <_write_r+0x1e>
 8016590:	6023      	str	r3, [r4, #0]
 8016592:	bd38      	pop	{r3, r4, r5, pc}
 8016594:	2000ede0 	.word	0x2000ede0

08016598 <__libc_init_array>:
 8016598:	b570      	push	{r4, r5, r6, lr}
 801659a:	4d0d      	ldr	r5, [pc, #52]	@ (80165d0 <__libc_init_array+0x38>)
 801659c:	4c0d      	ldr	r4, [pc, #52]	@ (80165d4 <__libc_init_array+0x3c>)
 801659e:	1b64      	subs	r4, r4, r5
 80165a0:	10a4      	asrs	r4, r4, #2
 80165a2:	2600      	movs	r6, #0
 80165a4:	42a6      	cmp	r6, r4
 80165a6:	d109      	bne.n	80165bc <__libc_init_array+0x24>
 80165a8:	4d0b      	ldr	r5, [pc, #44]	@ (80165d8 <__libc_init_array+0x40>)
 80165aa:	4c0c      	ldr	r4, [pc, #48]	@ (80165dc <__libc_init_array+0x44>)
 80165ac:	f000 ffd8 	bl	8017560 <_init>
 80165b0:	1b64      	subs	r4, r4, r5
 80165b2:	10a4      	asrs	r4, r4, #2
 80165b4:	2600      	movs	r6, #0
 80165b6:	42a6      	cmp	r6, r4
 80165b8:	d105      	bne.n	80165c6 <__libc_init_array+0x2e>
 80165ba:	bd70      	pop	{r4, r5, r6, pc}
 80165bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80165c0:	4798      	blx	r3
 80165c2:	3601      	adds	r6, #1
 80165c4:	e7ee      	b.n	80165a4 <__libc_init_array+0xc>
 80165c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80165ca:	4798      	blx	r3
 80165cc:	3601      	adds	r6, #1
 80165ce:	e7f2      	b.n	80165b6 <__libc_init_array+0x1e>
 80165d0:	0801afa8 	.word	0x0801afa8
 80165d4:	0801afa8 	.word	0x0801afa8
 80165d8:	0801afa8 	.word	0x0801afa8
 80165dc:	0801afac 	.word	0x0801afac

080165e0 <__retarget_lock_init_recursive>:
 80165e0:	4770      	bx	lr

080165e2 <__retarget_lock_acquire_recursive>:
 80165e2:	4770      	bx	lr

080165e4 <__retarget_lock_release_recursive>:
 80165e4:	4770      	bx	lr

080165e6 <memcpy>:
 80165e6:	440a      	add	r2, r1
 80165e8:	4291      	cmp	r1, r2
 80165ea:	f100 33ff 	add.w	r3, r0, #4294967295
 80165ee:	d100      	bne.n	80165f2 <memcpy+0xc>
 80165f0:	4770      	bx	lr
 80165f2:	b510      	push	{r4, lr}
 80165f4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80165f8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80165fc:	4291      	cmp	r1, r2
 80165fe:	d1f9      	bne.n	80165f4 <memcpy+0xe>
 8016600:	bd10      	pop	{r4, pc}
	...

08016604 <__assert_func>:
 8016604:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8016606:	4614      	mov	r4, r2
 8016608:	461a      	mov	r2, r3
 801660a:	4b09      	ldr	r3, [pc, #36]	@ (8016630 <__assert_func+0x2c>)
 801660c:	681b      	ldr	r3, [r3, #0]
 801660e:	4605      	mov	r5, r0
 8016610:	68d8      	ldr	r0, [r3, #12]
 8016612:	b954      	cbnz	r4, 801662a <__assert_func+0x26>
 8016614:	4b07      	ldr	r3, [pc, #28]	@ (8016634 <__assert_func+0x30>)
 8016616:	461c      	mov	r4, r3
 8016618:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801661c:	9100      	str	r1, [sp, #0]
 801661e:	462b      	mov	r3, r5
 8016620:	4905      	ldr	r1, [pc, #20]	@ (8016638 <__assert_func+0x34>)
 8016622:	f000 fde1 	bl	80171e8 <fiprintf>
 8016626:	f000 fe95 	bl	8017354 <abort>
 801662a:	4b04      	ldr	r3, [pc, #16]	@ (801663c <__assert_func+0x38>)
 801662c:	e7f4      	b.n	8016618 <__assert_func+0x14>
 801662e:	bf00      	nop
 8016630:	2000013c 	.word	0x2000013c
 8016634:	0801af6a 	.word	0x0801af6a
 8016638:	0801af3c 	.word	0x0801af3c
 801663c:	0801af2f 	.word	0x0801af2f

08016640 <_free_r>:
 8016640:	b538      	push	{r3, r4, r5, lr}
 8016642:	4605      	mov	r5, r0
 8016644:	2900      	cmp	r1, #0
 8016646:	d041      	beq.n	80166cc <_free_r+0x8c>
 8016648:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801664c:	1f0c      	subs	r4, r1, #4
 801664e:	2b00      	cmp	r3, #0
 8016650:	bfb8      	it	lt
 8016652:	18e4      	addlt	r4, r4, r3
 8016654:	f000 f8e8 	bl	8016828 <__malloc_lock>
 8016658:	4a1d      	ldr	r2, [pc, #116]	@ (80166d0 <_free_r+0x90>)
 801665a:	6813      	ldr	r3, [r2, #0]
 801665c:	b933      	cbnz	r3, 801666c <_free_r+0x2c>
 801665e:	6063      	str	r3, [r4, #4]
 8016660:	6014      	str	r4, [r2, #0]
 8016662:	4628      	mov	r0, r5
 8016664:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016668:	f000 b8e4 	b.w	8016834 <__malloc_unlock>
 801666c:	42a3      	cmp	r3, r4
 801666e:	d908      	bls.n	8016682 <_free_r+0x42>
 8016670:	6820      	ldr	r0, [r4, #0]
 8016672:	1821      	adds	r1, r4, r0
 8016674:	428b      	cmp	r3, r1
 8016676:	bf01      	itttt	eq
 8016678:	6819      	ldreq	r1, [r3, #0]
 801667a:	685b      	ldreq	r3, [r3, #4]
 801667c:	1809      	addeq	r1, r1, r0
 801667e:	6021      	streq	r1, [r4, #0]
 8016680:	e7ed      	b.n	801665e <_free_r+0x1e>
 8016682:	461a      	mov	r2, r3
 8016684:	685b      	ldr	r3, [r3, #4]
 8016686:	b10b      	cbz	r3, 801668c <_free_r+0x4c>
 8016688:	42a3      	cmp	r3, r4
 801668a:	d9fa      	bls.n	8016682 <_free_r+0x42>
 801668c:	6811      	ldr	r1, [r2, #0]
 801668e:	1850      	adds	r0, r2, r1
 8016690:	42a0      	cmp	r0, r4
 8016692:	d10b      	bne.n	80166ac <_free_r+0x6c>
 8016694:	6820      	ldr	r0, [r4, #0]
 8016696:	4401      	add	r1, r0
 8016698:	1850      	adds	r0, r2, r1
 801669a:	4283      	cmp	r3, r0
 801669c:	6011      	str	r1, [r2, #0]
 801669e:	d1e0      	bne.n	8016662 <_free_r+0x22>
 80166a0:	6818      	ldr	r0, [r3, #0]
 80166a2:	685b      	ldr	r3, [r3, #4]
 80166a4:	6053      	str	r3, [r2, #4]
 80166a6:	4408      	add	r0, r1
 80166a8:	6010      	str	r0, [r2, #0]
 80166aa:	e7da      	b.n	8016662 <_free_r+0x22>
 80166ac:	d902      	bls.n	80166b4 <_free_r+0x74>
 80166ae:	230c      	movs	r3, #12
 80166b0:	602b      	str	r3, [r5, #0]
 80166b2:	e7d6      	b.n	8016662 <_free_r+0x22>
 80166b4:	6820      	ldr	r0, [r4, #0]
 80166b6:	1821      	adds	r1, r4, r0
 80166b8:	428b      	cmp	r3, r1
 80166ba:	bf04      	itt	eq
 80166bc:	6819      	ldreq	r1, [r3, #0]
 80166be:	685b      	ldreq	r3, [r3, #4]
 80166c0:	6063      	str	r3, [r4, #4]
 80166c2:	bf04      	itt	eq
 80166c4:	1809      	addeq	r1, r1, r0
 80166c6:	6021      	streq	r1, [r4, #0]
 80166c8:	6054      	str	r4, [r2, #4]
 80166ca:	e7ca      	b.n	8016662 <_free_r+0x22>
 80166cc:	bd38      	pop	{r3, r4, r5, pc}
 80166ce:	bf00      	nop
 80166d0:	2000edec 	.word	0x2000edec

080166d4 <malloc>:
 80166d4:	4b02      	ldr	r3, [pc, #8]	@ (80166e0 <malloc+0xc>)
 80166d6:	4601      	mov	r1, r0
 80166d8:	6818      	ldr	r0, [r3, #0]
 80166da:	f000 b825 	b.w	8016728 <_malloc_r>
 80166de:	bf00      	nop
 80166e0:	2000013c 	.word	0x2000013c

080166e4 <sbrk_aligned>:
 80166e4:	b570      	push	{r4, r5, r6, lr}
 80166e6:	4e0f      	ldr	r6, [pc, #60]	@ (8016724 <sbrk_aligned+0x40>)
 80166e8:	460c      	mov	r4, r1
 80166ea:	6831      	ldr	r1, [r6, #0]
 80166ec:	4605      	mov	r5, r0
 80166ee:	b911      	cbnz	r1, 80166f6 <sbrk_aligned+0x12>
 80166f0:	f000 fe20 	bl	8017334 <_sbrk_r>
 80166f4:	6030      	str	r0, [r6, #0]
 80166f6:	4621      	mov	r1, r4
 80166f8:	4628      	mov	r0, r5
 80166fa:	f000 fe1b 	bl	8017334 <_sbrk_r>
 80166fe:	1c43      	adds	r3, r0, #1
 8016700:	d103      	bne.n	801670a <sbrk_aligned+0x26>
 8016702:	f04f 34ff 	mov.w	r4, #4294967295
 8016706:	4620      	mov	r0, r4
 8016708:	bd70      	pop	{r4, r5, r6, pc}
 801670a:	1cc4      	adds	r4, r0, #3
 801670c:	f024 0403 	bic.w	r4, r4, #3
 8016710:	42a0      	cmp	r0, r4
 8016712:	d0f8      	beq.n	8016706 <sbrk_aligned+0x22>
 8016714:	1a21      	subs	r1, r4, r0
 8016716:	4628      	mov	r0, r5
 8016718:	f000 fe0c 	bl	8017334 <_sbrk_r>
 801671c:	3001      	adds	r0, #1
 801671e:	d1f2      	bne.n	8016706 <sbrk_aligned+0x22>
 8016720:	e7ef      	b.n	8016702 <sbrk_aligned+0x1e>
 8016722:	bf00      	nop
 8016724:	2000ede8 	.word	0x2000ede8

08016728 <_malloc_r>:
 8016728:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801672c:	1ccd      	adds	r5, r1, #3
 801672e:	f025 0503 	bic.w	r5, r5, #3
 8016732:	3508      	adds	r5, #8
 8016734:	2d0c      	cmp	r5, #12
 8016736:	bf38      	it	cc
 8016738:	250c      	movcc	r5, #12
 801673a:	2d00      	cmp	r5, #0
 801673c:	4606      	mov	r6, r0
 801673e:	db01      	blt.n	8016744 <_malloc_r+0x1c>
 8016740:	42a9      	cmp	r1, r5
 8016742:	d904      	bls.n	801674e <_malloc_r+0x26>
 8016744:	230c      	movs	r3, #12
 8016746:	6033      	str	r3, [r6, #0]
 8016748:	2000      	movs	r0, #0
 801674a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801674e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8016824 <_malloc_r+0xfc>
 8016752:	f000 f869 	bl	8016828 <__malloc_lock>
 8016756:	f8d8 3000 	ldr.w	r3, [r8]
 801675a:	461c      	mov	r4, r3
 801675c:	bb44      	cbnz	r4, 80167b0 <_malloc_r+0x88>
 801675e:	4629      	mov	r1, r5
 8016760:	4630      	mov	r0, r6
 8016762:	f7ff ffbf 	bl	80166e4 <sbrk_aligned>
 8016766:	1c43      	adds	r3, r0, #1
 8016768:	4604      	mov	r4, r0
 801676a:	d158      	bne.n	801681e <_malloc_r+0xf6>
 801676c:	f8d8 4000 	ldr.w	r4, [r8]
 8016770:	4627      	mov	r7, r4
 8016772:	2f00      	cmp	r7, #0
 8016774:	d143      	bne.n	80167fe <_malloc_r+0xd6>
 8016776:	2c00      	cmp	r4, #0
 8016778:	d04b      	beq.n	8016812 <_malloc_r+0xea>
 801677a:	6823      	ldr	r3, [r4, #0]
 801677c:	4639      	mov	r1, r7
 801677e:	4630      	mov	r0, r6
 8016780:	eb04 0903 	add.w	r9, r4, r3
 8016784:	f000 fdd6 	bl	8017334 <_sbrk_r>
 8016788:	4581      	cmp	r9, r0
 801678a:	d142      	bne.n	8016812 <_malloc_r+0xea>
 801678c:	6821      	ldr	r1, [r4, #0]
 801678e:	1a6d      	subs	r5, r5, r1
 8016790:	4629      	mov	r1, r5
 8016792:	4630      	mov	r0, r6
 8016794:	f7ff ffa6 	bl	80166e4 <sbrk_aligned>
 8016798:	3001      	adds	r0, #1
 801679a:	d03a      	beq.n	8016812 <_malloc_r+0xea>
 801679c:	6823      	ldr	r3, [r4, #0]
 801679e:	442b      	add	r3, r5
 80167a0:	6023      	str	r3, [r4, #0]
 80167a2:	f8d8 3000 	ldr.w	r3, [r8]
 80167a6:	685a      	ldr	r2, [r3, #4]
 80167a8:	bb62      	cbnz	r2, 8016804 <_malloc_r+0xdc>
 80167aa:	f8c8 7000 	str.w	r7, [r8]
 80167ae:	e00f      	b.n	80167d0 <_malloc_r+0xa8>
 80167b0:	6822      	ldr	r2, [r4, #0]
 80167b2:	1b52      	subs	r2, r2, r5
 80167b4:	d420      	bmi.n	80167f8 <_malloc_r+0xd0>
 80167b6:	2a0b      	cmp	r2, #11
 80167b8:	d917      	bls.n	80167ea <_malloc_r+0xc2>
 80167ba:	1961      	adds	r1, r4, r5
 80167bc:	42a3      	cmp	r3, r4
 80167be:	6025      	str	r5, [r4, #0]
 80167c0:	bf18      	it	ne
 80167c2:	6059      	strne	r1, [r3, #4]
 80167c4:	6863      	ldr	r3, [r4, #4]
 80167c6:	bf08      	it	eq
 80167c8:	f8c8 1000 	streq.w	r1, [r8]
 80167cc:	5162      	str	r2, [r4, r5]
 80167ce:	604b      	str	r3, [r1, #4]
 80167d0:	4630      	mov	r0, r6
 80167d2:	f000 f82f 	bl	8016834 <__malloc_unlock>
 80167d6:	f104 000b 	add.w	r0, r4, #11
 80167da:	1d23      	adds	r3, r4, #4
 80167dc:	f020 0007 	bic.w	r0, r0, #7
 80167e0:	1ac2      	subs	r2, r0, r3
 80167e2:	bf1c      	itt	ne
 80167e4:	1a1b      	subne	r3, r3, r0
 80167e6:	50a3      	strne	r3, [r4, r2]
 80167e8:	e7af      	b.n	801674a <_malloc_r+0x22>
 80167ea:	6862      	ldr	r2, [r4, #4]
 80167ec:	42a3      	cmp	r3, r4
 80167ee:	bf0c      	ite	eq
 80167f0:	f8c8 2000 	streq.w	r2, [r8]
 80167f4:	605a      	strne	r2, [r3, #4]
 80167f6:	e7eb      	b.n	80167d0 <_malloc_r+0xa8>
 80167f8:	4623      	mov	r3, r4
 80167fa:	6864      	ldr	r4, [r4, #4]
 80167fc:	e7ae      	b.n	801675c <_malloc_r+0x34>
 80167fe:	463c      	mov	r4, r7
 8016800:	687f      	ldr	r7, [r7, #4]
 8016802:	e7b6      	b.n	8016772 <_malloc_r+0x4a>
 8016804:	461a      	mov	r2, r3
 8016806:	685b      	ldr	r3, [r3, #4]
 8016808:	42a3      	cmp	r3, r4
 801680a:	d1fb      	bne.n	8016804 <_malloc_r+0xdc>
 801680c:	2300      	movs	r3, #0
 801680e:	6053      	str	r3, [r2, #4]
 8016810:	e7de      	b.n	80167d0 <_malloc_r+0xa8>
 8016812:	230c      	movs	r3, #12
 8016814:	6033      	str	r3, [r6, #0]
 8016816:	4630      	mov	r0, r6
 8016818:	f000 f80c 	bl	8016834 <__malloc_unlock>
 801681c:	e794      	b.n	8016748 <_malloc_r+0x20>
 801681e:	6005      	str	r5, [r0, #0]
 8016820:	e7d6      	b.n	80167d0 <_malloc_r+0xa8>
 8016822:	bf00      	nop
 8016824:	2000edec 	.word	0x2000edec

08016828 <__malloc_lock>:
 8016828:	4801      	ldr	r0, [pc, #4]	@ (8016830 <__malloc_lock+0x8>)
 801682a:	f7ff beda 	b.w	80165e2 <__retarget_lock_acquire_recursive>
 801682e:	bf00      	nop
 8016830:	2000ede4 	.word	0x2000ede4

08016834 <__malloc_unlock>:
 8016834:	4801      	ldr	r0, [pc, #4]	@ (801683c <__malloc_unlock+0x8>)
 8016836:	f7ff bed5 	b.w	80165e4 <__retarget_lock_release_recursive>
 801683a:	bf00      	nop
 801683c:	2000ede4 	.word	0x2000ede4

08016840 <__ssputs_r>:
 8016840:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016844:	688e      	ldr	r6, [r1, #8]
 8016846:	461f      	mov	r7, r3
 8016848:	42be      	cmp	r6, r7
 801684a:	680b      	ldr	r3, [r1, #0]
 801684c:	4682      	mov	sl, r0
 801684e:	460c      	mov	r4, r1
 8016850:	4690      	mov	r8, r2
 8016852:	d82d      	bhi.n	80168b0 <__ssputs_r+0x70>
 8016854:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8016858:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801685c:	d026      	beq.n	80168ac <__ssputs_r+0x6c>
 801685e:	6965      	ldr	r5, [r4, #20]
 8016860:	6909      	ldr	r1, [r1, #16]
 8016862:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016866:	eba3 0901 	sub.w	r9, r3, r1
 801686a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801686e:	1c7b      	adds	r3, r7, #1
 8016870:	444b      	add	r3, r9
 8016872:	106d      	asrs	r5, r5, #1
 8016874:	429d      	cmp	r5, r3
 8016876:	bf38      	it	cc
 8016878:	461d      	movcc	r5, r3
 801687a:	0553      	lsls	r3, r2, #21
 801687c:	d527      	bpl.n	80168ce <__ssputs_r+0x8e>
 801687e:	4629      	mov	r1, r5
 8016880:	f7ff ff52 	bl	8016728 <_malloc_r>
 8016884:	4606      	mov	r6, r0
 8016886:	b360      	cbz	r0, 80168e2 <__ssputs_r+0xa2>
 8016888:	6921      	ldr	r1, [r4, #16]
 801688a:	464a      	mov	r2, r9
 801688c:	f7ff feab 	bl	80165e6 <memcpy>
 8016890:	89a3      	ldrh	r3, [r4, #12]
 8016892:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8016896:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801689a:	81a3      	strh	r3, [r4, #12]
 801689c:	6126      	str	r6, [r4, #16]
 801689e:	6165      	str	r5, [r4, #20]
 80168a0:	444e      	add	r6, r9
 80168a2:	eba5 0509 	sub.w	r5, r5, r9
 80168a6:	6026      	str	r6, [r4, #0]
 80168a8:	60a5      	str	r5, [r4, #8]
 80168aa:	463e      	mov	r6, r7
 80168ac:	42be      	cmp	r6, r7
 80168ae:	d900      	bls.n	80168b2 <__ssputs_r+0x72>
 80168b0:	463e      	mov	r6, r7
 80168b2:	6820      	ldr	r0, [r4, #0]
 80168b4:	4632      	mov	r2, r6
 80168b6:	4641      	mov	r1, r8
 80168b8:	f7ff fdaf 	bl	801641a <memmove>
 80168bc:	68a3      	ldr	r3, [r4, #8]
 80168be:	1b9b      	subs	r3, r3, r6
 80168c0:	60a3      	str	r3, [r4, #8]
 80168c2:	6823      	ldr	r3, [r4, #0]
 80168c4:	4433      	add	r3, r6
 80168c6:	6023      	str	r3, [r4, #0]
 80168c8:	2000      	movs	r0, #0
 80168ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80168ce:	462a      	mov	r2, r5
 80168d0:	f000 fd47 	bl	8017362 <_realloc_r>
 80168d4:	4606      	mov	r6, r0
 80168d6:	2800      	cmp	r0, #0
 80168d8:	d1e0      	bne.n	801689c <__ssputs_r+0x5c>
 80168da:	6921      	ldr	r1, [r4, #16]
 80168dc:	4650      	mov	r0, sl
 80168de:	f7ff feaf 	bl	8016640 <_free_r>
 80168e2:	230c      	movs	r3, #12
 80168e4:	f8ca 3000 	str.w	r3, [sl]
 80168e8:	89a3      	ldrh	r3, [r4, #12]
 80168ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80168ee:	81a3      	strh	r3, [r4, #12]
 80168f0:	f04f 30ff 	mov.w	r0, #4294967295
 80168f4:	e7e9      	b.n	80168ca <__ssputs_r+0x8a>
	...

080168f8 <_svfiprintf_r>:
 80168f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80168fc:	4698      	mov	r8, r3
 80168fe:	898b      	ldrh	r3, [r1, #12]
 8016900:	061b      	lsls	r3, r3, #24
 8016902:	b09d      	sub	sp, #116	@ 0x74
 8016904:	4607      	mov	r7, r0
 8016906:	460d      	mov	r5, r1
 8016908:	4614      	mov	r4, r2
 801690a:	d510      	bpl.n	801692e <_svfiprintf_r+0x36>
 801690c:	690b      	ldr	r3, [r1, #16]
 801690e:	b973      	cbnz	r3, 801692e <_svfiprintf_r+0x36>
 8016910:	2140      	movs	r1, #64	@ 0x40
 8016912:	f7ff ff09 	bl	8016728 <_malloc_r>
 8016916:	6028      	str	r0, [r5, #0]
 8016918:	6128      	str	r0, [r5, #16]
 801691a:	b930      	cbnz	r0, 801692a <_svfiprintf_r+0x32>
 801691c:	230c      	movs	r3, #12
 801691e:	603b      	str	r3, [r7, #0]
 8016920:	f04f 30ff 	mov.w	r0, #4294967295
 8016924:	b01d      	add	sp, #116	@ 0x74
 8016926:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801692a:	2340      	movs	r3, #64	@ 0x40
 801692c:	616b      	str	r3, [r5, #20]
 801692e:	2300      	movs	r3, #0
 8016930:	9309      	str	r3, [sp, #36]	@ 0x24
 8016932:	2320      	movs	r3, #32
 8016934:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8016938:	f8cd 800c 	str.w	r8, [sp, #12]
 801693c:	2330      	movs	r3, #48	@ 0x30
 801693e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8016adc <_svfiprintf_r+0x1e4>
 8016942:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8016946:	f04f 0901 	mov.w	r9, #1
 801694a:	4623      	mov	r3, r4
 801694c:	469a      	mov	sl, r3
 801694e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016952:	b10a      	cbz	r2, 8016958 <_svfiprintf_r+0x60>
 8016954:	2a25      	cmp	r2, #37	@ 0x25
 8016956:	d1f9      	bne.n	801694c <_svfiprintf_r+0x54>
 8016958:	ebba 0b04 	subs.w	fp, sl, r4
 801695c:	d00b      	beq.n	8016976 <_svfiprintf_r+0x7e>
 801695e:	465b      	mov	r3, fp
 8016960:	4622      	mov	r2, r4
 8016962:	4629      	mov	r1, r5
 8016964:	4638      	mov	r0, r7
 8016966:	f7ff ff6b 	bl	8016840 <__ssputs_r>
 801696a:	3001      	adds	r0, #1
 801696c:	f000 80a7 	beq.w	8016abe <_svfiprintf_r+0x1c6>
 8016970:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016972:	445a      	add	r2, fp
 8016974:	9209      	str	r2, [sp, #36]	@ 0x24
 8016976:	f89a 3000 	ldrb.w	r3, [sl]
 801697a:	2b00      	cmp	r3, #0
 801697c:	f000 809f 	beq.w	8016abe <_svfiprintf_r+0x1c6>
 8016980:	2300      	movs	r3, #0
 8016982:	f04f 32ff 	mov.w	r2, #4294967295
 8016986:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801698a:	f10a 0a01 	add.w	sl, sl, #1
 801698e:	9304      	str	r3, [sp, #16]
 8016990:	9307      	str	r3, [sp, #28]
 8016992:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8016996:	931a      	str	r3, [sp, #104]	@ 0x68
 8016998:	4654      	mov	r4, sl
 801699a:	2205      	movs	r2, #5
 801699c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80169a0:	484e      	ldr	r0, [pc, #312]	@ (8016adc <_svfiprintf_r+0x1e4>)
 80169a2:	f7e9 fc2d 	bl	8000200 <memchr>
 80169a6:	9a04      	ldr	r2, [sp, #16]
 80169a8:	b9d8      	cbnz	r0, 80169e2 <_svfiprintf_r+0xea>
 80169aa:	06d0      	lsls	r0, r2, #27
 80169ac:	bf44      	itt	mi
 80169ae:	2320      	movmi	r3, #32
 80169b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80169b4:	0711      	lsls	r1, r2, #28
 80169b6:	bf44      	itt	mi
 80169b8:	232b      	movmi	r3, #43	@ 0x2b
 80169ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80169be:	f89a 3000 	ldrb.w	r3, [sl]
 80169c2:	2b2a      	cmp	r3, #42	@ 0x2a
 80169c4:	d015      	beq.n	80169f2 <_svfiprintf_r+0xfa>
 80169c6:	9a07      	ldr	r2, [sp, #28]
 80169c8:	4654      	mov	r4, sl
 80169ca:	2000      	movs	r0, #0
 80169cc:	f04f 0c0a 	mov.w	ip, #10
 80169d0:	4621      	mov	r1, r4
 80169d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80169d6:	3b30      	subs	r3, #48	@ 0x30
 80169d8:	2b09      	cmp	r3, #9
 80169da:	d94b      	bls.n	8016a74 <_svfiprintf_r+0x17c>
 80169dc:	b1b0      	cbz	r0, 8016a0c <_svfiprintf_r+0x114>
 80169de:	9207      	str	r2, [sp, #28]
 80169e0:	e014      	b.n	8016a0c <_svfiprintf_r+0x114>
 80169e2:	eba0 0308 	sub.w	r3, r0, r8
 80169e6:	fa09 f303 	lsl.w	r3, r9, r3
 80169ea:	4313      	orrs	r3, r2
 80169ec:	9304      	str	r3, [sp, #16]
 80169ee:	46a2      	mov	sl, r4
 80169f0:	e7d2      	b.n	8016998 <_svfiprintf_r+0xa0>
 80169f2:	9b03      	ldr	r3, [sp, #12]
 80169f4:	1d19      	adds	r1, r3, #4
 80169f6:	681b      	ldr	r3, [r3, #0]
 80169f8:	9103      	str	r1, [sp, #12]
 80169fa:	2b00      	cmp	r3, #0
 80169fc:	bfbb      	ittet	lt
 80169fe:	425b      	neglt	r3, r3
 8016a00:	f042 0202 	orrlt.w	r2, r2, #2
 8016a04:	9307      	strge	r3, [sp, #28]
 8016a06:	9307      	strlt	r3, [sp, #28]
 8016a08:	bfb8      	it	lt
 8016a0a:	9204      	strlt	r2, [sp, #16]
 8016a0c:	7823      	ldrb	r3, [r4, #0]
 8016a0e:	2b2e      	cmp	r3, #46	@ 0x2e
 8016a10:	d10a      	bne.n	8016a28 <_svfiprintf_r+0x130>
 8016a12:	7863      	ldrb	r3, [r4, #1]
 8016a14:	2b2a      	cmp	r3, #42	@ 0x2a
 8016a16:	d132      	bne.n	8016a7e <_svfiprintf_r+0x186>
 8016a18:	9b03      	ldr	r3, [sp, #12]
 8016a1a:	1d1a      	adds	r2, r3, #4
 8016a1c:	681b      	ldr	r3, [r3, #0]
 8016a1e:	9203      	str	r2, [sp, #12]
 8016a20:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8016a24:	3402      	adds	r4, #2
 8016a26:	9305      	str	r3, [sp, #20]
 8016a28:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8016aec <_svfiprintf_r+0x1f4>
 8016a2c:	7821      	ldrb	r1, [r4, #0]
 8016a2e:	2203      	movs	r2, #3
 8016a30:	4650      	mov	r0, sl
 8016a32:	f7e9 fbe5 	bl	8000200 <memchr>
 8016a36:	b138      	cbz	r0, 8016a48 <_svfiprintf_r+0x150>
 8016a38:	9b04      	ldr	r3, [sp, #16]
 8016a3a:	eba0 000a 	sub.w	r0, r0, sl
 8016a3e:	2240      	movs	r2, #64	@ 0x40
 8016a40:	4082      	lsls	r2, r0
 8016a42:	4313      	orrs	r3, r2
 8016a44:	3401      	adds	r4, #1
 8016a46:	9304      	str	r3, [sp, #16]
 8016a48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016a4c:	4824      	ldr	r0, [pc, #144]	@ (8016ae0 <_svfiprintf_r+0x1e8>)
 8016a4e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8016a52:	2206      	movs	r2, #6
 8016a54:	f7e9 fbd4 	bl	8000200 <memchr>
 8016a58:	2800      	cmp	r0, #0
 8016a5a:	d036      	beq.n	8016aca <_svfiprintf_r+0x1d2>
 8016a5c:	4b21      	ldr	r3, [pc, #132]	@ (8016ae4 <_svfiprintf_r+0x1ec>)
 8016a5e:	bb1b      	cbnz	r3, 8016aa8 <_svfiprintf_r+0x1b0>
 8016a60:	9b03      	ldr	r3, [sp, #12]
 8016a62:	3307      	adds	r3, #7
 8016a64:	f023 0307 	bic.w	r3, r3, #7
 8016a68:	3308      	adds	r3, #8
 8016a6a:	9303      	str	r3, [sp, #12]
 8016a6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016a6e:	4433      	add	r3, r6
 8016a70:	9309      	str	r3, [sp, #36]	@ 0x24
 8016a72:	e76a      	b.n	801694a <_svfiprintf_r+0x52>
 8016a74:	fb0c 3202 	mla	r2, ip, r2, r3
 8016a78:	460c      	mov	r4, r1
 8016a7a:	2001      	movs	r0, #1
 8016a7c:	e7a8      	b.n	80169d0 <_svfiprintf_r+0xd8>
 8016a7e:	2300      	movs	r3, #0
 8016a80:	3401      	adds	r4, #1
 8016a82:	9305      	str	r3, [sp, #20]
 8016a84:	4619      	mov	r1, r3
 8016a86:	f04f 0c0a 	mov.w	ip, #10
 8016a8a:	4620      	mov	r0, r4
 8016a8c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016a90:	3a30      	subs	r2, #48	@ 0x30
 8016a92:	2a09      	cmp	r2, #9
 8016a94:	d903      	bls.n	8016a9e <_svfiprintf_r+0x1a6>
 8016a96:	2b00      	cmp	r3, #0
 8016a98:	d0c6      	beq.n	8016a28 <_svfiprintf_r+0x130>
 8016a9a:	9105      	str	r1, [sp, #20]
 8016a9c:	e7c4      	b.n	8016a28 <_svfiprintf_r+0x130>
 8016a9e:	fb0c 2101 	mla	r1, ip, r1, r2
 8016aa2:	4604      	mov	r4, r0
 8016aa4:	2301      	movs	r3, #1
 8016aa6:	e7f0      	b.n	8016a8a <_svfiprintf_r+0x192>
 8016aa8:	ab03      	add	r3, sp, #12
 8016aaa:	9300      	str	r3, [sp, #0]
 8016aac:	462a      	mov	r2, r5
 8016aae:	4b0e      	ldr	r3, [pc, #56]	@ (8016ae8 <_svfiprintf_r+0x1f0>)
 8016ab0:	a904      	add	r1, sp, #16
 8016ab2:	4638      	mov	r0, r7
 8016ab4:	f3af 8000 	nop.w
 8016ab8:	1c42      	adds	r2, r0, #1
 8016aba:	4606      	mov	r6, r0
 8016abc:	d1d6      	bne.n	8016a6c <_svfiprintf_r+0x174>
 8016abe:	89ab      	ldrh	r3, [r5, #12]
 8016ac0:	065b      	lsls	r3, r3, #25
 8016ac2:	f53f af2d 	bmi.w	8016920 <_svfiprintf_r+0x28>
 8016ac6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8016ac8:	e72c      	b.n	8016924 <_svfiprintf_r+0x2c>
 8016aca:	ab03      	add	r3, sp, #12
 8016acc:	9300      	str	r3, [sp, #0]
 8016ace:	462a      	mov	r2, r5
 8016ad0:	4b05      	ldr	r3, [pc, #20]	@ (8016ae8 <_svfiprintf_r+0x1f0>)
 8016ad2:	a904      	add	r1, sp, #16
 8016ad4:	4638      	mov	r0, r7
 8016ad6:	f000 f9bb 	bl	8016e50 <_printf_i>
 8016ada:	e7ed      	b.n	8016ab8 <_svfiprintf_r+0x1c0>
 8016adc:	0801af6b 	.word	0x0801af6b
 8016ae0:	0801af75 	.word	0x0801af75
 8016ae4:	00000000 	.word	0x00000000
 8016ae8:	08016841 	.word	0x08016841
 8016aec:	0801af71 	.word	0x0801af71

08016af0 <__sfputc_r>:
 8016af0:	6893      	ldr	r3, [r2, #8]
 8016af2:	3b01      	subs	r3, #1
 8016af4:	2b00      	cmp	r3, #0
 8016af6:	b410      	push	{r4}
 8016af8:	6093      	str	r3, [r2, #8]
 8016afa:	da08      	bge.n	8016b0e <__sfputc_r+0x1e>
 8016afc:	6994      	ldr	r4, [r2, #24]
 8016afe:	42a3      	cmp	r3, r4
 8016b00:	db01      	blt.n	8016b06 <__sfputc_r+0x16>
 8016b02:	290a      	cmp	r1, #10
 8016b04:	d103      	bne.n	8016b0e <__sfputc_r+0x1e>
 8016b06:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016b0a:	f000 bb7f 	b.w	801720c <__swbuf_r>
 8016b0e:	6813      	ldr	r3, [r2, #0]
 8016b10:	1c58      	adds	r0, r3, #1
 8016b12:	6010      	str	r0, [r2, #0]
 8016b14:	7019      	strb	r1, [r3, #0]
 8016b16:	4608      	mov	r0, r1
 8016b18:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016b1c:	4770      	bx	lr

08016b1e <__sfputs_r>:
 8016b1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016b20:	4606      	mov	r6, r0
 8016b22:	460f      	mov	r7, r1
 8016b24:	4614      	mov	r4, r2
 8016b26:	18d5      	adds	r5, r2, r3
 8016b28:	42ac      	cmp	r4, r5
 8016b2a:	d101      	bne.n	8016b30 <__sfputs_r+0x12>
 8016b2c:	2000      	movs	r0, #0
 8016b2e:	e007      	b.n	8016b40 <__sfputs_r+0x22>
 8016b30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016b34:	463a      	mov	r2, r7
 8016b36:	4630      	mov	r0, r6
 8016b38:	f7ff ffda 	bl	8016af0 <__sfputc_r>
 8016b3c:	1c43      	adds	r3, r0, #1
 8016b3e:	d1f3      	bne.n	8016b28 <__sfputs_r+0xa>
 8016b40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08016b44 <_vfiprintf_r>:
 8016b44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016b48:	460d      	mov	r5, r1
 8016b4a:	b09d      	sub	sp, #116	@ 0x74
 8016b4c:	4614      	mov	r4, r2
 8016b4e:	4698      	mov	r8, r3
 8016b50:	4606      	mov	r6, r0
 8016b52:	b118      	cbz	r0, 8016b5c <_vfiprintf_r+0x18>
 8016b54:	6a03      	ldr	r3, [r0, #32]
 8016b56:	b90b      	cbnz	r3, 8016b5c <_vfiprintf_r+0x18>
 8016b58:	f7ff fba4 	bl	80162a4 <__sinit>
 8016b5c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8016b5e:	07d9      	lsls	r1, r3, #31
 8016b60:	d405      	bmi.n	8016b6e <_vfiprintf_r+0x2a>
 8016b62:	89ab      	ldrh	r3, [r5, #12]
 8016b64:	059a      	lsls	r2, r3, #22
 8016b66:	d402      	bmi.n	8016b6e <_vfiprintf_r+0x2a>
 8016b68:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8016b6a:	f7ff fd3a 	bl	80165e2 <__retarget_lock_acquire_recursive>
 8016b6e:	89ab      	ldrh	r3, [r5, #12]
 8016b70:	071b      	lsls	r3, r3, #28
 8016b72:	d501      	bpl.n	8016b78 <_vfiprintf_r+0x34>
 8016b74:	692b      	ldr	r3, [r5, #16]
 8016b76:	b99b      	cbnz	r3, 8016ba0 <_vfiprintf_r+0x5c>
 8016b78:	4629      	mov	r1, r5
 8016b7a:	4630      	mov	r0, r6
 8016b7c:	f000 fb84 	bl	8017288 <__swsetup_r>
 8016b80:	b170      	cbz	r0, 8016ba0 <_vfiprintf_r+0x5c>
 8016b82:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8016b84:	07dc      	lsls	r4, r3, #31
 8016b86:	d504      	bpl.n	8016b92 <_vfiprintf_r+0x4e>
 8016b88:	f04f 30ff 	mov.w	r0, #4294967295
 8016b8c:	b01d      	add	sp, #116	@ 0x74
 8016b8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016b92:	89ab      	ldrh	r3, [r5, #12]
 8016b94:	0598      	lsls	r0, r3, #22
 8016b96:	d4f7      	bmi.n	8016b88 <_vfiprintf_r+0x44>
 8016b98:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8016b9a:	f7ff fd23 	bl	80165e4 <__retarget_lock_release_recursive>
 8016b9e:	e7f3      	b.n	8016b88 <_vfiprintf_r+0x44>
 8016ba0:	2300      	movs	r3, #0
 8016ba2:	9309      	str	r3, [sp, #36]	@ 0x24
 8016ba4:	2320      	movs	r3, #32
 8016ba6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8016baa:	f8cd 800c 	str.w	r8, [sp, #12]
 8016bae:	2330      	movs	r3, #48	@ 0x30
 8016bb0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8016d60 <_vfiprintf_r+0x21c>
 8016bb4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8016bb8:	f04f 0901 	mov.w	r9, #1
 8016bbc:	4623      	mov	r3, r4
 8016bbe:	469a      	mov	sl, r3
 8016bc0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016bc4:	b10a      	cbz	r2, 8016bca <_vfiprintf_r+0x86>
 8016bc6:	2a25      	cmp	r2, #37	@ 0x25
 8016bc8:	d1f9      	bne.n	8016bbe <_vfiprintf_r+0x7a>
 8016bca:	ebba 0b04 	subs.w	fp, sl, r4
 8016bce:	d00b      	beq.n	8016be8 <_vfiprintf_r+0xa4>
 8016bd0:	465b      	mov	r3, fp
 8016bd2:	4622      	mov	r2, r4
 8016bd4:	4629      	mov	r1, r5
 8016bd6:	4630      	mov	r0, r6
 8016bd8:	f7ff ffa1 	bl	8016b1e <__sfputs_r>
 8016bdc:	3001      	adds	r0, #1
 8016bde:	f000 80a7 	beq.w	8016d30 <_vfiprintf_r+0x1ec>
 8016be2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016be4:	445a      	add	r2, fp
 8016be6:	9209      	str	r2, [sp, #36]	@ 0x24
 8016be8:	f89a 3000 	ldrb.w	r3, [sl]
 8016bec:	2b00      	cmp	r3, #0
 8016bee:	f000 809f 	beq.w	8016d30 <_vfiprintf_r+0x1ec>
 8016bf2:	2300      	movs	r3, #0
 8016bf4:	f04f 32ff 	mov.w	r2, #4294967295
 8016bf8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016bfc:	f10a 0a01 	add.w	sl, sl, #1
 8016c00:	9304      	str	r3, [sp, #16]
 8016c02:	9307      	str	r3, [sp, #28]
 8016c04:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8016c08:	931a      	str	r3, [sp, #104]	@ 0x68
 8016c0a:	4654      	mov	r4, sl
 8016c0c:	2205      	movs	r2, #5
 8016c0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016c12:	4853      	ldr	r0, [pc, #332]	@ (8016d60 <_vfiprintf_r+0x21c>)
 8016c14:	f7e9 faf4 	bl	8000200 <memchr>
 8016c18:	9a04      	ldr	r2, [sp, #16]
 8016c1a:	b9d8      	cbnz	r0, 8016c54 <_vfiprintf_r+0x110>
 8016c1c:	06d1      	lsls	r1, r2, #27
 8016c1e:	bf44      	itt	mi
 8016c20:	2320      	movmi	r3, #32
 8016c22:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8016c26:	0713      	lsls	r3, r2, #28
 8016c28:	bf44      	itt	mi
 8016c2a:	232b      	movmi	r3, #43	@ 0x2b
 8016c2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8016c30:	f89a 3000 	ldrb.w	r3, [sl]
 8016c34:	2b2a      	cmp	r3, #42	@ 0x2a
 8016c36:	d015      	beq.n	8016c64 <_vfiprintf_r+0x120>
 8016c38:	9a07      	ldr	r2, [sp, #28]
 8016c3a:	4654      	mov	r4, sl
 8016c3c:	2000      	movs	r0, #0
 8016c3e:	f04f 0c0a 	mov.w	ip, #10
 8016c42:	4621      	mov	r1, r4
 8016c44:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016c48:	3b30      	subs	r3, #48	@ 0x30
 8016c4a:	2b09      	cmp	r3, #9
 8016c4c:	d94b      	bls.n	8016ce6 <_vfiprintf_r+0x1a2>
 8016c4e:	b1b0      	cbz	r0, 8016c7e <_vfiprintf_r+0x13a>
 8016c50:	9207      	str	r2, [sp, #28]
 8016c52:	e014      	b.n	8016c7e <_vfiprintf_r+0x13a>
 8016c54:	eba0 0308 	sub.w	r3, r0, r8
 8016c58:	fa09 f303 	lsl.w	r3, r9, r3
 8016c5c:	4313      	orrs	r3, r2
 8016c5e:	9304      	str	r3, [sp, #16]
 8016c60:	46a2      	mov	sl, r4
 8016c62:	e7d2      	b.n	8016c0a <_vfiprintf_r+0xc6>
 8016c64:	9b03      	ldr	r3, [sp, #12]
 8016c66:	1d19      	adds	r1, r3, #4
 8016c68:	681b      	ldr	r3, [r3, #0]
 8016c6a:	9103      	str	r1, [sp, #12]
 8016c6c:	2b00      	cmp	r3, #0
 8016c6e:	bfbb      	ittet	lt
 8016c70:	425b      	neglt	r3, r3
 8016c72:	f042 0202 	orrlt.w	r2, r2, #2
 8016c76:	9307      	strge	r3, [sp, #28]
 8016c78:	9307      	strlt	r3, [sp, #28]
 8016c7a:	bfb8      	it	lt
 8016c7c:	9204      	strlt	r2, [sp, #16]
 8016c7e:	7823      	ldrb	r3, [r4, #0]
 8016c80:	2b2e      	cmp	r3, #46	@ 0x2e
 8016c82:	d10a      	bne.n	8016c9a <_vfiprintf_r+0x156>
 8016c84:	7863      	ldrb	r3, [r4, #1]
 8016c86:	2b2a      	cmp	r3, #42	@ 0x2a
 8016c88:	d132      	bne.n	8016cf0 <_vfiprintf_r+0x1ac>
 8016c8a:	9b03      	ldr	r3, [sp, #12]
 8016c8c:	1d1a      	adds	r2, r3, #4
 8016c8e:	681b      	ldr	r3, [r3, #0]
 8016c90:	9203      	str	r2, [sp, #12]
 8016c92:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8016c96:	3402      	adds	r4, #2
 8016c98:	9305      	str	r3, [sp, #20]
 8016c9a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8016d70 <_vfiprintf_r+0x22c>
 8016c9e:	7821      	ldrb	r1, [r4, #0]
 8016ca0:	2203      	movs	r2, #3
 8016ca2:	4650      	mov	r0, sl
 8016ca4:	f7e9 faac 	bl	8000200 <memchr>
 8016ca8:	b138      	cbz	r0, 8016cba <_vfiprintf_r+0x176>
 8016caa:	9b04      	ldr	r3, [sp, #16]
 8016cac:	eba0 000a 	sub.w	r0, r0, sl
 8016cb0:	2240      	movs	r2, #64	@ 0x40
 8016cb2:	4082      	lsls	r2, r0
 8016cb4:	4313      	orrs	r3, r2
 8016cb6:	3401      	adds	r4, #1
 8016cb8:	9304      	str	r3, [sp, #16]
 8016cba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016cbe:	4829      	ldr	r0, [pc, #164]	@ (8016d64 <_vfiprintf_r+0x220>)
 8016cc0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8016cc4:	2206      	movs	r2, #6
 8016cc6:	f7e9 fa9b 	bl	8000200 <memchr>
 8016cca:	2800      	cmp	r0, #0
 8016ccc:	d03f      	beq.n	8016d4e <_vfiprintf_r+0x20a>
 8016cce:	4b26      	ldr	r3, [pc, #152]	@ (8016d68 <_vfiprintf_r+0x224>)
 8016cd0:	bb1b      	cbnz	r3, 8016d1a <_vfiprintf_r+0x1d6>
 8016cd2:	9b03      	ldr	r3, [sp, #12]
 8016cd4:	3307      	adds	r3, #7
 8016cd6:	f023 0307 	bic.w	r3, r3, #7
 8016cda:	3308      	adds	r3, #8
 8016cdc:	9303      	str	r3, [sp, #12]
 8016cde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016ce0:	443b      	add	r3, r7
 8016ce2:	9309      	str	r3, [sp, #36]	@ 0x24
 8016ce4:	e76a      	b.n	8016bbc <_vfiprintf_r+0x78>
 8016ce6:	fb0c 3202 	mla	r2, ip, r2, r3
 8016cea:	460c      	mov	r4, r1
 8016cec:	2001      	movs	r0, #1
 8016cee:	e7a8      	b.n	8016c42 <_vfiprintf_r+0xfe>
 8016cf0:	2300      	movs	r3, #0
 8016cf2:	3401      	adds	r4, #1
 8016cf4:	9305      	str	r3, [sp, #20]
 8016cf6:	4619      	mov	r1, r3
 8016cf8:	f04f 0c0a 	mov.w	ip, #10
 8016cfc:	4620      	mov	r0, r4
 8016cfe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016d02:	3a30      	subs	r2, #48	@ 0x30
 8016d04:	2a09      	cmp	r2, #9
 8016d06:	d903      	bls.n	8016d10 <_vfiprintf_r+0x1cc>
 8016d08:	2b00      	cmp	r3, #0
 8016d0a:	d0c6      	beq.n	8016c9a <_vfiprintf_r+0x156>
 8016d0c:	9105      	str	r1, [sp, #20]
 8016d0e:	e7c4      	b.n	8016c9a <_vfiprintf_r+0x156>
 8016d10:	fb0c 2101 	mla	r1, ip, r1, r2
 8016d14:	4604      	mov	r4, r0
 8016d16:	2301      	movs	r3, #1
 8016d18:	e7f0      	b.n	8016cfc <_vfiprintf_r+0x1b8>
 8016d1a:	ab03      	add	r3, sp, #12
 8016d1c:	9300      	str	r3, [sp, #0]
 8016d1e:	462a      	mov	r2, r5
 8016d20:	4b12      	ldr	r3, [pc, #72]	@ (8016d6c <_vfiprintf_r+0x228>)
 8016d22:	a904      	add	r1, sp, #16
 8016d24:	4630      	mov	r0, r6
 8016d26:	f3af 8000 	nop.w
 8016d2a:	4607      	mov	r7, r0
 8016d2c:	1c78      	adds	r0, r7, #1
 8016d2e:	d1d6      	bne.n	8016cde <_vfiprintf_r+0x19a>
 8016d30:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8016d32:	07d9      	lsls	r1, r3, #31
 8016d34:	d405      	bmi.n	8016d42 <_vfiprintf_r+0x1fe>
 8016d36:	89ab      	ldrh	r3, [r5, #12]
 8016d38:	059a      	lsls	r2, r3, #22
 8016d3a:	d402      	bmi.n	8016d42 <_vfiprintf_r+0x1fe>
 8016d3c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8016d3e:	f7ff fc51 	bl	80165e4 <__retarget_lock_release_recursive>
 8016d42:	89ab      	ldrh	r3, [r5, #12]
 8016d44:	065b      	lsls	r3, r3, #25
 8016d46:	f53f af1f 	bmi.w	8016b88 <_vfiprintf_r+0x44>
 8016d4a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8016d4c:	e71e      	b.n	8016b8c <_vfiprintf_r+0x48>
 8016d4e:	ab03      	add	r3, sp, #12
 8016d50:	9300      	str	r3, [sp, #0]
 8016d52:	462a      	mov	r2, r5
 8016d54:	4b05      	ldr	r3, [pc, #20]	@ (8016d6c <_vfiprintf_r+0x228>)
 8016d56:	a904      	add	r1, sp, #16
 8016d58:	4630      	mov	r0, r6
 8016d5a:	f000 f879 	bl	8016e50 <_printf_i>
 8016d5e:	e7e4      	b.n	8016d2a <_vfiprintf_r+0x1e6>
 8016d60:	0801af6b 	.word	0x0801af6b
 8016d64:	0801af75 	.word	0x0801af75
 8016d68:	00000000 	.word	0x00000000
 8016d6c:	08016b1f 	.word	0x08016b1f
 8016d70:	0801af71 	.word	0x0801af71

08016d74 <_printf_common>:
 8016d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016d78:	4616      	mov	r6, r2
 8016d7a:	4698      	mov	r8, r3
 8016d7c:	688a      	ldr	r2, [r1, #8]
 8016d7e:	690b      	ldr	r3, [r1, #16]
 8016d80:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8016d84:	4293      	cmp	r3, r2
 8016d86:	bfb8      	it	lt
 8016d88:	4613      	movlt	r3, r2
 8016d8a:	6033      	str	r3, [r6, #0]
 8016d8c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8016d90:	4607      	mov	r7, r0
 8016d92:	460c      	mov	r4, r1
 8016d94:	b10a      	cbz	r2, 8016d9a <_printf_common+0x26>
 8016d96:	3301      	adds	r3, #1
 8016d98:	6033      	str	r3, [r6, #0]
 8016d9a:	6823      	ldr	r3, [r4, #0]
 8016d9c:	0699      	lsls	r1, r3, #26
 8016d9e:	bf42      	ittt	mi
 8016da0:	6833      	ldrmi	r3, [r6, #0]
 8016da2:	3302      	addmi	r3, #2
 8016da4:	6033      	strmi	r3, [r6, #0]
 8016da6:	6825      	ldr	r5, [r4, #0]
 8016da8:	f015 0506 	ands.w	r5, r5, #6
 8016dac:	d106      	bne.n	8016dbc <_printf_common+0x48>
 8016dae:	f104 0a19 	add.w	sl, r4, #25
 8016db2:	68e3      	ldr	r3, [r4, #12]
 8016db4:	6832      	ldr	r2, [r6, #0]
 8016db6:	1a9b      	subs	r3, r3, r2
 8016db8:	42ab      	cmp	r3, r5
 8016dba:	dc26      	bgt.n	8016e0a <_printf_common+0x96>
 8016dbc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8016dc0:	6822      	ldr	r2, [r4, #0]
 8016dc2:	3b00      	subs	r3, #0
 8016dc4:	bf18      	it	ne
 8016dc6:	2301      	movne	r3, #1
 8016dc8:	0692      	lsls	r2, r2, #26
 8016dca:	d42b      	bmi.n	8016e24 <_printf_common+0xb0>
 8016dcc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8016dd0:	4641      	mov	r1, r8
 8016dd2:	4638      	mov	r0, r7
 8016dd4:	47c8      	blx	r9
 8016dd6:	3001      	adds	r0, #1
 8016dd8:	d01e      	beq.n	8016e18 <_printf_common+0xa4>
 8016dda:	6823      	ldr	r3, [r4, #0]
 8016ddc:	6922      	ldr	r2, [r4, #16]
 8016dde:	f003 0306 	and.w	r3, r3, #6
 8016de2:	2b04      	cmp	r3, #4
 8016de4:	bf02      	ittt	eq
 8016de6:	68e5      	ldreq	r5, [r4, #12]
 8016de8:	6833      	ldreq	r3, [r6, #0]
 8016dea:	1aed      	subeq	r5, r5, r3
 8016dec:	68a3      	ldr	r3, [r4, #8]
 8016dee:	bf0c      	ite	eq
 8016df0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8016df4:	2500      	movne	r5, #0
 8016df6:	4293      	cmp	r3, r2
 8016df8:	bfc4      	itt	gt
 8016dfa:	1a9b      	subgt	r3, r3, r2
 8016dfc:	18ed      	addgt	r5, r5, r3
 8016dfe:	2600      	movs	r6, #0
 8016e00:	341a      	adds	r4, #26
 8016e02:	42b5      	cmp	r5, r6
 8016e04:	d11a      	bne.n	8016e3c <_printf_common+0xc8>
 8016e06:	2000      	movs	r0, #0
 8016e08:	e008      	b.n	8016e1c <_printf_common+0xa8>
 8016e0a:	2301      	movs	r3, #1
 8016e0c:	4652      	mov	r2, sl
 8016e0e:	4641      	mov	r1, r8
 8016e10:	4638      	mov	r0, r7
 8016e12:	47c8      	blx	r9
 8016e14:	3001      	adds	r0, #1
 8016e16:	d103      	bne.n	8016e20 <_printf_common+0xac>
 8016e18:	f04f 30ff 	mov.w	r0, #4294967295
 8016e1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016e20:	3501      	adds	r5, #1
 8016e22:	e7c6      	b.n	8016db2 <_printf_common+0x3e>
 8016e24:	18e1      	adds	r1, r4, r3
 8016e26:	1c5a      	adds	r2, r3, #1
 8016e28:	2030      	movs	r0, #48	@ 0x30
 8016e2a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8016e2e:	4422      	add	r2, r4
 8016e30:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8016e34:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8016e38:	3302      	adds	r3, #2
 8016e3a:	e7c7      	b.n	8016dcc <_printf_common+0x58>
 8016e3c:	2301      	movs	r3, #1
 8016e3e:	4622      	mov	r2, r4
 8016e40:	4641      	mov	r1, r8
 8016e42:	4638      	mov	r0, r7
 8016e44:	47c8      	blx	r9
 8016e46:	3001      	adds	r0, #1
 8016e48:	d0e6      	beq.n	8016e18 <_printf_common+0xa4>
 8016e4a:	3601      	adds	r6, #1
 8016e4c:	e7d9      	b.n	8016e02 <_printf_common+0x8e>
	...

08016e50 <_printf_i>:
 8016e50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8016e54:	7e0f      	ldrb	r7, [r1, #24]
 8016e56:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8016e58:	2f78      	cmp	r7, #120	@ 0x78
 8016e5a:	4691      	mov	r9, r2
 8016e5c:	4680      	mov	r8, r0
 8016e5e:	460c      	mov	r4, r1
 8016e60:	469a      	mov	sl, r3
 8016e62:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8016e66:	d807      	bhi.n	8016e78 <_printf_i+0x28>
 8016e68:	2f62      	cmp	r7, #98	@ 0x62
 8016e6a:	d80a      	bhi.n	8016e82 <_printf_i+0x32>
 8016e6c:	2f00      	cmp	r7, #0
 8016e6e:	f000 80d2 	beq.w	8017016 <_printf_i+0x1c6>
 8016e72:	2f58      	cmp	r7, #88	@ 0x58
 8016e74:	f000 80b9 	beq.w	8016fea <_printf_i+0x19a>
 8016e78:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8016e7c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8016e80:	e03a      	b.n	8016ef8 <_printf_i+0xa8>
 8016e82:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8016e86:	2b15      	cmp	r3, #21
 8016e88:	d8f6      	bhi.n	8016e78 <_printf_i+0x28>
 8016e8a:	a101      	add	r1, pc, #4	@ (adr r1, 8016e90 <_printf_i+0x40>)
 8016e8c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8016e90:	08016ee9 	.word	0x08016ee9
 8016e94:	08016efd 	.word	0x08016efd
 8016e98:	08016e79 	.word	0x08016e79
 8016e9c:	08016e79 	.word	0x08016e79
 8016ea0:	08016e79 	.word	0x08016e79
 8016ea4:	08016e79 	.word	0x08016e79
 8016ea8:	08016efd 	.word	0x08016efd
 8016eac:	08016e79 	.word	0x08016e79
 8016eb0:	08016e79 	.word	0x08016e79
 8016eb4:	08016e79 	.word	0x08016e79
 8016eb8:	08016e79 	.word	0x08016e79
 8016ebc:	08016ffd 	.word	0x08016ffd
 8016ec0:	08016f27 	.word	0x08016f27
 8016ec4:	08016fb7 	.word	0x08016fb7
 8016ec8:	08016e79 	.word	0x08016e79
 8016ecc:	08016e79 	.word	0x08016e79
 8016ed0:	0801701f 	.word	0x0801701f
 8016ed4:	08016e79 	.word	0x08016e79
 8016ed8:	08016f27 	.word	0x08016f27
 8016edc:	08016e79 	.word	0x08016e79
 8016ee0:	08016e79 	.word	0x08016e79
 8016ee4:	08016fbf 	.word	0x08016fbf
 8016ee8:	6833      	ldr	r3, [r6, #0]
 8016eea:	1d1a      	adds	r2, r3, #4
 8016eec:	681b      	ldr	r3, [r3, #0]
 8016eee:	6032      	str	r2, [r6, #0]
 8016ef0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8016ef4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8016ef8:	2301      	movs	r3, #1
 8016efa:	e09d      	b.n	8017038 <_printf_i+0x1e8>
 8016efc:	6833      	ldr	r3, [r6, #0]
 8016efe:	6820      	ldr	r0, [r4, #0]
 8016f00:	1d19      	adds	r1, r3, #4
 8016f02:	6031      	str	r1, [r6, #0]
 8016f04:	0606      	lsls	r6, r0, #24
 8016f06:	d501      	bpl.n	8016f0c <_printf_i+0xbc>
 8016f08:	681d      	ldr	r5, [r3, #0]
 8016f0a:	e003      	b.n	8016f14 <_printf_i+0xc4>
 8016f0c:	0645      	lsls	r5, r0, #25
 8016f0e:	d5fb      	bpl.n	8016f08 <_printf_i+0xb8>
 8016f10:	f9b3 5000 	ldrsh.w	r5, [r3]
 8016f14:	2d00      	cmp	r5, #0
 8016f16:	da03      	bge.n	8016f20 <_printf_i+0xd0>
 8016f18:	232d      	movs	r3, #45	@ 0x2d
 8016f1a:	426d      	negs	r5, r5
 8016f1c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8016f20:	4859      	ldr	r0, [pc, #356]	@ (8017088 <_printf_i+0x238>)
 8016f22:	230a      	movs	r3, #10
 8016f24:	e011      	b.n	8016f4a <_printf_i+0xfa>
 8016f26:	6821      	ldr	r1, [r4, #0]
 8016f28:	6833      	ldr	r3, [r6, #0]
 8016f2a:	0608      	lsls	r0, r1, #24
 8016f2c:	f853 5b04 	ldr.w	r5, [r3], #4
 8016f30:	d402      	bmi.n	8016f38 <_printf_i+0xe8>
 8016f32:	0649      	lsls	r1, r1, #25
 8016f34:	bf48      	it	mi
 8016f36:	b2ad      	uxthmi	r5, r5
 8016f38:	2f6f      	cmp	r7, #111	@ 0x6f
 8016f3a:	4853      	ldr	r0, [pc, #332]	@ (8017088 <_printf_i+0x238>)
 8016f3c:	6033      	str	r3, [r6, #0]
 8016f3e:	bf14      	ite	ne
 8016f40:	230a      	movne	r3, #10
 8016f42:	2308      	moveq	r3, #8
 8016f44:	2100      	movs	r1, #0
 8016f46:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8016f4a:	6866      	ldr	r6, [r4, #4]
 8016f4c:	60a6      	str	r6, [r4, #8]
 8016f4e:	2e00      	cmp	r6, #0
 8016f50:	bfa2      	ittt	ge
 8016f52:	6821      	ldrge	r1, [r4, #0]
 8016f54:	f021 0104 	bicge.w	r1, r1, #4
 8016f58:	6021      	strge	r1, [r4, #0]
 8016f5a:	b90d      	cbnz	r5, 8016f60 <_printf_i+0x110>
 8016f5c:	2e00      	cmp	r6, #0
 8016f5e:	d04b      	beq.n	8016ff8 <_printf_i+0x1a8>
 8016f60:	4616      	mov	r6, r2
 8016f62:	fbb5 f1f3 	udiv	r1, r5, r3
 8016f66:	fb03 5711 	mls	r7, r3, r1, r5
 8016f6a:	5dc7      	ldrb	r7, [r0, r7]
 8016f6c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8016f70:	462f      	mov	r7, r5
 8016f72:	42bb      	cmp	r3, r7
 8016f74:	460d      	mov	r5, r1
 8016f76:	d9f4      	bls.n	8016f62 <_printf_i+0x112>
 8016f78:	2b08      	cmp	r3, #8
 8016f7a:	d10b      	bne.n	8016f94 <_printf_i+0x144>
 8016f7c:	6823      	ldr	r3, [r4, #0]
 8016f7e:	07df      	lsls	r7, r3, #31
 8016f80:	d508      	bpl.n	8016f94 <_printf_i+0x144>
 8016f82:	6923      	ldr	r3, [r4, #16]
 8016f84:	6861      	ldr	r1, [r4, #4]
 8016f86:	4299      	cmp	r1, r3
 8016f88:	bfde      	ittt	le
 8016f8a:	2330      	movle	r3, #48	@ 0x30
 8016f8c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8016f90:	f106 36ff 	addle.w	r6, r6, #4294967295
 8016f94:	1b92      	subs	r2, r2, r6
 8016f96:	6122      	str	r2, [r4, #16]
 8016f98:	f8cd a000 	str.w	sl, [sp]
 8016f9c:	464b      	mov	r3, r9
 8016f9e:	aa03      	add	r2, sp, #12
 8016fa0:	4621      	mov	r1, r4
 8016fa2:	4640      	mov	r0, r8
 8016fa4:	f7ff fee6 	bl	8016d74 <_printf_common>
 8016fa8:	3001      	adds	r0, #1
 8016faa:	d14a      	bne.n	8017042 <_printf_i+0x1f2>
 8016fac:	f04f 30ff 	mov.w	r0, #4294967295
 8016fb0:	b004      	add	sp, #16
 8016fb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016fb6:	6823      	ldr	r3, [r4, #0]
 8016fb8:	f043 0320 	orr.w	r3, r3, #32
 8016fbc:	6023      	str	r3, [r4, #0]
 8016fbe:	4833      	ldr	r0, [pc, #204]	@ (801708c <_printf_i+0x23c>)
 8016fc0:	2778      	movs	r7, #120	@ 0x78
 8016fc2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8016fc6:	6823      	ldr	r3, [r4, #0]
 8016fc8:	6831      	ldr	r1, [r6, #0]
 8016fca:	061f      	lsls	r7, r3, #24
 8016fcc:	f851 5b04 	ldr.w	r5, [r1], #4
 8016fd0:	d402      	bmi.n	8016fd8 <_printf_i+0x188>
 8016fd2:	065f      	lsls	r7, r3, #25
 8016fd4:	bf48      	it	mi
 8016fd6:	b2ad      	uxthmi	r5, r5
 8016fd8:	6031      	str	r1, [r6, #0]
 8016fda:	07d9      	lsls	r1, r3, #31
 8016fdc:	bf44      	itt	mi
 8016fde:	f043 0320 	orrmi.w	r3, r3, #32
 8016fe2:	6023      	strmi	r3, [r4, #0]
 8016fe4:	b11d      	cbz	r5, 8016fee <_printf_i+0x19e>
 8016fe6:	2310      	movs	r3, #16
 8016fe8:	e7ac      	b.n	8016f44 <_printf_i+0xf4>
 8016fea:	4827      	ldr	r0, [pc, #156]	@ (8017088 <_printf_i+0x238>)
 8016fec:	e7e9      	b.n	8016fc2 <_printf_i+0x172>
 8016fee:	6823      	ldr	r3, [r4, #0]
 8016ff0:	f023 0320 	bic.w	r3, r3, #32
 8016ff4:	6023      	str	r3, [r4, #0]
 8016ff6:	e7f6      	b.n	8016fe6 <_printf_i+0x196>
 8016ff8:	4616      	mov	r6, r2
 8016ffa:	e7bd      	b.n	8016f78 <_printf_i+0x128>
 8016ffc:	6833      	ldr	r3, [r6, #0]
 8016ffe:	6825      	ldr	r5, [r4, #0]
 8017000:	6961      	ldr	r1, [r4, #20]
 8017002:	1d18      	adds	r0, r3, #4
 8017004:	6030      	str	r0, [r6, #0]
 8017006:	062e      	lsls	r6, r5, #24
 8017008:	681b      	ldr	r3, [r3, #0]
 801700a:	d501      	bpl.n	8017010 <_printf_i+0x1c0>
 801700c:	6019      	str	r1, [r3, #0]
 801700e:	e002      	b.n	8017016 <_printf_i+0x1c6>
 8017010:	0668      	lsls	r0, r5, #25
 8017012:	d5fb      	bpl.n	801700c <_printf_i+0x1bc>
 8017014:	8019      	strh	r1, [r3, #0]
 8017016:	2300      	movs	r3, #0
 8017018:	6123      	str	r3, [r4, #16]
 801701a:	4616      	mov	r6, r2
 801701c:	e7bc      	b.n	8016f98 <_printf_i+0x148>
 801701e:	6833      	ldr	r3, [r6, #0]
 8017020:	1d1a      	adds	r2, r3, #4
 8017022:	6032      	str	r2, [r6, #0]
 8017024:	681e      	ldr	r6, [r3, #0]
 8017026:	6862      	ldr	r2, [r4, #4]
 8017028:	2100      	movs	r1, #0
 801702a:	4630      	mov	r0, r6
 801702c:	f7e9 f8e8 	bl	8000200 <memchr>
 8017030:	b108      	cbz	r0, 8017036 <_printf_i+0x1e6>
 8017032:	1b80      	subs	r0, r0, r6
 8017034:	6060      	str	r0, [r4, #4]
 8017036:	6863      	ldr	r3, [r4, #4]
 8017038:	6123      	str	r3, [r4, #16]
 801703a:	2300      	movs	r3, #0
 801703c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8017040:	e7aa      	b.n	8016f98 <_printf_i+0x148>
 8017042:	6923      	ldr	r3, [r4, #16]
 8017044:	4632      	mov	r2, r6
 8017046:	4649      	mov	r1, r9
 8017048:	4640      	mov	r0, r8
 801704a:	47d0      	blx	sl
 801704c:	3001      	adds	r0, #1
 801704e:	d0ad      	beq.n	8016fac <_printf_i+0x15c>
 8017050:	6823      	ldr	r3, [r4, #0]
 8017052:	079b      	lsls	r3, r3, #30
 8017054:	d413      	bmi.n	801707e <_printf_i+0x22e>
 8017056:	68e0      	ldr	r0, [r4, #12]
 8017058:	9b03      	ldr	r3, [sp, #12]
 801705a:	4298      	cmp	r0, r3
 801705c:	bfb8      	it	lt
 801705e:	4618      	movlt	r0, r3
 8017060:	e7a6      	b.n	8016fb0 <_printf_i+0x160>
 8017062:	2301      	movs	r3, #1
 8017064:	4632      	mov	r2, r6
 8017066:	4649      	mov	r1, r9
 8017068:	4640      	mov	r0, r8
 801706a:	47d0      	blx	sl
 801706c:	3001      	adds	r0, #1
 801706e:	d09d      	beq.n	8016fac <_printf_i+0x15c>
 8017070:	3501      	adds	r5, #1
 8017072:	68e3      	ldr	r3, [r4, #12]
 8017074:	9903      	ldr	r1, [sp, #12]
 8017076:	1a5b      	subs	r3, r3, r1
 8017078:	42ab      	cmp	r3, r5
 801707a:	dcf2      	bgt.n	8017062 <_printf_i+0x212>
 801707c:	e7eb      	b.n	8017056 <_printf_i+0x206>
 801707e:	2500      	movs	r5, #0
 8017080:	f104 0619 	add.w	r6, r4, #25
 8017084:	e7f5      	b.n	8017072 <_printf_i+0x222>
 8017086:	bf00      	nop
 8017088:	0801af7c 	.word	0x0801af7c
 801708c:	0801af8d 	.word	0x0801af8d

08017090 <__sflush_r>:
 8017090:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8017094:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017098:	0716      	lsls	r6, r2, #28
 801709a:	4605      	mov	r5, r0
 801709c:	460c      	mov	r4, r1
 801709e:	d454      	bmi.n	801714a <__sflush_r+0xba>
 80170a0:	684b      	ldr	r3, [r1, #4]
 80170a2:	2b00      	cmp	r3, #0
 80170a4:	dc02      	bgt.n	80170ac <__sflush_r+0x1c>
 80170a6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80170a8:	2b00      	cmp	r3, #0
 80170aa:	dd48      	ble.n	801713e <__sflush_r+0xae>
 80170ac:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80170ae:	2e00      	cmp	r6, #0
 80170b0:	d045      	beq.n	801713e <__sflush_r+0xae>
 80170b2:	2300      	movs	r3, #0
 80170b4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80170b8:	682f      	ldr	r7, [r5, #0]
 80170ba:	6a21      	ldr	r1, [r4, #32]
 80170bc:	602b      	str	r3, [r5, #0]
 80170be:	d030      	beq.n	8017122 <__sflush_r+0x92>
 80170c0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80170c2:	89a3      	ldrh	r3, [r4, #12]
 80170c4:	0759      	lsls	r1, r3, #29
 80170c6:	d505      	bpl.n	80170d4 <__sflush_r+0x44>
 80170c8:	6863      	ldr	r3, [r4, #4]
 80170ca:	1ad2      	subs	r2, r2, r3
 80170cc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80170ce:	b10b      	cbz	r3, 80170d4 <__sflush_r+0x44>
 80170d0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80170d2:	1ad2      	subs	r2, r2, r3
 80170d4:	2300      	movs	r3, #0
 80170d6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80170d8:	6a21      	ldr	r1, [r4, #32]
 80170da:	4628      	mov	r0, r5
 80170dc:	47b0      	blx	r6
 80170de:	1c43      	adds	r3, r0, #1
 80170e0:	89a3      	ldrh	r3, [r4, #12]
 80170e2:	d106      	bne.n	80170f2 <__sflush_r+0x62>
 80170e4:	6829      	ldr	r1, [r5, #0]
 80170e6:	291d      	cmp	r1, #29
 80170e8:	d82b      	bhi.n	8017142 <__sflush_r+0xb2>
 80170ea:	4a2a      	ldr	r2, [pc, #168]	@ (8017194 <__sflush_r+0x104>)
 80170ec:	410a      	asrs	r2, r1
 80170ee:	07d6      	lsls	r6, r2, #31
 80170f0:	d427      	bmi.n	8017142 <__sflush_r+0xb2>
 80170f2:	2200      	movs	r2, #0
 80170f4:	6062      	str	r2, [r4, #4]
 80170f6:	04d9      	lsls	r1, r3, #19
 80170f8:	6922      	ldr	r2, [r4, #16]
 80170fa:	6022      	str	r2, [r4, #0]
 80170fc:	d504      	bpl.n	8017108 <__sflush_r+0x78>
 80170fe:	1c42      	adds	r2, r0, #1
 8017100:	d101      	bne.n	8017106 <__sflush_r+0x76>
 8017102:	682b      	ldr	r3, [r5, #0]
 8017104:	b903      	cbnz	r3, 8017108 <__sflush_r+0x78>
 8017106:	6560      	str	r0, [r4, #84]	@ 0x54
 8017108:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801710a:	602f      	str	r7, [r5, #0]
 801710c:	b1b9      	cbz	r1, 801713e <__sflush_r+0xae>
 801710e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8017112:	4299      	cmp	r1, r3
 8017114:	d002      	beq.n	801711c <__sflush_r+0x8c>
 8017116:	4628      	mov	r0, r5
 8017118:	f7ff fa92 	bl	8016640 <_free_r>
 801711c:	2300      	movs	r3, #0
 801711e:	6363      	str	r3, [r4, #52]	@ 0x34
 8017120:	e00d      	b.n	801713e <__sflush_r+0xae>
 8017122:	2301      	movs	r3, #1
 8017124:	4628      	mov	r0, r5
 8017126:	47b0      	blx	r6
 8017128:	4602      	mov	r2, r0
 801712a:	1c50      	adds	r0, r2, #1
 801712c:	d1c9      	bne.n	80170c2 <__sflush_r+0x32>
 801712e:	682b      	ldr	r3, [r5, #0]
 8017130:	2b00      	cmp	r3, #0
 8017132:	d0c6      	beq.n	80170c2 <__sflush_r+0x32>
 8017134:	2b1d      	cmp	r3, #29
 8017136:	d001      	beq.n	801713c <__sflush_r+0xac>
 8017138:	2b16      	cmp	r3, #22
 801713a:	d11e      	bne.n	801717a <__sflush_r+0xea>
 801713c:	602f      	str	r7, [r5, #0]
 801713e:	2000      	movs	r0, #0
 8017140:	e022      	b.n	8017188 <__sflush_r+0xf8>
 8017142:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017146:	b21b      	sxth	r3, r3
 8017148:	e01b      	b.n	8017182 <__sflush_r+0xf2>
 801714a:	690f      	ldr	r7, [r1, #16]
 801714c:	2f00      	cmp	r7, #0
 801714e:	d0f6      	beq.n	801713e <__sflush_r+0xae>
 8017150:	0793      	lsls	r3, r2, #30
 8017152:	680e      	ldr	r6, [r1, #0]
 8017154:	bf08      	it	eq
 8017156:	694b      	ldreq	r3, [r1, #20]
 8017158:	600f      	str	r7, [r1, #0]
 801715a:	bf18      	it	ne
 801715c:	2300      	movne	r3, #0
 801715e:	eba6 0807 	sub.w	r8, r6, r7
 8017162:	608b      	str	r3, [r1, #8]
 8017164:	f1b8 0f00 	cmp.w	r8, #0
 8017168:	dde9      	ble.n	801713e <__sflush_r+0xae>
 801716a:	6a21      	ldr	r1, [r4, #32]
 801716c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801716e:	4643      	mov	r3, r8
 8017170:	463a      	mov	r2, r7
 8017172:	4628      	mov	r0, r5
 8017174:	47b0      	blx	r6
 8017176:	2800      	cmp	r0, #0
 8017178:	dc08      	bgt.n	801718c <__sflush_r+0xfc>
 801717a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801717e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017182:	81a3      	strh	r3, [r4, #12]
 8017184:	f04f 30ff 	mov.w	r0, #4294967295
 8017188:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801718c:	4407      	add	r7, r0
 801718e:	eba8 0800 	sub.w	r8, r8, r0
 8017192:	e7e7      	b.n	8017164 <__sflush_r+0xd4>
 8017194:	dfbffffe 	.word	0xdfbffffe

08017198 <_fflush_r>:
 8017198:	b538      	push	{r3, r4, r5, lr}
 801719a:	690b      	ldr	r3, [r1, #16]
 801719c:	4605      	mov	r5, r0
 801719e:	460c      	mov	r4, r1
 80171a0:	b913      	cbnz	r3, 80171a8 <_fflush_r+0x10>
 80171a2:	2500      	movs	r5, #0
 80171a4:	4628      	mov	r0, r5
 80171a6:	bd38      	pop	{r3, r4, r5, pc}
 80171a8:	b118      	cbz	r0, 80171b2 <_fflush_r+0x1a>
 80171aa:	6a03      	ldr	r3, [r0, #32]
 80171ac:	b90b      	cbnz	r3, 80171b2 <_fflush_r+0x1a>
 80171ae:	f7ff f879 	bl	80162a4 <__sinit>
 80171b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80171b6:	2b00      	cmp	r3, #0
 80171b8:	d0f3      	beq.n	80171a2 <_fflush_r+0xa>
 80171ba:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80171bc:	07d0      	lsls	r0, r2, #31
 80171be:	d404      	bmi.n	80171ca <_fflush_r+0x32>
 80171c0:	0599      	lsls	r1, r3, #22
 80171c2:	d402      	bmi.n	80171ca <_fflush_r+0x32>
 80171c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80171c6:	f7ff fa0c 	bl	80165e2 <__retarget_lock_acquire_recursive>
 80171ca:	4628      	mov	r0, r5
 80171cc:	4621      	mov	r1, r4
 80171ce:	f7ff ff5f 	bl	8017090 <__sflush_r>
 80171d2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80171d4:	07da      	lsls	r2, r3, #31
 80171d6:	4605      	mov	r5, r0
 80171d8:	d4e4      	bmi.n	80171a4 <_fflush_r+0xc>
 80171da:	89a3      	ldrh	r3, [r4, #12]
 80171dc:	059b      	lsls	r3, r3, #22
 80171de:	d4e1      	bmi.n	80171a4 <_fflush_r+0xc>
 80171e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80171e2:	f7ff f9ff 	bl	80165e4 <__retarget_lock_release_recursive>
 80171e6:	e7dd      	b.n	80171a4 <_fflush_r+0xc>

080171e8 <fiprintf>:
 80171e8:	b40e      	push	{r1, r2, r3}
 80171ea:	b503      	push	{r0, r1, lr}
 80171ec:	4601      	mov	r1, r0
 80171ee:	ab03      	add	r3, sp, #12
 80171f0:	4805      	ldr	r0, [pc, #20]	@ (8017208 <fiprintf+0x20>)
 80171f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80171f6:	6800      	ldr	r0, [r0, #0]
 80171f8:	9301      	str	r3, [sp, #4]
 80171fa:	f7ff fca3 	bl	8016b44 <_vfiprintf_r>
 80171fe:	b002      	add	sp, #8
 8017200:	f85d eb04 	ldr.w	lr, [sp], #4
 8017204:	b003      	add	sp, #12
 8017206:	4770      	bx	lr
 8017208:	2000013c 	.word	0x2000013c

0801720c <__swbuf_r>:
 801720c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801720e:	460e      	mov	r6, r1
 8017210:	4614      	mov	r4, r2
 8017212:	4605      	mov	r5, r0
 8017214:	b118      	cbz	r0, 801721e <__swbuf_r+0x12>
 8017216:	6a03      	ldr	r3, [r0, #32]
 8017218:	b90b      	cbnz	r3, 801721e <__swbuf_r+0x12>
 801721a:	f7ff f843 	bl	80162a4 <__sinit>
 801721e:	69a3      	ldr	r3, [r4, #24]
 8017220:	60a3      	str	r3, [r4, #8]
 8017222:	89a3      	ldrh	r3, [r4, #12]
 8017224:	071a      	lsls	r2, r3, #28
 8017226:	d501      	bpl.n	801722c <__swbuf_r+0x20>
 8017228:	6923      	ldr	r3, [r4, #16]
 801722a:	b943      	cbnz	r3, 801723e <__swbuf_r+0x32>
 801722c:	4621      	mov	r1, r4
 801722e:	4628      	mov	r0, r5
 8017230:	f000 f82a 	bl	8017288 <__swsetup_r>
 8017234:	b118      	cbz	r0, 801723e <__swbuf_r+0x32>
 8017236:	f04f 37ff 	mov.w	r7, #4294967295
 801723a:	4638      	mov	r0, r7
 801723c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801723e:	6823      	ldr	r3, [r4, #0]
 8017240:	6922      	ldr	r2, [r4, #16]
 8017242:	1a98      	subs	r0, r3, r2
 8017244:	6963      	ldr	r3, [r4, #20]
 8017246:	b2f6      	uxtb	r6, r6
 8017248:	4283      	cmp	r3, r0
 801724a:	4637      	mov	r7, r6
 801724c:	dc05      	bgt.n	801725a <__swbuf_r+0x4e>
 801724e:	4621      	mov	r1, r4
 8017250:	4628      	mov	r0, r5
 8017252:	f7ff ffa1 	bl	8017198 <_fflush_r>
 8017256:	2800      	cmp	r0, #0
 8017258:	d1ed      	bne.n	8017236 <__swbuf_r+0x2a>
 801725a:	68a3      	ldr	r3, [r4, #8]
 801725c:	3b01      	subs	r3, #1
 801725e:	60a3      	str	r3, [r4, #8]
 8017260:	6823      	ldr	r3, [r4, #0]
 8017262:	1c5a      	adds	r2, r3, #1
 8017264:	6022      	str	r2, [r4, #0]
 8017266:	701e      	strb	r6, [r3, #0]
 8017268:	6962      	ldr	r2, [r4, #20]
 801726a:	1c43      	adds	r3, r0, #1
 801726c:	429a      	cmp	r2, r3
 801726e:	d004      	beq.n	801727a <__swbuf_r+0x6e>
 8017270:	89a3      	ldrh	r3, [r4, #12]
 8017272:	07db      	lsls	r3, r3, #31
 8017274:	d5e1      	bpl.n	801723a <__swbuf_r+0x2e>
 8017276:	2e0a      	cmp	r6, #10
 8017278:	d1df      	bne.n	801723a <__swbuf_r+0x2e>
 801727a:	4621      	mov	r1, r4
 801727c:	4628      	mov	r0, r5
 801727e:	f7ff ff8b 	bl	8017198 <_fflush_r>
 8017282:	2800      	cmp	r0, #0
 8017284:	d0d9      	beq.n	801723a <__swbuf_r+0x2e>
 8017286:	e7d6      	b.n	8017236 <__swbuf_r+0x2a>

08017288 <__swsetup_r>:
 8017288:	b538      	push	{r3, r4, r5, lr}
 801728a:	4b29      	ldr	r3, [pc, #164]	@ (8017330 <__swsetup_r+0xa8>)
 801728c:	4605      	mov	r5, r0
 801728e:	6818      	ldr	r0, [r3, #0]
 8017290:	460c      	mov	r4, r1
 8017292:	b118      	cbz	r0, 801729c <__swsetup_r+0x14>
 8017294:	6a03      	ldr	r3, [r0, #32]
 8017296:	b90b      	cbnz	r3, 801729c <__swsetup_r+0x14>
 8017298:	f7ff f804 	bl	80162a4 <__sinit>
 801729c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80172a0:	0719      	lsls	r1, r3, #28
 80172a2:	d422      	bmi.n	80172ea <__swsetup_r+0x62>
 80172a4:	06da      	lsls	r2, r3, #27
 80172a6:	d407      	bmi.n	80172b8 <__swsetup_r+0x30>
 80172a8:	2209      	movs	r2, #9
 80172aa:	602a      	str	r2, [r5, #0]
 80172ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80172b0:	81a3      	strh	r3, [r4, #12]
 80172b2:	f04f 30ff 	mov.w	r0, #4294967295
 80172b6:	e033      	b.n	8017320 <__swsetup_r+0x98>
 80172b8:	0758      	lsls	r0, r3, #29
 80172ba:	d512      	bpl.n	80172e2 <__swsetup_r+0x5a>
 80172bc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80172be:	b141      	cbz	r1, 80172d2 <__swsetup_r+0x4a>
 80172c0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80172c4:	4299      	cmp	r1, r3
 80172c6:	d002      	beq.n	80172ce <__swsetup_r+0x46>
 80172c8:	4628      	mov	r0, r5
 80172ca:	f7ff f9b9 	bl	8016640 <_free_r>
 80172ce:	2300      	movs	r3, #0
 80172d0:	6363      	str	r3, [r4, #52]	@ 0x34
 80172d2:	89a3      	ldrh	r3, [r4, #12]
 80172d4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80172d8:	81a3      	strh	r3, [r4, #12]
 80172da:	2300      	movs	r3, #0
 80172dc:	6063      	str	r3, [r4, #4]
 80172de:	6923      	ldr	r3, [r4, #16]
 80172e0:	6023      	str	r3, [r4, #0]
 80172e2:	89a3      	ldrh	r3, [r4, #12]
 80172e4:	f043 0308 	orr.w	r3, r3, #8
 80172e8:	81a3      	strh	r3, [r4, #12]
 80172ea:	6923      	ldr	r3, [r4, #16]
 80172ec:	b94b      	cbnz	r3, 8017302 <__swsetup_r+0x7a>
 80172ee:	89a3      	ldrh	r3, [r4, #12]
 80172f0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80172f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80172f8:	d003      	beq.n	8017302 <__swsetup_r+0x7a>
 80172fa:	4621      	mov	r1, r4
 80172fc:	4628      	mov	r0, r5
 80172fe:	f000 f884 	bl	801740a <__smakebuf_r>
 8017302:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017306:	f013 0201 	ands.w	r2, r3, #1
 801730a:	d00a      	beq.n	8017322 <__swsetup_r+0x9a>
 801730c:	2200      	movs	r2, #0
 801730e:	60a2      	str	r2, [r4, #8]
 8017310:	6962      	ldr	r2, [r4, #20]
 8017312:	4252      	negs	r2, r2
 8017314:	61a2      	str	r2, [r4, #24]
 8017316:	6922      	ldr	r2, [r4, #16]
 8017318:	b942      	cbnz	r2, 801732c <__swsetup_r+0xa4>
 801731a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801731e:	d1c5      	bne.n	80172ac <__swsetup_r+0x24>
 8017320:	bd38      	pop	{r3, r4, r5, pc}
 8017322:	0799      	lsls	r1, r3, #30
 8017324:	bf58      	it	pl
 8017326:	6962      	ldrpl	r2, [r4, #20]
 8017328:	60a2      	str	r2, [r4, #8]
 801732a:	e7f4      	b.n	8017316 <__swsetup_r+0x8e>
 801732c:	2000      	movs	r0, #0
 801732e:	e7f7      	b.n	8017320 <__swsetup_r+0x98>
 8017330:	2000013c 	.word	0x2000013c

08017334 <_sbrk_r>:
 8017334:	b538      	push	{r3, r4, r5, lr}
 8017336:	4d06      	ldr	r5, [pc, #24]	@ (8017350 <_sbrk_r+0x1c>)
 8017338:	2300      	movs	r3, #0
 801733a:	4604      	mov	r4, r0
 801733c:	4608      	mov	r0, r1
 801733e:	602b      	str	r3, [r5, #0]
 8017340:	f7ea f91e 	bl	8001580 <_sbrk>
 8017344:	1c43      	adds	r3, r0, #1
 8017346:	d102      	bne.n	801734e <_sbrk_r+0x1a>
 8017348:	682b      	ldr	r3, [r5, #0]
 801734a:	b103      	cbz	r3, 801734e <_sbrk_r+0x1a>
 801734c:	6023      	str	r3, [r4, #0]
 801734e:	bd38      	pop	{r3, r4, r5, pc}
 8017350:	2000ede0 	.word	0x2000ede0

08017354 <abort>:
 8017354:	b508      	push	{r3, lr}
 8017356:	2006      	movs	r0, #6
 8017358:	f000 f8bc 	bl	80174d4 <raise>
 801735c:	2001      	movs	r0, #1
 801735e:	f7ea f897 	bl	8001490 <_exit>

08017362 <_realloc_r>:
 8017362:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017366:	4680      	mov	r8, r0
 8017368:	4615      	mov	r5, r2
 801736a:	460c      	mov	r4, r1
 801736c:	b921      	cbnz	r1, 8017378 <_realloc_r+0x16>
 801736e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017372:	4611      	mov	r1, r2
 8017374:	f7ff b9d8 	b.w	8016728 <_malloc_r>
 8017378:	b92a      	cbnz	r2, 8017386 <_realloc_r+0x24>
 801737a:	f7ff f961 	bl	8016640 <_free_r>
 801737e:	2400      	movs	r4, #0
 8017380:	4620      	mov	r0, r4
 8017382:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017386:	f000 f8e3 	bl	8017550 <_malloc_usable_size_r>
 801738a:	4285      	cmp	r5, r0
 801738c:	4606      	mov	r6, r0
 801738e:	d802      	bhi.n	8017396 <_realloc_r+0x34>
 8017390:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8017394:	d8f4      	bhi.n	8017380 <_realloc_r+0x1e>
 8017396:	4629      	mov	r1, r5
 8017398:	4640      	mov	r0, r8
 801739a:	f7ff f9c5 	bl	8016728 <_malloc_r>
 801739e:	4607      	mov	r7, r0
 80173a0:	2800      	cmp	r0, #0
 80173a2:	d0ec      	beq.n	801737e <_realloc_r+0x1c>
 80173a4:	42b5      	cmp	r5, r6
 80173a6:	462a      	mov	r2, r5
 80173a8:	4621      	mov	r1, r4
 80173aa:	bf28      	it	cs
 80173ac:	4632      	movcs	r2, r6
 80173ae:	f7ff f91a 	bl	80165e6 <memcpy>
 80173b2:	4621      	mov	r1, r4
 80173b4:	4640      	mov	r0, r8
 80173b6:	f7ff f943 	bl	8016640 <_free_r>
 80173ba:	463c      	mov	r4, r7
 80173bc:	e7e0      	b.n	8017380 <_realloc_r+0x1e>

080173be <__swhatbuf_r>:
 80173be:	b570      	push	{r4, r5, r6, lr}
 80173c0:	460c      	mov	r4, r1
 80173c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80173c6:	2900      	cmp	r1, #0
 80173c8:	b096      	sub	sp, #88	@ 0x58
 80173ca:	4615      	mov	r5, r2
 80173cc:	461e      	mov	r6, r3
 80173ce:	da0d      	bge.n	80173ec <__swhatbuf_r+0x2e>
 80173d0:	89a3      	ldrh	r3, [r4, #12]
 80173d2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80173d6:	f04f 0100 	mov.w	r1, #0
 80173da:	bf14      	ite	ne
 80173dc:	2340      	movne	r3, #64	@ 0x40
 80173de:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80173e2:	2000      	movs	r0, #0
 80173e4:	6031      	str	r1, [r6, #0]
 80173e6:	602b      	str	r3, [r5, #0]
 80173e8:	b016      	add	sp, #88	@ 0x58
 80173ea:	bd70      	pop	{r4, r5, r6, pc}
 80173ec:	466a      	mov	r2, sp
 80173ee:	f000 f879 	bl	80174e4 <_fstat_r>
 80173f2:	2800      	cmp	r0, #0
 80173f4:	dbec      	blt.n	80173d0 <__swhatbuf_r+0x12>
 80173f6:	9901      	ldr	r1, [sp, #4]
 80173f8:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80173fc:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8017400:	4259      	negs	r1, r3
 8017402:	4159      	adcs	r1, r3
 8017404:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8017408:	e7eb      	b.n	80173e2 <__swhatbuf_r+0x24>

0801740a <__smakebuf_r>:
 801740a:	898b      	ldrh	r3, [r1, #12]
 801740c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801740e:	079d      	lsls	r5, r3, #30
 8017410:	4606      	mov	r6, r0
 8017412:	460c      	mov	r4, r1
 8017414:	d507      	bpl.n	8017426 <__smakebuf_r+0x1c>
 8017416:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801741a:	6023      	str	r3, [r4, #0]
 801741c:	6123      	str	r3, [r4, #16]
 801741e:	2301      	movs	r3, #1
 8017420:	6163      	str	r3, [r4, #20]
 8017422:	b003      	add	sp, #12
 8017424:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017426:	ab01      	add	r3, sp, #4
 8017428:	466a      	mov	r2, sp
 801742a:	f7ff ffc8 	bl	80173be <__swhatbuf_r>
 801742e:	9f00      	ldr	r7, [sp, #0]
 8017430:	4605      	mov	r5, r0
 8017432:	4639      	mov	r1, r7
 8017434:	4630      	mov	r0, r6
 8017436:	f7ff f977 	bl	8016728 <_malloc_r>
 801743a:	b948      	cbnz	r0, 8017450 <__smakebuf_r+0x46>
 801743c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017440:	059a      	lsls	r2, r3, #22
 8017442:	d4ee      	bmi.n	8017422 <__smakebuf_r+0x18>
 8017444:	f023 0303 	bic.w	r3, r3, #3
 8017448:	f043 0302 	orr.w	r3, r3, #2
 801744c:	81a3      	strh	r3, [r4, #12]
 801744e:	e7e2      	b.n	8017416 <__smakebuf_r+0xc>
 8017450:	89a3      	ldrh	r3, [r4, #12]
 8017452:	6020      	str	r0, [r4, #0]
 8017454:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8017458:	81a3      	strh	r3, [r4, #12]
 801745a:	9b01      	ldr	r3, [sp, #4]
 801745c:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8017460:	b15b      	cbz	r3, 801747a <__smakebuf_r+0x70>
 8017462:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017466:	4630      	mov	r0, r6
 8017468:	f000 f84e 	bl	8017508 <_isatty_r>
 801746c:	b128      	cbz	r0, 801747a <__smakebuf_r+0x70>
 801746e:	89a3      	ldrh	r3, [r4, #12]
 8017470:	f023 0303 	bic.w	r3, r3, #3
 8017474:	f043 0301 	orr.w	r3, r3, #1
 8017478:	81a3      	strh	r3, [r4, #12]
 801747a:	89a3      	ldrh	r3, [r4, #12]
 801747c:	431d      	orrs	r5, r3
 801747e:	81a5      	strh	r5, [r4, #12]
 8017480:	e7cf      	b.n	8017422 <__smakebuf_r+0x18>

08017482 <_raise_r>:
 8017482:	291f      	cmp	r1, #31
 8017484:	b538      	push	{r3, r4, r5, lr}
 8017486:	4605      	mov	r5, r0
 8017488:	460c      	mov	r4, r1
 801748a:	d904      	bls.n	8017496 <_raise_r+0x14>
 801748c:	2316      	movs	r3, #22
 801748e:	6003      	str	r3, [r0, #0]
 8017490:	f04f 30ff 	mov.w	r0, #4294967295
 8017494:	bd38      	pop	{r3, r4, r5, pc}
 8017496:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8017498:	b112      	cbz	r2, 80174a0 <_raise_r+0x1e>
 801749a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801749e:	b94b      	cbnz	r3, 80174b4 <_raise_r+0x32>
 80174a0:	4628      	mov	r0, r5
 80174a2:	f000 f853 	bl	801754c <_getpid_r>
 80174a6:	4622      	mov	r2, r4
 80174a8:	4601      	mov	r1, r0
 80174aa:	4628      	mov	r0, r5
 80174ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80174b0:	f000 b83a 	b.w	8017528 <_kill_r>
 80174b4:	2b01      	cmp	r3, #1
 80174b6:	d00a      	beq.n	80174ce <_raise_r+0x4c>
 80174b8:	1c59      	adds	r1, r3, #1
 80174ba:	d103      	bne.n	80174c4 <_raise_r+0x42>
 80174bc:	2316      	movs	r3, #22
 80174be:	6003      	str	r3, [r0, #0]
 80174c0:	2001      	movs	r0, #1
 80174c2:	e7e7      	b.n	8017494 <_raise_r+0x12>
 80174c4:	2100      	movs	r1, #0
 80174c6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80174ca:	4620      	mov	r0, r4
 80174cc:	4798      	blx	r3
 80174ce:	2000      	movs	r0, #0
 80174d0:	e7e0      	b.n	8017494 <_raise_r+0x12>
	...

080174d4 <raise>:
 80174d4:	4b02      	ldr	r3, [pc, #8]	@ (80174e0 <raise+0xc>)
 80174d6:	4601      	mov	r1, r0
 80174d8:	6818      	ldr	r0, [r3, #0]
 80174da:	f7ff bfd2 	b.w	8017482 <_raise_r>
 80174de:	bf00      	nop
 80174e0:	2000013c 	.word	0x2000013c

080174e4 <_fstat_r>:
 80174e4:	b538      	push	{r3, r4, r5, lr}
 80174e6:	4d07      	ldr	r5, [pc, #28]	@ (8017504 <_fstat_r+0x20>)
 80174e8:	2300      	movs	r3, #0
 80174ea:	4604      	mov	r4, r0
 80174ec:	4608      	mov	r0, r1
 80174ee:	4611      	mov	r1, r2
 80174f0:	602b      	str	r3, [r5, #0]
 80174f2:	f7ea f81d 	bl	8001530 <_fstat>
 80174f6:	1c43      	adds	r3, r0, #1
 80174f8:	d102      	bne.n	8017500 <_fstat_r+0x1c>
 80174fa:	682b      	ldr	r3, [r5, #0]
 80174fc:	b103      	cbz	r3, 8017500 <_fstat_r+0x1c>
 80174fe:	6023      	str	r3, [r4, #0]
 8017500:	bd38      	pop	{r3, r4, r5, pc}
 8017502:	bf00      	nop
 8017504:	2000ede0 	.word	0x2000ede0

08017508 <_isatty_r>:
 8017508:	b538      	push	{r3, r4, r5, lr}
 801750a:	4d06      	ldr	r5, [pc, #24]	@ (8017524 <_isatty_r+0x1c>)
 801750c:	2300      	movs	r3, #0
 801750e:	4604      	mov	r4, r0
 8017510:	4608      	mov	r0, r1
 8017512:	602b      	str	r3, [r5, #0]
 8017514:	f7ea f81c 	bl	8001550 <_isatty>
 8017518:	1c43      	adds	r3, r0, #1
 801751a:	d102      	bne.n	8017522 <_isatty_r+0x1a>
 801751c:	682b      	ldr	r3, [r5, #0]
 801751e:	b103      	cbz	r3, 8017522 <_isatty_r+0x1a>
 8017520:	6023      	str	r3, [r4, #0]
 8017522:	bd38      	pop	{r3, r4, r5, pc}
 8017524:	2000ede0 	.word	0x2000ede0

08017528 <_kill_r>:
 8017528:	b538      	push	{r3, r4, r5, lr}
 801752a:	4d07      	ldr	r5, [pc, #28]	@ (8017548 <_kill_r+0x20>)
 801752c:	2300      	movs	r3, #0
 801752e:	4604      	mov	r4, r0
 8017530:	4608      	mov	r0, r1
 8017532:	4611      	mov	r1, r2
 8017534:	602b      	str	r3, [r5, #0]
 8017536:	f7e9 ff99 	bl	800146c <_kill>
 801753a:	1c43      	adds	r3, r0, #1
 801753c:	d102      	bne.n	8017544 <_kill_r+0x1c>
 801753e:	682b      	ldr	r3, [r5, #0]
 8017540:	b103      	cbz	r3, 8017544 <_kill_r+0x1c>
 8017542:	6023      	str	r3, [r4, #0]
 8017544:	bd38      	pop	{r3, r4, r5, pc}
 8017546:	bf00      	nop
 8017548:	2000ede0 	.word	0x2000ede0

0801754c <_getpid_r>:
 801754c:	f7e9 bf86 	b.w	800145c <_getpid>

08017550 <_malloc_usable_size_r>:
 8017550:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017554:	1f18      	subs	r0, r3, #4
 8017556:	2b00      	cmp	r3, #0
 8017558:	bfbc      	itt	lt
 801755a:	580b      	ldrlt	r3, [r1, r0]
 801755c:	18c0      	addlt	r0, r0, r3
 801755e:	4770      	bx	lr

08017560 <_init>:
 8017560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017562:	bf00      	nop
 8017564:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017566:	bc08      	pop	{r3}
 8017568:	469e      	mov	lr, r3
 801756a:	4770      	bx	lr

0801756c <_fini>:
 801756c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801756e:	bf00      	nop
 8017570:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017572:	bc08      	pop	{r3}
 8017574:	469e      	mov	lr, r3
 8017576:	4770      	bx	lr
