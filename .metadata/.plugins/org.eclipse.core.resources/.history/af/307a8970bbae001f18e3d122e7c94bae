Esta versión NETCONN5 tiene las siguientes configuraciones:
CMSIS_V1 para que funcione TCP/IP y no se cuelgue.. También se hace el server init:
void tcpserver_init(void) {
	sys_thread_new("tcp_thread", tcp_thread, NULL, DEFAULT_THREAD_STACKSIZE,
			osPriorityNormal);
}
 se dejó DEFAULT_THREAD_STACKSIZE y no se multiplicó por 8 como estaba en el ejemplo de servidor
 
 Además dejo los valores originales de la configuración lwip:
 #define MEM_SIZE (20 * 1024) // 20 KB  (tenía 10 * 1024 y lo pasé a 20)
#define TCP_SND_BUF 1072 bytes(s)
#define TCP_WND (4 * TCP_MSS) (tiene 2144)

Finalmente volví la prioridad de Ethernet a 5 como la configuró el IDE

*************************************************************************************
Pruebas de funciones Modbus

//Inicio pruebas con respuestas reales 22/10/24
//Prueba función leer Coils
uint8_t mb_req_buf[] = {0xAA,0x55,0x00,0x00,0x00,0x06,0x2A,0x01,0x00,0x00,0x00,0x20};
//Prueba función leer holding
//uint8_t mb_req_buf[] = {0xAA,0x55,0x00,0x00,0x00,0x06,0x2A,0x03,0x00,0x00,0x00,0x02};
//Prueba función leer discrete
//uint8_t mb_req_buf[] = {0xAA,0x55,0x00,0x00,0x00,0x06,0x2A,0x02,0x00,0x00,0x00,0x4};
//Prueba función para escribir un coil
//uint8_t mb_req_buf[] = {0xAA,0x55,0x00,0x00,0x00,0x06,0x2A,0x05,0x00,0x01,0xFF,0x00};
//Prueba función para escribir un registro
//uint8_t mb_req_buf[] = {0xAA,0x55,0x00,0x00,0x00,0x06,0x2A,0x06,0x00,0x01,0x55,0x80};
//Prueba función leer entradas analógica
//uint8_t mb_req_buf[] = {0xAA,0x55,0x00,0x00,0x00,0x06,0x2A,0x04,0x00,0x00,0x00,0x4};

**************************************************************************************